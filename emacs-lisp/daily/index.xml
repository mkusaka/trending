<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T01:38:37Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>plexus/chemacs2</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/plexus/chemacs2</id>
    <link href="https://github.com/plexus/chemacs2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs version switcher, improved&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+BEGIN_SRC ___ ___ ___ ___ ___ ___ ___ / /\ /&lt;strong&gt;/\ / /\ /&lt;/strong&gt;/\ / /\ / /\ / /&lt;br&gt; / /:/ \ :\ / /:/_ | |::\ / /::\ / /:/ / /:/_ / /:/ _&lt;em&gt;:\ / /:/ /\ | |:|:\ / /:/:\ / /:/ / /:/ /&lt;br&gt; / /:/ ___ ___ / /::\ / /:/ /:/&lt;/em&gt; &lt;strong&gt;|&lt;/strong&gt;|:|:\ / /:/&lt;del&gt;/::\ / /:/ ___ / /:/ /::&lt;br&gt; /&lt;strong&gt;/:/ / /\ /&lt;/strong&gt;/\ /:/:\ /&lt;strong&gt;/:/ /:/ /\ /&lt;/strong&gt;/::::| :\ /&lt;strong&gt;/:/ /:/:\ /&lt;/strong&gt;/:/ / /\ /&lt;strong&gt;/:/ /:/:&lt;br&gt; \ :\ / /:/ \ :/:/&lt;/strong&gt;/ \ :/:/ /:/ \ :~&lt;/del&gt;_&lt;em&gt;/ \ :/:/__/ \ :\ / /:/ \ :/:/~/:/ \ :\ /:/ \ ::/ \ ::/ /:/ \ :\ \ ::/ \ :\ /:/ \ \2.0 /:/ \ :/:/ \ :\ \ :/:/ \ :\ \ :\ \ :/:/ _&lt;/em&gt;/ /:/ \ ::/ \ :\ \ ::/ \ :\ \ :\ \ ::/ /__/:/ _&lt;em&gt;/ _&lt;/em&gt;/ _&lt;em&gt;/ _&lt;/em&gt;/ _&lt;em&gt;/ _&lt;/em&gt;/ __/&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                      222222222222222&#xA;                                     2:::::::::::::::22&#xA;                                     2::::::222222:::::2&#xA;                                     2222222     2:::::2&#xA;                                                 2:::::2&#xA;                                                 2:::::2&#xA;                                              2222::::2&#xA;                                         22222::::::22&#xA;                                       22::::::::222&#xA;                                      2:::::22222&#xA;                                     2:::::2&#xA;                                     2:::::2&#xA;                                     2:::::2       222222&#xA;                                     2::::::2222222:::::2&#xA;                                     2::::::::::::::::::2&#xA;                                     22222222222222222222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chemacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Chemacs 2 is an Emacs profile switcher, it makes it easy to run multiple Emacs configurations side by side.&lt;/p&gt; &#xA;&lt;p&gt;Think of it as a bootloader for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;** Differences from Chemacs 1&lt;/p&gt; &#xA;&lt;p&gt;Emacs intialization used to have a single entry point, either =&lt;del&gt;/.emacs= or =&lt;/del&gt;/.emacs.d/init.el=. More recent Emacsen have introduced a second startup script, =~/.emacs.d/early-init.el=, which runs earlier in the boot process, and can be used for things that should happen very early on, like tweaking the GC, or disabling UI elements.&lt;/p&gt; &#xA;&lt;p&gt;Chemacs 2 supports =early-init.el=, Chemacs 1 does not. This does also imply that Chemacs 2 needs to be installed as =&lt;del&gt;/.emacs.d= (a directory), rather than simply linking it to =&lt;/del&gt;/.emacs= (a single file).&lt;/p&gt; &#xA;&lt;p&gt;** Rationale&lt;/p&gt; &#xA;&lt;p&gt;Emacs configuration is either kept in a =&lt;del&gt;/.emacs= file or, more commonly, in a =&lt;/del&gt;/.emacs.d= directory. These paths are hard-coded. If you want to try out someone else&#39;s configuration, or run different distributions like Prelude or Spacemacs, then you either need to swap out =~/.emacs.d=, or run Emacs with a different =$HOME= directory set.&lt;/p&gt; &#xA;&lt;p&gt;This last approach is quite common, but has some real drawbacks, since now packages will no longer know where your actual home directory is.&lt;/p&gt; &#xA;&lt;p&gt;All of these makes trying out different Emacs configurations and distributions needlessly cumbersome.&lt;/p&gt; &#xA;&lt;p&gt;Various approaches to solving this have been floated over the years. There&#39;s an Emacs patch around that adds an extra command line option, and various examples of how to add a command line option in userspace from Emacs Lisp.&lt;/p&gt; &#xA;&lt;p&gt;Chemacs tries to implement this idea in a user-friendly way, taking care of the various edge cases and use cases that come up.&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;Clone the Chemacs 2 repository as =$HOME/.emacs.d=. Note that if you already have an Emacs setup in =&lt;del&gt;/.emacs.d= you need to move it out of the way first. If you have an =&lt;/del&gt;/.emacs= startup script then move that out of the way as well.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell [ -f ~/.emacs ] &amp;amp;&amp;amp; mv ~/.emacs ~/.emacs.bak [ -d ~/.emacs.d ] &amp;amp;&amp;amp; mv ~/.emacs.d ~/.emacs.default git clone &lt;a href=&#34;https://github.com/plexus/chemacs2.git&#34;&gt;https://github.com/plexus/chemacs2.git&lt;/a&gt; ~/.emacs.d #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Note that this is different from Chemacs 1. Before Chemacs installed itself as =&lt;del&gt;/.emacs= and you could have your own default setup in =&lt;/del&gt;/.emacs.d=. This approach no longer works because of =&lt;del&gt;/.emacs.d/early-init.el=, so Chemacs 2 needs to be installed as =&lt;/del&gt;/.emacs.d=.&lt;/p&gt; &#xA;&lt;p&gt;Next you will need to create a =~/.emacs-profiles.el= file, for details see below.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ((&#34;default&#34; . ((user-emacs-directory . &#34;~/.emacs.default&#34;)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;Chemacs adds an extra command line option to Emacs, =--with-profile=. Profiles are configured in =~/.emacs-profiles.el=.&lt;/p&gt; &#xA;&lt;p&gt;If no profile is given at the command line then the environment variable CHEMACS_PROFILE is used. If this environment variables isn&#39;t set then the =default= profile is used.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell $ emacs --with-profile my-profile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;There is an option for using profile that is not preconfigured in =~/.emacs-profiles.el=. To accomplish that you can directly provide the profile via the command line, like so #+BEGIN_SRC shell $ emacs --with-profile &#39;((user-emacs-directory . &#34;/path/to/config&#34;))&#39; #+END_SRC This method supports all the profile options given below.&lt;/p&gt; &#xA;&lt;p&gt;** .emacs-profiles.el&lt;/p&gt; &#xA;&lt;p&gt;This file contains an association list, with the keys/cars being the profile names, and the values/cdrs their configuration.&lt;/p&gt; &#xA;&lt;p&gt;The main thing to configure is the =user-emacs-directory=&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ((&#34;default&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/.emacs.default&#34;))) (&#34;spacemacs&#34; . ((user-emacs-directory . &#34;&lt;/del&gt;/spacemacs&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Chemacs will set this to be the =user-emacs-directory= in use, and load =init.el= from that directory.&lt;/p&gt; &#xA;&lt;p&gt;Other things you can configure&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=custom-file= : The file where Customize stores its customizations. If this isn&#39;t configured, and the =custom-file= variable is still unset after loading the profile&#39;s =init.el=, then this will get set to the profile&#39;s =init.el=&lt;/li&gt; &#xA; &lt;li&gt;=server-name= : Sets the =server-name= variable, so you can distinguish multiple instances with =emacsclient -s &#xA;  &lt;server-name&gt;&#xA;   =.&#xA;  &lt;/server-name&gt;&lt;/li&gt; &#xA; &lt;li&gt;=env= An association list of environment variables. These will get set before loading the profile, so they can influence the initialization, and they are visible to any subprocesses spawned from Emacs.&lt;/li&gt; &#xA; &lt;li&gt;=straight-p= Enable the [[https://github.com/raxod502/straight.el][Straight]] functional package manager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Store =.emacs-profiles.el= together with your dotfiles. If you&#39;re not yet keeping a version controlled directory of dotfiles, then check out [[https://github.com/plexus/dotfiles/blob/master/connect-the-dots][connect-the-dots]] for a helpful script to do that.&lt;/p&gt; &#xA;&lt;p&gt;** Changing the default profile (e.g. for GUI editors)&lt;/p&gt; &#xA;&lt;p&gt;Where it is not possible to use the =--with-profile= flag or the CHEMACS_PROFILE environment variable, the default profile can be set using a =~/.emacs-profile= file.&lt;/p&gt; &#xA;&lt;p&gt;If your =~/.emacs-profiles.el= file contains the following:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ((&#34;default&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/.emacs.default&#34;))) (&#34;spacemacs&#34; . ((user-emacs-directory . &#34;&lt;/del&gt;/spacemacs&#34;))) (&#34;prelude&#34; . ((user-emacs-directory . &#34;~/prelude&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;you can create a file called =~/.emacs-profile=, containing the name of the profile you&#39;d like to be used when none is given on the command line:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell $ echo &#39;spacemacs&#39; &amp;gt; ~/.emacs-profile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This will set the default profile to be the &#34;spacemacs&#34; profile, instead of &#34;default&#34;. You can change the default by simply changing the contents of this file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell $ echo &#39;prelude&#39; &amp;gt; ~/.emacs-profile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;If this file doesn&#39;t exist, then &#34;default&#34; will be used, as before.&lt;/p&gt; &#xA;&lt;p&gt;** Spacemacs&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs is typically installed by cloning the Spacemacs repo to =&lt;del&gt;/.emacs.d=, and doing extra customization from =&lt;/del&gt;/.spacemacs= or =~/.spacemacs.d/init.el=. This makes it tedious to switch between version of Spacemacs, or between different Spacemacs configurations.&lt;/p&gt; &#xA;&lt;p&gt;With Chemacs you can point your =user-emacs-directory= to wherever you have Spacemacs installed, and use the =SPACEMACSDIR= environment variable to point at a directory with customizations that are applied on top of the base install.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ((&#34;spacemacs&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/spacemacs&#34;) (env . ((&#34;SPACEMACSDIR&#34; . &#34;&lt;/del&gt;/.spacemacs.d&#34;)))))&lt;/p&gt; &#xA;&lt;p&gt;(&#34;spacemacs-develop&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/spacemacs/develop&#34;) (env . ((&#34;SPACEMACSDIR&#34; . &#34;&lt;/del&gt;/.spacemacs.d&#34;)))))&lt;/p&gt; &#xA;&lt;p&gt;(&#34;new-config&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/spacemacs/develop&#34;) (env . ((&#34;SPACEMACSDIR&#34; . &#34;&lt;/del&gt;/my-spacemacs-config&#34;)))))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** DOOM emacs&lt;/p&gt; &#xA;&lt;p&gt;You can add an entry similar to the following to your =.emacs-profiles.el=&lt;/p&gt; &#xA;&lt;p&gt;In the following snippet =~/doom-emacs= is where you have cloned doom emacs.&lt;/p&gt; &#xA;&lt;p&gt;(Depending on when you read this) =DOOMDIR= support is only in =develop= branch of doom emacs. Check commit history of =master= branch of doom emacs&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (&#34;doom&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/doom-emacs&#34;) (env . ((&#34;DOOMDIR&#34; . &#34;&lt;/del&gt;/doom-config&#34;))))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Please refer to [[https://github.com/plexus/chemacs/issues/5][this]] discussion for details.&lt;/p&gt; &#xA;&lt;p&gt;** FreeDesktop Directories&lt;/p&gt; &#xA;&lt;p&gt;Both =&lt;del&gt;/.emacs-profiles.el= and =&lt;/del&gt;/.emacs-profile= can also be stored under =$XDG_CONFIG_HOME/chemacs= (typically =~/.config/chemacs=) as =$XGD_CONFIG_HOME/chemacs/profiles.el= and =$XDG_CONFIG_HOME/chemacs/profile= respectively.&lt;/p&gt; &#xA;&lt;p&gt;Further, as indicated by the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS?h=emacs-27][Emacs 27.1 changelog]], Emacs is now compatible with XDG Standards, looking for its configuration files in =${XDG_CONFIG_HOME}/emacs= directory too (provided the traditional =&lt;del&gt;/.emacs.d= and =&lt;/del&gt;/.emacs= does not exist). Therefore, it is perfectly viable to install Chemacs 2 in =${XDG_CONFIG_HOME}/emacs= (usually =&lt;del&gt;/.config/emacs=) directory - with the aforementioned caveat: _the directory =&lt;/del&gt;/.emacs.d&#34;= and the file =&#34;~/.emacs&#34;= does not exist_.&lt;/p&gt; &#xA;&lt;p&gt;** Example: emacs as daemon&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Profiles You can add an entry similar to the following to your =.emacs-profiles.el= #+BEGIN_SRC emacs-lisp ;; your custom or vanilla emacs profile ((&#34;default&#34; . ((user-emacs-directory . &#34;~/.gnu-emacs&#34;) (server-name . &#34;gnu&#34;) ))&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;;; emacs distribution: DOOM-emacs (&#34;doom&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/.doom-emacs&#34;) (server-name . &#34;doom&#34;) (env . ((&#34;DOOMDIR&#34; . &#34;&lt;/del&gt;/.doom.d&#34;))) )) ) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;daemon Set emacs daemon to always run in background #+begin_src bash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;vanilla&lt;/h1&gt; &#xA;&lt;p&gt;emacs --daemon &amp;amp;&lt;/p&gt; &#xA;&lt;h1&gt;Doom emacs&lt;/h1&gt; &#xA;&lt;p&gt;emacs --with-profile doom --daemon &amp;amp; #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;emacsclient create a new frame, connect to the socket and use vanilla emacs as fallback #+begin_src bash emacsclient -c -s gnu -a emacs emacsclient -c -s doom -a emacs #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Troubleshooting&lt;/p&gt; &#xA;&lt;p&gt;*** Emacs cannot find packages installed by straight Some users have [[https://github.com/plexus/chemacs2/issues/31][reported issues]] where packages installed by &lt;code&gt;straight.el&lt;/code&gt; can no longer be found after switching to using &lt;code&gt;chemacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, make sure you haven&#39;t hardcoded filepaths to &#34;emacs.d&#34; in your configuration. You should reference files inside a profile-specific emacs folder like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq some-var (expand-file-name &#34;path/to/file&#34; user-emacs-directory)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Second, if the issue persists you should delete the &lt;code&gt;build&lt;/code&gt; folder in your &lt;code&gt;straight&lt;/code&gt; directory and rebuild your dependencies.&lt;/p&gt; &#xA;&lt;p&gt;If the issue persists please [[https://github.com/plexus/chemacs2/issues/31][comment on the issue]], because we are still trying to figure out the exact source of this problem, but this has solved the problem for some users.&lt;/p&gt; &#xA;&lt;p&gt;** LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright © Arne Brasseur and contributors, 2018-2022&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the terms of the GPL v3.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doomemacs/doomemacs</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/doomemacs/doomemacs</id>
    <link href="https://github.com/doomemacs/doomemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Doom Emacs&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt; • &lt;a href=&#34;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&#34;&gt;Screenshots&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&#34; alt=&#34;Made with Doom Emacs&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Supports-Emacs_27.1--28.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Supports Emacs 27.1 - 28.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/doomemacs/doomemacs/master?style=flat-square&#34; alt=&#34;Latest commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square&#34; alt=&#34;Build status: master&#34;&gt; &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.doomemacs.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&#34; alt=&#34;Discourse server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&#34; alt=&#34;Doom Emacs Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&#34;&gt;Getting help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;a href=&#34;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Doom is a configuration framework for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; &#xA;&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; &#xA; &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; &#xA; &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; &#xA; &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; &#xA; &lt;li&gt;A declarative &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; &#xA; &lt;li&gt;Optional vim emulation powered by &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&#34;&gt;more&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; &#xA; &lt;li&gt;A Spacemacs-esque &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&#34;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; &#xA; &lt;li&gt;A rule-based &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&#34;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; &#xA; &lt;li&gt;Per-file indentation style detection and &lt;a href=&#34;http://editorconfig.org/&#34;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; &#xA; &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;ivy&lt;/a&gt; or &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; &#xA; &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; &#xA; &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git 2.23+&lt;/li&gt; &#xA; &lt;li&gt;Emacs 27.1+ (&lt;em&gt;27.2 is recommended&lt;/em&gt;, or &lt;a href=&#34;https://www.emacswiki.org/emacs/GccEmacs&#34;&gt;native-comp&lt;/a&gt;. &lt;strong&gt;29+ is not supported&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; &#xA; &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Doom is comprised of &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d&#xA;~/.emacs.d/bin/doom install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&#34;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.emacs.d/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom build&lt;/code&gt; to recompile all installed packages (use this if you up/downgrade Emacs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/6&#34;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/5&#34;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/7&#34;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting help&lt;/h1&gt; &#xA;&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Our documentation&lt;/a&gt; covers many use cases. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&#34;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&#34;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&#34;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&#34;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&#34;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; &#xA;   &lt;li&gt;Your issue may be documented in the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues&#34;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&#34; alt=&#34;Donate on liberapay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&#34;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t hesitate to &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues/new&#34;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;liberapay&lt;/a&gt; or &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>minad/vertico</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/minad/vertico</id>
    <link href="https://github.com/minad/vertico" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💫 vertico.el - VERTical Interactive COmpletion&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: vertico.el - VERTical Interactive COmpletion #+author: Daniel Mendler #+language: en #+export_file_name: vertico.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Vertico: (vertico). #+texinfo_dir_desc: VERTical Interactive COmpletion.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/vertico.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/vertico.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Vertigomovie_restoration.jpg/800px-Vertigomovie_restoration.jpg&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The main focus of Vertico is to provide a UI which behaves /correctly/ under all circumstances. By reusing the built-in facilities system, Vertico achieves /full compatibility/ with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extensible and modular. Additional enhancements are available as [[#extensions][extensions]] or [[#complementary-packages][complementary packages]]. The code base is small and maintainable. The main &lt;del&gt;vertico.el&lt;/del&gt; package is only about 600 lines of code without white space and comments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertical display with arrow key navigation. See the [[#extensions][extensions]] for additional display modes.&lt;/li&gt; &#xA; &lt;li&gt;Prompt shows the current candidate index and the total number of candidates.&lt;/li&gt; &#xA; &lt;li&gt;The current candidate is inserted with =TAB= and selected with =RET=.&lt;/li&gt; &#xA; &lt;li&gt;Non-existing candidates can be submitted with =M-RET= or by moving the point to the prompt.&lt;/li&gt; &#xA; &lt;li&gt;Configurable sorting by history position, length and alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;Long candidates with newlines are formatted to take up less space.&lt;/li&gt; &#xA; &lt;li&gt;Deferred completion style highlighting for performance.&lt;/li&gt; &#xA; &lt;li&gt;Annotations are displayed next to the candidates (&lt;del&gt;annotation-&lt;/del&gt; and &lt;del&gt;affixation-function&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Support for candidate grouping and group cycling commands (&lt;del&gt;group-function&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-mx.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico defines its own local keymap in the minibuffer which is derived from &lt;del&gt;minibuffer-local-map&lt;/del&gt;. The keymap keeps most of the &lt;del&gt;fundamental-mode&lt;/del&gt; keybindings intact and remaps and binds only a handful of commands. Note in particular the binding of =TAB= to &lt;del&gt;vertico-insert&lt;/del&gt; and the bindings of &lt;del&gt;vertico-exit/exit-input&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;beginning-of-buffer&lt;/del&gt;, &lt;del&gt;minibuffer-beginning-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-first&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;end-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-last&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-down-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-down&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-up-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-up&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;next-line&lt;/del&gt;, &lt;del&gt;next-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;previous-line&lt;/del&gt;, &lt;del&gt;previous-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;forward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;backward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;exit-minibuffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-exit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;kill-ring-save&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-save&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-RET= -&amp;gt; &lt;del&gt;vertico-exit-input&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=TAB= -&amp;gt; &lt;del&gt;vertico-insert&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is available from [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]]. You can install it directly via &lt;del&gt;package-install&lt;/del&gt;. After installation, you can activate the global minor mode with =M-x vertico-mode=. In order to configure Vertico and other packages in your init.el, you may want to take advantage of &lt;del&gt;use-package&lt;/del&gt;. Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico (use-package vertico :init (vertico-mode)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Different scroll margin&#xA;;; (setq vertico-scroll-margin 0)&#xA;&#xA;;; Show more candidates&#xA;;; (setq vertico-count 20)&#xA;&#xA;;; Grow and shrink the Vertico minibuffer&#xA;;; (setq vertico-resize t)&#xA;&#xA;;; Optionally enable cycling for `vertico-next&#39; and `vertico-previous&#39;.&#xA;;; (setq vertico-cycle t)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;;; Persist history over Emacs restarts. Vertico sorts by history position. (use-package savehist :init (savehist-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; A few more useful configurations... (use-package emacs :init ;; Add prompt indicator to &lt;code&gt;completing-read-multiple&#39;. ;; We display [CRM&amp;lt;separator&amp;gt;], e.g., [CRM,] if the separator is a comma. (defun crm-indicator (args) (cons (format &#34;[CRM%s] %s&#34; (replace-regexp-in-string &#34;\\&lt;/code&gt;\[.&lt;em&gt;?]\&lt;/em&gt;\|\[.&lt;em&gt;?]\&lt;/em&gt;\&#39;&#34; &#34;&#34; crm-separator) (car args)) (cdr args))) (advice-add #&#39;completing-read-multiple :filter-args #&#39;crm-indicator)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Do not allow the cursor in the minibuffer prompt&#xA;(setq minibuffer-prompt-properties&#xA;      &#39;(read-only t cursor-intangible t face minibuffer-prompt))&#xA;(add-hook &#39;minibuffer-setup-hook #&#39;cursor-intangible-mode)&#xA;&#xA;;; Emacs 28: Hide commands in M-x which do not work in the current mode.&#xA;;; Vertico commands are hidden in normal buffers.&#xA;;; (setq read-extended-command-predicate&#xA;;;       #&#39;command-completion-default-include-p)&#xA;&#xA;;; Enable recursive minibuffers&#xA;(setq enable-recursive-minibuffers t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;I recommend to give Orderless completion a try, which is different from the prefix TAB completion used by the basic default completion system or in shells.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Optionally use the `orderless&#39; completion style. (use-package orderless :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers &#39;(+orderless-dispatch) ;; orderless-component-separator #&#39;orderless-escapable-split-on-space) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles partial-completion))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. See =+orderless-dispatch= in the [[https://github.com/minad/consult/wiki][Consult wiki]] for an advanced Orderless style dispatcher. Additionally enable =partial-completion= for file path expansion. =partial-completion= is important for file wildcard support. Multiple files can be opened at once with =find-file= if you enter a wildcard. You may also give the =initials= completion style a try.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[https://github.com/minad/vertico/wiki][Vertico Wiki]] for additional configuration tips. For more general documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want to create your own completion commands, you can find documentation about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Completion styles and TAB completion&lt;/p&gt; &#xA;&lt;p&gt;The bindings of the &lt;del&gt;minibuffer-local-completion-map&lt;/del&gt; are not available in Vertico by default. This means that TAB works differently from what you may expect from the default Emacs completion system.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to have the default completion commands a key press away you can add new bindings or even replace the Vertico bindings. Then the default completion commands behave as usual. For example you can use =M-TAB= to cycle between candidates if you have set &lt;del&gt;completion-cycle-threshold&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;?&#34; #&#39;minibuffer-completion-help) (define-key vertico-map (kbd &#34;M-RET&#34;) #&#39;minibuffer-force-complete-and-exit) (define-key vertico-map (kbd &#34;M-TAB&#34;) #&#39;minibuffer-complete) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;orderless&lt;/del&gt; completion style does not support completion of a common prefix substring, as you may be familiar with from shells or the basic default completion system. The reason is that the Orderless input string is usually not a prefix. In order to support completing prefixes you may want to combine &lt;del&gt;orderless&lt;/del&gt; with &lt;del&gt;substring&lt;/del&gt; in your =completion-styles= configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(substring orderless basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can experiment with the built-in completion-styles, e.g., adding =partial-completion= or =flex=. The =partial-completion= style is important to add if you want to open multiple files at once with &lt;del&gt;find-file&lt;/del&gt; using wildcards. In order to open multiple files at once, you have to move to the prompt and then press =RET=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic substring partial-completion flex)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Because Vertico is fully compatible with Emacs default completion system, further customization of completion behavior can be achieved by setting the designated Emacs variables. For example, one may wish to disable case-sensitivity for file and buffer matching when built-in completion styles are used instead of &lt;del&gt;orderless&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq read-file-name-completion-ignore-case t read-buffer-completion-ignore-case t completion-ignore-case t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completion-at-point and completion-in-region&lt;/p&gt; &#xA;&lt;p&gt;The =completion-at-point= command is usually bound to =M-TAB= or =TAB=. In case you want to use Vertico for completion-at-point/completion-in-region, you can use the function &lt;del&gt;consult-completion-in-region&lt;/del&gt; provided by the Consult package.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =completion-in-region-function= setting also affects TAB completion in the minibuffer when =M-:= (&lt;del&gt;eval-expression&lt;/del&gt;) is used.&lt;/p&gt; &#xA;&lt;p&gt;You may also want to look into my [[https://github.com/minad/corfu][Corfu]] package, which provides a minimal completion system for =completion-in-region= in a child frame popup. Corfu is also a narrowly focused package and developed in the same spirit as Vertico.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensions :properties: :custom_id: extensions &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We maintain small extension packages to Vertico in this repository in the subdirectory [[https://github.com/minad/vertico/tree/main/extensions][extensions/]]. The extensions are installed together with Vertico if you pull the package from ELPA. The extensions are inactive by default and can be enabled manually if desired. Furthermore it is possible to install all of the files separately, both &lt;del&gt;vertico.el&lt;/del&gt; and the &lt;del&gt;vertico-*.el&lt;/del&gt; extensions. Currently the following extensions come with the Vertico ELPA package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-buffer.el][vertico-buffer]]: =vertico-buffer-mode= to display Vertico in a separate buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-directory.el][vertico-directory]]: Commands for Ido-like directory navigation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-flat.el][vertico-flat]]: =vertico-flat-mode= to enable a flat, horizontal display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-grid.el][vertico-grid]]: =vertico-grid-mode= to enable a grid display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-indexed.el][vertico-indexed]]: =vertico-indexed-mode= to select indexed candidates with prefix arguments.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-mouse.el][vertico-mouse]]: =vertico-mouse-mode= to support for scrolling and candidate selection.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-multiform.el][vertico-multiform]]: Configure Vertico modes per command or completion category.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-quick.el][vertico-quick]]: Commands to select using Avy-style quick keys.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-repeat.el][vertico-repeat]]: The command =vertico-repeat= repeats the last completion session.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-reverse.el][vertico-reverse]]: =vertico-reverse-mode= to reverse the display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-unobtrusive.el][vertico-unobtrusive]]: =vertico-unobtrusive-mode= displays only the topmost candidate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the Commentary of those files for configuration details. With these extensions it is possible to adapt Vertico such that it matches your preference or behaves similar to other familiar UIs. For example, the combination =vertico-flat= plus =vertico-directory= resembles Ido in look and feel. For an interface similar to Helm, the extension =vertico-buffer= allows you to configure freely where the completion buffer opens, instead of growing the minibuffer. Furthermore =vertico-buffer= will adjust the number of displayed candidates according to the buffer height.&lt;/p&gt; &#xA;&lt;p&gt;Configuration example for =vertico-directory=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure directory extension. (use-package vertico-directory :after vertico :ensure nil ;; More convenient directory navigation commands :bind (:map vertico-map (&#34;RET&#34; . vertico-directory-enter) (&#34;DEL&#34; . vertico-directory-delete-char) (&#34;M-DEL&#34; . vertico-directory-delete-word)) ;; Tidy shadowed file names :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Configure Vertico per command or completion category&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-ripgrep.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;Vertico offers the =vertico-multiform-mode= which allows you to configure Vertico per command or per completion category. The =vertico-buffer-mode= enables a Helm-like buffer display, which takes more space but also displays more candidates. This verbose display mode is useful for commands like &lt;del&gt;consult-imenu&lt;/del&gt; or &lt;del&gt;consult-outline&lt;/del&gt; since the buffer display allows you to get a better overview over the entire current buffer. But for other commands you want to keep using the default Vertico display. &lt;del&gt;vertico-multiform-mode&lt;/del&gt; solves this configuration problem!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico-multiform (vertico-multiform-mode)&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per command. ;; Use a buffer with indices for imenu ;; and a flat (Ido-like) menu for M-x. (setq vertico-multiform-commands &#39;((consult-imenu buffer indexed) (execute-extended-command unobtrusive)))&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per completion category. ;; Use the grid display for files and a buffer ;; for the consult-grep commands. (setq vertico-multiform-categories &#39;((file grid) (consult-grep buffer))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Temporary toggling between the different display modes is possible. Bind the following commands:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;\M-V&#34; #&#39;vertico-multiform-vertical) (define-key vertico-map &#34;\M-G&#34; #&#39;vertico-multiform-grid) (define-key vertico-map &#34;\M-F&#34; #&#39;vertico-multiform-flat) (define-key vertico-map &#34;\M-R&#34; #&#39;vertico-multiform-reverse) (define-key vertico-map &#34;\M-U&#34; #&#39;vertico-multiform-unobtrusive) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can use your own functions or even lambdas to configure the completion behavior per command or per completion category. The function must have the calling convention of a mode, i.e., it takes a single argument, which is either 1 to turn on the mode and -1 to turn off the mode.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure &lt;code&gt;consult-outline&#39; as a scaled down TOC in a separate buffer (setq vertico-multiform-commands &lt;/code&gt;((consult-outline buffer ,(lambda (_) (text-scale-set -1))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Furthermore you can tune buffer-local settings per command or category.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Change the default sorting function. ;; See &lt;code&gt;vertico-sort-function&#39; and &lt;/code&gt;vertico-sort-override-function&#39;. (setq vertico-multiform-commands &#39;((describe-symbol (vertico-sort-function . vertico-sort-alpha))))&lt;/p&gt; &#xA;&lt;p&gt;(setq vertico-multiform-categories &#39;((symbol (vertico-sort-function . vertico-sort-alpha)) (file (vertico-sort-function . sort-directories-first))))&lt;/p&gt; &#xA;&lt;p&gt;;; Sort directories before files (defun sort-directories-first (files) (setq files (vertico-sort-history-length-alpha files)) (nconc (seq-filter (lambda (x) (string-suffix-p &#34;/&#34; x)) files) (seq-remove (lambda (x) (string-suffix-p &#34;/&#34; x)) files))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Combining these features allows us to fine-tune the completion display even more by adjusting the &lt;del&gt;vertico-buffer-display-action&lt;/del&gt;. We can for example reuse the current window for commands of the &lt;del&gt;consult-grep&lt;/del&gt; category (&lt;del&gt;consult-grep&lt;/del&gt;, &lt;del&gt;consult-git-grep&lt;/del&gt; and &lt;del&gt;consult-ripgrep&lt;/del&gt;). Note that this configuration is incompatible with Consult preview, since the previewed buffer is usually shown in exactly this window. Nevertheless this snippet demonstrates the flexibility of the configuration system.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure the buffer display and the buffer display action (setq vertico-multiform-categories &#39;((consult-grep buffer (vertico-buffer-display-action . (display-buffer-same-window)))))&lt;/p&gt; &#xA;&lt;p&gt;;; Disable preview for consult-grep commands (consult-customize consult-ripgrep consult-git-grep consult-grep :preview-key nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As another example, the following code uses &lt;del&gt;vertico-flat&lt;/del&gt; and &lt;del&gt;vertico-cycle&lt;/del&gt; to emulate &lt;del&gt;(ido-mode &#39;buffer)&lt;/del&gt;, i.e., Ido when it is enabled only for completion of buffer names. &lt;del&gt;vertico-cycle&lt;/del&gt; set to &lt;del&gt;t&lt;/del&gt; is necessary here to prevent completion candidates from disappearing when they scroll off-screen to the left.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq vertico-multiform-categories &#39;((buffer flat (vertico-cycle . t)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complementary packages :properties: :custom_id: complementary-packages &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico integrates well with complementary packages, which enrich the completion UI. These packages are fully supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][Marginalia]]: Rich annotations in the minibuffer&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult][Consult]]: Useful search and navigation commands&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][Embark]]: Minibuffer actions and context menu&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][Orderless]]: Advanced completion style&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to get accustomed with the package ecosystem, I recommed the following quick start approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start with plain Emacs (&lt;del&gt;emacs -Q&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Install and enable Vertico to get incremental minibuffer completion.&lt;/li&gt; &#xA; &lt;li&gt;Install Orderless and/or configure the built-in completion styles for more flexible minibuffer filtering.&lt;/li&gt; &#xA; &lt;li&gt;Install Marginalia if you like rich minibuffer annotations.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark and add two keybindings for &lt;del&gt;embark-dwim&lt;/del&gt; and &lt;del&gt;embark-act&lt;/del&gt;. I am using the mnemonic keybindings =M-.= and =C-.= since these commands allow you to act on the object at point or in the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Install Consult if you want additional featureful completion commands, e.g., the buffer switcher &lt;del&gt;consult-buffer&lt;/del&gt; with preview or the line-based search &lt;del&gt;consult-line&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark-Consult and Wgrep for export from =consult-line= to =occur-mode= buffers and from =consult-grep= to editable =grep-mode= buffers.&lt;/li&gt; &#xA; &lt;li&gt;Fine tune Vertico with [[#extensions][extensions]].&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The ecosystem is modular. You don&#39;t have to use all of these components. Use only the ones you like and the ones which fit well into your setup. The steps 1. to 4. introduce no new commands over plain Emacs. Step 5. introduces the new commands &lt;del&gt;embark-act&lt;/del&gt; and &lt;del&gt;embark-dwim&lt;/del&gt;. In step 6. you get the Consult commands, some offer new functionality not present in Emacs already (e.g., &lt;del&gt;consult-line&lt;/del&gt;) and some are substitutes (e.g., &lt;del&gt;consult-buffer&lt;/del&gt; for &lt;del&gt;switch-to-buffer&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Child frames and Popups&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An often requested feature is the ability to display the completions in a child frame popup. Personally I am critical of using child frames for minibuffer completion. From my experience it introduces more problems than it solves. Most importantly child frames hide the content of the underlying buffer. Furthermore child frames do not play well together with changing windows and entering recursive minibuffer sessions. On top, child frames can feel slow and sometimes flicker. A better alternative is the &lt;del&gt;vertico-buffer&lt;/del&gt; display which can even be configured individually per command using &lt;del&gt;vertico-multiform&lt;/del&gt;. On the plus side of child frames, the completion display appears at the center of the screen, where your eyes are focused. Please give the following packages a try and judge for yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/muffinmad/emacs-mini-frame][mini-frame]]: Display the entire minibuffer in a child frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/mini-popup][mini-popup]]: Slightly simpler alternative to mini-frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tumashu/vertico-posframe][vertico-posframe]]: Display only the Vertico minibuffer in a child frame using the posframe library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many alternative completion UIs, each UI with its own advantages and disadvantages.&lt;/p&gt; &#xA;&lt;p&gt;Vertico aims to be 100% compliant with all Emacs commands and achieves that with a minimal code base, relying purely on &lt;del&gt;completing-read&lt;/del&gt; while avoiding to invent its own APIs. Inventing a custom API as Helm or Ivy is explicitly avoided in order to increase flexibility and package reuse. Due to its small code base and reuse of the Emacs built-in facilities, bugs and compatibility issues are less likely to occur in comparison to completion UIs or full completion systems, which reimplement a lot of functionality.&lt;/p&gt; &#xA;&lt;p&gt;Since Vertico only provides the UI, you may want to combine it with some of the complementary packages, to give a full-featured completion experience similar to Helm or Ivy. Overall the packages in the spirit of Vertico have a different style than Helm or Ivy. The idea is to have smaller independent components, which one can add and understand step by step. Each component focuses on its niche and tries to be as non-intrusive as possible. Vertico targets users interested in crafting their Emacs precisely to their liking - completion plays an integral part in how the users interacts with Emacs.&lt;/p&gt; &#xA;&lt;p&gt;There are other interactive completion UIs, which follow a similar philosophy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][Mct]]: Minibuffer and Completions in Tandem. Mct reuses the default &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer and enhances it with automatic updates and additional keybindings, to select a candidate and move between minibuffer and completions buffer. Mct can be configured to open only when requested. Furthermore since Mct uses a fully functional buffer you can reuse all your familar buffer commands inside the completions buffer. The main distinction to Vertico&#39;s approach is that &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer displays all matching candidates. This has the advantage that you can interact freely with the candidates and jump around with Isearch or Avy. On the other hand it necessarily causes a slowdown in comparison to Vertico, which only displays a subset of candidates. Mct supports completion in region via its &lt;del&gt;mct-region-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/icomplete-vertical][Icomplete-vertical]]: This package enhances the Emacs builtin Icomplete with a vertical display. In contrast to Vertico, Icomplete rotates the candidates such that the current candidate always appears at the top. From my perspective, candidate rotation feels a bit less intuitive than the UI of Vertico or Selectrum. Note that Emacs 28 offers a built-in &lt;del&gt;icomplete-vertical-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/raxod502/selectrum][Selectrum]]: Selectrum is the predecessor of Vertico, since it directly inspired Vertico. Selectrum has a similar UI and interaction model as Vertico. Vertico offers additional features and is more flexible than Selectrum thanks to its [[#extensions][extensions]]. Unfortunately Selectrum is not fully compatible with every Emacs completion command and dynamic completion tables ([[https://github.com/raxod502/selectrum/issues/481][Issue #481]]), since it uses its own filtering infrastructure, which deviates from the standard Emacs completion facilities. The filtering infrastructure also leads to a larger and more complex code base.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to learn more about Vertico and minibuffer completion, check out the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/hlissner/doom-emacs/tree/develop/modules/completion/vertico][Doom Emacs Vertico Module]]: Vertico is Doom&#39;s default completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=w9hHMDyF9V4][Emacs Minibuffer Completions]] (2022-02-12) by Greg Yut.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=hPwDbx--Waw][Vertico Extensions for Emacs]] (2022-01-08) by Karthik Chikmagalur.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/5ffb2at2d7w][Using Emacs Episode 80 - Vertico, Marginalia, Consult and Embark]] (2021-10-26) by Mike Zamansky.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=UtqE-lR2HCA][System Crafters Live! - Replacing Ivy and Counsel with Vertico and Consult]] (2021-05-21) by David Wilson.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=J0OaRy85MOo][Streamline Your Emacs Completions with Vertico]] (2021-05-17) by David Wilson.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Problematic completion commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is robust in most scenarios. However some completion commands make certain assumptions about the completion styles and the completion UI. Some of these assumptions may not hold in Vertico or other UIs and require minor workarounds.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-refile&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-refile&lt;/del&gt; uses &lt;del&gt;org-olpath-completing-read&lt;/del&gt; to complete the outline path in steps, when &lt;del&gt;org-refile-use-outline-path&lt;/del&gt; is non-nil.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately the implementation of this Org completion table assumes that the &lt;del&gt;basic&lt;/del&gt; completion style is used. The table is incompatible with completion styles like &lt;del&gt;substring&lt;/del&gt;, &lt;del&gt;flex&lt;/del&gt; or &lt;del&gt;orderless&lt;/del&gt;. In order to fix the issue at the root, the completion table should make use of completion boundaries similar to the built-in file completion table. In your user configuration you can prioritize &lt;del&gt;basic&lt;/del&gt; before &lt;del&gt;orderless&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 1: Use the basic completion style (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps t) (advice-add #&#39;org-olpath-completing-read :around (lambda (&amp;amp;rest args) (minibuffer-with-setup-hook (lambda () (setq-local completion-styles &#39;(basic))) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you may want to disable the outline path completion in steps. The completion on the full path can be quicker since the input string matches directly against substrings of the full path, which is useful with Orderless. However the list of possible completions becomes much more cluttered.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 2: Complete full paths (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-agenda-filter&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;del&gt;org-refile&lt;/del&gt;, the &lt;del&gt;org-agenda-filter&lt;/del&gt; completion function (&lt;del&gt;org-agenda-filter-completion-function&lt;/del&gt;) does not make use of completion boundaries. Unfortunately =TAB= completion (&lt;del&gt;minibuffer-complete&lt;/del&gt;) does not work for this reason. This affects Vertico and also the Emacs default completion system. For example if you enter &lt;del&gt;+tag&amp;lt;0 TAB&lt;/del&gt; the input is replaced with &lt;del&gt;0:10&lt;/del&gt; which is not correct. With preserved completion boundaries, the expected result would be &lt;del&gt;+tag&amp;lt;0:10&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;tmm-menubar&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The text menu bar works well with Vertico but always shows a =&lt;em&gt;Completions&lt;/em&gt;= buffer, which is unwanted if you use the Vertico UI. This completion buffer can be disabled with an advice. If you disabled the standard GUI menu bar and prefer the Vertico interface you may also overwrite the default F10 keybinding.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (global-set-key [f10] #&#39;tmm-menubar) (advice-add #&#39;tmm-add-prompt :after #&#39;minibuffer-hide-completions) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;ffap-menu&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;ffap-menu&lt;/del&gt; shows the =&lt;em&gt;Completions&lt;/em&gt;= buffer by default like &lt;del&gt;tmm-menubar&lt;/del&gt;, which is unnecessary with Vertico. This completion buffer can be disabled as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add #&#39;ffap-menu-ask :around (lambda (&amp;amp;rest args) (cl-letf (((symbol-function #&#39;minibuffer-completion-help) #&#39;ignore)) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;completion-table-dynamic&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dynamic completion tables (&lt;del&gt;completion-table-dynamic&lt;/del&gt;, &lt;del&gt;completion-table-in-turn&lt;/del&gt;, etc.) should work well with Vertico. However the requirement is that the =basic= completion style is enabled. The =basic= style performs prefix filtering by passing the input to the completion table (or the dynamic completion table function). The =basic= completion style must not necessarily be configured with highest priority, it can also come after other completion styles like =orderless=, =substring= or =flex=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic)) ;; (setq completion-styles &#39;(orderless basic)) (completing-read &#34;Dynamic: &#34; (completion-table-dynamic (lambda (str) (list (concat str &#34;1&#34;) (concat str &#34;2&#34;) (concat str &#34;3&#34;))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Submitting the empty string&lt;/p&gt; &#xA;&lt;p&gt;The commands &lt;del&gt;multi-occur&lt;/del&gt;, &lt;del&gt;auto-insert&lt;/del&gt;, &lt;del&gt;bbdb-create&lt;/del&gt; read multiple arguments from the minibuffer with &lt;del&gt;completing-read&lt;/del&gt;, one at a time, until you submit an empty string. You should type =M-RET= (&lt;del&gt;vertico-exit-input&lt;/del&gt;) to finish the loop. Directly pressing =RET= (&lt;del&gt;vertico-exit&lt;/del&gt;) does not work since the first candidate is preselected.&lt;/p&gt; &#xA;&lt;p&gt;The underlying issue is that &lt;del&gt;completing-read&lt;/del&gt; always allows you to exit with the empty string, which is called the /null completion/, even if the &lt;del&gt;REQUIRE-MATCH&lt;/del&gt; argument is non-nil. Try the following two calls to &lt;del&gt;completing-read&lt;/del&gt; with =C-x C-e=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match) (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match nil nil &#34;&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In both cases the empty string can be submitted. In the first case no explicit default value is specified and Vertico preselects the &lt;em&gt;first&lt;/em&gt; candidate. In order to exit with the empty string, press =M-RET=. In the second case the explicit default value &#34;&#34; is specified and Vertico preselects the prompt, such that exiting with the empty string is possible by pressing =RET= only.&lt;/p&gt; &#xA;&lt;p&gt;** Tramp hostname completion&lt;/p&gt; &#xA;&lt;p&gt;In combination with Orderless, hostnames are not made available for completion after entering =/ssh:=. In order to avoid this problem, the =basic= completion style should be specified for the file completion category, such that =basic= is tried before =orderless=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic partial-completion)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For users who are familiar with the =completion-style= machinery: You may also define a custom completion style which sets in only for remote files!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun basic-remote-try-completion (string table pred point) (and (vertico--remote-p string) (completion-basic-try-completion string table pred point))) (defun basic-remote-all-completions (string table pred point) (and (vertico--remote-p string) (completion-basic-all-completions string table pred point))) (add-to-list &#39;completion-styles-alist &#39;(basic-remote basic-remote-try-completion basic-remote-all-completions nil)) (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic-remote partial-completion)))) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DiamondBond/emacs</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/DiamondBond/emacs</id>
    <link href="https://github.com/DiamondBond/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Emacs configuration.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Diamond&#39;s Emacs #+AUTHOR: index #+EMAIL: &lt;a href=&#34;mailto:diamondbond1@gmail.com&#34;&gt;diamondbond1@gmail.com&lt;/a&gt; #+LANGUAGE: en #+CREATOR: Emacs 28.1 (Org mode 9.5.3) #+OPTIONS: toc:2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[./img/screenshot.png]]&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote&lt;/p&gt; &#xA;&lt;p&gt;Simple Emacs configuration aimed at enhancing the default experience, akin to something equidistant between vanilla &amp;amp; doom.&lt;/p&gt; &#xA;&lt;p&gt;#+end_quote&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://diamondbond.neocities.org/emacs.html][The entire config file can be viewed here in HTML format]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/DiamondBond/emacs/blob/master/docs/emacsfromsource.org][Emacs build instructions]].&lt;/p&gt; &#xA;&lt;p&gt;Clone this repo:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ git clone &lt;a href=&#34;https://github.com/diamondbond/emacs.git&#34;&gt;https://github.com/diamondbond/emacs.git&lt;/a&gt; ~/.emacs.d --depth 1 #+end_src&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/DiamondBond/emacs/blob/master/bin/tangle.sh][Tangle]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ cd ~/.emacs.d/bin $ ./tangle.sh #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Please run tangle.sh whenever you edit a =.org= configuration file.&lt;/p&gt; &#xA;&lt;p&gt;** Icons&lt;/p&gt; &#xA;&lt;p&gt;If you care about fancy icons, install the fonts provided by [[https://github.com/domtronn/all-the-icons.el][all the icons]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp M-x all-the-icons-install-fonts #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** LSP&lt;/p&gt; &#xA;&lt;p&gt;Most IDE-like features are provided by the [[https://github.com/emacs-lsp/lsp-mode][LSP]] package. For it to work properly, you need to install the appropriate [[https://github.com/emacs-lsp/lsp-mode#supported-languages][language servers]].&lt;/p&gt; &#xA;&lt;p&gt;** Email&lt;/p&gt; &#xA;&lt;p&gt;Refer to the [[https://github.com/DiamondBond/emacs/blob/master/docs/setupemail.org][Email setup documentation]] for this functionality.&lt;/p&gt; &#xA;&lt;p&gt;** Dependencies&lt;/p&gt; &#xA;&lt;p&gt;Refer to the [[https://github.com/DiamondBond/emacs/blob/master/docs/dependencies.org][Dependencies documentation]].&lt;/p&gt; &#xA;&lt;p&gt;** Customization&lt;/p&gt; &#xA;&lt;p&gt;Edit =.emacs.d/globals.org= to change the default username, email address, nicks &amp;amp; browser.&lt;/p&gt; &#xA;&lt;p&gt;Edit =.emacs.d/userconfig.org= to add your custom settings and/or override base settings.&lt;/p&gt; &#xA;&lt;p&gt;You may also edit =.emacs.d/config.org= directly, but your custom settings might be wiped out during an update.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tangling&lt;/p&gt; &#xA;&lt;p&gt;This Emacs configuration will auto-tangle all the related configuration .org files on save via the [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] package.&lt;/p&gt; &#xA;&lt;p&gt;Add tangle.sh to =$PATH= in your =~/.bashrc= file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh PATH=&#34;$HOME/.emacs.d/bin:$PATH&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Now you can call tangle.sh from anywhere.&lt;/p&gt; &#xA;&lt;p&gt;I recommend adding this alias to your =~/.bash_aliases= file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh alias edaemon=&#34;tangle.sh &amp;amp;&amp;amp; emacs --daemon&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will tangle any changes made and start the Emacs daemon.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: call =tangle.sh= with an arbitrary arg to use [[https://github.com/DiamondBond/bin/blob/master/auth-restore.sh][M-x auth-restore]].&lt;/p&gt; &#xA;&lt;p&gt;** Running&lt;/p&gt; &#xA;&lt;p&gt;Start Emacs with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ edaemon #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Connect to the Emacs daemon via =emacsclient= with the following command:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ emacsclient -c -n -a &#39;emacs&#39; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Updating&lt;/p&gt; &#xA;&lt;p&gt;Update this Emacs configuration and upgrade its packages with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp M-x config/update #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Quiting&lt;/p&gt; &#xA;&lt;p&gt;Ask the Emacs daemon to gracefully exit with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp M-x kill-emacs #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/lsp-bridge</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/manateelazycat/lsp-bridge</id>
    <link href="https://github.com/manateelazycat/lsp-bridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fastest LSP client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;lsp-bridge&lt;/h1&gt; &#xA;&lt;p&gt;Lsp-bridge&#39;s goal is to become the fastest LSP client in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Lsp-bridge uses python&#39;s threading technology to build caches that bridge Emacs and LSP server. Lsp-bridge will provide smooth completion experience without compromise to slow down emacs&#39; performance.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/screenshot.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Python dependencies: &lt;a href=&#34;https://github.com/tkf/python-epc&#34;&gt;python-epc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Elisp dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;orderless&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt; (need execute command &lt;code&gt;all-the-icons-install-fonts&lt;/code&gt; to install all-the-icons fonts)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tumashu/posframe&#34;&gt;posframe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrblevin/markdown-mode&#34;&gt;markdown-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;yasnippet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Clone or download this repository (path of the folder is the &lt;code&gt;&amp;lt;path-to-lsp-bridge&amp;gt;&lt;/code&gt; used below).&lt;/li&gt; &#xA; &lt;li&gt;Add following code in your ~/.emacs:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-lsp-bridge&amp;gt;&#34;)&#xA;&#xA;(require &#39;yasnippet)&#xA;(require &#39;lsp-bridge)&#xA;(require &#39;lsp-bridge-icon)        ;; show icons for completion items, optional&#xA;(require &#39;lsp-bridge-jdtls)       ;; provide Java third-party library jump and -data directory support, optional&#xA;(yas-global-mode 1)&#xA;&#xA;(require &#39;corfu)&#xA;(require &#39;corfu-info)&#xA;(require &#39;corfu-history)&#xA;(require &#39;lsp-bridge-orderless)   ;; make lsp-bridge support fuzzy match, optional&#xA;(corfu-history-mode t)&#xA;(global-lsp-bridge-mode)&#xA;(when (&amp;gt; (frame-pixel-width) 3000) (custom-set-faces &#39;(corfu-default ((t (:height 1.3))))))  ;; adjust default font height when running in HiDPI screen.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lsp-bridge-find-def: jump to the definition&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-find-def-other-window: jump to the definition in other-window&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-find-impl: jump to the implementation&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-find-impl-other-window: jump to the implementation in other-window&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-return-from-def: return to the location before calling &lt;code&gt;lsp-bridge-find-def&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-find-references: traverse across code references (forked from color-rg.el)&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-lookup-documentation: lookup documentation of symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-popup-documentation-scroll-up: scroll up popup document.&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-popup-documentation-scroll-down: scroll down popup document.&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-rename: rename symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-jump-to-next-diagnostic: Jump to the next diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-jump-to-prev-diagnostic: Jump to the previous diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-show-signature-help-in-minibuffer: show signature help in minibuffer manually (move cursor to parameters area will show signature help automatically)&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-insert-common-prefix: insert common prefix of candidates&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-restart-process: restart lsp-bridge process (only used for development)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize lsp-bridge keymap&lt;/h2&gt; &#xA;&lt;p&gt;customize keymap for lsp-bridge commands.&lt;/p&gt; &#xA;&lt;p&gt;eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defvar lsp-bridge-mode-map&#xA;    (let ((keymap (make-sparse-keymap)))&#xA;    (define-key keymap (kbd &#34;C-j&#34;) &#39;lsp-bridge-popup-documentation-scroll-up)&#xA;    (define-key keymap (kbd &#34;C-k&#34;) &#39;lsp-bridge-popup-documentation-scroll-down)&#xA;    keymap))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize language server configuration&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration of for each language server is stored at &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/tree/master/langserver&#34;&gt;lsp-bridge/langserver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Anyway you can customize server configuration with the following priority:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-get-lang-server-by-project&lt;/code&gt;: write your own function to get server configuration based on project-path and file-path, this function is nil by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-extension-list&lt;/code&gt;: load server configuration based on file extension, such as, we launch &lt;code&gt;volar&lt;/code&gt; server instead &lt;code&gt;javascript&lt;/code&gt; server when open *.vue file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-mode-list&lt;/code&gt;: load server configuration based on major-mode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add support for new language?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create configuration file under lsp-bridge/langserver, such as &lt;code&gt;pyright.json&lt;/code&gt; for pyright (windows user please uses &lt;code&gt;pyright_windows.json&lt;/code&gt;, macOS user please uses &lt;code&gt;pyright_darwin.json&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(mode . server_name)&lt;/code&gt; in &lt;code&gt;lsp-bridge-lang-server-list&lt;/code&gt;, such as &lt;code&gt;(python-mode . &#34;pyright&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add new mode-hook to &lt;code&gt;lsp-bridge-default-mode-hooks&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Welcome to send PR to help us improve support for LSP servers, thanks for your contribution!&lt;/p&gt; &#xA;&lt;h2&gt;Supported language servers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Index&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;LSP Server&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clangd/clangd&#34;&gt;clangd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c, c++&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;pip install pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixirLS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that the &lt;code&gt;elixir-ls&lt;/code&gt; release directory is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;make sure gopls in PATH, please do &lt;code&gt;ln -s ~/go/bin/gopls ~/.local/bin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;hls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server&#34;&gt;dart-analysis-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scala&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/typescript&#34;&gt;typescript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;typescript, javascript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/ocaml/ocaml-lsp&#34;&gt;ocamllsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ocaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang-ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;erlang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/latex-lsp/texlab&#34;&gt;texlab&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;latex&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that &lt;code&gt;org.eclipse.jdt.ls.product/target/repository/bin&lt;/code&gt; is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clojure-lsp/clojure-lsp&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;clojure&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/bash-lsp/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/johnsoncodehk/volar&#34;&gt;volar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;vue&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server&#34;&gt;sumneko&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure &lt;code&gt;bin&lt;/code&gt; under sumneko installation is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/chemzqm/wxml-languageserver&#34;&gt;wxml-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;wxml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-html-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;html&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-css-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;css&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;TODO:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Show signature help with eldoc&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Code action&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inline Value&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; JavaSctipt different code blocks use different language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support completionItem/resolve to implement auto-import for volar&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cache candidate document at Python side, only fetch document information when switch candidate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features that won&#39;t be supported&lt;/h3&gt; &#xA;&lt;p&gt;The goal of lsp-bridge is to become the fastest LSP client in Emacs, not a complete implementation of LSP protocol.&lt;/p&gt; &#xA;&lt;p&gt;Emacs can do better for the following tasks, we will not reinvent the wheel in lsp-bridge:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Code formatting: each LSP server has its own formatting specification, we can gain finer control using Emacs&#39; builtin formatting tool.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting: &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;Tree-sitter&lt;/a&gt; is a wonderful incremental parsing library for syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;Xref: Xref&#39;s mechanism is simultaneously. lsp-bridge is completely asynchronous, recommended to use wrap function to uniformly key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Join development&lt;/h2&gt; &#xA;&lt;p&gt;The following is the framework of lsp-bridge:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/framework.png&#34;&gt; &#xA;&lt;p&gt;The following is the directory structure of the lsp-bridge project:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elisp main logic part that provides custom options and elisp functions for python sub-process calls like code jumping, renaming, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-epc.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Communicating with lsp-bridge python sub-process, which mainly implements elisp IPC to connect to python EPC for data serialization, sending, receiving, and deserialization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-ref.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Framework of code referencing, providing references viewing, batch renames, regex filtering of reference results, etc. The core code is forked from color-rg.el&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-orderless.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fuzzy search for completion items, i.e. for long candidate you do not need to type the word in correct order to get the correct item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-icon.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rendering the completion menu icons, which is used to distinguish different types of completion options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-jdtls.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provide java language third-party library jumping function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python main logic part that provides event loop, message scheduling and status management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/fileaction.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tracking the status of each file, processing LSP response messages, calling Emacs elisp function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/lspserver.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LSP message processing module, mainly to analyze, send and receive LSP messages, and ensure that the sequence of LSP requests conforms with the LSP protocol specification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/utils.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Utility functions of convenience for each module call&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/mergedeep.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON information merger is mainly used to send custom options to LSP server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/hanlder/&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The implementation of sending and receiving LSP message, where &lt;strong&gt;init&lt;/strong&gt;.py is a base class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;langserver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The configurations of the LSP servers, each server corresponding to a JSON file that defines the name of the server, language ID, starting command, options, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/&#34;&gt;LSP Specification&lt;/a&gt; and &lt;a href=&#34;https://manateelazycat.github.io/emacs/2022/05/12/lsp-bridge.html&#34;&gt;The Design of lsp-bridge&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;Then turn on option &lt;code&gt;lsp-bridge-enable-log&lt;/code&gt; and happy hacking! ;)&lt;/p&gt; &#xA;&lt;h2&gt;Report bug&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;emacs -q&lt;/code&gt; and load a minimal setup with only lsp-bridge to verify that the bug is reproducible. If &lt;code&gt;emacs -q&lt;/code&gt; works fine, probably something is wrong with your Emacs config.&lt;/p&gt; &#xA;&lt;p&gt;If the problem still exists, please report it &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/issues/new&#34;&gt;here&lt;/a&gt; with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content, it contains many clues that can help us locate the problem faster.&lt;/p&gt; &#xA;&lt;p&gt;If you get a segfault error, please use the following way to collect crash information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install gdb and turn on option &lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the command &lt;code&gt;lsp-bridge-stop-process&lt;/code&gt; to stop the current process&lt;/li&gt; &#xA; &lt;li&gt;Restart lsp-bridge, send issue with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content when next crash&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributor&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=manateelazycat/lsp-bridge&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>haskell/haskell-mode</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/haskell/haskell-mode</id>
    <link href="https://github.com/haskell/haskell-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs mode for Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://rawgithub.com/haskell/haskell-mode/master/images/haskell-mode.svg?sanitize=true&#34; width=&#34;35&#34; height=&#34;35&#34;&gt; Haskell Mode for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;This is an Emacs mode for editing, developing and debugging Haskell programs. &lt;a href=&#34;http://haskell.github.io/haskell-mode/&#34;&gt;Home page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/haskell/haskell-mode&#34;&gt;&lt;img src=&#34;https://travis-ci.org/haskell/haskell-mode.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/actions&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License GPL3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/HaskellMode&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/HaskellMode.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I just want to thank everybody involved in one way or another with the Haskell Emacs tooling. It is one of the best language experiences I had in Emacs. -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/2xjum3/haskellmode_february_2015_developments/cp0qa9a&#34;&gt;cocreature, 2015-03-01&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;ve been using it for a long time and love it. Great work on haskell-mode! Keep up the good work! -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/316hcm/month_in_haskell_mode_march_2015/cpyutph&#34;&gt;LukeHoersten, 2015-04-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This sounds wonderful. Does anything similar exist for Vim? -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/3bsa0f/month_in_haskell_mode_june_2015/cspdbb6&#34;&gt;earldouglas, 2015-07-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Users manual: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;latest version&lt;/a&gt;, older versions: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.12/&#34;&gt;13.12&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.14/&#34;&gt;13.14&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.16/&#34;&gt;13.16&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.18/&#34;&gt;13.18&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.20/&#34;&gt;13.20&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have this in your &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;init file&lt;/a&gt; (usually &lt;code&gt;~/.emacs&lt;/code&gt;). If you already have &lt;code&gt;custom-set-variables&lt;/code&gt;, merge its contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(custom-set-variables&#xA; ;; custom-set-variables was added by Custom.&#xA; ;; If you edit it by hand, you could mess it up, so be careful.&#xA; ;; Your init file should contain only one such instance.&#xA; ;; If there is more than one, they won&#39;t work right.&#xA; &#39;(package-archives&#xA;   (quote&#xA;    ((&#34;gnu&#34; . &#34;https://elpa.gnu.org/packages/&#34;)&#xA;     (&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;)))))&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run emacs, and evaluate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-refresh-contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then follow by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET haskell-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Voilà! &lt;code&gt;haskell-mode&lt;/code&gt; is installed! You should be able to edit Haskell source code in color now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Haskell-mode&lt;/code&gt; has much much more to offer but the above should get you going!&lt;/p&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;For setup instructions, please consult the integrated &lt;code&gt;haskell-mode&lt;/code&gt; Info manual which can be accessed after installation via &lt;code&gt;M-x info-display-manual [RET] haskell-mode&lt;/code&gt;. Alternatively, you can also direct your browser to the &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;the online haskell-mode manual&lt;/a&gt; for setup and user guide.&lt;/p&gt; &#xA;&lt;h2&gt;Installation - more information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; supports GNU Emacs version 25.1 or later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is available from &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; (releases) and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; (git snapshots). The latter will generally be considerably more up-to-date, and is recommended for most users.&lt;/p&gt; &#xA;&lt;p&gt;Other means of obtaining &lt;code&gt;haskell-mode&lt;/code&gt; include &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt; and &lt;a href=&#34;https://packages.debian.org/search?keywords=haskell-mode&#34;&gt;Debian package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation from git repository&lt;/h2&gt; &#xA;&lt;p&gt;Running &lt;code&gt;haskell-mode&lt;/code&gt; directly from sources is easy but requires a little preparation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/haskell/haskell-mode.git&lt;/code&gt; into a suitable directory, e.g. &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt; where &lt;code&gt;~&lt;/code&gt; stands for your home directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Assuming you have unpacked the various haskell-mode modules (&lt;code&gt;haskell-mode.el&lt;/code&gt; and the rest) in the directory &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt;, you need to generate various files, the autoloads file (&lt;code&gt;haskell-mode-autoloads.el&lt;/code&gt;) is one among them. Invoke:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make EMACS=/path/to/your/emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then adding the following command to your &lt;code&gt;.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-to-list &#39;load-path &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;(require &#39;haskell-mode-autoloads)&#xA;(add-to-list &#39;Info-default-directory-list &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation from git repository on macOS&lt;/h3&gt; &#xA;&lt;p&gt;There are a couple of things to note if you want to install directly from git on macOS systems, as of version 10.13 High Sierra:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The version of makeinfo that is installed by default in /usr/bin is quite old and will cause the above make command to exit with an error. Installing the texinfo package using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; will fix this. Be sure to follow the post-install instructions to add its bin directory to your shell&#39;s PATH variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are running an Emacs distribution packaged as a macOS application. such as the one available at &lt;a href=&#34;https://emacsformacosx.com/&#34;&gt;https://emacsformacosx.com/&lt;/a&gt;, you&#39;ll need to add its executable to your PATH before the system&#39;s default Emacs version. That project&#39;s &lt;a href=&#34;https://emacsformacosx.com/tips&#34;&gt;Tips and Tricks&lt;/a&gt; page has detailed instructions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you followed the above you are just a couple of steps away from contributing to &lt;code&gt;haskell-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is actively seeking contributions from users of &lt;code&gt;haskell-mode&lt;/code&gt;. For more information have a look at &lt;a href=&#34;https://github.com/haskell/haskell-mode/wiki/Contributing&#34;&gt;the wiki page on contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>syl20bnr/spacemacs</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/syl20bnr/spacemacs</id>
    <link href="https://github.com/syl20bnr/spacemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it&#39;s Emacs *and* Vim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;top&#34; id=&#34;fork-destination-box&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://develop.spacemacs.org&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&#34; alt=&#34;Made with Spacemacs&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://github.com/syl20bnr/spacemacs/raw/655e2886d88f79f4da01d607d29342e7447cad65/assets/gplv3.png&#34; alt=&#34;GPLv3 Software&#34; align=&#34;right&#34; width=&#34;70&#34; height=&#34;28&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.twitter.com/spacemacs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/tXSoThF.png&#34; alt=&#34;Twitter&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/title2.png&#34; alt=&#34;Spacemacs&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#core-pillars&#34;&gt;philosophy&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#who-can-benefit-from-this&#34;&gt;for whom?&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#screenshots&#34;&gt;screenshots&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION.html&#34;&gt;documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&#34;&gt;contribute&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#achievements&#34;&gt;achievements&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join Chat.svg&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/p4MddFu6Ag&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml&#34;&gt;&lt;img src=&#34;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml/badge.svg?branch=develop&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paypal-Donate-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shop.spreadshirt.com/spacemacs-shop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Shop-T--Shirts-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.slant.co/topics/12/~what-are-the-best-programming-text-editors&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slant-Recommend-ff69b4.svg?sanitize=true&#34; alt=&#34;Recommend it&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick Install&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This assumes you don&#39;t have an existing Emacs setup and want to run Spacemacs as your config. If you do have one, look at the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;full installation instructions&lt;/a&gt; for other options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %appdata%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $env:appdata/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#getting-help&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#emacs&#34;&gt;Emacs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#linux-distros&#34;&gt;Linux distros&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#macos&#34;&gt;macOS&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-emacs&#34;&gt;Install emacs&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-emacs-plus&#34;&gt;Using emacs-plus&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-emacs-mac&#34;&gt;Using emacs-mac&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-cask&#34;&gt;Using cask&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#other-ways&#34;&gt;Other ways&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-source-code-pro-font&#34;&gt;Install Source Code Pro font&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs&#34;&gt;Install Spacemacs&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#windows&#34;&gt;Windows&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs-in-windows&#34;&gt;Install Spacemacs in Windows&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#default-installation&#34;&gt;Default installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#alternative-installations&#34;&gt;Alternative installations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#modify-home-environment-variable&#34;&gt;Modify HOME environment variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#modify-spacemacs-start-directory-variable&#34;&gt;Modify spacemacs-start-directory variable&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#spacemacs-logo&#34;&gt;Spacemacs logo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#update&#34;&gt;Update&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#rolling-update-on-develop&#34;&gt;Rolling update (on develop)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#automatic-update-on-master-branch&#34;&gt;Automatic update (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#manual-update-on-master-branch&#34;&gt;Manual update (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#revert-to-a-specific-version-on-master-branch&#34;&gt;Revert to a specific version (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#quotes&#34;&gt;Quotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#contributions&#34;&gt;Contributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#communities&#34;&gt;Communities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#spacemacs-everywhere&#34;&gt;Spacemacs Everywhere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#supporting-spacemacs&#34;&gt;Supporting Spacemacs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is a new way of experiencing Emacs -- it&#39;s a sophisticated and polished set-up, focused on ergonomics, mnemonics and consistency.&lt;/p&gt; &#xA;&lt;p&gt;Just clone and launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer&#39;s &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to try.&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Being able to quickly switch between input styles, makes Spacemacs a great tool for pair-programming.&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs is currently in beta, and any contributions are very welcome.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/spacemacs-python.png&#34; alt=&#34;spacemacs_python&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access the Spacemacs documentation with &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you&#39;ll love the distraction free UI and its functional mode-line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing the &lt;kbd&gt;space bar&lt;/kbd&gt; or &lt;kbd&gt;alt-m&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like &lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the project commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely organised in configuration layers following a set of &lt;a href=&#34;https://develop.spacemacs.org/doc/CONVENTIONS&#34;&gt;conventions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Comprehensive documentation is available for each layer by pressing &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also check the &lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION&#34;&gt;general documentation&lt;/a&gt;, &lt;a href=&#34;https://develop.spacemacs.org/doc/QUICK_START&#34;&gt;quick start guide&lt;/a&gt; and the &lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Help&lt;/h1&gt; &#xA;&lt;p&gt;If you need help, ask your question in the &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt; and a member of the community will help you out.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer IRC, connect to the &lt;a href=&#34;https://irc.gitter.im/&#34;&gt;Gitter Chat IRC server&lt;/a&gt; and join the &lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;Last but not least there are a lot of high class tutorials available on YouTube:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jack of Some&#39;s Spacemacs related channel &lt;a href=&#34;https://www.youtube.com/watch?v=r-BHx7VNX5s&amp;amp;list=PLd_Oyt6lAQ8Rxb0HUnGbRrn6R4Cdt2yoI&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GDQuest&#39;s Game Design oriented tutorials to Spacemacs &lt;a href=&#34;https://www.youtube.com/watch?v=hCNOB5jjtmc&amp;amp;list=PLhqJJNjsQ7KFkMVBunWWzFD8SlH714qm4&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Practicalli&#39;s Clojure tutorials based on Spacemacs &lt;a href=&#34;https://www.youtube.com/watch?v=ZKuQDrQLAnc&amp;amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eivind Fonn&#39;s classic Spacemacs ABC &lt;a href=&#34;https://www.youtube.com/watch?v=ZFV5EqpZ6_s&amp;amp;list=PLrJ2YN5y27KLhd3yNs2dR8_inqtEiEweE&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is an extension of a popular text editor called Emacs. Thus you need to first install base Emacs and then download the Spacemacs extension files with Git.&lt;/p&gt; &#xA;&lt;h2&gt;Emacs&lt;/h2&gt; &#xA;&lt;p&gt;Spacemacs requires Emacs 27.1 or above. The development version of Emacs is not &lt;em&gt;officially&lt;/em&gt; supported, but it should nevertheless be expected to work.&lt;/p&gt; &#xA;&lt;p&gt;Some modes require third-party tools that you&#39;ll have to install via your favorite package manager.&lt;/p&gt; &#xA;&lt;h3&gt;Linux distros&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;emacs&lt;/code&gt; package with your linux distributions package manager.&lt;/p&gt; &#xA;&lt;p&gt;Do not install the &lt;code&gt;xemacs&lt;/code&gt; package. It&#39;s not supported by Spacemacs. XEmacs is an old fork of Emacs. The X in its name is unrelated to X11.&lt;/p&gt; &#xA;&lt;p&gt;Emacs has graphical support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some linux distributions support only emacs versions older than 27.1. In this case you should &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html&#34;&gt;built from source&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;h4&gt;Install emacs&lt;/h4&gt; &#xA;&lt;h5&gt;Using emacs-plus&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap d12frosted/emacs-plus&#xA;&#xA;# to install Emacs 27&#xA;brew install emacs-plus@27 --with-spacemacs-icon&#xA;# or to install Emacs 28&#xA;brew install emacs-plus@28 --with-spacemacs-icon&#xA;&#xA;brew link emacs-plus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using emacs-mac&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap railwaycat/emacsmacport&#xA;brew install emacs-mac&#xA;brew link emacs-mac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using cask&lt;/h5&gt; &#xA;&lt;p&gt;Homebrew now recommends to use the cask version with the following message: &#34;Please try the Cask for a better-supported Cocoa version&#34;. To install the cask version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install --cask emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs a pre-built package from &lt;a href=&#34;https://emacsformacosx.com/&#34;&gt;https://emacsformacosx.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Other ways&lt;/h5&gt; &#xA;&lt;p&gt;If you&#39;re not comfortable with the ways mentioned above, then &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsForMacOS#toc12&#34;&gt;EmacsWiki&lt;/a&gt; lists down a few ways to install Emacs for macOS.&lt;/p&gt; &#xA;&lt;h4&gt;Install Source Code Pro font&lt;/h4&gt; &#xA;&lt;p&gt;Once Emacs is installed, run the following commands in the terminal to install the default Source Code Pro font:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap homebrew/cask-fonts&#xA;brew install --cask font-source-code-pro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install Spacemacs&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; After completing the Spacemacs &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;install process&lt;/a&gt;, then it&#39;s also recommended to add the &lt;a href=&#34;https://develop.spacemacs.org/layers/+os/osx/README.html&#34;&gt;osx layer&lt;/a&gt; to your &lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#dotfile-configuration&#34;&gt;dotfile&lt;/a&gt;. Installation instructions are available in the documentation for the &lt;a href=&#34;https://develop.spacemacs.org/layers/+os/osx/README.html&#34;&gt;osx layer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the installed version of GnuTLS securely installing emacs packages may fail. In this case it is possible to install using &lt;code&gt;emacs --insecure&lt;/code&gt;. However be aware that this means your packages will be transferred using http, use at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;You might also have some issues when doing some search on your projects, you probably want to install GNU &lt;a href=&#34;https://formulae.brew.sh/formula/ripgrep&#34;&gt;ripgrep&lt;/a&gt; through homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Download the official 64-bit (x86_64) stable builds from the &lt;a href=&#34;https://ftp.gnu.org/gnu/emacs/windows/&#34;&gt;GNU FTP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also need &lt;code&gt;gzip&lt;/code&gt; and put it in your path, to download it go to the &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/gzip.htm&#34;&gt;GNUWin32 project page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Install Spacemacs in Windows&lt;/h4&gt; &#xA;&lt;p&gt;By default Emacs looks for the &lt;code&gt;.emacs.d&lt;/code&gt; directory in: &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone Spacemacs to the Roaming directory:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %appdata%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows PowerShell prompt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $env:appdata/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or if a &lt;code&gt;HOME&lt;/code&gt; environment variable has been configured, that points to your user directory: &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Clone Spacemacs to the &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; directory:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %homepath%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows PowerShell prompt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $home/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If the following error occurs after starting Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Fix it by changing the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;from Properties select the Tab “Security”,&lt;/li&gt; &#xA;   &lt;li&gt;select the button “Advanced”,&lt;/li&gt; &#xA;   &lt;li&gt;select the Tab “Owner”&lt;/li&gt; &#xA;   &lt;li&gt;change the owner to your account name&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Source: &lt;a href=&#34;https://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For efficient searches we recommend installing &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Depending on the installed version of GnuTLS securely installing emacs packages may fail. In this case it is possible to install using &lt;code&gt;emacs --insecure&lt;/code&gt;. However be aware that this means your packages will be transferred using http, use at your own risk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The period (dot) before a file or folder name, means that it&#39;s hidden. To show hidden files and folders:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press the Windows key&lt;/li&gt; &#xA;   &lt;li&gt;Type &lt;code&gt;file explorer options&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select the &lt;code&gt;View&lt;/code&gt; tab at the top&lt;/li&gt; &#xA;   &lt;li&gt;Check &lt;code&gt;Show hidden files, folders and drives&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;Default installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have an existing Emacs configuration, back it up first by running the following code in your terminal:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~&#xA;mv .emacs.d .emacs.d.bak&#xA;mv .emacs .emacs.bak&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t forget to backup and &lt;em&gt;remove&lt;/em&gt; the &lt;code&gt;~/.emacs&lt;/code&gt; file. Otherwise Spacemacs &lt;strong&gt;WILL NOT&lt;/strong&gt; be able to load. Because that file prevents Emacs from loading the proper initialization file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository with &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note: Windows users&lt;/strong&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs-in-windows&#34;&gt;Windows section&lt;/a&gt; for the correct clone path.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or in case you have a limited internet connection or speed,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Install the default fonts&lt;/p&gt; &lt;p&gt;It&#39;s recommended to install &lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro&#34;&gt;Source Code Pro&lt;/a&gt; by Adobe, as the default font. It ensures that, for example the symbols on the modeline (bottom bar) looks correct. It&#39;s also recommended to use a &#34;Fallback font&#34;. These depend on the system:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GNU/Linux: &lt;em&gt;NanumGothic&lt;/em&gt; (package named &lt;em&gt;fonts-nanum&lt;/em&gt; on Debian, for example)&lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;em&gt;Arial Unicode MS&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;em&gt;MS Gothic&lt;/em&gt; or &lt;em&gt;Lucida Sans Unicode&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If the modeline doesn&#39;t look similar to the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&#34;&gt;picture at the top of this page&lt;/a&gt;, then make sure you have the correct fallback font installed.&lt;/p&gt; &lt;p&gt;If you&#39;re running in a terminal then you&#39;ll also need to change the terminals font settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch Emacs. Spacemacs will automatically install the packages it requires.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch Emacs, and answer the questions in the Dotfile wizard installer. If you are new to Emacs and Spacemacs, then it&#39;s fine to just accept the default choices. It&#39;s easy to try the other choices later, without having to reinstall Spacemacs. They can be changed in the dotfile &lt;code&gt;~/.spacemacs&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After answering the questions, then Spacemacs starts downloading and installing the packages it requires. When the packages have been installed. Restart Emacs to complete the installation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; If you are behind a firewall or similar and you get an error regarding package downloads then you may try to disable the HTTPS protocol by starting Emacs with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;emacs --insecure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but this should be a last resort because of the security implications.&lt;/p&gt; &#xA;&lt;p&gt;You can set the &lt;code&gt;dotspacemacs-elpa-https&lt;/code&gt; variable to &lt;code&gt;nil&lt;/code&gt; in your dotfile &lt;code&gt;~/.spacemacs&lt;/code&gt; but this has the same security implications as the insecure flag. You may also want to clear out your &lt;code&gt;.emacs.d/elpa&lt;/code&gt; directory before doing this, so that any corrupted packages you may have downloaded will be re-installed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;error: Package &#39;package-build-&#39; is unavailable&lt;/code&gt; may occur due to heavy network taffic. You can fix it by setting the &lt;code&gt;dotspacemacs-elpa-timeout&lt;/code&gt; variable to &lt;code&gt;70&lt;/code&gt; in your dotfile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Warning (bytecomp)&lt;/code&gt; and other compilation warnings are perfectly normal. If you&#39;re curious, you can find out why these occur &lt;a href=&#34;https://github.com/quelpa/quelpa/issues/90#issuecomment-137982713&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the mode-line turns red then be sure to consult the &lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternative installations&lt;/h2&gt; &#xA;&lt;p&gt;There are currently, two supported, alternative locations, for a Spacemacs configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Modify HOME environment variable&lt;/h3&gt; &#xA;&lt;p&gt;This solution is ideal for quickly trying Spacemacs without compromising your existing configuration. Clone Spacemacs outside the Emacs dotdirectory &lt;code&gt;~/.emacs.d&lt;/code&gt; and modify the HOME environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir ~/spacemacs&#xA;git clone https://github.com/syl20bnr/spacemacs.git ~/spacemacs/.emacs.d&#xA;HOME=~/spacemacs emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using the Fish shell, then you&#39;ll need to modify the last command to: &lt;code&gt;env HOME=$HOME/spacemacs emacs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Modify spacemacs-start-directory variable&lt;/h3&gt; &#xA;&lt;p&gt;This solution is better suited to &#34;embed&#34; Spacemacs into your own configuration. If you&#39;ve cloned Spacemacs into &lt;code&gt;~/.emacs.d/spacemacs/&lt;/code&gt;, then drop the following lines in the &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq spacemacs-start-directory &#34;~/.emacs.d/spacemacs/&#34;)&#xA;(load-file (concat spacemacs-start-directory &#34;init.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Spacemacs logo&lt;/h2&gt; &#xA;&lt;p&gt;For Linux users, create &lt;code&gt;spacemacs.desktop&lt;/code&gt; in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; using &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/etc/emacs.desktop&#34;&gt;this&lt;/a&gt; as a reference. Change the &lt;code&gt;Name&lt;/code&gt; parameter to &lt;code&gt;Name=Spacemacs&lt;/code&gt; and the &lt;code&gt;Icon&lt;/code&gt; parameter to &lt;code&gt;Icon=/PATH/TO/EMACSD/core/banners/img/spacemacs.png&lt;/code&gt; where &lt;code&gt;PATH/TO/EMACSD&lt;/code&gt; is the path to your &lt;code&gt;.emacs.d&lt;/code&gt; directory, usually &lt;code&gt;~/.emacs.d&lt;/code&gt; or &lt;code&gt;~/.config/emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For macOS users, you need to &lt;a href=&#34;https://github.com/nashamri/spacemacs-logo&#34;&gt;download the .icns version of the logo&lt;/a&gt;, then &lt;a href=&#34;https://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/&#34;&gt;change the logo on the Dock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Update&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs supports two different update schemes, the default is a rolling update scheme based on the latest version of packages available. This version can be found on the &lt;code&gt;develop&lt;/code&gt; branch and is updated by a simple git pull.&lt;/p&gt; &#xA;&lt;p&gt;The second depreciated one is a fixed version scheme which is based on a stable set of packages. This version can be found on the &lt;code&gt;master&lt;/code&gt; branch and will show a notification when a new version is available. Be warned this has not been updated in a long time now so packages will be very old.&lt;/p&gt; &#xA;&lt;h2&gt;Rolling update (on develop)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull --rebase&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Automatic update (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;When a new version is available then a little arrow appears in the mode-line.&lt;/p&gt; &#xA;&lt;p&gt;Its color depends on the number of versions that have been released since your last update. Green means that you have a recent version, orange and red means that you have an older version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/powerline-update.png&#34; alt=&#34;powerline_update&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click on the arrow to update Spacemacs to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Manual update (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;Remove the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; angle brackets when you&#39;re typing the lines below into your shell. And replace the text: &#34;tag version which you are updating to&#34; with a tagged version. This page lists the &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/tags&#34;&gt;latest tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git fetch&#xA;git reset --hard &amp;lt;tag version which you are updating to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Revert to a specific version (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;To revert to a specific version, just checkout the corresponding branch. For instance to revert to version &lt;code&gt;0.200&lt;/code&gt;, type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git checkout origin/release-0.200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;After updating Spacemacs (either manually or automatically), then you also should check if any updates are available for your packages. On the Spacemacs Home Buffer &lt;kbd&gt;SPC b h&lt;/kbd&gt;, click (press &lt;kbd&gt;RET&lt;/kbd&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; button.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quotes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6&#34;&gt;Quote&lt;/a&gt; by &lt;a href=&#34;https://github.com/ashnur&#34;&gt;ashnur&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis&#xA;on the deck as a freerider.»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb&#34;&gt;Quote&lt;/a&gt; by &lt;a href=&#34;https://github.com/deuill&#34;&gt;deuill&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT&#xA;&#xA; That is all»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to date and to propose great and useful configurations for all the things!&lt;/p&gt; &#xA;&lt;p&gt;Before contributing be sure to consult the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;https://develop.spacemacs.org/doc/CONVENTIONS&#34;&gt;conventions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Communities&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs.stackexchange.com/questions/tagged/spacemacs&#34;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/spacemacs&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Spacemacs Everywhere&lt;/h1&gt; &#xA;&lt;p&gt;Once you&#39;ve learned the Spacemacs key bindings, you can use them in other IDEs/tools, thanks to the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcoIeni/intellimacs&#34;&gt;Intellimacs&lt;/a&gt; - Spacemacs&#39; like key bindings for IntelliJ platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcoIeni/spaceclipse&#34;&gt;Spaceclipse&lt;/a&gt; - Spacemacs’ like key bindings for Eclipse&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpaceVim/SpaceVim&#34;&gt;SpaceVim&lt;/a&gt; - A community-driven modular vim distribution&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VSpaceCode/VSpaceCode&#34;&gt;VSpaceCode&lt;/a&gt; - Spacemacs’ like key bindings for Visual Studio Code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the initialization and core files&lt;/li&gt; &#xA; &lt;li&gt;all the layer files&lt;/li&gt; &#xA; &lt;li&gt;the documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the packages shipped in this repository, you can refer to the files header.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nashamri/spacemacs-logo&#34;&gt;Spacemacs logo&lt;/a&gt; by &lt;a href=&#34;https://github.com/nashamri&#34;&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Supporting Spacemacs&lt;/h1&gt; &#xA;&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt; &#xA;&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs and more in the &lt;a href=&#34;https://shop.spreadshirt.com/spacemacs-shop&#34;&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to show your support financially, then you can contribute to &lt;a href=&#34;https://salt.bountysource.com/teams/spacemacs&#34;&gt;Bountysource&lt;/a&gt;, or buy a drink for the maintainer by clicking on the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#top&#34;&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you used spacemacs in a project, and you want to show that fact, you can use the spacemacs badge: &lt;a href=&#34;https://develop.spacemacs.org&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&#34; alt=&#34;Built with Spacemacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Markdown:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](https://develop.spacemacs.org)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For HTML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&#34;https://develop.spacemacs.org&#34;&amp;gt;&amp;lt;img alt=&#34;Built with Spacemacs&#34; src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg&#34; /&amp;gt;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Org-mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;[[https://develop.spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>org-roam/org-roam</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/org-roam/org-roam</id>
    <link href="https://github.com/org-roam/org-roam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rudimentary Roam replica with Org-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Org-roam &lt;a href=&#34;https://github.com/org-roam/org-roam/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/org-roam/org-roam&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/org-roam&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/org-roam-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;img src=&#34;https://www.orgroam.com/img/logo.svg?sanitize=true&#34; align=&#34;right&#34; alt=&#34;Org-roam Logo&#34; width=&#34;240&#34;&gt; &#xA;&lt;p&gt;Org-roam is a plain-text knowledge management system. It brings some of &lt;a href=&#34;https://www.roamresearch.com/&#34;&gt;Roam&#39;s&lt;/a&gt; more powerful features into the &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org-mode&lt;/a&gt; ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Private and Secure&lt;/strong&gt;: Edit your personal wiki completely offline, entirely in your control. Encrypt your notes with GPG. Take lasting notes in plain-text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Networked Thought&lt;/strong&gt;: Connect notes and thoughts together with ease using backlinks. Discover surprising and previously unseen connections in your notes with the built-in graph visualization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible and Powerful&lt;/strong&gt;: Leverage Emacs&#39; fantastic text-editing interface, and the mature Emacs and Org-mode ecosystem of packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and Open Source&lt;/strong&gt;: Org-roam is licensed under the GNU General Public License version 3 or later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://www.orgroam.com/img/screenshot.png&#34; alt=&#34;Org-roam Screenshot&#34; width=&#34;738&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.orgroam.com/manual.html&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.orgroam.com/manual.html#FAQ&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/org-roam/org-roam/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Down below you will find basic installation instructions for how to quickly install &lt;code&gt;org-roam&lt;/code&gt; using various environments for various purposes. For more detailed information, please read the &lt;a href=&#34;https://www.orgroam.com/manual.html&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;You can install &lt;code&gt;org-roam&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt; using &lt;code&gt;package.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;M-x package-install RET org-roam RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;Installation from MELPA or MELPA Stable using &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight t&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you need to install the package directly from the source repository, instead of from MELPA, the next sample shows how to do so:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight (:host github :repo &#34;org-roam/org-roam&#34;&#xA;             :files (:defaults &#34;extensions/*&#34;))&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you plan to use your own local fork for the development and contribution, the next sample will get you there:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight (:local-repo &#34;/path/to/org-roam-fork&#34;&#xA;             :files (:defaults &#34;extensions/*&#34;)&#xA;             :build (:not compile))&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Using Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;Doom&#39;s &lt;code&gt;:lang org&lt;/code&gt; module comes with support for &lt;code&gt;org-roam&lt;/code&gt;, but it&#39;s not enabled by default. To activate it pass &lt;code&gt;+roam2&lt;/code&gt; flag to &lt;code&gt;org&lt;/code&gt; module in your &lt;code&gt;$DOOMDIR/init.el&lt;/code&gt; (e.g. &lt;code&gt;(org +roam2)&lt;/code&gt;), save the file and run &lt;code&gt;doom sync -u&lt;/code&gt; in your shell.&lt;/p&gt; &#xA; &lt;p&gt;To provide better stability, Doom pins the package to a specific commit. If you need to unpin it &lt;em&gt;(not recommended doing that, request Doom to bump the package instead)&lt;/em&gt; use the next in your &lt;code&gt;packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(unpin! org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If for some reasons you want to use a different recipe for &lt;code&gt;org-roam&lt;/code&gt;, you can use the next form in your &lt;code&gt;packages.el&lt;/code&gt; to install the package from a recipe repository (e.g. MELPA):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can pass &lt;code&gt;:pin &#34;commit hash&#34;&lt;/code&gt; to pin the package to a specific commit.&lt;/p&gt; &#xA; &lt;p&gt;With the next sample you can install the package directly from the source repository:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam&#xA;  :recipe (:host github :repo &#34;org-roam/org-roam&#34;&#xA;           :files (:defaults &#34;extensions/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And if you plan to use your own local fork for the development or contribution, the next sample will get you there:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam&#xA;  :recipe (:local-repo &#34;/path/to/org-roam-fork&#34;&#xA;           :files (:defaults &#34;extensions/*&#34;)&#xA;           :build (:not compile)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Without a package manager&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;To install the package without using a package manager you have the next two options:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install the package by cloning it with &lt;code&gt;git&lt;/code&gt; from the source repository.&lt;/li&gt; &#xA;  &lt;li&gt;Or install the package by downloading the latest &lt;a href=&#34;https://github.com/org-roam/org-roam/releases&#34;&gt;release version&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;In both of the cases you will need to ensure that you have all the required dependencies. These include:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;dash&lt;/li&gt; &#xA;  &lt;li&gt;f&lt;/li&gt; &#xA;  &lt;li&gt;s&lt;/li&gt; &#xA;  &lt;li&gt;org (9.4 is the minimal required version!)&lt;/li&gt; &#xA;  &lt;li&gt;emacsql&lt;/li&gt; &#xA;  &lt;li&gt;emacsql-sqlite&lt;/li&gt; &#xA;  &lt;li&gt;magit-section&lt;/li&gt; &#xA;  &lt;li&gt;filenotify-recursive&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;After installing the package, you will need to properly setup &lt;code&gt;load-path&lt;/code&gt; to the package:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/org-roam/&#34;)&#xA;(add-to-list &#39;load-path &#34;/path/to-org-roam/extensions/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After which you should be able to resolve &lt;code&gt;(require &#39;org-roam)&lt;/code&gt; call without any problems.&lt;/p&gt; &#xA; &lt;p&gt;Org-roam also comes with &lt;code&gt;.texi&lt;/code&gt; files to integrate with Emacs&#39; built-in Info system. Read the manual to find more details for how to install them manually.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a very basic sample for configuration of &lt;code&gt;org-roam&lt;/code&gt; using &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :ensure t&#xA;  :custom&#xA;  (org-roam-directory (file-truename &#34;/path/to/org-files/&#34;))&#xA;  :bind ((&#34;C-c n l&#34; . org-roam-buffer-toggle)&#xA;         (&#34;C-c n f&#34; . org-roam-node-find)&#xA;         (&#34;C-c n g&#34; . org-roam-graph)&#xA;         (&#34;C-c n i&#34; . org-roam-node-insert)&#xA;         (&#34;C-c n c&#34; . org-roam-capture)&#xA;         ;; Dailies&#xA;         (&#34;C-c n j&#34; . org-roam-dailies-capture-today))&#xA;  :config&#xA;  ;; If you&#39;re using a vertical completion framework, you might want a more informative completion interface&#xA;  (setq org-roam-node-display-template (concat &#34;${title:*} &#34; (propertize &#34;${tags:10}&#34; &#39;face &#39;org-tag)))&#xA;  (org-roam-db-autosync-mode)&#xA;  ;; If using org-roam-protocol&#xA;  (require &#39;org-roam-protocol))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;file-truename&lt;/code&gt; function is only necessary when you use symbolic link to &lt;code&gt;org-roam-directory&lt;/code&gt;. Org-roam won&#39;t automatically resolve symbolic link to the directory.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/daviwil&#34;&gt;David Wilson&lt;/a&gt; of &lt;a href=&#34;https://www.youtube.com/c/SystemCrafters&#34;&gt;System Crafters&lt;/a&gt; has produced an introductory video that covers the basic commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=AyhPmypHDEw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/AyhPmypHDEw/0.jpg&#34; alt=&#34;Getting Started with Org Roam - Build a Second Brain in Emacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;Before creating a new topic/issue, please be mindful of our time and ensure that it has not already been addressed on &lt;a href=&#34;https://github.com/org-roam/org-roam/issues&#34;&gt;GitHub&lt;/a&gt; or on &lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are new to Emacs and have problem setting up Org-roam, please ask your question on &lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack, channel #how-do-i&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For quick questions, please ask them on &lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack, channel #troubleshooting&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If something is not working as it should, or if you would like to suggest a new feature, please &lt;a href=&#34;https://github.com/org-roam/org-roam/issues&#34;&gt;create a new issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you have questions about your workflow with the slip-box method, please find a relevant topic on &lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;, or create a new one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Knowledge Bases using Org-roam&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://braindump.jethro.dev/&#34;&gt;Jethro Kuan&lt;/a&gt; (&lt;a href=&#34;https://github.com/jethrokuan/braindump/tree/master/org&#34;&gt;Source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alexeyshmalko.com/&#34;&gt;Alexey Shmalko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sidhartharya.github.io/braindump/index.html&#34;&gt;Sidharth Arya&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs and suggest new feature use the issue tracker. If you have some code which you would like to be merged, then open a pull request. Please also see &lt;a href=&#34;https://raw.githubusercontent.com/org-roam/org-roam/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Jethro Kuan and contributors. Distributed under the GNU General Public License, Version 3.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zerolfx/copilot.el</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/zerolfx/copilot.el</id>
    <link href="https://github.com/zerolfx/copilot.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot.el&lt;/h1&gt; &#xA;&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This plugin is unofficial and based on binaries provided by &lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;copilot.vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to Copilot technical preview to use this plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; (only support 12.x to 17.x).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package! copilot&#xA;  :recipe (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;*.el&#34; &#34;dist&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(use-package! copilot&#xA;  :hook (prog-mode . copilot-mode)&#xA;  :bind ((&#34;C-TAB&#34; . &#39;copilot-accept-completion-by-word)&#xA;         (&#34;C-&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion-by-word)&#xA;         :map company-active-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)&#xA;         :map company-mode-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; ===================&#xA;;; dotspacemacs/layers&#xA;;; ===================&#xA;&#xA;;; add copilot.el to additional packages&#xA;dotspacemacs-additional-packages&#xA; &#39;((copilot :location (recipe&#xA;                       :fetcher github&#xA;                       :repo &#34;zerolfx/copilot.el&#34;&#xA;                       :files (&#34;*.el&#34; &#34;dist&#34;))))&#xA;&#xA;;; ========================&#xA;;; dotspacemacs/user-config&#xA;;; ========================&#xA;&#xA;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;  ;; enable tab completion&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&#xA;&#xA;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&#xA;(define-key evil-insert-state-map (kbd &#34;C-&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion-by-word)&#xA;(define-key evil-insert-state-map (kbd &#34;C-TAB&#34;) &#39;copilot-accept-completion-by-word)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;General Configurations&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Load via &lt;code&gt;straight.el&lt;/code&gt; (recommended)&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :straight (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))&#xA;  :ensure t)&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Option 2: Load manually&lt;/h5&gt; &#xA; &lt;p&gt;Please make sure you have these dependencies installed, and use &lt;code&gt;load-file&lt;/code&gt; or &lt;code&gt;load-path&lt;/code&gt; + &lt;code&gt;require&lt;/code&gt; to load it.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;2. Configure completion&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; &#xA; &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; &#xA; &lt;p&gt;In general, you need to bind &lt;code&gt;copilot-accept-completion&lt;/code&gt; to some key in order to accept the completion. Also, you may find &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; is useful.&lt;/p&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;company-mode&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then company-mode&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;; modify company-mode behaviors&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;auto-complete&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then auto-complete&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (ac-expand nil)))&#xA;&#xA;(with-eval-after-load &#39;auto-complete&#xA;  ; disable inline preview&#xA;  (setq ac-disable-inline t)&#xA;  ; show menu if have only one candidate&#xA;  (setq ac-candidate-menu-min 0)&#xA;&#xA;  (define-key ac-completing-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key ac-completing-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab))&#xA;&#xA;(define-key global-map [remap indent-for-tab-command] &#39;(lambda ()&#xA;                                                         (interactive)&#xA;                                                         (or (copilot-accept-completion)&#xA;                                                             (indent-for-tab-command))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-diagnose&lt;/h4&gt; &#xA;&lt;p&gt;Check the current status of the plugin. Also you can check error logs in the &lt;code&gt;*copilot-log*&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-login&lt;/h4&gt; &#xA;&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-mode&lt;/h4&gt; &#xA;&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-complete&lt;/h4&gt; &#xA;&lt;p&gt;Try to complete at the current point.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; &#xA;&lt;p&gt;Accept the current completion.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; &#xA;&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; &#xA;&lt;p&gt;Cycle through the completion list.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-node-executable&lt;/h4&gt; &#xA;&lt;p&gt;The executable path of Node.js.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; &#xA;&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be enabled only if all predicates return &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-disable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to disable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be disabled if any predicate returns &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-overlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; &#xA;&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-box.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cycle through suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;These projects helped me a lot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyX12/company-tabnine/&#34;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cryptobadger/flight-attendant.el&#34;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>vspinu/sesman</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/vspinu/sesman</id>
    <link href="https://github.com/vspinu/sesman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Session manager for Emacs based IDEs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/sesman&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/sesman-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/sesman&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/sesman-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/vspinu/sesman&#34;&gt;&lt;img src=&#34;https://travis-ci.org/vspinu/sesman.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Generic Session Manager for Emacs&lt;/h2&gt; &#xA;&lt;p&gt;Sesman provides facilities for session management and interactive session association with the current contexts (e.g. project, directory, buffers). While sesman can be used to manage arbitrary &#34;sessions&#34;, it primary targets the Emacs based IDEs (&lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt;, &lt;a href=&#34;https://ess.r-project.org/&#34;&gt;ESS&lt;/a&gt;, &lt;a href=&#34;https://github.com/jaor/geiser&#34;&gt;Geiser&lt;/a&gt;, &lt;a href=&#34;https://github.com/dgutov/robe&#34;&gt;Robe&lt;/a&gt;, &lt;a href=&#34;https://common-lisp.net/project/slime/&#34;&gt;SLIME&lt;/a&gt; etc.)&lt;/p&gt; &#xA;&lt;p&gt;For Emacs based IDEs, session are commonly composed of one or more physical processes (sub-processes, sockets, websockets etc). For example in the current implementation of &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt; a session would be composed of one or more sesman connections (Clojure or ClojureScript). Each &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt; connection consists of user REPL buffer and two sub-processes, one for user eval communication and another for tooling (completion, inspector etc).&lt;/p&gt; &#xA;&lt;h3&gt;Concepts:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;session&#34; is a list of the form &lt;code&gt;(session-name ..other-stuff..)&lt;/code&gt; where &lt;code&gt;..other-stuff..&lt;/code&gt; is system dependent.&lt;/li&gt; &#xA; &lt;li&gt;&#34;system&#34; is generic name used for a tool which uses sesman (e.g. &lt;code&gt;CIDER&lt;/code&gt;, &lt;code&gt;ESS&lt;/code&gt; etc)&lt;/li&gt; &#xA; &lt;li&gt;&#34;contexts&#34; are Emacs objects which describe current context. For example &lt;code&gt;current-buffer&lt;/code&gt;, &lt;code&gt;default-directory&lt;/code&gt; and &lt;code&gt;project-current&lt;/code&gt; are such contexts. Context objects are used to create associations (links) between the current context and sessions. At any given time the user can link (unlink) sessions to (from) contexts. By default there are three types of contexts - buffer, directory and project, but systems can define their own specialized context types..&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sesman is composed of two parts, user interface, available as a sesman map and menu, and system interface consisting of a few generics and API functions.&lt;/p&gt; &#xA;&lt;h3&gt;User Interface&lt;/h3&gt; &#xA;&lt;p&gt;Consists of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lifecycle management commands (&lt;code&gt;sesman-start&lt;/code&gt;, &lt;code&gt;sesman-quit&lt;/code&gt; and &lt;code&gt;sesman-restart&lt;/code&gt;), and&lt;/li&gt; &#xA; &lt;li&gt;association management commands (&lt;code&gt;sesman-link-with-buffer&lt;/code&gt;, &lt;code&gt;sesman-link-with-directory&lt;/code&gt;, &lt;code&gt;sesman-link-with-project&lt;/code&gt; and &lt;code&gt;sesman-unlink&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From the user&#39;s prospective the work-flow is as follow. Start a session, either with &lt;code&gt;sesman-start&lt;/code&gt; (&lt;code&gt;C-c C-s C-s&lt;/code&gt;) or some of the system specific commands (&lt;code&gt;run-xyz&lt;/code&gt;, &lt;code&gt;xyz-jack-in&lt;/code&gt; etc). On startup each session is automatically associated with the least specific context (commonly a project). In the most common case the user has only one session open per project. In such case, no ambiguity arises when a system retrieves the current session. If multiple sessions are associated with the current context the ambiguity is automatically resolved through the system specific relevance mechanism. Usually it is the most recently used session.&lt;/p&gt; &#xA;&lt;p&gt;By default links with projects and directories are many-to-many in the sense that any session can be linked to multiple context and each context can be associated with multiple sessions. Buffers instead are 1-to-many. One buffer can be associated with only one session and a session can be associated with multiple buffers. This behavior is controlled by a custom &lt;code&gt;sesman-single-link-context-types&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;System Interface&lt;/h3&gt; &#xA;&lt;p&gt;Consists of several generics, of which only first three are strictly required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-start-session&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-quit-session&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-restart-session&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-session-info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-context-types&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-more-relevant-p&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sesman also provides [a range of utility functions][system api] functions to manipulate sessions, links and session components. Systems can register entire sessions with &lt;code&gt;sesman-register&lt;/code&gt; or add/remove objects one by one with &lt;code&gt;sesman-add-object&lt;/code&gt;/&lt;code&gt;sesman-remove-object&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Systems should link sesman map into their key-maps (ideally on &lt;code&gt;C-c C-s&lt;/code&gt;) and install sesman menu with &lt;code&gt;sesman-install-menu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Implementations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cider.mx/cider/usage/managing_connections.html&#34;&gt;CIDER implementation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- , which is a good mnemonic and is already used in CIDER and ESS. --&gt;</summary>
  </entry>
  <entry>
    <title>bbatsov/projectile</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/bbatsov/projectile</id>
    <link href="https://github.com/bbatsov/projectile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project Interaction Library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Projectile&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bbatsov/projectile/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/bbatsov/projectile/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/projectile&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/projectile-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/projectile&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/projectile-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/projectile.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/projectile.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Synopsis&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Projectile&lt;/strong&gt; is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible). For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU &lt;code&gt;find&lt;/code&gt; (but for performance sake an indexing mechanism backed by external commands exists as well).&lt;/p&gt; &#xA;&lt;p&gt;Projectile tries to be practical - portability is great, but if some external tools could speed up some task substantially and the tools are available, Projectile will leverage them.&lt;/p&gt; &#xA;&lt;p&gt;This library provides easy project management and navigation. The concept of a project is pretty basic - just a folder containing some special file (e.g. a VCS marker or a project descriptor file like &lt;code&gt;pom.xml&lt;/code&gt; or &lt;code&gt;Gemfile&lt;/code&gt;). Projectile will auto-detect pretty much every popular project type out of the box and you can easily extend it with additional project types.&lt;/p&gt; &#xA;&lt;p&gt;Here are some of Projectile&#39;s features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;jump to a file in project&lt;/li&gt; &#xA; &lt;li&gt;jump to a project buffer&lt;/li&gt; &#xA; &lt;li&gt;jump to a test in project&lt;/li&gt; &#xA; &lt;li&gt;toggle between files with same names but different extensions (e.g. &lt;code&gt;.h&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;.c/.cpp&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;Gemfile.lock&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;toggle between code and its test (e.g. &lt;code&gt;main.service.js&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;main.service.spec.js&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;jump to recently visited files in the project&lt;/li&gt; &#xA; &lt;li&gt;switch between projects you have worked on&lt;/li&gt; &#xA; &lt;li&gt;kill (close) all project buffers&lt;/li&gt; &#xA; &lt;li&gt;replace in project&lt;/li&gt; &#xA; &lt;li&gt;grep (search) in project&lt;/li&gt; &#xA; &lt;li&gt;run shell commands in a project (e.g. &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;lein&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;support for multiple minibuffer completion/selection libraries (&lt;code&gt;ido&lt;/code&gt;, &lt;code&gt;ivy&lt;/code&gt;, &lt;code&gt;helm&lt;/code&gt; and the default completion system)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=GRQKNBM6P8VRQ&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;Paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been developing Projectile for a decade now (since 2011). While it&#39;s a fun project to work on, it still requires a lot of time and energy to maintain.&lt;/p&gt; &#xA;&lt;p&gt;You can support my work on Projectile via &lt;a href=&#34;https://www.paypal.me/bbatsov&#34;&gt;PayPal&lt;/a&gt;, &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;Patreon&lt;/a&gt; and &lt;a href=&#34;https://github.com/sponsors/bbatsov&#34;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Projectile in Action&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a glimpse of Projectile in action (using &lt;code&gt;ivy&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bbatsov/projectile/master/doc/modules/ROOT/assets/images/projectile-demo.gif&#34; alt=&#34;Projectile Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this short demo you can see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;finding files in a project&lt;/li&gt; &#xA; &lt;li&gt;switching between implementation and test&lt;/li&gt; &#xA; &lt;li&gt;switching between projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The instructions that follow are meant to get you from zero to a running Projectile setup in a minute. Visit the &lt;a href=&#34;https://docs.projectile.mx&#34;&gt;online documentation&lt;/a&gt; for (way) more details.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;package.el&lt;/code&gt; is the built-in package manager in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Projectile is available on all major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href=&#34;https://elpa.nongnu.org&#34;&gt;NonGNU ELPA&lt;/a&gt;, &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can install Projectile with the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt; &lt;code&gt;projectile&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.04 or later may simply &lt;code&gt;apt-get install elpa-projectile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally add this to your Emacs config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(projectile-mode +1)&#xA;;; Recommended keymap prefix on macOS&#xA;(define-key projectile-mode-map (kbd &#34;s-p&#34;) &#39;projectile-command-map)&#xA;;; Recommended keymap prefix on Windows/Linux&#xA;(define-key projectile-mode-map (kbd &#34;C-c p&#34;) &#39;projectile-command-map)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those keymap prefixes are just a suggestion. Feel free to put there whatever works best for you.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;p&gt;Enable &lt;code&gt;projectile-mode&lt;/code&gt;, open a file in one of your projects and type a command such as &lt;kbd&gt;C-c p f&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.projectile.mx&#34;&gt;online documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some operations like search (grep) depend (presently) on external utilities such as &lt;code&gt;find&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Commands depending on external utilities might misbehave on the &lt;code&gt;fish&lt;/code&gt; shell.&lt;/li&gt; &#xA; &lt;li&gt;Using Projectile over TRAMP might be slow in certain cases.&lt;/li&gt; &#xA; &lt;li&gt;Some commands might misbehave on complex project setups (e.g. a git project with submodules).&lt;/li&gt; &#xA; &lt;li&gt;Projectile was mostly tested on Unix OS-es (e.g. GNU/Linux and macOS), so some functionality might not work well on Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Check out the project&#39;s &lt;a href=&#34;https://github.com/bbatsov/projectile/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open&#34;&gt;issue list&lt;/a&gt; a list of unresolved issues. By the way - feel free to fix any of them and send me a pull request. :-)&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/bbatsov/projectile/contributors&#34;&gt;list&lt;/a&gt; of all the people who have contributed to the development of Projectile (a.k.a. Projectile&#39;s Hall of Fame).&lt;/p&gt; &#xA;&lt;p&gt;Joining this esteemed group of people is only a commit away!&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;A fairly extensive changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/bbatsov/projectile/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2011-2021 Bozhidar Batsov and &lt;a href=&#34;https://github.com/bbatsov/projectile/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the GNU General Public License, version 3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magnars/multiple-cursors.el</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/magnars/multiple-cursors.el</id>
    <link href="https://github.com/magnars/multiple-cursors.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multiple cursors for emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/magnars/multiple-cursors.el/actions&#34;&gt;&lt;img src=&#34;https://github.com/magnars/multiple-cursors.el/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/multiple-cursors&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/multiple-cursors-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/multiple-cursors&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/multiple-cursors-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/multiple-cursors.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/multiple-cursors.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;multiple-cursors.el&lt;/h1&gt; &#xA;&lt;p&gt;Multiple cursors for Emacs. This is some pretty crazy functionality, so yes, there are kinks. Don&#39;t be afraid though, I&#39;ve been using it since 2011 with great success and much merriment.&lt;/p&gt; &#xA;&lt;h2&gt;Maintenance warning&lt;/h2&gt; &#xA;&lt;p&gt;I use this package every day, and have been doing so for years. It just works. At least, it works for all my use cases. And if it breaks somehow, I fix it.&lt;/p&gt; &#xA;&lt;p&gt;However, it has become painfully clear to me that I don&#39;t have time to fix problems I don&#39;t have. It&#39;s been years since I could keep pace with the issues and pull requests. Whenever I try, I keep getting feedback that my fix isn&#39;t good enough by some standard I don&#39;t particularly care about.&lt;/p&gt; &#xA;&lt;p&gt;So, I have closed the issue tracker and the pull requests. I hope you can happily use this package, just like I do. If it doesn&#39;t work for you, then I&#39;m sorry. Thankfully Emacs is infinitely malleable, you can probably fix it yourself.&lt;/p&gt; &#xA;&lt;p&gt;TLDR: &lt;em&gt;I am still maintaining this package&lt;/em&gt;, but I am no longer crowdsourcing a list of issues.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;I highly recommend installing multiple-cursors through &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s available on &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;https://elpa.nongnu.org/nongnu/multiple-cursors.html&#34;&gt;NonGNU ELPA&lt;/a&gt; (enabled by default from Emacs 28 onwards):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install multiple-cursors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The package depends on the &lt;code&gt;cl-lib&lt;/code&gt; package, so if you do not use &lt;code&gt;package.el&lt;/code&gt; or have a recent Emacs, you would need to install that too: see &lt;a href=&#34;http://elpa.gnu.org/packages/cl-lib.html&#34;&gt;GNU ELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;Start out with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;multiple-cursors)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you have to set up your keybindings - multiple-cursors doesn&#39;t presume to know how you&#39;d like them laid out. Here are some examples:&lt;/p&gt; &#xA;&lt;p&gt;When you have an active region that spans multiple lines, the following will add a cursor to each line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &#34;C-S-c C-S-c&#34;) &#39;mc/edit-lines)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &#34;C-&amp;gt;&#34;) &#39;mc/mark-next-like-this)&#xA;(global-set-key (kbd &#34;C-&amp;lt;&#34;) &#39;mc/mark-previous-like-this)&#xA;(global-set-key (kbd &#34;C-c C-&amp;lt;&#34;) &#39;mc/mark-all-like-this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First mark the word, then add more cursors.&lt;/p&gt; &#xA;&lt;p&gt;To get out of multiple-cursors-mode, press &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; or &lt;code&gt;C-g&lt;/code&gt;. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use &lt;code&gt;C-j&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Important note&lt;/h2&gt; &#xA;&lt;p&gt;Multiple cursors does not do well when you invoke its commands with &lt;code&gt;M-x&lt;/code&gt;. It needs to be bound to keys to work properly. Pull request to fix this is welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;http://emacsrocks.com/e13.html&#34;&gt;watch an intro to multiple-cursors at Emacs Rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command overview&lt;/h2&gt; &#xA;&lt;h3&gt;Mark one more occurrence&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-like-this&lt;/code&gt;: Adds a cursor and region at the next part of the buffer forwards that matches the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-like-this-word&lt;/code&gt;: Adds a cursor and region at the next part of the buffer forwards that matches the current region, if no region is selected it selects the word at the point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-like-this-symbol&lt;/code&gt;: Adds a cursor and region at the next part of the buffer forwards that matches the current region, if no region is selected it selects the symbol at the point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-word-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; but only for whole words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-symbol-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; but only for whole symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-like-this&lt;/code&gt;: Adds a cursor and region at the next part of the buffer backwards that matches the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-like-this-word&lt;/code&gt;: Adds a cursor and region at the next part of the buffer backwards that matches the current region, if no region is selected it selects the word at the point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-like-this-symbol&lt;/code&gt;: Adds a cursor and region at the next part of the buffer backwards that matches the current region, if no region is selected it selects the symbol at the point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-word-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-previous-like-this&lt;/code&gt; but only for whole words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-symbol-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-previous-like-this&lt;/code&gt; but only for whole symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-more-like-this-extended&lt;/code&gt;: Use arrow keys to quickly mark/skip next/previous occurrences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/add-cursor-on-click&lt;/code&gt;: Bind to a mouse event to add cursors by clicking. See tips-section.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-pop&lt;/code&gt;: Set a cursor at the current point and move to the next (different) position on the mark stack. This allows for fine grained control over the placement of cursors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Juggle around with the current cursors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/unmark-next-like-this&lt;/code&gt;: Remove the cursor furthest down in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/unmark-previous-like-this&lt;/code&gt;: Remove the cursor furthest up in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/skip-to-next-like-this&lt;/code&gt;: Remove the cursor furthest down, marking the next occurrence down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/skip-to-previous-like-this&lt;/code&gt;: Remove the cursor furthest up, marking the next occurrence up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mark many occurrences&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/edit-lines&lt;/code&gt;: Adds one cursor to each line in the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/edit-beginnings-of-lines&lt;/code&gt;: Adds a cursor at the start of each line in the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/edit-ends-of-lines&lt;/code&gt;: Adds a cursor at the end of each line in the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-like-this&lt;/code&gt;: Marks all parts of the buffer that matches the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-words-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-all-like-this&lt;/code&gt; but only for whole words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-symbols-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-all-like-this&lt;/code&gt; but only for whole symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-in-region&lt;/code&gt;: Prompts for a string to match in the region, adding cursors to all of them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-like-this-in-defun&lt;/code&gt;: Marks all parts of the current defun that matches the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-words-like-this-in-defun&lt;/code&gt;: Like &lt;code&gt;mc/mark-all-like-this-in-defun&lt;/code&gt; but only for whole words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-symbols-like-this-in-defun&lt;/code&gt;: Like &lt;code&gt;mc/mark-all-like-this-in-defun&lt;/code&gt; but only for whole symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-dwim&lt;/code&gt;: Tries to be smart about marking everything you want. Can be pressed multiple times.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;set-rectangular-region-anchor&lt;/code&gt;: Think of this one as &lt;code&gt;set-mark&lt;/code&gt; except you&#39;re marking a rectangular region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-sgml-tag-pair&lt;/code&gt;: Mark the current opening and closing tag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/insert-numbers&lt;/code&gt;: Insert increasing numbers for each cursor, top to bottom.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/insert-letters&lt;/code&gt;: Insert increasing letters for each cursor, top to bottom.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/sort-regions&lt;/code&gt;: Sort the marked regions alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/reverse-regions&lt;/code&gt;: Reverse the order of the marked regions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/vertical-align&lt;/code&gt;: Aligns all cursors vertically with a given CHARACTER to the one with the highest column number (the rightest). (Might not behave as intended if more than one cursors are on the same line.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/vertical-align-with-space&lt;/code&gt;: Aligns all cursors with whitespace like &lt;code&gt;mc/vertical-align&lt;/code&gt; does.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tips and tricks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To get out of multiple-cursors-mode, press &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; or &lt;code&gt;C-g&lt;/code&gt;. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use &lt;code&gt;C-j&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(define-key mc/keymap (kbd &#34;&amp;lt;return&amp;gt;&#34;) nil)&lt;/code&gt; will make &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; insert a newline; multiple-cursors-mode can still be disabled with &lt;code&gt;C-g&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sometimes you end up with cursors outside of your view. You can scroll the screen to center on each cursor with &lt;code&gt;C-v&lt;/code&gt; and &lt;code&gt;M-v&lt;/code&gt; or you can press &lt;code&gt;C-&#39;&lt;/code&gt; to hide all lines without a cursor, press &lt;code&gt;C-&#39;&lt;/code&gt; again to unhide.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try pressing &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; with no region selected. It will just add a cursor on the next line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try pressing &lt;code&gt;mc/mark-next-like-this-word&lt;/code&gt; or &lt;code&gt;mc/mark-next-like-this-symbol&lt;/code&gt; with no region selected. It will mark the word or symbol and add a cursor at the next occurrence&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try pressing &lt;code&gt;mc/mark-all-like-this-dwim&lt;/code&gt; on a tagname in html-mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Notice that the number of cursors active can be seen in the modeline.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you get out of multiple-cursors-mode and yank - it will yank only from the kill-ring of main cursor. To yank from the kill-rings of every cursor use yank-rectangle, normally found at C-x r y.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use &lt;code&gt;mc/reverse-regions&lt;/code&gt; with nothing selected and just one cursor. It will then flip the sexp at point and the one below it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you use &lt;code&gt;mc/edit-lines&lt;/code&gt;, you can give it a positive or negative prefix to change how it behaves on too short lines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you would like to keep the global bindings clean, and get custom keybindings when the region is active, you can try &lt;a href=&#34;https://github.com/fgallina/region-bindings-mode&#34;&gt;region-bindings-mode&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is a special hook that is run when the mode is diabled (which is equivalent to the number of cursors going back to 1): &lt;code&gt;multiple-cursors-mode-disabled-hook&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BTW, I highly recommend adding &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; to a key binding that&#39;s right next to the key for &lt;code&gt;er/expand-region&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Binding mouse events&lt;/h3&gt; &#xA;&lt;p&gt;To override a mouse event, you will likely have to also unbind the &lt;code&gt;down-mouse&lt;/code&gt; part of the event. Like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-unset-key (kbd &#34;M-&amp;lt;down-mouse-1&amp;gt;&#34;))&#xA;(global-set-key (kbd &#34;M-&amp;lt;mouse-1&amp;gt;&#34;) &#39;mc/add-cursor-on-click)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can do like me and find an unused, but less convenient, binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &#34;C-S-&amp;lt;mouse-1&amp;gt;&#34;) &#39;mc/add-cursor-on-click)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unknown commands&lt;/h2&gt; &#xA;&lt;p&gt;Multiple-cursors uses two lists of commands to know what to do: the run-once list and the run-for-all list. It comes with a set of defaults, but it would be beyond silly to try and include all the known Emacs commands.&lt;/p&gt; &#xA;&lt;p&gt;So that&#39;s why multiple-cursors occasionally asks what to do about a command. It will then remember your choice by saving it in &lt;code&gt;~/.emacs.d/.mc-lists.el&lt;/code&gt;. You can change the location with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq mc/list-file &#34;/my/preferred/file&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NB! Make sure to do so before requiring multiple-cursors.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to set multiple-cursors to &#34;run-for-all&#34; for every command except for those that are listed in &lt;code&gt;mc/cmds-to-run-once&lt;/code&gt;. To enable this set &lt;code&gt;mc/always-run-for-all&lt;/code&gt; to non-nil. Add commands to be run once to &lt;code&gt;mc/cmds-to-run-once&lt;/code&gt; in &#34;.mc-lists.el&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;isearch-forward and isearch-backward aren&#39;t supported with multiple cursors. If you want this functionality, you can use &lt;a href=&#34;https://github.com/zk-phi/phi-search&#34;&gt;phi-search&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Commands run with &lt;code&gt;M-x&lt;/code&gt; won&#39;t be repeated for all cursors.&lt;/li&gt; &#xA; &lt;li&gt;All key bindings that refer to lambdas are always run for all cursors. If you need to limit it, you will have to give it a name.&lt;/li&gt; &#xA; &lt;li&gt;Redo might screw with your cursors. Undo works very well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Yes, please do. There&#39;s a suite of tests, so remember to add tests for your specific feature, or I might break it later.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find the repo at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/magnars/multiple-cursors.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fetch the test dependencies, install &lt;a href=&#34;https://github.com/rejeep/cask.el&#34;&gt;cask&lt;/a&gt; if you haven&#39;t already, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/multiple-cursors&#xA;$ cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./run-tests.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tkf&#34;&gt;Takafumi Arakaki&lt;/a&gt; has contributed several small improvements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/segv&#34;&gt;Marco Baringer&lt;/a&gt; contributed looping to &lt;code&gt;mc/cycle&lt;/code&gt; and adding cursors without region for mark-more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gvol&#34;&gt;Ivan Andrus&lt;/a&gt; added showing number of cursors in mode-line, and different options for how to handle short lines in &lt;code&gt;mc/edit-lines&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fuco1&#34;&gt;Fuco&lt;/a&gt; added the first version of &lt;code&gt;mc/mark-all-like-this-dwim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smithzvk&#34;&gt;Zach Kost-Smith&lt;/a&gt; added &lt;code&gt;mc/mark-pop&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mathrick&#34;&gt;Maciej Katafiasz&lt;/a&gt; added &lt;code&gt;mc/mark-all-dwim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lexa&#34;&gt;Aleksey Fedotov&lt;/a&gt; added &lt;code&gt;mc-hide-unmatched-lines-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtamagnan&#34;&gt;Jules Tamagnan&lt;/a&gt; added &lt;code&gt;mc/mark-next-like-this-word&lt;/code&gt; and &lt;code&gt;mc/mark-next-like-this-symbol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ilohmar&#34;&gt;Ingo Lohmar&lt;/a&gt; extended &lt;code&gt;mc/add-cursor-on-click&lt;/code&gt; to toggle cursors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreaOrru&#34;&gt;Andrea Orru&lt;/a&gt; added &lt;code&gt;mc/mark-previous-like-this-word&lt;/code&gt;/&lt;code&gt;-symbol&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2012-2016 Magnar Sveen&lt;/p&gt; &#xA;&lt;p&gt;Author: Magnar Sveen &lt;a href=&#34;mailto:magnars@gmail.com&#34;&gt;magnars@gmail.com&lt;/a&gt; Keywords: editing cursors&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magit/magit</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/magit/magit</id>
    <link href="https://github.com/magit/magit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;It&#39;s Magit! A Git porcelain inside Emacs.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://magit.vc/assets/magit-168x200px.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;A Git Porcelain inside Emacs&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://magit.vc&#34;&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://magit.vc/manual&#34;&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://magit.vc/manual/magit/FAQ.html&#34;&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/magit/magit/wiki&#34;&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/magit_emacs&#34;&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;justify&#34;&gt; Magit is an interface to the version control system &lt;a href=&#34;https://git-scm.com&#34;&gt;Git&lt;/a&gt;, implemented as an &lt;a href=&#34;https://www.gnu.org/software/emacs&#34;&gt;Emacs&lt;/a&gt; package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Keeping its users &#xA; &lt;a href=&#34;https://magit.vc/quotes&#34;&gt;this excited&lt;/a&gt; is &#xA; &lt;a href=&#34;https://magit.vc/stats/magit/authors.html#cumulated_added_lines_of_code_per_author&#34;&gt; a lot of work &lt;/a&gt;. If Magit makes you &#xA; &lt;br&gt; more productive too, then &#xA; &lt;b&gt;please consider making a donation&lt;/b&gt;. &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;em&gt;Thank you! — Jonas Bernoulli&lt;/em&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/sponsors/tarsius&#34;&gt; &lt;img title=&#34;Donate using Github Sponsors&#34; alt=&#34;Donate using Github Sponsors&#34; src=&#34;https://magit.vc/assets/github-sponsors-50px.png&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/#iban&#34;&gt; &lt;img title=&#34;Donate using IBAN&#34; alt=&#34;Donate using IBAN&#34; src=&#34;https://magit.vc/assets/iban-50px.png&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/#zelle&#34;&gt; &lt;img title=&#34;Donate using Zelle (USA bank transfer)&#34; alt=&#34;Donate using Zelle (USA bank transfer)&#34; src=&#34;https://magit.vc/assets/zelle-50px.png&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://www.paypal.me/JonasBernoulli/20&#34;&gt; &lt;img title=&#34;Donate using PayPal&#34; alt=&#34;Donate using PayPal&#34; src=&#34;https://magit.vc/assets/paypal.png&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Some alternative donation methods are &#xA; &lt;a href=&#34;https://magit.vc/donate&#34;&gt;available&lt;/a&gt;. &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;If you are new to Magit, then either one of the following two articles should help understanding how it differs from other Git clients.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://emacsair.me/2017/09/01/magit-walk-through&#34;&gt;Visual Magit walk-through&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you are completely new to Magit, then this article is a good visual introduction.&lt;/p&gt; &#xA;&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing some key, but that&#39;s not obvious from just seeing how Magit looks. The screenshots and accompanying text of this article explain how to perform a variety of actions on Magit&#39;s output.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://emacsair.me/2017/09/01/the-magical-git-interface&#34;&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Magit differs significantly from other Git interfaces, and its advantages are not immediately obvious simply from looking at a few screenshots as presented in the preceding article.&lt;/p&gt; &#xA;&lt;p&gt;This article discusses Magit&#39;s properties in somewhat more abstract terms.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Support and Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Magit has many users and very few maintainers, so we kindly ask to read the appropriate guidelines before getting in contact. — Thanks!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🆘 &lt;a href=&#34;https://github.com/magit/magit/discussions/4630&#34;&gt;How to ask for help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🪳 &lt;a href=&#34;https://github.com/magit/magit/wiki/How-to-report-a-bug&#34;&gt;How to report a bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💡 &lt;a href=&#34;https://github.com/magit/magit/discussions/4631&#34;&gt;How to suggest a feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🏗️ &lt;a href=&#34;https://github.com/magit/magit/wiki/Pull-request-guidelines&#34;&gt;Pull request guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ℹ️ &lt;a href=&#34;https://magit.vc/manual/magit/FAQ.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ℹ️ &lt;a href=&#34;https://magit.vc/manual/magit&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TL;DR We now use discussions for feature requests (not issues) and prefer if you ask the community for support instead of the overworked maintainers.&lt;/p&gt; &#xA;&lt;p&gt;Please also consider to contribute by supporting other users or by making a &lt;a href=&#34;https://magit.vc/donate&#34;&gt;monetary donation&lt;/a&gt;. — Thanks!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Acknowledgments&lt;/h3&gt; &#xA;&lt;p&gt;Magit was started by &lt;a href=&#34;https://github.com/mvollmer&#34;&gt;Marius Vollmer&lt;/a&gt;, and is now maintained by &lt;a href=&#34;https://emacsair.me&#34;&gt;Jonas Bernoulli&lt;/a&gt; and &lt;a href=&#34;https://kyleam.com&#34;&gt;Kyle Meyer&lt;/a&gt;. Former maintainers are &lt;a href=&#34;http://dudebout.com&#34;&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href=&#34;https://github.com/npostavs&#34;&gt;Noam Postavsky&lt;/a&gt;, &lt;a href=&#34;https://github.com/pjweisberg&#34;&gt;Peter J. Weisberg&lt;/a&gt;, &lt;a href=&#34;https://github.com/philjackson&#34;&gt;Phil Jackson&lt;/a&gt;, &lt;a href=&#34;https://github.com/vanicat&#34;&gt;Rémi Vanicat&lt;/a&gt; and &lt;a href=&#34;http://www.hodique.info&#34;&gt;Yann Hodique&lt;/a&gt;. Many more people have &lt;a href=&#34;https://magit.vc/stats/magit/authors.html&#34;&gt;contributed code&lt;/a&gt;, suggested features or made monetary contributions.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xkcd.com/859&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%28-%20%20%20-red.svg?sanitize=true&#34; alt=&#34;Paren Xkcb&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_v3-green.svg?sanitize=true&#34; alt=&#34;GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/magit/magit/actions&#34;&gt;&lt;img src=&#34;https://github.com/magit/magit/workflows/test/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/magit.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/magit.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/magit&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/magit-badge.svg?sanitize=true&#34; alt=&#34;Melpa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/magit&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/magit-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://magit.vc/manual/magit&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/eierlegende-Wollmilchsau-green.svg?sanitize=true&#34; alt=&#34;Eierlegende Wollmilchsau&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Browser_wars&#34;&gt;&lt;img src=&#34;https://magit.vc/assets/netscape-20px.png&#34; alt=&#34;Netscape&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-tree-sitter/tree-sitter-langs</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/emacs-tree-sitter/tree-sitter-langs</id>
    <link href="https://github.com/emacs-tree-sitter/tree-sitter-langs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language bundle for Emacs&#39;s tree-sitter package&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Tree-sitter Language Bundle for Emacs&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_HTML &lt;a href=&#34;https://dev.azure.com/emacs-tree-sitter/tree-sitter-langs/_build/latest?definitionId=2&amp;amp;branchName=master&#34; rel=&#34;nofollow&#34;&gt; &lt;img src=&#34;https://dev.azure.com/emacs-tree-sitter/tree-sitter-langs/_apis/build/status/ci?branchName=master&amp;amp;label=build&amp;amp;api-version=6.0-preview.1&#34; alt=&#34;Build Status&#34; style=&#34;max-width:100%;&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs/actions/workflows/main.yml&#34;&gt; &lt;img src=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34; style=&#34;max-width: 100%;&#34;&gt; &lt;/a&gt; #+END_HTML&lt;/p&gt; &#xA;&lt;p&gt;This is a convenient language bundle for the Emacs package [[https://github.com/emacs-tree-sitter/elisp-tree-sitter][tree-sitter]]. It serves as an interim distribution mechanism, until &lt;del&gt;tree-sitter&lt;/del&gt; is widespread enough for language-specific major modes to incorporate its functionalities.&lt;/p&gt; &#xA;&lt;p&gt;For each supported language, this package provides:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pre-compiled grammar binaries for 3 major platforms: macOS, Linux and Windows, on x86_64. In the future, &lt;del&gt;tree-sitter-langs&lt;/del&gt; may provide tooling for major modes to do this on their own.&lt;/li&gt; &#xA; &lt;li&gt;An optional &lt;del&gt;highlights.scm&lt;/del&gt; file that provides highlighting patterns. This is mainly intended for major modes that are not aware of &lt;del&gt;tree-sitter&lt;/del&gt;. A language major mode that wants to use &lt;del&gt;tree-sitter&lt;/del&gt; for syntax highlighting should instead provide the query patterns on its own, using the mechanisms defined by [[https://emacs-tree-sitter.github.io/syntax-highlighting/interface-for-modes/][tree-sitter-hl]].&lt;/li&gt; &#xA; &lt;li&gt;Optional query patterns for other minor modes that provide high-level functionalities on top of &lt;del&gt;tree-sitter&lt;/del&gt;, such as code folding, evil text objects... As with highlighting patterns, major modes that are directly aware of &lt;del&gt;tree-sitter&lt;/del&gt; should provide the query patterns on their own.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Highlighting Queries&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;Note&lt;/em&gt;: Highlighting styles are a mattter of taste.&lt;/h1&gt; &#xA;&lt;p&gt;Highlighting query patterns for a language are in the file &lt;del&gt;queries/&#xA;  &lt;lang&gt;&#xA;   /highlights.scm&#xA;  &lt;/lang&gt;&lt;/del&gt;. Most of them are &lt;em&gt;intentionally different&lt;/em&gt; from those from upstream repositories, which are more geared towards /GitHub&#39;s use cases/. We try to be more consistent with /Emacs&#39;s existing conventions/. (For some languages, this is WIP, so their patterns may look similar to upstream&#39;s.)&lt;/p&gt; &#xA;&lt;p&gt;In general, try to follow what the docstrings of &lt;del&gt;tree-sitter-hl-face:&lt;/del&gt; faces say. Most importantly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Definitions and uses should be differentiated: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;@function&lt;/del&gt; vs. &lt;del&gt;@function.call&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;@method&lt;/del&gt; vs. &lt;del&gt;@method.call&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;@type.parameter&lt;/del&gt; vs. &lt;del&gt;@type.argument&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;@variable&lt;/del&gt; and &lt;del&gt;@variable.parameter&lt;/del&gt; should be applied only to declarations/definitions/bindings/mutations (/writes/), not usage (/reads/).&lt;/li&gt; &#xA; &lt;li&gt;Special faces should have high priority (placed earlier in the pattern list): &lt;del&gt;@function.macro&lt;/del&gt;, &lt;del&gt;@type.builtin&lt;/del&gt;, &lt;del&gt;@variable.special&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Patterns whose internals may be highlighted should have low priority (placed towards the end). Example: strings with interpolation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Mode-specific highlighting Some languages are associated with multiple major modes. Mode-specific highlighting patterns are provided by the files &lt;del&gt;queries/&#xA;  &lt;lang&gt;&#xA;   /highlights.&#xA;   &lt;major-mode&gt;&#xA;    .scm&#xA;   &lt;/major-mode&gt;&#xA;  &lt;/lang&gt;&lt;/del&gt;. These are combined with the base highlighting patterns in &lt;del&gt;queries/&#xA;  &lt;lang&gt;&#xA;   /highlights.scm&#xA;  &lt;/lang&gt;&lt;/del&gt;, but have higher precedence.&lt;/p&gt; &#xA;&lt;p&gt;** Building Grammars from Source Note: If you also plan to work on [[https://github.com/emacs-tree-sitter/elisp-tree-sitter#building-grammars-from-source][elisp-tree-sitter]], it might be more convenient to work with this repository as a submodule.&lt;/p&gt; &#xA;&lt;p&gt;*** Tools and dependencies&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install [[https://cask.readthedocs.io][cask]].&lt;/li&gt; &#xA; &lt;li&gt;Install ELisp dependencies: #+begin_src bash cask install #+end_src&lt;/li&gt; &#xA; &lt;li&gt;Install NodeJS. It is needed to generate the grammar code from the JavaScript DSL. The recommended tool to manage NodeJS is [[https://volta.sh/][volta]].&lt;/li&gt; &#xA; &lt;li&gt;Install [[https://tree-sitter.github.io/tree-sitter/creating-parsers#installation][tree-sitter CLI tool]]. (Its binary can also be downloaded directly from [[https://github.com/tree-sitter/tree-sitter/releases][GitHub]].) &lt;em&gt;Note: versions 0.20+ cannot be used, as they introduce [[https://github.com/tree-sitter/tree-sitter/pull/1157][a breaking change]] in binary storage location&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Building grammars To build a specific language&#39;s grammar, run &lt;del&gt;script/compile&lt;/del&gt;. (See the list of registered languages in [[./repos][repos/]].) For example: #+begin_src bash script/compile rust #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To build all registered languages, and creating the bundle: #+begin_src bash script/compile all #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Adding a new grammar&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register a new submodule. For example: #+begin_src bash # git submodule add -b &#xA;  &lt;branch&gt;&#xA;    -- &#xA;   &lt;git-url&gt;&#xA;     repos/&#xA;    &lt;lang&gt;&#xA;      git submodule add -b master -- &#xA;     &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-rust&#34;&gt;https://github.com/tree-sitter/tree-sitter-rust&lt;/a&gt; repos/rust #+end_src&#xA;    &lt;/lang&gt;&#xA;   &lt;/git-url&gt;&#xA;  &lt;/branch&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modify its settings in [[.gitmodules][.gitmodules]]: #+begin_src conf update = none ignore = dirty #+end_src&lt;/li&gt; &#xA; &lt;li&gt;Try building and testing it. For example: #+begin_src bash script/compile rust script/test rust #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/popwin</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/emacsorphanage/popwin</id>
    <link href="https://github.com/emacsorphanage/popwin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Popup Window Manager for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/popwin&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/popwin-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/popwin&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/popwin-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;popwin.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacsorphanage/popwin/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacsorphanage/popwin/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;popwin is a popup window manager for Emacs which makes you free from the hell of annoying buffers such like &lt;code&gt;*Help*&lt;/code&gt;, &lt;code&gt;*Completions*&lt;/code&gt;, &lt;code&gt;*compilation*&lt;/code&gt;, and etc.&lt;/p&gt; &#xA;&lt;p&gt;Take an example. When you complete file names during &lt;code&gt;find-file&lt;/code&gt;, the (annoying) &lt;code&gt;*Completions*&lt;/code&gt; buffer will appear in a newly splitted window. You might understand the necessity of the window, but you may wonder why the window still remains after completion...&lt;/p&gt; &#xA;&lt;p&gt;popwin resolves there problems. Windows of such temporary buffers will be shown as a popup window, and you can close them smoothly by typing &lt;code&gt;C-g&lt;/code&gt; in anytime.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Before Popup Window&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;After Popup Window&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/m2ym/popwin-el/master/etc/images/popwin1.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/m2ym/popwin-el/master/etc/images/popwin2.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Melpa&lt;/h3&gt; &#xA;&lt;p&gt;This package is on &lt;a href=&#34;https://github.com/melpa/melpa&#34;&gt;MELPA&lt;/a&gt;, you can install it from there! (recommended)&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;code&gt;popwin.el&lt;/code&gt; into your &lt;code&gt;load-path&lt;/code&gt; directory. If you have &lt;code&gt;install-elisp&lt;/code&gt; or &lt;code&gt;auto-install&lt;/code&gt;, you may install &lt;code&gt;popwin.el&lt;/code&gt; like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; install-elisp&#xA;(install-elisp &#34;https://raw.github.com/m2ym/popwin-el/master/popwin.el&#34;)&#xA;;; auto-install&#xA;(auto-install-from-url &#34;https://raw.github.com/m2ym/popwin-el/master/popwin.el&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then add the following code into your &lt;code&gt;.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;popwin)&#xA;(popwin-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;popwin is tested under GNU Emacs 22 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Special buffers, for example &lt;code&gt;*Help*&lt;/code&gt;, specified in &lt;code&gt;popwin:special-display-config&lt;/code&gt; will be shown in a popup window. You can close the popup window by typing &lt;code&gt;C-g&lt;/code&gt; or selecting other windows.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;*Help*&lt;/code&gt;, &lt;code&gt;*Completions*&lt;/code&gt;, &lt;code&gt;*compilation*&lt;/code&gt;, and &lt;code&gt;*Occur*&lt;/code&gt; buffers will be shown in a popup window. Try &lt;code&gt;M-x find-file&lt;/code&gt; and type &lt;code&gt;TAB TAB&lt;/code&gt;. You may see a popup window at the bottom of the frame.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;File Name Completion&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/m2ym/popwin-el/master/etc/images/popwin-find-file.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let me show other examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;M-x occur&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/m2ym/popwin-el/master/etc/images/popwin-occur.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;M-x compile&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/m2ym/popwin-el/master/etc/images/popwin-compile.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Please do &lt;code&gt;M-x customize-group RET popwin RET&lt;/code&gt; and &lt;code&gt;M-x customize-variable RET popwin:special-display-config RET&lt;/code&gt;. See the header of &lt;code&gt;popwin.el&lt;/code&gt;, source code, and docstrings for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Default Keymap&lt;/h3&gt; &#xA;&lt;p&gt;popwin provides a default keymap named &lt;code&gt;popwin:keymap&lt;/code&gt;. You can use it like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &#34;C-z&#34;) popwin:keymap)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keymap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;| Key    | Command                               |&#xA;|--------+---------------------------------------|&#xA;| b      | popwin:popup-buffer                   |&#xA;| l      | popwin:popup-last-buffer              |&#xA;| o      | popwin:display-buffer                 |&#xA;| C-b    | popwin:switch-to-last-buffer          |&#xA;| C-p    | popwin:original-pop-to-last-buffer    |&#xA;| C-o    | popwin:original-display-last-buffer   |&#xA;| SPC    | popwin:select-popup-window            |&#xA;| s      | popwin:stick-popup-window             |&#xA;| 0      | popwin:close-popup-window             |&#xA;| f, C-f | popwin:find-file                      |&#xA;| e      | popwin:messages                       |&#xA;| C-u    | popwin:universal-display              |&#xA;| 1      | popwin:one-window                     |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Special Display Config&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;popwin:special-display-config&lt;/code&gt; is a list of &lt;code&gt;CONFIG&lt;/code&gt;. &lt;code&gt;CONFIG&lt;/code&gt; may be a form of &lt;code&gt;(PATTERN . KEYWORDS)&lt;/code&gt;, where &lt;code&gt;PATTERN&lt;/code&gt; is a pattern of specifying a buffer, and &lt;code&gt;KEYWORDS&lt;/code&gt; is a list of a pair of key and value. &lt;code&gt;PATTERN&lt;/code&gt; is a buffer name, a symbol specifying major-mode, or a predicate function which takes the buffer. If &lt;code&gt;CONFIG&lt;/code&gt; is a string or a symbol, &lt;code&gt;PATTERN&lt;/code&gt; will be &lt;code&gt;CONFIG&lt;/code&gt; and &lt;code&gt;KEYWORDS&lt;/code&gt; will be empty. Available keywords are following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:regexp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: If the value is non-nil, &lt;code&gt;PATTERN&lt;/code&gt; will be used as regexp to matching buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:width&lt;/code&gt;, &lt;code&gt;:height&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: Specify width or height of the popup window. If no size specified, &lt;code&gt;popwin:popup-window-width&lt;/code&gt; or &lt;code&gt;popwin:popup-window-height&lt;/code&gt; will be used. See also position keyword.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:position&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: The value must be one of &lt;code&gt;(left top right bottom)&lt;/code&gt;. The popup window will shown at the position of the frame. If no position specified, &lt;code&gt;popwin:popup-window-position&lt;/code&gt; will be used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:noselect&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: If the value is non-nil, the popup window will not be selected when it is shown.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:dedicated&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: If the value is non-nil, the popup window will be dedicated to the original popup buffer. In this case, when another buffer is selected in the popup window, the popup window will be closed immedicately and the selected buffer will be shown on the previously selected window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:stick&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: If the value is non-nil, the popup window will be stuck when it is shown.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:tail&lt;/code&gt; : If the value is non-nil, the popup window will show the last contents.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; M-x anything&#xA;(setq anything-samewindow nil)&#xA;(push &#39;(&#34;*anything*&#34; :height 20) popwin:special-display-config)&#xA;&#xA;;; M-x dired-jump-other-window&#xA;(push &#39;(dired-mode :position top) popwin:special-display-config)&#xA;&#xA;;; M-!&#xA;(push &#34;*Shell Command Output*&#34; popwin:special-display-config)&#xA;&#xA;;; M-x compile&#xA;(push &#39;(compilation-mode :noselect t) popwin:special-display-config)&#xA;&#xA;;; slime&#xA;(push &#34;*slime-apropos*&#34; popwin:special-display-config)&#xA;(push &#34;*slime-macroexpansion*&#34; popwin:special-display-config)&#xA;(push &#34;*slime-description*&#34; popwin:special-display-config)&#xA;(push &#39;(&#34;*slime-compilation*&#34; :noselect t) popwin:special-display-config)&#xA;(push &#34;*slime-xref*&#34; popwin:special-display-config)&#xA;(push &#39;(sldb-mode :stick t) popwin:special-display-config)&#xA;(push &#39;slime-repl-mode popwin:special-display-config)&#xA;(push &#39;slime-connection-list-mode popwin:special-display-config)&#xA;&#xA;;; vc&#xA;(push &#34;*vc-diff*&#34; popwin:special-display-config)&#xA;(push &#34;*vc-change-log*&#34; popwin:special-display-config)&#xA;&#xA;;; undo-tree&#xA;(push &#39;(&#34; *undo-tree*&#34; :width 0.3 :position right) popwin:special-display-config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Universal Display Config&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;popwin:universal-display-config&lt;/code&gt; is a special alternative value of &lt;code&gt;popwin:special-display-config&lt;/code&gt;, which will be used when executing a command with &lt;code&gt;M-x popwin:universal-display&lt;/code&gt; prefix. If you want to show a specific buffer in a popup window at the time, for example, you can do it with &lt;code&gt;M-x popwin:universal-display RET C-x 4 C-o BUFNAME RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default value is &lt;code&gt;(t)&lt;/code&gt;, meaning all of buffers with &lt;code&gt;M-x popwin:universal-display&lt;/code&gt; prefix will be shown in a popup window.&lt;/p&gt; &#xA;&lt;h2&gt;Working with Other Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Some extensions needs workaround for working with popwin.&lt;/p&gt; &#xA;&lt;h4&gt;YaTeX&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;misc/popwin-yatex.el&lt;/code&gt; helps you to show YaTeX related buffers in a popup window. Add the following code into &lt;code&gt;.emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;popwin-yatex)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may write a configuration like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(push &#39;(&#34;*YaTeX-typesetting*&#34;) popwin:special-display-config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;w3m&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;misc/popwin-w3m.el&lt;/code&gt; helps you to show specific pages with w3m in a popup window. Add the following code into &lt;code&gt;.emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;popwin-w3m)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to change &lt;code&gt;browse-url-browser-function&lt;/code&gt; to &lt;code&gt;popwin:w3m-browse-url&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq browse-url-browser-function &#39;popwin:w3m-browse-url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;popwin:w3m-browse-url&lt;/code&gt; is a function (and a command) displaying w3m buffers in a popup window if the given URL is matched with the rules.&lt;/p&gt; &#xA;&lt;p&gt;The rules are described by &lt;code&gt;popwin:w3m-special-display-config&lt;/code&gt; variable, which has almost same structure of &lt;code&gt;popwin:special-display-config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The difference is &lt;code&gt;popwin:w3m-special-display-config&lt;/code&gt; takes an URL regular expression instead of a buffer pattern.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to show google search pages in a popup window, a configuration could be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(push &#39;(&#34;^http://www\\.google\\.com/.*$&#34;) popwin:w3m-special-display-config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;term.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;misc/popwin-term.el&lt;/code&gt; helps you to show term buffers in a popup window. Add the following code into &lt;code&gt;.emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;popwin-term)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then write a configuration like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(push &#39;(term-mode :position :top :height 16 :stick t) popwin:special-display-config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can show a term buffer in a popup window with &lt;code&gt;M-x popwin-term:term&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;browse-kill-ring.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;misc/browse-kill-ring.el&lt;/code&gt; helps you to show &lt;code&gt;*Kill Ring*&lt;/code&gt; buffer in a popup window. Add the following code into &lt;code&gt;.emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;popwin-browse-kill-ring)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then write a configuration like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(push &#34;*Kill Ring*&#34; popwin:special-display-config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x browse-kill-ring&lt;/code&gt; now shows &lt;code&gt;*Kill Ring*&lt;/code&gt; buffer in a popup window.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;windows.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Do not load &lt;code&gt;windows.el&lt;/code&gt; after loading &lt;code&gt;popwin.el&lt;/code&gt;. Load &lt;code&gt;windows.el&lt;/code&gt; first.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Command: &lt;code&gt;popwin:popup-buffer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Focely show the specified buffer in a popup window. &lt;code&gt;popwin:special-display-config&lt;/code&gt; will be ignored.&lt;/p&gt; &#xA;&lt;h3&gt;Command: &lt;code&gt;popwin:display-buffer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Show the specified buffer in a popup window if possible, meaning there is at least one matched configuration in &lt;code&gt;popwin:special-display-config&lt;/code&gt;. Otherwise, fallback to &lt;code&gt;display-buffer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command: &lt;code&gt;popwin:display-last-buffer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Show the lastly shown buffer in a popup window.&lt;/p&gt; &#xA;&lt;h3&gt;Command: &lt;code&gt;popwin:pop-to-buffer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;popwin:display-buffer&lt;/code&gt;, but behaves like &lt;code&gt;pop-to-buffer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command: &lt;code&gt;popwin:one-window&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Same like &lt;code&gt;C-x 1&lt;/code&gt; except that &lt;code&gt;C-g&lt;/code&gt; restore the original window configuration. This is useful when you see the contents of the popup window in full window temporarily.&lt;/p&gt; &#xA;&lt;h3&gt;Command: &lt;code&gt;popup:find-file&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;find-file&lt;/code&gt; in a popup window.&lt;/p&gt; &#xA;&lt;h3&gt;Command: &lt;code&gt;popwin:messages&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Show &lt;code&gt;*Messages*&lt;/code&gt; buffer in a popup window.&lt;/p&gt; &#xA;&lt;h2&gt;Basic API&lt;/h2&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popwin:create-popup-window&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popwin:create-popup-window &amp;amp;optional size position adjust =&amp;gt; (master-window popup-window)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;popwin:create-popup-window&lt;/code&gt; creates a popup window and return it with a master window. Master window is a window which is splitted when creating the popup window. A resposibility of closing the popup window is on developers.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Copyright (C) 2011-2015 Tomohiro Matsuyama &amp;lt;&lt;a href=&#34;mailto:m2ym.pub@gmail.com&#34;&gt;m2ym.pub@gmail.com&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flycheck/flycheck</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/flycheck/flycheck</id>
    <link href="https://github.com/flycheck/flycheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;On the fly syntax checking for GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.flycheck.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flycheck/flycheck/master/doc/_static/logo.png&#34; alt=&#34;Flycheck&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flycheck/flycheck/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/flycheck/flycheck.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/flycheck/flycheck&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/flycheck/flycheck.svg?sanitize=true&#34; alt=&#34;Join the chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/flycheck&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/flycheck-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/flycheck&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/flycheck-badge.svg?sanitize=true&#34; alt=&#34;MELPA stable version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/flycheck/flycheck&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/flycheck/flycheck/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flycheck.org&#34;&gt;https://www.flycheck.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Modern on-the-fly syntax checking extension for GNU Emacs. &lt;a href=&#34;https://www.flycheck.org/en/latest/#try-out&#34;&gt;Try it&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flycheck/flycheck/master/doc/images/flycheck-annotated.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more gentle introduction read the &lt;a href=&#34;https://www.flycheck.org/en/latest/user/installation.html&#34;&gt;Installation&lt;/a&gt; instructions and go through &lt;a href=&#34;https://www.flycheck.org/en/latest/user/quickstart.html&#34;&gt;Quickstart&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;Please ask questions about Flycheck on &lt;a href=&#34;https://emacs.stackexchange.com/questions/tagged/flycheck&#34;&gt;Stack Exchange&lt;/a&gt; or in our &lt;a href=&#34;https://gitter.im/flycheck/flycheck&#34;&gt;Gitter chat&lt;/a&gt;, and report bugs to our &lt;a href=&#34;https://github.com/flycheck/flycheck/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We welcome all kinds of contributions, whether you write patches, open pull requests, write documentation, help others with Flycheck issues, or just tell other people about your experiences with Flycheck. Please take a look at our &lt;a href=&#34;https://www.flycheck.org/en/latest/contributor/contributing.html&#34;&gt;Contributor’s Guide&lt;/a&gt; for help and guidance about contributing to Flycheck.&lt;/p&gt; &#xA;&lt;p&gt;We strive to create a safe, friendly and welcoming environment in the Flycheck community and have a &lt;a href=&#34;https://www.flycheck.org/en/latest/community/conduct.html&#34;&gt;Code of Conduct&lt;/a&gt; that defines acceptable and welcome behaviour as well as sanctions for violations. All contributors and all participants are expected to follow it, on Github, Gitter, Emacs.SX or any other place that’s part of Flycheck’s broader community.&lt;/p&gt; &#xA;&lt;p&gt;Flycheck is free software: you can redistribute it and/or modify it under the terms of the &lt;a href=&#34;https://github.com/flycheck/flycheck/raw/master/COPYING&#34;&gt;GNU General Public License&lt;/a&gt; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;Flycheck is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the &lt;a href=&#34;https://github.com/flycheck/flycheck/raw/master/COPYING&#34;&gt;GNU General Public License&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>noctuid/general.el</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/noctuid/general.el</id>
    <link href="https://github.com/noctuid/general.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;More convenient key definitions in emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: General User Manual #+AUTHOR: Fox Kiester #+LANGUAGE: en #+TEXINFO_DIR_CATEGORY: Emacs #+TEXINFO_DIR_TITLE: General: (general). #+TEXINFO_DIR_DESC: More convenient key definitions.&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: If you are viewing this in org-mode, it is recommended that you install and enable [[https://github.com/snosov1/toc-org][toc-org]], so that all internal links open correctly&lt;/h1&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/general][file:https://melpa.org/packages/general-badge.svg]] [[https://github.com/noctuid/general.el/actions?query=workflow%3Atest][https://github.com/noctuid/general.el/workflows/test/badge.svg]] [[https://codecov.io/gh/noctuid/general.el][https://codecov.io/gh/noctuid/general.el/branch/master/graph/badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/noctuid/general.el][file:http://i.imgur.com/SXA66y7.png]] #+BEGIN_QUOTE A general is a leader. -- onioncheese #+END_QUOTE&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recent Breaking Changes :noexport: ** 2018-01-21 =general-default-...= variables are obsolete =general-default-prefix=, =general-default-non-normal-prefix=, =general-default-global-prefix=, =general-default-states=, and =general-default-keymaps= still work. However, they will eventually be removed, so please switch to using &lt;del&gt;general-create-definer&lt;/del&gt; if you want to use a definer with different defaults.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 2018-01-20 &lt;del&gt;general-create-vim-definer&lt;/del&gt; and &lt;del&gt;general-create-dual-vim-definer&lt;/del&gt; have been removed &lt;del&gt;general-create-definer&lt;/del&gt; should now be used instead as it is now capable of the same functionality (&lt;del&gt;general-evil-setup&lt;/del&gt; now uses it). Additionally, &lt;del&gt;general-vim-definer-default&lt;/del&gt; is obsolete and will be removed eventually. The second argument to &lt;del&gt;general-evil-setup&lt;/del&gt; is no longer used and will also be removed eventually. The vim definers will now always set the default =:states= (and never the default =:keymaps=) because of the change below.&lt;/p&gt; &#xA;&lt;p&gt;** 2018-01-20 =:states &#39;normal= is now the same as =:keymaps &#39;normal= =:keymaps &#39;global :states &#39;normal= will now bind in &lt;del&gt;evil-normal-state-keymap&lt;/del&gt; as opposed to the normal state auxiliary keymap of &lt;del&gt;(current-global-map)&lt;/del&gt; (see [[#note-for-evil-users][Note for Evil Users]]). It is not recommended to bind in a state and &lt;del&gt;(current-global-map)&lt;/del&gt;. If you want to prevent certain keys from being overridden, please use evil intercept keymaps instead.&lt;/p&gt; &#xA;&lt;p&gt;If you update general, please make sure that you are also using a recent version of evil.&lt;/p&gt; &#xA;&lt;p&gt;** 2018-01-20: &lt;del&gt;general-simulate-keys&lt;/del&gt; is now obsolete Please switch to &lt;del&gt;general-key&lt;/del&gt; or &lt;del&gt;general-simulate-key&lt;/del&gt;. Note that keyword arguments have replaced the positional arguments of &lt;del&gt;general-simulate-keys&lt;/del&gt;. &lt;del&gt;general-simulate-keys&lt;/del&gt; will likely be removed sometime in the future.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :noexport:TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#about][About]]&lt;/li&gt; &#xA; &lt;li&gt;[[#dependency-versions][Dependency Versions]]&lt;/li&gt; &#xA; &lt;li&gt;[[#key-features][Key Features]]&lt;/li&gt; &#xA; &lt;li&gt;[[#reading-recommendations][Reading Recommendations]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage-recommendations-and-documentation-clarifications][Usage Recommendations and Documentation Clarifications]]&lt;/li&gt; &#xA; &lt;li&gt;[[#basic-examples][Basic Examples]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#general-examples][General Examples]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-examples][Evil Examples]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#switching-completely-to-general][Switching Completely to General]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#general-define-key-details][&lt;del&gt;general-define-key&lt;/del&gt; Details]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#definitions][Definitions]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#keyword-arguments][Keyword Arguments]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#predicates][Predicates]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#keymapstate-aliases][Keymap/State Aliases]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#general-define-key-wrappers][&lt;del&gt;general-define-key&lt;/del&gt; Wrappers]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#positional-argument-wrappers][Positional Argument Wrappers]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#mass-key-unbinding-wrapper][Mass Key Unbinding Wrapper]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#creating-new-key-definers][Creating New Key Definers]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#vim-like-definers][Vim-like Definers]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#note-for-evil-users][Note for Evil Users]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#override-keymaps-and-buffer-local-keybindings][Override Keymaps and Buffer Local Keybindings]]&lt;/li&gt; &#xA; &lt;li&gt;[[#displaying-keybindings][Displaying Keybindings]]&lt;/li&gt; &#xA; &lt;li&gt;[[#functionsmacros-to-aid-key-definition][Functions/Macros to Aid Key Definition]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#disclaimer][Disclaimer]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#simulating-keypresses][Simulating Keypresses]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#mapping-under-non-prefix-keys][Mapping Under Non-prefix Keys]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#choosing-definitions-based-on-predicates][Choosing Definitions Based on Predicates]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#key-translation][Key &#34;Translation&#34;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#automatic-key-unbinding][Automatic Key Unbinding]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#non-keybinding-related-configuration-helpers][Non-keybinding-related Configuration Helpers]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#settings][Settings]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#hooks-and-advice][Hooks and Advice]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#miscellaneous][Miscellaneous]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#integration-with-other-packages][Integration with Other Packages]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#use-package-keywords][Use-package Keywords]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#general-keyword][:general Keyword]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#no-autoload-keyword][:no-autoload Keyword]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#hook-keywords][Hook Keywords]] &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;[[#ghook-keyword][:ghook Keyword]]&lt;/li&gt; &#xA;       &lt;li&gt;[[#gfhook-keyword][:gfhook Keyword]]&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#use-with-key-chord][Use with Key-chord]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#extended-definition-syntax][Extended Definition Syntax]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#autoloaded-keymaps][&#34;Autoloaded&#34; Keymaps]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#which-key-integration][Which Key Integration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-command-properties][Evil Command Properties]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#user-defined-extended-definition-keywords][User-defined Extended Definition Keywords]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#user-defined-key-definers][User-defined Key Definers]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#wrapping-evil-define-minor-mode-key][Wrapping &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#lispy-integration-wrapping-lispy-define-key][Lispy Integration/ Wrapping &lt;del&gt;lispy-define-key&lt;/del&gt;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#worf-integration-wrapping-worf-define-key][Worf Integration/ Wrapping &lt;del&gt;worf-define-key&lt;/del&gt;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#other-provided-definers][Other Provided Definers]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#how-do-i-prevent-key-sequence-starts-with-non-prefix-key-errors][How do I prevent =Key sequence starts with non-prefix key= errors?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#why-dont-some-evil-keybindings-work-immediately][Why don&#39;t some evil keybindings work (immediately)?]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About =general.el= provides a more convenient method for binding keys in emacs (for both evil and non-evil users). Like =use-package=, which provides a convenient, unified interface for managing packages, =general.el= is intended to provide a convenient, unified interface for key definitions. While this package does implement some completely new functionality (such as the ability to make vim-style keybindings under non-prefix keys with an optional timeout), its primary purpose is to build on existing functionality to make key definition more clear and concise. &lt;del&gt;general-define-key&lt;/del&gt; is user-extensible and supports defining multiple keys in multiple keymaps at once, implicitly wrapping key strings with &lt;del&gt;(kbd ...)&lt;/del&gt;, using named prefix key sequences (like the leader key in vim), and much more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One advantage of using &lt;del&gt;general-define-key&lt;/del&gt; (or a wrapper for it) even in cases where its extra functionality isn&#39;t necessary and doesn&#39;t significantly improve brevity is that all keybindings are recorded and can be displayed later with &lt;del&gt;general-describe-keybindings&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This manual explains the most relevant parts of every =general.el= feature. All user-facing functions, macros, and variables also have docstrings (e.g. accessible with =C-h f= or =C-h v=), so please consult these for further details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Dependency Versions Please use MELPA and not MELPA stable for installing optional dependencies (e.g. evil and use-package). General may rely on functionality not in released versions for these packages, so if you are having trouble, please try updating them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Key Features&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provides a single function, &lt;del&gt;general-define-key&lt;/del&gt;, that is usable for all key definition; wrappers are provided as well&lt;/li&gt; &#xA; &lt;li&gt;Does not hide important details of key definition (unlike =evil-leader.el=); users should be familiar with &lt;del&gt;define-key&lt;/del&gt; and other definers (e.g. &lt;del&gt;evil-define-key(*)&lt;/del&gt; for evil users) before using this package&lt;/li&gt; &#xA; &lt;li&gt;Uses a syntax similar to &lt;del&gt;setq&lt;/del&gt; for key definitions (like &lt;del&gt;evil-define-key&lt;/del&gt;, &lt;del&gt;bind-map&lt;/del&gt;, =evil-leader.el=, etc.; unlike &lt;del&gt;bind-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Provides tight (and optional) integration with evil (unlike &lt;del&gt;bind-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-def&lt;/del&gt; can act as a drop-in replacement for the following definers (see the documentation below for a minor caveat) (unique): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;general-define-key&lt;/del&gt; and &lt;del&gt;global-set-key&lt;/del&gt; (no positional keymap argument)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;define-key&lt;/del&gt; and &lt;del&gt;evil-global-set-key&lt;/del&gt; (positional argument for keymap)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;evil-define-key&lt;/del&gt; (positional argument for state and keymap)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;With the =:definer= keyword, &lt;del&gt;general-define-key&lt;/del&gt; can be extended to use any key definition function (e.g. &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt;, &lt;del&gt;lispy-define-key&lt;/del&gt;, etc.) (unique)&lt;/li&gt; &#xA; &lt;li&gt;With &#34;extended&#34; definitions, user-created keywords can be added globally (in &lt;del&gt;general-define-key&lt;/del&gt;) and locally (in an &#34;extended&#34; definition plist) to extend the behavior of &lt;del&gt;general-define-key&lt;/del&gt; (unique)&lt;/li&gt; &#xA; &lt;li&gt;Allows binding keys in multiple keymaps/states at once (unlike &lt;del&gt;bind-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Automatically wraps string keys and definitions with &lt;del&gt;kbd&lt;/del&gt; (this behavior can be turned off for compatibility with &lt;del&gt;define-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Allows using an arbitrary number of prefix keys or &#34;leaders&#34; of any length (but does not require prefix keys like) (unlike =evil-leader.el=)&lt;/li&gt; &#xA; &lt;li&gt;Allows for automatically creating prefix commands (but does not require creating them like &lt;del&gt;bind-key&lt;/del&gt; does)&lt;/li&gt; &#xA; &lt;li&gt;Allows for buffer-local keybindings (unlike &lt;del&gt;local-set-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Allows deferring keybindings until the specified keymap exists (no need to use &lt;del&gt;(with-)eval-after-load&lt;/del&gt;) (like &lt;del&gt;evil-define-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Allows displaying defined keys (like =bind-key.el=)&lt;/li&gt; &#xA; &lt;li&gt;Provides integration with other packages such as =key-chord.el= and =which-key.el= (unique)&lt;/li&gt; &#xA; &lt;li&gt;Provides other helpers for keybindings (unique): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A method for creating &#34;autoloaded&#34; keymaps (like =bind-key.el=)&lt;/li&gt; &#xA;   &lt;li&gt;A potentially better way to simulate keypresses (works with prefix args and for incomplete key sequences, i.e. a key bound to a keymap)&lt;/li&gt; &#xA;   &lt;li&gt;A method for binding under non-prefix keys with an optional timeout (like in vim; e.g. bind =jk= in insert mode without losing =j=)&lt;/li&gt; &#xA;   &lt;li&gt;A helper to create a menu item to dispatch to different definitions based on predicates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Provides other helpers for configuration (e.g. more convenient functions for hooks and advice)&lt;/li&gt; &#xA; &lt;li&gt;Is well tested (unlike =evil-leader.el=)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reading Recommendations Before using =general.el=, you should first be familiar with &lt;del&gt;define-key&lt;/del&gt;, &lt;del&gt;global-set-key&lt;/del&gt;, and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html][emacs&#39; key binding system]]. I recommend reading [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]] if you are new to emacs. Also see &lt;del&gt;define-key&lt;/del&gt;&#39;s help text for information on valid keys and definitions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are also using evil, you should first be familiar with how &lt;del&gt;evil-define-key&lt;/del&gt;, &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt;, etc. work. If you are a new evil user, I&#39;d recommend looking at my [[https://github.com/noctuid/evil-guide][evil guide]]. The [[https://github.com/noctuid/evil-guide#keybindings-and-states][Keybindings and States]] section in particular may be useful&lt;/p&gt; &#xA;&lt;p&gt;A large number of issues opened on this repository are not specifically related to =general.el= (e.g. user usage or syntax errors that would also occur without &lt;del&gt;general-define-key&lt;/del&gt;). While I don&#39;t mind generic questions about keybinding issues, you may save yourself some time if you first determine whether or not an issue is related to &lt;del&gt;general-define-key&lt;/del&gt; by, if possible, testing with an equivalent &lt;del&gt;define-key&lt;/del&gt;, &lt;del&gt;evil-define-key&lt;/del&gt;, etc. statement.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[#faq][FAQ]] for commonly asked questions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Recommendations and Documentation Clarifications To facilitate extensibility and easy creation of wrappers, &lt;del&gt;general-define-key&lt;/del&gt; uses keyword arguments to specify everything besides the key definitions, including for the =:states= and =:keymaps=. Since users will most often specify one or both of these keyword arguments, &lt;del&gt;general-define-key&lt;/del&gt; is often less concise than &lt;del&gt;define-key&lt;/del&gt; or &lt;del&gt;evil-define-key&lt;/del&gt;. It is for this reason that it is recommended that &lt;del&gt;general-define-key&lt;/del&gt; not be used directly. =general.el= provides wrappers around &lt;del&gt;general-define-key&lt;/del&gt; that take positional arguments, and it is recommended that you use these instead of &lt;del&gt;general-define-key&lt;/del&gt;. &lt;del&gt;general-create-definer&lt;/del&gt; can also be used to create a new definer with certain default settings (e.g. prefix settings). For clarity and consistency, examples in the documentation usually use &lt;del&gt;general-define-key&lt;/del&gt; unless the example is explicitly for a wrapper. However, [[#positional-argument-wrappers][&lt;del&gt;general-def&lt;/del&gt;]] is recommended over &lt;del&gt;general-define-key&lt;/del&gt; as it is more flexible and concise. Positional arguments are /optional but not required/, so &lt;del&gt;general-def&lt;/del&gt; can basically act as a drop-in replacement for many key definers (including &lt;del&gt;general-define-key&lt;/del&gt;, &lt;del&gt;define-key&lt;/del&gt;, and &lt;del&gt;evil-define-key&lt;/del&gt;). Note that &lt;del&gt;general-create-definer&lt;/del&gt; and the =:general= keyword argument for &lt;del&gt;use-package&lt;/del&gt; use &lt;del&gt;general-def&lt;/del&gt;. I personally only use &lt;del&gt;general-def&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since it is more common for commands to not be sharp quoted in key definitions, this package&#39;s examples use single quotes for commands. I personally prefer to always properly sharp quote functions, so commands in the actual non-example code are always sharp quoted.&lt;/p&gt; &#xA;&lt;p&gt;Although &lt;del&gt;general-define-key&lt;/del&gt; will automatically defer keybindings until the specified keymaps exist, you can still use it with &lt;del&gt;with-eval-after-load&lt;/del&gt; or use-package&#39;s =:config= keyword whenever it makes sense to. If you have a lot of keybindings, this could potentially shave some fraction of a second off of your startup time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic Examples ** General Examples #+begin_src emacs-lisp (require &#39;general)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;;; * Global Keybindings ;; &lt;code&gt;general-define-key&#39; acts like &lt;/code&gt;global-set-key&#39; when :keymaps is not ;; specified (because &#34;:keymaps &#39;global&#34; is the default) ;; kbd is not necessary and arbitrary amount of key def pairs are allowed (general-define-key &#34;M-x&#34; &#39;amx ; or &#39;smex &#34;C-s&#34; &#39;counsel-grep-or-swiper)&lt;/p&gt; &#xA;&lt;p&gt;;; * Mode Keybindings ;; &lt;code&gt;general-define-key&#39; is comparable to &lt;/code&gt;define-key&#39; when :keymaps is specified (general-define-key ;; NOTE: keymaps specified with :keymaps must be quoted :keymaps &#39;org-mode-map &#34;C-c C-q&#34; &#39;counsel-org-tag ;; ... ) ;; &lt;code&gt;general-def&#39; can be used instead for &lt;/code&gt;define-key&#39;-like syntax (general-def org-mode-map &#34;C-c C-q&#34; &#39;counsel-org-tag ;; ... )&lt;/p&gt; &#xA;&lt;p&gt;;; * Prefix Keybindings ;; :prefix can be used to prevent redundant specification of prefix keys (general-define-key :prefix &#34;C-c&#34; ;; bind &#34;C-c a&#34; to &#39;org-agenda &#34;a&#34; &#39;org-agenda &#34;b&#34; &#39;counsel-bookmark &#34;c&#34; &#39;org-capture)&lt;/p&gt; &#xA;&lt;p&gt;;; for frequently used prefix keys, the user can create a custom definer with a ;; default :prefix ;; using a variable is not necessary, but it may be useful if you want to ;; experiment with different prefix keys and aren&#39;t using `general-create-definer&#39; (defconst my-leader &#34;C-c&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(general-create-definer my-leader-def ;; :prefix my-leader ;; or without a variable :prefix &#34;C-c&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; ** Global Keybindings (my-leader-def &#34;a&#34; &#39;org-agenda &#34;b&#34; &#39;counsel-bookmark &#34;c&#34; &#39;org-capture)&lt;/p&gt; &#xA;&lt;p&gt;;; ** Mode Keybindings (my-leader-def :keymaps &#39;clojure-mode-map ;; bind &#34;C-c C-l&#34; &#34;C-l&#34; &#39;cider-load-file &#34;C-z&#34; &#39;cider-switch-to-repl-buffer) ;; &lt;code&gt;general-create-definer&#39; creates wrappers around &lt;/code&gt;general-def&#39;, so ;; `define-key&#39;-like syntax is also supported (my-leader-def clojure-mode-map &#34;C-l&#34; &#39;cider-load-file &#34;C-z&#34; &#39;cider-switch-to-repl-buffer)&lt;/p&gt; &#xA;&lt;p&gt;;; * Settings ;; change &lt;code&gt;auto-revert-interval&#39; after autorevert has been loaded (&lt;/code&gt;setq&#39; will ;; not work) (general-setq auto-revert-interval 10) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Evil Examples #+begin_src emacs-lisp (require &#39;general)&lt;/p&gt; &#xA;&lt;p&gt;;; * Global Keybindings ;; &lt;code&gt;general-define-key&#39; acts like &lt;/code&gt;evil-define-key&#39; when :states is specified (general-define-key :states &#39;motion ;; swap ; and : &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char) ;; same as (general-define-key :states &#39;motion &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char) ;; &lt;code&gt;general-def&#39; can be used instead for &lt;/code&gt;evil-global-set-key&#39;-like syntax (general-def &#39;motion &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char)&lt;/p&gt; &#xA;&lt;p&gt;;; alternative using &lt;code&gt;general-translate-key&#39; ;; swap ; and : in &lt;/code&gt;evil-motion-state-map&#39; (general-swap-key nil &#39;motion &#34;;&#34; &#34;:&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; * Mode Keybindings (general-define-key :states &#39;normal :keymaps &#39;emacs-lisp-mode-map ;; or xref equivalent &#34;K&#34; &#39;elisp-slime-nav-describe-elisp-thing-at-point) ;; &lt;code&gt;general-def&#39; can be used instead for &lt;/code&gt;evil-define-key&#39;-like syntax (general-def &#39;normal emacs-lisp-mode-map &#34;K&#34; &#39;elisp-slime-nav-describe-elisp-thing-at-point)&lt;/p&gt; &#xA;&lt;p&gt;;; * Prefix Keybindings ;; :prefix can be used to prevent redundant specification of prefix keys ;; again, variables are not necessary and likely not useful if you are only ;; using a definer created with `general-create-definer&#39; for the prefixes ;; (defconst my-leader &#34;SPC&#34;) ;; (defconst my-local-leader &#34;SPC m&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(general-create-definer my-leader-def ;; :prefix my-leader :prefix &#34;SPC&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(general-create-definer my-local-leader-def ;; :prefix my-local-leader :prefix &#34;SPC m&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; ** Global Keybindings (my-leader-def :keymaps &#39;normal ;; bind &#34;SPC a&#34; &#34;a&#34; &#39;org-agenda &#34;b&#34; &#39;counsel-bookmark &#34;c&#34; &#39;org-capture) ;; &lt;code&gt;general-create-definer&#39; creates wrappers around &lt;/code&gt;general-def&#39;, so ;; `evil-global-set-key&#39;-like syntax is also supported (my-leader-def &#39;normal &#34;a&#34; &#39;org-agenda &#34;b&#34; &#39;counsel-bookmark &#34;c&#34; &#39;org-capture)&lt;/p&gt; &#xA;&lt;p&gt;;; to prevent your leader keybindings from ever being overridden (e.g. an evil ;; package may bind &#34;SPC&#34;), use :keymaps &#39;override (my-leader-def :states &#39;normal :keymaps &#39;override &#34;a&#34; &#39;org-agenda) ;; or (my-leader-def &#39;normal &#39;override &#34;a&#34; &#39;org-agenda)&lt;/p&gt; &#xA;&lt;p&gt;;; ** Mode Keybindings (my-local-leader-def :states &#39;normal :keymaps &#39;org-mode-map &#34;y&#34; &#39;org-store-link &#34;p&#34; &#39;org-insert-link ;; ... ) ;; &lt;code&gt;general-create-definer&#39; creates wrappers around &lt;/code&gt;general-def&#39;, so ;; `evil-define-key&#39;-like syntax is also supported (my-local-leader-def &#39;normal org-mode-map &#34;y&#34; &#39;org-store-link &#34;p&#34; &#39;org-insert-link ;; ... )&lt;/p&gt; &#xA;&lt;p&gt;;; * Settings ;; change evil&#39;s search module after evil has been loaded (`setq&#39; will not work) (general-setq evil-search-module &#39;evil-search) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Vim-like definitions: #+begin_src emacs-lisp (general-evil-setup) ;; * Global Keybindings ;; all keywords arguments are still supported ;; these are just wrappers around `general-def&#39; that set a default :states (general-nmap :prefix &#34;SPC&#34; &#34;p&#34; &#39;helm-mini)&lt;/p&gt; &#xA;&lt;p&gt;;; bind in motion state (inherited by the normal, visual, and operator states) (general-mmap &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char)&lt;/p&gt; &#xA;&lt;p&gt;;; alternatively, for shorter names (general-evil-setup t) (mmap &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char)&lt;/p&gt; &#xA;&lt;p&gt;;; * Mode Keybindings (general-nmap :keymaps &#39;emacs-lisp-mode-map &#34;K&#34; &#39;elisp-slime-nav-describe-elisp-thing-at-point) ;; same as (general-nmap emacs-lisp-mode-map &#34;K&#34; &#39;elisp-slime-nav-describe-elisp-thing-at-point)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Switching Completely to General It is possible to gradually switch to using general by using it only for new configuration and slowly converting old configuration if desired. If you would like to quickly convert all keybindings in your init file to use general so that they show up with &lt;del&gt;general-describe-keybindings&lt;/del&gt;, you can potentially use regexp replace. For example, you could use =M-&amp;lt; C-M-% (global-set-key|define-key|evil-global-set-key|evil-define-key) RET general-def RET !=. The evil equivalent would be =:%s/(global-set-key|define-key|evil-global-set-key|evil-define-key)/general-def/g=.&lt;/p&gt; &#xA;&lt;p&gt;There are two caveats. The old key definers all require using &lt;del&gt;kbd&lt;/del&gt;. This means that you will either have to remove every &lt;del&gt;kbd&lt;/del&gt; in these key definers (e.g. =:%s/(kbd ?(.*?))/\1/gc=; you should likely confirm whether each &lt;del&gt;kbd&lt;/del&gt; should be removed) or set =general-implicit-kbd= to nil for the old configuration. Furthermore, &lt;del&gt;general-def&lt;/del&gt; can only correctly replace definer statements where the first specified key is a string or vector. It will not work correctly to replace a definer that uses a variable or function for the first key (e.g. &lt;del&gt;(global-set-key my-key &#39;command)&lt;/del&gt; cannot be replaced directly with &lt;del&gt;general-def&lt;/del&gt;). To use general for definitions like this, you must either use the actual equivalent definer that &lt;del&gt;general-def&lt;/del&gt; ends up using (&lt;del&gt;general-define-key&lt;/del&gt;, &lt;del&gt;general-emacs-define-key&lt;/del&gt;, or &lt;del&gt;evil-define-key&lt;/del&gt;) or explicitly separate the positional arguments from the first key with a bogus keyword argument (e.g. &lt;del&gt;(general-def :start-maps my-key &#39;command)&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you decide to do this, please make sure that your configuration is backed up, and test this out to make sure that there are no errors before permanently changing your configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;general-define-key&lt;/del&gt; Details This package provides one main function, &lt;del&gt;general-define-key&lt;/del&gt;, for key definitions for both evil and non-evil users. It is recommended you use the provided wrappers around it or create your own with &lt;del&gt;general-create-definer&lt;/del&gt;, but first you should understand the keyword arguments provided by &lt;del&gt;general-define-key&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Definitions The only positional arguments for &lt;del&gt;general-define-key&lt;/del&gt; are any number of key/definition pairs. General supports all key and definition types supported by &lt;del&gt;define-key&lt;/del&gt; (see its help text) as well as its own [[#extended-definition-syntax][&#34;extended definitions&#34;]]. Here are a few examples of definitions that aren&#39;t standard =&#34;string key&#34; &#39;command= pairs: #+begin_src emacs-lisp ;; vector keys, including [t] and [remap] are supported (general-define-key :keymaps &#39;org-capture-mode-map [remap evil-save-and-close] &#39;org-capture-finalize [remap evil-save-modified-and-close] &#39;org-capture-finalize [remap evil-quit] &#39;org-capture-kill)&lt;/p&gt; &#xA;&lt;p&gt;(general-define-key :states &#39;normal :keymaps &#39;org-capture-mode-map ;; keyboard macro definition &#34;RET&#34; &#34;C-c C-c&#34; ;; general.el extended definition &#34;SPC k&#34; &#39;(org-capture-kill :which-key &#34;abort capture&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;kbd&lt;/del&gt; will automatically be called on every string key. =general-implicit-kbd= can be set to nil if you want to manually use &lt;del&gt;(kbd &#34;key&#34;)&lt;/del&gt;. This option is mainly provided to make it easy to transition to &lt;del&gt;general-define-key&lt;/del&gt; or &lt;del&gt;general-def&lt;/del&gt; from other key definers with search and replace and therefore only applies to &lt;del&gt;general-define-key&lt;/del&gt; (and wrappers). &lt;del&gt;kbd&lt;/del&gt; will always be called on string keys for other helpers such as &lt;del&gt;general-key&lt;/del&gt;, &lt;del&gt;general-key-dispatch&lt;/del&gt;, and &lt;del&gt;general-translate-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Keyword Arguments =:prefix=, =:states=, and =:keymaps= are the most basic keyword arguments. By default, there is no prefix or state (each is nil), and the keymap is =&#39;global=. Each keymap can either be a quoted keymap, quoted [[#keymapstate-aliases][keymap alias]], =&#39;global=, or =&#39;local=. This is the biggest contrast between &lt;del&gt;general-define-key&lt;/del&gt; and other definers such as &lt;del&gt;define-key&lt;/del&gt;, where the keymap is passed in directly. Note that the provided wrappers such as &lt;del&gt;general-def&lt;/del&gt; do not require quoting keymaps. When the keymap is =&#39;local=, the key will be bound only in the current buffer (see [[#override-keymaps-and-buffer-local-keybindings][here]] for more details). When the keymap is =&#39;global=, the key will be bound in &lt;del&gt;(current-global-map)&lt;/del&gt; (or the corresponding evil global map if =:states= is specified; see [[#note-for-evil-users][Note for Evil Users]] for more information).&lt;/p&gt; &#xA;&lt;p&gt;=:states= and =:keymaps= can be lists or a single element, allowing the user to define keys for multiple evil states or keymaps simultaneously. This can be useful in certain situations to prevent redundancy.&lt;/p&gt; &#xA;&lt;p&gt;Using a different prefix for the insert and emacs states (or any state in =general-non-normal-states=) can be done with =:non-normal-prefix= or =:global-prefix=. By default, =:prefix= will apply to all keys, but if one (or both) of the other prefix keywords is specified, =:prefix= will only apply to evil states not listed in =general-non-normal-states=. This is also the case for the global evil keymaps such as =evil-normal-state-map=. =:non-normal-prefix= will always only apply to the non-normal states. =:global-prefix= will always apply to all keys. For example, this command will bind =SPC /= to swiper in normal state and =M-SPC /= to swiper in emacs and insert state: #+begin_src emacs-lisp (general-define-key :keymaps &#39;(normal insert emacs) :prefix &#34;SPC&#34; :non-normal-prefix &#34;M-SPC&#34; &#34;/&#34; &#39;swiper) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you would like to create a named prefix keymap for your prefix keys, you can also specify =:prefix-command= and/or =:prefix-map=. All prefix keys will then be bound to the prefix command or prefix keymap in the correct keymaps. If =:prefix-command= is specified, &lt;del&gt;define-prefix-command&lt;/del&gt; will be used with =prefix-map= and =prefix-name= passed in as additional arguments to &lt;del&gt;define-prefix-command&lt;/del&gt;. If only =:prefix-map= is specified, a prefix keymap alone will be created with a menu item/prompt corresponding to =:prefix-name=. Note that existing prefix commands/keymaps will not be redefined, so reevaluating a general.el form that uses =:prefix-command= or =:prefix-map= will not clear the previously created keymap. #+begin_src emacs-lisp (general-define-key :keymaps &#39;(normal insert emacs) :prefix &#34;SPC&#34; :non-normal-prefix &#34;M-SPC&#34; :prefix-command &#39;my-prefix-command :prefix-map &#39;my-prefix-map &#34;/&#34; &#39;swiper) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;General is flexible in allowing you to choose how you write things, so if the above would be something you&#39;d use often, you could create a function with the above keyword arguments as defaults using [[#creating-new-key-definers][&lt;del&gt;general-create-definer&lt;/del&gt;]] and write the definition like this: #+begin_src emacs-lisp (my-normal-and-insert-define-key &#34;/&#34; &#39;swiper) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =:infix= keyword can be used to sandwich keys in between all of the specified prefix keys and the keys in each mapping. This is mainly useful when using multiple prefix keywords and especially when using wrappers. For example, if you wanted to define several keys that were prefixed with =SPC g= in normal state and =M-SPC g= in insert state, you could use the previous wrapper with =:infix= instead of re-specifying both =:prefix= and =:non-normal-prefix=: #+begin_src emacs-lisp (my-normal-and-insert-define-key :infix &#34;g&#34; &amp;lt;maps...&amp;gt;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you just want to create the prefix keymap and bind keys directly in it without immediately binding a prefix key to the prefix keymap, simply don&#39;t specify =:keymaps= or =:prefix=: #+begin_src emacs-lisp ;; bind &#34;/&#34; directly in the newly created my-prefix-map (general-define-key :prefix-map &#39;my-prefix-map &#34;/&#34; &#39;swiper) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;There is also a =:predicate= keyword for giving a condition under which a map should be active.&lt;/p&gt; &#xA;&lt;p&gt;*** Predicates The user can use the &lt;del&gt;:predicate&lt;/del&gt; keyword to specify a condition under which the map(s) should be active. For example: #+begin_src emacs-lisp (general-define-key :keymaps &#39;local :predicate &#39;(eobp) &#34;&#xA; &lt;right&gt;&#xA;  &#34; &#39;beginning-of-buffer) #+end_src&#xA; &lt;/right&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;&#xA;  &lt;right&gt;&lt;/right&gt;&lt;/del&gt; will now behave normally except at the end of the buffer where it will jump to the beginning of the buffer. Note that with &lt;del&gt;:predicate&lt;/del&gt;, you can still only have a key bound once in a single keymap. In other words, =:predicate= is only useful if a fallback keybinding already exists in a different, lower precedence keymap. If you want to have a key take different actions depending on conditions in a single keymap, see [[#choosing-definitions-based-on-predicates][Choosing Definition Based on Predicates]].&lt;/p&gt; &#xA;&lt;p&gt;See [[http://endlessparentheses.com/define-context-aware-keys-in-emacs.html][this post]] for more information about how this works.&lt;/p&gt; &#xA;&lt;p&gt;** Keymap/State Aliases To prevent the need to type out long keymap names like =evil-inner-text-objects-map=, general allows the user to specify shorthand names for keymaps by altering =general-keymap-aliases= (and for states by altering =general-state-aliases=). These are alists of either an alias or a list of aliases to the full keymap name: #+begin_src emacs-lisp (push &#39;(help . help-map) general-keymap-aliases) ;; or (push &#39;((h help) . help-map) general-keymap-aliases) ;; or (emacs 25+) (setf (alist-get &#39;help general-keymap-aliases) &#39;help-map) ;; or (emacs 25+) (setf (alist-get &#39;(h help) general-keymap-aliases) &#39;help-map)&lt;/p&gt; &#xA;&lt;p&gt;;; now (general-define-key :keymaps &#39;help ...) ;; is the same as (general-define-key :keymaps &#39;help-map ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that earlier entries in the alist take precedence.&lt;/p&gt; &#xA;&lt;p&gt;By default, the global evil state and text object keymaps have aliases. This allows for using the same syntax as &lt;del&gt;evil-global-set-key&lt;/del&gt; and &lt;del&gt;evil-define-key&lt;/del&gt;: #+begin_src emacs-lisp (general-define-key :keymaps &#39;motion ...) ;; or (general-define-key :keymaps &#39;m ...) #+end_src See =general-keymap-aliases= for all default aliases.&lt;/p&gt; &#xA;&lt;p&gt;All keymap symbols are immediately processed by &lt;del&gt;general--unalias&lt;/del&gt;. By overriding this function, it would be possible to, for example, automatically append =-map= or =-mode-map= to keymap names that don&#39;t end in =-map= or do something more complicated to create a generic shorthand without having manually specify all aliases. This is not recommended as it could potentially become confusing (and would currently break =:definer &#39;minor-mode=), but if anyone would find this useful, feel free to make an issue, and I&#39;ll consider adding it as an option.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;general-define-key&lt;/del&gt; Wrappers *** Positional Argument Wrappers When defining keys in specific keymaps and states, using positional arguments can be shorter. General has two macros that can basically act as drop-in replacements for &lt;del&gt;define-key&lt;/del&gt; and &lt;del&gt;evil-define-key&lt;/del&gt; and another macro that can basically act is a drop-in replacement for both of those and more. They are &lt;del&gt;general-emacs-define-key&lt;/del&gt;, &lt;del&gt;general-evil-define-key&lt;/del&gt;, and &lt;del&gt;general-def&lt;/del&gt; respectively. These are simply wrappers for &lt;del&gt;general-define-key&lt;/del&gt; that pass the positional arguments to the corresponding keywords. However, for compatibility with &lt;del&gt;define-key&lt;/del&gt; and &lt;del&gt;evil-define-key&lt;/del&gt;, it is not necessary to quote keymaps. Both keymaps and states can be left quoted or unquoted (regardless of whether they are lists).&lt;/p&gt; &#xA;&lt;p&gt;For example, the following are all equivalent: #+begin_src emacs-lisp (general-define-key :keymaps &#39;org-mode-map &#34;M-n&#34; &#39;org-next-visible-heading &#34;M-p&#34; &#39;org-previous-visible-heading)&lt;/p&gt; &#xA;&lt;p&gt;(general-emacs-define-key org-mode-map &#34;M-n&#34; &#39;org-next-visible-heading &#34;M-p&#34; &#39;org-previous-visible-heading)&lt;/p&gt; &#xA;&lt;p&gt;;; rough equivalent with define-key (with-eval-after-load &#39;org-mode (define-key org-mode-map (kbd &#34;M-n&#34;) &#39;org-next-visible-heading) (define-key org-mode-map (kbd &#34;M-p&#34;) &#39;org-previous-visible-heading)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Similarly, the following are all equivalent: #+begin_src emacs-lisp (general-define-key :states &#39;(normal visual) :keymaps &#39;org-mode-map &#34;gj&#34; &#39;org-next-visible-heading &#34;gk&#34; &#39;org-previous-visible-heading)&lt;/p&gt; &#xA;&lt;p&gt;(general-evil-define-key &#39;(normal visual) org-mode-map &#34;gj&#34; &#39;org-next-visible-heading &#34;gk&#34; &#39;org-previous-visible-heading)&lt;/p&gt; &#xA;&lt;p&gt;;; equivalent with evil-define-key (evil-define-key &#39;(normal visual) org-mode-map &#34;gj&#34; &#39;org-next-visible-heading &#34;gk&#34; &#39;org-previous-visible-heading) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The actual behavior of these two macros is the same as &lt;del&gt;general-define-key&lt;/del&gt;. You can still use &lt;del&gt;general-define-key&lt;/del&gt;&#39;s keyword arguments after the positional arguments (however, =:keymaps= and =:states= will not override the positional arguments): #+begin_src emacs-lisp ;; these are both valid (general-emacs-define-key &#39;global :prefix &#34;C-c&#34; &#34;/&#34; &#39;swiper)&lt;/p&gt; &#xA;&lt;p&gt;(general-evil-define-key &#39;normal org-mode-map :prefix &#34;SPC&#34; &#34;g&#34; &#39;worf-goto) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As for &lt;del&gt;global-set-key&lt;/del&gt; and &lt;del&gt;evil-global-set-key&lt;/del&gt;, wrappers are not needed. By default &lt;del&gt;general-define-key&lt;/del&gt; acts like &lt;del&gt;global-set-key&lt;/del&gt;, and &lt;del&gt;general-emacs-define-key&lt;/del&gt; can also act like &lt;del&gt;global-evil-set-key&lt;/del&gt; using the symbols for evil&#39;s states (see [[#keymapstate-aliases][keymap aliases]]).&lt;/p&gt; &#xA;&lt;p&gt;The third macro, &lt;del&gt;general-def&lt;/del&gt;, is provided for those who would prefer to use a single, succinctly named definer for all of the previous cases. It will act the same as &lt;del&gt;general-define-key&lt;/del&gt;, &lt;del&gt;general-emacs-define-key&lt;/del&gt;, or &lt;del&gt;general-evil-define-key&lt;/del&gt; depending on the number of positional arguments. #+begin_src emacs-lisp ;; use `general-define-key&#39; when no &#34;positional&#34; arguments (general-def &#34;key&#34; &#39;def ...) ;; example equivalents (general-define-key &#34;key&#34; &#39;def) (global-set-key (kbd &#34;key&#34;) &#39;def)&lt;/p&gt; &#xA;&lt;p&gt;;; use &lt;code&gt;general-emacs-define-key&#39; when one &#34;positional&#34; argument (general-def org-mode-map &#34;key&#34; &#39;def ...) ;; example equivalent (define-key org-mode-map (kbd &#34;key&#34;) &#39;def) ;; act like &lt;/code&gt;evil-global-set-key&#39; (general-def &#39;normal &#34;key&#34; &#39;def ...) ;; example equivalents (evil-global-set-key &#39;normal (kbd &#34;key&#34;) &#39;def) (evil-define-key &#39;normal &#39;global (kbd &#34;key&#34;) &#39;def)&lt;/p&gt; &#xA;&lt;p&gt;;; use `general-evil-define-key&#39; when two &#34;positional&#34; arguments (general-def &#39;normal org-mode-map &#34;key&#34; &#39;def ...) ;; example equivalent (evil-define-key &#39;normal org-mode-map (kbd &#34;key&#34;) &#39;def) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that all leading quoted and unquoted symbols and lists are considered to be positional arguments. This means that if you want to use a variable or function for a key that could be a positional argument, you should either use the definer &lt;del&gt;general-def&lt;/del&gt; would end up using (&lt;del&gt;general-define-key&lt;/del&gt;, &lt;del&gt;general-emacs-define-key&lt;/del&gt;, or &lt;del&gt;evil-define-key&lt;/del&gt;) or explicitly separate the positional arguments from the first key with a bogus keyword argument: #+begin_src emacs-lisp (general-def :start-maps t some-key &#39;some-command) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Mass Key Unbinding Wrapper &lt;del&gt;general-unbind&lt;/del&gt; acts as &lt;del&gt;general-def&lt;/del&gt;, but the positional arguments should all be keys (instead of pairs of keys and definitions) that should be unbound: #+begin_src emacs-lisp (general-unbind &#39;insert &#34;C-v&#34; &#34;C-k&#34; &#34;C-y&#34; &#34;C-e&#34;) ;; equivalent to (general-def &#39;insert &#34;C-v&#34; nil &#34;C-k&#34; nil &#34;C-y&#34; nil &#34;C-e&#34; nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This wrapper can also be used, for example, if you want to disable certain commands or keys from working in certain modes by using with =:with= keyword argument (example use case taken from [[https://github.com/emacs-evil/evil-collection/blob/9fc1a19807dfcd0cc2b221832b6e6faad80a291d/evil-collection-util.el#L32][evil-collection]]): #+begin_src emacs-lisp (general-unbind &#39;normal Info-mode-map :with &#39;ignore [remap evil-append] [remap evil-append-line] [remap evil-insert] [remap evil-insert-line]) ;; equivalent to (general-def &#39;normal Info-mode-map [remap evil-append] &#39;ignore [remap evil-append-line] &#39;ignore [remap evil-insert] &#39;ignore [remap evil-insert-line] &#39;ignore) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The reason that this functionality is implemented as a wrapper and not as a keyword argument for &lt;del&gt;general-define-key&lt;/del&gt; is that &lt;del&gt;cl-defun&lt;/del&gt; cannot correctly parse keyword arguments when the keyword is in an odd position (e.g. =(&#34;a&#34; :keyword &#39;arg)= instead of =(:keyword &#39;arg &#34;a&#34;)=). For example, if this functionality was implemented with an =:unbind= keyword, the =:general= use-package keyword and any definer created with &lt;del&gt;general-create-definer&lt;/del&gt; would not work if the user specified an odd number of keys to unbind (because the default keyword arguments would be at the end of the arglist, in the wrong positions). As I&#39;d rather not re-implement keyword argument parsing just for this use case, this functionality is provided as a macro. This macro will correctly handle any positioning for keyword arguments.&lt;/p&gt; &#xA;&lt;p&gt;*** Creating New Key Definers The &lt;del&gt;general-create-definer&lt;/del&gt; macro can create definers that wrap &lt;del&gt;general-def&lt;/del&gt; but with certain default settings. For example, it can be used to create a definer that will default to a certain prefix (like &lt;del&gt;evil-leader&lt;/del&gt; does): #+begin_src emacs-lisp ;; basic example (general-create-definer my-leader-def :prefix &#34;C-c&#34;) ;; bind &#34;C-c o&#34; to `other-window&#39; (my-leader-def &#34;o&#34; &#39;other-window)&lt;/p&gt; &#xA;&lt;p&gt;;; more complex example (general-create-definer tyrant-def :states &#39;(normal insert emacs) :prefix &#34;SPC&#34; :non-normal-prefix &#34;M-SPC&#34; :prefix-command &#39;tyrant-prefix-command :prefix-map &#39;tyrant-prefix-map) ;; globally bind &#34;SPC /&#34; in normal state and &#34;M-SPC /&#34; in the insert/emacs ;; states to `swiper&#39; (tyrant-def &#34;/&#34; &#39;swiper)&lt;/p&gt; &#xA;&lt;p&gt;;; for org-mode, bind &#34;SPC o&#34; in normal state and &#34;M-SPC /&#34; in the insert/emacs ;; states to `counsel-org-goto&#39; (tyrant-def org-mode-map &#34;o&#34; &#39;counsel-org-goto) ;; same as (tyrant-def :keymaps &#39;org-mode-map &#34;o&#34; &#39;counsel-org-goto) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;It takes an optional =:wrapping= keyword argument that can be specified to use another definer instead of &lt;del&gt;general-def&lt;/del&gt;: #+begin_src emacs-lisp (general-create-definer my-prefix-def :wrapping general-emacs-define-key :prefix &#34;M-,&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Vim-like Definers &lt;del&gt;general-evil-setup&lt;/del&gt; can be used to generate key definition functions that are named similarly to vim&#39;s. Currently, the following functions will be created:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;general-imap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-emap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-nmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-vmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-omap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-mmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-rmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-iemap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-nvmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-otomap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-itomap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-tomap&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are wrappers around &lt;del&gt;general-def&lt;/del&gt; created with &lt;del&gt;general-create-definer&lt;/del&gt; that set the default =:states=. You can see the help text for each for a more specific description. &lt;del&gt;general-evil-setup&lt;/del&gt; can be called with a non-nil argument (i.e. &lt;del&gt;(general-evil-setup t)&lt;/del&gt;) to create non-prefixed aliases for these definers (e.g. &lt;del&gt;nmap&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here is an example using &lt;del&gt;general-nmap&lt;/del&gt;: #+begin_src emacs-lisp (general-evil-setup) ;; define in evil-normal-state-map (general-nmap &#34;key&#34; &#39;def ...) ;; define in the normal state auxiliary map for org-mode-map (general-nmap org-mode-map &#34;key&#34; &#39;def ...) ;; same as (general-nmap :keymaps &#39;org-mode-map &#34;key&#34; &#39;def ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Note for Evil Users When =:states= is specified, &lt;del&gt;general-define-key&lt;/del&gt; will act as a wrapper around &lt;del&gt;evil-define-key*&lt;/del&gt;. &lt;del&gt;evil-define-key*&lt;/del&gt; now directly supports the symbol =global= for the keymap argument, so the following are equivalent: #+begin_src emacs-lisp (general-define-key ;; (default) ;; :keymaps &#39;global :states &#39;(normal visual) ...) (general-define-key :keymaps &#39;(normal visual) ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that this previously was not the case and &lt;del&gt;(general-define-key :states &#39;normal ...)&lt;/del&gt; would bind in the normal state auxiliary map for &lt;del&gt;(current-global-map)&lt;/del&gt;. Since auxiliary maps have a higher precedence than evil global and override keymaps, this was previously mentioned as one possible way of preventing certain keybindings from being overridden. However, this is not a reliable method. Keys bound in auxiliary maps can override keys bound in other auxiliary maps, for example, and keys bound in evil local or minor-mode keymaps will always override keys bound in regular auxiliary maps. If you need this functionality, please use evil intercept keymaps instead (see [[#override-keymaps-and-buffer-local-keybindings][Override Keymaps]]).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Override Keymaps and Buffer Local Keybindings General.el provides the equivalent of =bind-key=&#39;s =override-global-map= as =general-override-mode-map= (keymap alias is =&#39;override=). When =general-override-mode= is enabled, keys bound in =general-override-mode-map= will take precedence over keys bound in any other minor mode keymaps. By default, general.el will automatically enable =general-override-mode= when binding a key in =general-override-mode-map=. If you would prefer to enable it manually (e.g. you wish to toggle it at some point), you can set =general-override-auto-enable= to nil.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;General also provides a local equivalent called =general-override-local-mode= which is used to add support for buffer-local keybindings (with higher precedence than mode keybindings) by specifying =:keymaps &#39;local=. Unlike with the global override mode, =:keymaps &#39;local= should always be used instead of the actual keymap name since =:keymaps &#39;local= will cause general.el to automatically turn on the corresponding minor mode and perform some necessary extra setup. Note that this is not the same as using &lt;del&gt;local-set-key&lt;/del&gt; (which will bind the key for the current buffer&#39;s major mode, affecting other buffers). When =:states= is specified with =:keymaps &#39;local=, &lt;del&gt;evil-local-set-key&lt;/del&gt; will be used instead.&lt;/p&gt; &#xA;&lt;p&gt;Note that binding directly in =general-override-mode-map= (i.e. no =:states= specified) is only useful for non-evil keybindings. Evil keybindings already override almost all normal emacs keybindings using the same method used here (i.e. evil keymaps are in =emulation-mode-map-alists=). The main exceptions where evil keybindings will be overridden by non-evil keybindings are noted [[https://github.com/noctuid/evil-guide#what-overrides-evil][here]] with explanations on how to deal with these cases. To understand which evil keybindings override others, review the [[https://github.com/noctuid/evil-guide#keymap-precedence][precedence for evil keymaps]]. If you want a global evil keybinding to not be overridden by any other evil keymaps (e.g. overriding keymaps created in =evil-integration.el= or auxiliary keymaps created by some evil package), you can use intercept keymaps. You can make any keymap an intercept keymap, but it may be convenient to just use =general-override-mode-map= for this purpose since the necessary setup (&lt;del&gt;evil-make-intercept-map&lt;/del&gt;) has already been performed: #+begin_src emacs-lisp ;; keybindings that should not be overriden (general-define-key :states &#39;normal :keymaps &#39;override :prefix &#34;SPC&#34; &#34;f&#34; &#39;find-file)&lt;/p&gt; &#xA;&lt;p&gt;;; the above has precedence over the following (excerpt from evil-collection) ;; &#34;SPC f&#34; will still work as `find-file&#39; (evil-define-key &#39;normal transmission-mode-map (kbd &#34;SPC&#34;) &#39;scroll-up-command) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that by default, evil keybindings made with =:keymaps &#39;override= will override even those made with =:keymaps &#39;local=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Displaying Keybindings General keeps track of all your keybindings and allows presenting them as tables in an org buffer using &lt;del&gt;general-describe-keybindings&lt;/del&gt;. By default, they will be displayed in this order:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Buffer local keybindings (i.e. =:keymaps &#39;local=)&lt;/li&gt; &#xA; &lt;li&gt;Global keybindings (i.e. =:keymaps &#39;global=)&lt;/li&gt; &#xA; &lt;li&gt;Global evil keybindings (e.g. =:keymaps &#39;evil-normal-state-map=)&lt;/li&gt; &#xA; &lt;li&gt;Other keybindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Within these categories keymaps, states, and keybindings will be presented in the order they were created in. For each keybinding created, this command will display the key, the definition, and the previous definition. The previous definition will only be updated when the definition changes by default. To have it only be updated when the key was previously unbound, the user can set =general-describe-update-previous-definition= to =nil=.&lt;/p&gt; &#xA;&lt;p&gt;The order in which keybindings are displayed is customizable. All keymaps listed in =general-describe-priority-keymaps= will be displayed first. The rest can optionally be sorted by setting =general-describe-keymap-sort-function= (nil by default). The order evil states are displayed in can be altered either by changing =general-describe-state-sort-function= or changing the order of states in =general-describe-evil-states=. Keybindings can also be sorted if the user sets =general-describe-keybinding-sort-function=. Here is an example that will sort everything alphabetically: #+begin_src emacs-lisp (setq general-describe-priority-keymaps nil general-describe-keymap-sort-function #&#39;general-sort-by-car general-describe-state-sort-function #&#39;general-sort-by-car) ;; sort keybindings alphabetically by key (setq general-describe-keybinding-sort-function #&#39;general-sort-by-car) ;; sort keybindings alphabetically by definition (setq general-describe-keybinding-sort-function #&#39;general-sort-by-cadr) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For reference, keybindings are stored in an alist. Here is what is passed to each sorting function: #+begin_src emacs-lisp ;; &lt;code&gt;general-keybindings&#39; - an alist of keymap to state alist ;; passed to &lt;/code&gt;general-describe-keymap-sort-function&#39; ((keymap-name . state-alist) ...) ;; a state alist (state name is nil if there is no state) ;; passed to &lt;code&gt;general-describe-state-sort-function&#39; ((state-name . keybindings) ...) ;; the list of keybindings is passed to &lt;/code&gt;general-describe-keybinding-sort-function&#39; ((&#34;key after kbd applied&#34; &#39;def &#39;previous-def) ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To actually change how the keybinding table is printed, the user could override &lt;del&gt;general--print-map&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions/Macros to Aid Key Definition ** Disclaimer Key simulation (for &lt;del&gt;general-simulate-key&lt;/del&gt; and &lt;del&gt;general-key-dispatch&lt;/del&gt; but not for &lt;del&gt;general-key&lt;/del&gt;) can result in duplicate keys being recorded for keyboard macros and evil repeating. To work around this issue, =general.el= will discard these duplicate keys during macro playback (i.e. =executing-kbd-macro= is non-nil). So far, this seems to be a reliable method for getting macros and repeating to work correctly with key simulation. However, it is hard (and maybe impossible) to test some of these cases automatically since it involves simulating keys that in turn simulate keys, and, for example, I haven&#39;t found a way to correctly simulate recording a macro in these cases. Therefore, if you find any issues with macro playback or evil repeating when using &lt;del&gt;general-simulate-key&lt;/del&gt; or &lt;del&gt;general-key-dispatch&lt;/del&gt;, please make an issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Simulating Keypresses General provides two macros called &lt;del&gt;general-key&lt;/del&gt; and &lt;del&gt;general-simulate-key&lt;/del&gt; that can be used to simulate key sequences. In some cases, they can be used similarly to keyboard macros, but they have some advantages. Unlike with a keyboard macro, prefix arguments will work for the command that ends up running. Also, the key simulated does not have to correspond to the full key sequence for a command. See [[https://www.emacswiki.org/emacs/Evil#toc14][here]] for information on an alternative method of doing some of the things these key simulation helpers can do using &lt;del&gt;key-translation-map&lt;/del&gt;. I personally prefer general&#39;s helpers as they are simple and more powerful.&lt;/p&gt; &#xA;&lt;p&gt;Note that when a named prefix keymap/command exists (e.g. &lt;del&gt;help-command&lt;/del&gt;), you should generally prefer to bind directly to that. However, this is not possible for a key like =C-c= whose definition varies depending on the buffer. Therefore, you need to use either &lt;del&gt;general-key&lt;/del&gt; or &lt;del&gt;general-simulate-key&lt;/del&gt;: #+begin_src emacs-lisp (general-nmap &#34;SPC&#34; (general-simulate-key &#34;C-c&#34;)) ;; or (general-nmap &#34;SPC&#34; (general-key &#34;C-c&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Although both will work correctly, [[https://github.com/justbur/emacs-which-key][which-key]] does not currently show all available keys when &lt;del&gt;general-key&lt;/del&gt; is used, so I would currently recommend using &lt;del&gt;general-simulate-key&lt;/del&gt; instead for an example like this.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, &lt;del&gt;general-key&lt;/del&gt; should be preferred for simulating a key that corresponds to a single command. Unlike &lt;del&gt;general-simulate-key&lt;/del&gt;, which creates/returns a function, &lt;del&gt;general-key&lt;/del&gt; expands to an extended menu item like &lt;del&gt;general-predicate-dispatch&lt;/del&gt;. Using an extended menu item is a simpler and more direct approach as emacs will dynamically look up and act as the specified key. This has the advantage of showing the docstring for the exact command with =C-h k=. If the key to act as is unbound, key lookup can continue (like if =:predicate= returns nil), so having a fallback keybinding is possible with &lt;del&gt;general-key&lt;/del&gt; but not with &lt;del&gt;general-simulate-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another downside of &lt;del&gt;general-simulate-key&lt;/del&gt; is that any commands/functions called just afterwards will actually be run before the keys are simulated. This won&#39;t affect the most common use cases, but it makes setting up and tearing down a context more difficult (e.g. simulating a key in a specific evil state requires using =post-command-hook= for &lt;del&gt;general-simulate-key&lt;/del&gt; but not for &lt;del&gt;general-key&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-key&lt;/del&gt; may be useful when you want to have a key act as another without having to bind it to the exact command in every relevant keymap: #+begin_src emacs-lisp (general-nmap &#34;RET&#34; (general-key &#34;C-c C-c&#34;)) ;; a keyboard macro works, but C-h k will not show the command docstring (general-nmap &#34;RET&#34; &#34;C-c C-c&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-simulate-key&lt;/del&gt; and &lt;del&gt;general-key&lt;/del&gt; also support keyword arguments to control the context the keys are simulated in (both support =:state=; &lt;del&gt;general-simulate-key&lt;/del&gt; supports =:keymap= for now but I don&#39;t know how useful it is; please make an issue if you think it would be useful to add =:keymap= to &lt;del&gt;general-key&lt;/del&gt;). For example: #+begin_src emacs-lisp (general-nmap &#34;j&#34; (general-simulate-key &#34;C-n&#34; :state &#39;emacs)) ;; &lt;code&gt;general-key&#39; supports :state only&lt;/code&gt; (general-nmap &#34;j&#34; (general-key &#34;C-n&#34; :state &#39;emacs)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-key&lt;/del&gt; also supports custom setup and teardown before key lookup. Here&#39;s a similar example to the previous one: #+begin_src emacs-lisp (general-nmap &#34;j&#34; (general-key &#34;C-n&#34; :setup (evil-local-mode -1) :teardown (evil-local-mode))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The advantage of &lt;del&gt;general-simulate-key&lt;/del&gt; over &lt;del&gt;general-key&lt;/del&gt; is that it can be used to simulate a key sequence corresponding to multiple commands or a command followed by a key sequence. The key argument can be replaced by a list of a command and keys (e.g. &lt;del&gt;(general-simulate-key (&#39;evil-delete &#34;iw&#34;))&lt;/del&gt;). For example, the following is possible with &lt;del&gt;general-simulate-key&lt;/del&gt; but not with &lt;del&gt;general-key&lt;/del&gt; or a keyboard macro: #+begin_src emacs-lisp (general-nmap &#34;s&#34; (general-simulate-key (&#39;evil-ex &#34;s/&#34;))) #+end_src See the next section for another reasonable use case for this feature.&lt;/p&gt; &#xA;&lt;p&gt;When a command is specified for &lt;del&gt;general-simulate-key&lt;/del&gt;, general will used the remapped version of it if it exists (e.g. if =[remap evil-delete] &#39;lispyville-delete= is in an active keymap, &lt;del&gt;lispyville-delete&lt;/del&gt; will be used instead of &lt;del&gt;evil-delete&lt;/del&gt;). To use the exact command instead, =:remap nil= can be specified&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-simulate-key&lt;/del&gt; creates a named function with a docstring, so which-key and &lt;del&gt;describe-key&lt;/del&gt; will work properly for keys bound to a command created with it. The automatically generated function name, docstring, and which-key description can be replaced with keyword arguments: #+begin_src emacs-lisp (general-nmap &#34;SPC&#34; (general-simulate-key &#34;C-c&#34; :state &#39;emacs :name general-SPC-simulates-C-c :docstring &#34;Simulate C-c in emacs state with SPC.&#34; :which-key &#34;Simulate C-c&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Make sure that you don&#39;t bind a key to simulate itself (e.g. &lt;del&gt;(general-emap &#34;C-n&#34; (general-simulate-key &#34;C-n&#34; :state &#39;emacs))&lt;/del&gt;) as this will cause an infinite loop.&lt;/p&gt; &#xA;&lt;p&gt;** Mapping Under Non-prefix Keys This functionality is mainly targeted at evil users, but it could potentially be useful for non-evil users as well. In vim you can bind something like =cow= without a problem. With evil, =c= is bound to &lt;del&gt;evil-change&lt;/del&gt;, so you can&#39;t bind directly to =cow=. A workaround for this case is to bind a key in &lt;del&gt;evil-operator-state-map&lt;/del&gt;, but this won&#39;t work when operator state is not used (e.g. you want to bind something like =ctb= or =jk= in insert state). I&#39;ve come up with a more general workaround called &lt;del&gt;general-key-dispatch&lt;/del&gt;. Consider the following example: #+begin_src emacs-lisp (general-nmap &#34;c&#34; (general-key-dispatch &#39;evil-change &#34;ow&#34; &#39;toggle-word-wrap &#34;tb&#34; &#39;some-command &#34;c&#34; &#39;evil-change-whole-line ;; alternatively if there was no linewise version: &#34;c&#34; (general-simulate-key (&#39;evil-change &#34;c&#34;)))) ;; &lt;code&gt;evil-change&#39; is not bound in &lt;/code&gt;evil-visual-state-map&#39; by default but ;; inherited from `evil-normal-state-map&#39; ;; if you don&#39;t want &#34;c&#34; to be affected in visual state, you should add this (general-vmap &#34;c&#34; &#39;evil-change) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-key-dispatch&lt;/del&gt; is a function-creating macro. In this example, the command created will wait for user input and try to match one of the specified key sequences (e.g. =ow=). If a key sequence is matched, the corresponding command will be executed. Otherwise it will fall back to simulating the fallback command followed by the unmatched keys (using the same mechanism as &lt;del&gt;general-simulate-key&lt;/del&gt;). For example, =ow= is bound, so =cow= would run &lt;del&gt;toggle-word-wrap&lt;/del&gt;. On the other hand, =b= is not mapped, so =cb= would act the same as =cb= would by default. Counts and repeating should still work for both the mapped keys and fallback command. Because evil handles =cc= differently (since =c= is not a motion), =c= must be explicitly bound to &lt;del&gt;evil-change-whole-line&lt;/del&gt; (or to simulate =(&#39;evil-change &#34;c&#34;)=) to keep its behavior. =c= is not actually bound in visual state by default, so to keep =c= working the same in visual state, you should explicitly bind it to &lt;del&gt;evil-change&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Like with &lt;del&gt;general-simulate-key&lt;/del&gt;, general will first check to see if the command to be executed has been remapped (e.g. if =[remap evil-delete] &#39;lispyville-delete= is in an active keymap, &lt;del&gt;lispyville-delete&lt;/del&gt; will be used instead of &lt;del&gt;evil-delete&lt;/del&gt;). To use the exact command instead, =:remap nil= can be specified.&lt;/p&gt; &#xA;&lt;p&gt;Another thing to note is that you can&#39;t bind a key in the &lt;del&gt;general-key-dispatch&lt;/del&gt; section to simulate the base key (i.e. the key you bind to the resulting command, in this case =c=). For this example, you couldn&#39;t bind =w= to &lt;del&gt;(general-simulate-key &#34;ciw&#34;)&lt;/del&gt;. While this wouldn&#39;t cause an infinite loop, it wouldn&#39;t work either, so you would have to use the command name instead (e.g &lt;del&gt;(general-simulate-key (&#39;evil-change &#34;iw&#34;))&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Also, if you use a count in the middle (e.g. =c2tb= and =2= is not explicitly bound), the fallback command will be run immediately. If anyone cares about this, feel free to make an issue. I could potentially add an option to allow changing the count in the middle without immediately falling back to the default command.&lt;/p&gt; &#xA;&lt;p&gt;Another possible use case of &lt;del&gt;general-key-dispatch&lt;/del&gt; is to emulate vim&#39;s =imap=. For example, you can recreate the common =jk= to =&#xA; &lt;esc&gt;&#xA;  = keybinding: #+begin_src emacs-lisp (general-imap &#34;j&#34; (general-key-dispatch &#39;self-insert-command &#34;k&#34; &#39;evil-normal-state)) #+end_src&#xA; &lt;/esc&gt;&lt;/p&gt; &#xA;&lt;p&gt;Commands created in this way support an optional timeout, meaning you could still insert =jk= (without =C-q= / &lt;del&gt;quoted-insert&lt;/del&gt;) like with [[https://www.emacswiki.org/emacs/key-chord.el][key-chord.el]]: #+begin_src emacs-lisp (general-imap &#34;j&#34; (general-key-dispatch &#39;self-insert-command :timeout 0.25 &#34;k&#34; &#39;evil-normal-state)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If there is input lag, a timeout will not work well (this is also true for packages like key-chord.el). One example is vterm (even though there is not normally visible input lag). In vterm, the real amount of time you would have to wait after pressing &#34;j&#34; before pressing &#34;k&#34; is longer than 0.25 seconds. It is also likely that the next character you type will be input instead (e.g. &#34;jo&#34; would result in &#34;oo&#34;). There&#39;s not much that can be done about the first problem. You can try lowering the timeout in a problematic mode. However, if the input lag is inconsistently present (e.g. caused by some minor mode) and/or severe, this probably won&#39;t help much. You can at least address the second problem by explicitly specifying the character you want to insert: #+begin_src emacs-lisp (defun my-insert-j () (interactive) (insert &#34;j&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(general-imap &#34;j&#34; (general-key-dispatch &#39;my-insert-j :timeout 0.25 &#34;k&#34; &#39;evil-normal-state)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If input lag is an issue, =:timeout= can still be used as a visual enhancement. For example, you can bind =SPC SPC= to end a sentence if you don&#39;t normally need to type two spaces anywhere else. This works without =:timeout= but is visually confusing since spaces are never be inserted until the next keypress. =:timeout= can be used to enhance such a keybinding: #+begin_src emacs-lisp (defun my-insert-space () (interactive) (insert &#34; &#34;))&lt;/p&gt; &#xA;&lt;p&gt;(defun my-sentence-end () (interactive) (insert &#34;. &#34;))&lt;/p&gt; &#xA;&lt;p&gt;(general-def &#39;insert text-mode-map &#34;SPC&#34; (general-key-dispatch &#39;my-insert-space :timeout 0.1 &#34;SPC&#34; &#39;my-sentence-end)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;del&gt;general-key-dispatch&lt;/del&gt; with a timeout to mirror some prefix keymap in insert state, it may also convenient to use the =:inherit-keymap= keyword. This allows using prefix keybindings without the need to re-specify them in the &lt;del&gt;general-key-dispatch&lt;/del&gt;: #+begin_src emacs-lisp (general-nmap :prefix &#34;,&#34; :prefix-command &#39;my-prefix-map &#34;g&#34; &#39;magit-status)&lt;/p&gt; &#xA;&lt;p&gt;(general-imap &#34;,&#34; (general-key-dispatch &#39;self-insert-command :timeout 0.25 :inherit-keymap my-prefix-map)) #+end_src If you bind more keys under your prefix later on in normal state, they will still be available when pressing the prefix in insert state without the need to re-evaluate the &lt;del&gt;general-key-dispatch&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;del&gt;general-key-dispatch&lt;/del&gt; will prevent name clashes by appending a unique number to name of the created command (e.g. &lt;del&gt;general-dispatch-self-insert-command-G402&lt;/del&gt;). If you would like to reference the created command by name, you can name it yourself using the =:name= keyword argument (e.g. =:name general-insert-prefix-dispatch=).&lt;/p&gt; &#xA;&lt;p&gt;Like with &lt;del&gt;general-simulate-key&lt;/del&gt; used with a command name, the behavior of &lt;del&gt;evil-repeat&lt;/del&gt; will depend on the command that ends up running. Having repeating work correctly requires handling a lot of edge cases, so please make an issue if you find any problems. Note that evil does not support repeating a count that comes before an operator currently, but repeating should work when the count follows the operator key (=3cc= vs =c3c=).&lt;/p&gt; &#xA;&lt;p&gt;** Choosing Definitions Based on Predicates &lt;del&gt;general-predicate-dispatch&lt;/del&gt; can be used to generate a &lt;del&gt;menu-item&lt;/del&gt; that will behave differently based on the provided predicates. It takes a fallback definition as the first argument and then a list of predicates and alternate definitions (which can be commands, keymaps, etc.). Predicates are checked in order. If no predicate is matched and the fallback command is nil, then the mapping will be ignored (the keymap with the next highest precedence, if one exists, will be checked for the pressed key(s)).&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (general-define-key &#34;&#xA; &lt;right&gt;&#xA;  &#34; (general-predicate-dispatch &#39;right-char ;; pred def ... (eolp) &#39;beginning-of-line)) #+end_src&#xA; &lt;/right&gt;&lt;/p&gt; &#xA;&lt;p&gt;The =:docstring= keyword can be specified to add a description to the extended menu item.&lt;/p&gt; &#xA;&lt;p&gt;** Key &#34;Translation&#34; &lt;del&gt;general-translate-key&lt;/del&gt; allows binding a key to the definition of another key in the same keymap (comparable to how vim&#39;s keybindings work). Its arguments are the =states= (which can be nil for non-evil keymaps) and =keymaps= (both symbols or lists of symbols like for &lt;del&gt;general-define-key&lt;/del&gt;) to bind/look up the key(s) in followed optionally by keyword arguments (currently only =:destructive=) and key/replacement pairs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection-translate-key&lt;/del&gt; allows binding a key to the definition of another key in the same keymap (comparable to how vim&#39;s keybindings work). Its arguments are the =states= and =keymaps= to bind/look up the key(s) in followed optionally by keyword arguments (currently only =:destructive=) and key/replacement pairs. =states= can be nil for non-evil keymaps, and both =states= and =keymaps= can be a single symbol or a list of symbols.&lt;/p&gt; &#xA;&lt;p&gt;This can be particularly useful, for example, when you want make key swaps/cycles en masse. This use case is similar to one for &lt;del&gt;general-simulate-key&lt;/del&gt; (i.e. make a key act as another key that has a consistent meaning but different commands for different modes without having to individually bind the key to the exact definition in each mode&#39;s keymap). However, &lt;del&gt;general-simulate-key&lt;/del&gt; is not always suitable for this purpose. It can be used to, for example, make =j= in normal state act as =C-n= in emacs state (to use the default &#34;down&#34; navigation key for all modes without needing to individually make keybindings for every mode), but it cannot be used to swap/cycle keys within a single keymap, as this would cause an infinite loop of simulating the other key(s).&lt;/p&gt; &#xA;&lt;p&gt;An example use case of &lt;del&gt;general-translate-key&lt;/del&gt; is for non-QWERTY users who want to retain the hjkl keyboard positions for movement in dired, mu4e, etc. When using a package that already creates hjkl keybindings for the desired mode(s) (e.g. [[https://github.com/jojojames/evil-collection][evil-collection]]), it is easily possible to make these cycles in a single statement: #+begin_src emacs-lisp ;; single invocation example (general-translate-key nil &#39;evil-normal-state-keymap &#34;n&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; ...) ;; cycling keys en masse (dolist (keymap keymaps-with-hjkl-keybindings) (general-translate-key &#39;normal keymap ;; colemak hnei is qwerty hjkl &#34;n&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;i&#34; &#34;l&#34; ;; add back nei &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;n&#34; &#34;l&#34; &#34;i&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;By default, the first invocation of &lt;del&gt;general-translate-key&lt;/del&gt; will make a backup of the keymap. Each subsequent invocation will look up keys in the backup instead of the original. This means that a call to &lt;del&gt;general-translate-key&lt;/del&gt; will always have the same behavior even if evaluated multiple times. When =:destructive t= is specified, keys are looked up in the keymap as it is currently. This means that a call to &lt;del&gt;general-translate-key&lt;/del&gt; that swapped two keys would continue to swap/unswap them with each call. Therefore when =:destructive t= is used, all cycles/swaps must be done within a single call to &lt;del&gt;general-translate-key&lt;/del&gt;. To make a comparison to vim keybindings, =:destructive t= is comparable to vim&#39;s &lt;del&gt;map&lt;/del&gt;, and =:destructive nil= is comparable to vim&#39;s &lt;del&gt;noremap&lt;/del&gt; (where the &#34;original&#34; keybindings are those that existed in the keymap when &lt;del&gt;general-translate-key&lt;/del&gt; was first used).&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll almost always want to use the default behavior (especially in your init file). The limitation of =:destructive nil= is that you can&#39;t translate a key to another key that was defined after the first &lt;del&gt;evil-collection-translate-key&lt;/del&gt;, so =:destructive t= may be useful for interactive experimentation.&lt;/p&gt; &#xA;&lt;p&gt;Note that general state and keymap aliases (as well as =local= and =global=) and =general-implicit-kbd= are supported by &lt;del&gt;general-translate-key&lt;/del&gt;: #+begin_src emacs-lisp ;; normal -&amp;gt; evil-normal-state-keymap (general-translate-key nil &#39;normal ;; kbd not necessary by default &#34;C-p&#34; &#34;C-n&#34;) #+end_src Keys are bound using &lt;del&gt;general-define-key&lt;/del&gt;, so they are viewable with &lt;del&gt;general-describe-keybindings&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-swap-key&lt;/del&gt; is provided as a wrapper around &lt;del&gt;general-translate-key&lt;/del&gt; that allows swapping keys: #+begin_src emacs-lisp (general-swap-key nil &#39;normal &#34;;&#34; &#34;:&#34; &#34;a&#34; &#34;A&#34;) ;; equivalent to (general-translate-key nil &#39;normal &#34;;&#34; &#34;:&#34; &#34;:&#34; &#34;;&#34; &#34;a&#34; &#34;A&#34; &#34;A&#34; &#34;a&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Automatic Key Unbinding To automatically prevent =Key sequence starts with a non-prefix key= errors without the need to explicitly unbind non-prefix keys, you can add &lt;del&gt;(general-auto-unbind-keys)&lt;/del&gt; to your configuration file. This will advise &lt;del&gt;define-key&lt;/del&gt; to unbind any bound subsequence of the =KEY=. Currently, this will only have an effect for =general.el= key definers. The advice can later be removed with &lt;del&gt;(general-auto-unbind-keys t)&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The reason that advice is used is because &lt;del&gt;general-define-key&lt;/del&gt; does not always define keys in the same manner. Because customer definers are supported with =:definer=, &lt;del&gt;general-define-key&lt;/del&gt; does not have the necessary information to handle every case itself.&lt;/p&gt; &#xA;&lt;p&gt;As a final note, if you, for example, bind =s= to a command using &lt;del&gt;general-define-key&lt;/del&gt; and then later bind =s &#xA; &lt;key&gt;&#xA;  = to something, =s= will still show up in &#xA;  &lt;del&gt;general-describe-keybindings&lt;/del&gt; even though it&#39;s no longer bound. Since this is preventable by simply removing the initial unused keybinding, I likely will not try to add a workaround to fix this.&#xA; &lt;/key&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-keybinding-related Configuration Helpers General.el also provides a few helper functions/macros for other configuration purposes. They are intended to be slightly more convenient versions of functions/macros provided by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Settings &lt;del&gt;general-setq&lt;/del&gt; is a stripped-down &lt;del&gt;customize-set-variable&lt;/del&gt; that can act as a drop-in replacement for &lt;del&gt;setq&lt;/del&gt;. The reason you might want to use it instead of &lt;del&gt;setq&lt;/del&gt; is that &lt;del&gt;setq&lt;/del&gt; cannot correctly set all variables. Some variables defined with &lt;del&gt;defcustom&lt;/del&gt; specify a custom setter with =:set= that must be used for changes to take effect (e.g. =auto-revert-interval=). If the corresponding package has already been loaded, using &lt;del&gt;setq&lt;/del&gt; will generally not work to set these variables. On the other hand, &lt;del&gt;general-setq&lt;/del&gt; will correctly use the custom setter when necessary. One benefit of &lt;del&gt;general-setq&lt;/del&gt; over &lt;del&gt;customize-set-variable&lt;/del&gt; is that it can be used to set multiple variables at once. It does not do everything &lt;del&gt;customize-set-variable&lt;/del&gt; does (e.g. it cannot be used interactively, does not attempt to load variable dependencies, and does not allow the user to specify comments). From some basic testing, it is 10x to 100x faster because of this, but the speed difference should not really be noticeable if you aren&#39;t setting thousands of variables during emacs initialization.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example using variables that have a custom setter: #+begin_src emacs-lisp (general-setq auto-revert-interval 10 evil-want-Y-yank-to-eol t evil-search-module &#39;evil-search) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;del&gt;setq&lt;/del&gt; will work as expected as long it is used before the corresponding package is loaded, but with &lt;del&gt;customize-set-variable&lt;/del&gt; or &lt;del&gt;general-setq&lt;/del&gt;, you do not need to worry about whether or not the package has been loaded. If you decide to use &lt;del&gt;general-setq&lt;/del&gt;, I&#39;d recommend aliasing it to something shorter like &lt;del&gt;gsetq&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;One major difference from &lt;del&gt;customize-set-variable&lt;/del&gt; that you should be aware of is that &lt;del&gt;general-setq&lt;/del&gt; falls back to using &lt;del&gt;set&lt;/del&gt; instead of &lt;del&gt;set-default&lt;/del&gt;. This means that, like &lt;del&gt;setq&lt;/del&gt;, it will alter the local value of buffer-local variables instead of the default value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-setq-default&lt;/del&gt; and &lt;del&gt;general-setq-local&lt;/del&gt; also exist but do not attempt to call custom setters. The reason for this is that I have never seen any custom setters for variables that make sense to set both globally and locally (custom setters I&#39;ve seen just use &lt;del&gt;set-default&lt;/del&gt;). &lt;del&gt;setq-default&lt;/del&gt; is useful when you want to globally change the default for a buffer-local variable. &lt;del&gt;setq-local&lt;/del&gt; is useful when you want to make a non-buffer-local variable buffer-local and then change its local value (&lt;del&gt;setq&lt;/del&gt; already preferentially alters the buffer-local value of a variable if there is one). For now, the general.el equivalents are just aliases, but in the future, they will likely record user settings to be displayed in a table later.&lt;/p&gt; &#xA;&lt;p&gt;** Hooks and Advice &lt;del&gt;general-add-hook&lt;/del&gt;, &lt;del&gt;general-remove-hook&lt;/del&gt;, &lt;del&gt;general-advice-add&lt;/del&gt;, and &lt;del&gt;general-advice-remove&lt;/del&gt; all act as drop-in replacements for their corresponding functions but allow lists for some of the arguments. The hook functions allow specifying lists for the hooks and functions, and the advice functions allow specifying lists for the symbols and functions. Because I don&#39;t like the difference in naming for the default advice functions, &lt;del&gt;general-add-advice&lt;/del&gt; and &lt;del&gt;general-remove-advice&lt;/del&gt; are also provided as aliases.&lt;/p&gt; &#xA;&lt;p&gt;For example: #+begin_src emacs-lisp (general-add-hook my-lisp-mode-hooks (list #&#39;lispy-mode #&#39;rainbow-delimiters-mode)) ;; note that setting the :jump command property is recommended instead of this (general-add-advice (list &#39;git-gutter:next-hunk &#39;git-gutter:previous-hunk) :before #&#39;evil-set-jump) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-add-hook&lt;/del&gt; and &lt;del&gt;general-add-advice&lt;/del&gt; can add &#34;transient&#34; functions to hooks or as advice. These transient functions will remove themselves from the hook or as advice after they run once (inspired by Doom Emacs). Additionally, they can remove themselves after the first time they return non-nil or after any arbitrary condition is met. For an example of this, see the implementation of &lt;del&gt;general-after-gui&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Miscellaneous &lt;del&gt;general-after-init&lt;/del&gt; can be used to run code after initialization (e.g. &lt;del&gt;(general-after-init (do-something) (do-something-else))&lt;/del&gt;). It just adds to =after-init-hook= or runs the code immediately if initialization has happened already.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-after-gui&lt;/del&gt; and &lt;del&gt;general-after-tty&lt;/del&gt; can be used to run some code once after the first graphical or terminal frame is created. Here is an example use case: #+begin_src emacs-lisp (use-package clipetty :ensure t :init ;; only need to load if create a terminal frame ;; `global-clipetty-mode&#39; will not cause issues if enabled for a server with ;; both graphical and terminal frames (general-after-tty (global-clipetty-mode))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;These both use &lt;del&gt;general-add-hook&lt;/del&gt; to create &#34;transient&#34; hooks.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integration with Other Packages ** Use-package Keywords *** :general Keyword General also optionally provides a use-package keyword. =:general= is similar to =:bind= in that it implies =:defer t= whenever there are bound commands that can be autoloaded (e.g. it will not imply =:defer t= if the only bound command is to a lambda, for example). Whenever autoloadable commands are bound, and the option &lt;del&gt;general-use-package-emit-autoloads&lt;/del&gt; is non-nil, use-package will create autoloads for them (though this is usually not necessary). The keyword is followed by one or more lists containing arguments for &lt;del&gt;general-def&lt;/del&gt;; there is no difference in syntax: #+begin_src emacs-lisp (use-package org :general (&#34;C-c c&#34; &#39;org-capture) (:keymaps &#39;org-mode-map &#34;TAB&#34; &#39;org-cycle) ;; uses &lt;code&gt;general-def&#39; not &lt;/code&gt;general-define-key&#39;, so this is fine (org-mode-map &#34;TAB&#34; &#39;org-cycle)) #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The =:general= keyword also supports using any other key definer/wrapper by manually specifying it: #+begin_src emacs-lisp (use-package org :general (general-nmap &#34;SPC c&#34; &#39;org-capture)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;One annoyance you may encounter is that the default function for indentation will indent a list starting with a keyword like a function: #+begin_src emacs-lisp (:keymaps &#39;org-mode-map &#34;TAB&#34; &#39;org-cycle) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This is an annoyance you may have using other emacs packages as well and can be fixed by modifying =lisp-indent-function= (see [[http://emacs.stackexchange.com/q/10230/5278][this emacs stackexchange question]] and Fuco1&#39;s modified &lt;del&gt;lisp-indent-function&lt;/del&gt; in one of the answers there).&lt;/p&gt; &#xA;&lt;p&gt;*** :no-autoload Keyword If generating autoloads for commands is not desirable, it can be disabled globally (with the =general-use-package-emit-autoloads= option), on a per-binding basis, or on a per-form basis. To skip generating autoloads for a command, use the extended command definition and set the =:no-autoload= option to non-nil. This can be particularly handy when binding to functions defined in the same use-package block, otherwise the byte-compiler complains about multiple definitions of the same function: #+begin_src emacs-lisp (use-package org :general (:states &#39;normal &#34;SPC oa&#34; &#39;(my-org-agenda :no-autoload t)) :preface (defun my-org-agenda () (interactive) (let ((org-agenda-tag-filter-preset &#39;(&#34;-drill&#34;))) (call-interactively #&#39;org-agenda)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The keyword can also be used at the global level, instructing general to skip autoloads for all the keybindings in a form: #+begin_src emacs-lisp :general (:states &#39;normal :no-autoload t &#34;SPC oa&#34; #&#39;my-org-agenda &#34;SPC oc&#34; #&#39;my-org-capture) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you wish to disable emitting autoloads with the =general-use-package-emit-autoloads= variable in a byte-compiled configuration, make sure it is set during macro-expansion time before the =use-package= declarations, with something like &lt;del&gt;(eval-and-compile (setq general-use-package-emit-autoloads nil))&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Hook Keywords General provides two alternatives to =:hook= that use &lt;del&gt;general-add-hook&lt;/del&gt; called =:ghook= and =:gfhook=. Both take any number of arguments of symbols or lists. List arguments work the same for both; they correspond to a list of arguments for [[#hooks-and-advice][&lt;del&gt;general-add-hook&lt;/del&gt;]]. The primary difference between the two is that symbol arguments to =:ghook= are /hooks/, but they are /functions/ for =:gfhook= (hence the =f=). Furthermore, =:ghook= usually implies =:defer t=, and =:gfhook= never implies =:defer t=. =:ghook= should be used when the &lt;del&gt;general-add-hook&lt;/del&gt; is meant to trigger the loading of the package. =:gfhook= should be used when the &lt;del&gt;general-add-hook&lt;/del&gt; is meant to trigger some function in response to the package&#39;s mode being enabled (or toggled in the case of a minor mode). More simply put, =:ghook= is suited towards enabling minor modes, and =:gfhook= is suited towards performing setup once some mode has loaded. The use case for each is further explained below.&lt;/p&gt; &#xA;&lt;p&gt;**** :ghook Keyword =:ghook= is intended to be used to add a package&#39;s minor mode enabling function to a user-specified /hook/, so that when hook is run, the package will be loaded and the mode enabled. This means that =:ghook= will usually imply =:defer t=. While it does not always imply =:defer t=, it will add any non-lambda functions to =:commands= (this is the same behavior as =:hook=). Though this is usually unnecessary (the commands probably already have autoloads), it will in turn imply =:defer t=.&lt;/p&gt; &#xA;&lt;p&gt;Symbols specified with =:ghook= correspond to hooks, and the function to add to each hook is inferred from the package&#39;s name (i.e. =-mode= is automatically added to the package name unless the package&#39;s name already ends in =-mode=). For example, these are all the same: #+begin_src emacs-lisp (use-package rainbow-delimiters :ghook &#39;prog-mode-hook)&lt;/p&gt; &#xA;&lt;p&gt;(use-package rainbow-delimiters ;; `general-add-hook&#39; arglist: HOOKS FUNCTIONS &amp;amp;optional APPEND LOCAL ;; a missing FUNCTIONS argument will be replaced with inferred minor mode :ghook (&#39;prog-mode-hook))&lt;/p&gt; &#xA;&lt;p&gt;(use-package rainbow-delimiters ;; a null or non-symbol placeholder for FUNCTIONS will be replaced with ;; inferred minor mode command; this may be useful if you want to keep the ;; inferred command but also want to set the APPEND and/or LOCAL arguments ;; afterwards, e.g. (&#39;prog-mode-hook nil t) :ghook (&#39;prog-mode-hook nil))&lt;/p&gt; &#xA;&lt;p&gt;(use-package rainbow-delimiters ;; the full arglist for `general-add-hook&#39; can be specified ;; this is necessary if inference is not possible (see below for an example) :ghook (&#39;prog-mode-hook #&#39;rainbow-delimiters-mode))&lt;/p&gt; &#xA;&lt;p&gt;(use-package ;; :commands implies :defer t :commands rainbow-delimiters-mode :init (general-add-hook &#39;prog-mode-hook #&#39;rainbow-delimiters-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you are already familiar with =:hook=, you should note that there are quite a few syntactic differences between =:ghook= and =:hook=. Firstly, quoting the hooks and functions is required. Like =:general= uses the same syntax as &lt;del&gt;general-def(ine-key)&lt;/del&gt; (unlike =:bind=), =:ghook= uses the same syntax as &lt;del&gt;(general-)add-hook&lt;/del&gt; for both clarity and convenience. For example, the user may want to use a helper function/macro to generate the function(s) to add to the hook (see the [[#gfhook-keyword][:gfhook section]] for a specific example). The user may also want to specify a variable containing a list of hooks instead of an actual hook name: #+begin_src emacs-lisp (defconst my-lisp-mode-hooks &#39;(lisp-mode-hook emacs-lisp-mode-hook clojure-mode-hook scheme-mode-hook ;; ... ))&lt;/p&gt; &#xA;&lt;p&gt;(use-package lispy :ghook my-lisp-mode-hooks)&lt;/p&gt; &#xA;&lt;p&gt;;; same as (use-package lispy :ghook (my-lisp-mode-hooks))&lt;/p&gt; &#xA;&lt;p&gt;;; same as (use-package lispy ;; `general-add-hook&#39; can take a list of hooks for the HOOK argument :ghook (&#39;(lisp-mode-hook emacs-lisp-mode-hook clojure-mode-hook scheme-mode-hook ;; ... ))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, =:ghook= will not automatically add =-hook= to specified hook symbols (i.e. you must specify =prog-mode-hook=; =prog-mode= is not sufficient). This design decision is intended to help prevent confusion since =:gfhook= also exists, and its symbols correspond to functions (not hooks) that could also end in =-mode= (and could potentially not be sharp quoted). I don&#39;t think the loss in conciseness is major, and hopefully this will help always make it immediately clear whether symbols correspond to functions or hooks.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, =:hook= only takes one argument, whereas =:ghook= can take an arbitrary number of arguments (just like =:general=): #+begin_src emacs-lisp (use-package lispy ;; any number of symbols (or lists) is allowed :ghook &#39;lisp-mode-hook &#39;emacs-lisp-mode-hook &#39;clojure-mode-hook &#39;scheme-mode-hook) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that if the function name cannot be inferred from the package name (i.e. the package name or the package name with =-mode= appended is not correct), you need to specify a full &lt;del&gt;general-add-hook&lt;/del&gt; arglist: #+begin_src emacs-lisp (use-package yasnippet :ghook (&#39;(text-mode-hook prog-mode-hook) #&#39;yas-minor-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** :gfhook Keyword =:gfhook= is intended to be used to specify /functions/ to add to the package&#39;s mode hook. The hook is inferred from the package&#39;s name (by appending either =-mode-hook= or just =-hook= if the package&#39;s name ends in =-mode=). If the hook cannot be inferred from the package name, then the full arglist must be specified just as with =:ghook=. Unlike =:ghook=, =:gfhook= never adds functions to =:commands= and therefore never implies =:defer t=. This is because the functions specified are ones that should be run when turning on (or toggling) the mode(s) the package provides. The specified functions are external to the package, could be called elsewhere, and therefore should not trigger the package to load. The following all have the same effect: #+begin_src emacs-lisp (use-package org ;; for a major-mode package, you might use :mode to imply :defer t (or just ;; use :defer t; or just `use-package-always-defer&#39; which I personally prefer) :gfhook #&#39;visual-line-mode #&#39;my-org-setup ;; ... )&lt;/p&gt; &#xA;&lt;p&gt;(use-package org :init (general-add-hook &#39;org-mode-hook #&#39;visual-line-mode) (general-add-hook &#39;org-mode-hook #&#39;my-org-setup))&lt;/p&gt; &#xA;&lt;p&gt;;; this is also valid but less concise (use-package org ;; specify null or non-symbol placeholder for HOOKS to use inferred hook :gfhook (nil (list #&#39;visual-line-mode #&#39;my-org-setup)))&lt;/p&gt; &#xA;&lt;p&gt;(use-package org :init (general-add-hook &#39;org-mode-hook (list #&#39;visual-line-mode #&#39;my-org-setup))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Like with =:ghook=, =:gfhook= still requires quoting, so you can use variables and function/macro calls to generate the function to add to the hook: #+begin_src emacs-lisp (defmacro disable (mode) `(lambda () (,mode -1)))&lt;/p&gt; &#xA;&lt;p&gt;(use-package proced ;; must be in a `general-add-hook&#39; argument list, so that it itself is not ;; considered one :gfhook (nil (disable visual-line-mode))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Although you could use =:gfhook= to enable minor modes for some major mode (e.g. enable flyspell inside &lt;del&gt;(use-package org)&lt;/del&gt;), it is probably more logical/organized to group these hooks along with their minor modes&#39; use-package declarations (e.g. using =:ghook=). =:gfhook= is more suited for setup functions. Expanding on the proced example: #+begin_src emacs-lisp (defun my-proced-setup () (visual-line-mode -1) ;; not global; has to be run in buffer (proced-toggle-auto-update t))&lt;/p&gt; &#xA;&lt;p&gt;(use-package proced :gfhook #&#39;my-proced-setup) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Use with Key-chord General provides a simple function that will rewrite a string into a key-chord vector. This allows you to easily use general to create definitions for =key-chord.el=. The following are equivalent:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (key-chord-define evil-insert-state-map &#34;jk&#34; &#39;evil-normal-state) (general-define-key :keymaps &#39;evil-insert-state-map (general-chord &#34;jk&#34;) &#39;evil-normal-state (general-chord &#34;kj&#34;) &#39;evil-normal-state) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that the order of the keys does matter unlike with the default &lt;del&gt;key-chord-define&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extended Definition Syntax General.el supports some extra per-definition keywords. It has &#34;type&#34; keywords that give general.el some extra information to use to create definitions (e.g. =:prefix-command= and =:keymap=) and other keywords that will alter or ignore definitions (e.g. =:predicate= and =:ignore=).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The system that allows for the default keywords can also be extended by the user to support more keywords that can either directly alter the definition or just be used for side effects (like =:which-key=). An extended definition keyword can have any number of helper keywords (and can also be used as a helper keyword itself, e.g. =:keymap=). See [[#user-defined-extended-definition-keywords][User-defined Extended Definition Keywords]] for more information on creating new keywords.&lt;/p&gt; &#xA;&lt;p&gt;Here are the keywords available by default (helper keywords are subitems; specific examples are given later):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:def= - Implicit; this is paired with the actual definition (helper keyword; does not trigger any special behavior by itself)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&#34;Type&#34; specifiers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:keymap= - For keymaps; if the keymap is not defined, will create an &#34;autoloaded&#34; keymap for =:package= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=:package= - The package to load (also global)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=:prefix-command= and/or =:prefix-map= - These are the same as =:def= and =:keymap= respectively but will create a prefix command and/or keymap (these behave the same as the global keyword arguments except for any key as opposed to just =:prefix=) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=:prefix-name= The keymap menu name/prompt (global value never considered)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=:ignore= - Do not create a keybinding for the key def pair&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that every bindable definition must have =:def=, but general allows for shorthand where =:def= can be omitted or a &#34;type&#34; specifier can be used instead: #+begin_src emacs-lisp ;; shorthand &#39;(swiper :wk &#34;swipe&#34;) ;; rewritten to &#39;(:def swiper :wk &#34;swipe&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; shorthand &#39;(:keymap some-keymap) ;; rewritten to &#39;(:def some-keymap :keymap some-keymap) ;; same as &#39;(:def some-keymap :keymap t)&lt;/p&gt; &#xA;&lt;p&gt;;; shorthand &#39;(:prefix-command my-prefix-cmd :prefix-map my-prefix-map) ;; rewritten to &#39;(:def my-prefix-cmd :prefix-command my-prefix-cmd :prefix-map my-prefix-map) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;After the shorthand expansion, the type keywords are handled exactly the same as any other extended definition keyword.&lt;/p&gt; &#xA;&lt;p&gt;Which-key functionality (see below for more details):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:which-key= or =:wk= - The replacement text (or cons or function) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=:major-modes= - Major modes to match (optional; also global)&lt;/li&gt; &#xA;   &lt;li&gt;=:wk-match-keys= - Whether to include the keys in the match cons (defaults to =t= globally)&lt;/li&gt; &#xA;   &lt;li&gt;=:wk-match-binding= - Whether to include the binding in the match cons (defaults to =t=; also global)&lt;/li&gt; &#xA;   &lt;li&gt;=:wk-full-keys= - Whether the bound keys correspond to the full sequence to match (defaults to =t=; also global)&lt;/li&gt; &#xA;   &lt;li&gt;=:keymap= - When non-nil, general will not try to match a keymap symbol as if it was a command&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Evil command properties (see below for more details):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:properties= - The list of properties to add to the command (also global)&lt;/li&gt; &#xA; &lt;li&gt;=:repeat= - The repeat property to set for the command (also global)&lt;/li&gt; &#xA; &lt;li&gt;=:jump= - The jump property to set for the command (also global)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Global keywords that can be overridden locally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:predicate=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default value for a keyword is =nil= unless otherwise specified.&lt;/p&gt; &#xA;&lt;p&gt;** &#34;Autoloaded&#34; Keymaps As the first example, an extended definition can be used to create an &#34;autoload&#34; for a keymap like use-package&#39;s =:bind-keymap= keyword does: #+begin_src emacs-lisp (general-define-key &#34;C-c p&#34; &#39;(:keymap projectile-command-map :package projectile)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Using this feature, a key can be bound to a keymap that does not exist yet and still work as expected. Projectile will be loaded when =C-c p= is used for the first time. This is done by using an intermediate function to load the package and rebind the keys.&lt;/p&gt; &#xA;&lt;p&gt;=:keymap= is the primary keyword that triggers this check. It can also be used as a helper keyword (e.g. for =which-key=). If the keymap already exists, general will not try to create an autoloaded keymap, and =:package= is not required.&lt;/p&gt; &#xA;&lt;p&gt;=:package= is a helper keyword that can be specified locally within the extended definition or globally. When using the use-package =:general= keyword, it will automatically be specified.&lt;/p&gt; &#xA;&lt;p&gt;** Which Key Integration If you are not already familiar with which-key&#39;s replacement system, please see the docstring for &lt;del&gt;which-key-replacement-alist&lt;/del&gt; if you don&#39;t understand any of the examples or information here.&lt;/p&gt; &#xA;&lt;p&gt;There are several benefits to using general.el to add which-key replacements. The main benefit is that because the keys and definition are already specified, general.el can automatically assemble the match cons. This reuse of information saves a little space since it is not necessary to make an additional call to &lt;del&gt;which-key-add-key-based-replacements&lt;/del&gt; with the key information. It is also useful since which-key does not currently provide any convenience function for creating a replacement that matches a binding (you have to manually add to &lt;del&gt;which-key-replacement-alist&lt;/del&gt;). However, see which-key&#39;s [[https://github.com/justbur/emacs-which-key#automatic][which-key-enable-extended-define-key]] which provides another method for automatically creating replacements and binding keys simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;Another related benefit of using =:which-key= instead of &lt;del&gt;which-key-add-key-based-replacements&lt;/del&gt; directly even for keys that won&#39;t be bound is that replacements will be added for all prefix combinations (i.e. when =:non-normal-prefix= and/or =:global-prefix= are also specified).&lt;/p&gt; &#xA;&lt;p&gt;The argument supplied to =:which-key= or =:wk= is equivalent to the REPLACEMENT argument in &lt;del&gt;which-key-add-key-based-replacements&lt;/del&gt;. It can be a full replacement cons of =(KEY . BINDING)= or just a string (which will be used as the BINDING and serve as the new description). Additionally it can be a function that will return a replacement cons (see the docstring for &lt;del&gt;which-key-replacements-alist&lt;/del&gt; or the which-key README). Finally, which-key allows for a special replacement of =t= to prevent a key from being shown in the which-key popup at all.&lt;/p&gt; &#xA;&lt;p&gt;The =:which-key= keyword can be used with the =:major-modes= keyword (locally or globally) which can be compared to using &lt;del&gt;which-key-add-major-mode-key-based-replacements&lt;/del&gt;. =:major-modes= can have the following values (see the examples below):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=t= - the major mode will be obtained from all keymaps by removing &#34;-map&#34;&lt;/li&gt; &#xA; &lt;li&gt;the major mode name (when only one keymap is specified)&lt;/li&gt; &#xA; &lt;li&gt;a list of the following values: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=t= - same behavior as above but only for corresponding index in =:keymaps=&lt;/li&gt; &#xA;   &lt;li&gt;the major mode name for that index&lt;/li&gt; &#xA;   &lt;li&gt;=nil= (or no item at the index) - don&#39;t match the major mode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=:wk-match-keys=, =:wk-match-binding=, and =:wk-full-keys= can be used to customize the match cons. Generally these will not need to be adjusted. The binding is only included in the match cons if one is available, and =:wk-full-keys= only needs to be specified as =nil= if you are binding keys in a prefix map.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples: #+begin_src emacs-lisp (general-define-key :prefix &#34;SPC&#34; :keymaps &#39;normal ;; unbind SPC and give it a title for which-key (see echo area) &#34;&#34; &#39;(nil :which-key &#34;my lieutenant general prefix&#34;) ;; bind nothing but give SPC f a description for which-key &#34;f&#34; &#39;(:ignore t :which-key &#34;file prefix&#34;) ;; use a cons as a replacement &#34;g&#34; &#39;(:ignore t :wk (&#34;g-key&#34; . &#34;git prefix&#34;)) ;; toggle lispy; use a function as a replacement to show if currently on &#34;l&#34; &#39;(lispy-mode :wk my-lispy-which-key-display) ;; for a keymap, only the keys will be matched; ;; :no-match-binding is not necessary &#34;p&#34; &#39;(:keymap projectile-command-map :wk &#34;projectile prefix&#34;) ;; don&#39;t display this keybinding at all &#34;z&#34; &#39;(hidden-command :wk t) ...)&lt;/p&gt; &#xA;&lt;p&gt;(general-define-key :keymaps &#39;help-map ;; allow keys before bound keys in match ;; since binding in a prefix map :wk-full-keys nil ;; make a prefix-command and add description &#34;A&#34; &#39;(:prefix-command apropos-prefix-map :which-key &#34;apropos&#34;))&lt;/p&gt; &#xA;&lt;p&gt;;; an equivalent of the above (general-define-key :keymaps &#39;help-map :wk-full-keys nil :prefix &#34;A&#34; :prefix-command &#39;apropos-prefix-map ;; make a prefix-command and add description &#34;&#34; &#39;(:ignore t :which-key &#34;apropos&#34;))&lt;/p&gt; &#xA;&lt;p&gt;;; :major-modes (general-define-key :keymaps &#39;emacs-lisp-mode-map :major-modes t ...)&lt;/p&gt; &#xA;&lt;p&gt;(general-define-key :keymaps &#39;(no-follow-convention-mode-keymap1 org-mode-map) :major-modes &#39;(no-follow-convention-mode t) ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Evil Command Properties The =:properties=, =:repeat=, and =:jump= keywords can be used to add evil command properties: #+begin_src emacs-lisp (general-define-key :keymaps &#39;normal :prefix &#34;SPC&#34; &#34;gj&#34; &#39;(git-gutter:next-hunk :properties (:repeat t :jump t)) &#34;gk&#34; &#39;(git-gutter:previous-hunk :repeat t :jump t))&lt;/p&gt; &#xA;&lt;p&gt;;; they also work globally (general-define-key :keymaps &#39;normal :prefix &#34;SPC&#34; :properties &#39;(:repeat t :jump t) ;; or :repeat t :jump t &#34;gj&#34; &#39;git-gutter:next-hunk &#34;gk&#34; &#39;git-gutter:previous-hunk)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that the default for commands without a repeat property are treated the same as commands with =:repeat t=, so the above repeat configuration isn&#39;t explicitly necessary in this case.&lt;/p&gt; &#xA;&lt;p&gt;If you would like for more keywords to be added that correspond to specific properties (like =:repeat=), feel free to make an issue or pull request. For more information on command properties see evil&#39;s documentation and [[https://github.com/noctuid/evil-guide#command-properties][here]].&lt;/p&gt; &#xA;&lt;p&gt;** User-defined Extended Definition Keywords New keywords and functionality can be added by the user by adding a keyword to =general-extended-def-keywords= and creating a corresponding function named &lt;del&gt;general-extended-def-:&#xA;  &lt;keyword&gt;&lt;/keyword&gt;&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Whenever this keyword is specified, general calls the corresponding function with the arguments =state keymap key edef kargs=. Generally, you can ignore at least some of these arguments. =state= and =keymap= are the evil state (nil if none) and keymap that the =key= (internal representation; &lt;del&gt;kbd&lt;/del&gt; already used if necessary) is being bound in. Note that =keymap= will be the symbol for the keymap in case it is needed. To get the actual keymap, using &lt;del&gt;general--get-keymap&lt;/del&gt; is recommended. =edef= is the extended definition itself, and =kargs= is the plist of all the keyword arguments given to the original &lt;del&gt;general-define-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Extended definition functions can optionally alter the definitions. Keywords that have this behavior must be added to either =general-rewrite-def-keywords= or =general-rewrite-def-after-keywords= instead of to =general-extended-def-keywords=. The difference between the two is that the former will alter the definition before the functions for the keywords in =general-extended-def-keywords= are called. Functions that alter the definition should return a new extended definition plist with the =:def= entry updated. For a simple example of a function that does not alter the definition, see &lt;del&gt;general-extended-def-:properties&lt;/del&gt;. For a simple example of a function that does alter the definition, see &lt;del&gt;general-extended-def-:predicate&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Extended definition keywords may use any number of helper keywords. These do not need to be added to any variables but should be distinct from any other keywords.&lt;/p&gt; &#xA;&lt;p&gt;Note that the keywords in =general-extended-def-keywords= and their helper keywords can all be specified both globally and locally. Since globally specifying keywords may not always make sense, it is up to the &lt;del&gt;general-extended-def-:&#xA;  &lt;keyword&gt;&lt;/keyword&gt;&lt;/del&gt; function to decide how to handle things. When a keyword can be specified both globally and locally, &lt;del&gt;general--getf&lt;/del&gt; may be useful to get the local value or the global value if there is no local one (e.g. &lt;del&gt;(general--getf edef kargs :predicate)&lt;/del&gt;). If it does not make sense for your keyword to be specified globally, you can add it to =general-extended-def-global-ignore-keywords=. This will prevent your function from being called unless the keyword is specified locally.&lt;/p&gt; &#xA;&lt;p&gt;Although &lt;del&gt;general--get-keymap&lt;/del&gt; and &lt;del&gt;general--getf&lt;/del&gt; are marked internal, they will continue to exist and keep their current functionality; they are intended to be used as helpers for extended definitions.&lt;/p&gt; &#xA;&lt;p&gt;You can rely on =edef= being a valid extended definition plist with a =:def= keyword. Even if the user only specifies a keyword globally and does not explicitly write definitions as plists or explicitly specify =:def=, general will automatically rewrite definitions to be valid plists. Consider the following example: #+begin_src emacs-lisp (general-define-key :predicate &#39;(eobp) &#34;&#xA; &lt;right&gt;&#xA;  &#34; &#39;beginning-of-buffer) ;; call `general-extended-def-:predicate&#39; with this as an edef argument: &#39;(:def beginning-of-buffer)&#xA; &lt;/right&gt;&lt;/p&gt; &#xA;&lt;p&gt;(general-define-key &#34;&#xA; &lt;right&gt;&#xA;  &#34; &#39;(beginning-of-buffer :predicate (eobp))) ;; call `general-extended-def-:predicate&#39; with this as an edef argument: &#39;(:def beginning-of-buffer :predicate (eobp)) #+end_src&#xA; &lt;/right&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the docstring of =general-extended-def-keywords=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User-defined Key Definers In addition to being able to add new keywords for extended definitions, the user can also create their own key definers. These are generally useful when you want to use some package-specific key definer that has some additional functionality (e.g. &lt;del&gt;lispy-define-key&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternate definers can be used by specifying the =:definer= keyword (globally or inside an extended definition): #+begin_src emacs-lisp (general-define-key :definer &#39;my &#34;key&#34; &#39;def &#34;key2&#34; &#39;(def2 :definer &#39;my-other)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The user-created function should be named &lt;del&gt;general-&#xA;  &lt;definer&gt;&#xA;   -define-key&#xA;  &lt;/definer&gt;&lt;/del&gt;. It will be passed =state keymap key def orig-def kargs=. These arguments are the same as for extended definition functions except for =def= and =orig-def=. =def= is the transformed definition in its final form (though the definer may also alter it before binding it). On the other hand, =orig-def= is the original definition but always as an extended definition plist (e.g. =&#39;(:def command)= if the user only specified =&#39;command=).&lt;/p&gt; &#xA;&lt;p&gt;Like extended definitions, custom definers can have any number of helper keyword arguments specified locally in an extended definition or globally in the arguments to &lt;del&gt;general-define-key&lt;/del&gt;. In cases where a keyword can be both global and local, &lt;del&gt;general--getf&lt;/del&gt; is a useful helper function. Since the keymap passed in is a symbol, &lt;del&gt;general--get-keymap&lt;/del&gt; may be useful as well for transforming it to the keymap value. &lt;del&gt;key-description&lt;/del&gt; will also be useful if the underlying definition function uses &lt;del&gt;kbd&lt;/del&gt; (since =key= is the internal representation ready to be passed directly to &lt;del&gt;define-key&lt;/del&gt;; note that &lt;del&gt;key-description&lt;/del&gt; will work with both strings and vectors, including something like =[remap kill-line]=).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;del&gt;general-lispy-define-key&lt;/del&gt; for a basic example.&lt;/p&gt; &#xA;&lt;p&gt;** Wrapping &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt; If you want to use &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt; instead of &lt;del&gt;evil-define-key*&lt;/del&gt;, you can use =:definer &#39;minor-mode=. This will repurpose =:keymaps= to specify minor mode names instead of keymap names: #+begin_src emacs-lisp (general-define-key :definer &#39;minor-mode :states &#39;normal :keymaps &#39;org-src-mode &#34;RET&#34; &#39;org-edit-src-exit) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you are wondering why you might want to use &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt;, see [[https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately][here]].&lt;/p&gt; &#xA;&lt;p&gt;** Lispy Integration/ Wrapping &lt;del&gt;lispy-define-key&lt;/del&gt; To use &lt;del&gt;lispy-define-key&lt;/del&gt; to make the definitions, =:definer &#39;lispy= can be specified. =:lispy-plist= can be specified globally or in an extended definition to set the last argument to &lt;del&gt;lispy-define-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Worf Integration/ Wrapping &lt;del&gt;worf-define-key&lt;/del&gt; To use &lt;del&gt;worf-define-key&lt;/del&gt; to make the definitions, =:definer &#39;worf= can be specified. =:worf-plist= can be specified globally or in an extended definition to set the last argument to &lt;del&gt;worf-define-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Other Provided Definers To use &lt;del&gt;lpy-define-key&lt;/del&gt; to make the definitions, =:definer &#39;lpy= can be specified.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAQ ** How do I prevent =Key sequence starts with non-prefix key= errors? By default, emacs does not support binding a key sequence where a subsequence of the key is already bound in the same keymap (e.g. you cannot bind =C-a a= to a command in a keymap where =C-a= is already bound to a command).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to be able to bind both key sequences and fall back to the shorter key&#39;s command after a timeout or unmatched keypress, see [[#mapping-under-non-prefix-keys][general-key-dispatch]].&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, you should unbind the non-prefix key. For example: #+begin_src emacs-lisp (general-define-key :keymaps &#39;normal :prefix &#34;s&#34; ;; prefix keys are prepended to other keys, so &#34;&#34; refers to the prefix itself &#34;&#34; nil &#34;a&#34; #&#39;def ;; ... ) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you would rather force key definitions to always be made regardless of whether a subsequence of the key is already bound, [[#automatic-key-unbinding][general can automatically unbind keys when necessary to prevent this error]].&lt;/p&gt; &#xA;&lt;p&gt;** Why don&#39;t some evil keybindings work (immediately)? This is a [[https://github.com/emacs-evil/evil/issues/301][known issue for evil]]. To work around this problem, you can use [[#wrapping-evil-define-minor-mode-key][:definer &#39;minor-mode]]. See [[https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately][here]] for more information.&lt;/p&gt; &#xA;&lt;h1&gt;increase max depth&lt;/h1&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;toc-org-max-depth: 4&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>mw10013/emacs-</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/mw10013/emacs-</id>
    <link href="https://github.com/mw10013/emacs-" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>clojure-emacs/clj-refactor.el</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/clojure-emacs/clj-refactor.el</id>
    <link href="https://github.com/clojure-emacs/clj-refactor.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CIDER extension that provides powerful commands for refactoring Clojure code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/clj-refactor&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/clj-refactor-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/clj-refactor&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/clj-refactor-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/clojure-emacs/clj-refactor.el&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/clojure-emacs/clj-refactor.el.svg?style=svg&#34; alt=&#34;circleci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/nFPpynQPME&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;clj-refactor.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;clj-refactor&lt;/code&gt; provides powerful refactoring functionality for Clojure projects. It complements the refactoring functionality you&#39;d find in &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode&#34;&gt;clojure-mode&lt;/a&gt; and &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a small teaser, helping you add a missing libspec:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/clojure-emacs/clj-refactor.el/master/examples/add-missing-libspec.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s highly recommended to install &lt;code&gt;clj-refactor&lt;/code&gt; through &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s available on &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt; and &lt;a href=&#34;http://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install clj-refactor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;clj-refactor)&#xA;&#xA;(defun my-clojure-mode-hook ()&#xA;    (clj-refactor-mode 1)&#xA;    (yas-minor-mode 1) ; for adding require/use/import statements&#xA;    ;; This choice of keybinding leaves cider-macroexpand-1 unbound&#xA;    (cljr-add-keybindings-with-prefix &#34;C-c C-m&#34;))&#xA;&#xA;(add-hook &#39;clojure-mode-hook #&#39;my-clojure-mode-hook)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The more advanced refactorings require our nREPL middleware &lt;a href=&#34;https://github.com/clojure-emacs/refactor-nrepl&#34;&gt;refactor-nrepl&lt;/a&gt;. From version &lt;em&gt;2.2.0&lt;/em&gt; onwards if &lt;code&gt;cider-jack-in&lt;/code&gt; is used it is injected automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;profiles.clj&lt;/code&gt; or &lt;code&gt;profile.boot&lt;/code&gt; don&#39;t need to be modified anymore for the above usecase!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the other hand if a standalone REPL or an embedded nREPL server is used you will need to manually add this dependency (see below).&lt;/p&gt; &#xA;&lt;p&gt;Either in your project&#39;s &lt;code&gt;project.clj&lt;/code&gt; or in the &lt;code&gt;:user&lt;/code&gt; profile found at &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;:plugins [[refactor-nrepl &#34;3.5.2&#34;]&#xA;          [cider/cider-nrepl &#34;0.28.3&#34;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the much longer &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/wiki/installation&#34;&gt;installation&lt;/a&gt; page in the wiki for a less opinionated approach.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;clj-refactor&lt;/code&gt; has quite a few settings you can tweak to change the behavior of various commands. You can read more about that &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/wiki#customization&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;clj-refactor&lt;/th&gt; &#xA;   &lt;th&gt;refactor-nrepl&lt;/th&gt; &#xA;   &lt;th&gt;CIDER&lt;/th&gt; &#xA;   &lt;th&gt;Clojure&lt;/th&gt; &#xA;   &lt;th&gt;Java&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.4.0&lt;/td&gt; &#xA;   &lt;td&gt;2.4.0&lt;/td&gt; &#xA;   &lt;td&gt;0.17, 0.18&lt;/td&gt; &#xA;   &lt;td&gt;1.7+&lt;/td&gt; &#xA;   &lt;td&gt;8+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.5.0&lt;/td&gt; &#xA;   &lt;td&gt;2.5.0&lt;/td&gt; &#xA;   &lt;td&gt;0.24&lt;/td&gt; &#xA;   &lt;td&gt;1.8+&lt;/td&gt; &#xA;   &lt;td&gt;8+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.0.0+&lt;/td&gt; &#xA;   &lt;td&gt;3.0.0+&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;   &lt;td&gt;1.8+&lt;/td&gt; &#xA;   &lt;td&gt;8+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Middleware&lt;/h3&gt; &#xA;&lt;p&gt;Most users will not need to worry about this, but if you wish to configure middleware yourself, the name of the middleware is:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;refactor-nrepl.middleware/wrap-refactor&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Unlike &lt;code&gt;cider-nrepl&lt;/code&gt; which defines many middleware with a handful of related ops, &lt;code&gt;refactor-repl&lt;/code&gt; defines a single middleware which houses all of the provided nREPL ops.&lt;/p&gt; &#xA;&lt;h3&gt;In case &lt;code&gt;refactor-nrepl&lt;/code&gt; is used for advanced (AST-based) refactorings&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/clojure/tools.analyzer&#34;&gt;analyzer&lt;/a&gt; &lt;code&gt;refactor-nrepl&lt;/code&gt; uses needs to eval the code too in order to be able to build the AST we can work with. If that causes side effects like writing files, opening connections to servers, modifying databases, etc. performing certain refactoring functions on your code will do that, too.&lt;/p&gt; &#xA;&lt;p&gt;By default the user is warned about this when an AST dependent feature is invoked. If this warning is an annoyance and the project can be evalled without any risks set &lt;code&gt;cljr-warn-on-eval&lt;/code&gt; to nil so &lt;code&gt;cljr-eagerly-build-asts-on-startup&lt;/code&gt; can take effect.&lt;/p&gt; &#xA;&lt;p&gt;We create ASTs for all the namespaces at REPL start up if &lt;code&gt;cljr-warn-on-eval&lt;/code&gt; is set to nil. If that is not desired set &lt;code&gt;cljr-eagerly-build-asts-on-startup&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in your emacs configuration. AST dependent features at the moment are &lt;code&gt;find usages&lt;/code&gt;, &lt;code&gt;rename symbol&lt;/code&gt;, &lt;code&gt;extract function&lt;/code&gt;, &lt;code&gt;inline symbol&lt;/code&gt;, &lt;code&gt;rename file or dir&lt;/code&gt;, &lt;code&gt;change function signature&lt;/code&gt;, &lt;code&gt;promote function&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All functions in &lt;code&gt;clj-refactor&lt;/code&gt; have a two-letter mnemonic shortcut. E.g. &lt;code&gt;rs&lt;/code&gt; for &lt;code&gt;cljr-rename-symbol&lt;/code&gt;. Given the prefix choice in the example setup you&#39;d call this function by hitting &lt;code&gt;C-c C-m rs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the wiki for a complete &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/wiki&#34;&gt;list of available refactorings&lt;/a&gt;, demonstrations and customization points.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re having trouble remembering the mnemonic shortcuts, check out the &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;hydra&lt;/a&gt; powered popup menus. They are described &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/wiki/Hydra&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;An extensive changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/clj-refactor.el/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Yes, please do. There&#39;s a suite of tests, so remember to add tests for your specific feature, or we might break it later.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find the repo at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/clojure-emacs/clj-refactor.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fetch the test dependencies, install &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;cask&lt;/a&gt; if you haven&#39;t already, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/clj-refactor&#xA;$ cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before submitting a patch, or a pull request, make sure all tests are passing and that your patch is in line with the &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/clj-refactor.el/master/.github/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/graphs/contributors&#34;&gt;everyone&lt;/a&gt; who&#39;s contributed so far!&lt;/p&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;p&gt;Due to clj-refactor&#39;s kinship with CIDER, you can get help for it in most CIDER-related support channels.&lt;/p&gt; &#xA;&lt;h3&gt;Discord&lt;/h3&gt; &#xA;&lt;p&gt;CIDER has its own Discord chat server, created by CIDER&#39;s author Bozhidar. You can join the Discord server &lt;a href=&#34;https://discord.com/invite/nFPpynQPME&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Slack&lt;/h3&gt; &#xA;&lt;p&gt;CIDER has an official &lt;a href=&#34;https://clojurians.slack.com/&#34;&gt;Clojurians Slack&lt;/a&gt; - &lt;code&gt;#cider&lt;/code&gt;. The channel is very active and is a great way to get a handle on some of the maintainers and interact with other CIDER/clj-refactor users. If you need an invite you can go &lt;a href=&#34;http://clojurians.net/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also another channel named &lt;code&gt;#emacs&lt;/code&gt; for generic Emacs discussions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2012-2014 Magnar Sveen Copyright © 2014-2022 Magnar Sveen, Lars Andersen, Benedek Fazekas, Bozhidar Batsov&lt;/p&gt; &#xA;&lt;p&gt;Author: Magnar Sveen &lt;a href=&#34;mailto:magnars@gmail.com&#34;&gt;magnars@gmail.com&lt;/a&gt; Lars Andersen &lt;a href=&#34;mailto:expez@expez.com&#34;&gt;expez@expez.com&lt;/a&gt; Benedek Fazekas Keywords: convenience, clojure, cider&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-tree-sitter/elisp-tree-sitter</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/emacs-tree-sitter/elisp-tree-sitter</id>
    <link href="https://github.com/emacs-tree-sitter/elisp-tree-sitter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tree-sitter bindings for Emacs Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ELisp Tree-sitter &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/elisp-tree-sitter/master/doc/static/img/emacs-tree-sitter-96x96.png&#34; align=&#34;left&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://emacs-tree-sitter.github.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-latest-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/emacs-tree-sitter/elisp-tree-sitter/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/emacs-tree-sitter/elisp-tree-sitter/_apis/build/status/ci?branchName=master&amp;amp;label=build&amp;amp;api-version=6.0-preview.1&#34; alt=&#34;Azure Pipelines&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an Emacs Lisp binding for &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;tree-sitter&lt;/a&gt;, an incremental parsing library. It requires Emacs 25.1 or above, built with dynamic module support.&lt;/p&gt; &#xA;&lt;p&gt;It aims to be the foundation for a new breed of Emacs packages that understand code structurally. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Faster, fine-grained code highlighting.&lt;/li&gt; &#xA; &lt;li&gt;More flexible code folding.&lt;/li&gt; &#xA; &lt;li&gt;Structural editing (like Paredit, or even better) for non-Lisp code.&lt;/li&gt; &#xA; &lt;li&gt;More informative indexing for imenu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The author of tree-sitter articulated its merits a lot better in this &lt;a href=&#34;https://www.thestrangeloop.com/2018/tree-sitter---a-new-parsing-system-for-programming-tools.html&#34;&gt;Strange Loop talk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://emacs-tree-sitter.github.io/installation/&#34;&gt;installation section&lt;/a&gt; in the documentation.&lt;/p&gt; &#xA;&lt;p&gt;If you want to hack on &lt;code&gt;emacs-tree-sitter&lt;/code&gt; itself, see the next section instead.&lt;/p&gt; &#xA;&lt;h2&gt;Setup for Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On Windows, use Powershell instead of Bash or cmd.exe.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo with the &lt;code&gt;--recursive&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;Add 3 of its directories to &lt;code&gt;load-path&lt;/code&gt;: &lt;code&gt;core/&lt;/code&gt;, &lt;code&gt;lisp/&lt;/code&gt; and &lt;code&gt;langs/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://cask.readthedocs.io&#34;&gt;cask&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/setup&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to hack on the high-level features (in Lisp) only:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make changes to the &lt;code&gt;.el&lt;/code&gt; files.&lt;/li&gt; &#xA; &lt;li&gt;Add tests to &lt;code&gt;tree-sitter-tests.el&lt;/code&gt; and run them with &lt;code&gt;bin/test&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to build additional (or all) grammars from source, or work on the core dynamic module, see the next 2 sections.&lt;/p&gt; &#xA;&lt;h3&gt;Building grammars from source&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are only interested in building the grammar binaries, not the dynamic module, check out &lt;a href=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs#building-grammars-from-source&#34;&gt;tree-sitter-langs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install NodeJS. It is needed to generate the grammar code from the JavaScript DSL. The recommended tool to manage NodeJS is &lt;a href=&#34;https://volta.sh/&#34;&gt;volta&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/creating-parsers#installation&#34;&gt;tree-sitter CLI tool&lt;/a&gt;: (Its binary can also be downloaded directly from &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter/releases&#34;&gt;GitHub&lt;/a&gt;.) &lt;strong&gt;Note: version 0.20+ cannot be used, as they introduced &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter/pull/1157&#34;&gt;a breaking change&lt;/a&gt; in binary storage location.&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For yarn user&#xA;yarn global add tree-sitter-cli@0.19.3&#xA;&#xA;# For npm user&#xA;npm install -g tree-sitter-cli@0.19.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;langs/script/compile&lt;/code&gt;. For example: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;langs/script/compile rust&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Working on the dynamic module&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://rustup.rs/&#34;&gt;Rust toolchain&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Test: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Continuously rebuild and test on change (requires &lt;a href=&#34;https://github.com/passcod/cargo-watch&#34;&gt;cargo-watch&lt;/a&gt;): &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test watch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To test against a different version of Emacs, set the environment variable &lt;code&gt;EMACS&lt;/code&gt; (e.g. &lt;code&gt;EMACS=/snap/bin/emacs make test&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tree-sitter in Emacs&#39;s core: &lt;a href=&#34;https://github.com/casouri/emacs&#34;&gt;https://github.com/casouri/emacs&lt;/a&gt; (the future)&lt;/li&gt; &#xA; &lt;li&gt;Binding through C instead of Rust: &lt;a href=&#34;https://github.com/karlotness/tree-sitter.el&#34;&gt;https://github.com/karlotness/tree-sitter.el&lt;/a&gt; (dormant)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed. Please take a look at the &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter/issues&#34;&gt;issue list&lt;/a&gt; for ideas, or &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter/issues/new&#34;&gt;create a new issue&lt;/a&gt; to describe any idea you have for improvement.&lt;/p&gt; &#xA;&lt;p&gt;For language-specific issues/features, please check out &lt;a href=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs&#34;&gt;tree-sitter-langs&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;Show respect and empathy towards others. Both technical empathy and general empathy are highly valued.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>clojure-emacs/cider</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/clojure-emacs/cider</id>
    <link href="https://github.com/clojure-emacs/cider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Clojure Interactive Development Environment that Rocks for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.github.com/clojure-emacs/cider/master/logo/cider-logo-w640.png&#34; alt=&#34;CIDER Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/cider&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/cider-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/cider&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/cider-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/clojure-emacs/cider&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/clojure-emacs/cider.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/clojure-emacs/cider/actions/workflows/spell_checking.yml&#34;&gt;&lt;img src=&#34;https://github.com/clojure-emacs/cider/actions/workflows/spell_checking.yml/badge.svg?sanitize=true&#34; alt=&#34;Spell-check Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/nFPpynQPME&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://clojurians.net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%23cider-green.svg?style=flat&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CIDER is the &lt;strong&gt;C&lt;/strong&gt;lojure(Script) &lt;strong&gt;I&lt;/strong&gt;nteractive &lt;strong&gt;D&lt;/strong&gt;evelopment &lt;strong&gt;E&lt;/strong&gt;nvironment that &lt;strong&gt;R&lt;/strong&gt;ocks!&lt;/p&gt; &#xA;&lt;p&gt;CIDER extends Emacs with support for &lt;a href=&#34;https://docs.cider.mx/cider/usage/interactive_programming.html&#34;&gt;interactive programming&lt;/a&gt; in Clojure. The features are centered around &lt;code&gt;cider-mode&lt;/code&gt;, an Emacs minor-mode that complements &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode&#34;&gt;clojure-mode&lt;/a&gt;. While &lt;code&gt;clojure-mode&lt;/code&gt; supports editing Clojure source files, &lt;code&gt;cider-mode&lt;/code&gt; adds support for interacting with a running Clojure process for compilation, code completion, debugging, definition and documentation lookup, running tests and so on.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/cider/master/#open-collective-backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backers/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/cider/master/#open-collective-sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsors/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=GRQKNBM6P8VRQ&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;Paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bozhidar (a.k.a. Bug, CIDER&#39;s primary author/maintainer) has spent countless hours working on CIDER and the &lt;a href=&#34;https://metaredux.com/posts/2018/11/09/ciders-orchard-the-heart.html&#34;&gt;numerous related projects&lt;/a&gt;. That&#39;s a lot of work and not all of it is fun!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please consider &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/cider/master/#funding&#34;&gt;supporting financially CIDER&#39;s ongoing development&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The instructions that follow are meant to get you from zero to a running CIDER REPL in under 5 minutes. See the &lt;a href=&#34;https://docs.cider.mx&#34;&gt;online documentation&lt;/a&gt; for (way) more details.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way to install CIDER is via &lt;code&gt;package.el&lt;/code&gt; - the built-in package manager in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;CIDER is available on the two major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Provided you&#39;ve enabled one of them in your Emacs setup, you can install CIDER with the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt; &lt;code&gt;cider&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Launch an nREPL server and client from Emacs&lt;/h3&gt; &#xA;&lt;p&gt;Simply open in Emacs a file belonging to your &lt;code&gt;lein&lt;/code&gt;, &lt;code&gt;tools.deps&lt;/code&gt; or &lt;code&gt;boot&lt;/code&gt; project (like &lt;code&gt;foo.clj&lt;/code&gt;) and type &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;cider-jack-in&lt;/code&gt;. This will start an nREPL server with all the project dependencies loaded in and CIDER will automatically connect to it.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can use &lt;kbd&gt;C-u M-x&lt;/kbd&gt; &lt;code&gt;cider-jack-in&lt;/code&gt; to specify the path to a Clojure project, without having to visit any file in it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; In Clojure(Script) buffers the command &lt;code&gt;cider-jack-in&lt;/code&gt; is bound to &lt;kbd&gt;C-c C-x (C-)j&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Connect to a running nREPL server&lt;/h3&gt; &#xA;&lt;p&gt;You can go to your project&#39;s directory in a terminal and type there (assuming you&#39;re using Leiningen that is):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ lein repl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with Boot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ boot repl -s wait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can start nREPL either manually or by the facilities provided by your project&#39;s build tool (&lt;code&gt;tools.deps&lt;/code&gt;, Gradle, Maven, etc).&lt;/p&gt; &#xA;&lt;p&gt;After you get your nREPL server running go back to Emacs. Typing there &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;cider-connect&lt;/code&gt; will allow you to connect to the running nREPL server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; In Clojure(Script) buffers the command &lt;code&gt;cider-connect&lt;/code&gt; is bound to &lt;kbd&gt;C-c C-x (C-)c (C-)j&lt;/kbd&gt; and the command &lt;code&gt;cider-connect-cljs&lt;/code&gt; is bound to &lt;kbd&gt;C-c C-x (C-)c (C-)s&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Diving Deeper&lt;/h2&gt; &#xA;&lt;p&gt;CIDER packs a ton of functionality and you really want to be familiar with it, so you can fully empower your workflow. The best way to get acquainted with all available features is to go over the entire &lt;a href=&#34;https://docs.cider.mx/&#34;&gt;CIDER manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re into video lessons, you might also check out this &lt;a href=&#34;https://www.youtube.com/watch?v=aYA4AAjLfT0&#34;&gt;intro to CIDER demo&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Reference Card&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll find all of CIDER&#39;s essential commands and their keybindings in its one-page printable &lt;a href=&#34;https://github.com/clojure-emacs/cider/raw/master/refcard/cider-refcard.pdf&#34;&gt;quick reference card&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;New CIDER users might benefit from keeping a copy close to their keyboard.&lt;/p&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;p&gt;Start with CIDER&#39;s &lt;a href=&#34;https://github.com/clojure-emacs/cider/discussions&#34;&gt;discussions board&lt;/a&gt;. If it doesn&#39;t get the job done consider some of the other available &lt;a href=&#34;https://docs.cider.mx/cider/about/support.html&#34;&gt;support channels&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;An extensive changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/cider/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;h3&gt;The Core Team&lt;/h3&gt; &#xA;&lt;p&gt;The direction of the project is being stewarded by the CIDER core team. This group of long-term contributors manage releases, evaluate pull-requests, and does a lot of the groundwork on major new features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov&#34;&gt;Bozhidar Batsov&lt;/a&gt; (author &amp;amp; head maintainer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vspinu&#34;&gt;Vitalie Spinu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cichli&#34;&gt;Michael Griffiths&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/expez&#34;&gt;Lars Andersen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CIDER Alumni&lt;/h3&gt; &#xA;&lt;p&gt;In addition, we&#39;d like to extend a special thanks the following retired CIDER core team members. Lovingly known as The Alumni:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kingtim&#34;&gt;Tim King&lt;/a&gt; (original author)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/technomancy&#34;&gt;Phil Hagelberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hugoduncan&#34;&gt;Hugo Duncan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purcell&#34;&gt;Steve Purcell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/malabarba&#34;&gt;Artur Malabarba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeffvalk&#34;&gt;Jeff Valk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release policy&lt;/h2&gt; &#xA;&lt;p&gt;We’re following &lt;a href=&#34;http://semver.org/&#34;&gt;SemVer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can read more on the subject &lt;a href=&#34;https://docs.cider.mx/cider/about/release_policy.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;CIDER&#39;s logo was created by &lt;a href=&#34;https://github.com/tapeinosyne&#34;&gt;@tapeinosyne&lt;/a&gt;. You can find the logo in various formats &lt;a href=&#34;https://github.com/clojure-emacs/cider/tree/master/logo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The logo is licensed under a &lt;a href=&#34;http://creativecommons.org/licenses/by-nc/4.0/deed.en_GB&#34;&gt;Creative Commons Attribution-NonCommercial 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Homepage&lt;/h2&gt; &#xA;&lt;p&gt;CIDER&#39;s homepage &lt;a href=&#34;https://cider.mx&#34;&gt;https://cider.mx&lt;/a&gt; is in the &lt;code&gt;gh-pages&lt;/code&gt; branch of this repository and is deployed automatically when changes are made to it.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s just a single &lt;code&gt;index.html&lt;/code&gt; file and a bit of Bootstrap 4. Contributions to it are very welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;While CIDER is free software and will always be, the project would benefit immensely from some funding. Raising a monthly budget of a couple of thousand dollars would make it possible to pay people to work on certain complex features, fund other development related stuff (e.g. hardware, conference trips) and so on. Raising a monthly budget of over $5000 would open the possibility of someone working full-time on the project which would speed up the pace of development significantly.&lt;/p&gt; &#xA;&lt;p&gt;We welcome both individual and corporate sponsors! We also offer a wide array of funding channels to account for your preferences (although currently &lt;a href=&#34;https://opencollective.com/cider&#34;&gt;Open Collective&lt;/a&gt; is our preferred funding platform).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re working in a company that&#39;s making significant use of CIDER we&#39;d appreciate it if you suggest to your company to become a CIDER sponsor.&lt;/p&gt; &#xA;&lt;p&gt;You can support the development of CIDER, &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode&#34;&gt;clojure-mode&lt;/a&gt; and &lt;a href=&#34;https://github.com/clojure-emacs/inf-clojure&#34;&gt;inf-clojure&lt;/a&gt; via &lt;a href=&#34;https://opencollective.com/cider&#34;&gt;Open Collective&lt;/a&gt;, &lt;a href=&#34;https://github.com/sponsors/bbatsov&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;Patreon&lt;/a&gt; and &lt;a href=&#34;https://www.paypal.me/bbatsov&#34;&gt;PayPal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Open Collective Backers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/cider/backer/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open Collective Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Become a sponsor and get your logo on our README on Github with a link to your site. [&lt;a href=&#34;https://opencollective.com/cider#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/cider/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;CIDER is distributed under the GNU General Public License, version 3.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2012-2022 Bozhidar Batsov, Artur Malabarba, Tim King, Phil Hagelberg and &lt;a href=&#34;https://github.com/clojure-emacs/cider/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kiwanami/emacs-ctable</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/kiwanami/emacs-ctable</id>
    <link href="https://github.com/kiwanami/emacs-ctable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Table Component for elisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Table Component for elisp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ctable.el&lt;/code&gt; is a table component for emacs lisp. Emacs lisp programs can display a nice table view from an abstract data model. The many emacs programs have the code for displaying table views, such as &lt;code&gt;dired&lt;/code&gt;, &lt;code&gt;list-process&lt;/code&gt;, &lt;code&gt;buffer-list&lt;/code&gt; and so on. So, ctable.el would provide functions and a table framework for the table views.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To use this program, locate this file to load-path directory, and add the following code to your program code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;ctable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;h2&gt;Hello World&lt;/h2&gt; &#xA;&lt;p&gt;Giving a list of the rows list to the function `ctbl:popup-table-buffer-easy&#39;, a simple table buffer is popped out.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ctbl:popup-table-buffer-easy &#xA; &#39;((1 2 3 4) (5 6 7 8) (9 10 11 12)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the result image. The header titles are generated automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/sample-1-1.png&#34; alt=&#34;sample-1-1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Giving two lists, the latter list is displayed at header titles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ctbl:popup-table-buffer-easy &#xA; &#39;((1 2 3 4) (5 6 7 8) (9 10 11 12))&#xA; &#39;(aaa bbb ccc ddd))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the result image.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/sample-1-2.png&#34; alt=&#34;sample-1-2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic Use&lt;/h2&gt; &#xA;&lt;p&gt;The objects of ctable are designed by the MVC pattern. Programmers can customize ctable objects to use rich table views in the applications easily.&lt;/p&gt; &#xA;&lt;p&gt;First, one defines the column model and data model for the user application. The former model defines how the column should be display, the latter one does the contents to display.&lt;/p&gt; &#xA;&lt;p&gt;Second, one chooses builds the view component with the models.&lt;/p&gt; &#xA;&lt;p&gt;Here is an illustration for the object relations in this basic case.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/normal_use.png&#34; alt=&#34;Object relations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample code for the model and view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(let* ((column-model ; column model&#xA;        (list (make-ctbl:cmodel&#xA;              :title &#34;A&#34; :sorter &#39;ctbl:sort-number-lessp&#xA;              :min-width 5 :align &#39;right)&#xA;              (make-ctbl:cmodel&#xA;               :title &#34;Title&#34; :align &#39;center&#xA;               :sorter (lambda (a b) (ctbl:sort-number-lessp (length a) (length b))))&#xA;              (make-ctbl:cmodel&#xA;               :title &#34;Comment&#34; :align &#39;left)))&#xA;       (data&#xA;        &#39;((1  &#34;Bon Tanaka&#34; &#34;8 Year Curry.&#34; &#39;a)&#xA;          (2  &#34;Bon Tanaka&#34; &#34;Nan-ban Curry.&#34; &#39;b)&#xA;          (3  &#34;Bon Tanaka&#34; &#34;Half Curry.&#34; &#39;c)&#xA;          (4  &#34;Bon Tanaka&#34; &#34;Katsu Curry.&#34; &#39;d)&#xA;          (5  &#34;Bon Tanaka&#34; &#34;Gyu-don.&#34; &#39;e)&#xA;          (6  &#34;CoCo Ichi&#34;  &#34;Beaf Curry.&#34; &#39;f)&#xA;          (7  &#34;CoCo Ichi&#34;  &#34;Poke Curry.&#34; &#39;g)&#xA;          (8  &#34;CoCo Ichi&#34;  &#34;Yasai Curry.&#34; &#39;h)&#xA;          (9  &#34;Berkley&#34;    &#34;Hamburger Curry.&#34; &#39;i)&#xA;          (10 &#34;Berkley&#34;    &#34;Lunch set.&#34; &#39;j)&#xA;          (11 &#34;Berkley&#34;    &#34;Coffee.&#34; k)))&#xA;       (model ; data model&#xA;          (make-ctbl:model&#xA;           :column-model column-model :data data))&#xA;       (component ; ctable component&#xA;        (ctbl:create-table-component-buffer&#xA;         :model model)))&#xA;  (pop-to-buffer (ctbl:cp-get-buffer component)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the result image.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/sample-2-1.png&#34; alt=&#34;sample-2-1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The models have further options and functions to customize the display and behavior, such as column width, text alignment, sorting and so on. (See Model section)&lt;/p&gt; &#xA;&lt;p&gt;The key-binding on the table can be customized by the keymap object in the usual way. Then, the user program implements the custom function which refers the focused cell. (See Key Bindings section)&lt;/p&gt; &#xA;&lt;p&gt;The ctable framework provides some hooks to notify the usual events: click, selection change and update view. (See Event Handling section)&lt;/p&gt; &#xA;&lt;p&gt;The appearance of the table can be customized, such as foreground and background color, tabular lines. (See Display Parameter section)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/objects.png&#34; alt=&#34;ctable components&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sample Codes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;samples/simple.el &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sample codes mentioned above.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;samples/large-table.el &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;large data and async-model samples.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;samples/direx-ctable.el &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;directory tree and table list in collaboration with direx.el&lt;/li&gt; &#xA;   &lt;li&gt;ref: &lt;a href=&#34;https://github.com/m2ym/direx-el&#34;&gt;https://github.com/m2ym/direx-el&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/direx-ctable.png&#34; alt=&#34;direx-ctable image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Advanced Topics&lt;/h1&gt; &#xA;&lt;h2&gt;Column Model&lt;/h2&gt; &#xA;&lt;p&gt;The struct &lt;code&gt;ctbl:cmodel&lt;/code&gt; is a data type defined by cl-defstruct. This model defines how to display the content along with the each column.&lt;/p&gt; &#xA;&lt;p&gt;Here is the details of the slot members of &lt;code&gt;ctbl:cmodel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;slot name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;[required]&lt;/strong&gt; column header title string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sorter&lt;/td&gt; &#xA;   &lt;td&gt;sorting function which transforms a cell value into sort value. It should return -1, 0 and 1. If nil, &lt;code&gt;ctbl:sort-string-lessp&lt;/code&gt; is used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;align&lt;/td&gt; &#xA;   &lt;td&gt;text alignment: &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;center&lt;/code&gt;. (default: &lt;code&gt;right&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;max-width&lt;/td&gt; &#xA;   &lt;td&gt;maximum width of the column. if &lt;code&gt;nil&lt;/code&gt;, no constraint. (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;min-width&lt;/td&gt; &#xA;   &lt;td&gt;minimum width of the column. if &lt;code&gt;nil&lt;/code&gt;, no constraint. (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;click-hooks&lt;/td&gt; &#xA;   &lt;td&gt;header click hook. a list of functions with two arguments the &lt;code&gt;ctbl:component&lt;/code&gt; object and the &lt;code&gt;ctbl:cmodel&lt;/code&gt; one. (default: &#39;(ctbl:cmodel-sort-action))&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Data Model&lt;/h2&gt; &#xA;&lt;p&gt;The struct &lt;code&gt;ctbl:model&lt;/code&gt; is a data type defined by cl-defstruct. This model defines contents to display with column models.&lt;/p&gt; &#xA;&lt;p&gt;Here is the details of the slot members of &lt;code&gt;ctbl:model&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;slot name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;[required]&lt;/strong&gt; Table data as a list of rows. A row contains a list of columns. Or, an instance of &lt;code&gt;ctbl:async-model&lt;/code&gt;. (See the async-model section for details.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;column-model&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;[required]&lt;/strong&gt; A list of column models.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sort-state&lt;/td&gt; &#xA;   &lt;td&gt;The current sort order as a list of column indexes. The index number of the first column is 1. If the index is negative, the sort order is reversed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;The keymap &lt;code&gt;ctbl:table-mode-map&lt;/code&gt; is used as a default keymap on the table. This keymap is a customization variable for the end users, so it should not be modified by applications.&lt;/p&gt; &#xA;&lt;p&gt;The component functions &lt;code&gt;ctbl:create-table-component-buffer&lt;/code&gt; and &lt;code&gt;ctbl:open-table-buffer&lt;/code&gt; receive a &lt;code&gt;custom-map&lt;/code&gt; argument to override the keymap on the table buffer. Because the functions connect the given keymap to the default keymap &lt;code&gt;ctbl:table-mode-map&lt;/code&gt; as parent, application program may define the overriding entries.&lt;/p&gt; &#xA;&lt;p&gt;The component function &lt;code&gt;ctbl:create-table-component-region&lt;/code&gt; receives a &lt;code&gt;keymap&lt;/code&gt; argument to define the keymap on the each characters in the table region.&lt;/p&gt; &#xA;&lt;p&gt;The ctable framework provides some hooks for the usual event cases. In such cases, the application should use the event handlers, instead of defining the keymap. See the next section.&lt;/p&gt; &#xA;&lt;h2&gt;Event Handling&lt;/h2&gt; &#xA;&lt;p&gt;The ctable provides some hooks for the particular events: clicking, selection changing and updating view. The application program can implement some actions without defining keymaps.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample code for the click action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ctbl:cp-add-click-hook &#xA; cp (lambda () (message &#34;CTable : Click Hook [%S]&#34; &#xA;        (ctbl:cp-get-selected-data-row cp))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where, &lt;code&gt;cp&lt;/code&gt; is an instance of &lt;code&gt;ctbl:component&lt;/code&gt;. The function &lt;code&gt;ctbl:cp-add-click-hook&lt;/code&gt; adds the given function as an event handler to the component instance. Here are event handler functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-add-click-hook&lt;/code&gt; : on click&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-add-selection-change-hook&lt;/code&gt; : on selection change&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-add-update-hook&lt;/code&gt; : on update view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The function &lt;code&gt;ctbl:cp-get-selected-data-row&lt;/code&gt; returns a row object which is defined by the model. Some component access functions are useful for the action handlers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-get-selected&lt;/code&gt; : returns a Cell-ID object which is currently selected, such as (1 . 2).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-get-selected-data-row&lt;/code&gt; : returns a row data which is currently selected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-get-selected-data-cell&lt;/code&gt; : return a cell data which is currently selected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Display Parameter&lt;/h2&gt; &#xA;&lt;p&gt;The ctable renders tabular form with many rendering parameters. The parameters are set at the slot members of the cl-defstruct &lt;code&gt;ctbl:param&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To customize the parameters, one should copy the default parameters like &lt;code&gt;(copy-ctbl:param ctbl:default-rendering-param)&lt;/code&gt; and set parameters with setter functions. Then, at the building ctable component instance, this parameter object is given by the &lt;code&gt;:param&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample code for parameter customize.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (let ((param (copy-ctbl:param ctbl:default-rendering-param)))&#xA;    (setf (ctbl:param-fixed-header param) t)&#xA;    (setf (ctbl:param-hline-colors param)&#xA;          &#39;((0 . &#34;#00000&#34;) (1 . &#34;#909090&#34;) (-1 . &#34;#ff0000&#34;) (t . &#34;#00ff00&#34;)))&#xA;    (setf (ctbl:param-draw-hlines param)&#xA;          (lambda (model row-index)&#xA;            (cond ((memq row-index &#39;(0 1 -1)) t)&#xA;                  (t (= 0 (% (1- row-index) 5))))))&#xA;    (setf (ctbl:param-bg-colors param)&#xA;          (lambda (model row-id col-id str)&#xA;            (cond ((string-match &#34;CoCo&#34; str) &#34;LightPink&#34;)&#xA;                  ((= 0 (% (1- row-index) 2)) &#34;Darkseagreen1&#34;)&#xA;                  (t nil))))&#xA;    ...&#xA;    (setq cp (ctbl:create-table-component-buffer&#xA;              :model model :param param))&#xA;    ...&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the details of the slot members of &lt;code&gt;ctbl:param&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;slot name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;display-header&lt;/td&gt; &#xA;   &lt;td&gt;if t, display the header row with column models.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fixed-header&lt;/td&gt; &#xA;   &lt;td&gt;if t, display the header row in the header-line area.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bg-colors&lt;/td&gt; &#xA;   &lt;td&gt;&#39;(((row-id . col-id) . colorstr) (t . default-color) ... ) or (lambda (model row-id col-id) colorstr or nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vline-colors&lt;/td&gt; &#xA;   &lt;td&gt;&#34;#RRGGBB&#34; or &#39;((0 . colorstr) (t . default-color)) or (lambda (model col-index) colorstr or nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hline-colors&lt;/td&gt; &#xA;   &lt;td&gt;&#34;#RRGGBB&#34; or &#39;((0 . colorstr) (t . default-color)) or (lambda (model row-index) colorstr or nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;draw-vlines&lt;/td&gt; &#xA;   &lt;td&gt;&#39;all or &#39;(0 1 2 .. -1) or (lambda (model col-index) t or nil )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;draw-hlines&lt;/td&gt; &#xA;   &lt;td&gt;&#39;all or &#39;(0 1 2 .. -1) or (lambda (model row-index) t or nil )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vertical-line&lt;/td&gt; &#xA;   &lt;td&gt;vertical line character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;horizontal-line&lt;/td&gt; &#xA;   &lt;td&gt;horizontal line character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-top-corner&lt;/td&gt; &#xA;   &lt;td&gt;corner character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-top-corner&lt;/td&gt; &#xA;   &lt;td&gt;corner character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-bottom-corner&lt;/td&gt; &#xA;   &lt;td&gt;corner character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-bottom-corner&lt;/td&gt; &#xA;   &lt;td&gt;corner character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;top-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bottom-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cross-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;View Components&lt;/h2&gt; &#xA;&lt;p&gt;Ctable has three destination components to display the tabular data.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Independent buffer&lt;/li&gt; &#xA; &lt;li&gt;Region in the other buffer&lt;/li&gt; &#xA; &lt;li&gt;Text output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Buffer&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;buffer&#39; destination displays the tabular view as ordinary Emacs applications do.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;ctbl:open-table-buffer&lt;/code&gt; makes a new ctable buffer and displays it by &lt;code&gt;switch-to-buffer&lt;/code&gt;. The major mode of the ctable buffer is &lt;code&gt;ctbl:table-mode&lt;/code&gt; and the keymap &lt;code&gt;ctbl:table-mode-map&lt;/code&gt; is bound.&lt;/p&gt; &#xA;&lt;p&gt;Using this destination with the &lt;code&gt;fixed-header&lt;/code&gt; parameter, the application can use the fixed column header.&lt;/p&gt; &#xA;&lt;p&gt;This destination is easy to use for applications and users, because the buffer is usual application boundary and users know how to use buffers.&lt;/p&gt; &#xA;&lt;h3&gt;Region&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;Region&#39; destination embeds the tabular view in the buffer which is managed by the other applications. This destination can give the other applications a nice tabular view.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s try a simple demonstration. Evaluate this code in your scratch buffer.&lt;/p&gt; &#xA;&lt;p&gt;Region destination example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Evaluate this code in the scratch buffer&#xA;(require &#39;ctable)&#xA;(ctbl:create-table-component-region&#xA;  :model (ctbl:make-model-from-list&#xA;           &#39;((1 2 3 4) (5 6 7 8) (9 10 11 12))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the tabular view will be embedded in the scratch buffer. You can navigate the ctable view in the buffer. Undoing for the some times, you can remove the ctable view.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/region-scratch.png&#34; alt=&#34;ctable in scratch buffer&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Because this destination never interacts anything out of the region and has its own key-binds as a text property, users can easily embed a tabular view in the other applications.&lt;/p&gt; &#xA;&lt;h3&gt;Text&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;text&#39; destination generates just a text which represent ctable view. The function &lt;code&gt;ctbl:get-table-text&lt;/code&gt; returns the text.&lt;/p&gt; &#xA;&lt;h3&gt;Column Width&lt;/h3&gt; &#xA;&lt;p&gt;TODO...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unlimited mode&lt;/li&gt; &#xA; &lt;li&gt;Limited mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;expand strategy&lt;/li&gt; &#xA;   &lt;li&gt;shrink strategy&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ctable Component&lt;/h2&gt; &#xA;&lt;p&gt;An instance of struct &lt;code&gt;ctbl:component&lt;/code&gt; manages all ctable states, such as models, view, event handlers and some internal status. If an application wants to interact a ctable component, the application should hold the instance and access the component through the following ctable component interface.&lt;/p&gt; &#xA;&lt;h3&gt;Getting ctbl:component Instance&lt;/h3&gt; &#xA;&lt;p&gt;To access ctable component, the application program should bring an instance of &lt;code&gt;ctbl:component&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The instance of the ctable component is stored at following places:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;buffer&lt;/code&gt; view: the buffer-local variable &lt;code&gt;ctbl:component&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region&lt;/code&gt; view: the text property &lt;code&gt;ctbl:component&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt; view: N/A&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Calling the utility function &lt;code&gt;ctbl:cp-get-component&lt;/code&gt;, one can obtain the ctable instance at the appropriate places. The stateless functions, such as simple event handler functions, can use this function to get the instance.&lt;/p&gt; &#xA;&lt;p&gt;The applications those have the state-full operations, however, should hold their own ctable instance for the safety object reference.&lt;/p&gt; &#xA;&lt;h3&gt;Access Internal Objects&lt;/h3&gt; &#xA;&lt;p&gt;The application can get some internal objects.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;model object : &lt;code&gt;ctbl:cp-get-model&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;parameter object : &lt;code&gt;ctbl:cp-get-param&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;buffer object : &lt;code&gt;ctbl:cp-get-buffer&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cursor Position&lt;/h3&gt; &#xA;&lt;p&gt;The application can get the current cursor position and modify the position.&lt;/p&gt; &#xA;&lt;p&gt;Here, &lt;em&gt;cell-id&lt;/em&gt; is an object that represents the physical cursor position. &lt;em&gt;cell-id&lt;/em&gt; is a cons pair which consists of positive integers: &lt;code&gt;(row . column)&lt;/code&gt;. The index number begins from zero. One can access the values with &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;getting cell-id : &lt;code&gt;ctbl:cp-get-selected&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;moving cursor to cell-id : &lt;code&gt;ctbl:cp-set-selected-cell&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the position which is indicated by &lt;em&gt;cell-id&lt;/em&gt; is not the same as the position of the model&#39;s row. Because the ctable component changes the row order with sorting by clicking header column, the rows order is not corresponding to the model&#39;s ones.&lt;/p&gt; &#xA;&lt;p&gt;If the application need to get the selected row&#39;s data, following functions are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;current row data : &lt;code&gt;ctbl:cp-get-selected-data-row&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;current cell data : &lt;code&gt;ctbl:cp-get-selected-data-cell&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modifying Model and Update Table View&lt;/h3&gt; &#xA;&lt;p&gt;The application can update the table contents.&lt;/p&gt; &#xA;&lt;p&gt;Creating a new model instance and setting it to the component with &lt;code&gt;ctbl:cp-set-model&lt;/code&gt;, the component replaces the model and refresh the buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;replace model instance and update view : &lt;code&gt;ctbl:cp-set-model&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Another way is updating model instance destructively and refresh the buffer with &lt;code&gt;ctbl:cp-update&lt;/code&gt;. If the modification of model data is little, this way is lightweight in the viewpoint of calculation and memory usage. However, such the destructive modification complicates the application logic.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;update view with current model state : &lt;code&gt;ctbl:cp-update&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Async-Model and Incremental Update&lt;/h2&gt; &#xA;&lt;p&gt;Ctable has incremental data interface which enables the application delay rendering or append subsequent data with the user action. This mechanism can avoid Emacs freezing during visualizing a large amount of data.&lt;/p&gt; &#xA;&lt;h3&gt;Case 1: Huge Data&lt;/h3&gt; &#xA;&lt;p&gt;When a model which consists of a large number of rows (more than ~1000) is given to the synchronous interface mentioned above, Emacs blocks UI response until rendering is completed. Because the text rendering on the buffer is the heaviest task in ctable, it is effective that the application displays a front part of data and delays the rendering of rest data. In the most cases, users are interesting in the such first page of the large data.&lt;/p&gt; &#xA;&lt;p&gt;Just wrapping data in async-model via &lt;code&gt;ctbl:async-model-wrapper&lt;/code&gt;, the application can use this interface.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (let* ((large-data ; large data : 4000 rows&#xA;          (loop with lim = 4000&#xA;                for i from 0 upto lim&#xA;                for d = (/ (random 1000) 1000.0)&#xA;                collect &#xA;                (list i d (exp (- (/ i 1.0 lim))) (exp (* (- (/ i 1.0 lim)) d)))))&#xA;         (async-model ; wrapping a large data in async-data-model&#xA;          (ctbl:async-model-wrapper large-data))&#xA;         (cp ; just build a component &#xA;          (ctbl:create-table-component-buffer&#xA;           :model&#xA;           (make-ctbl:model&#xA;            :column-model&#xA;            (list (make-ctbl:cmodel :title &#34;row&#34;)&#xA;                  (make-ctbl:cmodel :title &#34;delta&#34;)&#xA;                  (make-ctbl:cmodel :title &#34;exp&#34;)&#xA;                  (make-ctbl:cmodel :title &#34;exp-delta&#34;))&#xA;            :data async-model))))&#xA;    (pop-to-buffer (ctbl:cp-get-buffer cp)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is the result image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/async-wrapper.png&#34; alt=&#34;async data wrapper&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Case 2: Asynchronous Retrieving&lt;/h3&gt; &#xA;&lt;p&gt;In the case of retrieving large data asynchronously from an another process or remote servers, the application needs to append retrieved partial data without blocking UI response nor updating whole table view.&lt;/p&gt; &#xA;&lt;p&gt;Defining some functions in &lt;code&gt;ctbl:async-model&lt;/code&gt; struct, the application can control asynchronous data retrieving and updating table view.&lt;/p&gt; &#xA;&lt;p&gt;Here is a minimum sample code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun async-response (row-num len responsef errorf &amp;amp;rest a)&#xA;  (funcall responsef&#xA;           (loop for i from row-num below (+ row-num len)&#xA;                 collect&#xA;                 (list i (* i i) (* i i i) (sqrt i)))))&#xA; &#xA;(ctbl:open-table-buffer-easy&#xA; (make-ctbl:async-model :request &#39;async-response) ; defining async-model&#xA; &#39;(&#34;int&#34; &#34;square&#34; &#34;cube&#34; &#34;root&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this sample code, we defined just a &lt;code&gt;request&lt;/code&gt; function in &lt;code&gt;ctbl:async-model&lt;/code&gt;. The &lt;code&gt;request&lt;/code&gt; function should have 4 arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;row-num&lt;/code&gt; : an index number of the requested first row&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;len&lt;/code&gt; : a number of requested rows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;responsef&lt;/code&gt; : the continuation function to which the result rows should be passed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;errorf&lt;/code&gt; : the error continuation function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is the result image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/async-model-sample1.png&#34; alt=&#34;defining async model:1&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ctbl:async-model struct&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;slot name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;request&lt;/td&gt; &#xA;   &lt;td&gt;Data request function mentioned above.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;init-num&lt;/td&gt; &#xA;   &lt;td&gt;Initial row number. (Default 20)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;more-num&lt;/td&gt; &#xA;   &lt;td&gt;Increase row number. (Default 20)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;reset&lt;/td&gt; &#xA;   &lt;td&gt;Reset function which is called when user executes update command. (Can be nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cancel&lt;/td&gt; &#xA;   &lt;td&gt;Cancel function of data requesting. (Can be nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For forward compatibility, these callback functions should have a `&amp;amp;rest&#39; keyword at the end of argument list.&lt;/p&gt; &#xA;&lt;p&gt;For more complete example, see the demo function &lt;code&gt;ctbl:async-demo&lt;/code&gt; at &lt;code&gt;samples/large-table.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sorting Async-Model&lt;/h3&gt; &#xA;&lt;p&gt;The ctable doesn&#39;t provide default sorting function &lt;code&gt;ctbl:cmodel-sort-action&lt;/code&gt; for the async-model data, because ctable can not receive whole rows of async-model.&lt;/p&gt; &#xA;&lt;p&gt;If sorting function is needed, the application program must implement it manually.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;(C) 2011-2021 SAKURAI Masashi All rights reserved. m.sakurai at kiwanami.net&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-helm/helm</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/emacs-helm/helm</id>
    <link href="https://github.com/emacs-helm/helm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs incremental completion and selection narrowing framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/helm&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/helm-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/helm&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/helm-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/emacs-helm/helm&#34;&gt;&lt;img alt=&#34;Travis CI&#34; src=&#34;https://travis-ci.org/emacs-helm/helm.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Emacs-Helm&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/1541688?v=3&amp;amp;s=200&#34; alt=&#34;Emacs-helm&#34; title=&#34;&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;justify&#34;&gt; &lt;b&gt;Helm&lt;/b&gt; is an Emacs framework for incremental completions and narrowing selections. It provides an easy-to-use API for developers wishing to build their own Helm applications in Emacs, powerful search tools and dozens of already built-in commands providing completion to almost everything. It is a must-have for anyone using Emacs as a main work environment. Helm has been widely adopted by many Emacs power-users. It is available in Melpa and can be easily installed from the Emacs package manager. &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://emacs-helm.github.io/helm/&#34;&gt;&lt;b&gt;Homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/emacs-helm/helm/releases&#34;&gt;&lt;b&gt;Downloads&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/emacs-helm/helm/wiki#install&#34;&gt;&lt;b&gt;Get started&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/emacs-helm/helm/wiki&#34;&gt;&lt;b&gt;Helm wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/emacs-helm/helm/wiki/FAQ&#34;&gt;&lt;b&gt;FAQ&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Helm in action searching with &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34; &lt;b&gt;Grep Ag&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/emacs-helm/helm/raw/master/images/helm-grep-ag-persistent.png?raw=true&#34; alt=&#34;Emacs-helm grep ag&#34; title=&#34;&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsmirror/compat</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/emacsmirror/compat</id>
    <link href="https://github.com/emacsmirror/compat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compatibility Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;COMPATibility Library for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;Find here the source for compat.el, a forwards-compatibility library for (GNU) Emacs Lisp, versions 24.3 and newer.&lt;/p&gt; &#xA;&lt;p&gt;The intended audience of this library aren&#39;t day-to-day users, but package developers that wish to make use of newer functionality, not provided in older versions of Emacs, without breaking compatibility for users bound to specific Emacs releases.&lt;/p&gt; &#xA;&lt;p&gt;Version 24.3 is chosen as the oldest version, because this is the newest version on CentOS 7. It is intended to preserve compatibility for at least as the Centos 7 reaches &lt;a href=&#34;https://wiki.centos.org/About/Product&#34;&gt;EOL&lt;/a&gt;, 2024.&lt;/p&gt; &#xA;&lt;p&gt;If you are developing a package with compat.el in mind, consider loading &lt;code&gt;compat-help&lt;/code&gt; (on your system, not in a package) to get relevant notes inserted into the help buffers of functions that are implemented or advised in compat.el.&lt;/p&gt; &#xA;&lt;p&gt;Note that compat.el provides a few prefixed function, ie. functions with a &lt;code&gt;compat-&lt;/code&gt; prefix. These are used to provide extended functionality for commands that are already defined (&lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;assoc&lt;/code&gt;, ...). It might be possible to transform these into advised functions later on, so that the modified functionality is accessible without a prefix. Feedback on this point is appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;compat.el shouldn&#39;t be installed directly, but downloaded from &lt;a href=&#34;http://elpa.gnu.org/packages/compat.html&#34;&gt;GNU ELPA&lt;/a&gt;. If necessary, this can be done using M-x package-install-file in the current working directory.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The intended use-case for this library is for package developers to add as a dependency in the header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Package-Requires: ((emacs &#34;24.3&#34;) (compat &#34;28.1.1.1&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and later on a&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;compat)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will load all non-prefixed definitions (functions and macros with a leading &lt;code&gt;compat-&lt;/code&gt;). To load these, an additional&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;compat-XY) ; e.g. 26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will be necessary, to load compatibility code for Emacs version XY.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to subscribe to the &lt;a href=&#34;https://lists.sr.ht/~pkal/compat-announce&#34;&gt;compat-announce&lt;/a&gt; mailing list to be notified when new versions are released or relevant changes are made.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;As compat.el is distribed as part of GNU ELPA, and therefore requires a &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Copyright-Assignment.html&#34;&gt;copyright assignment&lt;/a&gt; to the FSF, for all non-trivial code contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Source code&lt;/h2&gt; &#xA;&lt;p&gt;Compat is developed on &lt;a href=&#34;https://sr.ht/~pkal/compat&#34;&gt;SourceHut&lt;/a&gt;. A restricted &lt;a href=&#34;https://github.com/phikal/compat.el&#34;&gt;GitHub&lt;/a&gt; mirror is also provided.&lt;/p&gt; &#xA;&lt;h2&gt;Bug and patches&lt;/h2&gt; &#xA;&lt;p&gt;Patches and comments can be sent to the &lt;a href=&#34;https://lists.sr.ht/~pkal/compat-devel&#34;&gt;development mailing list&lt;/a&gt;. Bug reports and issues should be directed to the &lt;a href=&#34;https://todo.sr.ht/~pkal/compat&#34;&gt;issue tracker&lt;/a&gt; (also accessible via &lt;a href=&#34;mailto:~pkal/compat@todo.sr.ht&#34;&gt;Email&lt;/a&gt;). &lt;a href=&#34;https://github.com/phikal/compat.el&#34;&gt;GitHub&lt;/a&gt; can also be used to submit patches (&#34;Pull Request&#34;). These may include issues in the compatibility code, missing definitions or performance issues.&lt;/p&gt; &#xA;&lt;p&gt;When contributing, make sure to provide test and use the existing tests defined in compat-test.el. These can be easily executed using the bundled Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Distribution&lt;/h2&gt; &#xA;&lt;p&gt;compat.el and all other files in this directory are distributed under the GPL, Version 3 (like Emacs itself).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bbatsov/prelude</title>
    <updated>2022-05-30T01:38:37Z</updated>
    <id>tag:github.com,2022-05-30:/bbatsov/prelude</id>
    <link href="https://github.com/bbatsov/prelude" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prelude is an enhanced Emacs 25.1+ distribution that should make your experience with Emacs both more pleasant and more powerful.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Emacs Prelude&lt;/h1&gt; &#xA;&lt;p&gt;Prelude is an Emacs distribution that aims to enhance the default Emacs experience. Prelude alters a lot of the default settings, bundles a plethora of additional packages and adds its own core library to the mix. The final product offers an easy to use Emacs configuration for Emacs newcomers and lots of additional power for Emacs power users.&lt;/p&gt; &#xA;&lt;p&gt;Prelude is compatible &lt;strong&gt;ONLY with GNU Emacs 25.1+&lt;/strong&gt;. In general you&#39;re advised to always run Prelude with the latest stable Emacs release.&lt;/p&gt; &#xA;&lt;p&gt;You can support the development of Prelude via &lt;a href=&#34;https://github.com/sponsors/bbatsov&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://ko-fi.com/bbatsov&#34;&gt;ko-fi&lt;/a&gt;, &lt;a href=&#34;https://www.paypal.me/bbatsov&#34;&gt;PayPal&lt;/a&gt; and &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improved UX, that&#39;s still in line with Emacs traditions&lt;/li&gt; &#xA; &lt;li&gt;Sane defaults of baseline Emacs functionality&lt;/li&gt; &#xA; &lt;li&gt;Automatic installation of many major programming modes on demand&lt;/li&gt; &#xA; &lt;li&gt;A curated set of 3rd party packages to enhance the base functionality&lt;/li&gt; &#xA; &lt;li&gt;Simple modular architecture&lt;/li&gt; &#xA; &lt;li&gt;Easy customization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://prelude.emacsredux.com&#34;&gt;user manual&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Fast Forward&lt;/h2&gt; &#xA;&lt;p&gt;Assuming you&#39;re using an Unix-like OS (&lt;code&gt;*BSD&lt;/code&gt;, &lt;code&gt;GNU/Linux&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;Solaris&lt;/code&gt;, etc), you already have a recent version of Emacs installed, as well as &lt;code&gt;git&lt;/code&gt; &amp;amp; &lt;code&gt;curl&lt;/code&gt; you can skip the whole manual and just type in your favorite shell the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ curl -L https://git.io/epre | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now power up your Emacs, sit back and enjoy Prelude.&lt;/p&gt; &#xA;&lt;p&gt;There are two environment variables you can use to control the source repository and the installation directory. To change the installation directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ export PRELUDE_INSTALL_DIR=&#34;$HOME/.emacs.d&#34; &amp;amp;&amp;amp; curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the source repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ export PRELUDE_URL=&#34;https://github.com/yourname/prelude.git&#34; &amp;amp;&amp;amp; curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the installer will back up any existing &lt;code&gt;.emacs&lt;/code&gt; file or &lt;code&gt;.emacs.d&lt;/code&gt; since it will unpack Prelude&#39;s code in &lt;code&gt;.emacs.d&lt;/code&gt;. If you&#39;re doing a manual install make sure you don&#39;t have a &lt;code&gt;.emacs&lt;/code&gt; file or back up your existing &lt;code&gt;.emacs.d&lt;/code&gt; directory manually.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Don&#39;t forget to adjust your &lt;code&gt;prelude-modules.el&lt;/code&gt; file in your personal directory once the installation is done. By default most of the modules that ship with Prelude are &lt;strong&gt;not&lt;/strong&gt; loaded.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;Prelude&#39;s philosophy is quite simple:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple&lt;/li&gt; &#xA; &lt;li&gt;easy to understand and extend&lt;/li&gt; &#xA; &lt;li&gt;stable&lt;/li&gt; &#xA; &lt;li&gt;a foundation for you to build upon, as opposed to some end-user product&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This means that it intentionally doesn&#39;t pack all the bells and whistles that it could. Prelude aims to enhance the classic Emacs experience without deviating a lot from it - e.g. it would never enable something like &lt;code&gt;evil-mode&lt;/code&gt; (vim keybindings) by default and so on.&lt;/p&gt; &#xA;&lt;p&gt;All the third-party packages that it bundles are carefully vetted and are known to be of good quality and to have reliable maintainers. That generally means that Prelude&#39;s unlikely to immediate adopt some shiny new package, that has established tried and true alternatives.&lt;/p&gt; &#xA;&lt;p&gt;In practice this translates to the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prelude is less opinionated than distros like Spacemacs and Doom Emacs (meaning it&#39;s closer to the standard Emacs experience)&lt;/li&gt; &#xA; &lt;li&gt;Prelude installs relatively few additional packages by default&lt;/li&gt; &#xA; &lt;li&gt;Most modules in Prelude are opt-in instead of opt-out (you&#39;ll notice the default config enables only a handful of modules)&lt;/li&gt; &#xA; &lt;li&gt;Most modules (e.g. modules for programming languages) are pretty short and feature setup only for essential packages (in some cases that be just the major mode for the language in question)&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t really need to track Prelude&#39;s upstream - you&#39;re encouraged to just fork it and use it as the basis for your own configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Remember that the ultimate goal of every Emacs user is to create an Emacs setup that reflects their own experience, needs, goals and ideas. Just like Lisp, Emacs is nothing but a raw building material for the perfect editing experience.&lt;/p&gt; &#xA;&lt;p&gt;More installation options are discussed &lt;a href=&#34;https://prelude.emacsredux.com/en/latest/installation/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;User Manual&lt;/h2&gt; &#xA;&lt;p&gt;While Emacs Prelude is pretty simple at its core, it does have some specifics that are worth learning - e.g. configuration options, load order of modules and personal settings and so on.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://prelude.emacsredux.com&#34;&gt;user manual&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;You can also find a lot of information about specific Prelude features and the rationale behind them on my Emacs blog &lt;a href=&#34;https://emacsredux.com&#34;&gt;Emacs Redux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;crux and super-save&lt;/h2&gt; &#xA;&lt;p&gt;A lot of utility commands that used to be part of Prelude were eventually extracted to the &lt;a href=&#34;https://github.com/bbatsov/crux&#34;&gt;crux&lt;/a&gt; package, so they&#39;d be easily available to more people. These days Prelude simply depends on that package.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/bbatsov/super-save&#34;&gt;super-save&lt;/a&gt; package also used to be part of Prelude in the past.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Check out the project&#39;s &lt;a href=&#34;https://github.com/bbatsov/prelude/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open&#34;&gt;issue list&lt;/a&gt; a list of unresolved issues. By the way - feel free to fix any of them and send me a pull request. :-)&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Support is available via several channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prelude&#39;s Google Group &lt;a href=&#34;mailto:emacs-prelude@googlegroups.com&#34;&gt;emacs-prelude@googlegroups.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prelude&#39;s Freenode channel (&lt;code&gt;#prelude-emacs&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/bbatsov/prelude&#34;&gt;Gitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/bbatsov/prelude/contributors&#34;&gt;list&lt;/a&gt; of all the people who have contributed to the development of Emacs Prelude.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs &amp;amp; Improvements&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and suggestions for improvements are always welcome. GitHub pull requests are even better! :-)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2011-2021 Bozhidar Batsov and &lt;a href=&#34;https://github.com/bbatsov/prelude/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the GNU General Public License, version 3&lt;/p&gt;</summary>
  </entry>
</feed>