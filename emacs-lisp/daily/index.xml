<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-15T01:30:36Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wolray/symbol-overlay</title>
    <updated>2024-09-15T01:30:36Z</updated>
    <id>tag:github.com,2024-09-15:/wolray/symbol-overlay</id>
    <link href="https://github.com/wolray/symbol-overlay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Highlight symbols with keymap-enabled overlays&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/symbol-overlay&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/symbol-overlay-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/symbol-overlay&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/symbol-overlay-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wolray/symbol-overlay/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/wolray/symbol-overlay/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Symbol Overlay&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/wolray/symbol-overlay/master/screenshot-black.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Highlight symbols with overlays while providing a keymap for various operations about highlighted symbols. It was originally inspired by the package &lt;code&gt;highlight-symbol&lt;/code&gt;. The fundamental difference is that in &lt;code&gt;symbol-overlay&lt;/code&gt; every symbol is highlighted by the Emacs built-in function &lt;code&gt;overlay-put&lt;/code&gt; rather than the &lt;code&gt;font-lock&lt;/code&gt; mechanism used in &lt;code&gt;highlight-symbol&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s New!&lt;/h2&gt; &#xA;&lt;h3&gt;20190306:&lt;/h3&gt; &#xA;&lt;p&gt;New commands &lt;code&gt;symbol-overlay-jump-first&lt;/code&gt; (key &#34;&amp;lt;&#34;) and &lt;code&gt;symbol-overlay-jump-last&lt;/code&gt; (key &#34;&amp;gt;&#34;) are now enabled.&lt;/p&gt; &#xA;&lt;h3&gt;20190305:&lt;/h3&gt; &#xA;&lt;p&gt;New customizable variable &lt;code&gt;symbol-overlay-displayed-window&lt;/code&gt; is introduced to control the overlay behavior at &lt;code&gt;symbol-overlay-mode&lt;/code&gt;. If it is non-nil, occurrences outside the displayed window will not be counted or highlighted.&lt;/p&gt; &#xA;&lt;h3&gt;20170826:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;symbol-overlay-toggle-in-scope&lt;/code&gt; now affects both global and in-scope highlighting. &lt;code&gt;symbol-overlay-rename&lt;/code&gt; now uses the original symbol name as the initial text in minibuffer. New command &lt;code&gt;symbol-overlay-count&lt;/code&gt; for counting symbol at point. And other improvements.&lt;/p&gt; &#xA;&lt;h3&gt;20170426:&lt;/h3&gt; &#xA;&lt;p&gt;Minor-mode &lt;code&gt;symbol-overlay-mode&lt;/code&gt; for auto-highlighting is now enabled.&lt;/p&gt; &#xA;&lt;h3&gt;20170423:&lt;/h3&gt; &#xA;&lt;p&gt;Toggling to isearch-mode is now enabled. Try &lt;code&gt;symbol-overlay-isearch-literally&lt;/code&gt; via &#34;s&#34; to search the not-quoted symbol in isearch-mode.&lt;/p&gt; &#xA;&lt;h3&gt;20170420:&lt;/h3&gt; &#xA;&lt;p&gt;Toggling overlays to be showed in buffer or only in scope is now enabled. When symbol is highlighted in scope, all related operations is narrowed to the scope, too. Try &lt;code&gt;symbol-overlay-toggle-in-scope&lt;/code&gt; via &#34;t&#34;. This feature is applicable only for languages that support the lisp function &lt;code&gt;narrow-to-defun&lt;/code&gt;. Otherwise you may specify &lt;code&gt;beginning-of-defun-function&lt;/code&gt; and &lt;code&gt;end-of-defun-function&lt;/code&gt; on your own.&lt;/p&gt; &#xA;&lt;h3&gt;20170417:&lt;/h3&gt; &#xA;&lt;p&gt;Auto-refresh is now enabled. Every time the highlighted text is changed or a new occurrence shows up, the buffer will refresh automatically.&lt;/p&gt; &#xA;&lt;p&gt;Two new commands added: &lt;code&gt;symbol-overlay-save-symbol&lt;/code&gt; for copying the current symbol, &lt;code&gt;symbol-overlay-echo-mark&lt;/code&gt; for undoing a recent jump.&lt;/p&gt; &#xA;&lt;h2&gt;Advantages&lt;/h2&gt; &#xA;&lt;h3&gt;Fast&lt;/h3&gt; &#xA;&lt;p&gt;When highlighting symbols in a buffer of regular size and language, &lt;code&gt;overlay-put&lt;/code&gt; behaves as fast as the traditional Highlighting method &lt;code&gt;font-lock&lt;/code&gt;. However, for a buffer of major-mode with complicated keywords syntax, like haskell-mode, &lt;code&gt;font-lock&lt;/code&gt; is quite slow even the buffer is less than 100 lines. Besides, when counting the number of highlighted occurrences, &lt;code&gt;highlight-symbol&lt;/code&gt; will call the function &lt;code&gt;how-many&lt;/code&gt; twice, which could also result in an unpleasant delay in a large buffer. Those problems don&#39;t exist in &lt;code&gt;symbol-overlay&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Convenient&lt;/h3&gt; &#xA;&lt;p&gt;When putting overlays on symbols, &lt;strong&gt;an auto-activated overlay-inside keymap&lt;/strong&gt; will enable you to call various useful commands with &lt;strong&gt;a single keystroke&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Powerful&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toggle all overlays of symbol at point: &lt;code&gt;symbol-overlay-put&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jump between locations of symbol at point: &lt;code&gt;symbol-overlay-jump-next&lt;/code&gt; &amp;amp; &lt;code&gt;symbol-overlay-jump-prev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Switch to the closest symbol highlighted nearby: &lt;code&gt;symbol-overlay-switch-forward&lt;/code&gt; &amp;amp; &lt;code&gt;symbol-overlay-switch-backward&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Minor mode for auto-highlighting symbol at point: &lt;code&gt;symbol-overlay-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Remove all highlighted symbols in the buffer: &lt;code&gt;symbol-overlay-remove-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy symbol at point: &lt;code&gt;symbol-overlay-save-symbol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Toggle overlays to be showed in buffer or only in scope: &lt;code&gt;symbol-overlay-toggle-in-scope&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jump back to the position before a recent jump: &lt;code&gt;symbol-overlay-echo-mark&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jump to the definition of symbol at point: &lt;code&gt;symbol-overlay-jump-to-definition&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Isearch symbol at point literally, without &lt;code&gt;regexp-quote&lt;/code&gt; the symbol: &lt;code&gt;symbol-overlay-isearch-literally&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Query replace symbol at point: &lt;code&gt;symbol-overlay-query-replace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rename symbol at point on all its occurrences: &lt;code&gt;symbol-overlay-rename&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use &lt;code&gt;symbol-overlay&lt;/code&gt; in your Emacs, you need only to bind these keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;symbol-overlay)&#xA;(global-set-key (kbd &#34;M-i&#34;) &#39;symbol-overlay-put)&#xA;(global-set-key (kbd &#34;M-n&#34;) &#39;symbol-overlay-switch-forward)&#xA;(global-set-key (kbd &#34;M-p&#34;) &#39;symbol-overlay-switch-backward)&#xA;(global-set-key (kbd &#34;&amp;lt;f7&amp;gt;&#34;) &#39;symbol-overlay-mode)&#xA;(global-set-key (kbd &#34;&amp;lt;f8&amp;gt;&#34;) &#39;symbol-overlay-remove-all)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default key-bindings defined in &lt;code&gt;symbol-overlay-map&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;i&#34; -&amp;gt; symbol-overlay-put&#xA;&#34;n&#34; -&amp;gt; symbol-overlay-jump-next&#xA;&#34;p&#34; -&amp;gt; symbol-overlay-jump-prev&#xA;&#34;w&#34; -&amp;gt; symbol-overlay-save-symbol&#xA;&#34;t&#34; -&amp;gt; symbol-overlay-toggle-in-scope&#xA;&#34;e&#34; -&amp;gt; symbol-overlay-echo-mark&#xA;&#34;d&#34; -&amp;gt; symbol-overlay-jump-to-definition&#xA;&#34;s&#34; -&amp;gt; symbol-overlay-isearch-literally&#xA;&#34;q&#34; -&amp;gt; symbol-overlay-query-replace&#xA;&#34;r&#34; -&amp;gt; symbol-overlay-rename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can re-bind the commands to any keys you prefer by simply writing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(define-key symbol-overlay-map (kbd &#34;your-prefer-key&#34;) &#39;any-command)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you may prefer to overwrite the keymap&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(let ((map (make-sparse-keymap)))&#xA;  (define-key map (kbd &#34;key1&#34;) &#39;command-1)&#xA;  (define-key map (kbd &#34;key2&#34;) &#39;command-2)&#xA;  (setq symbol-overlay-map map))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a final example, you can define a handy set of keys using &lt;code&gt;transient&lt;/code&gt;: see the snippet posted &lt;a href=&#34;https://github.com/wolray/symbol-overlay/issues/59&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>