<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-12T01:41:49Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iqbalansari/emacs-emojify</title>
    <updated>2022-07-12T01:41:49Z</updated>
    <id>tag:github.com,2022-07-12:/iqbalansari/emacs-emojify</id>
    <link href="https://github.com/iqbalansari/emacs-emojify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display emojis in Emacs&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Emojify&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[./CHANGELOG.org][file:https://img.shields.io/badge/version-v0.4-blue.svg]] [[https://melpa.org/#/emojify][file:https://melpa.org/packages/emojify-badge.svg]] [[http://stable.melpa.org/#/emojify][file:http://stable.melpa.org/packages/emojify-badge.svg]] [[https://travis-ci.org/iqbalansari/emacs-emojify][https://travis-ci.org/iqbalansari/emacs-emojify.svg?branch=master]] [[https://coveralls.io/github/iqbalansari/emacs-emojify?branch=master][https://coveralls.io/repos/github/iqbalansari/emacs-emojify/badge.svg?branch=master]] [[http://www.gnu.org/licenses/gpl-3.0.html][http://img.shields.io/:license-gpl3-blue.svg]] [[http://makeapullrequest.com][file:https://img.shields.io/badge/PRs-welcome-brightgreen.svg]]&lt;/p&gt; &#xA;&lt;p&gt;** Table of contents :TOC_3_gh:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#emojify][Emojify]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#what-is-this][What is this?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#what-does-it-look-like][What does it look like?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#requirements][Requirements]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#installation][Installation]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#elpa][ELPA]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#usage][Usage]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#displaying-emojis][Displaying emojis]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#searching-emojis][Searching emojis]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#inserting-emojis][Inserting emojis]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#describing-emojis][Describing emojis]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#listing-all-emojis][Listing all emojis]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#customizations][Customizations]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#displaying-composed-text-as-emojis][Displaying composed text as emojis]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#displaying-emojis-in-company-mode-tooltips][Displaying emojis in company mode tooltips]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#configuring-the-types-of-emojis-displayed][Configuring the types of emojis displayed]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#configuring-how-emojis-are-displayed][Configuring how emojis are displayed]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#configuring-the-buffers-where-emojify-mode-is-enabled][Configuring the buffers where emojify mode is enabled]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#configuring-the-texts-that-are-displayed-as-emojis][Configuring the texts that are displayed as emojis]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#customizing-the-behaviour-when-point-enters-an-emoji][Customizing the behaviour when point enters an emoji]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#customizing-the-behaviour-during-isearch-mode][Customizing the behaviour during isearch-mode]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#customizing-the-behaviour-when-mouse-hovers-over-an-emoji][Customizing the behaviour when mouse hovers over an emoji]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#custom-emojis][Custom emojis]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#known-issues][Known issues]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#contributing][Contributing]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#thanks][Thanks]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#credits][Credits]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#licence][Licence]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#emojione-images][EmojiOne images]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#twemoji-images][Twemoji images]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#source-code][Source code]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What is this? Emojify is an Emacs extension to display emojis. It can display github style emojis like &lt;del&gt;&lt;span&gt;ðŸ˜„&lt;/span&gt;&lt;/del&gt; or plain ascii ones like &lt;del&gt;:)&lt;/del&gt;. It tries to be as efficient as possible, while also providing a lot of [[#customizations][flexibility]]&lt;/p&gt; &#xA;&lt;p&gt;** What does it look like? Here is how the commit log of this project looks with emojify mode enabled&lt;/p&gt; &#xA;&lt;p&gt;[[https://raw.githubusercontent.com/iqbalansari/emacs-emojify/master/screenshots/emojify-in-action.png][screenshots/emojify-in-action.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;If you prefer a GIF you can view one [[https://raw.githubusercontent.com/iqbalansari/emacs-emojify/master/screenshots/emojify-in-action.gif][here]].&lt;/p&gt; &#xA;&lt;p&gt;** Requirements This package requires Emacs &lt;em&gt;v24.3&lt;/em&gt; and above. Emacs should be compiled with support for &lt;em&gt;PNG&lt;/em&gt; images to display emojis as images. It is &lt;em&gt;recommended&lt;/em&gt; that Emacs is compiled with &lt;em&gt;ImageMagick&lt;/em&gt; support. &lt;del&gt;emojify&lt;/del&gt; will use it to resize emojis if needed, additionally imagemagick is used to set background color for emojis to workaround the bug described in [[https://github.com/iqbalansari/emacs-emojify/issues/7][issue 7]]. However these are &lt;em&gt;completely optional&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PNG support might require some additional steps to on Windows, you might find [[http://stackoverflow.com/questions/2650041/emacs-under-windows-and-png-files][this]] stackoverflow answer helpful.&lt;/p&gt; &#xA;&lt;p&gt;** Installation *** ELPA &lt;del&gt;emojify&lt;/del&gt; is available on [[http://melpa.org/#/emojify][MELPA]] and [[http://stable.melpa.org/#/emojify][MELPA Stable]]. Please follow the instructions on MELPA [[http://melpa.org/#/getting-started][website]] to enable it, if you haven&#39;t already.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can then install ~emojify~ from the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Menu.html][package menu]]. Alternatively install it by doing the following&#xA;&#xA;Refresh the package index&#xA;#+BEGIN_QUOTE&#xA;M-x package-refresh-contents RET&#xA;#+END_QUOTE&#xA;&#xA;And then install it by doing&#xA;#+BEGIN_QUOTE&#xA;M-x package-install RET emojify&#xA;#+END_QUOTE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** With use-package #+begin_src elisp (use-package emojify :hook (after-init . global-emojify-mode)) #+end_src ** Usage *** Displaying emojis &lt;del&gt;emojify-mode&lt;/del&gt; can be enabled/disabled separately for a buffer by using the command &lt;del&gt;emojify-mode&lt;/del&gt;, to enable/disable it globally use the command &lt;del&gt;global-emojify-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To enable ~emojify-mode~ globally at startup add something like the&#xA;following to your ~init~ file&#xA;&#xA;#+BEGIN_SRC emacs-lisp&#xA;  (add-hook &#39;after-init-hook #&#39;global-emojify-mode)&#xA;#+END_SRC&#xA;&#xA;Emojify integrates with packages like ~prettify-symbol-mode~ and&#xA;~org-bullets-mode~ which display text differently, if the alternate text&#xA;displayed by these packages match an emoji, ~emojify~ will display them too.&#xA;See [[#displaying-composed-text-as-emojis][Displaying composed text as emojis]] for more details. Emojify can also&#xA;display emojis in ~company-mode~ tooltips, see [[#displaying-emojis-in-company-mode-tooltips][Displaying emojis in company mode tooltips]]&#xA;for more details.&#xA;&#xA;*[EXPERIMENTAL]* Emojify can be used for displaying emojis in the mode-line,&#xA;to enable/disable it for individual buffers use the command&#xA;~emojify-mode-line-mode~, to enable/disable it globally use the command&#xA;~global-emojify-mode-line-mode~.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Searching emojis The command &lt;del&gt;emojify-apropos-emoji&lt;/del&gt; can be used to display emojis that match given regexp/apropos pattern. The results are displayed in a specialized buffer, where &lt;del&gt;w&lt;/del&gt; or &lt;del&gt;c&lt;/del&gt; can be used to copy emojis to the kill ring.&lt;/p&gt; &#xA;&lt;p&gt;*** Inserting emojis The command &lt;del&gt;emojify-insert-emoji&lt;/del&gt; can be used to insert emojis interactively. While the command works with vanilla Emacs completion system, the experience would be better with something like [[https://github.com/emacs-helm/helm][Helm]], [[https://github.com/abo-abo/swiper][Ivy]], [[https://www.emacswiki.org/emacs/Icicles][Icicles]] or Ido depending on you preference.&lt;/p&gt; &#xA;&lt;p&gt;*** Describing emojis The command &lt;del&gt;emojify-describe-emoji-at-point&lt;/del&gt; can be used to view explanation about the command displayed at point. Additionally the command &lt;del&gt;emojify-describe-emoji&lt;/del&gt; can be used to display description for an arbitrary emoji.&lt;/p&gt; &#xA;&lt;p&gt;*** Listing all emojis The command &lt;del&gt;emojify-list-emojis&lt;/del&gt; can be used to view all the available emojis in a list form.&lt;/p&gt; &#xA;&lt;p&gt;** Customizations *** Displaying composed text as emojis Emacs provides a way to modify how some parts of buffer are displayed using the &lt;del&gt;composition&lt;/del&gt; text property. &lt;del&gt;prettify-symbol-mode&lt;/del&gt; and &lt;del&gt;org-bullets-mode&lt;/del&gt; are some popular packages that use this feature to display certain text in the buffer differently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If the alternate display matches an emoji then ~emojify~ will display those&#xA;as emojis too. This is default behaviour. You can disable this behaviour by&#xA;setting ~emojify-composed-text-p~ to ~nil~.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Displaying emojis in company mode tooltips Emojify can also display emojis that are part of company-mode&#39;s completion tooltip (see [[https://github.com/dunn/company-emoji][company-emoji]] for an example of such tooltips). However this feature is turned off by default. To turn it on set &lt;del&gt;emojify-company-tooltips-p&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Configuring the types of emojis displayed Emojify by default displays plain text emojis (&lt;del&gt;:)&lt;/del&gt;), unicode emojis (&lt;del&gt;ðŸ˜„&lt;/del&gt;) and github style emojis &lt;del&gt;&lt;span&gt;ðŸ˜„&lt;/span&gt;&lt;/del&gt;. However this is customizable. You can do so by changing the value of &lt;del&gt;emojify-emoji-styles&lt;/del&gt; using the customize interface. To change the value of the variable from Lisp using the function &lt;del&gt;emojify-set-emoji-styles&lt;/del&gt; (or set it before loading &lt;del&gt;emojify&lt;/del&gt;), call it with one parameter the list of styles that you want to be displayed. The possible styles are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- ascii            - Display only plain ascii emojis&#xA;- unicode          - Display only unicode emojis&#xA;- github           - Display only github style emojis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Configuring how emojis are displayed By default emojis are displayed using images. However you can instruct emojify to display it using unicode characters or ascii characters. To do so customize the variable &lt;del&gt;emojify-display-style&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can set it one of the following values&#xA;- image   - Display emojis using images, obviously this requires the Emacs&#xA;            instance to support image&#xA;- unicode - Display emojis using unicode characters, this might be a good&#xA;            option on platforms with good emoji fonts&#xA;- ascii   - This is simplest and does not require any external dependencies&#xA;            In this case emojify will display ascii equivalents of github&#xA;            style emojis.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Configuring the buffers where emojify mode is enabled You can control the buffers where emojify is enabled using &lt;del&gt;emojify-inhibit-major-modes&lt;/del&gt; and &lt;del&gt;emojify-inhibit-in-buffer-functions&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;**** Major modes where emojify-mode should be not be enabled As the names suggests &lt;del&gt;emojify-inhibit-major-modes&lt;/del&gt; is a list of major-modes where &lt;del&gt;emojify&lt;/del&gt; should not be enabled.&lt;/p&gt; &#xA;&lt;p&gt;**** Inhibiting emojify-mode using custom functions &lt;del&gt;emojify-inhibit-in-buffer-functions&lt;/del&gt; is a list of functions that &lt;del&gt;emojify&lt;/del&gt; calls before enabling &lt;del&gt;emojify-mode&lt;/del&gt; in a buffer. If any of the functions return a non-nil value &lt;del&gt;emojify-mode&lt;/del&gt; is not enabled in the buffer. Users can add custom functions to this list if they wish to inhibit &lt;del&gt;emojify&lt;/del&gt; in certain buffers. The functions are called with one argument the buffer where &lt;del&gt;emojify-mode&lt;/del&gt; is about to be enabled.&lt;/p&gt; &#xA;&lt;p&gt;*** Configuring the texts that are displayed as emojis &lt;del&gt;emojify&lt;/del&gt; offers two variables to inhibit the display of certain emojis.&lt;/p&gt; &#xA;&lt;p&gt;**** Controlling the display of emojis in programming modes If enabled in programming modes &lt;del&gt;emojify&lt;/del&gt; by default will display only emojis in string and comments. This behaviour can be customized using the variable &lt;del&gt;emojify-prog-contexts&lt;/del&gt;. The variable can be set to one of the following values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; - comments - Display emojis only in comments&#xA; - string   - Display emojis only in string&#xA; - both     - Display emojis in comments as well as string&#xA; - none     - Do not display emojis in programming modes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** Inhibiting display of emojis using custom functions &lt;del&gt;emojify-inhibit-functions&lt;/del&gt; is a list of function &lt;del&gt;emojify&lt;/del&gt; calls before displaying certain text as emoji, if any of the functions return a non-nil value the corresponding text is not displayed as emoji. Users can add custom functions to this list, if they inhibit display of emojis in under certain conditions. The functions are called with three arguments&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; - text - The text that is about to be displayed as an emoji&#xA; - beg  - The beginning point of text in the buffer&#xA; - end  - The ending point of text in the buffer&#xA;&#xA; These functions are called with the buffer where emoji is being displayed&#xA; selected.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Customizing the behaviour when point enters an emoji The behaviour when point enters an emoji can be customized using the variable &lt;del&gt;emojify-point-entered-behaviour&lt;/del&gt;. It can have one of the following values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- echo    - Display the emojified text in the minibuffer&#xA;- uncover - Temporarily display the underlying text while point is in the emojified text&#xA;&#xA;Additionally it can be set to a custom function, the function is called with&#xA;two parameters (the buffer where the emoji appears is selected while running&#xA;the function)&#xA;&#xA;- beg    - The beginning position of the text displayed as emoji&#xA;- end    - The ending position of the text displayed as emoji&#xA;&#xA;The return value of the function is ignored.&#xA;&#xA;*Note:* The custom function will be called for once for each character in an&#xA;emoji as point moves through them. Avoid manipulating the buffer in these&#xA;functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Customizing the behaviour during isearch-mode By default in isearch-mode the underlying emoji is displayed temporarily when point enters the emoji while searching (similar to &lt;del&gt;uncover&lt;/del&gt; behaviour mentioned [[#controlling-behaviour-when-point-enters-an-emoji][above]]). This can be disabled by setting &lt;del&gt;emojify-reveal-on-isearch&lt;/del&gt; to &lt;del&gt;nil&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Customizing the behaviour when mouse hovers over an emoji When mouse hovers over a emoji, the underlying text is displayed in a help popup. This behaviour can be disabled by setting &lt;del&gt;emojify-show-help&lt;/del&gt; to nil.&lt;/p&gt; &#xA;&lt;p&gt;*** Custom emojis You can specify custom emojis using the &lt;del&gt;emojify-user-emojis&lt;/del&gt; variable. You need to set it to an alist where first element of cons is the text to be displayed as emoji, while the second element of the cons is an alist containing data about the emoji.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The inner alist should have atleast&#xA;&#xA;1) &#34;name&#34;  - The name of the emoji&#xA;2) &#34;style&#34; - This should be one of &#34;github&#34;, &#34;ascii&#34; or &#34;github&#34;&#xA;&#xA;Additionally the alist should contain one of (see [[#configuring-the-types-of-emojis-displayed][emojify-display-style]])&#xA;1) &#34;unicode&#34; - The replacement for the provided emoji for &#34;unicode&#34; display style&#xA;2) &#34;image&#34;   - The replacement for the provided emoji for &#34;image&#34; display style.&#xA;               This should be the *absolute* path to the image&#xA;3) &#34;ascii&#34;   - The replacement for the provided emoji for &#34;ascii&#34; display style&#xA;&#xA;It is best to set this variable before you load ~emojify~, in case you set&#xA;this variable after loading ~emojify~ run the function&#xA;~emojify-set-emoji-data~ to recalculate emoji data.&#xA;&#xA;User emojis take precedence over default emojis so the above mechanism can&#xA;also be used to override the default emojis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** Example Below is an example of setting up custom emojis. Assuming that the custom images are at &lt;del&gt;~/.emacs.d/emojis/trollface.png&lt;/del&gt; and &lt;del&gt;~/.emacs.d/emojis/neckbeard.png&lt;/del&gt;, you instruct &lt;del&gt;emojify&lt;/del&gt; to display &lt;del&gt;&lt;img alt=&#34;trollface&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/trollface.png?v8&#34;&gt;)&lt;/del&gt; and &lt;del&gt;&lt;img alt=&#34;neckbeard&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8&#34;&gt;)&lt;/del&gt; as &lt;img alt=&#34;trollface&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/trollface.png?v8&#34;&gt;) and &lt;img alt=&#34;neckbeard&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8&#34;&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp&#xA;   (setq emojify-user-emojis &#39;((&#34;&lt;img alt=&#34;trollface&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/trollface.png?v8&#34;&gt;)&#34; . ((&#34;name&#34; . &#34;Troll Face&#34;)&#xA;                                                 (&#34;image&#34; . &#34;~/.emacs.d/emojis/trollface.png&#34;)&#xA;                                                 (&#34;style&#34; . &#34;github&#34;)))&#xA;                               (&#34;&lt;img alt=&#34;neckbeard&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8&#34;&gt;)&#34; . ((&#34;name&#34; . &#34;Neckbeard&#34;)&#xA;                                                 (&#34;image&#34; . &#34;~/.emacs.d/emojis/neckbeard.png&#34;)&#xA;                                                 (&#34;style&#34; . &#34;github&#34;)))))&#xA;&#xA;   ;; If emojify is already loaded refresh emoji data&#xA;   (when (featurep &#39;emojify)&#xA;     (emojify-set-emoji-data))&#xA; #+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Known issues&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emojis are not properly updated after customizing &lt;del&gt;emojify-display-style&lt;/del&gt; or &lt;del&gt;emojify-program-contexts&lt;/del&gt;. For time being you will be fine as long as you set these variables before &lt;del&gt;emojify&lt;/del&gt; has loaded.&lt;/li&gt; &#xA; &lt;li&gt;Some of the emojis prompted in the commands like &lt;del&gt;emojify-insert-emoji&lt;/del&gt; might not be displayed by &lt;del&gt;emojify&lt;/del&gt;, this might happen if you have newer emoji data but old set of images. Download the latest emoji image using &lt;del&gt;emojify-download-emoji&lt;/del&gt; and set &lt;del&gt;emojify-emoji-set&lt;/del&gt; to the downloaded set.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributing Code as well as documentation contributions are welcome.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/cask/cask][Cask]] is used to manage project dependencies so make sure you have it installed. To run the tests you need to install the dependencies by running the following&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh cask install #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;After the installation completes you can run the tests by running the following command&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh cask exec ert-runner #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Thanks Special thanks to @ryanprior for bug reports and valuable feedback on the issue tracker.&lt;/p&gt; &#xA;&lt;p&gt;** Credits Emoji set designed and offered free by [[http://emojione.com][Emoji One]].&lt;/p&gt; &#xA;&lt;p&gt;** Licence *** EmojiOne images The emoji images are distributed under [[http://creativecommons.org/licenses/by-sa/4.0/][Creative Commons License]] (CC-BY-SA).&lt;/p&gt; &#xA;&lt;p&gt;*** OpenMoji images All emojis designed by [[https://openmoji.org/][OpenMoji]] â€“ the open-source emoji and icon project. License: [[https://creativecommons.org/licenses/by-sa/4.0/#][CC BY-SA 4.0]]&lt;/p&gt; &#xA;&lt;p&gt;*** Twemoji images Copyright 2018 Twitter, Inc and other contributors Code licensed under the MIT License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt; Graphics licensed under CC-BY 4.0: &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;https://creativecommons.org/licenses/by/4.0/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** Source code The source code is distributed under [[http://www.gnu.org/licenses/quick-guide-gplv3.html][GNU General Public License v3]]. See [[LICENSE][LICENSE]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Fanael/edit-indirect</title>
    <updated>2022-07-12T01:41:49Z</updated>
    <id>tag:github.com,2022-07-12:/Fanael/edit-indirect</id>
    <link href="https://github.com/Fanael/edit-indirect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Edit regions in separate buffers&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>magit/magit-popup</title>
    <updated>2022-07-12T01:41:49Z</updated>
    <id>tag:github.com,2022-07-12:/magit/magit-popup</id>
    <link href="https://github.com/magit/magit-popup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Define prefix-infix-suffix command combos&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Magit-Popup&lt;/h1&gt; &#xA;&lt;p&gt;This package implements a generic interface for toggling switches and setting options and then invoking an Emacs command that does something with these arguments. Usually the command calls an external process with the specified arguments.&lt;/p&gt; &#xA;&lt;p&gt;This package has been superseded by &lt;a href=&#34;https://github.com/magit/transient&#34;&gt;Transient&lt;/a&gt;. No new features will be added but bugs will be fixed.&lt;/p&gt;</summary>
  </entry>
</feed>