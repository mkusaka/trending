<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-13T01:33:47Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>karthink/gptel</title>
    <updated>2023-03-13T01:33:47Z</updated>
    <id>tag:github.com,2023-03-13:/karthink/gptel</id>
    <link href="https://github.com/karthink/gptel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A no-frills ChatGPT client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: GPTel: A simple ChatGPT client for Emacs&lt;/p&gt; &#xA;&lt;p&gt;GPTel is a simple, no-frills ChatGPT client for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;[[file:img/gptel.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires an [[https://platform.openai.com/account/api-keys][OpenAI API key]].&lt;/li&gt; &#xA; &lt;li&gt;No external dependencies, only Emacs. Also, it&#39;s async.&lt;/li&gt; &#xA; &lt;li&gt;Interaction is in a Markdown, Org or text buffer.&lt;/li&gt; &#xA; &lt;li&gt;Supports conversations (not just one-off queries) and multiple independent sessions.&lt;/li&gt; &#xA; &lt;li&gt;You can go back and edit your previous prompts, or even ChatGPT&#39;s previous responses when continuing a conversation. These will be fed back to ChatGPT.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;*** Package.el Clone this repository and run =M-x package-install-file=.&lt;/p&gt; &#xA;&lt;p&gt;Installing the =markdown-mode= package is optional.&lt;/p&gt; &#xA;&lt;p&gt;*** Straight #+begin_src emacs-lisp (straight-use-package &#39;(gptel :host github :repo &#34;karthink/gptel&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Installing the =markdown-mode= package is optional.&lt;/p&gt; &#xA;&lt;p&gt;*** Manual Install =emacs-aio=, (=M-x package-install⏎= =emacs-aio⏎=), then clone this repository and load this file: #+begin_src emacs-lisp (add-to-list &#39;load-path &#34;/path/to/gptel/&#34;) (require &#39;gptel) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Installing the =markdown-mode= package is optional.&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;Procure an [[https://platform.openai.com/account/api-keys][OpenAI API key]].&lt;/p&gt; &#xA;&lt;p&gt;Optional: Set =gptel-api-key= to the key or to a function that returns the key (more secure).&lt;/p&gt; &#xA;&lt;p&gt;*** In a dedicated buffer:&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x gptel= to start or switch to the ChatGPT buffer. It will ask you for the key if you skipped the previous step.&lt;/p&gt; &#xA;&lt;p&gt;Run it with a prefix-arg (=C-u M-x gptel=) to start a new session.&lt;/p&gt; &#xA;&lt;p&gt;In the gptel buffer, send your prompt with =M-x gptel-send=, bound to =C-c RET=.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it. You can go back and edit previous prompts and responses if you want.&lt;/p&gt; &#xA;&lt;p&gt;The default mode is =markdown-mode= if available, else =text-mode=. You can set =gptel-default-mode= to =org-mode= if desired.&lt;/p&gt; &#xA;&lt;p&gt;*** In any buffer:&lt;/p&gt; &#xA;&lt;p&gt;Select a region of text, call =M-x gptel-send=.&lt;/p&gt; &#xA;&lt;p&gt;The response will be inserted below your region. You can select both the original prompt and the resposne and call =M-x gptel-send= again to continue the conversation.&lt;/p&gt; &#xA;&lt;p&gt;** Why another ChatGPT client?&lt;/p&gt; &#xA;&lt;p&gt;Existing Emacs clients don&#39;t /reliably/ let me use it the simple way I can in the browser. They will get better, but I wanted something for now.&lt;/p&gt; &#xA;&lt;p&gt;Also, AI-assisted work is a new way to use Emacs. It&#39;s not yet clear what the best Emacs interface to tools like it is.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Should it be part of CAPF (=completions-at-point-functions=)?&lt;/li&gt; &#xA; &lt;li&gt;A dispatch menu from anywhere that can act on selected regions?&lt;/li&gt; &#xA; &lt;li&gt;A comint/shell-style REPL?&lt;/li&gt; &#xA; &lt;li&gt;One-off queries in the minibuffer (like =shell-command=)?&lt;/li&gt; &#xA; &lt;li&gt;A refactoring tool in code buffers?&lt;/li&gt; &#xA; &lt;li&gt;An =org-babel= interface?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Maybe all of these, I don&#39;t know yet. As a start, I wanted to replicate the web browser usage pattern so I can build from there -- and don&#39;t need to switch to the browser every time. The code is fairly simple right now.&lt;/p&gt; &#xA;&lt;p&gt;** Will you add feature X?&lt;/p&gt; &#xA;&lt;p&gt;Maybe, I&#39;d like to experiment a bit first.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jdtsmith/org-modern-indent</title>
    <updated>2023-03-13T01:33:47Z</updated>
    <id>tag:github.com,2023-03-13:/jdtsmith/org-modern-indent</id>
    <link href="https://github.com/jdtsmith/org-modern-indent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;modern block styling with org-indent&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;org-modern-indent&lt;/h1&gt; &#xA;&lt;p&gt;Modern block styling with &lt;code&gt;org-indent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/minad/org-modern&#34;&gt;&lt;code&gt;org-modern&lt;/code&gt;&lt;/a&gt; provides a clean and efficient org style. The blocks (e.g. source, example) are particularly nicely decorated. But when &lt;code&gt;org-indent&lt;/code&gt; is enabled, the block &#34;bracket&#34;, which uses the fringe area, is disabled.&lt;/p&gt; &#xA;&lt;p&gt;This small package approximately reproduces the block styling of &lt;code&gt;org-modern&lt;/code&gt; when using &lt;code&gt;org-indent&lt;/code&gt;. It can be used with or without &lt;code&gt;org-modern&lt;/code&gt;. Recent versions support &#34;bulk-indented&#34; blocks nested within lists:&lt;/p&gt; &#xA;&lt;img align=&#34;center&#34; width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/93749/224204382-091fcd76-3ad0-467e-9525-287ae80e93c6.png&#34;&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v0.1 features a complete re-write to use font-lock directly. This has a few benefits: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;No longer relies on org-mode face names for recognizing blocks, so &lt;code&gt;org-src-block-faces&lt;/code&gt; can have arbitrary faces applied, e.g. for different &lt;code&gt;src&lt;/code&gt; languages, as in the screenshot.&lt;/li&gt; &#xA;   &lt;li&gt;Eliminates the &#34;race&#34; between font-locking and applying the prefix text properties.&lt;/li&gt; &#xA;   &lt;li&gt;Enables in-text bracket decorations for &#34;bulk-indented&#34; blocks, for example blocks situated in an arbitrarily-nested plain list item.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package org-modern-indent&#xA;  :load-path &#34;~/code/emacs/org-modern-indent/&#34;&#xA;  ; or&#xA;  ; :straight (org-modern-indent :type git :host github :repo &#34;jdtsmith/org-modern-indent&#34;))&#xA;  :config ; add late to hook&#xA;  (add-hook &#39;org-mode-hook #&#39;org-modern-indent-mode 90))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, be sure to enable &lt;code&gt;org-indent&lt;/code&gt; (see the variable &lt;code&gt;org-startup-indented&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Hints&lt;/h2&gt; &#xA;&lt;h3&gt;Bulk-indented blocks (e.g. within lists):&lt;/h3&gt; &#xA;&lt;p&gt;Bulk-indented blocks have &#34;real&#34; (space/tab) indent applied and managed by org. This extra indentation is appled by org on &lt;em&gt;top&lt;/em&gt; of the (fake, prefix-based) indentation used by org-indent. To nest blocks properly within such indented content, e.g. in plain list items, you only have to begin the &lt;code&gt;#+begin&lt;/code&gt; at the same level as the list element&#39;s text.&lt;/p&gt; &#xA;&lt;p&gt;As an important principle, &lt;code&gt;org-modern-indent&lt;/code&gt; does not alter the contents of the text in your org documents, not even indentation. It just styles what is there. To help achieve proper block alignment, here are a few ways to alter blocks indentation using org and other commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start things right&lt;/strong&gt;: Hit return after your last line of text (e.g in a list item), then immediately hit &lt;code&gt;C-c C,&lt;/code&gt; to create the desired block. It will be indented at the right level: &lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;- This list item contains a:&#xA;    - sublist, which holds a block:&#xA;      [C-c C-,] here&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Move flush left&lt;/strong&gt;: Note: &lt;code&gt;M-{&lt;/code&gt; will get you to the start of a block quickly. &lt;code&gt;M-\&lt;/code&gt; at block start will move the block&#39;s first header line to column 0. Then &lt;code&gt;M-S-left&lt;/code&gt; (or &lt;code&gt;right&lt;/code&gt;) will indent the full block.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Indent rigidly&lt;/strong&gt;: &lt;code&gt;M-h&lt;/code&gt; selects the entire block. Then &lt;code&gt;C-x TAB&lt;/code&gt; enters &#34;rigid indent&#34; mode, after which left/right moves the entire block.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Re-indent a block&lt;/strong&gt;: If you have a block that is partially aligned, perhaps with a &#34;hanging end&#34;, like so: &lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;- List 1&#xA;    - List 2&#xA;      #+begin_src lang&#xA; &#x9;   foo_lang(x)&#xA;    #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; you can simply use &lt;code&gt;M-S-left/right&lt;/code&gt; at block start (or in fact anywhere on the block header/footer) to &lt;code&gt;org-indent-block&lt;/code&gt;. Note that &lt;code&gt;org-src-preserve-indentation=nil&lt;/code&gt; is an important setting, to allow org to (re-)indent blocks to respect the local indentation inside list and other elements. Also note that (from &lt;code&gt;org-indent-region&lt;/code&gt;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The function will not indent contents of example blocks, verse blocks and export blocks as leading white spaces are assumed to be significant there.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Font spacing&lt;/h3&gt; &#xA;&lt;p&gt;The default &lt;code&gt;fixed-pitch&lt;/code&gt; font (from which &lt;code&gt;org-meta-line&lt;/code&gt; inherits) has line spacing &amp;gt;1.0 on some systems. This will introduce gaps &lt;em&gt;even if your default font is changed&lt;/em&gt;, and &lt;code&gt;line-space&lt;/code&gt; is nil. To correct it, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-face-attribute &#39;fixed-pitch nil :family &#34;Hack&#34; :height 1.0) ; or whatever font family&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The bracket style&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like a different face than &lt;code&gt;org-meta-line&lt;/code&gt; for the &#34;bracket&#34;, configure the &lt;code&gt;org-modern-bracket-line&lt;/code&gt; face.&lt;/p&gt; &#xA;&lt;h3&gt;Related config&lt;/h3&gt; &#xA;&lt;p&gt;Optionally, if you want to use &lt;a href=&#34;https://github.com/minad/org-modern&#34;&gt;org-modern&lt;/a&gt; too (I do), a suggested config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package org-modern&#xA;  :ensure t&#xA;  :custom&#xA;  (org-modern-hide-stars nil)&#x9;&#x9;; adds extra indentation&#xA;  (org-modern-table nil)&#xA;  (org-modern-list &#xA;   &#39;(;; (?- . &#34;-&#34;)&#xA;     (?* . &#34;•&#34;)&#xA;     (?+ . &#34;‣&#34;)))&#xA;  :hook&#xA;  (org-mode . org-modern-mode)&#xA;  (org-agenda-finalize . org-modern-agenda))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also optional; use org-bullets instead for nicely aligned bullet stars.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package org-bullets-mode&#xA;  :ensure org-bullets&#xA;  :config&#xA;  :hook org-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minad/org-modern&#34;&gt;&lt;code&gt;org-modern&lt;/code&gt;&lt;/a&gt;: A modern org styling. Works best without org-indent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sabof/org-bullets&#34;&gt;&lt;code&gt;org-bullets&lt;/code&gt;&lt;/a&gt;: Unicode heading bullet replacement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/integral-dw/org-superstar-mode&#34;&gt;&lt;code&gt;org-superstar&lt;/code&gt;&lt;/a&gt;: Prettify headings and plain lists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rougier/nano-emacs&#34;&gt;&lt;code&gt;nano-emacs&lt;/code&gt;&lt;/a&gt;: Beautiful and simple SVG-based theme for much of emacs, including org.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/mind-wave</title>
    <updated>2023-03-13T01:33:47Z</updated>
    <id>tag:github.com,2023-03-13:/manateelazycat/mind-wave</id>
    <link href="https://github.com/manateelazycat/mind-wave" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs AI plugin based on ChatGPT API&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/manateelazycat/mind-wave/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mind-wave&lt;/h1&gt; &#xA;&lt;p&gt;mind-wave is an Emacs AI plugin developed using ChatGPT API, which can be deeply integrated into Emacs to improve its efficiency in various aspects.&lt;/p&gt; &#xA;&lt;p&gt;As mind-wave is developed based on multithreading technology, ChatGPT will not block Emacs during calculation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Register &lt;a href=&#34;https://platform.openai.com&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Obtain &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI API Key&lt;/a&gt;, and save the API Key to the &lt;code&gt;~/.emacs.d/mind-wave/chatgpt_api_key.txt&lt;/code&gt; file (Or set the environment variable OPENAI_API_KEY.).&lt;/li&gt; &#xA; &lt;li&gt;Install Python dependencies: &lt;code&gt;pip3 install openai epc sexpdata six&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;git clone&lt;/code&gt; to download this repository and replace the &lt;code&gt;load-path&lt;/code&gt; path in the configuration below.&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your configuration file &lt;code&gt;~/.emacs&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-mind-wave&amp;gt;&#34;)&#xA;&#xA;(require &#39;mind-wave)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Conversation Mode&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;test.chat&lt;/code&gt; file to automatically enter &lt;code&gt;mind-wave-chat-mode&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-chat-ask&lt;/code&gt; (press Ctrl + j), input your question, and wait for ChatGPT to respond.&lt;/li&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-chat-continue&lt;/code&gt; (press Ctrl + u) to continue the conversation.&lt;/li&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-chat-generate-title&lt;/code&gt; (press Ctrl + i) to generate a new title based on the content.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want to change the topic, create a new &lt;code&gt;*.chat&lt;/code&gt; file and continue asking ChatGPT questions.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-line Input&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways of inputting multi-line content:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-chat-ask-with-multiline&lt;/code&gt; (press Ctrl + Shift + j), input multiple questions, and wait for ChatGPT to respond.&lt;/li&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-chat-ask-insert-line&lt;/code&gt; to insert the &lt;code&gt;----- User ------&lt;/code&gt; separator, continue inputting multiple lines in the buffer, and finally execute &lt;code&gt;mind-wave-chat-ask-send-buffer&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Document mode&lt;/h3&gt; &#xA;&lt;p&gt;Selected Content:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-translate-to-english&lt;/code&gt;, ChatGPT will automatically replace the selected area with the translated content.&lt;/li&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-proofreading-doc&lt;/code&gt;, ChatGPT will automatically replace the selected area with the polished document.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Code Refactoring Mode&lt;/h3&gt; &#xA;&lt;p&gt;Move the cursor to the desired function for refactoring.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-refactory-code&lt;/code&gt;, ChatGPT will automatically split the screen to display the refactored code and suggestions for improvement on the right.&lt;/li&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-comment-code&lt;/code&gt;, ChatGPT will automatically split the screen to display code with comments on the right.&lt;/li&gt; &#xA; &lt;li&gt;Execute the command &lt;code&gt;mind-wave-explain-code&lt;/code&gt;, ChatGPT will automatically split the screen to display an explanation for the code on the right.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Summary Mode&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open a video website and execute the command &lt;code&gt;mind-wave-summary-video&lt;/code&gt;. ChatGPT will automatically retrieve the video subtitles and analyze the summary of the video (YouTube Transcript API installation is required).&lt;/li&gt; &#xA; &lt;li&gt;Open a text website and execute the command &lt;code&gt;mind-wave-summary-web&lt;/code&gt;. ChatGPT will automatically retrieve the core content of the webpage and analyze the summary of the webpage (nodejs-readability-cli installation is required).&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>