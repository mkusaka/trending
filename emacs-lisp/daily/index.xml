<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:34:02Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>misohena/el-easydraw</title>
    <updated>2023-03-05T01:34:02Z</updated>
    <id>tag:github.com,2023-03-05:/misohena/el-easydraw</id>
    <link href="https://github.com/misohena/el-easydraw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embedded drawing tool for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Emacs Easy Draw&lt;/p&gt; &#xA;&lt;p&gt;Emacs Easy Draw is a drawing tool that runs inside Emacs.&lt;/p&gt; &#xA;&lt;p&gt;[[file:./screenshot/edraw-screenshot.gif]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requirements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 27.2&lt;/li&gt; &#xA; &lt;li&gt;Image support&lt;/li&gt; &#xA; &lt;li&gt;SVG support&lt;/li&gt; &#xA; &lt;li&gt;gzip and gunzip(or zlib support)&lt;/li&gt; &#xA; &lt;li&gt;libxml support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use In Org-Mode - edraw-org.el ** Config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (with-eval-after-load &#39;org (require &#39;edraw-org) (edraw-org-setup-default)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;To start drawing, type &lt;del&gt;[​[edraw:]]&lt;/del&gt; and type =C-c C-o= on the link.&lt;/p&gt; &#xA;&lt;p&gt;Draw something and type =C-c C-c= and the data will be saved in the buffer.&lt;/p&gt; &#xA;&lt;p&gt;** Link Notation&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org [​[edraw:file=./example.edraw.svg]​]&lt;/p&gt; &#xA;&lt;p&gt;[​[edraw:data=&#xA; &lt;base64data&gt;&#xA;  ​]]&#xA; &lt;/base64data&gt;&lt;/p&gt; &#xA;&lt;p&gt;[​[*Example][edraw:file=./example.edraw.svg]​]&lt;/p&gt; &#xA;&lt;p&gt;[​[*Example][edraw:data=&#xA; &lt;base64data&gt;&#xA;  ]​] #+end_src&#xA; &lt;/base64data&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Inline Images&lt;/p&gt; &#xA;&lt;p&gt;To toggle the inline display mode, type =M-x edraw-org-link-image-mode=&lt;/p&gt; &#xA;&lt;p&gt;** Edit Image&lt;/p&gt; &#xA;&lt;p&gt;To edit the image, do one of the following on the link:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=M-x edraw-org-edit-link=&lt;/li&gt; &#xA; &lt;li&gt;=C-c C-o=&lt;/li&gt; &#xA; &lt;li&gt;Right click on image (The right-click menu also provides some other useful functions for links)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Export as HTML&lt;/p&gt; &#xA;&lt;p&gt;Customization Variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;edraw-org-export-html-data-tag :: HTML tag used to export data links. (svg or img)&lt;/li&gt; &#xA; &lt;li&gt;edraw-org-export-html-file-tag :: HTML tag used to export file links. (svg or img)&lt;/li&gt; &#xA; &lt;li&gt;edraw-org-export-html-use-viewbox :: Add viewBox= attribute to svg root elements when SVG export.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Link Properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;html-tag :: HTML tag used to export the link. (svg or img)&lt;/p&gt; &lt;p&gt;Example: #+begin_src org [[edraw:html-tag=img;data=&#xA;   &lt;base64data&gt;&#xA;    ]] #+end_src&#xA;   &lt;/base64data&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit a Single Edraw File - edraw-mode.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (autoload &#39;edraw-mode &#34;edraw-mode&#34;) (add-to-list &#39;auto-mode-alist &#39;(&#34;\.edraw\.svg$&#34; . edraw-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Setup later than other modes for .svg such as image-mode.&lt;/p&gt; &#xA;&lt;p&gt;Emacs Easy Draw can only handle a small subset of the SVG specification, but the files it outputs can be viewed in a browser or other software that can handle SVG.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of the key bindings are displayed in menus and help echoes.&lt;/p&gt; &#xA;&lt;p&gt;The key bindings that are not displayed are as follows.&lt;/p&gt; &#xA;&lt;p&gt;| left, up, right, down | Move selected object | | S-left, S-up, S-right, S-down | Move selected object (10px) | | M-left, M-up, M-right, M-down | Move selected object (numerical input) | | Right-click on shapes, anchor points, background, shape picker, or edraw links | Show context menu | | (Select Tool) C-down-mouse-1 | Add/Remove clicked shape to selection list | | (Path Tool) C-u down-mouse-1 | Ignore existing points (Avoid connecting or moving existing points) | | Middle-drag | Scroll | | C-wheel-up, C-wheel-down | Zoom | | (In Property Editor) Middle-click | Close window | | (In Shape Picker) Middle-click | Close window |&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs Lisp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following code is an example of inserting an editor into a buffer from Emacs Lisp.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;edraw)&lt;/p&gt; &#xA;&lt;p&gt;(progn (insert &#34; &#34;) (let ((editor (edraw-editor ;; Make an overlay that covers &#34; &#34; ;; &#39;evaporate means automatic deletion :overlay (let ((overlay (make-overlay (1- (point)) (point)))) (overlay-put overlay &#39;evaporate t) overlay) ;; Initial SVG :svg (let ((initial-svg (svg-create 400 300))) (dom-append-child initial-svg (dom-node &#39;g (list (cons &#39;id &#34;edraw-body&#34;)) ;; g#edraw-body is the edit target area (dom-node &#39;rect (list (cons &#39;x &#34;100&#34;) (cons &#39;y &#34;100&#34;) (cons &#39;width &#34;200&#34;) (cons &#39;height &#34;100&#34;) (cons &#39;fill &#34;blue&#34;))))) initial-svg) ;; Function called when saving :document-writer (lambda (svg &amp;amp;rest _) (pop-to-buffer &#34;&lt;em&gt;svg output&lt;/em&gt;&#34;) (erase-buffer) (edraw-svg-print svg nil &#39;edraw-svg-print-attr-filter 0)) ;; Add one item to the main menu :menu-filter (lambda (menu-type items &amp;amp;rest &lt;em&gt;) (pcase menu-type (&#39;main-menu (append items `(((edraw-msg &#34;Close&#34;) (lambda (editor) (edraw-close editor)))))) (&lt;/em&gt; items)))))) ;; Initialize editor (edraw-initialize editor) ;; Add key binding (overlay-put (edraw-overlay editor) &#39;keymap (let ((original-keymap (overlay-get (edraw-overlay editor) &#39;keymap)) (km (make-sparse-keymap))) (set-keymap-parent km original-keymap) (define-key km (kbd &#34;C-c C-c&#34;) (lambda () (interactive) (edraw-close (edraw-editor-at)))) km)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Color Picker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;edraw-color-picker.el contains a color picker library and some commands.&lt;/p&gt; &#xA;&lt;p&gt;Show color picker in minibuffer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(edraw-color-picker-read-color)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Insert the selected color into the buffer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(edraw-color-picker-insert-color)&lt;/li&gt; &#xA; &lt;li&gt;(edraw-color-picker-replace-color-at-point)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A function that opens a color picker near the point:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;edraw-color-picker-open-near-point&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A function that displays a color picker using an overlay:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;edraw-color-picker-overlay&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The core class of the color picker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;edraw-color-picker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+CAPTION: Show color picker in minibuffer [[file:./screenshot/color-picker-minibuffer.png]]&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: Show color picker inline [[file:./screenshot/color-picker-inline.png]]&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>andras-simonyi/citeproc-el</title>
    <updated>2023-03-05T01:34:02Z</updated>
    <id>tag:github.com,2023-03-05:/andras-simonyi/citeproc-el</id>
    <link href="https://github.com/andras-simonyi/citeproc-el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CSL 1.0.2 Citation Processor for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;citeproc-el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/andras-simonyi/citeproc-el/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/andras-simonyi/citeproc-el/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/citeproc&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/citeproc-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/citeproc&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/citeproc-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A CSL 1.0.2 Citation Processor for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#creating-a-citation-processor&#34;&gt;Creating a citation processor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#creating-citation-structures&#34;&gt;Creating citation structures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#managing-a-processors-citation-list-and-bibliography-items&#34;&gt;Managing a processor’s citation list and bibliography items&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#rendering-citations-and-bibliographies&#34;&gt;Rendering citations and bibliographies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#rendering-isolated-references&#34;&gt;Rendering isolated references&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#supported-output-formats&#34;&gt;Supported output formats&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#hooks&#34;&gt;Hooks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;citeproc-el is an Emacs Lisp library for rendering citations and bibliographies in styles described in the Citation Style Language (CSL), an XML-based, open format to describe the formatting of bibliographic references (see &lt;a href=&#34;http://citationstyles.org/&#34;&gt;http://citationstyles.org/&lt;/a&gt; for further information on CSL).&lt;/p&gt; &#xA;&lt;p&gt;The library implements most of the &lt;a href=&#34;http://docs.citationstyles.org/en/stable/specification.html&#34;&gt;CSL 1.0.2 specification&lt;/a&gt;, including such features as citation disambiguation, cite collapsing and subsequent author substitution, and passes more than 70% of the tests in the &lt;a href=&#34;https://github.com/citation-style-language/test-suite&#34;&gt;CSL Test Suite&lt;/a&gt;. In addition to the standard &lt;a href=&#34;https://github.com/citation-style-language/schema/raw/master/csl-data.json&#34;&gt;CSL-JSON&lt;/a&gt; data format, citeproc-el has rudimentary support for reading bibliographic data from BibTeX, biblatex and org-bibtex bibliographies and can produce output in several formats including HTML and org-mode markup (see &lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#supported-output-formats&#34;&gt;Supported output formats&lt;/a&gt; for the full list).&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Emacs 26 or later compiled with libxml2 support. (The library is regularly tested on Emacs 26.3, 27.2 and 28.1.)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;citeproc-el is available in the &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA package repository&lt;/a&gt; and can be installed using Emacs’s built-in package manager, &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The central use-case of citeproc-el is that of feeding all citations occurring in a document into a citation processor and rendering the complete list of references and bibliography with it. This requires&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;creating a citation processor object,&lt;/li&gt; &#xA; &lt;li&gt;collecting the document’s citations into a list of citation structures,&lt;/li&gt; &#xA; &lt;li&gt;loading this list into the processor, and&lt;/li&gt; &#xA; &lt;li&gt;rendering the loaded citations and the corresponding bibliography with the processor in one of the supported formats.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Creating a citation processor&lt;/h3&gt; &#xA;&lt;p&gt;Citation processor objects are created using the &lt;code&gt;citeproc-create&lt;/code&gt; function (the signature of which was inspired by the &lt;a href=&#34;https://github.com/Juris-M/citeproc-js&#34;&gt;citeproc-js&lt;/a&gt; API):&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-create &lt;code&gt;(style item-getter locale-getter &amp;amp;optional locale force-locale)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;style&lt;/code&gt; is a CSL style file (e.g., &lt;code&gt;&#34;/usr/local/csl_styles/chicago-author-date.csl&#34;&lt;/code&gt;) to use for rendering the references;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;item-getter&lt;/code&gt; is function that takes a list of bibliographic item id strings as its sole argument and returns an alist in which the given item ids are the keys and the values are the &lt;a href=&#34;https://github.com/citation-style-language/schema/raw/master/csl-data.json&#34;&gt;CSL-JSON&lt;/a&gt; descriptions of the corresponding bibliography items as parsed by Emacs’s built in JSON parser (keys are symbols, arrays and hashes should be represented as lists and alists, respectively);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;locale-getter&lt;/code&gt; is a function that takes a CSL locale tag (e.g., &lt;code&gt;&#34;fr-FR&#34;&lt;/code&gt;) as an argument and returns a corresponding CSL locale as parsed by Emacs’s &lt;code&gt;libxml-parse-xml-region&lt;/code&gt;function or &lt;code&gt;nil&lt;/code&gt;, with the exception of the default &lt;code&gt;&#34;en-US&#34;&lt;/code&gt; argument for which it must return the corresponding parsed locale (&lt;code&gt;nil&lt;/code&gt; is not allowed);&lt;/li&gt; &#xA; &lt;li&gt;the optional &lt;code&gt;locale&lt;/code&gt; is the CSL locale tag to use if the style doesn’t specify a default one (defaults to &lt;code&gt;&#34;en-US&#34;&lt;/code&gt;); and&lt;/li&gt; &#xA; &lt;li&gt;if the optional &lt;code&gt;force-locale&lt;/code&gt; is non-nil then the specified &lt;code&gt;locale&lt;/code&gt; is used even if the given &lt;code&gt;style&lt;/code&gt; specifies a different one as default.&lt;/li&gt; &#xA; &lt;li&gt;Returns a citation processor with an empty citation list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;citeproc-el integrators are free to implement their own special item-getter and locale-getter functions (e.g., to provide item descriptions and locales from a centralized source on a network) but citeproc-el provides some convenience functions to create typical item- and locale-getters:&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-itemgetter-from-csl-json &lt;code&gt;(file)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;citeproc-hash-itemgetter-from-csl-json &lt;code&gt;(file)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Both functions return an item-getter function getting bibliography item descriptions from a &lt;a href=&#34;https://github.com/citation-style-language/schema/raw/master/csl-data.json&#34;&gt;CSL-JSON&lt;/a&gt; file. The difference between them is that an item-getter produced by &lt;code&gt;citeproc-itemgetter-from-csl-json&lt;/code&gt; opens and reads directly from &lt;code&gt;file&lt;/code&gt; each time it is called, while &lt;code&gt;citeproc-hash-itemgetter-from-csl-json&lt;/code&gt; reads the content of &lt;code&gt;file&lt;/code&gt; into a hash-table and the created function reads item descriptions from this hash-table when called. As a consequence, functions created with &lt;code&gt;citeproc-hash-itemgetter-from-csl-json&lt;/code&gt; can perform better but ignore changes in &lt;code&gt;file&lt;/code&gt; between calls.&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-itemgetter-from-bibtex &lt;code&gt;(file-or-files)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;citeproc-itemgetter-from-org-bibtex &lt;code&gt;(file-or-files)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return an item-getter function getting bibliography item descriptions from BibTeX/org-bibtex files. Similarly to &lt;code&gt;citeproc-itemgetter-from-csl-json&lt;/code&gt;, these functions open and read directly from the specified files each time they are called.&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-hash-itemgetter-from-any &lt;code&gt;(file-or-files &amp;amp;optional no-sentcase-wo-langid)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a getter for &lt;code&gt;file-or-files&lt;/code&gt; in any supported format. The format is determined on the basis of file extensions. Supported formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CSL-JSON (.json extension) the recommended native format;&lt;/li&gt; &#xA; &lt;li&gt;BibTeX/biblatex (.bib or .bibtex extension),&lt;/li&gt; &#xA; &lt;li&gt;org-bibtex (.org extension).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If &lt;code&gt;no-sentcase-wo-langid&lt;/code&gt; is non-nil then title fields in items without a `langid&#39; field are not converted to sentence-case.&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-locale-getter-from-dir &lt;code&gt;(directory)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a locale-getter function getting CSL locales from &lt;code&gt;directory&lt;/code&gt;. The directory must contain the CSL locale files under their canonical names (as found at the &lt;a href=&#34;https://github.com/citation-style-language/locales&#34;&gt;Official CSL locale repository&lt;/a&gt;), and must contain at least the default &lt;code&gt;en-US&lt;/code&gt; locale file.&lt;/p&gt; &#xA;&lt;h3&gt;Creating citation structures&lt;/h3&gt; &#xA;&lt;p&gt;Citation structures are created with&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-citation-create &lt;code&gt;(&amp;amp;key cites note-index mode suppress-affixes capitalize-first ignore-et-al) &lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cites&lt;/code&gt; is a list of alists describing cites. Each alist must contain the &lt;code&gt;id&lt;/code&gt; symbol as key coupled with an item id string as value, and can optionally contain additional information with the symbol keys &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;suffix&lt;/code&gt;, &lt;code&gt;locator&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt; (all with string values);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;note-index&lt;/code&gt; is the note index of the citation if it occurs in a note and &lt;code&gt;nil&lt;/code&gt; otherwise;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode&lt;/code&gt; is either nil (for the default citation mode) or one of the symbols &lt;code&gt;suppress-author&lt;/code&gt;, &lt;code&gt;textual&lt;/code&gt;, &lt;code&gt;author-only&lt;/code&gt;, &lt;code&gt;year-only&lt;/code&gt;, &lt;code&gt;title-only&lt;/code&gt;, &lt;code&gt;locator-only&lt;/code&gt;, &lt;code&gt;bib-entry&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suppress-affixes&lt;/code&gt; is non-nil if the prefix and the suffix of the citation (e.g., opening and closing brackets) have to be suppressed;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;capitalize-first&lt;/code&gt; is non-nil if the first word of the citation has to be capitalized;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-et-al&lt;/code&gt; is non-nil if et-al settings should be ignored for the first cite.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Managing a processor’s citation list and bibliography items&lt;/h3&gt; &#xA;&lt;p&gt;Processor objects maintain lists of citations and bibliography items, which can be manipulated with the following functions:&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-append-citations &lt;code&gt;(citations proc)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Append &lt;code&gt;citations&lt;/code&gt;, a list of citation structures, to the citation list of citation processor &lt;code&gt;proc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-add-uncited &lt;code&gt;(itemids proc)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add uncited bib items with &lt;code&gt;itemids&lt;/code&gt; to &lt;code&gt;proc&lt;/code&gt;. As an extension, an itemid can be the string &#34;*&#34; which has the effect of adding all items available in the itemgetter.&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-add-subbib-filters &lt;code&gt;(filters proc)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add sub-bibliography &lt;code&gt;filters&lt;/code&gt; to &lt;code&gt;proc&lt;/code&gt;. &lt;code&gt;filters&lt;/code&gt; should be a list of alists containing symbol keys and string values, each pair describing an atomic condition to be satisified by the printed entries. The following keys are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: print only entries of the given type. Type is the bib(la)tex entry type if available, otherwise the CSL type is used as fallback;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nottype&lt;/code&gt;: print only entries not of the given type. Type is the bib(la)tex entry type if available, otherwise the CSL type is used as fallback;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;csltype&lt;/code&gt;, &lt;code&gt;notcsltype&lt;/code&gt;: same as &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;nottype&lt;/code&gt; but uses the entries&#39; CSL type even if the bib(la)tex type is also available;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keyword&lt;/code&gt;: print only entries with the given keyword;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notkeyword&lt;/code&gt;: print only entries without the given keyword;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: print only entries for which the function named by the key returns a non-nil value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;citeproc-clear &lt;code&gt;(proc)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Clear the citation and bibliography lists of citation processor &lt;code&gt;proc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rendering citations and bibliographies&lt;/h3&gt; &#xA;&lt;h4&gt;citeproc-render-citations &lt;code&gt;(proc format &amp;amp;optional internal-links)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Render all citations in citation processor &lt;code&gt;proc&lt;/code&gt; in the given &lt;code&gt;format&lt;/code&gt;. Return a list of formatted citations. &lt;code&gt;format&lt;/code&gt; is one of the &lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#supported-output-formats&#34;&gt;supported output formats&lt;/a&gt; as a symbol.&lt;/p&gt; &#xA;&lt;p&gt;If the optional &lt;code&gt;internal-links&lt;/code&gt; is &lt;code&gt;bib-links&lt;/code&gt; then link cites to the bibliography regardless of the style type, if &lt;code&gt;no-links&lt;/code&gt; then don&#39;t add internal links, if nil or &lt;code&gt;auto&lt;/code&gt; then add internal links based on the style type (cite-cite links for note styles and cite-bib links else). For legacy reasons, any other value is treated as &lt;code&gt;no-links&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-render-bib &lt;code&gt;(proc format &amp;amp;optional internal-links no-external-links bib-formatter-fun)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Render a bibliography of the citations in citation processor &lt;code&gt;proc&lt;/code&gt; in the given&lt;code&gt;format&lt;/code&gt;. &lt;code&gt;format&lt;/code&gt; is one of the &lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#supported-output-formats&#34;&gt;supported output formats&lt;/a&gt; as a symbol.&lt;/p&gt; &#xA;&lt;p&gt;For the optional &lt;code&gt;internal-links&lt;/code&gt; argument see &lt;code&gt;citeproc-render-citations&lt;/code&gt;. If the optional &lt;code&gt;no-external-links&lt;/code&gt; is non-nil then don&#39;t generate external links. If the optional &lt;code&gt;bib-formatter-fun&lt;/code&gt; is given then it will be used to join the bibliography items instead of the content of the chosen formatter’s &lt;code&gt;bib&lt;/code&gt; slot (see the documentation of the &lt;code&gt;citeproc-formatter&lt;/code&gt; structure type for details).&lt;/p&gt; &#xA;&lt;p&gt;Returns a &lt;code&gt;(FORMATTED-BIBLIOGRAPHY . FORMATTING-PARAMETERS)&lt;/code&gt; pair, in which &lt;code&gt;FORMATTED-BIBLIOGRAPHY&lt;/code&gt; is either a single bibliography or a list of sub-bibliograhies if filters were added to the processor, and &lt;code&gt;FORMATTING-PARAMETERS&lt;/code&gt; is an alist containing the values of the following formatting parameters keyed to the parameter names as symbols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;max-offset&lt;/code&gt; (integer): The width of the widest first field in the bibliography, measured in characters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;line-spacing&lt;/code&gt; (integer): Vertical line distance specified as a multiple of standard line height.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;entry-spacing&lt;/code&gt; (integer): Vertical distance between bibliographic entries, specified as a multiple of standard line height.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;second-field-align&lt;/code&gt; (&lt;code&gt;flush&lt;/code&gt; or &lt;code&gt;margin&lt;/code&gt;): The position of second-field alignment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hanging-indent&lt;/code&gt; (boolean): Whether the bibliography items should be rendered with hanging-indents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rendering isolated references&lt;/h3&gt; &#xA;&lt;p&gt;Reference rendering is typically context-dependent, as the rendered form can depend on the position of the reference and the presence of other references may make it necessary to add disambiguating information. Since computing the context-dependent form might be too time-consuming or unnecessary for some applications (e.g., for generating previews), citeproc-el provides functions to render isolated references.&lt;/p&gt; &#xA;&lt;p&gt;Isolated rendering requires only the creation of a &lt;code&gt;citeproc-style&lt;/code&gt; object (as opposed to a full-blown citation processor) with the function&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-create-style &lt;code&gt;(style locale-getter &amp;amp;optional locale force-locale)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a newly created &lt;code&gt;citeproc-style&lt;/code&gt; object. See the documentation of &lt;a href=&#34;https://raw.githubusercontent.com/andras-simonyi/citeproc-el/master/#citeproc-create-style-item-getter-locale-getter-optional-locale-force-locale&#34;&gt;citeproc-create&lt;/a&gt; for the description of the arguments.&lt;/p&gt; &#xA;&lt;p&gt;After the creation of a style object references can be rendered by&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-render-item &lt;code&gt;(item-data style mode format &amp;amp;optional no-external-links)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Render an item described by &lt;code&gt;item-data&lt;/code&gt; with &lt;code&gt;style&lt;/code&gt;. &lt;code&gt;item-data&lt;/code&gt; is the parsed form of a bibliographic item description in &lt;a href=&#34;https://github.com/citation-style-language/schema/raw/master/csl-data.json&#34;&gt;CSL-JSON&lt;/a&gt; format, &lt;code&gt;style&lt;/code&gt; is a &lt;code&gt;citeproc-style&lt;/code&gt; style object, &lt;code&gt;mode&lt;/code&gt; is one of the symbols &lt;code&gt;bib&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt; is a supported output format (see next section) as a symbol. If the optional &lt;code&gt;no-external-links&lt;/code&gt; is non-nil then don&#39;t generate external links in the item.&lt;/p&gt; &#xA;&lt;h3&gt;Supported output formats&lt;/h3&gt; &#xA;&lt;p&gt;Currently &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;org&lt;/code&gt;, &lt;code&gt;plain&lt;/code&gt; (plain text), &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;org-odt&lt;/code&gt;, &lt;code&gt;org-latex&lt;/code&gt; (for Org ODT and LaTeX export), &lt;code&gt;csl-test&lt;/code&gt; (for the CSL test suite) and &lt;code&gt;raw&lt;/code&gt; (internal rich-text format, for debugging) are supported as output formats. New ones can easily be added — see &lt;code&gt;citeproc-formatters.el&lt;/code&gt; for examples.&lt;/p&gt; &#xA;&lt;h3&gt;Hooks&lt;/h3&gt; &#xA;&lt;p&gt;citeproc-el provides the following hook variables:&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-citation-postprocess-functions&lt;/h4&gt; &#xA;&lt;p&gt;A list of functions to postprocess rendered citations. Each function takes a single argument, a rich-text, and returns a post-processed rich-text value. The functions are applied in the order they appear in the list.&lt;/p&gt; &#xA;&lt;h4&gt;citeproc-name-postprocess-functions&lt;/h4&gt; &#xA;&lt;p&gt;A list of functions to postprocess rendered names. Each function takes three arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the rich-text rendering of a name to be postprocessed,&lt;/li&gt; &#xA; &lt;li&gt;the rendered name as an alist with CSL name-part keys (&lt;code&gt;family&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt; etc.), and&lt;/li&gt; &#xA; &lt;li&gt;the rendering context, as a &lt;code&gt;citeproc-context&lt;/code&gt; structure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The output of each function should be the postprocessed rich-text, and the functions are applied in the order they appear in the list.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;h3&gt;Code contributions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Quintus&#34;&gt;Marvin Gülker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/titaniumbones&#34;&gt;Matt Price&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ashiklom&#34;&gt;Alexey Shiklomanov&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advice, discussion&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/salutis&#34;&gt;Rudolf Adamkovič&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bdarcus&#34;&gt;Bruce D&#39;Arcus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Quintus&#34;&gt;Marvin Gülker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denismaier&#34;&gt;Denis Maier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/titaniumbones&#34;&gt;Matt Price&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2018-2022 András Simonyi&lt;/p&gt; &#xA;&lt;p&gt;Authors: András Simonyi&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>