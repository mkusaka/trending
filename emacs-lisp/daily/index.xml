<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-01T01:35:24Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ronisbr/doom-nano-modeline</title>
    <updated>2023-03-01T01:35:24Z</updated>
    <id>tag:github.com,2023-03-01:/ronisbr/doom-nano-modeline</id>
    <link href="https://github.com/ronisbr/doom-nano-modeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modeline for Doom Emacs based on N Λ N O Modeline&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Doom N Λ N O Modeline&lt;/h1&gt; &#xA;&lt;p&gt;This package contains an attempt to port &lt;a href=&#34;https://github.com/rougier/nano-modeline&#34;&gt;N Λ N O Modeline&lt;/a&gt; to Doom Emacs. It has the same design principle as the original one, but adapted to work correctly with Doom Emacs and Evil mode.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This package is not in MELPA yet. The recommended way to install it is using &lt;code&gt;use-package&lt;/code&gt; as follows.&lt;/p&gt; &#xA;&lt;p&gt;Add the following code in your &lt;code&gt;packages.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! doom-nano-modeline&#xA;  :recipe (:host github&#xA;  :repo &#34;ronisbr/doom-nano-modeline&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the following code in you &lt;code&gt;config.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package! doom-nano-modeline&#xA;  :config&#xA;  (doom-nano-modeline-mode 1)&#xA;  (global-hide-mode-line-mode 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also recommended to disable the module &lt;code&gt;modeline&lt;/code&gt; in the section &lt;code&gt;ui&lt;/code&gt; of your &lt;code&gt;init.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshot&lt;/h1&gt; &#xA;&lt;p&gt;The following image shows a screenshot of Doom Emacs using this package with the Doom N Λ N O theme.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ronisbr/doom-nano-modeline/main/screenshots/screenshot_01.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;The package provides some faces to customize its design. Check the available options under the group name &lt;code&gt;doom-nano-modeline-&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing major modes&lt;/h3&gt; &#xA;&lt;p&gt;If you want to customize the modeline in a particular mode, you need to add a new entry to the variable &lt;code&gt;doom-nano-modeline-mode-formats&lt;/code&gt;. This new entry must be a property list with the following entries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mode-p&lt;/code&gt; (&lt;strong&gt;REQUIRED&lt;/strong&gt;): A function that returns &lt;code&gt;t&lt;/code&gt; if the are in the desired mode or &lt;code&gt;nil&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;format&lt;/code&gt; (&lt;strong&gt;REQUIRED&lt;/strong&gt;): A function that returns the decorated string to be rendered in the modeline. Check the helper function &lt;code&gt;doom-nano-modeline--render&lt;/code&gt; that provides an easier interface to create this string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;on-activate&lt;/code&gt; (&lt;strong&gt;OPTIONAL&lt;/strong&gt;): A function that will be run when the modeline is loaded.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;on-inactivate&lt;/code&gt; (&lt;strong&gt;OPTIONAL&lt;/strong&gt;): A functions that will be run when the modeline is deactivated.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jkfurtney/itasca-emacs</title>
    <updated>2023-03-01T01:35:24Z</updated>
    <id>tag:github.com,2023-03-01:/jkfurtney/itasca-emacs</id>
    <link href="https://github.com/jkfurtney/itasca-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs modes for editing Itasca software data files.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/itasca&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/itasca-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Emacs modes for editing Itasca software data files.&lt;/h2&gt; &#xA;&lt;p&gt;FLAC FLAC3D UDEC 3DEC PFC &lt;a href=&#34;http://www.itascacg.com/software&#34;&gt;www.itascacg.com/software&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are a vim user see: &lt;a href=&#34;https://github.com/juanpabloaj/vim-fish&#34;&gt;https://github.com/juanpabloaj/vim-fish&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are a Sublime text 2 user see: &lt;a href=&#34;https://github.com/juanpabloaj/sublime-itasca-fish&#34;&gt;https://github.com/juanpabloaj/sublime-itasca-fish&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation via the Emacs packaging system&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;itasca&lt;/code&gt; package is available via MELPA: &lt;a href=&#34;http://melpa.org/&#34;&gt;http://melpa.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;p&gt;Copy &lt;code&gt;itasca.el&lt;/code&gt; somewhere on the Emacs &lt;code&gt;load-path&lt;/code&gt; and add &lt;code&gt;(require &#39;itasca)&lt;/code&gt; to your Emacs configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;About&lt;/h3&gt; &#xA;&lt;p&gt;This package defines Emacs major modes for editing Itasca software data files. The focus is on making FISH programming easier. Code specific keyword and FISH intrinsic highlighting is provided along with indenting and code navigation support.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;file extension(s)&lt;/th&gt; &#xA;   &lt;th&gt;mode&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.dat .fis .fin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;itasca-general-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.fdat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;itasca-flac-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.f3dat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;itasca-flac3d-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.udat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;itasca-udec-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.pdat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;itasca-pfc-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.p3dat .p2dat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;itasca-pfc5-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.3ddat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;itasca-3dec-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;itasca-general-mode&lt;/code&gt; does not have any code-specific keyword/FISH highlighting. To associate a specific file extension with a specific mode (for example to open all .dat files in &lt;code&gt;itasca-flac-mode&lt;/code&gt;) use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.dat$&#39;&#34; . itasca-flac-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set the mode on a per-file basis: put a comment in the following form at the top of the file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; -*- mode: itasca-general -*-&#xA;;; -*- mode: itasca-flac -*-&#xA;;; -*- mode: itasca-flac3d -*-&#xA;;; -*- mode: itasca-pfc -*-&#xA;;; -*- mode: itasca-pfc5 -*-&#xA;;; -*- mode: itasca-udec -*-&#xA;;; -*- mode: itasca-3dec -*-&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code navigation&lt;/h3&gt; &#xA;&lt;p&gt;These modes provide support for navigation by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-.&lt;/code&gt; Jump to the definition of the FISH function at point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;beginning-of-defun&lt;/code&gt; &lt;code&gt;C-M-a&lt;/code&gt; Jump to the beginning of the current FISH function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;end-of-defun&lt;/code&gt; &lt;code&gt;C-M-e&lt;/code&gt; Jump to the end of the current FISH function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;imenu&lt;/code&gt; Support for jumping to FISH function definitions via an interactive menu.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Indentation&lt;/h3&gt; &#xA;&lt;p&gt;Tab indents a line of FISH code to the appropriate depth. &lt;code&gt;indent-region&lt;/code&gt; &lt;code&gt;C-M-\&lt;/code&gt; also works.&lt;/p&gt; &#xA;&lt;h3&gt;Yasnippet expansions&lt;/h3&gt; &#xA;&lt;p&gt;A set of templates for common FISH programming structures is provided. This requires the &lt;code&gt;yasnippet&lt;/code&gt; package. Copy the snippets to a location where yasnippet can find them or add something like this to your Emacs configuration file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq yas/snippet-dirs &#39;(&#34;c:/src/itasca-emacs/snippets&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Auto-complete mode&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;auto-complete-mode&lt;/code&gt; installed FISH function names will be auto-completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;auto-complete-config)&#xA;(ac-config-default)&#xA;&#xA;(add-to-list &#39;ac-dictionary-directories &#34;c:/src/itasca-emacs/ac-dict&#34;)&#xA;&#xA;(progn&#xA;  (add-to-list &#39;ac-modes &#39;itasca-general-mode)&#xA;  (add-to-list &#39;ac-modes &#39;itasca-pfc-mode)&#xA;  (add-to-list &#39;ac-modes &#39;itasca-pfc5-mode)&#xA;  (add-to-list &#39;ac-modes &#39;itasca-flac-mode)&#xA;  (add-to-list &#39;ac-modes &#39;itasca-flac3d-mode)&#xA;  (add-to-list &#39;ac-modes &#39;itasca-udec-mode)&#xA;  (add-to-list &#39;ac-modes &#39;itasca-3dec-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure Yasnippet and auto-complete after installing from &lt;code&gt;melpa&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you installed this package from &lt;code&gt;melpa&lt;/code&gt; use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq itasca-pkg-dir&#xA;      (if (package-installed-p &#39;itasca)&#xA;          (file-name-as-directory&#xA;           (package-desc-dir (cadr (assq &#39;itasca package-alist))))&#xA;          (error &#34;itasca package not installed&#34;)))&#xA;&#xA;(add-to-list &#39;yas/snippet-dirs (concat itasca-pkg-dir &#34;snippets&#34;))&#xA;(add-to-list &#39;ac-dictionary-directories (concat itasca-pkg-dir &#34;ac-dict&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>