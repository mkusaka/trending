<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-27T01:35:09Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jorgenschaefer/emacs-buttercup</title>
    <updated>2022-10-27T01:35:09Z</updated>
    <id>tag:github.com,2022-10-27:/jorgenschaefer/emacs-buttercup</id>
    <link href="https://github.com/jorgenschaefer/emacs-buttercup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Behavior-Driven Emacs Lisp Testing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Buttercup — Behavior-Driven Emacs Lisp Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jorgenschaefer/emacs-buttercup/actions?query=workflow%3A%22Build+and+test%22+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/jorgenschaefer/emacs-buttercup/workflows/Build%20and%20test/badge.svg?sanitize=true&#34; alt=&#34;Build and test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/buttercup&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/buttercup-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jorgenschaefer/emacs-buttercup/master/docs/images/buttercup.jpg&#34; alt=&#34;Ranculus repens, photo by sannse&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Buttercup is a behavior-driven development framework for testing Emacs Lisp code. It allows to group related tests so they can share common set-up and tear-down code, and allows the programmer to “spy” on functions to ensure they are called with the right arguments during testing.&lt;/p&gt; &#xA;&lt;p&gt;The framework is heavily inspired by &lt;a href=&#34;https://jasmine.github.io/edge/introduction.html&#34;&gt;Jasmine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Full article: &lt;a href=&#34;https://raw.githubusercontent.com/jorgenschaefer/emacs-buttercup/master/docs/writing-tests.md&#34;&gt;Writing Tests&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple test looks like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lisp&#34;&gt;(describe &#34;A suite&#34;&#xA;  (it &#34;contains a spec with an expectation&#34;&#xA;    (expect t :to-be t)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Full article: &lt;a href=&#34;https://raw.githubusercontent.com/jorgenschaefer/emacs-buttercup/master/docs/running-tests.md&#34;&gt;Running Tests&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install buttercup from &lt;a href=&#34;http://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt;. Add the following to your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives&#xA;             &#39;(&#34;melpa-stable&#34; . &#34;http://stable.melpa.org/packages/&#34;) t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should allow you to &lt;code&gt;M-x package-install RET buttercup RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.10 or later may simply &lt;code&gt;apt-get install elpa-buttercup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now create a file called &lt;code&gt;test-feature.el&lt;/code&gt; with these contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lisp&#34;&gt;(describe &#34;A suite&#34;&#xA;  (it &#34;contains a spec with an expectation&#34;&#xA;    (expect t :to-be t)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now use buttercup to run this test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ emacs -batch -f package-initialize -L . -f buttercup-run-discover&#xA;Running 1 specs.&#xA;&#xA;A suite&#xA;  contains a spec with an expectation&#xA;&#xA;Ran 1 specs, 0 failed, in 0.0 seconds.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations, you ran your first test!&lt;/p&gt; &#xA;&lt;h2&gt;Feature List&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shared set-up and tear-down sections to reduce code repetition and share a common environment among tests.&lt;/li&gt; &#xA; &lt;li&gt;Easy to read and extensible &lt;code&gt;expect&lt;/code&gt; macro to describe expected behavior.&lt;/li&gt; &#xA; &lt;li&gt;Powerful mocking framework, called “spies,” to both cause them to return expected values or throw errors as needed by the test, as well as to ensure functions are called with expected arguments during tests.&lt;/li&gt; &#xA; &lt;li&gt;Built to be run within a Continuous Integration environment, including test runners to discover and execute tests in a directory tree.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why not ERT?&lt;/h3&gt; &#xA;&lt;p&gt;Emacs comes with a testing framework, &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_mono/ert.html&#34;&gt;ERT&lt;/a&gt;. Buttercup was written to address some shortcomings of that framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ERT &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_mono/ert.html#Fixtures-and-Test-Suites&#34;&gt;deliberately leaves it up to the programmer to define set-up and tear-down code&lt;/a&gt;, which requires a lot of boiler-plate code for every set-up function. Buttercup makes this easy and seamless.&lt;/li&gt; &#xA; &lt;li&gt;ERT has no good way of being run in a continuous integration environment. There are &lt;a href=&#34;https://github.com/rejeep/ert-runner.el&#34;&gt;external projects to make this less of a pain&lt;/a&gt; instead. Once all is said and done, you installed six external packages your project does not need just to run your own tests. And that does not include a mocking library.&lt;/li&gt; &#xA; &lt;li&gt;ERT has no way of grouping related tests, requiring every test name to share the same prefix, making names long and hard to read.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nonetheless, ERT is a great project. It introduced testing to Emacs, and Buttercup learned a lot from its code to record a stack trace for error display. Even though Buttercup tries to be a better testing framework than ERT, we do wish ERT and the ERT maintainers all the best and hope both frameworks can continue to benefit from each other.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redguardtoo/evil-nerd-commenter</title>
    <updated>2022-10-27T01:35:09Z</updated>
    <id>tag:github.com,2022-10-27:/redguardtoo/evil-nerd-commenter</id>
    <link href="https://github.com/redguardtoo/evil-nerd-commenter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Comment/uncomment lines efficiently. Like Nerd Commenter in Vim&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;evil-nerd-commenter [[https://github.com/redguardtoo/evil-nerd-commenter/actions/workflows/test.yml][https://github.com/redguardtoo/evil-nerd-commenter/actions/workflows/test.yml/badge.svg]] [[https://elpa.nongnu.org/nongnu/evil-nerd-commenter.html][file:https://elpa.nongnu.org/nongnu/evil-nerd-commenter.svg]] [[http://melpa.org/#/evil-nerd-commenter][file:http://melpa.org/packages/evil-nerd-commenter-badge.svg]] [[http://stable.melpa.org/#/evil-nerd-commenter][file:http://stable.melpa.org/packages/evil-nerd-commenter-badge.svg]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This program can be used &lt;em&gt;WITHOUT&lt;/em&gt; [[https://www.emacswiki.org/emacs/Evil][evil-mode]]!&lt;/p&gt; &#xA;&lt;p&gt;A [[http://www.vim.org/scripts/script.php?script_id=1218][Nerd Commenter]] emulation, help you comment code efficiently. For example, you can press &#34;99,ci&#34; to comment out 99 lines.&lt;/p&gt; &#xA;&lt;p&gt;I recommend using it with Evil though Evil is optional.&lt;/p&gt; &#xA;&lt;p&gt;Tested on Emacs 25, 26, 27, 28&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why? ** A simple use case on the efficiency The old way to comment out 9 lines is =C-space M-9 C-n M-;= (&#34;M-;&#34; is the default key binding of =comment-dwim=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this package&#39;s help, you can press &#34;M-9 M-;&#34; or &#34;,,9j&#34; or &#34;9,ci&#34; instead. It&#39;s much faster because you donot need mark any text first!&lt;/p&gt; &#xA;&lt;p&gt;demo:&lt;/p&gt; &#xA;&lt;p&gt;[[https://raw.github.com/redguardtoo/evil-nerd-commenter/master/evil-nerd-commenter-demo.gif]] ** It fixes Emacs bug for you Long-term support is provided for &lt;em&gt;ANY programming language&lt;/em&gt;. Here is an example to fix [[https://github.com/redguardtoo/evil-nerd-commenter/issues/3][a bug in autoconf.el]].&lt;/p&gt; &#xA;&lt;p&gt;** Perfect integration with org-mode The code snippet embedded in org file is automatically detected and &lt;em&gt;correct&lt;/em&gt; comment syntax will be used!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install This package is already uploaded to [[http://melpa.org]]. The best way to install is Emacs package manager.&lt;/li&gt; &#xA; &lt;li&gt;Setup Please note NO key bindings are setup automatically. You need use following ways to setup key bindings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note v3.2.1 is the last version supporting Emacs 24.3. ** Use recommended key bindings Insert =(evilnc-default-hotkeys)= into =~/.emacs= to use key bindings preset for both evil and non-evil mode. This is recommended way.&lt;/p&gt; &#xA;&lt;p&gt;Use =(evilnc-default-hotkeys t)= to use key binding only for non-evil mode if you want to define key bindings in evil-mode by yourself.&lt;/p&gt; &#xA;&lt;p&gt;Use =(evilnc-default-hotkeys nil t)= to use key binding only for evil mode if you want to define key bindings in Emacs mode by yourself. ** Use evil-leader instead Install [[https://github.com/cofi/evil-leader][evil-leader according to its README]].&lt;/p&gt; &#xA;&lt;p&gt;Insert following code into you =~/.emacs=, #+BEGIN_SRC elisp ;; Emacs key bindings (global-set-key (kbd &#34;M-;&#34;) &#39;evilnc-comment-or-uncomment-lines) (global-set-key (kbd &#34;C-c l&#34;) &#39;evilnc-quick-comment-or-uncomment-to-the-line) (global-set-key (kbd &#34;C-c c&#34;) &#39;evilnc-copy-and-comment-lines) (global-set-key (kbd &#34;C-c p&#34;) &#39;evilnc-comment-or-uncomment-paragraphs)&lt;/p&gt; &#xA;&lt;p&gt;;; Vim key bindings (require &#39;evil-leader) (global-evil-leader-mode) (evil-leader/set-key &#34;ci&#34; &#39;evilnc-comment-or-uncomment-lines &#34;cl&#34; &#39;evilnc-quick-comment-or-uncomment-to-the-line &#34;ll&#34; &#39;evilnc-quick-comment-or-uncomment-to-the-line &#34;cc&#34; &#39;evilnc-copy-and-comment-lines &#34;cp&#34; &#39;evilnc-comment-or-uncomment-paragraphs &#34;cr&#34; &#39;comment-or-uncomment-region &#34;cv&#34; &#39;evilnc-toggle-invert-comment-line-by-line &#34;.&#34; &#39;evilnc-copy-and-comment-operator &#34;\&#34; &#39;evilnc-comment-operator ; if you prefer backslash key ) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Assign key bindings manually Manual setup is necessary for certain major modes (matlab-mode, for example)&lt;/p&gt; &#xA;&lt;p&gt;Here is the minimum setup, #+begin_src elisp (defun matlab-mode-hook-config () (local-set-key (kbd &#34;M-;&#34;) &#39;evilnc-comment-or-uncomment-lines)) (add-hook &#39;matlab-mode-hook &#39;matlab-mode-hook-config) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage ** Commands and hotkeys Here are available commands which are NOT dependent on [[http://emacswiki.org/emacs/Evil][evil-mode]]: *** evilnc-comment-or-uncomment-lines (RECOMMENDED) Comment/uncomment lines. This command supports negative arguments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The hotkey is &#34;,cl&#34; in evil-mode and &#34;M-;&#34; in all modes. &#34;M&#34; means ALT key.&lt;/p&gt; &#xA;&lt;p&gt;If a region selected, the region is expand to make sure the region contain whole lines. Then we comment/uncomment the expanded region. NUM is ignored.&lt;/p&gt; &#xA;&lt;p&gt;If the region is inside of ONE line, we comment/uncomment that region. In this case, CORRECT comment syntax will be used for C++/Java/Javascript.&lt;/p&gt; &#xA;&lt;p&gt;This may be the &lt;em&gt;only command&lt;/em&gt; you need to learn! *** evilnc-quick-comment-or-uncomment-to-the-line comment/uncomment from current line to the user-specified line. You can input the rightest digit(s) to specify the line number if you want to type less.&lt;/p&gt; &#xA;&lt;p&gt;For example, say current line number is 497. =C-u 3 M-x evilnc-quick-comment-or-uncomment-to-the-line= will comment to the line 503 because the rightest digit of &#34;503&#34; is 3.&lt;/p&gt; &#xA;&lt;p&gt;The hotkey is &#34;,cl&#34; or &#34;,ll&#34; in evil-mode and =C-c l= (C means Ctrl key) in emacs normal mode.&lt;/p&gt; &#xA;&lt;p&gt;*** evilnc-comment-or-uncomment-paragraphs comment/uncomment paragraphs which is separated by empty lines.&lt;/p&gt; &#xA;&lt;p&gt;*** evilnc-copy-and-comment-lines Copy and paste lines, then comment out original lines. This command supports negative arguments.&lt;/p&gt; &#xA;&lt;p&gt;The hotkey is &#34;,cc&#34; in evil-mode and =C-c c= in emacs normal mode. *** evilnc-comment-and-kill-ring-save Comment lines and insert original lines into =kill-ring=. *** evilnc-comment-or-uncomment-to-the-line Comment to the specified line. *** evilnc-comment-or-uncomment-html-tag Comment or uncomment current html tag or selected region.&lt;/p&gt; &#xA;&lt;p&gt;It supports html and jsx without any set up. It&#39;s not dependent on any third party package.&lt;/p&gt; &#xA;&lt;p&gt;Please note you don&#39;t need force the whole line selection (pressing =V=) in =evil-mode=. This command is smart to select whole lines if needed.&lt;/p&gt; &#xA;&lt;p&gt;Comment or uncomment html tag(s).&lt;/p&gt; &#xA;&lt;p&gt;If no region is selected, current tag under focus is automatically selected. In this case, only one tag is selected.&lt;/p&gt; &#xA;&lt;p&gt;If user manually selects region, the region could cross multiple sibling tags and automatically expands to include complete tags. So user only need press =v= key in =evil-mode= to select multiple tags.&lt;/p&gt; &#xA;&lt;p&gt;Or you can use =evilnc-comment-or-uncomment-html-paragraphs= to comment/uncomment paragraphs containing html tags.&lt;/p&gt; &#xA;&lt;p&gt;Paragraph is text separated by empty lines.&lt;/p&gt; &#xA;&lt;p&gt;Sample to combine =evilnc-comment-or-uncomment-html-paragraphs= and =evilnc-comment-or-uncomment-paragraphs=: #+begin_src elisp (defun my-current-line-html-p (paragraph-region) (let* ((line (buffer-substring-no-properties (line-beginning-position) (line-end-position))) (re (format &#34;^[ \t]&lt;em&gt;\(%s\)?[ \t]&lt;/em&gt;&amp;lt;/?[a-zA-Z]+&#34; (regexp-quote (evilnc-html-comment-start))))) ;; current paragraph does contain html tag (if (and (&amp;gt;= (point) (car paragraph-region)) (string-match-p re line)) t)))&lt;/p&gt; &#xA;&lt;p&gt;(defun my-evilnc-comment-or-uncomment-paragraphs (&amp;amp;optional num) &#34;Comment or uncomment NUM paragraphs which might contain html tags.&#34; (interactive &#34;p&#34;) (unless (featurep &#39;evil-nerd-commenter) (require &#39;evil-nerd-commenter)) (let* ((paragraph-region (evilnc--get-one-paragraph-region)) (html-p (or (save-excursion (sgml-skip-tag-backward 1) (my-current-line-html-p paragraph-region)) (save-excursion (sgml-skip-tag-forward 1) (my-current-line-html-p paragraph-region))))) (if html-p (evilnc-comment-or-uncomment-html-paragraphs num) (evilnc-comment-or-uncomment-paragraphs num)))) #+end_src *** evilnc-toggle-comment-empty-lines Toggle the flag to comment/uncomment empty lines.&lt;/p&gt; &#xA;&lt;p&gt;The hotkey is &#34;,cv&#34; in evil-mode. *** evilnc-copy-to-line Copy from the current line to the user-specified line.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s &lt;em&gt;for non-evil user only&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You need assign hotkey for it.&lt;/p&gt; &#xA;&lt;p&gt;For example: #+BEGIN_SRC elisp (global-set-key (kbd &#34;C-c C-t C-l&#34;) &#39;evilnc-copy-to-line) #+END_SRC *** evilnc-toggle-invert-comment-line-by-line Toggle flag =evilnc-invert-comment-line-by-line=.&lt;/p&gt; &#xA;&lt;p&gt;When the flag is true, the command =evilnc-comment-or-uncomment-lines=, =evilnc-comment-or-uncomment-to-the-line=, and =evilnc-comment-or-uncomment-paragraphs= will be influenced. They will &lt;em&gt;invert&lt;/em&gt; each line&#39;s comment status instead comment the whole thing.&lt;/p&gt; &#xA;&lt;p&gt;Please note this command may NOT work on complex evil text object. *** evilnc-kill-to-line Kill from the current line to the user-specified line.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s &lt;em&gt;for non-evil user only&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You need assign hotkey for it.&lt;/p&gt; &#xA;&lt;p&gt;For example: #+BEGIN_SRC elisp (global-set-key (kbd &#34;C-c C-t C-l&#34;) &#39;evilnc-kill-to-line) #+END_SRC *** evilnc-comment-both-snippet-html If a line is snippet wrapped HTML tags in HTML template, only the HTML syntax is used to comment out the line by default.&lt;/p&gt; &#xA;&lt;p&gt;But if you =(setq evilnc-comment-both-snippet-html t)=, snippet will be commented out with its own syntax at first. Then the wrapped html tag will be comment out using HTML syntax. This flag has effect on all above commands. [[http://web-mode.org/][Web-mode]] should be enabled to use this flag. *** Use imenu to list and jump to comments in current file Please setup &lt;code&gt;imenu-create-index-function&#39; to &lt;/code&gt;evilnc-imenu-create-index-function&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Setup on using =counsel-imenu= to list comments in current buffer, #+begin_src elisp (defun counsel-imenu-comments () (interactive) (let* ((imenu-create-index-function &#39;evilnc-imenu-create-index-function)) (unless (featurep &#39;counsel) (require &#39;counsel)) (counsel-imenu))) #+end_src ** Examples *** Comment lines =C-u NUM M-x evilnc-comment-or-uncomment-lines=, comment/uncomment next NUM lines. *** Comment region Select a region and =M-x evilnc-comment-or-uncomment-lines=. The region will be &lt;em&gt;automatically expanded to contain whole lines&lt;/em&gt;. Then we comment/uncomment the region. *** Comment to the line number =C-u 56 M-x evilnc-comment-or-uncomment-to-the-line=, comment/uncomment &lt;em&gt;from current line&lt;/em&gt; to line 56. *** Copy and comment =C-u 2 M-x evilnc-copy-and-comment-lines=, copy 2 lines and paste them below the original line. Then comment out original lines. The focus will be moved to the new lines. *** Comment paragraph =C-u 2 M-x evilnc-comment-or-uncomment-paragraphs=, comment out two paragraphs. This is useful if you have large hunk of data to be commented out as below: #+BEGIN_SRC javascript var myJson={ &#34;key1&#34;:&#34;v1&#34;, &#34;key2&#34;:&#34;v2&#34;, &#34;key3&#34;:&#34;v3&#34; } #+END_SRC *** Invert comment Say there are two lines of javascript code, #+BEGIN_SRC javascript if(flag==true){ doSomething(); } //if(flag==false){ doSomething(); } #+END_SRC The first line is production code. The second line is your debug code. You want to invert the comment status of these two lines (for example, comment out first line and uncomment the second line) for debug purpose.&lt;/p&gt; &#xA;&lt;p&gt;All you need to is =M-x evilnc-toggle-invert-comment-line-by-line= then =C-u 2 evilnc-comment-or-uncomment-lines=. The first command turn on some flag, so the behavior of (un)commenting is different.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Evil usage If you use [[http://emacswiki.org/emacs/Evil][Evil]], you can use [[http://vimdoc.sourceforge.net/htmldoc/motion.html#text-objects][text objects and motions]]. But if you only &lt;em&gt;deals with lines&lt;/em&gt;, I suggest using =evilnc-comment-or-uncomment-lines= instead. ** commenter text object &#34;c&#34; We defined commenter text object &#34;c&#34; which can have &lt;em&gt;multi-lines&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Press =vac= to select outer object (comment with limiters).&lt;/p&gt; &#xA;&lt;p&gt;Press =vic= to select inner object (comment without limiter).&lt;/p&gt; &#xA;&lt;p&gt;The comment text object is created automatically in =evilnc-default-hotkeys=.&lt;/p&gt; &#xA;&lt;p&gt;You can assign other key instead of &#34;c&#34; to the text object by changing =evilnc-comment-text-object=. #+begin_src elisp (setq evilnc-comment-text-object &#34;c&#34;) (evilnc-default-hotkeys) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also manually created the comment text object using below code, #+begin_src elisp (setq evilnc-comment-text-object &#34;a&#34;) (define-key evil-inner-text-objects-map evilnc-comment-text-object &#39;evilnc-inner-commenter) (define-key evil-outer-text-objects-map evilnc-comment-text-object &#39;evilnc-outer-commenter) #+end_src ** evilnc-comment-operator =evilnc-comment-operator= acts much like the delete/change operator. Takes a motion or text object and comments it out, yanking its content in the process.&lt;/p&gt; &#xA;&lt;p&gt;Example 1: &#34;,,,&#34; to comment out the current line.&lt;/p&gt; &#xA;&lt;p&gt;Example 2: &#34;,,9j&#34; to comment out the next 9 lines.&lt;/p&gt; &#xA;&lt;p&gt;Example 3: &#34;,,99G&#34; to comment from the current line to line 99.&lt;/p&gt; &#xA;&lt;p&gt;Example 4: &#34;,,a(&#34; to comment out the current s-expression, or &#34;,,i(&#34; to only comment out the s-expression&#39;s content. Similarly for blocks &#34;,,a{&#34;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Example 5: &#34;,,ao&#34; to comment out the current symbol, or &#34;,,aW&#34; to comment out the current WORD. Could be useful when commenting out function parameters, for instance.&lt;/p&gt; &#xA;&lt;p&gt;Example 6: &#34;,,w&#34; comment to the beginning of the next word, &#34;,,e&#34; to the end of the next word, &#34;,,b&#34; to the beginning of the previous word.&lt;/p&gt; &#xA;&lt;p&gt;Example 7: &#34;,,it&#34;, comment the region inside html tags (all html major modes are supported , &lt;em&gt;including [[http://web-mode.org/][web-mode]]&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;** evilnc-copy-and-comment-operator =evilnc-copy-and-comment-operator= is another evil-mode operator. Instead of commenting out the text in the operator-range, it inserts an copy of the text in the range and comments out that copy. Its hot key is &#34;,.&#34;. For example, &#34;,.,&#34; to comment out the current line.&lt;/p&gt; &#xA;&lt;p&gt;** evilnc-yank-and-comment-operator Operator to comment or uncomment the text and yank the original text at the same time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tips ** Yank in evil-mode You can yank to line 99 using hotkey =y99G= or =y99gg=. That&#39;s the feature from evil-mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please read vim manual on &#34;text objects and motions&#34;. ** Change comment style For example, if you prefer double slashes =//= instead of slash-stars =/* ... */= in =c-mode=, insert below code into your =~/.emacs=: #+BEGIN_SRC elisp (add-hook &#39;c-mode-common-hook (lambda () ;; Preferred comment style (setq comment-start &#34;// &#34; comment-end &#34;&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Thanks for [[https://github.com/mcandre][Andrew Pennebaker (aka mcandre)]] providing this tip. ** Comment code snippet Please install [[https://github.com/redguardtoo/evil-matchit][evil-matchit]]. You can press =vi=%= to select a region between tags and press =M-;= to comment the region.&lt;/p&gt; &#xA;&lt;p&gt;Most popular programming languages are supported. ** Comment and uncomment Lisp code&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure Evil installed&lt;/li&gt; &#xA; &lt;li&gt;Press &#34;,,a(&#34; ** Choose the style of copy and comment You can set up =evilnc-original-above-comment-when-copy-and-comment= to decide which style to use when =evilnc-copy-and-comment-lines= or =evilnc-copy-and-comment-operator=,&lt;/li&gt; &#xA; &lt;li&gt;Place the commented out text above original text&lt;/li&gt; &#xA; &lt;li&gt;Or place the original text above commented out text ** Customize comment style Most commands call =evilnc-comment-or-uncomment-region-function=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can modify this variable to customize the comment style.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (with-eval-after-load &#39;evil-nerd-commenter (defun my-comment-or-uncomment-region (beg end) (let* ((comment-start &#34;aaa&#34;) (comment-end &#34;bbb&#34;)) (evilnc-comment-or-uncomment-region-internal beg end))) (setq evilnc-comment-or-uncomment-region-function &#39;my-comment-or-uncomment-region)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Credits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/lalopmak][Lally Oppenheimer (AKA lalopmak)]] added the support for text-object in Evil&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/ryuslash][Tom Willemse (AKA ryuslash)]] provided the fix to make Emacs 24.4 work&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/TheBB][Eivind Fonn (AKA TheBB)]] fixed the web-mode issue #45&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Dickby][Dickby]] provided =evilnc-copy-and-comment-operator=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contact me Report bug at [[https://github.com/redguardtoo/evil-nerd-commenter]].&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>