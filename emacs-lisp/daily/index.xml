<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-29T01:39:23Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iqbalansari/restart-emacs</title>
    <updated>2022-07-29T01:39:23Z</updated>
    <id>tag:github.com,2022-07-29:/iqbalansari/restart-emacs</id>
    <link href="https://github.com/iqbalansari/restart-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple emacs package to restart emacs from within emacs&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart Emacs&lt;/p&gt; &lt;p&gt;[[http://melpa.org/#/restart-emacs][file:http://melpa.org/packages/restart-emacs-badge.svg]] [[http://stable.melpa.org/#/restart-emacs][file:http://stable.melpa.org/packages/restart-emacs-badge.svg]] [[https://travis-ci.org/iqbalansari/restart-emacs][https://travis-ci.org/iqbalansari/restart-emacs.svg?branch=master]] [[http://www.gnu.org/licenses/gpl-3.0.html][http://img.shields.io/:license-gpl3-blue.svg]] [[http://makeapullrequest.com][file:https://img.shields.io/badge/PRs-welcome-brightgreen.svg]]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Table of contents :TOC_3_gh:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#restart-emacs][Restart Emacs]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#what-is-this][What is this?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#installation][Installation]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#elpa][ELPA]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#el-get][El-get]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#compatibility][Compatibility]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#restarting-gui-emacs][Restarting GUI Emacs]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#restarting-emacs-running-in-a-terminal][Restarting Emacs running in a terminal]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#restarting-emacs-daemons][Restarting Emacs daemons]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#contributing][Contributing]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#known-issues][Known Issues]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#command-line-arguments-are-not-preserved][Command line arguments are not preserved]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#the-restarted-daemon-quits-as-soon-as-the-all-the-visible-frames-are-killed][The restarted daemon quits as soon as the all the visible frames are killed]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What is this? This is a simple package to restart Emacs for within Emacs. Inspired by [[http://emacs.stackexchange.com/questions/5428/restart-emacs-from-within-emacs][this]] stackoverflow question.&lt;/p&gt; &#xA;&lt;p&gt;** Installation *** ELPA &lt;del&gt;restart-emacs&lt;/del&gt; is available on [[http://melpa.org/#/restart-emacs][MELPA]] and [[http://stable.melpa.org/#/restart-emacs][MELPA Stable]]. Please follow the instructions on MELPA [[http://melpa.org/#/getting-started][website]] to enable it, if you haven&#39;t already.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can then install ~restart-emacs~ from the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Menu.html][package menu]]. Alternatively install it by doing the following&#xA;&#xA;Refresh the package index&#xA;#+BEGIN_QUOTE&#xA;M-x package-refresh-contents RET&#xA;#+END_QUOTE&#xA;&#xA;And then install it by doing&#xA;#+BEGIN_QUOTE&#xA;M-x package-install RET restart-emacs&#xA;#+END_QUOTE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** El-get &lt;del&gt;restart-emacs&lt;/del&gt; can also be installed using &lt;del&gt;el-get&lt;/del&gt;. Assuming you have latest version of el-get installing it by doing something similar to #+BEGIN_QUOTE M-x el-get-install RET restart-emacs #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;** Usage It offers a command &lt;del&gt;restart-emacs&lt;/del&gt; which kills current Emacs session and starts a new session.&lt;/p&gt; &#xA;&lt;p&gt;Additional arguments to be passed to the new instance can be specified using prefix arguments&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with a single &lt;del&gt;universal-argument&lt;/del&gt; (=C-u=) Emacs is restarted with &lt;del&gt;--debug-init&lt;/del&gt; flag&lt;/li&gt; &#xA; &lt;li&gt;with two &lt;del&gt;universal-argument&lt;/del&gt; (=C-u= =C-u=) Emacs is restarted with &lt;del&gt;-Q&lt;/del&gt; flag&lt;/li&gt; &#xA; &lt;li&gt;with three &lt;del&gt;universal-argument&lt;/del&gt; (=C-u= =C-u= =C-u=) the user is prompted for the arguments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;del&gt;restart-emacs&lt;/del&gt; can restore frames on restart, right this is experimental and disabled by default to enable it set &lt;del&gt;restart-emacs-restore-frames&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is also a second command &lt;del&gt;restart-emacs-start-new-emacs&lt;/del&gt; which starts a new session of Emacs without killing the current one. It takes the same arguments as &lt;del&gt;restart-emacs&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Compatibility *** Restarting GUI Emacs Restarting graphical Emacs should work on any UNIXy system with &lt;del&gt;sh&lt;/del&gt; and on Windows.&lt;/p&gt; &#xA;&lt;p&gt;*** Restarting Emacs running in a terminal This requires that the shell from which Emacs was launched supports job control. This has been tested to work on &lt;del&gt;sh&lt;/del&gt;, &lt;del&gt;bash&lt;/del&gt;, &lt;del&gt;zsh&lt;/del&gt;, &lt;del&gt;fish&lt;/del&gt;, &lt;del&gt;csh&lt;/del&gt; and &lt;del&gt;tcsh&lt;/del&gt;, however this does not work on Windows.&lt;/p&gt; &#xA;&lt;p&gt;*** Restarting Emacs daemons The latest version of &lt;del&gt;restart-emacs&lt;/del&gt; can now restart Emacs daemons. The the frames are restored once the daemon restarts using &lt;del&gt;desktop-mode&lt;/del&gt;. However since &lt;del&gt;desktop-mode&lt;/del&gt; learned to restore frames only Emacs version 24.4 onwards the daemons can be restarted only on Emacs versions 24.4 and later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Another issue with restarting Emacs daemons is that the frames open in a&#xA;terminal cannot be recreated on restart, instead the ~restart-emacs~ would&#xA;write a notification on the terminal with the instructions to reconnect, any&#xA;suggestions to improve this are welcome.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Contributing Code as well as documentation contributions are welcome.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/cask/cask][Cask]] is used to manage project dependencies so make sure you have it installed. To run the tests you need to install the dependencies by running the following&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh cask install #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;After the installation completes you can run the tests by running the following command&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh cask exec ert-runner #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Known Issues *** Command line arguments are not preserved The new Emacs instance does not use the same command line arguments as the running instance. See [[https://github.com/iqbalansari/restart-emacs/issues/11][#11]] for more details *** The restarted daemon quits as soon as the all the visible frames are killed See &lt;a href=&#34;https://github.com/iqbalansari/restart-emacs/issues/10#issuecomment-307565719&#34;&gt;https://github.com/iqbalansari/restart-emacs/issues/10#issuecomment-307565719&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hlissner/emacs-solaire-mode</title>
    <updated>2022-07-29T01:39:23Z</updated>
    <id>tag:github.com,2022-07-29:/hlissner/emacs-solaire-mode</id>
    <link href="https://github.com/hlissner/emacs-solaire-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;If only certain buffers could be so grossly incandescent.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made_with-Doom_Emacs-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Made with Doom Emacs&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/tag/hlissner/emacs-solaire-mode.svg?label=release&amp;amp;style=flat-square&#34; alt=&#34;Release tag&#34;&gt; &lt;a href=&#34;http://melpa.org/#/solaire-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/solaire-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/hlissner/emacs-solaire-mode/CI/master?style=flat-square&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Solaire mode&lt;/h1&gt; &#xA;&lt;p&gt;If only certain buffers could be so grossly incandescent.&lt;/p&gt; &#xA;&lt;a href=&#34;https://winkla12.deviantart.com/art/Grossly-Incandescent-438305072&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hlissner/emacs-solaire-mode/screenshots/praise.jpg&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;code&gt;solaire-mode&lt;/code&gt; is an aesthetic plugin designed to visually distinguish &#34;real&#34; buffers (i.e. file-visiting code buffers where you do most of your work) from &#34;unreal&#34; buffers (like popups, sidebars, log buffers, terminals, etc) by giving the latter a slightly different -- often darker -- background:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hlissner/emacs-solaire-mode/screenshots/screenshot.png&#34; alt=&#34;solaire-mode at work&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin accomplishes this by doing two things when activated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;solaire-mode&lt;/code&gt; buffer-locally remaps all the faces in &lt;code&gt;solaire-mode-remap-alist&lt;/code&gt;. e.g. &lt;code&gt;default&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;solaire-default-face&lt;/code&gt;, and &lt;code&gt;mode-line&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;solaire-mode-line-face&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The latter faces are the (presumably) &#34;adjusted&#34; faces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;solaire-global-mode&lt;/code&gt; will globally swap faces in &lt;code&gt;solaire-mode-swap-alist&lt;/code&gt; IF your active theme is in &lt;code&gt;solaire-mode-themes-to-face-swap&lt;/code&gt;. Use this if you think a theme has its designated solaire-*-face colors the wrong way around.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Praise the sun.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses &lt;code&gt;face-remapping-alist&lt;/code&gt;, which other plugins may overwrite.&lt;/li&gt; &#xA; &lt;li&gt;Tested mainly on Emacs 25.1+&lt;/li&gt; &#xA; &lt;li&gt;Works in GUI and terminal Emacs (with themes that support it).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-ZGlaAxB7nI&#34;&gt;Try jumping.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Solaire-mode is available on MELPA: &lt;code&gt;M-x package-install RET solaire-mode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Doom Emacs&lt;/h3&gt; &#xA;&lt;p&gt;Doom installs this package as part of the &lt;code&gt;:ui doom&lt;/code&gt; module. No additional configuration is needed.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Simply activate &lt;code&gt;solaire-global-mode&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(solaire-global-mode +1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;solaire-mode-real-buffer-fn&lt;/code&gt; (default: &lt;code&gt;solaire-mode-real-buffer-p&lt;/code&gt;): The predicate function used to determine if a buffer is &#34;real&#34; or not. It takes no arguments and must return truthy for buffers where &lt;code&gt;solaire-mode&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be activated in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solaire-mode-remap-alist&lt;/code&gt;: An alist mapping original faces to replacement faces, which will be buffer-locally remapped in any buffer &lt;code&gt;solaire-mode&lt;/code&gt; is enabled in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solaire-mode-swap-alist&lt;/code&gt;: An alist mapping original faces to replacement faces, which will be swapped globally if current theme is in &lt;code&gt;solaire-mode-themes-to-face-swap&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solaire-mode-themes-to-face-swap&lt;/code&gt; (default: &lt;code&gt;()&lt;/code&gt;): A list of themes to swap faces in &lt;code&gt;solaire-mode-swap-alist&lt;/code&gt; for. Can be symbols or regexps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Jolly cooperation with other plugins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;solaire-mode&lt;/code&gt; remaps the mode-line faces. This interferes with certain mode-line packages like telephone-line or powerline, but works fine for doom-modeline. To disable this behavior use:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(dolist (face &#39;(mode-line mode-line-inactive))&#xA;  (setf (alist-get face solaire-mode-remap-modeline) nil))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is up to themes to decide whether unreal buffers (i.e. non-file-visiting) are lighter or darker than real buffers. If you don&#39;t like their arrangement, add that theme to &lt;code&gt;solaire-mode-themes-to-face-swap&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;solaire-mode-themes-to-face-swap &#39;doom-vibrant)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then solaire-mode will swap all the faces in &lt;code&gt;solaire-mode-swap-alist&lt;/code&gt; (for example, swapping the &lt;code&gt;default&lt;/code&gt; face with &lt;code&gt;solaire-default-face&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;You can add a regexp to &lt;code&gt;solaire-mode-themes-to-face-swap&lt;/code&gt; to affect a family of themes, e.g.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;solaire-mode-themes-to-face-swap &#34;^doom-&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Theme support for solaire-mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;solaire-mode&lt;/code&gt; will disable itself if the active theme doesn&#39;t support it, but to ensure support a theme must at least change &lt;code&gt;solaire-default-face&lt;/code&gt;&#39;s &lt;code&gt;:background&lt;/code&gt;. My recommendation is that it is be &lt;em&gt;slightly&lt;/em&gt; darker or lighter than &lt;code&gt;default&lt;/code&gt;&#39;s background.&lt;/p&gt; &#xA;&lt;p&gt;For example &lt;code&gt;doom-one&lt;/code&gt; (seen in the screenshot above) prefers &lt;code&gt;solaire-default-face&lt;/code&gt; be darker than &lt;code&gt;default&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hlissner/emacs-doom-themes/screenshots/doom-one.png&#34; alt=&#34;doom-one screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Others, like doom-vibrant prefer the opposite:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hlissner/emacs-doom-themes/screenshots/doom-vibrant.png&#34; alt=&#34;doom-vibrant screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For full support, themes can customize the following faces:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Face&lt;/th&gt; &#xA;   &lt;th&gt;Remapped face&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;solaire-default-face&lt;/td&gt; &#xA;   &lt;td&gt;default&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;solaire-fringe-face&lt;/td&gt; &#xA;   &lt;td&gt;fringe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;solaire-line-number-face&lt;/td&gt; &#xA;   &lt;td&gt;line-number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;solaire-hl-line-face&lt;/td&gt; &#xA;   &lt;td&gt;hl-line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;solaire-org-hide-face&lt;/td&gt; &#xA;   &lt;td&gt;org-hide, org-indent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;solaire-mode-line-face&lt;/td&gt; &#xA;   &lt;td&gt;mode-line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;solaire-mode-line-inactive-face&lt;/td&gt; &#xA;   &lt;td&gt;mode-line-inactive&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;solaire-header-line-face&lt;/td&gt; &#xA;   &lt;td&gt;header-line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Themes that support solaire-mode out of the box&lt;/h2&gt; &#xA;&lt;p&gt;The only (known) themes to support solaire-mode are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hlissner/emacs-doom-themes&#34;&gt;doom-themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/404cn/nano-theme.el&#34;&gt;nano-theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/protesilaos/modus-themes&#34;&gt;modus-themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ajgrf/parchment&#34;&gt;parchment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nashamri/spacemacs-theme&#34;&gt;spacemacs-theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ianpan870102/vscode-dark-plus-emacs-theme&#34;&gt;vscode-dark-plus-theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ianpan870102/wilmersdorf-emacs-theme&#34;&gt;wilmersdorf-theme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you know of more, feel free to PR them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Bad-ptr/persp-mode.el</title>
    <updated>2022-07-29T01:39:23Z</updated>
    <id>tag:github.com,2022-07-29:/Bad-ptr/persp-mode.el</id>
    <link href="https://github.com/Bad-ptr/persp-mode.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;named perspectives(set of buffers/window configs) for emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;persp-mode&lt;/h1&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;Perspectives for emacs, based on the &lt;a href=&#34;http://github.com/nex3/perspective-el&#34;&gt;&lt;code&gt;perspective-el&lt;/code&gt;&lt;/a&gt; by Natalie Weizenbaum.&lt;br&gt; But perspectives are shared among frames + ability to save/restore its state from/to a file.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The persp-mode is available from the &lt;a href=&#34;https://github.com/milkypostman/melpa&#34;&gt;&lt;code&gt;MELPA&lt;/code&gt;&lt;/a&gt;. So if you use this repo then the installation is easy:&lt;br&gt; &lt;code&gt;M-x: package-install RET persp-mode RET&lt;/code&gt;&lt;br&gt; Alternatively you can download the persp-mode.el from &lt;a href=&#34;https://github.com/Bad-ptr/persp-mode.el&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt; and install it as a package:&lt;br&gt; &lt;code&gt;M-x: package-install-file RET &#39;path_to_where_you_saved_persp-mode.el&#39; RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another(oldschool) way:&lt;br&gt; Place the persp-mode.el file somewhere in the emacs&#39; load-path and add &lt;code&gt;(require &#39;persp-mode) (persp-mode 1)&lt;/code&gt; to your configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;Suggested configuration&lt;/h3&gt; &#xA;&lt;p&gt;If you use the &lt;a href=&#34;https://github.com/tlh/workgroups.el&#34;&gt;&lt;code&gt;workgroups.el&lt;/code&gt;&lt;/a&gt; (note that workgroups sometimes do a better job restoring window configurations than standard emacs mechanism) it is a good idea to switch off the restore windows animation.&lt;br&gt; (it&#39;s clashing with the &lt;a href=&#34;https://github.com/roman/golden-ratio.el&#34;&gt;&lt;code&gt;golden-ratio-mode&lt;/code&gt;&lt;/a&gt; for example, sometimes erring when creating new frames and it is slow on remote network connections.)&lt;br&gt; You can do it with: &lt;code&gt;(setq wg-morph-on nil)&lt;/code&gt;.&lt;br&gt; If you want buffers to be killed after they were removed from perspectives, see the &lt;code&gt;persp-autokill-buffer-on-remove&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h4&gt;When installing with package-install&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode-autoloads&#34;&#xA;      (setq wg-morph-on nil) ;; switch off animation&#xA;      (setq persp-autokill-buffer-on-remove &#39;kill-weak)&#xA;      (add-hook &#39;window-setup-hook #&#39;(lambda () (persp-mode 1))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;When installing without generation of autoloads&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (setq wg-morph-on nil)&#xA;      (setq persp-autokill-buffer-on-remove &#39;kill-weak)&#xA;      (add-hook &#39;window-setup-hook #&#39;(lambda () (persp-mode 1))))&#xA;    (require &#39;persp-mode)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run emacs &amp;lt;= 24.3 the macro &lt;code&gt;with-eval-after-load&lt;/code&gt; is not defined. Here is the definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (unless (fboundp &#39;with-eval-after-load)&#xA;      (defmacro with-eval-after-load (file &amp;amp;rest body)&#xA;        (declare (indent 1) (debug t))&#xA;        `(eval-after-load ,file &#39;(progn ,@body))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Ability to save/restore window configurations from/to a file for emacs &amp;lt; 24.4 depends on the &lt;a href=&#34;https://github.com/tlh/workgroups.el&#34;&gt;&lt;code&gt;workgroups.el&lt;/code&gt;&lt;/a&gt; which also available from &lt;a href=&#34;https://github.com/milkypostman/melpa&#34;&gt;&lt;code&gt;MELPA&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Keys&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt; -- next perspective.&lt;br&gt; &lt;code&gt;p&lt;/code&gt; -- previous perspective.&lt;br&gt; &lt;code&gt;s&lt;/code&gt; -- create/switch to perspective.&lt;br&gt; &lt;code&gt;S&lt;/code&gt; -- create/switch to perspective in a window.&lt;br&gt; &lt;code&gt;r&lt;/code&gt; -- rename perspective.&lt;br&gt; &lt;code&gt;c&lt;/code&gt; -- copy perspective.&lt;br&gt; &lt;code&gt;C&lt;/code&gt; -- kill perspective(killing the &#39;nil&#39; perspective will kill all buffers). With prefix argument will not kill perspective&#39;s buffers.&lt;br&gt; &lt;code&gt;a&lt;/code&gt; -- add buffer to perspective. With prefix argument reverses the effect of the &lt;code&gt;persp-switch-to-added-buffer&lt;/code&gt;.&lt;br&gt; &lt;code&gt;b&lt;/code&gt; -- switch to buffer in perspective.&lt;br&gt; &lt;code&gt;t&lt;/code&gt; -- switch to buffer without adding it to perspective. With prefix argument allows to remove a buffer from perspective without killing and switching to another buffer.&lt;br&gt; &lt;code&gt;i&lt;/code&gt; -- import buffers from perspective.&lt;br&gt; &lt;code&gt;I&lt;/code&gt; -- import window configuration from perspecive.&lt;br&gt; &lt;code&gt;k&lt;/code&gt; -- remove buffer from perspective. With prefix argument reverses the effect of the &lt;code&gt;persp-autokill-buffer-on-remove&lt;/code&gt;.&lt;br&gt; &lt;code&gt;K&lt;/code&gt; -- kill buffer.&lt;br&gt; &lt;code&gt;w&lt;/code&gt; -- save perspectives to file.&lt;br&gt; &lt;code&gt;W&lt;/code&gt; -- save perspectives subset to file.&lt;br&gt; &lt;code&gt;l&lt;/code&gt; -- load perspectives from file.&lt;br&gt; &lt;code&gt;L&lt;/code&gt; -- load perspectives subset from file.&lt;br&gt; &lt;code&gt;o&lt;/code&gt; -- switch off persp-mode (you can quickly switch off persp-mode after emacs start and before autoresuming previous perspectives state if you only need to edit a single file).&lt;/p&gt; &#xA;&lt;p&gt;These key sequences must follow the &lt;code&gt;persp-keymap-prefix&lt;/code&gt; which you can customize (by default it is &lt;code&gt;C-c p&lt;/code&gt;), so if you want to invoke the &amp;lt; &lt;code&gt;s&lt;/code&gt; - create/switch perspective &amp;gt; command you must first type the prefix(&lt;code&gt;C-c p&lt;/code&gt;) and then &lt;code&gt;s&lt;/code&gt; (full sequence is &lt;code&gt;C-c p s&lt;/code&gt;).&lt;br&gt; If you want to bind a new key for persp-mode, use &lt;code&gt;persp-key-map&lt;/code&gt;:&lt;br&gt; &lt;code&gt;(define-key persp-key-map (kbd ...) ...)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you kill a buffer with &lt;code&gt;C-x k&lt;/code&gt;(kill-buffer command) it will be killed only if it belongs to a single perspective, otherwise it&#39;ll be only removed from the current perspective and not killed.&lt;br&gt; But if you kill a buffer from the &#39;none&#39;(nil) perspective -- it will be removed from all perspectives and then killed.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x: customize-group RET persp-mode RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom save/load buffer function example&lt;/h2&gt; &#xA;&lt;p&gt;Suppose you want to save the &lt;code&gt;*ielm*&lt;/code&gt;(M-x ielm RET -- elisp repl) buffers.&lt;br&gt; Then the save function would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (lambda (b)&#xA;      (with-current-buffer b&#xA;        (when (string= major-mode &#34;inferior-emacs-lisp-mode&#34;)&#xA;          `(def-ielm-buffer ,(buffer-name) ,default-directory))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must prepend that function to the &lt;code&gt;persp-save-buffer-functions&lt;/code&gt; list (before the standard filtering functions because it filters buffers starting with the &#39;*&#39;).&lt;/p&gt; &#xA;&lt;p&gt;The load function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (lambda (savelist)&#xA;      (when (eq (car savelist) &#39;def-ielm-buffer)&#xA;        (with-current-buffer (get-buffer-create (cadr savelist))&#xA;          (setq default-directory (caddr savelist))&#xA;          (require &#39;ielm)&#xA;          (inferior-emacs-lisp-mode))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add load function to the &lt;code&gt;persp-load-buffer-functions&lt;/code&gt; list.&lt;br&gt; That&#39;s it. Now the persp-mode can save and restore ielm buffers.&lt;/p&gt; &#xA;&lt;p&gt;Python shell example:&lt;br&gt; &lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-inferior-python-save-load-el&#34;&gt;gist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also you can use the &lt;code&gt;persp-def-buffer-save/load&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    ;; eshell&#xA;    (persp-def-buffer-save/load&#xA;     :mode &#39;eshell-mode :tag-symbol &#39;def-eshell-buffer&#xA;     :save-vars &#39;(major-mode default-directory))&#xA;&#xA;    ;; compile&#xA;    (persp-def-buffer-save/load&#xA;     :mode &#39;compilation-mode :tag-symbol &#39;def-compilation-buffer&#xA;     :save-vars &#39;(major-mode default-directory compilation-directory&#xA;                             compilation-environment compilation-arguments))&#xA;&#xA;    ;; magit-status&#xA;    (with-eval-after-load &#34;magit-autoloads&#34;&#xA;      (autoload &#39;magit-status-mode &#34;magit&#34;)&#xA;      (autoload &#39;magit-refresh &#34;magit&#34;)&#xA;      (persp-def-buffer-save/load&#xA;       :mode &#39;magit-status-mode :tag-symbol &#39;def-magit-status-buffer&#xA;       :save-vars &#39;(major-mode default-directory)&#xA;       :after-load-function #&#39;(lambda (b &amp;amp;rest _)&#xA;                                (with-current-buffer b (magit-refresh)))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;switch-to-buffer, display-buffer hook, and other advices&lt;/h2&gt; &#xA;&lt;p&gt;Some time ago there were switch-to-buffer and display-buffer advices in the persp-mode. If you still need them, I can suggest you a way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (defvar after-switch-to-buffer-functions nil)&#xA;      (defvar after-display-buffer-functions nil)&#xA;&#xA;      (if (fboundp &#39;advice-add)&#xA;          ;;Modern way&#xA;          (progn&#xA;            (defun after-switch-to-buffer-adv (&amp;amp;rest r)&#xA;              (apply #&#39;run-hook-with-args &#39;after-switch-to-buffer-functions r))&#xA;            (defun after-display-buffer-adv (&amp;amp;rest r)&#xA;              (apply #&#39;run-hook-with-args &#39;after-display-buffer-functions r))&#xA;            (advice-add #&#39;switch-to-buffer :after #&#39;after-switch-to-buffer-adv)&#xA;            (advice-add #&#39;display-buffer   :after #&#39;after-display-buffer-adv))&#xA;&#xA;        ;;Old way&#xA;        (defadvice switch-to-buffer (after after-switch-to-buffer-adv)&#xA;          (run-hook-with-args &#39;after-switch-to-buffer-functions (ad-get-arg 0)))&#xA;        (defadvice display-buffer (after after-display-buffer-adv)&#xA;          (run-hook-with-args &#39;after-display-buffer-functions (ad-get-arg 0)))&#xA;        (ad-enable-advice #&#39;switch-to-buffer &#39;after &#39;after-switch-to-buffer-adv)&#xA;        (ad-enable-advice #&#39;display-buffer &#39;after &#39;after-display-buffer-adv)&#xA;        (ad-activate #&#39;switch-to-buffer)&#xA;        (ad-activate #&#39;display-buffer)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that you can add functions to &lt;code&gt;after-switch-to-buffer-functions&lt;/code&gt; and &lt;code&gt;after-display-buffer-functions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (add-hook &#39;after-switch-to-buffer-functions&#xA;        #&#39;(lambda (bn) (when (and persp-mode&#xA;                                  (not persp-temporarily-display-buffer))&#xA;                         (persp-add-buffer bn))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set persp-add-buffer-on-after-change-major-mode to auto-add more buffers&lt;/h2&gt; &#xA;&lt;p&gt;Buffers end up in a perspective after you manually add them or more often automatically when &lt;code&gt;find-file-hook&lt;/code&gt; fires. This works well for buffers that visit a file, but not every buffer does. E.g. buffers created by Dired won&#39;t trigger &lt;code&gt;find-file-hook&lt;/code&gt; and won&#39;t be added to current perspective. If you discover that some buffers you&#39;d expect are missing you may be able to get the desired behavior by effecting &lt;code&gt;after-change-major-mode-hook&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    ;; see documentation for other possible values&#xA;    (setq persp-add-buffer-on-after-change-major-mode t)&#xA;&#xA;    ;; above setting will not discriminate and bring ephemeral buffers e.g.&#xA;    ;; *magit* which you probably don&#39;t want. You can filter them out.&#xA;    (add-hook &#39;persp-common-buffer-filter-functions&#xA;    ;; there is also `persp-add-buffer-on-after-change-major-mode-filter-functions&#39;&#xA;        #&#39;(lambda (b) (string-prefix-p &#34;*&#34; (buffer-name b))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Auto perspectives&lt;/h2&gt; &#xA;&lt;p&gt;You can now define an auto perspective using the &lt;code&gt;persp-def-auto-persp&lt;/code&gt; function.&lt;br&gt; This kind of perspective is intended to be dynamically created/destroyed/hided/unhided when a specific kind of buffers appears/disappears.&lt;/p&gt; &#xA;&lt;p&gt;The argument list of the &lt;code&gt;persp-def-auto-persp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;The first argument is a string which will serve as a name for the auto perspective.&lt;/p&gt; &#xA;&lt;p&gt;Other arguments is a key - value pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:buffer-name&lt;/code&gt; -- regexp to match against a name of a buffer.&lt;br&gt; &lt;code&gt;:file-name&lt;/code&gt; -- regexp to match against a filename of the buffer.&lt;br&gt; &lt;code&gt;:mode&lt;/code&gt; -- symbol to compare with the major-mode of the buffer.&lt;br&gt; &lt;code&gt;:mode-name&lt;/code&gt; -- regexp to compare against mode-name of the buffer.&lt;br&gt; &lt;code&gt;:minor-mode&lt;/code&gt; -- check if a minor mode is active for the buffer.&lt;br&gt; &lt;code&gt;:minor-mode-name&lt;/code&gt; -- check if minor mode with name matching this regexp is active for the buffer.&lt;br&gt; &lt;code&gt;:predicate&lt;/code&gt; -- function to check if the buffer is a good one(return nil if not).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:hooks&lt;/code&gt; -- a list of hooks (or symbol) to which you want to add checks.&lt;br&gt; &lt;code&gt;persp-def-auto-persp&lt;/code&gt; tries to be smart about hooks to which it&#39;ll add checks , but sometimes you need more control.&lt;br&gt; &lt;code&gt;:dyn-env&lt;/code&gt; -- the list of variables and values to dynamically bind when the checks and action takes place. The format is the same as in the &lt;code&gt;let&lt;/code&gt; form.&lt;br&gt; &lt;code&gt;:get-name&lt;/code&gt; -- function to get a perspecive name.&lt;br&gt; &lt;code&gt;:get-buffer&lt;/code&gt; -- function to get the buffer.&lt;br&gt; &lt;code&gt;:get-persp&lt;/code&gt; -- function to get the perspective.&lt;br&gt; &lt;code&gt;:switch&lt;/code&gt; -- how to switch to the auto perspective: &lt;code&gt;nil&lt;/code&gt; -- do not switch, &lt;code&gt;&#39;window&lt;/code&gt; -- switch in window, &lt;code&gt;&#39;frame&lt;/code&gt; -- switch for frame.&lt;br&gt; &lt;code&gt;:parameters&lt;/code&gt; -- list of parameters for perspective(see the &lt;code&gt;modify-persp-parameters&lt;/code&gt; function).&lt;br&gt; &lt;code&gt;:noauto&lt;/code&gt; -- if non nil then do not set the auto field of the perspective.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:on-match&lt;/code&gt; -- function to run when the buffer passed all checks, instead of standard actions(create/get perspective, add buffer to it).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:after-match&lt;/code&gt; -- function to run after the buffer has passed all checks and standard or custom action finished their work.&lt;/p&gt; &#xA;&lt;p&gt;All function parameters must accept a single argument -- the current &lt;code&gt;state&lt;/code&gt; and must return a new &lt;code&gt;state&lt;/code&gt;(which can be the old &lt;code&gt;state&lt;/code&gt;). Where the &lt;code&gt;state&lt;/code&gt; is the association list which initially contains all key-value arguments that were passed to the &lt;code&gt;persp-def-auto-persp&lt;/code&gt;. The standard &lt;code&gt;:get-name&lt;/code&gt; puts &lt;code&gt;&#39;persp-name&lt;/code&gt; cell to the state, the standard &lt;code&gt;get-buffer&lt;/code&gt; puts &lt;code&gt;&#39;buffer&lt;/code&gt;, standard &lt;code&gt;:get-persp&lt;/code&gt; adds &lt;code&gt;&#39;persp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However the &lt;code&gt;:predicate&lt;/code&gt; function parameter is different -- it must accept a buffer as the first argument and the &lt;code&gt;state&lt;/code&gt; as the second argument and the &lt;code&gt;state&lt;/code&gt; argument is optional. If the &lt;code&gt;state&lt;/code&gt; argument is non &lt;code&gt;nil&lt;/code&gt; then the predicate must return a new state if the buffer satisfies that predicate. If the &lt;code&gt;state&lt;/code&gt; argument is &lt;code&gt;nil&lt;/code&gt; then it can return anything non &lt;code&gt;nil&lt;/code&gt; if the buffer satisfies the predicate. If the buffer is not satisfies the predicate it must return nil regardless of the &lt;code&gt;state&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;Only the name string(first argument) is required. All other arguments may be omitted or combined in any way you like.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;persp-def-auto-persp&lt;/code&gt; function creates an auto persp definition and adds it to the &lt;code&gt;persp-auto-persp-alist&lt;/code&gt;. If a definition with same name already exists it will be replaced. If you want to delete a definition pass &lt;code&gt;t&lt;/code&gt; as the &lt;code&gt;:delete&lt;/code&gt; parameter.&lt;br&gt; Unless you pass &lt;code&gt;t&lt;/code&gt; as the &lt;code&gt;:dont-pick-up-buffers&lt;/code&gt; argument all existing buffers will be checked against the new auto persp definition.&lt;/p&gt; &#xA;&lt;p&gt;Example of usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode-autoload&#34;&#xA;      (with-eval-after-load &#34;dired&#34;&#xA;        (persp-def-auto-persp &#34;dired&#34;&#xA;          :parameters &#39;((dont-save-to-file . t))&#xA;          :mode &#39;dired-mode&#xA;          :dyn-env &#39;(after-switch-to-buffer-functions ;; prevent recursion&#xA;                     (persp-add-buffer-on-find-file nil)&#xA;                     persp-add-buffer-on-after-change-major-mode)&#xA;          :hooks &#39;(after-switch-to-buffer-functions)&#xA;          :switch &#39;window)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-projectile-auto-persp-el&#34;&gt;persp-projectile-auto-persp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interaction with side packages&lt;/h2&gt; &#xA;&lt;h3&gt;Buffer lists&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;code&gt;persp-hook-up-emacs-buffer-completion&lt;/code&gt; variable if you want the &lt;code&gt;persp-mode&lt;/code&gt; to try to restrict buffer lists completion for emacs commands commands.&lt;br&gt; Also you can bind &lt;code&gt;persp-switch-to-buffer&lt;/code&gt; and &lt;code&gt;persp-kill-buffer&lt;/code&gt; to default keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (global-set-key (kbd &#34;C-x b&#34;) #&#39;persp-switch-to-buffer)&#xA;      (global-set-key (kbd &#34;C-x k&#34;) #&#39;persp-kill-buffer))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (substitute-key-definition #&#39;switch-to-buffer #&#39;persp-switch-to-buffer global-map)&#xA;      (substitute-key-definition #&#39;kill-buffer #&#39;persp-kill-buffer global-map))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Universal&lt;/h4&gt; &#xA;&lt;p&gt;This must work for most buffer listing commands that internally use the &lt;code&gt;buffer-list&lt;/code&gt; function, just wrap &#39;your function&#39; with the &lt;code&gt;with-persp-buffer-list&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-persp-buffer-list () (your-function))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;with-persp-read-buffer&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;h5&gt;bs-show&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (global-set-key (kbd &#34;C-x b&#34;) #&#39;(lambda (arg)&#xA;                                      (interactive &#34;P&#34;)&#xA;                                      (with-persp-buffer-list () (bs-show arg))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;ibuffer&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (global-set-key (kbd &#34;C-x b&#34;) #&#39;(lambda (arg)&#xA;                                      (interactive &#34;P&#34;)&#xA;                                      (with-persp-buffer-list () (ibuffer arg))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is something ibuffer-specific: &lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-mode-ibuffer-groups-el&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ido&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x customize-variable RET persp-set-ido-hooks RET&lt;/code&gt;&lt;br&gt; There is also the &lt;code&gt;with-persp-ido-hooks&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;p&gt;You can set the &lt;code&gt;persp-interactive-completion-function&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (setq persp-interactive-completion-function #&#39;ido-completing-read))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or just use the &lt;a href=&#34;https://github.com/DarwinAwardWinner/ido-ubiquitous&#34;&gt;ido-ubiquitous-mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;iswitchb&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-iswitchb-el&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ivy&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-ivy-el&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;helm&lt;/h4&gt; &#xA;&lt;p&gt;(Note that &lt;code&gt;helm-buffer-list&lt;/code&gt;, &lt;code&gt;helm-mini&lt;/code&gt; are using &lt;code&gt;ido&lt;/code&gt;&#39;s &lt;code&gt;ido-make-buffer-list&lt;/code&gt; internally).&lt;br&gt; Buffer filtering support: &lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-helm-persp-bridge-el&#34;&gt;gist#1&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-helm-persp-bridge-v2-el&#34;&gt;gist#2&lt;/a&gt;.&lt;br&gt; Also, you can take a look at &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt; , and especially &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/raw/master/layers/%2Bspacemacs/spacemacs-layouts/funcs.el&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Projectile&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Bad-ptr/persp-mode-projectile-bridge.el&#34;&gt;persp-mode-projectile-bridge.el&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;multi-term&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-multi-term-el&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Speedbar&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (add-to-list &#39;speedbar-frame-parameters (cons &#39;persp-ignore-wconf t))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Olivetti&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-olivetti-el&#34;&gt;gist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hints&lt;/h2&gt; &#xA;&lt;h3&gt;Changing the order of the perspectives(how it looks when you are prompted for a perspective name(s)):&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;code&gt;C-h v persp-names-cache RET&lt;/code&gt;.&lt;br&gt; You can manually edit the order of the perspectives by editing the &lt;code&gt;persp-names-cache&lt;/code&gt; variable using &lt;a href=&#34;https://github.com/emacsmirror/edit-list&#34;&gt;&lt;code&gt;edit-list&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/Wilfred/refine&#34;&gt;&lt;code&gt;refine&lt;/code&gt;&lt;/a&gt; packages.&lt;/p&gt; &#xA;&lt;h4&gt;Keep most recently used perspectives on top&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-mru-el&#34;&gt;gist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Launch Emacs to quickly edit a file without perspectives loading/saving&lt;/h3&gt; &#xA;&lt;p&gt;If you often launch emacs to edit a single file and you don&#39;t want to wait the persp-mode resuming process(and don&#39;t want to use the emacs daemon) -- you can create a script like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#xA;    #!/bin/bash&#xA;    emacs --eval &#39;(setq persp-auto-resume-time -1.0 persp-auto-save-opt 0)&#39; $@;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;call it editor.sh, save somewhere in the $PATH, and add &lt;code&gt;export EDITOR=&#34;editor.sh&#34;&lt;/code&gt; to your .bashrc.&lt;br&gt; Or add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (add-to-list &#39;command-switch-alist&#xA;                   (cons &#34;persp-q&#34;&#xA;                         #&#39;(lambda (p)&#xA;                             (setq persp-auto-resume-time -1&#xA;                                   persp-auto-save-opt 0))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To your emacs config. Then the editor.sh would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#xA;    #!/bin/bash&#xA;    emacs -persp-q $@;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Troubles&lt;/h2&gt; &#xA;&lt;p&gt;If you updated or changed something or simply something goes wrong don&#39;t warry to lose/overwrite perspectives&#39; state, remember that the persp-mode makes backups in `persp-save-dir&#39; for you(3 previous states by default).&lt;/p&gt; &#xA;&lt;p&gt;When you create a new frame(with &lt;code&gt;emacsclient -c&lt;/code&gt; for example) the selected window of the created frame is switching to the &lt;code&gt;*scratch*&lt;/code&gt; buffer. This behaviour is fixed in the emacs version &amp;gt;= 24.4(and in current emacs trunk). Alternatively you can save the &lt;code&gt;server.el&lt;/code&gt; from &lt;code&gt;/usr/share/emacs/${your_emacs_version_number}/lisp/&lt;/code&gt; (or from source tree, or from somewhere else) to a directory in your &lt;code&gt;load-path&lt;/code&gt; and edit it like that (this works for emacs 24.3 at least):&lt;br&gt; replace&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (unless (or files commands)&#xA;      (if (stringp initial-buffer-choice)&#xA;          (find-file initial-buffer-choice)&#xA;        (switch-to-buffer (get-buffer-create &#34;*scratch*&#34;)&#xA;                          &#39;norecord)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (unless (or files commands)&#xA;      (let ((buf&#xA;             (cond ((stringp initial-buffer-choice)&#xA;                    (find-file-noselect initial-buffer-choice))&#xA;                   ((functionp initial-buffer-choice)&#xA;                    (funcall initial-buffer-choice)))))&#xA;        (switch-to-buffer&#xA;         (if (buffer-live-p buf) buf (get-buffer-create &#34;*scratch*&#34;))&#xA;         &#39;norecord)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and set the &lt;code&gt;persp-is-ibc-as-f-supported&lt;/code&gt; variable to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>