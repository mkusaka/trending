<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T01:39:57Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>minad/org-modern</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/minad/org-modern</id>
    <link href="https://github.com/minad/org-modern" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦄 Modern Org Style&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Modern Org Style #+author: Daniel Mendler #+language: en&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/org-modern.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/org-modern.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/org-modern.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/org-modern.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/org-modern&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/org-modern-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/org-modern&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/org-modern-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package implements a &#34;modern&#34; style for your Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks. The styling is configurable, you can enable, disable or modify the style of each syntax element individually via the =org-modern= customization group.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/org-modern/blob/screenshots/example.gif?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;The screenshots shows [[file:example.org][example.org]] with =org-modern-mode= turned on and off. The elegant theme featured in the screenshot is [[https://protesilaos.com/emacs/modus-themes][modus-operandi]].&lt;/p&gt; &#xA;&lt;p&gt;This package is still early in its development, so expect bugs and issues in particular due to unfortunate interactions of the =variable-pitch= and =fixed-pitch= fonts. You should ensure that your fonts combine harmonically and have approximately the same height. =org-modern-mode= tries to adjust the tag label display based on the value of =line-spacing=. This looks best if =line-spacing= has a value between 0.1 and 0.4 in the Org buffer. Note that =org-indent-mode= interferes with some of the style elements applied by =org-modern-mode=, e.g., the block brackets in the fringe.&lt;/p&gt; &#xA;&lt;p&gt;Bug reports, improvement or style proposals are welcome! Maybe some more Org elements deserve styling or alternative stylings should be offered?&lt;/p&gt; &#xA;&lt;p&gt;The tag style of =org-modern= is a poor Emacsien&#39;s ripoff from Nicholas Rougier&#39;s beautiful [[https://github.com/rougier/svg-tag-mode][svg-tag-mode]]. In contrast to =svg-tag-mode=, this package avoids images and uses cheap and fast Emacs box text properties. By only styling the text via text properties, the styled text, e.g., dates or tags stay editable and are easy to interact with.&lt;/p&gt; &#xA;&lt;p&gt;On the downside, this restricts our flexibility and may lead to font-dependent issues. We do our best, but for example there is no way we can get round corners. Combining =org-modern-mode= with =svg-tag-mode= is possible. You can use SVG tags and use the table and block styling from =org-modern=. If you are interested in further tweaks, Emacs comes with the builtin =prettify-symbols-mode= which can be used for individual styling of custom keywords.&lt;/p&gt; &#xA;&lt;p&gt;Another popular alternative is [[https://github.com/integral-dw/org-superstar-mode][org-superstar]], which has a more restricted feature set and mainly adjusts headlines and lists. =org-superstar= relies on character composition, while =org-modern= uses text properties, which are considered more future-proof.&lt;/p&gt; &#xA;&lt;p&gt;The package is available on GNU ELPA and MELPA. You can install the package with =package-install=. Then =org-modern= can be enabled manually in an Org buffer by invoking =M-x org-modern-mode=. In order to enable =org-modern= for all your Org buffers, add =org-modern-mode= to the Org mode hooks.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Option 1: Per buffer (add-hook &#39;org-mode-hook #&#39;org-modern-mode) (add-hook &#39;org-agenda-finalize-hook #&#39;org-modern-agenda)&lt;/p&gt; &#xA;&lt;p&gt;;; Option 2: Globally (global-org-modern-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Try the following minimal setup in =emacs -Q= to emulate the looks of the screenshot above.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Minimal UI (package-initialize) (menu-bar-mode -1) (tool-bar-mode -1) (scroll-bar-mode -1) (modus-themes-load-operandi)&lt;/p&gt; &#xA;&lt;p&gt;;; Choose some fonts ;; (set-face-attribute &#39;default nil :family &#34;Iosevka&#34;) ;; (set-face-attribute &#39;variable-pitch nil :family &#34;Iosevka Aile&#34;) ;; (set-face-attribute &#39;org-modern-symbol nil :family &#34;Iosevka&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; Add frame borders and window dividers (modify-all-frames-parameters &#39;((right-divider-width . 40) (internal-border-width . 40))) (dolist (face &#39;(window-divider window-divider-first-pixel window-divider-last-pixel)) (face-spec-reset-face face) (set-face-foreground face (face-attribute &#39;default :background))) (set-face-background &#39;fringe (face-attribute &#39;default :background))&lt;/p&gt; &#xA;&lt;p&gt;(setq ;; Edit settings org-auto-align-tags nil org-tags-column 0 org-catch-invisible-edits &#39;show-and-error org-special-ctrl-a/e t org-insert-heading-respect-content t&lt;/p&gt; &#xA;&lt;p&gt;;; Org styling, hide markup etc. org-hide-emphasis-markers t org-pretty-entities t org-ellipsis &#34;…&#34;&lt;/p&gt; &#xA;&lt;p&gt;;; Agenda styling org-agenda-block-separator ?─ org-agenda-time-grid &#39;((daily today require-timed) (800 1000 1200 1400 1600 1800 2000) &#34; ┄┄┄┄┄ &#34; &#34;┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄&#34;) org-agenda-current-time-string &#34;⭠ now ─────────────────────────────────────────────────&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(global-org-modern-mode) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/org-modern.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>minad/vertico</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/minad/vertico</id>
    <link href="https://github.com/minad/vertico" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💫 vertico.el - VERTical Interactive COmpletion&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: vertico.el - VERTical Interactive COmpletion #+author: Daniel Mendler #+language: en #+export_file_name: vertico.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Vertico: (vertico). #+texinfo_dir_desc: VERTical Interactive COmpletion.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/vertico.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/vertico.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Vertigomovie_restoration.jpg/800px-Vertigomovie_restoration.jpg&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The main focus of Vertico is to provide a UI which behaves /correctly/ under all circumstances. By reusing the built-in facilities system, Vertico achieves /full compatibility/ with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extensible and modular. Additional enhancements are available as [[#extensions][extensions]] or [[#complementary-packages][complementary packages]]. The code base is small and maintainable. The main &lt;del&gt;vertico.el&lt;/del&gt; package is only about 600 lines of code without white space and comments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertical display with arrow key navigation. See the [[#extensions][extensions]] for additional display modes.&lt;/li&gt; &#xA; &lt;li&gt;Prompt shows the current candidate index and the total number of candidates.&lt;/li&gt; &#xA; &lt;li&gt;The current candidate is inserted with =TAB= and selected with =RET=.&lt;/li&gt; &#xA; &lt;li&gt;Non-existing candidates can be submitted with =M-RET= or by moving the point to the prompt.&lt;/li&gt; &#xA; &lt;li&gt;Configurable sorting by history position, length and alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;Long candidates with newlines are formatted to take up less space.&lt;/li&gt; &#xA; &lt;li&gt;Deferred completion style highlighting for performance.&lt;/li&gt; &#xA; &lt;li&gt;Annotations are displayed next to the candidates (&lt;del&gt;annotation-&lt;/del&gt; and &lt;del&gt;affixation-function&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Support for candidate grouping and group cycling commands (&lt;del&gt;group-function&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-mx.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico defines its own local keymap in the minibuffer which is derived from &lt;del&gt;minibuffer-local-map&lt;/del&gt;. The keymap keeps most of the &lt;del&gt;fundamental-mode&lt;/del&gt; keybindings intact and remaps and binds only a handful of commands. Note in particular the binding of =TAB= to &lt;del&gt;vertico-insert&lt;/del&gt; and the bindings of &lt;del&gt;vertico-exit/exit-input&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;beginning-of-buffer&lt;/del&gt;, &lt;del&gt;minibuffer-beginning-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-first&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;end-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-last&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-down-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-down&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-up-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-up&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;next-line&lt;/del&gt;, &lt;del&gt;next-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;previous-line&lt;/del&gt;, &lt;del&gt;previous-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;forward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;backward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;exit-minibuffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-exit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;kill-ring-save&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-save&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-RET= -&amp;gt; &lt;del&gt;vertico-exit-input&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=TAB= -&amp;gt; &lt;del&gt;vertico-insert&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is available from [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]]. You can install it directly via &lt;del&gt;package-install&lt;/del&gt;. After installation, you can activate the global minor mode with =M-x vertico-mode=. In order to configure Vertico and other packages in your init.el, you may want to take advantage of &lt;del&gt;use-package&lt;/del&gt;. Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico (use-package vertico :init (vertico-mode)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Different scroll margin&#xA;;; (setq vertico-scroll-margin 0)&#xA;&#xA;;; Show more candidates&#xA;;; (setq vertico-count 20)&#xA;&#xA;;; Grow and shrink the Vertico minibuffer&#xA;;; (setq vertico-resize t)&#xA;&#xA;;; Optionally enable cycling for `vertico-next&#39; and `vertico-previous&#39;.&#xA;;; (setq vertico-cycle t)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;;; Persist history over Emacs restarts. Vertico sorts by history position. (use-package savehist :init (savehist-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; A few more useful configurations... (use-package emacs :init ;; Add prompt indicator to &lt;code&gt;completing-read-multiple&#39;. ;; We display [CRM&amp;lt;separator&amp;gt;], e.g., [CRM,] if the separator is a comma. (defun crm-indicator (args) (cons (format &#34;[CRM%s] %s&#34; (replace-regexp-in-string &#34;\\&lt;/code&gt;\[.&lt;em&gt;?]\&lt;/em&gt;\|\[.&lt;em&gt;?]\&lt;/em&gt;\&#39;&#34; &#34;&#34; crm-separator) (car args)) (cdr args))) (advice-add #&#39;completing-read-multiple :filter-args #&#39;crm-indicator)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Do not allow the cursor in the minibuffer prompt&#xA;(setq minibuffer-prompt-properties&#xA;      &#39;(read-only t cursor-intangible t face minibuffer-prompt))&#xA;(add-hook &#39;minibuffer-setup-hook #&#39;cursor-intangible-mode)&#xA;&#xA;;; Emacs 28: Hide commands in M-x which do not work in the current mode.&#xA;;; Vertico commands are hidden in normal buffers.&#xA;;; (setq read-extended-command-predicate&#xA;;;       #&#39;command-completion-default-include-p)&#xA;&#xA;;; Enable recursive minibuffers&#xA;(setq enable-recursive-minibuffers t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;I recommend to give Orderless completion a try, which is different from the prefix TAB completion used by the basic default completion system or in shells.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Optionally use the `orderless&#39; completion style. (use-package orderless :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers &#39;(+orderless-dispatch) ;; orderless-component-separator #&#39;orderless-escapable-split-on-space) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles partial-completion))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. See =+orderless-dispatch= in the [[https://github.com/minad/consult/wiki][Consult wiki]] for an advanced Orderless style dispatcher. Additionally enable =partial-completion= for file path expansion. =partial-completion= is important for file wildcard support. Multiple files can be opened at once with =find-file= if you enter a wildcard. You may also give the =initials= completion style a try.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[https://github.com/minad/vertico/wiki][Vertico Wiki]] for additional configuration tips. For more general documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want to create your own completion commands, you can find documentation about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Completion styles and TAB completion&lt;/p&gt; &#xA;&lt;p&gt;The bindings of the &lt;del&gt;minibuffer-local-completion-map&lt;/del&gt; are not available in Vertico by default. This means that TAB works differently from what you may expect from the default Emacs completion system.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to have the default completion commands a key press away you can add new bindings or even replace the Vertico bindings. Then the default completion commands behave as usual. For example you can use =M-TAB= to cycle between candidates if you have set &lt;del&gt;completion-cycle-threshold&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;?&#34; #&#39;minibuffer-completion-help) (define-key vertico-map (kbd &#34;M-RET&#34;) #&#39;minibuffer-force-complete-and-exit) (define-key vertico-map (kbd &#34;M-TAB&#34;) #&#39;minibuffer-complete) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;orderless&lt;/del&gt; completion style does not support completion of a common prefix substring, as you may be familiar with from shells or the basic default completion system. The reason is that the Orderless input string is usually not a prefix. In order to support completing prefixes you may want to combine &lt;del&gt;orderless&lt;/del&gt; with &lt;del&gt;substring&lt;/del&gt; in your =completion-styles= configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(substring orderless basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can experiment with the built-in completion-styles, e.g., adding =partial-completion= or =flex=. The =partial-completion= style is important to add if you want to open multiple files at once with &lt;del&gt;find-file&lt;/del&gt; using wildcards. In order to open multiple files at once, you have to move to the prompt and then press =RET=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic substring partial-completion flex)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Because Vertico is fully compatible with Emacs default completion system, further customization of completion behavior can be achieved by setting the designated Emacs variables. For example, one may wish to disable case-sensitivity for file and buffer matching when built-in completion styles are used instead of &lt;del&gt;orderless&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq read-file-name-completion-ignore-case t read-buffer-completion-ignore-case t completion-ignore-case t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completion-at-point and completion-in-region&lt;/p&gt; &#xA;&lt;p&gt;The =completion-at-point= command is usually bound to =M-TAB= or =TAB=. In case you want to use Vertico for completion-at-point/completion-in-region, you can use the function &lt;del&gt;consult-completion-in-region&lt;/del&gt; provided by the Consult package.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =completion-in-region-function= setting also affects TAB completion in the minibuffer when =M-:= (&lt;del&gt;eval-expression&lt;/del&gt;) is used.&lt;/p&gt; &#xA;&lt;p&gt;You may also want to look into my [[https://github.com/minad/corfu][Corfu]] package, which provides a minimal completion system for =completion-in-region= in a child frame popup. Corfu is also a narrowly focused package and developed in the same spirit as Vertico.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensions :properties: :custom_id: extensions &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We maintain small extension packages to Vertico in this repository in the subdirectory [[https://github.com/minad/vertico/tree/main/extensions][extensions/]]. The extensions are installed together with Vertico if you pull the package from ELPA. The extensions are inactive by default and can be enabled manually if desired. Furthermore it is possible to install all of the files separately, both &lt;del&gt;vertico.el&lt;/del&gt; and the &lt;del&gt;vertico-*.el&lt;/del&gt; extensions. Currently the following extensions come with the Vertico ELPA package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-buffer.el][vertico-buffer]]: =vertico-buffer-mode= to display Vertico in a separate buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-directory.el][vertico-directory]]: Commands for Ido-like directory navigation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-flat.el][vertico-flat]]: =vertico-flat-mode= to enable a flat, horizontal display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-grid.el][vertico-grid]]: =vertico-grid-mode= to enable a grid display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-indexed.el][vertico-indexed]]: =vertico-indexed-mode= to select indexed candidates with prefix arguments.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-mouse.el][vertico-mouse]]: =vertico-mouse-mode= to support for scrolling and candidate selection.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-multiform.el][vertico-multiform]]: Configure Vertico modes per command or completion category.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-quick.el][vertico-quick]]: Commands to select using Avy-style quick keys.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-repeat.el][vertico-repeat]]: The command =vertico-repeat= repeats the last completion session.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-reverse.el][vertico-reverse]]: =vertico-reverse-mode= to reverse the display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-unobtrusive.el][vertico-unobtrusive]]: =vertico-unobtrusive-mode= displays only the topmost candidate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the Commentary of those files for configuration details. With these extensions it is possible to adapt Vertico such that it matches your preference or behaves similar to other familiar UIs. For example, the combination =vertico-flat= plus =vertico-directory= resembles Ido in look and feel. For an interface similar to Helm, the extension =vertico-buffer= allows you to configure freely where the completion buffer opens, instead of growing the minibuffer. Furthermore =vertico-buffer= will adjust the number of displayed candidates according to the buffer height.&lt;/p&gt; &#xA;&lt;p&gt;Configuration example for =vertico-directory=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure directory extension. (use-package vertico-directory :after vertico :ensure nil ;; More convenient directory navigation commands :bind (:map vertico-map (&#34;RET&#34; . vertico-directory-enter) (&#34;DEL&#34; . vertico-directory-delete-char) (&#34;M-DEL&#34; . vertico-directory-delete-word)) ;; Tidy shadowed file names :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Configure Vertico per command or completion category&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-ripgrep.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;Vertico offers the =vertico-multiform-mode= which allows you to configure Vertico per command or per completion category. The =vertico-buffer-mode= enables a Helm-like buffer display, which takes more space but also displays more candidates. This verbose display mode is useful for commands like &lt;del&gt;consult-imenu&lt;/del&gt; or &lt;del&gt;consult-outline&lt;/del&gt; since the buffer display allows you to get a better overview over the entire current buffer. But for other commands you want to keep using the default Vertico display. &lt;del&gt;vertico-multiform-mode&lt;/del&gt; solves this configuration problem!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico-multiform (vertico-multiform-mode)&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per command. ;; Use a buffer with indices for imenu ;; and a flat (Ido-like) menu for M-x. (setq vertico-multiform-commands &#39;((consult-imenu buffer indexed) (execute-extended-command unobtrusive)))&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per completion category. ;; Use the grid display for files and a buffer ;; for the consult-grep commands. (setq vertico-multiform-categories &#39;((file grid) (consult-grep buffer))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Temporary toggling between the different display modes is possible. Bind the following commands:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;\M-V&#34; #&#39;vertico-multiform-vertical) (define-key vertico-map &#34;\M-G&#34; #&#39;vertico-multiform-grid) (define-key vertico-map &#34;\M-F&#34; #&#39;vertico-multiform-flat) (define-key vertico-map &#34;\M-R&#34; #&#39;vertico-multiform-reverse) (define-key vertico-map &#34;\M-U&#34; #&#39;vertico-multiform-unobtrusive) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can use your own functions or even lambdas to configure the completion behavior per command or per completion category. The function must have the calling convention of a mode, i.e., it takes a single argument, which is either 1 to turn on the mode and -1 to turn off the mode.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure &lt;code&gt;consult-outline&#39; as a scaled down TOC in a separate buffer (setq vertico-multiform-commands &lt;/code&gt;((consult-outline buffer ,(lambda (_) (text-scale-set -1))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Furthermore you can tune buffer-local settings per command or category.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Change the default sorting function. ;; See &lt;code&gt;vertico-sort-function&#39; and &lt;/code&gt;vertico-sort-override-function&#39;. (setq vertico-multiform-commands &#39;((describe-symbol (vertico-sort-function . vertico-sort-alpha))))&lt;/p&gt; &#xA;&lt;p&gt;(setq vertico-multiform-categories &#39;((symbol (vertico-sort-function . vertico-sort-alpha)) (file (vertico-sort-function . sort-directories-first))))&lt;/p&gt; &#xA;&lt;p&gt;;; Sort directories before files (defun sort-directories-first (files) (setq files (vertico-sort-history-length-alpha files)) (nconc (seq-filter (lambda (x) (string-suffix-p &#34;/&#34; x)) files) (seq-remove (lambda (x) (string-suffix-p &#34;/&#34; x)) files))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Combining these features allows us to fine-tune the completion display even more by adjusting the &lt;del&gt;vertico-buffer-display-action&lt;/del&gt;. We can for example reuse the current window for commands of the &lt;del&gt;consult-grep&lt;/del&gt; category (&lt;del&gt;consult-grep&lt;/del&gt;, &lt;del&gt;consult-git-grep&lt;/del&gt; and &lt;del&gt;consult-ripgrep&lt;/del&gt;). Note that this configuration is incompatible with Consult preview, since the previewed buffer is usually shown in exactly this window. Nevertheless this snippet demonstrates the flexibility of the configuration system.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure the buffer display and the buffer display action (setq vertico-multiform-categories &#39;((consult-grep buffer (vertico-buffer-display-action . (display-buffer-same-window)))))&lt;/p&gt; &#xA;&lt;p&gt;;; Disable preview for consult-grep commands (consult-customize consult-ripgrep consult-git-grep consult-grep :preview-key nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As another example, the following code uses &lt;del&gt;vertico-flat&lt;/del&gt; and &lt;del&gt;vertico-cycle&lt;/del&gt; to emulate &lt;del&gt;(ido-mode &#39;buffer)&lt;/del&gt;, i.e., Ido when it is enabled only for completion of buffer names. &lt;del&gt;vertico-cycle&lt;/del&gt; set to &lt;del&gt;t&lt;/del&gt; is necessary here to prevent completion candidates from disappearing when they scroll off-screen to the left.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq vertico-multiform-categories &#39;((buffer flat (vertico-cycle . t)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complementary packages :properties: :custom_id: complementary-packages &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico integrates well with complementary packages, which enrich the completion UI. These packages are fully supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][Marginalia]]: Rich annotations in the minibuffer&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult][Consult]]: Useful search and navigation commands&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][Embark]]: Minibuffer actions and context menu&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][Orderless]]: Advanced completion style&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to get accustomed with the package ecosystem, I recommed the following quick start approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start with plain Emacs (&lt;del&gt;emacs -Q&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Install and enable Vertico to get incremental minibuffer completion.&lt;/li&gt; &#xA; &lt;li&gt;Install Orderless and/or configure the built-in completion styles for more flexible minibuffer filtering.&lt;/li&gt; &#xA; &lt;li&gt;Install Marginalia if you like rich minibuffer annotations.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark and add two keybindings for &lt;del&gt;embark-dwim&lt;/del&gt; and &lt;del&gt;embark-act&lt;/del&gt;. I am using the mnemonic keybindings =M-.= and =C-.= since these commands allow you to act on the object at point or in the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Install Consult if you want additional featureful completion commands, e.g., the buffer switcher &lt;del&gt;consult-buffer&lt;/del&gt; with preview or the line-based search &lt;del&gt;consult-line&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark-Consult and Wgrep for export from =consult-line= to =occur-mode= buffers and from =consult-grep= to editable =grep-mode= buffers.&lt;/li&gt; &#xA; &lt;li&gt;Fine tune Vertico with [[#extensions][extensions]].&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The ecosystem is modular. You don&#39;t have to use all of these components. Use only the ones you like and the ones which fit well into your setup. The steps 1. to 4. introduce no new commands over plain Emacs. Step 5. introduces the new commands &lt;del&gt;embark-act&lt;/del&gt; and &lt;del&gt;embark-dwim&lt;/del&gt;. In step 6. you get the Consult commands, some offer new functionality not present in Emacs already (e.g., &lt;del&gt;consult-line&lt;/del&gt;) and some are substitutes (e.g., &lt;del&gt;consult-buffer&lt;/del&gt; for &lt;del&gt;switch-to-buffer&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Child frames and Popups&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An often requested feature is the ability to display the completions in a child frame popup. Personally I am critical of using child frames for minibuffer completion. From my experience it introduces more problems than it solves. Most importantly child frames hide the content of the underlying buffer. Furthermore child frames do not play well together with changing windows and entering recursive minibuffer sessions. On top, child frames can feel slow and sometimes flicker. A better alternative is the &lt;del&gt;vertico-buffer&lt;/del&gt; display which can even be configured individually per command using &lt;del&gt;vertico-multiform&lt;/del&gt;. On the plus side of child frames, the completion display appears at the center of the screen, where your eyes are focused. Please give the following packages a try and judge for yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/muffinmad/emacs-mini-frame][mini-frame]]: Display the entire minibuffer in a child frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/mini-popup][mini-popup]]: Slightly simpler alternative to mini-frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tumashu/vertico-posframe][vertico-posframe]]: Display only the Vertico minibuffer in a child frame using the posframe library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many alternative completion UIs, each UI with its own advantages and disadvantages.&lt;/p&gt; &#xA;&lt;p&gt;Vertico aims to be 100% compliant with all Emacs commands and achieves that with a minimal code base, relying purely on &lt;del&gt;completing-read&lt;/del&gt; while avoiding to invent its own APIs. Inventing a custom API as Helm or Ivy is explicitly avoided in order to increase flexibility and package reuse. Due to its small code base and reuse of the Emacs built-in facilities, bugs and compatibility issues are less likely to occur in comparison to completion UIs or full completion systems, which reimplement a lot of functionality.&lt;/p&gt; &#xA;&lt;p&gt;Since Vertico only provides the UI, you may want to combine it with some of the complementary packages, to give a full-featured completion experience similar to Helm or Ivy. Overall the packages in the spirit of Vertico have a different style than Helm or Ivy. The idea is to have smaller independent components, which one can add and understand step by step. Each component focuses on its niche and tries to be as non-intrusive as possible. Vertico targets users interested in crafting their Emacs precisely to their liking - completion plays an integral part in how the users interacts with Emacs.&lt;/p&gt; &#xA;&lt;p&gt;There are other interactive completion UIs, which follow a similar philosophy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][Mct]]: Minibuffer and Completions in Tandem. Mct reuses the default &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer and enhances it with automatic updates and additional keybindings, to select a candidate and move between minibuffer and completions buffer. Mct can be configured to open only when requested. Furthermore since Mct uses a fully functional buffer you can reuse all your familar buffer commands inside the completions buffer. The main distinction to Vertico&#39;s approach is that &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer displays all matching candidates. This has the advantage that you can interact freely with the candidates and jump around with Isearch or Avy. On the other hand it necessarily causes a slowdown in comparison to Vertico, which only displays a subset of candidates. Mct supports completion in region via its &lt;del&gt;mct-region-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/icomplete-vertical][Icomplete-vertical]]: This package enhances the Emacs builtin Icomplete with a vertical display. In contrast to Vertico, Icomplete rotates the candidates such that the current candidate always appears at the top. From my perspective, candidate rotation feels a bit less intuitive than the UI of Vertico or Selectrum. Note that Emacs 28 offers a built-in &lt;del&gt;icomplete-vertical-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/raxod502/selectrum][Selectrum]]: Selectrum is the predecessor of Vertico, since it directly inspired Vertico. Selectrum has a similar UI and interaction model as Vertico. Vertico offers additional features and is more flexible than Selectrum thanks to its [[#extensions][extensions]]. Unfortunately Selectrum is not fully compatible with every Emacs completion command and dynamic completion tables ([[https://github.com/raxod502/selectrum/issues/481][Issue #481]]), since it uses its own filtering infrastructure, which deviates from the standard Emacs completion facilities. The filtering infrastructure also leads to a larger and more complex code base.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to learn more about Vertico and minibuffer completion, check out the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/hlissner/doom-emacs/tree/develop/modules/completion/vertico][Doom Emacs Vertico Module]]: Vertico is Doom&#39;s default completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=w9hHMDyF9V4][Emacs Minibuffer Completions]] (2022-02-12) by Greg Yut.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=hPwDbx--Waw][Vertico Extensions for Emacs]] (2022-01-08) by Karthik Chikmagalur.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/5ffb2at2d7w][Using Emacs Episode 80 - Vertico, Marginalia, Consult and Embark]] (2021-10-26) by Mike Zamansky.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=UtqE-lR2HCA][System Crafters Live! - Replacing Ivy and Counsel with Vertico and Consult]] (2021-05-21) by David Wilson.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=J0OaRy85MOo][Streamline Your Emacs Completions with Vertico]] (2021-05-17) by David Wilson.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Problematic completion commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is robust in most scenarios. However some completion commands make certain assumptions about the completion styles and the completion UI. Some of these assumptions may not hold in Vertico or other UIs and require minor workarounds.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-refile&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-refile&lt;/del&gt; uses &lt;del&gt;org-olpath-completing-read&lt;/del&gt; to complete the outline path in steps, when &lt;del&gt;org-refile-use-outline-path&lt;/del&gt; is non-nil.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately the implementation of this Org completion table assumes that the &lt;del&gt;basic&lt;/del&gt; completion style is used. The table is incompatible with completion styles like &lt;del&gt;substring&lt;/del&gt;, &lt;del&gt;flex&lt;/del&gt; or &lt;del&gt;orderless&lt;/del&gt;. In order to fix the issue at the root, the completion table should make use of completion boundaries similar to the built-in file completion table. In your user configuration you can prioritize &lt;del&gt;basic&lt;/del&gt; before &lt;del&gt;orderless&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 1: Use the basic completion style (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps t) (advice-add #&#39;org-olpath-completing-read :around (lambda (&amp;amp;rest args) (minibuffer-with-setup-hook (lambda () (setq-local completion-styles &#39;(basic))) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you may want to disable the outline path completion in steps. The completion on the full path can be quicker since the input string matches directly against substrings of the full path, which is useful with Orderless. However the list of possible completions becomes much more cluttered.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 2: Complete full paths (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-agenda-filter&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;del&gt;org-refile&lt;/del&gt;, the &lt;del&gt;org-agenda-filter&lt;/del&gt; completion function (&lt;del&gt;org-agenda-filter-completion-function&lt;/del&gt;) does not make use of completion boundaries. Unfortunately =TAB= completion (&lt;del&gt;minibuffer-complete&lt;/del&gt;) does not work for this reason. This affects Vertico and also the Emacs default completion system. For example if you enter &lt;del&gt;+tag&amp;lt;0 TAB&lt;/del&gt; the input is replaced with &lt;del&gt;0:10&lt;/del&gt; which is not correct. With preserved completion boundaries, the expected result would be &lt;del&gt;+tag&amp;lt;0:10&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;tmm-menubar&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The text menu bar works well with Vertico but always shows a =&lt;em&gt;Completions&lt;/em&gt;= buffer, which is unwanted if you use the Vertico UI. This completion buffer can be disabled with an advice. If you disabled the standard GUI menu bar and prefer the Vertico interface you may also overwrite the default F10 keybinding.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (global-set-key [f10] #&#39;tmm-menubar) (advice-add #&#39;tmm-add-prompt :after #&#39;minibuffer-hide-completions) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;ffap-menu&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;ffap-menu&lt;/del&gt; shows the =&lt;em&gt;Completions&lt;/em&gt;= buffer by default like &lt;del&gt;tmm-menubar&lt;/del&gt;, which is unnecessary with Vertico. This completion buffer can be disabled as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add #&#39;ffap-menu-ask :around (lambda (&amp;amp;rest args) (cl-letf (((symbol-function #&#39;minibuffer-completion-help) #&#39;ignore)) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;completion-table-dynamic&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dynamic completion tables (&lt;del&gt;completion-table-dynamic&lt;/del&gt;, &lt;del&gt;completion-table-in-turn&lt;/del&gt;, etc.) should work well with Vertico. However the requirement is that the =basic= completion style is enabled. The =basic= style performs prefix filtering by passing the input to the completion table (or the dynamic completion table function). The =basic= completion style must not necessarily be configured with highest priority, it can also come after other completion styles like =orderless=, =substring= or =flex=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic)) ;; (setq completion-styles &#39;(orderless basic)) (completing-read &#34;Dynamic: &#34; (completion-table-dynamic (lambda (str) (list (concat str &#34;1&#34;) (concat str &#34;2&#34;) (concat str &#34;3&#34;))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Submitting the empty string&lt;/p&gt; &#xA;&lt;p&gt;The commands &lt;del&gt;multi-occur&lt;/del&gt;, &lt;del&gt;auto-insert&lt;/del&gt;, &lt;del&gt;bbdb-create&lt;/del&gt; read multiple arguments from the minibuffer with &lt;del&gt;completing-read&lt;/del&gt;, one at a time, until you submit an empty string. You should type =M-RET= (&lt;del&gt;vertico-exit-input&lt;/del&gt;) to finish the loop. Directly pressing =RET= (&lt;del&gt;vertico-exit&lt;/del&gt;) does not work since the first candidate is preselected.&lt;/p&gt; &#xA;&lt;p&gt;The underlying issue is that &lt;del&gt;completing-read&lt;/del&gt; always allows you to exit with the empty string, which is called the /null completion/, even if the &lt;del&gt;REQUIRE-MATCH&lt;/del&gt; argument is non-nil. Try the following two calls to &lt;del&gt;completing-read&lt;/del&gt; with =C-x C-e=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match) (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match nil nil &#34;&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In both cases the empty string can be submitted. In the first case no explicit default value is specified and Vertico preselects the &lt;em&gt;first&lt;/em&gt; candidate. In order to exit with the empty string, press =M-RET=. In the second case the explicit default value &#34;&#34; is specified and Vertico preselects the prompt, such that exiting with the empty string is possible by pressing =RET= only.&lt;/p&gt; &#xA;&lt;p&gt;** Tramp hostname completion&lt;/p&gt; &#xA;&lt;p&gt;In combination with Orderless, hostnames are not made available for completion after entering =/ssh:=. In order to avoid this problem, the =basic= completion style should be specified for the file completion category, such that =basic= is tried before =orderless=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic partial-completion)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For users who are familiar with the =completion-style= machinery: You may also define a custom completion style which sets in only for remote files!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun basic-remote-try-completion (string table pred point) (and (vertico--remote-p string) (completion-basic-try-completion string table pred point))) (defun basic-remote-all-completions (string table pred point) (and (vertico--remote-p string) (completion-basic-all-completions string table pred point))) (add-to-list &#39;completion-styles-alist &#39;(basic-remote basic-remote-try-completion basic-remote-all-completions nil)) (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic-remote partial-completion)))) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Alexander-Miller/treemacs</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/Alexander-Miller/treemacs</id>
    <link href="https://github.com/Alexander-Miller/treemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;-&lt;em&gt;- fill-column: 120 org-list-indent-offset: 1 toc-org-max-depth: 2 -&lt;/em&gt;-&lt;/h1&gt; &#xA;&lt;p&gt;#+STARTUP: noinlineimages&lt;/p&gt; &#xA;&lt;p&gt;[[https://gitter.im/treemacs/community][file:https://badges.gitter.im/Alexander-Miller/treemacs.png]] [[https://melpa.org/#/treemacs][file:https://melpa.org/packages/treemacs-badge.svg]] [[https://stable.melpa.org/#/treemacs][file:https://stable.melpa.org/packages/treemacs-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Treemacs - a tree layout file explorer for Emacs :noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:screenshots/screenshot.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Content :TOC:noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#quick-feature-overview][Quick Feature Overview]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#fancy-gifs][Fancy Gifs!]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#quick-start][Quick Start]]&lt;/li&gt; &#xA; &lt;li&gt;[[#detailed-feature-list][Detailed Feature List]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#projects-and-workspaces][Projects and Workspaces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#conveniently-editing-your-projects-and-workspaces][Conveniently Editing Your Projects and Workspaces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#navigation-without-projects-and-workspaces][Navigation without Projects and Workspaces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#frame-locality][Frame Locality]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#mouse-interface][Mouse Interface]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#follow-mode][Follow-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tag-follow-mode][Tag-follow-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#fringe-indicator-mode][Fringe-indicator-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#git-mode][Git-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#filewatch-mode][Filewatch-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#file-management][File Management]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#indent-guide-mode][Indent-guide-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#session-persistence][Session Persistence]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#terminal-compatibility][Terminal Compatibility]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tag-view][Tag View]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#current-directory-awareness][Current-Directory Awareness]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tramp-support][Tramp Support]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#org-support][Org Support]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#theme-support][Theme Support]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#additional-packages][Additional Packages]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#treemacs-as-a-framework][Treemacs as a Framework]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#configuration][Configuration]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#variables][Variables]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#faces][Faces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-compatibility][Evil compatibility]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#customizing-themes-and-icons][Customizing Themes and Icons]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#keymap][Keymap]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#unbound-functions][Unbound functions]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#default-keymaps][Default keymaps]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#compatibility][Compatibility]]&lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]]&lt;/li&gt; &#xA; &lt;li&gt;[[#contributing][Contributing]]&lt;/li&gt; &#xA; &lt;li&gt;[[#working-with-the-code-base][Working With The Code Base]]&lt;/li&gt; &#xA; &lt;li&gt;[[#dependencies][Dependencies]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quick Feature Overview Treemacs is a file and project explorer similar to NeoTree or vim&#39;s NerdTree, but largely inspired by the Project Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick navigation and exploration, while also possessing &lt;em&gt;basic&lt;/em&gt; file management utilities. Specifically a quick feature overview looks as follows:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Project management :: Treemacs lets you view multiple file trees - projects - at once and quickly add or remove them, and groups projects in workspaces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy navigation :: quickly move between projects or use shortcuts to jump to parent or neighbouring nodes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Versatile file access :: decide exactly how and where a file will be opened, including using &lt;del&gt;ace-window&lt;/del&gt; to choose a window or launching an external application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Understanding of frames :: every frame will receive its own treemacs buffer that will live and die with that frame.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finding of files and tags :: Treemacs can follow along and keep in focus the currently selected file or even the tag at point, either manually or automatically using either &lt;del&gt;treemacs-follow-mode&lt;/del&gt; or &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Git Integration :: Treemacs can use different faces for files and directories based on their git status. The git process is run asynchronously, minimizing its performance impact.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/deb0ch/emacs-winum][Winum]] &amp;amp; [[https://github.com/abo-abo/ace-window][ace-window]] compatibility :: The presence of treemacs will not interfere with winum&#39;s and ace-window&#39;s usual layouts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/bbatsov/projectile][Projectile/project.el]] integration :: the &lt;del&gt;treemacs-projectile&lt;/del&gt; package lets you quickly add your projectile projects to the treemacs workspace. &lt;del&gt;project.el&lt;/del&gt; compatibility is built-in.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple mouse interface :: Left clicks will work the same as you&#39;re used to from with graphical applications&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Session persistence :: Treemacs automatically saves and restores your workspaces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dashing good looks :: Treemacs uses (optionally resizable) png images in HD 22x22 resolution for its icons (quantity is, of course, another matter). When run in a terminal a simple fallback is used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tag view :: Treemacs can display files&#39; tags. All file types that Emacs can generate a (semantic) imenu index for are supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visual feedback :: When it would otherwise be difficult to see the message in the minibuffer success/failure is indicated with pulse.el.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Theming support :: Treemacs supports using multiple icon themes that can be changed at will.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ease of use :: Treemacs offers many configuration options, but comes with a set of (what hopefully should be) sane defaults. Installation aside there are two obligatory pieces of setup: 1) Choosing convenient keybindings to run treemacs and 2) If you use evil: requiring &lt;del&gt;treemacs-evil&lt;/del&gt; to integrate treemacs with evil and enable j/k navigation. More on both below. You can also summon helpful hydras with &lt;del&gt;?&lt;/del&gt; and &lt;del&gt;C-?&lt;/del&gt; that will remind you of treemacs&#39; many keybindings and features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bookmark integration :: Running &lt;del&gt;bookmark-set&lt;/del&gt; on a Treemacs item will store a bookmark to Treemacs buffer for that item.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Fancy Gifs!&lt;/p&gt; &#xA;&lt;p&gt;(The font used in the gifs is Fantasque Sans Mono)&lt;/p&gt; &#xA;&lt;p&gt;Various ways to open files: [[file:screenshots/open-files.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Workspace administration with org-mode: [[file:screenshots/workspace-edit.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Automatic reaction to changes in the file system: [[file:screenshots/filewatch.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Automatic reaction to changes in git: [[file:screenshots/git.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Full-featured mouse interface: [[file:screenshots/mouse-interface.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Including moving and opening files via mouse drag: [[file:screenshots/mouse-drag.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Resizable icons: [[file:screenshots/icon-resize.gif]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quick Start If you don&#39;t care about reading the full readme here&#39;s a list of some bare bones basics to get you started:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;First of all: press &lt;del&gt;?&lt;/del&gt; to summon the helpful hydra: [[file:screenshots/hydra.png]]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use evil don&#39;t forget to also install &lt;del&gt;treemacs-evil&lt;/del&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use projectile you can install &lt;del&gt;treemacs-projectile&lt;/del&gt; to allow quickly add your projectile projects to treemacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Treemacs doesn&#39;t bind any global keys, you need to use whatever fits you best. A full install setup can be found [[#installation][below]]. Otherwise just add a keybind for &lt;del&gt;treemacs&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For navigation use n/p (j/k when evil), M-n/M-p to move to same-height neighbour, u to go to parent, and C-j/C-k to move between projects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s half a dozen different ways to open nodes, all bound under o as prefix. Pick your favourite.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TAB and RET are particularly configurable. See &lt;del&gt;treemacs-TAB/RET-actions-config&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Projects administration is bound under the &lt;del&gt;C-c C-p&lt;/del&gt; prefix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Detailed Feature List ** Projects and Workspaces If you&#39;ve previously used a different explorer like NeoTree or NerdTree - or an earlier version of treemacs for that matter - you are probably used to a display system wherein you see exactly a single file tree whose exact root you can arbitrarily change. This system makes it difficult to work on and switch between multiple projects. Treemacs used to (and still does) remedy that limitation by making every treemacs buffer unique to its frame, but it has now been redesigned to be able to display multiple file trees - projects - at once.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In treemacs a workspace is simply a (named) collection of projects, while a project mostly consists of 2 things: its location in the file system and its name. This is the info that you need to provide when you want to add a new project to your workspace. Just like projects you can add, remove, rename and switch between workspaces at any time.&lt;/p&gt; &#xA;&lt;p&gt;This design approach has various advantages and disadvantages. It is now no longer possible to &#34;free roam&#34; in the file system with treemacs, i.e. you can no longer arbitrarily switch the single file tree&#39;s root to the directory at point or the current root&#39;s parent. Another restriction is that the same part of the file system may not appear more than once as part of the workspace. For example it is not possible to have both /Documents and /Documents/ProjectX as projects in the same workspace, since internally treemacs heavily relies on every node having a unique natural key in its absolute path. Nonetheless the pros certainly outweigh the cons, as a multiroot setup allows to work on multiple projects with any combination concern/buffer separating frameworks, be it persp/perspective, eyebrowse, tab-bar-mode, or project.el/projectile. It also opens the potential for concurrent display not only of the file system, but e.g. the currently open buffers.&lt;/p&gt; &#xA;&lt;p&gt;*** Workspace Selection When a workspace is first needed, treemacs will select a workspace in the following manner:&lt;/p&gt; &#xA;&lt;p&gt;If the current buffer is editing a file then treemacs will try to find the first workspace with a project containing that file. If that fails treemacs will resort to using the /fallback workspace/ which is defined as simply the /first/ element in the list of all workspace.&lt;/p&gt; &#xA;&lt;p&gt;The order of workspaces is the same that you see when calling &lt;del&gt;treemacs-edit-workspaces&lt;/del&gt; (see next chapter). You can interactively set the fallback workspace by calling &lt;del&gt;treemacs-set-fallback-workspace&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This selection will happen when treemacs is first started (with a command like &lt;del&gt;treemacs-select-window&lt;/del&gt;) or when a function that requires the current workspace to be known is used (like adding or removing a project). *** Disabling projects It is possible to disable a project so it won&#39;t appear in treemacs, but still remains a part of your workspace, keeping it visible when you go edit your workspace layout. To do so simply start the project&#39;s name with &#34;COMMENT&#34;:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/disable-project.png]]&lt;/p&gt; &#xA;&lt;p&gt;** Conveniently Editing Your Projects and Workspaces There are two ways to edit your projects and workspaces: call up single add/remove/rename/switch commands under either the &lt;del&gt;C-c C-p&lt;/del&gt; or &lt;del&gt;C-c C-w&lt;/del&gt; prefix, or call &lt;del&gt;treemacs-edit-workspaces&lt;/del&gt; and edit your entire layout in the form of a single org-mode buffer.&lt;/p&gt; &#xA;&lt;p&gt;The used org-format is quite simple: level 1 headlines are names of workspaces, level 2 headlines are names of projects in a workspace, and every project&#39;s path is given as a description list, starting with a &lt;del&gt;-&lt;/del&gt; (and an optional leading space). Empty lines and lines starting with &lt;del&gt;#&lt;/del&gt; are ignored, and everything else leads to an error.&lt;/p&gt; &#xA;&lt;p&gt;You needn&#39;t worry about making mistakes either. If there&#39;s something wrong when you call &lt;del&gt;treemacs-finish-edit&lt;/del&gt; (C-c C-c) then treemacs will point you at the incorrect line and tell you what&#39;s missing:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/workspace-edit.png]]&lt;/p&gt; &#xA;&lt;p&gt;(Note that the list with the path property allows an indentation of 0 or 1 spaces only. The much greater visible indentation is caused by &lt;del&gt;org-indent-mode&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;** Navigation without Projects and Workspaces&lt;/p&gt; &#xA;&lt;p&gt;If a strict workspace and project structure, as described above, is too stringent for your use-case there are multiple other ways to use treemacs in a more &#34;free-form&#34; style:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use &lt;del&gt;treemacs-display-current-project-exclusively&lt;/del&gt; to display only the current project (removing all other projects from the workspace).&lt;/li&gt; &#xA; &lt;li&gt;You can enable &lt;del&gt;treemacs-project-follow-mode&lt;/del&gt; to make treemacs automatically switch to the project for the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;As long as there is exactly /a single project/ in your workspace you can also use &lt;del&gt;M-H&lt;/del&gt; and &lt;del&gt;M-L&lt;/del&gt; (or &lt;del&gt;treemacs-root-up&lt;/del&gt; and &lt;del&gt;treemacs-root-down&lt;/del&gt;) to to arbitrarily change the project&#39;s root and freely navigate through your your file system, similar to dired. &lt;del&gt;M-H&lt;/del&gt; will navigate one level upward in the file system, &lt;del&gt;M-L&lt;/del&gt; will move into the directory at point.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Frame Locality Treemacs buffers have a limited scope they are visible in: the frames they are created in. A treemacs buffer, once created, lives alongside and inside its frame, and is also destroyed with that frame. Calling &lt;del&gt;treemacs&lt;/del&gt; while inside a new frame will create a new buffer for it, regardless how many other treemacs buffers already exist. While there can be multiple unique treemacs buffer they will all still show the same workspace and the same projects.&lt;/p&gt; &#xA;&lt;p&gt;A treemacs buffer that does not belong to a frame may still be made visible by manually selecting in the buffer list. This would break various assumptions in treemacs&#39; code base and effectively falls under undefined behaviour - a bad idea all around.&lt;/p&gt; &#xA;&lt;p&gt;** Mouse Interface Treemacs handles left clicks in much the same way as modern graphical applications do: a single click sets the focus, a double click expands or collapses a directory or tag section node and visits a file/moves to a tag for a file/tag node.&lt;/p&gt; &#xA;&lt;p&gt;Additionally tag sections can be expanded or collapsed by a single click on the file/tag section icon.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to expand/collpase nodes with a single mouse click you can also use &lt;del&gt;treemacs-single-click-expand-action&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (with-eval-after-load &#39;treemacs (define-key treemacs-mode-map [mouse-1] #&#39;treemacs-single-click-expand-action)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;A right click popup-menu is also available:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/right-click.png]]&lt;/p&gt; &#xA;&lt;p&gt;You can move and open files by dragging them with the mouse.&lt;/p&gt; &#xA;&lt;p&gt;** Follow-mode &lt;del&gt;treemacs-follow-mode&lt;/del&gt; is a global minor mode which allows the treemacs view to always move its focus to the currently selected file. This mode runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called is determined by &lt;del&gt;treemacs-tag-follow-delay&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Tag-follow-mode &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; is a global minor mode which extends and effectively replaces &lt;del&gt;treemacs-follow-mode&lt;/del&gt;. When activated it follows not just the current file, but also the current tag. This works alongside treemacs&#39; integration with imenu, so all file types providing an imenu implementation are compatible.&lt;/p&gt; &#xA;&lt;p&gt;This mode, like follow-mode, runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called is determined by &lt;del&gt;treemacs-tag-follow-delay&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that in order to move to a tag in treemacs the treemacs buffer&#39;s window needs to be temporarily selected, which will reset &lt;del&gt;blink-cursor-mode&lt;/del&gt;&#39;s timer if it is enabled. This will result in the cursor blinking seemingly pausing for a short time and giving the appearance of the tag follow action lasting much longer than it really does.&lt;/p&gt; &#xA;&lt;p&gt;** Fringe-indicator-mode &lt;del&gt;treemacs-fringe-indicator-mode&lt;/del&gt; is a global minor mode that displays a little icon in the fringe that moves with the cursor. It can make the selected line more visible if &lt;del&gt;hl-line-mode&lt;/del&gt; doesn&#39;t stand out with your theme.&lt;/p&gt; &#xA;&lt;p&gt;The indicator can either be permanently visible, or be only shown when the treemacs window is selected by calling it either with the &lt;del&gt;always&lt;/del&gt; or &lt;del&gt;only-when-focused&lt;/del&gt; argument. ** Git-mode &lt;del&gt;treemacs-git-mode&lt;/del&gt; is a global minor mode which enables treemacs to check for files&#39; and directories&#39; git status information and highlight them accordingly (see also the &lt;del&gt;treemacs-git-...&lt;/del&gt; faces). The mode is available in 3 variants: &lt;del&gt;simple&lt;/del&gt;, &lt;del&gt;extended&lt;/del&gt; and &lt;del&gt;deferred&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The simple variant starts a git status process and parses its output in elisp. The parsing is kept quick and simple, so some info is missed: this version includes git status information only for files, but not directories.&lt;/li&gt; &#xA; &lt;li&gt;The extended variant highlights both files and directories. This greatly increases the complexity and length of the parsing process, and is therefore done in an asynchronous python process for the sake of performance. The extended variant requires python3 to work.&lt;/li&gt; &#xA; &lt;li&gt;The deferred variant is the same as extended, except the tasks of rendering nodes and highlighting them are separated. The former happens immediately, the latter after &lt;del&gt;treemacs-deferred-git-apply-delay&lt;/del&gt; seconds of idle time. This may be faster (if not in truth then at least in appereance) as the git process is given a much greater amount of time to finish. The downside is that the effect of nodes changing their colors may be somewhat jarring, though this effect is largely mitigated due to the use of a caching layer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When called interactively &lt;del&gt;treemacs-git-mode&lt;/del&gt; will ask for the variant to use. In lisp code an appropriate symbol can be directly passed to the minor mode function:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-git-mode &#39;deferred) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;All versions use an asynchronous git process and are optimized to not do more work than necessary, so their performance cost should, for the most part, be the constant amount of time it takes to fork a subprocess. For repositories where this is not the case &lt;del&gt;treemacs-max-git-entries&lt;/del&gt; (default value 5000) will limit the number of git status entries treemacs will process before ignoring the rest.&lt;/p&gt; &#xA;&lt;p&gt;** Filewatch-mode &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt; is a global minor mode which enables treemacs to watch the files it is displaying for changes and automatically refresh itself when it detects a change in the file system that it decides is relevant.&lt;/p&gt; &#xA;&lt;p&gt;A change event is relevant for treemacs if a new file has been created or deleted or a file has been changed and &lt;del&gt;treemacs-git-mode&lt;/del&gt; is enabled. Events caused by files that are ignored as per &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt; are likewise counted as not relevant.&lt;/p&gt; &#xA;&lt;p&gt;The refresh is not called immediately after an event was received, treemacs instead waits &lt;del&gt;treemacs-file-event-delay&lt;/del&gt; ms to see if any more files have changed to avoid having to refresh multiple times over a short period of time. Treemacs will not refresh the entire view to make the detected changes visible, but will instead only make updates to the directories where the change(s) happened. Using this mode is therefore by far not as expensive as a full refresh on every change and save.&lt;/p&gt; &#xA;&lt;p&gt;The mode only applies to directories opened &lt;em&gt;after&lt;/em&gt; this mode has been activated. This means that to enable file watching in an already existing treemacs buffer it needs to be killed and rebuilt. Turning off this mode is, on the other hand, instantaneous - it will immediately turn off all existing file watch processes and outstanding refresh actions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Known limitations&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Staging and committing changes does not produce any file change events of its own, if you use &lt;del&gt;treemacs-git-mode&lt;/del&gt; you still need to do a manual refresh to see your files&#39; faces go from &#39;changed&#39; and &#39;untracked&#39; to &#39;unchanged&#39; after a commit. The &lt;del&gt;treemacs-magit&lt;/del&gt; package provides the necessary hooks to fill this gap.&lt;/li&gt; &#xA; &lt;li&gt;Filewatch-mode may not be able to track file modifications on MacOS, making git-mode miss potential changes, see also [[https://github.com/Alexander-Miller/treemacs/issues/152#issuecomment-941093929][this comment]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** File Management Treemacs is no dired, but it supports the basic file management facilities of creating, deleting, moving, copying and renaming files.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to mark multiple files to act on them. &lt;del&gt;M-m&lt;/del&gt; will summon a hydra for bulk file actions. &lt;em&gt;NOTE:&lt;/em&gt; The bulk action implementation is using treemacs&#39; (yet to be documented) annotation api, which is set up to provide /permanent/ annotations like colouring based on flycheck&#39;s error/warning/info output. This means that marking files will likewise be permanent, even if you collapse the directories containing those files and they are no longer visible. ** Indent-guide-mode&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;treemacs-indent-guide-mode&lt;/del&gt; is a simple visual helper based on the the options provided by the &lt;del&gt;treemacs-indentation&lt;/del&gt; and &lt;del&gt;treemacs-indentation-string&lt;/del&gt; settings. Its appearance is dictated by &lt;del&gt;treemacs-indent-guide-style&lt;/del&gt;, the options are either &lt;del&gt;line&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/indent-guide-line.png]]&lt;/p&gt; &#xA;&lt;p&gt;or &lt;del&gt;block&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/indent-guide-block.png]]&lt;/p&gt; &#xA;&lt;p&gt;** Session Persistence Treemacs&#39; sessions - your workspace and the projects it contains - are saved when Emacs shuts down and restored when treemacs is first loaded. This persistence process is fully automatic and independant, and should therefore be fully compatible with &lt;del&gt;desktop-save-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The persisted state is saved under &lt;del&gt;user-emacs-directory/.cache/treemacs-persist&lt;/del&gt; by default. The exact file location is saved in the variable &lt;del&gt;treemacs-persist-file&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If something goes wrong when loading the file the erroneous state will be saved in &lt;del&gt;treemacs-last-error-persist-file&lt;/del&gt; for debugging.&lt;/p&gt; &#xA;&lt;p&gt;** Terminal Compatibility When run in a terminal treemacs will fall back to a much simpler rendering system, foregoing its usual png icons and using simple &lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; characters instead. The exact characters used are [[#custom-icons][highly customizable]].&lt;/p&gt; &#xA;&lt;p&gt;** Tag View Treemacs is able to display not only the file system, but also tags found in individual files. The tags list is sourced using emacs&#39; builtin imenu functionality, so all file types that emacs can generate an imenu index for are supported.&lt;/p&gt; &#xA;&lt;p&gt;Imenu caches its result, so to avoid stale tag lists setting &lt;del&gt;imenu-auto-rescan&lt;/del&gt; to t is recommended. Tags generated with the help of &lt;del&gt;semantic-mode&lt;/del&gt; are likewise supported.&lt;/p&gt; &#xA;&lt;p&gt;*** ggtags&lt;/p&gt; &#xA;&lt;p&gt;Treemacs can show the tags produced by ggtags if you switch a buffer&#39;s imenu index function to use ggtags:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq-local imenu-create-index-function #&#39;ggtags-build-imenu-index) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Current-Directory Awareness Treemacs always sets the &lt;del&gt;default-directory&lt;/del&gt; variable based on the (nearest) path at the current node, falling back to your home directory when there is no node or path at point. That means that various commands like &lt;del&gt;find-file&lt;/del&gt;, &lt;del&gt;ediff&lt;/del&gt; &lt;del&gt;magit-status&lt;/del&gt; or &lt;del&gt;helm-projectile-ag&lt;/del&gt; will correctly act based on the current directory or project context. ** Tramp Support Treemacs supports projects on remote directories, e.g. &lt;del&gt;/scp:remote-server:path/to/directory&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However tramp support has some restrictions: &lt;del&gt;treemacs-use-collapsed-directories&lt;/del&gt; has no effect on remote directories. ** Org Support Treemacs supports storing links to its file nodes by means of &lt;del&gt;org-store-link&lt;/del&gt;. ** Theme Support Using a different treemacs theme works the same way as using a different Emacs theme: just call &lt;del&gt;treemacs-load-theme&lt;/del&gt;, either programmatically or interactively. In the former case you need to supply the name of the theme as a string, like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-load-theme &#34;Default&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Do keep in mind that by default treemacs&#39; theme support is all theory: the standard installation includes only the default theme; this feature is meant to easily allow &lt;em&gt;others&lt;/em&gt; to extend, create and distribute themes for treemacs.&lt;/p&gt; &#xA;&lt;p&gt;A detailed explanation on modifying themes and icons can be found in the [[#customizing-themes-and-icons][Configuration]] section. ** Additional Packages Next to treemacs itself you can optionally install:&lt;/p&gt; &#xA;&lt;p&gt;*** treemacs-evil Must be installed and loaded if you use evil. The keybindings and the cursor will not be setup properly otherwise. It&#39;ll also enable navigation with j/k instead of n/p. *** treemacs-projectile Allows to quickly add your projectile projects to the treemacs workspace. *** treemacs-magit A small utility package to fill the small gaps left by using filewatch-mode and git-mode in conjunction with magit: it will inform treemacs about (un)staging of files and commits happening in magit. *** treemacs-icons-dired Allows you to use treemacs icons in dired buffers with &lt;del&gt;treemacs-icons-dired-mode&lt;/del&gt;: [[file:screenshots/dired-icons.png]] *** treemacs-persp/treemacs-perspective Integration with persp-mode or perspective.el that allows treemacs buffers to be unique inside the active perspective instead of the default frame-based buffer scope. *** treemacs-tab-bar Integration with tab-bar-mode that allows treemacs buffers to be unique inside the active tab instead of the default frame-based buffer scope. *** treemacs-all-the-icons Provides a theme using [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]. ** Treemacs as a Framework Treemacs can be extended to display arbitrary nodes as well as be used as a general rendering backend for any tree-like structures. [[file:Extensions.org][See here]] for an extended tutorial and demonstration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation Treemacs is included in Spacemacs (for now only on the dev branch). If you are using the development version of Spacemacs you can simply add treemacs to &lt;del&gt;dotspacemacs-configuration-layers&lt;/del&gt; to replace the default NeoTree. Check &lt;del&gt;SPC h SPC treemacs&lt;/del&gt; for details. Otherwise you will need to add treemacs to &lt;del&gt;dotspacemacs-additional-packages&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Treemacs is also available on MELPA. If you just want to quickly start using it grab the &lt;del&gt;use-package&lt;/del&gt; example below, and customize it as needed (remove &lt;del&gt;treemacs-evil&lt;/del&gt; if you don&#39;t use it, customize the keybindings to you taste, etc).&lt;/p&gt; &#xA;&lt;p&gt;Either way keep in mind that treemacs has /no default keybindings/ for its globally callable initialization functions. Each user is supposed to select keybindings for functions like &lt;del&gt;treemacs-find-file&lt;/del&gt; based on whatever they find convenient.&lt;/p&gt; &#xA;&lt;p&gt;You can find an exhaustive overview of all functions, their keybindings and functions you need to bind yourself [[#keymap][below]].&lt;/p&gt; &#xA;&lt;p&gt;The following &lt;del&gt;use-package&lt;/del&gt; snippet includes a list of /all/ of treemacs&#39; configuration options in their default setting. Setting them, or activating the minor modes yourself is not necessary, they are only listed here to encourage discoverability.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package treemacs :ensure t :defer t :init (with-eval-after-load &#39;winum (define-key winum-keymap (kbd &#34;M-0&#34;) #&#39;treemacs-select-window)) :config (progn (setq treemacs-collapse-dirs (if treemacs-python-executable 3 0) treemacs-deferred-git-apply-delay 0.5 treemacs-directory-name-transformer #&#39;identity treemacs-display-in-side-window t treemacs-eldoc-display &#39;simple treemacs-file-event-delay 5000 treemacs-file-extension-regex treemacs-last-period-regex-value treemacs-file-follow-delay 0.2 treemacs-file-name-transformer #&#39;identity treemacs-follow-after-init t treemacs-expand-after-init t treemacs-find-workspace-method &#39;find-for-file-or-pick-first treemacs-git-command-pipe &#34;&#34; treemacs-goto-tag-strategy &#39;refetch-index treemacs-header-scroll-indicators &#39;(nil . &#34;^^^^^^&#34;)&#39; treemacs-hide-dot-git-directory t treemacs-indentation 2 treemacs-indentation-string &#34; &#34; treemacs-is-never-other-window nil treemacs-max-git-entries 5000 treemacs-missing-project-action &#39;ask treemacs-move-forward-on-expand nil treemacs-no-png-images nil treemacs-no-delete-other-windows t treemacs-project-follow-cleanup nil treemacs-persist-file (expand-file-name &#34;.cache/treemacs-persist&#34; user-emacs-directory) treemacs-position &#39;left treemacs-read-string-input &#39;from-child-frame treemacs-recenter-distance 0.1 treemacs-recenter-after-file-follow nil treemacs-recenter-after-tag-follow nil treemacs-recenter-after-project-jump &#39;always treemacs-recenter-after-project-expand &#39;on-distance treemacs-litter-directories &#39;(&#34;/node_modules&#34; &#34;/.venv&#34; &#34;/.cask&#34;) treemacs-show-cursor nil treemacs-show-hidden-files t treemacs-silent-filewatch nil treemacs-silent-refresh nil treemacs-sorting &#39;alphabetic-asc treemacs-select-when-already-in-treemacs &#39;move-back treemacs-space-between-root-nodes t treemacs-tag-follow-cleanup t treemacs-tag-follow-delay 1.5 treemacs-text-scale nil treemacs-user-mode-line-format nil treemacs-user-header-line-format nil treemacs-wide-toggle-width 70 treemacs-width 35 treemacs-width-increment 1 treemacs-width-is-initially-locked t treemacs-workspace-switch-cleanup nil)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ;; The default width and height of the icons is 22 pixels. If you are&#xA;  ;; using a Hi-DPI display, uncomment this to double the icon size.&#xA;  ;;(treemacs-resize-icons 44)&#xA;&#xA;  (treemacs-follow-mode t)&#xA;  (treemacs-filewatch-mode t)&#xA;  (treemacs-fringe-indicator-mode &#39;always)&#xA;&#xA;  (pcase (cons (not (null (executable-find &#34;git&#34;)))&#xA;               (not (null treemacs-python-executable)))&#xA;    (`(t . t)&#xA;     (treemacs-git-mode &#39;deferred))&#xA;    (`(t . _)&#xA;     (treemacs-git-mode &#39;simple)))&#xA;&#xA;  (treemacs-hide-gitignored-files-mode nil))&#xA;:bind&#xA;(:map global-map&#xA;      (&#34;M-0&#34;       . treemacs-select-window)&#xA;      (&#34;C-x t 1&#34;   . treemacs-delete-other-windows)&#xA;      (&#34;C-x t t&#34;   . treemacs)&#xA;      (&#34;C-x t d&#34;   . treemacs-select-directory)&#xA;      (&#34;C-x t B&#34;   . treemacs-bookmark)&#xA;      (&#34;C-x t C-t&#34; . treemacs-find-file)&#xA;      (&#34;C-x t M-t&#34; . treemacs-find-tag)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(use-package treemacs-evil :after (treemacs evil) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-projectile :after (treemacs projectile) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-icons-dired :hook (dired-mode . treemacs-icons-dired-enable-once) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-magit :after (treemacs magit) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode :after (treemacs persp-mode) ;;or perspective vs. persp-mode :ensure t :config (treemacs-set-scope-type &#39;Perspectives))&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode :after (treemacs) :ensure t :config (treemacs-set-scope-type &#39;Tabs)) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration ** Variables Treemacs offers the following configuration options (&lt;del&gt;describe-variable&lt;/del&gt; will usually offers more details):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| Variable | Default | Description | |------------------------------------------+--------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | treemacs-indentation | 2 | The number of times each level is indented in the file tree. If specified as &#39;(INTEGER px), indentation will be a single INTEGER pixels wide space. | | treemacs-indentation-string | &#34; &#34; | The string that is used to create indentation when &lt;del&gt;treemacs-indentation&lt;/del&gt; is not specified as pixels. | | treemacs-width | 35 | Width of the treemacs window. | | treemacs-wide-toggle-width | 70 | Width of the treemacs window when using &lt;del&gt;treemacs-extra-wide-toggle&lt;/del&gt;. | | treemacs-width-increment | 1 | When resizing, this value is added or substracted from the window width. | | treemacs-show-hidden-files | t | Dotfiles will be shown if this is set to t and be hidden otherwise. | | treemacs-follow-after-init | t | When non-nil follow the currently selected file after initializing the treemacs buffer, regardless of &lt;del&gt;treemacs-follow-mode&lt;/del&gt; setting. | | treemacs-expand-after-init | t | When non-nil expand the first project after treemacs is first initialsed. | | treemacs-sorting | alphabetic-asc | Indicates how treemacs will sort its files and directories. (Files will always be shown after directories.) | | treemacs-ignored-file-predicates | (treemacs--std-ignore-file-predicate) | List of predicates to test for files and directories ignored by Emacs. Ignored files will &lt;em&gt;never&lt;/em&gt; be shown in the treemacs buffer. | | treemacs-pre-file-insert-predicates | nil | List of predicates to test for files and directories not to be rendered. Unlike &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt; these predicates apply when files&#39; git status information is available. | | treemacs-file-event-delay | 5000 | How long (in milliseconds) to collect file events before refreshing. See also &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;. | | treemacs-goto-tag-strategy | refetch-index | Indicates how to move to a tag when its buffer is dead. | | treemacs-default-visit-action | treemacs-visit-node-no-split | Default action for opening a node (e.g. file, directory, tag). &lt;del&gt;treemacs-visit-file-default&lt;/del&gt; action in &lt;del&gt;treemacs-*-actions-config&lt;/del&gt; calls this function. | | treemacs-RET-actions-config | Prefers visiting nodes over closing/opening | Alist defining the behaviour of &lt;del&gt;treemacs-RET-action&lt;/del&gt;. | | treemacs-TAB-actions-config | Prefers closing/opening nodes over visiting | Alist defining the behaviour of &lt;del&gt;treemacs-TAB-action&lt;/del&gt;. | | treemacs-doubleclick-actions-config | Closes/opens tags and visits files | Alist defining the behaviour of &lt;del&gt;treemacs-doubleclick-action&lt;/del&gt;. | | treemacs-collapse-dirs | 0 | Collapse this many directories into one, when possible. A directory is collapsible when its content consists of nothing but another directory. | | treemacs-silent-refresh | nil | When non-nil a completed refresh will not be announced with a log message. This applies both to manual refreshing as well as automatic (due to &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;). | | treemacs-silent-filewatch | nil | When non-nil a refresh due to &lt;del&gt;filewatch-mode&lt;/del&gt; will cause no log message. | | treemacs-is-never-other-window | nil | Prevents treemacs from being selected with &lt;del&gt;other-window&lt;/del&gt;. | | treemacs-position | left | Position of treemacs buffer. Valid values are &lt;del&gt;left&lt;/del&gt;, &lt;del&gt;right&lt;/del&gt;. | | treemacs-tag-follow-delay | 1.5 | Delay in seconds of inactivity for &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; to trigger. | | treemacs-tag-follow-cleanup | t | When non-nil &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; will keep only the current file&#39;s tags visible. | | treemacs-project-follow-cleanup | nil | When non-nil &lt;del&gt;treemacs-follow-mode&lt;/del&gt; will keep only the current project expanded and all others closed. | | treemacs-no-png-images | nil | When non-nil treemacs will use TUI string icons even when running in a GUI. | | treemacs-python-executable | (treemacs--find-python3) | Python 3 binary used by treemacs. | | treemacs-recenter-after-file-follow | nil | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when &lt;del&gt;treemacs-follow-mode&lt;/del&gt; moves to a new file. | | treemacs-recenter-after-tag-follow | nil | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; moves to a new tag. | | treemacs-recenter-after-project-jump | &#39;always | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when navigating between projects. | | treemacs-recenter-after-project-expand | &#39;on-distance | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when expanding a project node. | | treemacs-recenter-distance | 0.1 | Minimum distance from window top/bottom (0.1 = 10%) before treemacs calls &lt;del&gt;recenter&lt;/del&gt; in tag/file-follow-mode. | | treemacs-pulse-on-success | t | When non-nil treemacs will pulse the current line as a success indicator, e.g. when creating a file. | | treemacs-pulse-on-failure | t | When non-nil treemacs will pulse the current line as a failure indicator, e.g. when failing to find a file&#39;s tags. | | treemacs-elisp-imenu-expression | [too large to list] | The imenu expression treemacs uses in elisp buffers. | | treemacs-persist-file | ~/.emacs.d/.cache/treemacs-persist | Path to the file treemacs uses to persist its state. | | treemacs-last-error-persist-file | ~/.emacs.d/.cache/treemacs-persist-at-last-error | Path to the file treemacs uses to persist its state. | | treemacs-space-between-root-nodes | t | When non-nil treemacs will separate root nodes with an empty line. | | treemacs-wrap-around | t | When non-nil treemacs will wrap around at the buffer edges when moving between lines. | | treemacs--fringe-indicator-bitmap | [vertical bar] | The fringe bitmap used by the fringe-indicator minor mode. | | treemacs-deferred-git-apply-delay | 0.5 | Seconds of idle time for git highlighting to apply when using the deferred &lt;del&gt;treemacs-git-mode&lt;/del&gt;. | | treemacs-file-follow-delay | 0.2 | Delay in seconds of idle time for treemacs to follow the selected window. | | treemacs-display-in-side-window | t | When non-nil treemacs will use a dedicated [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Side-Windows.html][side-window]]. | | treemacs-max-git-entries | 5000 | Maximum number of git status entries treemacs will process. Anything above that number will be ignored. | | treemacs-missing-project-action | ask | When a persisted project is missing from filesystem, &lt;del&gt;ask&lt;/del&gt; will prompt for action, &lt;del&gt;keep&lt;/del&gt; will keep the project in the project list, and &lt;del&gt;remove&lt;/del&gt; will remove it from it without prompt. | | treemacs-show-cursor | nil | When non-nil the cursor will stay visible in the treemacs buffer. | | treemacs-git-command-pipe | &#34;&#34; | Text to be appended to treemacs&#39; git command. Useful for filtering with something like grep. | | treemacs-no-delete-other-windows | t | Prevents the treemacs window from being deleted by commands like &lt;del&gt;delete-other-windows&lt;/del&gt; and &lt;del&gt;magit-status&lt;/del&gt;. | | treemacs-eldoc-display | &#39;simple | Enables eldoc display of the file path at point. Requires &lt;del&gt;eldoc-mode&lt;/del&gt;. | | treemacs-bookmark-title-template | &#34;Treemacs - ${project}: ${label}&#34; | When using &lt;del&gt;bookmark-set&lt;/del&gt; in Treemacs, the default template for a bookmark label. The following patterns are available: &#34;${project}&#34;, &#34;${label}&#34;, &#34;${label:N}&#34;, ${label-path}&#34;, &#34;${label-path:N}&#34;, &#34;${file-path}&#34;, &#34;${file-path:N}&#34;. | | treemacs-file-extension-regex | Text after last period | Determines how treemacs detects a file extension. Can be set to use text after first or last period. | | treemacs-directory-name-transformer | identity | Transformer function that is applied to directory names before rendering for any sort of cosmetic effect. | | treemacs-file-name-transformer | identity | Transformer function that is applied to file names before rendering for any sort of cosmetic effect. | | treemacs-user-mode-line-format | nil | When non-nil treemacs will use it as a mode line format (otherwise format provided by &lt;del&gt;spaceline&lt;/del&gt;, &lt;del&gt;moody-mode-line&lt;/del&gt; and &lt;del&gt;doom-modeline&lt;/del&gt; will be used or, finally, &#34;Treemacs&#34; text will be displayed) | | treemacs-user-header-line-format | nil | When non-nil treemacs will use it as a header line format | | treemacs-move-forward-on-expand | nil | When non-nil treemacs will move to the first child of an expanded node. | | treemacs-workspace-switch-cleanup | nil | Indicates which, if any, buffers should be deleted on a workspace switch. Valid values are &lt;del&gt;nil&lt;/del&gt;, &lt;del&gt;files&lt;/del&gt;, &lt;del&gt;all&lt;/del&gt;. | | treemacs-read-string-input | &#39;from-child-frame | Indicates whether simple string input like project names should be read from a child frame or the minibuffer. | | treemacs-expand-added-projects | t | Indicates whether newly added projects should be expanded. | | treemacs-imenu-scope | &#39;everything | Determines which items treemacs&#39; imenu function will collect. | | treemacs-window-background-color | nil | Background color for the treemacs window. | | treemacs-litter-directories | (&#34;/node_modules&#34; &#34;/.venv&#34; &#34;/.cask&#34;) | List of directories affected by &lt;del&gt;treemacs-cleanup-litter&lt;/del&gt;. | | treemacs-width-is-initially-locked | t | Indicates whether the treemacs windows starts with a locked width or not. | | treemacs-select-when-already-in-treemacs | &#39;move-back | Indicates how &lt;del&gt;treemacs-select-window&lt;/del&gt; behaves when treemacs is already selected. | | treemacs-text-scale | nil | Scaling for text in treemacs, used via &lt;del&gt;text-scale-increase&lt;/del&gt;. | | treemacs-indent-guide-style | line | Appearance option for &lt;del&gt;treemacs-indent-guide&lt;/del&gt;, either a thin line or a thick block. | | treemacs-find-workspace-method | &#39;find-for-file-or-pick-first | Determines how treemacs selects the workspace when it first starts. | | treemacs-header-scroll-indicators | &#39;(nil . &#34;^^^^^^&#34;) | Indicators used for &lt;del&gt;treemacs-indicate-top-scroll-mode&lt;/del&gt;. | | treemacs-hide-dot-git-directory | t | Indicates whether &lt;del&gt;.git&lt;/del&gt; directories should always be hidden. |&lt;/p&gt; &#xA;&lt;p&gt;** Faces Treemacs defines and uses the following faces: | Face | Based on | Description | |----------------------------------------+--------------------------------------------------+------------------------------------------------------------------------------| | treemacs-directory-face | font-lock-function-name-face | Face used for directories. | | treemacs-directory-collapsed-face | treemacs-directory-face | Face used for collapsed part of directories. | | treemacs-file-face | default | Face used for files. | | treemacs-root-face | font-lock-constant-face | Face used for project roots. | | treemacs-root-unreadable-face | treemacs-root-face | Face used for local unreadable project roots. | | treemacs-root-remote-face | font-lock-function-name-face, treemacs-root-face | Face used for readable remote (Tramp) project roots. | | treemacs-root-remote-unreadable-face | treemacs-root-unreadable-face | Face used for unreadable remote (Tramp) project roots. | | treemacs-root-remote-disconnected-face | warning, treemacs-root-face | Face used for disconnected remote (Tramp) project roots. | | treemacs-tags-face | font-lock-builtin-face | Face used for tags. | | treemacs-help-title-face | font-lock-constant-face | Face used for the title of the helpful hydra. | | treemacs-help-column-face | font-lock-keyword-face | Face used for the column headers of the helpful hydra. | | treemacs-git-*-face | various font lock faces | Faces used by treemacs for various git states. | | treemacs-term-node-face | font-lock-string-face | Face for directory node symbols used by treemacs when it runs in a terminal. | | treemacs-on-success-pulse-face | :fg #111111 :bg #669966 | Pulse face used when pulsing on a successful action. | | treemacs-on-failure-puse-face | :fg #111111 :bg #ab3737 | Pulse face used when pulsing on a failed action. | | treemacs-marked-file-face | :fg #f0c674 :bg #ab3737 | Face for files marked for bulk file management. |&lt;/p&gt; &#xA;&lt;p&gt;** Evil compatibility To make treemacs get along with evil-mode you need to install and load &lt;del&gt;treemacs-evil&lt;/del&gt;. It does not define any functions or offer any configuration options, making sure it is loaded is sufficient.&lt;/p&gt; &#xA;&lt;p&gt;** Customizing Themes and Icons *** Creating and Modifying Themes Creating and modifying themes and icons is all done in a single step using dedicated macros.&lt;/p&gt; &#xA;&lt;p&gt;To create a theme use &lt;del&gt;treemacs-create-theme&lt;/del&gt;. It requires the name of the theme and accepts 3 optional keyword arguments: the directory the theme&#39;s icons are stored in (if it&#39;s using png icons), the name of the theme it&#39;s extending and the config, a final form that&#39;s responsible for creating all the theme&#39;s icons. A config will typically consist of nothing but calls to &lt;del&gt;treemacs-create-icon&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-create-theme &#34;Default&#34; :icon-directory (treemacs-join-path treemacs-dir &#34;icons/default&#34;) :config (progn (treemacs-create-icon :file &#34;root-open.png&#34; :fallback &#34;&#34; :extensions (root-open)) (treemacs-create-icon :file &#34;root-closed.png&#34; :fallback &#34;&#34; :extensions (root-closed)) (treemacs-create-icon :file &#34;emacs.png&#34; :fallback &#34;🗏 &#34; :extensions (&#34;el&#34; &#34;elc&#34;)) (treemacs-create-icon :file &#34;readme.png&#34; :fallback &#34;🗏 &#34; :extensions (&#34;readme.md&#34;)) (treemacs-create-icon :icon (all-the-icons-icon-for-file &#34;yaml&#34;) :extensions (&#34;yml&#34; &#34;yaml&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;:file&lt;/del&gt; argument is relative to the icon directory of the theme being created. When not using image icons the &lt;del&gt;:icon-directory&lt;/del&gt; argument can be omitted and the &lt;del&gt;:file&lt;/del&gt; argument can be switched for &lt;del&gt;:icon&lt;/del&gt; to supply the icon string directly. The TUI fallback is also optional, &#34; &#34; is used by default. Finally the list of extensions determines which file extensions the icon should be used for.&lt;/p&gt; &#xA;&lt;p&gt;For treemacs an extension is either the entire file name or the text after the last period (unless &lt;del&gt;treemacs-file-extension-regex&lt;/del&gt; is customized). This means it can match normal file names like &#34;init.el&#34;, extensionless file names like &#34;Makefile&#34;. Because the full name is checked first it is possible to give special files their own icon, for example &#34;Readme.md&#34; can use a different icon than normal markdown files.&lt;/p&gt; &#xA;&lt;p&gt;Instead of a string extension a symbol can also be used. In this case treemacs will also create a variable for that icon named &lt;del&gt;treemacs-icon-$symbol&lt;/del&gt;. Treemacs uses several such icon variables and any new theme should define their own versions (it it&#39;s not extending the default theme). The following icons are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;root-open&lt;/li&gt; &#xA; &lt;li&gt;root-closed&lt;/li&gt; &#xA; &lt;li&gt;dir-closed&lt;/li&gt; &#xA; &lt;li&gt;dir-open&lt;/li&gt; &#xA; &lt;li&gt;fallback&lt;/li&gt; &#xA; &lt;li&gt;tag-open&lt;/li&gt; &#xA; &lt;li&gt;tag-closed&lt;/li&gt; &#xA; &lt;li&gt;tag-leaf&lt;/li&gt; &#xA; &lt;li&gt;error&lt;/li&gt; &#xA; &lt;li&gt;info&lt;/li&gt; &#xA; &lt;li&gt;warning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Analogous to creating a new theme &lt;del&gt;treemacs-modify-theme&lt;/del&gt; can be used to change, or add to, an existing theme:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-modify-theme &#34;Default&#34; :icon-directory &#34;/other/icons/dir&#34; :config (progn (treemacs-create-icon :icon &#34;+&#34; :extensions (dir-closed)) (treemacs-create-icon :icon &#34;-&#34; :extensions (dir-open)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Finally keep in mind that treemacs&#39; icons are all buffer-local values, and will most likely not be defined when trying to access their values directly. When you need to programmatically access some of treemacs&#39; icons you should use &lt;del&gt;treemacs-get-icon-value&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-get-icon-value &#39;root-closed nil &#34;Default&#34;) (treemacs-get-icon-value &#34;org&#34; t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Custom Icons&lt;/p&gt; &#xA;&lt;p&gt;Treemacs also offers a quick and straighforward way to add a (gui) icon to the currently active theme, without caring for its name or declaring icon directories:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defvar treemacs-custom-html-icon (all-the-icons-icon-for-file &#34;name.html&#34;)) (treemacs-define-custom-icon treemacs-custom-html-icon &#34;html&#34; &#34;htm&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Important&lt;/em&gt;: There is a restriction that all icons must must be exactly 2 characters long. That&#39;s including the space that will separate an icon from the filename.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create an icon based on an image you can use &lt;del&gt;treemacs-define-custom-image-icon&lt;/del&gt; instead:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-define-custom-image-icon &#34;/path/to/icon.png&#34; &#34;htm&#34; &#34;html&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;**** Icons according to &lt;del&gt;auto-mode-alist&lt;/del&gt; For some file extensions, like &#34;.cc&#34; or &#34;.hh&#34;, it is not immediately obvious which major mode will open these files, and thus which icon they should be assigned. Treemacs offers the option that automate this decision based on &lt;del&gt;auto-mode-alist&lt;/del&gt;. You can use the function &lt;del&gt;treemacs-map-icons-with-auto-mode-alist&lt;/del&gt; to change the assigned icons for a list of file extensions based on the major mode the icons are mapped to in &lt;del&gt;auto-mode-alist&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;treemacs-map-icons-with-auto-mode-alist&lt;/del&gt; takes 2 arguments: first a list of file extensions, then an alist that decides which icon should be used for which mapped major mode. For example the code to decide the icons for &#34;.hh&#34; and &#34;.cc&#34; files with &lt;del&gt;auto-mode-alist&lt;/del&gt; would look like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-map-icons-with-auto-mode-alist &#39;(&#34;.cc&#34; &#34;.hh&#34;) `((c-mode . ,(treemacs-get-icon-value &#34;c&#34;)) (c++-mode . ,(treemacs-get-icon-value &#34;cpp&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;**** GUI vs TUI It is possible to force treemacs to use the simple TUI icons in GUI mode by setting &lt;del&gt;treemacs-no-png-images&lt;/del&gt; to t.&lt;/p&gt; &#xA;&lt;p&gt;**** Resizing Icons If your emacs has been compiled with Imagemagick support, or you&#39;re using Emacs &amp;gt;= 27.1, you can arbitrarily change the size of treemacs&#39; icons by (interactively or programmatically) calling &lt;del&gt;treemacs-resize-icons&lt;/del&gt;. *** all-the-icons indent issues Depending on your font you may experience the problem of treemacs&#39; icons seemingly jumping around left and right when they are expanded and collapsed when using the all-the-icons theme. The straighforward solution is to use a different font. You may also try a workaround of using a different font that applies onyl to the TAB characters used to align treemacs&#39; all-the-icons-based icons. To do that do not load &lt;del&gt;treemacs-all-the-icons&lt;/del&gt; with &lt;del&gt;require&lt;/del&gt;. Instead use the following alternative provided by treemacs itself:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (treemacs-load-all-the-icons-with-workaround-font &#34;Hermit&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The Hermit font used here is just an example - you will need to pick a font that is available on your system and does not suffer from the tab width issue.&lt;/p&gt; &#xA;&lt;p&gt;This line will load &lt;del&gt;treemacs-all-the-icons&lt;/del&gt; (&lt;em&gt;it must not have been loaded previously&lt;/em&gt;) and enable the all-the-icons theme. The given font argument will be used as the font for the alignment tabs used for the icons, hopefully alleviating the indentation problem. In addition &lt;del&gt;treemacs-indentation&lt;/del&gt; and &lt;del&gt;treemacs-indentation-string&lt;/del&gt; will be set to 1 and a (font-changed) TAB character respectively, so customizing them is (probably) not possible.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keymap ** Unbound functions These functions are not bound to any keys by default. It&#39;s left up to users to find the most convenient key binds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| Action | Description | |----------------------------------------------+----------------------------------------------------------------------------| | treemacs | Show/Hide/Initialize treemacs. | | treemacs-bookmark | Find a bookmark in treemacs. | | treemacs-find-file | Find and focus the current file in treemacs. | | treemacs-find-tag | Find and focus the current tag in treemacs. | | treemacs-select-window | Select the treemacs window if it is visible. Call &lt;del&gt;treemacs&lt;/del&gt; if it is not. | | treemacs-select-directory | Select a single directory | | treemacs-delete-other-windows | Same as &lt;del&gt;delete-other-windows&lt;/del&gt;, but will not delete the treemacs window. | | treemacs-show-changelog | Opens a buffer showing the changelog. | | treemacs-load-theme | Load a different icon theme. | | treemacs-icon-catalogue | Showcases all themes and their icons. | | treemacs-narrow-to-current-file | Close everything except the view on the current file. | |----------------------------------------------+----------------------------------------------------------------------------| | treemacs-projectile | Add a project from projectile to treemacs. | | treemacs-add-and-display-current-project | Add current project to treemacs and open it. | | treemacs-display-current-project-exclusively | Add current project to treemacs and open it, deleting all others. | | treemacs-select-scope-type | Select the scope of treemacs buffers in which they are unique |&lt;/p&gt; &#xA;&lt;p&gt;** Default keymaps&lt;/p&gt; &#xA;&lt;p&gt;Treemacs&#39; keybindings are distributed to several keymaps, based on common keybindings:&lt;/p&gt; &#xA;&lt;p&gt;*** Project Keybinds (Prefix &lt;del&gt;C-c C-p&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-------------------+----------------------------------------+--------------------------------------------------------| | C-c C-p a | treemacs-add-project-to-workspace | Select a new project to add to the treemacs workspace. | | C-c C-p p | treemacs-projectile | Select a projectile project to add to the workspace. | | C-c C-p d | treemacs-remove-project-from-workspace | Remove project at point from the workspace. | | C-c C-p r | treemacs-rename-project | Rename project at point. | | C-c C-p c c | treemacs-collapse-project | Collapse project at point. | | C-c C-p c o/S-TAB | treemacs-collapse-all-projects | Collapse all projects. | | C-c C-p c o | treemacs-collapse-all-projects | Collapse all projects except the project at point. |&lt;/p&gt; &#xA;&lt;p&gt;*** Workspaces Keybinds (Prefix &lt;del&gt;C-c C-w&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-----------+---------------------------------+----------------------------------------| | C-c C-w r | treemacs-rename-workspace | Rename a workspace. | | C-c C-w a | treemacs-create-workspace | Create a new workspace. | | C-c C-w d | treemacs-remove-workspace | Delete a workspace. | | C-c C-w s | treemacs-switch-workspace | Switch the current workspace. | | C-c C-w e | treemacs-edit-workspaces | Edit workspace layout via org-mode. | | C-c C-w n | treemacs-next-workspace | Switch to the next workspace. | | C-c C-w f | treemacs-set-fallback-workspace | Select the default fallback workspace. |&lt;/p&gt; &#xA;&lt;p&gt;*** Node Visit Keybinds (Prefix &lt;del&gt;o&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |--------+--------------------------------------------------+----------------------------------------------------------------------------------------------------------------| | ov | treemacs-visit-node-vertical-split | Open current file or tag by vertically splitting &lt;del&gt;next-window&lt;/del&gt;. | | oh | treemacs-visit-node-horizontal-split | Open current file or tag by horizontally splitting &lt;del&gt;next-window&lt;/del&gt;. | | oo/RET | treemacs-visit-node-no-split | Open current file or tag, performing no split and using &lt;del&gt;next-window&lt;/del&gt; directly. | | oc | treemacs-visit-node-close-treemacs | Open current file or tag, performing no split and using &lt;del&gt;next-window&lt;/del&gt; directly, and close treemacs. | | oaa | treemacs-visit-node-ace | Open current file or tag, using ace-window to decide which window to open the file in. | | oah | treemacs-visit-node-ace-horizontal-split | Open current file or tag by horizontally splitting a window selected by ace-window. | | oav | treemacs-visit-node-ace-vertical-split | Open current file or tag by vertically splitting a window selected by ace-window. | | or | treemacs-visit-node-in-most-recently-used-window | Open current file or tag in the most recently used window. | | ox | treemacs-visit-node-in-external-application | Open current file according to its mime type in an external application. Linux, Windows and Mac are supported. |&lt;/p&gt; &#xA;&lt;p&gt;*** Toggle Keybinds (Prefix &lt;del&gt;t&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-----+-------------------------------------+----------------------------------------------------------------------------------------| | th | treemacs-toggle-show-dotfiles | Toggle the hiding and displaying of dotfiles. | | ti | treemacs-hide-gitignored-files-mode | Toggle the hiding and displaying of gitignored files. | | tw | treemacs-toggle-fixed-width | Toggle whether the treemacs window should have a fixed width. See also treemacs-width. | | tf | treemacs-follow-mode | Toggle &lt;del&gt;treemacs-follow-mode&lt;/del&gt;. | | ta | treemacs-filewatch-mode | Toggle &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;. | | tv | treemacs-fringe-indicator-mode | Toggle &lt;del&gt;treemacs-fringe-indicator-mode&lt;/del&gt;. |&lt;/p&gt; &#xA;&lt;p&gt;*** Copy Keybinds (Prefix &lt;del&gt;y&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-----+--------------------------------------+-------------------------------------------------------------------| | ya | treemacs-copy-absolute-path-at-point | Copy the absolute path of the node at point. | | yr | treemacs-copy-relative-path-at-point | Copy the path of the node at point relative to the project root. | | yp | treemacs-copy-project-path-at-point | Copy the absolute path of the project root for the node at point. | | yf | treemacs-copy-file | Copy the file at point. |&lt;/p&gt; &#xA;&lt;p&gt;*** General Keybinds&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |----------+---------------------------------------------+--------------------------------------------------------------------------------------------------------| | ? | treemacs-common-helpful-hydra | Summon a helpful hydra to show you treemacs&#39; most commonly used keybinds. | | C-? | treemacs-advanced-helpful-hydra | Summon a helpful hydra to show you treemacs&#39; rarely used, advanced keybinds. | | j/n | treemacs-next-line | Go to the next line. | | k/p | treemacs-previous-line | Go to the previous line. | | M-J/N | treemacs-next-line-other-window | Go to the next line in &lt;del&gt;next-window&lt;/del&gt;. | | M-K/P | treemacs-previous-line-other-window | Go to the previous line in &lt;del&gt;next-window&lt;/del&gt;.. | | &#xA; &lt;pgup&gt;&#xA;   | treemacs-next-page-other-window | Go to the next page in &#xA;  &lt;del&gt;next-window&lt;/del&gt;. | | &#xA;  &lt;pgdn&gt;&#xA;    | treemacs-previous-page-other-window | Go to the previous page in &#xA;   &lt;del&gt;next-window&lt;/del&gt;.. | | M-j/M-n | treemacs-next-neighbour | Go to the next same-level neighbour of the current node. | | M-k/M-p | treemacs-previous-neighbour | Go to the previous same-level neighbour of the current node. | | u | treemacs-goto-parent-node | Go to parent of node at point, if possible. | | &#xA;   &lt;m-up&gt;&#xA;     | treemacs-move-project-up | Switch positions of project at point and the one above it. | | &#xA;    &lt;m-down&gt;&#xA;      | treemacs-move-project-down | Switch positions of project at point and the one below it. | | w | treemacs-set-width | Set a new value for the width of the treemacs window. | | &amp;lt; | treemacs-decrement-width | Decrease the width of the treemacs window. | | &amp;gt; | treemacs-increment-width | Increase the width of the treemacs window. | | RET | treemacs-RET-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-RET-actions-config&lt;/del&gt; for the current node. | | TAB | treemacs-TAB-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-TAB-actions-config&lt;/del&gt; for the current node. | | g/r/gr | treemacs-refresh | Refresh the project at point. | | d | treemacs-delete-file | Delete node at point. | | R | treemacs-rename-file | Rename node at point. | | cf | treemacs-create-file | Create a file. | | cd | treemacs-create-dir | Create a directory. | | q | treemacs-quit | Hide the treemacs window. | | Q | treemacs-kill-buffer | Delete the treemacs buffer. | | P | treemacs-peek-mode | Peek at the files at point without fully opening them. | | ya | treemacs-copy-absolute-path-at-point | Copy the absolute path of the node at point. | | yr | treemacs-copy-relative-path-at-point | Copy the path of the node at point relative to the project root. | | yp | treemacs-copy-project-path-at-point | Copy the absolute path of the project root for the node at point. | | yf | treemacs-copy-file | Copy the file at point. | | m | treemacs-move-file | Move the file at point. | | s | treemacs-resort | Set a new value for &#xA;     &lt;del&gt;treemacs-sorting&lt;/del&gt;. | | b | treemacs-add-bookmark | Bookmark the currently selected files&#39;s, dir&#39;s or tag&#39;s location. | | h/M-h | treemacs-COLLAPSE-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-COLLAPSE-actions-config&lt;/del&gt; for the current node. | | l/M-l | treemacs-RET-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-RET-actions-config&lt;/del&gt; for the current node. | | M-H | treemacs-root-up | Move treemacs&#39; root one level upward. Only works with a single project in the workspace. | | M-L | treemacs-root-down | Move treemacs&#39; root into the directory at point. Only works with a single project in the workspace. | | H | treemacs-collapse-parent-node | Collapse the parent of the node at point. | | ! | treemacs-run-shell-command-for-current-node | Run an asynchronous shell command on the current node, replacing &#34;$path&#34; with its path. | | M-! | treemacs-run-shell-command-in-project-root | Run an asynchronous shell command in the root of the current project, replacing &#34;$path&#34; with its path. | | C | treemacs-cleanup-litter | Close all directories matching any of &#xA;     &lt;del&gt;treemacs-litter-directories&lt;/del&gt;. | | = | treemacs-fit-window-width | Adjust the width of the treemacs window to that of the longsest line. | | W | treemacs-extra-wide-toggle | Toggle between normal and extra wide display for the treemacs window. |&#xA;    &lt;/m-down&gt;&#xA;   &lt;/m-up&gt;&#xA;  &lt;/pgdn&gt;&#xA; &lt;/pgup&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatibility The correctness of treemacs&#39; display behaviour is, to a large degree, ensured through window properties and reacting to changes in the window configuration. The packages most likely to cause trouble for treemacs are therefore those that interfere with Emacs&#39; buffer spawning and window splitting behaviour. Treemacs is included in Spacemacs and I am a Spacemacs user, therefore treemacs guarantees first-class support &amp;amp; compatibility for window-managing packages used in Spacemacs, namely [[https://github.com/Bad-ptr/persp-mode.el][persp]]/[[https://github.com/nex3/perspective-el][perspective]], [[https://github.com/wasamasa/eyebrowse][eyebrowse]], [[https://github.com/m2ym/popwin-el][popwin]] and [[https://github.com/bmag/emacs-purpose][window-purpose]], as well as [[https://github.com/wasamasa/shackle][shackle]]. For everything else there may be issues and, depending on the complexity of the problem, I may decide it is not worth fixing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Aside from this there are the following known incompatibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Any package invoking &lt;del&gt;font-lock-ensure&lt;/del&gt; in the treemacs buffer. This will reset the faces of treemacs&#39; buttons (once) and is a known [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28599][emacs bug]].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A possible cause of this issue using an old version of swiper.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rainbow mode activated in treemacs will likewise produce this behaviour. Make sure not to include rainbow-mode as part of &lt;del&gt;special-mode-hook&lt;/del&gt;, since this is the mode &lt;del&gt;treemacs-mode&lt;/del&gt; is derived from.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FAQ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;I don&#39;t need multiple projects, can treemacs just always show me the current project I&#39;m in?&lt;/p&gt; &lt;p&gt;Yes, see the section about [[#navigation-without-projects-and-workspaces][Navigation without Projects and Workspace]].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I hide files I don&#39;t want to see?&lt;/p&gt; &lt;p&gt;You need to define a predicate function and add it to &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt;. This function accepts two arguments, a file&#39;s name and its absolute path, and must return non-nil when treemacs should hide that file.&lt;/p&gt; &lt;p&gt;For example the code to ignore files eiter called &#34;foo&#34; or located in &#34;/x/y/z/&#34; would look like this:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (with-eval-after-load &#39;treemacs&lt;/p&gt; &lt;pre&gt;&lt;code&gt; (defun treemacs-ignore-example (filename absolute-path)&#xA;   (or (string-equal filename &#34;foo&#34;)&#xA;       (string-prefix-p &#34;/x/y/z/&#34; absolute-path)))&#xA;&#xA; (add-to-list &#39;treemacs-ignored-file-predicates #&#39;treemacs-ignore-example))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I keep treemacs from showing files that are ignored by git?&lt;/p&gt; &lt;p&gt;You can use &lt;del&gt;treemacs-hide-gitignored-files-mode&lt;/del&gt; (bound to &lt;del&gt;ti&lt;/del&gt;) to switch between hiding and displaying of gitignored files. Git-mode /must/ be enabled for this feature to work.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why am I seeing no file icons and only +/- for directories?&lt;/p&gt; &lt;p&gt;Treemacs will permanently fall back on its simple TUI icons if it detects that the emacs instance it is run in cannot create images. You can test this by evaluating &lt;del&gt;(create-image &#34;&#34; &#39;png)&lt;/del&gt;. If this code returns an error like &#34;Invalid image type ´png´&#34; your emacs does not support images.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I get treemacs to stop telling me when it&#39;s been refreshed, especially with filewatch-mode?&lt;/p&gt; &lt;p&gt;See &lt;del&gt;treemacs-silent-refresh&lt;/del&gt; and &lt;del&gt;treemacs-silent-filewatch&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ENOSPC / No space left on device / no file descriptor left&lt;/p&gt; &lt;p&gt;You may run into this error when you use filewatch-mode. The solution is to increase the number of allowed user watches, as described [[https://stackoverflow.com/questions/16748737/grunt-watch-error-waiting-fatal-error-watch-enospc][here for Linux]] and [[https://wilsonmar.github.io/maximum-limits/][here for Mac]].&lt;/p&gt; &lt;p&gt;You will also want to see what&#39;s responsible for setting all those file watches in the first place, since treemacs only watches the expanded directories it is displaying and so won&#39;t produce more than a couple dozen watches at best.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why is treemacs warning me about not being able to find some background colors and falling back to something else?&lt;/p&gt; &lt;p&gt;Treemacs needs those colors to make sure that background colors of its icons correctly align with hl-line-mode. Png images&#39; backgrounds are not highlighted by hl-line-mode by default, treemacs is manually correcting this every time hl-line&#39;s overlay is moved. To make that correction work it needs to know two colors: the current theme&#39;s &lt;del&gt;default&lt;/del&gt; background, and its &lt;del&gt;hl-line&lt;/del&gt; background color. If treemacs cannot find hl-lines&#39;s background color it falls back to the default background color. If it cannot even find the default background it will fall back to #2d2d31. The warnings serve to inform you of that fallback.&lt;/p&gt; &lt;p&gt;If your theme does not define a required color you can set it yourself before treemacs loads like this:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (set-face-attribute &#39;hl-line nil :background &#34;#333333&#34;) #+END_SRC&lt;/p&gt; &lt;p&gt;If you just want to disable the warnings you can do so by defining the variable &lt;del&gt;treemacs-no-load-time-warnings&lt;/del&gt;. Its exact value is irrelevant, all that matters is that it exists at all. Since the warnings are issues when treemacs is first being loaded the variable must be defined &lt;em&gt;before&lt;/em&gt; treemacs is initialized. This is best achieved by adding the line &lt;del&gt;(defvar treemacs-no-load-time-warnings t)&lt;/del&gt; to treemacs&#39; use-package &lt;del&gt;:init&lt;/del&gt; block.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can I expand &lt;em&gt;everything&lt;/em&gt; under a node?&lt;/p&gt; &lt;p&gt;Yes, you just need to expand it with a [[https://www.emacswiki.org/emacs/PrefixArgument][prefix argument]]. Closing nodes with a prefix argument works as well. In this case treemacs will forget about the nodes opened below the one that was closed and not reopen them automatically.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Broken display of CJK characters&lt;/p&gt; &lt;p&gt;If you are seeing raw bytes like &lt;del&gt;\316&lt;/del&gt; instead of proper CJK characters like [[https://github.com/Alexander-Miller/treemacs/issues/863][in this issue]] you have to set the proper language environment, e.g.:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (set-language-environment &#39;Chinese-GB18030) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributing Contributions are very much welcome, but should fit the general scope and style of treemacs. The following is a list of guidelines that should be met (exceptions confirm the rule):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There should be one commit per feature.&lt;/li&gt; &#xA; &lt;li&gt;Commit messages should start with a note in brackets that roughly describes the area the commit relates to, for example &lt;del&gt;[Icons]&lt;/del&gt; if you add an icon.&lt;/li&gt; &#xA; &lt;li&gt;Code must be in the right place (what with the codebase being split in many small files). If there is no right place it probably goes into treemacs-core-utils.el which is where all the general implementation details go.&lt;/li&gt; &#xA; &lt;li&gt;New features must be documented in the readme (for example mentioning new config options in the [[#variables][Config Table]]).&lt;/li&gt; &#xA; &lt;li&gt;There must not be any compiler warnings.&lt;/li&gt; &#xA; &lt;li&gt;The test suite must pass.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Treemacs uses cask to setup a local testing environment and a Makefile that simplifies compiling and testing the codebase. First run &lt;del&gt;cask install&lt;/del&gt; to locally pull treemacs&#39; dependencies. Then you can use the following Makefile targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make prepare :: Downloads and updates Cask&#39;s dependencies. Is a dependency of the &lt;del&gt;test&lt;/del&gt; and &lt;del&gt;compile&lt;/del&gt; targets.&lt;/li&gt; &#xA; &lt;li&gt;make compile :: Compiles the code base (and treats compiler warnings as errors).&lt;/li&gt; &#xA; &lt;li&gt;make clean :: Removes the generated .elc files.&lt;/li&gt; &#xA; &lt;li&gt;make lint :: Runs first &lt;del&gt;compile&lt;/del&gt; then &lt;del&gt;clean&lt;/del&gt;, even if the former fails.&lt;/li&gt; &#xA; &lt;li&gt;make test :: Runs the testsuite, once in a graphical environment and once in the terminal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally if you want to just add an icon you can take [[https://github.com/Alexander-Miller/treemacs/commit/94df3e36af865dab2c76b549b1a61f418e3bf5be][this commit]] as an example (though the icons have since been moved into their own module in &lt;del&gt;treemacs-icons.el&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Working With The Code Base&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to delve into the treemacs&#39; code base, check out [[https://github.com/Alexander-Miller/treemacs/wiki][the wiki]] for some general pointers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;emacs &amp;gt;= 26.1 (&amp;gt;= 27.1 for tab-bar)&lt;/li&gt; &#xA; &lt;li&gt;s&lt;/li&gt; &#xA; &lt;li&gt;dash&lt;/li&gt; &#xA; &lt;li&gt;cl-lib&lt;/li&gt; &#xA; &lt;li&gt;ace-window&lt;/li&gt; &#xA; &lt;li&gt;pfuture&lt;/li&gt; &#xA; &lt;li&gt;ht&lt;/li&gt; &#xA; &lt;li&gt;cfrs&lt;/li&gt; &#xA; &lt;li&gt;hydra&lt;/li&gt; &#xA; &lt;li&gt;(optionally) evil&lt;/li&gt; &#xA; &lt;li&gt;(optionally) projectile&lt;/li&gt; &#xA; &lt;li&gt;(optionally) winum&lt;/li&gt; &#xA; &lt;li&gt;(optionally) magit&lt;/li&gt; &#xA; &lt;li&gt;(optionally) perspective/persp&lt;/li&gt; &#xA; &lt;li&gt;(optionally) all-the-icons&lt;/li&gt; &#xA; &lt;li&gt;(optionally) python(3)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>joaotavora/eglot</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/joaotavora/eglot</id>
    <link href="https://github.com/joaotavora/eglot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A client for Language Server Protocol servers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/joaotavora/eglot/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/joaotavora/eglot/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/eglot.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/eglot.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/eglot&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/eglot-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;M-x Eglot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;E&lt;/em&gt;macs Poly&lt;em&gt;glot&lt;/em&gt;: an Emacs &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;LSP&lt;/a&gt; client that stays out of your way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📽 Scroll down this README for some &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#animated_gifs&#34;&gt;pretty gifs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📚 Read about &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#connecting&#34;&gt;servers&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#commands&#34;&gt;commands and keybindings&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#customization&#34;&gt;customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📣 Read the &lt;a href=&#34;https://github.com/joaotavora/eglot/raw/master/NEWS.md&#34;&gt;NEWS&lt;/a&gt; file&lt;/li&gt; &#xA; &lt;li&gt;🏆 Folks over at Google &lt;a href=&#34;https://opensource.googleblog.com/2020/10/announcing-latest-google-open-source.html&#34;&gt;seem to like it&lt;/a&gt;. Thanks!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;em&gt;1-2-3&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Install from &lt;a href=&#34;https://elpa.gnu.org/packages/eglot.html&#34;&gt;GNU ELPA&lt;/a&gt; or &lt;a href=&#34;https://melpa.org/#/eglot&#34;&gt;MELPA&lt;/a&gt;. Just type &lt;code&gt;M-x package-install RET eglot RET&lt;/code&gt; into Emacs 26.1+.&lt;/p&gt; &#xA;&lt;p&gt;Now find some source file, any source file, and type &lt;code&gt;M-x eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;That&#39;s it&lt;/em&gt;. If you&#39;re lucky, this guesses the LSP program to start for the language you&#39;re using. Otherwise, it prompts you to enter one.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;1-2-3-pitfall!&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;By design, Eglot doesn&#39;t depend on anything but Emacs. But there &lt;em&gt;are&lt;/em&gt; ELPA dependencies to newer versions of so-called &#34;core packages&#34; developed &lt;em&gt;in the Emacs mainline&lt;/em&gt;. So unless you&#39;re using a bleeding-edge Emacs, where loading &lt;code&gt;eglot.el&lt;/code&gt; is all you&#39;d need to do, make sure your package system pulls in and loads the newest &lt;code&gt;project.el&lt;/code&gt;, &lt;code&gt;xref.el&lt;/code&gt;, &lt;code&gt;eldoc.el&lt;/code&gt;, etc... In case of trouble &lt;code&gt;M-x find-library&lt;/code&gt; can help you tell if that happened.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;connecting&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Connecting to a server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt; can guess and work out-of-the-box with these servers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ada&#39;s &lt;a href=&#34;https://github.com/AdaCore/ada_language_server&#34;&gt;ada_language_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bash&#39;s &lt;a href=&#34;https://github.com/mads-hartmann/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C/C++&#39;s &lt;a href=&#34;https://clang.llvm.org/extra/clangd.html&#34;&gt;clangd&lt;/a&gt; or &lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;ccls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C#&#39;s &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn&#34;&gt;omnisharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clojure&#39;s &lt;a href=&#34;https://clojure-lsp.io&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CMake&#39;s &lt;a href=&#34;https://github.com/regen100/cmake-language-server&#34;&gt;cmake-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CSS&#39;s &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;css-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dart&#39;s &lt;a href=&#34;https://github.com/dart-lang/sdk/raw/master/pkg/analysis_server/tool/lsp_spec/README.md&#34;&gt;analysis_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dockerfile&#39;s &lt;a href=&#34;https://github.com/rcjsuen/dockerfile-language-server-nodejs&#34;&gt;docker-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elixir&#39;s &lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixir-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elm&#39;s &lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erlang&#39;s &lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang_ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fortran&#39;s &lt;a href=&#34;https://github.com/hansec/fortran-language-server&#34;&gt;fortls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Futhark&#39;s &lt;a href=&#34;https://futhark-lang.org&#34;&gt;futhark lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go&#39;s &lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Godot Engine&#39;s &lt;a href=&#34;https://godotengine.org&#34;&gt;built-in LSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTML &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;html-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haskell&#39;s &lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;haskell-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON&#39;s &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-json-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java&#39;s &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Javascript&#39;s &lt;a href=&#34;https://github.com/theia-ide/typescript-language-server&#34;&gt;TS &amp;amp; JS Language Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&#39;s &lt;a href=&#34;https://github.com/fwcd/KotlinLanguageServer&#34;&gt;kotlin-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lua&#39;s &lt;a href=&#34;https://github.com/Alloyed/lua-lsp&#34;&gt;lua-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mint&#39;s &lt;a href=&#34;https://www.mint-lang.com/&#34;&gt;mint-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nix&#39;s &lt;a href=&#34;https://github.com/nix-community/rnix-lsp&#34;&gt;rnix-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ocaml&#39;s &lt;a href=&#34;https://github.com/ocaml/ocaml-lsp/&#34;&gt;ocaml-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP&#39;s &lt;a href=&#34;https://github.com/felixfbecker/php-language-server&#34;&gt;php-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PureScript&#39;s &lt;a href=&#34;https://github.com/nwolverson/purescript-language-server&#34;&gt;purescript-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python&#39;s &lt;a href=&#34;https://github.com/python-lsp/python-lsp-server&#34;&gt;pylsp&lt;/a&gt;, &lt;a href=&#34;https://github.com/palantir/python-language-server&#34;&gt;pyls&lt;/a&gt; or &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;R&#39;s &lt;a href=&#34;https://cran.r-project.org/package=languageserver&#34;&gt;languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Racket&#39;s &lt;a href=&#34;https://github.com/jeapostrophe/racket-langserver&#34;&gt;racket-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby&#39;s &lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust&#39;s &lt;a href=&#34;https://github.com/rust-analyzer/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scala&#39;s &lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TeX/LaTeX&#39;s &lt;a href=&#34;https://github.com/astoff/digestif&#34;&gt;Digestif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VimScript&#39;s &lt;a href=&#34;https://github.com/iamcco/vim-language-server&#34;&gt;vim-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YAML&#39;s &lt;a href=&#34;https://github.com/redhat-developer/yaml-language-server&#34;&gt;yaml-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zig&#39;s &lt;a href=&#34;https://github.com/zigtools/zls&#34;&gt;zls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;ll add to this list as I test more servers. In the meantime you can customize &lt;code&gt;eglot-server-programs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs &#39;(foo-mode . (&#34;foo-language-server&#34; &#34;--args&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let me know how well it works and we can add it to the list.&lt;/p&gt; &#xA;&lt;p&gt;To skip the guess and always be prompted use &lt;code&gt;C-u M-x eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting automatically&lt;/h2&gt; &#xA;&lt;p&gt;You can also do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (add-hook &#39;foo-mode-hook &#39;eglot-ensure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;, to attempt to start an eglot session automatically every time a &lt;code&gt;foo-mode&lt;/code&gt; buffer is visited.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting via TCP&lt;/h2&gt; &#xA;&lt;p&gt;The examples above use a &#34;pipe&#34; to talk to the server, which works fine on Linux and OSX but in some cases &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Subprocess-hang.html&#34;&gt;&lt;em&gt;may not work on Windows&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To circumvent this limitation, or if the server doesn&#39;t like pipes, you can use &lt;code&gt;C-u M-x eglot&lt;/code&gt; and give it &lt;code&gt;server:port&lt;/code&gt; pattern to connect to a previously started TCP server serving LSP information.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to start it manually every time, you can configure Eglot to start it and immediately connect to it. Ruby&#39;s &lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt; server already works this way out-of-the-box.&lt;/p&gt; &#xA;&lt;p&gt;For another example, suppose you also wanted start Python&#39;s &lt;code&gt;pyls&lt;/code&gt; this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs&#xA;             `(python-mode . (&#34;pyls&#34; &#34;-v&#34; &#34;--tcp&#34; &#34;--host&#34;&#xA;                              &#34;localhost&#34; &#34;--port&#34; :autoport)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see that the element associated with &lt;code&gt;python-mode&lt;/code&gt; is now a more complicated invocation of the &lt;code&gt;pyls&lt;/code&gt; program, which requests that it be started as a server. Notice the &lt;code&gt;:autoport&lt;/code&gt; symbol in there: it is replaced dynamically by a local port believed to be vacant, so that the ensuing TCP connection finds a listening server.&lt;/p&gt; &#xA;&lt;h2&gt;Per-project server configuration&lt;/h2&gt; &#xA;&lt;p&gt;Most servers can guess good defaults and will operate nicely out-of-the-box, but some need to be configured specially via LSP interfaces. Additionally, in some situations, you may also want a particular server to operate differently across different projects.&lt;/p&gt; &#xA;&lt;p&gt;Per-project settings are realized with Emacs&#39;s &lt;em&gt;directory variables&lt;/em&gt; and the Elisp variable &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;. To make a particular Python project always enable Pyls&#39;s snippet support, put a file named &lt;code&gt;.dir-locals.el&lt;/code&gt; in the project&#39;s root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((python-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . ((:pyls . (:plugins (:jedi_completion (:include_params t)))))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells Emacs that any &lt;code&gt;python-mode&lt;/code&gt; buffers in that directory should have a particular buffer-local value of &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;. That variable&#39;s value should be &lt;em&gt;association list&lt;/em&gt; of &lt;em&gt;parameter sections&lt;/em&gt; which are presumably understood by the server. In this example, we associate section &lt;code&gt;pyls&lt;/code&gt; with the parameters object &lt;code&gt;(:plugins (:jedi_completion (:include_params t)))&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now, supposing that you also had some Go code in the very same project, you can configure the Gopls server in the same file. Adding a section for &lt;code&gt;go-mode&lt;/code&gt;, the file&#39;s contents become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((python-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . ((:pyls . (:plugins (:jedi_completion (:include_params t))))))))&#xA; (go-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . ((:gopls . (:usePlaceholders t)))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you can&#39;t afford an actual &lt;code&gt;.dir-locals.el&lt;/code&gt; file, or if managing these files becomes cumbersome, the Emacs manual teaches you programmatic ways to leverage per-directory local variables.&lt;/p&gt; &#xA;&lt;h2&gt;Handling quirky servers&lt;/h2&gt; &#xA;&lt;p&gt;Some servers need even more special hand-holding to operate correctly. If your server has some quirk or non-conformity, it&#39;s possible to extend Eglot via Elisp to adapt to it. Here&#39;s an example on how to get &lt;a href=&#34;https://github.com/cquery-project/cquery&#34;&gt;cquery&lt;/a&gt; working:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs &#39;((c++ mode c-mode) . (eglot-cquery &#34;cquery&#34;)))&#xA;&#xA;(defclass eglot-cquery (eglot-lsp-server) ()&#xA;  :documentation &#34;A custom class for cquery&#39;s C/C++ langserver.&#34;)&#xA;&#xA;(cl-defmethod eglot-initialization-options ((server eglot-cquery))&#xA;  &#34;Passes through required cquery initialization options&#34;&#xA;  (let* ((root (car (project-roots (eglot--project server))))&#xA;         (cache (expand-file-name &#34;.cquery_cached_index/&#34; root)))&#xA;    (list :cacheDirectory (file-name-as-directory cache)&#xA;          :progressReportFrequencyMs -1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, some servers require the language identifier strings they are sent by &lt;code&gt;eglot&lt;/code&gt; to match the exact strings used by VSCode. &lt;code&gt;eglot&lt;/code&gt; usually guesses these identifiers from the major mode name (e.g. &lt;code&gt;elm-mode&lt;/code&gt; → &lt;code&gt;&#34;elm&#34;&lt;/code&gt;), but the mapping can be overridden using the &lt;code&gt;:LANGUAGE-ID&lt;/code&gt; element in the syntax of &lt;code&gt;eglot-server-programs&lt;/code&gt; if necessary.&lt;/p&gt; &#xA;&lt;h2&gt;TRAMP support&lt;/h2&gt; &#xA;&lt;p&gt;Should just work. Try &lt;code&gt;M-x eglot&lt;/code&gt; in a buffer visiting a remote file on a server where you&#39;ve also installed the language server. Only supported on Emacs 27.1 or later.&lt;/p&gt; &#xA;&lt;p&gt;Emacs 27 users may find some language servers &lt;a href=&#34;https://github.com/joaotavora/eglot/issues/662&#34;&gt;fail to start up over TRAMP&lt;/a&gt;. If you experience this issue, update TRAMP to 2.5.0.4 or later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;reporting bugs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Reporting bugs&lt;/h1&gt; &#xA;&lt;p&gt;Having trouble connecting to a server? Expected to have a certain capability supported by it (e.g. completion) but nothing happens? Or do you get spurious and annoying errors in an otherwise smooth operation? We may have help, so open a &lt;a href=&#34;https://github.com/joaotavora/eglot/issues&#34;&gt;new issue&lt;/a&gt; and try to be as precise and objective about the problem as you can:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Include the invaluable &lt;strong&gt;events transcript&lt;/strong&gt;. You can display that buffer with &lt;code&gt;M-x eglot-events-buffer&lt;/code&gt;. It contains the JSONRPC messages exchanged between client and server, as well as the messages the server prints to stderr.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If Emacs errored (you saw -- and possibly heard -- an error message), make sure you repeat the process using &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; so you &lt;strong&gt;get a backtrace&lt;/strong&gt; of the error that you should also attach to the bug report.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try to replicate the problem with &lt;strong&gt;as clean an Emacs run as possible&lt;/strong&gt;. This means an empty &lt;code&gt;.emacs&lt;/code&gt; init file or close to it (just loading &lt;code&gt;eglot.el&lt;/code&gt;, &lt;code&gt;company.el&lt;/code&gt; and &lt;code&gt;yasnippet.el&lt;/code&gt; for example, and you don&#39;t even need &lt;code&gt;use-package.el&lt;/code&gt; to do that).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Some more notes: it is often the case the you will have to report the problem to the LSP server&#39;s developers, too, though it&#39;s understandable that you report it Eglot first, since it is the user-facing frontend first. If the problem is indeed on Eglot&#39;s side, we &lt;em&gt;do&lt;/em&gt; want to fix it, but because Eglot&#39;s developers have limited resources and no way to test all the possible server combinations, you&#39;ll sometimes have to do most of the testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;commands&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Commands and keybindings&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s a summary of available commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt;, as described above;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-reconnect&lt;/code&gt; reconnects to current server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-shutdown&lt;/code&gt; says bye-bye to server of your choice;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-shutdown-all&lt;/code&gt; says bye-bye to every server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-rename&lt;/code&gt; ask the server to rename the symbol at point;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-format&lt;/code&gt; asks the server to format buffer or the active region;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-code-actions&lt;/code&gt; asks the server for any &#34;code actions&#34; at point. Can also be invoked by &lt;code&gt;mouse-1&lt;/code&gt;-clicking some diagnostics. Also &lt;code&gt;M-x eglot-code-action-&amp;lt;TAB&amp;gt;&lt;/code&gt; for shortcuts to specific actions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eldoc&lt;/code&gt; asks the Eldoc system for help at point (this command isn&#39;t specific to Eglot, by the way, it works in other contexts).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-events-buffer&lt;/code&gt; jumps to the events buffer for debugging communication with the server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-stderr-buffer&lt;/code&gt; if the LSP server is printing useful debug information in stderr, jumps to a buffer with these contents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-signal-didChangeConfiguration&lt;/code&gt; updates the LSP server configuration according to the value of the variable &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;, which you may be set in a &lt;code&gt;.dir-locals&lt;/code&gt; file, for example.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are &lt;em&gt;no keybindings&lt;/em&gt; specific to Eglot, but you can bind stuff in &lt;code&gt;eglot-mode-map&lt;/code&gt;, which is active as long as Eglot is managing a file in your project. The commands don&#39;t need to be Eglot-specific, either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-key eglot-mode-map (kbd &#34;C-c r&#34;) &#39;eglot-rename)&#xA;(define-key eglot-mode-map (kbd &#34;C-c o&#34;) &#39;eglot-code-action-organize-imports)&#xA;(define-key eglot-mode-map (kbd &#34;C-c h&#34;) &#39;eldoc)&#xA;(define-key eglot-mode-map (kbd &#34;&amp;lt;f6&amp;gt;&#34;) &#39;xref-find-definitions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;customization&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s a quick summary of the customization options. In Eglot&#39;s customization group (&lt;code&gt;M-x customize-group&lt;/code&gt;) there is more documentation on what these do.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-autoreconnect&lt;/code&gt;: Control ability to reconnect automatically to the LSP server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-connect-timeout&lt;/code&gt;: Number of seconds before timing out LSP connection attempts;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-sync-connect&lt;/code&gt;: Control blocking of LSP connection attempts;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-events-buffer-size&lt;/code&gt;: Control the size of the Eglot events buffer;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-ignored-server-capabilities&lt;/code&gt;: LSP server capabilities that Eglot could use, but won&#39;t;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-confirm-server-initiated-edits&lt;/code&gt;: If non-nil, ask for confirmation before allowing server to edit the source buffer&#39;s text;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a couple more variables that you can customize via Emacs lisp:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-server-programs&lt;/code&gt;: as described &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#connecting&#34;&gt;above&lt;/a&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-strict-mode&lt;/code&gt;: Set to &lt;code&gt;nil&lt;/code&gt; by default, meaning Eglot is generally lenient about non-conforming servers. Set this to &lt;code&gt;(disallow-non-standard-keys enforce-required-keys)&lt;/code&gt; when debugging servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-server-initialized-hook&lt;/code&gt;: Hook run after server is successfully initialized;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-managed-mode-hook&lt;/code&gt;: Hook run after Eglot started or stopped managing a buffer. Use &lt;code&gt;eglot-managed-p&lt;/code&gt; to tell if current buffer is still being managed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-stay-out-of&lt;/code&gt;: List of Emacs features that Eglot shouldn&#39;t automatically try to manage on users&#39; behalf. Useful when you need non-LSP Flymake or Company backends. See docstring for examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-extend-to-xref&lt;/code&gt;: If non-nil and &lt;code&gt;xref-find-definitions&lt;/code&gt; lands you in a file outside your project -- like a system-installed library or header file -- transiently consider it managed by the same LSP server. That file is still outside your project (i.e. &lt;code&gt;project-find-file&lt;/code&gt; won&#39;t find it).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How does Eglot work?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt; starts a server via a shell-command guessed from &lt;code&gt;eglot-server-programs&lt;/code&gt;, using the current major-mode (for whatever language you&#39;re programming in) as a hint.&lt;/p&gt; &#xA;&lt;p&gt;If the connection is successful, you see an &lt;code&gt;[eglot:&amp;lt;server&amp;gt;]&lt;/code&gt; indicator pop up in your mode-line. More importantly, this means current &lt;em&gt;and future&lt;/em&gt; file buffers of that major mode &lt;em&gt;inside your current project&lt;/em&gt; automatically become &#34;managed&#34; by the LSP server, This means that information about these file&#39;s contents is exchanged periodically to provide enhanced coding assistance. Eglot works primarily with Emacs&#39; built-in libraries and &lt;em&gt;not&lt;/em&gt; with third-party replacements for those facilities.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;definitions can be found via &lt;code&gt;xref-find-definitions&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;on-the-fly diagnostics for the buffer or project are given by &lt;code&gt;flymake-mode&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;function signature hints are given by &lt;code&gt;eldoc-mode&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;completion can be summoned with &lt;code&gt;completion-at-point&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;projects are discovered via &lt;code&gt;project.el&lt;/code&gt;&#39;s API;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some extra features are provided if certain libraries are installed and enabled, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;completion dropdowns via &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;snippet completions via &lt;a href=&#34;https://elpa.gnu.org/packages/yasnippet.html&#34;&gt;yasnippet&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;marked-up documentation via &lt;a href=&#34;https://github.com/defunkt/markdown-mode&#34;&gt;markdown&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Eglot doesn&#39;t &lt;em&gt;require&lt;/em&gt; these libraries to work effectively, but will use them automatically if they are found to be active.&lt;/p&gt; &#xA;&lt;p&gt;To &#34;unmanage&#34; a project&#39;s buffers, shutdown the server with &lt;code&gt;M-x eglot-shutdown&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;animated_gifs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;Obligatory animated gif section&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Completion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-completions.gif&#34; alt=&#34;eglot-completions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The animation shows &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company-mode&lt;/a&gt; presenting the completion candidates to the user, but Eglot works with the built-in &lt;code&gt;completion-at-point&lt;/code&gt; function as well, which is usually bound to &lt;code&gt;C-M-i&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Snippet completion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-snippets-on-completion.gif&#34; alt=&#34;eglot-snippets-on-completion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot provides template based completion if the server supports snippet completion and &lt;a href=&#34;https://elpa.gnu.org/packages/yasnippet.html&#34;&gt;yasnippet&lt;/a&gt; is enabled &lt;em&gt;before&lt;/em&gt; Eglot connects to the server. The animation shows &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company-mode&lt;/a&gt;, but &lt;code&gt;completion-at-point&lt;/code&gt; also works with snippets.&lt;/p&gt; &#xA;&lt;h2&gt;Diagnostics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-diagnostics.gif&#34; alt=&#34;eglot-diagnostics&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot relays the diagnostics information received from the LSP server to Emacs&#39;s &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;Flymake&lt;/a&gt;, which annotates/underlines the problematic parts of the buffer. The information is shared with the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt; system, meaning that the commands &lt;code&gt;eldoc&lt;/code&gt; and &lt;code&gt;eldoc-doc-buffer&lt;/code&gt; (the latter bound to &lt;code&gt;C-h-.&lt;/code&gt; for convenience) show diagnostics along with other documentation under point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;Flymake&lt;/a&gt; provides other convenient ways to view and manage diagnostic errors. These are described in its &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When Eglot manages a buffer, it disables pre-existing Flymake backends. See variable &lt;code&gt;eglot-stay-out-of&lt;/code&gt; to change that.&lt;/p&gt; &#xA;&lt;h2&gt;Code Actions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-code-actions.gif&#34; alt=&#34;eglot-code-actions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The LSP server may provide code actions, for example, to fix a diagnostic error or to suggest refactoring edits. The commands are frequently associating with Flymake diagnostic annotations, so that left-clicking them shows a menu. Additionally, the command &lt;code&gt;eglot-code-actions&lt;/code&gt; asks the server for any code spanning a given region.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes, these code actions are initiated by the server. See &lt;code&gt;eglot-confirm-server-initiated-edits&lt;/code&gt; to control that behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Hover on symbol /function signature&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-hover-on-symbol.gif&#34; alt=&#34;eglot-hover-on-symbol&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here, too, the LSP server&#39;s view of a given symbol or function signature is relayed to the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt; system. The commands &lt;code&gt;eldoc&lt;/code&gt; and &lt;code&gt;eldoc-doc-buffer&lt;/code&gt; commands access that information.&lt;/p&gt; &#xA;&lt;p&gt;There are customization variables to help adjust &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt;&#39;s liberal use of the lower &#34;echo area&#34;, among other options. If you still find the solicitous nature of this LSP feature too distracting, you can use &lt;code&gt;eglot-ignored-server-capabilities&lt;/code&gt; to turn it off.&lt;/p&gt; &#xA;&lt;h2&gt;Rename&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-rename.gif&#34; alt=&#34;eglot-rename&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;M-x eglot-rename RET&lt;/code&gt; to rename the symbol at point.&lt;/p&gt; &#xA;&lt;h2&gt;Find definition&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-xref-find-definition.gif&#34; alt=&#34;eglot-xref-find-definition&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To jump to the definition of a symbol, use the built-in &lt;code&gt;xref-find-definitions&lt;/code&gt; command, which is bound to &lt;code&gt;M-.&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Find references&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-xref-find-references.gif&#34; alt=&#34;eglot-xref-find-references&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot here relies on Emacs&#39; built-in functionality as well. &lt;code&gt;xref-find-references&lt;/code&gt; is bound to &lt;code&gt;M-?&lt;/code&gt;. Additionally, Eglot provides the following similar commands: &lt;code&gt;eglot-find-declaration&lt;/code&gt;, &lt;code&gt;eglot-find-implementation&lt;/code&gt;, &lt;code&gt;eglot-find-typeDefinition&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Historical differences to lsp-mode.el&lt;/h1&gt; &#xA;&lt;p&gt;Around May 2018, I wrote a comparison of Eglot to &lt;code&gt;lsp-mode.el&lt;/code&gt;, and was discussed with its then-maintainer. That mode has since been refactored/rewritten and now &lt;a href=&#34;https://github.com/joaotavora/eglot/issues/180&#34;&gt;purports to support&lt;/a&gt; a lot of features that differentiated Eglot from it. It may now be very different or very similar to Eglot, or even sing with the birds in the trees, so &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;go check it out&lt;/a&gt;. That said, here&#39;s the original comparison, which I will not be updating any more.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Eglot is considerably less code and hassle than lsp-mode.el. In most cases, there&#39;s nothing to configure. It&#39;s a minimalist approach focused on user experience and performance.&lt;/p&gt; &#xA;&lt;p&gt;User-visible differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The single most visible difference is the friendly entry point &lt;code&gt;M-x eglot&lt;/code&gt;, not &lt;code&gt;M-x eglot-&amp;lt;language&amp;gt;&lt;/code&gt;. Also, there are no &lt;code&gt;eglot-&amp;lt;language&amp;gt;&lt;/code&gt; extra packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s no &#34;whitelisting&#34; or &#34;blacklisting&#34; directories to languages. &lt;code&gt;M-x eglot&lt;/code&gt; starts servers to handle file of a major mode inside a specific project, using Emacs&#39;s built-in &lt;code&gt;project.el&lt;/code&gt; library to discover projects. Then it automatically detects current and future opened files under that project and syncs with server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy way to quit/restart a server, just middle/right click on the connection name;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pretty interactive mode-line section for live tracking of server communication;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Automatically restarts frequently crashing servers;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slow-to-start servers start asynchronously in the background;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Server-initiated edits are confirmed with the user;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diagnostics work out-of-the-box (no &lt;code&gt;flycheck.el&lt;/code&gt; needed);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Smoother/more responsive (read below).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Under the hood:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Message parser is much simpler.&lt;/li&gt; &#xA; &lt;li&gt;Defers signature requests like &lt;code&gt;textDocument/hover&lt;/code&gt; until server is ready.&lt;/li&gt; &#xA; &lt;li&gt;Sends &lt;code&gt;textDocument/didChange&lt;/code&gt; for groups of edits, not one per each tiny change.&lt;/li&gt; &#xA; &lt;li&gt;Easier to read and maintain elisp. Yeah I know, &lt;em&gt;very subjective&lt;/em&gt;, so judge for yourself.&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t &lt;em&gt;require&lt;/em&gt; anything other than Emacs, but will automatically upgrade to work with stuff outside Emacs, like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;markdown-mode&lt;/code&gt;, if you happen to have these installed.&lt;/li&gt; &#xA; &lt;li&gt;Has automated tests that check against actual LSP servers.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Copyright Assignment&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Eglot&lt;/code&gt; is subject to the same &lt;a href=&#34;https://www.fsf.org/licensing/contributor-faq&#34;&gt;copyright assignment&lt;/a&gt; policy as &lt;code&gt;GNU Emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;https://www.gnu.org/prep/maintain/html_node/Legally-Significant.html#Legally-Significant&#34;&gt;legally significant&lt;/a&gt; contributions can only be merged after the author has completed their paperwork. Please ask for the request form, and we&#39;ll send it to you.&lt;/p&gt; &#xA;&lt;!-- Language servers --&gt; &#xA;&lt;!-- Other references --&gt;</summary>
  </entry>
  <entry>
    <title>minad/consult</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/minad/consult</id>
    <link href="https://github.com/minad/consult" rel="alternate"></link>
    <summary type="html">&lt;p&gt;consult.el - Consulting completing-read&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: consult.el - Consulting completing-read #+author: Daniel Mendler #+language: en #+export_file_name: consult.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Consult: (consult). #+texinfo_dir_desc: Useful commands built on completing-read.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/consult.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/consult.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/consult.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/consult.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/consult&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/consult-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/consult&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/consult-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction :properties: :description: Why Consult? &lt;span&gt;🔚&lt;/span&gt; #+cindex: introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult provides practical commands based on the Emacs completion function [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][completing-read]]. Completion allows you to quickly select an item from a list of candidates. Consult offers in particular an advanced buffer switching command =consult-buffer= to switch between buffers and recently opened files. Furthermore Consult provides multiple search commands, an asynchronous =consult-grep= and =consult-ripgrep=, and the line-based search command =consult-line=. Some of the Consult commands are enhanced versions of built-in Emacs commands. For example the command =consult-imenu= presents a flat list of the Imenu with [[#live-previews][live preview]], [[#narrowing-and-grouping][grouping and narrowing]]. Please take a look at the [[#available-commands][full list of commands]].&lt;/p&gt; &#xA;&lt;p&gt;Consult is fully compatible with completion systems based on the standard Emacs =completing-read= API, notably the default completion system, [[https://github.com/minad/vertico][Vertico]], [[https://github.com/protesilaos/mct][Mct]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][Icomplete]] and [[https://github.com/raxod502/selectrum][Selectrum]].&lt;/p&gt; &#xA;&lt;p&gt;This package keeps the completion system specifics to a minimum. The ability of the Consult commands to work well with arbitrary completion systems is one of the main advantages of the package. Consult fits well into existing setups and it helps you to create a full completion environment out of small and independent components. Note that, if you use [[https://github.com/abo-abo/swiper#ivy][Ivy]] or [[https://github.com/emacs-helm/helm][Helm]], you probably don&#39;t need Consult, since both packages bring their own Consult-like functionality.&lt;/p&gt; &#xA;&lt;p&gt;You can combine the complementary packages [[https://github.com/minad/marginalia/][Marginalia]], [[https://github.com/oantolin/embark/][Embark]] and [[https://github.com/oantolin/orderless][Orderless]] with Consult. Marginalia enriches the completion display with annotations, e.g., documentation strings or file information. The versatile Embark package provides local actions, comparable to a context menu. These actions operate on the selected candidate in the minibuffer or at point in normal buffers. For example, when selecting from a list of files, Embark offers an action to delete the file. Additionally Embark offers a facility to collect completion candidates in a collect buffer. The section [[#embark-integration][Embark integration]] documents in greater detail how Consult and Embark work together.&lt;/p&gt; &#xA;&lt;p&gt;** Screenshots :noexport:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-grep [[https://github.com/minad/consult/blob/screenshots/consult-grep.gif?raw=true]] Fig. 1: Command =consult-git-grep=&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-imenu [[https://github.com/minad/consult/blob/screenshots/consult-imenu.png?raw=true]] Fig. 2: Command =consult-imenu=&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-line [[https://github.com/minad/consult/blob/screenshots/consult-line.png?raw=true]] Fig. 3: Command =consult-line=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available commands :properties: :custom_id: available-commands :description: Navigation, search, editing commands and more &lt;span&gt;🔚&lt;/span&gt; #+cindex: commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most Consult commands follow the meaningful naming scheme =consult-&#xA; &lt;thing&gt;&#xA;  =. Many commands implement a little known but convenient Emacs feature called &#34;future history&#34;, which guesses what input the user wants. At a command prompt type =M-n= and typically Consult will insert the symbol or thing at point into the input.&#xA; &lt;/thing&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP:&lt;/em&gt; If you have [[https://github.com/minad/marginalia][Marginalia]] annotators activated, type =M-x ^consult= to see all Consult commands with their abbreviated description. Alternatively, type =C-h a ^consult= to get an overview of all Consult variables and functions with their descriptions.&lt;/p&gt; &#xA;&lt;p&gt;** Virtual Buffers :properties: :description: Buffers, bookmarks and recent files &lt;span&gt;🔚&lt;/span&gt; #+cindex: virtual buffers&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-buffer #+findex: consult-buffer-other-window #+findex: consult-buffer-other-frame #+findex: consult-project-buffer #+findex: consult-recent-file #+findex: consult-bookmark&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-buffer= (=-other-window=, =-other-frame=): Enhanced version of =switch-to-buffer= with support for virtual buffers. Supports live preview of buffers and narrowing to the virtual buffer types. You can type =f SPC= in order to narrow to recent files. Press =SPC= to show ephemeral buffers. Supported narrowing keys: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;b Buffers&lt;/li&gt; &#xA;   &lt;li&gt;SPC Hidden buffers&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Modified buffers&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;f Files (Requires =recentf-mode=)&lt;/li&gt; &#xA;   &lt;li&gt;m Bookmarks&lt;/li&gt; &#xA;   &lt;li&gt;p Project&lt;/li&gt; &#xA;   &lt;li&gt;Custom [[#multiple-sources][other sources]] configured in =consult-buffer-sources=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=consult-project-buffer=: Variant of =consult-buffer= restricted to buffers and recent files of the current project. You can add custom sources to =consult-project-buffer-sources=. The command may prompt you for a project if you invoke it from outside a project.&lt;/li&gt; &#xA; &lt;li&gt;=consult-bookmark=: Select or create bookmark. To select bookmarks you might use the =consult-buffer= as an alternative, which can include a bookmark virtual buffer source. Note that =consult-bookmark= supports preview of bookmarks and narrowing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-recent-file=: Select from recent files with preview. You might prefer the powerful =consult-buffer= instead, which can include recent files as a virtual buffer source. The =recentf-mode= enables tracking of recent files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Editing :properties: :description: Commands useful for editing &lt;span&gt;🔚&lt;/span&gt; #+cindex: editing&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-yank-pop #+findex: consult-yank-from-kill-ring #+findex: consult-yank-replace #+findex: consult-kmacro&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-yank-from-kill-ring=: Enhanced version of =yank= to select an item from the =kill-ring=. The selected text previewed as overlay in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-yank-pop=: Enhanced version of =yank-pop= with DWIM-behavior, which either replaces the last =yank= by cycling through the =kill-ring=, or if there has not been a last =yank= consults the =kill-ring=. The selected text previewed as overlay in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-yank-replace=: Like =consult-yank-pop=, but always replaces the last =yank= with an item from the =kill-ring=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-kmacro=: Select macro from the macro ring and execute it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Register :properties: :description: Searching through registers and fast access &lt;span&gt;🔚&lt;/span&gt; #+cindex: register&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-register #+findex: consult-register-load #+findex: consult-register-store #+findex: consult-register-format #+findex: consult-register-window&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-register=: Select from list of registers. The command supports narrowing to register types and preview of marker positions. This command is useful to search the register contents. For quick access use the commands =consult-register-load=, =consult-register-store= or the built-in Emacs register commands.&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-format=: Set =register-preview-function= to this function for an enhanced register formatting. See the [[#use-package-example][example configuration]].&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-window=: Replace =register-preview= with this function for a better register window. See the [[#use-package-example][example configuration]].&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-load=: Utility command to quickly load a register. The command either jumps to the register value or inserts it.&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-store=: Improved UI to store registers depending on the current context with an action menu. With an active region, store/append/prepend the contents, optionally deleting the region when a prefix argument is given. With a numeric prefix argument, store/add the number. Otherwise store point, frameset, window or kmacro. Usage examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=M-&#39; x=: If no region is active, store point in register =x=. If a region is active, store the region in register =x=.&lt;/li&gt; &#xA;   &lt;li&gt;=M-&#39; M-w x=: Store window configuration in register =x=.&lt;/li&gt; &#xA;   &lt;li&gt;=C-u 100 M-&#39; x=: Store number in register =x=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Navigation :properties: :description: Mark rings, outlines and imenu &lt;span&gt;🔚&lt;/span&gt; #+cindex: navigation&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-goto-line #+findex: consult-mark #+findex: consult-global-mark #+findex: consult-outline #+findex: consult-imenu #+findex: consult-imenu-multi&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-goto-line=: Jump to line number enhanced with live preview. This is a drop-in replacement for =goto-line=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-mark=: Jump to a marker in the =mark-ring=. Supports live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-global-mark=: Jump to a marker in the =global-mark-ring=. Supports live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-outline=: Jump to a heading of the outline. Supports narrowing to a heading level, live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-imenu=: Jump to imenu item in the current buffer. Supports live preview, recursive editing and narrowing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-imenu-multi=: Jump to imenu item in project buffers, with the same major mode as the current buffer. Supports live preview, recursive editing and narrowing. This feature has been inspired by [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Search :properties: :description: Line search, grep and file search &lt;span&gt;🔚&lt;/span&gt; #+cindex: search&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-line #+findex: consult-line-multi #+findex: consult-multi-occur #+findex: consult-keep-lines #+findex: consult-focus-lines&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-line=: Enter search string and select from matching lines. Supports live preview and recursive editing. The symbol at point and the recent Isearch string are added to the &#34;future history&#34; and can be accessed by pressing =M-n=. When =consult-line= is bound to the =isearch-mode-map= and is invoked during a running Isearch, it will use the current Isearch string.&lt;/li&gt; &#xA; &lt;li&gt;=consult-line-multi=: Search across multiple buffers. By default search across project buffers. If invoked with a prefix argument search across all buffers. Behaves like =consult-line=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-multi-occur=: Replacement for =multi-occur= which uses =completing-read-multiple=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-keep-lines=: Replacement for =keep/flush-lines= which uses the current completion style for filtering the buffer. The function updates the buffer while typing. In particular =consult-keep-lines= can narrow down an exported Embark collect buffer further, relying on the same completion filtering as &lt;del&gt;completing-read&lt;/del&gt;. If the input begins with the negation operator, i.e., &lt;del&gt;! SPC&lt;/del&gt;, the filter matches the complement. If a region is active, the region restricts the filtering.&lt;/li&gt; &#xA; &lt;li&gt;=consult-focus-lines=: Temporarily hide lines by filtering them using the current completion style. Call with =C-u= prefix argument in order to show the hidden lines again. If the input begins with the negation operator, i.e., &lt;del&gt;! SPC&lt;/del&gt;, the filter matches the complement. In contrast to =consult-keep-lines= this function does not edit the buffer. If a region is active, the region restricts the filtering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Grep and Find :properties: :description: Searching through the filesystem &lt;span&gt;🔚&lt;/span&gt; #+cindex: grep #+cindex: find #+cindex: locate&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-grep #+findex: consult-ripgrep #+findex: consult-git-grep #+findex: consult-find #+findex: consult-locate&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-grep=, =consult-ripgrep=, =consult-git-grep=: Search for regular expression in files. Consult invokes Grep asynchronously, while you enter the search term. After at least =consult-async-min-input= characters, the search gets started. Consult splits the input string into two parts, if the first character is a punctuation character, like =#=. For example =#regexps#filter-string=, is split at the second =#=. The string =regexps= is passed to Grep. Note that Consult transforms Emacs regular expressions to expressions understand by the search program. Always use Emacs regular expressions at the prompt. If you enter multiple regular expressions separated by space only lines matching all regular expressions are shown. In order to match space literally, escape the space with a backslash. The =filter-string= is passed to the /fast/ Emacs filtering to further narrow down the list of matches. This is particularly useful if you are using an advanced completion style like orderless. =consult-grep= supports preview. If the =consult-project-function= returns non-nil, =consult-grep= searches the current project directory. Otherwise the =default-directory= is searched. If =consult-grep= is invoked with prefix argument =C-u M-s g=, you can specify the directory manually.&lt;/li&gt; &#xA; &lt;li&gt;=consult-find=, =consult-locate=: Find file by matching the path against a regexp. Like for =consult-grep,= either the project root or the current directory is the root directory for the search. The input string is treated similarly to =consult-grep=, where the first part is passed to find, and the second part is used for Emacs filtering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Compilation :properties: :description: Jumping to references and compilation errors &lt;span&gt;🔚&lt;/span&gt; #+cindex: compilation errors&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-compile-error #+findex: consult-flymake #+findex: consult-xref&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-compile-error=: Jump to a compilation error. Supports live preview narrowing and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-flymake=: Jump to flymake diagnostic. Supports live preview and recursive editing. The command supports narrowing. Press =e SPC=, =w SPC=, =n SPC= to only show errors, warnings and notes respectively.&lt;/li&gt; &#xA; &lt;li&gt;=consult-xref=: Integration with xref. This function can be set as =xref-show-xrefs-function= and =xref-show-definitions-function=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Histories :properties: :description: Navigating histories &lt;span&gt;🔚&lt;/span&gt; #+cindex: history&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-complex-command #+findex: consult-history #+findex: consult-isearch-history&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-complex-command=: Select a command from the =command-history=. This command is a =completing-read= version of =repeat-complex-command= and is also a replacement for the =command-history= command from chistory.el.&lt;/li&gt; &#xA; &lt;li&gt;=consult-history=: Insert a string from the current buffer history, for example the Eshell or Comint history. You can also invoke this command from the minibuffer. In that case =consult-history= uses the history stored in the =minibuffer-history-variable=. If you prefer =completion-at-point=, take a look at =cape-history= from the [[https://github.com/minad/cape][Cape]] package.&lt;/li&gt; &#xA; &lt;li&gt;=consult-isearch-history=: During an Isearch session, this command picks a search string from history and continues the search with the newly selected string. Outside of Isearch, the command allows you to pick a string from the history and starts a new Isearch. =consult-isearch-history= acts as a drop-in replacement for =isearch-edit-string=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Modes :properties: :description: Toggling minor modes and executing commands &lt;span&gt;🔚&lt;/span&gt; #+cindex: minor mode #+cindex: major mode&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-minor-mode-menu #+findex: consult-mode-command&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-minor-mode-menu=: Enable/disable minor mode. Supports narrowing to on/off/local/global modes by pressing =i/o/l/g SPC= respectively.&lt;/li&gt; &#xA; &lt;li&gt;=consult-mode-command=: Run a command from the currently active minor or major modes. Supports narrowing to local-minor/global-minor/major mode via the keys =l/g/m=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Org Mode :properties: :description: Org-specific commands &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-org-heading #+findex: consult-org-agenda&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-org-heading=: Similar to =consult-outline=, for Org buffers. Supports narrowing by heading level, priority and TODO state, as well as live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-org-agenda=: Jump to an agenda heading. Supports narrowing by heading level, priority and TODO state, as well as live preview and recursive editing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Miscellaneous :properties: :description: Various other useful commands &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-apropos #+findex: consult-file-externally #+findex: consult-completion-in-region #+findex: consult-theme #+findex: consult-man #+findex: consult-preview-at-point #+findex: consult-preview-at-point-mode&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-apropos=: Replacement for =apropos= with completion. As a better alternative, you can run =embark-export= from commands like =M-x= or =describe-symbol=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-man=: Find Unix man page, via Unix =apropos= or =man -k=. =consult-man= opens the selected man page using the Emacs =man= command.&lt;/li&gt; &#xA; &lt;li&gt;=consult-file-externally=: Select a file and open it externally, e.g.&amp;nbsp;using =xdg-open= on Linux.&lt;/li&gt; &#xA; &lt;li&gt;=consult-theme=: Select a theme and disable all currently enabled themes. Supports live preview of the theme while scrolling through the candidates.&lt;/li&gt; &#xA; &lt;li&gt;=consult-preview-at-point= and =consult-preview-at-point-mode=: Command and minor mode which previews the candidate at point in the =&lt;em&gt;Completions&lt;/em&gt;= buffer. This mode is relevant if you use [[https://git.sr.ht/~protesilaos/mct][Mct]] or the default =&lt;em&gt;Completions&lt;/em&gt;= UI.&lt;/li&gt; &#xA; &lt;li&gt;=consult-completion-in-region=: In case you don&#39;t use [[https://github.com/minad/corfu][Corfu]] as your in-buffer completion UI, this function can be set as =completion-in-region-function=. Then your minibuffer completion UI (e.g., Vertico or Icomplete) will be used for =completion-at-point=. Note that Selectrum provides its own variant of =consult-completion-in-region=. If you use Mct, you may want to try =mct-region-mode= instead. #+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src Instead of =consult-completion-in-region=, you may prefer to see the completions directly in the buffer as a small popup. In that case, I recommend either the [[https://github.com/minad/corfu][Corfu]] or the [[https://github.com/company-mode/company-mode][Company]] package. There is a technical limitation of =consult-completion-in-region= in combination with Lsp-mode or Eglot. The Lsp server relies on the input at point, in order to generate refined candidate strings. Since the completion is transferred from the original buffer to the minibuffer, the server does not receive the updated input. LSP completion works with Corfu or Company though, which perform the completion directly in the original buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Special features :properties: :description: Enhancements over built-in `completing-read&#39; &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult enhances =completing-read= with live previews of candidates, additional narrowing capabilities to candidate groups and asynchronously generated candidate lists. The internal =consult--read= function, which is used by most Consult commands, is a thin wrapper around =completing-read= and provides the special functionality. In order to support multiple candidate sources there exists the high-level function =consult--multi=. The architecture of Consult allows it to work with different completion systems in the backend, while still offering advanced features.&lt;/p&gt; &#xA;&lt;p&gt;** Live previews :properties: :description: Preview the currently selected candidate :custom_id: live-previews &lt;span&gt;🔚&lt;/span&gt; #+cindex: preview&lt;/p&gt; &#xA;&lt;p&gt;Some Consult commands support live previews. For example when you scroll through the items of =consult-line=, the buffer will scroll to the corresponding position. It is possible to jump back and forth between the minibuffer and the buffer to perform recursive editing while the search is ongoing.&lt;/p&gt; &#xA;&lt;p&gt;Consult enables previews by default. You can disable them by adjusting the =consult-preview-key= variable. Furthermore it is possible to specify keybindings which trigger the preview manually as shown in the [[#use-package-example][example configuration]]. The default setting of =consult-preview-key= is =any= which means that Consult triggers the preview /immediately/ on any key press when the selected candidate changes. You can configure each command individually with its own =:preview-key=. The following settings are possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic and immediate =&#39;any=&lt;/li&gt; &#xA; &lt;li&gt;Automatic and delayed =(list :debounce 0.5 &#39;any)=&lt;/li&gt; &#xA; &lt;li&gt;Manual and immediate =(kbd &#34;M-.&#34;)=&lt;/li&gt; &#xA; &lt;li&gt;Manual and delayed =(list :debounce 0.5 (kbd &#34;M-.&#34;))=&lt;/li&gt; &#xA; &lt;li&gt;Disabled =nil=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A safe recommendation is to leave automatic immediate previews enabled in general and disable the automatic preview only for commands, where the preview may be expensive due to file loading.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-recent-file consult-xref consult--source-bookmark consult--source-recent-file consult--source-project-recent-file ;; :preview-key &#39;(:debounce 0.2 any) ;; Option 1: Delay preview :preview-key (kbd &#34;M-.&#34;)) ;; Option 2: Manual preview #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In this case one may wonder what the difference is between using an Embark action on the current candidate in comparison to a manually triggered preview. The main difference is that the files opened by manual preview are closed again after the completion session. Furthermore during preview some functionality is disabled to improve the performance, see for example the customization variables =consult-preview-allowed-hooks= and =consult-preview-variables=. Files larger than =consult-preview-raw-size= are previewed literally without syntax highlighting and without changing the major mode. Delaying the preview is also useful for =consult-theme=, since the theme preview is slow. The delay results in a smoother UI experience.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Preview on any key press, but delay 0.5s (consult-customize consult-theme :preview-key &#39;(:debounce 0.5 any)) ;; Preview immediately on M-., on up/down after 0.5s, on any other key after 1s (consult-customize consult-theme :preview-key (list (kbd &#34;M-.&#34;) :debounce 0.5 (kbd &#34;&#xA; &lt;up&gt;&#xA;  &#34;) (kbd &#34;&#xA;  &lt;down&gt;&#xA;   &#34;) :debounce 1 &#39;any)) #+end_src&#xA;  &lt;/down&gt;&#xA; &lt;/up&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Narrowing and grouping :properties: :description: Restricting the completion to a candidate group :custom_id: narrowing-and-grouping &lt;span&gt;🔚&lt;/span&gt; #+cindex: narrowing&lt;/p&gt; &#xA;&lt;p&gt;Consult has special support for candidate groups. If the completion UI supports the grouping functionality, the UI separates the groups with thin lines and shows group titles. Grouping is useful if the list of candidates consists of candidates of multiple types or candidates from [[#multiple-sources][multiple sources]], like the =consult-buffer= command, which shows both buffers and recently opened files. Note that you can disable the group titles by setting the =:group= property of the corresponding command to nil using the =consult-customize= macro.&lt;/p&gt; &#xA;&lt;p&gt;By entering a narrowing prefix or by pressing a narrowing key it is possible to restrict the completion candidates to a certain candidate group. When you use the =consult-buffer= command, you can enter the prefix =b SPC= to restrict list of candidates to buffers only. If you press =DEL= afterwards, the full candidate list will be shown again. Furthermore a narrowing prefix key and a widening key can be configured which can be pressed to achieve the same effect, see the configuration variables =consult-narrow-key= and =consult-widen-key=.&lt;/p&gt; &#xA;&lt;p&gt;After pressing =consult-narrow-key=, the possible narrowing keys can be shown by pressing =C-h=. When pressing =C-h= after some prefix key, the =prefix-help-command= is invoked, which shows the keybinding help window by default. As a more compact alternative, there is the =consult-narrow-help= command which can be bound to a key, for example =?= or =C-h= in the =consult-narrow-map=, as shown in the [[#use-package-example][example configuration]]. If [[https://github.com/justbur/emacs-which-key][which-key]] is installed, the narrowing keys are automatically shown in the which-key window after pressing the =consult-narrow-key=.&lt;/p&gt; &#xA;&lt;p&gt;** Asynchronous search :properties: :description: Filtering asynchronously generated candidate lists &lt;span&gt;🔚&lt;/span&gt; #+cindex: asynchronous search&lt;/p&gt; &#xA;&lt;p&gt;Consult has support for asynchronous generation of candidate lists. This feature is used for search commands like =consult-grep=, where the list of matches is generated dynamically while the user is typing a regular expression. The grep process is executed in the background. When modifying the regular expression, the background process is terminated and a new process is started with the modified regular expression.&lt;/p&gt; &#xA;&lt;p&gt;The matches, which have been found, can then be narrowed using the installed Emacs completion-style. This can be powerful if you are using for example the =orderless= completion style.&lt;/p&gt; &#xA;&lt;p&gt;This two-level filtering is possible by splitting the input string. Part of the input string is treated as input to grep and part of the input is used for filtering. There are multiple splitting styles available, configured in &lt;del&gt;consult-async-split-styles-alist&lt;/del&gt;: =nil=, =comma=, =semicolon= and =perl=. The default splitting style is configured with the variable &lt;del&gt;consult-async-split-style&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the =comma= and =semicolon= splitting styles, the first word before the comma or semicolon is passed to grep, the remaining string is used for filtering. The =nil= splitting style does not perform any splitting, the whole input is passed to grep.&lt;/p&gt; &#xA;&lt;p&gt;The =perl= splitting style splits the input string at a punctuation character, using a similar syntax as Perl regular expressions.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=#defun=: Search for &#34;defun&#34; using grep.&lt;/li&gt; &#xA; &lt;li&gt;=#consult embark=: Search for both &#34;consult&#34; and &#34;embark&#34; using grep in any order.&lt;/li&gt; &#xA; &lt;li&gt;=#first.*second=: Search for &#34;first&#34; followed by &#34;second&#34; using grep.&lt;/li&gt; &#xA; &lt;li&gt;=#(consult|embark)=: Search for &#34;consult&#34; or &#34;embark&#34; using grep. Note the usage of Emacs-style regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=#defun#consult=: Search for &#34;defun&#34; using grep, filter with the word &#34;consult&#34;.&lt;/li&gt; &#xA; &lt;li&gt;=/defun/consult=: It is also possible to use other punctuation characters.&lt;/li&gt; &#xA; &lt;li&gt;=#to#=: Force searching for &#34;to&#34; using grep, since the grep pattern must be longer than =consult-async-min-input= characters by default.&lt;/li&gt; &#xA; &lt;li&gt;=#defun -- --invert-match#=: Pass argument =--invert-match= to grep.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Asynchronous processes like =find= and =grep= create an error log buffer =_&lt;em&gt;consult-async&lt;/em&gt;= (note the leading space), which is useful for troubleshooting. The prompt has a small indicator showing the process status:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:= the usual prompt colon, before input is provided.&lt;/li&gt; &#xA; &lt;li&gt;=*= with warning face, the process is running.&lt;/li&gt; &#xA; &lt;li&gt;=:= with success face, success, process exited with an error code of zero.&lt;/li&gt; &#xA; &lt;li&gt;=!= with error face, failure, process exited with a nonzero error code.&lt;/li&gt; &#xA; &lt;li&gt;=;= with error face, interrupted, for example if more input is provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Multiple sources :properties: :description: Combining candidates from different sources :custom_id: multiple-sources &lt;span&gt;🔚&lt;/span&gt; #+cindex: multiple sources&lt;/p&gt; &#xA;&lt;p&gt;Multiple synchronous candidate sources can be combined. This feature is used by the =consult-buffer= command to present buffer-like candidates in a single menu for quick access. By default =consult-buffer= includes buffers, bookmarks, recent files and project-specific buffers and files. It is possible to configure the list of sources via the =consult-buffer-sources= variable. Arbitrary custom sources can be defined.&lt;/p&gt; &#xA;&lt;p&gt;As an example, the bookmark source is defined as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar consult--source-bookmark `(:name &#34;Bookmark&#34; :narrow ?m :category bookmark :face consult-bookmark :history bookmark-history :items ,#&#39;bookmark-all-names :action ,#&#39;consult--bookmark-action)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Required source fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:category= Completion category.&lt;/li&gt; &#xA; &lt;li&gt;=:items= List of strings to select from or function returning list of strings. A list of cons cells is not supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional source fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:name= Name of the source, used for narrowing, group titles and annotations.&lt;/li&gt; &#xA; &lt;li&gt;=:narrow= Narrowing character or =(character . string)= pair.&lt;/li&gt; &#xA; &lt;li&gt;=:preview-key= Preview key or keys which trigger preview.&lt;/li&gt; &#xA; &lt;li&gt;=:enabled= Function which must return t if the source is enabled.&lt;/li&gt; &#xA; &lt;li&gt;=:hidden= When t candidates of this source are hidden by default.&lt;/li&gt; &#xA; &lt;li&gt;=:face= Face used for highlighting the candidates.&lt;/li&gt; &#xA; &lt;li&gt;=:annotate= Annotation function called for each candidate, returns string.&lt;/li&gt; &#xA; &lt;li&gt;=:history= Name of history variable to add selected candidate.&lt;/li&gt; &#xA; &lt;li&gt;=:default= Must be t if the first item of the source is the default value.&lt;/li&gt; &#xA; &lt;li&gt;=:action= Function called with the selected candidate.&lt;/li&gt; &#xA; &lt;li&gt;=:new= Function called with new candidate name, only if =:require-match= is nil.&lt;/li&gt; &#xA; &lt;li&gt;=:state= State constructor for the source, must return the state function.&lt;/li&gt; &#xA; &lt;li&gt;Other source fields can be added specifically to the use case.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The =:state= and =:action= fields of the sources deserve a longer explanation. The =:action= function takes a single argument and is only called after selection with the selected candidate, if the selection has not been aborted. This functionality is provided for convenience and easy definition of sources. The =:state= field is more general. The =:state= function is a constructor function without arguments, which can perform some setup necessary for the preview. It must return a closure which takes an ACTION and a CANDIDATE argument. See the docstring of =consult--with-preview= for more details about the ACTION argument.&lt;/p&gt; &#xA;&lt;p&gt;By default, =consult-buffer= previews buffers, bookmarks and files. Loading recent files, bookmarks or views can result in expensive operations. However it is possible to configure a manual preview as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult--source-bookmark consult--source-recent-file consult--source-project-recent-file :preview-key (kbd &#34;M-.&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Sources can be added directly to the =consult-buffer-source= list for convenience. For example views can be added to the list of virtual buffers from a library like &lt;a href=&#34;https://github.com/minad/bookmark-view/&#34;&gt;https://github.com/minad/bookmark-view/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure new bookmark-view source (add-to-list &#39;consult-buffer-sources (list :name &#34;View&#34; :narrow ?v :category &#39;bookmark :face &#39;font-lock-keyword-face :history &#39;bookmark-view-history :action #&#39;consult--bookmark-action :items #&#39;bookmark-view-names) &#39;append)&lt;/p&gt; &#xA;&lt;p&gt;;; Modify bookmark source, such that views are hidden (setq consult--source-bookmark (plist-put consult--source-bookmark :items (lambda () (bookmark-maybe-load-default-file) (mapcar #&#39;car (seq-remove (lambda (x) (eq #&#39;bookmark-view-handler (alist-get &#39;handler (cdr x)))) bookmark-alist))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Another useful source lists all Org buffers and lets you create new ones. One can create similar sources for other major modes, e.g., for Eshell.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar org-source (list :name &#34;Org Buffer&#34; :category &#39;buffer :narrow ?o :face &#39;consult-buffer :history &#39;buffer-name-history :state #&#39;consult--buffer-state :new (lambda (name) (with-current-buffer (get-buffer-create name) (insert &#34;#+title: &#34; name &#34;\n\n&#34;) (org-mode) (consult--buffer-action (current-buffer)))) :items (lambda () (mapcar #&#39;buffer-name (seq-filter (lambda (x) (eq (buffer-local-value &#39;major-mode x) &#39;org-mode)) (buffer-list))))))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;consult-buffer-sources &#39;org-source &#39;append) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the documentation of =consult-buffer= and of the internal =consult--multi= API. The =consult--multi= function can be used to create new multi-source commands, but is part of the internal API as of now, since some details may still change.&lt;/p&gt; &#xA;&lt;p&gt;** Embark integration :properties: :description: Actions, Grep/Occur-buffer export :custom_id: embark-integration &lt;span&gt;🔚&lt;/span&gt; #+cindex: embark&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Install the =embark-consult= package from MELPA, which provides Consult-specific Embark actions and the Occur buffer export.&lt;/p&gt; &#xA;&lt;p&gt;Embark is a versatile package which offers context dependent actions, comparable to a context menu. See the [[https://github.com/oantolin/embark][Embark manual]] for an extensive description of its capabilities.&lt;/p&gt; &#xA;&lt;p&gt;Actions are commands which can operate on the currently selected candidate (or target in Embark terminology). When completing files, for example the =delete-file= command is offered. With Embark you can execute arbitrary commands on the currently selected candidate via =M-x=.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore Embark provides the =embark-collect= command, which collects candidates and presents them in an Embark collect buffer, where further actions can be applied to them. A related feature is the =embark-export= command, which exports candidate lists to a buffer of a special type. For example in the case of file completion, a Dired buffer is opened.&lt;/p&gt; &#xA;&lt;p&gt;In the context of Consult, particularly exciting is the possibility to export the matching lines from =consult-line=, =consult-outline=, =consult-mark= and =consult-global-mark=. The matching lines are exported to an Occur buffer where they can be edited via the =occur-edit-mode= (press key =e=). Similarly, Embark supports exporting the matches found by =consult-grep=, =consult-ripgrep= and =consult-git-grep= to a Grep buffer, where the matches across files can be edited, if the [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] package is installed. These three workflows are symmetric.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-line= -&amp;gt; =embark-export= to =occur-mode= buffer -&amp;gt; =occur-edit-mode= for editing of matches in buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-grep= -&amp;gt; =embark-export= to =grep-mode= buffer -&amp;gt; =wgrep= for editing of all matches.&lt;/li&gt; &#xA; &lt;li&gt;=consult-find= -&amp;gt; =embark-export= to =dired-mode= buffer -&amp;gt; =wdired-change-to-wdired-mode= for editing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration :properties: :description: Example configuration and customization variables &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult can be installed from [[http://elpa.gnu.org/packages/consult.html][ELPA]] or [[https://melpa.org/#/consult][MELPA]] via the Emacs built-in package manager. Alternatively it can be directly installed from the development repository via other non-standard package managers.&lt;/p&gt; &#xA;&lt;p&gt;There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where additional configuration examples can be contributed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT:&lt;/em&gt; It is strongly recommended that you enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]] in your configuration. Consult relies on lambdas and lexical closures. For this reason many Consult-related snippets require lexical binding.&lt;/p&gt; &#xA;&lt;p&gt;** Use-package example :properties: :description: Configuration example based on use-package :custom_id: use-package-example &lt;span&gt;🔚&lt;/span&gt; #+cindex: use-package&lt;/p&gt; &#xA;&lt;p&gt;The Consult package only provides commands and does not add any keybindings or modes. Therefore the package is non-intrusive but requires a little setup effort. In order to use the Consult commands, it is advised to add keybindings for commands which are accessed often. Rarely used commands can be invoked via =M-x=. Feel free to only bind the commands you consider useful to your workflow. The configuration shown here relies on the =use-package= macro, which is a convenient tool to manage package configurations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where you can contribute additional configuration examples.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Example configuration for Consult (use-package consult ;; Replace bindings. Lazily loaded due by `use-package&#39;. :bind (;; C-c bindings (mode-specific-map) (&#34;C-c h&#34; . consult-history) (&#34;C-c m&#34; . consult-mode-command) (&#34;C-c k&#34; . consult-kmacro) ;; C-x bindings (ctl-x-map) (&#34;C-x M-:&#34; . consult-complex-command) ;; orig. repeat-complex-command (&#34;C-x b&#34; . consult-buffer) ;; orig. switch-to-buffer (&#34;C-x 4 b&#34; . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window (&#34;C-x 5 b&#34; . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame (&#34;C-x r b&#34; . consult-bookmark) ;; orig. bookmark-jump (&#34;C-x p b&#34; . consult-project-buffer) ;; orig. project-switch-to-buffer ;; Custom M-# bindings for fast register access (&#34;M-#&#34; . consult-register-load) (&#34;M-&#39;&#34; . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated) (&#34;C-M-#&#34; . consult-register) ;; Other custom bindings (&#34;M-y&#34; . consult-yank-pop) ;; orig. yank-pop (&#34;&#xA; &lt;help&gt;&#xA;   a&#34; . consult-apropos) ;; orig. apropos-command ;; M-g bindings (goto-map) (&#34;M-g e&#34; . consult-compile-error) (&#34;M-g f&#34; . consult-flymake) ;; Alternative: consult-flycheck (&#34;M-g g&#34; . consult-goto-line) ;; orig. goto-line (&#34;M-g M-g&#34; . consult-goto-line) ;; orig. goto-line (&#34;M-g o&#34; . consult-outline) ;; Alternative: consult-org-heading (&#34;M-g m&#34; . consult-mark) (&#34;M-g k&#34; . consult-global-mark) (&#34;M-g i&#34; . consult-imenu) (&#34;M-g I&#34; . consult-imenu-multi) ;; M-s bindings (search-map) (&#34;M-s d&#34; . consult-find) (&#34;M-s D&#34; . consult-locate) (&#34;M-s g&#34; . consult-grep) (&#34;M-s G&#34; . consult-git-grep) (&#34;M-s r&#34; . consult-ripgrep) (&#34;M-s l&#34; . consult-line) (&#34;M-s L&#34; . consult-line-multi) (&#34;M-s m&#34; . consult-multi-occur) (&#34;M-s k&#34; . consult-keep-lines) (&#34;M-s u&#34; . consult-focus-lines) ;; Isearch integration (&#34;M-s e&#34; . consult-isearch-history) :map isearch-mode-map (&#34;M-e&#34; . consult-isearch-history) ;; orig. isearch-edit-string (&#34;M-s e&#34; . consult-isearch-history) ;; orig. isearch-edit-string (&#34;M-s l&#34; . consult-line) ;; needed by consult-line to detect isearch (&#34;M-s L&#34; . consult-line-multi) ;; needed by consult-line to detect isearch ;; Minibuffer history :map minibuffer-local-map (&#34;M-s&#34; . consult-history) ;; orig. next-matching-history-element (&#34;M-r&#34; . consult-history)) ;; orig. previous-matching-history-element&#xA; &lt;/help&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Enable automatic preview at point in the *Completions* buffer. This is&#xA;;; relevant when you use the default completion UI.&#xA;:hook (completion-list-mode . consult-preview-at-point-mode)&#xA;&#xA;;; The :init configuration is always executed (Not lazy)&#xA;:init&#xA;&#xA;;; Optionally configure the register formatting. This improves the register&#xA;;; preview for `consult-register&#39;, `consult-register-load&#39;,&#xA;;; `consult-register-store&#39; and the Emacs built-ins.&#xA;(setq register-preview-delay 0.5&#xA;      register-preview-function #&#39;consult-register-format)&#xA;&#xA;;; Optionally tweak the register preview window.&#xA;;; This adds thin lines, sorting and hides the mode line of the window.&#xA;(advice-add #&#39;register-preview :override #&#39;consult-register-window)&#xA;&#xA;;; Use Consult to select xref locations with preview&#xA;(setq xref-show-xrefs-function #&#39;consult-xref&#xA;      xref-show-definitions-function #&#39;consult-xref)&#xA;&#xA;;; Configure other variables and modes in the :config section,&#xA;;; after lazily loading the package.&#xA;:config&#xA;&#xA;;; Optionally configure preview. The default value&#xA;;; is &#39;any, such that any key triggers the preview.&#xA;;; (setq consult-preview-key &#39;any)&#xA;;; (setq consult-preview-key (kbd &#34;M-.&#34;))&#xA;;; (setq consult-preview-key (list (kbd &#34;&amp;lt;S-down&amp;gt;&#34;) (kbd &#34;&amp;lt;S-up&amp;gt;&#34;)))&#xA;;; For some commands and buffer sources it is useful to configure the&#xA;;; :preview-key on a per-command basis using the `consult-customize&#39; macro.&#xA;(consult-customize&#xA; consult-theme&#xA; :preview-key &#39;(:debounce 0.2 any)&#xA; consult-ripgrep consult-git-grep consult-grep&#xA; consult-bookmark consult-recent-file consult-xref&#xA; consult--source-bookmark consult--source-recent-file&#xA; consult--source-project-recent-file&#xA; :preview-key (kbd &#34;M-.&#34;))&#xA;&#xA;;; Optionally configure the narrowing key.&#xA;;; Both &amp;lt; and C-+ work reasonably well.&#xA;(setq consult-narrow-key &#34;&amp;lt;&#34;) ;; (kbd &#34;C-+&#34;)&#xA;&#xA;;; Optionally make narrowing help available in the minibuffer.&#xA;;; You may want to use `embark-prefix-help-command&#39; or which-key instead.&#xA;;; (define-key consult-narrow-map (vconcat consult-narrow-key &#34;?&#34;) #&#39;consult-narrow-help)&#xA;&#xA;;; By default `consult-project-function&#39; uses `project-root&#39; from project.el.&#xA;;; Optionally configure a different project root function.&#xA;;; There are multiple reasonable alternatives to chose from.&#xA;;;;; 1. project.el (the default)&#xA;;; (setq consult-project-function #&#39;consult--default-project--function)&#xA;;;;; 2. projectile.el (projectile-project-root)&#xA;;; (autoload &#39;projectile-project-root &#34;projectile&#34;)&#xA;;; (setq consult-project-function (lambda (_) (projectile-project-root)))&#xA;;;;; 3. vc.el (vc-root-dir)&#xA;;; (setq consult-project-function (lambda (_) (vc-root-dir)))&#xA;;;;; 4. locate-dominating-file&#xA;;; (setq consult-project-function (lambda (_) (locate-dominating-file &#34;.&#34; &#34;.git&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Custom variables :properties: :description: Short description of all customization settings &lt;span&gt;🔚&lt;/span&gt; #+cindex: customization&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP:&lt;/em&gt; If you have [[https://github.com/minad/marginalia][Marginalia]] installed, type =M-x customize-variable RET ^consult= to see all Consult-specific customizable variables with their current values and abbreviated description. Alternatively, type =C-h a ^consult= to get an overview of all Consult variables and functions with their descriptions.&lt;/p&gt; &#xA;&lt;p&gt;| Variable | Description | |----------------------------------+-------------------------------------------------------| | consult-after-jump-hook | Functions to call after jumping to a location | | consult-async-input-debounce | Input debounce for asynchronous commands | | consult-async-input-throttle | Input throttle for asynchronous commands | | consult-async-min-input | Minimum numbers of letters needed for async process | | consult-async-refresh-delay | Refresh delay for asynchronous commands | | consult-async-split-style | Splitting style used for async commands | | consult-async-split-styles-alist | Available splitting styles used for async commands | | consult-bookmark-narrow | Narrowing configuration for =consult-bookmark= | | consult-buffer-filter | Filter for =consult-buffer= | | consult-buffer-sources | List of virtual buffer sources | | consult-find-args | Command line arguments for find | | consult-fontify-max-size | Buffers larger than this limit are not fontified | | consult-fontify-preserve | Preserve fontification for line-based commands. | | consult-git-grep-args | Command line arguments for git-grep | | consult-goto-line-numbers | Show line numbers for =consult-goto-line= | | consult-grep-max-columns | Maximal number of columns of the matching lines | | consult-grep-args | Command line arguments for grep | | consult-imenu-config | Mode-specific configuration for =consult-imenu= | | consult-line-numbers-widen | Show absolute line numbers when narrowing is active. | | consult-line-point-placement | Placement of the point used by =consult-line= | | consult-line-start-from-top | Start the =consult-line= search from the top | | consult-locate-args | Command line arguments for locate | | consult-man-args | Command line arguments for man | | consult-mode-command-filter | Filter for =consult-mode-command= | | consult-mode-histories | Mode-specific history variables | | consult-narrow-key | Narrowing prefix key during completion | | consult-preview-key | Keys which triggers preview | | consult-preview-allowed-hooks | List of =find-file= hooks to enable during preview | | consult-preview-max-count | Maximum number of files to keep open during preview | | consult-preview-max-size | Files larger than this size are not previewed | | consult-preview-raw-size | Files larger than this size are previewed in raw form | | consult-preview-variables | Alist of variables to bind during preview | | consult-project-buffer-sources | List of virtual project buffer sources | | consult-project-function | Function which returns current project root | | consult-register-prefix | Prefix string for register keys during completion | | consult-ripgrep-args | Command line arguments for ripgrep | | consult-themes | List of themes to be presented for selection | | consult-widen-key | Widening key during completion |&lt;/p&gt; &#xA;&lt;p&gt;** Fine-tuning of individual commands :properties: :alt_title: Fine-tuning :description: Fine-grained configuration for special requirements &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Consult supports fine-grained customization of individual commands. This configuration feature exists for experienced users with special requirements. There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where we collect further configuration examples.&lt;/p&gt; &#xA;&lt;p&gt;Commands and buffer sources allow flexible, individual customization by using the =consult-customize= macro. You can override any option passed to the internal =consult--read= API. The [[https://github.com/minad/consult/wiki][Consult wiki]] already contains a numerous useful configuration examples. Note that since =consult--read= is part of the internal API, options could be removed, replaced or renamed in future versions of the package.&lt;/p&gt; &#xA;&lt;p&gt;Useful options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:prompt= set the prompt string&lt;/li&gt; &#xA; &lt;li&gt;=:preview-key= set the preview key, default is =consult-preview-key=&lt;/li&gt; &#xA; &lt;li&gt;=:initial= set the initial input&lt;/li&gt; &#xA; &lt;li&gt;=:default= set the default value&lt;/li&gt; &#xA; &lt;li&gt;=:history= set the history variable symbol&lt;/li&gt; &#xA; &lt;li&gt;=:add-history= add items to the future history, for example symbol at point&lt;/li&gt; &#xA; &lt;li&gt;=:sort= enable or disable sorting&lt;/li&gt; &#xA; &lt;li&gt;=:group= set to nil to disable candidate grouping and titles.&lt;/li&gt; &#xA; &lt;li&gt;=:inherit-input-method= set to non-nil to inherit the input method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize ;; Disable preview for &lt;code&gt;consult-theme&#39; completely. consult-theme :preview-key nil ;; Set preview for &lt;/code&gt;consult-buffer&#39; to key &lt;code&gt;M-.&#39; consult-buffer :preview-key (kbd &#34;M-.&#34;) ;; For &lt;/code&gt;consult-line&#39; change the prompt and specify multiple preview ;; keybindings. Note that you should bind &#xA; &lt;s-up&gt;&#xA;   and &#xA;  &lt;s-down&gt;&#xA;    in the ;; &#xA;   &lt;code&gt;minibuffer-local-completion-map&#39; or &lt;/code&gt;vertico-map&#39; to the commands which ;; select the previous or next candidate. consult-line :prompt &#34;Search: &#34; :preview-key (list (kbd &#34;&#xA;   &lt;s-down&gt;&#xA;    &#34;) (kbd &#34;&#xA;    &lt;s-up&gt;&#xA;     &#34;))) #+end_src&#xA;    &lt;/s-up&gt;&#xA;   &lt;/s-down&gt;&#xA;  &lt;/s-down&gt;&#xA; &lt;/s-up&gt;&lt;/p&gt; &#xA;&lt;p&gt;The configuration values are evaluated at runtime, just before the completion session is started. Therefore you can use for example =thing-at-point= to adjust the initial input or the future hitory.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult-line :add-history (seq-some #&#39;thing-at-point &#39;(region symbol)))&lt;/p&gt; &#xA;&lt;p&gt;(defalias &#39;consult-line-thing-at-point &#39;consult-line)&lt;/p&gt; &#xA;&lt;p&gt;(consult-customize consult-line-thing-at-point :initial (thing-at-point &#39;symbol)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Generally it is possible to modify commands for your individual needs by the following techniques:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use =consult-customize= in order to change the command or source settings.&lt;/li&gt; &#xA; &lt;li&gt;Create your own wrapper function which passes modified arguments to the Consult functions.&lt;/li&gt; &#xA; &lt;li&gt;Create your own buffer [[#multiple-sources][multi sources]] for =consult-buffer=.&lt;/li&gt; &#xA; &lt;li&gt;Create advices to modify some internal behavior.&lt;/li&gt; &#xA; &lt;li&gt;Write or propose a patch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recommended packages :properties: :description: Related packages recommended for installation &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I use and recommend this combination of packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;consult: This package&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico][vertico]]: Fast and minimal vertical completion system&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][marginalia]]: Annotations for the completion candidates&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][embark and embark-consult]]: Action commands, which can act on the completion candidates&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][orderless]]: Completion style which offers flexible candidate filtering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There exist many other fine completion UIs beside Vertico, which are supported by Consult. Give them a try and find out which interaction model fits best for you!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The builtin completion UI, which pops up the =&lt;em&gt;Completions&lt;/em&gt;= buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][mct by Protesilaos Stavrou]]: Minibuffer and Completions in Tandem, which builds on the default completion UI.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/raxod502/selectrum][selectrum by Radon Rosborough]]: Alternative vertical completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/icomplete-vertical][icomplete-vertical by Omar Antolín Camarena]]: Vertical completion system based on Icomplete. Icomplete-vertical is only needed for Emacs 27, built-in on Emacs 28.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can integrated Consult with special programs or with other packages in the wider Emacs ecosystem. You may want to install some of theses packages depending on your preferences and requirements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/yadex205/consult-ag][consult-ag]]: Support for the [[https://github.com/ggreer/the_silver_searcher][Silver Searcher]] in the style of =consult-grep=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-company][consult-company]]: Completion at point using the [[https://github.com/company-mode/company-mode][Company]] backends.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink/consult-dir][consult-dir]]: Directory jumper using Consult multi sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-eglot][consult-eglot]]: Integration with Eglot (LSP client).&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult-flycheck][consult-flycheck]]: Additional Flycheck integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]]: Additional Flyspell integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rcj/consult-ls-git][consult-ls-git]]: List files from git via Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/gagbo/consult-lsp][consult-lsp]]: Integration with Lsp-mode (LSP client).&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/consult-notmuch][consult-notmuch]]: Access the [[https://notmuchmail.org/][Notmuch]] email system using Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jgru/consult-org-roam][consult-org-roam]]: Integration with [[https://github.com/org-roam/org-roam][Org-roam]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler/consult-project-extra/][consult-project-extra]]: Additional project.el extras and buffer sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon/consult-projectile/][consult-projectile]]: Additional [[https://github.com/bbatsov/projectile][Projectile]] integration and buffer sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/consult-recoll][consult-recoll]]: Access the [[https://www.lesbonscomptes.com/recoll/][Recoll]] desktop full-text search using Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/espotify][consult-spotify]]: Access the Spotify API and control your local music player.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-yasnippet][consult-yasnippet]]: Integration with Yasnippet.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/affe][affe]]: Asynchronous Fuzzy Finder for Emacs based on Consult.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not directly related to Consult, but maybe still of interest are the following packages. These packages should work well with Consult, follow a similar spirit or offer functionality based on &lt;del&gt;completing-read&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu][corfu]]: Completion systems for =completion-at-point= using small popups (Alternative to [[https://github.com/company-mode/company-mode][Company]]).&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/cape][cape]]: Completion At Point Extensions, which can be used with =consult-completion-in-region= and [[https://github.com/minad/corfu][Corfu]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/bookmark-view][bookmark-view]]: Store window configuration as bookmarks, possible integration with =consult-buffer=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bdarcus/citar][citar]]: Versatile package for citation insertion and bibliography management.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/astoff/devdocs.el][devdocs]]: Emacs viewer for [[https://devdocs.io/][DevDocs]] with a convenient completion interface.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/d12frosted/flyspell-correct][flyspell-correct]]: Apply spelling corrections by selecting via =completing-read=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]: Editing of grep buffers, use together with =consult-grep= via =embark-export=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]: Icons for the completion UI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that all packages are independent and can be exchanged with alternative components, since there exist no hard dependencies. Furthermore it is possible to get started with only default completion and Consult and add more components later to the mix. For example you can omit Marginalia if you don&#39;t need annotations. I highly recommend the Embark package, but in order to familarize yourself with the other components, you can first start without it - or you could use with Embark right away and add the other components later on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug reports :properties: :description: How to create reproducible bug reports &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you find a bug or suspect that there is a problem with Consult, please carry out the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Update all the relevant packages to the newest version&lt;/em&gt;. This includes Consult, Vertico or other completion UIs, Marginalia, Embark and Orderless.&lt;/li&gt; &#xA; &lt;li&gt;Either use the default completion UI or ensure that exactly one of =vertico-mode=, =mct-mode=, =selectrum-mode=, or =icomplete-mode= is enabled. The unsupported modes =ivy-mode=, =helm-mode= and =ido-ubiquitous-mode= must be disabled.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the =completion-styles= variable is properly configured. Try to set =completion-styles= to a list including =substring= or =orderless=.&lt;/li&gt; &#xA; &lt;li&gt;Try to reproduce the issue by starting a bare bone Emacs instance with =emacs -Q= on the command line. Execute the following minimal code snippets in the scratch buffer. This way we can exclude side effects due to configuration settings. If other packages are relevant to reproduce the issue, include them in the minimal configuration snippet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Minimal setup with Vertico for =emacs -Q=: #+begin_src emacs-lisp (package-initialize) (require &#39;consult) (require &#39;vertico) (vertico-mode) (setq completion-styles &#39;(substring basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Minimal setup with the default completion system for =emacs -Q=: #+begin_src emacs-lisp (package-initialize) (require &#39;consult) (setq completion-styles &#39;(substring basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Please provide the necessary important information with your bug report:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The minimal configuration snippet used to reproduce the issue.&lt;/li&gt; &#xA; &lt;li&gt;Your completion UI (Default completion, Vertico, Mct, Selectrum or Icomplete).&lt;/li&gt; &#xA; &lt;li&gt;A stack trace in case the bug triggers an exception.&lt;/li&gt; &#xA; &lt;li&gt;Your Emacs version, since bugs may be fixed or introduced in newer versions.&lt;/li&gt; &#xA; &lt;li&gt;Your operating system, since Emacs behavior varies between Linux, Mac and Windows.&lt;/li&gt; &#xA; &lt;li&gt;The package manager, e.g., straight.el or package.el, used to install the Emacs packages, in order to exclude update issues. Did you install Consult as part of the Doom or Spacemacs Emacs distributions?&lt;/li&gt; &#xA; &lt;li&gt;Do you use Evil or other packages which apply deep changes? Consult does not provide Evil integration out of the box, but there is some support in [[https://github.com/emacs-evil/evil-collection][evil-collection]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When evaluating Consult-related code snippets you should enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]]. Consult often relies on lambdas and lexical closures.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions :properties: :description: Feature requests and pull requests &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult is a community effort, please participate in the discussions. Contributions are welcome, but you may want to discuss potential contributions first. Since this package is part of [[http://elpa.gnu.org/packages/consult.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;p&gt;If you have a proposal, take a look at the [[https://github.com/consult/issues][Consult issue tracker]] and the [[https://github.com/minad/consult/issues/6][Consult wishlist]]. There have been many prior feature discussions. Please search through the issue tracker, maybe your issue or feature request has already been discussed. You can contribute to the [[https://github.com/minad/consult/wiki][Consult wiki]], in case you want to share small configuration or command snippets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgments :properties: :description: Contributors and Sources of Inspiration &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You probably guessed from the name that this package took inspiration from [[https://github.com/abo-abo/swiper#counsel][Counsel]] by Oleh Krehel. Some of the Consult commands originated in the Counsel package or the [[https://github.com/raxod502/selectrum/wiki/Useful-Commands][Selectrum wiki]]. The commands have been rewritten and greatly enhanced in comparison to the original versions.&lt;/p&gt; &#xA;&lt;p&gt;Code contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/][Omar Antolín Camarena]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/s-kostyaev/][Sergey Kostyaev]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/okamsn/][okamsn]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tomfitzhenry/][Tom Fitzhenry]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jakanakaevangeli][jakanakaevangeli]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://hg.serna.eu][Iñigo Serna]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/aspiers/][Adam Spiers]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/omar-polo][Omar Polo]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/astoff][Augusto Stoffel]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/noctuid][Fox Kiester]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tecosaur][Tecosaur]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohamed-abdelnour][Mohamed Abdelnour]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/thisirs][Sylvain Rousseau]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][J.D. Smith]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advice and useful discussions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/][Omar Antolín Camarena]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://protesilaos.com][Protesilaos Stavrou]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/purcell/][Steve Purcell]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/alphapapa/][Adam Porter]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/manuel-uberti/][Manuel Uberti]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tomfitzhenry/][Tom Fitzhenry]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/hmelman/][Howard Melman]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/monnier/][Stefan Monnier]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/dgutov/][Dmitry Gutov]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat][Itai Y. Efrat]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bdarcus][Bruce d&#39;Arcus]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][J.D. Smith]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler][Enrique Kessler Martínez]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Authors of supplementary =consult-*= packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/][Jose A Ortega Ruiz]] ([[https://codeberg.org/jao/consult-notmuch][consult-notmuch]], [[https://codeberg.org/jao/consult-recoll][consult-recoll]], [[https://codeberg.org/jao/espotify][consult-spotify]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/gagbo/][Gerry Agbobada]] ([[https://github.com/gagbo/consult-lsp][consult-lsp]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink][Karthik Chikmagalur]] ([[https://github.com/karthink/consult-dir][consult-dir]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale][Mohsin Kaleem]] ([[https://github.com/mohkale/consult-company][consult-company]], [[https://github.com/mohkale/consult-eglot][consult-eglot]], [[https://github.com/mohkale/consult-yasnippet][consult-yasnippet]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon][Marco Pawłowski]] ([[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]], [[https://gitlab.com/OlMon/consult-projectile][consult-projectile]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler][Enrique Kessler Martínez]] ([[https://github.com/Qkessler/consult-project-extra][consult-project-extra]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jgru][Jan Gru]] ([[https://github.com/jgru/consult-org-roam][consult-org-roam]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/yadex205][Kanon Kakuno]] ([[https://github.com/yadex205/consult-ag][consult-ag]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rcj][Robin Joy]] ([[https://github.com/rcj/consult-ls-git][consult-ls-git]])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html: &amp;lt;!--&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Indices :properties: :description: Indices of concepts and functions &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Function index :properties: :description: List of all Consult commands :index: fn &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Concept index :properties: :description: List of all Consult-specific concepts :index: cp &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+html: --&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>org-roam/org-roam</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/org-roam/org-roam</id>
    <link href="https://github.com/org-roam/org-roam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rudimentary Roam replica with Org-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Org-roam &lt;a href=&#34;https://github.com/org-roam/org-roam/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/org-roam/org-roam&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/org-roam&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/org-roam-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;img src=&#34;https://www.orgroam.com/img/logo.svg?sanitize=true&#34; align=&#34;right&#34; alt=&#34;Org-roam Logo&#34; width=&#34;240&#34;&gt; &#xA;&lt;p&gt;Org-roam is a plain-text knowledge management system. It brings some of &lt;a href=&#34;https://www.roamresearch.com/&#34;&gt;Roam&#39;s&lt;/a&gt; more powerful features into the &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org-mode&lt;/a&gt; ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Private and Secure&lt;/strong&gt;: Edit your personal wiki completely offline, entirely in your control. Encrypt your notes with GPG. Take lasting notes in plain-text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Networked Thought&lt;/strong&gt;: Connect notes and thoughts together with ease using backlinks. Discover surprising and previously unseen connections in your notes with the built-in graph visualization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible and Powerful&lt;/strong&gt;: Leverage Emacs&#39; fantastic text-editing interface, and the mature Emacs and Org-mode ecosystem of packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and Open Source&lt;/strong&gt;: Org-roam is licensed under the GNU General Public License version 3 or later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://www.orgroam.com/img/screenshot.png&#34; alt=&#34;Org-roam Screenshot&#34; width=&#34;738&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.orgroam.com/manual.html&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.orgroam.com/manual.html#FAQ&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/org-roam/org-roam/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Down below you will find basic installation instructions for how to quickly install &lt;code&gt;org-roam&lt;/code&gt; using various environments for various purposes. For more detailed information, please read the &lt;a href=&#34;https://www.orgroam.com/manual.html&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;You can install &lt;code&gt;org-roam&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt; using &lt;code&gt;package.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;M-x package-install RET org-roam RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;Installation from MELPA or MELPA Stable using &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight t&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you need to install the package directly from the source repository, instead of from MELPA, the next sample shows how to do so:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight (:host github :repo &#34;org-roam/org-roam&#34;&#xA;             :files (:defaults &#34;extensions/*&#34;))&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you plan to use your own local fork for the development and contribution, the next sample will get you there:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight (:local-repo &#34;/path/to/org-roam-fork&#34;&#xA;             :files (:defaults &#34;extensions/*&#34;)&#xA;             :build (:not compile))&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Using Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;Doom&#39;s &lt;code&gt;:lang org&lt;/code&gt; module comes with support for &lt;code&gt;org-roam&lt;/code&gt;, but it&#39;s not enabled by default. To activate it pass &lt;code&gt;+roam2&lt;/code&gt; flag to &lt;code&gt;org&lt;/code&gt; module in your &lt;code&gt;$DOOMDIR/init.el&lt;/code&gt; (e.g. &lt;code&gt;(org +roam2)&lt;/code&gt;), save the file and run &lt;code&gt;doom sync -u&lt;/code&gt; in your shell.&lt;/p&gt; &#xA; &lt;p&gt;To provide better stability, Doom pins the package to a specific commit. If you need to unpin it &lt;em&gt;(not recommended doing that, request Doom to bump the package instead)&lt;/em&gt; use the next in your &lt;code&gt;packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(unpin! org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If for some reasons you want to use a different recipe for &lt;code&gt;org-roam&lt;/code&gt;, you can use the next form in your &lt;code&gt;packages.el&lt;/code&gt; to install the package from a recipe repository (e.g. MELPA):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can pass &lt;code&gt;:pin &#34;commit hash&#34;&lt;/code&gt; to pin the package to a specific commit.&lt;/p&gt; &#xA; &lt;p&gt;With the next sample you can install the package directly from the source repository:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam&#xA;  :recipe (:host github :repo &#34;org-roam/org-roam&#34;&#xA;           :files (:defaults &#34;extensions/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And if you plan to use your own local fork for the development or contribution, the next sample will get you there:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam&#xA;  :recipe (:local-repo &#34;/path/to/org-roam-fork&#34;&#xA;           :files (:defaults &#34;extensions/*&#34;)&#xA;           :build (:not compile)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Without a package manager&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;To install the package without using a package manager you have the next two options:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install the package by cloning it with &lt;code&gt;git&lt;/code&gt; from the source repository.&lt;/li&gt; &#xA;  &lt;li&gt;Or install the package by downloading the latest &lt;a href=&#34;https://github.com/org-roam/org-roam/releases&#34;&gt;release version&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;In both of the cases you will need to ensure that you have all the required dependencies. These include:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;dash&lt;/li&gt; &#xA;  &lt;li&gt;f&lt;/li&gt; &#xA;  &lt;li&gt;s&lt;/li&gt; &#xA;  &lt;li&gt;org (9.4 is the minimal required version!)&lt;/li&gt; &#xA;  &lt;li&gt;emacsql&lt;/li&gt; &#xA;  &lt;li&gt;emacsql-sqlite&lt;/li&gt; &#xA;  &lt;li&gt;magit-section&lt;/li&gt; &#xA;  &lt;li&gt;filenotify-recursive&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;After installing the package, you will need to properly setup &lt;code&gt;load-path&lt;/code&gt; to the package:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/org-roam/&#34;)&#xA;(add-to-list &#39;load-path &#34;/path/to-org-roam/extensions/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After which you should be able to resolve &lt;code&gt;(require &#39;org-roam)&lt;/code&gt; call without any problems.&lt;/p&gt; &#xA; &lt;p&gt;Org-roam also comes with &lt;code&gt;.texi&lt;/code&gt; files to integrate with Emacs&#39; built-in Info system. Read the manual to find more details for how to install them manually.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a very basic sample for configuration of &lt;code&gt;org-roam&lt;/code&gt; using &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :ensure t&#xA;  :custom&#xA;  (org-roam-directory (file-truename &#34;/path/to/org-files/&#34;))&#xA;  :bind ((&#34;C-c n l&#34; . org-roam-buffer-toggle)&#xA;         (&#34;C-c n f&#34; . org-roam-node-find)&#xA;         (&#34;C-c n g&#34; . org-roam-graph)&#xA;         (&#34;C-c n i&#34; . org-roam-node-insert)&#xA;         (&#34;C-c n c&#34; . org-roam-capture)&#xA;         ;; Dailies&#xA;         (&#34;C-c n j&#34; . org-roam-dailies-capture-today))&#xA;  :config&#xA;  ;; If you&#39;re using a vertical completion framework, you might want a more informative completion interface&#xA;  (setq org-roam-node-display-template (concat &#34;${title:*} &#34; (propertize &#34;${tags:10}&#34; &#39;face &#39;org-tag)))&#xA;  (org-roam-db-autosync-mode)&#xA;  ;; If using org-roam-protocol&#xA;  (require &#39;org-roam-protocol))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;file-truename&lt;/code&gt; function is only necessary when you use symbolic link to &lt;code&gt;org-roam-directory&lt;/code&gt;. Org-roam won&#39;t automatically resolve symbolic link to the directory.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/daviwil&#34;&gt;David Wilson&lt;/a&gt; of &lt;a href=&#34;https://www.youtube.com/c/SystemCrafters&#34;&gt;System Crafters&lt;/a&gt; has produced an introductory video that covers the basic commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=AyhPmypHDEw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/AyhPmypHDEw/0.jpg&#34; alt=&#34;Getting Started with Org Roam - Build a Second Brain in Emacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;Before creating a new topic/issue, please be mindful of our time and ensure that it has not already been addressed on &lt;a href=&#34;https://github.com/org-roam/org-roam/issues&#34;&gt;GitHub&lt;/a&gt; or on &lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are new to Emacs and have problem setting up Org-roam, please ask your question on &lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack, channel #how-do-i&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For quick questions, please ask them on &lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack, channel #troubleshooting&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If something is not working as it should, or if you would like to suggest a new feature, please &lt;a href=&#34;https://github.com/org-roam/org-roam/issues&#34;&gt;create a new issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you have questions about your workflow with the slip-box method, please find a relevant topic on &lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;, or create a new one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Knowledge Bases using Org-roam&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://braindump.jethro.dev/&#34;&gt;Jethro Kuan&lt;/a&gt; (&lt;a href=&#34;https://github.com/jethrokuan/braindump/tree/master/org&#34;&gt;Source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alexeyshmalko.com/&#34;&gt;Alexey Shmalko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sidhartharya.github.io/braindump/index.html&#34;&gt;Sidharth Arya&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs and suggest new feature use the issue tracker. If you have some code which you would like to be merged, then open a pull request. Please also see &lt;a href=&#34;https://raw.githubusercontent.com/org-roam/org-roam/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Jethro Kuan and contributors. Distributed under the GNU General Public License, Version 3.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zbelial/lspce</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/zbelial/lspce</id>
    <link href="https://github.com/zbelial/lspce" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP Client for Emacs implemented as a module using rust.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+STARTUP: overview #+STARTUP: hidestars #+STARTUP: hideblocks&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redguardtoo/emacs.d</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/redguardtoo/emacs.d</id>
    <link href="https://github.com/redguardtoo/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and robust Emacs setup.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;A fast and robust Emacs setup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/redguardtoo/emacs.d/actions/workflows/test.yml][https://github.com/redguardtoo/emacs.d/actions/workflows/test.yml/badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast&lt;/li&gt; &#xA; &lt;li&gt;Robust. Packages could be installed without network&lt;/li&gt; &#xA; &lt;li&gt;Support Windows. Find&amp;amp;Grep needs only minimum setup on Windows&lt;/li&gt; &#xA; &lt;li&gt;Tested with Emacs 26.3, 27.2, 28.1 on Linux/Windows10/Cygwin/macOS/WSL(Windows Subsystem for Linux)&lt;/li&gt; &#xA; &lt;li&gt;Vanilla key bindings and directory layout is respected&lt;/li&gt; &#xA; &lt;li&gt;Works in [[https://packages.debian.org/emacs-nox][emacs-nox]] and [[http://www.putty.org/][PuTTY]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:demo.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Content :noexport:TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#a-fast-and-robust-emacs-setup][A fast and robust Emacs setup]]&lt;/li&gt; &#xA; &lt;li&gt;[[#checklist][Checklist]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#install-in-normal-way][Install in normal way]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#install-stable-version-optional][Install stable version (OPTIONAL)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#install-everything-in-one-step-optional][Install everything in one step (OPTIONAL)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#third-party-programs-optional][Third party programs (OPTIONAL)]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#tutorial-optional][Tutorial (OPTIONAL)]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#tutorial][Tutorial]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-mode-tutorial][Evil-mode tutorial]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#methodology][Methodology]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#quick-start][Quick start]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#better-runtime-performance][Better runtime performance]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#key-bindings][Key bindings]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#computers-with-smaller-memory][Computers with smaller memory]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#vim-vs-emacs][Vim vs Emacs]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#backup-packages][Backup packages]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#hardcore-debug-technique][Hardcore debug technique]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#spell-check-code][Spell check code]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#lock-packages][Lock packages]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#how-to-install-new-packages][How to install new packages?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#git-blame-current-line][Git blame current line]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#saveload-windows-layout][Save/Load windows layout]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#use-this-configuration-as-merge-tool-for-git][Use this configuration as merge tool for Git]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#default-terminal-shell][Default terminal shell]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#override-default-setup][Override default setup]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#code-navigation][Code navigation]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#code-auto-completion][Code auto-completion]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#color-theme][Color theme]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#true-colors-in-terminal-emacs][True colors in terminal Emacs]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#grepreplace-text-in-project][Grep/Replace text in project]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#hydraswipercounselivy][Hydra/Swiper/Counsel/Ivy]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#set-auto-mode-alist][Set &#34;auto-mode-alist&#34;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#git-gutter][git-gutter]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#setup-fonts-in-gui-emacs][Setup fonts in GUI Emacs]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#synchronize-setup-with-git][Synchronize setup with Git]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#indentation][Indentation]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#editing-lisp][Editing Lisp]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#use-smart-mode-line-or-powerline][Use smart-mode-line or powerline?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#key-bindings-dont-work][Key bindings don&#39;t work?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#org-mode][Org-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#macos-user][macOS user?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#customize-global-variables][Customize global variables]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#opensave-files-with-counselivy][Open/Save files with Counsel/Ivy]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#windows][Windows]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#yasnippet][Yasnippet]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#non-english-users][Non-English users]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#behind-corporate-firewall][Behind corporate firewall]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#network-is-blocked][Network is blocked]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#email][Email]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#cannot-download-packages][Cannot download packages?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#use-packages-on-gnu-elpa][Use packages on GNU ELPA]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#use-flycheck-to-syntax-check-code][Use flycheck to syntax check code]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#disable-vim-key-bindings][Disable Vim key bindings]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-setup][Evil setup]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#chinese-input-method-editor][Chinese Input Method Editor]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#install-multiple-versions-of-emacs][Install multiple versions of Emacs]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#change-time-locale][Change Time Locale]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#directory-structure][Directory structure]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#run-the-unit-test-before-git-commit][Run the unit test before git commit]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#python-environment][Python environment]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#set-up-lsp-mode][Set up lsp-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#enable-typewriter-sounds-when-typing][Enable typewriter sounds when typing]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#pdf-tools][pdf-tools]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#support-legacy-emacs-versions][Support legacy Emacs versions]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#emacs-25][Emacs 25]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#emacs-244-and-245][Emacs 24.4 and 24.5]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#emacs-243][Emacs 24.3]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#emacs-23][Emacs 23]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#tips][Tips]]&lt;/li&gt; &#xA; &lt;li&gt;[[#report-bug][Report bug]]&lt;/li&gt; &#xA; &lt;li&gt;[[#license][License]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checklist&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 26.1 or higher version is required&lt;/li&gt; &#xA; &lt;li&gt;Please read FAQ to disable [[http://www.vim.org][Vim]] key bindings&lt;/li&gt; &#xA; &lt;li&gt;Please read section &#34;Key bindings&#34; to learn key bindings&lt;/li&gt; &#xA; &lt;li&gt;Windows users had better download the version with dependencies bundled. For example, download &#34;emacs-26.3-x86_64.zip&#34; instead of &#34;emacs-26.2-x86_64-no-deps.zip&#34;&lt;/li&gt; &#xA; &lt;li&gt;Unstable packages from [[http://melpa.org][MELPA]] are &lt;em&gt;invisible&lt;/em&gt; but stable packages from [[https://stable.melpa.org][MELPA Stable]] are visible. Please modify variable =melpa-include-packages= in =lisp/init-elpa.el= to install unstable packages&lt;/li&gt; &#xA; &lt;li&gt;Other issues are covered in FAQ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation Please remove =&lt;del&gt;/.emacs= first. =&lt;/del&gt;= means [[https://en.wikipedia.org/wiki/Home_directory][Home directory]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most users need follow the section &#34;Install in normal way&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Section &#34;Install stable version&#34; is useful &lt;em&gt;if and only if&lt;/em&gt;,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You don&#39;t have network access&lt;/li&gt; &#xA; &lt;li&gt;You have never used any command line program&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Install in normal way There are two ways to install this setup (I recommend the first way):&lt;/p&gt; &#xA;&lt;p&gt;First way is to download [[https://github.com/redguardtoo/emacs.d/archive/master.zip][latest setup]] and extract its content into =~/.emacs.d=, OR run command =cd ~; git clone &lt;a href=&#34;https://github.com/redguardtoo/emacs.d.git&#34;&gt;https://github.com/redguardtoo/emacs.d.git&lt;/a&gt; .emacs.d= in shell.&lt;/p&gt; &#xA;&lt;p&gt;Second way is to use [[https://github.com/redguardtoo/emacs.d/archive/stable.zip][stable setup]], or run command =cd ~; git clone &lt;a href=&#34;https://github.com/redguardtoo/emacs.d.git&#34;&gt;https://github.com/redguardtoo/emacs.d.git&lt;/a&gt; .emacs.d; cd .emacs.d; git reset --hard stable= in shell.&lt;/p&gt; &#xA;&lt;p&gt;By default, packages are installed automatically during Emacs startup.&lt;/p&gt; &#xA;&lt;p&gt;Someone reported that package repository [[http://melpa.org]] is not responsive in China.&lt;/p&gt; &#xA;&lt;p&gt;No worries. You could answer &#34;YES&#34; to the question &#34;Switch to faster package repositories in China temporarily?&#34; after firing Emacs. Please note after startup you could change variable =package-archives= in =init-elpa.el= to permanently switch to Chinese repositories. ** Install stable version (OPTIONAL)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download [[https://github.com/redguardtoo/emacs.d/archive/stable.zip]]&lt;/li&gt; &#xA; &lt;li&gt;Extract its content into empty directory =~/.emacs.d=&lt;/li&gt; &#xA; &lt;li&gt;Download [[https://github.com/redguardtoo/myelpa/archive/stable.zip]]&lt;/li&gt; &#xA; &lt;li&gt;Extract the zip somewhere, say =~/projs/myelpa=&lt;/li&gt; &#xA; &lt;li&gt;Make sure a file named =archive-contents= exists in =~/projs/myelpa=&lt;/li&gt; &#xA; &lt;li&gt;Uncomment the line containing &#34;myelpa&#34; in =lisp/init-elpa.el=. Path =~/myelpa/= could be modified.&lt;/li&gt; &#xA; &lt;li&gt;Start Emacs now!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you are using local package repository =~/myelpa=.&lt;/p&gt; &#xA;&lt;p&gt;You can switch to online repositories like &lt;a href=&#34;http://elpa.gnu.org&#34;&gt;http://elpa.gnu.org&lt;/a&gt; or &lt;a href=&#34;http://melpa.org&#34;&gt;http://melpa.org&lt;/a&gt; by modifying =lisp/init-elpa.el=. ** Install everything in one step (OPTIONAL) Download content of [[https://github.com/redguardtoo/my-emacs.d-snapshot]] into =~/.emacs.d=. That&#39;s it.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not recommended for daily usage because the third party packages are not optimized for latest Emacs. ** Third party programs (OPTIONAL) *** Install Most command line programs can be installed through =default package manager=.&lt;/p&gt; &#xA;&lt;p&gt;=Default package manager= could be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/transcode-open/apt-cyg][apt-cyg]] at Cygwin&lt;/li&gt; &#xA; &lt;li&gt;package manager of [[https://www.msys2.org/docs/package-management/][MSYS2]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mxcl/homebrew][homebrew]] at macOS&lt;/li&gt; &#xA; &lt;li&gt;any package manager at Linux (=apt= on Debian/Ubuntu, =yum= on Redhat, =pacman= on Arch, =emerge= on Gentoo ...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some package managers allow you to install the program for current user. For example, python package manager =pip= has the option &#34;[[https://packaging.python.org/tutorials/installing-packages/][--user]]&#34;. *** List of programs These programs are &lt;em&gt;OPTIONAL&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please ignore error message related to command line programs. For example, if =aspell= and =hunspell= are not installed, you can ignore all the flyspell error messages. **** fortune-zh or fortune Show ancient Chinese poem or quotes from random sources. Please note you can&#39;t install =fortune-zh= through [[https://brew.sh/][homebrew]] on macOS.&lt;/p&gt; &#xA;&lt;p&gt;But there is a simple workaround:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install fortune&lt;/li&gt; &#xA; &lt;li&gt;Download =fortune-zh= code from [[https://github.com/debiancn/fortune-zh]]&lt;/li&gt; &#xA; &lt;li&gt;Extract code and run =make= in its folder&lt;/li&gt; &#xA; &lt;li&gt;copy data files and the script named =fortune-zh= into corresponding folders which =fortune= is using. You may need edit the file =fortune-zh= before copying **** w3m (web browser)&lt;/li&gt; &#xA; &lt;li&gt;Required by =emacs-w3m=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can insert =(setq mm-text-html-renderer &#39;w3m)= in =~/.gnus.el= to force HTML mail be rendered by =w3m= instead of the default HTML rendering engine =shr=.&lt;/p&gt; &#xA;&lt;p&gt;=shr= supports colored text while =w3m= not.&lt;/p&gt; &#xA;&lt;p&gt;But my =w3m= based utilities can open video/audio/image with the help of =w3m=. **** aspell or hunspell&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Required by =flyspell= **** xmlstarlet or xml&lt;/li&gt; &#xA; &lt;li&gt;Required by =lazyflymake= for HTML syntax check. **** identify from [[http://www.imagemagick.org/][ImageMagick]]&lt;/li&gt; &#xA; &lt;li&gt;Required by =org-mode= to export org file to odt contain images **** zip and unzip&lt;/li&gt; &#xA; &lt;li&gt;Required by =org-mode= to export org file to odt file **** xsel or xclip&lt;/li&gt; &#xA; &lt;li&gt;Required by my clipboard command =copy-to-x-clipboard= and =paste-from-x-clipboard= under Linux **** [[http://www.cmake.org][CMake]]&lt;/li&gt; &#xA; &lt;li&gt;Required by =cpputils-cmake=&lt;/li&gt; &#xA; &lt;li&gt;Please use [[http://www.cmake.org/Wiki/CMake_FAQ][out-of-source build tree]] when using CMake **** [[http://clang.llvm.org][Clang]]&lt;/li&gt; &#xA; &lt;li&gt;Required by =cpputils-cmake=, =company-clang= from [[https://github.com/company-mode/company-mode][company-mode]]&lt;/li&gt; &#xA; &lt;li&gt;If you use =cpputils-cmake= and =cmake=, =cpputils-cmake= will do all the setup for you. You need not read next item! But please spend &lt;em&gt;a few minutes to learn the basics of cmake&lt;/em&gt;! There is a one minute step-by-step-guide in [[https://github.com/redguardtoo/cpputils-cmake][README of cpputils-cmake]] to teach you how to use cmake.&lt;/li&gt; &#xA; &lt;li&gt;If you use =company-clang=, add =(setq company-clang-arguments &#39;(&#34;-I/example1/dir&#34; &#34;-I/example2/dir&#34;))= into =init.el= **** Pandoc&lt;/li&gt; &#xA; &lt;li&gt;Required by =markdown-preview= from =markdown-mode= **** [[https://ctags.io/][Universal Ctags (recommended)]] or [[http://ctags.sourceforge.net][Exuberant CTags]]&lt;/li&gt; &#xA; &lt;li&gt;It creates tags file for code navigation and code completion&lt;/li&gt; &#xA; &lt;li&gt;Required by many tags related packages (=xref=, =counsel-etags=, =company-ctags= from =company-mode=, etc)&lt;/li&gt; &#xA; &lt;li&gt;See [[http://blog.binchen.org/?p=1057][How to use ctags in Emacs effectively]] **** [[http://www.gnu.org/software/global][GNU Global]]&lt;/li&gt; &#xA; &lt;li&gt;Required by [[https://github.com/syohex/emacs-counsel-gtags][counsel-gtags]] and =company-gtags= from =company-mode=&lt;/li&gt; &#xA; &lt;li&gt;It creates index files for code navigation and auto-completion&lt;/li&gt; &#xA; &lt;li&gt;Please read [[https://www.gnu.org/software/global/manual/global.html][GNU Global manual]] about environment variables =GTAGSLIBPATH= and =MAKEOBJDIRPREFIX= **** LibreOffice&lt;/li&gt; &#xA; &lt;li&gt;Only its executable =soffice= is used for converting odt file into doc/pdf&lt;/li&gt; &#xA; &lt;li&gt;Conversion happens automatically when exporting org-mode to odt&lt;/li&gt; &#xA; &lt;li&gt;The conversion command is defined in variable =org-export-odt-convert-processes= **** js-beautify&lt;/li&gt; &#xA; &lt;li&gt;Beautify javascript code&lt;/li&gt; &#xA; &lt;li&gt;Install [[http://pip.readthedocs.org/en/stable/installing/][pip]] through OS package manager, then =pip install jsbeautifier= **** sdcv (console version of StarDict)&lt;/li&gt; &#xA; &lt;li&gt;Required by =sdcv.e=&lt;/li&gt; &#xA; &lt;li&gt;Run =curl &lt;a href=&#34;http://pkgs.fedoraproject.org/repo/pkgs/stardict-dic/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2/f164dcb24b1084e1cfa2b1cb63d590e6/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2&#34;&gt;http://pkgs.fedoraproject.org/repo/pkgs/stardict-dic/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2/f164dcb24b1084e1cfa2b1cb63d590e6/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2&lt;/a&gt; | tar jx -C ~/.stardict/dic= to install dictionary **** [[https://github.com/BurntSushi/ripgrep][ripgrep]]&lt;/li&gt; &#xA; &lt;li&gt;Optionally used by =M-x counsel-etags-grep= to search text in files&lt;/li&gt; &#xA; &lt;li&gt;Run =curl &lt;a href=&#34;https://sh.rustup.rs&#34;&gt;https://sh.rustup.rs&lt;/a&gt; -sSf | sh= in shell to install [[https://www.rust-lang.org/][Rust]] then =cargo install ripgrep=&lt;/li&gt; &#xA; &lt;li&gt;Tweak environment variable =PATH= so Emacs can find ripgrep **** [[http://www.sbcl.org/][sbcl]]&lt;/li&gt; &#xA; &lt;li&gt;Required by [[https://common-lisp.net/project/slime/][SLIME: The Superior Lisp Interaction Mode for Emacs]] **** ffmpeg&lt;/li&gt; &#xA; &lt;li&gt;Some dired commands use ffmpeg to process video/audio **** LanguageTool Grammar, Style and Spell Checker&lt;/li&gt; &#xA; &lt;li&gt;Download from [[https://languagetool.org/download/LanguageTool-stable.zip]].&lt;/li&gt; &#xA; &lt;li&gt;Used by [[https://github.com/mhayashi1120/Emacs-langtool][Langtool]]. Check its README for usage. My setup is just one liner =(setq langtool-language-tool-jar &#34;/path/to/languagetool-commandline.jar&#34;)=&lt;/li&gt; &#xA; &lt;li&gt;Read the head of =site-lisp/langtool/langtool.el= for more customization because I patched it and added more features **** [[https://github.com/koalaman/shellcheck][shellcheck]]&lt;/li&gt; &#xA; &lt;li&gt;Check syntax of shell script&lt;/li&gt; &#xA; &lt;li&gt;Required by =lazyflymake= **** [[https://mkvtoolnix.download/][mkvtoolnix]]&lt;/li&gt; &#xA; &lt;li&gt;Used by hydra in dired buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tutorial (OPTIONAL) Knowledge of Linux/Unix is required. At least you need know the meanings of &#34;environment variable&#34;, &#34;shell&#34;, &#34;stdin&#34;, &#34;stdout&#34;, &#34;man&#34;, &#34;info&#34;. ** Tutorial Please read this tutorial at least for once. *** Step 1, learn basics At minimum you need know how Emacs interacts with other command line programs,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What is [[https://en.wikipedia.org/wiki/Environment_variable][Environment Variable]]&lt;/li&gt; &#xA; &lt;li&gt;What is [[https://en.wikipedia.org/wiki/Pipeline_(Unix)][Pipeline (Unix)]], [[https://en.wikipedia.org/wiki/Standard_streams][Standard Streams]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Step 2, read official tutorial Press =C-h t= in Emacs (&#34;C&#34; means Ctrl key, &#34;M&#34; means Alt key) to read bundled tutorial.&lt;/p&gt; &#xA;&lt;p&gt;At minimum, you need learn:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to move cursor&lt;/li&gt; &#xA; &lt;li&gt;=C-h v= to describe variable&lt;/li&gt; &#xA; &lt;li&gt;=C-h f= to describe function&lt;/li&gt; &#xA; &lt;li&gt;=C-h k= to describe command key binding *** Step 3, know org-mode basics [[http://orgmode.org/][Org-mode]] is for notes-keeping and planning.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please watch [[https://www.youtube.com/watch?v=oJTwQvgfgMM][Carsten Dominik&#39;s talk]]. It&#39;s really simple. The only hot key to remember is =Tab=. *** Step 4, start from a real world problem You can visit [[http://www.emacswiki.org/emacs/][EmacsWiki]] for the solution. Newbies can ask for help at [[http://www.reddit.com/r/emacs/]]. *** Step 5 (optional), improve your shell/cli skills You could read free books/guides at [[https://tldp.org/][The Linux Documentation Project]]. ** Evil-mode tutorial Required for vim user,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Must read [[http://superuser.com/questions/246487/how-to-use-vimtutor][vimtutor]].&lt;/li&gt; &#xA; &lt;li&gt;Optionally read [[https://evil.readthedocs.io/en/latest/index.html]] ** Methodology See [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide][Master Emacs in One Year]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Original configuration from Emacs or third party packages are respected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Quick start On Windows, you need install Cygwin which provides command line programs to Emacs. Cygwin could be installed on any hard drive but it&#39;s highly recommended don&#39;t change it relative path to the root driver.&lt;/p&gt; &#xA;&lt;p&gt;Install Ctags (Universal Ctags is better. Exuberant Ctags is fine). On Windows, you could install Ctags through Cygwin.&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x counsel-etags-find-tag-at-point= from =counsel-etags= to navigate code. It uses tags files created by ctags. Tags file will be automatically created/update when you start using =counsel-etags=.&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x counsel-etags-grep= to search text (grep) in project. Project root is automatically detected.&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x find-file-in-project-by-selected= from =find-file-in-project= to find file in project. Project root is automatically detected. You can also add one line setup in =.emacs= like =(setq ffip-project-root &#34;~/proj1/&#34;)=.&lt;/p&gt; &#xA;&lt;p&gt;Code auto-completion works out of box by using tags file created by Ctags. You need run =counsel-etags= at least once to fire up Ctags. =company-ctags= from =company-mode= provides the candidates for auto completion. No manual setup is required.&lt;/p&gt; &#xA;&lt;p&gt;Please [[https://en.wikipedia.org/wiki/Grep][grep]] in the directory =&lt;del&gt;/.emacs.d/lisp= if you have any further questions on setup. ** Better runtime performance *** Why opening file is slow Insert below code into =&lt;/del&gt;/.custom.el=, replace &#34;/home/user1/your-file-path&#34; with the file you want to open, #+begin_src elisp (defun profile-open-file () (interactive) (profiler-start &#39;cpu) (find-file &#34;/home/user1/your-file-path&#34;) (profiler-report) (profiler-stop)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x profile-open-file= and read the report. ** Key bindings Don&#39;t memorize any key binding. Try =M-x any-command-in-emacs= and hint for its key binding is displayed.&lt;/p&gt; &#xA;&lt;p&gt;Most key bindings are defined in =lisp/init-evil.el=, a few key in =lisp/init-hydra.el= which uses [[https://github.com/abo-abo/hydra][Hydra]].&lt;/p&gt; &#xA;&lt;p&gt;Press =C-c C-y= anywhere to bring up default hydra menu.&lt;/p&gt; &#xA;&lt;p&gt;The tutorials I recommended have enough information about commands.&lt;/p&gt; &#xA;&lt;p&gt;Besides, &#34;[[http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html][How to be extremely efficient in Emacs]]&#34; lists my frequently used commands.&lt;/p&gt; &#xA;&lt;p&gt;Press =kj= to escape from =evil-insert-state= and everything else in Emacs. It&#39;s much more efficient than =ESC= in Vim or =C-g= in Emacs. Search =evil-escape= in =init-evil.el= for details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAQ ** Computers with smaller memory Make sure you have this line in =early-init.el= (Emacs 27.1+) or at the beginning of =init.el= (Emacs 26), #+begin_src elisp (setq my-computer-has-smaller-memory-p t) #+end_src ** Vim vs Emacs I prefer default hotkeys&amp;amp;commands from EVIL and Emacs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But sometimes a mixed style could be better for my personal workflow. See the function =my-optimize-evil= in =init-evil.el=.&lt;/p&gt; &#xA;&lt;p&gt;You can insert =(my-optimize-evil)= into =~/.custom.el= to enable it. ** Backup packages Run =M-x elpamr-create-mirror-for-installed= create a local repository from installed packages. See [[https://github.com/redguardtoo/elpa-mirror]] for more details. ** Hardcore debug technique This Emacs configuration is fast and robust.&lt;/p&gt; &#xA;&lt;p&gt;So most tricky problems come from extra third party packages you installed.&lt;/p&gt; &#xA;&lt;p&gt;Try [[https://en.wikipedia.org/wiki/Strace][Strace]] if you can&#39;t resolve the issue by grepping the Emacs Lisp code.&lt;/p&gt; &#xA;&lt;p&gt;Debug network request sent by Emacs, #+begin_src sh strace -f -e trace=network -s 10000 -o ~/emacs-err.txt /usr/bin/emacs -nw #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Debug system API call sent by Emacs, #+begin_src sh strace -o ~/emacs-err.txt /usr/bin/emacs -nw #+end_src ** Spell check code This configuration uses [[https://github.com/redguardtoo/wucuo][wucuo]] which is alternative of =flyspell-mode= and =flyspell-prog-mode=.&lt;/p&gt; &#xA;&lt;p&gt;Wucuo is fast, reliable, and powerful. It&#39;s better than any spell checking solutions of other text and IDE.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer your own spell check solution, insert below code to disable wucuo first, #+begin_src elisp (setq my-disable-wucuo t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For further knowledge on spell checking, you could read [[http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html][my article]] and code in =init-spelling.el=. ** Lock packages Some packages are so important to my workflow that they are locked.&lt;/p&gt; &#xA;&lt;p&gt;Those packages are placed at =site-lisp/=.&lt;/p&gt; &#xA;&lt;p&gt;They will not be upgraded by package system.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure same package is not installed through elpa. Please check the content of directory &#34;elpa/&#34; in =.emacs.d= root. ** How to install new packages? I only use two package repositories,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://stable.melpa.org]] (holding stable packages)&lt;/li&gt; &#xA; &lt;li&gt;[[https://melpa.org]] (holding latest but unstable packages)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a package named =MY-PKG= exists in the stable repository, you only need one line setup, #+begin_src elisp (require-package &#39;MY-PKG) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This line could be placed in =lisp/init-elpa.el= or =~/.custom.el=.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;d better place everything related to =MY-PKG= into =~/.custom.el= so the main stream change won&#39;t impact your own configuration.&lt;/p&gt; &#xA;&lt;p&gt;If the package does not exist in the stable repository, modify =melpa-include-packages= in =lisp/init-elpa.el= first.&lt;/p&gt; &#xA;&lt;p&gt;I encourage you to read =init-elpa.el= to understand how packages are managed if you are good at Emacs Lisp, ** Git blame current line Run =vc-msg-show=.&lt;/p&gt; &#xA;&lt;p&gt;If you select a region inside current line, the &lt;em&gt;correct commit which submits the selected snippet&lt;/em&gt; is displayed instead of the latest commit touch the whole line. ** Save/Load windows layout =SPC s s= or =M-x wg-create-workgrou= to save windows layout. =SPC l l= or =M-x wg-open-workgroup= to load windows layout.&lt;/p&gt; &#xA;&lt;p&gt;** Use this configuration as merge tool for Git This configuration might be the most efficient and most powerful merge tool for VCS. Insert below configuration into =~/.gitconfig=, #+begin_src javascript [mergetool.ediff]&lt;/p&gt; &#xA;&lt;h1&gt;use git mergetool ediff to resolve conflicts&lt;/h1&gt; &#xA;&lt;p&gt;cmd = emacs -nw -Q --eval &#34;(setq startup-now t)&#34; -l &#34;~/.emacs.d/init.el&#34; --eval &#34;(progn (setq ediff-quit-hook &#39;kill-emacs) (if (file-readable-p \&#34;$BASE\&#34;) (ediff-merge-files-with-ancestor \&#34;$LOCAL\&#34; \&#34;$REMOTE\&#34; \&#34;$BASE\&#34; nil \&#34;$MERGED\&#34;) (ediff-merge-files \&#34;$LOCAL\&#34; \&#34;$REMOTE\&#34; nil \&#34;$MERGED\&#34;)))&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then run =git mergetool -t ediff= to resolve conflicts.&lt;/p&gt; &#xA;&lt;p&gt;Here is [[https://gist.github.com/redguardtoo/d4ecd51f785bd117a6a0][my ~/.gitconfig]]. You can use [[https://github.com/redguardtoo/test-git-mergetool]] to practice. ** Default terminal shell Run =M-x shell=. If you use Zsh instead of Bash, please modify =init-term-mode.el=.&lt;/p&gt; &#xA;&lt;p&gt;You can customize =my-term-program= whose default value is =/bin/bash=. It&#39;s used by =ansi-term=. ** Override default setup Place your setup in =~/.custom.el= which is loaded after other &#34;*.el&#34;.&lt;/p&gt; &#xA;&lt;p&gt;So you can use any functions defined in my emacs configuration.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample to override keybindings defined in =lisp/init-evil.el=, #+begin_src elisp (with-eval-after-load &#39;evil (my-space-leader-def &#34;ss&#34; &#39;pwd &#34;ll&#34; &#39;pwd &#34;pp&#34; &#39;pwd)) #+end_src ** Code navigation It&#39;s usable out of box if Ctags is installed.&lt;/p&gt; &#xA;&lt;p&gt;To navigate, =M-x counsel-etags-find-tag-at-point=.&lt;/p&gt; &#xA;&lt;p&gt;To enable code auto-completion, =M-x counsel-etags-scan-code= at least once.&lt;/p&gt; &#xA;&lt;p&gt;Optionally, you can add =(add-hook &#39;after-save-hook &#39;counsel-etags-virtual-update-tags)= into your =.emacs= to automatically update tags file.&lt;/p&gt; &#xA;&lt;p&gt;No further setup is required. ** Code auto-completion I assume you are using [[https://github.com/company-mode/company-mode][company-mode]]. In this setup, users can press digit key to select the candidate from =company-mode=. To disabled this feature, =(setq my-company-select-by-number-p nil)=. Please see =my-company-zero-key-for-filter= for more tips.&lt;/p&gt; &#xA;&lt;p&gt;*** C++ auto-completion doesn&#39;t work? There are many ways to scan the C++ source files. =company-clang= from =company-mode= and =Clang= is good at handling C++.&lt;/p&gt; &#xA;&lt;p&gt;If you use clang to parse the C++ code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure code is syntax correct&lt;/li&gt; &#xA; &lt;li&gt;assign reasonable value into =company-clang-arguments=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is sample setup: #+begin_src elisp (setq company-clang-arguments &#39;(&#34;-I/home/myname/projs/test-cmake&#34; &#34;-I/home/myname/projs/test-cmake/inc&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In &#34;friendly&#34; Visual C++, [[http://www.codeproject.com/Tips/588022/Using-Additional-Include-Directories][similar setup]] is required.&lt;/p&gt; &#xA;&lt;p&gt;You can use other backends instead of =clang=. For example, you can use =company-gtags= and [[https://www.gnu.org/software/global/][GNU Global]] instead. See [[http://blog.binchen.org/posts/emacs-as-c-ide-easy-way.html][Emacs as C++ IDE, easy way]] for details.&lt;/p&gt; &#xA;&lt;p&gt;*** Auto-completion for other languages It&#39;s similar to C++ setup. Since GNU Global supports many popular languages, you can use =company-gtags=.&lt;/p&gt; &#xA;&lt;p&gt;For languages GNU Global doesn&#39;t support, you can fall back to =company-ctags= and [[https://en.wikipedia.org/wiki/Ctags][Ctags]]. Ctags configuration file is =~/.ctags=.&lt;/p&gt; &#xA;&lt;p&gt;You can also complete line by =M-x eacl-complete-line= and complete multi-lines statement by =M-x eacl-complete-multiline=. ** Color theme *** Auto load classic color theme Add below code to =~/.custom.el= to load a random classic dark color theme during startup, #+begin_src elisp (setq my-enable-startup-color-theme-p t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you prefer using your own color theme, you don&#39;t need above line.&lt;/p&gt; &#xA;&lt;p&gt;*** Preview color theme Check [[https://emacsthemes.com/]].&lt;/p&gt; &#xA;&lt;p&gt;Write down the name of color theme (for example, molokai).&lt;/p&gt; &#xA;&lt;p&gt;*** Setup color theme manually (recommended) You can =M-x counsel-load-theme= to switch themes.&lt;/p&gt; &#xA;&lt;p&gt;Or you can insert below code into end of =~/.custom.el= or =init.el=, #+begin_src elisp ;; Please note the color theme&#39;s name is &#34;molokai&#34; (load-theme &#39;molokai t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also run =M-x random-color-theme= to load random color theme. *** Use color theme in terminal Use 256 colors is just one CLI without any extra setup, #+BEGIN_SRC sh TERM=xterm-256color emacs -nw #+END_SRC ** True colors in terminal Emacs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Emacs 26&lt;/li&gt; &#xA; &lt;li&gt;Install [[https://gist.github.com/XVilka/8346728][terminals supporting true color]]. I suggest [[https://mintty.github.io/][mintty]] on Windows, [[https://gnometerminator.blogspot.com/p/introduction.html][terminator]] on Linux, [[https://www.iterm2.com/][iTerm2]] on macOS&lt;/li&gt; &#xA; &lt;li&gt;[[http://www.gnu.org/software/emacs/manual/html_node/efaq/Colors-on-a-TTY.html][Set up and start Emacs]] ** Grep/Replace text in project Many third party plugins bundled in this setup have already provided enough features. For example, if you use =git=, =counsel-git-grep= from package [[https://github.com/abo-abo/swiper][counsel/ivy]] works out of the box.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A generic grep program =counsel-etags-grep= is also provided. Since =counsel-etags-grep= is based on =counsel/ivy=, it also supports a magic called &#34;multi-editing via Ivy&#34;. You could read [[https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/][Nuclear weapon multi-editing via Ivy and Ag]] to get the idea.&lt;/p&gt; &#xA;&lt;p&gt;Multi-edit workflow is optimized. After =M-x counsel-etags-grep= or pressing =,qq=, press =C-c C-o C-x C-q= to enable =wgrep-mode=. You can edit text (for example, delete lines) in =wgrep-mode= directly.&lt;/p&gt; &#xA;&lt;p&gt;You can exclude multiple keywords using =!keyword1 keyword2= in =ivy=. ** Hydra/Swiper/Counsel/Ivy I love all the packages from [[https://github.com/abo-abo][Oleh Krehel (AKA abo-abo)]]. Every article from his [[https://oremacs.com/][blog]] is worth reading ten times.&lt;/p&gt; &#xA;&lt;p&gt;You can input =:pinyin1 pinyin2 !pinyin3 pinyin4= in ivy UI to search by Chinese Pinyin. The key point is to make sure the first character of input is &#34;:&#34;. ** Set &#34;auto-mode-alist&#34; The =auto-mode-alist= associates major modes with files.&lt;/p&gt; &#xA;&lt;p&gt;For example, associate =rjsx-mode= file with extension &#34;*.jsx&#34;, #+begin_src elisp (push (&#34;\.jsx\&#39;&#34; . rsjx-mode) auto-mode-alist) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or you can use function =my-add-auto-mode= provided by this configuration, #+begin_src elisp (my-add-auto-mode &#39;rjsx-mode &#34;\.jsx\&#39;&#34;) #+end_src ** git-gutter I use modified version of =git-gutter= for now until my pull request is merged into official repository.&lt;/p&gt; &#xA;&lt;p&gt;You can set =git-gutter:exp-to-create-diff= to make git gutter support other VCS (Perforce, for example), #+begin_src elisp (setq git-gutter:exp-to-create-diff (shell-command-to-string (format &#34;p4 diff -du -db %s&#34; (file-relative-name buffer-file-name)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Please note =git-gutter= assumes the cli program [[https://www.gnu.org/software/diffutils/][diff]] is added into environment variable PATH. You might need install it through MSYS2 or Cygwin on Windows. ** Setup fonts in GUI Emacs Non-Chinese can use [[https://github.com/rolandwalker/unicode-fonts][unicode-fonts]].&lt;/p&gt; &#xA;&lt;p&gt;Chinese can use [[https://github.com/tumashu/cnfonts][cnfonts]].&lt;/p&gt; &#xA;&lt;p&gt;They are not included in this setup. You need install them manually. ** Synchronize setup with Git Synchronize from my stable setup: #+begin_src bash git pull &lt;a href=&#34;https://redguardtoo@github.com/redguardtoo/emacs.d.git&#34;&gt;https://redguardtoo@github.com/redguardtoo/emacs.d.git&lt;/a&gt; stable #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or latest setup: #+begin_src bash git pull &lt;a href=&#34;https://redguardtoo@github.com/redguardtoo/emacs.d.git&#34;&gt;https://redguardtoo@github.com/redguardtoo/emacs.d.git&lt;/a&gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can revert commit: #+begin_src bash&lt;/p&gt; &#xA;&lt;h1&gt;always start from the latest related commit&lt;/h1&gt; &#xA;&lt;p&gt;git revert commit-2014-12-01 git revert commit-2014-11-01 #+end_src ** Indentation Learn [[http://www.emacswiki.org/emacs/IndentationBasics][basics]]. Then use [[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][my solution]]. ** Editing Lisp Please note [[http://emacswiki.org/emacs/ParEdit][paredit-mode]] is enabled when editing Lisp. Search &#34;paredit cheat sheet&#34; to learn its key bindings. ** Use [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]] or [[https://github.com/milkypostman/powerline][powerline]]? Comment out =(require &#39;init-modeline)= in =init.el= at first. ** Key bindings don&#39;t work? Other desktop applications may intercept the key bindings. For example, [[https://github.com/redguardtoo/emacs.d/issues/320][it&#39;s reported QQ on windows 8 can intercept &#34;M-x&#34;]]. ** Org-mode Press =M-x org-version=, then read online manual to set up.&lt;/p&gt; &#xA;&lt;p&gt;For example, =org-capture= requires [[http://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture][manual setup]].&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x org-open-at-point= to open link under cursor. Http link will be opened by =emacs-w3m=. =C-u M-x org-open-at-point= uses the external browser specified by =browse-url-generic-program= whose value could be =/usr/bin/firefox=. ** macOS user? Please replace legacy Emacs 22 and ctags with the new versions.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way is change [[https://en.wikipedia.org/wiki/PATH_(variable)][Environment variable PATH]]. ** Customize global variables Some variables are set by this configuration so you can&#39;t =M-x customize= to modify them.&lt;/p&gt; &#xA;&lt;p&gt;Here are the steps to set these variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find the variable description by =M-x customize=. For example, if the description of a variable is &#34;Company Clang Insert Arguments&#34;, then the variable name is =company-clang-insert-argument=&lt;/li&gt; &#xA; &lt;li&gt;Find the variable =company-clang-insert-argument= in =lisp/init-company.el= and change its value&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BTW, please &lt;em&gt;read my code comment&lt;/em&gt; first before changing my code. ** Open/Save files with Counsel/Ivy Keep pressing =C-M-j= to ignore candidates and open/save files using current input.&lt;/p&gt; &#xA;&lt;p&gt;You can also press =M-o= to apply other action on selected file. See [[https://oremacs.com/2015/07/23/ivy-multiaction/]] for details. ** Windows I strongly suggest [[http://www.cygwin.com/][Cygwin]] Emacs.&lt;/p&gt; &#xA;&lt;p&gt;If you use Windows Emacs, you need help Emacs to find third party command line programs from Cygwin. So you&#39;d better add =C:\Cygwin64\bin= to environment variable =PATH=.&lt;/p&gt; &#xA;&lt;p&gt;Most command line programs are originally developed for macOS and Linux. They can only handle UTF-8 encoded text. When grepping text or searching file, the Windows Emacs need run the command line programs in Command Prompt which only uses UTF-16 encoded text. So you might need [[https://stackoverflow.com/questions/57131654/using-utf-8-encoding-chcp-65001-in-command-prompt-windows-powershell-window?noredirect=1&amp;amp;lq=1][Using UTF-8 Encoding (CHCP 65001) in Command Prompt / Windows Powershell (Windows 10)]] if Emacs need pass Non-ASCII text to external command line programs.&lt;/p&gt; &#xA;&lt;p&gt;Below Emacs commands do not require external command line programs, so they works out of box on Windows,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x swiper&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x ffip-lisp-find-file-in-project&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x find-lisp-find-dired&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x find-by-pinyin-dired&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x find-by-pinyin-in-project-dired&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can set environment variables in PowerShell, like, #+begin_src sh setx var_name &#34;var_value&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Environment variable =HOME= points to the directory =C:\Users&amp;lt;username&amp;gt;= on Windows by default. You need copy the folder =.emacs.d= into that directory. Or you can change the value of =HOME=.&lt;/p&gt; &#xA;&lt;p&gt;I use below cli to set the variable =HOME= to &#34;c:\cygwin\home\cb&#34;, #+begin_src sh setx HOME &#34;c:\cygwin\home\cb&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Yasnippet&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instead of =M-x yas-expand= or pressing =TAB= key, you can press =M-j= instead.&lt;/li&gt; &#xA; &lt;li&gt;Yasnippet works out of box. But you can =M-x my-yas-reload-all= to force Yasnippet compile all the snippets. If you run =my-yas-reload-all= once, you always need run it when new snippets is added. The purpose of =my-yas-reload-all= is to make Emacs start up faster.&lt;/li&gt; &#xA; &lt;li&gt;You can add your snippets into =snippets/=.&lt;/li&gt; &#xA; &lt;li&gt;Run =grep -rns --exclude=&#39;.yas*&#39; &#39;key:&#39; *= in =snippets/= to see my own snippets ** Non-English users Locale must be &lt;em&gt;UTF-8 compatible&lt;/em&gt;. For example, as I type =locale= in shell, I got the output =zh_CN.UTF-8=. ** Behind corporate firewall Run below command in shell: #+begin_src bash http_proxy=&lt;a href=&#34;http://yourname:passwd@proxy.company.com:8080&#34;&gt;http://yourname:passwd@proxy.company.com:8080&lt;/a&gt; emacs -nw #+end_src ** Network is blocked Try [[https://github.com/XX-net/XX-Net]]. Run command =http_proxy=&lt;a href=&#34;http://127.0.0.1:8087&#34;&gt;http://127.0.0.1:8087&lt;/a&gt; emacs -nw= in shell after starting XX-Net. ** Email If you use Gnus for email, check =init-gnus.el= and read [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org][my Gnus tutorial]]. ** Cannot download packages? Some package cannot be downloaded automatically because of network problem.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run =M-x package-refresh-content=, restart Emacs, reinstall package. ** Use packages on [[https://elpa.gnu.org/][GNU ELPA]] By default, packages from GNU ELPA are NOT available. Search the line &#34;uncomment below line if you need use GNU ELPA&#34; in =init-elpa.el= if you want to access GNU ELPA.&lt;/p&gt; &#xA;&lt;p&gt;For example, [[https://github.com/flycheck/flycheck][flycheck]] requires packages from GNU ELPA. ** Use flycheck to syntax check code If you prefer =flycheck= instead the default syntax check solution =lazyflymake= built into this configuration.&lt;/p&gt; &#xA;&lt;p&gt;Install and set up =flycheck= and insert below code to disable =lazyflymake=, #+begin_src elisp (setq my-disable-lazyflymake t) #+end_src ** Disable Vim key bindings By default EVIL (Vim emulation in Emacs) is used. Comment out line containing =(require &#39;init-evil)= in init.el to unload it. ** Evil setup It&#39;s defined in =lisp/init-evil.el=. Press =C-z= to switch between Emacs and Vim key bindings.&lt;/p&gt; &#xA;&lt;p&gt;You could visit [[https://github.com/emacs-evil/evil/][its website]] to download its free ebook there.&lt;/p&gt; &#xA;&lt;p&gt;You can set =my-initial-evil-state-setup= to customize the initial evil state per major mode, #+begin_src elisp ;; &lt;code&gt;diff-mode&#39; uses Emacs original key bindings (push &#39;(diff-mode . emacs) my-initial-evil-state-setup) ;; &lt;/code&gt;ivy-occur-grep-mode&#39; initial state is evil normal state. Vim key bindings are used. (push &#39;(ivy-occur-grep-mode . normal) my-initial-evil-state-setup) #+end_src ** Chinese Input Method Editor Please note pyim is already built into this setup. You need not install it through ELPA.&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x toggle-input-method= to toggle input method [[https://github.com/tumashu/pyim][pyim]]. *** Use Pinyin The default dictionary for pinyin might not be big enough. So you need install bigger dictionaries.&lt;/p&gt; &#xA;&lt;p&gt;Dictionaries with &#34;.pyim&#34; extension under the directory =~/.eim/= are automatically loaded.&lt;/p&gt; &#xA;&lt;p&gt;Please run =curl -L &lt;a href=&#34;https://raw.githubusercontent.com/redguardtoo/pyim-tsinghua-dict/master/pyim-tsinghua-dict.pyim&#34;&gt;https://raw.githubusercontent.com/redguardtoo/pyim-tsinghua-dict/master/pyim-tsinghua-dict.pyim&lt;/a&gt; &amp;gt; ~/.eim/pyim-tsinghua-dict.pyim= to install extra dictionaries.&lt;/p&gt; &#xA;&lt;p&gt;The default pinyin scheme is =quanpin= but you can insert below code into =&lt;del&gt;/.custom.el= to switch to a different pinyin scheme, #+begin_src elisp (with-eval-after-load &#39;pyim (setq pyim-default-scheme &#39;xiaohe-shuangpin)) #+end_src *** Use Wubi Dictionary for wubi is already installed. Please insert below code into =&lt;/del&gt;/.custom.el= to enable wubi dictionary and use wubi scheme, #+begin_src elisp (setq my-pyim-enable-wubi-dict t) (with-eval-after-load &#39;pyim (setq pyim-default-scheme &#39;wubi)) #+end_src ** Install multiple versions of Emacs Run below commands to install Emacs 26.3 into the directory =~/myemacs/26.3=: #+begin_src bash mkdir -p ~/tmp; curl &lt;a href=&#34;http://ftp.gnu.org/gnu/emacs/emacs-26.3.tar.gz&#34;&gt;http://ftp.gnu.org/gnu/emacs/emacs-26.3.tar.gz&lt;/a&gt; | tar xvz -C ~/tmp/emacs-26.3 cd &lt;del&gt;/tmp/emacs-26.3; mkdir -p &lt;del&gt;/myemacs/26.3; rm -rf &lt;del&gt;/myemacs/26.3/*; ./configure --prefix=&lt;/del&gt;/myemacs/26.3 --without-x --without-dbus --without-sound &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install #+end_src ** Change Time Locale Insert below code into =&lt;/del&gt;/.emacs= or =&lt;/del&gt;/.custom.el=, #+begin_src elisp ;; Use en_US locale to format time. ;; if not set, the OS locale is used. (setq system-time-locale &#34;C&#34;) #+end_src ** Directory structure =init.el= is the main file. It includes other =*.el= files.&lt;/p&gt; &#xA;&lt;p&gt;=lisp/init-elpa.el= defines what packages will be installed from [[http://melpa.org][MELPA]].&lt;/p&gt; &#xA;&lt;p&gt;Packages are installed into the directory =elpa/=.&lt;/p&gt; &#xA;&lt;p&gt;I also manually download and extract some packages into =site-lisp/=. Packages in =site-lisp/= are &lt;em&gt;not visible&lt;/em&gt; to the package manager.&lt;/p&gt; &#xA;&lt;p&gt;My own snippets is at =snippets/=.&lt;/p&gt; &#xA;&lt;p&gt;The git hooks is placed in =githooks= directory.&lt;/p&gt; &#xA;&lt;p&gt;Other directories don&#39;t matter. ** Run the unit test before git commit On macOS/Linux/Cygwin, run =make githooks= to install hooks into =.git/hooks=.&lt;/p&gt; &#xA;&lt;p&gt;Then unit test is run automatically before =git commit=. ** Python environment We use [[https://github.com/jorgenschaefer/elpy][Elpy (Emacs Python Development Environment)]]. See its official documentation on its usage.&lt;/p&gt; &#xA;&lt;p&gt;The flag =elpy-disable-backend-error-display= is set to =nil= so you can easily report any error to its developers.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t use Elpy, please set this flag to =t=.&lt;/p&gt; &#xA;&lt;p&gt;To enable the virtual environment created by Elpy as its official guide has suggested, you can add below code into =&lt;del&gt;/.custom.el=, #+begin_src elisp (with-eval-after-load &#39;elpy (let* ((venv-dir &#34;&lt;/del&gt;/.emacs.d/elpy/rpc-venv&#34;)) (when (and (file-exists-p venv-dir) (executable-find pyvenv-virtualenvwrapper-python)) (pyvenv-activate venv-dir)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;After activating the virtual environment created by Elpy, you could also backup its required packages, #+begin_src sh source ~/.emacs.d/elpy/rpc-venv/bin/activate &amp;amp;&amp;amp; pip freeze &amp;gt; elpy-requirements.txt &amp;amp;&amp;amp; deactivate #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then restore the packages, #+begin_src sh source ~/.emacs.d/elpy/rpc-venv/bin/activate &amp;amp;&amp;amp; pip install -r elpy-requirements.txt &amp;amp;&amp;amp; deactivate #+end_src&lt;/p&gt; &#xA;&lt;p&gt;My =elpy-requirements.txt= (Python 3.9.1), #+begin_example appdirs==1.4.4 autopep8==1.5.4 black==20.8b1 click==7.1.2 flake8==3.8.4 jedi==0.18.0 mccabe==0.6.1 mypy-extensions==0.4.3 parso==0.8.1 pathspec==0.8.1 pycodestyle==2.6.0 pyflakes==2.2.0 regex==2020.11.13 rope==0.18.0 toml==0.10.2 typed-ast==1.4.1 typing-extensions==3.7.4.3 yapf==0.30.0 #+end_example&lt;/p&gt; &#xA;&lt;p&gt;After above setup, you can run =M-x elpy-config= to double check elpy status.&lt;/p&gt; &#xA;&lt;p&gt;You might want to modify =include-system-site-packages= in =&lt;del&gt;/.emacs.d/elpy/rpc-venv/pyvenv.cfg= ** Set up [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] You could insert below code into =&lt;/del&gt;/.custom.el=, #+begin_src elisp (with-eval-after-load &#39;lsp-mode ;; enable log only for debug (setq lsp-log-io nil) ;; use &lt;code&gt;evil-matchit&#39; instead (setq lsp-enable-folding nil) ;; no real time syntax check (setq lsp-diagnostic-package :none) ;; handle yasnippet by myself (setq lsp-enable-snippet nil) ;; turn off for better performance (setq lsp-enable-symbol-highlighting nil) ;; use find-fine-in-project instead (setq lsp-enable-links nil) ;; auto restart lsp (setq lsp-restart &#39;auto-restart) ;; don&#39;t watch 3rd party javascript libraries (push &#34;[/\\\\][^/\\\\]*\\.\\(json\\|html\\|jade\\)$&#34; lsp-file-watch-ignored) ;; don&#39;t ping LSP language server too frequently (defvar lsp-on-touch-time 0) (defun my-lsp-on-change-hack (orig-fun &amp;amp;rest args) ;; do NOT run &lt;/code&gt;lsp-on-change&#39; too frequently (when (&amp;gt; (- (float-time (current-time)) lsp-on-touch-time) 120) ;; 2 mins (setq lsp-on-touch-time (float-time (current-time))) (apply orig-fun args))) (advice-add &#39;lsp-on-change :around #&#39;my-lsp-on-change-hack)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then run =M-x lsp= to start lsp client and server. Check [[https://github.com/emacs-lsp/lsp-mode]] on how to install lsp server. ** Enable typewriter sounds when typing Run =M-x my-toggle-typewriter=. Please check bundled =typewriter-mode.el= for further setup. ** pdf-tools Check its official documentation.&lt;/p&gt; &#xA;&lt;p&gt;Here is my setup in =~/.custom.el=, #+begin_src elisp ;; @see &lt;a href=&#34;https://github.com/vedang/pdf-tools/&#34;&gt;https://github.com/vedang/pdf-tools/&lt;/a&gt; ;; Don&#39;t bother Windows (when (and (display-graphic-p) (or &lt;em&gt;linux&lt;/em&gt; &lt;em&gt;is-a-mac&lt;/em&gt;)) (my-run-with-idle-timer 2 (lambda () (when &lt;em&gt;is-a-mac&lt;/em&gt; (setenv &#34;PKG_CONFIG_PATH&#34; &#34;/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig&#34;)) (pdf-loader-install)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support legacy Emacs versions ** Emacs 25 Version 3.2 is the last version to support =Emacs 25=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please use [[https://github.com/redguardtoo/emacs.d/archive/3.1.zip]] and [[https://github.com/redguardtoo/myelpa/archive/3.1.zip]]. ** Emacs 24.4 and 24.5 Version 2.9 is the last version to support =Emacs 24.4+=&lt;/p&gt; &#xA;&lt;p&gt;Please use [[https://github.com/redguardtoo/emacs.d/archive/2.9.zip]] and [[https://github.com/redguardtoo/myelpa/archive/2.9.zip]]. ** Emacs 24.3 Version 2.6 is the last version to support =Emacs 24.3=.&lt;/p&gt; &#xA;&lt;p&gt;Download [[https://github.com/redguardtoo/emacs.d/archive/2.6.zip]] and [[https://github.com/redguardtoo/myelpa/archive/2.6.zip]] and you are good to go. ** Emacs 23 Version 1.2 of this setup is the last version to support Emacs v23.&lt;/p&gt; &#xA;&lt;p&gt;Here are the steps to use that setup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download [[https://github.com/redguardtoo/emacs.d/archive/1.2.zip]]&lt;/li&gt; &#xA; &lt;li&gt;Download [[https://github.com/redguardtoo/myelpa/archive/1.2.zip]]&lt;/li&gt; &#xA; &lt;li&gt;Follow the section =Install stable version in easiest way= but skip the download steps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tips&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Never turn off any bundled mode if it&#39;s on by default. Future version of Emacs may assume it&#39;s on. Tweak its flag in mode hook instead!&lt;/li&gt; &#xA; &lt;li&gt;Git skills are &lt;em&gt;extremely useful&lt;/em&gt;. Please read the chapters &#34;Git Basics&#34;, &#34;Git Branching&#34;, &#34;Git Tools&#34; from [[https://git-scm.com/book/en/][Pro Git]]&lt;/li&gt; &#xA; &lt;li&gt;You can run =optimize-emacs-startup= to compile &#34;*.el&#34; under =lisp/=&lt;/li&gt; &#xA; &lt;li&gt;Many advanced features in this configuration is only enabled in my personal =&lt;del&gt;/.custom.el=. Grep =defvar my-.*= in =&lt;/del&gt;/.emacs.d/lisp/= to find them. You can start from =init-company.el= and =init-spelling.el=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report bug Please check [[http://www.emacswiki.org/emacs/][EmacsWiki]] and my FAQ first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you still can&#39;t resolve the issue,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Restart Emacs with option =--debug-init= in shell&lt;/li&gt; &#xA; &lt;li&gt;Run =M-x toggle-debug-on-error= in Emacs&lt;/li&gt; &#xA; &lt;li&gt;Reproduce the issue and send me the error message&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The full command line to start Emacs is =emacs -nw --debug-init=.&lt;/p&gt; &#xA;&lt;p&gt;If you use [[https://emacsformacosx.com][Emacs for Mac OS X]], the command line is =/Application/Emacs.app/Contents/MacOS/Emacs -nw --debug-init=.&lt;/p&gt; &#xA;&lt;p&gt;Send error messages to the original developer if it&#39;s third party package&#39;s problem.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;em&gt;you are sure&lt;/em&gt; it&#39;s this my bug, file report at [[https://github.com/redguardtoo/emacs.d]]. Don&#39;t email me!&lt;/p&gt; &#xA;&lt;p&gt;Bug report need include &lt;em&gt;environment details&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License This program is free software: you can redistribute it and/or modify it under the terms of the [[file:LICENSE][GNU General Public License]] as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the [[file:LICENSE][GNU General Public License]] for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-ng/emacs-ng</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/emacs-ng/emacs-ng</id>
    <link href="https://github.com/emacs-ng/emacs-ng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new approach to Emacs - Including TypeScript, Threading, Async I/O, and WebRender.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-ng/emacs-ng/master/images/logo.png&#34; width=&#34;120&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/emacsng&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/emacs-ng/emacs-ng.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-ng/emacs-ng/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/emacs-ng/emacs-ng/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/emacsng/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/emacsng?label=Join%20r%2Femacsng&amp;amp;style=social&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;emacs-ng&lt;/h1&gt; &#xA;&lt;p&gt;A new approach to Emacs&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng&#34;&gt;&lt;strong&gt;homepage&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/js/using-deno&#34;&gt;&lt;strong&gt;Deno/Javascript&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/webrender/&#34;&gt;&lt;strong&gt;webrender&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/ng-module/&#34;&gt;&lt;strong&gt;ng-module&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/handbook/getting-started&#34;&gt;&lt;strong&gt;handbook&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/faq/&#34;&gt;&lt;strong&gt;faq&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;emacs-ng is based off of the &lt;code&gt;master&lt;/code&gt; branch of emacs, and regularly merges in the latest changes(this branch includes the native compilation feature from Andrea Corallo).&lt;/p&gt; &#xA;&lt;p&gt;The last merged commit is &lt;code&gt;6ebe8b03d8&lt;/code&gt; (Aug 24 2021).&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this fork is to explore new development approaches. To accomplish this, we aim to maintain an inclusive and innovative environment. The project is not about replacing elisp with a more popular language like Javascript. We just want to make emacs more approachable for people who don&#39;t like lisp as much as we do.&lt;/p&gt; &#xA;&lt;p&gt;Contributions are welcome from anyone and we are always happy to invite new people to the project. We are open towards interesting ideas to make emacs better.&lt;/p&gt; &#xA;&lt;h2&gt;Why Emacs-ng&lt;/h2&gt; &#xA;&lt;p&gt;This project should be considered an additive native layer over emacs, bringing features like Deno&#39;s Javascript and Async I/O environment, Mozilla&#39;s Webrender, and other features in development. emacs-ng&#39;s approach is to utilize multiple new development approaches and tools to bring Emacs to the next level. It is maintained by a team that loves Emacs and everything it stands for - being totally introspectable, with a fully customizable and free development environment. We want Emacs to be a editor 40+ years from now that has the flexibility and design to keep up with progressive technology.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Emacs combined with the rust ecosystem brings a lot of possibilities. If you have any idea for a new feature, just open an issue before starting work so we can give you some feedback.&lt;/p&gt; &#xA;&lt;p&gt;We try to maintain a list of &#34;new contributor&#34; friendly issues tagged with &#34;good first issue&#34;. You should also take a look at our &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/handbook/getting-started/&#34;&gt;handbook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Webrender&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/servo/webrender&#34;&gt;WebRender&lt;/a&gt; is a GPU-based 2D rendering engine written in Rust from Mozilla. Firefox, the research web browser Servo, and other GUI frameworks draw with it. emacs-ng use it as a new experimental graphic backend to leverage GPU hardware.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic modules&lt;/h3&gt; &#xA;&lt;p&gt;Allow dynamic modules to access &lt;em&gt;more of Emacs&#39;s internals&lt;/em&gt;. Dynamic modules can be written to take advantage of these extra functionalities when they are available, while at the same time being &lt;em&gt;fully compatible&lt;/em&gt; with vanilla Emacs.&lt;/p&gt; &#xA;&lt;h3&gt;Deno/Javascript&lt;/h3&gt; &#xA;&lt;p&gt;One of emacs-ng&#39;s primary features is integrating the &lt;a href=&#34;https://deno.land/&#34;&gt;Deno Runtime&lt;/a&gt;, which allows execution of JavaScript and Typescript within Emacs. The details of that feature are listed below, however many users would ask themselves &lt;strong&gt;WHY JAVASCRIPT?&lt;/strong&gt; JavaScript is an extremely dynamic language that allows for a user to inspect and control their scripting environment. The key to note is that bringing in Deno isn&#39;t JUST JavaScript - it&#39;s an ecosystem of powerful tools and approaches that Emacs just doesn&#39;t have currently.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TypeScript offers an extremely flexible typing system, that allows to user to have compile time control of their scripting, with the flexibility of types &#34;getting out of the way&#34; when not needed.&lt;/li&gt; &#xA; &lt;li&gt;Deno uses Google&#39;s v8 JavaScript engine, which features an extremely powerful JIT and world-class garbage collector.&lt;/li&gt; &#xA; &lt;li&gt;Usage of modern Async I/O utilizing Rust&#39;s Tokio library.&lt;/li&gt; &#xA; &lt;li&gt;Emacs-ng has WebWorker support, meaning that multiple JavaScript engines can be running in parallel within the editor. The only restriction is that only the &#39;main&#39; JS Engine can directly call lisp functions.&lt;/li&gt; &#xA; &lt;li&gt;Emacs-ng also has WebAssembly support - compile your C module as WebAsm and distribute it to the world. Don&#39;t worry about packaging shared libraries or changing module interfaces, everything can be handled and customized by you the user, at the scripting layer. No need to be dependent on native implementation details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Performance&lt;/h4&gt; &#xA;&lt;p&gt;v8&#39;s world-class JIT offers the potential for large performance gains. Async I/O from Deno, WebWorkers, and WebAsm, gives you the tools to make Emacs a smoother and faster experience without having to install additional tools to launch as background processes or worry about shared library versions.&lt;/p&gt; &#xA;&lt;h3&gt;Package management&lt;/h3&gt; &#xA;&lt;p&gt;use-package and straight are really great so we decided to make them built-in packages. But since we don&#39;t want to break configs, this is an &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/package-management&#34;&gt;optional feature&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Just put this line into your &lt;code&gt;~/.emacs.d/early-init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq ng-straight-bootstrap-at-startup t)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/lsp-bridge</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/manateelazycat/lsp-bridge</id>
    <link href="https://github.com/manateelazycat/lsp-bridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fastest LSP client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;lsp-bridge&lt;/h1&gt; &#xA;&lt;p&gt;Lsp-bridge&#39;s goal is to become the fastest LSP client in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Lsp-bridge uses python&#39;s threading technology to build caches that bridge Emacs and LSP server. Lsp-bridge will provide smooth completion experience without compromise to slow down emacs&#39; performance.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/screenshot.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Python dependencies: &lt;a href=&#34;https://github.com/tkf/python-epc&#34;&gt;python-epc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Elisp dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/galeo/corfu-doc&#34;&gt;corfu-doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;orderless&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt; (need execute command &lt;code&gt;all-the-icons-install-fonts&lt;/code&gt; to install all-the-icons fonts)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tumashu/posframe&#34;&gt;posframe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrblevin/markdown-mode&#34;&gt;markdown-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;yasnippet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Clone or download this repository (path of the folder is the &lt;code&gt;&amp;lt;path-to-lsp-bridge&amp;gt;&lt;/code&gt; used below).&lt;/li&gt; &#xA; &lt;li&gt;Add following code in your ~/.emacs:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-lsp-bridge&amp;gt;&#34;)&#xA;&#xA;(require &#39;yasnippet)&#xA;(require &#39;lsp-bridge)&#xA;(require &#39;lsp-bridge-icon)        ;; show icons for completion items, optional&#xA;(require &#39;lsp-bridge-jdtls)       ;; provide Java third-party library jump and -data directory support, optional&#xA;(yas-global-mode 1)&#xA;&#xA;(require &#39;corfu-history)&#xA;(require &#39;lsp-bridge-orderless)   ;; make lsp-bridge support fuzzy match, optional&#xA;(corfu-history-mode t)&#xA;(global-lsp-bridge-mode)&#xA;(when (&amp;gt; (frame-pixel-width) 3000) (custom-set-faces &#39;(corfu-default ((t (:height 1.3))))))  ;; adjust default font height when running in HiDPI screen.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-def&lt;/code&gt;: jump to the definition&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-def-other-window&lt;/code&gt;: jump to the definition in other-window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-impl&lt;/code&gt;: jump to the implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-impl-other-window&lt;/code&gt;: jump to the implementation in other-window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-return-from-def&lt;/code&gt;: return to the location before calling &lt;code&gt;lsp-bridge-find-def&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-references&lt;/code&gt;: traverse across code references (forked from color-rg.el)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lookup-documentation&lt;/code&gt;: lookup documentation of symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-popup-documentation-scroll-up&lt;/code&gt;: scroll up popup document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-popup-documentation-scroll-down&lt;/code&gt;: scroll down popup document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-rename&lt;/code&gt;: rename symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-jump-to-next-diagnostic&lt;/code&gt;: Jump to the next diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-jump-to-prev-diagnostic&lt;/code&gt;: Jump to the previous diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-show-signature-help-in-minibuffer&lt;/code&gt;: show signature help in minibuffer manually (move cursor to parameters area will show signature help automatically)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-insert-common-prefix&lt;/code&gt;: insert common prefix of candidates&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-restart-process&lt;/code&gt;: restart lsp-bridge process (only used for development)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-popup-predicates&lt;/code&gt;: the predicate function for completion menu, completion menu popup after all the functions pass&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-stop-commands&lt;/code&gt;: completion menu will not popup if these commands are executed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-hide-characters&lt;/code&gt;: completion menu will not popup when cursor after those characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-diagnostics-fetch-idle&lt;/code&gt;: diagnostic delay, start pulling diagnostic information 1 second after stopping typing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-auto-import&lt;/code&gt;: automatic insert import code, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-diagnostics&lt;/code&gt;: code diagnostic, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-candidate-doc-preview&lt;/code&gt;: preview of the candidate document, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-signature-help&lt;/code&gt;: show function parameter in minibufer, disable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-org-babel-lang-list&lt;/code&gt;: list of language to support org-mode code block completion&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-disable-backup&lt;/code&gt;: forbidden version manage of emacs, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-log&lt;/code&gt;: enable the LSP message log, disable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;: enable program debugging, disable by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize language server configuration&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration of for each language server is stored at &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/tree/master/langserver&#34;&gt;lsp-bridge/langserver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Anyway you can customize server configuration with the following priority:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-get-lang-server-by-project&lt;/code&gt;: write your own function to get server configuration based on project-path and file-path, this function is nil by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-extension-list&lt;/code&gt;: load server configuration based on file extension, such as, we launch &lt;code&gt;volar&lt;/code&gt; server instead &lt;code&gt;javascript&lt;/code&gt; server when open *.vue file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-mode-list&lt;/code&gt;: load server configuration based on major-mode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add support for new language?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create configuration file under lsp-bridge/langserver, such as &lt;code&gt;pyright.json&lt;/code&gt; for pyright (windows user please uses &lt;code&gt;pyright_windows.json&lt;/code&gt;, macOS user please uses &lt;code&gt;pyright_darwin.json&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(mode . server_name)&lt;/code&gt; in &lt;code&gt;lsp-bridge-lang-server-list&lt;/code&gt;, such as &lt;code&gt;(python-mode . &#34;pyright&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add new mode-hook to &lt;code&gt;lsp-bridge-default-mode-hooks&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Welcome to send PR to help us improve support for LSP servers, thanks for your contribution!&lt;/p&gt; &#xA;&lt;h2&gt;Supported language servers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Index&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;LSP Server&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clangd/clangd&#34;&gt;clangd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c, c++&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;pip install pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixirLS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that the &lt;code&gt;elixir-ls&lt;/code&gt; release directory is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;make sure gopls in PATH, please do &lt;code&gt;ln -s ~/go/bin/gopls ~/.local/bin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;hls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server&#34;&gt;dart-analysis-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scala&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/typescript&#34;&gt;typescript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;typescript, javascript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/ocaml/ocaml-lsp&#34;&gt;ocamllsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ocaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang-ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;erlang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/latex-lsp/texlab&#34;&gt;texlab&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;latex&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that &lt;code&gt;org.eclipse.jdt.ls.product/target/repository/bin&lt;/code&gt; is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clojure-lsp/clojure-lsp&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;clojure&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/bash-lsp/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/johnsoncodehk/volar&#34;&gt;volar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;vue&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server&#34;&gt;sumneko&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure &lt;code&gt;bin&lt;/code&gt; under sumneko installation is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/chemzqm/wxml-languageserver&#34;&gt;wxml-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;wxml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-html-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;html&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-css-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;css&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;TODO:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Code action&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Show signature help with eldoc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features that won&#39;t be supported&lt;/h3&gt; &#xA;&lt;p&gt;The goal of lsp-bridge is to become the fastest LSP client in Emacs, not a complete implementation of LSP protocol.&lt;/p&gt; &#xA;&lt;p&gt;Emacs can do better for the following tasks, we will not reinvent the wheel in lsp-bridge:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Code formatting: each LSP server has its own formatting specification, we can gain finer control using Emacs&#39; builtin formatting tool.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting: &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;Tree-sitter&lt;/a&gt; is a wonderful incremental parsing library for syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;Xref: Xref&#39;s mechanism is simultaneously. lsp-bridge is completely asynchronous, recommended to use wrap function to uniformly key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Join development&lt;/h2&gt; &#xA;&lt;p&gt;The following is the framework of lsp-bridge:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/framework.png&#34;&gt; &#xA;&lt;p&gt;The following is the directory structure of the lsp-bridge project:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elisp main logic part that provides custom options and elisp functions for python sub-process calls like code jumping, renaming, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-epc.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Communicating with lsp-bridge python sub-process, which mainly implements elisp IPC to connect to python EPC for data serialization, sending, receiving, and deserialization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-ref.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Framework of code referencing, providing references viewing, batch renames, regex filtering of reference results, etc. The core code is forked from color-rg.el&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-orderless.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fuzzy search for completion items, i.e. for long candidate you do not need to type the word in correct order to get the correct item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-icon.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rendering the completion menu icons, which is used to distinguish different types of completion options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-jdtls.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provide java language third-party library jumping function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python main logic part that provides event loop, message scheduling and status management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/fileaction.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tracking the status of each file, processing LSP response messages, calling Emacs elisp function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/lspserver.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LSP message processing module, mainly to analyze, send and receive LSP messages, and ensure that the sequence of LSP requests conforms with the LSP protocol specification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/utils.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Utility functions of convenience for each module call&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/mergedeep.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON information merger is mainly used to send custom options to LSP server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/hanlder/&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The implementation of sending and receiving LSP message, where &lt;strong&gt;init&lt;/strong&gt;.py is a base class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;langserver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The configurations of the LSP servers, each server corresponding to a JSON file that defines the name of the server, language ID, starting command, options, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/&#34;&gt;LSP Specification&lt;/a&gt; and &lt;a href=&#34;https://manateelazycat.github.io/emacs/2022/05/12/lsp-bridge.html&#34;&gt;The Design of lsp-bridge&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;Then turn on option &lt;code&gt;lsp-bridge-enable-log&lt;/code&gt; and happy hacking! ;)&lt;/p&gt; &#xA;&lt;h2&gt;Report bug&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;emacs -q&lt;/code&gt; and load a minimal setup with only lsp-bridge to verify that the bug is reproducible. If &lt;code&gt;emacs -q&lt;/code&gt; works fine, probably something is wrong with your Emacs config.&lt;/p&gt; &#xA;&lt;p&gt;If the problem still exists, please report it &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/issues/new&#34;&gt;here&lt;/a&gt; with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content, it contains many clues that can help us locate the problem faster.&lt;/p&gt; &#xA;&lt;p&gt;If you get a segfault error, please use the following way to collect crash information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install gdb and turn on option &lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the command &lt;code&gt;lsp-bridge-stop-process&lt;/code&gt; to stop the current process&lt;/li&gt; &#xA; &lt;li&gt;Restart lsp-bridge, send issue with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content when next crash&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributor&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=manateelazycat/lsp-bridge&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>rougier/nano-emacs</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/rougier/nano-emacs</id>
    <link href="https://github.com/rougier/nano-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GNU Emacs / N Λ N O - Emacs made simple&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;GNU Emacs / N Λ N O&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GNU Emacs / N Λ N O&lt;/strong&gt; is a set of configuration files for GNU Emacs such as to provide a nice and consistent look and feel as shown below. It is based on design principles I described in the article &#34;&lt;a href=&#34;https://arxiv.org/abs/2008.06030&#34;&gt;On the design of text Editors&lt;/a&gt;&#34; that is available on arXiv. The light theme is based on &lt;a href=&#34;https://material.io/&#34;&gt;Material colors&lt;/a&gt; and the dark theme is based on &lt;a href=&#34;https://www.nordtheme.com/&#34;&gt;Nord colors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The philosophy of nano emacs is to stick as much as possible to vanilla emacs without introducing too much dependencies (or none if possible) and to keep it modular enough. The idea is for users to copy the part they are interested in such as to include them in their own configuration.&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-emacs-light.png&#34; width=&#34;47.5%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-emacs-dark.png&#34; width=&#34;47.5%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Nano Emacs is quite close to my other project &lt;a href=&#34;https://github.com/rougier/elegant-emacs&#34;&gt;Elegant Emacs&lt;/a&gt; which might be considered to be an early prototype.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You need a recent version of &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; and to have the &lt;a href=&#34;https://fonts.google.com/specimen/Roboto+Mono&#34;&gt;Roboto Mono&lt;/a&gt; and &lt;a href=&#34;https://fonts.google.com/specimen/Fira+Code&#34;&gt;Fira Code&lt;/a&gt; fonts installed on your system. There are no other dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Quick test&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to test nano emacs is to clone the directory on your desktop and to type (from inside the cloned repository):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ emacs -q -l nano.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;If you like the result, you can either manually merge the contents of &lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano.el&#34;&gt;nano.el&lt;/a&gt; into your emacs configuration file, or install nano through the &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;h4&gt;Manual Installation&lt;/h4&gt; &#xA;&lt;p&gt;To merge the &lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano.el&#34;&gt;nano.el&lt;/a&gt; contents with your emacs configuration, you&#39;ll need to modify the &lt;code&gt;load-path&lt;/code&gt; to include the nano emacs repository and then call for the different modules. The only mandatory module is &lt;code&gt;nano-faces&lt;/code&gt; that defines 6 faces that are used in other modules.&lt;/p&gt; &#xA;&lt;h4&gt;Installation through straight.el&lt;/h4&gt; &#xA;&lt;p&gt;To install nano through &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;, install straight.el, and then add the following snippet into your emacs configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA;  &#39;(nano-emacs :type git :host github :repo &#34;rougier/nano-emacs&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from here, you may either &lt;code&gt;(require &#39;nano)&lt;/code&gt; to pull in the default nano configuration, or call for the different modules. The only mandatory module is &lt;code&gt;nano-faces&lt;/code&gt; that defines 6 faces that are used in other modules.&lt;/p&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the default font, the proportional font and the font-size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nano-font-family-monospaced &#34;Roboto Mono&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the default monospaced font. Defaults to Roboto Mono. Note that if you set this to a font without proper light or bold weights you will lose many of the key design features of nano-emacs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nano-font-family-proportional nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set this to the name (as a string) of your favorite variable-width font to enable &lt;code&gt;variable-width-mode&lt;/code&gt; and &lt;code&gt;mixed-pitch-mode&lt;/code&gt;. If you have already set this somewhere else, you can use &lt;code&gt;(setq nano-font-family-proportional (face-attribute &#39;variable-width :family))&lt;/code&gt; to use the same one.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nano-font-size 14)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the font-size of most faces in nano-emacs.&lt;/p&gt; &#xA;&lt;h4&gt;Note about load-order&lt;/h4&gt; &#xA;&lt;p&gt;Because of the way nano-emacs is set up, you need to set these variables &lt;em&gt;before&lt;/em&gt; you call &lt;code&gt;(nano-faces)&lt;/code&gt; and &lt;code&gt;(nano-theme)&lt;/code&gt;. If you change one of these variables after load/calling &lt;code&gt;(nano-faces)&lt;/code&gt; and &lt;code&gt;(nano-theme)&lt;/code&gt;, you will need to call them again for these changes to take effect.&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano.el&#34;&gt;nano.el&lt;/a&gt;&lt;/strong&gt; (optional)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module is mostly used to test nano emacs locally. Its content is supposed to be merged into an existing emacs configuration. See &lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/#Quick-test&#34;&gt;Quick test&lt;/a&gt; section above.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mandatory&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-base-colors.el&#34;&gt;nano-base-colors.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines the fundamental colors of nano theme. If your Emacs has a theme or color-scheme, make sure its loaded before you load nano-faces so that its colors are used by nano.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-faces.el&#34;&gt;nano-faces.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines the fundamental faces of nano theme. If your Emacs has a theme or color-scheme, make sure its loaded before you load nano-faces so that its colors are used by nano.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-theme-light.el&#34;&gt;nano-theme-light.el&lt;/a&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-theme-dark.el&#34;&gt;nano-theme-dark.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Theses modules define light and dark themes respectively by overriding the base colors. If your Emacs is not themed, you are encouraged to try one of these.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-theme.el&#34;&gt;nano-theme.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module derives faces for several popular emacs modes from the nano faces. You can either use them all by calling &lt;code&gt;(nano-theme)&lt;/code&gt;, or pick what you want by calling your selection of &lt;code&gt;(nano-theme--&lt;/code&gt; functions.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-help.el&#34;&gt;nano-help.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module provides a function to display a small help message in the echo area.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-splash.el&#34;&gt;nano-splash.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module provides a splash screen when emacs is started.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-modeline.el&#34;&gt;nano-modeline.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines a header line that is mode dependent and takes care of hiding the modeline when necessary.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-layout.el&#34;&gt;nano-layout.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines the overall layout of an emacs frame, defining default font, fringes, margins, etc.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-defaults.el&#34;&gt;nano-defaults.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules provides a set of sane default settings for Emacs.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-session.el&#34;&gt;nano-session.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules configures Emacs such that a session is saved from one run to the other.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-bindings.el&#34;&gt;nano-bindings.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules provides a reduced set of keybindings for a few common commands.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-counsel.el&#34;&gt;nano-counsel.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules configures the &lt;a href=&#34;https://elpa.gnu.org/packages/counsel.html&#34;&gt;counsel package&lt;/a&gt; that needs to have been &lt;strong&gt;installed&lt;/strong&gt; by user.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-colors.el&#34;&gt;nano-colors.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module provides a collection of colors palettes (&lt;a href=&#34;https://yeun.github.io/open-color/&#34;&gt;open colors&lt;/a&gt;, &lt;a href=&#34;https://material.io/&#34;&gt;material colors&lt;/a&gt;, &lt;a href=&#34;https://www.nordtheme.com/&#34;&gt;nord colors&lt;/a&gt;) with functions for easily accessing them.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Experimental&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-mu4e.el&#34;&gt;nano-mu4e.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This package setup the look and feel of mu4e.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-mu4e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-minibuffer.el&#34;&gt;nano-minibuffer.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Minibuffer using &lt;a href=&#34;https://github.com/muffinmad/emacs-mini-frame&#34;&gt;mini-frame&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-minibuffer-light.png&#34; width=&#34;47.5%&#34;&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-minibuffer-dark.png&#34; width=&#34;47.5%&#34;&gt; &#xA;  &lt;/div&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-command.el&#34;&gt;nano-command.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This package provides an experimental command line prompt in the header line. It has not history nor completion but can be used for one line input such as org-capture.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-command.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-agenda.el&#34;&gt;nano-agenda.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;An experimental interactive mini agenda that displays side by side a mini calendar on the left and timestamped org entries on the right.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-agenda.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related works&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mclear-tools/bespoke-themes&#34;&gt;Bespoke theme&lt;/a&gt; Custom medium contrast light and dark themes inspired by nano emacs, elegant emacs, Nord and Solarized themes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>matsievskiysv/vimish-fold</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/matsievskiysv/vimish-fold</id>
    <link href="https://github.com/matsievskiysv/vimish-fold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vim-like text folding for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vimish Fold&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/vimish-fold&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/vimish-fold-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/seregaxvm/vimish-fold/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/seregaxvm/vimish-fold/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seregaxvm/vimish-fold/gh-pages/vimish-fold.png&#34; alt=&#34;Vimish Fold&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a package to perform text folding like in Vim. It has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;folding of active regions;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;good visual feedback: it&#39;s obvious which part of text is folded;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;create folds from regions between &lt;code&gt;{{{&lt;/code&gt; &lt;code&gt;}}}&lt;/code&gt; automatically (marks are customizable);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;persistence by default: when you kill a buffer your folds don&#39;t disappear;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;persistence scales well, you can work on hundreds of files with lots of folds without adverse effects;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;it does not break indentation;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;folds can be toggled from folded state to unfolded and back very easily;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;quick navigation between existing folds;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;you can use mouse to unfold folds (good for beginners and not only for them);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;for fans of the &lt;code&gt;avy&lt;/code&gt; package: you can use &lt;code&gt;avy&lt;/code&gt; to fold text with minimal number of key strokes!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to install the package manually, download or clone it and put on Emacs&#39; &lt;code&gt;load-path&lt;/code&gt;, then you can require it in your init file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;vimish-fold)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s available via MELPA, so you can just &lt;kbd&gt;M-x package-install RET vimish-fold RET&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First of all, create global key bindings for most important functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold&lt;/code&gt; creates folds;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-delete&lt;/code&gt; deletes folds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When point is inside of a fold you can toggle it with &lt;kbd&gt;C-`&lt;/kbd&gt;, so usually you don&#39;t need to bind toggling functions.&lt;/p&gt; &#xA;&lt;p&gt;Minimal code creating the keybindings might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &#34;&amp;lt;menu&amp;gt; v f&#34;) #&#39;vimish-fold)&#xA;(global-set-key (kbd &#34;&amp;lt;menu&amp;gt; v v&#34;) #&#39;vimish-fold-delete)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course you can choose different key bindings.&lt;/p&gt; &#xA;&lt;p&gt;Other functions that constitute API of the package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-unfold&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-unfold-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-refold&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-refold-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-delete-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-toggle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-toggle-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-avy&lt;/code&gt; (requires &lt;code&gt;avy&lt;/code&gt; package)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vimish-fold-from-marks&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get persistent folds you need to enable a minor mode provided by the package. You can turn &lt;code&gt;vimish-fold-mode&lt;/code&gt; selectively for modes where you want to have persistent folding, or simply activate it everywhere:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(vimish-fold-global-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of customization options that are available via &lt;kbd&gt;M-x customize-group vimish-fold&lt;/kbd&gt;. Everything is carefully documented, as always.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This work is based on Magnar Sveen&#39;s &lt;code&gt;fold-this&lt;/code&gt; package to some extent, so I think I should include him as an author, thanks Magnar!&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2015–present Mark Karpov&lt;br&gt; Copyright © 2012–2013 Magnar Sveen&lt;/p&gt; &#xA;&lt;p&gt;Distributed under GNU GPL, version 3.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>syl20bnr/spacemacs</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/syl20bnr/spacemacs</id>
    <link href="https://github.com/syl20bnr/spacemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it&#39;s Emacs *and* Vim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;top&#34; id=&#34;fork-destination-box&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://develop.spacemacs.org&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&#34; alt=&#34;Made with Spacemacs&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://github.com/syl20bnr/spacemacs/raw/655e2886d88f79f4da01d607d29342e7447cad65/assets/gplv3.png&#34; alt=&#34;GPLv3 Software&#34; align=&#34;right&#34; width=&#34;70&#34; height=&#34;28&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.twitter.com/spacemacs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/tXSoThF.png&#34; alt=&#34;Twitter&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/title2.png&#34; alt=&#34;Spacemacs&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#core-pillars&#34;&gt;philosophy&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#who-can-benefit-from-this&#34;&gt;for whom?&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#screenshots&#34;&gt;screenshots&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION.html&#34;&gt;documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&#34;&gt;contribute&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#achievements&#34;&gt;achievements&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join Chat.svg&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/p4MddFu6Ag&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml&#34;&gt;&lt;img src=&#34;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml/badge.svg?branch=develop&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paypal-Donate-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shop.spreadshirt.com/spacemacs-shop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Shop-T--Shirts-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.slant.co/topics/12/~what-are-the-best-programming-text-editors&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slant-Recommend-ff69b4.svg?sanitize=true&#34; alt=&#34;Recommend it&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick Install&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This assumes you don&#39;t have an existing Emacs setup and want to run Spacemacs as your config. If you do have one, look at the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;full installation instructions&lt;/a&gt; for other options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %appdata%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $env:appdata/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#getting-help&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#emacs&#34;&gt;Emacs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#linux-distros&#34;&gt;Linux distros&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#macos&#34;&gt;macOS&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-emacs&#34;&gt;Install emacs&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-emacs-plus&#34;&gt;Using emacs-plus&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-emacs-mac&#34;&gt;Using emacs-mac&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-cask&#34;&gt;Using cask&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#other-ways&#34;&gt;Other ways&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-source-code-pro-font&#34;&gt;Install Source Code Pro font&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs&#34;&gt;Install Spacemacs&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#windows&#34;&gt;Windows&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs-in-windows&#34;&gt;Install Spacemacs in Windows&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#default-installation&#34;&gt;Default installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#alternative-installations&#34;&gt;Alternative installations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#modify-home-environment-variable&#34;&gt;Modify HOME environment variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#modify-spacemacs-start-directory-variable&#34;&gt;Modify spacemacs-start-directory variable&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#spacemacs-logo&#34;&gt;Spacemacs logo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#update&#34;&gt;Update&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#rolling-update-on-develop&#34;&gt;Rolling update (on develop)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#automatic-update-on-master-branch&#34;&gt;Automatic update (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#manual-update-on-master-branch&#34;&gt;Manual update (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#revert-to-a-specific-version-on-master-branch&#34;&gt;Revert to a specific version (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#quotes&#34;&gt;Quotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#contributions&#34;&gt;Contributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#communities&#34;&gt;Communities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#spacemacs-everywhere&#34;&gt;Spacemacs Everywhere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#supporting-spacemacs&#34;&gt;Supporting Spacemacs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is a new way of experiencing Emacs -- it&#39;s a sophisticated and polished set-up, focused on ergonomics, mnemonics and consistency.&lt;/p&gt; &#xA;&lt;p&gt;Just clone and launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer&#39;s &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to try.&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Being able to quickly switch between input styles, makes Spacemacs a great tool for pair-programming.&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs is currently in beta, and any contributions are very welcome.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/spacemacs-python.png&#34; alt=&#34;spacemacs_python&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access the Spacemacs documentation with &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you&#39;ll love the distraction free UI and its functional mode-line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing the &lt;kbd&gt;space bar&lt;/kbd&gt; or &lt;kbd&gt;alt-m&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like &lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the project commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely organised in configuration layers following a set of &lt;a href=&#34;https://develop.spacemacs.org/doc/CONVENTIONS&#34;&gt;conventions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Comprehensive documentation is available for each layer by pressing &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also check the &lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION&#34;&gt;general documentation&lt;/a&gt;, &lt;a href=&#34;https://develop.spacemacs.org/doc/QUICK_START&#34;&gt;quick start guide&lt;/a&gt; and the &lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Help&lt;/h1&gt; &#xA;&lt;p&gt;If you need help, ask your question in the &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt; and a member of the community will help you out.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer IRC, connect to the &lt;a href=&#34;https://irc.gitter.im/&#34;&gt;Gitter Chat IRC server&lt;/a&gt; and join the &lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;Last but not least there are a lot of high class tutorials available on YouTube:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jack of Some&#39;s Spacemacs related channel &lt;a href=&#34;https://www.youtube.com/watch?v=r-BHx7VNX5s&amp;amp;list=PLd_Oyt6lAQ8Rxb0HUnGbRrn6R4Cdt2yoI&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GDQuest&#39;s Game Design oriented tutorials to Spacemacs &lt;a href=&#34;https://www.youtube.com/watch?v=hCNOB5jjtmc&amp;amp;list=PLhqJJNjsQ7KFkMVBunWWzFD8SlH714qm4&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Practicalli&#39;s Clojure tutorials based on Spacemacs &lt;a href=&#34;https://www.youtube.com/watch?v=ZKuQDrQLAnc&amp;amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eivind Fonn&#39;s classic Spacemacs ABC &lt;a href=&#34;https://www.youtube.com/watch?v=ZFV5EqpZ6_s&amp;amp;list=PLrJ2YN5y27KLhd3yNs2dR8_inqtEiEweE&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is an extension of a popular text editor called Emacs. Thus you need to first install base Emacs and then download the Spacemacs extension files with Git.&lt;/p&gt; &#xA;&lt;h2&gt;Emacs&lt;/h2&gt; &#xA;&lt;p&gt;Spacemacs requires Emacs 27.1 or above. The development version of Emacs is not &lt;em&gt;officially&lt;/em&gt; supported, but it should nevertheless be expected to work.&lt;/p&gt; &#xA;&lt;p&gt;Some modes require third-party tools that you&#39;ll have to install via your favorite package manager.&lt;/p&gt; &#xA;&lt;h3&gt;Linux distros&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;emacs&lt;/code&gt; package with your linux distributions package manager.&lt;/p&gt; &#xA;&lt;p&gt;Do not install the &lt;code&gt;xemacs&lt;/code&gt; package. It&#39;s not supported by Spacemacs. XEmacs is an old fork of Emacs. The X in its name is unrelated to X11.&lt;/p&gt; &#xA;&lt;p&gt;Emacs has graphical support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some linux distributions support only emacs versions older than 27.1. In this case you should &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html&#34;&gt;built from source&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;h4&gt;Install emacs&lt;/h4&gt; &#xA;&lt;h5&gt;Using emacs-plus&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap d12frosted/emacs-plus&#xA;&#xA;# to install Emacs 27&#xA;brew install emacs-plus@27 --with-spacemacs-icon&#xA;# or to install Emacs 28&#xA;brew install emacs-plus@28 --with-spacemacs-icon&#xA;&#xA;brew link emacs-plus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using emacs-mac&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap railwaycat/emacsmacport&#xA;brew install emacs-mac&#xA;brew link emacs-mac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using cask&lt;/h5&gt; &#xA;&lt;p&gt;Homebrew now recommends to use the cask version with the following message: &#34;Please try the Cask for a better-supported Cocoa version&#34;. To install the cask version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install --cask emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs a pre-built package from &lt;a href=&#34;https://emacsformacosx.com/&#34;&gt;https://emacsformacosx.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Other ways&lt;/h5&gt; &#xA;&lt;p&gt;If you&#39;re not comfortable with the ways mentioned above, then &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsForMacOS#toc12&#34;&gt;EmacsWiki&lt;/a&gt; lists down a few ways to install Emacs for macOS.&lt;/p&gt; &#xA;&lt;h4&gt;Install Source Code Pro font&lt;/h4&gt; &#xA;&lt;p&gt;Once Emacs is installed, run the following commands in the terminal to install the default Source Code Pro font:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap homebrew/cask-fonts&#xA;brew install --cask font-source-code-pro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install Spacemacs&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; After completing the Spacemacs &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;install process&lt;/a&gt;, then it&#39;s also recommended to add the &lt;a href=&#34;https://develop.spacemacs.org/layers/+os/osx/README.html&#34;&gt;osx layer&lt;/a&gt; to your &lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#dotfile-configuration&#34;&gt;dotfile&lt;/a&gt;. Installation instructions are available in the documentation for the &lt;a href=&#34;https://develop.spacemacs.org/layers/+os/osx/README.html&#34;&gt;osx layer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the installed version of GnuTLS securely installing emacs packages may fail. In this case it is possible to install using &lt;code&gt;emacs --insecure&lt;/code&gt;. However be aware that this means your packages will be transferred using http, use at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;You might also have some issues when doing some search on your projects, you probably want to install GNU &lt;a href=&#34;https://formulae.brew.sh/formula/ripgrep&#34;&gt;ripgrep&lt;/a&gt; through homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Download the official 64-bit (x86_64) stable builds from the &lt;a href=&#34;https://ftp.gnu.org/gnu/emacs/windows/&#34;&gt;GNU FTP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also need &lt;code&gt;gzip&lt;/code&gt; and put it in your path, to download it go to the &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/gzip.htm&#34;&gt;GNUWin32 project page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Install Spacemacs in Windows&lt;/h4&gt; &#xA;&lt;p&gt;By default Emacs looks for the &lt;code&gt;.emacs.d&lt;/code&gt; directory in: &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone Spacemacs to the Roaming directory:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %appdata%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows PowerShell prompt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $env:appdata/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or if a &lt;code&gt;HOME&lt;/code&gt; environment variable has been configured, that points to your user directory: &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Clone Spacemacs to the &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; directory:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %homepath%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows PowerShell prompt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $home/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If the following error occurs after starting Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Fix it by changing the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;from Properties select the Tab “Security”,&lt;/li&gt; &#xA;   &lt;li&gt;select the button “Advanced”,&lt;/li&gt; &#xA;   &lt;li&gt;select the Tab “Owner”&lt;/li&gt; &#xA;   &lt;li&gt;change the owner to your account name&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Source: &lt;a href=&#34;https://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For efficient searches we recommend installing &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Depending on the installed version of GnuTLS securely installing emacs packages may fail. In this case it is possible to install using &lt;code&gt;emacs --insecure&lt;/code&gt;. However be aware that this means your packages will be transferred using http, use at your own risk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The period (dot) before a file or folder name, means that it&#39;s hidden. To show hidden files and folders:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press the Windows key&lt;/li&gt; &#xA;   &lt;li&gt;Type &lt;code&gt;file explorer options&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select the &lt;code&gt;View&lt;/code&gt; tab at the top&lt;/li&gt; &#xA;   &lt;li&gt;Check &lt;code&gt;Show hidden files, folders and drives&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;Default installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have an existing Emacs configuration, back it up first by running the following code in your terminal:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~&#xA;mv .emacs.d .emacs.d.bak&#xA;mv .emacs .emacs.bak&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t forget to backup and &lt;em&gt;remove&lt;/em&gt; the &lt;code&gt;~/.emacs&lt;/code&gt; file. Otherwise Spacemacs &lt;strong&gt;WILL NOT&lt;/strong&gt; be able to load. Because that file prevents Emacs from loading the proper initialization file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository with &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note: Windows users&lt;/strong&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs-in-windows&#34;&gt;Windows section&lt;/a&gt; for the correct clone path.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or in case you have a limited internet connection or speed,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Install the default fonts&lt;/p&gt; &lt;p&gt;It&#39;s recommended to install &lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro&#34;&gt;Source Code Pro&lt;/a&gt; by Adobe, as the default font. It ensures that, for example the symbols on the modeline (bottom bar) looks correct. It&#39;s also recommended to use a &#34;Fallback font&#34;. These depend on the system:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GNU/Linux: &lt;em&gt;NanumGothic&lt;/em&gt; (package named &lt;em&gt;fonts-nanum&lt;/em&gt; on Debian, for example)&lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;em&gt;Arial Unicode MS&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;em&gt;MS Gothic&lt;/em&gt; or &lt;em&gt;Lucida Sans Unicode&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If the modeline doesn&#39;t look similar to the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&#34;&gt;picture at the top of this page&lt;/a&gt;, then make sure you have the correct fallback font installed.&lt;/p&gt; &lt;p&gt;If you&#39;re running in a terminal then you&#39;ll also need to change the terminals font settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch Emacs. Spacemacs will automatically install the packages it requires.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch Emacs, and answer the questions in the Dotfile wizard installer. If you are new to Emacs and Spacemacs, then it&#39;s fine to just accept the default choices. It&#39;s easy to try the other choices later, without having to reinstall Spacemacs. They can be changed in the dotfile &lt;code&gt;~/.spacemacs&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After answering the questions, then Spacemacs starts downloading and installing the packages it requires. When the packages have been installed. Restart Emacs to complete the installation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; If you are behind a firewall or similar and you get an error regarding package downloads then you may try to disable the HTTPS protocol by starting Emacs with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;emacs --insecure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but this should be a last resort because of the security implications.&lt;/p&gt; &#xA;&lt;p&gt;You can set the &lt;code&gt;dotspacemacs-elpa-https&lt;/code&gt; variable to &lt;code&gt;nil&lt;/code&gt; in your dotfile &lt;code&gt;~/.spacemacs&lt;/code&gt; but this has the same security implications as the insecure flag. You may also want to clear out your &lt;code&gt;.emacs.d/elpa&lt;/code&gt; directory before doing this, so that any corrupted packages you may have downloaded will be re-installed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;error: Package &#39;package-build-&#39; is unavailable&lt;/code&gt; may occur due to heavy network taffic. You can fix it by setting the &lt;code&gt;dotspacemacs-elpa-timeout&lt;/code&gt; variable to &lt;code&gt;70&lt;/code&gt; in your dotfile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Warning (bytecomp)&lt;/code&gt; and other compilation warnings are perfectly normal. If you&#39;re curious, you can find out why these occur &lt;a href=&#34;https://github.com/quelpa/quelpa/issues/90#issuecomment-137982713&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the mode-line turns red then be sure to consult the &lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternative installations&lt;/h2&gt; &#xA;&lt;p&gt;There are currently, two supported, alternative locations, for a Spacemacs configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Modify HOME environment variable&lt;/h3&gt; &#xA;&lt;p&gt;This solution is ideal for quickly trying Spacemacs without compromising your existing configuration. Clone Spacemacs outside the Emacs dotdirectory &lt;code&gt;~/.emacs.d&lt;/code&gt; and modify the HOME environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir ~/spacemacs&#xA;git clone https://github.com/syl20bnr/spacemacs.git ~/spacemacs/.emacs.d&#xA;HOME=~/spacemacs emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using the Fish shell, then you&#39;ll need to modify the last command to: &lt;code&gt;env HOME=$HOME/spacemacs emacs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Modify spacemacs-start-directory variable&lt;/h3&gt; &#xA;&lt;p&gt;This solution is better suited to &#34;embed&#34; Spacemacs into your own configuration. If you&#39;ve cloned Spacemacs into &lt;code&gt;~/.emacs.d/spacemacs/&lt;/code&gt;, then drop the following lines in the &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq spacemacs-start-directory &#34;~/.emacs.d/spacemacs/&#34;)&#xA;(load-file (concat spacemacs-start-directory &#34;init.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Spacemacs logo&lt;/h2&gt; &#xA;&lt;p&gt;For Linux users, create &lt;code&gt;spacemacs.desktop&lt;/code&gt; in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; using &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/etc/emacs.desktop&#34;&gt;this&lt;/a&gt; as a reference. Change the &lt;code&gt;Name&lt;/code&gt; parameter to &lt;code&gt;Name=Spacemacs&lt;/code&gt; and the &lt;code&gt;Icon&lt;/code&gt; parameter to &lt;code&gt;Icon=/PATH/TO/EMACSD/core/banners/img/spacemacs.png&lt;/code&gt; where &lt;code&gt;PATH/TO/EMACSD&lt;/code&gt; is the path to your &lt;code&gt;.emacs.d&lt;/code&gt; directory, usually &lt;code&gt;~/.emacs.d&lt;/code&gt; or &lt;code&gt;~/.config/emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For macOS users, you need to &lt;a href=&#34;https://github.com/nashamri/spacemacs-logo&#34;&gt;download the .icns version of the logo&lt;/a&gt;, then &lt;a href=&#34;https://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/&#34;&gt;change the logo on the Dock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Update&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs supports two different update schemes, the default is a rolling update scheme based on the latest version of packages available. This version can be found on the &lt;code&gt;develop&lt;/code&gt; branch and is updated by a simple git pull.&lt;/p&gt; &#xA;&lt;p&gt;The second depreciated one is a fixed version scheme which is based on a stable set of packages. This version can be found on the &lt;code&gt;master&lt;/code&gt; branch and will show a notification when a new version is available. Be warned this has not been updated in a long time now so packages will be very old.&lt;/p&gt; &#xA;&lt;h2&gt;Rolling update (on develop)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull --rebase&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Automatic update (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;When a new version is available then a little arrow appears in the mode-line.&lt;/p&gt; &#xA;&lt;p&gt;Its color depends on the number of versions that have been released since your last update. Green means that you have a recent version, orange and red means that you have an older version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/powerline-update.png&#34; alt=&#34;powerline_update&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click on the arrow to update Spacemacs to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Manual update (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;Remove the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; angle brackets when you&#39;re typing the lines below into your shell. And replace the text: &#34;tag version which you are updating to&#34; with a tagged version. This page lists the &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/tags&#34;&gt;latest tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git fetch&#xA;git reset --hard &amp;lt;tag version which you are updating to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Revert to a specific version (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;To revert to a specific version, just checkout the corresponding branch. For instance to revert to version &lt;code&gt;0.200&lt;/code&gt;, type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git checkout origin/release-0.200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;After updating Spacemacs (either manually or automatically), then you also should check if any updates are available for your packages. On the Spacemacs Home Buffer &lt;kbd&gt;SPC b h&lt;/kbd&gt;, click (press &lt;kbd&gt;RET&lt;/kbd&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; button.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quotes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6&#34;&gt;Quote&lt;/a&gt; by &lt;a href=&#34;https://github.com/ashnur&#34;&gt;ashnur&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis&#xA;on the deck as a freerider.»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb&#34;&gt;Quote&lt;/a&gt; by &lt;a href=&#34;https://github.com/deuill&#34;&gt;deuill&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT&#xA;&#xA; That is all»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to date and to propose great and useful configurations for all the things!&lt;/p&gt; &#xA;&lt;p&gt;Before contributing be sure to consult the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;https://develop.spacemacs.org/doc/CONVENTIONS&#34;&gt;conventions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Communities&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs.stackexchange.com/questions/tagged/spacemacs&#34;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/spacemacs&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Spacemacs Everywhere&lt;/h1&gt; &#xA;&lt;p&gt;Once you&#39;ve learned the Spacemacs key bindings, you can use them in other IDEs/tools, thanks to the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcoIeni/intellimacs&#34;&gt;Intellimacs&lt;/a&gt; - Spacemacs&#39; like key bindings for IntelliJ platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcoIeni/spaceclipse&#34;&gt;Spaceclipse&lt;/a&gt; - Spacemacs’ like key bindings for Eclipse&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpaceVim/SpaceVim&#34;&gt;SpaceVim&lt;/a&gt; - A community-driven modular vim distribution&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VSpaceCode/VSpaceCode&#34;&gt;VSpaceCode&lt;/a&gt; - Spacemacs’ like key bindings for Visual Studio Code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the initialization and core files&lt;/li&gt; &#xA; &lt;li&gt;all the layer files&lt;/li&gt; &#xA; &lt;li&gt;the documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the packages shipped in this repository, you can refer to the files header.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nashamri/spacemacs-logo&#34;&gt;Spacemacs logo&lt;/a&gt; by &lt;a href=&#34;https://github.com/nashamri&#34;&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Supporting Spacemacs&lt;/h1&gt; &#xA;&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt; &#xA;&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs and more in the &lt;a href=&#34;https://shop.spreadshirt.com/spacemacs-shop&#34;&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to show your support financially, then you can contribute to &lt;a href=&#34;https://salt.bountysource.com/teams/spacemacs&#34;&gt;Bountysource&lt;/a&gt;, or buy a drink for the maintainer by clicking on the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#top&#34;&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you used spacemacs in a project, and you want to show that fact, you can use the spacemacs badge: &lt;a href=&#34;https://develop.spacemacs.org&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&#34; alt=&#34;Built with Spacemacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Markdown:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](https://develop.spacemacs.org)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For HTML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&#34;https://develop.spacemacs.org&#34;&amp;gt;&amp;lt;img alt=&#34;Built with Spacemacs&#34; src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg&#34; /&amp;gt;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Org-mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;[[https://develop.spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ch11ng/exwm</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/ch11ng/exwm</id>
    <link href="https://github.com/ch11ng/exwm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs X Window Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Emacs X Window Manager&lt;/h1&gt; &#xA;&lt;p&gt;EXWM (Emacs X Window Manager) is a full-featured tiling X window manager for Emacs built on top of &lt;a href=&#34;https://github.com/ch11ng/xelb&#34;&gt;XELB&lt;/a&gt;. It features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully keyboard-driven operations&lt;/li&gt; &#xA; &lt;li&gt;Hybrid layout modes (tiling &amp;amp; stacking)&lt;/li&gt; &#xA; &lt;li&gt;Dynamic workspace support&lt;/li&gt; &#xA; &lt;li&gt;ICCCM/EWMH compliance&lt;/li&gt; &#xA; &lt;li&gt;(Optional) RandR (multi-monitor) support&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Builtin system tray&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Builtin input method&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check out the &lt;a href=&#34;https://github.com/ch11ng/exwm/wiki/Screenshots&#34;&gt;screenshots&lt;/a&gt; to get an overview of what EXWM is capable of, and the &lt;a href=&#34;https://github.com/ch11ng/exwm/wiki&#34;&gt;user guide&lt;/a&gt; for a detailed explanation of its usage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you install EXWM from source, it&#39;s recommended to install XELB also from source (otherwise install both from GNU ELPA).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brotzeit/rustic</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/brotzeit/rustic</id>
    <link href="https://github.com/brotzeit/rustic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rust development environment for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rustic&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/rustic&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/rustic-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brotzeit/rustic/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/brotzeit/rustic/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#rustic&#34;&gt;Rustic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#straight&#34;&gt;straight&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#remote&#34;&gt;remote&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#compilation&#34;&gt;Compilation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#navigating-errors&#34;&gt;Navigating errors&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#default-directory&#34;&gt;default directory&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#faces&#34;&gt;Faces&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#rustc-errors&#34;&gt;rustc errors&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#rustfmt&#34;&gt;Rustfmt&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#change-default-arguments&#34;&gt;Change default arguments&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#edition-2018&#34;&gt;edition 2018&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#remote-1&#34;&gt;remote&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#lsp&#34;&gt;LSP&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#server&#34;&gt;Server&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#automatic-server-installation&#34;&gt;Automatic server installation&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#client&#34;&gt;Client&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#lsp-execute-code-action&#34;&gt;&lt;code&gt;lsp-execute-code-action&lt;/code&gt;&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#applying-code-actions&#34;&gt;Applying code actions&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#auto-import&#34;&gt;Auto import&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#macro-expansion&#34;&gt;Macro expansion&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#lsp--tramp&#34;&gt;LSP + TRAMP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#detached-file&#34;&gt;Detached file&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#cargo&#34;&gt;Cargo&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#edit&#34;&gt;Edit&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#run&#34;&gt;Run&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#outdated&#34;&gt;Outdated&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#expand&#34;&gt;Expand&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#more-cargo-commands&#34;&gt;More cargo commands&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#clippy&#34;&gt;Clippy&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#auto-fixing-before-compilation&#34;&gt;auto-fixing before compilation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#flycheck&#34;&gt;Flycheck&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#lsp-mode-1&#34;&gt;lsp-mode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#org-babel&#34;&gt;Org-babel&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#intro-1&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#lsp-mode-2&#34;&gt;lsp-mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#commands-1&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#parameters&#34;&gt;Parameters&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#crates&#34;&gt;:crates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#features&#34;&gt;:features&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#paths&#34;&gt;:paths&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#toolchain&#34;&gt;:toolchain&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#main&#34;&gt;:main&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#include&#34;&gt;:include&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#use&#34;&gt;:use&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#spinner&#34;&gt;Spinner&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#rust-docs-in-org-mode&#34;&gt;rust docs in org-mode&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#popup&#34;&gt;Popup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#rust-mode&#34;&gt;rust-mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#elisp-tests&#34;&gt;elisp tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;This package is based on &lt;a href=&#34;https://github.com/rust-lang/rust-mode&#34;&gt;rust-mode&lt;/a&gt; and provides additional features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cargo popup&lt;/li&gt; &#xA; &lt;li&gt;multiline error parsing&lt;/li&gt; &#xA; &lt;li&gt;translation of ANSI control sequences through &lt;a href=&#34;https://github.com/atomontage/xterm-color&#34;&gt;xterm-color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;async org babel&lt;/li&gt; &#xA; &lt;li&gt;automatic LSP configuration with &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; or &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cask for testing&lt;/li&gt; &#xA; &lt;li&gt;etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;rustic only shares the rust-mode code from rust-mode.el and rust-utils.el. The other files provide functionality that is similar to some of the features of rustic, however can be considered light-weight compared to some rustic&#39;s functionality.&lt;/p&gt; &#xA;&lt;p&gt;The shared functions and options exist as aliases in the rust-mode and rustic namespace for backwards compatability reasons(rustic has been a fork).&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-syntax-propertize&lt;/code&gt; and &lt;code&gt;adaptive-wrap-prefix-mode&lt;/code&gt; can lead to severe lag when editing larger files (#107)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Simply put &lt;code&gt;(use-package rustic)&lt;/code&gt; in your config and most stuff gets configured automatically. (&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s necessary to include elpa for a package dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq package-archives &#39;((&#34;melpa&#34; . &#34;http://melpa.org/packages/&#34;)&#xA;                         (&#34;gnu&#34; . &#34;http://elpa.gnu.org/packages/&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If ‘spinner-1.7.3’ is unavailable” when trying to install rustic, you need to update GPG keys used by the ELPA package manager. Try installing &lt;a href=&#34;https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html&#34;&gt;gnu-elpa-keyring-update&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you can&#39;t run rust-analyzer or cargo can&#39;t be found, your environment variables probably don&#39;t work in emacs. Try &lt;a href=&#34;https://github.com/purcell/exec-path-from-shell/tree/81125c5adbc903943c016c2984906dc089372a41#usage&#34;&gt;exec-path-from-shell&lt;/a&gt; to fix this.&lt;/p&gt; &#xA;&lt;h3&gt;straight&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raxod502/straight.el#install-packages&#34;&gt;straight.el&lt;/a&gt; clones each of your packages directly from its source. There are good additional &lt;a href=&#34;https://github.crookster.org/switching-to-straight.el-from-emacs-26-builtin-package.el/&#34;&gt;installation instructions&lt;/a&gt; for moving your package management from package.el to straight.&lt;/p&gt; &#xA;&lt;h2&gt;remote&lt;/h2&gt; &#xA;&lt;p&gt;rustfmt and most of the common cargo commands should work remotely. We are currently updating the code base. If you encounter any command that doesn&#39;t work remotely, please open an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/compilation_buffer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to use a Makefile you can either use &lt;code&gt;(setq rustic-compile-command &#34;make&#34;)&lt;/code&gt; or run &lt;code&gt;C-u&lt;/code&gt; + &lt;code&gt;rustic-compile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile&lt;/code&gt; compile project using &lt;code&gt;rustic-compile-command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-recompile&lt;/code&gt; recompile using &lt;code&gt;compilation-arguments&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-send-input&lt;/code&gt; send string to process of current buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-display-method&lt;/code&gt; choose function that displays the compilation buffer (use the function &lt;code&gt;ignore&lt;/code&gt;, if you don&#39;t want the buffer to be displayed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-backtrace&lt;/code&gt; change backtrace verbosity&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-rustflags&lt;/code&gt; set RUSTFLAGS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-command&lt;/code&gt; default command for rust compilation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-command-remote&lt;/code&gt; default command for remote rust compilation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported compile.el variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;compilation-arguments&lt;/li&gt; &#xA; &lt;li&gt;compilation-scroll-output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Navigating errors&lt;/h3&gt; &#xA;&lt;p&gt;Rustic defines a derived compilation-mode. Colors can be customized with several defcustoms. You can use &lt;code&gt;next-error&lt;/code&gt; and &lt;code&gt;compilation-next-error&lt;/code&gt; as for any other compilation buffer.&lt;/p&gt; &#xA;&lt;p&gt;However it&#39;s possible to also jump to line numbers that are displayed at the beginning of a line. This feature is provided by a hook around &lt;code&gt;compile-goto-error&lt;/code&gt;(&lt;code&gt;RET&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;default directory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-compile-directory-method&lt;/code&gt; allows you to set the directory that is used for compilation commands. The default is the current crate which is returned by &lt;code&gt;rustic-buffer-crate&lt;/code&gt;(there&#39;s also &lt;code&gt;rustic-buffer-workspace&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the project root you can use &lt;code&gt;rustic-project-root&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;FTR #174 #179 #236&lt;/p&gt; &#xA;&lt;h3&gt;Faces&lt;/h3&gt; &#xA;&lt;p&gt;The colors that are displayed in compilation buffers come from cargo and are translated by xterm-color. You can change these colors by modifying &lt;code&gt;rustic-ansi-faces&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-compilation-mode&lt;/code&gt; doesn&#39;t use the default faces of compile.el. If you want to change these colors you can use something similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(custom-set-faces&#xA;  &#39;(rustic-compilation-column ((t (:inherit compilation-column-number))))&#xA;  &#39;(rustic-compilation-line ((t (:foreground &#34;LimeGreen&#34;)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional faces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-message&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compilation-error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compilation-warning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compilation-info&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;rustc errors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/rustc_errno.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Rustfmt&lt;/h2&gt; &#xA;&lt;p&gt;You can format your code with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-buffer&lt;/code&gt; format buffer with stdin&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-file&lt;/code&gt; format file and revert buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-fmt&lt;/code&gt; run cargo-fmt on workspace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-region&lt;/code&gt; format active region&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-dwim&lt;/code&gt; run format on region,file or cargo fmt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rustic uses the function &lt;code&gt;rustic-save-some-buffers&lt;/code&gt; for saving buffers before compilation. In case you prefer using lsp for formatting, turn off &lt;code&gt;rustic-format-on-save&lt;/code&gt; and set &lt;code&gt;rustic-lsp-format&lt;/code&gt;to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To save buffers automatically, you can change the value of &lt;code&gt;compilation-ask-about-save&lt;/code&gt;, it has higher precedence than &lt;code&gt;buffer-save-without-query&lt;/code&gt; when compiling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun rustic-mode-auto-save-hook ()&#xA;  &#34;Enable auto-saving in rustic-mode buffers.&#34;&#xA;  (when buffer-file-name&#xA;    (setq-local compilation-ask-about-save nil)))&#xA;(add-hook &#39;rustic-mode-hook &#39;rustic-mode-auto-save-hook)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-rustfmt-bin&lt;/code&gt; path to rustfmt executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-rustfmt-bin-remote&lt;/code&gt; default path to remote rustfmt executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-rustfmt-args&lt;/code&gt; additional args like +nightly&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-rustfmt-config-alist&lt;/code&gt; alist of rustfmt configuration options&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-display-method&lt;/code&gt; default function used for displaying rustfmt buffer (use the function &lt;code&gt;ignore&lt;/code&gt;, if you don&#39;t want the buffer to be displayed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-on-save-method&lt;/code&gt; function to use for on-save formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-trigger&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;on-save&lt;/code&gt; format buffer before saving&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;on-compile&lt;/code&gt; run &#39;cargo fmt&#39; before compilation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;nil&lt;/code&gt; don&#39;t format automatically&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;known issues:&lt;/p&gt; &#xA;&lt;p&gt;in case you are using hideshow you might want to set &lt;code&gt;rustic-format-on-save-method&lt;/code&gt; to &lt;code&gt;rustic-format-buffer&lt;/code&gt;(#274)&lt;/p&gt; &#xA;&lt;h3&gt;Change default arguments&lt;/h3&gt; &#xA;&lt;p&gt;If you want to configure the following rustfmt call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rustfmt +nightly --config hard_tabs=true --config skip_children=false main.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq rustic-rustfmt-args &#34;+nightly&#34;)&#xA;(setq rustic-rustfmt-config-alist &#39;((hard_tabs . t) (skip_children . nil)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;edition 2018&lt;/h3&gt; &#xA;&lt;p&gt;If you are struggling with errors relating to the Rust edition in &lt;code&gt;Cargo.toml&lt;/code&gt;, this may in fact be a problem with &lt;code&gt;rustfmt&lt;/code&gt; and its default settings. To solve this, &lt;em&gt;even though the error message mentions &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/em&gt;, you have to put &lt;code&gt;edition = &#34;2018&#34;&lt;/code&gt; in a &lt;code&gt;rustfmt.toml&lt;/code&gt;. &lt;a href=&#34;https://github.com/rust-lang/rustfmt/issues/4454&#34;&gt;See here for more info&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;remote&lt;/h3&gt; &#xA;&lt;p&gt;Currently only &lt;code&gt;rustic-format-buffer&lt;/code&gt; works remotely.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-rustfmt-bin&lt;/code&gt; needs to be an absolute path to work remotely.&lt;/p&gt; &#xA;&lt;h2&gt;LSP&lt;/h2&gt; &#xA;&lt;p&gt;Disable LSP support by setting &lt;code&gt;rustic-lsp-client&lt;/code&gt; to nil. You have to restart emacs when you switch lsp clients.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget that rustic doesn&#39;t contain the code for interacting with lsp servers. Therefore most issues are not related to rustic, but to the lsp client or server you are using.&lt;/p&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;rust-analyzer is the default and can be changed to rls. lsp-mode related code was moved to the lsp-mode repo. &lt;code&gt;rustic-lsp-server&lt;/code&gt; sets the value of &lt;code&gt;lsp-rust-server&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq rustic-lsp-server &#39;rls)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change rust-analyzer path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq rustic-analyzer-command &#39;(&#34;~/.cargo/bin/rust-analyzer&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Automatic server installation&lt;/h4&gt; &#xA;&lt;p&gt;lsp-mode provides this feature, but eglot doesn&#39;t &lt;a href=&#34;https://github.com/brotzeit/rustic/issues/403&#34;&gt;#403&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://rust-analyzer.github.io/manual.html#installation&#34;&gt;rust-analyzer manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;The default package is &lt;code&gt;lsp-mode&lt;/code&gt;. But you can also use &lt;code&gt;eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq rustic-lsp-client &#39;eglot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LSP commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xref-find-definitions&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xref-find-references&lt;/code&gt; with helm and rust-analyzer&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/xref_references.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;eglot&lt;/h4&gt; &#xA;&lt;p&gt;Turn off flymake.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;eglot--managed-mode-hook (lambda () (flymake-mode -1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;lsp-mode&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-describe-thing-at-point&lt;/code&gt; display documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-find-definition&lt;/code&gt; makes use of xref&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find more information in the &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/&#34;&gt;lsp-mode documentation for Rust&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;lsp-execute-code-action&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This command can be extremely convenient when applying code actions or using auto-imports.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;lsp-execute-code-action&lt;/code&gt; when lsp-ui displays code actions at the top of the sideline.&lt;/p&gt; &#xA;&lt;h6&gt;Applying code actions&lt;/h6&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/code_actions.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h6&gt;Auto import&lt;/h6&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/auto_import.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Macro expansion&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp-rust-analyzer-expand-macro&lt;/code&gt; expand macro call at point recursively&lt;/p&gt; &#xA;&lt;p&gt;The results are formatted and highlighted by default, but you can use your own function by customizing &lt;code&gt;lsp-rust-analyzer-macro-expansion-method&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/macro_expansion.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;LSP + TRAMP&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; does work over TRAMP, but you have to register the client manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(with-eval-after-load &#34;lsp-rust&#34;&#xA; (lsp-register-client&#xA;  (make-lsp-client&#xA;   :new-connection (lsp-stdio-connection&#xA;                    (lambda ()&#xA;                      `(,(or (executable-find&#xA;                              (cl-first lsp-rust-analyzer-server-command))&#xA;                             (lsp-package-path &#39;rust-analyzer)&#xA;                             &#34;rust-analyzer&#34;)&#xA;                        ,@(cl-rest lsp-rust-analyzer-server-args))))&#xA;   :remote? t&#xA;   :major-modes &#39;(rust-mode rustic-mode)&#xA;   :initialization-options &#39;lsp-rust-analyzer--make-init-options&#xA;   :notification-handlers (ht&amp;lt;-alist lsp-rust-notification-handlers)&#xA;   :action-handlers (ht (&#34;rust-analyzer.runSingle&#34; #&#39;lsp-rust--analyzer-run-single))&#xA;   :library-folders-fn (lambda (_workspace) lsp-rust-library-directories)&#xA;   :after-open-fn (lambda ()&#xA;                    (when lsp-rust-analyzer-server-display-inlay-hints&#xA;                      (lsp-rust-analyzer-inlay-hints-mode)))&#xA;   :ignore-messages nil&#xA;   :server-id &#39;rust-analyzer-remote)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(based on &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/raw/68fddd5d9c5506b2adf6a3f67bbe568f44563dd4/clients/lsp-rust.el#L644&#34;&gt;https://github.com/emacs-lsp/lsp-mode/blob/68fddd5d9c5506b2adf6a3f67bbe568f44563dd4/clients/lsp-rust.el#L644&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have Emacs 28, due to some &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/issues/2514#issuecomment-759452037&#34;&gt;compatibility issues&lt;/a&gt;, you might have to additionally use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun start-file-process-shell-command@around (start-file-process-shell-command name buffer &amp;amp;rest args)&#xA;  &#34;Start a program in a subprocess.  Return the process object for it. Similar to `start-process-shell-command&#39;, but calls `start-file-process&#39;.&#34;&#xA;  ;; On remote hosts, the local `shell-file-name&#39; might be useless.&#xA;  (let ((command (mapconcat &#39;identity args &#34; &#34;)))&#xA;    (funcall start-file-process-shell-command name buffer command)))&#xA;&#xA;(advice-add &#39;start-file-process-shell-command :around #&#39;start-file-process-shell-command@around)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(thanks to &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/issues/2514#issuecomment-759452037&#34;&gt;https://github.com/emacs-lsp/lsp-mode/issues/2514#issuecomment-759452037&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll have to have &lt;code&gt;rust-analyzer&lt;/code&gt; already installed on the target machine.&lt;/p&gt; &#xA;&lt;h3&gt;Detached file&lt;/h3&gt; &#xA;&lt;p&gt;This is an early experimental feature, and is disabled by default.&lt;/p&gt; &#xA;&lt;p&gt;Source files not belonging to any crate, or &lt;em&gt;detached&lt;/em&gt; source files, are supported by rust-analyzer, and this feature can be enabled via &lt;code&gt;rustic-enable-detached-file-support&lt;/code&gt;. (Currently, only eglot is supported.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: Due to some current limitations, you should avoid opening a detached file in a large directory with this feature enabled.&lt;/p&gt; &#xA;&lt;h2&gt;Cargo&lt;/h2&gt; &#xA;&lt;p&gt;Since the cargo commands also use the derived compilation mode, you can use the commands that are mentioned in the &#34;compilation&#34; section.&lt;/p&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-bin&lt;/code&gt; Path to cargo executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-bin-remote&lt;/code&gt; Path to remote cargo executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-build-arguments&lt;/code&gt; default arguments for cargo build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-check-arguments&lt;/code&gt; default arguments for cargo check&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Edit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/killercup/cargo-edit&#34;&gt;cargo-edit&lt;/a&gt; provides commands to edit your dependencies quickly.&lt;/p&gt; &#xA;&lt;p&gt;The rustic commands can be called with prefix &lt;code&gt;C-u&lt;/code&gt; if you want to modify the parameters of a command.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-add&lt;/code&gt; Add crate to Cargo.toml using &#39;cargo add&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-rm&lt;/code&gt; Remove crate from Cargo.toml using &#39;cargo rm&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-upgrade&lt;/code&gt; Upgrade dependencies as specified in the local manifest file using &#39;cargo upgrade&#39;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;p&gt;If you want to disable warnings when running cargo-test commands, you can set &lt;code&gt;(setq rustic-cargo-test-disable-warnings t)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-cargo-test&lt;/code&gt; run &#39;cargo test&#39;, when called with &lt;code&gt;C-u&lt;/code&gt; store arguments in &lt;code&gt;rustic-test-arguments&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-cargo-test-rerun&lt;/code&gt; rerun &#39;cargo test&#39; with arguments stored in &lt;code&gt;rustic-test-arguments&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-cargo-current-test&lt;/code&gt; run test at point, whether it&#39;s a function or a module&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/cargo_current_test.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;Based on the usecase, we provide three variants of it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is meant for non interactive programs. It&#39;s creates a new mode which is built on top of &lt;code&gt;rustic-compilation-mode&lt;/code&gt;. You can press &lt;code&gt;g&lt;/code&gt; in this mode&#39;s buffer to make it re-run.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-comint-run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is meant for both interactive and non interactive programs. For non interactive programs, you would need to pass data to it via stdin. It&#39;s creates a new mode which is built on top of &lt;code&gt;comint-mode&lt;/code&gt;. You can press &lt;code&gt;C-c C-g&lt;/code&gt; in this mode&#39;s buffer to make it re-run. You can pass input to the program directly in it&#39;s output buffer and press &lt;code&gt;RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-plain-run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is similar to the above &lt;code&gt;rustic-cargo-comint-run&lt;/code&gt;. Input can be sent to the program in one of two ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-send-input&lt;/code&gt;, which reads the input from the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-run-use-comint&lt;/code&gt;: when this variable is set to t, the input can be typed directly into the output buffer of &#39;cargo run&#39; and sent off with &lt;code&gt;RET&lt;/code&gt;, just like in &lt;code&gt;comint-mode&lt;/code&gt;. You need &lt;a href=&#34;https://polymode.github.io&#34;&gt;polymode&lt;/a&gt; installed for this to work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Outdated&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;rustic-cargo-outdated&lt;/code&gt; to get a list of dependencies that are out of date. The results are displayed in &lt;code&gt;tabulated-list-mode&lt;/code&gt; and you can use most commands you know from the emacs package menu. This option requires the rust package &lt;code&gt;cargo-outdated&lt;/code&gt; to be installed before being used.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;u&lt;/code&gt; mark single crate for upgrade and prompt user for version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;U&lt;/code&gt; mark all upgradable crates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;l&lt;/code&gt; mark single crate for upgrading to latest version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;L&lt;/code&gt; mark all crates to latest version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;m&lt;/code&gt; remove mark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x&lt;/code&gt; perform marked package menu actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r&lt;/code&gt; refresh crate list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;q&lt;/code&gt; quit window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/outdated.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Expand&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dtolnay/cargo-expand&#34;&gt;cargo-expand&lt;/a&gt; provides the ability to expand macros. It also provides the ability to target a specific modules or a named item within a module (eg: &lt;code&gt;module::Type&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-expand&lt;/code&gt;: runs &lt;code&gt;cargo expand&lt;/code&gt;. You can also use universal argument to target a specific named item to expand.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;More cargo commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-init&lt;/code&gt; run &#39;cargo init&#39; to initialize a directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-new&lt;/code&gt; use &#39;cargo new&#39; to create a new package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-bench&lt;/code&gt; run &#39;cargo bench&#39; for the current project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-build-doc&lt;/code&gt; build the documentation for the current project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-doc&lt;/code&gt; open the documentation for the current project in a browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-lints&lt;/code&gt; called with &lt;code&gt;rustic-lints-arguments&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Clippy&lt;/h2&gt; &#xA;&lt;p&gt;Currently cargo does not display the correct installation command for some toolchains when clippy isn&#39;t installed. If you have problems try it with &lt;code&gt;rustup component add --toolchain nightly clippy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can change the parameters &lt;code&gt;rustic-default-clippy-arguments&lt;/code&gt; that default to &#34;--benches --tests --all-features&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;auto-fixing before compilation&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to run &#39;clippy --fix&#39; automatically when starting a compile process by setting &lt;code&gt;rustic-cargo-clippy-trigger-fix&lt;/code&gt; to &lt;code&gt;&#39;on-compile&lt;/code&gt;. You can also use &lt;code&gt;&#39;on-save&lt;/code&gt;, but this doesn&#39;t work in combination with automatic formatting.&lt;/p&gt; &#xA;&lt;p&gt;This feature can be used in combination with auto-formatting.&lt;/p&gt; &#xA;&lt;p&gt;Works for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-recompile&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-clippy&lt;/code&gt; to view the results in a derived compilation mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-clippy-fix&lt;/code&gt; run &#39;clippy fix&#39; using &lt;code&gt;rustic-cargo-clippy-fix-args&lt;/code&gt; the default value is &#34;--allow-dirty&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Flycheck&lt;/h3&gt; &#xA;&lt;p&gt;In case you want to use clippy with flycheck but without LSP, you can activate this checker and use the command &lt;code&gt;flycheck-list-errors&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(push &#39;rustic-clippy flycheck-checkers)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turn off flycheck.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(remove-hook &#39;rustic-mode-hook &#39;flycheck-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The checker automatically detects the active toolchain and applies the correct parameters. You can set a default value for both stable and nightly toolchains. These are the default values.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-flycheck-clippy-params-stable&lt;/code&gt; &#34;--message-format=json&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-flycheck-clippy-params-nightly&lt;/code&gt; &#34;--message-format=json -Zunstable-options&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;lsp-mode&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;lsp-mode&lt;/code&gt; with rust-analyzer, you can set &lt;code&gt;lsp-rust-analyzer-cargo-watch-command&lt;/code&gt; to clippy instead of activating the checker &lt;code&gt;rustic-clippy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Org-babel&lt;/h2&gt; &#xA;&lt;h3&gt;Intro&lt;/h3&gt; &#xA;&lt;p&gt;Blocks run asynchronously and a running babel process is indicated by a spinner in the mode-line. It&#39;s possible to use crates in babel blocks. Execute babel block with &lt;code&gt;org-babel-execute-src-block&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supported org babel parameters:&lt;/p&gt; &#xA;&lt;p&gt;Write to file &lt;code&gt;:results file :file ~/babel-output&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-format-src-block&lt;/code&gt; format block after successful build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-display-compilation-buffer&lt;/code&gt; display compilation buffer of babel process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-auto-wrap-main&lt;/code&gt; wrap body into main function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;lsp-mode&lt;/h3&gt; &#xA;&lt;p&gt;You can use lsp in babel blocks with &lt;code&gt;lsp-org&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-format-block&lt;/code&gt; format block at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-visit-project&lt;/code&gt; find generated project of block at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-clippy&lt;/code&gt; run clippy on block(currently doesn&#39;t honor babel params, you can open a feature request if you miss it)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;h4&gt;:crates&lt;/h4&gt; &#xA;&lt;p&gt;This block shows how to use crates with the latest version for both serde and regex.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;*&#34; will be added automatically for serde.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC rust :crates &#39;(serde (regex . *))&#xA;  extern crate regex;&#xA;  extern crate serde;&#xA;  use regex::Regex;&#xA;&#xA;  fn main() {&#xA;      let re = Regex::new(r&#34;^\d{4}-\d{2}-\d{2}$&#34;).unwrap();&#xA;      assert!(re.is_match(&#34;2014-01-01&#34;));&#xA;  }&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:features&lt;/h4&gt; &#xA;&lt;p&gt;If specific crate features are required then these can be specified with the &lt;code&gt;:features&lt;/code&gt; argument. Note that if it is just a single feature then a string, instead of a list, will also be accepted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC rust :crates &#39;((tokio . 1.0)) :features &#39;((tokio . (&#34;rt-multi-thread&#34; &#34;time&#34;)))&#xA;  extern crate tokio;&#xA;&#xA;  fn main() {&#xA;      tokio::runtime::Runtime::new()&#xA;          .unwrap()&#xA;          .block_on(async {&#xA;              tokio::time::sleep(tokio::time::Duration::from_millis(10)).await;&#xA;          });&#xA;  }&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:paths&lt;/h4&gt; &#xA;&lt;p&gt;Similarly, to depend on local Rust crates, you can set the &lt;code&gt;:paths&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC rust :crates &#39;((foo . 1.0)) :paths &#39;((foo . &#34;/home/you/code/foo&#34;))&#xA;  use foo::Foo;&#xA;&#xA;  fn main() {&#xA;    // Your code.&#xA;  }&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:toolchain&lt;/h4&gt; &#xA;&lt;p&gt;You can also specify the &lt;code&gt;:toolchain&lt;/code&gt;. Remember to quote the value!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+begin_src rust :toolchain &#39;nightly&#xA;fn main() {&#xA;    let foo: String = vec![&#34;a&#34;, &#34;b&#34;, &#34;c&#34;].into_iter().intersperse(&#34;,&#34;).collect();&#xA;&#xA;    println!(&#34;{}&#34;, foo);&#xA;}&#xA;#+end_src&#xA;&#xA;#+RESULTS:&#xA;: a,b,c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:main&lt;/h4&gt; &#xA;&lt;p&gt;Auto wrap whole block body in a &lt;code&gt;fn main&lt;/code&gt; function call if none exists.&lt;/p&gt; &#xA;&lt;p&gt;Since this is very handy in most code snippets, so the default value is &lt;code&gt;yes&lt;/code&gt;. &lt;code&gt;no&lt;/code&gt; if you don&#39;t want this feature(for example, you don&#39;t want regex search slow things down).&lt;/p&gt; &#xA;&lt;p&gt;You can also set a default value by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; By setq this default to `nil`, you&#39;ll have to explict set params to &#34;:main yes&#34; in each block&#xA;(setq rustic-babel-auto-wrap-main nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+begin_src rust :main yes&#xA;let x = vec![1, 2, 3].iter().map(|&amp;amp;x| x + 1).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();&#xA;println!(&#34;{:?}&#34;, x);&#xA;#+end_src&#xA;&#xA;#+results:&#xA;: [2, 3, 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:include&lt;/h4&gt; &#xA;&lt;p&gt;This parameter allows you to run code that is located in different babel blocks by using named blocks with the &lt;code&gt;:include&lt;/code&gt; keyword. This feature only concats the blocks so you don&#39;t need to import the code you want to use.&lt;/p&gt; &#xA;&lt;p&gt;You can still use &lt;code&gt;:main&lt;/code&gt; to wrap the code of the main block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+name: b1&#xA;#+begin_src rust&#xA;pub fn b1_func() -&amp;gt; String {&#xA;    String::from(&#34;b1 function called&#34;)&#xA;}&#xA;#+end_src&#xA;&#xA;#+name: b2&#xA;#+begin_src rust&#xA;pub fn b2_func() -&amp;gt; String {&#xA;    String::from(&#34;b2 function called&#34;)&#xA;}&#xA;#+end_src&#xA;&#xA;#+begin_src rust :include &#39;(&#34;b1&#34; &#34;b2&#34;)&#xA;  fn main() {&#xA;      println!(&#34;{:?}&#34;, b1_func());&#xA;      println!(&#34;{:?}&#34;, b2_func());&#xA;  }&#xA;#+end_src&#xA;&#xA;#+RESULTS:&#xA;: &#34;b1 function called&#34;&#xA;: &#34;b2 function called&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:use&lt;/h4&gt; &#xA;&lt;p&gt;When using this keyword blocks are treated as modules. The files are generated automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+name: mymodule&#xA;#+begin_src rust&#xA;pub fn myfunc() -&amp;gt; String {&#xA;    String::from(&#34;mymodule function called&#34;)&#xA;}&#xA;#+end_src&#xA;&#xA;#+begin_src rust :use &#39;(&#34;mymodule&#34;)&#xA;use mymodule::myfunc;&#xA;&#xA;fn main() {&#xA;    println!(&#34;{:?}&#34;, myfunc());&#xA;}&#xA;#+end_src&#xA;&#xA;#+RESULTS:&#xA;: &#34;mymodule function called&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Spinner&lt;/h2&gt; &#xA;&lt;p&gt;In case you want to use a different spinner type you can modify &lt;code&gt;rustic-spinner-type&lt;/code&gt; or turn it off completely with &lt;code&gt;rustic-display-spinner&lt;/code&gt;.(&lt;a href=&#34;https://github.com/Malabarba/spinner.el/raw/master/spinner.el#L104&#34;&gt;Available spinner types&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;rust docs in org-mode&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to read rust documentation inside Emacs! This currently requires LSP-mode and cargo. Unfortunately, this probably won&#39;t work on Windows. &lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/rustic-doc.png&#34; alt=&#34;Rustic-doc example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pandoc.org/installing.html&#34;&gt;pandoc&lt;/a&gt; preferably at least version 2.11, as it will give somewhat nicer generated documentation. Versions older than 2.9 may not work - if you&#39;re on a debian based distro installing through your regular repo might not work out.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/cargo/getting-started/installation.html&#34;&gt;cargo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bunogi/cargo-makedocs&#34;&gt;cargo-makedocs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd-find&lt;/a&gt; Old versions, especially before 2.x, may not work. Install through Cargo if you&#39;re having issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacsorphanage/helm-ag&#34;&gt;helm-ag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;ripgrep&lt;/code&gt; and &lt;code&gt;helm-ag&lt;/code&gt; are optional but highly recommended.&lt;/p&gt; &#xA;&lt;p&gt;If only ripgrep is installed, it will be used with the emacs &lt;code&gt;grep&lt;/code&gt; command. In case neither is available, the emacs &lt;code&gt;grep&lt;/code&gt; command will use &lt;code&gt;grep&lt;/code&gt;, like in the good old days.&lt;/p&gt; &#xA;&lt;p&gt;When a required cargo package is missing you will be asked if you want to install them when running rustic-doc-setup.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable &lt;code&gt;rustic-doc-mode&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rustic-doc-setup&lt;/code&gt; to download files that rustic-doc needs to convert rust documentation and also convert &lt;code&gt;std&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can now convert package-specific documentation with &lt;code&gt;rustic-doc-convert-current-package&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search the org files with &lt;code&gt;rustic-doc-search&lt;/code&gt; (bound to &lt;code&gt;C-#&lt;/code&gt; by default) if you are in &lt;code&gt;Rust mode&lt;/code&gt;, &lt;code&gt;Rustic mode&lt;/code&gt; or &lt;code&gt;Org mode&lt;/code&gt;. If you hover over a symbol when you invoke the command, &lt;code&gt;rustic-doc-search&lt;/code&gt; will insert a default value.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;universal argument&lt;/code&gt; to only search for level 1 headers like struct or enum names.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can change the defaults by modifying&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-doc-rg-search-command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-doc-search-function&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You should re-run &lt;code&gt;rustic-doc-setup&lt;/code&gt; once in a while, to update the pandoc filter.&lt;/li&gt; &#xA; &lt;li&gt;If rustic-doc does not find the documentation for something, the first thing to do is check the project&#39;s &lt;code&gt;target/doc&lt;/code&gt; folder for the corresponding &lt;code&gt;.html-file&lt;/code&gt;. If there is no file there, there is nothing for rustic-doc to convert. If there is a file there, please create an issue!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Popup&lt;/h2&gt; &#xA;&lt;p&gt;You can execute commands with &lt;code&gt;rustic-popup&lt;/code&gt;(call it with optional argument &lt;code&gt;C-u&lt;/code&gt; to choose a directory). The list of commands can be customized with &lt;code&gt;rustic-popup-commands&lt;/code&gt;. The command &lt;code&gt;rustic-popup-default-action&lt;/code&gt; (&lt;code&gt;RET&lt;/code&gt; or &lt;code&gt;TAB&lt;/code&gt;) allows you to change:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RUST_BACKTRACE&lt;/code&gt; environment variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compilation-arguments&lt;/code&gt; for &lt;code&gt;recompile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;arguments for &lt;code&gt;cargo test&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to close the popup after you ran a command you can set &lt;code&gt;rustic-kill-buffer-and-window&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/popup.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;View help buffer containing a command&#39;s flags with &lt;code&gt;h&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/popup_help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;rust-mode&lt;/h2&gt; &#xA;&lt;p&gt;rustic-mode derives from rust-mode, however we replace default key bindings and some hooks.&lt;/p&gt; &#xA;&lt;p&gt;There are also some additional commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-dbg-wrap-or-unwrap&lt;/code&gt; Either remove or add the dbg! macro&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-toggle-mutability&lt;/code&gt; Toggles the mutability of the variable defined on the current line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-promote-module-into-dir&lt;/code&gt; Promote the module file visited by the current buffer into its own directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;elisp tests&lt;/h2&gt; &#xA;&lt;p&gt;To run the tests, you will need &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cask exec ert-runner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;alternatively you can use &lt;code&gt;make test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs, feature requests and bug reports are very welcome. If you want to add a new feature please open an issue in advance so we can discuss the details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/corfu-english-helper</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/manateelazycat/corfu-english-helper</id>
    <link href="https://github.com/manateelazycat/corfu-english-helper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;English helper for Emacs, base on corfu-mode&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is corfu-english-helper ?&lt;/h2&gt; &#xA;&lt;p&gt;corfu-english-helper is english writing assistant, help me complete English word.&lt;/p&gt; &#xA;&lt;p&gt;This plugin base on fantastic completion framework &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;Corfu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/corfu-english-helper/master/screenshot.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download corfu-english-helper:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;git clone --depth=1 -b master https://github.com/manateelazycat/corfu-english-helper.git ~/.emacs.d/site-lisp/corfu-english-helper/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add corfu-english-helper to &lt;code&gt;load-path&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Elisp&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/site-lisp/corfu-english-helper/&#34;)&#xA;(require &#39;corfu-english-helper)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle-corfu-english-helper&lt;/code&gt;: toggle on english helper, write english on the fly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;corfu-english-helper-search&lt;/code&gt;: popup english helper manually&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize your own dictionary.&lt;/h2&gt; &#xA;&lt;p&gt;Default english dictionary is generate from stardict KDict dictionary with below command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python ./stardict.py stardict-kdic-ec-11w-2.4.2/kdic-ec-11w.ifo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can replace with your favorite stardict dictionary&#39;s info filepath to generate your own corfu-english-helper-data.el .&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;I create &lt;a href=&#34;https://github.com/manateelazycat/company-english-helper&#34;&gt;company-english-helper&lt;/a&gt;, this package is port to corfu-mode, most code of corfu version is written by &lt;a href=&#34;https://github.com/theFool32&#34;&gt;theFool32&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doomemacs/doomemacs</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/doomemacs/doomemacs</id>
    <link href="https://github.com/doomemacs/doomemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Doom Emacs&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt; • &lt;a href=&#34;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&#34;&gt;Screenshots&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&#34; alt=&#34;Made with Doom Emacs&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Supports-Emacs_27.1--28.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Supports Emacs 27.1 - 28.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/doomemacs/doomemacs/master?style=flat-square&#34; alt=&#34;Latest commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square&#34; alt=&#34;Build status: master&#34;&gt; &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.doomemacs.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&#34; alt=&#34;Discourse server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&#34; alt=&#34;Doom Emacs Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&#34;&gt;Getting help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;a href=&#34;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Doom is a configuration framework for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; &#xA;&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; &#xA; &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; &#xA; &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; &#xA; &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; &#xA; &lt;li&gt;A declarative &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; &#xA; &lt;li&gt;Optional vim emulation powered by &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&#34;&gt;more&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; &#xA; &lt;li&gt;A Spacemacs-esque &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&#34;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; &#xA; &lt;li&gt;A rule-based &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&#34;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; &#xA; &lt;li&gt;Per-file indentation style detection and &lt;a href=&#34;http://editorconfig.org/&#34;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; &#xA; &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;ivy&lt;/a&gt; or &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; &#xA; &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; &#xA; &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git 2.23+&lt;/li&gt; &#xA; &lt;li&gt;Emacs 27.1+ (&lt;em&gt;27.2 is recommended&lt;/em&gt;, or &lt;a href=&#34;https://www.emacswiki.org/emacs/GccEmacs&#34;&gt;native-comp&lt;/a&gt;. &lt;strong&gt;29+ is not supported&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; &#xA; &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Doom is comprised of &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d&#xA;~/.emacs.d/bin/doom install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&#34;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.emacs.d/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom build&lt;/code&gt; to recompile all installed packages (use this if you up/downgrade Emacs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/6&#34;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/5&#34;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/7&#34;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting help&lt;/h1&gt; &#xA;&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Our documentation&lt;/a&gt; covers many use cases. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&#34;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&#34;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&#34;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&#34;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&#34;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; &#xA;   &lt;li&gt;Your issue may be documented in the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues&#34;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&#34; alt=&#34;Donate on liberapay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&#34;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t hesitate to &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues/new&#34;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;liberapay&lt;/a&gt; or &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emacs-straight/project</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/emacs-straight/project</id>
    <link href="https://github.com/emacs-straight/project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the project package from GNU ELPA, current as of 2022-06-01&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>melpa/melpa</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/melpa/melpa</id>
    <link href="https://github.com/melpa/melpa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recipes and build machinery for the biggest Emacs package repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MELPA&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/melpa/melpa/actions&#34;&gt;&lt;img src=&#34;https://github.com/melpa/melpa/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MELPA is a growing collection of &lt;code&gt;package.el&lt;/code&gt;-compatible Emacs Lisp packages built automatically on our server from the upstream source code using simple recipes. (Think of it as a server-side version of &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, or even &lt;a href=&#34;https://github.com/Homebrew/homebrew&#34;&gt;Homebrew&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Packages are updated at intervals throughout the day.&lt;/p&gt; &#xA;&lt;p&gt;To browse available packages, check out the &lt;a href=&#34;https://melpa.org/&#34;&gt;archive index page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adding packages is as simple as submitting a new recipe as a pull request; read on for details.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#build-scripts&#34;&gt;Build Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#mirrors&#34;&gt;Mirrors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the MELPA repository, you&#39;ll need an Emacs with &lt;code&gt;package.el&lt;/code&gt;, ie. Emacs 24.1 or greater. To test TLS support you can visit a HTTPS URL, for example with &lt;code&gt;M-x eww RET https://wikipedia.org RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enable installation of packages from MELPA by adding an entry to &lt;code&gt;package-archives&lt;/code&gt; after &lt;code&gt;(require &#39;package)&lt;/code&gt; and before the call to &lt;code&gt;package-initialize&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`&#xA;;; and `package-pinned-packages`. Most users will not need or want to do this.&#xA;;;(add-to-list &#39;package-archives &#39;(&#34;melpa-stable&#34; . &#34;https://stable.melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just use &lt;code&gt;M-x package-list-packages&lt;/code&gt; to browse and install packages from MELPA and elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Note that you&#39;ll need to run &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; or &lt;code&gt;M-x package-list-packages&lt;/code&gt; to ensure that Emacs has fetched the MELPA package list before you can install packages with &lt;code&gt;M-x package-install&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;h3&gt;MELPA Stable&lt;/h3&gt; &#xA;&lt;p&gt;Packages in MELPA are built directly from the latest package source code in the upstream repositories, but we also build and publish packages corresponding to the latest tagged code in those repositories, where version tags exist. These packages are published in a separate package archive called &lt;a href=&#34;https://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt;. Most users should prefer MELPA over MELPA Stable.&lt;/p&gt; &#xA;&lt;p&gt;Some notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you leave the original MELPA server in your &lt;code&gt;package-archives&lt;/code&gt; then by default you will get the &lt;em&gt;development&lt;/em&gt; versions of packages and not the stable ones, because the development versions are higher.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your Emacs has the variables &lt;code&gt;package-pinned-packages&lt;/code&gt; (available in 24.4 and later) and/or &lt;code&gt;package-archive-priorities&lt;/code&gt;, you can customize or modify those variables as needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use the &lt;a href=&#34;https://github.com/milkypostman/package-filter&#34;&gt;package-filter.el&lt;/a&gt; package which we provide.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will probably want to remove all packages and then reinstall them. Any packages you already have installed from MELPA will never get &#34;updated&#34; to the stable version because of the way version numbering is handled.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the MELPA maintainers do not use MELPA Stable themselves, and do not particularly recommend its use.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/CONTRIBUTING.org&#34;&gt;CONTRIBUTING.org&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Recipe Format&lt;/h2&gt; &#xA;&lt;p&gt;Packages are specified by files in the &lt;code&gt;recipes&lt;/code&gt; directory. You can contribute a new package by adding a new file under &lt;code&gt;recipes&lt;/code&gt; using the following form (&lt;code&gt;[...]&lt;/code&gt; denotes optional or conditional values),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&amp;lt;package-name&amp;gt;&#xA; :fetcher [git|github|gitlab|hg]&#xA; [:url &#34;&amp;lt;repo url&amp;gt;&#34;]&#xA; [:repo &#34;github-or-gitlab-user/repo-name&#34;]&#xA; [:commit &#34;commit&#34;]&#xA; [:branch &#34;branch&#34;]&#xA; [:version-regexp &#34;&amp;lt;regexp&amp;gt;&#34;]&#xA; [:files (&#34;&amp;lt;file1&amp;gt;&#34; ...)]&#xA; [:old-names (&amp;lt;old-name&amp;gt; ...)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-name&lt;/code&gt; a lisp symbol that has the same name as the package being specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:fetcher&lt;/code&gt; specifies the type of repository that &lt;code&gt;:url&lt;/code&gt; or &lt;code&gt;:repo&lt;/code&gt; points to. MELPA supports &lt;a href=&#34;http://git-scm.com/&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://gitlab.com/&#34;&gt;&lt;code&gt;gitlab&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;&lt;code&gt;hg&lt;/code&gt;&lt;/a&gt; (Mercurial).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:url&lt;/code&gt; specifies the URL of the version control repository. &lt;em&gt;required for the &lt;code&gt;git&lt;/code&gt;, and &lt;code&gt;hg&lt;/code&gt; fetchers.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt; specifies the github or gitlab repository and is of the form &lt;code&gt;user/repo-name&lt;/code&gt;. &lt;em&gt;required for the &lt;code&gt;github&lt;/code&gt; and &lt;code&gt;gitlab&lt;/code&gt; fetchers&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:commit&lt;/code&gt; specifies the commit of the git repo to checkout. The value will be passed to &lt;code&gt;git reset&lt;/code&gt; in a repo where &lt;code&gt;upstream&lt;/code&gt; is the original repository. Can therefore be either a SHA, if pointing at a specific commit, or a full ref prefixed with &#34;origin/&#34;. Only used by the &lt;code&gt;git&lt;/code&gt;-based fetchers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt; specifies the branch of the git repo to use. This is like &lt;code&gt;:commit&lt;/code&gt;, but it adds the &#34;origin/&#34; prefix automatically. This must be specified when using a branch other than the default branch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:version-regexp&lt;/code&gt; is a regular expression for extracting a version-string from the repository tags. The default matches typical version tags such as &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;R16&lt;/code&gt; or &lt;code&gt;v4.3.5&lt;/code&gt;, so you should not override it unless necessary. For an unusual tag like &#34;OTP-18.1.5&#34;, we might add &lt;code&gt;:version-regexp &#34;[^0-9]*\\(.*\\)&#34;&lt;/code&gt; to strip the &#34;OTP-&#34; prefix. The captured portion of the regexp must be parseable by Emacs&#39; &lt;code&gt;version-to-list&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt; optional property specifying the elisp and info files used to build the package. Please do not override this if the default value (below) is adequate, which it should usually be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;&#39;(&#34;*.el&#34; &#34;lisp/*.el&#34;&#xA;  &#34;dir&#34; &#34;*.info&#34; &#34;*.texi&#34; &#34;*.texinfo&#34;&#xA;  &#34;doc/dir&#34; &#34;doc/*.info&#34; &#34;doc/*.texi&#34; &#34;doc/*.texinfo&#34;&#xA;  &#34;docs/dir&#34; &#34;docs/*.info&#34; &#34;docs/*.texi&#34; &#34;docs/*.texinfo&#34;&#xA;  (:exclude&#xA;   &#34;.dir-locals.el&#34; &#34;lisp/.dir-locals.el&#34;&#xA;   &#34;test.el&#34; &#34;tests.el&#34; &#34;*-test.el&#34; &#34;*-tests.el&#34;&#xA;   &#34;lisp/test.el&#34; &#34;lisp/tests.el&#34; &#34;lisp/*-test.el&#34; &#34;lisp/*-tests.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that elisp in subdirectories is never included by default, so you might find it convenient to keep your package&#39;s elisp in the root of your repository, and separate auxiliary files such as tests into subdirectories to keep packaging simple.&lt;/p&gt; &lt;p&gt;The elements of the &lt;code&gt;:files&lt;/code&gt; list are glob-expanded and processed from left to right to make a list of paths that will be copied into the root of the new package, as if by using &lt;code&gt;cp -R [SRCPATHS] DEST&lt;/code&gt;. This means a directory like &#34;foo/bar&#34; would become &#34;bar&#34; in the new package. To specify a destination subdirectory, use a list element of the form &lt;code&gt;(SUBDIR SRCPATH ...)&lt;/code&gt;. Likewise, to filter out paths expanded earlier in the list, use &lt;code&gt;(:exclude SRCPATH ...)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If your package requires some additional files, but is otherwise fine with the defaults, it&#39;s recommended to use the special element &lt;code&gt;:defaults&lt;/code&gt; as the very first element of the &lt;code&gt;:files&lt;/code&gt; list, which causes the default value shown above to be prepended to the specified file list. For example &lt;code&gt;:files (:defaults &#34;snippets&#34;)&lt;/code&gt; would cause the &#34;snippets&#34; subdir to be copied in addition to the defaults.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:old-names&lt;/code&gt; specifies former names of the package, if any. The value is a list of symbols.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example: Single File Repository&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nonsequitur/smex&#34;&gt;smex&lt;/a&gt; is a repository that contains two files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;README.markdown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smex.el&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since there is only one &lt;code&gt;.el&lt;/code&gt; file, this package only needs the &lt;code&gt;:repo&lt;/code&gt; and &lt;code&gt;:fetcher&lt;/code&gt; specified,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(smex :repo &#34;nonsequitur/smex&#34; :fetcher github)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Packages in one Repository&lt;/h3&gt; &#xA;&lt;p&gt;Assume we have a repository containing three libraries &lt;code&gt;mypackage.el&lt;/code&gt;, &lt;code&gt;helm-mypackage.el&lt;/code&gt;, and &lt;code&gt;persp-mypackage.el&lt;/code&gt;. The latter two libraries are optional and users who don&#39;t want to use the packages &lt;code&gt;helm&lt;/code&gt; and/or &lt;code&gt;perspective&lt;/code&gt; should not be forced to install them just so they can install &lt;code&gt;mypackage&lt;/code&gt;. These libraries should therefore be distributed as separate packages.&lt;/p&gt; &#xA;&lt;p&gt;The three packages have to be declared in three separate files &lt;code&gt;recipes/mypackage&lt;/code&gt;, &lt;code&gt;recipes/helm-mypackage&lt;/code&gt;, and &lt;code&gt;recipes/persp-mypackage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(mypackage :repo &#34;someuser/mypackage&#34;&#xA;           :fetcher github&#xA;           :files (&#34;mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(helm-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                :fetcher github&#xA;                :files (&#34;helm-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(persp-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                 :fetcher github&#xA;                 :files (&#34;persp-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Files in Multiple Directories&lt;/h3&gt; &#xA;&lt;p&gt;There are special cases where creation of the package comes from many different sub-directories in the repository and the destination sub-directories need to be explicitly set.&lt;/p&gt; &#xA;&lt;p&gt;Consider the &lt;code&gt;flymake-perlcritic&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(flymake-perlcritic :repo &#34;illusori/emacs-flymake-perlcritic&#34;&#xA;                    :fetcher github&#xA;                    :files (&#34;*.el&#34; (&#34;bin&#34; &#34;bin/flymake_perlcritic&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will result in a package structure of,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flymake-perlcritic-YYYMMDD&#xA;|-- bin&#xA;|   `-- flymake_perlcritic&#xA;|-- flymake-perlcritic-pkg.el&#xA;`-- flymake-perlcritic.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that specifying an entry in &lt;code&gt;:files&lt;/code&gt; that is a list takes the first element to be the destination directory. These can be embedded further, such as the following---hypothetical---entry for &lt;code&gt;:files&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&#34;*.el&#34; (&#34;snippets&#34;&#xA;         (&#34;html-mode&#34; &#34;snippets/html-mode/*&#34;)&#xA;         (&#34;python-mode&#34; &#34;snippets/python-mode/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which would result in a package with &lt;code&gt;*.el&lt;/code&gt; in something like,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package-YYYYMMDD&#xA;|-- snippets&#xA;|   |-- html-mode&#xA;|   |   |-- div&#xA;|   |   `-- html&#xA;|   `-- python-mode&#xA;|       |-- for&#xA;|       `-- main&#xA;`-- package.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But a better solution, given that we probably want to copy the &lt;em&gt;entire&lt;/em&gt; &lt;code&gt;snippets&lt;/code&gt; directory to the root of the package, we could just specify that directory. Consider the &lt;code&gt;pony-mode&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(pony-mode&#xA; :repo &#34;davidmiller/pony-mode&#34;&#xA; :fetcher github&#xA; :files (&#34;src/*.el&#34; &#34;snippets&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which generates the package,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pony-mode-YYYYMMDD&#xA;|-- pony-mode-pkg.el&#xA;|-- pony-mode.el&#xA;|-- pony-tpl.el&#xA;`-- snippets&#xA;    |-- html-mode&#xA;    |   |-- bl&#xA;    |   |-- ex&#xA;    |   |-- for&#xA;    |   |-- if&#xA;    |   |-- loa&#xA;    |   |-- sup&#xA;    |   |-- testc&#xA;    |   `-- {{&#xA;    `-- python-mode&#xA;        |-- auth-view&#xA;        |-- bn&#xA;        |-- model&#xA;        |-- modelform&#xA;        |-- render-to&#xA;        |-- testc&#xA;        `-- view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Scripts&lt;/h2&gt; &#xA;&lt;p&gt;Building MELPA is all based around using the &lt;code&gt;Makefile&lt;/code&gt; included in the root repository directory. Described below are the actions that accepted by the &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all&lt;/code&gt; -- Builds all packages under the &lt;code&gt;recipes/&lt;/code&gt; directory and compiles the &lt;code&gt;index.html&lt;/code&gt; file for the &lt;a href=&#34;https://melpa.org&#34;&gt;melpa&lt;/a&gt; website.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes/&amp;lt;NAME&amp;gt;&lt;/code&gt; -- Build individual recipe &lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;. Built packages are put in the &lt;code&gt;packages/&lt;/code&gt; folder with version corresponding to the date of the latest commit that modified at least one of the files specified by the recipe; given according to the &lt;code&gt;%Y%m%d&lt;/code&gt; format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt; -- build all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;archive.json&lt;/code&gt; -- construct the &lt;code&gt;archive.json&lt;/code&gt; file that will contain a JSON object of all compiled packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes.json&lt;/code&gt; -- construct the &lt;code&gt;recipes.json&lt;/code&gt; file containing a JSON object of all packages available for building.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt; -- clean everything.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;html&lt;/code&gt; -- build &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-working&lt;/code&gt; -- remove all repositories that have been checked out to the &lt;code&gt;working/&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-packages&lt;/code&gt; -- remove all compiled packages from the &lt;code&gt;packages&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-json&lt;/code&gt; -- remove all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that these scripts require an Emacs with &lt;code&gt;package.el&lt;/code&gt; installed, such as Emacs 24. If you have an older version of Emacs, you can get a suitable &lt;code&gt;package.el&lt;/code&gt; &lt;a href=&#34;https://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;All repository code is contained in the file &lt;code&gt;package-build/package-build.el&lt;/code&gt;. That code is maintained in a &lt;a href=&#34;https://github.com/melpa/package-build&#34;&gt;separate repository&lt;/a&gt;: the version in the MELPA repository is imported using &lt;code&gt;git subtree&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-all)&lt;/code&gt; : build packages for all recipes in the directory specified by &lt;code&gt;package-build-recipes-dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-archive NAME)&lt;/code&gt; : interactive elisp function to build a single archive. NAME is a symbol for the package to be built. Packages are staged in the directory specified by &lt;code&gt;package-build-working-dir&lt;/code&gt; and built packages are placed in the directory specified by &lt;code&gt;package-build-archive-dir&lt;/code&gt;. Packages are versioned based on the most recent commit date to package files based on commits to upstream package repository. For multi-file packages, the file &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt; is automatically generated and contains &lt;em&gt;description&lt;/em&gt;, &lt;em&gt;version&lt;/em&gt;, and &lt;em&gt;requires&lt;/em&gt; information determined by searching &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt;, &lt;code&gt;&amp;lt;NAME&amp;gt;.el&lt;/code&gt;, and &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el.in&lt;/code&gt;, if they exist in the repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-working-dir&lt;/code&gt; : Staging area containing package repositories and package directories being built.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-archive-dir&lt;/code&gt; : Location to store &lt;code&gt;archive-contents&lt;/code&gt; and any built packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-recipes-dir&lt;/code&gt; : Directory containing MELPA compatible recipes. See &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt; section for more details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Packages end up in the &lt;code&gt;packages/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-archive-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;Repositories are checked out to the &lt;code&gt;working/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-working-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h2&gt;Mirrors&lt;/h2&gt; &#xA;&lt;p&gt;Official mirrors are available (with many thanks to mirrorservice.org) so that if melpa.org is down, packages can still be installed. The following are the HTTP/HTTPS URLs to use in &lt;code&gt;package-archives&lt;/code&gt; for MELPA and MELPA Stable respectively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only the packages are mirrored, not the web site front-end itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;We are NOT responsible for the contents of any UNOFFICIAL mirror of our packages.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;MELPA&lt;/em&gt; is &lt;em&gt;Milkypostman&#39;s ELPA&lt;/em&gt; or &lt;em&gt;Milkypostman&#39;s Experimental Lisp Package Archive&lt;/em&gt; if you&#39;re not into the whole brevity thing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/emacs-reformatter</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/purcell/emacs-reformatter</id>
    <link href="https://github.com/purcell/emacs-reformatter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Define commands which run reformatters on the current Emacs buffer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/reformatter&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/reformatter-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/reformatter&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/reformatter-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/emacs-reformatter/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/emacs-reformatter/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Define commands which run reformatters on the current Emacs buffer&lt;/h1&gt; &#xA;&lt;p&gt;This library lets elisp authors easily define an idiomatic command to reformat the current buffer using a command-line program, together with an optional minor mode which can apply this command automatically on save.&lt;/p&gt; &#xA;&lt;p&gt;By default, reformatter.el expects programs to read from stdin and write to stdout, and you should prefer this mode of operation where possible. If this isn&#39;t possible with your particular formatting program, refer to the options for &lt;code&gt;reformatter-define&lt;/code&gt;, and see the examples in the package&#39;s tests.&lt;/p&gt; &#xA;&lt;p&gt;In its initial release it supports only reformatters which can read from stdin and write to stdout, but a more versatile interface will be provided as development continues.&lt;/p&gt; &#xA;&lt;p&gt;As an example, let&#39;s define a reformat command that applies the &#34;dhall format&#34; command. We&#39;ll assume here that we&#39;ve already defined a variable &lt;code&gt;dhall-command&lt;/code&gt; which holds the string name or path of the dhall executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(reformatter-define dhall-format&#xA;  :program dhall-command&#xA;  :args &#39;(&#34;format&#34;)&#xA;  :lighter &#34; DF&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;reformatter-define&lt;/code&gt; macro expands to code which generates &lt;code&gt;dhall-format-buffer&lt;/code&gt; and &lt;code&gt;dhall-format-region&lt;/code&gt; interactive commands, and a local minor mode called &lt;code&gt;dhall-format-on-save-mode&lt;/code&gt;. The &lt;code&gt;:args&lt;/code&gt; and &lt;code&gt;:program&lt;/code&gt; expressions will be evaluated at runtime, so they can refer to variables that may (later) have a buffer-local value. A custom variable will be generated for the mode lighter, with the supplied value becoming the default.&lt;/p&gt; &#xA;&lt;p&gt;The generated minor mode allows idiomatic per-directory or per-file customisation, via the &#34;modes&#34; support baked into Emacs&#39; file-local and directory-local variables mechanisms. For example, users of the above example might add the following to a project-specific &lt;code&gt;.dir-locals.el&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;((dhall-mode&#xA;   (mode . dhall-format-on-save)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the documentation for &lt;code&gt;reformatter-define&lt;/code&gt;, which provides a number of options for customising the generated code.&lt;/p&gt; &#xA;&lt;p&gt;Library authors might like to provide autoloads for the generated code, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;;;###autoload (autoload &#39;dhall-format-buffer &#34;current-file&#34; nil t)&#xA;;;;###autoload (autoload &#39;dhall-format-region &#34;current-file&#34; nil t)&#xA;;;;###autoload (autoload &#39;dhall-format-on-save-mode &#34;current-file&#34; nil t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples of usage in the wild&lt;/h2&gt; &#xA;&lt;p&gt;To find reverse dependencies, look for &#34;Needed by&#34; on the &lt;a href=&#34;https://melpa.org/#/reformatter&#34;&gt;MELPA page for reformatter&lt;/a&gt;. Here are some specific examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psibi/dhall-mode/raw/master/dhall-mode.el&#34;&gt;dhall-mode.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jcollard/elm-mode/raw/master/elm-format.el&#34;&gt;elm-format.el&lt;/a&gt;, in &lt;code&gt;elm-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purcell/sqlformat/raw/master/sqlformat.el&#34;&gt;sqlformat.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purcell/emacs.d/raw/14f645a9bde04498ce2b60de268c2cbafa13604a/lisp/init-purescript.el#L18-L19&#34;&gt;Here&lt;/a&gt; is the author defining a reformatter in his own configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;I contribute to a number of Emacs programming language modes and tools, and increasingly use code reformatters in my daily work. It&#39;s surprisingly difficult to write robust, correct code to apply these reformatters, given that it must consider such issues as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Missing programs&lt;/li&gt; &#xA; &lt;li&gt;Buffers not yet saved to a file&lt;/li&gt; &#xA; &lt;li&gt;Displaying error output&lt;/li&gt; &#xA; &lt;li&gt;Colorising ANSI escape sequences in any error output&lt;/li&gt; &#xA; &lt;li&gt;Handling file encodings correctly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this library, I hope to help the community standardise on best practices, and make things easier for tool authors and end users alike.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How is this different from &lt;a href=&#34;https://github.com/lassik/emacs-format-all-the-code&#34;&gt;format-all.el&lt;/a&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;format-all&lt;/code&gt; is a very different approach: it aims to provide a single minor mode which you then enable and configure to do the right thing (including nothing) for all the languages you use. It even tries to tell you how to install missing programs. It&#39;s an interesting project, but IMO it&#39;s hard to design the configuration for such a grand unified approach, and it can get complex. For example, you&#39;d have to be able to configure which of two possible reformatters you want to use for a specific language, and to be able to do that on a per-project basis.&lt;/p&gt; &#xA;&lt;p&gt;In contrast reformatter produces small, self-contained and separate formatters and minor modes which all work consistently and are individually configured. It makes it possible to replace existing formatter code, and it&#39;s also very convenient for users to define their own ad-hoc reformatter wrappers&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Ensure &lt;code&gt;reformatter.el&lt;/code&gt; is in a directory on your load-path, and add the following to your &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;reformatter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MELPA&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re an Emacs 24 user or you have a recent version of &lt;code&gt;package.el&lt;/code&gt; you can install &lt;code&gt;reformatter&lt;/code&gt; from the &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repository. The version of &lt;code&gt;reformatter&lt;/code&gt; there will always be up-to-date.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Author: Steve Purcell &#xA; &lt;steve at sanityinc dot com&gt;&lt;/steve&gt;&lt;/p&gt; &#xA;&lt;p&gt;Homepage: &lt;a href=&#34;https://github.com/purcell/emacs-reformatter&#34;&gt;https://github.com/purcell/emacs-reformatter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;💝 Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;💼 LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sanityinc.com/&#34;&gt;✍ sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;🐦 @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abo-abo/swiper</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/abo-abo/swiper</id>
    <link href="https://github.com/abo-abo/swiper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, man!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/abo-abo/swiper/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/abo-abo/swiper/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;flexible, simple tools for minibuffer completion in Emacs&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ivy&lt;/strong&gt;, a generic completion mechanism for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Counsel&lt;/strong&gt;, a collection of Ivy-enhanced versions of common Emacs commands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swiper&lt;/strong&gt;, an Ivy-enhanced alternative to Isearch.&lt;/p&gt; &#xA;&lt;h1&gt;Ivy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/devel/ivy.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/ivy.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/ivy.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/ivy.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/ivy&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/ivy-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/ivy&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/ivy-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ivy is a generic completion mechanism for Emacs. While it operates similarly to other completion schemes such as &lt;code&gt;icomplete-mode&lt;/code&gt;, Ivy aims to be more efficient, smaller, simpler, and smoother to use yet highly customizable.&lt;/p&gt; &#xA;&lt;p&gt;To try Ivy, just call &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;ivy-mode&lt;/code&gt;. This will enable generic Ivy completion, including specific completion for file and buffer names.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;ivy&lt;/code&gt; package from GNU ELPA or MELPA.&lt;/p&gt; &#xA;&lt;p&gt;Users of Debian ≥10 (and derivatives such as Ubuntu ≥18.04) can install Ivy, Counsel, and Swiper with &lt;code&gt;sudo apt install elpa-counsel&lt;/code&gt;. To add Hydra support &lt;code&gt;sudo apt install elpa-ivy-hydra&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;The manual is available as &lt;a href=&#34;https://oremacs.com/swiper/&#34;&gt;HTML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Installing &lt;code&gt;ivy&lt;/code&gt; from GNU ELPA or MELPA also installs the manual under the &lt;code&gt;(ivy)&lt;/code&gt; Info node.&lt;/p&gt; &#xA;&lt;p&gt;The source file for the Info page is &lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/swiper/master/doc/ivy.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Wiki&lt;/h3&gt; &#xA;&lt;p&gt;Ivy and Swiper wiki is here: &lt;a href=&#34;https://github.com/abo-abo/swiper/wiki&#34;&gt;the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Small config example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(ivy-mode)&#xA;(setq ivy-use-virtual-buffers t)&#xA;(setq enable-recursive-minibuffers t)&#xA;;; enable this if you want `swiper&#39; to use it&#xA;;; (setq search-default-mode #&#39;char-fold-to-regexp)&#xA;(global-set-key &#34;\C-s&#34; &#39;swiper)&#xA;(global-set-key (kbd &#34;C-c C-r&#34;) &#39;ivy-resume)&#xA;(global-set-key (kbd &#34;&amp;lt;f6&amp;gt;&#34;) &#39;ivy-resume)&#xA;(global-set-key (kbd &#34;M-x&#34;) &#39;counsel-M-x)&#xA;(global-set-key (kbd &#34;C-x C-f&#34;) &#39;counsel-find-file)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; f&#34;) &#39;counsel-describe-function)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; v&#34;) &#39;counsel-describe-variable)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; o&#34;) &#39;counsel-describe-symbol)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; l&#34;) &#39;counsel-find-library)&#xA;(global-set-key (kbd &#34;&amp;lt;f2&amp;gt; i&#34;) &#39;counsel-info-lookup-symbol)&#xA;(global-set-key (kbd &#34;&amp;lt;f2&amp;gt; u&#34;) &#39;counsel-unicode-char)&#xA;(global-set-key (kbd &#34;C-c g&#34;) &#39;counsel-git)&#xA;(global-set-key (kbd &#34;C-c j&#34;) &#39;counsel-git-grep)&#xA;(global-set-key (kbd &#34;C-c k&#34;) &#39;counsel-ag)&#xA;(global-set-key (kbd &#34;C-x l&#34;) &#39;counsel-locate)&#xA;(global-set-key (kbd &#34;C-S-o&#34;) &#39;counsel-rhythmbox)&#xA;(define-key minibuffer-local-map (kbd &#34;C-r&#34;) &#39;counsel-minibuffer-history)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: parts of this config can be replaced by using &lt;code&gt;counsel-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Counsel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/devel/counsel.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/counsel.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/counsel.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/counsel.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/counsel&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/counsel-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/counsel&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/counsel-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ivy-mode&lt;/code&gt; ensures that any Emacs command using &lt;code&gt;completing-read-function&lt;/code&gt; uses ivy for completion.&lt;/p&gt; &#xA;&lt;p&gt;Counsel takes this further, providing versions of common Emacs commands that are customised to make the best use of Ivy. For example, &lt;code&gt;counsel-find-file&lt;/code&gt; has some additional keybindings. Pressing &lt;kbd&gt;DEL&lt;/kbd&gt; will move you to the parent directory.&lt;/p&gt; &#xA;&lt;p&gt;Enabling &lt;code&gt;counsel-mode&lt;/code&gt; remaps built-in Emacs functions that have counsel replacements:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Emacs command&lt;/th&gt; &#xA;   &lt;th&gt;Counsel equivalent&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;execute-extended-command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-M-x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-bindings&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-descbinds&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-describe-function&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-variable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-describe-variable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apropos-command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-apropos&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-face&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-describe-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list-faces-display&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-faces&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;find-file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-find-file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;find-library&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-find-library&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;imenu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-imenu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;load-library&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-load-library&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;load-theme&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-load-theme&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yank-pop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-yank-pop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;info-lookup-symbol&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-info-lookup-symbol&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pop-to-mark-command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-mark-ring&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bookmark-jump&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-bookmark&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Swiper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/devel/swiper.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/swiper.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/swiper.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/swiper.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/swiper&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/swiper-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/swiper&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/swiper-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swiper is an alternative to isearch that uses Ivy to show an overview of all matches.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oremacs.com/download/swiper.png&#34; alt=&#34;swiper.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Helm version of Swiper is also available: &lt;a href=&#34;https://github.com/abo-abo/swiper-helm&#34;&gt;swiper-helm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oremacs.com/download/ivy-swiper-1.png&#34; alt=&#34;ivy-swiper-1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a ten minute &lt;a href=&#34;https://www.youtube.com/watch?v=VvnJQpTFVDc&#34;&gt;video demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Frequently asked questions&lt;/h1&gt; &#xA;&lt;p&gt;Q: How do I enter an input that matches one of the candidates instead of this candidate? Example: create a file &lt;code&gt;bar&lt;/code&gt; when a file &lt;code&gt;barricade&lt;/code&gt; exists in the current directory.&lt;/p&gt; &#xA;&lt;p&gt;A: Press &lt;kbd&gt;C-M-j&lt;/kbd&gt;. Alternatively, you can make the prompt line selectable with &lt;code&gt;(setq ivy-use-selectable-prompt t)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/swiper/master/CONTRIBUTING.org&#34;&gt;guidelines&lt;/a&gt; for reporting issues and opening pull requests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/inheritenv</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/purcell/inheritenv</id>
    <link href="https://github.com/purcell/inheritenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make emacs temp buffers inherit buffer-local environment variables&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/inheritenv&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/inheritenv-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/inheritenv&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/inheritenv-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/inheritenv/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/inheritenv/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Make Emacs temp buffers inherit buffer-local environment variables&lt;/h1&gt; &#xA;&lt;p&gt;Environment variables in Emacs can be set buffer-locally, like many Emacs preferences, which allows users to have different buffer-local paths for executables in different projects, specified by a &lt;code&gt;.dir-locals.el&lt;/code&gt; file or via a &lt;code&gt;direnv&lt;/code&gt; integration like &lt;a href=&#34;https://github.com/purcell/envrc&#34;&gt;envrc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, there&#39;s a fairly common pitfall when Emacs libraries run background processes on behalf of a user: many such libraries run processes in temporary buffers that do not inherit the calling buffer&#39;s environment. This can result in executables not being found, or the wrong versions of executables being picked up.&lt;/p&gt; &#xA;&lt;p&gt;An example is the Emacs built-in command &lt;code&gt;shell-command-to-string&lt;/code&gt;. Whatever buffer-local &lt;code&gt;process-environment&lt;/code&gt; (or &lt;code&gt;exec-path&lt;/code&gt;) the user has set, that command will always use the Emacs-wide default. This is &lt;em&gt;specified&lt;/em&gt; behaviour, but not &lt;em&gt;expected&lt;/em&gt; or &lt;em&gt;helpful&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;inheritenv&lt;/code&gt; provides a couple of tools for dealing with this issue:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Library authors can wrap code that plans to execute processes in temporary buffers with the &lt;code&gt;inheritenv&lt;/code&gt; macro.&lt;/li&gt; &#xA; &lt;li&gt;Users can modify commands like &lt;code&gt;shell-command-to-string&lt;/code&gt; using the &lt;code&gt;inheritenv-add-advice&lt;/code&gt; macro.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Ensure &lt;code&gt;inheritenv.el&lt;/code&gt; is in a directory on your load-path, and add the following to your &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;inheritenv)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MELPA&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re an Emacs 24 user or you have a recent version of &lt;code&gt;package.el&lt;/code&gt; you can install &lt;code&gt;inheritenv&lt;/code&gt; from the &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repository. The version of &lt;code&gt;inheritenv&lt;/code&gt; there will always be up-to-date.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Author: Steve Purcell &#xA; &lt;steve at sanityinc dot com&gt;&lt;/steve&gt;&lt;/p&gt; &#xA;&lt;p&gt;Homepage: &lt;a href=&#34;https://github.com/purcell/inheritenv&#34;&gt;https://github.com/purcell/inheritenv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;💝 Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;💼 LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sanityinc.com/&#34;&gt;✍ sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;🐦 @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rmloveland/zoom-to-point</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/rmloveland/zoom-to-point</id>
    <link href="https://github.com/rmloveland/zoom-to-point" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs functions that zoom in on the text at point.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Exposes a command, &lt;code&gt;zoom-toggle&#39;, which will increase or decrease the size of the text at point, and a variable, &lt;/code&gt;&lt;em&gt;default-zoom-level&lt;/em&gt;&#39;, which determines the change in size.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cmugang/dotemacs</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/cmugang/dotemacs</id>
    <link href="https://github.com/cmugang/dotemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;이맥스 설정 파일&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Read me.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-mirror/emacs</title>
    <updated>2022-06-01T01:39:57Z</updated>
    <id>tag:github.com,2022-06-01:/emacs-mirror/emacs</id>
    <link href="https://github.com/emacs-mirror/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2022 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; &#xA;&lt;p&gt;This directory tree holds version 29.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; &#xA;&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; &#xA;&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; &#xA;&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&#34;mailto:bug-gnu-emacs@gnu.org&#34;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; &#xA;&lt;p&gt;See the &#34;Bugs&#34; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&#34;https://savannah.gnu.org/mail/?group=emacs&#34;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&#34;https://lists.gnu.org/&#34;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; &#xA;&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; &#xA;&lt;p&gt;There are several subdirectories:&lt;/p&gt; &#xA;&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script.&lt;/p&gt; &#xA;&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; &#xA;&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; &#xA;&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; &#xA;&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>