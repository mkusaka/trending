<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-21T01:37:02Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jdtsmith/outli</title>
    <updated>2022-09-21T01:37:02Z</updated>
    <id>tag:github.com,2022-09-21:/jdtsmith/outli</id>
    <link href="https://github.com/jdtsmith/outli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple comment-based outlines for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;outli&lt;/h1&gt; &#xA;&lt;p&gt;Simple and stylish comment-based outlines for Emacs. &lt;img src=&#34;https://user-images.githubusercontent.com/93749/190755666-69ca250c-476b-41c9-a26a-f9c12d167c99.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;outli&lt;/em&gt; is a simple Emacs outliner for code, documents, and more which styles your headings, and emulates org-mode navigation and structure editing. It is based on the built-in outline-minor-mode and is simple by design, providing just a few key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configurable heading syntax based on the concept of a &lt;code&gt;stem&lt;/code&gt; (fixed first characters) and &lt;code&gt;repeat-char&lt;/code&gt; (the number of which determines a heading&#39;s depth). Example level two headers include classics such as &lt;code&gt;;;;;&lt;/code&gt; or &lt;code&gt;# **&lt;/code&gt;, but anything&#39;s possible.&lt;/li&gt; &#xA; &lt;li&gt;Header style options including color-matched overline and blended background color for the initial heading info.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Tab&lt;/code&gt; and &lt;code&gt;Shift-Tab&lt;/code&gt; work just like you&#39;d expect from org-mode to toggle headings or document visibility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Speed keys&lt;/em&gt; mirroring org-mode for easy navigation, visibility, and structure editing at headlines. Hit &lt;code&gt;?&lt;/code&gt; for the list of available keys. Additions include &lt;code&gt;h&lt;/code&gt; to hide sublevels below this current, and &lt;code&gt;1&lt;/code&gt;-&lt;code&gt;5&lt;/code&gt; to specify such a level directly.&lt;/li&gt; &#xA; &lt;li&gt;Exposes headings to imenu. A fast imenu browser like &lt;a href=&#34;https://github.com/minad/consult&#34;&gt;consult-imenu&lt;/a&gt; is recommended.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Not yet in a package database; simply clone and point &lt;code&gt;use-package&lt;/code&gt; at the correct path (or use &lt;a href=&#34;https://github.com/radian-software/straight.el&#34;&gt;straight&lt;/a&gt;, etc.).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package outli&#xA;  :load-path &#34;~/code/emacs/outli&#34;&#xA;  :after lispy ; only if you use lispy; it also sets speed keys on headers!&#xA;  :bind (:map outli-mode-map ; convenience key to get back to containing heading&#xA;&#x9;      (&#34;C-c C-p&#34; . (lambda () (interactive) (outline-back-to-heading))))&#xA;  :hook ((prog-mode text-mode) . outli-mode)) ; or whichever modes you prefer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should probably not enable outli in org-mode, or with other packages which operate on headings, like outshine.&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;h2&gt;Headline style&lt;/h2&gt; &#xA;&lt;p&gt;The main variable to customize is &lt;code&gt;outli-heading-config&lt;/code&gt;, where you can set the step and repeat char, and influence the styling, including whether to style the stem and repeat chars the same, whether to include the overline, or whether to omit styling altogether. The custom variable &lt;code&gt;outli-blend&lt;/code&gt; controls whether a blended background is used to start the headline.&lt;/p&gt; &#xA;&lt;h2&gt;Speed keys&lt;/h2&gt; &#xA;&lt;p&gt;Customize &lt;code&gt;outli-speed-commands&lt;/code&gt; to alter or disable speed keys, which work at the beginning of heading lines only.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;How does this relate to outline-minor-mode?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;outli&lt;/em&gt; is mostly a convenient wrapper around functionality that is already built-in, adding a few things like &lt;code&gt;narrow-to-subtree&lt;/code&gt; and &lt;code&gt;insert-heading-respect-content&lt;/code&gt; (ala org). And of course the speed-key bindings, automatic comments-as-header patterns, and styling.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;How does this relate to outshine?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Mostly just conceptually. Outshine also provides (different) speed keys, for example. And a lot more, much of which isn&#39;t as relevant to modern emacs. Since it builds on the built-in capabilities of outline-minor-mode, &lt;em&gt;outli&lt;/em&gt; is a &lt;em&gt;much&lt;/em&gt; smaller package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;What is the syntax of &lt;code&gt;outli-heading-config&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;It&#39;s an &lt;em&gt;alist&lt;/em&gt;, each entry of which looks like:&lt;/p&gt; &lt;p&gt;&lt;code&gt;(MAJOR-MODE STEM REPEAT-CHAR STYLE NO-BAR)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;I recommend using the customize interface to configure outli: &lt;code&gt;M-x customize-group outli&lt;/code&gt;. But it may help to know:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;MAJOR-MODE&lt;/code&gt;: A symbol for a major mode, or parent mode from which the current mode inherits, like &lt;code&gt;&#39;text-mode&lt;/code&gt; (note: omit the single apostrophe in the customize interface: it knows it&#39;s a symbol).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;STEM&lt;/code&gt;: A string like &lt;code&gt;&#34;# &#34;&lt;/code&gt;: the fixed &#34;stem&#34; of the headline pattern (omit quotes in customize interface). Can also be an elisp expression which evaluates to a string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;REPEAT-CHAR&lt;/code&gt;: A &lt;em&gt;character&lt;/em&gt; like &lt;code&gt;?*&lt;/code&gt;: the repeating character which specifies the level of a headline (again: no &lt;code&gt;?&lt;/code&gt; needed in customize, just type the character). Can also be an elisp expression which evaluates to a character.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;STYLE&lt;/code&gt;: A style flag: &lt;code&gt;nil&lt;/code&gt; for default styling, &lt;code&gt;&#39;none&lt;/code&gt; for no styling, and &lt;code&gt;t&lt;/code&gt; for uniform styling between stem and repeat char. Can be omitted (defaults to &lt;code&gt;nil&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NO-BAR&lt;/code&gt;: A flag for the overline bar: if non-&lt;code&gt;nil&lt;/code&gt;, omit the overline. Can be omitted (defaults to &lt;code&gt;nil&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tips&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use arbitrary expressions for the stem and repeat chars; they&#39;ll get evaluated at run-time.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s useful to target high-level modes like prog-mode or text-mode from which many modes inherit (see &lt;a href=&#34;https://github.com/jdtsmith/mode-minder&#34;&gt;mode-minder&lt;/a&gt; to get a list of your major mode heirarchy).&lt;/li&gt; &#xA; &lt;li&gt;Try out the &lt;code&gt;h&lt;/code&gt; key at headline start: it folds everything up to be no deeper than the current header&#39;s level.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Related Packages&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;outline-minor-mode: The built-in minor mode for outlining documents on which &lt;em&gt;outli&lt;/em&gt; builds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://orgmode.org&#34;&gt;orgmode&lt;/a&gt;: The do-everything outliner mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alphapapa/outshine&#34;&gt;outshine&lt;/a&gt;: A featureful outline-mode enhancement from which &lt;code&gt;outli&lt;/code&gt; took its inspiration. Has many legacy features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alphapapa/outorg&#34;&gt;outorg&lt;/a&gt;: Required by outshine, this mode enables editing comment blocks in temporary org-mode buffers (the inverse of code-blocks in org).&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-outside-org.html&#34;&gt;more related packages for org-like behavior outside of org&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tarsius/hl-todo</title>
    <updated>2022-09-21T01:37:02Z</updated>
    <id>tag:github.com,2022-09-21:/tarsius/hl-todo</id>
    <link href="https://github.com/tarsius/hl-todo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Highlight TODO keywords&lt;/p&gt;&lt;hr&gt;&lt;p&gt;** Highlight TODO and similar keywords in comments and strings&lt;/p&gt; &#xA;&lt;p&gt;To highlight keywords turn on &lt;del&gt;hl-todo-mode&lt;/del&gt; in individual buffers or use the global variant &lt;del&gt;global-hl-todo-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the keywords that are recognized by customizing &lt;del&gt;hl-todo-keyword-faces&lt;/del&gt; either through the customization interface or by setting the variable directly in your init file, for example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq hl-todo-keyword-faces &#39;((&#34;TODO&#34; . &#34;#FF0000&#34;) (&#34;FIXME&#34; . &#34;#FF0000&#34;) (&#34;DEBUG&#34; . &#34;#A020F0&#34;) (&#34;GOTCHA&#34; . &#34;#FF4500&#34;) (&#34;STUB&#34; . &#34;#1E90FF&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This package also provides commands for moving to the next or previous keyword, to invoke &lt;del&gt;occur&lt;/del&gt; with a regexp that matches all known keywords, and to insert a keyword. If you want to use these commands, then you should bind them in &lt;del&gt;hl-todo-mode-map&lt;/del&gt;, e.g.:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key hl-todo-mode-map (kbd &#34;C-c p&#34;) &#39;hl-todo-previous) (define-key hl-todo-mode-map (kbd &#34;C-c n&#34;) &#39;hl-todo-next) (define-key hl-todo-mode-map (kbd &#34;C-c o&#34;) &#39;hl-todo-occur) (define-key hl-todo-mode-map (kbd &#34;C-c i&#34;) &#39;hl-todo-insert) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See [[https://www.emacswiki.org/emacs/FixmeMode][this list]] on the Emacswiki for other packages that implement the same basic features, but which might also provide additional features that you might like, but which I don&#39;t deem necessary.&lt;/p&gt; &#xA;&lt;p&gt;See [[https://github.com/tarsius/hl-todo/wiki][FAQ and Common Issues]] if something isn&#39;t working as expected.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gaqzi/conf</title>
    <updated>2022-09-21T01:37:02Z</updated>
    <id>tag:github.com,2022-09-21:/gaqzi/conf</id>
    <link href="https://github.com/gaqzi/conf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Config files&lt;/h1&gt; &#xA;&lt;p&gt;These are my general config files aggrued over a long period of time. It&#39;s likely not useful to anyone but myself.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Clone the directory and then run &lt;code&gt;rake&lt;/code&gt; to clone any submodules and symlink all files and folders.&lt;/p&gt; &#xA;&lt;h2&gt;Updated with thoughtbot&#39;s laptop script&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir ~/code &amp;amp;&amp;amp; cd ~/code&#xA;$ git clone git://github.com/thoughtbot/laptop.git&#xA;$ bash laptop/mac&#xA;$ rehash&#xA;$ # copy id_rsa file into place&#xA;$ git clone git@github.com:gaqzi/conf.git&#xA;$ RCRC=$(pwd)/conf/rcrc rcup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuring OSX apps&lt;/h1&gt; &#xA;&lt;h2&gt;iTerm2&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Cmd+;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;General tab, near the bottom click &#34;Load preferences from a custom folder or URL&#34;&lt;/li&gt; &#xA; &lt;li&gt;Browse to &lt;code&gt;$HOME/code/conf/Mac apps/iTerm2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Restart iTerm2&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;IntelliJ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Load by going to &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Import settings&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;settings.jar&lt;/code&gt; from &lt;code&gt;~/code/conf/Mac apps/IntelliJIdea15&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>