<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-15T01:38:58Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>licht1stein/obsidian.el</title>
    <updated>2022-08-15T01:38:58Z</updated>
    <id>tag:github.com,2022-08-15:/licht1stein/obsidian.el</id>
    <link href="https://github.com/licht1stein/obsidian.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Obsidian Notes for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Obsidian Notes for Emacs [[https://melpa.org/#/obsidian][file:https://melpa.org/packages/obsidian-badge.svg]] [[https://stable.melpa.org/#/obsidian][file:https://stable.melpa.org/packages/obsidian-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;Emacs front-end for [[https://obsidian.md/][Obsidian Notes]].&lt;/p&gt; &#xA;&lt;p&gt;#+TOC: headlines 1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation Obsidian.el is available from [[https://melpa.org][MELPA]] or [[https://stable.melpa.org/#/obsidian][MELPA Stable]] and can be installed with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src M-x package-install RET obsidian RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Put this in your &lt;del&gt;init.el&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (require &#39;obsidian) (obsidian-specify-path &#34;~/MY_OBSIDIAN_FOLDER&#34;) ;; If you want a different directory of `obsidian-capture&#39;: (setq obsidian-inbox-directory &#34;Inbox&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; Replace standard command with Obsidian.el&#39;s in obsidian vault: (bind-key (kbd &#34;C-c C-o&#34;) &#39;obsidian-follow-link-at-point &#39;obsidian-mode-map)&lt;/p&gt; &#xA;&lt;p&gt;;; Use either &lt;code&gt;obsidian-insert-wikilink&#39; or &lt;/code&gt;obsidian-insert-link&#39;: (bind-key (kbd &#34;C-c C-l&#34;) &#39;obsidian-insert-wikilink &#39;obsidian-mode-map)&lt;/p&gt; &#xA;&lt;p&gt;;; Optionally you can also bind &lt;code&gt;obsidian-jump&#39; and &lt;/code&gt;obsidian-capture&#39; ;; replace &#34;YOUR_BINDING&#34; with the key of your choice: (bind-key (kbd &#34;YOUR_BINDING&#34;) &#39;obsidian-jump) (bind-key (kbd &#34;YOUR_BINDING&#34;) &#39;obsidian-capture)&lt;/p&gt; &#xA;&lt;p&gt;;; Activate detectino of Obsidian vault (global-obsidian-mode t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Or using [[https://github.com/jwiegley/use-package][use-package]]:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (use-package obsidian :ensure t :demand t :config (obsidian-specify-path &#34;~/MY_OBSIDIAN_FOLDER&#34;) (global-obsidian-mode t) :custom ;; This directory will be used for &lt;code&gt;obsidian-capture&#39; if set. (obsidian-inbox-directory &#34;Inbox&#34;) :bind (:map obsidian-mode-map ;; Replace C-c C-o with Obsidian.el&#39;s implementation. It&#39;s ok to use another key binding. (&#34;C-c C-o&#34; . obsidian-follow-link-at-point) ;; If you prefer you can use &lt;/code&gt;obsidian-insert-wikilink&#39; (&#34;C-c C-l&#34; . obsidian-insert-wikilink))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Optionally you can specify &lt;del&gt;obsidian-inbox-directory&lt;/del&gt;, it will be used by &lt;del&gt;obsidian-capture&lt;/del&gt; to store new notes into. If you don&#39;t set it the root folder of your Obsidian vault will be used.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About Obsidian.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I wanted to work with Obsidian Notes using Emacs. Obviously you already can open your Obsidian folder and start editing markdown files with Emacs. But I want to improve that and split the responsibilities between Emacs and Obsidian the way it makes sense for an Emacs user.&lt;/p&gt; &#xA;&lt;p&gt;** What should we keep doing in Obsidian?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sync&lt;/li&gt; &#xA; &lt;li&gt;Mobile client (of course, and that&#39;s where Obsidian beats anything else in Emacs)&lt;/li&gt; &#xA; &lt;li&gt;Complex exploring (graph views etc)&lt;/li&gt; &#xA; &lt;li&gt;All the things done with complex plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What should be possible to do in Emacs? Obsidian.el must empower us to stay in Emacs for things that make sense in Emacs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Creating and editing notes with convenient autocomplete for tags and links (nothing will ever compare to Emacs in terms of editing power)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jumping between notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Searching all notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Finding all notes with a tag&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Viewing and following backlinks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When all of the above is ready we will almost never need the Obsidian app on desktop, but will still be able to use it on mobile or when specifically needed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How does obsidian.el work? ** obsidian-mode When you require obsidian.el via &lt;del&gt;use-package&lt;/del&gt; or in other ways (see snippet above), you have to specify the root folder of your Obsidian Notes vault. If &lt;del&gt;global-obsidian-mode&lt;/del&gt; is enabled and if you specified the root folder, each time you open a markdown buffer it checks, if that file is part of your Obsidian Notes vault. If it is &lt;del&gt;obsidian-mode&lt;/del&gt; minor mode is activated for this buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** company-mode completion [[./resources/tag-completion.png]]&lt;/p&gt; &#xA;&lt;p&gt;Once the &lt;del&gt;obsidian-mode&lt;/del&gt; is activated obsidian.el scans all markdown files in the vault for tags and links (links still WIP), and stores these lists in it&#39;s global variables. It also adds [[http://company-mode.github.io/][company-mode]] backends to suggest links and tags for completion.&lt;/p&gt; &#xA;&lt;p&gt;** Manual re-scan You can update the lists of tags, links etc. manually if it&#39;s lagging for some reason by running an interactive command:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src M-x obsidian-update RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Following links Obsidian.el implements a custom command &lt;del&gt;obsidian-follow-link-at-point&lt;/del&gt; which correctly follows markdown and wiki links generated by the Obsidian App. In the install example above this command is bound to &lt;del&gt;C-c C-o&lt;/del&gt; in &lt;del&gt;obsidian-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src M-x obsidian-follow-link-at-point RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that the Obsidian app replaces spaces with &lt;del&gt;%20&lt;/del&gt; when inserting markdown links, and doesn&#39;t do that when inserting wiki links. Obsidian.el follows this convention to maximize compatibility:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src markdown Markdown link with spaces: &lt;a href=&#34;https://raw.githubusercontent.com/licht1stein/obsidian.el/master/subdir/2-sub%20with%20spaces%20and%20%D0%B1%D1%83%D0%BA%D0%B2%D1%8B.md&#34;&gt;2-sub with spaces and буквы&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wikilink with spaces: [[Subdir/2-sub with spaces and буквы]] #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Both these types of links are correctly handled by &lt;del&gt;obsidian-follow-link-at-point&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Multiple matches Obsidian doesn&#39;t insert relative path by default, only does it when there are multiple files with the same name. &lt;del&gt;obsidian-follow-link-at-point&lt;/del&gt; handles this correctly. Every time you follow a link it checks, if there&#39;s only one match for the filename linked. If there&#39;s just one it simply opens that file. If there&#39;s more than one it prompts you to select which file to open.&lt;/p&gt; &#xA;&lt;p&gt;** Inserting links [[./resources/insert-link.png]]&lt;/p&gt; &#xA;&lt;p&gt;There are two commands to insert links &lt;del&gt;obsidian-insert-link&lt;/del&gt; and &lt;del&gt;obsidian-insert-wikilink&lt;/del&gt;, you can choose one depending on your preferred link format:&lt;/p&gt; &#xA;&lt;p&gt;*** Inserts a link in Markdown format Example: &lt;del&gt;&lt;a href=&#34;https://raw.githubusercontent.com/licht1stein/obsidian.el/master/path/to/file.md&#34;&gt;Link description&lt;/a&gt;&lt;/del&gt; #+begin_src M-x obsidian-insert-link RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note, that when you insert a link to file that has spaces in it&#39;s name, like &#34;facts about inserting links.md&#34;, Obsidian app would html-format the spaces, meaning the link will look like&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src markdown &lt;a href=&#34;https://raw.githubusercontent.com/licht1stein/obsidian.el/master/facts%20about%20inserting%20links.md&#34;&gt;facts&lt;/a&gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Obsidian.el follows this convention and does the same when inserting markdown links. &lt;del&gt;obsidian-follow-link-at-point&lt;/del&gt; handles this correctly.&lt;/p&gt; &#xA;&lt;p&gt;*** Insert a link in wikilink format Example: &lt;del&gt;[[path/fo/file.md|Link description]]&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src M-x obsidian-insert-wikilink RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Jumping between notes Quickly jump between notes using &lt;del&gt;obsidian-jump&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src M-x obsidian-jump RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Aliases If you have YAML front matter in your note, Obsidian.el will find aliases in it and add them to the &lt;del&gt;obsidian-jump&lt;/del&gt; selection. Both &lt;del&gt;aliases&lt;/del&gt; and &lt;del&gt;alias&lt;/del&gt; keys are supported.&lt;/p&gt; &#xA;&lt;p&gt;** Capturing new note Use &lt;del&gt;obsidian-capture&lt;/del&gt;. If you specified &lt;del&gt;obsidian-inbox-directory&lt;/del&gt;, it will create new notes in this directory. Otherwise in your Obsidian vault root directory:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src M-x obsidian-capture RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Searching notes Use &lt;del&gt;obsidian-search&lt;/del&gt; to look for a string or a regular expression:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src M-x obsidian-search RET query RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Finding all notes with a tag Use &lt;del&gt;obsidian-tag-find&lt;/del&gt; to list all notes that contain a tag. Let&#39;s you choose a tag from list of all tags:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src M-x obsidian-tag-find RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Development tasks&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Specify Obsidian folder and save it in variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Enumerate files in the Obsidian folder and save a list&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run the scan when entering obsidian-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Functions to scan notes for tags&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get full list of all tags&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; company-backend with tags&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; commands to insert links in markdown and wikilink&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Capture command to create a new note in Obsidian folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Obsidian minor for matching .md files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jumping between notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Following links&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why obsidian.el and not... ** Obsidian App itself, Athens Research or any other great app? Easy. When on desktop they are simply not Emacs. Not even Obsidian itself. Emacs beats anything else for things that it is built for. But you know this already, otherwise you wouldn&#39;t be here.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Org-roam or any other great Emacs libraries? The answer is mostly the same for all of them. Mobile support. Or rather — NO mobile support. I don&#39;t buy into the story that &#34;you don&#39;t really need your PKM system on mobile&#34;, and &#34;serious work is done only on desktop&#34; etc. These are just excuses for the impossibility of building a full-fledged mobile version of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;So there were two ways to go about it: build a mobile app for something like org-roam (which would be cool, but is above my front-end skills) or build a light-weight Emacs client for something like Obsidian. I chose the simpler task.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gratitude&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The work on Obsidian.el was made considerably easier and definitely more fun thanks to the great work of [[https://github.com/magnars][Magnar Sveen]] and his packages [[https://github.com/magnars/dash.el][dash.el]] and [[https://github.com/magnars/s.el][s.el]]. Thank you for making Elisp almost as convenient as Clojure!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;During the development of Obsidian.el I have learned and copied from the code of the amazing [[https://github.com/org-roam/org-roam][org-roam]] package. Thank you!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hvesalai/emacs-scala-mode</title>
    <updated>2022-08-15T01:38:58Z</updated>
    <id>tag:github.com,2022-08-15:/hvesalai/emacs-scala-mode</id>
    <link href="https://github.com/hvesalai/emacs-scala-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The definitive scala-mode for emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;emacs-scala-mode&lt;/h1&gt; &#xA;&lt;p&gt;The mode intends to provide basic emacs support for the Scala language, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;local indenting of code, comments and multi-line strings&lt;/li&gt; &#xA; &lt;li&gt;motion commands&lt;/li&gt; &#xA; &lt;li&gt;highlighting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/hvesalai/emacs-sbt-mode&#34;&gt;emacs-sbt-mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The preferred mechanism is via MELPA and &lt;code&gt;use-package&lt;/code&gt; as per our &lt;a href=&#34;https://www.emacswiki.org/emacs/LearningEmacs&#34;&gt;Learning Emacs&lt;/a&gt; guide:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package scala-mode&#xA;  :interpreter&#xA;    (&#34;scala&#34; . scala-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multi-line comments&lt;/h2&gt; &#xA;&lt;p&gt;The start of a multi-line comment is indented to the same level with code.&lt;/p&gt; &#xA;&lt;p&gt;By default, if a multi-line comment begins with &lt;code&gt;/*&lt;/code&gt; it is considered to be a Scaladoc comment. Scaladoc comments are indented according to the Scaladoc style guide.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;/** This is a Scaladoc comment.&#xA;  * 2nd line.&#xA;  */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if the configurable variable &lt;em&gt;scala-indent:use-javadoc-style&lt;/em&gt; is set to &lt;code&gt;t&lt;/code&gt;, multi-line comments beginning with &lt;code&gt;/**&lt;/code&gt; will be indented according to the Javadoc style, wherein all following lines are indented under the first asterisk.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;/**&#xA; * This is a Javadoc-style comment.&#xA; * 2nd line.&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All other multi-line comments are indented under the first asterisk.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;/**&#xA; * Supercalifragilistic-&#xA; * expialidocious!&#xA; */&#xA;&#xA;/*&#xA; A comment&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Typing an asterisk in multi-line comment region, at the start of a line, will trigger indent. Furthermore, if the configurable variable &lt;code&gt;scala-indent:add-space-for-scaladoc-asterisk&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt; (default) and the asterisk was the last character on the line, a space will be inserted after it. If you type a forward slash after the automatically inserted space, the space is deleted again so that you can end the comment without deleting the space manually.&lt;/p&gt; &#xA;&lt;h2&gt;Filling (i.e. word wrap)&lt;/h2&gt; &#xA;&lt;p&gt;Paragraph &lt;code&gt;filling&lt;/code&gt; is supported for comments and multi-line strings. Auto-fill is not supported yet.&lt;/p&gt; &#xA;&lt;p&gt;To re-fill a paragraph, use the &lt;code&gt;fill-paragraph&lt;/code&gt; command ( &lt;code&gt;M-q&lt;/code&gt; ). As always, the column at which to wrap is controlled by the &lt;code&gt;fill-column&lt;/code&gt; variable, which you set it with the &lt;code&gt;set-fill-column&lt;/code&gt; command. To set the default, you use the &lt;code&gt;customize-variable&lt;/code&gt; command or a mode-hook.&lt;/p&gt; &#xA;&lt;h2&gt;Motion&lt;/h2&gt; &#xA;&lt;p&gt;Emacs commands &lt;code&gt;forward-sexp&lt;/code&gt; and &lt;code&gt;backward-sexp&lt;/code&gt; ( &lt;code&gt;M-C-f&lt;/code&gt;, &lt;code&gt;M-C-b&lt;/code&gt; ) motion commands will move over reserved words, literals, ids and lists.&lt;/p&gt; &#xA;&lt;p&gt;Text paragraph motion (i.e. &lt;code&gt;forward-paragraph&lt;/code&gt;, &lt;code&gt;backward-paragraph&lt;/code&gt;) works inside comments and multi-line strings, and it respect Scaladoc&#39;s wiki-style markup.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;scala-syntax:beginning-of-definition&lt;/code&gt; and &lt;code&gt;scala-syntax:end-of-definition&lt;/code&gt; move the cursor forward and backward over class, trait, object, def, val, var, and type definitions. These functions are assigned to the buffer local variables &lt;code&gt;beginning-of-defun-function&lt;/code&gt; and &lt;code&gt;end-of-defun-function&lt;/code&gt; which makes it so that the &lt;code&gt;beginning-of-defun&lt;/code&gt; and &lt;code&gt;end-of-defun&lt;/code&gt; functions behave in a way that is appropriate to scala. These functions are not currently able to support some of the more advanced scala definition types.&lt;/p&gt; &#xA;&lt;h2&gt;Highlighting&lt;/h2&gt; &#xA;&lt;p&gt;The highlighting of variable definitions, such as&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;var test = &#34;some mutable variable&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;now result in the variable name (&#34;test&#34; above) to be highlighted using the variable scala-font-lock:var-face. Per default, the value of scala-font-lock:var-face is &#39;font-lock-warning-face. You can always change the highlighting of vars by changing scala-font-lock:var-face through the Emacs face customization (use &lt;code&gt;M-x&lt;/code&gt; &lt;em&gt;customize-face&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Very complex scala files may need the following in your emacs init (.emacs, etc):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; For complex scala files&#xA;(setq max-lisp-eval-depth 50000)&#xA;(setq max-specpdl-size 5000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;imenu&lt;/h2&gt; &#xA;&lt;p&gt;scala-mode supports imenu, a library for accessing locations in documents that is included in emacs 24. The custom variable &lt;code&gt;scala-imenu:should-flatten-index&lt;/code&gt; controls whether or not the imenu index will be hierarchical or completely flat. The current iMenu implementation only goes one level deep i.e. nested classes are not traversed. scala-mode&#39;s imenu support depends heavily on the &lt;code&gt;scala-syntax:end-of-definition&lt;/code&gt; and &lt;code&gt;scala-syntax:beginning-of-definition&lt;/code&gt; functions, and as such, it shares their limitations.&lt;/p&gt; &#xA;&lt;h2&gt;Joining lines (delete indentation) and removing horizontal whitespace&lt;/h2&gt; &#xA;&lt;p&gt;Scala-mode defines its own &lt;code&gt;scala-indent:join-line&lt;/code&gt; and &lt;code&gt;scala-indent:fixup-whitespace&lt;/code&gt; functions.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the normal &lt;code&gt;join-line&lt;/code&gt; (aka &lt;code&gt;delete-indentation&lt;/code&gt;), &lt;code&gt;scala-indent:join-line&lt;/code&gt; detects the comment fill-prefix and removes it.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;scala-indent:fixup-whitespace&lt;/code&gt; first removes all horizontal whitespace, then adds one space the context requires none to be present (before semicolon, around dot, after &lt;code&gt;(&lt;/code&gt; or &lt;code&gt;[&lt;/code&gt;, before &lt;code&gt;)&lt;/code&gt; or &lt;code&gt;]&lt;/code&gt;, etc).&lt;/p&gt; &#xA;&lt;h2&gt;Indenting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Where four developers meet, there are four opinions on how code should be indented&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;scala-mode&lt;/code&gt; supports 2^4 different ways of applying local heuristics to indentation.&lt;/p&gt; &#xA;&lt;p&gt;Note that when using &lt;code&gt;sbt-scalariform&lt;/code&gt;, your local indentation rules will be overwritten.&lt;/p&gt; &#xA;&lt;h3&gt;Run-on lines&lt;/h3&gt; &#xA;&lt;p&gt;Provided by &lt;code&gt;scala-indent:default-run-on-strategy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The indenting engine has three modes for handling run-on lines. The &lt;code&gt;reluctant&lt;/code&gt; (default) mode is geared toward a general style of coding and the &lt;code&gt;eager&lt;/code&gt; for strictly functional style. A third mode called &lt;code&gt;operators&lt;/code&gt; is between the two.&lt;/p&gt; &#xA;&lt;p&gt;The difference between the modes is how they treat run-on lines. For example, the &lt;code&gt;eager&lt;/code&gt; mode will indent &lt;code&gt;map&lt;/code&gt; in the following code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val x = List(1, 2, 3)&#xA; map(x =&amp;gt; x + 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;operators&lt;/code&gt; and &lt;code&gt;eager&lt;/code&gt; modes will indent the second row in the following code, as the first line ends with an operator character.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val x = 20 +&#xA;  21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;reluctant&lt;/code&gt; mode (default) will not indent the line in either case. However, all three modes will indent the second line in these examples as it is clear that the first line cannot terminate a statement.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val x = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9).&#xA;  map (x =&amp;gt; x + 1) // last token of previous line cannot terminate a statement&#xA;&#xA;val y = (List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)&#xA;           map (x =&amp;gt; x + 1)) // inside &#39;newlines disabled&#39; region&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use empty lines in the &lt;code&gt;eager&lt;/code&gt; mode to stop it from indenting a line. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val x = foo(&#34;bar&#34;)&#xA;           (&#34;zot&#34;, &#34;kala&#34;) // indented as curry&#xA;&#xA;val y = foo(&#34;bar&#34;)&#xA;&#xA;(&#34;zot&#34;, &#34;kala&#34;) // a tuple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, in all three modes pressing the &lt;code&gt;tab&lt;/code&gt; key repeatedly on a line will toggle between the modes.&lt;/p&gt; &#xA;&lt;h3&gt;Value expressions&lt;/h3&gt; &#xA;&lt;p&gt;Provided by &lt;code&gt;scala-indent:indent-value-expression&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;When this variable is set to &lt;em&gt;nil&lt;/em&gt; (default), body of a value expressions will be indented in the traditional way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val x = try {&#xA;  some()&#xA;} catch {&#xA;  case e =&amp;gt; other&#xA;} finally {&#xA;  clean-up()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, when the variable is set to &lt;code&gt;t&lt;/code&gt;, the body will be indented one extra step to make the &lt;code&gt;val&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;def&lt;/code&gt; stand out. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val x = try {&#xA;    some()&#xA;  } catch {&#xA;    case e =&amp;gt; other&#xA;  } finally {&#xA;    clean-up()&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameter lists&lt;/h3&gt; &#xA;&lt;p&gt;Provided by &lt;code&gt;scala-indent:align-parameters&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;When this variable is set to &lt;code&gt;nil&lt;/code&gt; (default), parameters and run-on lines in parameter lists will not align under or according to the first parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val y = List( &#34;Alpha&#34;, &#34;Bravo&#34;,&#xA;  &#34;Charlie&#34; )&#xA;&#xA;val x = equals(List(1,2,3) map (x =&amp;gt;&#xA;  x + 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the variable is set to &lt;code&gt;t&lt;/code&gt;, the same will be indented as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val y = List( &#34;Alpha&#34;, &#34;Bravo&#34;,&#xA;              &#34;Charlie&#34; )&#xA;&#xA;val x = equals(List(1,2,3) map (x =&amp;gt;&#xA;                 x + 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expression forms: if, for, try&lt;/h3&gt; &#xA;&lt;p&gt;Provided by &lt;code&gt;scala-indent:align-forms&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;When this variable is set to &lt;code&gt;nil&lt;/code&gt; (default), &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;try&lt;/code&gt; forms are not aligned specially.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val x = if (kala)&#xA;  foo&#xA;else if (koira)&#xA;  bar&#xA;else&#xA;  zot&#xA;&#xA;val x = try &#34;1&#34;.toInt&#xA;catch { case e =&amp;gt; 0}&#xA;finally { println(&#34;hello&#34;) }&#xA;&#xA;val xs = for (i &amp;lt;- 1 to 10)&#xA;yield i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the variable is set to &lt;code&gt;t&lt;/code&gt;, the same will be indented as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val x = if (kala)&#xA;          foo&#xA;        else if (koira)&#xA;          bar&#xA;        else&#xA;          zot&#xA;&#xA;val x = try &#34;1&#34;.toInt&#xA;        catch { case e =&amp;gt; 0}&#xA;        finally { println(&#34;hello&#34;) }&#xA;&#xA;val xs = for (i &amp;lt;- 1 to 10)&#xA;         yield i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prettify-Symbols&lt;/h2&gt; &#xA;&lt;p&gt;Scala-mode has a preconfigured list of prettify-symbols rules. The &lt;code&gt;prettify-symbols-mode&lt;/code&gt; minor-mode (included with emacs from version 24.4 onwards) displays text in your buffer as (usually) unicode symbols that express the same thing to improve readability. A good example would be displaying the boolean operators as their unicode equivalents.&lt;/p&gt; &#xA;&lt;p&gt;To enable the feature just add these lines to the &lt;code&gt;scala-mode-hook&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq prettify-symbols-alist scala-prettify-symbols-alist)&#xA;(prettify-symbols-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also feel free to customise the prettify rules by adding or removing from the &lt;code&gt;scala-prettify-symbols-alist&lt;/code&gt; alist.&lt;/p&gt; &#xA;&lt;p&gt;Libre fonts that seems to work well with this feature are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro&#34;&gt;Source Code Pro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrissimpkins/Hack&#34;&gt;Hack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>seiketkm/dotfiles</title>
    <updated>2022-08-15T01:38:58Z</updated>
    <id>tag:github.com,2022-08-15:/seiketkm/dotfiles</id>
    <link href="https://github.com/seiketkm/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dotfiles&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dotfiles&lt;/h1&gt; &#xA;&lt;p&gt;dotfiles.&lt;/p&gt;</summary>
  </entry>
</feed>