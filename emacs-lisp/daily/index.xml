<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-24T01:33:49Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rainstormstudio/nerd-icons.el</title>
    <updated>2023-04-24T01:33:49Z</updated>
    <id>tag:github.com,2023-04-24:/rainstormstudio/nerd-icons.el</id>
    <link href="https://github.com/rainstormstudio/nerd-icons.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: nerd-icons.el - A Library for Nerd Font icons #+AUTHOR: Hongyu Ding #+LANGUAGE: en&lt;/p&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/nerd-icons][file:https://melpa.org/packages/nerd-icons-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;Nerd-icons.el is a library for easily using [[https://github.com/ryanoasis/nerd-fonts][Nerd Font]] icons inside Emacs, an alternative to [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].&lt;/p&gt; &#xA;&lt;p&gt;It works on both GUI and terminal! You only need a [[https://www.nerdfonts.com/#home][Nerd Font]] installed on your system.&lt;/p&gt; &#xA;&lt;p&gt;It is inspired by [[https://github.com/domtronn/all-the-icons.el][all-the-icons]], [[https://github.com/seagle0128/icons-in-terminal.el][icons-in-terminal]], [[https://github.com/ryanoasis/vim-devicons][vim-devicons]], and [[https://github.com/nvim-tree/nvim-web-devicons][nvim-web-devicons]].&lt;/p&gt; &#xA;&lt;p&gt;in GUI: [[file:screenshots/demo.png]]&lt;/p&gt; &#xA;&lt;p&gt;in terminal: [[file:screenshots/demo-terminal.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installing Fonts Please go to [[https://www.nerdfonts.com/][Nerd Fonts website]] and get a Nerd font. After installing the font on your machine, you need to set &lt;del&gt;nerd-icons-font-family&lt;/del&gt; to match its font name so that the font can be properly used under GUI. If you want Nerd Fonts to work under a terminal, please change your terminal&#39;s font to a Nerd font.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the Nerd Font you installed does not display correctly (e.g. appear cut off), it is recommended to use =Symbols Nerd Fonts Mono= (Symbols Nerd Font). You can use &lt;del&gt;M-x nerd-icons-install-fonts&lt;/del&gt; to install &lt;del&gt;Symbols Nerd Fonts Mono&lt;/del&gt; for you. Note that for &lt;em&gt;Windows&lt;/em&gt; you&#39;ll need to manually install the font after you used this function.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage using [[https://github.com/radian-software/straight.el][straight]]: #+BEGIN_SRC emacs-lisp (use-package nerd-icons :custom ;; The Nerd Font you want to use in GUI ;; &#34;Symbols Nerd Font Mono&#34; is the default and is recommended ;; but you can use any other Nerd Font if you want ;; (nerd-icons-font-family &#34;Symbols Nerd Font Mono&#34;) ) #+END_SRC ** insert icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;use icon based on category&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-dir&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-file&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-mode&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-url&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-buffer&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;example: #+BEGIN_SRC emacs-lisp (insert (nerd-icons-icon-for-file &#34;init.el&#34;)) ;; Inserts an icon for Emacs Lisp #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;use icon directly&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-ipsicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-octicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-pomicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-powerline&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-faicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-wicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-sucicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-devicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-codicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-flicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-mdicon&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;example: #+BEGIN_SRC emacs-lisp (insert (nerd-icons-faicon &#34;nf-fa-gitlab&#34;)) ;; Inserts a Gitlab icon #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;insert icon interactively (&lt;del&gt;M-x&lt;/del&gt; functions)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-ipsicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-octicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-pomicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-powerline&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-faicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-wicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-sucicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-devicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-codicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-flicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-mdicon&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Glyph Sets | Glyph Set | prefix | Point Range | insert function | |-------------------------+----------------------+--------------------------------------+----------------------| | Seti-UI + Custom | &lt;del&gt;nf-seti-&lt;/del&gt;, &lt;del&gt;nf-custom-&lt;/del&gt; | &lt;del&gt;e5fa&lt;/del&gt; - &lt;del&gt;e631&lt;/del&gt; | &lt;del&gt;nerd-icons-sucicon&lt;/del&gt; | | Devicons | &lt;del&gt;nf-dev-&lt;/del&gt; | &lt;del&gt;e700&lt;/del&gt; - &lt;del&gt;e7c5&lt;/del&gt; | &lt;del&gt;nerd-icons-devicon&lt;/del&gt; | | Font Awesome | &lt;del&gt;nf-fa-&lt;/del&gt; | &lt;del&gt;f000&lt;/del&gt; - &lt;del&gt;f2e0&lt;/del&gt; | &lt;del&gt;nerd-icons-faicon&lt;/del&gt; | | Font Awesome Extension | &lt;del&gt;nf-fae-&lt;/del&gt; | &lt;del&gt;e200&lt;/del&gt; - &lt;del&gt;e2a9&lt;/del&gt; | &lt;del&gt;nerd-icons-faicon&lt;/del&gt; | | Material Design Icons | &lt;del&gt;nf-md-&lt;/del&gt; | &lt;del&gt;f500&lt;/del&gt; - &lt;del&gt;fd46&lt;/del&gt; | &lt;del&gt;nerd-icons-mdicon&lt;/del&gt; | | Weather | &lt;del&gt;nf-weather-&lt;/del&gt; | &lt;del&gt;e300&lt;/del&gt; - &lt;del&gt;e3eb&lt;/del&gt; | &lt;del&gt;nerd-icons-wicon&lt;/del&gt; | | Octicons | &lt;del&gt;nf-oct-&lt;/del&gt; | &lt;del&gt;f400&lt;/del&gt; - &lt;del&gt;f4a9&lt;/del&gt;, &lt;del&gt;2665&lt;/del&gt;, &lt;del&gt;26A1&lt;/del&gt; | &lt;del&gt;nerd-icons-octicon&lt;/del&gt; | | Powerline Symbols | &lt;del&gt;nf-pl-&lt;/del&gt; | &lt;del&gt;e0a0&lt;/del&gt; - &lt;del&gt;e0a2&lt;/del&gt;, &lt;del&gt;e0b0&lt;/del&gt; - &lt;del&gt;e0b3&lt;/del&gt; | &lt;del&gt;nerd-icons-powerline&lt;/del&gt; | | Powerline Extra Symbols | &lt;del&gt;nf-ple-&lt;/del&gt; | &lt;del&gt;e0a3&lt;/del&gt;, &lt;del&gt;e0b4&lt;/del&gt; - &lt;del&gt;e0c8&lt;/del&gt;, &lt;del&gt;e0ca&lt;/del&gt;, &lt;del&gt;e0cc&lt;/del&gt; - &lt;del&gt;e0d4&lt;/del&gt; | &lt;del&gt;nerd-icons-powerline&lt;/del&gt; | | IEC Power Symbols | &lt;del&gt;nf-iec-&lt;/del&gt; | &lt;del&gt;23fb&lt;/del&gt; - &lt;del&gt;23fe&lt;/del&gt;, &lt;del&gt;2b58&lt;/del&gt; | &lt;del&gt;nerd-icons-ipsicon&lt;/del&gt; | | Font Logos | &lt;del&gt;nf-linux-&lt;/del&gt; | &lt;del&gt;f300&lt;/del&gt; - &lt;del&gt;f32d&lt;/del&gt; | &lt;del&gt;nerd-icons-flicon&lt;/del&gt; | | Pomicons | &lt;del&gt;nf-pom-&lt;/del&gt; | &lt;del&gt;e000&lt;/del&gt; - &lt;del&gt;e00a&lt;/del&gt; | &lt;del&gt;nerd-icons-pomicon&lt;/del&gt; | | Codicons | &lt;del&gt;nf-cod-&lt;/del&gt; | &lt;del&gt;ea60&lt;/del&gt; - &lt;del&gt;ebeb&lt;/del&gt; | &lt;del&gt;nerd-icons-codicon&lt;/del&gt; |&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check [[https://github.com/ryanoasis/nerd-fonts/wiki/Glyph-Sets-and-Code-Points][Nerd Fonts Glyph Sets and Code Points]] for more information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Related Packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/treemacs-nerd-icons][treemacs-nerd-icons]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/seagle0128/nerd-icons-ivy-rich][nerd-icons-ivy-rich]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/seagle0128/nerd-icons-ibuffer][nerd-icons-ibuffer]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/nerd-icons-completion][nerd-icons-completion]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use nerd-icons with Corfu If you use [[https://github.com/minad/corfu][corfu]] and [[https://github.com/jdtsmith/kind-icon][kind-icon]], you can use the following setting for icon mapping: #+BEGIN_SRC emacs-lisp (setq kind-icon-use-icons nil) (setq kind-icon-mapping `( (array ,(nerd-icons-codicon &#34;nf-cod-symbol_array&#34;) :face font-lock-type-face) (boolean ,(nerd-icons-codicon &#34;nf-cod-symbol_boolean&#34;) :face font-lock-builtin-face) (class ,(nerd-icons-codicon &#34;nf-cod-symbol_class&#34;) :face font-lock-type-face) (color ,(nerd-icons-codicon &#34;nf-cod-symbol_color&#34;) :face success) (command ,(nerd-icons-codicon &#34;nf-cod-terminal&#34;) :face default) (constant ,(nerd-icons-codicon &#34;nf-cod-symbol_constant&#34;) :face font-lock-constant-face) (constructor ,(nerd-icons-codicon &#34;nf-cod-triangle_right&#34;) :face font-lock-function-name-face) (enummember ,(nerd-icons-codicon &#34;nf-cod-symbol_enum_member&#34;) :face font-lock-builtin-face) (enum-member ,(nerd-icons-codicon &#34;nf-cod-symbol_enum_member&#34;) :face font-lock-builtin-face) (enum ,(nerd-icons-codicon &#34;nf-cod-symbol_enum&#34;) :face font-lock-builtin-face) (event ,(nerd-icons-codicon &#34;nf-cod-symbol_event&#34;) :face font-lock-warning-face) (field ,(nerd-icons-codicon &#34;nf-cod-symbol_field&#34;) :face font-lock-variable-name-face) (file ,(nerd-icons-codicon &#34;nf-cod-symbol_file&#34;) :face font-lock-string-face) (folder ,(nerd-icons-codicon &#34;nf-cod-folder&#34;) :face font-lock-doc-face) (interface ,(nerd-icons-codicon &#34;nf-cod-symbol_interface&#34;) :face font-lock-type-face) (keyword ,(nerd-icons-codicon &#34;nf-cod-symbol_keyword&#34;) :face font-lock-keyword-face) (macro ,(nerd-icons-codicon &#34;nf-cod-symbol_misc&#34;) :face font-lock-keyword-face) (magic ,(nerd-icons-codicon &#34;nf-cod-wand&#34;) :face font-lock-builtin-face) (method ,(nerd-icons-codicon &#34;nf-cod-symbol_method&#34;) :face font-lock-function-name-face) (function ,(nerd-icons-codicon &#34;nf-cod-symbol_method&#34;) :face font-lock-function-name-face) (module ,(nerd-icons-codicon &#34;nf-cod-file_submodule&#34;) :face font-lock-preprocessor-face) (numeric ,(nerd-icons-codicon &#34;nf-cod-symbol_numeric&#34;) :face font-lock-builtin-face) (operator ,(nerd-icons-codicon &#34;nf-cod-symbol_operator&#34;) :face font-lock-comment-delimiter-face) (param ,(nerd-icons-codicon &#34;nf-cod-symbol_parameter&#34;) :face default) (property ,(nerd-icons-codicon &#34;nf-cod-symbol_property&#34;) :face font-lock-variable-name-face) (reference ,(nerd-icons-codicon &#34;nf-cod-references&#34;) :face font-lock-variable-name-face) (snippet ,(nerd-icons-codicon &#34;nf-cod-symbol_snippet&#34;) :face font-lock-string-face) (string ,(nerd-icons-codicon &#34;nf-cod-symbol_string&#34;) :face font-lock-string-face) (struct ,(nerd-icons-codicon &#34;nf-cod-symbol_structure&#34;) :face font-lock-variable-name-face) (text ,(nerd-icons-codicon &#34;nf-cod-text_size&#34;) :face font-lock-doc-face) (typeparameter ,(nerd-icons-codicon &#34;nf-cod-list_unordered&#34;) :face font-lock-type-face) (type-parameter ,(nerd-icons-codicon &#34;nf-cod-list_unordered&#34;) :face font-lock-type-face) (unit ,(nerd-icons-codicon &#34;nf-cod-symbol_ruler&#34;) :face font-lock-constant-face) (value ,(nerd-icons-codicon &#34;nf-cod-symbol_field&#34;) :face font-lock-builtin-face) (variable ,(nerd-icons-codicon &#34;nf-cod-symbol_variable&#34;) :face font-lock-variable-name-face) (t ,(nerd-icons-codicon &#34;nf-cod-code&#34;) :face font-lock-warning-face))) #+END_SRC&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>