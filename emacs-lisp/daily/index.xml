<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-11T01:33:39Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jpablobr/emacs-monkeytype</title>
    <updated>2023-04-11T01:33:39Z</updated>
    <id>tag:github.com,2023-04-11:/jpablobr/emacs-monkeytype</id>
    <link href="https://github.com/jpablobr/emacs-monkeytype" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Typing game/tutor for Emacs inspired by github.com/Miodec/monkeytype&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Emacs Monkeytype&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: To avoid having this in the info manual, we use HTML rather than Org syntax; it still appears with the GitHub renderer.&lt;/h1&gt; &#xA;&lt;p&gt;#+begin_html&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Emacs-25.1%2B-d24b83.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/jpablobr/emacs-monkeytype&#34;&gt;&lt;img src=&#34;https://travis-ci.com/jpablobr/emacs-monkeytype.svg?branch=main&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://melpa.org/#/emacs-monkeytype&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/monkeytype-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/emacs-monkeytype&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/monkeytype-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; #+end_html &#xA;&lt;p&gt;A typing game/tutor inspired by the open source and community driven [[https://monkeytype.com][monkeytype.com]] but for Emacs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :TOC_4_gh:noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#features][Features]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#to-come-prs-welcome][To come... (PRs welcome)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tips][Tips]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#how-is-the-wpm-calculated][How is the WPM calculated?]]&lt;/li&gt; &#xA; &lt;li&gt;[[#commands][Commands]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#key-bindings][Key bindings]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#description][Description]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#monkeytype-pause][monkeytype-pause]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-resume][monkeytype-resume]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-stop][monkeytype-stop]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-repeat][monkeytype-repeat]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-region][monkeytype-region]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-fortune][monkeytype-fortune]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-buffer][monkeytype-buffer]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-mistyped-words][monkeytype-mistyped-words]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-hard-transitions][monkeytype-hard-transitions]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-save-mistyped-words][monkeytype-save-mistyped-words]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-save-hard-transitions][monkeytype-save-hard-transitions]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-load-text-from-file][monkeytype-load-text-from-file]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-load-words-from-file][monkeytype-load-words-from-file]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-region-as-words][monkeytype-region-as-words]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-most-mistyped-words][monkeytype-most-mistyped-words]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-save-text-from-url][monkeytype-save-text-from-url]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-wpm-peek][monkeytype-wpm-peek]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#monkeytype-toggle-mode-line][monkeytype-toggle-mode-line]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#directory-structure][Directory Structure]]&lt;/li&gt; &#xA; &lt;li&gt;[[#customisation][Customisation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#options][Options]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#faces][Faces]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#log][Log]]&lt;/li&gt; &#xA; &lt;li&gt;[[#install][Install]]&lt;/li&gt; &#xA; &lt;li&gt;[[#changelog][Changelog]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#015][0.1.5]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#014][0.1.4]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#013][0.1.3]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#012][0.1.2]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#011][0.1.1]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#010][0.1.0]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#license][License]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use one of the functions to enter =monkeytype= mode ([[#monkeytype-region][monkeytype-region]], [[#monkeytype-buffer][monkeytype-buffer]], etc... see [[#commands--key-bindings][Commands]] section below).&lt;/p&gt; &#xA;&lt;p&gt;(Note: You should bind these functions to anything you want in your =.emacs=.)&lt;/p&gt; &#xA;&lt;p&gt;Once started, you can either &lt;del&gt;monkeytype-pause&lt;/del&gt; (=C-c C-c p=) or &lt;del&gt;monkeytype-stop&lt;/del&gt; (=C-c C-c s=) to finish typing. On pause, the buffer should look as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: img [[https://github.com/jpablobr/emacs-monkeytype/raw/develop/img/scrollable-quick-peek.gif]]&lt;/p&gt; &#xA;&lt;p&gt;It renders a scrollable overlay with information about the run&#39;s performance and a re-render of the typed text highlighting corrections, mistypes, etc.&lt;/p&gt; &#xA;&lt;p&gt;The mode-line section also shows information about the previous run. The fields breakdown is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;MT[N-WPM/G-WPM Accuracy Elapsed-time (words/corrections/errors)]&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then you can &lt;del&gt;monkeytype-resume&lt;/del&gt; (=C-c C-c r=) to continue typing and either type all the way to the end or &lt;del&gt;monkeytype-stop&lt;/del&gt; (=C-c C-C s)= to finish.&lt;/p&gt; &#xA;&lt;p&gt;The buffer should then look as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: img [[https://github.com/jpablobr/emacs-monkeytype/raw/develop/img/finished-run-results.png]]&lt;/p&gt; &#xA;&lt;p&gt;This Results buffer re-renders the typed text highlighting errors and either correct or incorrect corrections (highlighted with a different background and slightly different colour).&lt;/p&gt; &#xA;&lt;p&gt;At this point you can either practice mistyped words with =monkeytype-mistyped-words= (=C-c C-c m=) or just troubling/hard transitions with =monkeytype-hard-transitions= (=C-c C-c h=). You can also save them with =monkeytype-save-mistyped-words= or =monkeytype-save-hard-transitions= and later on type/practice the most mistyped words in history with =monkeytype-most-mistyped-words=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src elisp ;; - Type any text you want ;; - Practice mistyped words ;; - Optional mode-line live WPM ;; - Pause/Resume/Stop/Save functionality ;; - Visual representation of typed text including errors and ;; retries/corrections ;; - Auto stop after 5 seconds of no input ;; - Optionally randomise practice words/transitions ;; - Optionally downcase practice words/transitions ;; - Optionally treat newlines as whitespace ;; - Optionally text auto-fill ;; - Optionally delete trailing whitespace ;; - Select a region of text and treat it as words for practice ;; - After a test, practice troubling/hard key combinations/transitions ;; - Mistyped words or hard transitions can be saved ;; - Saved mistyped/transitions/text can be loaded for practice ;; - Ability to type most (saved) mistyped words ;; - Text for typing can be saved in the `monkeytype-directory&#39; allowing ;; you to resume later on (even after quitting Emacs). ;; - Download web pages directly to monkeytype-directory directory. #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** To come... (PRs welcome)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Save results / history&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Mode to allow text/character helping commands (e.g., snippets, smartparens, etc. see: [[https://github.com/jpablobr/emacs-monkeytype/issues/2][issue: #2]])&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve results rendering logic mostly on large texts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tips&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When using =evil-mode= it&#39;s useful to automatically enable =evil-insert= (to start typing right away).&lt;/li&gt; &#xA; &lt;li&gt;When using =evil-escape=, =evil-escape-mode= has to be disabled in order to prevent double keystrokes getting registered.&lt;/li&gt; &#xA; &lt;li&gt;Installing [[https://github.com/emacsmirror/centered-cursor-mode][=centered-cursor-mode=]] is useful for auto scrolling/paging in multi-page / long texts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This can then be enabled in your =.emacs= with:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (defun my/monkeytype-mode-hook () &#34;Hooks for monkeytype-mode.&#34; (centered-cursor-mode) (evil-escape-mode -1) (evil-insert -1)) (add-hook &#39;monkeytype-mode-hook #&#39;my/monkeytype-mode-hook) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How is the WPM calculated?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://www.speedtypingonline.com/typing-equations&#34;&gt;https://www.speedtypingonline.com/typing-equations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Retyping characters (even when correctly) negatively affects your accuracy given the total number of characters increases and the words calculation is simply the &lt;em&gt;total amount of character divided by five&lt;/em&gt;. So typing accuracy is king!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commands ** Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| Key binding | Function | |-------------+----------------------------------| | C-c C-c f | monkeytype-fortune | | C-c C-c p | monkeytype-pause | | C-c C-c r | monkeytype-resume | | C-c C-c s | monkeytype-stop | | C-c C-c t | monkeytype-repeat | | C-c C-c m | monkeytype-mistyped-words | | C-c C-c h | monkeytype-hard-transitions | | C-c C-c a | monkeytype-save-mistyped-words | | C-c C-c o | monkeytype-save-hard-transitions | | C-c C-c l | monkeytype-toggle-mode-line | | C-c C-c e | monkeytype-wpm-peek | | | monkeytype-region | | | monkeytype-buffer | | | monkeytype-most-mistyped-words | | | monkeytype-region-as-words | | | monkeytype-load-words-from-file | | | monkeytype-load-text-from-file | | | monkeytype-save-text-from-url |&lt;/p&gt; &#xA;&lt;p&gt;** Description&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-pause Pause current run.&lt;/p&gt; &#xA;&lt;p&gt;On &lt;em&gt;text-file&lt;/em&gt; based /monkeytypings/ run results will be saved.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-resume Resume current run.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-stop Stop current run.&lt;/p&gt; &#xA;&lt;p&gt;Stop means to completely finished a run (unless it is a &lt;em&gt;text-file&lt;/em&gt; based run) so Monkeytype will show the processed typed text and the WPM results for all the run(s) (if the user paused multiple times) for the typed text.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-repeat Repeat run with same text.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-region /Monkeytype/ region.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-fortune /Monkeytype/ the output of the [[https://en.wikipedia.org/wiki/Fortune_(Unix)][fortune]] command.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-buffer /Monkeytype/ the entire current buffer.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-mistyped-words On current run, /Monkeytype/ all mistyped words.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-hard-transitions On current run, /Monkeytype/ all mistyped transitions.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-save-mistyped-words Save current run&#39;s mistyped words in [[monkeytype-directory][monkeytype-directory&#39;s]] &lt;del&gt;words&lt;/del&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;These words will be used to get the most mistyped words (See: [[#monkeytype-most-mistyped-words][monkeytype-most-mistyped-words]])&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-save-hard-transitions Save current run&#39;s hard-transitions in [[monkeytype-directory][monkeytype-directory&#39;s ]]&lt;del&gt;transitions&lt;/del&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-load-text-from-file This command prompts user to enter the &lt;em&gt;text-file&lt;/em&gt; to use for /monkeytyping/.&lt;/p&gt; &#xA;&lt;p&gt;By default it will look for &lt;em&gt;text-files&lt;/em&gt; in the [[monkeytype-directory]] directory.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;em&gt;text-file&lt;/em&gt; has already been used for /monkeytyping/ it will resume from the last position on the last run.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Notice:&lt;/em&gt; if the file is too big results can take a long while.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-load-words-from-file This command prompts user to enter the &lt;em&gt;(mistyped)-words&lt;/em&gt; to use for /monkeytyping/.&lt;/p&gt; &#xA;&lt;p&gt;By default it will look for &lt;em&gt;(mistyped)-words&lt;/em&gt; in the [[monkeytype-directory]] directory.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-region-as-words This command will use the words in the current region and will treat it them as &lt;em&gt;words&lt;/em&gt; for typing so it will also apply the configurable options for words to them. See: monkeytype-randomize, monkeytype-downcase, monkeytype-words-auto-fill and monkeytype-remove-trailing-whitespace.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-most-mistyped-words This command will load for /monkeytyping/ the top number (defined in monkeytype-most-mistyped-amount and defaults to 100) of most mistyped words.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-save-text-from-url This command allows to save a web page to the =monkeytype-directory/text/= directory, converting it to plain text (using =pandoc(1)=) and, if the =monkeytype-asciify= option is set to true, will ASCII character encode the text (using =iconv(1)=).&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-wpm-peek This command allows to hide or show the WPM results overlay.&lt;/p&gt; &#xA;&lt;p&gt;*** monkeytype-toggle-mode-line This command allows to hide or show the WPM results in the the mode-line.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Directory Structure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other than on &lt;em&gt;text-file&lt;/em&gt; based typing commands, results are not saved - only mistyped words or hard-transitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;text-file&lt;/em&gt; based commands read and write files from =~/.monkeytype/text/=, monkeytype expects a text file in that =text/= directory as the source text to build the text for typing and will store meta data in a directory named with the exact same name without the file&#39;s extension. The sub-directories are: =json=, =transitions= and =words=. &lt;em&gt;text-file&lt;/em&gt; based commands store and read files from these directories.&lt;/p&gt; &#xA;&lt;p&gt;Example directory structure:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE $ tree ~/.monkeytype/ . +-- text | +-- sample-text | | +-- json | | | +-- tue-08-dec-2020-12-21-56.json | | | +-- tue-08-dec-2020-12-30-32.json | | | +-- tue-08-dec-2020-12-34-00.json | | +-- transitions | | | +-- tue-08-dec-2020-12-34-15.txt | | +-- words | | +-- tue-08-dec-2020-10-35-28.txt | | +-- tue-08-dec-2020-12-05-17.txt | +-- sample-text.txt +-- transitions | +-- sat-21-nov-2020-08-02-55.txt | +-- sat-21-nov-2020-08-06-39.txt +-- words +-- mon-07-dec-2020-22-14-30.txt +-- wed-02-dec-2020-10-38-01.txt #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customisation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run =M-x customize-group RET= =monkeytype RET= or =monkeytype-faces RET=.&lt;/p&gt; &#xA;&lt;p&gt;Or set the variables in your =.emacs= file:&lt;/p&gt; &#xA;&lt;p&gt;** Options&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (setq ;; How often to update mode-line monkeytype-mode-line-interval-update 10 ;; Use space instead or newline monkeytype-treat-newline-as-space t ;; Minimum amount of transitions for test ;; If not enough repeat them monkeytype-minimum-transitions 50 ;; Inserts debugging log, this can take a while ;; if typing text is too long. monkeytype-insert-log nil ;; Default directory for saving Monkeytype data monkeytype-directory &#34;~/.monkeytype&#34; ;; Format for time-stamped files for saving. monkeytype-file-name &#34;%a-%d-%b-%Y-%H-%M-%S&#34; ;; Toggle randomise text monkeytype-randomize t ;; Toggle downcase text monkeytype-dowcase t ;; Amount of words for most mistyped words test monkeytype-most-mistyped-amount 100 ;; Toggle auto-fill on typing text monkeytype-auto-fill nil ;; Toggle auto-fill on words related typing text monkeytype-words-auto-fill t ;; Toggle auto deletion of trailing white space monkeytype-delete-trailing-whitespace t ;; Regexp used to divide and extracts words monkeytype-excluded-chars-regexp &#34;[^[:alnum:]&#39;]&#34; ;; Toggle converting downloaded text to ASCII monkeytype-asciify t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Faces&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (custom-set-faces ;; custom-set-faces was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won&#39;t work right. &#39;(monkeytype-default ((t (:inherit default :height 1.7 :width normal)))) &#39;(monkeytype-dimmed (...)) &#39;(monkeytype-notice (...)) &#39;(monkeytype-correct (...)) &#39;(monkeytype-error (...)) &#39;(monkeytype-correction-error (...)) &#39;(monkeytype-correction-correct (...)) &#39;(monkeytype-read-only (...)) &#39;(monkeytype-title (...)) &#39;(monkeytype-legend-1 (...)) &#39;(monkeytype-legend-2 (...)) &#39;(monkeytype-results-success (...)) &#39;(monkeytype-results-error (...)) &#39;(monkeytype-mode-line-success (...)) &#39;(monkeytype-mode-line-error (...)) &#39;(monkeytype-mode-line-normal (...)) &#39;(monkeytype-mode-line-info (...))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Log&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Logging can be enabled for debugging purposes (see =monkeytype-insert-log= customisation).&lt;/p&gt; &#xA;&lt;p&gt;When enabled it should look as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: img [[https://github.com/jpablobr/emacs-monkeytype/raw/main/img/monkeytype-log.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From MELPA, =M-x package-install RET monkeytype RET=.&lt;/p&gt; &#xA;&lt;p&gt;Or just drop =monkeytype.el= somewhere in your =load-path= and add it to your =.emacs=:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (add-to-list &#39;load-path &#34;~/emacs.d/vendor&#34;) (require &#39;monkeytype) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changelog :PROPERTIES: :TOC: :depth 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1.5 &lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=monkeytype-wpm-peek=&lt;/li&gt; &#xA; &lt;li&gt;=monketype-toggle-mode-line=&lt;/li&gt; &#xA; &lt;li&gt;=monkeytype-save-text-from-url=&lt;/li&gt; &#xA; &lt;li&gt;Display results and typed text on pause&lt;/li&gt; &#xA; &lt;li&gt;Allow to toggle colour and non-colour mode-line&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remove =monkeytype-dummy-text=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve logic for getting previous runs entries&lt;/li&gt; &#xA; &lt;li&gt;Refactor =monkeytype--init= / rename function just =monkeytype=&lt;/li&gt; &#xA; &lt;li&gt;Add Travis CI integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Word/Char count should include retypes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1.4 &lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=monkeytype-load-text-from-file=&lt;/li&gt; &#xA; &lt;li&gt;Disable already paused typed section (previous runs) from being able to retype it&lt;/li&gt; &#xA; &lt;li&gt;Add =monkeytype-file-name-format= custom var&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rename =monkeytype-word-regexp= =monkeytype-excluded-chars-regexp=&lt;/li&gt; &#xA; &lt;li&gt;Remove face from faces (monkeytype-face- =&amp;gt; monkeytype-)&lt;/li&gt; &#xA; &lt;li&gt;Process results asynchronously&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=map= and =async= lib requirements&lt;/li&gt; &#xA; &lt;li&gt;Several face related improvements&lt;/li&gt; &#xA; &lt;li&gt;Remove =monkeytype--counter-entries=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simplify time idler&lt;/li&gt; &#xA; &lt;li&gt;Several code refactorings and reorganisation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1.3 &lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available on MELPA&lt;/li&gt; &#xA; &lt;li&gt;=monkeytype-most-mistyped-words=&lt;/li&gt; &#xA; &lt;li&gt;Toggable option =monkeytype-words-auto-fill=&lt;/li&gt; &#xA; &lt;li&gt;Toggable option =monkeytype-delete-trailing-whitespace=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;em&gt;Changes&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Init text processing rewrite&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix for misindexing of chars to words&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1.2 &lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=monkeytype-load-words-from-file=&lt;/li&gt; &#xA; &lt;li&gt;=monkeytype-region-as-words=&lt;/li&gt; &#xA; &lt;li&gt;Toggable option =monkeytype-downcase=&lt;/li&gt; &#xA; &lt;li&gt;Toggable option =monkeytype-randomize=&lt;/li&gt; &#xA; &lt;li&gt;=monkeytype-word-regexp=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rename option =monkeytype-downcase-mistype= to =monkeytype-downcase=&lt;/li&gt; &#xA; &lt;li&gt;Removed =async= lib&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Input processing logic rewrite&lt;/li&gt; &#xA; &lt;li&gt;Several renames and code reorganisation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Skipped text getting counters out of sync&lt;/li&gt; &#xA; &lt;li&gt;=evil-escape= double registering characters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1.1 &lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allow to practice mistyped words.&lt;/li&gt; &#xA; &lt;li&gt;Allow to practice hard to type transitions.&lt;/li&gt; &#xA; &lt;li&gt;Allow to save mistyped words or transitions to =~/.monkeytype= directory.&lt;/li&gt; &#xA; &lt;li&gt;Option to auto-fill typing region.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change =monkeytype--mode-line-update-seconds= option to =monkeytype-mode-line&amp;gt;interval-update= to have it work with typed entries (keystrokes) defaulting to 1 (update on each keystroke).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Removed =ht= library requirement.&lt;/li&gt; &#xA; &lt;li&gt;Updated Emacs requirement to 25.1.&lt;/li&gt; &#xA; &lt;li&gt;Misc layout improvements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have =local-idle-timer= stop on paused or finished status.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1.0 Initial release.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPLv3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gleam-lang/gleam-mode</title>
    <updated>2023-04-11T01:33:39Z</updated>
    <id>tag:github.com,2023-04-11:/gleam-lang/gleam-mode</id>
    <link href="https://github.com/gleam-lang/gleam-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🐙 Gleam support for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;An Emacs Major Mode for &lt;a href=&#34;https://gleam.run&#34;&gt;Gleam&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This mode uses &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;tree-sitter&lt;/a&gt; under-the-hood for syntax highlighting and code navigation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/2058614/151681785-5d212e1b-191b-4e7d-a868-f6e42d7efe61.mp4&#34;&gt;https://user-images.githubusercontent.com/2058614/151681785-5d212e1b-191b-4e7d-a868-f6e42d7efe61.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;This project will eventually be hosted on &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt;. However, until that time, the best way to install this is first to clone the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone --recurse-submodules git@github.com:gleam-lang/gleam-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you&#39;ll need to load this from your init script (&lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.config/emacs/init.el&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;use-package (recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package gleam-mode&#xA;  :load-path &#34;~/path/to/gleam-mode&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;~/path/to/gleam-mode&lt;/code&gt; with the path where you cloned gleam-mode.&lt;/p&gt; &#xA;&lt;h3&gt;vanilla&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;~/path/to/gleam-mode&#34;)&#xA;(load-library &#34;gleam-mode&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;~/path/to/gleam-mode&lt;/code&gt; with the path where you cloned gleam-mode.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;gleam-mode ships with a &lt;code&gt;gleam-format&lt;/code&gt; command that is not bound by default to any keybinding. To bind it:&lt;/p&gt; &#xA;&lt;h3&gt;use-package&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;:bind (:map gleam-mode-map (&amp;lt;binding&amp;gt; . gleam-format))&lt;/code&gt; to your use-package declaration. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package gleam-mode&#xA;  :load-path &#34;~/path/to/gleam-mode&#34;&#xA;  :bind (:map gleam-mode-map&#xA;              (&#34;C-c g f&#34; . gleam-format)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(here &#34;C-c g f&#34; means &lt;code&gt;Control&lt;/code&gt;+&lt;code&gt;C&lt;/code&gt; followed by &lt;code&gt;g&lt;/code&gt; followed by &lt;code&gt;f&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;vanilla&lt;/h3&gt; &#xA;&lt;p&gt;Add the following after the lines where you setup gleam-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key gleam-mode-map (kbd &#34;C-c g f&#34;) &#39;gleam-format)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(here &#34;C-c g f&#34; means &lt;code&gt;Control&lt;/code&gt;+&lt;code&gt;C&lt;/code&gt; followed by &lt;code&gt;g&lt;/code&gt; followed by &lt;code&gt;f&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Syntax highlighting&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Indentation (at least somewhat)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Completion?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; REPL?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is licensed under The Apache License, Version 2.0 or, at your option, under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version. See &lt;a href=&#34;https://raw.githubusercontent.com/gleam-lang/gleam-mode/main/LICENSE-apache&#34;&gt;LICENSE-apache&lt;/a&gt; for the terms of the Apache License, Version 2.0 or &lt;a href=&#34;https://raw.githubusercontent.com/gleam-lang/gleam-mode/main/LICENSE-gpl&#34;&gt;LICENSE-gpl&lt;/a&gt; for the terms of the GNU Public License, Version 3.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>universal-ctags/citre</title>
    <updated>2023-04-11T01:33:39Z</updated>
    <id>tag:github.com,2023-04-11:/universal-ctags/citre</id>
    <link href="https://github.com/universal-ctags/citre" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ctags IDE on the True Editor&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/img/logo.svg?sanitize=true&#34; alt=&#34;logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;Ctags IDE on the True Editor!&lt;/i&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;(If you are already familiar with Citre, see &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt; for the news.)&lt;/p&gt; &#xA;&lt;p&gt;Citre is an advanced Ctags (or actually, readtags) frontend for Emacs. It offers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;completion-at-point&lt;/code&gt;, xref and imenu integration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;citre-jump&lt;/code&gt;: A &lt;code&gt;completing-read&lt;/code&gt; UI for jumping to definition.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;citre-peek&lt;/code&gt;: A powerful code reading tool that lets you go down the rabbit hole without leaving current buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s see them in action!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;completion-at-point&lt;/code&gt;, with the UI of &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company&lt;/a&gt; and &lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/img/capf.jpg&#34; alt=&#34;capf&#34;&gt;&lt;/p&gt; &lt;p&gt;Notice the rich annotations. Candidates are annotated by &lt;code&gt;(kind/type@scope)&lt;/code&gt;, so you know &#34;it&#39;s a member of struct &lt;code&gt;thread&lt;/code&gt;, with &lt;code&gt;pid_t&lt;/code&gt; type&#34;, etc. This is because Ctags &#34;tags&#34; format records much more abundant info than the etags &#34;TAGS&#34; format.&lt;/p&gt; &lt;p&gt;Also, notice that candidates with the &#34;member&#34; kind are put above the others because we are in a C source file, and the current symbol is after a dot. Citre guesses that you want a struct member.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;citre-jump&lt;/code&gt;, with &lt;code&gt;completing-read&lt;/code&gt; UI provided by &lt;a href=&#34;https://github.com/raxod502/selectrum&#34;&gt;Selectrum&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/img/citre-jump.jpg&#34; alt=&#34;citre-jump&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;citre-peek&lt;/code&gt;. It opens a &#34;peek window&#34; to show the definition of a symbol:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/img/citre-peek.jpg&#34; alt=&#34;citre-peek&#34;&gt;&lt;/p&gt; &lt;p&gt;And there&#39;s more. Notice the code reading history at the bottom of the peek window. Do you hate having to switch between a lot of buffers while reading code? With &lt;code&gt;citre-peek&lt;/code&gt;, you can peek a symbol in the peek window. This allows a tree-like code reading history, that you can browse and edit, without leaving current buffer!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All above screenshots were taken in a huge project (the Linux kernel), and Citre is still fast, because readtags performes binary search on the tags file.&lt;/p&gt; &#xA;&lt;p&gt;Besides, Citre has a GNU Global plugin that can find completions, definitions and references using xref or the above UIs. See &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/citre-global.md&#34;&gt;this user manual&lt;/a&gt; to know about it. Citre has a pluggable backend design so you could forget about ctags and only use Citre as a GNU Global frontend.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;readtags&lt;/h4&gt; &#xA;&lt;p&gt;Citre uses readtags program to read from tags files.&lt;/p&gt; &#xA;&lt;p&gt;Citre requires readtags program provided by &lt;a href=&#34;https://github.com/universal-ctags/ctags&#34;&gt;Universal Ctags&lt;/a&gt;. The minimal version is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;commit &lt;code&gt;31d13e85&lt;/code&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;weekly release p5.9.20200124.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s recommended to get the latest version, as Citre actively takes advantage of its latest features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For GNU/Linux users: If you install ctags from your software repository, run &lt;code&gt;$ ctags --version&lt;/code&gt; to see if you are using Universal Ctags. The version is a little hard to inspect since Universal Ctags doesn&#39;t have a formal version number yet. If it&#39;s compiled before Jan 21 2021, it will probably not work. You can &lt;a href=&#34;https://github.com/universal-ctags/ctags#how-to-build-and-install&#34;&gt;build it yourself&lt;/a&gt;, or try the &lt;a href=&#34;https://github.com/universal-ctags/ctags-snap&#34;&gt;snap package&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For macOS users: Follow the instructions &lt;a href=&#34;https://github.com/universal-ctags/homebrew-universal-ctags&#34;&gt;here&lt;/a&gt; to install the latest version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Windows users: Download the binary &lt;a href=&#34;https://github.com/universal-ctags/ctags-win32&#34;&gt;here&lt;/a&gt;. Ctags in cygwin (or msys repo of msys2) won&#39;t work since it doesn&#39;t come with readtags. Ctags in the mingw64 repo of msys2 is Universal Ctags, but by the time of writing, it doesn&#39;t meet the version requirement.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t have readtags executable in your PATH, customize &lt;code&gt;citre-readtags-program&lt;/code&gt; to the path of it.&lt;/p&gt; &#xA;&lt;h4&gt;ctags&lt;/h4&gt; &#xA;&lt;p&gt;If you use Citre&#39;s built-in tools to create tags file, you need a ctags program.&lt;/p&gt; &#xA;&lt;p&gt;The ctags program provided by Universal Ctags is still recommended. If you don&#39;t have it in your PATH, customize &lt;code&gt;citre-ctags-program&lt;/code&gt; to the path of it.&lt;/p&gt; &#xA;&lt;p&gt;You can also use other program that outputs a tags file, like &lt;a href=&#34;https://hackage.haskell.org/package/hasktags&#34;&gt;hasktags&lt;/a&gt;, &lt;a href=&#34;https://github.com/jstemmer/gotags&#34;&gt;gotags&lt;/a&gt; and &lt;a href=&#34;https://github.com/tmm1/ripper-tags&#34;&gt;ripper-tags&lt;/a&gt;. You don&#39;t need to customize &lt;code&gt;citre-ctags-program&lt;/code&gt; when using these tools.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;citre&lt;/code&gt; from &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt;. Below are instructions to manually install Citre.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone https://github.com/universal-ctags/citre.git /path/to/citre&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the path to your &lt;code&gt;load-path&lt;/code&gt; in your Emacs configuration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/citre&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Require &lt;code&gt;citre&lt;/code&gt; and &lt;code&gt;citre-config&lt;/code&gt; in your configuration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;citre)&#xA;(require &#39;citre-config)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or, you can read &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/citre-config.el&#34;&gt;citre-config.el&lt;/a&gt;, and write your own config.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Create tags file&lt;/h3&gt; &#xA;&lt;h4&gt;The customizable way&lt;/h4&gt; &#xA;&lt;p&gt;Open a file in your project, type &lt;code&gt;M-x citre-update-this-tags-file&lt;/code&gt;. If it can&#39;t find a tags file for the current file, it&#39;ll guide you to generate one. I&#39;ll take you through the simplest situation here. To know more, read &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/about-tags-file.md&#34;&gt;this user manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You are asked to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Pick a place to save the tags file, type &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pick a directory in which to use the tags file. This means when you visit a file in that directory, this tags file is used for it.&lt;/p&gt; &lt;p&gt;Let&#39;s genearte a tags file for the whole project and use it in the whole project, so choose &lt;code&gt;/path/to/project/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pick a tags file name. It&#39;ll be saved inside &lt;code&gt;/path/to/project/&lt;/code&gt;. Pick one you like.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pick a root dir to run ctags. This is the working directory when running Ctags. Let&#39;s pick the project root.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You are taken to a command editing buffer, and a help message is shown in the buffer. Read it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you use Universal Ctags, you may write a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctags&#xA;-o&#xA;%TAGSFILE%&#xA;--languages=C,C++&#xA;--kinds-all=*&#xA;--fields=*&#xA;--extras=*&#xA;-R&#xA;./&#xA;/external/lib/used/in/the/project/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use other ctags program, for example, gotags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/go/bin/gotags&#xA;-R=true&#xA;-f=%TAGSFILE%&#xA;./&#xA;/external/lib/used/in/the/project/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You get the idea.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve created such a file, run &lt;code&gt;M-x citre-update-this-tags-file&lt;/code&gt; again to update it. The recipe for updating a tags file is stored in the tags file itself, so no more configuration file or buffer-local variables are needed!&lt;/p&gt; &#xA;&lt;p&gt;You can edit the updating recipe later by &lt;code&gt;citre-edit-tags-file-recipe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;The simpler way&lt;/h4&gt; &#xA;&lt;p&gt;Citre searches the tags file in different locations, like in the directory that uses it, in global/project cache dir, etc. See &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/about-tags-file.md&#34;&gt;this documentation&lt;/a&gt; to know the details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;citre-default-create-tags-file-location&lt;/code&gt; lets you choose a default location. For example, if you always want to use the global cache dir, set it to &lt;code&gt;&#39;global-cache&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most of the time, people just create a tags file for the whole project and use it in the whole project. If you want Citre to do this by default, rather than ask you a lot of questions, set &lt;code&gt;citre-use-project-root-when-creating-tags&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;. This uses &lt;code&gt;citre-project-root-function&lt;/code&gt; to detect the project root.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to edit the command line manually, set &lt;code&gt;citre-prompt-language-for-ctags-command&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;. Then, instead of giving you a buffer to edit the command, Citre lets you choose the languages to scan, and generates a command that should work for most projects. This requires the ctags program from Universal Ctags.&lt;/p&gt; &#xA;&lt;p&gt;In any situations, you could further edit the tags file updating recipe by &lt;code&gt;citre-edit-tags-file-recipe&lt;/code&gt; later.&lt;/p&gt; &#xA;&lt;h4&gt;The command line way&lt;/h4&gt; &#xA;&lt;p&gt;You don&#39;t have to create a tags file using Citre. You can just &lt;code&gt;cd&lt;/code&gt; to the project root directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ctags --languages=c,c++,... --kinds-all=&#39;*&#39; --fields=&#39;*&#39; --extras=&#39;*&#39; -R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a &lt;code&gt;tags&lt;/code&gt; file in the project root, and Citre could find it. To know how Citre finds a tags file for the current buffer, see &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/about-tags-file.md&#34;&gt;this documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tags file created this way can&#39;t be updated by Citre.&lt;/p&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/about-tags-file.md&#34;&gt;this documentation&lt;/a&gt; to know more about tags file format, how to tweak the command line, how to specify which dir uses which tags file, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Emacs users are more familiar with the TAGS format. TAGS format is generated by &lt;code&gt;etags&lt;/code&gt; or &lt;code&gt;$ ctags -e&lt;/code&gt;, and Citre doesn&#39;t support it.&lt;/p&gt; &#xA;&lt;p&gt;Citre supports the tags format, which is the default format used by Ctags. Simply puts it, tags format is much more informative than TAGS format, making Citre a much more powerful tool. See &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/compare-with-other-tools.md&#34;&gt;this user manual&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note for Windows and macOS users:&lt;/em&gt; Windows and macOS uses case-insensitive file system by default, so this may happen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You create a tags file named &lt;code&gt;tags&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Some plugins like &lt;code&gt;projectile&lt;/code&gt; and &lt;code&gt;company&lt;/code&gt; (when using the &lt;code&gt;company-etags&lt;/code&gt; backend) tries find and load a &lt;code&gt;TAGS&lt;/code&gt; file, which is the default file used by Emacs etags.&lt;/li&gt; &#xA; &lt;li&gt;Since &lt;code&gt;tags&lt;/code&gt; and &lt;code&gt;TAGS&lt;/code&gt; are the same to the file system, they tries to load the &lt;code&gt;tags&lt;/code&gt; file, which can&#39;t be recognised by &lt;code&gt;etags.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll see a &#34;TAGS is not valid tags table&#34; error.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To avoid this problem, you could configure those plugins to not use a tags file, or simply avoid creating a tags file named &lt;code&gt;tags&lt;/code&gt; on Windows and macOS.&lt;/p&gt; &#xA;&lt;h3&gt;Use Citre&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;citre-mode&lt;/code&gt; to enable &lt;code&gt;completion-at-point&lt;/code&gt;, xref and imenu integration. If you also use &lt;code&gt;company&lt;/code&gt;, make sure &lt;code&gt;company-capf&lt;/code&gt; is in &lt;code&gt;company-backends&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, when you open a file, and a tags file can be found for it, &lt;code&gt;citre-mode&lt;/code&gt; is automatically enabled. If you don&#39;t use &lt;code&gt;citre-config&lt;/code&gt;, you can put this in your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;find-file-hook #&#39;citre-auto-enable-citre-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;citre-jump&lt;/code&gt; and &lt;code&gt;citre-peek&lt;/code&gt; works without &lt;code&gt;citre-mode&lt;/code&gt;. Type &lt;code&gt;M-x citre-jump&lt;/code&gt; on a symbol to jump to its definition, &lt;code&gt;M-x citre-jump-back&lt;/code&gt; to go back in the jump history. About &lt;code&gt;citre-peek&lt;/code&gt;, See &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/citre-peek.md&#34;&gt;this user manual&lt;/a&gt; to know how to use it.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a example configuration using &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;. Be sure to read it and tweak it to your own need.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package citre&#xA;  :defer t&#xA;  :init&#xA;  ;; This is needed in `:init&#39; block for lazy load to work.&#xA;  (require &#39;citre-config)&#xA;  ;; Bind your frequently used commands.  Alternatively, you can define them&#xA;  ;; in `citre-mode-map&#39; so you can only use them when `citre-mode&#39; is enabled.&#xA;  (global-set-key (kbd &#34;C-x c j&#34;) &#39;citre-jump)&#xA;  (global-set-key (kbd &#34;C-x c J&#34;) &#39;citre-jump-back)&#xA;  (global-set-key (kbd &#34;C-x c p&#34;) &#39;citre-ace-peek)&#xA;  (global-set-key (kbd &#34;C-x c u&#34;) &#39;citre-update-this-tags-file)&#xA;  :config&#xA;  (setq&#xA;   ;; Set these if readtags/ctags is not in your PATH.&#xA;   citre-readtags-program &#34;/path/to/readtags&#34;&#xA;   citre-ctags-program &#34;/path/to/ctags&#34;&#xA;   ;; Set these if gtags/global is not in your PATH (and you want to use the&#xA;   ;; global backend)&#xA;   citre-gtags-program &#34;/path/to/gtags&#34;&#xA;   citre-global-program &#34;/path/to/global&#34;&#xA;   ;; Set this if you use project management plugin like projectile.  It&#39;s&#xA;   ;; used for things like displaying paths relatively, see its docstring.&#xA;   citre-project-root-function #&#39;projectile-project-root&#xA;   ;; Set this if you want to always use one location to create a tags file.&#xA;   citre-default-create-tags-file-location &#39;global-cache&#xA;   ;; See the &#34;Create tags file&#34; section above to know these options&#xA;   citre-use-project-root-when-creating-tags t&#xA;   citre-prompt-language-for-ctags-command t&#xA;   ;; By default, when you open any file, and a tags file can be found for it,&#xA;   ;; `citre-mode&#39; is automatically enabled.  If you only want this to work for&#xA;   ;; certain modes (like `prog-mode&#39;), set it like this.&#xA;   citre-auto-enable-citre-mode-modes &#39;(prog-mode)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These user options are for customizing enabled backends:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;citre-completion-backends&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;citre-find-definition-backends&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;citre-find-reference-backends&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;citre-tags-in-buffer-backends&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;citre-auto-enable-citre-mode-backends&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently we have &lt;code&gt;tags&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt; backends. See &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/toc.md&#34;&gt;this documentation&lt;/a&gt; to know more customizable options.&lt;/p&gt; &#xA;&lt;h2&gt;Documentations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/toc.md&#34;&gt;User Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/developer-manual/toc.md&#34;&gt;Developer Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/universal-ctags/citre/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/developer-manual/design-principle.md&#34;&gt;This chapter&lt;/a&gt; in the developer manual talks about the strengths/weaknesses of ctags, and the design principle of Citre. Non-developers are also encouraged to read it to know more about these tools.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: What are the advantages of Citre &amp;amp; Ctags over etags, gtags, language servers...&lt;/p&gt; &lt;p&gt;A: See &lt;a href=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/docs/user-manual/compare-with-other-tools.md&#34;&gt;this documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: How to use Citre over TRAMP?&lt;/p&gt; &lt;p&gt;A: Make sure you&#39;ve installed readtags on the remote machine, and everything will just work. Tags file generating/updating also works if you have ctags program on the remote machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: What to do if Citre didn&#39;t grab the right symbol for me, e.g., I want to find the definition of &lt;code&gt;foo.bar&lt;/code&gt;, but can only get &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;bar&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;A: You can select &lt;code&gt;foo.bar&lt;/code&gt; first (by an active region), then find its definitions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: Why doesn&#39;t Citre support automatically update tags file?&lt;/p&gt; &lt;p&gt;A: Citre uses both line number and a search pattern to locate a tag. When the file containing the tag is edited, Citre could still locate the tag using the search pattern. Citre even tries to locate the tag when the line containing the tag itself is edited.&lt;/p&gt; &lt;p&gt;So, jumping to definition is still useable when the file is edited. There&#39;s no need to frequently update the tags file.&lt;/p&gt; &lt;p&gt;You may ask &#34;what if I add new definitions, or modify/delete existing ones?&#34; The truth is, if your codebase is reasonably large that you have to index them by Ctags, then small edits won&#39;t cause much trouble. You can just update the tags file when needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: How many languages does Citre support?&lt;/p&gt; &lt;p&gt;A: Citre supports all languages that Ctags support. The latest &lt;a href=&#34;https://github.com/universal-ctags/ctags&#34;&gt;Universal Ctags&lt;/a&gt; support 134(!) languages:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ctags --list-languages | wc -l&#xA;134&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Besides, you could &lt;a href=&#34;http://docs.ctags.io/en/latest/man/ctags-optlib.7.html&#34;&gt;define your own parser using regex&lt;/a&gt; to support more languages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: But seems for now Citre only has support code for C...&lt;/p&gt; &lt;p&gt;A: No matter what&#39;s the language, as long as you have a tags file for it, then Citre works out of the box. Language-specific support is for extra minor goodies, see the &#34;Commentary&#34; section in each language-support code file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current status&lt;/h2&gt; &#xA;&lt;p&gt;Below are the status of tools provided by Citre:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ctags&lt;/td&gt; &#xA;   &lt;td&gt;Create/update tags files&lt;/td&gt; &#xA;   &lt;td&gt;alpha&lt;/td&gt; &#xA;   &lt;td&gt;[^1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;capf, xref, imenu&lt;/td&gt; &#xA;   &lt;td&gt;Integration with built-in mechanisms&lt;/td&gt; &#xA;   &lt;td&gt;stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;citre-jump&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the definition&lt;/td&gt; &#xA;   &lt;td&gt;stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;citre-peek&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep code reading in a peek window&lt;/td&gt; &#xA;   &lt;td&gt;beta&lt;/td&gt; &#xA;   &lt;td&gt;[^2]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;citre-global&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GNU Global plugin&lt;/td&gt; &#xA;   &lt;td&gt;alpha&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;[^1]: Universal Ctags is exploring concepts like &lt;a href=&#34;https://github.com/universal-ctags/ctags/issues/2697&#34;&gt;incremental updating&lt;/a&gt;, &lt;a href=&#34;https://github.com/universal-ctags/ctags/pull/2741&#34;&gt;multi-pass parsing&lt;/a&gt;, and more. Citre may follow the changes happen in Universal Ctags.&lt;/p&gt; &#xA;&lt;p&gt;[^2]: I plan to implement a feature that lets you further filter the definitions in a peek window.&lt;/p&gt; &#xA;&lt;p&gt;&#34;alpha&#34; means the tool is likely to go through breaking changes. &#34;beta&#34; means new features and improvements may happen. &#34;stable&#34; means the tool is basically finished.&lt;/p&gt; &#xA;&lt;p&gt;Below are new tools I have in mind, and may come in the future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;citre-diagnostics&lt;/code&gt;: Check if you have the right version of readtags, ctags; show the project root, the tags file being used, and things like that.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A tool that lets you interactively filter a tags file (find a tag whose name contains &#34;foo&#34;, the path contains &#34;bar&#34;, with the kind &#34;function&#34;, etc). Then you can use the results as completion (insert in current bufffer), visit their definition, or convert them into a &lt;code&gt;citre-peek&lt;/code&gt; or xref session. I consider this to be the &#34;ultimate weapon&#34; of Citre.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;If Citre makes you happy, please consider buying me (@AmaiKinono) a beer to make me happy ;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;by Alipay&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/img/alipay.jpg&#34; alt=&#34;Alipay&#34; width=&#34;180&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;by Wechat Pay&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/universal-ctags/citre/master/img/wechat-pay.png&#34; alt=&#34;Wechat Pay&#34; width=&#34;180&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;by &lt;a href=&#34;https://www.buymeacoffee.com/amaikinono&#34;&gt;Buy me a coffee&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>