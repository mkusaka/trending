<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-22T01:34:36Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>manateelazycat/insert-translated-name</title>
    <updated>2024-04-22T01:34:36Z</updated>
    <id>tag:github.com,2024-04-22:/manateelazycat/insert-translated-name</id>
    <link href="https://github.com/manateelazycat/insert-translated-name" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Insert translated string as variable or function name&lt;/p&gt;&lt;hr&gt;&lt;p&gt;对于我这种英语渣来说, 有时候给一个函数或者变量取一个适当的名字还是比较麻烦的, 一般都要打开 Google 翻译, 翻译一段中文, 然后拷贝到 Emacs 中做各种修改, 改成下划线或者骆驼风格的形式, 甚至直接翻译成英文注释.&lt;/p&gt; &#xA;&lt;p&gt;给 Emacs 写了一个小插件 &lt;a href=&#34;https://github.com/manateelazycat/insert-translated-name&#34;&gt;insert-translated-name&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/insert-translated-name/master/screenshot.gif&#34;&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;insert-translated-name-insert&lt;/code&gt; 命令进入输入激活模式&lt;/li&gt; &#xA; &lt;li&gt;正常输入中文&lt;/li&gt; &#xA; &lt;li&gt;中文后输入空格自动查询翻译并替换成符合当前语言风格的变量名(或函数名)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/insert-translated-name/master/comment.gif&#34;&gt; &#xA;&lt;p&gt;如果当前光标在注释或者字符串区域, 会自动插入英文注释:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;insert-translated-name-insert&lt;/code&gt; 命令进入输入激活模式&lt;/li&gt; &#xA; &lt;li&gt;正常输入中文&lt;/li&gt; &#xA; &lt;li&gt;中文后输入空格自动查询翻译并替换成英文注释&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/insert-translated-name/master/pyim.gif&#34;&gt; &#xA;&lt;p&gt;如果你安装了 &lt;a href=&#34;https://github.com/tumashu/pyim&#34;&gt;pyim&lt;/a&gt; 输入法， 写英文注释的时候会自动激活切换输入法：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;insert-translated-name-insert&lt;/code&gt; 命令进入输入激活模式， 并自动激活中文（不用手动切换中文输入法）&lt;/li&gt; &#xA; &lt;li&gt;正常输入中文&lt;/li&gt; &#xA; &lt;li&gt;中文后输入空格自动查询翻译并替换成英文注释（并自动切换成英文输入状态）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;安装&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装 &lt;a href=&#34;https://crow-translate.github.io/&#34;&gt;crow-translate&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;ollama&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;下载&amp;nbsp;&lt;a href=&#34;https://github.com/manateelazycat/insert-translated-name&#34;&gt;insert-translated-name&lt;/a&gt; 里面的 insert-translated-name.el 放到 ~/elisp 目录&lt;/li&gt; &#xA; &lt;li&gt;把下面的配置加入到 ~/.emacs 中&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path (expand-file-name &#34;~/elisp&#34;))&#xA;(require &#39;insert-translated-name)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;用本地大模型来翻译&lt;/h3&gt; &#xA;&lt;p&gt;安装 crow 可以直接用在线翻译来翻译内容， 但是因为网络的问题， 有时候延时大了体验还是不爽的， 这时候可以 ollama 来驱动本地大模型来快速翻译， 我测试了一下都是秒回， 只不过本地大模型需要的内存较多， 内存紧张的用户建议还是用 crow 吧。&lt;/p&gt; &#xA;&lt;p&gt;下面是安装大模型的方式：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装 ollama: linux 平台只需要一条命令自动安装， &lt;code&gt;curl https://ollama.ai/install.sh | sh&lt;/code&gt;, 其他平台安装方式请参考 &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;ollama&lt;/a&gt; 官网&lt;/li&gt; &#xA; &lt;li&gt;下载 llama3:8b 大模型： &lt;code&gt;ollama run llama3:8b&lt;/code&gt; 这条命令会自动下载 &lt;code&gt;llama3:8b&lt;/code&gt; 这个模型文件， 下载好了可以在终端测试一下&lt;/li&gt; &#xA; &lt;li&gt;设置翻译程序： &lt;code&gt;(setq insert-translated-name-program &#34;ollama&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;默认的模型使用的是 llama3:8b, 你也可以通过设置 &lt;code&gt;insert-translated-name-ollama-model-name&lt;/code&gt; 选项来更换为其他模型。&lt;/p&gt; &#xA;&lt;h3&gt;使用&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;命令&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;insert-translated-name-insert&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;按照当前语言风格自动插入翻译后的名字&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;insert-translated-name-insert-with-underline&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;按照下划线风格自动插入翻译后的名字&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;insert-translated-name-insert-with-camel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;按照骆驼风格自动插入翻译后的名字&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;insert-translated-name-insert-with-line&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;按照连接线风格自动插入翻译后的名字&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;insert-translated-name-insert-original-translation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;按照当前语言风格自动插入翻译&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;insert-translated-name-replace&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;按照当前语言风格自动替换中文为翻译后的名字&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;insert-translated-name-replace-with-underline&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;按照下划线风格自动替换中文为翻译后的名字&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;insert-translated-name-replace-with-camel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;按照骆驼风格自动替换中文为翻译后的名字&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;insert-translated-name-replace-with-line&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;按照连接线风格自动替换中文为翻译后的名字&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;insert-translated-name-insert&lt;/code&gt; 命令会根据当前的环境来自动切换不同的翻译风格， 如果匹配下面的规则， 则直接使用返回的翻译结果：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;当前模式如果设置了变量 &lt;code&gt;insert-translated-name-original-translation&lt;/code&gt; （由函数 insert-translated-name-use-original-translation 设置）&lt;/li&gt; &#xA; &lt;li&gt;在字符串或者注释中&lt;/li&gt; &#xA; &lt;li&gt;在 magit commit buffer 中&lt;/li&gt; &#xA; &lt;li&gt;在 minibuffer 中&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;当然， 你也可以在调用命令 &lt;code&gt;insert-translated-name-insert&lt;/code&gt; 之前按一下 C-u 也是可以的。&lt;/p&gt; &#xA;&lt;p&gt;下面是各种语言预定的风格, 如果你不喜欢默认风格, 可以定制以下变量的内容:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(defvar insert-translated-name-origin-style-mode-list&#xA;  &#39;(text-mode))&#xA;&#xA;(defvar insert-translated-name-line-style-mode-list&#xA;  &#39;(web-mode emacs-lisp-mode))&#xA;&#xA;(defvar insert-translated-name-camel-style-mode-list&#xA;  &#39;(js-mode))&#xA;&#xA;(defvar insert-translated-name-underline-style-mode-list&#xA;  &#39;(ruby-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;自定义&lt;/h3&gt; &#xA;&lt;h4&gt;添加英文模式&lt;/h4&gt; &#xA;&lt;p&gt;如果你想在其它模式激活 &lt;code&gt;insert-translated-name-insert&lt;/code&gt; 的时候自动使用英文翻译， 而不是变量名， 可以用下面的方式来支持：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(dolist (hook (list&#xA;               &#39;atomic-chrome-edit-mode-hook&#xA;               ))&#xA;  (add-hook hook &#39;(lambda () (insert-translated-name-use-original-translation))))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>armindarvish/consult-web</title>
    <updated>2024-04-22T01:34:36Z</updated>
    <id>tag:github.com,2024-04-22:/armindarvish/consult-web</id>
    <link href="https://github.com/armindarvish/consult-web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Powerful Web and Omni Search inside Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+include: ~/OrgFiles/armin/org-macros.setup #+OPTIONS: h:1 num:nil toc:nil d:nil&lt;/p&gt; &#xA;&lt;p&gt;#+TITLE: consult-web - a powerful versatile omni search inside emacs #+AUTHOR: Armin Darvish #+LANGUAGE: en&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://github.com/armindarvish&#34;&gt;&lt;img alt=&#34;Armin Darvish&#34; src=&#34;https://img.shields.io/static/v1?label=Armin%20Darvish&amp;amp;message=consult-web&amp;amp;color=00A8B0&amp;amp;logo=github&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://img.shields.io/static/v1?label=Made%20For&amp;amp;message=GNU%20Emacs&amp;amp;color=7a5aba&amp;amp;logo=gnuemacs&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About =consult-web= consult-web is a package for getting search results from one or several custom sources (web search engines, AI assistants, elfeed database, org notes, ...) directly in Emacs minibuffer. It provides wrappers and macros around [[https://github.com/minad/consult][consult]], to make it easier for users to get results from search engines, websites, AI assistants, etc. inside emacs minibuffer completion. In other words, consult-web enables geting consult-style multi-source or dynamically completed results in minibuffer but for search engines and APIs (e.g. simmilar to =consult-web= but for runing a google search from within emacs minibuffer). It provides a range of sources as examples, but the main idea here is to remain agnostic of the source and provide the toolset to the users to define their own sources similar to what consult does for local sources.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is the mandatory screenshot:&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[https://github.com/armindarvish/consult-web/blob/screenshots/screenshots/dynamic-omni-screenshot.gif]]&lt;/p&gt; &#xA;&lt;p&gt;For a detailed review of the package and comparison to other tools, see my youtube video here: [[https://www.youtube.com/watch?v=7pDfyqBZwvo]]&lt;/p&gt; &#xA;&lt;p&gt;You can also read my [[https://www.armindarvish.com/post/web_omni_search_in_emacs_with_consult-web/][blog post]] about the motivation and broader context of why I made consult-web and how I use it everyday examples.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting Started Before you start, make sure you understand three points:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Important Note 1&lt;/em&gt;: This is work in progress in its early stage and bugs and issues are very much expected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Important Note 2&lt;/em&gt;: You should consider the general risks of using emacs to browse the web. By default, all codes are trusted inside emacs and browsers are naturally the target of many attacks. Therefore, it is important to be aware of the risks and be intentional about what links you open (or do not open) inside emacs. By default, consult-web would only be opening web pages (or calling APIs of) the sources (e.g. search engines, ...) and not any other websites. It&#39;s up to the user then to decide how she or he wants to open the links and chose their own risk tolerance. consult-web provides customization variables for different actions (e.g. opening links in external browsr v.s. in emacs), so make sure you know how to set everything up.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Important Note 3&lt;/em&gt;: The functions provided in =consult-web-sources=, provide a basic demonstration for integrating different services (such as search providers), however since each service comes with its own terms and conditions (that may change over time and vary from location to location), it is difficult to provide all-encompassing solutions and maintain them over time. consult-web is agnostic of how you connect and integrate other services in your setup (because neither consult-web nor emacs collect any information of the users or their usage), and therefore ultimately only you the user are responsible for setting up everything correctly and understand consequences of the usage (e.g. costs of using paid APIs) and ensure to stay within the bounds of relevant laws and regulations for your usage (i.e. follow software user agreements, etc.). Therefore, it is important for you to read and understand how to use each service, and also understand what happens under the hood when you integrate the service with consult-web. I try my best to provide documentation here as well as on the [[https://github.com/armindarvish/consult-web/wiki][wiki pages]], and will try to help when possible but before you proceed understand that you do everything at your own risk.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Installation If you want an example config see [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#drop-in-example-config][Drop-in &lt;em&gt;Example Config&lt;/em&gt;]]. Here is some detailed explanation;&lt;/p&gt; &#xA;&lt;p&gt;*** Requirements In order to use consult-web, you need emacs &amp;gt;28.0 (I have not tested earlier versions) and [[https://github.com/minad/consult][consult]]. While this is th only requirements, I suggest you review consult&#39;s README since it recommends some other packages and useful configurations for different settings. Some of those extra packages and settings can improve your experience of consult-web as well. In particular, the section about [[https://github.com/minad/consult#asynchronous-search][asynchronous search]] is important for learning how to use inputs to search for result and narrow down in minibuffer. In addition combining consult with other packages such as [[https://github.com/minad/vertico][vertico]], [[https://github.com/oantolin/orderless][orderless]], and [[https://github.com/oantolin/embark][embark]] can improve the functionality as well as user-experience.&lt;/p&gt; &#xA;&lt;p&gt;*** Installing consult-web Package consult-web is not currently on [[https://elpa.gnu.org/packages/consult.html][ELPA]] or [[https://melpa.org/#/consult][MELPA]]. Therefore, you need to install it using an alternative non-standard package manager such as [[https://github.com/radian-software/straight.el][straight.el]] or use manual installation.&lt;/p&gt; &#xA;&lt;p&gt;**** straight.el To install consult-web with straight.el you can use the following command. Make sure you load consult-wev after loading consult (e.g. =require &#39;consult=).&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (straight-use-package &#39;(consult-web :type git :host github :repo &#34;armindarvish/consult-web&#34; :files (:defaults &#34;sources/*.el&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;or if you use =use-package= macro with straight, you can do:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package consult-mu :straight (consult-web :type git :host github :repo &#34;armindarvish/consult-web&#34; :files (:defaults &#34;sources/*.el&#34;)) :after consult ) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also fork this repository and use your own repo.&lt;/p&gt; &#xA;&lt;p&gt;**** manual installation Clone this repo and make sure the files are on your load path, as described on [[https://www.emacswiki.org/emacs/LoadPath][EmacsWiki]].&lt;/p&gt; &#xA;&lt;p&gt;Make sure you load consult (e.g. =require &#39;consult=) before you load consult-web.&lt;/p&gt; &#xA;&lt;p&gt;** Adding Search Sources *** Loading Sources **** load all default sources at once You can add search &lt;em&gt;ALL&lt;/em&gt; the default sources by loading the provided =consult-web-sources= module: #+begin_src emacs-lisp (require &#39;consult-web-sources) #+end_src This provides sources for some popular services, and adds a long list of interactive commands (dynamic search, static search or both depending on the source). Over time I hope to add more services, hopefully by contribution from the community as well. Note that these are also good examples for you to learn how to add your own sources or tweek the current ones for your specific use-cases.&lt;/p&gt; &#xA;&lt;p&gt;**** load a single source Alternatively you can load a single source by just reuqiring the corresponding file. For example for google, you can do: #+begin_src emacs-lisp (require &#39;consult-web-google) (require &#39;consult-web-sources) #+end_src This would add interactive commands only for searching google (e.g. =consult-web-google= and =consult-web-dynamic-google=).&lt;/p&gt; &#xA;&lt;p&gt;**** load multiple sources but not all You can also load multiple sources (but not all) by setting the list =consult-web-sources-modules-to-load= and then loading =consult-web-sources=; #+begin_src emacs-lisp (setq consult-web-sources-modules-to-load &#39;(consult-web-google consult-web-wikipedia)) (require &#39;consult-web-sources) #+end_src This limits the sources that =consult-web-sources= loads to ONLY those defined in =consult-web-sources-modules-to-load=.&lt;/p&gt; &#xA;&lt;p&gt;*** List of Sources Provided by Default |--------------------------+-------------------------| | Source | Category | |--------------------------+-------------------------| | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#open-ai-aka-chatgpt][chatGPT]] | Simple AI prompts | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#bing][Bing]] | Search Engine | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#brave][Brave]] | Search Engine | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#brave-auto-suggest][Brave AutoSuggest]] | AutoSuggest | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#consult-line-multi][consult-line-multi]] | Local Text in Buffers | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#consult-notes][consult-notes]] | Local Notes | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#buffers][consult-buffer]] | Local Buffers | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#duckduckgo-limited-api][DuckDuckGo (Limited API)]] | Search Suggestions | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#elfeed][Elfeed]] | Feeds (RSS, videos,...) | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#google][Google]] | Search Engine | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#google-autosuggest][Google Autosuggest]] | AutoSuggest | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#gptel][gptel]] | AI Assistant | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#doiorg][Doi.org]] | Academic Reference | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#pubmed-entrez-api][PubMed]] | Academic Reference | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#scopus][Scopus]] | Academic Reference | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#stackoverflow][StackOverflow]] | Community Forum | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#wikipedia][Wikipedia]] | Encyclopedia | | [[https://github.com/armindarvish/consult-web?tab=readme-ov-file#youtube][YouTube]] | Videos | |--------------------------+-------------------------|&lt;/p&gt; &#xA;&lt;p&gt;**** Web Search Sources ***** Bing Microsoft Azure cloud services include Bings Search API. You need to make an account and get an API Key. Follow the official documents here: [[https://www.microsoft.com/en-us/bing/apis][Bing Search APIs | Microsoft Bing]] to get started. Once you have an API key, you can set it up in consult-web using the following variables; #+begin_src emacs-lisp (require &#39;consult-web-bing) (setq consult-web-bing-api-key &#34;YOUR-BING-API-KEY-OR-FUNCTION&#34;) (add-to-list &#39;consult-web-dynamic-sources &#34;Bing&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...) #+end_src ***** Brave Brave provides a very good and easy-to-use API with reasonable limits and is one of my favorites when it comes to programmatic search. For API documentaiont refer to the official website: [[https://brave.com/search/api/][Brave Search API]]. Once you sign up and create an account you can access the documentation and create an API key. This API key can then be set in consult-web in the following custom variable. For a more secure approach you can pass a function that retrives the key to this variable:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-brave) (setq consult-web-brave-api-key &#34;YOUR-BRAVE-API-KEY-OR-FUNCTION&#34;) (add-to-list &#39;consult-web-dynamic-sources &#34;Brave&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** Brave Autosuggest [[https://api.search.brave.com/res/v1/suggest/search][Brave AutoSuggest API]], provides completion for search terms. You need to subscribe to autosuggest plan and create an API key specifically for the autosuggest service. Follow the official documentation here: [[https://brave.com/search/api/][Brave Search API]] and once you have an API key for autosuggest, you can set it in consult-web in the following custom variable. For a more secure approach you can pass a function that retrieves the key to this variable: #+begin_src emacs-lisp (require &#39;consult-web-brave-autosuggest) (setq consult-web-brave-autosuggest-api-key &#34;YOUR-BRAVE-AUTOSUGGEST-API-KEY-OR-FUNCTION&#34;) (setq consult-web-default-autosuggest-command #&#39;consult-web-dynamic-brave-autosuggest) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** DOI.org DOI.org allows you to get the target url for DOI strings (for example for academic literature. You can use the this source if you want to enter the DOI and get the target link. )consult-web uses this i the backend to get target links for paper found on scopus. If you want interactive commands for the DOI.org service, you can use also use this source by:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-doi) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;and then run =consult-web-dynamic-doiorg= or use =consult-web--doi-to-url= function.&lt;/p&gt; &#xA;&lt;p&gt;***** DuckDuckGo Limited API Unfortunately DuckDuckGo does not support an official API acces (anynmore!). In fact on their website they clearly discourage the users against doing programatic searches. They do provide a very Limited API that only suggests relevant topics with search links on DuckDuckGo. It&#39;s not a very useful tool as is, but I am including it in the resources as an interesting example fr users that may like the idea. You cna use it by;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-duckduckgo) (add-to-list &#39;consult-web-dynamic-sources &#34;DuckDuckGo API&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** Google&lt;/p&gt; &#xA;&lt;p&gt;The official way to use google as a search engine and fetch results is through an API, [[https://programmablesearchengine.google.com/about/][Google Custom Search]]. consult-web provides example functions for using this service in [[file:sources/consult-web-google.el]]. This source can also be added to the multi-source interactive commands (e.g. =consult-web-dynamic=, =consult-web-multi=,...) by adding =&#34;Google&#34;= to the relevant source list variable.&lt;/p&gt; &#xA;&lt;p&gt;Note that to use this source you need to sign up for google API services and get an &lt;em&gt;API key&lt;/em&gt; and a &lt;em&gt;cx number&lt;/em&gt; (see [[https://developers.google.com/custom-search/v1/using_rest][REST API]]). Once you have an API KEY and a cx number, you can set them in the following custom varibales. For a more secure approach you can also pass functions that return the values insted of directly passing strings:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-google) (consult-web-google-customsearch-key &#34;YOUR-GOOGLE-API-KEY-OR-FUNCTION&#34;) (consult-web-google-customsearch-cx &#34;YOUR-GOOGLE-CX-NUMBER-OR-FUNCTION&#34;) (add-to-list &#39;consult-web-dynamic-sources &#34;Google&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** Google Autosuggest Google Autosuggest is not well-documented and likely not officially upported, but using suggestqueries.google.com seems to work, if you pass a client paramter (e.g. &lt;a href=&#34;http://suggestqueries.google.com/complete/search?client=firefox&amp;amp;q=YOURQUERY&#34;&gt;http://suggestqueries.google.com/complete/search?client=firefox&amp;amp;q=YOURQUERY&lt;/a&gt;). I have not been able to find any official document that clearly states that this is not an allowed use-case, yet there are not oficial docuemntation saying that this is allowed either. Therefore this is currently not a reliable tool but since it works, I have included it as an example in the sources. You can use it by:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-google-autosuggest) (setq consult-web-default-autosuggest-command #&#39;consult-web-dynamic-google-autosuggest) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** Wikipedia [[https://www.mediawiki.org/wiki/API:Main_page][Wikipedia&#39;s API]], provides a way to get programmatic search results for free. Search only operations do not need an account or API key. Therefore, you can directly use =consult-web-wikipedia= or =consult-web-dynamic-wikipedia= and you can also add Wikipedia to multi-source interactive commands for example by: #+begin_src emacs-lisp (require &#39;consult-web-wikipedia) (add-to-list &#39;consult-web-dynamic-sources &#34;Wikipedia&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...) #+end_src ***** StackOverFlow While stack exchange allows using its API without an account or API key (a.k.a. anonymously), it is recommended to register for an API key through [[https://stackapps.com/][stackapps.com]], to get larger quota, and avoid getting blocked by human verification, etc. Once you have a key, you can set it in consult-web by the following custom variable. alternatively use a function that returns the key for a more secure approach:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-stackoverflow) (setq consult-web-stackexchange-api-key &#34;YOUR-STACKEXCHANGE-API-KEY-OR-FUNCTION&#34;) (add-to-list &#39;consult-web-dynamic-sources &#34;StackOverflow&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Follow the official API documentation here: [[https://api.stackexchange.com/docs][StackExchange API Docs]]. You can use their interactive tools, such as [[https://api.stackexchange.com/docs/advanced-search][Advanced Search API]] to get a sense of query parameters and build your custom tool. consult-web provides examples in =consult-web-stackoverflow= and =consult-web-dynamic-stackoverflow= for fetching results from stackoverflow, but you cna make your own custom tool from other stack exchange sources as well.&lt;/p&gt; &#xA;&lt;p&gt;***** PubMed Entrez API If you would like to use PubMed to search academic literature, then =consult-web-pubmed= and =consult-web-dynamic-pubmed= provide interactive commands to search PubMed. This uses PubMed&#39;s API (as opposed to parsing the html webpage), through PubMed&#39;s Entez e-utilities services which requires an API Key. For official documentaton, see [[https://www.ncbi.nlm.nih.gov/books/NBK25500/][PubMed Entrez e-utilities]]. Once you create an API key, you can set it in consult-web using the following custom variabele or a function that returns the key instead of directly using the string. #+begin_src emacs-lisp (require &#39;consult-web-pubmed) (setq consult-web-pubmed-api-key &#34;YOUR-PUBMED-API-KEY-OR-FUNCTION&#34;) (add-to-list &#39;consult-web-scholar-sources &#34;PubMed&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;I do provide an example of using html-parsing for pubmed webpage (i.e. search pubmed anonymously) in the [[https://github.com/armindarvish/consult-web/wiki][wiki pages]]. This is mainly to demonstrate how one can define a source that uses html-parsing, otherwise APIs are generally preferred.&lt;/p&gt; &#xA;&lt;p&gt;***** Scopus You can also use [[https://www.scopus.com/][Scopus]] for academic literature. To use scopus, you need to sign up for an API key. Follow the official documents here: [[https://dev.elsevier.com/][Elsevier Developer Portal]]. Once you create an API key, you can set it in consult-web using the following custom variabele or a function that returns the key instead of directly using the string.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-scopus) (setq consult-web-scopus-api-key &#34;YOUR-SCOPUS-API-KEY-OR-FUNCTION&#34;) (add-to-list &#39;consult-web-scholar-sources &#34;Scopus&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** Youtube You can also search YouTube videos in consult-web. You need a Google API key. Refer to the official documentation: [[https://developers.google.com/youtube/v3/getting-started][YouTube Data API | Google for Developers]] for how to set things up. Then you can use your API key by setting the corresponding variable in consult-web: #+begin_src emacs-lisp (require &#39;consult-web-youtube) (setq consult-web-scopus-api-key &#34;YOUR-GOOGLE-API-KEY-OR-FUNCTION&#34;) (add-to-list &#39;consult-web-dynamic-sources &#34;Youtube&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** AI Assistants ***** Open AI (a.k.a. chatGPT) If you want to use [[https://openai.com/product][Open AI&#39;s API]] (e.g. for chatGPT results), you need to get an API key. Follow the official documentation here: [[https://platform.openai.com/docs/introduction][Open AI API docs]], and once you have an API key, you can set it in consult-web with the following custom variable. Using a function that returns the key is more secure than using the string directly. #+begin_src emacs-lisp (require &#39;consult-web-chatgpt) (setq consult-web-openai-api-key &#34;YOUR-OPENAI-API-KEY-OR-FUNCTION&#34;) (add-to-list &#39;consult-web-dynamic-sources &#34;chatGPT&#34;) ;; or (add-to-list &#39;consult-web-multi-sources...)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;consult-web-sources provides =consult-web-chatgpt= and =consult-web-dynamic-chatgpt= commands for directly sending a prompt to Open AI api and retrieving responses. Note that depending on the prompt this may be a bit slower and also be aware that when prompts are sent to OpenAI, this can incur charges on your account, so you may want to be cautious of how you use these functions.&lt;/p&gt; &#xA;&lt;p&gt;Note that these commands are cimple one-time http requests. For a more extended conversation and a full-feature experience, you can use consult-web-gptel below.&lt;/p&gt; &#xA;&lt;p&gt;***** gptel Another easy way to integrate AI assistants with consult-web is to use the amazing package, [[https://github.com/karthink/gptel][gptel]]. This is by far my favorite generative AI package in emacs becuase of how easy it is to integrate it with other things in emacs. To use this with consult-web, install gptel following the packages&#39;s documentation here: [[https://github.com/karthink/gptel][gptel]]. Once you have gptel setup, you can call =consult-web-gptel=, or =consult-web-dynamic-gptel= to get answers to your prompts. Note that, these functions do not fetch the answers to your prompt right away and wait for either a preview or for selecting the candidate to send the prompt to the backend AI. This is becuase sending the prompt to the backend can be expensive (in terms of paid services) and can also be slow depending on the backend and how long the answer is. Therefore, by design the user needs to actively decide to send the prompt to the backend.&lt;/p&gt; &#xA;&lt;p&gt;You can add any of the gptel sources to any of the multi-source interactive commands. For example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-gptel) (add-to-list consult-web-dynamic-sources &#34;gptel&#34;) ;; or add-to-list consult-web-multi,... #+end_src **** Local Sources In addition consult-web provides utilities to combine web search ources with local sources to create &#34;omni&#34; multi-source searches. The folowings are the sources that are provided by default. ***** buffers Generally for consult-sourcs, you can use =consult-web--make-source-from-consult-source= you make a consult-web version of the same source. This is for example done in =consult-web-buffers= to covert sources in =consult-buffer-sources= to consult-web compatible versions.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-buffers) (add-to-list &#39;consult-web-dynamic-omni &#34;Buffer&#34;) #+end_src ***** consult-line-multi Another useful consult source for omni searches is =consult-line-multi=. this is provided in =consult-web-line-multi=. #+begin_src emacs-lisp (require &#39;consult-web-line-multi) (add-to-list &#39;consult-web-dynamic-omni &#34;Line Multi&#34;) #+end_src #+end_src ***** consult-notes If you use [[https://github.com/mclear-tools/consult-notes][consult-notes]], you can also combine the consult-web compatible version with other sources to create powerful omni search reseults. #+begin_src emacs-lisp (require &#39;consult-web-notes) (add-to-list &#39;consult-web-dynamic-omni &#34;Reference Roam Nodes&#34; &#34;Zettel Roam Nodes&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** elfeed You can also add oyur elfeed database as a source to consult-web by;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-elfeeed) (add-to-list &#39;consult-web-dynamic-omni &#34;elfeed&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** What about other sources? I am hoping to add examples for more sources over time. I think the currently provided examples in [[file:sources/][sources]], should be sufficient for users to learn how to make new sources on their own. I will add more in-depth instructions and explanations in the [[https://github.com/armindarvish/consult-web/wiki][wiki pages]] for you to understand how to define new custom sources. If you use the package and come up with new sources or use-cases, I encourgae you to share it with others in the wiki pages as well so everyone can benefit from it. If such source or use-case is novel enough that adds some new value beyond the current examples, I can also consider adding that to the repo, otherwise we can just keep these in the wiki pages, to avoid adding unneccessary bloat.&lt;/p&gt; &#xA;&lt;p&gt;** Configuration consult-web is built with the idea that the user should be able to customize everything based on their use-case, therefore the user is very much expected to learn how to configure this package. Therefore, I recommend you read through this section and understand how to configure the package according to your needs and for your specific use-case.&lt;/p&gt; &#xA;&lt;p&gt;*** Customization Variables The following customizable variables are provided:&lt;/p&gt; &#xA;&lt;p&gt;**** main ***** =consult-web-default-browse-function= Default browse function for opening urls. This can be set to external browser function by; #+begin_src emacs-lisp (setq consult-web-default-browse-function &#39;browse-url) #+end_src ***** =consult-web-alternate-browse-function= Secondary browse function for opening urls. This can for example be set to eww or some other browsers for quick access to an alternative browser with embark actions. #+begin_src emacs-lisp (setq consult-web-alternate-browse-function &#39;eww-browse-url) #+end_src ***** =consult-web-default-preview-function= Default function to use for previewing links. This can for example be set to [[https://www.gnu.org/software/emacs/manual/html_mono/eww.html][eww]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-web-default-preview-function #&#39;eww-browse-url) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;or [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Embedded-WebKit-Widgets.html][xwidegt-webkit]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-web-default-preview-function #&#39;xwidget-webkit-browse-url) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-show-preview= This turns previews on/off for all consult-web sources. It is recommended to set this to =t= and use =preview-key= to control previews per source.&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-preview-key= This is the default preview key. A good choice might be &#34;C-o&#34;. #+begin_src emacs-lisp (setq consult-web-preview-key &#34;C-o&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-default-count= By default consult-web retrieves only &lt;em&gt;up to&lt;/em&gt; this many results per source. It is recommended to keep this to a low number (e.g. 5 to 10) to keep the performace fast. The default is set to 5 because nowadays for most everyday use-cases, you probably won&#39;t need more than the top 5 results.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-web-default-count &#34;5&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that with dynamic commands of consult-web, you can always increase the number by passing arguments to =-n=, =--count=, or =:count= (for example by typing =search term -- -n 30=, you can retrieve up to 30 results.&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-default-page= This is similar to going to page 2, 3,...,N on a clasic search result page. If this is set to N, first (N * count/page) results are skipped and the next page of results are shown. It is recommeded to keept this as default, 0, to see the top results.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that with dynamic commands of consult-web, you can always change the page by passing values to arguments =-p=, =--page=, or =:page= (for example by typing =search term -- -p 2=, you can get page 2.&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-group-by= This is the field that is used to group the results. By default, results are grouped by the domain of the url (e.g. &#34;bbc.com&#34; v.s. &#34;nytimes.com&#34;), but you can change this to group by the name of the source (e.g. &#34;Google&#34; v.s. &#34;Brave&#34;,...) or by the full url ,etc.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-web-group-by :source) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-multi-sources= This is a list of source name strings (e.g. =&#39;(&#34;Google&#34;, &#34;Wikipedia&#34;, &#34;chatGPT&#34;)=) that will be used in the command =consult-web-multi= (see above for description).&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-dynamic-sources= This is a list of source name strings (e.g. =&#39;(&#34;Google&#34;, &#34;Wikipedia&#34;, &#34;chatGPT&#34;)=) that will be used in the command =consult-web-dynamic= (see above for description).&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-scholar-sources= This is a list of source name strings (e.g. =&#39;(&#34;PubMed&#34;)=) that will be used in the command =consult-web-scholar= (see above for description).&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-omni-sources= This is a list of source name strings (e.g. =&#39;(&#34;Buffer&#34; &#34;Brave&#34; &#34;gptel&#34;)=) that will be used in the command =consult-web-omni= (see above for description). ***** =consult-web-dynamic-omni-sources= This is a list of source name strings (e.g. =&#39;(&#34;Reference Roam Nodes&#34; &#34;Zettel Roam Nodes&#34; &#34;Line Multi&#34; &#34;elfeed&#34; &#34;Brave&#34; &#34;gptel&#34; &#34;Youtube&#34;)=) that will be used in the command =consult-web-dynamic-omni= (see above for description).&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-highlight-matches= Whether consult-web highlights matches of the search term in the minibuffer candidates. This is useful to highlight the relevance of the search results.&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-default-interactive-command= This is a convinient feature to bind your favorite consult-web interactive command to the command called =consult-web=, so it is easier to remember and find when you call =M-x=. You can bind this to any of the multi-source interactive commadns (such as =consult-web-dyamic= or =consult-web-multi=, ...) or you can bind it to a single-source command (e.g. =consult-web-dynamic-google= or =consult-web-google=,...) or alternatively define your own custom command.&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-default-autosuggest-command= Default autosuggest command. consult-web provides two examples with =consult-web-dynamic-brave-autosuggest= and =consult-web-dynamic-google-autosuggest=, but you can also define other custom autosuggest commands from other sources (e.g. google, wikipedia, ...)&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-web-default-autosuggest-command #&#39;consult-web-dynamic-brave-autosuggest) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-dynamic-input-debounce= In dynamic commands, the dynamic collection process is started only when there has not been new input for =consult-web-dynamic-input-debounce= seconds. If you type slow or think you need time to think for what you want to search, you may want to increase this number, so you don&#39;t run searches prematurely, especially if you want to avoid running premature search terms on paid services. By default this inherits from consult&#39;s built-in input-debounce value, which is 0.5. Personally I find that a bit too fast for consult-web because I do not want consult-web to send a query to paid openai API while I am still typing my query so I slow it down to 0.8 - 1s.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-web-dynamic-input-debounce 0.8) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-dynamic-input-throttle= In dynamic commands, the dynamic collection process is started only every =consult-web-dynamic-input-throttle= seconds. If you use API services that have limited number of queries per second, you may want to increase this number to avoid getting errors. I set this to 2x my input-debounce value:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-web-dynamic-input-throttle 1.6) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-dynamic-refresh-delay= In dynamic commands, the completion UI is only updated every =consult-web-dynamic-refresh-delay= seconds. You probably want to run this as fast as =consult-web-dynamic-input-debounce=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-web-dynamic-input-throttle 0.8) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** per source As mentioned above, once you load sources (e.g. =(require &#39;consult-web-sources)=), then you will get more customization variables per source. These include variables for API keys. Here are some examples:&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-google-customsearch-key= and =consult-web-google-customsearch-cx= API Key and cx-number for [[https://programmablesearchengine.google.com/about/][Google custom Search]].&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-web-google-customsearch-key &#34;YOUR-GOOGLE-API-KEY-OR-FUNCTION&#34;) (consult-web-google-customsearch-cx &#34;YOUR-GOOGLE-CX-NUMBER-OR-FUNCTION&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-brave-api-key= [[https://brave.com/search/api/][Brave Search API]] key. #+begin_src emacs-lisp (setq consult-web-brave-api-key &#34;YOUR-BRAVE-API-KEY-OR-FUNCTION&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-openai-api-key= [[https://openai.com/product][Open AI&#39;s API]] key #+begin_src emacs-lisp (setq consult-web-openai-api-key &#34;YOUR-OPENAI-API-KEY-OR-FUNCTION&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;***** =consult-web-stackexchange-api-key= StackExchange API key from [[https://stackapps.com/][stackapps.com]]. #+begin_src emacs-lisp (setq consult-web-stackexchange-api-key &#34;YOUR-STACKEXCHANGE-API-KEY-OR-FUNCTION&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Be aware that as I add more sources, there may be more customization variables added. Refer to release notes or .... pages for more info if needed.&lt;/p&gt; &#xA;&lt;p&gt;** Drop in “example config” Here is a srop-in config cnippert that puts everything mentioned above together. Read the sections above for more details.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package consult-web :straight (consult-web :type git :host github :repo &#34;armindarvish/consult-web&#34; :branch &#34;main&#34; :files (:defaults &#34;sources/*.el&#34;)) :after consult :custom ;; General settings that apply to all sources (consult-web-show-preview t) ;;; show previews (consult-web-preview-key &#34;C-o&#34;) ;;; set the preview key to C-o (consult-web-highlight-matches t) ;;; highlight matches in minibuffer (consult-web-default-count 5) ;;; set default count (consult-web-default-page 0) ;;; set the default page (default is 0 for the first page)&lt;/p&gt; &#xA;&lt;p&gt;;;; optionally change the consult-web debounce, throttle and delay. ;;; Adjust these (e.g. increase to avoid hiting a source (e.g. an API) too frequently) (consult-web-dynamic-input-debounce 0.8) (consult-web-dynamic-input-throttle 1.6) (consult-web-dynamic-refresh-delay 0.8)&lt;/p&gt; &#xA;&lt;p&gt;:config ;; Add sources and configure them ;;; load the example sources provided by default (require &#39;consult-web-sources)&lt;/p&gt; &#xA;&lt;p&gt;;;; set multiple sources for consult-web-multi command. Change these lists as needed for different interactive commands. Keep in mind that each source has to be a key in `consult-web-sources-alist&#39;. (setq consult-web-multi-sources &#39;(&#34;Brave&#34; &#34;Wikipedia&#34; &#34;chatGPT&#34; &#34;Google&#34;)) ;; consult-web-multi (setq consult-web-dynamic-sources &#39;(&#34;gptel&#34; &#34;Brave&#34; &#34;StackOverFlow&#34; )) ;; consult-web-dynamic (setq consult-web-scholar-sources &#39;(&#34;PubMed&#34;)) ;; consult-web-scholar (setq consult-web-omni-sources (list &#34;elfeed&#34; &#34;Brave&#34; &#34;Wikipedia&#34; &#34;gptel&#34; &#34;YouTube&#34; &#39;consult-buffer-sources &#39;consult-notes-all-sources)) ;;consult-web-omni (setq consult-web-dynamic-omni-sources (list &#34;Known Project&#34; &#34;File&#34; &#34;Bookmark&#34; &#34;Buffer&#34; &#34;Reference Roam Nodes&#34; &#34;Zettel Roam Nodes&#34; &#34;Line Multi&#34; &#34;elfeed&#34; &#34;Brave&#34; &#34;Wikipedia&#34; &#34;gptel&#34; &#34;Youtube&#34;)) ;;consult-web-dynamic-omni&lt;/p&gt; &#xA;&lt;p&gt;;; Per source customization ;;; Pick you favorite autosuggest command. (setq consult-web-default-autosuggest-command #&#39;consult-web-dynamic-brave-autosuggest) ;;or any other autosuggest source you define&lt;/p&gt; &#xA;&lt;p&gt;;;; Set API KEYs. It is recommended to use a function that returns the string for better security. (setq consult-web-google-customsearch-key &#34;YOUR-GOOGLE-API-KEY-OR-FUNCTION&#34;) (setq consult-web-google-customsearch-cx &#34;YOUR-GOOGLE-CX-NUMBER-OR-FUNCTION&#34;) (setq consult-web-brave-api-key &#34;YOUR-BRAVE-API-KEY-OR-FUNCTION&#34;) (setq consult-web-stackexchange-api-key &#34;YOUR-STACKEXCHANGE-API-KEY-OR-FUNCTION&#34;) (setq consult-web-pubmed-api-key &#34;YOUR-PUBMED-API-KEY-OR-FUNCTION&#34;) (setq consult-web-openai-api-key &#34;YOUR-OPENAI-API-KEY-OR-FUNCTION&#34;) ;;; add more keys as needed here. ) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage and Features For explanation of features and comparison to some other packages, you can watch my youtube video: &lt;a href=&#34;https://www.youtube.com/watch?v=7pDfyqBZwvo&#34;&gt;https://www.youtube.com/watch?v=7pDfyqBZwvo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Static v.s. Dynamic Interactive Commands For each source, you may have static or dynamic commands. Static commands query the use for an input and thne fetch the results. Dynamic commands, do dynamic completion as the user types (fetch results as the user is typiing). Dynamic commands feel a bit more intuitive and modern in 2024, but on the other hand have the disavantage of sending the query to the servers multiple times especially if you type slowly! Depending on the service provider and the API model, you may want to avoid hitting the server too frequently (for example for services that you pay per query), therefore for certain services a static command might be a better choice than the dynamic command. Using the macro =cosnult-web-define-source=, you can chose to creat static, dynamic or both by passing =nil=, =t=, or =&#39;both= to the keyword =:dynamic=. Here is an example from the source code, for creating both static and dynamic comamnds for Brave search:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-web-define-source &#34;Brave&#34; :narrow-char ?b :face &#39;consult-web-engine-source-face :request #&#39;consult-web--brave-fetch-results :preview-key consult-web-preview-key :search-history &#39;consult-web--search-history :selection-history &#39;consult-web--selection-history :dynamic &#39;both ) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Multi-Source Interactive Commands consult-web does provide a few interactive commands. These are provided as good examples for users to follow when making their own custom commands for their work flow.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;=consult-web-multi=: This is an interactive command that uses multiple sources, as defined by =consult-web-multi-sources=, and shows the results in minibuffer completion. Here is an example screenshot:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[https://github.com/armindarvish/consult-web/blob/screenshots/screenshots/multi-screenshot.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Note that consult-web-multi does not provide dynamic completion but some might find using this more intuitive for narrowing down the results. The user provides one search term, and once the results are retrieved, typing in the minibuffer will narrow down the candidates. In addition, as can be seen in the screenshot above, depending on your minibuffer config for sorting, it is possible to remeber the candidates you selected before by sorting them on top (by using packages like [[https://github.com/oantolin/orderless][orderless]] or [[https://github.com/radian-software/prescient.el][prescient.el]]).&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;=onsult-web-dynamic=: This is a “multi-source” interactive command that uses “dynamic” collection. This allows dynamic completion of the search results (results are fetched as the user types). Here is a screenshot:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[https://github.com/armindarvish/consult-web/blob/screenshots/screenshots/dynamic-screenshot.gif]]&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;=consult-web-scholar=: This is similar to consult-web-dynamic, and is provided as an extra example to show how to make combination of sources for a specific purpose, in this case searching academic research literature. Here is a screenshot:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[https://github.com/armindarvish/consult-web/blob/screenshots/screenshots/scholar-screenshot.gif]]&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;=consult-web-omni=: This is another static multi-source command provided for combining web sources and local sources to do omni searches. Here is a screenshot:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[https://github.com/armindarvish/consult-web/blob/screenshots/screenshots/omni-screenshot.gif]]&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;=consult-web-dynamic-omni=: This is the dynamic version of the omni search for combination of web and local sources. For exampe, in the screenshot below you see results form org-roam notes, brave search engine, wikipedia, as well as gptel AI assistant:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[https://github.com/armindarvish/consult-web/blob/screenshots/screenshots/dynamic-omni-screenshot.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Note that the difference between =consult-web-multi= and =consult-web-omni= (and similarly between =consult-web-dynamic=, =consult-web-scholar=, =consult-web-dynamic-omni=) is the list of sources they use and therefore you cna use them as you wish for any combination of sources. You can also define more interative commands with various variation of sources folowwing these examples.&lt;/p&gt; &#xA;&lt;p&gt;** Dynamic Completion: Passing Arguments and Narrow Down&lt;/p&gt; &#xA;&lt;p&gt;Arguments can be passed to the dynamic interactive commands and furher naroowing down the results can be done using a syntax similar to the “perl splitting” style in [[https://github.com/minad/consult?tab=readme-ov-file#asynchronous-search][consult asynchronous search]].&lt;/p&gt; &#xA;&lt;p&gt;For narrowing down the results you need adding =#= after the searhc query. For example typing the following in the minibuffer: #+begin_example #emacs web search#github #+end_example&lt;/p&gt; &#xA;&lt;p&gt;First searches for “emacs web search”, and then uses “github” for narrow down.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, arguments can be passed to dynamic commands using similar syntax as =consult-grep=, too. For example typing the following in the minibuffer:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example #how to browse a url in emacs -- --model gpt-3.5-turbo #+end_example&lt;/p&gt; &#xA;&lt;p&gt;passes =gpt-3.5-turbo= as the value for the keyword argument =:model= to the backend functions of all the sources that fetch results. If any of those sources accept the keyword argument =:model=, the value =gpt-3.5-turbo= gets passed to them. For this reason it is recommended to always use functions that accept any keyword arguments (a.k.a. add =&amp;amp;allow-other-keys=) to avoid errors when non-existing keywords are passed to them.&lt;/p&gt; &#xA;&lt;p&gt;instead of using =--= , you can also use a keyword with colon =:=. The following would be similar to the example above:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example #how to browse a url in emacs -- :model gpt-3.5-turbo #+end_example&lt;/p&gt; &#xA;&lt;p&gt;** Embark Actions You can load the default emabrk actions by; #+begin_src emacs-lisp (require &#39;consult-web-embark) #+end_src The default actions allow you to open the links in the default or alternate browser and also to copy or insert, title and/or url of the links. Other embark actions can be defined per your own specific work flow. See the YouTube video for an example, here: [[https://youtu.be/7pDfyqBZwvo?t=4962]].&lt;/p&gt; &#xA;&lt;p&gt;** Other Important Features *** Minmial Code Base Without docstrings and whitespaces the code is less than 1000 lines and it only depends on [[https://github.com/minad/consult][consult]] and buil-in url-retrieve.&lt;/p&gt; &#xA;&lt;p&gt;*** Modular You can only load the parts you need. For example if all you need is an autosuggestion utility similar to =helm-google-autosuggest=, then you can do:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;consult-web-brave-autosuggest) #+end_src This adds an extra 100-200 lines of code per source. This also means to add a new source, you only need to write a short piece of code following those examples!&lt;/p&gt; &#xA;&lt;p&gt;*** Customizable and Extendable Lots of customization options both for sources and aslo for running actions on the results. New sources can be added as you wish with different format, different actions,...&lt;/p&gt; &#xA;&lt;p&gt;*** Power User Capabilities Dynamic collection allows for complex workflows on the fly. Change query parameters on the fly by passing arguments. Select a random set of results ad-hoc using embark and run embark actions on them. This allows batch processing as well. For example to add a long list of results to an org-mode note for later review (as shown in this youtube video: [[https://youtu.be/7pDfyqBZwvo?t=4774]]).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Comparison to Other Packages To the best of my knowledge no other package provides the functionality and versatility of conssult-web. Browsers like [[https://www.gnu.org/software/emacs/manual/html_node/emacs/EWW.html][EWW (GNU Emacs Manual)]] and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Embedded-WebKit-Widgets.html][Embedded WebKit Widgets (GNU Emacs Manual)]] only provide a browser and not the ability to get search results directly in minibuffer. Other built-in commands and packages such as [[https://www.emacswiki.org/emacs/WebJump][WebJump]] or [[https://github.com/hrs/engine-mode][engine-mode]] enable passing queries to search engines, but do not provide results in the minibuffer. =helm-google-autosuggest= in [[https://github.com/emacs-helm/helm][helm]] provides autosuggestion utility only. [[https://github.com/mnewt/counsel-web][counsel-web]] is the only package I know that provides google results directly in the minibuffer but the funcitonality is limited and the way it parses google website may get your IP flagged. consult-web took inspiration from all those packages and prvides a much more powerful solution thna any of those available solutions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bug Reports To report bug, first check if it is already reported in the [[https://github.com/armindarvish/consult-web/issues][&lt;em&gt;issue tracker&lt;/em&gt;]] and see if there is an existing solution or add relevant comments and discussion under the same issue. If not file a new issue following these steps:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the dependencies are installed, and both =consult= and =url-retrieve= (or other relevant commands) work as expected.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove the package and install the latest version (along with dependencies) and see if the issue persists.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In a bare bone vanilla Emacs (&amp;gt;=28) (e.g. =emacs -Q=), install the latest version of consult-web (and its dependencies) without any configuration or other packages and see if the issue still persists.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;File an issue and provide important information and context in as much detail as possible in your bug report. Important information can include:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your operating system, version of Emacs (or the version of emacsen you are using), version of consult (see [[https://github.com/emacsorphanage/pkg-info][pkg-info]]).&lt;/li&gt; &#xA; &lt;li&gt;The installation method and the configuration you are using with your consult-web.&lt;/li&gt; &#xA; &lt;li&gt;If there is an error message, turn debug-on-error on (by =M-x toggle-debug-on-error=) and include the backtrace content in your report.&lt;/li&gt; &#xA; &lt;li&gt;If you are using consult-web&#39;s built-in url-retrieve (e.g. =consult-web-url-retrieve-sync=) , you can change =consult-web-log-level= to =&#39;debug=, and inspect the log buffer (hidden buffer called &#34; &lt;strong&gt;consult-web-log&lt;/strong&gt;&#34; or other name set in =consult-web-log-buffer-name=). If you chose to include this information in your issue, &lt;em&gt;please make sure personal information and secrets (like API keys) are not exposed.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;If the error only exists when you have some other packages installed, list those packages (e.g. problem happens when evil is installed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions This is an open source package, and I appreciate feedback, suggestions, ideas, etc. There are lots of functionalities or sources that can be added to this package to improve different user&#39;s workflows, so if you have some ideas, feel free to file an issue for a feature request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to contribute to the code, please note that the main branch is currently stable (as stable as a work in progress like this can be) and the develop branch is the current work in progress. So, &lt;em&gt;start from the develop branch&lt;/em&gt; to get the latest work-in-progress updates and create a new branch with names such as feature/name-of-the-feature or fix/issue, ... Do the edits and then create a new pull request to merge back with the &lt;em&gt;develop&lt;/em&gt; branch when you are done with your edits.&lt;/p&gt; &#xA;&lt;p&gt;Importantly, keep in mind that I am using a &lt;em&gt;literate programming approach&lt;/em&gt; (given that this is a small project with very limited number of files) where everything goes into &lt;em&gt;consult-mu.org&lt;/em&gt; and then gets tangled to appropriate files (for now that includes consult-mu.el and consult-mu-embark.el). If you open a pull-request where you directly edited the .el files, I will likely not approve it because that will then get overwritten later when I tangle from the .org file. In other words, &lt;em&gt;Do Not Edit The .el Files!&lt;/em&gt; only edit the .org file and tangle to .el files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Obviously this package would not have been possible without the fabulous [[https://github.com/minad/consult][consult]] and [[https://github.com/oantolin/embark][embark]] packages. It also took inspiration from other packages including but not limited to [[https://github.com/hrs/engine-mode][engine-mode]], [[https://github.com/Malabarba/emacs-google-this][emacs-google-this]], [[https://github.com/emacs-helm/helm][helm]], and [[https://github.com/mnewt/counsel-web][counsel-web]].&lt;/p&gt;</summary>
  </entry>
</feed>