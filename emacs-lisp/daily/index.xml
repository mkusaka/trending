<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-05T01:25:27Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kimim/chatu</title>
    <updated>2024-03-05T01:25:27Z</updated>
    <id>tag:github.com,2024-03-05:/kimim/chatu</id>
    <link href="https://github.com/kimim/chatu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickly insert a generated image to orgmode or markdown, fast and conveniently.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;A small tool to various files to .svg files or download image files, and insert it to orgmode or markdown on-the-fly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;插 chā 图 tú&lt;/strong&gt;: insert a diagram.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Before using &lt;code&gt;chatu&lt;/code&gt;, you may need to install some external programs and set them in your PATH:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;draw.io and pdf2svg for drawio file conversion&lt;/li&gt; &#xA; &lt;li&gt;plantuml.jar, java for plantuml&lt;/li&gt; &#xA; &lt;li&gt;babashka for .bb script&lt;/li&gt; &#xA; &lt;li&gt;curl for downloading file from web&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From melpa with use-package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package chatu&#xA;  :hook ((org-mode markdown-mode) . chatu-mode)&#xA;  :commands (chatu-add&#xA;             chatu-open)&#xA;  :custom ((chatu-input-dir &#34;./draws&#34;)&#xA;           (chatu-output-dir &#34;./images&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or git submodule and use-package&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package chatu&#xA;  :load-path &#34;~/.emacs.d/site-lisp/chatu&#34;&#xA;  :hook ((org-mode markdown-mode) . chatu-mode)&#xA;  :commands (chatu-add&#xA;             chatu-open)&#xA;  :custom ((chatu-input-dir &#34;./draws&#34;)&#xA;           (chatu-output-dir &#34;./images&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Add &lt;code&gt;chatu&lt;/code&gt; line with &lt;code&gt;chatu-new&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+chatu: :drawio &#34;diagram.drawio&#34; :page 0 :input-dir &#34;./draws&#34; :output-dir &#34;./images&#34; :output &#34;diagram.svg&#34; :crop :nopdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;&amp;lt;!-- #+chatu: :drawio &#34;diagram.drawio&#34; :page 0 :input-dir &#34;./draws&#34; :output-dir &#34;./images&#34; :output &#34;diagram.svg&#34; :crop :nopdf --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options/Settings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:drawio&lt;/code&gt; specifies the backend, they can be &lt;code&gt;:planuml&lt;/code&gt;, &lt;code&gt;:babashka&lt;/code&gt;, &lt;code&gt;:curl&lt;/code&gt; or others added in the future by you.&lt;/li&gt; &#xA; &lt;li&gt;file name after backend keyword is the input file name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:page&lt;/code&gt; species which page you want to import to buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:input-dir&lt;/code&gt; and &lt;code&gt;:output-dir&lt;/code&gt; are the folders for input or output file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:output&lt;/code&gt; is the output file name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:crop&lt;/code&gt; if you want to crop the empty white in page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:nopdf&lt;/code&gt; if you do not want intermediate pdf file for drawio backend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Move cursor to &lt;code&gt;chatu&lt;/code&gt; line,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-c&lt;/code&gt; will invoke &lt;code&gt;chatu-add&lt;/code&gt; to add image in orgmode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-c C-c&lt;/code&gt; will invoke &lt;code&gt;chatu-add&lt;/code&gt; to add image in markdown-mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-o&lt;/code&gt; will invoke &lt;code&gt;chatu-open&lt;/code&gt; to open original .drawio or .puml file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;chatu&lt;/code&gt; line means different in orgmode and markdown:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;#+chatu: :drawio&lt;/code&gt; or &lt;code&gt;#+chatu: :plantuml&lt;/code&gt; in orgmode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;-- #+chatu: :drawio --&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;-- #+chatu: :plantuml --&amp;gt;&lt;/code&gt; in markdown&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remind!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the input files should be the first parameter, for example, .drawio or .puml file.&lt;/li&gt; &#xA; &lt;li&gt;in order to support whitespace in file and dir name, please &#34;quote all of them&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Extension&lt;/h1&gt; &#xA;&lt;p&gt;You can easily extend this package by adding new &lt;code&gt;chatu-&amp;lt;tool&amp;gt;.el&lt;/code&gt;. For example, when &lt;code&gt;&amp;lt;tool&amp;gt; = drawio&lt;/code&gt;, you need to define &lt;code&gt;chatu-drawio-open&lt;/code&gt; and &lt;code&gt;chatu-drawio-script&lt;/code&gt; in &lt;code&gt;chatu-drawio.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;chatu-drawio-open&lt;/code&gt; is invoked to open the drawio input file at the line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chatu-drawio-script&lt;/code&gt; is used to generate the shell script for conversion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both method use a &lt;code&gt;keyword-plist&lt;/code&gt; parameter, which contains the &lt;code&gt;chatu&lt;/code&gt; settings from &lt;code&gt;chatu&lt;/code&gt; line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+chatu: :drawio &#34;diagram.drawio&#34; :page 0 :input-dir &#34;./draws&#34; :output-dir &#34;./images&#34; :output &#34;diagram.svg&#34; :crop :nopdf :output-ext svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, we can get following &lt;code&gt;keyword-plist&lt;/code&gt; from above &lt;code&gt;chatu&lt;/code&gt; line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(:chatu t :type &#34;drawio&#34;&#xA; :input &#34;diagram.drawio&#34; :output &#34;diagram.svg&#34; :page &#34;0&#34;&#xA; :input-dir &#34;./draws&#34; :output-dir &#34;./images&#34;&#xA; :input-path &#34;./draws/diagram.drawio&#34;&#xA; :output-path &#34;./images/diagram.svg&#34;&#xA; :output-ext &#34;svg&#34;&#xA; :crop t&#xA; :nopdf t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;See example &lt;a href=&#34;https://raw.githubusercontent.com/kimim/chatu/main/chatu.org&#34;&gt;chatu.org&lt;/a&gt; in orgmode and &lt;a href=&#34;https://raw.githubusercontent.com/kimim/chatu/main/chatu.md&#34;&gt;chatu.md&lt;/a&gt; in markdown-mode.&lt;/p&gt; &#xA;&lt;h2&gt;Simple Usage&lt;/h2&gt; &#xA;&lt;p&gt;org-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+chatu: :drawio &#34;diagram.drawio&#34;&#xA;#+chatu: :plantuml &#34;diagram.puml&#34;&#xA;#+chatu: :curl &#34;http://example.org/image.svg&#34;&#xA;#+chatu: :babashka &#34;babashka.bb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;markdown-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;&amp;lt;!-- #+chatu: :drawio &#34;diagram.drawio&#34; --&amp;gt;&#xA;&amp;lt;!-- #+chatu: :plantuml &#34;diagram.puml&#34; --&amp;gt;&#xA;&amp;lt;!-- #+chatu: :curl &#34;http://example.org/image.svg&#34; --&amp;gt;&#xA;&amp;lt;!-- #+chatu: :babashka &#34;babashka.bb&#34; --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Omit the extension&lt;/h2&gt; &#xA;&lt;p&gt;org-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+chatu: :drawio &#34;diagram&#34;&#xA;#+chatu: :plantuml &#34;diagram&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;markdown-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;&amp;lt;!-- #+chatu: :drawio &#34;diagram&#34; --&amp;gt;&#xA;&amp;lt;!-- #+chatu: :plantuml &#34;diagram&#34; --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Add more properties&lt;/h2&gt; &#xA;&lt;p&gt;org-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+chatu: :drawio &#34;diagram&#34;&#xA;#+name: workflow&#xA;#+caption: chatu workflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extract specific page&lt;/h2&gt; &#xA;&lt;p&gt;org-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+chatu: :drawio &#34;diagram.drawio&#34; :page 1&#xA;#+chatu: :plantuml &#34;diagram.puml&#34; :page 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;markdown-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;&amp;lt;!-- #+chatu: :drawio &#34;diagram.drawio&#34; :page 1 --&amp;gt;&#xA;&amp;lt;!-- #+chatu: :plantuml &#34;diagram.puml&#34; :page 1 --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Even more specific&lt;/h2&gt; &#xA;&lt;p&gt;Add input-dir, output-dir and output file name&lt;/p&gt; &#xA;&lt;p&gt;org-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+chatu: :drawio &#34;diagram.drawio&#34; :page 0 :input-dir &#34;./draws&#34; :output-dir &#34;./images&#34; :output &#34;diagram.svg&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;markdown-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;&amp;lt;!-- #+chatu: :drawio &#34;diagram.drawio&#34; :page 0 :input-dir &#34;./draws&#34; :output-dir &#34;./images&#34; :output &#34;diagram.svg&#34; --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;a href=&#34;https://github.com/kimim/chatu/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=kimim/chatu&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>