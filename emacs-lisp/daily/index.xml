<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-27T01:37:54Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kwrooijen/cargo.el</title>
    <updated>2022-09-27T01:37:54Z</updated>
    <id>tag:github.com,2022-09-27:/kwrooijen/cargo.el</id>
    <link href="https://github.com/kwrooijen/cargo.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Minor Mode for Cargo, Rust&#39;s Package Manager.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cargo.el&lt;/h1&gt; &#xA;&lt;p&gt;Cargo mode for Emacs. This package gives you a set of key combinations to perform Cargo tasks within your Rust projects.&lt;/p&gt; &#xA;&lt;h2&gt;NOTICE&lt;/h2&gt; &#xA;&lt;p&gt;Currently I&#39;m not using Rust, nor will I in the (near) future. I&#39;ve lost track of all the Rust / Cargo features available and can&#39;t keep up-to-date with new ones. I&#39;ll be doing selective bug fixes and continue reviewing / merging pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This package can be installed through &lt;a href=&#34;https://melpa.org/&#34;&gt;melpa&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install cargo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add cargo-minor-mode to your rust-mode-hook&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;rust-mode-hook &#39;cargo-minor-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will now have the following key combinations at your disposal:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-e&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-bench&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-b&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-l&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-clean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-d&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-doc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-v&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-doc-open&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-n&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-new&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-i&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-init&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-run&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-x&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-run-example&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-s&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-t&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-u&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-update&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-repeat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-f&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-current-test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-o&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-current-file-tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-m&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-fmt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-k&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-check&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-S-k&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-clippy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-a&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-add&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-S-d&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-rm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-S-u&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-upgrade&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-S-a&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-audit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-S-r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-script&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-w&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-process-watch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c C-S-f&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cargo-find-dependency&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Before executing the task, Emacs will prompt you to save any modified buffers associated with the current Cargo project. Setting &lt;code&gt;compilation-ask-about-save&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; makes Emacs save modified buffers without asking.&lt;/p&gt; &#xA;&lt;p&gt;To change prefix (default &lt;kbd&gt;C-c C-c&lt;/kbd&gt;) use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt; (define-key cargo-mode-map (kbd ...) &#39;cargo-minor-mode-command-map)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Variables&lt;/h2&gt; &#xA;&lt;p&gt;Commands can be adjusted by changing their command variable. Here&#39;s a list of commands and their default value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setq cargo-process--command-bench &#34;bench&#34;)&#xA;(setq cargo-process--command-build &#34;build&#34;)&#xA;(setq cargo-process--command-clean &#34;clean&#34;)&#xA;(setq cargo-process--command-doc &#34;doc&#34;)&#xA;(setq cargo-process--command-doc-open &#34;doc --open&#34;)&#xA;(setq cargo-process--command-new &#34;new&#34;)&#xA;(setq cargo-process--command-init &#34;init&#34;)&#xA;(setq cargo-process--command-run &#34;run&#34;)&#xA;(setq cargo-process--command-run-bin &#34;run --bin&#34;)&#xA;(setq cargo-process--command-run-example &#34;run --example&#34;)&#xA;(setq cargo-process--command-search &#34;search&#34;)&#xA;(setq cargo-process--command-test &#34;test&#34;)&#xA;(setq cargo-process--command-current-test &#34;test&#34;)&#xA;(setq cargo-process--command-current-file-tests &#34;test&#34;)&#xA;(setq cargo-process--command-update &#34;update&#34;)&#xA;(setq cargo-process--command-fmt &#34;fmt&#34;)&#xA;(setq cargo-process--command-check &#34;check&#34;)&#xA;(setq cargo-process--command-clippy &#34;clippy&#34;)&#xA;(setq cargo-process--command-add &#34;add&#34;)&#xA;(setq cargo-process--command-rm &#34;rm&#34;)&#xA;(setq cargo-process--command-upgrade &#34;upgrade&#34;)&#xA;(setq cargo-process--command-audit &#34;audit -f&#34;)&#xA;(setq cargo-process--command-script &#34;script&#34;)&#xA;(setq cargo-process--command-watch &#34;watch -x build&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced usage&lt;/h3&gt; &#xA;&lt;p&gt;If you invoke the prefix argument &lt;kbd&gt;C-u&lt;/kbd&gt; before calling any of the functions, you may edit the Cargo command before it is run. This allows you to add flags like &lt;code&gt;--release&lt;/code&gt;, for example.&lt;/p&gt; &#xA;&lt;p&gt;Processes run via Cargo mode make use of &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html&#34;&gt;compilation mode&lt;/a&gt;. This mode provides features like jumping to errors or killing runaway processes. By default, in &lt;code&gt;compilation mode&lt;/code&gt;, &lt;kbd&gt;C-c C-k&lt;/kbd&gt; is bound to the command &lt;code&gt;kill-compilation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;In order to run &lt;code&gt;cargo-process-fmt&lt;/code&gt; you need to have the &lt;code&gt;rustfmt&lt;/code&gt; package installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rustup component add rustfmt-preview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run &lt;code&gt;cargo-process-check&lt;/code&gt; you need to have the &lt;code&gt;cargo-check&lt;/code&gt; package installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run &lt;code&gt;cargo-process-clippy&lt;/code&gt; you need to have the &lt;code&gt;clippy&lt;/code&gt; package installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install clippy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run &lt;code&gt;cargo-process-script&lt;/code&gt; you need to have the &lt;code&gt;cargo-script&lt;/code&gt; package installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run &lt;code&gt;cargo-process-{add,rm,upgrade}&lt;/code&gt; you need to have the &lt;code&gt;cargo-edit&lt;/code&gt; package installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-edit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For completion in &lt;code&gt;cargo-process-add&lt;/code&gt;, configure &lt;code&gt;cargo-process-favorite-crates&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to run &lt;code&gt;cargo-process-audit&lt;/code&gt; you need to have the &lt;code&gt;audit&lt;/code&gt; package installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-audit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run &lt;code&gt;cargo-process-watch&lt;/code&gt; you need to have the &lt;code&gt;watch&lt;/code&gt; package installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-watch&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>lassik/emacs-format-all-the-code</title>
    <updated>2022-09-27T01:37:54Z</updated>
    <id>tag:github.com,2022-09-27:/lassik/emacs-format-all-the-code</id>
    <link href="https://github.com/lassik/emacs-format-all-the-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Auto-format source code in many languages with one command&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;em&gt;format-all&lt;/em&gt; for Emacs&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; The package is actively maintained but due to lack of time, complex tasks are done at a slow pace. Simple tasks like adding or fixing formatter definitions are often done immediately. For faster progress, additional maintainers are welcome.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What does it do&lt;/h2&gt; &#xA;&lt;p&gt;Lets you auto-format source code in many languages using the same command for all languages, instead of learning a different Emacs package and formatting command for each language.&lt;/p&gt; &#xA;&lt;p&gt;Just do &lt;strong&gt;M-x&lt;/strong&gt; &lt;code&gt;format-all-buffer&lt;/code&gt; and it will try its best to do the right thing. To auto-format code on save, use the minor mode &lt;code&gt;format-all-mode&lt;/code&gt;. Please see the documentation for that function for instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Angular&lt;/strong&gt; (&lt;a href=&#34;https://prettier.io/&#34;&gt;&lt;em&gt;prettier&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Assembly&lt;/strong&gt; (&lt;a href=&#34;https://github.com/klauspost/asmfmt&#34;&gt;&lt;em&gt;asmfmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ATS&lt;/strong&gt; (&lt;a href=&#34;https://hackage.haskell.org/package/ats-format&#34;&gt;&lt;em&gt;atsfmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Awk&lt;/strong&gt; (&lt;a href=&#34;https://www.gnu.org/software/gawk/&#34;&gt;&lt;em&gt;gawk&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bazel Starlark&lt;/strong&gt; (&lt;a href=&#34;https://github.com/bazelbuild/buildtools/tree/master/buildifier&#34;&gt;&lt;em&gt;buildifier&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BibTeX&lt;/strong&gt; (Emacs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C/C++/Objective-C&lt;/strong&gt; (&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;&lt;em&gt;clang-format&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;http://astyle.sourceforge.net/&#34;&gt;&lt;em&gt;astyle&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C#&lt;/strong&gt; (&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;&lt;em&gt;clang-format&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;http://astyle.sourceforge.net/&#34;&gt;&lt;em&gt;astyle&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cabal&lt;/strong&gt; (&lt;a href=&#34;https://github.com/phadej/cabal-fmt&#34;&gt;&lt;em&gt;cabal-fmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clojure/ClojureScript&lt;/strong&gt; (&lt;a href=&#34;https://github.com/kkinnear/zprint&#34;&gt;&lt;em&gt;zprint&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/snoe/node-cljfmt&#34;&gt;&lt;em&gt;node-cljfmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt; (&lt;a href=&#34;https://github.com/cheshirekow/cmake_format&#34;&gt;&lt;em&gt;cmake-format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Crystal&lt;/strong&gt; (&lt;a href=&#34;http://www.motion-express.com/blog/crystal-code-formatter&#34;&gt;&lt;em&gt;crystal tool format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CSS/Less/SCSS&lt;/strong&gt; (&lt;a href=&#34;https://prettier.io/&#34;&gt;&lt;em&gt;prettier&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;&lt;em&gt;prettierd&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cuda&lt;/strong&gt; (&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;&lt;em&gt;clang-format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; (&lt;a href=&#34;https://github.com/dlang-community/dfmt&#34;&gt;&lt;em&gt;dfmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dart&lt;/strong&gt; (&lt;a href=&#34;https://github.com/dart-lang/dart_style&#34;&gt;&lt;em&gt;dartfmt&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://dart.dev/tools/dart-format&#34;&gt;&lt;em&gt;dart-format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dhall&lt;/strong&gt; (&lt;a href=&#34;https://github.com/dhall-lang/dhall-lang&#34;&gt;&lt;em&gt;dhall format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; (&lt;a href=&#34;https://github.com/jessfraz/dockfmt&#34;&gt;&lt;em&gt;dockfmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Elixir&lt;/strong&gt; (&lt;a href=&#34;https://hexdocs.pm/mix/master/Mix.Tasks.Format.html&#34;&gt;&lt;em&gt;mix format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Elm&lt;/strong&gt; (&lt;a href=&#34;https://github.com/avh4/elm-format&#34;&gt;&lt;em&gt;elm-format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Emacs Lisp&lt;/strong&gt; (Emacs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Erb&lt;/strong&gt; (&lt;a href=&#34;https://github.com/nebulab/erb-formatter&#34;&gt;&lt;em&gt;erb-format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Erlang&lt;/strong&gt; (&lt;a href=&#34;https://github.com/sile/efmt&#34;&gt;&lt;em&gt;efmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F#&lt;/strong&gt; (&lt;a href=&#34;https://github.com/fsprojects/fantomas&#34;&gt;&lt;em&gt;fantomas&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fish Shell&lt;/strong&gt; (&lt;a href=&#34;https://fishshell.com/docs/current/commands.html#fish_indent&#34;&gt;&lt;em&gt;fish_indent&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fortran Free Form&lt;/strong&gt; (&lt;a href=&#34;https://github.com/pseewald/fprettify&#34;&gt;&lt;em&gt;fprettify&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gleam&lt;/strong&gt; (&lt;a href=&#34;https://gleam.run/&#34;&gt;&lt;em&gt;gleam format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GLSL&lt;/strong&gt; (&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;&lt;em&gt;clang-format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt; (&lt;a href=&#34;https://golang.org/cmd/gofmt/&#34;&gt;&lt;em&gt;gofmt&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/goimports&#34;&gt;&lt;em&gt;goimports&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GraphQL&lt;/strong&gt; (&lt;a href=&#34;https://prettier.io/&#34;&gt;&lt;em&gt;prettier&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;&lt;em&gt;prettierd&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Haskell&lt;/strong&gt; (&lt;a href=&#34;https://github.com/lspitzner/brittany&#34;&gt;&lt;em&gt;brittany&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/fourmolu/fourmolu&#34;&gt;&lt;em&gt;fourmolu&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/commercialhaskell/hindent&#34;&gt;&lt;em&gt;hindent&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/tweag/ormolu&#34;&gt;&lt;em&gt;ormolu&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/jaspervdj/stylish-haskell&#34;&gt;&lt;em&gt;stylish-haskell&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTML/XHTML/XML&lt;/strong&gt; (&lt;a href=&#34;http://www.html-tidy.org/&#34;&gt;&lt;em&gt;tidy&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Java&lt;/strong&gt; (&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;&lt;em&gt;clang-format&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;http://astyle.sourceforge.net/&#34;&gt;&lt;em&gt;astyle&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JavaScript/JSON/JSX&lt;/strong&gt; (&lt;a href=&#34;https://prettier.io/&#34;&gt;&lt;em&gt;prettier&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://standardjs.com/&#34;&gt;&lt;em&gt;standard&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;&lt;em&gt;prettierd&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jsonnet&lt;/strong&gt; (&lt;a href=&#34;https://jsonnet.org/&#34;&gt;&lt;em&gt;jsonnetfmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kotlin&lt;/strong&gt; (&lt;a href=&#34;https://github.com/shyiko/ktlint&#34;&gt;&lt;em&gt;ktlint&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LaTeX&lt;/strong&gt; (&lt;a href=&#34;https://github.com/cmhughes/latexindent.pl&#34;&gt;&lt;em&gt;latexindent&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.gnu.org/software/auctex/&#34;&gt;&lt;em&gt;auctex&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ledger&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ledger/ledger-mode&#34;&gt;&lt;em&gt;ledger-mode&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lua&lt;/strong&gt; (&lt;a href=&#34;https://github.com/trixnz/lua-fmt&#34;&gt;&lt;em&gt;lua-fmt&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua&#34;&gt;stylua&lt;/a&gt;, &lt;a href=&#34;https://github.com/prettier/plugin-lua&#34;&gt;&lt;em&gt;prettier plugin&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; (&lt;a href=&#34;https://prettier.io/&#34;&gt;&lt;em&gt;prettier&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;&lt;em&gt;prettierd&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nginx&lt;/strong&gt; (&lt;a href=&#34;https://github.com/slomkowski/nginx-config-formatter&#34;&gt;&lt;em&gt;nginxfmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix&lt;/strong&gt; (&lt;a href=&#34;https://github.com/nix-community/nixpkgs-fmt&#34;&gt;&lt;em&gt;nixpkgs-fmt&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/serokell/nixfmt&#34;&gt;&lt;em&gt;nixfmt&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/kamadorueda/alejandra&#34;&gt;&lt;em&gt;alejandra&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OCaml&lt;/strong&gt; (&lt;a href=&#34;https://opam.ocaml.org/packages/ocp-indent/&#34;&gt;&lt;em&gt;ocp-indent&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Perl&lt;/strong&gt; (&lt;a href=&#34;http://perltidy.sourceforge.net/&#34;&gt;&lt;em&gt;perltidy&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PHP&lt;/strong&gt; (&lt;a href=&#34;https://github.com/prettier/plugin-php&#34;&gt;&lt;em&gt;prettier plugin&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Protocol Buffers&lt;/strong&gt; (&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;&lt;em&gt;clang-format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PureScript&lt;/strong&gt; (&lt;a href=&#34;https://gitlab.com/joneshf/purty&#34;&gt;&lt;em&gt;purty&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/natefaubion/purescript-tidy&#34;&gt;&lt;em&gt;purescript-tidy&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ambv/black&#34;&gt;&lt;em&gt;black&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/yapf&#34;&gt;&lt;em&gt;yapf&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;&lt;em&gt;isort&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;R&lt;/strong&gt; (&lt;a href=&#34;https://github.com/r-lib/styler&#34;&gt;&lt;em&gt;styler&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Racket&lt;/strong&gt; (&lt;a href=&#34;https://docs.racket-lang.org/fmt/&#34;&gt;&lt;em&gt;raco fmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reason&lt;/strong&gt; (&lt;a href=&#34;https://github.com/glennsl/bs-refmt&#34;&gt;&lt;em&gt;bsrefmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ReScript&lt;/strong&gt; (&lt;a href=&#34;https://www.npmjs.com/package/rescript&#34;&gt;&lt;em&gt;rescript format&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ruby&lt;/strong&gt; (&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;&lt;em&gt;rubocop&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/ruby-formatter/rufo&#34;&gt;&lt;em&gt;rufo&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;&lt;em&gt;standardrb&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt; (&lt;a href=&#34;https://github.com/rust-lang-nursery/rustfmt&#34;&gt;&lt;em&gt;rustfmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scala&lt;/strong&gt; (&lt;a href=&#34;https://github.com/scalameta/scalafmt&#34;&gt;&lt;em&gt;scalafmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shell script&lt;/strong&gt; (&lt;a href=&#34;https://github.com/lovesegfault/beautysh&#34;&gt;&lt;em&gt;beautysh&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;&lt;em&gt;shfmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Snakemake&lt;/strong&gt; (&lt;a href=&#34;https://github.com/snakemake/snakefmt&#34;&gt;&lt;em&gt;snakefmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Solidity&lt;/strong&gt; (&lt;a href=&#34;https://github.com/prettier-solidity/prettier-plugin-solidity&#34;&gt;&lt;em&gt;prettier plugin&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQL&lt;/strong&gt; (&lt;a href=&#34;https://github.com/darold/pgFormatter&#34;&gt;&lt;em&gt;pgformatter&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/sqlparse/&#34;&gt;&lt;em&gt;sqlformat&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Svelte&lt;/strong&gt; (&lt;a href=&#34;https://github.com/sveltejs/prettier-plugin-svelte&#34;&gt;&lt;em&gt;prettier plugin&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swift&lt;/strong&gt; (&lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;&lt;em&gt;swiftformat&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Terraform&lt;/strong&gt; (&lt;a href=&#34;https://www.terraform.io/docs/commands/fmt.html&#34;&gt;&lt;em&gt;terraform fmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TOML&lt;/strong&gt; (&lt;a href=&#34;https://github.com/bd82/toml-tools/tree/master/packages/prettier-plugin-toml&#34;&gt;&lt;em&gt;prettier plugin&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://taplo.tamasfe.dev/cli/usage/formatting.html&#34;&gt;&lt;em&gt;taplo fmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TypeScript/TSX&lt;/strong&gt; (&lt;a href=&#34;https://prettier.io/&#34;&gt;&lt;em&gt;prettier&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://standardjs.com/&#34;&gt;&lt;em&gt;ts-standard&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;&lt;em&gt;prettierd&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;V&lt;/strong&gt; (&lt;a href=&#34;https://github.com/vlang/v&#34;&gt;&lt;em&gt;v fmt&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vue&lt;/strong&gt; (&lt;a href=&#34;https://prettier.io/&#34;&gt;&lt;em&gt;prettier&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;&lt;em&gt;prettierd&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Verilog&lt;/strong&gt; (&lt;a href=&#34;https://github.com/thomasrussellmurphy/istyle-verilog-formatter&#34;&gt;&lt;em&gt;iStyle&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;YAML&lt;/strong&gt; (&lt;a href=&#34;https://prettier.io/&#34;&gt;&lt;em&gt;prettier&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;&lt;em&gt;prettierd&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zig&lt;/strong&gt; (&lt;a href=&#34;https://ziglang.org/&#34;&gt;&lt;em&gt;zig&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://melpa.org/#/format-all&#34;&gt;MELPA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will need to install external programs to do the formatting. If &lt;code&gt;format-all-buffer&lt;/code&gt; can&#39;t find the right program, it will try to tell you how to install it.&lt;/p&gt; &#xA;&lt;p&gt;If you have installed a formatter but Emacs cannot find it, Emacs may be using a &lt;code&gt;PATH&lt;/code&gt; different from your shell. The path searched by Emacs is in the &lt;code&gt;exec-path&lt;/code&gt; variable. You can easily make it match your shell&#39;s &lt;code&gt;PATH&lt;/code&gt; using the &lt;a href=&#34;http://melpa.org/#/exec-path-from-shell&#34;&gt;exec-path-from-shell&lt;/a&gt; package from MELPA.&lt;/p&gt; &#xA;&lt;h2&gt;How to customize&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x customize-group format-all&lt;/code&gt; has a few basic settings.&lt;/p&gt; &#xA;&lt;p&gt;However, the main thing you probably want to set is &lt;code&gt;format-all-formatters&lt;/code&gt;. That variable is buffer-local, and can be made project-local by setting it in a &lt;code&gt;.dir-locals.el&lt;/code&gt; file in a project&#39;s directory. That file can be committed to version control to share it with the whole project.&lt;/p&gt; &#xA;&lt;p&gt;To enable format on save for most programming language buffers: &lt;code&gt;(add-hook &#39;prog-mode-hook &#39;format-all-mode)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To control displaying the formatting errors buffer when formatting fails or has warnings, customize the variable &lt;code&gt;format-all-show-errors&lt;/code&gt;. Set it to one of these - &lt;code&gt;&#39;always&lt;/code&gt; (shows errors buffer regardless),&lt;code&gt;&#39;warnings&lt;/code&gt; (shows errors buffer for both errors and warnings), &lt;code&gt;&#39;errors&lt;/code&gt; (only show errors buffer when there are errors) or &lt;code&gt;&#39;never&lt;/code&gt; (never show errors buffer).&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;code&gt;format-all-ensure-formatter&lt;/code&gt; will ensure that a default formatter is selected in case you don&#39;t have one set; you can customize the default formatter for each language. To ensure a formatter is set whenever you enable &lt;code&gt;format-all-mode&lt;/code&gt;, you can use: &lt;code&gt;(add-hook &#39;format-all-mode-hook &#39;format-all-ensure-formatter)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, many of the external formatters support configuration files in the source code directory to control their formatting. Please see the documentation for each formatter.&lt;/p&gt; &#xA;&lt;h2&gt;How to add new languages&lt;/h2&gt; &#xA;&lt;p&gt;New external formatters can be added easily if they can read code from standard input and format it to standard output. Feel free to submit a pull request or ask for help in &lt;a href=&#34;https://github.com/lassik/emacs-format-all-the-code/issues&#34;&gt;GitHub issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to report bugs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lassik/emacs-format-all-the-code/issues&#34;&gt;GitHub issues&lt;/a&gt; are preferred. Email is also ok.&lt;/p&gt; &#xA;&lt;p&gt;Feature requests are welcome. If you are interested in doing anything beyond adding new formatters in the current framework, please discuss in issues before writing code.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://atom.io/packages/atom-beautify#beautifiers&#34;&gt;atom-beautify&lt;/a&gt;&lt;/strong&gt; sports a very impressive set of formatters. We should aspire to that level of coverage for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Unibeautify/unibeautify&#34;&gt;Unibeautify&lt;/a&gt;&lt;/strong&gt; is a project to provide one shell command to run all beautifiers. &lt;em&gt;atom-beautify&lt;/em&gt; will be rewritten to be based on it. Perhaps we should be too, once it stabilizes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/evil-anzu</title>
    <updated>2022-09-27T01:37:54Z</updated>
    <id>tag:github.com,2022-09-27:/emacsorphanage/evil-anzu</id>
    <link href="https://github.com/emacsorphanage/evil-anzu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;anzu for Evil&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;evil-anzu &lt;a href=&#34;https://melpa.org/#/evil-anzu&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/evil-anzu-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/evil-anzu&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/evil-anzu-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/syohex/emacs-anzu&#34;&gt;anzu&lt;/a&gt; for &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screencast&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/evil-anzu/master/image/evil-anzu.gif&#34; alt=&#34;Screencast of evil-anzu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install evil-anzu.el from &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt; with package.el.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;evil-anzu.el&lt;/code&gt; only loading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Emacs 24.4 or higher&#xA;(with-eval-after-load &#39;evil&#xA;  (require &#39;evil-anzu))&#xA;&#xA;;; Emacs &amp;lt;= 24.3&#xA;(eval-after-load &#39;evil&#xA;  &#39;(progn&#xA;     (require &#39;evil-anzu)))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>