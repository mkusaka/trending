<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-20T01:29:27Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>szermatt/mistty</title>
    <updated>2023-09-20T01:29:27Z</updated>
    <id>tag:github.com,2023-09-20:/szermatt/mistty</id>
    <link href="https://github.com/szermatt/mistty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shell/Comint alternative with a fully functional terminal for Emacs 29.1 and later.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MisTTY, a shell/comint alternative with a fully functional terminal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/szermatt/mistty/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/szermatt/mistty/actions/workflows/CI.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mistty.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/mistty/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/mistty&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/mistty-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MisTTY runs a shell interactively under Emacs 29.1 and later, just like &lt;code&gt;M-x shell&lt;/code&gt; does.&lt;/p&gt; &#xA;&lt;p&gt;In a MisTTY buffer, just like in a normal shell buffer, the usual native Emacs movement and editing work. What &lt;em&gt;also&lt;/em&gt; work is everything that you normally only have in a terminal, such as TAB-completion and native shell history.&lt;/p&gt; &#xA;&lt;p&gt;MisTTY works well with Bash and ZSH, but it is especially well suited to running &lt;a href=&#34;https://fishshell.com&#34;&gt;Fish&lt;/a&gt;: you get autosuggestions, completion in full colors. Here&#39;s what the end result might look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/szermatt/mistty/raw/master/screengrab.gif?raw=true&#34; alt=&#34;screen grab&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;The following is just a quick introduction. Read the full documentation at &lt;a href=&#34;https://mistty.readthedocs.io/en/latest/&#34;&gt;https://mistty.readthedocs.io/en/latest/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can install MisTTY:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;from &lt;a href=&#34;https://melpa.org/#/getting-started&#34;&gt;MELPA&lt;/a&gt;, by typing &lt;code&gt;M-x package-install mistty&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;from source, by executing &lt;code&gt;(package-vc-install &#34;https://github.com/szermatt/mistty&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;USAGE&lt;/h2&gt; &#xA;&lt;p&gt;Type &lt;code&gt;M-x mistty&lt;/code&gt; to launch a new shell buffer in MisTTY mode, then use it as you would comint.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll quickly notice some differences. For example TAB completion working just like in a terminal instead of relying of Emacs completion.&lt;/p&gt; &#xA;&lt;p&gt;The purple line on the left indicates the portion of the buffer that&#39;s a terminal. What you type in there gets sent to the program, usually a shell, and translated by that program. The rest of the buffer is normal, editable, text.&lt;/p&gt; &#xA;&lt;p&gt;Commands that takes the whole screen such as &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;vi&lt;/code&gt; take you into terminal mode for the duration of that command. You can still access previous commands in the &#34;scrollback&#34; MisTTY buffer by typing &lt;code&gt;C-c C-j&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you ever get into a situation where a command needs you to press keys normally sent to Emacs, such as the arrow keys, press &lt;code&gt;C-c C-q&lt;/code&gt;. It&#39;ll send all key strokes directly to the terminal until you exit the mode by pressing &lt;code&gt;C-g&lt;/code&gt;. To send a single key to the terminal you can also press &lt;code&gt;C-q &amp;lt;key&amp;gt;&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;You will very likely want to send some keys you use often directly to the terminal. This is done by binding keys to &lt;code&gt;mistty-send-key&lt;/code&gt; in &lt;code&gt;mistty-prompt-map&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package mistty&#xA;  :bind ((&#34;C-c s&#34; . mistty)&#xA;  &#xA;         ;; bind here the shortcuts you&#39;d like the &#xA;         ;; shell to handle instead of Emacs.&#xA;         :map mistty-prompt-map&#xA;&#xA;         ;; fish: directory history&#xA;         (&#34;M-&amp;lt;up&amp;gt;&#34; . mistty-send-key)&#xA;         (&#34;M-&amp;lt;down&amp;gt;&#34; . mistty-send-key)&#xA;         (&#34;M-&amp;lt;left&amp;gt;&#34; . mistty-send-key)&#xA;         (&#34;M-&amp;lt;right&amp;gt;&#34; . mistty-send-key)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://mistty.readthedocs.io/en/latest/&#34;&gt;the documentation&lt;/a&gt; for more details on configuring MisTTY &lt;a href=&#34;https://mistty.readthedocs.io/en/latest/shells.html&#34;&gt;for different shells&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;COMPATIBILITY&lt;/h2&gt; &#xA;&lt;p&gt;MisTTY requires Emacs 29.1 or later.&lt;/p&gt; &#xA;&lt;h2&gt;CONTRIBUTING&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://mistty.readthedocs.io/en/latest/contrib.html&#34;&gt;Contributing&lt;/a&gt; section of the documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gilbertw1/better-jumper</title>
    <updated>2023-09-20T01:29:27Z</updated>
    <id>tag:github.com,2023-09-20:/gilbertw1/better-jumper</id>
    <link href="https://github.com/gilbertw1/better-jumper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A configurable jump list implementation for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;better-jumper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.nongnu.org/nongnu/better-jumper.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/better-jumper.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A configurable jump list implementation for Emacs that can be used to easily jump back to previous locations.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Better-jumper is available on &lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; or MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install better-jumper&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;better-jumper)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;better-jumper&lt;/code&gt; comes with a global mode: &lt;code&gt;better-jumper-mode&lt;/code&gt; and a local mode: &lt;code&gt;better-jumper-local-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can either a) enable globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(better-jumper-mode +1)&#xA;&#xA;;; and disable in specific modes&#xA;(push &#39;python-mode better-jumper-disabled-modes)&#xA;&#xA;;; or disable it manually&#xA;(add-hook &#39;python-mode-hook #&#39;turn-off-better-jumper-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or b) enable locally, where you need it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;python-mode-hook #&#39;turn-on-better-jumper-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Once &lt;code&gt;better-jumper&lt;/code&gt; has been loaded it is ready to start tracking jump history. Anytime &lt;code&gt;better-jumper-set-jump&lt;/code&gt; is invoked the current location is added to either the window or buffer specific jump list (depending on the &lt;code&gt;better-jumper-context&lt;/code&gt; setting). At any time the jump backward/forward functions can be used to navigate through the jump history.&lt;/p&gt; &#xA;&lt;p&gt;If you are an &lt;code&gt;evil&lt;/code&gt; user then &lt;code&gt;better-jumper&lt;/code&gt; can piggy back off of the built in jumplist implementation to track when jumps occur. The setting &lt;code&gt;better-jumper-use-evil-jump-advice&lt;/code&gt; dictates this behavior and defaults to &lt;code&gt;t&lt;/code&gt;. Note that &lt;code&gt;better-jumper&lt;/code&gt; does not interact with or alter evil&#39;s jump list in any way.&lt;/p&gt; &#xA;&lt;h2&gt;Summary of interactive commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;better-jumper-set-jump&lt;/td&gt; &#xA;   &lt;td&gt;Add a new jump location to jump list using current buffer/position&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;better-jumper-jump-backward&lt;/td&gt; &#xA;   &lt;td&gt;Jump to back to previous location in jump list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;better-jumper-jump-forward&lt;/td&gt; &#xA;   &lt;td&gt;Jump forward to next location in jump list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;better-jumper-get-jumps&lt;/td&gt; &#xA;   &lt;td&gt;Get jump state for window or buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;better-jumper-set-jumps&lt;/td&gt; &#xA;   &lt;td&gt;Set jump state for window or buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Example keybinding&lt;/h2&gt; &#xA;&lt;p&gt;Configure the standard jump list navigation keybindings for evil/vim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(with-eval-after-load &#39;evil-maps&#xA;  (define-key evil-motion-state-map (kbd &#34;C-o&#34;) &#39;better-jumper-jump-backward)&#xA;  (define-key evil-motion-state-map (kbd &#34;&amp;lt;C-i&amp;gt;&#34;) &#39;better-jumper-jump-forward))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration Options&lt;/h1&gt; &#xA;&lt;h4&gt;Jump Context (&lt;code&gt;better-jumper-context&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This setting specifies the context in which jump lists are tracked. This can either be set to &lt;code&gt;&#39;buffer&lt;/code&gt; or &lt;code&gt;&#39;window&lt;/code&gt;. If the value is &lt;code&gt;&#39;buffer&lt;/code&gt; then a jump list is maintained for each individual buffer. Conversly, if the value is &lt;code&gt;&#39;window&lt;/code&gt; then the jump list is maintained per window and will operate across buffers in that window.&lt;/p&gt; &#xA;&lt;p&gt;While in the &lt;code&gt;&#39;window&lt;/code&gt; context, jump lists are stored as persistent window parameters and can be saved and restored along with the window configuration using something like &lt;code&gt;desktop&lt;/code&gt; or &lt;code&gt;persp-mode&lt;/code&gt;. This is the default context.&lt;/p&gt; &#xA;&lt;p&gt;While in the &lt;code&gt;&#39;buffer&lt;/code&gt; context, jump lists are maintained using buffer-local variables and can optionally by saved using &lt;code&gt;savehist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;New Window Behavior (&lt;code&gt;better-jumper-new-window-behavior&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This setting specifies the behavior that will take place when a new window is created AND the current context is set to &lt;code&gt;&#39;window&lt;/code&gt;. This can be either set to &lt;code&gt;&#39;copy&lt;/code&gt; or &lt;code&gt;&#39;empty&lt;/code&gt;. If the value is &lt;code&gt;&#39;copy&lt;/code&gt; then the last selected window&#39;s jump list will be copied to the new window. If the value is &lt;code&gt;&#39;empty&lt;/code&gt; then the new window&#39;s jump list will start empty.&lt;/p&gt; &#xA;&lt;h4&gt;Add Jump Behavior (&lt;code&gt;better-jumper-add-jump-behavior&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This setting specifies how the jump list is affected when a new jump is added. If the value is set to &lt;code&gt;&#39;append&lt;/code&gt; then new items are always added to the end of the jump list regardless of the current position. If the value is set to &lt;code&gt;replace&lt;/code&gt;, then if the any jumps newer than the current position in the jump list will be replaced. I.e. If a user jumps back three times then adds a new jump, those three jumps will be replaced by the new jump in the list.&lt;/p&gt; &#xA;&lt;h4&gt;Max Length (&lt;code&gt;better-jumper-max-length&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This is a numeric value that dictate the maximum length that a jump list can grow to. If the length of a jump list exceeds this size then the oldest items in the list will be dropped.&lt;/p&gt; &#xA;&lt;h4&gt;Use Evil Jump Advice (&lt;code&gt;better-jumper-use-evil-jump-advice&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;If non-nil better jumper will attach a piece of advice to the &lt;code&gt;evil-jump&lt;/code&gt; function that will ensure that anytime a jump is added using &lt;code&gt;evil-jump&lt;/code&gt; a corresponding jump will be added using &lt;code&gt;better-jumper&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;better-jumper-use-savehist (&lt;code&gt;better-jumper-use-savehist&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;If non-nil better jumper will use savehist to save jump history. This is currently only implemented for the &lt;code&gt;&#39;buffer&lt;/code&gt; context. Persistent window parameters are used to save and restore jump history for windows.&lt;/p&gt; &#xA;&lt;h4&gt;better-jumper-buffer-savehist-size (&lt;code&gt;better-jumper-buffer-savehist-size&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This number dictates how many of the most recent buffers should have their jump state saved to the savehist file when savehist is enabled the the context is set to &lt;code&gt;&#39;buffer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Hooks&lt;/h1&gt; &#xA;&lt;h4&gt;Pre-jump Hook (&lt;code&gt;better-jumper-pre-jump-hook&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;A hook that is invoked before a jump occurs.&lt;/p&gt; &#xA;&lt;h4&gt;Post-jump Hook (&lt;code&gt;better-jumper-post-jump-hook&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;A hook that is invoked after a jump occurs.&lt;/p&gt; &#xA;&lt;h1&gt;Comparison with &lt;code&gt;evil-jump&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This package was heavily inspired by &lt;code&gt;evil-jump&lt;/code&gt; and initially was planned as a modification of or pull request to &lt;code&gt;evil&lt;/code&gt;. It was primarily born out of the desire to isolate jumps across &lt;code&gt;persp-mode&lt;/code&gt; perspectives, however the changes proved to be to large to be a simple modification. Additionally, this package provides more customization options as well as a few other core improvements.&lt;/p&gt; &#xA;&lt;p&gt;A few advantages of &lt;code&gt;better-jumper&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Uses window persistent parameters to store jump lists. As a result &lt;code&gt;better-jumper&lt;/code&gt; properly works with &lt;code&gt;persp-mode&lt;/code&gt; and any other feature that manages window configurations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;True buffer specific jump lists. When instructed to not cross buffer boundaries &lt;code&gt;evil-jumper&lt;/code&gt; still tracks jumps per window only limits the jumps available to ones located in the current buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configurable new window behavior. &lt;code&gt;evil-jumper&lt;/code&gt; ALWAYS copies the jump list from the previously selected window to any newly created window.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Caveats&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Jump locations are stored as &lt;code&gt;marker&lt;/code&gt;s so they will maintain a more accurate location in the buffer. However, due to the fact that markers can&#39;t be serialized they are down converted to simple buffer positions when saved either via window configuration or savehist.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Currently &lt;code&gt;savehist&lt;/code&gt; support is only limited to the &lt;code&gt;&#39;buffer&lt;/code&gt; context. When running in the &lt;code&gt;&#39;window&lt;/code&gt; context, the jump list is stored as a persistent window parameter and is intended to be saved using alongside the window configuration using somethinig like &lt;code&gt;desktop&lt;/code&gt; or &lt;code&gt;persp-mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>