<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-11T01:39:48Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Yevgnen/ivy-rich</title>
    <updated>2022-07-11T01:39:48Z</updated>
    <id>tag:github.com,2022-07-11:/Yevgnen/ivy-rich</id>
    <link href="https://github.com/Yevgnen/ivy-rich" rel="alternate"></link>
    <summary type="html">&lt;p&gt;More friendly interface for ivy.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: README #+date: &amp;lt;2020-03-22 Sun&amp;gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More friendly interface for ivy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package comes with rich transformers for commands from &lt;del&gt;ivy&lt;/del&gt; and &lt;del&gt;counsel&lt;/del&gt;. It should be easy enough to define your own transformers too.&lt;/p&gt; &#xA;&lt;p&gt;Screenshots are available [[file:screenshots.org][here]].&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;M-x package-install RET ivy-rich RET&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Basic Usages&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;ivy-rich) (ivy-rich-mode 1) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to set also&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setcdr (assq t ivy-format-functions-alist) #&#39;ivy-format-function-line) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Customization :PROPERTIES: :CUSTOM_ID: h:6A171A3A-50DF-42F6-B19B-321B160F198E :END:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A transformer is just a string processing function with some format properties.&lt;/em&gt; The transformer format for each &lt;del&gt;ivy&lt;/del&gt; command is defined in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html#Property-Lists][plist]] &lt;del&gt;ivy-rich-display-transformers-list&lt;/del&gt;. Each plist key is a &lt;del&gt;ivy&lt;/del&gt; command and plist value is its transformer format definitions or a pre-defined transformer. Refer to the documentation of &lt;del&gt;ivy-rich-display-transformers-list&lt;/del&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;You can also define your own transformers, see [[id:20201229-how-i-can-add-icons-for-ivy-switch-buffer][this]] for an example.&lt;/p&gt; &#xA;&lt;p&gt;** Convenience functions&lt;/p&gt; &#xA;&lt;p&gt;Convenience functions exist for customizing column properties without rewriting the entire transformer definition&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;ivy-rich-modify-column&lt;/del&gt; :: Update properties of existed transformer column.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;ivy-rich-modify-columns&lt;/del&gt; :: Like &lt;del&gt;ivy-rich-modify-column&lt;/del&gt;, but for multiple columns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;ivy-rich-set-columns&lt;/del&gt; :: Set/Replace transformer columns.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below are two examples that use the default transformers, but with user-defined customizations.&lt;/p&gt; &#xA;&lt;p&gt;This example customizes the &lt;del&gt;:width&lt;/del&gt; and &lt;del&gt;:face&lt;/del&gt; properties of the major mode column in the &lt;del&gt;ivy-switch-buffer&lt;/del&gt; transformer:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (ivy-rich-modify-column &#39;ivy-switch-buffer &#39;ivy-rich-switch-buffer-major-mode &#39;(:width 20 :face error)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This example customizes properties of two columns of the &lt;del&gt;ivy-switch-buffer&lt;/del&gt; transformer:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (ivy-rich-modify-columns &#39;ivy-switch-buffer &#39;((ivy-rich-switch-buffer-size (:align right)) (ivy-rich-switch-buffer-major-mode (:width 20 :face error)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Refer to the docstring for more details.&lt;/p&gt; &#xA;&lt;p&gt;** Additional settings for &lt;del&gt;ivy-switch-buffer&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;To abbreviate paths using &lt;del&gt;abbreviate-file-name&lt;/del&gt; (e.g. replace &#34;/home/username&#34; with &#34;~&#34;)&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq ivy-rich-path-style &#39;abbrev) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To always show absolute path, set it to &lt;del&gt;full&lt;/del&gt; or &lt;del&gt;absolute&lt;/del&gt;. Any other value will show the file path relative to the project root or =default-Directory=.&lt;/p&gt; &#xA;&lt;p&gt;Note that this may not affect remote files. There are two variables &lt;del&gt;ivy-rich-parse-remote-buffer&lt;/del&gt; and &lt;del&gt;ivy-rich-parse-remote-file-path&lt;/del&gt; controls how remote buffers are processed, please refer to the docstring of them for more details if you have trouble using this function under &lt;del&gt;tramp&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Project Performance&lt;/p&gt; &#xA;&lt;p&gt;When having many open buffers, calling and navigating &lt;del&gt;ivy-switch-buffers&lt;/del&gt; might become slow when you have project-related columns. If that&#39;s the case, you can enable &lt;del&gt;ivy-rich-project-root-cache-mode&lt;/del&gt;, to cache each buffers project. The project for a buffer is cached until the buffer is killed, &lt;del&gt;ivy-rich-project-root-cache-mode&lt;/del&gt; is disabled or &lt;del&gt;ivy-rich-clear-project-root-cache&lt;/del&gt; is called.&lt;/p&gt; &#xA;&lt;p&gt;** Notes&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you modify &lt;del&gt;ivy-rich-display-transformers-list&lt;/del&gt;, you may need to disable and re-enable &lt;del&gt;ivy-rich-mode&lt;/del&gt; again to make the changes take effect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you define transformers for commands comes from neither &lt;del&gt;ivy&lt;/del&gt; nor &lt;del&gt;counsel&lt;/del&gt;, e.g. &lt;del&gt;counsel-projectile-*&lt;/del&gt;, it currently may not take effect since if you enable &lt;del&gt;ivy-rich-mode&lt;/del&gt; before loading &lt;del&gt;counsel-projectile&lt;/del&gt;, the transformer setting is overwritten by loading the package. Try to load all these packages before loading &lt;del&gt;ivy-rich&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Disabling the minor mode &lt;del&gt;ivy-rich-mode&lt;/del&gt; will restore the transformers to what they were before, but &lt;em&gt;not&lt;/em&gt; necessarily to the &#39;built-in default&#39; one. For example, the default transformer for &lt;del&gt;ivy-switch-buffer&lt;/del&gt; is &lt;del&gt;ivy-switch-buffer-transformer&lt;/del&gt; from the &lt;del&gt;ivy&lt;/del&gt; package. But if you set the transformer to &lt;del&gt;some-function&lt;/del&gt; before enabling &lt;del&gt;ivy-rich-mode&lt;/del&gt;, disabling the minor mode will restore it to &lt;del&gt;some-function&lt;/del&gt; other than &lt;del&gt;ivy-switch-buffer-transformer&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Important Changes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since the version 0.1.0 of &lt;del&gt;ivy-rich&lt;/del&gt;, the transformer format can be customized. Variables from older version like &lt;del&gt;ivy-rich-switch-buffer-mode-max-length&lt;/del&gt; or &lt;del&gt;ivy-rich-switch-buffer-project-max-length&lt;/del&gt; has been deprecated since they are now packed into &lt;del&gt;ivy-rich-display-transformers-list&lt;/del&gt; as stated in the [[#h:6A171A3A-50DF-42F6-B19B-321B160F198E][customization section]].&lt;/p&gt; &#xA;&lt;p&gt;Supports for virtual buffers and shorten file paths in &lt;del&gt;ivy-switch-buffer&lt;/del&gt; are temporarily Removed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAQ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Can I search buffers by &lt;del&gt;major-mode&lt;/del&gt;, &lt;del&gt;project&lt;/del&gt; in &lt;del&gt;ivy-switch-buffer&lt;/del&gt;?&lt;/p&gt; &#xA;&lt;p&gt;No, as far as I know, you can not right now. &lt;del&gt;ivy-rich&lt;/del&gt; provides just transformers to display the original &lt;del&gt;ivy&lt;/del&gt; candidates in a different way. It does not modify the original candidates. At least for now I have no idea how to add feature to search in the transformer columns. It probably requires some change in &lt;del&gt;ivy&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So you can not search the description of &lt;del&gt;counsel-describe-function&lt;/del&gt; neither.&lt;/p&gt; &#xA;&lt;p&gt;** How I can add icons for &lt;del&gt;ivy-switch-buffer&lt;/del&gt;? :PROPERTIES: :ID: 20201229-how-i-can-add-icons-for-ivy-switch-buffer :END:&lt;/p&gt; &#xA;&lt;p&gt;The package [[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]] provides functionality to use icon fonts easily in emacs. For example, you can define a transformer&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (defun ivy-rich-switch-buffer-icon (candidate) (with-current-buffer (get-buffer candidate) (let ((icon (all-the-icons-icon-for-mode major-mode))) (if (symbolp icon) (all-the-icons-icon-for-mode &#39;fundamental-mode) icon)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;and add it to the plist value of &lt;del&gt;ivy-switch-buffer&lt;/del&gt; in &lt;del&gt;ivy-rich-display-transformers-list&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq ivy-rich-display-transformers-list &#39;(ivy-switch-buffer (:columns ((ivy-rich-switch-buffer-icon (:width 2)) (ivy-rich-candidate (:width 30)) (ivy-rich-switch-buffer-size (:width 7)) (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)) (ivy-rich-switch-buffer-major-mode (:width 12 :face warning)) (ivy-rich-switch-buffer-project (:width 15 :face success)) (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3)))))) :predicate (lambda (cand) (get-buffer cand))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See also [[https://github.com/seagle0128/all-the-icons-ivy-rich][all-the-icons-ivy-rich]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Related Packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/casouri/ivy-filthy-rich][ivy-filthy-rich.el]] by @casouri&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/asok/all-the-icons-ivy][all-the-icons-ivy]] by @asok&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/seagle0128/all-the-icons-ivy-rich][all-the-icons-ivy-rich]] by @seagle0128&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;fill-column: 72&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>wwwjfy/emacs-fish</title>
    <updated>2022-07-11T01:39:48Z</updated>
    <id>tag:github.com,2022-07-11:/wwwjfy/emacs-fish</id>
    <link href="https://github.com/wwwjfy/emacs-fish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;fish-mode for emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Emacs major mode for fish shell scripts.&lt;/p&gt; &#xA;&lt;p&gt;Check fish-mode.el for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/fish-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/fish-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/fish-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/fish-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available on &lt;a href=&#34;http://melpa.org/#/fish-mode&#34;&gt;MELPA&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install fish-mode&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/terraform-mode</title>
    <updated>2022-07-11T01:39:48Z</updated>
    <id>tag:github.com,2022-07-11:/emacsorphanage/terraform-mode</id>
    <link href="https://github.com/emacsorphanage/terraform-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major mode of Terraform configuration file&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;terraform-mode.el &lt;img src=&#34;https://github.com/emacsorphanage/terraform-mode/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;a href=&#34;https://melpa.org/#/terraform-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/terraform-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/terraform-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/terraform-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Major mode of &lt;a href=&#34;http://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; configuration file&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/terraform-mode/master/image/terraform-mode.png&#34; alt=&#34;terraform-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;imenu(&lt;code&gt;helm-imenu&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/terraform-mode/master/image/terraform-mode-imenu.png&#34; alt=&#34;terraform-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;terraform-mode.el&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; by &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlighting&lt;/li&gt; &#xA; &lt;li&gt;Indentation&lt;/li&gt; &#xA; &lt;li&gt;imenu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize Variables&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;code&gt;terraform-indent-level&lt;/code&gt;(Default: &lt;code&gt;2&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Indentation size. You need to call &lt;code&gt;revert-buffer&lt;/code&gt; if you change this value outer of hook such as &lt;code&gt;eval-expression&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(terraform-indent-level 4))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/syohex/emacs-hcl-mode&#34;&gt;hcl-mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This major-mode inherits from hcl-mode. Most of syntax features, like highlighting, indentation are implemented in hcl-mode.&lt;/p&gt;</summary>
  </entry>
</feed>