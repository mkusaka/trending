<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-29T01:33:50Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Wilfred/pyimport</title>
    <updated>2023-05-29T01:33:50Z</updated>
    <id>tag:github.com,2023-05-29:/Wilfred/pyimport</id>
    <link href="https://github.com/Wilfred/pyimport" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manage Python imports from Emacs!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pyimport&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Manage Python imports from Emacs!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Wilfred/pyimport&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Wilfred/pyimport.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/Wilfred/pyimport?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/Wilfred/pyimport/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/pyimport&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/pyimport-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Installation: install from MELPA, or add pyimport.el to your &lt;code&gt;load-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Unused Imports&lt;/h2&gt; &#xA;&lt;p&gt;Requires pyflakes to be installed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/pyimport/master/remove_unused.gif&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;M-x pyimport-remove-unused&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This requires &lt;code&gt;pyflakes&lt;/code&gt; to be on &lt;code&gt;PATH&lt;/code&gt;. Alternatively, set &lt;code&gt;pyimport-pyflakes-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Insert Missing Imports&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/pyimport/master/insert_missing.gif&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Place point on the missing variable, then run &lt;code&gt;M-x pyimport-insert-missing&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This assumes that you have another Python buffer that contains an example of importing the variable.&lt;/p&gt; &#xA;&lt;p&gt;I like to bind this to a key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(define-key python-mode-map (kbd &#34;C-c C-i&#34;) #&#39;pyimport-insert-missing)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>larstvei/ox-gfm</title>
    <updated>2023-05-29T01:33:50Z</updated>
    <id>tag:github.com,2023-05-29:/larstvei/ox-gfm</id>
    <link href="https://github.com/larstvei/ox-gfm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Github Flavored Markdown Back-End for Org Export Engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/ox-gfm&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/ox-gfm-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Github Flavored Markdown exporter for Org Mode&lt;/h1&gt; &#xA;&lt;p&gt;This is a small exporter based on the Markdown exporter already existing in Org mode. It should support the features &lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;listed here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;ox-gfm&lt;/code&gt; using elpa. It&#39;s available on &lt;a href=&#34;http://melpa.org/#/ox-gfm&#34;&gt;melpa&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt; M-x package-install ox-gfm &lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This package adds an Org mode export backend for GitHub Flavored Markdown. You can read more about &lt;a href=&#34;http://orgmode.org/manual/Exporting.html&#34;&gt;Org mode exporting here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exporting to Github Flavored Markdown is available through Org mode&#39;s &lt;a href=&#34;http://orgmode.org/manual/The-export-dispatcher.html#The-export-dispatcher&#34;&gt;export dispatcher&lt;/a&gt; once &lt;code&gt;ox-gfm&lt;/code&gt; is loaded. Alternatively, exporting can be triggered by calling the (autoloaded) function &lt;code&gt;M-x org-gfm-export-to-markdown&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to automatically load &lt;code&gt;ox-gfm&lt;/code&gt; along with Org mode, then you can add this snippet to your Emacs configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(eval-after-load &#34;org&#34;&#xA;  &#39;(require &#39;ox-gfm nil t))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Wilfred/pip-requirements.el</title>
    <updated>2023-05-29T01:33:50Z</updated>
    <id>tag:github.com,2023-05-29:/Wilfred/pip-requirements.el</id>
    <link href="https://github.com/Wilfred/pip-requirements.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major mode for editing pip requirements files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pip-requirements.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/pip-requirements&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/pip-requirements-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/pip-requirements&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/pip-requirements-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a major mode for editing pip requirements files, with the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlighting&lt;/li&gt; &#xA; &lt;li&gt;Togglable comments&lt;/li&gt; &#xA; &lt;li&gt;Auto completion of package names from PyPI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/pip-requirements.el/master/pip_requirements_screenshot.png&#34; alt=&#34;pip-requirements&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Auto Completion&lt;/h2&gt; &#xA;&lt;p&gt;This major mode provides completion of package names from PyPI. It supports Emacs&#39; built-in &lt;code&gt;completion-at-point&lt;/code&gt; command and thus also &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;Company&lt;/a&gt; via its generic CAPF backend.&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;Auto Complete&lt;/a&gt; instead, add the following to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(add-hook &#39;pip-requirements-mode-hook #&#39;pip-requirements-auto-complete-setup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;0.6&lt;/h3&gt; &#xA;&lt;p&gt;Update pip-requirements completion to handle the move from pypi.python.org to pypi.org (minor HTML difference broke our parsing).&lt;/p&gt; &#xA;&lt;h3&gt;0.5&lt;/h3&gt; &#xA;&lt;p&gt;Added support for completion-at-point-functions. Autocomplete is now optional, and pip-requirements also works with company (via &lt;code&gt;company-capf&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; are now supported in package names, and &lt;code&gt;.postN&lt;/code&gt; is now supported in version numbers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip-requirements-mode&lt;/code&gt; now inherits from &lt;code&gt;prog-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;requirements.in&lt;/code&gt; files are now recognised as pip requirements files.&lt;/p&gt; &#xA;&lt;h3&gt;0.4&lt;/h3&gt; &#xA;&lt;p&gt;Auto-completion of package names! See screenshot above. Requires auto-complete, and your Emacs must be compiled with libxml support.&lt;/p&gt; &#xA;&lt;p&gt;Added support for toggling comments with &lt;code&gt;M-;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;0.3&lt;/h3&gt; &#xA;&lt;p&gt;Improved syntax highlighting in different version strings. Improved detection of pip requirements files (it&#39;s now anything that matches &lt;code&gt;*.pip&lt;/code&gt; or &lt;code&gt;requirements*.txt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;0.2&lt;/h3&gt; &#xA;&lt;p&gt;First public release, just syntax highlighting.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This package is very much inspired by &lt;a href=&#34;https://github.com/wuub/requirementstxt&#34;&gt;https://github.com/wuub/requirementstxt&lt;/a&gt; for Sublime.&lt;/p&gt;</summary>
  </entry>
</feed>