<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-16T01:39:10Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>purcell/exec-path-from-shell</title>
    <updated>2022-06-16T01:39:10Z</updated>
    <id>tag:github.com,2022-06-16:/purcell/exec-path-from-shell</id>
    <link href="https://github.com/purcell/exec-path-from-shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make Emacs use the $PATH set up by the user&#39;s shell&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/exec-path-from-shell&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/exec-path-from-shell-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/exec-path-from-shell&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/exec-path-from-shell-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/exec-path-from-shell/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/exec-path-from-shell/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;exec-path-from-shell&lt;/h1&gt; &#xA;&lt;p&gt;A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user&#39;s shell.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Ever find that a command works in your shell, but not in Emacs?&lt;/p&gt; &#xA;&lt;p&gt;This happens a lot on OS X, where an Emacs instance launched as a GUI app inherits a default minimal set of environment variables that are probably not the ones you see in a terminal window. Similarly, if you start Emacs as a daemon from &lt;code&gt;systemd&lt;/code&gt; or &lt;code&gt;launchd&lt;/code&gt;, it will run with a default set of environment variables.&lt;/p&gt; &#xA;&lt;p&gt;This library solves this problem by copying important environment variables from the user&#39;s shell: it works by asking your shell to print out the variables of interest, then copying them into the Emacs environment.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;If the path printed by evaluating &lt;code&gt;(getenv &#34;SHELL&#34;)&lt;/code&gt; in Emacs points at &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, this should work fine.&lt;/p&gt; &#xA;&lt;p&gt;At a minimum, this package assumes that your shell is at least UNIX-y: if &lt;code&gt;(getenv &#34;SHELL&#34;)&lt;/code&gt; evaluates to something like &lt;code&gt;&#34;.../cmdproxy.exe&#34;&lt;/code&gt;, this package probably isn&#39;t for you.&lt;/p&gt; &#xA;&lt;p&gt;Further, if you use a non-POSIX-standard shell such as &lt;code&gt;tcsh&lt;/code&gt; or &lt;code&gt;fish&lt;/code&gt;, your shell will be asked to execute &lt;code&gt;sh&lt;/code&gt; as a subshell in order to print out the variables in a format which can be reliably parsed. &lt;code&gt;sh&lt;/code&gt; must be a POSIX-compliant shell in this case.&lt;/p&gt; &#xA;&lt;p&gt;Note that shell variables which have not been exported as environment variables (e.g. using the &#34;export&#34; keyword) may not be visible to `exec-path-from-shell&#39;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installable packages are available via MELPA: do &lt;code&gt;M-x package-install RET exec-path-from-shell RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;a href=&#34;https://github.com/purcell/exec-path-from-shell/tags&#34;&gt;download&lt;/a&gt; the latest release or clone the repository, and install &lt;code&gt;exec-path-from-shell.el&lt;/code&gt; with &lt;code&gt;M-x package-install-file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;init.el&lt;/code&gt; (after calling &lt;code&gt;package-initialize&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(when (memq window-system &#39;(mac ns x))&#xA;  (exec-path-from-shell-initialize))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets &lt;code&gt;$MANPATH&lt;/code&gt;, &lt;code&gt;$PATH&lt;/code&gt; and &lt;code&gt;exec-path&lt;/code&gt; from your shell, but only when executed in a GUI frame on OS X and Linux.&lt;/p&gt; &#xA;&lt;p&gt;If you launch Emacs as a daemon from &lt;code&gt;systemd&lt;/code&gt; or similar, you might like to use the following snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(when (daemonp)&#xA;  (exec-path-from-shell-initialize))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can copy values of other environment variables by customizing &lt;code&gt;exec-path-from-shell-variables&lt;/code&gt; before invoking &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt;, or by calling &lt;code&gt;exec-path-from-shell-copy-env&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(exec-path-from-shell-copy-env &#34;PYTHONPATH&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function may also be called interactively.&lt;/p&gt; &#xA;&lt;p&gt;The author uses the following configuration snippet before calling &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(dolist (var &#39;(&#34;SSH_AUTH_SOCK&#34; &#34;SSH_AGENT_PID&#34; &#34;GPG_AGENT_INFO&#34; &#34;LANG&#34; &#34;LC_CTYPE&#34; &#34;NIX_SSL_CERT_FILE&#34; &#34;NIX_PATH&#34;))&#xA;  (add-to-list &#39;exec-path-from-shell-variables var))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up your shell startup files correctly&lt;/h3&gt; &#xA;&lt;p&gt;Note that your shell will inherit Emacs&#39;s environment variables when it is run by &lt;code&gt;exec-path-from-shell&lt;/code&gt; -- to avoid surprises your config files should therefore set the environment variables to their exact desired final values, i.e. don&#39;t do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=/usr/local/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but instead do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=/usr/local/bin:/usr/bin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To be safe, &lt;code&gt;exec-path-from-shell&lt;/code&gt; starts an interactive (and login) shell by default, but this can be much slower than necessary. Interactive shells often have fancy features enabled that are only helpful when one interacts directly with the shell, and this can frequently cause startup time to exceed 750ms. This can be avoided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow best practice by setting your environment variables so that they are available to both interactive and non-interactive shells. In practical terms, for most people this means setting them in &lt;code&gt;~/.profile&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zshenv&lt;/code&gt; instead of &lt;code&gt;~/.bashrc&lt;/code&gt; and &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Once a non-interactive shell sets your environment variables correctly, adjust &lt;code&gt;exec-path-from-shell-arguments&lt;/code&gt; appropriately (often to &lt;code&gt;nil&lt;/code&gt;) before calling &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt; so that it will start a non-interactive shell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more about how popular shells load start-up files, read &lt;a href=&#34;https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html&#34;&gt;this helpful article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Making &lt;code&gt;exec-path-from-shell&lt;/code&gt; faster&lt;/h2&gt; &#xA;&lt;p&gt;If evaluation takes more than &lt;code&gt;exec-path-from-shell-warn-duration-millis&lt;/code&gt; (500ms by default) then &lt;code&gt;exec-path-from-shell&lt;/code&gt; will print a warning.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-interactive shells start up faster. Follow the steps in the section above so that you can run your shell without &lt;code&gt;-i&lt;/code&gt; and still get the right environment variable settings. When &lt;code&gt;&#34;-i&#34;&lt;/code&gt; is then removed from &lt;code&gt;exec-path-from-shell-arguments&lt;/code&gt;, this package becomes more efficient.&lt;/li&gt; &#xA; &lt;li&gt;Invoking the shell has a non-trivial overhead in any case. Don&#39;t call &lt;code&gt;exec-path-from-shell-copy-env&lt;/code&gt; repeatedly, since each invocation starts a shell. Instead, set &lt;code&gt;exec-path-from-shell-variables&lt;/code&gt; to the full list of vars you want, and call &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt; once.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Further help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-h f exec-path-from-shell-initialize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-h f exec-path-from-shell-copy-env&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;üíù Support this project and my other Open Source work via Patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;üíº LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;‚úç sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;üê¶ @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>polymode/polymode</title>
    <updated>2022-06-16T01:39:10Z</updated>
    <id>tag:github.com,2022-06-16:/polymode/polymode</id>
    <link href="https://github.com/polymode/polymode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Framework for Multiple Major Modes in Emacs (core library)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- [![Build Status](https://travis-ci.org/vspinu/polymode.svg?branch=master)](https://travis-ci.org/vspinu/polymode)  --&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/polymode&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/polymode-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://stable.melpa.org/#/polymode&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/polymode-badge.svg&#34;/&gt;&lt;/a&gt; --&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/polymode/polymode/master/docs/img/large-icon.png&#34; width=&#34;25%&#34; alt=&#34;Polymode Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Polymode is a framework for multiple major modes (MMM) inside a single Emacs buffer. It is fast and has a simple but flexible object oriented design. Creating new polymodes normally takes a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://polymode.github.io/installation/&#34;&gt;Installation&lt;/a&gt; instructions and the full documentation are available at &lt;a href=&#34;https://polymode.github.io/&#34;&gt;https://polymode.github.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/polymode/polymode/master/docs/img/Rmd.png&#34; width=&#34;500px&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jwiegley/alert</title>
    <updated>2022-06-16T01:39:10Z</updated>
    <id>tag:github.com,2022-06-16:/jwiegley/alert</id>
    <link href="https://github.com/jwiegley/alert" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Growl-like alerts notifier for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Alert is a Growl-workalike for Emacs which uses a common notification interface and multiple, selectable &#34;styles&#34;, whose use is fully customizable by the user.&lt;/p&gt; &#xA;&lt;h1&gt;For module writers&lt;/h1&gt; &#xA;&lt;p&gt;Just use &lt;code&gt;alert&lt;/code&gt; instead of &lt;code&gt;message&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;alert)&#xA;&#xA;;; This is the most basic form usage&#xA;(alert &#34;This is an alert&#34;)&#xA;&#xA;;; You can adjust the severity for more important messages&#xA;(alert &#34;This is an alert&#34; :severity &#39;high)&#xA;&#xA;;; Or decrease it for purely informative ones&#xA;(alert &#34;This is an alert&#34; :severity &#39;trivial)&#xA;&#xA;;; Alerts can have optional titles.  Otherwise, the title is the&#xA;;; buffer-name of the (current-buffer) where the alert originated.&#xA;(alert &#34;This is an alert&#34; :title &#34;My Alert&#34;)&#xA;&#xA;;; Further, alerts can have categories.  This allows users to&#xA;;; selectively filter on them.&#xA;(alert &#34;This is an alert&#34; :title &#34;My Alert&#34; :category &#39;debug)&#xA;&#xA;;; If a backend allows replacing alerts, you may pass an id&#xA;;; to your alert; then the next one with the same id will replace the&#xA;;; first one:&#xA;(alert &#34;You have 30 unread mails&#34; :title &#34;Mail!&#34; :id &#39;new-mail-alert)&#xA;(alert &#34;You have 49 unread mails&#34; :title &#34;Mail!&#34; :id &#39;new-mail-alert)&#xA;;; This avoids piling up lots of alerts, when only the last one is&#xA;;; relevant.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;For users&lt;/h1&gt; &#xA;&lt;p&gt;For the user, there are several variables to control when and how alerts are presented. By default, they appear in the minibuffer much the same as a normal Emacs message. But there are many more possibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;alert-fade-time&lt;/code&gt; Normally alerts disappear after this many seconds, if the style supports it. The default is 5 seconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;alert-default-style&lt;/code&gt; Pick the style to use if no other config rule matches. The default is &lt;code&gt;message&lt;/code&gt;, but &lt;code&gt;growl&lt;/code&gt; works well too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;alert-reveal-idle-time&lt;/code&gt; If a config rule choose to match on &lt;code&gt;idle&lt;/code&gt;, this is how many seconds idle the user has to be. Defaults to 5 so that users don&#39;t miss any alerts, but 120 is also good.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;alert-persist-idle-time&lt;/code&gt; After this many idle seconds, alerts will become sticky, and not fade away more. The default is 15 minutes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;alert-log-messages&lt;/code&gt; By default, all alerts are logged to *Alerts* (and to *Messages*, if the &lt;code&gt;message&lt;/code&gt; style is being used). Set to nil to disable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;alert-hide-all-notifications&lt;/code&gt; Want alerts off entirely? They still get logged, however, unless you&#39;ve turned that off too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;alert-user-configuration&lt;/code&gt; This variable lets you control exactly how and when a particular alert, a class of alerts, or all alerts, get reported -- or if at all. Use this to make some alerts use Growl, while others are completely silent.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Programmatically adding rules&lt;/h1&gt; &#xA;&lt;p&gt;Users can also programmatically add configuration rules, in addition to customizing &lt;code&gt;alert-user-configuration&lt;/code&gt;. Here is one that the author currently uses with ERC, so that the fringe gets colored whenever people chat on BitlBee:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(alert-add-rule :status   &#39;(buried visible idle)&#xA;                :severity &#39;(moderate high urgent)&#xA;                :mode     &#39;erc-mode&#xA;                :predicate&#xA;                #&#39;(lambda (info)&#xA;                    (string-match (concat &#34;\\`[^&amp;amp;].*@BitlBee\\&#39;&#34;)&#xA;                                  (erc-format-target-and/or-network)))&#xA;                :persistent&#xA;                #&#39;(lambda (info)&#xA;                    ;; If the buffer is buried, or the user has been&#xA;                    ;; idle for `alert-reveal-idle-time&#39; seconds,&#xA;                    ;; make this alert persistent.  Normally, alerts&#xA;                    ;; become persistent after&#xA;                    ;; `alert-persist-idle-time&#39; seconds.&#xA;                    (memq (plist-get info :status) &#39;(buried idle)))&#xA;                :style &#39;fringe&#xA;                :continue t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Builtin alert styles&lt;/h1&gt; &#xA;&lt;p&gt;There are several builtin styles, and it is trivial to create new ones. The builtins are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Summary&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fringe&lt;/td&gt; &#xA;   &lt;td&gt;Changes the current frame&#39;s fringe background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mode-line&lt;/td&gt; &#xA;   &lt;td&gt;Changes the current frame&#39;s mode-line background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gntp&lt;/td&gt; &#xA;   &lt;td&gt;Uses gntp, it requires &lt;a href=&#34;https://github.com/tekai/gntp.el&#34;&gt;gntp.el&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;growl&lt;/td&gt; &#xA;   &lt;td&gt;Uses Growl on OS X, if growlnotify is on the PATH&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ignore&lt;/td&gt; &#xA;   &lt;td&gt;Ignores the alert entirely&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;libnotify&lt;/td&gt; &#xA;   &lt;td&gt;Uses libnotify if notify-send is on the PATH&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;log&lt;/td&gt; &#xA;   &lt;td&gt;Logs the alert text to &lt;em&gt;Alerts&lt;/em&gt;, with a timestamp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;message&lt;/td&gt; &#xA;   &lt;td&gt;Uses the Emacs &lt;code&gt;message&lt;/code&gt; facility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;notifications&lt;/td&gt; &#xA;   &lt;td&gt;Uses notifications library via D-Bus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;notifier&lt;/td&gt; &#xA;   &lt;td&gt;Uses terminal-notifier on OS X, if it is on the PATH&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;osx-notifier&lt;/td&gt; &#xA;   &lt;td&gt;Native OSX notification using AppleScript&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;toaster&lt;/td&gt; &#xA;   &lt;td&gt;Use the toast notification system&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x11&lt;/td&gt; &#xA;   &lt;td&gt;Changes the urgency property of the window in the X Window System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Defining new styles&lt;/h1&gt; &#xA;&lt;p&gt;To create a new style, you need to at least write a &lt;code&gt;notifier&lt;/code&gt;, which is a function that receives the details of the alert. These details are given in a plist which uses various keyword to identify the parts of the alert. Here is a prototypical style definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(alert-define-style &#39;style-name :title &#34;My Style&#39;s title&#34;&#xA;                    :notifier&#xA;                    (lambda (info)&#xA;                      ;; The message text is :message&#xA;                      (plist-get info :message)&#xA;                      ;; The :title of the alert&#xA;                      (plist-get info :title)&#xA;                      ;; The :category of the alert&#xA;                      (plist-get info :category)&#xA;                      ;; The major-mode this alert relates to&#xA;                      (plist-get info :mode)&#xA;                      ;; The buffer the alert relates to&#xA;                      (plist-get info :buffer)&#xA;                      ;; Severity of the alert.  It is one of:&#xA;                      ;;   `urgent&#39;&#xA;                      ;;   `high&#39;&#xA;                      ;;   `moderate&#39;&#xA;                      ;;   `normal&#39;&#xA;                      ;;   `low&#39;&#xA;                      ;;   `trivial&#39;&#xA;                      (plist-get info :severity)&#xA;                      ;; Whether this alert should persist, or fade away&#xA;                      (plist-get info :persistent)&#xA;                      ;; Data which was passed to `alert&#39;.  Can be&#xA;                      ;; anything.&#xA;                      (plist-get info :data))&#xA;&#xA;                    ;; Removers are optional.  Their job is to remove&#xA;                    ;; the visual or auditory effect of the alert.&#xA;                    :remover&#xA;                    (lambda (info)&#xA;                      ;; It is the same property list that was passed to&#xA;                      ;; the notifier function.&#xA;                      ))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>