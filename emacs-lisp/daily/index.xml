<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:34:48Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Townk/org-ol-tree</title>
    <updated>2023-02-26T01:34:48Z</updated>
    <id>tag:github.com,2023-02-26:/Townk/org-ol-tree</id>
    <link href="https://github.com/Townk/org-ol-tree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Org mode outline window that does not use indirect buffers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE:Org Outline Tree&lt;/p&gt; &#xA;&lt;p&gt;[[https://www.gnu.org/software/emacs/][https://img.shields.io/badge/works%20on-27.1+-blueviolet.svg?logo=GNU%20Emacs&amp;amp;logoColor=white]] [[https://github.com/Townk/org-ol-tree/blob/main/LICENSE][http://img.shields.io/badge/license-MIT-brightgreen.svg]] [[https://github.com/Townk/org-ol-tree/actions/workflows/tests.yml][https://github.com/Townk/org-ol-tree/actions/workflows/tests.yml/badge.svg]] [[https://codecov.io/gh/Townk/org-ol-tree][https://codecov.io/gh/Townk/org-ol-tree/branch/main/graph/badge.svg?token=XL88FR24XT]]&lt;/p&gt; &#xA;&lt;p&gt;This package offers an Org mode outline window that does not use indirect buffers.&lt;/p&gt; &#xA;&lt;p&gt;Currently this is on its infancy and it may or may not have a bright future. This means that this package will not make into MELPA before it reaches some level of maturity.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_html: :alt :align center :class img :width 1000 #+attr_org: :width 800 [[./assets/screenshot.png]]&lt;/p&gt; &#xA;&lt;p&gt;In this pre-alpha release, this package can display all headlines as an outline tree on the right side of the frame. You can press =[enter]= to scroll your buffer to the selected heading, or you can use the universal prefix before pressing =[enter]= to have your buffer narrowed to the selected heading.&lt;/p&gt; &#xA;&lt;p&gt;This is a list of features I want to implement before doing a proper release of the package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Promote or demote a heading from the outline;&lt;/li&gt; &#xA; &lt;li&gt;Move headings up and down;&lt;/li&gt; &#xA; &lt;li&gt;+Rename headings from the outline+;&lt;/li&gt; &#xA; &lt;li&gt;+Have a configuration for the window position+;&lt;/li&gt; &#xA; &lt;li&gt;+Add default keybindings for Vanilla Emacs and Evil+;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And this is a list of features I want to have in this package but I don&#39;t want to commit to it right away:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a toggle to make the outline and the target buffer synchronize their expand/collapse state;&lt;/li&gt; &#xA; &lt;li&gt;Add all keybindings you can use on a heading on an org file;&lt;/li&gt; &#xA; &lt;li&gt;Add some hydra or transient helpers for the outline shortcuts;&lt;/li&gt; &#xA; &lt;li&gt;Refactor headings into their own org file;&lt;/li&gt; &#xA; &lt;li&gt;Embark integration;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also two features I really want but I don&#39;t know how to implement them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;+Auto resize the outline&#39;s window according to the length of its headings+.&lt;/p&gt; &lt;p&gt;+If I was to implement this feature just for users of fixed width fonts, it would be a breeze to get this done, but I dimply don&#39;t know how to /measure/ a string with a given font on Emacs! If you know how to do it, ping me!+ &lt;em&gt;Update&lt;/em&gt;: this feature is live on =main=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add support for TODO items in the outline.&lt;/p&gt; &lt;p&gt;My issue here is more an architecture decision problem. Since TODOs are essentially normal headings with the word &#34;TODO&#34; prefixing them, how should I display them? My initial idea was show them grouped in a child node from their parents under a node called /Tasks/. The problem here is when someone decides add more subheadings and text after the TODO. On that case, what should I do? Add the next section as a child section of its parent? Consider everything after it as part of the task?&lt;/p&gt; &lt;p&gt;So, if you have a good idea on how to handle TODOs from an outline perspective, also ping me for a quick chat!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dmitry-kabanov/dotfiles</title>
    <updated>2023-02-26T01:34:48Z</updated>
    <id>tag:github.com,2023-02-26:/dmitry-kabanov/dotfiles</id>
    <link href="https://github.com/dmitry-kabanov/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Config files for different programs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dotfiles&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains my dotfiles for various programs that I use in Unix-like environment.&lt;/p&gt; &#xA;&lt;p&gt;To manage these files, I use a technique described &lt;a href=&#34;https://www.atlassian.com/git/tutorials/dotfiles&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It is assumed here that the current working directory is &lt;code&gt;$HOME&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install dotfiles, first clone the code on a local machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Clone the repository to $HOME/.dotfiles&#xA;git clone --bare git@github.com:dmitry-kabanov/dotfiles .dotfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then checkout to the &lt;code&gt;$HOME&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GIT_DIR=$HOME/.dotfiles GIT_WORK_TREE=$HOME git checkout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run the installation script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash .bin/setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every time when you need to work with the &lt;code&gt;dotfiles&lt;/code&gt; repo, set environment variables &lt;code&gt;$GIT_DIR&lt;/code&gt; and &lt;code&gt;$GIT_WORK_TREE&lt;/code&gt; by the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source .bin/activate_dotfiles_repo.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After finishing working with the repo, the best is to close the terminal tab to &#34;undo&#34; the environment variables.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Every time, I need to modify the dotfiles, I work in a fresh terminal instance, where I source a shell script that sets the environment variables &lt;code&gt;$GIT_DIR&lt;/code&gt; and &lt;code&gt;GIT_WORK_TREE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source .bin/activate_github_repo.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After all git-related operations are done, I just close this terminal instance to make sure that these environment variables do not interfere with any other git repository.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/dotfiles&#34;&gt;https://www.atlassian.com/git/tutorials/dotfiles&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jscheid/dtrt-indent</title>
    <updated>2023-02-26T01:34:48Z</updated>
    <id>tag:github.com,2023-02-26:/jscheid/dtrt-indent</id>
    <link href="https://github.com/jscheid/dtrt-indent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minor mode that guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dtrt-indent&lt;/h1&gt; &#xA;&lt;p&gt;An Emacs minor mode that guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.&lt;/p&gt; &#xA;&lt;p&gt;You can install dtrt-indent from MELPA.&lt;/p&gt; &#xA;&lt;p&gt;To activate it, M-x customize-variable dtrt-indent-global-mode, and turn on &#34;Dtrt Indent Global Mode&#34;. See &lt;code&gt;dtrt-indent.el&lt;/code&gt; for full documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Related work&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nschum.de/src/emacs/guess-style/&#34;&gt;guess-style&lt;/a&gt; is similar to dtrt-indent, but only supports &lt;code&gt;cc-mode&lt;/code&gt;, and only guesses offsets of 2, 4 and 8.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tpope/vim-sleuth&#34;&gt;vim-sleuth&lt;/a&gt; provides similar functionality for Vim.&lt;/p&gt;</summary>
  </entry>
</feed>