<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-03T01:35:20Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pope/ob-go</title>
    <updated>2022-09-03T01:35:20Z</updated>
    <id>tag:github.com,2022-09-03:/pope/ob-go</id>
    <link href="https://github.com/pope/ob-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Org-Babel support for evaluating go code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Readme&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction&lt;/p&gt; &lt;p&gt;=ob-go= enables [[http://orgmode.org/worg/org-contrib/babel/intro.html][Org-Babel]] support for evaluating [[http://golang.org/][go]] code. It was created based on the usage of [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html][ob-C]]. The go code is compiled and run via the =go run= command. If a =main= function isn&#39;t present, by default the code is wrapped in a simple =main= func. If =:package= option isn&#39;t set and no package is declared in the code, then the =main= package is declared.&lt;/p&gt; &lt;p&gt;: #+begin_src go :imports &#34;fmt&#34; : fmt.Println(&#34;Hello, 世界&#34;) : #+end_src : : #+results: : : Hello, 世界&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Language Specific Header Arguments&lt;/p&gt; &lt;p&gt;In addition to the normal header arguments for Babel, below are some some headers specific to go.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=:args= :: Command line arguments to pass to the executable compiled from the code block. To pass more than one argument, use a list.&lt;/li&gt; &#xA;   &lt;li&gt;=:flags= :: Flags to pass to the =go run= command. These are the flags that you would pass to =go build=.&lt;/li&gt; &#xA;   &lt;li&gt;=:main= :: If set to =no=, inhibits the auto wrapping of the =main= function call. Default: yes&lt;/li&gt; &#xA;   &lt;li&gt;=:imports= :: Shorthand for supplying imports to the app. This should be used when you&#39;re letting the application handle the =main= function. To supply more, use a list.&lt;/li&gt; &#xA;   &lt;li&gt;=:package= :: Set the package of the file. &lt;em&gt;Requires :main no&lt;/em&gt;. If not set, and code doesn&#39;t have a explicit package, then =main= package is declared.&lt;/li&gt; &#xA;   &lt;li&gt;=:var= :: &lt;code&gt;ob-go&#39; also supports Babel variables with some limitations. See &lt;/code&gt;ob-go&#39; for more information about some of the limitations using =:var=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Additional Examples&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Multiple Imports&lt;/p&gt; &#xA;&lt;p&gt;: #+begin_src go :imports &#39;(&#34;fmt&#34; &#34;time&#34;) : fmt.Println(&#34;Current Time:&#34;, time.Now()) : #+end_src : : #+RESULTS: : : Current Time: 2012-04-29 11:47:36.933733 -0700 PDT&lt;/p&gt; &#xA;&lt;p&gt;** Concurrent Prime Sieve&lt;/p&gt; &#xA;&lt;p&gt;: #+begin_src go : // A concurrent prime sieve : package main : : import &#34;fmt&#34; : : // Send the sequence 2, 3, 4, ... to channel &#39;ch&#39;. : func Generate(ch chan&amp;lt;- int) { : for i := 2; ; i++ { : ch &amp;lt;- i // Send &#39;i&#39; to channel &#39;ch&#39;. : } : } : : // Copy the values from channel &#39;in&#39; to channel &#39;out&#39;, : // removing those divisible by &#39;prime&#39;. : func Filter(in &amp;lt;-chan int, out chan&amp;lt;- int, prime int) { : for { : i := &amp;lt;-in // Receive value from &#39;in&#39;. : if i%prime != 0 { : out &amp;lt;- i // Send &#39;i&#39; to &#39;out&#39;. : } : } : } : : // The prime sieve: Daisy-chain Filter processes. : func main() { : ch := make(chan int) // Create a new channel. : go Generate(ch) // Launch Generate goroutine. : for i := 0; i &amp;lt; 10; i++ { : prime := &amp;lt;-ch : fmt.Println(prime) : ch1 := make(chan int) : go Filter(ch, ch1, prime) : ch = ch1 : } : } : #+end_src : : #+RESULTS: : #+begin_example : 2 : 3 : 5 : 7 : 11 : 13 : 17 : 19 : 23 : 29 : #+end_example&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Running tests&lt;/p&gt; &lt;p&gt;Tests can be executed by /make test/ or invoking emacs directly with the command-line below:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell&lt;/p&gt; &#xA;&lt;h1&gt;For Emacs earlier than 24, add -L /path/to/ert&lt;/h1&gt; &#xA;&lt;p&gt;emacs -Q --batch &lt;br&gt; -L . &lt;br&gt; -l ob-go.el &lt;br&gt; -l test-ob-go.el &lt;br&gt; --eval &#34;(progn &lt;br&gt; (setq org-confirm-babel-evaluate nil) &lt;br&gt; (org-babel-do-load-languages &lt;br&gt; &#39;org-babel-load-languages &#39;((emacs-lisp . t) &lt;br&gt; (sh . t) &lt;br&gt; (org . t) &lt;br&gt; (go . t))))&#34; &lt;br&gt; -f ob-go-test-runall #+END_SRC&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>weijiangan/flycheck-golangci-lint</title>
    <updated>2022-09-03T01:35:20Z</updated>
    <id>tag:github.com,2022-09-03:/weijiangan/flycheck-golangci-lint</id>
    <link href="https://github.com/weijiangan/flycheck-golangci-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flycheck checker for golangci-lint&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flycheck-golangci-lint&lt;/h1&gt; &#xA;&lt;p&gt;Flycheck checker for golangci-lint&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;MELPA&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install flycheck-golangci-lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install-file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Add the following lines to your config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(eval-after-load &#39;flycheck                                       &#xA;  &#39;(add-hook &#39;flycheck-mode-hook #&#39;flycheck-golangci-lint-setup))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;use-package&lt;/code&gt; installed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(use-package flycheck-golangci-lint&#xA;  :ensure t&#xA;  :hook (go-mode . flycheck-golangci-lint-setup))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available options&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;--config&lt;/code&gt; (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq flycheck-golangci-lint-config &#34;path/to/config&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--deadline&lt;/code&gt; (default: &lt;code&gt;1m&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq flycheck-golangci-lint-deadline &#34;1m&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--tests&lt;/code&gt; (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq flycheck-golangci-lint-tests t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--fast&lt;/code&gt; (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq flycheck-golangci-lint-fast t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--enable-all&lt;/code&gt; (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq flycheck-golangci-lint-enable-all t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--disable-all&lt;/code&gt; (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq flycheck-golangci-lint-disable-all t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--enable=&lt;/code&gt; (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq flycheck-golangci-lint-enable-linters &#39;(&#34;lll&#34; &#34;structcheck&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--disable=&lt;/code&gt; (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq flycheck-golangci-lint-disable-linters &#39;(&#34;unused&#34; &#34;staticcheck&#34; &#34;misspell&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;GO Modules&lt;/h1&gt; &#xA;&lt;p&gt;Make sure you have set GO111MODULE, if it&#39;s not the default in your Go version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setenv &#34;GO111MODULE&#34; &#34;on&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;Pull requests are welcomed :)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>meow-edit/meow</title>
    <updated>2022-09-03T01:35:20Z</updated>
    <id>tag:github.com,2022-09-03:/meow-edit/meow</id>
    <link href="https://github.com/meow-edit/meow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet another modal editing on Emacs / 猫态编辑&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Meow&lt;/p&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/meow][file:https://melpa.org/packages/meow-badge.svg]] [[https://stable.melpa.org/#/meow][file:https://stable.melpa.org/packages/meow-badge.svg]] [[https://github.com/meow-edit/meow/actions/workflows/action.yml][https://github.com/meow-edit/meow/actions/workflows/action.yml/badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;[[file:meow.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_quote Less is more #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;Meow is yet another modal editing mode for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Meow aims to blend modal editing into Emacs with minimal interference with its original key-bindings, avoiding most of the hassle introduced by key-binding conflicts. This leads to lower necessary configuration and better integration. More is achieved with fewer commands to remember.&lt;/p&gt; &#xA;&lt;p&gt;Key features compared to existing solutions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimal configuration -- build your own modal editing system&lt;/li&gt; &#xA; &lt;li&gt;No third-party dependencies ([[file:GET_STARTED.org][try it without touching your configuration]])&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t occupy too many keys &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Much easier to remember for people trying modal editing&lt;/li&gt; &#xA;   &lt;li&gt;More keys available for your own key-bindings&lt;/li&gt; &#xA;   &lt;li&gt;Most of the time, you don&#39;t even need to hold shift!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Lightning fast (unlike Evil)&lt;/li&gt; &#xA; &lt;li&gt;Minimizes modifier usage (e.g. =SPC x f= for =C-x C-f=) inspired by [[https://github.com/emacsorphanage/god-mode][god-mode]]&lt;/li&gt; &#xA; &lt;li&gt;Better workflow for [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html][kmacro]] application at multiple locations&lt;/li&gt; &#xA; &lt;li&gt;Interactive selection manipulation and expansion inspired by avy&lt;/li&gt; &#xA; &lt;li&gt;Selection as top-tier object, and keybindings built around selection&lt;/li&gt; &#xA; &lt;li&gt;Compatible with the vanilla Emacs keymap (or any other keymap from any package)&lt;/li&gt; &#xA; &lt;li&gt;Effortless uniform keymaps across modes&lt;/li&gt; &#xA; &lt;li&gt;Key-binding conflict handling made easy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Community&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please feel free to ask questions and share ideas in the [[https://github.com/meow-edit/meow/discussions][Discussion]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:GET_STARTED.org][Get started]] - Installation and configuration&lt;/p&gt; &#xA;&lt;p&gt;[[file:TUTORIAL.org][Tutorial]] - Learn Meow in 15 minutes&lt;/p&gt; &#xA;&lt;p&gt;[[file:FAQ.org][FAQ]] - Frequently Asked Questions&lt;/p&gt; &#xA;&lt;p&gt;[[file:COMMANDS.org][Commands]] - Documentation for commands&lt;/p&gt; &#xA;&lt;p&gt;[[file:CUSTOMIZATIONS.org][Customizations]] - Helper functions and variables&lt;/p&gt; &#xA;&lt;p&gt;[[file:EXPLANATION.org][Explanation]] - Ideas and concepts behind Meow&lt;/p&gt; &#xA;&lt;p&gt;[[file:CHANGELOG.md][Changelog]] - Changes, releases, and news&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Licensed under GPLv3.&lt;/p&gt;</summary>
  </entry>
</feed>