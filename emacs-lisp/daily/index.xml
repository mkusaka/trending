<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-23T01:32:53Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jkitchin/ox-clip</title>
    <updated>2022-09-23T01:32:53Z</updated>
    <id>tag:github.com,2022-09-23:/jkitchin/ox-clip</id>
    <link href="https://github.com/jkitchin/ox-clip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Copy formatted content from org-mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: ox-clip - Cross-platform Formatted copy commands for org-mode #+AUTHOR: John Kitchin #+DATE: August 5, 2017&lt;/p&gt; &#xA;&lt;p&gt;This module copies selected regions in org-mode as formatted text on the clipboard that can be pasted into other applications. When not in org-mode, the htmlize library is used instead.&lt;/p&gt; &#xA;&lt;p&gt;For Windows the html-clip-w32.py script will be installed in the ox-clip install directory. It works pretty well, but I noticed that the hyperlinks in the TOC to headings don&#39;t work, and strike-through doesn&#39;t seem to work. I have no idea how to fix either issue.&lt;/p&gt; &#xA;&lt;p&gt;Mac OSX needs textutils and pbcopy, which should be part of the standard utilities available on MacOSX.&lt;/p&gt; &#xA;&lt;p&gt;Linux needs a relatively modern xclip. &lt;a href=&#34;https://github.com/astrand/xclip&#34;&gt;https://github.com/astrand/xclip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is one command: =ox-clip-formatted-copy= that should work across Windows, Mac and Linux. I recommend you bind this to a key. I like H-k (Hyper-k).&lt;/p&gt; &#xA;&lt;p&gt;Note: This file was extracted from &lt;a href=&#34;https://github.com/jkitchin/scimax&#34;&gt;https://github.com/jkitchin/scimax&lt;/a&gt; to make a smaller repo for MELPA (see &lt;a href=&#34;https://github.com/jkitchin/scimax/issues/21&#34;&gt;https://github.com/jkitchin/scimax/issues/21&lt;/a&gt;). I extracted it using this git wizardry from: &lt;a href=&#34;http://www.pixelite.co.nz/article/extracting-file-folder-from-git-repository-with-full-git-history/&#34;&gt;http://www.pixelite.co.nz/article/extracting-file-folder-from-git-repository-with-full-git-history/&lt;/a&gt;. This seems to have retained the history on the file modifications.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh cd /path/to/scimax git log --pretty=email --patch-with-stat --reverse --full-index --binary -- ox-clip.el &amp;gt; /tmp/patch&lt;/p&gt; &#xA;&lt;p&gt;cd ~/tmp mkdir ox-clip git init git am &amp;lt; /tmp/patch git remote add origin &lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:jkitchin/ox-clip.git git push -f origin master #+END_SRC&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xuchunyang/elisp-demos</title>
    <updated>2022-09-23T01:32:53Z</updated>
    <id>tag:github.com,2022-09-23:/xuchunyang/elisp-demos</id>
    <link href="https://github.com/xuchunyang/elisp-demos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Demonstrate Emacs Lisp APIs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elisp API Demos&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xuchunyang/elisp-demos/actions&#34;&gt;&lt;img src=&#34;https://github.com/xuchunyang/elisp-demos/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/elisp-demos&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/elisp-demos-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/elisp-demos&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/elisp-demos-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Showing an Elisp demo of &lt;code&gt;mapcar&lt;/code&gt; in &lt;code&gt;C-h f mapcar&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuchunyang/elisp-demos/master/screenshot.png&#34; alt=&#34;Elisp Demo: mapcar&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To inject elisp demos into &lt;code&gt;*Help*&lt;/code&gt;, such as &lt;code&gt;C-h f&lt;/code&gt; (&lt;code&gt;M-x describe-function&lt;/code&gt;), use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(advice-add &#39;describe-function-1 :after #&#39;elisp-demos-advice-describe-function-1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/Wilfred/helpful&#34;&gt;Helpful&lt;/a&gt;, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(advice-add &#39;helpful-update :after #&#39;elisp-demos-advice-helpful-update)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Put your awesome Elisp demos into &lt;a href=&#34;https://raw.githubusercontent.com/xuchunyang/elisp-demos/master/elisp-demos.org&#34;&gt;elisp-demos.org&lt;/a&gt;. A demo is simply an Org heading. Here is &lt;code&gt;mapcar&lt;/code&gt;&#39;s.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;* mapcar&#xA;&#xA;#+BEGIN_SRC elisp&#xA;(mapcar #&#39;1+ &#39;(1 2 3))&#xA;#+END_SRC&#xA;&#xA;#+RESULTS:&#xA;: (2 3 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;M-x elisp-demos-add-demo&lt;/code&gt; to insert a new demo or edit an existing one.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lastquestion/explain-pause-mode</title>
    <updated>2022-09-23T01:32:53Z</updated>
    <id>tag:github.com,2022-09-23:/lastquestion/explain-pause-mode</id>
    <link href="https://github.com/lastquestion/explain-pause-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;top, but for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;explain-pause-mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/projects/1&#34;&gt;See what&#39;s in development in the project board&lt;/a&gt; | &lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/issues&#34;&gt;Feature requests, bug reports, issues&lt;/a&gt; | &lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;v0.2&lt;/em&gt; is the current development release. See &lt;a href=&#34;https://raw.githubusercontent.com/lastquestion/explain-pause-mode/master/#vnext&#34;&gt;vNext&lt;/a&gt; for more details on what&#39;s coming next.&lt;/p&gt; &#xA;&lt;h3&gt;How to use&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;explain-pause-mode&lt;/code&gt; is very lightweight; you can leave it running all the time. Turn it on after requiring it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(explain-pause-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;explain-pause-top&lt;/code&gt; shows a &lt;code&gt;top&lt;/code&gt;-like view of the things Emacs has been doing:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/lastquestion/explain-pause-mode/master/top.gif&#34; height=&#34;338px&#34;&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;There are 2 ways right now to install. (&lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/issues/49&#34;&gt;Melpa coming soon&lt;/a&gt;!)&lt;/p&gt; &#xA;&lt;h4&gt;Straight.el&lt;/h4&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;, then you can use a normal receipe to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(straight-use-package&#xA; &#39;(explain-pause-mode :type git :host github :repo &#34;lastquestion/explain-pause-mode&#34;))&#xA;(explain-pause-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might be using &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt; with &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;, then you can install and enable at the same time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package explain-pause-mode&#xA;  :straight (explain-pause-mode :type git :host github :repo &#34;lastquestion/explain-pause-mode&#34;)&#xA;  :config&#xA;  (explain-pause-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From sources&lt;/h4&gt; &#xA;&lt;p&gt;If you are interested in contributing, you might want to directly install from sources. Just &lt;code&gt;git clone&lt;/code&gt; and then &lt;code&gt;make install&lt;/code&gt;. &lt;code&gt;make install&lt;/code&gt; will bytecompile and install the sources to a path you specify, which should be on your emacs load path. It is important to bytecompile and optimize &lt;code&gt;explain-pause-mode&lt;/code&gt; for normal use, as the package hooks into many operations that happen on every command or keypress.&lt;/p&gt; &#xA;&lt;h3&gt;vNext&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;v0.3&lt;/em&gt; major features roadmap:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/issues/27&#34;&gt;memory tracking and GC pauses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/issues/48&#34;&gt;show commands per buffer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contribute&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to take a look at the issues board, development is tracked openly on it and the the project board.&lt;/p&gt;</summary>
  </entry>
</feed>