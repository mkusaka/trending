<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-07T01:35:29Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ahmed-shariff/org-roam-ql</title>
    <updated>2023-06-07T01:35:29Z</updated>
    <id>tag:github.com,2023-06-07:/ahmed-shariff/org-roam-ql</id>
    <link href="https://github.com/ahmed-shariff/org-roam-ql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use org-roam with org-ql&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: org-roam-ql - An org-ql interface for org-roam #+author: Shariff AM Faleel #+language: en&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;org-roam-ql&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides an org-ql interface for org-roam.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This package is under active development.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;org-roam&lt;/del&gt; buffer is good at providing context to the nodes I am looking at, while &lt;del&gt;org-ql&lt;/del&gt; provides a very nice interface for querying org files and accompanying tools to work with the results, particularly, the use of the org-agenda view.&lt;/p&gt; &#xA;&lt;p&gt;This package provides an interface to query your org-roam database and view the results in either an org-roam buffer or an org-ql buffer.&lt;/p&gt; &#xA;&lt;p&gt;** Screenshots&lt;/p&gt; &#xA;&lt;p&gt;[[images/demo1.gif]]&lt;/p&gt; &#xA;&lt;p&gt;[[images/demo2.gif]]&lt;/p&gt; &#xA;&lt;p&gt;** Installation TBD (quelpa, straight?)&lt;/p&gt; &#xA;&lt;p&gt;** Usage *** Commands/functions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;(org-roam-ql-nodes SOURCE-OR-QUERY)&lt;/del&gt; - Given a SOURCE-OR-QUERY, return a list of nodes. SOURCE-OR-QUERY can be one of the following:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A list of parameters that can be passed to &lt;del&gt;org-roam-db-query&lt;/del&gt;. Should be a list of the form &lt;del&gt;(QUERY ARG1 ARG2...)&lt;/del&gt;. The result of calling &lt;del&gt;org-roam-db-query&lt;/del&gt; with these parameters should return a list of records where the first element is the ID of a corresponding node. For example: #+begin_src emacs-lisp (org-roam-ql-nodes &#39;([:select [id] :from nodes :where (= todo &#34;TODO&#34;)])) #+end_src&lt;/li&gt; &#xA;   &lt;li&gt;A buffer or buffer-name of a &lt;del&gt;org-roam&lt;/del&gt; buffer or a &lt;del&gt;org-roam-ql&lt;/del&gt; buffer.&lt;/li&gt; &#xA;   &lt;li&gt;A function that returns a list of &lt;del&gt;org-roam-nodes&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A QUERY which can be passed to &lt;del&gt;org-roam-query&lt;/del&gt;, which in itself is a &lt;del&gt;org-ql&lt;/del&gt; predicate. #+begin_src emacs-lisp (org-roam-ql-nodes &#39;(and (todo &#34;TODO&#34;) (tags &#34;tag1&#34; &#34;tag2&#34;) &#34;&lt;em&gt;org-roam&lt;/em&gt;&#34;)) #+end_src The QUERY passed above would test on all org-roam-nodes returned by &lt;del&gt;(org-roam-nodes-list)&lt;/del&gt;. In the above example, the result would contain any nodes that have todo set to TODO, have tags &#34;tag1&#34; and &#34;tag2&#34; and is in the org-roam buffer. Currently, the query can have the following predicates: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;del&gt;(or ARG1 ARG2 ...)&lt;/del&gt; : Test if a node satisfies any of the parameters (when it&#39;s a predicate) or is contained in any of them (acceptable values for QUERY in &lt;del&gt;org-roam-ql-nodes&lt;/del&gt;). ARG1, ARG2, etc. are any other predicates or an acceptable value QUERY for &lt;del&gt;org-roam-ql-nodes&lt;/del&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(and ARG1 ARG2 ...)&lt;/del&gt; : Similar to &lt;del&gt;or&lt;/del&gt;, but should satisfy all conditions or contained in the result of acceptable values for QUERY.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(file REGEXP &amp;amp;optional EXACT)&lt;/del&gt; : Test if nodes file name matches REGEXP. If EXACT is non-nil, the file slot should be an exact match to REGEXP. Note the file slot of an org-roam-node would contain the absolute path.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(file-title REGEXP &amp;amp;optional EXACT)&lt;/del&gt; : Similar to &lt;del&gt;file&lt;/del&gt;, tests the file-title slot of a node.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(id ID)&lt;/del&gt; : Tests if the ID of a node is a match to the value passed.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(level LEVEL)&lt;/del&gt; : Tests if the level of a node is equal to LEVEL.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(todo REGEXP &amp;amp;optional EXACT)&lt;/del&gt; : Similar to &lt;del&gt;file&lt;/del&gt;, tests the todo state of a node.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(priority REGEXP &amp;amp;optional EXACT)&lt;/del&gt; : Similar to &lt;del&gt;file&lt;/del&gt;, tests the priority of a node.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(scheduled)&lt;/del&gt; : TBD&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(deadline)&lt;/del&gt; : TBD&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(title REGRXP &amp;amp;optional EXACT)&lt;/del&gt; : Similar to &lt;del&gt;file&lt;/del&gt;, tests the title of a node.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(properties PROP PROP-VAL)&lt;/del&gt; : Tests if the value of the property of a node PROP is a match to PROP-VAL. PROP-VAL can be a regular expression.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(tags TAG1 TAG2 ...)&lt;/del&gt; : Tests if the tags of a node have TAG1, TAG2, etc.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(refs REGEXP &amp;amp;optional EXACT)&lt;/del&gt; : Similar to &lt;del&gt;file&lt;/del&gt;, tests the nodes refs slot.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(backlink-to QUERY)&lt;/del&gt; : Tests if the node has a backlink to any of the nodes from the resulting QUERY. QUERY is acceptable value for &lt;del&gt;org-roam-ql-nodes&lt;/del&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(backlink-from QUERY)&lt;/del&gt; : Similar to &lt;del&gt;backlink-to&lt;/del&gt;, tests if there are any backlinks from (forwardlinks) the resulting nodes from QUERY.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(in-buffer BUFFER-NAME)&lt;/del&gt; : This is similar to passing a buffer-name to &lt;del&gt;org-roam-ql-nodes&lt;/del&gt;. Tests if a node is in the org-roam buffer named BUFFER-NAME.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(nodes-list NODES-LIST)&lt;/del&gt; : This is similar to passing a list of nodes to &lt;del&gt;org-roam-ql-nodes&lt;/del&gt;. Tests if a node is in the NODES-LIST.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(function FUNC)&lt;/del&gt; : This is similar to passing a function to &lt;del&gt;org-roam-ql-nodes&lt;/del&gt;. Tests if the node is in the result of executing the function FUNC.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;(funcall FUNC)&lt;/del&gt; : Tests a node with the function FUNC, which takes on parameter, a org-roam node. Test passes if the function returns non-nil.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;(org-roam-ql-defpred NAME EXTRACTION-FUNCTION COMPARISON-FUNCTION)&lt;/del&gt; - Creates a predicate that can be used in QUERY to &lt;del&gt;org-roam-ql-nodes&lt;/del&gt;. For example, for a predicate defined as follows: #+begin_src emacs-lisp (org-roam-ql-defpred sample extraction-func comparison-func) #+end_src&lt;/p&gt; &lt;p&gt;When the following predicate is used in the &lt;del&gt;QUERY&lt;/del&gt;: #+begin_src emacs-lisp (sample arg1 arg2) #+end_src&lt;/p&gt; &lt;p&gt;It tests each &lt;del&gt;node&lt;/del&gt; as follows: #+begin_src emacs-lisp (apply comparison-func (append (list (funcall extraction-func node)) arg1 arg2)) #+end_src&lt;/p&gt; &lt;p&gt;The &lt;del&gt;EXTRACTION-FUNCTION&lt;/del&gt; is a function that takes an org-roam-node and returns a value that will be passed as the first parameter to &lt;del&gt;COMPARISON-FUNCTION&lt;/del&gt;. The remainder of the parameters when calling the predicate is passed as remaining parameters &lt;del&gt;COMPARISON-FUNCTION&lt;/del&gt;. If the &lt;del&gt;COMPARITION-FUNCTION&lt;/del&gt; returns a non-nil value, it will be included in the result.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;(org-roam-ql-view SOURCE-OR-QUERY &amp;amp;optional TITLE QUERY SUPER-GROUPS)&lt;/del&gt; - This creates a &lt;del&gt;org-ql&lt;/del&gt; buffer with the nodes of the corresponding &lt;del&gt;SOURCE-OR-QUERY&lt;/del&gt; with &lt;del&gt;TITLE&lt;/del&gt;. Additionally, this also takes a &lt;del&gt;org-ql&lt;/del&gt; query, which will be used to further filter the results from the &lt;del&gt;SOURCE-OR-QUERY&lt;/del&gt;. &lt;del&gt;SOURCE-OR-QUERY&lt;/del&gt; is the same as &lt;del&gt;org-roam-ql-node&lt;/del&gt;. When called interactively. This can also be called interactively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;org-roam-ql-select&lt;/del&gt; - Similar to &lt;del&gt;org-ql-select&lt;/del&gt;. The first parameter is the same as &lt;del&gt;SOURCE-OR-QUERY&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;org-roam-ql-ql-buffer-from-roam-buffer&lt;/del&gt; - Displays the nodes in a org-roam-like-buffer in a &lt;del&gt;org-ql&lt;/del&gt; buffer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;org-roam-ql-roam-buffer-from-ql-buffer&lt;/del&gt; - Displays a &lt;del&gt;org-ql&lt;/del&gt; buffer, in a org-roam-like-buffer (uses the &lt;del&gt;org-roam-ql-mode&lt;/del&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>itamotchi/dotfiles</title>
    <updated>2023-06-07T01:35:29Z</updated>
    <id>tag:github.com,2023-06-07:/itamotchi/dotfiles</id>
    <link href="https://github.com/itamotchi/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>