<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-19T01:45:10Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rougier/nano-calendar</title>
    <updated>2023-07-19T01:45:10Z</updated>
    <id>tag:github.com,2023-07-19:/rougier/nano-calendar</id>
    <link href="https://github.com/rougier/nano-calendar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An alternative calendar for Emacs&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Nano calendar&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This library offers an alternative to calendar. It&#39;s very similar and offer only a few options, like the possibility to color day according to the number of item in the org-agenda.&lt;/p&gt; &#xA;&lt;p&gt;** Usage example&lt;/p&gt; &#xA;&lt;p&gt;Using a regular buffer:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;nano-calendar) (nano-calendar) (message (format-time-string &#34;%A %d %B %Y&#34;) (nano-calendar-current)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Using minibuffer:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;nano-calendar) (let ((date (nano-calendar-prompt))) (message (format-time-string &#34;%A %d %B %Y&#34;) date)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Screenshots&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 400 [[./nano-calendar.png]]&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 400 [[./nano-calendar-prompt.png]]&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zkry/tiktoken.el</title>
    <updated>2023-07-19T01:45:10Z</updated>
    <id>tag:github.com,2023-07-19:/zkry/tiktoken.el</id>
    <link href="https://github.com/zkry/tiktoken.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;tiktoken.el is an Emacs Lisp port of OpenAI&#39;s tiktoken library for BPE tokenization&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tiktoken.el: An Emacs Lisp port of BPE tokenizer tiktoken&lt;/h1&gt; &#xA;&lt;p&gt;tiktoken.el is a port of the widely used BPE tokenizer &lt;a href=&#34;https://github.com/openai/tiktoken&#34;&gt;tiktoken&lt;/a&gt;. It is capable of encoding and decoding using a variety of models. As many LLM applications are being build in Emacs, I thought it would be usefull to have a BPE to count the number of tokens used for these applications.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;tiktoken.el provides BPE tokenizers for a variety of OpenAI models. You can obtain the encoding object for a model as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(tiktoken-encoding-for-model &#34;gpt-3.5-turbo&#34;)&#xA;;; =&amp;gt; #s(tiktoken-encoding &#34;cl100_base&#34; ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The model data is fetched from a URL and saved locally according to the variable &lt;code&gt;tiktoken-cache-dir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you know the encoding you need, you can create it directly with the functions &lt;code&gt;(tiktoken-cl100k-base)&lt;/code&gt;, &lt;code&gt;(tiktoken-p50k-edit)&lt;/code&gt;, &lt;code&gt;(tiktoken-p50k-base)&lt;/code&gt;, or &lt;code&gt;(tiktoken-r50k-base)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you have the encoding object, you can use it to encode or decode text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(let ((enc (tiktoken-encoding-for-model &#34;gpt-3.5-turbo&#34;)))&#xA;&#xA;  (tiktoken-encode enc &#34;This is a test!&#34; nil)&#xA;  ;; =&amp;gt; (2028 374 264 1296 0)&#xA;&#xA;  (tiktoken-decode enc (tiktoken-encode enc &#34;This is a test!&#34; nil))&#xA;  ;; =&amp;gt; &#34;This is a test!&#34;&#xA;&#xA;  (tiktoken-count-tokens enc &#34;This is a test!&#34;)&#xA;  ;; =&amp;gt; 5&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using this library to count tokens, I would recommend using the function &lt;code&gt;tiktoken-count-tokens&lt;/code&gt; as it is much faster.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>json-emacs/json-mode</title>
    <updated>2023-07-19T01:45:10Z</updated>
    <id>tag:github.com,2023-07-19:/json-emacs/json-mode</id>
    <link href="https://github.com/json-emacs/json-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major mode for editing JSON files with emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;json-mode.el&lt;/h1&gt; &#xA;&lt;p&gt;Major mode for editing JSON files.&lt;/p&gt; &#xA;&lt;p&gt;Extends the builtin js-mode to add better syntax highlighting for JSON and some nice editing keybindings.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install json-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to have the &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA repository&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable repository&lt;/a&gt; enabled in emacs for this to work.&lt;/p&gt; &#xA;&lt;h2&gt;Default Keybindings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-f&lt;/code&gt;: format the region/buffer with &lt;code&gt;json-pretty-print&lt;/code&gt; (&lt;a href=&#34;https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/json.el&#34;&gt;https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/json.el&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: display a path to the object at point with &lt;code&gt;json-snatcher&lt;/code&gt; (&lt;a href=&#34;https://github.com/Sterlingg/json-snatcher&#34;&gt;https://github.com/Sterlingg/json-snatcher&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c P&lt;/code&gt;: copy a path to the object at point to the kill ring with &lt;code&gt;json-snatcher&lt;/code&gt; (&lt;a href=&#34;https://github.com/Sterlingg/json-snatcher&#34;&gt;https://github.com/Sterlingg/json-snatcher&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-t&lt;/code&gt;: Toggle between &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-k&lt;/code&gt;: Replace the sexp at point with &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-i&lt;/code&gt;: Increment the number at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-d&lt;/code&gt;: Decrement the number at point&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Indent Width&lt;/h2&gt; &#xA;&lt;p&gt;Customize &lt;code&gt;js-indent-level&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>