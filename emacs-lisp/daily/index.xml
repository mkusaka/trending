<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-13T01:21:14Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>meedstrom/quickroam</title>
    <updated>2024-04-13T01:21:14Z</updated>
    <id>tag:github.com,2024-04-13:/meedstrom/quickroam</id>
    <link href="https://github.com/meedstrom/quickroam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast org-roam commands&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Quickroam ** Is your org-roam slow?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re like me, you think [[https://github.com/org-roam/org-roam][org-roam]] has the right idea, but the current implementation is not reliable or fast enough for day-to-day work.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The end-user commands take 5 seconds to get the minibuffer ready.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A [[https://edstrom.dev/czdfr/org-roam-fixes#jxbqt][workaround by memoizing]] works well most of the time, but if I create a new node and immediately want to insert it elsewhere, I have to wait for an idle timer to update the memoization.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Very large Org files take 10 seconds to save with =org-roam-db-autosync-mode=.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I can turn the mode off, but then I need to manually run =M-x org-roam-db-sync= every now and then! Not great when I&#39;m in the zone and writing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As best I can tell by reading the source code, problems #1 and #2 are totally separate. Problem #1 /should/ be fixable, but #2 arises from the fact that org-roam is very generalized -- for example, it lets you plug in user-defined functions to exclude or include a node. That&#39;s nice and hackable, but it means that org-roam is forced to use Org functions to &#34;properly&#34; parse every file it scans, incurring all the penalties of doing so.&lt;/p&gt; &#xA;&lt;p&gt;** Fix&lt;/p&gt; &#xA;&lt;p&gt;This package provides alternatives to common commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-roam-node-find= -- use =quickroam-find=&lt;/li&gt; &#xA; &lt;li&gt;=org-roam-node-insert= -- use =quickroam-insert=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They don&#39;t look up the org-roam DB at all, just rely on ripgrep. They&#39;re fast, fixing problem #1, and they always find up-to-date hits, which means you can set =org-roam-db-update-on-save= to nil to fix problem #2.&lt;/p&gt; &#xA;&lt;p&gt;If you do the #2 fix, be aware that backlinks won&#39;t update until you run =M-x org-roam-db-sync RET=.&lt;/p&gt; &#xA;&lt;p&gt;** Setup&lt;/p&gt; &#xA;&lt;p&gt;Install [[https://github.com/BurntSushi/ripgrep][ripgrep]] on your computer. Then add to Emacs initfiles something like this, assuming you install packages with [[https://github.com/radian-software/straight.el][straight.el]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (use-package quickroam :straight (quickroam :type git :host github :repo &#34;meedstrom/quickroam&#34;) :defer t)&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;org-mode-hook #&#39;quickroam-enable) (global-set-key (kbd &#34;&#xA; &lt;f2&gt;&#xA;   f&#34;) #&#39;quickroam-find) ;; or whatever key you use (global-set-key (kbd &#34;&#xA;  &lt;f2&gt;&#xA;    i&#34;) #&#39;quickroam-insert) #+end_src&#xA;  &lt;/f2&gt;&#xA; &lt;/f2&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Future work&lt;/p&gt; &#xA;&lt;p&gt;This package is a proof-of-concept that ripgrep can collect part of the data needed by the org-roam DB. However, simple regexps cannot collect all that&#39;s needed. Some challenges:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;TODO/DONE keywords&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Need awareness of buffer-local =#+seq_todo= settings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;The outline path&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;What it&#39;s used for: &lt;a href=&#34;https://fosstodon.org/@nickanderson/112249581810196258&#34;&gt;https://fosstodon.org/@nickanderson/112249581810196258&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Backlink context&lt;/em&gt;: the name of the subtree-node in which a link is found&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pretty important since backlinks butter our bread, right?&lt;/li&gt; &#xA;   &lt;li&gt;If we mandated the rule of &#34;one file, one node&#34; like zk/orgrr/denote do, we&#39;d only need to grab the file title. But that&#39;s not why we&#39;re here. Org-roam&#39;s nested nodes are the best thing since sliced bread, but they need us to parse the Org syntax. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;One option is to satisfice with a poor-man&#39;s backlinks buffer by letting it just show, say, 2 lines above and below each link, reminiscent of a diff output.&lt;/li&gt; &#xA;     &lt;li&gt;Another option is to /cache the backlinks/ as a property or drawer(!) like [[https://github.com/toshism/org-super-links][org-super-links]] does.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can see all the data org-roam collects in [[https://github.com/org-roam/org-roam/blob/v2.2.2/org-roam-db.el#L229][org-roam-db--table-schemata]].&lt;/p&gt; &#xA;&lt;p&gt;Three ways forward:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t parse Org syntax, and compromise on the kinds of data to collect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep parsing Org syntax, but do it faster.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Maybe rewrite =org-roam-db-update-file= to scan the buffer with [[https://github.com/alphapapa/org-ql][org-ql]]? Don&#39;t know if it&#39;d be faster.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Parse Org syntax ahead-of-time.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;View the SQLite database as a first-order cache, and create a second-order cache consisting of the org-super-links approach mentioned earlier. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;It&#39;s a powerful concept! Record directly into property drawers everything that&#39;s /impossible to write a regexp for/, so you can later just grep the values. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Now syncing the DB has been reduced to a job for grep. No lines of Org code need to run. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;We could even get rid of the DB, since ripgrep-based &#34;queries&#34; would likely be fast. &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;SQL queries are a handy tool for package devs, so we could still keep the DB and just rebuild it much more often rather than risk stale data. There definitely needs to be /a/ query language to use, so if we scrap it, we should make sure everything can be done in [[https://github.com/alphapapa/org-ql][org-ql]]. In fact, alphapapa has expressed interest in giving org-ql a SQL backend, so it&#39;s a promising place for synergy to happen!&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;Caveat: we must wrap many user commands. Let&#39;s say you record the subtree&#39;s outline path as a property =:OLP:=, and every time you indent or outdent a subtree, some advice automatically updates this property. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;In real life, we can&#39;t trust that 100% of the time, so it&#39;d be good to have a command to validate all the properties in all files. It&#39;s still a win because you don&#39;t need to run such code on /every/ =(org-roam-db-sync &#39;force)=, you&#39;d just run it as a kind of linter once a month!&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Thanks&lt;/p&gt; &#xA;&lt;p&gt;Inspired by [[https://emacs.ch/@laotang/112139767286378879][a Mastodon conversation]] with the [[https://github.com/rtrppl/orgrr][orgrr]] author :)&lt;/p&gt;</summary>
  </entry>
</feed>