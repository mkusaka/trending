<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-12-31T01:30:07Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ocaml/tuareg</title>
    <updated>2025-12-31T01:30:07Z</updated>
    <id>tag:github.com,2025-12-31:/ocaml/tuareg</id>
    <link href="https://github.com/ocaml/tuareg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs OCaml mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://elpa.nongnu.org/nongnu/tuareg.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/tuareg.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/tuareg&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/tuareg-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packages.debian.org/stable/elpa-tuareg&#34;&gt;&lt;img src=&#34;https://badges.debian.net/badges/debian/stable/elpa-tuareg/version.svg?sanitize=true&#34; alt=&#34;DebianBadge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ocaml/tuareg/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL&amp;nbsp;3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ocaml/tuareg/actions?query=workflow%3Atest&#34;&gt;&lt;img src=&#34;https://github.com/ocaml/tuareg/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tuareg: an Emacs OCaml mode&lt;/h1&gt; &#xA;&lt;p&gt;This archive contains files to help editing &lt;a href=&#34;http://ocaml.org/&#34;&gt;OCaml&lt;/a&gt; code, to highlight important parts of the code, to run an OCaml &lt;a href=&#34;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&#34;&gt;REPL&lt;/a&gt; (also called &lt;em&gt;toplevel&lt;/em&gt;), and to run the OCaml debugger within Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Package Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;README.md&lt;/code&gt; — This file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HISTORY&lt;/code&gt; — Differences with previous versions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tuareg.el&lt;/code&gt; — A major mode for editing OCaml code in Emacs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ocamldebug.el&lt;/code&gt; — To run the OCaml debugger under Emacs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sample.ml&lt;/code&gt; — Sample file to check the indentation engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compilation.txt&lt;/code&gt; — To check the compilation regexp &lt;code&gt;tuareg--error-regexp&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;The easier way to install Tuareg is though the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html&#34;&gt;Emacs package system&lt;/a&gt; with &lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; or &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; (&lt;a href=&#34;https://melpa.org/#/getting-started&#34;&gt;configuration&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can also install it using &lt;a href=&#34;http://opam.ocaml.org/&#34;&gt;OPAM&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;opam install tuareg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and follow the instructions given at the end of the &lt;code&gt;opam&lt;/code&gt; installation.&lt;/p&gt; &#xA;&lt;p&gt;If you want to install from the Git checkout, just add to your &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;Init File&lt;/a&gt; the line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(load &#34;path-to-git-checkout-dir/tuareg-site-file&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to byte compile the files, issue &lt;code&gt;make elc&lt;/code&gt;. If you do this in Darwin, make sure that the version of Emacs displayed at the end of &lt;code&gt;make elc&lt;/code&gt; is the sole that you use (the &lt;code&gt;.elc&lt;/code&gt; files may not be compatible with other versions of Emacs installed on your system).&lt;/p&gt; &#xA;&lt;h2&gt;Usage &amp;amp; Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The Tuareg major mode is triggered by visiting a file with extension &lt;code&gt;.ml&lt;/code&gt;, &lt;code&gt;.mli&lt;/code&gt;, and &lt;code&gt;.mlp&lt;/code&gt; or manually by &lt;kbd&gt;M-x tuareg-mode&lt;/kbd&gt;. A &lt;a href=&#34;http://gallium.inria.fr/~fpottier/menhir/&#34;&gt;Menhir&lt;/a&gt; mode, &lt;code&gt;tuareg-menhir&lt;/code&gt;, supports &lt;code&gt;.mly&lt;/code&gt; files. (A special mode for &lt;code&gt;.mll&lt;/code&gt; has yet to be written.)&lt;/p&gt; &#xA;&lt;p&gt;For the convenience of users of &lt;a href=&#34;http://ocsigen.org/&#34;&gt;ocsigen&lt;/a&gt;, the extensions &lt;a href=&#34;http://ocsigen.org/eliom/&#34;&gt;&lt;code&gt;.eliom&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;.eliomi&lt;/code&gt; trigger &lt;code&gt;tuareg-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Start the OCaml REPL with &lt;kbd&gt;M-x run-ocaml&lt;/kbd&gt;. To evaluate a phrase, simply type &lt;kbd&gt;S-⟨return⟩&lt;/kbd&gt; (&lt;kbd&gt;shift&lt;/kbd&gt; and &lt;kbd&gt;return&lt;/kbd&gt;). You can also evaluate a phrase in a different buffer by typing &lt;kbd&gt;C-c C-e&lt;/kbd&gt; when the cursor is on it (it will start the OCaml REPL if needed).&lt;/p&gt; &#xA;&lt;p&gt;Run the OCaml debugger with &lt;kbd&gt;M-x ocamldebug FILE&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tips &amp;amp; customization&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can comment/uncomment a single line with &lt;code&gt;tuareg-comment-dwim&lt;/code&gt; which is bound to &lt;kbd&gt;C-cC-;&lt;/kbd&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;By default, Tuareg will align the arguments of functions as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  function_name arg1&#xA;    arg2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is what most OCaml programmers expect and is convenient if you use the following style:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  function_name (fun x -&amp;gt;&#xA;      do_something&#xA;    )&#xA;    arg2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you prefer the “lisp style” indentation in which arguments on the second line are aligned with the arguments on the first line as in&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  function_name arg1&#xA;                arg2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;put &lt;code&gt;(setq tuareg-indent-align-with-first-arg t)&lt;/code&gt; in your &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;Init File&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In both cases, if there are no argument on the line following the function name, the indentation will be:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  function_name&#xA;    arg1&#xA;    arg2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To make easier to distinguish pattern-match cases containing several patterns, sub-patterns are slightly indented as in&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  match x with&#xA;  | A&#xA;    | B -&amp;gt; ...&#xA;  | C -&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you prefer all pipes to be aligned as&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  match x with&#xA;  | A&#xA;  | B -&amp;gt; ...&#xA;  | C -&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;use &lt;code&gt;(setq tuareg-match-patterns-aligned t)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Emacs ≥ 24.4 turned on &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Indent-Convenience.html&#34;&gt;electric-indent-mode&lt;/a&gt; mode by default. If you do not like it, call &lt;code&gt;(electric-indent-mode 0)&lt;/code&gt; in &lt;code&gt;tuareg-mode-hook&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tuareg respects you default commenting style. However, in OCaml, commenting a region is usually done with a single multi-line comment and without leading stars on each line. You can have that behavior in OCaml buffers by setting:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  (add-hook &#39;tuareg-mode-hook&#xA;            (lambda()&#xA;              (setq-local comment-style &#39;multi-line)&#xA;              (setq-local comment-continue &#34;   &#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you turn on &lt;code&gt;show-paren-mode&lt;/code&gt;, the delimiters of comments will also be highlighted. If you do not like this behavior, set &lt;code&gt;tuareg-comment-show-paren&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Syntax highlighting has 3 levels. You can select the one you prefer by setting &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html&#34;&gt;font-lock-maximum-decoration&lt;/a&gt; from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;2&lt;/code&gt;. By default, &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html&#34;&gt;font-lock-maximum-decoration&lt;/a&gt; is set to &lt;code&gt;t&lt;/code&gt; which means that the maximum level of decoration will be used.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Fontifying all operators (as opposed to only non-standard ones) is a costly operation that slows down font-lock. This is why it is disabled by default. If you nonetheless want it, set &lt;code&gt;tuareg-highlight-all-operators&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; in your &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;Init File&lt;/a&gt; (before &lt;code&gt;tuareg-mode&lt;/code&gt; is initialized; in particular, not in a hook added to &lt;code&gt;&#39;tuareg-mode-hook&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can turn on and off the rendering of certain sequences of characters as symbols (such as &lt;code&gt;∔&lt;/code&gt; and &lt;code&gt;∧&lt;/code&gt; instead of &lt;code&gt;+.&lt;/code&gt;and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;), use &lt;code&gt;prettify-symbols-mode&lt;/code&gt; or use the check box in the &lt;em&gt;Tuareg Options&lt;/em&gt; menu. To enable it by default when you start Tuareg, add the following to your &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;Init File&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  (add-hook &#39;tuareg-mode-hook&#xA;            (lambda()&#xA;              (when (functionp &#39;prettify-symbols-mode)&#xA;                (prettify-symbols-mode))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want more symbols to be prettified (such as &lt;code&gt;-&amp;gt;&lt;/code&gt; being displayed as &lt;code&gt;→&lt;/code&gt;) at the expense of modifying the indentation in incompatible ways with those not using that option, add &lt;code&gt;(setq tuareg-prettify-symbols-full t)&lt;/code&gt; to your &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;Init File&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;By default, constructors are highlighted with the default face because having too many colors is distracting. If you wish to customize the appearance of constructors, add to your &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;Init File&lt;/a&gt; the following code adapted to your tastes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  (face-spec-set&#xA;   &#39;tuareg-font-lock-constructor-face&#xA;   &#39;((((class color) (background light)) (:foreground &#34;SaddleBrown&#34;))&#xA;     (((class color) (background dark)) (:foreground &#34;burlywood1&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To have a list of definitions in the buffer, use &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&#34;&gt;imenu&lt;/a&gt;. It is available by right clicking in the buffer. You can also launch the &lt;code&gt;speedbar&lt;/code&gt; and click on file to have a list of definitions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you wish to have a nice 🐫 as the mode name, add&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  (add-hook &#39;tuareg-mode-hook&#xA;            (lambda() (setq tuareg-mode-name &#34;🐫&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to your &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;Init File&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to the work of Stefan Monnier, a new indentation engine based on &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE.html&#34;&gt;SMIE&lt;/a&gt; was written. This changes the indentation somewhat w.r.t. the previous versions of &lt;code&gt;tuareg&lt;/code&gt;. If the indentation does not correspond to what you expect, please submit a &lt;a href=&#34;https://github.com/ocaml/tuareg/issues/&#34;&gt;motivated issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The standard Emacs customization tool can be used to configure Tuareg options. It is available from the Options menu and Tuareg&#39;s Customize sub-menu. Note that, at the moment, both customization options pertaining to the SMIE indentation mode and the old one are present.&lt;/p&gt; &#xA;&lt;p&gt;You may also customize the appearance of OCaml code by twiddling the variables listed at the start of tuareg.el (preferably using &lt;code&gt;tuareg-mode-hook&lt;/code&gt;, you should not patch the file directly). You should then add to your configuration file something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;tuareg-mode-hook&#xA;  (lambda () ... ; your customization code ))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;tuareg-mode-hook&#xA;          ;; Turn on auto-fill minor mode.&#xA;          #&#39;auto-fill-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ocaml/tuareg/master/dot-emacs.el&#34;&gt;dot-emacs.el&lt;/a&gt; for some examples.&lt;/p&gt; &#xA;&lt;h2&gt;Additional packages&lt;/h2&gt; &#xA;&lt;h3&gt;Merlin&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to install &lt;a href=&#34;https://github.com/ocaml/merlin&#34;&gt;Merlin&lt;/a&gt; which is available in &lt;a href=&#34;http://opam.ocaml.org/&#34;&gt;OPAM&lt;/a&gt;. Tuareg will automatically detect it and use some of its features (e.g. for &lt;em&gt;imenu&lt;/em&gt;). Merlin offers auto-completion, the possibility to query the type with &lt;kbd&gt;C-cC-t&lt;/kbd&gt;, to find the location of an identifier with &lt;kbd&gt;C-cC-l&lt;/kbd&gt;, to go to the next (resp.&amp;nbsp;previous) phrase with &lt;kbd&gt;C-cC-n&lt;/kbd&gt; (resp.&amp;nbsp;&lt;kbd&gt;C-cC-p&lt;/kbd&gt;),... Highly recommended.&lt;/p&gt; &#xA;&lt;h3&gt;opam-switch-mode&lt;/h3&gt; &#xA;&lt;p&gt;If you happen to work with several switches, it is recommended to install &lt;a href=&#34;https://github.com/ProofGeneral/opam-switch-mode&#34;&gt;opam-switch-mode&lt;/a&gt; (available in &lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; and &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;). This minor mode defines a command &lt;kbd&gt;M-x opam-switch-set-switch&lt;/kbd&gt; as well as a menu-bar and a mode-bar menu &#34;OPSW&#34;, to easily select another OPAM switch. Upon such a change, a hook kills the running OCaml toplevel, if any, so that the next eval command is run using the OCaml toplevel from the new switch.&lt;/p&gt; &#xA;&lt;h3&gt;Caml mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ocaml/caml-mode&#34;&gt;caml-mode&lt;/a&gt; (available in &lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; and &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;) is used to display types (using the obsolete &lt;code&gt;*.annot&lt;/code&gt; files), open a module for documentation,...&lt;/p&gt; &#xA;&lt;h2&gt;Reporting&lt;/h2&gt; &#xA;&lt;p&gt;The official Tuareg home page is located at: &lt;a href=&#34;https://github.com/ocaml/tuareg&#34;&gt;https://github.com/ocaml/tuareg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bug reports &amp;amp; patches: use the tracker: &lt;a href=&#34;https://github.com/ocaml/tuareg/issues&#34;&gt;https://github.com/ocaml/tuareg/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Ian Zimmerman for the previous mode, compilation interface and debugger enhancement.&lt;/p&gt; &#xA;&lt;p&gt;Jacques Garrigue enhanced Zimmerman&#39;s mode along with an adaptation to OCaml (and Labl) syntax. Although this work was performed independently, his useful test file and comments were of great help.&lt;/p&gt; &#xA;&lt;p&gt;Michel Quercia for excellent suggestions, patches, and helpful emacs-lisp contributions (full, ready-to-work implementations, I should say), especially for Tuareg interactive mode, and browser capacities.&lt;/p&gt; &#xA;&lt;p&gt;Denis Barthou, Pierre Boulet, Jean-Christophe Filliatre and Rémi Vanicat for intensive testing, useful suggestions, and help.&lt;/p&gt; &#xA;&lt;p&gt;Ralf Treinen for maintaining the Debian GNU/Linux package.&lt;/p&gt; &#xA;&lt;p&gt;Every people who sent me bug reports, suggestions, comments and patches. Nothing would have improved since version 0.9.2 without their help. Special thanks to Eli Barzilay, Josh Berdine, Christian Boos, Carsten Clasohm, Yann Coscoy, Prakash Countcham, Alvarado Cuihtlauac, Erwan David, Gilles Défourneaux, Philippe Esperet, Gilles Falcon, Tim Freeman, Alain Frisch, Christian Lindig, Claude Marché, Charles Martin, Dave Mason, Stefan Monnier, Toby Moth, Jean-Yves Moyen, Alex Ott, Christopher Quinn, Ohad Rodeh, Rauli Ruohonen, Hendrik Tews, Christophe Troestler, Joseph Sudish, Mattias Waldau and John Whitley.&lt;/p&gt; &#xA;&lt;p&gt;Tuareg mode have been maintained by Albert Cohen until version 1.45.&lt;/p&gt; &#xA;&lt;p&gt;Jane Street took over maintenance based on Albert Cohen&#39;s version 1.46 (later retracted by him), and released its first version as 2.0.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Tuareg is distributed under the GNU General Public License, version 3 or later.&lt;/p&gt;</summary>
  </entry>
</feed>