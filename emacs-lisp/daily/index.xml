<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-29T01:42:43Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VernonGrant/sidekick.el</title>
    <updated>2022-06-29T01:42:43Z</updated>
    <id>tag:github.com,2022-06-29:/VernonGrant/sidekick.el</id>
    <link href="https://github.com/VernonGrant/sidekick.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sidekick is a Emacs package that provides information about a symbol inside a single window.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sidekick.el&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;------------------------------&#xA;------------ ----    ----&#xA;************ ****   ****&#xA;----         ----  ----&#xA;************ *********       SIDEKICK&#xA;------------ ---------    --------------&#xA;       ***** ****  ****&#xA;------------ ----   ----&#xA;************ ****    ****&#xA;------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sidekick is an &lt;strong&gt;Emacs package&lt;/strong&gt; that&#39;s aim is to provide information about a symbol inside a single window. &lt;strong&gt;It&#39;s still in its infancy&lt;/strong&gt;, and at this point in time only searches for references using &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;. It will however be in active development and I hope to extend it in the near future to support things such as getting a symbols documentation and extracting other time saving information.&lt;/p&gt; &#xA;&lt;p&gt;If you experience any issues or there&#39;s a feature you would like to recommend, please open a &lt;a href=&#34;https://github.com/VernonGrant/sidekick.el/issues/new&#34;&gt;new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VernonGrant/sidekick.el/main/assets/images/sidekick.png&#34; alt=&#34;Screenshot of sidekick&#34; title=&#34;Sidekick for Emacs&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Important: &lt;strong&gt;ripgrep (rg) is required!&lt;/strong&gt; Please make sure you have it installed and available in your system path, see &lt;a href=&#34;https://github.com/BurntSushi/ripgrep#installation&#34;&gt;Installing ripgrep&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Manual installation&lt;/h4&gt; &#xA;&lt;p&gt;Clone this repository locally, and add the load path to your &lt;code&gt;.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/sidekick.el/folder/&#34;)&#xA;(require &#39;sidekick)&#xA;&#xA;;; If your part of the dark side (Evil User), uncomment this:&#xA;;; (with-eval-after-load &#39;sidekick (require &#39;sidekick-evil))&#xA;&#xA;;; Set some default bindings.&#xA;(global-set-key (kbd &#34;C-c k&#34;) &#39;sidekick-at-point)&#xA;(global-set-key (kbd &#34;C-c K&#34;) &#39;sidekick-focus-toggle)&#xA;(global-set-key (kbd &#34;C-c C-k&#34;) &#39;sidekick-search-for-literal)&#xA;&#xA;;; Optional:&#xA;;; Maybe customize a mode&#39;s file assosiations?&#xA;(sidekick-set-file-associations &#34;php-mode&#34; &#34;*.{php,twig,blade,phtml}&#34;)&#xA;&#xA;;; Note, on Windows, use this path format:&#xA;;; (add-to-list &#39;load-path &#34;C:\\Users\\your-name\\path\\to\\sidekick.el\\folder\\&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Default key bindings&lt;/h4&gt; &#xA;&lt;p&gt;The following keybindings are available inside the Sidekick window/mode.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-quit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Closes the Sidekick window and kills it&#39;s buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-refresh&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Re-runs the previous operations, refreshing the results.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-open-next-match&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays the next match.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-open-previous-match&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays the previous match.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-open-match&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go&#39;s directly to the matched symbol.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can customize keybindings that are local to the Sidekick window, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Adding custom Sidekick window local bindings.&#xA;(add-hook &#39;sidekick-mode-hook&#xA;  (lambda ()&#xA;   (local-set-key (kbd &#34;&amp;lt;up&amp;gt;&#34;) &#39;sidekick-open-previous-match)&#xA;   (local-set-key (kbd &#34;&amp;lt;down&amp;gt;&#34;) &#39;sidekick-open-next-match)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Unbound commands&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-at-point&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Takes the symbol at point and triggers the update call.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-focus&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focuses on the Sidekick window, if visible.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-focus-toggle&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle between sidekick window and previous buffer&#39;s window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-search-for-literal&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Input a literal string and triggers the update call.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can define custom key bindings for any of the above commands. See the below example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(global-set-key (kbd &#34;C-c k&#34;) &#39;sidekick-at-point)&#xA;(global-set-key (kbd &#34;C-c K&#34;) &#39;sidekick-focus-toggle)&#xA;(global-set-key (kbd &#34;C-c C-k&#34;) &#39;sidekick-search-for-literal)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Evil key bindings&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-quit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Closes the Sidekick window and kills it&#39;s buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-refresh&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Re-runs the previous operations, refreshing the results.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-open-next-match&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays the next match.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-open-previous-match&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays the previous match.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;sidekick-open-match&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go&#39;s directly to the matched symbol.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;Evil-mode&lt;/a&gt; integration is provided by &lt;code&gt;sidekick-evil&lt;/code&gt;. Use the following to load it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Add this line after (require &#39;sidekick).&#xA;(with-eval-after-load &#39;sidekick (require &#39;sidekick-evil))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h4&gt;How the projects root directory is determined&lt;/h4&gt; &#xA;&lt;p&gt;A projects root directory is determined by having one of the following files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A file named &lt;code&gt;.sidekick&lt;/code&gt; &lt;em&gt;(highest priority)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;A file named &lt;code&gt;.projectile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A git repository &lt;code&gt;.git&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Available customizations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sidekick-search-minimum-symbol-length:&lt;/strong&gt; The minimum symbol / term length in order for Sidekick to update. The lowest number possible is 2.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: integer&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Example: &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq sidekick-search-minimum-symbol-length 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sidekick-search-max-line-length:&lt;/strong&gt; The maximum line width of a search result in columns. Useful for to limit large minified files.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: integer&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;500&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Example: &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq sidekick-search-max-line-length 1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sidekick-window-take-focus:&lt;/strong&gt; If non-nil, automatically select the sidekick window after every update.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: boolean&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;t&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Example: &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq sidekick-window-take-focus nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sidekick-window-width:&lt;/strong&gt; The width of the sidekick window in normalized percentage.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: float&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;0.3&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Example: &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq sidekick-window-width 0.225)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sidekick-window-side:&lt;/strong&gt; The Sidekick window position, left or right.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: symbol&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;&#39;right&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Example: &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq sidekick-window-side &#39;left)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sidekick-window-hide-footer:&lt;/strong&gt; Remove the Sidekick footer branding.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: boolean&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Example: &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq sidekick-window-hide-footer t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Modifying a mode&#39;s associated files&lt;/h4&gt; &#xA;&lt;p&gt;The blow list specifies the default mode - file associations. &lt;strong&gt;If the provided glob pattern is an empty string, Sidekick will just search for files with the same extension as the active buffer&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;Files&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c++-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.{cpp,h,hh}&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.{c,cc,h,hh}&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cperl-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.{pl,PL}&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;css-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.{css,sass,scss}&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;emacs-lisp-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.{el,emacs}&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;go-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.go&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;java-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.java&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;js-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.{js,es,es6}&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;markdown-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.md&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;text-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.txt&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.{php,phtml,twig}&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;phps-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.{php,phtml,twig}&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;python-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.py&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ruby-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.rb&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rust-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.rs&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;typescript-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.ts&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;web-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xml-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.xml&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yaml-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;*.yml&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To add or update an existing mode&#39;s file associations, the following helper function has been provided. See the below usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Adds a new mode, glob pair.&#xA;(sidekick-set-file-associations &#34;example-mode&#34; &#34;*.{exam,examp}&#34;)&#xA;&#xA;;; Replace an existing mode&#39;s file globs.&#xA;(sidekick-set-file-associations &#34;php-mode&#34; &#34;*.{php,blade,twig}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The following tools and educational resources where invaluable during the development of this package.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VernonGrant/sidekick.el/raw/main/CONTRIBUTORS.md&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fsf.org/&#34;&gt;Free Software Foundation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xah Lee, author of &lt;a href=&#34;http://xahlee.info/emacs/index.html&#34;&gt;Xah Emacs Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mickey Petersen, author of &lt;a href=&#34;https://www.masteringemacs.org/&#34;&gt;Mastering Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrew Gallant (BurntSushi), creator of &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yoshiki/yaml-mode</title>
    <updated>2022-06-29T01:42:43Z</updated>
    <id>tag:github.com,2022-06-29:/yoshiki/yaml-mode</id>
    <link href="https://github.com/yoshiki/yaml-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The emacs major mode for editing files in the YAML data serialization format.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;RECRUITMENTS I have not used emacs and this library for a long time, so I recruit maintainers or collaborators for all yaml-mode users. If you are interested in maintaining or collaborating with this library, please contact me.&lt;/p&gt; &#xA;&lt;p&gt;NAME yaml-mode - Simple major mode to edit YAML file for emacs&lt;/p&gt; &#xA;&lt;p&gt;REQUIREMENTS Emacs 24.1&lt;/p&gt; &#xA;&lt;p&gt;SYNOPSIS To install, just drop this file into a directory in your `load-path&#39; and (optionally) byte-compile it. To automatically handle files ending in &#39;.yml&#39;, add something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;yaml-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.yml\\&#39;&#34; . yaml-mode))&#xA;&#xA;to your .emacs file.&#xA;&#xA;Unlike python-mode, this mode follows the Emacs convention of not&#xA;binding the ENTER key to `newline-and-indent&#39;.  To get this&#xA;behavior, add the key definition to `yaml-mode-hook&#39;:&#xA;&#xA;(add-hook &#39;yaml-mode-hook&#xA;  &#39;(lambda ()&#xA;    (define-key yaml-mode-map &#34;\C-m&#34; &#39;newline-and-indent)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DESCRIPTION yaml-mode is major mode for emacs.&lt;/p&gt; &#xA;&lt;p&gt;INSTALL You can install yaml-mode typing below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    % make&#xA;    % make install&#xA;&#xA;    or&#xA;&#xA;    % make PREFIX=/your/home/dir&#xA;    % make install PREFIX=/your/home/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SETTING see SYNOPSIS.&lt;/p&gt; &#xA;&lt;p&gt;AUTHOR Yoshiki Kurihara &lt;a href=&#34;mailto:kurihara@cpan.org&#34;&gt;kurihara@cpan.org&lt;/a&gt; Copyright (C) 2010 by Free Software Foundation, Inc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This file is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This file is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with GNU Emacs.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>immerrr/lua-mode</title>
    <updated>2022-06-29T01:42:43Z</updated>
    <id>tag:github.com,2022-06-29:/immerrr/lua-mode</id>
    <link href="https://github.com/immerrr/lua-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs major mode for editing Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lua mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/immerrr/lua-mode&#34;&gt;&lt;img src=&#34;https://travis-ci.org/immerrr/lua-mode.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/lua-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lua-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/lua-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/lua-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;lua-mode&lt;/strong&gt; is a major mode for editing Lua sources in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem or a suggestion about &lt;strong&gt;lua-mode&lt;/strong&gt;, please, let me know about it via github&#39;s &lt;a href=&#34;https://github.com/immerrr/lua-mode/issues&#34;&gt;Issue Tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;h3&gt;MELPA INSTALLATION&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;lua-mode&lt;/strong&gt;&#39;s officially supported installation method is from &lt;a href=&#34;https://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt; archive.&lt;/p&gt; &#xA;&lt;p&gt;To get started, enable installing packages from MELPA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fetch the list of packages you can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;M-x&amp;gt; package-refresh-contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And after that &lt;strong&gt;lua-mode&lt;/strong&gt; can be installed with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;M-x&amp;gt; package-install &#34;lua-mode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please, refer to &lt;a href=&#34;https://melpa.org/#/getting-started&#34;&gt;MELPA documentation&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html&#34;&gt;Emacs documentation on packages&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h3&gt;EL-GET INSTALLATION&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;El-get&lt;/a&gt; is a package manager which greatly simplifies adding modules to your Emacs and keeping them up-to-date. Once you have &lt;strong&gt;el-get&lt;/strong&gt; set up, &lt;strong&gt;lua-mode&lt;/strong&gt; can also be installed with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;M-x&amp;gt; el-get-install &#34;lua-mode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and updating is no more than&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;M-x&amp;gt; el-get-update &#34;lua-mode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please, consult with &lt;a href=&#34;https://github.com/dimitri/el-get/raw/master/README.md&#34;&gt;el-get documentation&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h3&gt;MANUAL INSTALLATION&lt;/h3&gt; &#xA;&lt;p&gt;To install, you need to make sure that &lt;code&gt;lua-mode.el&lt;/code&gt; is on your load-path (and optionally byte-compile it) and to set up Emacs to automatically enable &lt;strong&gt;lua-mode&lt;/strong&gt; for &lt;code&gt;*.lua&lt;/code&gt; files or ones that contain lua hash-bang line (&lt;code&gt;#!/usr/bin/lua&lt;/code&gt;). Putting this snippet to &lt;code&gt;.emacs&lt;/code&gt; should be enough in most cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;    ;;;; This snippet enables lua-mode&#xA;&#xA;    ;; This line is not necessary, if lua-mode.el is already on your load-path&#xA;    (add-to-list &#39;load-path &#34;/path/to/directory/where/lua-mode-el/resides&#34;)&#xA;&#xA;    (autoload &#39;lua-mode &#34;lua-mode&#34; &#34;Lua editing mode.&#34; t)&#xA;    (add-to-list &#39;auto-mode-alist &#39;(&#34;\\.lua$&#34; . lua-mode))&#xA;    (add-to-list &#39;interpreter-mode-alist &#39;(&#34;lua&#34; . lua-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FEATURES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;syntactic indentation &amp;amp; highlighting (including multiline literals/comments)&lt;/li&gt; &#xA; &lt;li&gt;evaluation of lines/regions/functions/files in Lua subprocess or direct interaction with its REPL&lt;/li&gt; &#xA; &lt;li&gt;documentation lookup (using online/offline reference manual, e.g. &lt;a href=&#34;http://www.lua.org/manual/5.1/manual.html#pdf-string.find&#34;&gt;string.find&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&#34;&gt;imenu&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Hideshow.html&#34;&gt;HideShow&lt;/a&gt; integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CUSTOMIZATION&lt;/h2&gt; &#xA;&lt;p&gt;The following variables are available for customization (see more via &lt;code&gt;M-x customize-group lua&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-indent-level&lt;/code&gt; (default &lt;code&gt;3&lt;/code&gt;): indentation offset in spaces&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-indent-string-contents&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;): set to &lt;code&gt;t&lt;/code&gt; if you like to have contents of multiline strings to be indented like comments&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-indent-nested-block-content-align&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) set to &lt;code&gt;nil&lt;/code&gt; to stop aligning the content of nested blocks with the open parenthesis&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-indent-close-paren-align&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) set to &lt;code&gt;t&lt;/code&gt; to align close parenthesis with the open parenthesis rather than with the beginning of the line&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-mode-hook&lt;/code&gt;: list of functions to execute when lua-mode is initialized&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-documentation-url&lt;/code&gt; (default &lt;code&gt;&#34;http://www.lua.org/manual/5.1/manual.html#pdf-&#34;&lt;/code&gt;): base URL for documentation lookup&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-documentation-function&lt;/code&gt; (default &lt;code&gt;browse-url&lt;/code&gt;): function used to show documentation (&lt;code&gt;eww&lt;/code&gt; is a viable alternative for Emacs 25)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LUA SUBPROCESS CREATION&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-default-application&lt;/code&gt; (default &lt;code&gt;&#34;lua&#34;&lt;/code&gt;): command to start up the subprocess (REPL)&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-default-command-switches&lt;/code&gt; (default &lt;code&gt;&#34;-i&#34;&lt;/code&gt;): arguments to pass to the subprocess on startup (make sure &lt;code&gt;-i&lt;/code&gt; is there if you expect working with Lua shell interactively)&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-start-process&lt;/code&gt;: start new REPL process, usually happens automatically&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-kill-process&lt;/code&gt;: kill current REPL process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LUA SUBPROCESS INTERACTION&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-show-process-buffer&lt;/code&gt;: switch to REPL buffer&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-hide-process-buffer&lt;/code&gt;: hide window showing REPL buffer&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-always-show&lt;/code&gt;: show REPL buffer after sending something&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-send-buffer&lt;/code&gt;: send whole buffer&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-send-current-line&lt;/code&gt;: send current line&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-send-defun&lt;/code&gt;: send current top-level function&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-send-region&lt;/code&gt;: send active region&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-restart-with-whole-file&lt;/code&gt;: restart REPL and send whole buffer&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>