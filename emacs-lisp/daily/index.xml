<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-13T01:35:30Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-straight/csv-mode</title>
    <updated>2023-01-13T01:35:30Z</updated>
    <id>tag:github.com,2023-01-13:/emacs-straight/csv-mode</id>
    <link href="https://github.com/emacs-straight/csv-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the csv-mode package from GNU ELPA, current as of 2023-01-13&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>pythonic-emacs/pythonic</title>
    <updated>2023-01-13T01:35:30Z</updated>
    <id>tag:github.com,2023-01-13:/pythonic-emacs/pythonic</id>
    <link href="https://github.com/pythonic-emacs/pythonic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Utility functions for writing pythonic emacs package.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pythonic &lt;a href=&#34;https://melpa.org/#/pythonic&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/pythonic-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/pythonic&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/pythonic-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Utility functions for writing pythonic emacs package.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install this package form &lt;a href=&#34;http://melpa.org&#34;&gt;Melpa&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET pythonic RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This library provide function for convenient running python on different platforms on local and remote hosts including Docker containers and Vagrant virtual machines. To use &lt;code&gt;pythonic&lt;/code&gt; with Docker you need to install &lt;a href=&#34;https://github.com/emacs-pe/docker-tramp.el&#34;&gt;docker-tramp&lt;/a&gt; Emacs package.&lt;/p&gt; &#xA;&lt;p&gt;You can use remote interpreter from the tramp buffer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(cd &#34;/ssh:user@host:/home/user/&#34;)&#xA;;; or&#xA;(cd &#34;/docker:root@container:/root/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;h3&gt;pythonic-call-process&lt;/h3&gt; &#xA;&lt;p&gt;Pythonic wrapper around &lt;code&gt;call-process&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;FILE is the input file. BUFFER is the output destination. DISPLAY specifies to redisplay BUFFER on new output. ARGS is the list of arguments passed to &lt;code&gt;call-process&lt;/code&gt;. CWD will be working directory for running process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(pythonic-call-process :buffer &#34;*Pythonic*&#34;&#xA;                       :args &#39;(&#34;-V&#34;)&#xA;                       :cwd &#34;~&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pythonic-start-process&lt;/h3&gt; &#xA;&lt;p&gt;Pythonic wrapper around &lt;code&gt;start-process&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PROCESS is a name of the created process. BUFFER is a output destination. ARGS are the list of args passed to &lt;code&gt;start-process&lt;/code&gt;. CWD will be working directory for running process. FILTER must be a symbol of process filter function if necessary. SENTINEL must be a symbol of process sentinel function if necessary. QUERY-ON-EXIT will be corresponding process flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(pythonic-start-process :process &#34;pythonic&#34;&#xA;                        :buffer &#34;*Pythonic*&#34;&#xA;                        :args &#39;(&#34;-c&#34; &#34;print(&#39;PING&#39;)&#34;)&#xA;                        :cwd &#34;~&#34;&#xA;                        :filter (lambda (process output) (message output))&#xA;                        :sentinel (lambda (process event) (message &#34;Done.&#34;))&#xA;                        :query-on-exit nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pythonic-remote-p&lt;/h3&gt; &#xA;&lt;p&gt;Determine remote or local virtual environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(pythonic-remote-p)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pythonic-remote-docker-p&lt;/h3&gt; &#xA;&lt;p&gt;Determine docker remote virtual environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(pythonic-remote-docker-p)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pythonic-remote-vagrant-p&lt;/h3&gt; &#xA;&lt;p&gt;Determine vagrant remote virtual environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(pythonic-remote-vagrant-p)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pythonic-remote-user&lt;/h3&gt; &#xA;&lt;p&gt;Get user of the connection to the remote python interpreter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(pythonic-remote-user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pythonic-remote-host&lt;/h3&gt; &#xA;&lt;p&gt;Get host of the connection to the remote python interpreter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(pythonic-remote-host)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pythonic-remote-port&lt;/h3&gt; &#xA;&lt;p&gt;Get port of the connection to the remote python interpreter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(pythonic-remote-port)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;pythonic-activate&lt;/h3&gt; &#xA;&lt;p&gt;Activate python virtual environment. Tramp paths are supported.&lt;/p&gt; &#xA;&lt;h3&gt;pythonic-deactivate&lt;/h3&gt; &#xA;&lt;p&gt;Deactivate python virtual environment.&lt;/p&gt; &#xA;&lt;h2&gt;Project settings&lt;/h2&gt; &#xA;&lt;p&gt;You can change the default docker-compose file name and set a default service name to run the pythonic commands.&lt;/p&gt; &#xA;&lt;p&gt;Add these lines to the &lt;code&gt;.dir-locals.el&lt;/code&gt; file in the project root directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((python . ((pythonic-docker-compose-filename . &#34;local.yml&#34;)&#xA;            (pythonic-docker-compose-service-name . &#34;web&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change the interpreter that pythonic uses. This is especially useful when you have set your &lt;code&gt;python-shell-interpreter&lt;/code&gt; to something like &lt;code&gt;jupyter-console&lt;/code&gt;. By default, it&#39;ll use &lt;code&gt;python-shell-interpreter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To change it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq pythonic-interpreter &#34;python&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>voxpupuli/puppet-mode</title>
    <updated>2023-01-13T01:35:30Z</updated>
    <id>tag:github.com,2023-01-13:/voxpupuli/puppet-mode</id>
    <link href="https://github.com/voxpupuli/puppet-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Edit Puppet manifests with GNU Emacs 24&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Puppet Mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/voxpupuli/puppet-mode/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/voxpupuli/puppet-mode&#34;&gt;&lt;img src=&#34;https://travis-ci.org/voxpupuli/puppet-mode.svg?branch=master&#34; alt=&#34;travis&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Puppet Mode lets you edit &lt;a href=&#34;http://docs.puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt; 3 manifests with &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; 24.&lt;/p&gt; &#xA;&lt;p&gt;Puppet Mode is a major mode for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; 24 which adds support for the &lt;a href=&#34;http://docs.puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt; language. Puppet is a system provisioning and configuration tool by Puppetlabs Inc. This mode supports Puppet 3 and later. Puppet 2 is not explicitly supported anymore, but should mostly work.&lt;/p&gt; &#xA;&lt;p&gt;This mode needs GNU Emacs 24. It will &lt;strong&gt;not&lt;/strong&gt; work with GNU Emacs 23 and below, or with other flavors of Emacs (e.g. XEmacs).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Syntax highlighting&lt;/li&gt; &#xA; &lt;li&gt;Indentation and alignment of expressions and statements&lt;/li&gt; &#xA; &lt;li&gt;Tag navigation (aka &lt;code&gt;imenu&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Manual validation and linting of manifests (see &lt;a href=&#34;http://wwww.flycheck.org&#34;&gt;Flycheck&lt;/a&gt; for on-the-fly validation and linting)&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://github.com/nwops/puppet-debugger&#34;&gt;Puppet Debugger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; with &lt;kbd&gt;M-x package-install RET puppet-mode&lt;/kbd&gt;. Users of Debian â‰¥11 and derivatives can &lt;code&gt;sudo apt install elpa-puppet-mode&lt;/code&gt;. Manifest validation and linting support is enabled by installing the &lt;code&gt;elpa-flycheck&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;a href=&#34;http://cask.github.io/&#34;&gt;&lt;code&gt;Cask&lt;/code&gt;&lt;/a&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(source melpa)&#xA;&#xA;(depends-on &#34;puppet-mode&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Just visit Puppet manifests. The major mode is enabled automatically for Puppet manifests with the extension &lt;code&gt;.pp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following key bindings are available in Puppet Mode:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-M-a&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move to the beginning of the current block&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-M-e&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move to the end of the current block&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-a&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Align parameters in the current block&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-&#39;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle string quoting between single and double&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blank the string at point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-j&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to a &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;define&lt;/code&gt;, variable or resource&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apply the current manifest in dry-run mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-v&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Validate the syntax of the current manifest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-l&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check the current manifest for semantic issues&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-z&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Launch a puppet-debugger REPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send the currently marked region to the REPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c C-b&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send the current buffer to the REPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For the integration with puppet-debugger to work, the puppet-debugger gem needs to be installed and available in your &lt;code&gt;$PATH&lt;/code&gt;. See &lt;a href=&#34;https://github.com/nwops/puppet-debugger/#installation&#34;&gt;the instructions&lt;/a&gt; on puppet-debugger&#39;s repository on how to install it.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;M-x customize-group RET puppet&lt;/code&gt; to customize Puppet Mode.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to ask question or make suggestions in our &lt;a href=&#34;https://github.com/voxpupuli/puppet-mode/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/voxpupuli/puppet-mode/issues&#34;&gt;Issue tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/voxpupuli/puppet-mode&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Puppet Mode is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;Puppet Mode is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/voxpupuli/puppet-mode/raw/master/COPYING&#34;&gt;&lt;code&gt;COPYING&lt;/code&gt;&lt;/a&gt; for the complete license.&lt;/p&gt;</summary>
  </entry>
</feed>