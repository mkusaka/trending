<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-28T01:33:33Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ananthakumaran/tide</title>
    <updated>2022-10-28T01:33:33Z</updated>
    <id>tag:github.com,2022-10-28:/ananthakumaran/tide</id>
    <link href="https://github.com/ananthakumaran/tide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tide - TypeScript Interactive Development Environment for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tide&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ananthakumaran/tide/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TypeScript Interactive Development Environment for Emacs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/jEwgPsd.gif&#34;&gt;screencast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tide requires Emacs 25 or later. We recommend Emacs 27 or later with native json support.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; v0.12.0 or greater.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;http://www.typescriptlang.org/docs/handbook/tsconfig-json.html&#34;&gt;tsconfig.json&lt;/a&gt; or &lt;a href=&#34;https://code.visualstudio.com/docs/languages/jsconfig&#34;&gt;jsconfig.json&lt;/a&gt; is present in the root folder of the project.&lt;/li&gt; &#xA; &lt;li&gt;Tide is available in &lt;a href=&#34;http://melpa.org/#/tide&#34;&gt;melpa&lt;/a&gt;. You can install tide via package-install &lt;kbd&gt;M-x package-install [ret] tide&lt;/kbd&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;TypeScript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun setup-tide-mode ()&#xA;  (interactive)&#xA;  (tide-setup)&#xA;  (flycheck-mode +1)&#xA;  (setq flycheck-check-syntax-automatically &#39;(save mode-enabled))&#xA;  (eldoc-mode +1)&#xA;  (tide-hl-identifier-mode +1)&#xA;  ;; company is an optional dependency. You have to&#xA;  ;; install it separately via package-install&#xA;  ;; `M-x package-install [ret] company`&#xA;  (company-mode +1))&#xA;&#xA;;; aligns annotation to the right hand side&#xA;(setq company-tooltip-align-annotations t)&#xA;&#xA;;; formats the buffer before saving&#xA;(add-hook &#39;before-save-hook &#39;tide-format-before-save)&#xA;&#xA;(add-hook &#39;typescript-mode-hook #&#39;setup-tide-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Format options&lt;/h4&gt; &#xA;&lt;p&gt;Format options can be specified in multiple ways.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;via elisp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq tide-format-options &#39;(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;via tsfmt.json (should be present in the root folder along with tsconfig.json)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;indentSize&#34;: 4,&#xA;  &#34;tabSize&#34;: 4,&#xA;  &#34;insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces&#34;: false,&#xA;  &#34;placeOpenBraceOnNewLineForFunctions&#34;: false,&#xA;  &#34;placeOpenBraceOnNewLineForControlBlocks&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/Microsoft/TypeScript/raw/v3.3.1/src/server/protocol.ts#L2858-L2890&#34;&gt;here&lt;/a&gt; for the full list of supported format options.&lt;/p&gt; &#xA;&lt;h4&gt;TSX&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;web-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.tsx\\&#39;&#34; . web-mode))&#xA;(add-hook &#39;web-mode-hook&#xA;          (lambda ()&#xA;            (when (string-equal &#34;tsx&#34; (file-name-extension buffer-file-name))&#xA;              (setup-tide-mode))))&#xA;;; enable typescript-tslint checker&#xA;(flycheck-add-mode &#39;typescript-tslint &#39;web-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tide also provides support for editing js &amp;amp; jsx files. Tide checkers &lt;code&gt;javascript-tide&lt;/code&gt; and &lt;code&gt;jsx-tide&lt;/code&gt; are not enabled by default for js &amp;amp; jsx files. It can be enabled by setting &lt;a href=&#34;http://www.flycheck.org/en/latest/user/syntax-checkers.html#variable-flycheck-checker&#34;&gt;&lt;code&gt;flycheck-checker&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;JavaScript&lt;/h4&gt; &#xA;&lt;p&gt;Create &lt;code&gt;jsconfig.json&lt;/code&gt; in the root folder of your project. &lt;code&gt;jsconfig.json&lt;/code&gt; is &lt;code&gt;tsconfig.json&lt;/code&gt; with &lt;code&gt;allowJs&lt;/code&gt; attribute set to true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;compilerOptions&#34;: {&#xA;    &#34;target&#34;: &#34;es2017&#34;,&#xA;    &#34;allowSyntheticDefaultImports&#34;: true,&#xA;    &#34;noEmit&#34;: true,&#xA;    &#34;checkJs&#34;: true,&#xA;    &#34;jsx&#34;: &#34;react&#34;,&#xA;    &#34;lib&#34;: [ &#34;dom&#34;, &#34;es2017&#34; ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;js2-mode-hook #&#39;setup-tide-mode)&#xA;;; configure javascript-tide checker to run after your default javascript checker&#xA;(flycheck-add-next-checker &#39;javascript-eslint &#39;javascript-tide &#39;append)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSX&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;web-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.jsx\\&#39;&#34; . web-mode))&#xA;(add-hook &#39;web-mode-hook&#xA;          (lambda ()&#xA;            (when (string-equal &#34;jsx&#34; (file-name-extension buffer-file-name))&#xA;              (setup-tide-mode))))&#xA;;; configure jsx-tide checker to run after your default jsx checker&#xA;(flycheck-add-mode &#39;javascript-eslint &#39;web-mode)&#xA;(flycheck-add-next-checker &#39;javascript-eslint &#39;jsx-tide &#39;append)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use Package&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package tide&#xA;  :ensure t&#xA;  :after (typescript-mode company flycheck)&#xA;  :hook ((typescript-mode . tide-setup)&#xA;         (typescript-mode . tide-hl-identifier-mode)&#xA;         (before-save . tide-format-before-save)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keyboard shortcuts&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;M-.&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the definition of the symbol at point. With a prefix arg, Jump to the type definition.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;M-,&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Return to your pre-jump position.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-restart-server&lt;/kbd&gt; Restart tsserver. This would come in handy after you edit tsconfig.json or checkout a different branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-documentation-at-point&lt;/kbd&gt; Load the documentation for the symbol at point to buffer &lt;code&gt;*tide-documentation*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-references&lt;/kbd&gt; List all references to the symbol at point in a buffer. References can be navigated using &lt;kbd&gt;n&lt;/kbd&gt; and &lt;kbd&gt;p&lt;/kbd&gt;. Press &lt;kbd&gt;enter&lt;/kbd&gt; to open the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-project-errors&lt;/kbd&gt; List all errors in the project. Errors can be navigated using &lt;kbd&gt;n&lt;/kbd&gt; and &lt;kbd&gt;p&lt;/kbd&gt;. Press &lt;kbd&gt;enter&lt;/kbd&gt; to open the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-error-at-point&lt;/kbd&gt; Load the details of the error at point to buffer &lt;code&gt;*tide-error*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-rename-symbol&lt;/kbd&gt; Rename all occurrences of the symbol at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-rename-file&lt;/kbd&gt; Rename current file and all it&#39;s references in other files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-format&lt;/kbd&gt; Format the current region or buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-fix&lt;/kbd&gt; Apply code fix for the error at point. When invoked with a prefix arg, apply code fix for all the errors in the file that are similar to the error at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-add-tslint-disable-next-line&lt;/kbd&gt; If the point is on one or more tslint errors, add a &lt;code&gt;tslint:disable-next-line&lt;/code&gt; flag on the previous line to silence the errors. Or, if a flag already exists on the previous line, modify the flag to silence the errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-refactor&lt;/kbd&gt; Refactor code at point or current region.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-jsdoc-template&lt;/kbd&gt; Insert JSDoc comment template at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-verify-setup&lt;/kbd&gt; Show the version of tsserver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-organize-imports&lt;/kbd&gt; Organize imports in the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-list-servers&lt;/kbd&gt; List the &lt;code&gt;tsserver&lt;/code&gt; processes launched by tide.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xref&lt;/li&gt; &#xA; &lt;li&gt;ElDoc&lt;/li&gt; &#xA; &lt;li&gt;Auto complete&lt;/li&gt; &#xA; &lt;li&gt;Flycheck&lt;/li&gt; &#xA; &lt;li&gt;Jump to definition, Jump to type definition&lt;/li&gt; &#xA; &lt;li&gt;Find occurrences&lt;/li&gt; &#xA; &lt;li&gt;Rename symbol&lt;/li&gt; &#xA; &lt;li&gt;Imenu&lt;/li&gt; &#xA; &lt;li&gt;Compile On Save&lt;/li&gt; &#xA; &lt;li&gt;Highlight Identifiers&lt;/li&gt; &#xA; &lt;li&gt;Code Fixes&lt;/li&gt; &#xA; &lt;li&gt;Code Refactor&lt;/li&gt; &#xA; &lt;li&gt;Organize Imports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ananthakumaran/tide/raw/master/doc/architecture.mmd.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tide uses &lt;a href=&#34;https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29&#34;&gt;tsserver&lt;/a&gt; as the backend for most of the features. It writes out a comprehensive log file which can be captured by setting &lt;code&gt;tide-tsserver-process-environment&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq tide-tsserver-process-environment &#39;(&#34;TSS_LOG=-level verbose -file /tmp/tss.log&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I configure tide to use a specific version of TypeScript compiler?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For TypeScript 2.0 and above, you can customize the &lt;code&gt;tide-tsserver-executable&lt;/code&gt; variable. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq tide-tsserver-executable &#34;node_modules/typescript/bin/tsserver&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sadly, this won&#39;t work for TypeScript &amp;lt; 2.0. You can clone the repo locally and checkout the old version though.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I copy the type information shown in the minibuffer?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tide has the command &lt;code&gt;tide-documentation-at-point&lt;/code&gt; to load the documentation for the symbol at point to buffer &lt;code&gt;*tide-documentation*&lt;/code&gt; from where it can be copied. By default, tide will not open this buffer if only type information is available. This behavior can be overridden by setting &lt;code&gt;(setq tide-always-show-documentation t)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Variables&lt;/h3&gt; &#xA;&lt;h5&gt;tide-sync-request-timeout &lt;code&gt;2&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The number of seconds to wait for a sync response.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-flags &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;List of additional flags to provide when starting tsserver.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-process-environment &lt;code&gt;&#39;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;List of extra environment variables to use when starting tsserver.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-executable &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of tsserver executable to run instead of the bundled tsserver.&lt;/p&gt; &#xA;&lt;p&gt;This may either be an absolute path or a relative path. Relative paths are resolved against the project root directory.&lt;/p&gt; &#xA;&lt;p&gt;Note that this option only works with TypeScript version 2.0 and above.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tscompiler-executable &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of tsc executable.&lt;/p&gt; &#xA;&lt;p&gt;This may either be an absolute path or a relative path. Relative paths are resolved against the project root directory.&lt;/p&gt; &#xA;&lt;h5&gt;tide-node-executable &lt;code&gt;&#34;node&#34;&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name or path of the node executable binary file.&lt;/p&gt; &#xA;&lt;h5&gt;tide-node-flags &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;List of flags to provide to node when starting tsserver.&lt;/p&gt; &#xA;&lt;p&gt;Useful for large TypeScript codebases which need to set max-old-space-size to a higher value.&lt;/p&gt; &#xA;&lt;h5&gt;tide-post-code-edit-hook &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Hook run after code edits are applied in a buffer.&lt;/p&gt; &#xA;&lt;h5&gt;tide-sort-completions-by-kind &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether completions should be sorted by kind.&lt;/p&gt; &#xA;&lt;h5&gt;tide-format-options &lt;code&gt;&#39;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Format options plist.&lt;/p&gt; &#xA;&lt;h5&gt;tide-user-preferences &lt;code&gt;&#39;(:includeCompletionsForModuleExports t :includeCompletionsWithInsertText t :allowTextChangesInNewFiles t :generateReturnInDocTemplate t)&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;User preference plist used on the configure request.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/Microsoft/TypeScript/raw/17eaf50b/src/server/protocol.ts#L2684&#34;&gt;https://github.com/Microsoft/TypeScript/blob/17eaf50b/src/server/protocol.ts#L2684&lt;/a&gt; for the full list of available options.&lt;/p&gt; &#xA;&lt;h5&gt;tide-disable-suggestions &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Disable suggestions.&lt;/p&gt; &#xA;&lt;p&gt;If set to non-nil, suggestions will not be shown in flycheck errors and tide-project-errors buffer.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-setup-company-backend &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Add &lt;code&gt;company-tide&lt;/code&gt; to &lt;code&gt;company-backends&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-ignore-case &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;CASE will be ignored in completion if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-show-source &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Completion dropdown will contain completion source if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-fuzzy &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Allow fuzzy completion.&lt;/p&gt; &#xA;&lt;p&gt;By default only candidates with exact prefix match are shown. If set to non-nil, candidates with match anywhere inside the name are shown.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-detailed &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Completion dropdown will contain detailed method information if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-enable-autoimport-suggestions &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether to include external module exports in completions.&lt;/p&gt; &#xA;&lt;h5&gt;tide-enable-xref &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether to enable xref integration.&lt;/p&gt; &#xA;&lt;h5&gt;tide-navto-item-filter &lt;code&gt;#&#39;tide-navto-item-filter-default&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The filter for items returned by tide-nav. Defaults to class, interface, type, enum&lt;/p&gt; &#xA;&lt;h5&gt;tide-jump-to-definition-reuse-window &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Reuse existing window when jumping to definition.&lt;/p&gt; &#xA;&lt;h5&gt;tide-imenu-flatten &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Imenu index will be flattened if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-allow-popup-select &lt;code&gt;&#39;(code-fix refactor)&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The list of commands where popup selection is allowed.&lt;/p&gt; &#xA;&lt;h5&gt;tide-always-show-documentation &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Show the documentation window even if only type information is available.&lt;/p&gt; &#xA;&lt;h5&gt;tide-server-max-response-length &lt;code&gt;102400&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Maximum allowed response length from tsserver. Any response greater than this would be ignored.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-locator-function &lt;code&gt;#&#39;tide-tsserver-locater-npmlocal-projectile-npmglobal&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Function used by tide to locate tsserver.&lt;/p&gt; &#xA;&lt;h5&gt;tide-project-cleanup-delay &lt;code&gt;60&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The number of idle seconds to wait before cleaning up unused tsservers. Use &lt;code&gt;nil&lt;/code&gt; to disable automatic cleanups. See also &lt;code&gt;tide-do-cleanups&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-start-method &lt;code&gt;&#39;immediate&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The method by which tide starts tsserver. &lt;code&gt;immediate&lt;/code&gt; causes tide to start a tsserver instance as soon as &lt;code&gt;tide-mode&lt;/code&gt; is turned on. &lt;code&gt;manual&lt;/code&gt; means that tide will start a tsserver only when the user manually starts one.&lt;/p&gt; &#xA;&lt;h5&gt;tide-default-mode &lt;code&gt;&#34;TS&#34;&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The default mode to open buffers not backed by files (e.g. Org source blocks) in.&lt;/p&gt; &#xA;&lt;h5&gt;tide-recenter-after-jump &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Recenter buffer after jumping to definition&lt;/p&gt; &#xA;&lt;h5&gt;tide-jump-to-fallback &lt;code&gt;#&#39;tide-jump-to-fallback-not-given&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The fallback jump function to use when implementations aren&#39;t available.&lt;/p&gt; &#xA;&lt;h5&gt;tide-filter-out-warning-completions &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Completions whose &lt;code&gt;:kind&lt;/code&gt; property is &#34;warning&#34; will be filtered out if set to non-nil. This option is useful for Javascript code completion, because tsserver often returns a lot of irrelevant completions whose &lt;code&gt;:kind&lt;/code&gt; property is &#34;warning&#34; for Javascript code. You can fix this behavior by setting this variable to non-nil value for Javascript buffers using &lt;code&gt;setq-local&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;h5&gt;tide-native-json-parsing `(and&lt;/h5&gt; &#xA;&lt;p&gt;(&amp;gt;= emacs-major-version 27) (functionp &#39;json-serialize) (functionp &#39;json-parse-buffer) (functionp &#39;json-parse-string))`&lt;/p&gt; &#xA;&lt;p&gt;Use native JSON parsing (only emacs &amp;gt;= 27).&lt;/p&gt; &#xA;&lt;h5&gt;tide-save-buffer-after-code-edit &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Save the buffer after applying code edits.&lt;/p&gt; &#xA;&lt;h5&gt;tide-hl-identifier-idle-time &lt;code&gt;0.5&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;How long to wait after user input before highlighting the current identifier.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/lsp-metals</title>
    <updated>2022-10-28T01:33:33Z</updated>
    <id>tag:github.com,2022-10-28:/emacs-lsp/lsp-metals</id>
    <link href="https://github.com/emacs-lsp/lsp-metals" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lsp-mode ❤️ metals&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp-metals&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;64&#34; alt=&#34;metals_logo&#34; src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-metals/master/images/logo.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-metals/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacs-lsp/lsp-metals/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/emacs-lsp/lsp-mode&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/emacs-lsp/lsp-mode.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emacs Scala IDE using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; to connect to &lt;a href=&#34;https://scalameta.org/metals&#34;&gt;Metals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;An example to setup &lt;code&gt;lsp-metals&lt;/code&gt; using &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package lsp-metals&#xA;  :ensure t&#xA;  :custom&#xA;  ;; Metals claims to support range formatting by default but it supports range&#xA;  ;; formatting of multiline strings only. You might want to disable it so that&#xA;  ;; emacs can use indentation provided by scala-mode.&#xA;  (lsp-metals-server-args &#39;(&#34;-J-Dmetals.allow-multiline-string-formatting=off&#34;))&#xA;  :hook (scala-mode . lsp))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>felipeochoa/rjsx-mode</title>
    <updated>2022-10-28T01:33:33Z</updated>
    <id>tag:github.com,2022-10-28:/felipeochoa/rjsx-mode</id>
    <link href="https://github.com/felipeochoa/rjsx-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A JSX major mode for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rjsx-mode: A major mode for editing JSX files&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/rjsx-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/rjsx-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/rjsx-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/rjsx-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/felipeochoa/rjsx-mode&#34;&gt;&lt;img src=&#34;https://travis-ci.org/felipeochoa/rjsx-mode.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This mode derives from &lt;code&gt;js2-mode&lt;/code&gt;, extending its parser to support JSX syntax according to the &lt;a href=&#34;https://facebook.github.io/jsx/&#34;&gt;official spec&lt;/a&gt;. This means you get all of the &lt;code&gt;js2&lt;/code&gt; features plus proper syntax checking and highlighting of JSX code blocks.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a screenshot of it in action:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/felipeochoa/rjsx-mode/master/demo.png&#34; width=&#34;600&#34; alt=&#34;Actual syntax highlighting and no spurious errors!&#34;&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rjsx-mode&lt;/code&gt; is available on &lt;a href=&#34;https://melpa.org/&#34;&gt;Melpa&lt;/a&gt;, so if you have that repository configured you can just &lt;code&gt;package-list-packages&lt;/code&gt; and install it from there. (If not, you can follow &lt;a href=&#34;https://melpa.org/#/getting-started&#34;&gt;their guide&lt;/a&gt; on getting started). &lt;code&gt;rjsx-mode&lt;/code&gt; automatically registers itself for &lt;code&gt;*.jsx&lt;/code&gt; files, but you can use &lt;code&gt;(add-to-list &#39;auto-mode-alist &#39;(&#34;components\\/.*\\.js\\&#39;&#34; . rjsx-mode))&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can download &lt;code&gt;rjsx-mode.el&lt;/code&gt; from this repository and use &lt;code&gt;load-file&lt;/code&gt; or similar to add it to your current session.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;js2-mode&lt;/code&gt; does not include a JSX parser, but rather an E4X parser, which means it gets confused with certain JSX constructs. This mode extends the `js2** parser to support all JSX constructs and proper syntax highlighting and &lt;strong&gt;indentation&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rjsx-mode&lt;/code&gt; adds some electricity to &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;C-d&lt;/code&gt; to make adding new JSX elements less repetitive:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; inserts &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; whenever it would start a new JSX node (and simply inserts &lt;code&gt;&amp;lt;&lt;/code&gt; otherwise)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;C-d&lt;/code&gt; right before the slash in a self-closing tag automatically inserts a closing tag and places point inside the element&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The result is you can do the following:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/felipeochoa/rjsx-mode/master/key-demo.gif&#34; width=&#34;200&#34; alt=&#34;Quickly and easily add new components&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-r&lt;/code&gt; lets you rename the enclosing tag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some features that this mode adds to &lt;code&gt;js2&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Proper indentation of JSX regardless of how you write it. (No need to wrap in parentheses!)&lt;/li&gt; &#xA; &lt;li&gt;Highlighting JSX tag names and attributes (using the &lt;code&gt;rjsx-tag&lt;/code&gt; and &lt;code&gt;rjsx-attr&lt;/code&gt; faces)&lt;/li&gt; &#xA; &lt;li&gt;Parsing the spread operator &lt;code&gt;{...otherProps}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; in child expressions &lt;code&gt;&amp;lt;div&amp;gt;{cond &amp;amp;&amp;amp; &amp;lt;BigComponent/&amp;gt;}&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ternary expressions &lt;code&gt;&amp;lt;div&amp;gt;{toggle ? &amp;lt;ToggleOn /&amp;gt; : &amp;lt;ToggleOff /&amp;gt;}&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t like this behavior, you can disable it by adding the following to your init file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(with-eval-after-load &#39;rjsx-mode&#xA;  (define-key rjsx-mode-map &#34;&amp;lt;&#34; nil)&#xA;  (define-key rjsx-mode-map (kbd &#34;C-d&#34;) nil)&#xA;  (define-key rjsx-mode-map &#34;&amp;gt;&#34; nil))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, since &lt;code&gt;rjsx-mode&lt;/code&gt; extends the &lt;code&gt;js2&lt;/code&gt; AST, utilities using the parse tree gain access to the JSX structure.&lt;/p&gt; &#xA;&lt;h3&gt;Indentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rjsx-mode&lt;/code&gt; extends the built-in javascript indentation engine to correctly support JSX. You can configue the depth of indentation using &lt;code&gt;js-indent-level&lt;/code&gt; and &lt;code&gt;sgml-basic-offset&lt;/code&gt;, along with the various &lt;code&gt;js-indent-&lt;/code&gt; variables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Indenting with tabs&lt;/strong&gt;: This is not currently supported. You can either submit a PR if interested (look at issue #85) or revert to using the built-in indentation mode by adding &lt;code&gt;(setq-local indent-line-function &#39;js-jsx-indent-line)&lt;/code&gt; to your &lt;code&gt;rjsx-mode-hook&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs, contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit any bugs or feature requests on the GitHub tracker. Since this mode is based on &lt;code&gt;js2&lt;/code&gt;, it is possible that bugs you encounter with it stem from there. Please try reproducing bugs using &lt;code&gt;js2-mode&lt;/code&gt; if relevant. If the bug is in &lt;code&gt;js2&lt;/code&gt;, please report it using &lt;code&gt;M-x report-emacs-bug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>