<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-12T01:39:25Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kaushalmodi/ox-hugo</title>
    <updated>2022-06-12T01:39:25Z</updated>
    <id>tag:github.com,2022-06-12:/kaushalmodi/ox-hugo</id>
    <link href="https://github.com/kaushalmodi/ox-hugo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A carefully crafted Org exporter back-end for Hugo&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Ox-Hugo: A carefully crafted Org exporter back-end for Hugo #+author: Kaushal Modi [[https://github.com/kaushalmodi/ox-hugo/actions][https://github.com/kaushalmodi/ox-hugo/actions/workflows/test.yml/badge.svg]] [[https://melpa.org/#/ox-hugo][file:https://melpa.org/packages/ox-hugo-badge.svg]] [[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPL%20v3-blue.svg]]&lt;/p&gt; &#xA;&lt;p&gt;/If you have any questions or if you have anything interesting to share related to ox-hugo, feel free to do so on [[https://github.com/kaushalmodi/ox-hugo/discussions][Discussions]]!/&lt;/p&gt; &#xA;&lt;p&gt;=ox-hugo= is an Org exporter backend that exports Org to [[https://gohugo.io/][Hugo]]-compatible Markdown ([[https://github.com/russross/blackfriday][Blackfriday]]) and also generates the front-matter (in TOML or YAML format).&lt;/p&gt; &#xA;&lt;p&gt;The =ox-hugo= backend extends from a /parent/ backend =ox-blackfriday.el=. The latter is the one that primarily does the Blackfriday-friendly Markdown content generation. The main job of =ox-hugo= is to generate the front-matter for each exported content file, and then append that generated Markdown to it.&lt;/p&gt; &#xA;&lt;p&gt;There are, though, few functions that =ox-hugo.el= overrides over those by =ox-blackfriday.el=.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;See the [[https://ox-hugo.scripter.co/doc/examples/][Real World Examples]] section to quickly jump to sites generated using =ox-hugo= and their Org sources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#screenshots][Screenshots]]&lt;/li&gt; &#xA; &lt;li&gt;[[#documentation][Documentation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#source-of-the-documentation-site][Source of the Documentation site]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#demo][Demo]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#use-package][Use Package]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#spacemacs][Spacemacs]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#before-you-export][Before you export]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#export-bindings][Export bindings]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#customization-options][Customization Options]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#thanks][Thanks]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots Before you read further, you can see below how =ox-hugo= translates Org to Markdown (Org on the left; exported Markdown with Hugo front-matter on the right). ** One post per Org subtree (preferred) [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/doc/static/images/one-post-per-subtree.png][https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/doc/static/images/one-post-per-subtree.png]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Files in above screenshot :: [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/test/site/content-org/screenshot-subtree-export-example.org][Org]] -&amp;gt; [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/test/site/content/writing-hugo-blog-in-org-subtree-export.md][Markdown]] ** One post per Org file [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/doc/static/images/one-post-per-file.png][https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/doc/static/images/one-post-per-file.png]]&lt;/li&gt; &#xA; &lt;li&gt;Files in above screenshot :: [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/test/site/content-org/writing-hugo-blog-in-org-file-export.org][Org]] -&amp;gt; [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/test/site/content/writing-hugo-blog-in-org-file-export.md][Markdown]] ** Editorial The preferred way to organize the posts is as Org subtrees (also the main reason to write this package, as nothing like that was out there) as it makes the meta-data management for Hugo front-matter pretty effortless.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are a /one Org-file per post/ type of a person, that flow works too! Just note that in this flow many of those =#+hugo_= properties need to be managed manually.. just as one would manage the front-matter in Markdown files --- See the Org versions in the above screenshots for comparison.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation =ox-hugo= uses &lt;em&gt;itself&lt;/em&gt; to generate its documentation!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ox-hugo.scripter.co/&#34;&gt;https://ox-hugo.scripter.co/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can generate the same too! Simply clone this repo and do =make doc_md=.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Make sure you visit the above link to read more on:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://ox-hugo.scripter.co/doc/why-ox-hugo/][Why =ox-hugo=?]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://ox-hugo.scripter.co/doc/auto-export-on-saving/][Auto exporting to Markdown each time the Org file is saved]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://ox-hugo.scripter.co/doc/org-capture-setup/][Using Org Capture to start a new blog post]]&lt;/li&gt; &#xA; &lt;li&gt;.. and many more topics and examples ** Source of the Documentation site&lt;/li&gt; &#xA; &lt;li&gt;[[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/main/doc/ox-hugo-manual.org][Org source]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The documentation site is published by first using =ox-hugo= to export from Org to Markdown, and then finally =hugo=. /So no Markdown files are committed in the =doc/content/= directory./&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demo [[https://github.com/kaushalmodi/ox-hugo/tree/main/test/site/content-org][Org source]] → [[https://github.com/kaushalmodi/ox-hugo/tree/main/test/site/content][=ox-hugo= Exported Markdown]] → [[https://ox-hugo.scripter.co/test/]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The test site uses a [[https://github.com/kaushalmodi/hugo-bare-min-theme][minimal]] theme written just for debug purposes (not extra aesthetics). The test site is designed to verify if all the content translates from Org to Markdown as expected.&lt;/p&gt; &#xA;&lt;p&gt;/See [[https://themes.gohugo.io/][Hugo Themes]] for examples of really good site prettification and presentation styles./&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation This package requires at least GNU Emacs &lt;em&gt;26.3&lt;/em&gt; and Org Mode &lt;em&gt;9.0&lt;/em&gt;. It is available on Melpa ([[https://melpa.org/#/ox-hugo]]), and it&#39;s recommended to install this package from [[https://melpa.org/#/getting-started][Melpa]] (​_not_ Melpa /Stable/).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You will need to /require/ the package after installing it to get the =ox-hugo= export options in the /Org Export Dispatcher/ menu (the one you see when you hit =C-c C-e= to initiate any export).&lt;/p&gt; &#xA;&lt;p&gt;You can do that by adding the below to your config: #+begin_src emacs-lisp (with-eval-after-load &#39;ox (require &#39;ox-hugo)) #+end_src ** Use Package If you use [[https://github.com/jwiegley/use-package][=use-package=]], you can do the below instead: #+begin_src emacs-lisp (use-package ox-hugo :ensure t ;Auto-install the package from Melpa :pin melpa ;`package-archives&#39; should already have (&#34;melpa&#34; . &#34;&lt;a href=&#34;https://melpa.org/packages/&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&#34;) :after ox) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Spacemacs Spacemacs users can use =ox-hugo= by setting the variable =org-enable-hugo-support=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq-default dotspacemacs-configuration-layers &#39;((org :variables org-enable-hugo-support t))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;/This was verified to work on Spacemacs =develop= branch ([[https://github.com/kaushalmodi/ox-hugo/pull/440][ref]])./&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage #+begin_note Jump to the [[https://ox-hugo.scripter.co/doc/quick-start/][Quick Start]] section to quickly try out &lt;del&gt;ox-hugo&lt;/del&gt; with Hugo. #+end_note ** Before you export Before you export check that these properties are set as you need:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;HUGO_BASE_DIR :: Root directory of the source for the Hugo site. If this is set to =&lt;del&gt;/hugo/=, the exported Markdown files will be saved to =&lt;/del&gt;/hugo/content/&amp;lt;HUGO_SECTION&amp;gt;/= directory[fn:-1-section_more]. By default, the Markdown files reside in a hierarchy under the =content/= directory in the site root directory ([[https://gohugo.io/content-management/organization/][ref]]).&lt;/p&gt; &lt;p&gt;If you try to export without setting this property, you will get this error: #+begin_example user-error: It is mandatory to set the HUGO_BASE_DIR property or the `org-hugo-base-dir&#39; local variable #+end_example This property can be set by one of two ways:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Setting the &lt;del&gt;#+hugo_base_dir:&lt;/del&gt; keyword in the Org file.&lt;/li&gt; &#xA;   &lt;li&gt;Setting the &lt;del&gt;org-hugo-base-dir&lt;/del&gt; variable in a &lt;del&gt;.dir-locals.el&lt;/del&gt; or File Local Variables.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HUGO_SECTION :: The default Hugo section name for all the posts. See [[https://gohugo.io/content-management/sections/][here]] for more information on Hugo sections. It is common for this property to be set to =posts= or =blog=. The default value is set using =org-hugo-default-section-directory=. See [[https://ox-hugo.scripter.co/doc/hugo-section/][Hugo Section]] for details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Important&lt;/em&gt;: If you choose to export an Org subtree as a post, you need to set the =EXPORT_FILE_NAME= subtree property. That property is used by this package to figure out where the current post starts. For that reason, &lt;em&gt;a subtree with =EXPORT_FILE_NAME= property cannot nest another subtree with that property&lt;/em&gt;. If you can analogize with the [[https://en.wikipedia.org/wiki/Tree_(data_structure)][branch/leaf data structure terminlogy]], then the subtrees with =EXPORT_FILE_NAME= property need to be /leaf nodes/.&lt;/p&gt; &#xA;&lt;p&gt;[fn:-1-section_more] The &lt;del&gt;HUGO_SECTION&lt;/del&gt; is the bare-minimum requirement to specify the destination path. That path can be further tweaked using &lt;del&gt;HUGO_BUNDLE&lt;/del&gt; key (and the associated &lt;del&gt;EXPORT_HUGO_BUNDLE&lt;/del&gt; property), and the &lt;del&gt;EXPORT_HUGO_SECTION_FRAG&lt;/del&gt; property (only for /per-subtree/ exports). ** Export bindings The common =ox-hugo= export bindings are: *** For both one-post-per-subtree and one-post-per-file flows&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=C-c C-e H H= :: Export &#34;What I Mean&#34;. This is same as calling the &lt;del&gt;org-hugo-export-wim-to-md&lt;/del&gt; function interactively or via &lt;del&gt;(org-hugo-export-wim-to-md)&lt;/del&gt; in Emacs Lisp. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If point is in a /valid Hugo post subtree/, export that subtree to a Hugo post in Markdown.&lt;/p&gt; &lt;p&gt;A /valid Hugo post subtree/ is an Org subtree that has the =EXPORT_FILE_NAME= property set. &lt;em&gt;Note that a subtree with =EXPORT_FILE_NAME= property cannot nest a subtree with the same property set.&lt;/em&gt; If you can analogize with the [[https://en.wikipedia.org/wiki/Tree_(data_structure)][branch/leaf data structure terminlogy]], then the subtrees with =EXPORT_FILE_NAME= property need to be /leaf nodes/.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;If the file is intended to be exported as a whole (i.e. has the =#+title= keyword), export the whole Org file to a Hugo post in Markdown.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=C-c C-e H A= :: Export &lt;em&gt;all&lt;/em&gt; &#34;What I Mean&#34;. This is same as executing &lt;del&gt;(org-hugo-export-wim-to-md :all-subtrees)&lt;/del&gt; in Emacs Lisp. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the Org file has one or more &#39;valid Hugo post subtrees&#39;, export them to Hugo posts in Markdown.&lt;/li&gt; &#xA;   &lt;li&gt;If the file is intended to be exported as a whole (i.e. no &#39;valid Hugo post subtrees&#39; at all, and has the =#+title= keyword), export the whole Org file to a Hugo post in Markdown. *** For only the one-post-per-file flow&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=C-c C-e H h= :: Export the Org file to a Hugo post in Markdown. This is same as calling the &lt;del&gt;org-hugo-export-to-md&lt;/del&gt; function interactively.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;/Also see the [[https://ox-hugo.scripter.co/doc/auto-export-on-saving/][Auto Exporting]] section./ ** Customization Options Do =M-x customize-group=, and select =org-export-hugo= to see the available customization options for this package.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Matt Price ([[https://github.com/titaniumbones][@titaniumbones]])&lt;/li&gt; &#xA; &lt;li&gt;Puneeth Chaganti ([[https://github.com/punchagan][@punchagan]])&lt;/li&gt; &#xA; &lt;li&gt;Also thanks to &lt;del&gt;&lt;a href=&#34;http://whyarethingsthewaytheyare.com/setting-up-the-blog/&#34;&gt;http://whyarethingsthewaytheyare.com/setting-up-the-blog/&lt;/a&gt;&lt;/del&gt; (/not hyperlinking the link as it is insecure --- not https/), &lt;del&gt;&lt;a href=&#34;http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/&#34;&gt;http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/&lt;/a&gt;&lt;/del&gt; (/not hyperlinking the link as it is insecure --- not https/) and the [[https://github.com/chaseadamsio/goorgeous][=goorgeous=]] project by Chase Adams ([[https://github.com/chaseadamsio][@chaseadamsio]]) for inspiration to start this project.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>seagle0128/.emacs.d</title>
    <updated>2022-06-12T01:39:25Z</updated>
    <id>tag:github.com,2022-06-12:/seagle0128/.emacs.d</id>
    <link href="https://github.com/seagle0128/.emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Centaur Emacs - A Fancy and Fast Emacs Configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Centaur Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/seagle0128/.emacs.d/actions&#34;&gt;&lt;img src=&#34;https://github.com/seagle0128/.emacs.d/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/seagle0128/.emacs.d.svg?label=Release&#34; alt=&#34;Release Tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/License&#34;&gt;&lt;img src=&#34;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/Windows&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Windows-lightblue?logo=windows&amp;amp;style=flat&amp;amp;logoColor=blue&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/Linux&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Linux-fcc624?logo=linux&amp;amp;style=flat&amp;amp;logoColor=black&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/macOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-macOS-lightgrey?logo=apple&amp;amp;style=flat&amp;amp;logoColor=white&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/logo.png&#34; alt=&#34;Centaur Emacs&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#centaur-emacs&#34;&gt;Centaur Emacs&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#prerequisite&#34;&gt;Prerequisite&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#os&#34;&gt;OS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#gnu-emacs&#34;&gt;GNU Emacs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#dotfiles&#34;&gt;Dotfiles&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#update&#34;&gt;Update&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#customization&#34;&gt;Customization&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#customize-group&#34;&gt;Customize Group&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#hydra&#34;&gt;Hydra&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#donate&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;p&gt;This is an Emacs distribution that aims to enhance the default Emacs experience. It alters a lot of the default settings, bundles a plethora of additional packages and adds its own core library to the mix. The final product offers an easy to use Emacs configuration for Emacs newcomers and lots of additional power for Emacs power users.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s able to run on Windows, GNU Linux and macOS. It is compatible &lt;strong&gt;ONLY with GNU Emacs 26.1 and above&lt;/strong&gt;. In general you&#39;re advised to always run with the latest stable release - currently &lt;strong&gt;28.1&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Out of box.&lt;/li&gt; &#xA; &lt;li&gt;Clean and Fast.&lt;/li&gt; &#xA; &lt;li&gt;Quick fuzzy search.&lt;/li&gt; &#xA; &lt;li&gt;Better Org/Markdown support.&lt;/li&gt; &#xA; &lt;li&gt;Support multiple programming languages &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;C/C++/Object-C/C#/Java&lt;/li&gt; &#xA;   &lt;li&gt;Python/Ruby/Perl/PHP/Shell/Powershell/Bat&lt;/li&gt; &#xA;   &lt;li&gt;JavaScript/Typescript/JSON/YAML&lt;/li&gt; &#xA;   &lt;li&gt;HTML/CSS/XML&lt;/li&gt; &#xA;   &lt;li&gt;Golang/Swift/Rust/Dart/Elixir&lt;/li&gt; &#xA;   &lt;li&gt;...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Auto completion.&lt;/li&gt; &#xA; &lt;li&gt;Fly syntax check.&lt;/li&gt; &#xA; &lt;li&gt;Fly spell check.&lt;/li&gt; &#xA; &lt;li&gt;Git integration.&lt;/li&gt; &#xA; &lt;li&gt;Project/Workspace integration.&lt;/li&gt; &#xA; &lt;li&gt;Pomodor integration.&lt;/li&gt; &#xA; &lt;li&gt;Support docker.&lt;/li&gt; &#xA; &lt;li&gt;Better Chinese support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Chinese calendar&lt;/li&gt; &#xA;   &lt;li&gt;Youdao dictionary&lt;/li&gt; &#xA;   &lt;li&gt;Pinyin search&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisite&lt;/h2&gt; &#xA;&lt;h3&gt;OS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;Windows (Cygwin/MSYS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GNU Emacs&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;http://wikemacs.org/index.php/Installing_Emacs&#34;&gt;Installing Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dotfiles&lt;/h3&gt; &#xA;&lt;p&gt;Recommend to use &lt;a href=&#34;https://github.com/seagle0128/dotfiles&#34;&gt;Centaur Dotfiles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mv ~/.emacs.d ~/.emacs.d.bak&#xA;git clone --depth 1 https://github.com/seagle0128/.emacs.d.git ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or download the &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/archive/master.zip&#34;&gt;zip package&lt;/a&gt; directly and extract to &lt;code&gt;~/.emacs.d&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Linux, you may prefer an XDG-compatible location, please use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Please make sure ~/.emacs.d, ~/.emacs and ~/.emacs.el don&#39;t exist&#xA;git clone --depth 1 https://github.com/seagle0128/.emacs.d.git $XDG_CONFIG_HOME/emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or extract the zip package to &lt;code&gt;$XDG_CONFIG_HOME/emacs&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Then start Emacs. Wait for a while to install packages at the first startup. Enjoy! &lt;span&gt;😄&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Start Emacs with the minimal configuration for fast startup and troubleshooting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;emacs -Q -l ~/.emacs.d/init-mini.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;# Update Centaur Emacs, including configurations and packages&#xA;M-x centaur-update&#xA;&#xA;# Update Emacs configurations only&#xA;M-x centaur-update-config&#xA;&#xA;# Update ~/.dotfiles if it exists&#xA;M-x centaur-update-dotfiles&#xA;&#xA;# Update packages only&#xA;M-x centaur-update-packages&#xA;&#xA;# Update all including configurations, packages and dotfiles&#xA;M-x centaur-update-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Trick&lt;/strong&gt;: Update configurations and packages in shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;alias upgrade_emacs=&#39;emacs -Q --batch -L &#34;$HOME/.emacs.d/lisp/&#34; -l &#34;init-funcs.el&#34; -l &#34;init-package.el&#34; --eval &#34;(update-config-and-packages t)&#34;&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/.emacs.d/Dockerfile&#xA;docker build -t centaur/emacs .&#xA;docker run -it centaur/emacs bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;Customize Group&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x customize-group&lt;/code&gt; and select &lt;code&gt;centaur&lt;/code&gt;. Set and save the configurations, then restart Emacs.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Add or change the configurations in &lt;code&gt;custom.el&lt;/code&gt;, then restart Emacs.&lt;/p&gt; &#xA;&lt;p&gt;For Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq centaur-logo nil)                        ; Logo file or nil (official logo)&#xA;(setq centaur-full-name &#34;user name&#34;)           ; User full name&#xA;(setq centaur-mail-address &#34;user@email.com&#34;)   ; Email address&#xA;(setq centaur-proxy &#34;127.0.0.1:1087&#34;)          ; HTTP/HTTPS proxy&#xA;(setq centaur-socks-proxy &#34;127.0.0.1:1086&#34;)    ; SOCKS proxy&#xA;(setq centaur-server t)                        ; Enable `server-mode&#39; or not: t or nil&#xA;(setq centaur-icon t)                          ; Display icons or not: t or nil&#xA;(setq centaur-package-archives &#39;melpa)         ; Package repo: melpa, emacs-china, netease, ustc, tencent or tuna&#xA;(setq centaur-theme &#39;auto)                     ; Color theme: auto, random, system, default, pro, dark, light, warm, cold, day or night&#xA;(setq centaur-completion-style &#39;minibuffer)    ; Completion display style: minibuffer or childframe&#xA;(setq centaur-dashboard nil)                   ; Display dashboard at startup or not: t or nil&#xA;(setq centaur-restore-frame-geometry nil)      ; Restore the frame&#39;s geometry at startup: t or nil&#xA;(setq centaur-lsp &#39;eglot)                      ; Set LSP client: lsp-mode, eglot or nil&#xA;(setq centaur-lsp-format-on-save-ignore-modes &#39;(c-mode c++-mode python-mode markdown-mode)) ; Ignore format on save for some languages&#xA;(setq centaur-tree-sitter t)                   ; Enable `tree-sitter&#39; or not: t or nil&#xA;(setq centaur-chinese-calendar nil)            ; Support Chinese calendar or not: t or nil&#xA;(setq centaur-player t)                        ; Enable players or not: t or nil&#xA;(setq centaur-prettify-symbols-alist nil)      ; Alist of symbol prettifications. Nil to use font supports ligatures.&#xA;(setq centaur-prettify-org-symbols-alist nil)  ; Alist of symbol prettifications for `org-mode&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default package archives is &lt;code&gt;melpa&lt;/code&gt;. You can change it in &lt;code&gt;custom.el&lt;/code&gt;, or set manually via &lt;code&gt;M-x set-package-archives&lt;/code&gt; anytime.&lt;/p&gt; &#xA;&lt;p&gt;For the personal configurations, you could put to &lt;code&gt;~/.emacs.d/custom-post.org&lt;/code&gt; or&lt;code&gt;~/.emacs.d/custom-post.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Hydra&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggles-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;f6&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Global option toggles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;window-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-c w&lt;/code&gt;/&lt;code&gt;C-x o w&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Window management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;doom-modeline-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;doom-modeline-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-&amp;lt;f6&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mode-line options and actions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hydra-ivy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;minibuffer, ivy-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-o&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional key bindings for Ivy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ivy-hydra-read-action&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;minibuffer, ivy-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-o&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for&lt;code&gt;ivy-dispatching-done&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hydra-dired-qick-sort&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;dired&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Options for &lt;code&gt;dired-quick-sort&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;org-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;org-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Org template&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dashboard-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;dashboard-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;/&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for the dashboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dumb-jump-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-M-j&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;youdao-dictionay-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;youdao-dictionay-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;/&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;youdao-dictionary&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ztreediff-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;zreediff-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-&amp;lt;f5&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for text mode directory tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git-messenger-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-x v p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;git-messenger&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;smerge-mode-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;smerge-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-c m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;smerge-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rect-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;text-mode, prog-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for Rectangle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rect-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;org-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;S-&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for Rectangle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hideshow-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;prog-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-~&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;hideshow&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp-ui-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lsp-ui-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-&amp;lt;f6&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;lsp-ui&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;dap-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-&amp;lt;f5&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;dap-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elfeed-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;elfeed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for RSS reader &lt;code&gt;elfeed&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;xwidget-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;xwidget-webkit-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for embedded webkit browser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/97093362-c793b000-167d-11eb-924a-1892c6e95b8a.png&#34; alt=&#34;Dashboard&#34; title=&#34;Dashboard (default theme)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/97093358-b9de2a80-167d-11eb-9e5a-8591b1248c37.png&#34; alt=&#34;color_icons&#34; title=&#34;Main (color icons)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/56489193-7f894f80-6513-11e9-9c95-ea1ef41efb1f.png&#34; alt=&#34;markdown_magit&#34; title=&#34;Markdown and Magit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/56489410-2837af00-6514-11e9-9e04-a1663ac479e8.png&#34; alt=&#34;org_classic&#34; title=&#34;Org (classic theme)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/56489516-85cbfb80-6514-11e9-9dd4-8602bf8a4ec7.png&#34; alt=&#34;main_light&#34; title=&#34;Main (light theme)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display icons correctly in Centaur Emacs?&lt;/p&gt; &lt;p&gt;Generally you just use &lt;code&gt;M-x centaur-install-fonts&lt;/code&gt; to install all necessary fonts. The manual steps are below.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt; are necessary. Run &lt;code&gt;M-x all-the-icons-install-fonts&lt;/code&gt; to install the resource fonts. On Windows, the fonts should be installed manually. &lt;code&gt;all-the-icons&lt;/code&gt; only support GUI. If you don&#39;t like color icons, &lt;code&gt;(setq all-the-icons-color-icons nil)&lt;/code&gt; to disable it. Please refer to &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons.el&lt;/a&gt; for details.&lt;/p&gt; &lt;p&gt;If the icons are not displayed correctly although &lt;code&gt;all-the-icons&lt;/code&gt; fonts are installed correctly, please install the &lt;a href=&#34;http://users.teilar.gr/~g1951d/License.pdf&#34;&gt;non-free&lt;/a&gt; font &lt;a href=&#34;https://dn-works.com/wp-content/uploads/2020/UFAS-Fonts/Symbola.zip&#34;&gt;Symbola&lt;/a&gt;. This issue usually occurs on Windows. Refer to &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/issues/121&#34;&gt;#121&lt;/a&gt; for more details.&lt;/p&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://github.com/tumashu/cnfonts&#34;&gt;cnfonts&lt;/a&gt;, it will conflict with &lt;code&gt;all-the-icons&lt;/code&gt;. The workaround is &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/278#issuecomment-569510336&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For better experience, I don&#39;t recommend to use GUI with &lt;code&gt;emacsclient&lt;/code&gt; in &lt;code&gt;daemon&lt;/code&gt; mode. See &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/issues/154&#34;&gt;#154&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The packages cannot be installed, what should I do?&lt;/p&gt; &lt;p&gt;Generally it&#39;s due to connection issue. Please refer to &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/issues/98&#34;&gt;#98&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;M-x package-refresh-contents&lt;/code&gt; and try again.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;(setq gnutls-algorithm-priority &#34;NORMAL:-VERS-TLS1.3&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Use other mirror of ELPA.&lt;/li&gt; &#xA;   &lt;li&gt;Change another network to retry.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to search Chinese via pinyin?&lt;/p&gt; &lt;p&gt;In Emacs, &lt;code&gt;C-s !&lt;/code&gt;. If you just want to search &lt;code&gt;!&lt;/code&gt;, use &lt;code&gt;C-s \!&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to use the Centaur Dashboard?&lt;/p&gt; &lt;p&gt;If &lt;code&gt;centaur-dashboard&lt;/code&gt; is non-nil the Centaur Dashboard will be opened at startup automatically. After startup, you could use &lt;code&gt;F2&lt;/code&gt; to reopen it anytime. In the dashboard, please press &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt; to get the help. You can easily jump to the sections or buttons with keybindings, e.g. Homepage(&lt;code&gt;H&lt;/code&gt;), Session(&lt;code&gt;R&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;), Settings(&lt;code&gt;S&lt;/code&gt;), Update(&lt;code&gt;U&lt;/code&gt;), Recent Files (&lt;code&gt;r&lt;/code&gt;), Bookmarks(&lt;code&gt;m&lt;/code&gt;) and Projects(&lt;code&gt;p&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Does Centaur Emacs support Language Server Protocol (LSP)?&lt;/p&gt; &lt;p&gt;The LSP feature is supported and enabled by default in Centaur Emacs. &lt;code&gt;lsp-mode&lt;/code&gt; is the default client, and &lt;code&gt;eglot&lt;/code&gt; is another choice. Use &lt;code&gt;(setq centaur-lsp nil)&lt;/code&gt; to disable LSP if you don&#39;t like it.&lt;/p&gt; &lt;p&gt;To use LSP you should install the language servers. Refer to &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode#supported-languages&#34;&gt;lsp-mode: supported-languages&lt;/a&gt; or &lt;a href=&#34;https://github.com/joaotavora/eglot#connecting-to-a-server&#34;&gt;eglot: Connecting to a server&lt;/a&gt; for the details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to enable &lt;code&gt;plantuml&lt;/code&gt; in &lt;code&gt;org-mode&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Put &lt;code&gt;(setq org-plantuml-jar-path &#34;&amp;lt;path of plantumx.x.x.jar&amp;gt;&#34;)&lt;/code&gt; in &lt;code&gt;custom.el&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why the Emacs environment variables and &lt;code&gt;exec-path&lt;/code&gt; are different between GUI and terminal?&lt;/p&gt; &lt;p&gt;Please refer to #33. You should instead set environment variables in startup files like &lt;code&gt;.profile&lt;/code&gt;, &lt;code&gt;.bash_profile&lt;/code&gt; or &lt;code&gt;.zshenv&lt;/code&gt;, then &lt;code&gt;Centaur Emacs&lt;/code&gt; is able to recognize and import the environment variables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to use &lt;a href=&#34;https://github.com/syohex/emacs-zoom-window&#34;&gt;zoom-window&lt;/a&gt; in Centaur Emacs?&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/issues/169#issuecomment-590035527&#34;&gt;#169&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you think the it&#39;s helpful for you, please consider paying a cup of coffee for me. Thank you! &lt;span&gt;😄&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818854-44204900-e248-11e9-9cc5-3e6339587cd8.png&#34; alt=&#34;Alipay&#34; width=&#34;120&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818844-366ac380-e248-11e9-931c-4bd872d0566b.png&#34; alt=&#34;Wechat Pay&#34; width=&#34;120&#34;&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://paypal.me/seagle0128&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://www.paypalobjects.com/digitalassets/c/website/marketing/apac/C2/logos-buttons/optimize/44_Grey_PayPal_Pill_Button.png&#34; alt=&#34;PayPal&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.buymeacoffee.com/s9giES1&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; width=&#34;160&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>alex-hhh/emacs-sql-indent</title>
    <updated>2022-06-12T01:39:25Z</updated>
    <id>tag:github.com,2022-06-12:/alex-hhh/emacs-sql-indent</id>
    <link href="https://github.com/alex-hhh/emacs-sql-indent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Syntax based indentation for SQL files inside GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Syntax based indentation for SQL files for GNU Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/alex-hhh/emacs-sql-indent/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;sql-indent.el is a GNU Emacs minor mode which adds support for syntax-based indentation when editing SQL code: TAB indents the current line based on the syntax of the SQL code on previous lines. This works like the indentation for C and C++ code.&lt;/p&gt; &#xA;&lt;p&gt;The package also defines align rules so that the &lt;code&gt;align&lt;/code&gt; function works for SQL statements, see &lt;code&gt;sqlind-align-rules&lt;/code&gt; for which rules are defined. This can be used to align multiple lines around equal signs or &#34;as&#34; statements, like this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sqlind-minor-mode&lt;/code&gt; together with the align rules can assist in writing tidy SQL code or formatting existing SQL code. The indentation rules are customizable and they can be adapted to match your coding style.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/alex-hhh/emacs-sql-indent/master/sql-indent.org&#34;&gt;manual&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install a released version of this package from &lt;a href=&#34;http://elpa.gnu.org/packages/sql-indent.html&#34;&gt;GNU ELPA&lt;/a&gt;, by running the following commands in Emacs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET sql-indent RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install sql-indent from this repository, open the file &lt;code&gt;sql-indent.el&lt;/code&gt; in Emacs and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install-from-buffer RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The syntax-based indentation of SQL code can be turned ON/OFF at any time by enabling or disabling &lt;code&gt;sqlind-minor-mode&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x sqlind-minor-mode RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable syntax-based indentation for every SQL buffer, you can add &lt;code&gt;sqlind-minor-mode&lt;/code&gt; to &lt;code&gt;sql-mode-hook&lt;/code&gt;. First, bring up the customization buffer using the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x customize-variable RET sql-mode-hook RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Than, click on the &#34;INS&#34; button to add a new entry and put &#34;sqlind-minor-mode&#34; in the text field.&lt;/p&gt;</summary>
  </entry>
</feed>