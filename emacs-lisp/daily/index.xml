<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-02T01:32:56Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>anticomputer/age.el</title>
    <updated>2023-01-02T01:32:56Z</updated>
    <id>tag:github.com,2023-01-02:/anticomputer/age.el</id>
    <link href="https://github.com/anticomputer/age.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transparent age encryption support for Emacs modeled after EPG/EPA&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;age.el: age encryption support for Emacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html:&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/anticomputer/age.el/main/img/emacs-age.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;age.el is intended to provide transparent age&lt;a href=&#34;https://github.com/FiloSottile/age&#34;&gt;1&lt;/a&gt; based file encryption and decryption in Emacs. As such age.el does not support all age CLI based use cases. Rather age.el assumes you have configured a default identity and a default recipient, e.g. based off your ssh private key and ssh public key in &lt;del&gt;.ssh/id_rsa[.pub]&lt;/del&gt;, which is the default setting.&lt;/p&gt; &#xA;&lt;p&gt;The main use case is for folks who like to e.g. encrypt their Org notes and things of that nature. Since age.el provides a direct port of EPG/EPA functionality it can support all roles that .gpg files can support in Emacs, e.g. &lt;del&gt;.authinfo.age&lt;/del&gt; should work fine as well.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Put age.el somewhere in your load-path and:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;age) (age-file-enable) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to use &lt;del&gt;use-package&lt;/del&gt;, a quelpa configuration looks like:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package age :quelpa (age :fetcher github :repo &#34;anticomputer/age.el&#34;) :ensure t :demand :config (age-file-enable)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can now open, edit, and save age encryted files from Emacs as long as they contain the .age extension.&lt;/p&gt; &#xA;&lt;p&gt;age.el also supports creating new .age files through find-file and they will be encrypted to your default recipient on first save.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src M-x find-file RET /tmp/test.age RET M-x save-buffer RET #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Will create an age encrypted file named test.age in the &lt;del&gt;/tmp&lt;/del&gt; directory. It will be encrypted to a recipient of &lt;del&gt;.ssh/id_rsa.pub&lt;/del&gt; by default and decrypted with an identity of &lt;del&gt;.ssh/id_rsa&lt;/del&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the default key values via &lt;del&gt;age-default-recipient&lt;/del&gt; and &lt;del&gt;age-default-identity&lt;/del&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;age.el tries to remain composable with the core philosophy of age itself and as such does not try to provide a kitchen sink worth of features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find my current configuration for age.el below. I am using [[https://github.com/str4d/age-plugin-yubikey][age-yubikey-plugin]] to supply an age identity off of a yubikey PIV slot. The slot is configured to require a touch (with a 15 second cache) for every age client query against the identity stored in that slot.&lt;/p&gt; &#xA;&lt;p&gt;This means that every age.el decrypt requires a physical touch for confirmation. The cache makes it such that e.g. decrypting a series of age encrypted org files in sequence only requires a single touch confirmation.&lt;/p&gt; &#xA;&lt;p&gt;This limits the amount of actively accessible encrypted data inside Emacs to only the things I physically confirm, and only for 15 second windows, but without having to type a passphrase at any point. This excludes any open buffers that have decrypted data in memory of course.&lt;/p&gt; &#xA;&lt;p&gt;The key scheme I employ encrypts against the public keys of two main identities. My aforementioned yubikey identity as well as a disaster recovery identity, who&#39;s private key is passphrase encrypted and kept in cold storage.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll note that I&#39;ve set &lt;del&gt;age-default-identity&lt;/del&gt; and &lt;del&gt;age-default-recipient&lt;/del&gt; to be lists. These two variables can be file paths, key strings, or lists that contain a mix of both. This allows you to easily encrypt to a series of identities in whatever way you choose to store and manage them.&lt;/p&gt; &#xA;&lt;p&gt;Note that I&#39;m using [[https://github.com/str4d/rage][rage]] as opposed to [[https://github.com/FiloSottile/age][age]] as my age client. This is due the aforementioned lack of pinentry support in the reference age implemention, which rage does support.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package age :quelpa (age :fetcher github :repo &#34;anticomputer/age.el&#34;) :ensure t :demand :custom ;; use rage for pinentry, note this &lt;em&gt;has&lt;/em&gt; to go through customize (age-program &#34;rage&#34;) (age-default-identity &#34;&lt;del&gt;/.ssh/age_yubikey&#34;) (age-default-recipient &#39;(&#34;&lt;/del&gt;/.ssh/age_yubikey.pub&#34; &#34;~/.ssh/age_recovery.pub&#34;)) :config (age-file-enable))&lt;/p&gt; &#xA;&lt;p&gt;(provide &#39;my-age-init) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;I use the above configuration in combination with a version of &lt;del&gt;org-roam&lt;/del&gt; that has the following patches applied:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://patch-diff.githubusercontent.com/raw/org-roam/org-roam/pull/2302.patch&#34;&gt;https://patch-diff.githubusercontent.com/raw/org-roam/org-roam/pull/2302.patch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This patch enables &lt;del&gt;.org.age&lt;/del&gt; discoverability in &lt;del&gt;org-roam&lt;/del&gt; and beyond that everything just works the same as you&#39;re used to with &lt;del&gt;.org.gpg&lt;/del&gt; files. This patch was merged into org-roam &lt;del&gt;main&lt;/del&gt; on Dec 31, 2022, so any org-roam release post that date should provide you with age support out of the box.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Other fun examples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Encrypting a file to a given GitHub username&#39;s ssh keys&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my/age-github-keys-for (username) &#34;Turn GitHub USERNAME into a list of ssh public keys.&#34; (let* ((res (shell-command-to-string (format &#34;curl -s &lt;a href=&#34;https://api.github.com/users/%s/keys&#34;&gt;https://api.github.com/users/%s/keys&lt;/a&gt;&#34; (shell-quote-argument username)))) (json (json-parse-string res :object-type &#39;alist))) (cl-assert (arrayp json)) (cl-loop for alist across json for key = (cdr (assoc &#39;key alist)) when (and (stringp key) (string-match-p &#34;^\(ssh-rsa\|ssh-ed25519\) AAAA&#34; key)) collect key)))&lt;/p&gt; &#xA;&lt;p&gt;(defun my/age-save-with-github-recipient (username) &#34;Encrypt an age file to the public keys of GitHub USERNAME.&#34; (interactive &#34;MGitHub username: &#34;) (cl-letf (((symbol-value &#39;age-default-recipient) (append (if (listp age-default-recipient) age-default-recipient (list age-default-recipient)) (my/age-github-keys-for username)))) (save-buffer))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Visual indicators of encryption and decryption in progress&lt;/p&gt; &#xA;&lt;p&gt;Since I use a yubikey touch controlled age identity I find it useful to have a visual indication of when age.el is performing operations that might require me to touch the yubikey. The following advice adds visual notifications to &lt;del&gt;age-start-decrypt&lt;/del&gt; and &lt;del&gt;age-start-encrypt&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m also using this as a way to get a good feel for just how much Emacs is interacting with my encrypted data.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;notifications)&lt;/p&gt; &#xA;&lt;p&gt;(defun my/age-notify (msg) (cond ((eq system-type &#39;gnu/linux) (notifications-notify :title &#34;age.el&#34; :body (format &#34;%s&#34; msg) :urgency &#39;low :timeout 800)) ((eq system-type &#39;darwin) (do-applescript (format &#34;display notification &#34;%s&#34; with title &#34;age.el&#34;&#34; msg))) (t (message (format &#34;age.el: %s&#34; msg)))))&lt;/p&gt; &#xA;&lt;p&gt;(defun my/age-notify-decrypt (&amp;amp;rest args) (my/age-notify &#34;decrypt&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(defun my/age-notify-encrypt (&amp;amp;rest args) (my/age-notify &#34;encrypt&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(defun my/age-toggle-decrypt-notifications () (interactive) (cond ((advice-member-p #&#39;my/age-notify-decrypt #&#39;age-start-decrypt) (advice-remove #&#39;age-start-decrypt #&#39;my/age-notify-decrypt) (message &#34;Disabled age decrypt notifications.&#34;)) (t (advice-add #&#39;age-start-decrypt :before #&#39;my/age-notify-decrypt) (message &#34;Enabled age decrypt notifications.&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;(defun my/age-toggle-encrypt-notifications () (interactive) (cond ((advice-member-p #&#39;my/age-notify-encrypt #&#39;age-start-encrypt) (advice-remove #&#39;age-start-encrypt #&#39;my/age-notify-encrypt) (message &#34;Disabled age encrypt notifications.&#34;)) (t (advice-add #&#39;age-start-encrypt :before #&#39;my/age-notify-encrypt) (message &#34;Enabled age encrypt notifications.&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;;; we only care about decrypt notifications really (my/age-toggle-decrypt-notifications) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Known issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Lack of pinentry support in age&lt;/p&gt; &#xA;&lt;p&gt;The age reference client does not support pinentry by design. Users are encouraged to use identity (private) keys and recipient (public) keys, and manage those secrets outside of Emacs accordingly. As such age.el does not currently support passphrase based age Encryption/Decryption as we do not have a tty available to provide a passphrase to age (I think).&lt;/p&gt; &#xA;&lt;p&gt;*** Workaround: pinentry support through rage&lt;/p&gt; &#xA;&lt;p&gt;You can work around this by using [[https://github.com/str4d/rage][rage]] instead of age, which is a Rust based implementation of the [[https://github.com/C2SP/C2SP/blob/main/age.md][Age spec]] and which does support pinentry by default and age.el will work with rage as well. An example rage config may look like:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package age :quelpa (age :fetcher github :repo &#34;anticomputer/age.el&#34;) :ensure t :demand :custom ;; use rage for pinentry, note this &lt;em&gt;has&lt;/em&gt; to go through customize (age-program &#34;rage&#34;) (age-default-identity &#34;&lt;del&gt;/.ssh/id_rsa&#34;) (age-default-recipient &#34;&lt;/del&gt;/.ssh/id_rsa.pub&#34;) :config (age-file-enable)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You will now be able to use passphrase protected ssh keys as well:&lt;/p&gt; &#xA;&lt;p&gt;#+html:&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/anticomputer/age.el/main/img/emacs-rage.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** Tip: configuring pinentry-emacs for minibuffer passphrase entry&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to keep your pinentry support inside of emacs entirely for whatever reason, you can use &lt;del&gt;pinentry-emacs&lt;/del&gt; for a pinentry program that will prompt you inside of Emacs. Most distributions have a package for &lt;del&gt;pinentry-emacs&lt;/del&gt; available, which provides a GNU pinentry executable with the Emacs flavor enabled.&lt;/p&gt; &#xA;&lt;p&gt;If your distribution does not provide an Emacs enabled build of GNU pinentry, you can find the GNU pinentry collection, which contains the Emacs flavor of pinentry as well [[https://git.gnupg.org/cgi-bin/gitweb.cgi?p=pinentry.git][here]].&lt;/p&gt; &#xA;&lt;p&gt;Warning: don&#39;t confuse GNU pinentry with this [[https://github.com/ecraven/pinentry-emacs][pinentry-emacs shellscript]] they are not the same thing.&lt;/p&gt; &#xA;&lt;p&gt;Note: if you&#39;re saying =file not found= errors when trying to use &lt;del&gt;pinentry&lt;/del&gt; you&#39;ll also want to ensure the Emacs pinentry socket actually exists and is running by using the GNU ELPA [[https://elpa.gnu.org/packages/pinentry.html][pinentry]] package:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package pinentry :config (pinentry-start)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;With both of those requirements satisfied, rage will use &lt;del&gt;pinentry-emacs&lt;/del&gt; to prompt you for passphrases in the minibuffer.&lt;/p&gt; &#xA;&lt;p&gt;#+html:&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/anticomputer/age.el/main/img/rage-pinentry-emacs.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Direct use of passphrase encrypted age files&lt;/p&gt; &#xA;&lt;p&gt;This requires you to use rage, or another age-spec compliant client that supports pinentry.&lt;/p&gt; &#xA;&lt;p&gt;By default, age.el will be able to open and save passphrase encrypted age files. It will detect the scrypt stanza in the age file and set the age.el handling context for passphrase mode accordingly.&lt;/p&gt; &#xA;&lt;p&gt;You can also programmatically force age.el into passphrase mode by binding &lt;del&gt;age-default-identity&lt;/del&gt; and &lt;del&gt;age-default-recipient&lt;/del&gt; to nil temporarily, e.g.:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my/age-open-with-passphrase (file) (interactive &#34;fPassphrase encrypted age file: &#34;) (cl-letf (((symbol-value &#39;age-default-identity) nil) ((symbol-value &#39;age-default-recipient) nil)) (find-file file)))&lt;/p&gt; &#xA;&lt;p&gt;(defun my/age-save-with-passphrase () (interactive) (cl-letf (((symbol-value &#39;age-default-identity) nil) ((symbol-value &#39;age-default-recipient) nil)) (save-buffer))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** org-roam support for age encrypted org files&lt;/p&gt; &#xA;&lt;p&gt;Org-roam has merged &lt;a href=&#34;https://github.com/org-roam/org-roam/pull/2302&#34;&gt;https://github.com/org-roam/org-roam/pull/2302&lt;/a&gt; which provides &lt;del&gt;.org.age&lt;/del&gt; discoverability support for org-roam, so if you update to the latest release from e.g. MELPA or the main branch, org-roam will function with .age encrypted org files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disclaimer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is experimental software and subject to heavy feature iterations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why age over gpg?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is, apparently, a heated topic and folks more qualified than me have commented on this in great detail over many years. The following blog posts I think provide a good summary of the state of the debate regarding the OpenPGP specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://www.openbsd.org/papers/bsdcan-signify.html][signify: Securing OpenBSD From Us To You]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://latacora.micro.blog/2019/07/16/the-pgp-problem.html][The PGP Problem]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to reddit&#39;s &lt;del&gt;/u/a-huge-waste-of-time&lt;/del&gt; for linking those references.&lt;/p&gt; &#xA;&lt;p&gt;In true megalomaniac fashion I&#39;ll [[https://www.reddit.com/r/emacs/comments/zyd7bh/comment/j25ag7s/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3][quote myself]] out of the age.el &lt;del&gt;/r/emacs&lt;/del&gt; announcement thread when asked why I was looking to rid myself of gpg:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote I wanted to reduce the amount of key management in my life to the bare minimum. I don&#39;t use gpg for its intended purpose (maintaining a web of trust with folks that you communicate with), but rather only use it for Emacs file encryption and things like password-store (which I&#39;m replacing with &lt;a href=&#34;https://github.com/FiloSottile/passage&#34;&gt;https://github.com/FiloSottile/passage&lt;/a&gt; and will also port the Emacs pass frontend to work with).&lt;/p&gt; &#xA;&lt;p&gt;Age functions with ssh keys as well as its own key formats, so it hugely simplifies the amount of key material I have to maintain. Especially when managing key material on e.g. YubiKeys, maintaining Encryption, Authentication, and Signing subkeys and juggling what is essentially a personal PKI (not to mention bringing it along on every system) surrounding gpg&#39;s key trust relationship maintainance.&lt;/p&gt; &#xA;&lt;p&gt;I use e2e encrypted email and messaging services for encrypted communications and ssh keys to sign git commits.&lt;/p&gt; &#xA;&lt;p&gt;So with age I can also just use my ssh public key to encrypt and my ssh private key to decrypt my files. If I want to get fancy, I can use something like &lt;a href=&#34;https://github.com/str4d/age-plugin-yubikey&#34;&gt;https://github.com/str4d/age-plugin-yubikey&lt;/a&gt; to provide the key material for my age operations (which should compose with age.el quite well also, i.e. you can have every decrypt operation have a touch requirement in Emacs that way).&lt;/p&gt; &#xA;&lt;p&gt;TL;DR: gpg is overly complex for my use case and I&#39;m currently shoehorning gpg into a role it was never designed or intended to play. Complexity of use and secure use of cryptography don&#39;t compose well for most folks, so now that gpg no longer serves any real purpose in my environment, it&#39;s time to retire it from my dependency stack. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;Having said that, age.el is not intended to encourage you to abandon gpg. However, if you&#39;ve been looking for a lighter weight alternative for Emacs encryption, it might be a good fit for you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copyright&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This code was ported from the existing EPA and EPG Emacs code and as such their original copyright applies:&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 1999-2000, 2002-2022 Free Software Foundation, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Author: Daiki Ueno &lt;a href=&#34;mailto:ueno@unixuser.org&#34;&gt;ueno@unixuser.org&lt;/a&gt; Keywords: emacs Version: 1.0.0&lt;/p&gt; &#xA;&lt;p&gt;This file is part of GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>orzechowskid/tsi.el</title>
    <updated>2023-01-02T01:32:56Z</updated>
    <id>tag:github.com,2023-01-02:/orzechowskid/tsi.el</id>
    <link href="https://github.com/orzechowskid/tsi.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tsi.el: tree-sitter indentation minor mode for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;use the syntax tree provided by &lt;a href=&#34;https://emacs-tree-sitter.github.io/tree-sitter-mode/&#34;&gt;the &lt;code&gt;tree-sitter&lt;/code&gt; minor mode&lt;/a&gt; as the basis for indentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/orzechowskid/tsi.el/actions/workflows/github-actions.yml/badge.svg?branch=main&#34; alt=&#34;tests?&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supported languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Javascript/Typescript/JSX/TSX&lt;/li&gt; &#xA; &lt;li&gt;JSON&lt;/li&gt; &#xA; &lt;li&gt;CSS/SCSS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;an important note&lt;/h2&gt; &#xA;&lt;p&gt;this package is intended for use in emacs versions 28 and older. emacs 29 will ship with an all-new, native, tree-sitter experience (including treesit-aware major modes for many programming languages) meaning you should not need this package or its dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Dependencies: make sure you have &lt;a href=&#34;https://emacs-tree-sitter.github.io/installation/&#34;&gt;&lt;code&gt;tree-sitter&lt;/code&gt;&lt;/a&gt; installed already.&lt;/li&gt; &#xA; &lt;li&gt;Install: download this package and place &lt;code&gt;tsi.el&lt;/code&gt;, and the desired language-specific &lt;code&gt;tsi-&amp;lt;foo&amp;gt;.el&lt;/code&gt; files, inside a directory on your &lt;code&gt;load-path&lt;/code&gt;. or install this repository via &lt;code&gt;straight.el&lt;/code&gt; which does these things for you: &lt;code&gt;(straight-use-package &#39;(tsi :type git :host github :repo &#34;orzechowskid/tsi.el&#34;))&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Require: &lt;code&gt;(require &#39;tsi-&amp;lt;foo&amp;gt;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enable: &lt;code&gt;(tsi-&amp;lt;foo&amp;gt;-mode t)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Useful variables are members of the relevant language-specific custom group and can be viewed and modified with the command &lt;code&gt;M-x customize-group [RET] tsi-&amp;lt;foo&amp;gt; [RET]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs&lt;/h2&gt; &#xA;&lt;p&gt;If a supported language is not indenting in the way you feel it should, then maybe it&#39;s a bug! open an issue and we&#39;ll discuss it.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs for existing and new languages are most welcome. Please make sure that any changes are accompanied with unit tests (see tsi-typescript.test.el for an example). Unit tests use the super rad &lt;a href=&#34;https://github.com/jorgenschaefer/emacs-buttercup&#34;&gt;&lt;code&gt;buttercup&lt;/code&gt;&lt;/a&gt; framework, and can be run via the following shell command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ emacs -batch -q -L . -l tsi-&amp;lt;foo&amp;gt;.test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPLv3. see LICENSE in the top level of this repository.&lt;/p&gt;</summary>
  </entry>
</feed>