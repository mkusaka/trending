<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-10T01:31:04Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lizqwerscott/mcp.el</title>
    <updated>2025-05-10T01:31:04Z</updated>
    <id>tag:github.com,2025-05-10:/lizqwerscott/mcp.el</id>
    <link href="https://github.com/lizqwerscott/mcp.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Mcp client inside Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: MCP.el - Model Context Protocol for Emacs&lt;/p&gt; &#xA;&lt;p&gt;[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPLv3-blue.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This is an Emacs client for interfacing with [[https://modelcontextprotocol.io/introduction][MCP]], supporting connections to MCP servers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Structured communication with MCP servers&lt;/li&gt; &#xA; &lt;li&gt;Support for filesystem and generic MCP servers&lt;/li&gt; &#xA; &lt;li&gt;Extensible tool and prompt system&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous and synchronous operations&lt;/li&gt; &#xA; &lt;li&gt;Resource management capabilities&lt;/li&gt; &#xA; &lt;li&gt;Intuitive interface for managing server lifecycle (start/stop/restart)&lt;/li&gt; &#xA; &lt;li&gt;Integration with popular Emacs packages (e.g., gptel, llm)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Emacs 30 or higher version&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your configuration file ~/.emacs: #+begin_src elisp (add-to-list &#39;load-path &#34;&amp;lt;path-to-mcp.el&amp;gt;&#34;) (require &#39;mcp-hub) #+end_src&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage ** Mcp hub *** Configuring MCP Servers #+begin_src elisp (setq mcp-hub-servers &#39;((&#34;filesystem&#34; . (:command &#34;npx&#34; :args (&#34;-y&#34; &#34;@modelcontextprotocol/server-filesystem&#34; &#34;/home/lizqwer/MyProject/&#34;))) (&#34;fetch&#34; . (:command &#34;uvx&#34; :args (&#34;mcp-server-fetch&#34;))) (&#34;qdrant&#34; . (:url &#34;&lt;a href=&#34;http://localhost:8000/sse&#34;&gt;http://localhost:8000/sse&lt;/a&gt;&#34;)) (&#34;graphlit&#34; . ( :command &#34;npx&#34; :args (&#34;-y&#34; &#34;graphlit-mcp-server&#34;) :env ( :GRAPHLIT_ORGANIZATION_ID &#34;your-organization-id&#34; :GRAPHLIT_ENVIRONMENT_ID &#34;your-environment-id&#34; :GRAPHLIT_JWT_SECRET &#34;your-jwt-secret&#34;))))) #+end_src You can use =mcp-hub-start-all-server= to start all MCP servers, such as launching all MCP servers after starting Emacs. #+begin_src elisp (add-hook &#39;after-init-hook #&#39;mcp-hub-start-all-server) #+end_src *** Managing MCP Servers Use =mcp-hub= to launch the server management interface, which will automatically start all configured MCP servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/user-attachments/assets/31877c0b-d71a-491d-9830-2afed8d6218a&#34; alt=&#34;mcp-hub&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** Keymap | key | function | description | |-----+----------------------------+-----------------------------------------| | l | mcp-hub-view-log | View server logs | | s | mcp-hub-start-server | Start server under cursor | | k | mcp-hub-close-server | Stop server under cursor | | r | mcp-hub-restart-server | Restart server under cursor | | S | mcp-hub-start-all-server | Start all configured servers | | R | mcp-hub-restart-all-server | Restart all configured servers | | K | mcp-hub-close-all-server | Stop all running servers | *** use with [[https://github.com/karthink/gptel][gptel]] A function for registering all MCP tools. #+begin_src elisp (defun gptel-mcp-register-tool () (interactive) (let ((tools (mcp-hub-get-all-tool :asyncp t :categoryp t))) (mapcar #&#39;(lambda (tool) (apply #&#39;gptel-make-tool tool)) tools))) #+end_src Activate all MCP tools using gptel. #+begin_src elisp (defun gptel-mcp-use-tool () (interactive) (let ((tools (mcp-hub-get-all-tool :asyncp t :categoryp t))) (mapcar #&#39;(lambda (tool) (let ((path (list (plist-get tool :category) (plist-get tool :name)))) (push (gptel-get-tool path) gptel-tools))) tools))) #+end_src Request gptel to cease using all mcp tools. #+begin_src elisp (defun gptel-mcp-close-use-tool () (interactive) (let ((tools (mcp-hub-get-all-tool :asyncp t :categoryp t))) (mapcar #&#39;(lambda (tool) (let ((path (list (plist-get tool :category) (plist-get tool :name)))) (setq gptel-tools (cl-remove-if #&#39;(lambda (tool) (equal path (list (gptel-tool-category tool) (gptel-tool-name tool)))) gptel-tools)))) tools))) #+end_src ** Example [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] server. *** Establish the connection first. #+begin_src elisp (mcp-connect-server &#34;filesystem&#34; :command &#34;npx&#34; :args &#39;(&#34;-y&#34; &#34;@modelcontextprotocol/server-filesystem&#34; &#34;~/Downloads/&#34;) :initial-callback #&#39;(lambda (connection) (message &#34;%s connection&#34; (jsonrpc-name connection))) :tools-callback #&#39;(lambda (connection tools) (message &#34;%s tools: %s&#34; (jsonrpc-name connection) tools)) :prompts-callback #&#39;(lambda (connection prompts) (message &#34;%s prompts: %s&#34; (jsonrpc-name connection) prompts)) :resources-callback #&#39;(lambda (connection resources) (message &#34;%s resources: %s&#34; (jsonrpc-name connection) resources))) #+end_src *** Define the use of tools. The current text is being tested using the [[https://github.com/karthink/gptel/issues/514][gptel tool]] branch.Use =mcp-make-text-tool= to create standard tool call data ([[https://github.com/ahyatt/llm/discussions/124][Discussions]]).It is recommended to create tools within the tools-callback or wait for the mcp connect server to complete. #+begin_src elisp (mcp-make-text-tool &#34;filesystem&#34; &#34;write_file&#34;) #+end_src This will generate a data structure where the function is an auto-generated synchronous or asynchronous lambda function for accessing the MCP server. #+begin_src elisp (list :function #&#39;(lambda (&amp;amp;rest args) ;; Synchronous or asynchronous access to the MCP server&#39;s Lambda function. ) :name &#34;write_file&#34; :async nil :description &#34;Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.&#34; :args ((:type &#34;string&#34; :name &#34;path&#34; :description &#34;path&#34;) (:type &#34;string&#34; :name &#34;content&#34; :description &#34;content&#34;)) :category &#34;files&#34;) #+end_src *** Disconnect from the server. #+begin_src elisp (mcp-stop-server &#34;filesystem&#34;) #+end_src *** Manual function call **** Synchronize #+begin_src elisp (let ((connection (gethash &#34;filesystem&#34; mcp-server-connections))) (mcp-call-tool connection &#34;write_file&#34; &#39;(:path &#34;filename or file path&#34; :content &#34;the file content&#34;))) #+end_src **** Asynchronous #+begin_src elisp (let ((connection (gethash &#34;filesystem&#34; mcp-server-connections))) (mcp-async-call-tool connection &#34;write_file&#34; &#39;(:path &#34;filename or file path&#34; :content &#34;the file content&#34;) #&#39;(lambda (res) ;; handle res (mcp--parse-tool-call-result res)) #&#39;(lambda (code message) ;; handle error (format &#34;call %s tool error with %s: %s&#34; tool-name code message)))) #+end_src *** Manual get prompt Since the [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] lacks prompts, the [[https://github.com/modelcontextprotocol/servers/tree/main/src/everything][everything]] server is used for demonstration. **** Synchronize #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-get-prompt connection &#34;complex_prompt&#34; &#39;(:temperature &#34;1.0&#34;))) #+end_src **** Asynchronous #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-async-get-prompt connection &#34;complex_prompt&#34; &#39;(:temperature &#34;1.0&#34;) #&#39;(lambda (res) (message &#34;prompt: %s&#34; res)) #&#39;(lambda (code message) (message &#34;error call: %s, %s&#34; code message)))) #+end_src *** Manual get resources Since the [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] lacks resources, the [[https://github.com/modelcontextprotocol/servers/tree/main/src/everything][everything]] server is used for demonstration. **** Synchronize #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-read-resource connection &#34;test://static/resource/1&#34;)) #+end_src **** Asynchronous #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-async-read-resource connection &#34;test://static/resource/1&#34; #&#39;(lambda (resource) (message &#34;res: %s&#34; resource)))) #+end_src *** Get resource templates Since the [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] lacks resources, the [[https://github.com/modelcontextprotocol/servers/tree/main/src/everything][everything]] server is used for demonstration. #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-async-list-resource-templates connection #&#39;(lambda (connection templates) (message &#34;%s&#34; templates)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Roadmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP SSE based MCP server connections&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; mcp marketplace (browser and auto install mcp server)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Simplified integration with other Emacs AI clients&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Expanded documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Full MCP protocol client implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License This project is licensed under the GNU General Public License v3.0 - see the [[file:LICENSE][LICENSE]] file for details.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>