<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-17T01:35:50Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ronisbr/julia-ts-mode</title>
    <updated>2023-01-17T01:35:50Z</updated>
    <id>tag:github.com,2023-01-17:/ronisbr/julia-ts-mode</id>
    <link href="https://github.com/ronisbr/julia-ts-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experimental Emacs Julia major mode using tree-sitter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Julia major mode using tree-sitter&lt;/h1&gt; &#xA;&lt;p&gt;Emacs major mode for the Julia programming language using tree-sitter for font-lock, indentation, imenu, and navigation. It is derived from &lt;a href=&#34;https://github.com/JuliaEditorSupport/julia-emacs&#34;&gt;&lt;code&gt;julia-mode&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;This package requires:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Emacs 29 or newer built with tree-sitter support;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-julia&#34;&gt;Julia tree-sitter grammar&lt;/a&gt;; and&lt;/li&gt; &#xA; &lt;li&gt;The package &lt;a href=&#34;https://github.com/JuliaEditorSupport/julia-emacs&#34;&gt;&lt;code&gt;julia-mode&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation from MELPA&lt;/h2&gt; &#xA;&lt;p&gt;Coming soon.&lt;/p&gt; &#xA;&lt;h2&gt;Installation from source&lt;/h2&gt; &#xA;&lt;p&gt;You can install this package from source by cloning this directory and adding the following lines to your Emacs configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path to the source-code tree&amp;gt;&#34;)&#xA;(require &#39;julia-ts-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;LSP Configuration&lt;/h1&gt; &#xA;&lt;p&gt;This mode is derived from &lt;code&gt;julia-mode&lt;/code&gt;. Hence, most of the feature available for it will also work in &lt;code&gt;julia-ts-mode&lt;/code&gt;. However, the LSP requires additional configuration. First, it is necessary to install the package &lt;a href=&#34;https://github.com/gdkrmr/lsp-julia&#34;&gt;&lt;code&gt;lsp-julia&lt;/code&gt;&lt;/a&gt;, and apply the desired configuration as stated in its documentation. Afterward, add the following code to your Emacs configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;lsp-language-id-configuration &#39;(julia-ts-mode . &#34;julia&#34;))&#xA;(lsp-register-client&#xA;(make-lsp-client :new-connection (lsp-stdio-connection &#39;lsp-julia--rls-command)&#xA;                 :major-modes &#39;(julia-mode ess-julia-mode julia-ts-mode)&#xA;                 :server-id &#39;julia-ls&#xA;                 :multi-root t))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>beancount/beancount-mode</title>
    <updated>2023-01-17T01:35:50Z</updated>
    <id>tag:github.com,2023-01-17:/beancount/beancount-mode</id>
    <link href="https://github.com/beancount/beancount-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs major-mode to work with Beancount ledger files&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Emacs major-mode to work with Beancount ledger files&lt;/p&gt; &#xA;&lt;p&gt;This package provides =beancount-mode= an Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html][major-mode]] implementing syntax highlighting, indentation, completion , and other facilities to edit and work with Beancount ledger files.&lt;/p&gt; &#xA;&lt;p&gt;To instruct Emacs to activate =beancount-mode= when opening files with a &lt;del&gt;.beancount&lt;/del&gt; extension, you can add this code to your Emacs configuration, typically in the =~/.emacs.d/init.el= file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-to-list &#39;load-path &#34;/path/to/beancount-mode/&#34;) (require &#39;beancount) (add-to-list &#39;auto-mode-alist &#39;(&#34;\.beancount\&#39;&#34; . beancount-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Most facilities commonly provided by Emacs major modes are implemented by =beancount-mode=. Documentation on the provided functionality and on the default keybindings can be obtained with the =describe-mode= command in a buffer with =beancount-mode= active.&lt;/p&gt; &#xA;&lt;p&gt;In a nutshell, when =beancount-mode= is active:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &#34;TAB&#34; key either indents, completes, or folds the heading at point, depending on the context.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Amounts in postings are indented so that the decimal point is at the =beancount-number-alignment-column= column. Setting this variable to 0 will cause the alignment column to be determined from file content.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Postings in transactions, as well as metadata, links, and tags following directives, and are indented with =beancount-transaction-indent= spaces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pressing the &#34;RET&#34; key causes the current line to be automatically indented. If the current line is a posting, the amount will be indented as described above.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The automatic indentation behavior is defined by Emacs auto indent mechanism, however, it can be surprising or undesired. It can be disabled setting =electric-indent-chars= to =nil= after loading =beancount-mode=, for example like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-hook &#39;beancount-mode-hook (lambda () (setq-local electric-indent-chars nil))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Beancount ledger files can grow very large. It is thus often practical to structure them in sections and subsections. To support this, =beancount-mode= leverages [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Outline-Mode.html][Outline minor-mode]] to enable navigation of the document structure to fold and unfold the document sections, similarly to what is possible in [[https://orgmode.org/][Org mode]]. Lines starting with one asterisks &#34;=*=&#34; or three or more semicolons &#34;=;;;=&#34; are interpreted as section headings. In Beancount, the semicolon starts a comment and all lines starting with an asterisks are ignored. The number of semicolons or asterisks determines the heading level.&lt;/p&gt; &#xA;&lt;p&gt;To enable this functionality, =outline-minor-mode= should be explicitly activated. It is possible to do so automatically when =beancout-mode= is activated:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-hook &#39;beancount-mode-hook #&#39;outline-minor-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Outline minor mode uses a rather peculiar choice of keybindings. It is possible to map the most used functionality to keys more familiar to =org-mode= users adding a few lines to the Emacs configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (define-key beancount-mode-map (kbd &#34;C-c C-n&#34;) #&#39;outline-next-visible-heading) (define-key beancount-mode-map (kbd &#34;C-c C-p&#34;) #&#39;outline-previous-visible-heading) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively the keybindings for =outline-minor-mode= can be globally remapped. Please refer to the =outline-minor-mode= documentation in the Emacs manual for more details.&lt;/p&gt; &#xA;&lt;p&gt;The =etc/emacsrc= file contains some example configuration for =beancount-mode= and some experiments that may find their way into the main codebase.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ledger/ledger-mode</title>
    <updated>2023-01-17T01:35:50Z</updated>
    <id>tag:github.com,2023-01-17:/ledger/ledger-mode</id>
    <link href="https://github.com/ledger/ledger-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Lisp files for interacting with the C++Ledger accounting system&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ledger/ledger-mode/actions&#34;&gt;&lt;img src=&#34;https://github.com/ledger/ledger-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL--2.0-blue.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/ledger-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/ledger-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/ledger-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/ledger-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ledger-mode&lt;/h1&gt; &#xA;&lt;p&gt;This Emacs library provides a major mode for editing files in the format used by the &lt;a href=&#34;https://github.com/ledger/ledger&#34;&gt;&lt;code&gt;ledger&lt;/code&gt;&lt;/a&gt; command-line accounting system.&lt;/p&gt; &#xA;&lt;p&gt;It also provides automated support for some &lt;code&gt;ledger&lt;/code&gt; workflows, such as reconciling transactions, or running certain reports.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;If you choose not to use one of the convenient packages in &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt;, you&#39;ll need to add the directory containing &lt;code&gt;ledger-mode.el&lt;/code&gt; to your &lt;code&gt;load-path&lt;/code&gt;, and then &lt;code&gt;(require &#39;ledger-mode)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Configuring completion&lt;/h1&gt; &#xA;&lt;p&gt;Earlier &lt;code&gt;ledger-mode&lt;/code&gt; versions had an always-on &lt;code&gt;TAB&lt;/code&gt; completion system, but now the code uses the standard Emacs &lt;code&gt;completion-at-point&lt;/code&gt; system for compatibility with all completion UIs, e.g. &lt;code&gt;company&lt;/code&gt; or &lt;code&gt;helm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &#34;Adding Transactions&#34; section of the ledger-mode Info manual for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ledger-mode&lt;/code&gt; will automatically associate itself with &lt;code&gt;.ledger&lt;/code&gt; files when installed as a package. &lt;code&gt;ledger-mode&lt;/code&gt; includes documentation in info format, accessible through Emacs with &lt;kbd&gt;C-h i&lt;/kbd&gt;. The info chapter includes a quick demo as well as more extensive documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Related packages&lt;/h1&gt; &#xA;&lt;p&gt;In-buffer checking of formatting and balancing of transactions is available built-in for Emacs version 26 and later using &lt;code&gt;flymake-mode&lt;/code&gt;. For flycheck users (and users of Emacs 25 and earlier), &lt;a href=&#34;https://github.com/purcell/flycheck-ledger&#34;&gt;&lt;code&gt;flycheck-ledger&lt;/code&gt;&lt;/a&gt; is available.&lt;/p&gt;</summary>
  </entry>
</feed>