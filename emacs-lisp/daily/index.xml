<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-15T01:38:46Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rakete/go-back</title>
    <updated>2023-06-15T01:38:46Z</updated>
    <id>tag:github.com,2023-06-15:/rakete/go-back</id>
    <link href="https://github.com/rakete/go-back" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Move point back to where you were before.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>swift-emacs/swift-mode</title>
    <updated>2023-06-15T01:38:46Z</updated>
    <id>tag:github.com,2023-06-15:/swift-emacs/swift-mode</id>
    <link href="https://github.com/swift-emacs/swift-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs support for Apple&#39;s Swift programming language.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swift-emacs/swift-mode/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swift-emacs/swift-mode/actions?query=workflow%3A%22Run+Tests%22&#34;&gt;&lt;img src=&#34;https://github.com/swift-emacs/swift-mode/workflows/Run%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Run Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/swift-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/swift-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/swift-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/swift-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;swift-mode&lt;/h1&gt; &#xA;&lt;p&gt;Major-mode for Apple&#39;s &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;Swift programming language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;swift-mode&lt;/code&gt; package from MELPA.&lt;/p&gt; &#xA;&lt;p&gt;To install without MELPA, download &lt;a href=&#34;https://github.com/swift-emacs/swift-mode/releases&#34;&gt;latest release&lt;/a&gt; and execute &lt;code&gt;M-x package-install-file&lt;/code&gt; for the .tar archive.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Font Lock&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Indentation&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;switch foo {&#xA;case let .P1(x)&#xA;       where&#xA;         x &amp;gt; 0,&#xA;     let .P2(x)&#xA;       where&#xA;         x &amp;gt; 0:&#xA;    bar()&#xA;      .then { x in&#xA;          return baz(x)&#xA;      }&#xA;      .then {(&#xA;               x,&#xA;               y&#xA;             ) in&#xA;          return moo(x + y)&#xA;      }&#xA;}&#xA;&#xA;// Hanging brace&#xA;let x = [&#xA;  1,&#xA;  2,&#xA;  3&#xA;]&#xA;&#xA;// Brace on its own line&#xA;let y =&#xA;  [&#xA;    1,&#xA;    2,&#xA;    3&#xA;  ]&#xA;&#xA;// Utrecht style&#xA;let z =&#xA;  [ 1&#xA;  , 2&#xA;  , 3&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;forward-sexp&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;beginning-of-defun&lt;/code&gt;, &lt;code&gt;end-of-defun&lt;/code&gt;, &lt;code&gt;mark-defun&lt;/code&gt;, and &lt;code&gt;narrow-to-defun&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;beginning-of-sentence&lt;/code&gt;, &lt;code&gt;end-of-sentence&lt;/code&gt;, &lt;code&gt;kill-sentence&lt;/code&gt;, &lt;code&gt;backward-kill-sentence&lt;/code&gt;, &lt;code&gt;mark-sentence&lt;/code&gt;, and &lt;code&gt;narrow-to-sentence&lt;/code&gt;. A sentence is a statement outside comments or strings, or an ordinal sentence inside comments or strings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;indent-new-comment-line&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&#34;&gt;Imenu&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Running Swift REPL in a buffer (&lt;code&gt;M-x run-swift&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build Swift module (&lt;code&gt;M-x swift-mode:build-swift-module&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build iOS app (&lt;code&gt;M-x swift-mode:build-ios-app&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Running debugger on Swift module (&lt;code&gt;M-x swift-mode:debug-swift-module&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Running debugger on iOS app in simulator or device (&lt;code&gt;M-x swift-mode:debug-ios-app&lt;/code&gt;) (&lt;a href=&#34;https://github.com/ios-control/ios-deploy&#34;&gt;&lt;code&gt;ios-deploy&lt;/code&gt;&lt;/a&gt; is required to debug on device).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package does not provide flycheck. See &lt;a href=&#34;https://github.com/swift-emacs/flycheck-swift&#34;&gt;flycheck-swift&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Some syntax constructs removed from Swift 3.0 are not supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;C-style for-loop: &lt;code&gt;for var i = 1; i &amp;lt; 10; i++ { }&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multiple assignments in single &lt;code&gt;if let&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let x = x,&#xA;       y = y {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Use multiple &lt;code&gt;let&lt;/code&gt; instead:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let x = x,&#xA;   let y = y {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Indentation may not accurate. For example, &lt;code&gt;foo(Bar &amp;lt; A, B &amp;gt; (c))&lt;/code&gt; can be indented like either&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;foo(Bar &amp;lt; A,&#xA;    B &amp;gt; (c)) // Passing two Boolean arguments to foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;foo(Bar &amp;lt; A,&#xA;          B &amp;gt; (c)) // Passing a new Bar with two type arguments and a value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Swift compiler disambiguates this case using tokens after &lt;code&gt;&amp;gt;&lt;/code&gt;, but those tokens may not available at editing time. We use some heuristic for this.&lt;/p&gt; &#xA;&lt;p&gt;Another example is difficulty of handling of colons. We have to pair all &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt; of conditional operators to decide indentation of the below snippet. This is a future work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;switch foo {&#xA;  case let P(x) where x is Foo? ? a ? b : c ?? d : e ? f : g :&#xA;    h ? i?.j() : k()&#xA;}&#xA;&#xA;switch foo {&#xA;  case let P(x) where (x is Foo?) ? (a ? b : c ?? d) : (e ? f : g) :&#xA;    h ? i?.j() : k()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet another difficult case is consistency of blocks. We want to indent method chains like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var x = foo&#xA;  .then { x in&#xA;      aaa&#xA;  }&#xA;  .then { x in&#xA;      aaa&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;while we also want to indent the body of &lt;code&gt;if&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if anotherVeryLongVariableName&#xA;     .veryLongPropertyName {&#xA;    aaa&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is, we have to indent the closing brace with offset if it is a part of expressions while it should be aligned with the beginning of the statement/declaration if it is a part of a statement/declaration.&lt;/p&gt; &#xA;&lt;p&gt;Then, how should we indent the following code when the cursor is before &lt;code&gt;@&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var x = foo&#xA;  .bar {&#xA;    @&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This could be&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var x = foo&#xA;  .bar {&#xA;    @abc willSet {&#xA;        aaa&#xA;    }&#xA;}&#xA;// property declaration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var x = foo&#xA;  .bar {&#xA;      @abc var x = 1&#xA;      x&#xA;  }&#xA;// property initialization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both are syntactically correct code. We cannot handle this case properly. This is also a future work.&lt;/p&gt; &#xA;&lt;p&gt;Other example is regex literals and custom operators. The following example is valid Swift code with regex literals and custom operators.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let x = /^/ /^/ /^/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We parse them as regex literals rather than custom operators for now.&lt;/p&gt; &#xA;&lt;h2&gt;Hacking&lt;/h2&gt; &#xA;&lt;p&gt;To build the package locally, run &lt;code&gt;make package&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install the built package, run &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run tests, run &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other commands, run &lt;code&gt;make help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift/raw/master/utils/swift-mode.el&#34;&gt;Official swift-mode.el by Apple&lt;/a&gt;: Seems still in very early stage for now. We cannot contribute to it due to the license incompatibility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/sourcekit-lsp&#34;&gt;sourcekit-lsp&lt;/a&gt;: Language Server Protocol implementation for Swift and C-based languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-sourcekit&#34;&gt;lsp-sourcekit&lt;/a&gt;: Emacs client for lsp-sourcekit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielmartin/swift-helpful&#34;&gt;swift-helpful&lt;/a&gt;: Shows documentation about Swift keywords, attributes, and API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nathankot/company-sourcekit&#34;&gt;company-sourcekit&lt;/a&gt;: Completion for Swift projects via SourceKit with the help of SourceKitten.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swift-emacs/flycheck-swift&#34;&gt;flycheck-swift&lt;/a&gt;: Flycheck extensions for Swift.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/michael.sanders/swift-playground-mode&#34;&gt;swift-playground-mode&lt;/a&gt;: Emacs support for Swift playgrounds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;swift-format&lt;/a&gt;: Formatter for Swift by Apple (&lt;code&gt;swift format&lt;/code&gt; command).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/inamiy/SwiftRewriter&#34;&gt;SwiftRewriter&lt;/a&gt;: Formatter for Swift using SwiftSyntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;SwiftFormat&lt;/a&gt;: Formatter for Swift.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Yes, please do! See &lt;a href=&#34;https://raw.githubusercontent.com/swift-emacs/swift-mode/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The REPL code is based on &lt;a href=&#34;http://js-comint-el.sourceforge.net/&#34;&gt;js-comint&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to the following original developer and users for their contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrisbarrett&#34;&gt;@chrisbarrett&lt;/a&gt; (Chris Barrett)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ap4y&#34;&gt;@ap4y&lt;/a&gt; (Arthur Evstifeev)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov&#34;&gt;@bbatsov&lt;/a&gt; (Bozhidar Batsov)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ckruse&#34;&gt;@ckruse&lt;/a&gt; (Christian Kruse)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/syohex&#34;&gt;@syohex&lt;/a&gt; (Syohei Yoshida)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uk-ar&#34;&gt;@uk-ar&lt;/a&gt; (Yuuki Arisawa)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/msanders&#34;&gt;@msanders&lt;/a&gt; (Michael Sanders)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find a &lt;a href=&#34;https://github.com/swift-emacs/swift-mode/graphs/contributors&#34;&gt;full list of those people here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/purcell&#34;&gt;@purcell&lt;/a&gt; (Steve Purcell) for advices on the code and arrangement for merging &lt;code&gt;swift3-mode&lt;/code&gt; and &lt;code&gt;swift-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPLv3. See &lt;a href=&#34;https://raw.githubusercontent.com/swift-emacs/swift-mode/master/COPYING&#34;&gt;COPYING&lt;/a&gt; for details. Copyright (C) 2014-2021 taku0, Chris Barrett, Bozhidar Batsov, Arthur Evstifeev.&lt;/p&gt;</summary>
  </entry>
</feed>