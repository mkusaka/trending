<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-18T01:32:28Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KaratasFurkan/org-rainbow-tags</title>
    <updated>2022-11-18T01:32:28Z</updated>
    <id>tag:github.com,2022-11-18:/KaratasFurkan/org-rainbow-tags</id>
    <link href="https://github.com/KaratasFurkan/org-rainbow-tags" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Colorize org tags automatically to make them visually distinguishable.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Org Rainbow Tags&lt;/p&gt; &#xA;&lt;p&gt;[[https://www.gnu.org/software/emacs/][file:https://github.com/minad/corfu/blob/screenshots/emacs.svg?raw=true]] [[https://melpa.org/#/org-rainbow-tags][file:https://melpa.org/packages/org-rainbow-tags-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This package adds random colors to your org tags. In order to make colors random but consistent between same tags, colors are generated from the hash of the tag names.&lt;/p&gt; &#xA;&lt;p&gt;Since it&#39;s random, results may not make you happy, but there are some custom fields that you can use as &lt;del&gt;seed&lt;/del&gt; to generate different colors. If you are really picky, there is already a built-in solution for you, please see [[https://orgmode.org/manual/Tags.html][org-tag-faces]]. This package aims to get rid of setting and updating &lt;del&gt;org-tag-faces&lt;/del&gt; manually for each tag you use.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#screenshots][Screenshots]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#manual][Manual]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#using-straightel-and-use-package][Using &lt;del&gt;straight.el&lt;/del&gt; and &lt;del&gt;use-package&lt;/del&gt;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#melpa][MELPA]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#interactively][Interactively]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#with-initel-or-emacs][With &lt;del&gt;init.el&lt;/del&gt; or &lt;del&gt;.emacs&lt;/del&gt;]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#with-use-package][With &lt;del&gt;use-package&lt;/del&gt;]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#known-issues][Known Issues]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots Default theme without &lt;del&gt;org-rainbow-tags&lt;/del&gt;: [[./screenshots/default_theme_without_org_rainbow_tags.png]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Default theme with &lt;del&gt;org-rainbow-tags&lt;/del&gt;: [[./screenshots/default_theme_with_org_rainbow_tags.png]]&lt;/p&gt; &#xA;&lt;p&gt;Modus vivendi with &lt;del&gt;org-rainbow-tags&lt;/del&gt;: [[./screenshots/modus_vivendi_with_org_rainbow_tags.png]]&lt;/p&gt; &#xA;&lt;p&gt;Modus operandi with &lt;del&gt;org-rainbow-tags&lt;/del&gt;: [[./screenshots/modus_operandi_with_org_rainbow_tags.png]]&lt;/p&gt; &#xA;&lt;p&gt;Modus vivendi with &lt;del&gt;org-rainbow-tags&lt;/del&gt; (with a custom face) [[./screenshots/modus_vivendi_with_org_rainbow_tags_box.png]]&lt;/p&gt; &#xA;&lt;p&gt;Modus operandi with &lt;del&gt;org-rainbow-tags&lt;/del&gt; (with a custom face) [[./screenshots/modus_operandi_with_org_rainbow_tags_box.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation ** Manual&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Add these two lines to your init file: #+BEGIN_SRC elisp (add-to-list &#39;load-path &#34;/path/to/org-rainbow-tags/&#34;) (require &#39;org-rainbow-tags) #+END_SRC&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Using &lt;del&gt;straight.el&lt;/del&gt; and &lt;del&gt;use-package&lt;/del&gt; #+BEGIN_SRC emacs-lisp (use-package org-rainbow-tags :straight (:host github :repo &#34;KaratasFurkan/org-rainbow-tags&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** MELPA You need to enable package installations from MELPA if you didn&#39;t already. /(See: &lt;a href=&#34;https://melpa.org/#/getting-started)/&#34;&gt;https://melpa.org/#/getting-started)/&lt;/a&gt; #+BEGIN_SRC emacs-lisp (require &#39;package) (add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;&lt;a href=&#34;https://melpa.org/packages/&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&#34;) t) (package-initialize) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Interactively &lt;del&gt;M-x package-install RET org-rainbow-tags RET&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** With &lt;del&gt;init.el&lt;/del&gt; or &lt;del&gt;.emacs&lt;/del&gt; #+BEGIN_SRC emacs-lisp (unless (package-installed-p &#39;org-rainbow-tags) (package-install &#39;org-rainbow-tags)) (require &#39;org-rainbow-tags) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** With &lt;del&gt;use-package&lt;/del&gt; #+BEGIN_SRC emacs-lisp (use-package org-rainbow-tags :ensure t) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage You can run &lt;del&gt;org-rainbow-tags-mode&lt;/del&gt; command in the buffer you wanna colorize the tags.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you wanna run this minor mode on &lt;del&gt;org&lt;/del&gt; files automatically, you can add a hook:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-hook &#39;org-mode-hook &#39;org-rainbow-tags-mode) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To see customization options, you can run &lt;del&gt;M-x customize-group RET org-rainbow-tags RET&lt;/del&gt; or you can check &lt;del&gt;(defcustom ...)&lt;/del&gt; lines in &lt;del&gt;org-rainbow-tags.el&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t like the auto-generated colors for your favorite tags, you can change the value of &lt;del&gt;org-rainbow-tags-hash-start-index&lt;/del&gt; between 0-20. This variable decides which 12 characters of the hash of the tag should be taken to generate the color.&lt;/p&gt; &#xA;&lt;p&gt;Example: #+BEGIN_SRC emacs-lisp (setq org-rainbow-tags-hash-start-index 10) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Full &lt;del&gt;use-package&lt;/del&gt; example: #+BEGIN_SRC emacs-lisp (use-package org-rainbow-tags :ensure t :custom (org-rainbow-tags-hash-start-index 10) (org-rainbow-tags-extra-face-attributes ;; Default is &#39;(:weight &#39;bold) &#39;(:inverse-video t :box t :weight &#39;bold)) :hook (org-mode . org-rainbow-tags-mode)) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Known Issues &lt;del&gt;org-rainbow-tags-mode&lt;/del&gt; colorizes org tags when it&#39;s activated and also when a new tag is added/updated with &lt;del&gt;org-set-tags-command&lt;/del&gt; or with &lt;del&gt;C-c C-c&lt;/del&gt; on the headline. However, colors will not updated when you edit the tags manually. If you wanna update colors in every circumstances, you can add this line to your configuration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-hook &#39;org-mode-hook (lambda () (add-hook &#39;post-command-hook &#39;org-rainbow-tags--apply-overlays nil t))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This is not default because it may cause performance issues on org files. You can try it and decide if it&#39;s okay or not.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/auto-save</title>
    <updated>2022-11-18T01:32:28Z</updated>
    <id>tag:github.com,2022-11-18:/manateelazycat/auto-save</id>
    <link href="https://github.com/manateelazycat/auto-save" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically save files without temporary files to protect your finger. ;)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What is auto-save ?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically save file content&lt;/li&gt; &#xA; &lt;li&gt;No annoying temporary files need to be cleaned&lt;/li&gt; &#xA; &lt;li&gt;No need to save manually, protect your fingers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Clone or download this repository (path of the folder is the &lt;code&gt;&amp;lt;path-to-auto-save&amp;gt;&lt;/code&gt; used below).&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;~/.emacs&lt;/code&gt;, add the following three lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-auto-save&amp;gt;&#34;) ; add auto-save to your load-path&#xA;(require &#39;auto-save)&#xA;(auto-save-enable)&#xA;&#xA;(setq auto-save-silent t)   ; quietly save&#xA;(setq auto-save-delete-trailing-whitespace t)  ; automatically delete spaces at the end of the line when saving&#xA;&#xA;;;; custom predicates if you don&#39;t want auto save.&#xA;;;; disable auto save mode when current filetype is an gpg file.&#xA;(setq auto-save-disable-predicates&#xA;      &#39;((lambda ()&#xA;      (string-suffix-p&#xA;      &#34;gpg&#34;&#xA;      (file-name-extension (buffer-name)) t))))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>commercial-emacs/xlsp</title>
    <updated>2022-11-18T01:32:28Z</updated>
    <id>tag:github.com,2022-11-18:/commercial-emacs/xlsp</id>
    <link href="https://github.com/commercial-emacs/xlsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A serious take on LSP for emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|build-status|&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://github.com/commercial-emacs/xlsp.git&#34;&gt;https://github.com/commercial-emacs/xlsp.git&lt;/a&gt; make -C xlsp install&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;M-x xlsp-mode toggles for the current buffer M-x global-xlsp-mode toggles globally C-M-i completion (disambiguate then TAB to complete) M-. jump to definition M-, jump back from definition C-u M-. prompt jump to definition (TAB to complete)&lt;/p&gt; &#xA;&lt;h2&gt;.emacs or init.el configuration&lt;/h2&gt; &#xA;&lt;p&gt;(add-hook &#39;c-mode-hook #&#39;xlsp-mode) ; activate for c-mode -or- (global-xlsp-mode) ; activate for any mode in xlsp-server-invocations&lt;/p&gt; &#xA;&lt;h2&gt;Being hip to the youth&lt;/h2&gt; &#xA;&lt;p&gt;M-x customize-option RET xlsp-completion-menus-p M-x customize-option RET xlsp-hover-help-p ... and other activations which it&#39;s hard to imagine are tolerable.&lt;/p&gt; &#xA;&lt;h2&gt;&#34;Nothing is happening.&#34;&lt;/h2&gt; &#xA;&lt;p&gt;M-x customize-option RET xlsp-server-invocations RET&lt;/p&gt; &#xA;&lt;h2&gt;What the &#34;x&#34; in &#34;xlsp&#34; references&lt;/h2&gt; &#xA;&lt;p&gt;It is merely a differentiator, just as the &#34;x&#34; in &#34;xemacs&#34; had been (contrary to the popular misconception that it referenced X11).&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Logic, some transcribed verbatim, was patterned after GNU eglot. Functions missing in emacs-27 and emacs-28 transcribed from GNU emacs-29.&lt;/p&gt; &#xA;&lt;p&gt;.. |build-status| image:: &lt;a href=&#34;https://github.com/commercial-emacs/xlsp/workflows/CI/badge.svg?branch=dev&#34;&gt;https://github.com/commercial-emacs/xlsp/workflows/CI/badge.svg?branch=dev&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/commercial-emacs/xlsp/actions&#34;&gt;https://github.com/commercial-emacs/xlsp/actions&lt;/a&gt; :alt: Build Status&lt;/p&gt;</summary>
  </entry>
</feed>