<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-19T01:42:06Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haji-ali/procress</title>
    <updated>2022-07-19T01:42:06Z</updated>
    <id>tag:github.com,2022-07-19:/haji-ali/procress</id>
    <link href="https://github.com/haji-ali/procress" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple emacs package to indicate progress of a process in the modeline&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: procress.el - Show progress of a process #+author: Al Haji-Ali #+language: en #+export_file_name: procress.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Procress: (procress). #+texinfo_dir_desc: Show progress of a process&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Procress provides a simple way to indicate progress of a process. It was born out of a need to show such progress for AUCTeX processes, but is made general enough to accommodate other processes.&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: Compiling in latex [[file:procress.gif]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=procress= can be enabled for AUCTeX buffers as follows (Uncomment the =:straight= line if you have [[https://github.com/radian-software/straight.el][straight]] configured.)&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package procress ;; :straight (:host github :repo &#34;haji-ali/procress&#34;) :commands tex-procress-mode :init (add-hook &#39;LaTeX-mode-hook &#39;tex-procress-mode) :config (procress-load-default-svg-images)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This loads SVG images (copied from [[https://github.com/Templarian/MaterialDesign][Templarian/MaterialDesign]]) which are shown in the above gif. If your Emacs does not support SVG, or you want to use other images, you would have to configure &lt;del&gt;procress-animation-frames&lt;/del&gt;, &lt;del&gt;procress-success-frames&lt;/del&gt; and &lt;del&gt;procress-failure-frames&lt;/del&gt;. By default these just have basic text.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skeeto/elfeed</title>
    <updated>2022-07-19T01:42:06Z</updated>
    <id>tag:github.com,2022-07-19:/skeeto/elfeed</id>
    <link href="https://github.com/skeeto/elfeed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs web feeds client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elfeed Emacs Web Feed Reader&lt;/h1&gt; &#xA;&lt;p&gt;Elfeed is an extensible web feed reader for Emacs, supporting both Atom and RSS. It requires Emacs 24.3 and is available for download from &lt;a href=&#34;http://melpa.milkbox.net/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;. Elfeed was inspired by &lt;a href=&#34;http://notmuchmail.org/&#34;&gt;notmuch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a longer overview,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nullprogram.com/blog/2013/09/04/&#34;&gt;Introducing Elfeed, an Emacs Web Feed Reader&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nullprogram.com/blog/2013/11/26/&#34;&gt;Tips and Tricks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/&#34;&gt;Read your RSS feeds in Emacs with Elfeed &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://kitchingroup.cheme.cmu.edu/blog/2017/01/05/Scoring-elfeed-articles/&#34;&gt;Scoring Elfeed articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pOFqzK1Ymr4&#34;&gt;Using Emacs 29&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=tjnK1rkO7RU&#34;&gt;30&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=5zuSUbAHH8c&#34;&gt;31&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://babbagefiles.blogspot.com/2017/03/take-elfeed-everywhere-mobile-rss.html&#34;&gt;Take Elfeed everywhere: Mobile rss reading Emacs-style (for free/cheap)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://noonker.github.io/posts/2020-04-22-elfeed/&#34;&gt;Elfeed Rules!&lt;/a&gt; (&lt;a href=&#34;https://old.reddit.com/r/emacs/comments/g6oowz/elfeed_rules/&#34;&gt;reddit&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codingquark.com/emacs/2020/04/19/elfeed-protocol-ttrss.html&#34;&gt;Elfeed with Tiny Tiny RSS&lt;/a&gt; (&lt;a href=&#34;https://news.ycombinator.com/item?id=22915200&#34;&gt;hn&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://xenodium.com/open-emacs-elfeed-links-in-background/&#34;&gt;Open Emacs elfeed links in the background&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/&#34;&gt;Using Emacs 72&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://karthinks.com/blog/lazy-elfeed/&#34;&gt;Lazy Elfeed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://joshrollinswrites.com/help-desk-head-desk/20200611/&#34;&gt;Using Elfeed to View Videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://protesilaos.com/codelog/2020-09-11-emacs-elfeed-bongo/&#34;&gt;Manage podcasts in Emacs with Elfeed and Bongo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nullprogram.com/tags/elfeed/&#34;&gt;... more ...&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pragmaticemacs.com/category/elfeed/&#34;&gt;... and more ...&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/kxgF5AH.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/kxgF5AH.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The database format is stable and is never expected to change.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is &lt;em&gt;strongly&lt;/em&gt; recommended you have cURL installed&lt;/strong&gt;, either in your PATH or configured via &lt;code&gt;elfeed-curl-program-name&lt;/code&gt;. Elfeed will prefer it to Emacs&#39; own URL-fetching mechanism, &lt;code&gt;url-retrieve&lt;/code&gt;. It&#39;s also essential for running Elfeed on Windows, where &lt;code&gt;url-retrieve&lt;/code&gt; is broken. Updates using cURL are significantly faster than the built-in method, both for you and the feed hosts.&lt;/p&gt; &#xA;&lt;p&gt;If this is giving you problems, fetching with cURL can be disabled by setting &lt;code&gt;elfeed-use-curl&lt;/code&gt; to nil.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;These projects extend Elfeed with additional features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remyhonig/elfeed-org&#34;&gt;elfeed-org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/algernon/elfeed-goodies&#34;&gt;elfeed-goodies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fasheng/elfeed-protocol&#34;&gt;elfeed-protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sp1ff/elfeed-score&#34;&gt;elfeed-score&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/areina/elfeed-cljsrn&#34;&gt;Elfeed Android interface&lt;/a&gt; (&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.elfeedcljsrn&#34;&gt;Google Play&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Manoj321/elfeed-dashboard&#34;&gt;elfeed-dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Elfeed is broken into a multiple source files, so if you manually install it you will need to add the Elfeed package directory to your &lt;code&gt;load-path&lt;/code&gt;. If installed via package.el or el-get, this will be done automatically.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended that you make a global binding for &lt;code&gt;elfeed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(global-set-key (kbd &#34;C-x w&#34;) &#39;elfeed)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the interactive function &lt;code&gt;elfeed&lt;/code&gt; will pop up the &lt;code&gt;*elfeed-search*&lt;/code&gt; buffer, which will display feed items.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;g&lt;/kbd&gt;: refresh view of the feed listing&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;G&lt;/kbd&gt;: fetch feed updates from the servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;s&lt;/kbd&gt;: update the search filter (see tags)&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;c&lt;/kbd&gt;: clear the search filter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This buffer will be empty until you add your feeds to the &lt;code&gt;elfeed-feeds&lt;/code&gt; list and initiate an update with &lt;code&gt;M-x elfeed-update&lt;/code&gt; (or &lt;kbd&gt;G&lt;/kbd&gt; in the Elfeed buffer). This will populate the Elfeed database with entries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;; Somewhere in your .emacs file&#xA;(setq elfeed-feeds&#xA;      &#39;(&#34;http://nullprogram.com/feed/&#34;&#xA;        &#34;https://planet.emacslife.com/atom.xml&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option for providing a feed list is with an OPML file. Running &lt;code&gt;M-x elfeed-load-opml&lt;/code&gt; will fill &lt;code&gt;elfeed-feeds&lt;/code&gt; with feeds listed in an OPML file. When &lt;code&gt;elfeed-load-opml&lt;/code&gt; is called interactively, it will automatically save the feedlist to your customization file, so you will only need to do this once.&lt;/p&gt; &#xA;&lt;p&gt;If there are a lot of feeds, the initial update will take noticeably longer than normal operation because of the large amount of information being written the database. Future updates will only need to write new or changed data. If updating feeds slows down Emacs too much for you, reduce the number of concurrent fetches via &lt;code&gt;elfeed-set-max-connections&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re getting many &#34;Queue timeout exceeded&#34; errors, increase the fetch timeout via &lt;code&gt;elfeed-set-timeout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setf url-queue-timeout 30)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the search buffer there are a number of ways to interact with entries. Entries are selected by placing the point over an entry. Multiple entries are selected at once by using an active region.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;RET&lt;/kbd&gt;: view selected entry in a buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;b&lt;/kbd&gt;: open selected entries in your browser (&lt;code&gt;browse-url&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;y&lt;/kbd&gt;: copy selected entries URL to the clipboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;r&lt;/kbd&gt;: mark selected entries as read&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;u&lt;/kbd&gt;: mark selected entries as unread&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;+&lt;/kbd&gt;: add a specific tag to selected entries&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;-&lt;/kbd&gt;: remove a specific tag from selected entries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tags&lt;/h2&gt; &#xA;&lt;p&gt;Elfeed maintains a list of arbitrary tags -- symbols attached to an entry. The tag &lt;code&gt;unread&lt;/code&gt; is treated specially by default, with unread entries appearing in bold.&lt;/p&gt; &#xA;&lt;h3&gt;Autotagging&lt;/h3&gt; &#xA;&lt;p&gt;Tags can automatically be applied to entries discovered in specific feeds through extra syntax in &lt;code&gt;elfeed-feeds&lt;/code&gt;. Normally this is a list of strings, but an item can also be a list, providing set of &#34;autotags&#34; for a feed&#39;s entries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setq elfeed-feeds&#xA;      &#39;((&#34;http://nullprogram.com/feed/&#34; blog emacs)&#xA;        &#34;http://www.50ply.com/atom.xml&#34;  ; no autotagging&#xA;        (&#34;http://nedroid.com/feed/&#34; webcomic)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filter Syntax&lt;/h3&gt; &#xA;&lt;p&gt;To make tags useful, the Elfeed entry listing buffer can be filtered by tags. Use &lt;code&gt;elfeed-search-set-filter&lt;/code&gt; (or &lt;kbd&gt;s&lt;/kbd&gt;) to update the filter. Use &lt;code&gt;elfeed-search-clear-filter&lt;/code&gt; to restore the default.&lt;/p&gt; &#xA;&lt;p&gt;Any component of the search string beginning with a &lt;code&gt;+&lt;/code&gt; or a &lt;code&gt;-&lt;/code&gt; is treated like a tag. &lt;code&gt;+&lt;/code&gt; means the tag is required, &lt;code&gt;-&lt;/code&gt; means the tag must not be present.&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;@&lt;/code&gt; indicates an age or a date range. An age is a relative time expression or an absolute date expression. Entries older than this age are filtered out. The age description accepts plain English, but cannot have spaces, so use dashes. For example, &lt;code&gt;&#34;@2-years-old&#34;&lt;/code&gt;, &lt;code&gt;&#34;@3-days-ago&#34;&lt;/code&gt; or &lt;code&gt;&#34;@2019-06-24&#34;&lt;/code&gt;. A date range are two ages seperated by a &lt;code&gt;--&lt;/code&gt;, e.g. &lt;code&gt;&#34;@2019-06-20--2019-06-24&#34;&lt;/code&gt; or &lt;code&gt;&#34;@5-days-ago--1-day-ago&#34;&lt;/code&gt;. The entry must be newer than the first expression but older than the second. The database is date-oriented, so &lt;strong&gt;filters that include an age restriction are significantly more efficient.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;!&lt;/code&gt; is treated as an &#34;inverse&#34; regular expression. This means that any entry matching this regular expression will be filtered out. The regular expression begins &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;!&lt;/code&gt; character. You can read this as &#34;entry not matching &lt;code&gt;foo&lt;/code&gt;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;#&lt;/code&gt; limits the total number of entries displayed to the number immediately following the symbol. For example, to limit the display to 20 entries: &lt;code&gt;#20&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;=&lt;/code&gt; is a regular expression matching the entry&#39;s feed (title or URL). Only entries belonging to a feed that matches at least one of the &lt;code&gt;=&lt;/code&gt; expressions will be shown.&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;~&lt;/code&gt; is a regular expression matching the entry&#39;s feed (title or URL). Only entries belonging to a feed that matches none of the &lt;code&gt;~&lt;/code&gt; expressions will be shown.&lt;/p&gt; &#xA;&lt;p&gt;All other components are treated as a regular expression, and only entries matching it (title or URL) will be shown.&lt;/p&gt; &#xA;&lt;p&gt;Here are some example filters.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@6-months-ago +unread&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show unread entries of the last six months. This is the default filter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;linu[xs] @1-year-old&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show entries about Linux or Linus from the last year.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-unread +youtube #10&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show the most recent 10 previously-read entries tagged as &lt;code&gt;youtube&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;+unread !x?emacs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show unread entries not having &lt;code&gt;emacs&lt;/code&gt; or &lt;code&gt;xemacs&lt;/code&gt; in the title or link.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;+emacs =http://example.org/feed/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show entries tagged as &lt;code&gt;emacs&lt;/code&gt; from a specific feed.&lt;/p&gt; &#xA;&lt;h4&gt;Default Search Filter&lt;/h4&gt; &#xA;&lt;p&gt;You can set your default search filter by changing the default value of &lt;code&gt;elfeed-search-filter&lt;/code&gt;. It only changes buffer-locally when you&#39;re adjusting the filter within Elfeed. For example, some users prefer to have a space on the end for easier quick searching.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq-default elfeed-search-filter &#34;@1-week-ago +unread &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tag Hooks&lt;/h3&gt; &#xA;&lt;p&gt;The last example assumes you&#39;ve tagged posts with &lt;code&gt;youtube&lt;/code&gt;. You probably want to do this sort of thing automatically, either through the &#34;autotags&#34; feature mentioned above, or with the &lt;code&gt;elfeed-new-entry-hook&lt;/code&gt;. Functions in this hook are called with new entries, allowing them to be manipulated, such as adding tags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;; Mark all YouTube entries&#xA;(add-hook &#39;elfeed-new-entry-hook&#xA;          (elfeed-make-tagger :feed-url &#34;youtube\\.com&#34;&#xA;                              :add &#39;(video youtube)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Avoiding tagging old entries as &lt;code&gt;unread&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;; Entries older than 2 weeks are marked as read&#xA;(add-hook &#39;elfeed-new-entry-hook&#xA;          (elfeed-make-tagger :before &#34;2 weeks ago&#34;&#xA;                              :remove &#39;unread))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or building your own subset feeds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;elfeed-new-entry-hook&#xA;          (elfeed-make-tagger :feed-url &#34;example\\.com&#34;&#xA;                              :entry-title &#39;(not &#34;something interesting&#34;)&#xA;                              :add &#39;junk&#xA;                              :remove &#39;unread))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;M-x elfeed-apply-hooks-now&lt;/code&gt; to apply &lt;code&gt;elfeed-new-entry-hook&lt;/code&gt; to all existing entries. Otherwise hooks will only apply to new entries on discovery.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Tag Faces&lt;/h3&gt; &#xA;&lt;p&gt;By default, entries marked &lt;code&gt;unread&lt;/code&gt; will have bolded titles in the &lt;code&gt;*elfeed-search*&lt;/code&gt; listing. You can customize how tags affect an entry&#39;s appearance by customizing &lt;code&gt;elfeed-search-face-alist&lt;/code&gt;. For example, this configuration makes entries tagged &lt;code&gt;important&lt;/code&gt; stand out in red.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(defface important-elfeed-entry&#xA;  &#39;((t :foreground &#34;#f77&#34;))&#xA;  &#34;Marks an important Elfeed entry.&#34;)&#xA;&#xA;(push &#39;(important important-elfeed-entry)&#xA;      elfeed-search-face-alist)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All faces from all tags will be applied to the entry title. The faces will be ordered as they appear in &lt;code&gt;elfeed-search-face-alist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bookmarks&lt;/h2&gt; &#xA;&lt;p&gt;Filters can be saved and restored using Emacs&#39; built-in &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html&#34;&gt;bookmarks feature&lt;/a&gt;. While in the search buffer, use &lt;code&gt;M-x bookmark-set&lt;/code&gt; to save the current filter, and &lt;code&gt;M-x bookmark-jump&lt;/code&gt; to restore a saved filter. Emacs automatically persists bookmarks across sessions.&lt;/p&gt; &#xA;&lt;h2&gt;Metadata Plist&lt;/h2&gt; &#xA;&lt;p&gt;All feed and entry objects have plist where you can store your own arbitrary, &lt;a href=&#34;http://nullprogram.com/blog/2013/12/30/&#34;&gt;readable values&lt;/a&gt;. These values are automatically persisted in the database. This metadata is accessed using the polymorphic &lt;code&gt;elfeed-meta&lt;/code&gt; function. It&#39;s setf-able.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setf (elfeed-meta entry :rating) 4)&#xA;(elfeed-meta entry :rating)&#xA;;; =&amp;gt; 4&#xA;&#xA;(setf (elfeed-meta feed :title) &#34;My Better Title&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Elfeed itself adds some entries to this plist, some for your use, some for its own use. Here are the properties that Elfeed uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:authors&lt;/code&gt; : A list of author plists (&lt;code&gt;:name&lt;/code&gt;, &lt;code&gt;:uri&lt;/code&gt;, &lt;code&gt;:email&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:canonical-url&lt;/code&gt; : The final URL for the feed after all redirects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:categories&lt;/code&gt; : The feed-supplied categories for this entry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:etag&lt;/code&gt; : HTTP Etag header, for conditional GETs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:failures&lt;/code&gt; : Number of times this feed has failed to update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:last-modified&lt;/code&gt; : HTTP Last-Modified header, for conditional GETs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:title&lt;/code&gt; : Overrides the feed-supplied title for display purposes, both for feeds and entries. See also &lt;code&gt;elfeed-search-set-feed-title&lt;/code&gt; and &lt;code&gt;elfeed-search-set-entry-title&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This list will grow in time, so you might consider namespacing your own properties to avoid collisions (e.g. &lt;code&gt;:xyz/rating&lt;/code&gt;), or simply not using keywords as keys. Elfeed will always use keywords without a slash.&lt;/p&gt; &#xA;&lt;h2&gt;Hooks&lt;/h2&gt; &#xA;&lt;p&gt;A number of hooks are available to customize the behavior of Elfeed at key points without resorting to advice.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-new-entry-hook&lt;/code&gt; : Called each time a new entry it added to the database, allowing for automating tagging and such.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-new-entry-parse-hook&lt;/code&gt; : Called with each new entry and the full XML structure from which it was parsed, allowing for additional information to be drawn from the original feed XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-http-error-hooks&lt;/code&gt; : Allows for special behavior when HTTP errors occur, beyond simply logging the error to &lt;code&gt;*elfeed-log*&lt;/code&gt; .&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-parse-error-hooks&lt;/code&gt; : Allows for special behavior when feed parsing fails, beyond logging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-db-update-hook&lt;/code&gt; : Called any time the database has had a major modification.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Viewing Entries&lt;/h2&gt; &#xA;&lt;p&gt;Entries are viewed locally in Emacs by typing &lt;code&gt;RET&lt;/code&gt; while over an entry in the search listing. The content will be displayed in a separate buffer using &lt;code&gt;elfeed-show-mode&lt;/code&gt;, rendered using Emacs&#39; built-in shr package. This requires an Emacs compiled with &lt;code&gt;libxml2&lt;/code&gt; bindings, which provides the necessary HTML parser.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes displaying images can slow down or even crash Emacs. Set &lt;code&gt;shr-inhibit-images&lt;/code&gt; to disable images if this is a problem.&lt;/p&gt; &#xA;&lt;h2&gt;Web Interface&lt;/h2&gt; &#xA;&lt;p&gt;Elfeed includes a demonstration/toy web interface for remote network access. It&#39;s a single-page web application that follows the database live as new entries arrive. It&#39;s packaged separately as &lt;code&gt;elfeed-web&lt;/code&gt;. To fire it up, run &lt;code&gt;M-x elfeed-web-start&lt;/code&gt; and visit &lt;a href=&#34;http://localhost:8080/elfeed/&#34;&gt;http://localhost:8080/elfeed/&lt;/a&gt; (check your &lt;code&gt;httpd-port&lt;/code&gt;) with a browser. See the &lt;code&gt;elfeed-web.el&lt;/code&gt; header for endpoint documentation if you&#39;d like to access the Elfeed database through the web API.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s rough and unfinished -- no keyboard shortcuts, read-only, no authentication, and a narrow entry viewer. This is basically Elfeed&#39;s &#34;mobile&#34; interface. Patches welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;p&gt;Summary: Install cURL and most problems disappear for all platforms.&lt;/p&gt; &#xA;&lt;p&gt;I personally only use Elfeed on Linux, but it&#39;s occasionally tested on Windows. Unfortunately the Windows port of Emacs is a bit too unstable for parallel feed downloads with &lt;code&gt;url-retrieve&lt;/code&gt;, not to mention the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/kdfaxaay%28vs.71%29.aspx&#34;&gt;tiny, hard-coded, 512 open descriptor limitation&lt;/a&gt;, so it limits itself to one feed at a time on this platform.&lt;/p&gt; &#xA;&lt;p&gt;If you fetch HTTPS feeds without cURL on &lt;em&gt;any&lt;/em&gt; platform, it&#39;s essential that Emacs is built with the &lt;code&gt;--with-gnutls&lt;/code&gt; option. Otherwise Emacs runs gnutls in an inferior process, which rarely works well.&lt;/p&gt; &#xA;&lt;h2&gt;Database Management&lt;/h2&gt; &#xA;&lt;p&gt;The database should keep itself under control without any manual intervention, but steps can be taken to minimize the database size if desired. The simplest option is to run the &lt;code&gt;elfeed-db-compact&lt;/code&gt; command, which will pack the loose-file content database into a single compressed file. This function works well in &lt;code&gt;kill-emacs-hook&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Going further, a function could be added to &lt;code&gt;elfeed-new-entry-hook&lt;/code&gt; to strip unwanted/unneeded content from select entries before being stored in the database. For example, for YouTube videos only the entry link is of interest and the regularly-changing entry content could be tossed to save time and storage.&lt;/p&gt; &#xA;&lt;h2&gt;Status and Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Elfeed is to the point where it can serve 100% of my own web feed needs. My personal selection of about 150 feeds has been acting as my test case as I optimize and add features.&lt;/p&gt; &#xA;&lt;p&gt;Some things I still might want to add:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Database synchronization between computers&lt;/li&gt; &#xA; &lt;li&gt;Parallel feed fetching via separate Emacs subprocesses&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;As far as I know, outside of Elfeed there does not exist an extensible, text-file configured, power-user web feed client that can handle a reasonable number of feeds. The existing clients I&#39;ve tried are missing some important capability that limits its usefulness to me.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>clojure-emacs/clojure-mode</title>
    <updated>2022-07-19T01:42:06Z</updated>
    <id>tag:github.com,2022-07-19:/clojure-emacs/clojure-mode</id>
    <link href="https://github.com/clojure-emacs/clojure-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs support for the Clojure(Script) programming language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/clojure-emacs/clojure-mode&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/clojure-emacs/clojure-mode.svg?style=svg&#34; alt=&#34;circleci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/clojure-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/clojure-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/clojure-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/clojure-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/clojure-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/clojure-mode.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/nFPpynQPME&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/copyleft/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Clojure Mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-mode&lt;/code&gt; is an Emacs major mode that provides font-lock (syntax highlighting), indentation, navigation and refactoring support for the &lt;a href=&#34;http://clojure.org&#34;&gt;Clojure(Script) programming language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;This documentation tracks the &lt;code&gt;master&lt;/code&gt; branch of &lt;code&gt;clojure-mode&lt;/code&gt;. Some of the features and settings discussed here might not be available in older releases (including the current stable release). Please, consult the relevant git tag (e.g. 5.14.0) if you need documentation for a specific &lt;code&gt;clojure-mode&lt;/code&gt; release.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Available on the major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repos.&lt;/p&gt; &#xA;&lt;p&gt;MELPA Stable is the recommended repo as it has the latest stable version. MELPA has a development snapshot for users who don&#39;t mind (infrequent) breakage but don&#39;t want to run from a git checkout.&lt;/p&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;clojure-mode&lt;/code&gt; using the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-install [RET] clojure-mode [RET]&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;or if you&#39;d rather keep it in your dotfiles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(unless (package-installed-p &#39;clojure-mode)&#xA;  (package-install &#39;clojure-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the installation doesn&#39;t work try refreshing the package list:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-refresh-contents&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bundled major modes&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;clojure-mode&lt;/code&gt; package actually bundles together several major modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clojure-mode&lt;/code&gt; is a major mode for editing Clojure code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clojurescript-mode&lt;/code&gt; is a major mode for editing ClojureScript code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clojurec-mode&lt;/code&gt; is a major mode for editing &lt;code&gt;.cljc&lt;/code&gt; source files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the major modes derive from &lt;code&gt;clojure-mode&lt;/code&gt; and provide more or less the same functionality. Differences can be found mostly in the font-locking - e.g. ClojureScript has some built-in constructs that are not present in Clojure.&lt;/p&gt; &#xA;&lt;p&gt;The proper major mode is selected automatically based on the extension of the file you&#39;re editing.&lt;/p&gt; &#xA;&lt;p&gt;Having separate major modes gives you the flexibility to attach different hooks to them and to alter their behavior individually (e.g. add extra font-locking just to &lt;code&gt;clojurescript-mode&lt;/code&gt;) .&lt;/p&gt; &#xA;&lt;p&gt;Note that all modes derive from &lt;code&gt;clojure-mode&lt;/code&gt;, so things you add to &lt;code&gt;clojure-mode-hook&lt;/code&gt; and &lt;code&gt;clojure-mode-map&lt;/code&gt; will affect all the derived modes as well.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;In the spirit of Emacs, pretty much everything you can think of in &lt;code&gt;clojure-mode&lt;/code&gt; is configurable.&lt;/p&gt; &#xA;&lt;p&gt;To see a list of available configuration options do &lt;code&gt;M-x customize-group RET clojure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Indentation options&lt;/h3&gt; &#xA;&lt;p&gt;The default indentation rules in &lt;code&gt;clojure-mode&lt;/code&gt; are derived from the &lt;a href=&#34;https://guide.clojure.style&#34;&gt;community Clojure Style Guide&lt;/a&gt;. Please, refer to the guide for the general Clojure indentation rules.&lt;/p&gt; &#xA;&lt;h4&gt;Indentation of docstrings&lt;/h4&gt; &#xA;&lt;p&gt;By default multi-line docstrings are indented with 2 spaces, as this is a somewhat common standard in the Clojure community. You can however adjust this by modifying &lt;code&gt;clojure-docstring-fill-prefix-width&lt;/code&gt;. Set it to 0 if you don&#39;t want multi-line docstrings to be indented at all (which is pretty common in most lisps).&lt;/p&gt; &#xA;&lt;h4&gt;Indentation of function forms&lt;/h4&gt; &#xA;&lt;p&gt;The indentation of function forms is configured by the variable &lt;code&gt;clojure-indent-style&lt;/code&gt;. It takes three possible values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;always-align&lt;/code&gt; (the default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(some-function&#xA; 10&#xA; 1&#xA; 2)&#xA;(some-function 10&#xA;               1&#xA;               2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;always-indent&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(some-function&#xA;  10&#xA;  1&#xA;  2)&#xA;(some-function 10&#xA;  1&#xA;  2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;align-arguments&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(some-function&#xA;  10&#xA;  1&#xA;  2)&#xA;(some-function 10&#xA;               1&#xA;               2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Prior to clojure-mode 5.10, the configuration options for &lt;code&gt;clojure-indent-style&lt;/code&gt; used to be keywords, but now they are symbols. Keywords will still be supported at least until clojure-mode 6.&lt;/p&gt; &#xA;&lt;h4&gt;Indentation of macro forms&lt;/h4&gt; &#xA;&lt;p&gt;The indentation of special forms and macros with bodies is controlled via &lt;code&gt;put-clojure-indent&lt;/code&gt;, &lt;code&gt;define-clojure-indent&lt;/code&gt; and &lt;code&gt;clojure-backtracking-indent&lt;/code&gt;. Nearly all special forms and built-in macros with bodies have special indentation settings in &lt;code&gt;clojure-mode&lt;/code&gt;. You can add/alter the indentation settings in your personal config. Let&#39;s assume you want to indent &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(-&amp;gt;&amp;gt; something&#xA;  ala&#xA;  bala&#xA;  portokala)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can do so by putting the following in your config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(put-clojure-indent &#39;-&amp;gt; 1)&#xA;(put-clojure-indent &#39;-&amp;gt;&amp;gt; 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that the body of the &lt;code&gt;-&amp;gt;/-&amp;gt;&amp;gt;&lt;/code&gt; is after the first argument.&lt;/p&gt; &#xA;&lt;p&gt;A more compact way to do the same thing is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(define-clojure-indent&#xA;  (-&amp;gt; 1)&#xA;  (-&amp;gt;&amp;gt; 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To indent something like a definition (&lt;code&gt;defn&lt;/code&gt;) you can do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(put-clojure-indent &#39;&amp;gt;defn :defn)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify different indentation settings for symbols prefixed with some ns (or ns alias):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(put-clojure-indent &#39;do 0)&#xA;(put-clojure-indent &#39;my-ns/do 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The bodies of certain more complicated macros and special forms (e.g. &lt;code&gt;letfn&lt;/code&gt;, &lt;code&gt;deftype&lt;/code&gt;, &lt;code&gt;extend-protocol&lt;/code&gt;, etc) are indented using a contextual backtracking indentation method, require more sophisticated indent specifications. Here are a few examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(define-clojure-indent&#xA;  (implement &#39;(1 (1)))&#xA;  (letfn     &#39;(1 ((:defn)) nil))&#xA;  (proxy     &#39;(2 nil nil (1)))&#xA;  (reify     &#39;(:defn (1)))&#xA;  (deftype   &#39;(2 nil nil (1)))&#xA;  (defrecord &#39;(2 nil nil (1)))&#xA;  (specify   &#39;(1 (1)))&#xA;  (specify   &#39;(1 (1))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These follow the same rules as the &lt;code&gt;:style/indent&lt;/code&gt; metadata specified by &lt;a href=&#34;https://github.com/clojure-emacs/cider-nrepl&#34;&gt;cider-nrepl&lt;/a&gt;. For instructions on how to write these specifications, see &lt;a href=&#34;https://docs.cider.mx/cider/indent_spec.html&#34;&gt;this document&lt;/a&gt;. The only difference is that you&#39;re allowed to use lists instead of vectors.&lt;/p&gt; &#xA;&lt;p&gt;The indentation of &lt;a href=&#34;https://docs.cider.mx/cider/indent_spec.html#special-arguments&#34;&gt;special arguments&lt;/a&gt; is controlled by &lt;code&gt;clojure-special-arg-indent-factor&lt;/code&gt;, which by default indents special arguments a further &lt;code&gt;lisp-body-indent&lt;/code&gt; when compared to ordinary arguments.&lt;/p&gt; &#xA;&lt;p&gt;An example of the default formatting is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defrecord MyRecord&#xA;    [my-field])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;defrecord&lt;/code&gt; has two special arguments, followed by the form&#39;s body - namely the record&#39;s name and its fields vector.&lt;/p&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;clojure-special-arg-indent-factor&lt;/code&gt; to 1, results in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defrecord MyRecord&#xA;  [my-field])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Indentation of Comments&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-mode&lt;/code&gt; differentiates between comments like &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;;;&lt;/code&gt;, etc. By default &lt;code&gt;clojure-mode&lt;/code&gt; treats &lt;code&gt;;&lt;/code&gt; as inline comments and &lt;em&gt;always&lt;/em&gt; indents those. You can change this behaviour like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;clojure-mode-hook (lambda () (setq-local comment-column 0)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might also want to change &lt;code&gt;comment-add&lt;/code&gt; to 0 in that way, so that Emacs comment functions (e.g. &lt;code&gt;comment-region&lt;/code&gt;) would use &lt;code&gt;;&lt;/code&gt; by default instead of &lt;code&gt;;;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Check out &lt;a href=&#34;https://guide.clojure.style/#comments&#34;&gt;this section&lt;/a&gt; of the Clojure style guide to understand better the semantics of the different comment levels and why &lt;code&gt;clojure-mode&lt;/code&gt; treats them differently by default.&lt;/p&gt; &#xA;&lt;h3&gt;Vertical alignment&lt;/h3&gt; &#xA;&lt;p&gt;You can vertically align sexps with &lt;code&gt;C-c SPC&lt;/code&gt;. For instance, typing this combo on the following form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(def my-map&#xA;  {:a-key 1&#xA;   :other-key 2})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Leads to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(def my-map&#xA;  {:a-key     1&#xA;   :other-key 2})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be done automatically (as part of indentation) by turning on &lt;code&gt;clojure-align-forms-automatically&lt;/code&gt;. This way it will happen whenever you select some code and hit &lt;code&gt;TAB&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Font-locking&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-mode&lt;/code&gt; features static font-locking (syntax highlighting) that you can extend yourself if needed. As typical for Emacs, it&#39;s based on regular expressions. You can find the default font-locking rules in &lt;code&gt;clojure-font-lock-keywords&lt;/code&gt;. Here&#39;s how you can add font-locking for built-in Clojure functions and vars:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(defvar clojure-built-in-vars&#xA;  &#39;(;; clojure.core&#xA;    &#34;accessor&#34; &#34;aclone&#34;&#xA;    &#34;agent&#34; &#34;agent-errors&#34; &#34;aget&#34; &#34;alength&#34; &#34;alias&#34;&#xA;    &#34;all-ns&#34; &#34;alter&#34; &#34;alter-meta!&#34; &#34;alter-var-root&#34; &#34;amap&#34;&#xA;    ;; omitted for brevity&#xA;    ))&#xA;&#xA;(defvar clojure-built-in-dynamic-vars&#xA;  &#39;(;; clojure.test&#xA;    &#34;*initial-report-counters*&#34; &#34;*load-tests*&#34; &#34;*report-counters*&#34;&#xA;    &#34;*stack-trace-depth*&#34; &#34;*test-out*&#34; &#34;*testing-contexts*&#34; &#34;*testing-vars*&#34;&#xA;    ;; clojure.xml&#xA;    &#34;*current*&#34; &#34;*sb*&#34; &#34;*stack*&#34; &#34;*state*&#34;&#xA;    ))&#xA;&#xA;(font-lock-add-keywords &#39;clojure-mode&#xA;                        `((,(concat &#34;(\\(?:\.*/\\)?&#34;&#xA;                                    (regexp-opt clojure-built-in-vars t)&#xA;                                    &#34;\\&amp;gt;&#34;)&#xA;                           1 font-lock-builtin-face)))&#xA;&#xA;(font-lock-add-keywords &#39;clojure-mode&#xA;                        `((,(concat &#34;\\&amp;lt;&#34;&#xA;                                    (regexp-opt clojure-built-in-dynamic-vars t)&#xA;                                    &#34;\\&amp;gt;&#34;)&#xA;                           0 font-lock-builtin-face)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The package &lt;code&gt;clojure-mode-extra-font-locking&lt;/code&gt; provides such additional font-locking for Clojure built-ins.&lt;/p&gt; &#xA;&lt;p&gt;As you might imagine one problem with this font-locking approach is that because it&#39;s based on regular expressions you&#39;ll get some false positives here and there (there&#39;s no namespace information, and no way for &lt;code&gt;clojure-mode&lt;/code&gt; to know what var a symbol resolves to). That&#39;s why &lt;code&gt;clojure-mode&lt;/code&gt;&#39;s font-locking defaults are conservative and minimalistic.&lt;/p&gt; &#xA;&lt;p&gt;Precise font-locking requires additional data that can obtained from a running REPL (that&#39;s how CIDER&#39;s &lt;a href=&#34;https://docs.cider.mx/cider/config/syntax_highlighting.html&#34;&gt;dynamic font-locking&lt;/a&gt; works) or from static code analysis.&lt;/p&gt; &#xA;&lt;p&gt;When it comes to definitions, &lt;code&gt;clojure-mode&lt;/code&gt; employs a simple heuristic and will treat every symbol named &lt;code&gt;def&lt;/code&gt;something as a built-in keyword. Still, you&#39;ll need to teach &lt;code&gt;clojure-mode&lt;/code&gt; manually how to handle the docstrings of non built-in definition forms. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(put &#39;&amp;gt;defn &#39;clojure-doc-string-elt 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;clojure-doc-string-elt&lt;/code&gt; attribute is processed by the function &lt;code&gt;clojure-font-lock-syntactic-face-function&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Refactoring support&lt;/h2&gt; &#xA;&lt;p&gt;The available refactorings were originally created and maintained by the &lt;code&gt;clj-refactor.el&lt;/code&gt; team. The ones implemented in Elisp only are gradually migrated to &lt;code&gt;clojure-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Threading macros related features&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-thread&lt;/code&gt;: Thread another form into the surrounding thread. Both &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; variants are supported.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-thread.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-unwind&lt;/code&gt;: Unwind a threaded expression. Supports both &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-unwind.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-thread-first-all&lt;/code&gt;: Introduce the thread first macro (&lt;code&gt;-&amp;gt;&lt;/code&gt;) and rewrite the entire form. With a prefix argument do not thread the last form.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-thread-first-all.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-thread-last-all&lt;/code&gt;: Introduce the thread last macro and rewrite the entire form. With a prefix argument do not thread the last form.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-thread-last-all.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-unwind-all&lt;/code&gt;: Fully unwind a threaded expression removing the threading macro.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-unwind-all.gif&#34;&gt; &#xA;&lt;h3&gt;Cycling things&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-cycle-privacy&lt;/code&gt;: Cycle privacy of &lt;code&gt;def&lt;/code&gt;s or &lt;code&gt;defn&lt;/code&gt;s. Use metadata explicitly with setting &lt;code&gt;clojure-use-metadata-for-privacy&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; for &lt;code&gt;defn&lt;/code&gt;s too.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-cycle-privacy.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-cycle-not&lt;/code&gt;: Add or remove a &lt;code&gt;not&lt;/code&gt; form around the current form.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-cycle-not.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-cycle-when&lt;/code&gt;: Find the closest &lt;code&gt;when&lt;/code&gt; or &lt;code&gt;when-not&lt;/code&gt; up the syntax tree and toggle it.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-cycle-when.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-cycle-if&lt;/code&gt;: Find the closest &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;if-not&lt;/code&gt; up the syntax tree and toggle it. Also transpose the &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;then&lt;/code&gt; branches, keeping the semantics the same as before.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-cycle-if.gif&#34;&gt; &#xA;&lt;h3&gt;Convert collection&lt;/h3&gt; &#xA;&lt;p&gt;Convert any given collection at point to list, quoted list, map, vector or set.&lt;/p&gt; &#xA;&lt;h3&gt;Let expression&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-introduce-let&lt;/code&gt;: Introduce a new &lt;code&gt;let&lt;/code&gt; form. Put the current form into its binding form with a name provided by the user as a bound name. If called with a numeric prefix put the let form Nth level up in the form hierarchy.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-introduce-let.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-move-to-let&lt;/code&gt;: Move the current form to the closest &lt;code&gt;let&lt;/code&gt;&#39;s binding form. Replace all occurrences of the form in the body of the let.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-move-to-let.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-let-forward-slurp-sexp&lt;/code&gt;: Slurp the next form after the &lt;code&gt;let&lt;/code&gt; into the &lt;code&gt;let&lt;/code&gt;. Replace all occurrences of the bound forms in the form added to the &lt;code&gt;let&lt;/code&gt; form. If called with a prefix argument slurp the next n forms.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-let-forward-slurp-sexp.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-let-backward-slurp-sexp&lt;/code&gt;: Slurp the form before the &lt;code&gt;let&lt;/code&gt; into the &lt;code&gt;let&lt;/code&gt;. Replace all occurrences of the bound forms in the form added to the &lt;code&gt;let&lt;/code&gt; form. If called with a prefix argument slurp the previous n forms.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-let-backward-slurp-sexp.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;paredit-convolute-sexp&lt;/code&gt; is advised to replace occurrences of bound forms with their bound names when convolute is used on a let form.&lt;/p&gt; &#xA;&lt;h3&gt;Rename ns alias&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-rename-ns-alias&lt;/code&gt;: Rename an alias inside a namespace declaration, and all of its usages in the buffer&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-rename-ns-alias.gif&#34;&gt; &#xA;&lt;p&gt;If there is an active selected region, only rename usages of aliases within the region, without affecting the namespace declaration.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-rename-ns-alias-region.gif&#34;&gt; &#xA;&lt;h3&gt;Add arity to a function&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-add-arity&lt;/code&gt;: Add a new arity to an existing single-arity or multi-arity function.&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/doc/clojure-add-arity.gif&#34;&gt; &#xA;&lt;h2&gt;Related packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode/raw/master/clojure-mode-extra-font-locking.el&#34;&gt;clojure-mode-extra-font-locking&lt;/a&gt; provides additional font-locking for built-in methods and macros. The font-locking is pretty imprecise, because it doesn&#39;t take namespaces into account and it won&#39;t font-lock a function at all possible positions in a sexp, but if you don&#39;t mind its imperfections you can easily enable it:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(require &#39;clojure-mode-extra-font-locking)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code in &lt;code&gt;clojure-mode-font-locking&lt;/code&gt; used to be bundled with &lt;code&gt;clojure-mode&lt;/code&gt; before version 3.0.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the code in this package as a basis for extending the font-locking further (e.g. functions/macros from more namespaces). Generally you should avoid adding special font-locking for things that don&#39;t have fairly unique names, as this will result in plenty of incorrect font-locking. CIDER users should avoid this package, as CIDER does its own dynamic font-locking, which is namespace-aware and doesn&#39;t produce almost any false positives.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el&#34;&gt;clj-refactor&lt;/a&gt; provides refactoring support.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enabling &lt;code&gt;CamelCase&lt;/code&gt; support for editing commands(like &lt;code&gt;forward-word&lt;/code&gt;, &lt;code&gt;backward-word&lt;/code&gt;, etc) in &lt;code&gt;clojure-mode&lt;/code&gt; is quite useful since we often have to deal with Java class and method names. The built-in Emacs minor mode &lt;code&gt;subword-mode&lt;/code&gt; provides such functionality:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;clojure-mode-hook #&#39;subword-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The use of &lt;a href=&#34;http://mumble.net/~campbell/emacs/paredit.html&#34;&gt;paredit&lt;/a&gt; when editing Clojure (or any other Lisp) code is highly recommended. It helps ensure the structure of your forms is not compromised and offers a number of operations that work on code structure at a higher level than just characters and words. To enable it for Clojure buffers:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;clojure-mode-hook #&#39;paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fuco1/smartparens&#34;&gt;smartparens&lt;/a&gt; is an excellent (newer) alternative to paredit. Many Clojure hackers have adopted it recently and you might want to give it a try as well. To enable &lt;code&gt;smartparens&lt;/code&gt; use the following code:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;clojure-mode-hook #&#39;smartparens-strict-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fanael/rainbow-delimiters&#34;&gt;RainbowDelimiters&lt;/a&gt; is a minor mode which highlights parentheses, brackets, and braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth. Assuming you&#39;ve already installed &lt;code&gt;RainbowDelimiters&lt;/code&gt; you can enable it like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;clojure-mode-hook #&#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Malabarba/aggressive-indent-mode&#34;&gt;aggressive-indent-mode&lt;/a&gt; automatically adjust the indentation of your code, while you&#39;re writing it. Using it together with &lt;code&gt;clojure-mode&lt;/code&gt; is highly recommended. Provided you&#39;ve already installed &lt;code&gt;aggressive-indent-mode&lt;/code&gt; you can enable it like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;clojure-mode-hook #&#39;aggressive-indent-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;REPL Interaction&lt;/h2&gt; &#xA;&lt;p&gt;One of the fundamental aspects of Lisps in general, and Clojure in particular, is the notion of interactive programming - building your programs by continuously changing the state of the running Lisp program (as opposed to doing something more traditional like making a change and re-running the program afterwards to see the changes in action). To get the most of clojure-mode you&#39;ll have to combine it with some tool which will allow you to interact with your Clojure program (a.k.a. process/REPL).&lt;/p&gt; &#xA;&lt;p&gt;A number of options exist for connecting to a running Clojure process and evaluating code interactively.&lt;/p&gt; &#xA;&lt;h3&gt;Basic REPL&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/clojure-emacs/inf-clojure&#34;&gt;inf-clojure&lt;/a&gt; provides basic interaction with a Clojure REPL process. It&#39;s very similar in nature and supported functionality to &lt;code&gt;inferior-lisp-mode&lt;/code&gt; for Common Lisp.&lt;/p&gt; &#xA;&lt;h3&gt;CIDER&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt; is a powerful Clojure interactive development environment, similar to SLIME for Common Lisp.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re into Clojure and Emacs you should definitely check it out.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;Tutorials, targeting Emacs beginners, are available at &lt;a href=&#34;http://clojure-doc.org/articles/tutorials/emacs/&#34;&gt;clojure-doc.org&lt;/a&gt; and &lt;a href=&#34;http://www.braveclojure.com/basic-emacs/&#34;&gt;Clojure for the Brave and the True&lt;/a&gt;. Keep in mind, however, that they might be out-of-date.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-mode&lt;/code&gt; is a capable tool, but it&#39;s certainly not perfect. This section lists a couple of general design problems/limitations that might affect your experience negatively.&lt;/p&gt; &#xA;&lt;h3&gt;General Issues&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-mode&lt;/code&gt; derives a lot of functionality directly from &lt;code&gt;lisp-mode&lt;/code&gt; (an Emacs major mode for Common Lisp), which simplified the initial implementation, but also made it harder to implement certain functionality. Down the road it&#39;d be nice to fully decouple &lt;code&gt;clojure-mode&lt;/code&gt; from &lt;code&gt;lisp-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode/issues/270&#34;&gt;this ticket&lt;/a&gt; for a bit more details.&lt;/p&gt; &#xA;&lt;h3&gt;Indentation Performance&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;clojure-mode&lt;/code&gt;&#39;s indentation engine is a bit slow. You can speed things up significantly by disabling &lt;code&gt;clojure-use-backtracking-indent&lt;/code&gt;, but this will break the indentation of complex forms like &lt;code&gt;deftype&lt;/code&gt;, &lt;code&gt;defprotocol&lt;/code&gt;, &lt;code&gt;reify&lt;/code&gt;, &lt;code&gt;letfn&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;We should look into ways to optimize the performance of the backtracking indentation logic. See &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode/issues/606&#34;&gt;this ticket&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Font-locking Implementation&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode#font-locking&#34;&gt;above&lt;/a&gt;, the font-locking is implemented in terms of regular expressions which makes it both slow and inaccurate.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;An extensive changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/clojure-mode/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2007-2022 Jeffrey Chu, Lennart Staflin, Phil Hagelberg, Bozhidar Batsov, Artur Malabarba, Magnar Sveen and &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the GNU General Public License; type &lt;kbd&gt;C-h C-c&lt;/kbd&gt; to view it.&lt;/p&gt;</summary>
  </entry>
</feed>