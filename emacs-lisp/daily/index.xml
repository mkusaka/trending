<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-13T01:30:33Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chep/copilot-chat.el</title>
    <updated>2024-11-13T01:30:33Z</updated>
    <id>tag:github.com,2024-11-13:/chep/copilot-chat.el</id>
    <link href="https://github.com/chep/copilot-chat.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chat with Github copilot in Emacs !&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot Chat for Emacs&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This plugin allows you to chat with github copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chep/copilot-chat.el/master/chat.gif?raw=true&#34; alt=&#34;copilot-chat demo&#34; title=&#34;copilot-chat demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to contribute, report issues or discuss new features.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Melpa&lt;/h3&gt; &#xA;&lt;p&gt;Copilot-chat is available on melpa&amp;nbsp;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET copilot-chat RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;use-package&lt;/code&gt;&amp;nbsp;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package copilot-chat)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Straight&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package copilot-chat&#xA;  :straight (:host github :repo &#34;chep/copilot-chat.el&#34; :files (&#34;*.el&#34;))&#xA;  :after (request org markdown-mode shell-maker))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Clone repository and eval files in emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Github&lt;/h3&gt; &#xA;&lt;p&gt;You will need a github acccount with access to copilot API. When sending the first prompt, you will need to authenticate to github. Follow instructions and everything will be fine.&lt;/p&gt; &#xA;&lt;h3&gt;Backend&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;copilot-chat-backend&lt;/code&gt; can be set to &lt;code&gt;&#39;curl&lt;/code&gt; (default) or &lt;code&gt;&#39;request&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With curl, answers will be written token by token. Curl path can be set with &lt;code&gt;copilot-chat-curl-program&lt;/code&gt; variable.&lt;br&gt; With request library, the text is written when all data is read and this can be long.&lt;/p&gt; &#xA;&lt;h3&gt;Frontend&lt;/h3&gt; &#xA;&lt;p&gt;Several frontends are available. You can select your favorite one by setting the &lt;code&gt;copilot-chat-frontend&lt;/code&gt; variable to &lt;code&gt;&#39;markdown&lt;/code&gt;, &lt;code&gt;&#39;org&lt;/code&gt; or &lt;code&gt;&#39;shell-maker&lt;/code&gt; ( &lt;a href=&#34;https://github.com/xenodium/chatgpt-shell&#34;&gt;https://github.com/xenodium/chatgpt-shell&lt;/a&gt; ).&lt;/p&gt; &#xA;&lt;p&gt;Try them and choose wisely.&lt;/p&gt; &#xA;&lt;h3&gt;Magit commits&lt;/h3&gt; &#xA;&lt;p&gt;You can use copilot to generate your commit messages&amp;nbsp;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;git-commit-setup-hook &#39;copilot-chat-insert-commit-message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or call manually &lt;code&gt;(copilot-chat-insert-commit-message)&lt;/code&gt; when in the commit message buffer.&lt;/p&gt; &#xA;&lt;h3&gt;Proxy&lt;/h3&gt; &#xA;&lt;p&gt;The proxy can be configured with the curl backend. For the emacs-request backend, please refer to the emacs-request documentation if you need to configure a proxy.&lt;/p&gt; &#xA;&lt;p&gt;Use the variables &lt;code&gt;copilot-chat-curl-proxy&lt;/code&gt;, &lt;code&gt;copilot-chat-curl-proxy-user-pass&lt;/code&gt;, and &lt;code&gt;copilot-chat-curl-proxy-insecure&lt;/code&gt; to set up a proxy. Refer to the documentation for each variable to learn how to use them.&lt;/p&gt; &#xA;&lt;p&gt;Proxies have not been thoroughly tested yet, so there may be bugs. Many options are missing for HTTPS proxies. Please open an issue if you need additional features.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic&lt;/h3&gt; &#xA;&lt;p&gt;Start chatting with &lt;code&gt;copilot-chat-display&lt;/code&gt;. Type your question in &lt;code&gt;*copilot-chat-prompt*&lt;/code&gt; buffer, then press &lt;code&gt;C-c C-c&lt;/code&gt; or &lt;code&gt;C-c RET&lt;/code&gt;.&lt;br&gt; You may need to authenticate to github. Follow instructions.&lt;/p&gt; &#xA;&lt;p&gt;You can select buffers that will be added as context in your prompt. Use &lt;code&gt;copilot-chat-add-current-buffer&lt;/code&gt; and &lt;code&gt;copilot-chat-del-current-buffer&lt;/code&gt;. You can also manage buffers by using &lt;code&gt;copilot-chat-list&lt;/code&gt;.&lt;br&gt; Selected buffers will be sent with each prompt until you remove them.&lt;/p&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-reset)&lt;/code&gt; reset everything including history, buffers and frontend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-display)&lt;/code&gt; display copilot chat buffers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-explain-symbol-at-line)&lt;/code&gt; ask Copilot to explain symbol under point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-explain)&lt;/code&gt; ask copilot to explain selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-review)&lt;/code&gt; ask copilot to review selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-doc)&lt;/code&gt; ask copilot to document selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-fix)&lt;/code&gt; ask copilot to fix selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-optimize)&lt;/code&gt; ask copilot to optimize selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-test)&lt;/code&gt; ask copilot to write tests for selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-custom-prompt-selection)&lt;/code&gt; ask for a prompt in minibuffer and pastes selection after it before sending it to copilot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-add-current-buffer)&lt;/code&gt; add current buffer to copilot chat. Its content will be sent with every request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-del-current-buffer)&lt;/code&gt; remove current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-list)&lt;/code&gt; open buffer list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-prompt-history-previous)&lt;/code&gt; insert previous prompt from history in prompt buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-prompt-history-next)&lt;/code&gt; insert next prompt from history in prompt buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-ask-and-insert)&lt;/code&gt; ask for a custom prompt and write answer in current buffer at point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(copilot-chat-insert-commit-message)&lt;/code&gt; Insert in the current buffer a copilot generated commit message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Key bindings&lt;/h3&gt; &#xA;&lt;p&gt;Warning&amp;nbsp;: key bindings have changed since Melpa integration needs to avoid &lt;code&gt;C-c &amp;lt;letter&amp;gt;&lt;/code&gt; bindings.&lt;/p&gt; &#xA;&lt;h4&gt;Prompt buffer&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c RET&lt;/code&gt; send prompt. Answer will be written in chat buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-p&lt;/code&gt; previous prompt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-n&lt;/code&gt; next prompt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-l&lt;/code&gt; open buffer list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-q&lt;/code&gt; bury buffer and delete window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Chat buffer&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;q&lt;/code&gt; bury buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Buffer list buffer&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RET&lt;/code&gt; select or deselect buffer on point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;space&lt;/code&gt; select or deselect buffer on point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-c&lt;/code&gt; clear buffer list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;g&lt;/code&gt; refresh list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;q&lt;/code&gt; bury buffer and delete window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is unofficial and based on Copilot Chat for neovim repository: &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim&#34;&gt;https://github.com/CopilotC-Nvim/CopilotChat.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The prompt for git commit messages comes from &lt;a href=&#34;https://github.com/ywkim/gpt-commit&#34;&gt;gpt-commit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For github copilot code completion in emacs, checkout &lt;a href=&#34;https://github.com/copilot-emacs/copilot.el&#34;&gt;copilot.el&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>