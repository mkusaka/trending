<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-21T01:32:14Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tinloaf/org-incoming</title>
    <updated>2022-12-21T01:32:14Z</updated>
    <id>tag:github.com,2022-12-21:/tinloaf/org-incoming</id>
    <link href="https://github.com/tinloaf/org-incoming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package to annotate and sort incoming PDFs into your org files.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is &lt;code&gt;org-incoming&lt;/code&gt;, a package to ingest PDF files into your &lt;code&gt;org&lt;/code&gt; or &lt;code&gt;org-roam&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;This package is intended to help you if you have a large number of &#34;incoming&#34; PDF files, e.g. scanned handwritten notes, and you want to somehow capture these PDFs in your org files. &#34;Capturing&#34; here can mean anything from completely transcribing them (or taking OCRed text in the PDF) to just creating an org file with a title, a date and maybe some tags, which links to the archived PDF.&lt;/p&gt; &#xA;&lt;p&gt;Personally, I use this to ingest the PDFs resulting from my &lt;a href=&#34;https://getrocketbook.com/&#34;&gt;Rocketbook&lt;/a&gt; into my org files.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;This package is not yet on MELPA or any other repository. To install it manually, clone the repository or get the &lt;code&gt;org-incoming.el&lt;/code&gt; file by some other means and put it in your Emacs&#39; &lt;code&gt;load-path&lt;/code&gt;. After that, all you need to do is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;org-incoming)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://raw.githubusercontent.com/tinloaf/org-incoming/main/#configuration&#34;&gt;configuring org-incoming&lt;/a&gt; you can start a new org-incoming session by invoking &lt;code&gt;org-incoming-start&lt;/code&gt;. An org-incoming session will process all files in your incoming folders sequentially. Each file passes through two phases:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &#34;query&#34; phase&lt;/li&gt; &#xA; &lt;li&gt;The &#34;annotation&#34; phase&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Each phase can be completed (going to the next phase or to the next incoming file) by pressing &lt;code&gt;C-c C-c&lt;/code&gt; or invoking &lt;code&gt;org-incoming-complete&lt;/code&gt;. When you complete the annotation phase for a file, the PDF file will be moved to the correct location and the annotation file will be created.&lt;/p&gt; &#xA;&lt;p&gt;You can quit your org-incoming session at any point by invoking &lt;code&gt;org-incoming-quit&lt;/code&gt; (bound to &lt;code&gt;C-c C-k&lt;/code&gt; by default).&lt;/p&gt; &#xA;&lt;h2&gt;Query&lt;/h2&gt; &#xA;&lt;p&gt;In the query phase, your emacs frame should look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tinloaf/org-incoming/main/doc/screenshot_query.png&#34; alt=&#34;Screenshot of the org-incoming query phase&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The PDF in displayed in one window, and the other window contains the query buffer. The query buffer contains an form in which you should assign the PDF a title and a date. Note that you can have the date &lt;a href=&#34;https://raw.githubusercontent.com/tinloaf/org-incoming/main/#optional-configuration&#34;&gt;parsed automatically&lt;/a&gt; from the filename of the incoming file. You can use &lt;code&gt;Tab&lt;/code&gt; and &lt;code&gt;S-Tab&lt;/code&gt; to jump between the form fields, and pressing &lt;code&gt;Return&lt;/code&gt; while the date field is focussed will bring up a calendar for date selection.&lt;/p&gt; &#xA;&lt;p&gt;Press &lt;code&gt;C-c C-c&lt;/code&gt; (or &lt;code&gt;M-x org-incoming-complete RET&lt;/code&gt;) to complete the query phase. If you want to skip the file for now, press &lt;code&gt;C-c C-s&lt;/code&gt; (&lt;code&gt;M-x org-incoming-skip RET&lt;/code&gt;). If you want to quit your org-incoming session, press &lt;code&gt;C-c C-k&lt;/code&gt; (&lt;code&gt;M-x org-incoming-quit RET&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Annotation&lt;/h2&gt; &#xA;&lt;p&gt;In the annotation phase, your emacs frame should look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tinloaf/org-incoming/main/doc/screenshot_annotation.png&#34; alt=&#34;Screenshot of the org-incoming annotation phase&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here you still see the PDF on the one side, and the annotation file to be created on the other side. Note that the annotation file is pre-filled with the title and date you gave and contains a link to the PDF file, resp. where the PDF file will be moved.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your &lt;a href=&#34;https://raw.githubusercontent.com/tinloaf/org-incoming/main/#configuration&#34;&gt;configuration&lt;/a&gt;, the annotation file will also contain any automatically extracted text, and may be a plain org file, or an org-roam node.&lt;/p&gt; &#xA;&lt;p&gt;Press &lt;code&gt;C-c C-c&lt;/code&gt; (&lt;code&gt;M-x org-incoming-complete RET&lt;/code&gt;)to complete the annotation phase and complete processing this file. org-incoming will then automatically proceed with the next file. If you want to skip the file for now, press &lt;code&gt;C-c C-s&lt;/code&gt; (&lt;code&gt;M-x org-incoming-skip RET&lt;/code&gt;). If you want to quit your org-incoming session, press &lt;code&gt;C-c C-k&lt;/code&gt; (&lt;code&gt;M-x org-incoming-quit RET&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Important functions&lt;/h2&gt; &#xA;&lt;h3&gt;org-incoming-start&lt;/h3&gt; &#xA;&lt;p&gt;Start a new org-incoming session.&lt;/p&gt; &#xA;&lt;h3&gt;org-incoming-complete&lt;/h3&gt; &#xA;&lt;p&gt;Complete the current phase, advancing to the next. If the current phase is the annotation phase, the PDF file will be moved to its destination, the annotation file will be created at its destination, and the next PDF will be loaded (if any remain).&lt;/p&gt; &#xA;&lt;h3&gt;org-incoming-quit&lt;/h3&gt; &#xA;&lt;p&gt;Quit the current org-incoming session. Any input from the current query or annotation phase will be discarded, and the file currently being processed will not be moved.&lt;/p&gt; &#xA;&lt;h3&gt;org-incoming-skip&lt;/h3&gt; &#xA;&lt;p&gt;Skip the incoming file currently being processed. The file is skipped for the current org-incoming session. If you quit org-incoming and cal org-incoming-start again, the file will be processed again.&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;There is one mandatory configuration setting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org-incoming-dirs&lt;/code&gt;: A list of plists describing the source/target pairs and any settings overrides for them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each plist must at least contain &lt;code&gt;:source &amp;lt;from-directory&amp;gt;&lt;/code&gt; and &lt;code&gt;:target &amp;lt;to-directory&amp;gt;&lt;/code&gt;. For each such pair, from-directory is treated as a path to a directory that contains incoming PDF files, and to-directory is the target directory. org-incoming will place its annotation files in the to-directory, and move the PDF files into the org-incoming-pdf-subdir directory inside the to-directory.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the plist for each folder pair can contain overrides for almost all of org-incoming&#39;s settings, in the form of &lt;code&gt;:&amp;lt;setting-name&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;. See the respective settings for details.&lt;/p&gt; &#xA;&lt;p&gt;See this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq org-incoming-dirs &#39;((:source &#34;/home/user/incoming/folder1&#34; :target &#34;/home/user/org/archive&#34;)&#xA;                          (:source &#34;/home/user/incoming/folder2&#34; :target &#34;/home/user/org/archive&#34; :use-roam &#39;t)&#xA;                          (:source &#34;/home/user/incoming/folder3&#34; :target &#34;/home/user/org/todos&#34; :pdf-subdir &#34;originals&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this configuration, all PDF files in &lt;code&gt;~/incoming/folder1&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;~/incoming/folder2&lt;/code&gt; will have their annotation files in &lt;code&gt;~/org/archive&lt;/code&gt; and (with a default &lt;code&gt;org-incoming-pdf-subdir&lt;/code&gt;) their PDFs in &lt;code&gt;~/org/archive/pdfs&lt;/code&gt;. However, PDFs from &lt;code&gt;~/incloming/folder2&lt;/code&gt; will be annotated with org-roam node files instead of &#34;plain&#34; org files. PDF files from &lt;code&gt;~/incoming/folder3&lt;/code&gt; will have their annotations in &lt;code&gt;~/org/todos&lt;/code&gt; and their PDFs in &lt;code&gt;~/org/todos/originals&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Optional configuration&lt;/h2&gt; &#xA;&lt;p&gt;Optionally configurable variables are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org-incoming-parse-date-pattern&lt;/code&gt; (or &lt;code&gt;:parse-date-pattern&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org-incoming-parse-date-re&lt;/code&gt; (or &lt;code&gt;:parse-date-re&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org-incoming-pdf-subdir&lt;/code&gt; (or &lt;code&gt;:pdf-subdir&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org-incoming-use-roam&lt;/code&gt; (or &lt;code&gt;:use-roam&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org-incoming-annotation-template&lt;/code&gt; (or &lt;code&gt;:annotation-template&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Template configuration is explained below. For everything else, please see their respective variable documentation (&lt;code&gt;M-x describe-variable &amp;lt;variablename&amp;gt; RET&lt;/code&gt;) for documentation. Each of these variables can be overridden for individual folder pairs by removing the &lt;code&gt;org-incoming-&lt;/code&gt; prefix from the variable name and using the remainder as a symbol in the folder pair&#39;s plist (see the example above).&lt;/p&gt; &#xA;&lt;h2&gt;Template Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;org-incoming-annotation-template&lt;/code&gt; (resp. the &lt;code&gt;:annotation-template&lt;/code&gt; property) expects a strings that acts as a template for the annotation files. This template will be formatted using s.el&#39;s &lt;code&gt;s-format&lt;/code&gt;, so see the documentation for details. The available fields are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;${title}&lt;/code&gt; - The title assigned during query&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;${date}&lt;/code&gt; - The date assigned during query&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;${link}&lt;/code&gt; - The link to the PDF file (after moving)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;${extracted}&lt;/code&gt; - Any text extracted from the PDF file&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default template looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+TITLE: ${title}&#xA;#+DATE: ${date}&#xA;&#xA;Link: [[${link}]]&#xA;&#xA;* Extracted Text&#xA;&#xA;${extracted}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This software is released under the MIT license, also knows as the &#34;Expat License&#34;. See License.txt for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nyxkrage/emacs-os</title>
    <updated>2022-12-21T01:32:14Z</updated>
    <id>tag:github.com,2022-12-21:/nyxkrage/emacs-os</id>
    <link href="https://github.com/nyxkrage/emacs-os" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal Linux distro which just boots Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Emacs running directly on Linux (Pid1)&lt;/h1&gt; &#xA;&lt;h2&gt;Setup prerequisites&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ export ROOTFS_MNT=$PWD/rootfs_mnt&#xA;$ export ROOTFS=$PWD/rootfs&#xA;$ ./make_emacs_rootfs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Statically compiled Ncurses&lt;/h2&gt; &#xA;&lt;p&gt;Emacs will complain about not being able to find tputs, unless a statically linked library of &lt;code&gt;ncurses&lt;/code&gt; can be found&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ pushd ncurses&#xA;$ ./configure CC=gcc CXX=gcc LDFLAGS=-static CFLAGS=-static --prefix=&#34;&#34;&#xA;$ make -j$(nproc)&#xA;$ make DESTDIR=$PWD/build install&#xA;$ popd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Statically compiled Emacs&lt;/h2&gt; &#xA;&lt;p&gt;We need a statically compiled version of emacs if we want to keep the rootfs minimal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ pushd emacs&#xA;$ ./autogen.sh&#xA;$ ./configure --with-json=no --without-x --without-libsystemd --without-gnutls --with-sound=no --without-lcms2 --without-dbus CFLAGS=&#34;-static -O3 -I$PWD/../ncurses/build/include&#34; LDFLAGS=&#34;-static -L$PWD/../ncurses/build/lib&#34; CC=musl-gcc CXX=musl-gcc --prefix=&#34;&#34;&#xA;$ make -j$(nproc)&#xA;$ sudo make DESTDIR=$ROOTFS_MNT install&#xA;$ popd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;User Mode Linux&lt;/h1&gt; &#xA;&lt;p&gt;This is not strictly necessary and you can also use a virtual machine instead, but this makes for a much faster workflow&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ pushd Linux&#xA;$ make ARCH=um menuconfig&#xA;$ make ARCH=um -j$(nproc)&#xA;$ install -m 755 linux $HOME/.local/bin/uml&#xA;$ popd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Statically compile busybox&lt;/h1&gt; &#xA;&lt;p&gt;When creating your busybox config the following settings must be set correctly&lt;/p&gt; &#xA;&lt;p&gt;[x] Settings-&amp;gt;Don&#39;t use /usr [x] Settings-&amp;gt;Build static binary (no shared libs) [x] Linux System Utilities-&amp;gt;mount [x] Linux System Utilities-&amp;gt;umount [x] Login/Password Management Utilities-&amp;gt;getty&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ pushd busybox&#xA;$ make menuconfig&#xA;$ make -j$(nproc)&#xA;$ make install&#xA;$ popd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Shutdown and Reboot utilities&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ pushd shutdown&#xA;$ gcc -static shutdown.c -o shutdown&#xA;$ popd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Finishing steps&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ ./setup_emacs_rootfs.sh&#xA;$ sudo umount $ROOTFS_MNT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Launch Emacs-Os&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ uml ubd0=$ROOTFS init=/sbin/getty -i -n -l /bin/emacs 0 /dev/tty0 linux&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>