<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-11T01:46:06Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yilkalargaw/org-auto-tangle</title>
    <updated>2022-06-11T01:46:06Z</updated>
    <id>tag:github.com,2022-06-11:/yilkalargaw/org-auto-tangle</id>
    <link href="https://github.com/yilkalargaw/org-auto-tangle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a simple emacs package to allow org file tangling upon save&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: org-auto-tangle #+author: Yilkal Argaw&lt;/p&gt; &#xA;&lt;p&gt;This package (i.e org-auto-tangle) is a very simple emacs package that allows you to automatically tangle org files on save. This is done by adding the option &lt;del&gt;#+auto_tangle: t&lt;/del&gt; in your org file.&lt;/p&gt; &#xA;&lt;p&gt;The tangling process happens asynchronously so it will not block your emacs session.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;USAGE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Simply require the package in you emacs init and hook it into org-mode.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(require &#39;org-auto-tangle)&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;org-mode-hook &#39;org-auto-tangle-mode)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;or you can use use-package&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package org-auto-tangle :load-path &#34;site-lisp/org-auto-tangle/&#34; ;; this line is necessary only if you cloned the repo in your site-lisp directory :defer t :hook (org-mode . org-auto-tangle-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If the minor mode is on, it will try to automatically tangle your org files if they contain a non nil value for the &lt;del&gt;#+auto_tangle:&lt;/del&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;You can configure auto-tangle as the default behavior for all org buffers by setting the &lt;del&gt;org-auto-tangle-default&lt;/del&gt; variable to &lt;del&gt;t&lt;/del&gt;. In this case, you can disable it for some buffers by setting the &lt;del&gt;#+auto_tangle:&lt;/del&gt; option to &lt;del&gt;nil&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Babel Auto Tangle Safelist Add a list of files to the safelist to autotangle with noweb evaluation #+begin_src emacs-lisp (setq org-auto-tangle-babel-safelist &#39;( &#34;&lt;del&gt;/system.org&#34; &#34;&lt;/del&gt;/test.org&#34; )) #+end_src&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;License&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package (i.e. &lt;del&gt;org-auto-tangle&lt;/del&gt;) is licensed under the the 2-Clause BSD License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tecosaur/org-glossary</title>
    <updated>2022-06-11T01:46:06Z</updated>
    <id>tag:github.com,2022-06-11:/tecosaur/org-glossary</id>
    <link href="https://github.com/tecosaur/org-glossary" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Glossary, Acronyms, and Index capability within Org&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Org Glossary #+author: tecosaur&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Emacs-27.1+-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34;&gt; #+html: &lt;img src=&#34;https://img.shields.io/badge/stage-%CE%B1,%20experimental-red?style=flat-square&#34;&gt; #+html: &lt;a href=&#34;https://www.buymeacoffee.com/tecosaur&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buy_me_a_coffee-FFDD00?style=flat-square&amp;amp;logo=buy-me-a-coffee&amp;amp;logoColor=black&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functionality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are four major pieces of functionality this package provides&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Glossary&lt;/li&gt; &#xA; &lt;li&gt;Acronyms&lt;/li&gt; &#xA; &lt;li&gt;Index&lt;/li&gt; &#xA; &lt;li&gt;Text substitutions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Within specially named sections, Glossary terms, Acronyms, and Text substitutions are defined using definition lists, using the following forms: #+begin_example&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;term :: definition # implicit plural form&lt;/li&gt; &#xA; &lt;li&gt;term, terms :: definition # explicit plural form #+end_example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Indexed terms are defined using normal lists, using the pattern of the definition list tags above.&lt;/p&gt; &#xA;&lt;p&gt;Then, all uses of defined terms in the document are picked up and on export Glossary/Acronym/Index sections are appended to the document.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_example Apple and ACRs, why not substitute something. : An apple and ACR, why not substitute something.&lt;/p&gt; &#xA;&lt;p&gt;Mentioning apple again, and now bananas.&lt;/p&gt; &#xA;&lt;p&gt;This is an org document.&lt;/p&gt; &#xA;&lt;p&gt;,* Glossary&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;apple :: A fruit.&lt;/li&gt; &#xA; &lt;li&gt;banana :: Another fruit.&lt;/li&gt; &#xA; &lt;li&gt;pear :: Yet another fruit. ,* Acronyms&lt;/li&gt; &#xA; &lt;li&gt;ACR :: Absolutely Credible acRonym ,* Text Substitutions&lt;/li&gt; &#xA; &lt;li&gt;substitute :: replace ,* Index Terms&lt;/li&gt; &#xA; &lt;li&gt;org #+end_example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation ** Straight #+begin_src elisp (use-package org-glossary :straight (:host github :repo &#34;tecosaur/org-glossary&#34;)) #+end_src ** Doom #+begin_src elisp ;; $DOOMDIR/packages.el (package! org-glossary :recipe (:host github :repo &#34;tecosaur/org-glossary&#34;))&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;;; $DOOMDIR/config.el (use-package! org-glossary :after org) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/lsp-pyright</title>
    <updated>2022-06-11T01:46:06Z</updated>
    <id>tag:github.com,2022-06-11:/emacs-lsp/lsp-pyright</id>
    <link href="https://github.com/emacs-lsp/lsp-pyright" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lsp-mode ❤️ pyright&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp-pyright&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-pyright/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacs-lsp/lsp-pyright/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-pyright/master/License&#34;&gt;&lt;img src=&#34;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/lsp-pyright&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lsp-pyright-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/emacs-lsp/lsp-mode?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/emacs-lsp/lsp-mode.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/emacs-lsp/lsp-mode&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;lsp-mode client leveraging &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;Pyright language server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package lsp-pyright&#xA;  :ensure t&#xA;  :hook (python-mode . (lambda ()&#xA;                          (require &#39;lsp-pyright)&#xA;                          (lsp))))  ; or lsp-deferred&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp-pyright&lt;/code&gt; supports the following configuration. Each configuration is described in detail in &lt;a href=&#34;https://github.com/microsoft/pyright/raw/master/docs/settings.md&#34;&gt;Pyright Settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pyright.disableLanguageServices&lt;/code&gt; via &lt;code&gt;lsp-pyright-disable-language-services&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pyright.disableOrganizeImports&lt;/code&gt; via &lt;code&gt;lsp-pyright-disable-organize-imports&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.autoImportCompletions&lt;/code&gt; via &lt;code&gt;lsp-pyright-auto-import-completions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.useLibraryCodeForTypes&lt;/code&gt; via &lt;code&gt;lsp-pyright-use-library-code-for-types&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.typeshedPaths&lt;/code&gt; via &lt;code&gt;lsp-pyright-typeshed-paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.diagnosticMode&lt;/code&gt; via &lt;code&gt;lsp-pyright-diagnostic-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.typeCheckingMode&lt;/code&gt; via &lt;code&gt;lsp-pyright-typechecking-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.logLevel&lt;/code&gt; via &lt;code&gt;lsp-pyright-log-level&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.autoSearchPaths&lt;/code&gt; via &lt;code&gt;lsp-pyright-auto-search-paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.extraPaths&lt;/code&gt; via &lt;code&gt;lsp-pyright-extra-paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.venvPath&lt;/code&gt; via &lt;code&gt;lsp-pyright-venv-path&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Projects can be further configured using &lt;code&gt;pyrightconfig.json&lt;/code&gt; file. For further details please see &lt;a href=&#34;https://github.com/microsoft/pyright/raw/master/docs/configuration.md&#34;&gt;Pyright Configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage notes&lt;/h3&gt; &#xA;&lt;p&gt;Pyright includes a recent copy of the Python stdlib type stubs. To add type stubs for additional libraries, customize &lt;code&gt;lsp-pyright-stub-path&lt;/code&gt;, or place the appropriate type stubs in &lt;code&gt;typings&lt;/code&gt; subdirectory of your project (this is the default stub path). Note that without stubs but with &lt;code&gt;lsp-pyright-use-library-code-for-types&lt;/code&gt; non-nil, you may see type checking errors, particularly for complex libraries such as Pandas.&lt;/p&gt; &#xA;&lt;p&gt;Example setup to get typechecking working properly for Pandas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/microsoft/python-type-stubs $HOME/src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;  (setq lsp-pyright-use-library-code-for-types t) ;; set this to nil if getting too many false positive type errors&#xA;  (setq lsp-pyright-stub-path (concat (getenv &#34;HOME&#34;) &#34;/src/python-type-stubs&#34;)) ;; example&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>