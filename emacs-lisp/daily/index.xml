<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-14T01:33:40Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sashimacs/os1-theme</title>
    <updated>2023-04-14T01:33:40Z</updated>
    <id>tag:github.com,2023-04-14:/sashimacs/os1-theme</id>
    <link href="https://github.com/sashimacs/os1-theme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light, warm, modern theme for Emacs, inspired by film palettes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OS&lt;sup&gt;1&lt;/sup&gt; Theme&lt;/h1&gt; &#xA;&lt;p&gt;A light, warm, modern theme inspired by the combined color palettes of the films &lt;em&gt;Her&lt;/em&gt; by Spike Jonze and &lt;em&gt;Paris, Texas&lt;/em&gt; by Wim Wenders. Designed with equal focus on readability and coziness.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Light&#34; src=&#34;https://i.imgur.com/bo81ECG.jpg&#34; width=&#34;49%&#34;&gt; &amp;nbsp; &lt;img alt=&#34;Dark&#34; src=&#34;https://i.imgur.com/EBpt62x.jpg&#34; width=&#34;49%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This is a work-in-progress. Feel free to submit PRs, but please include before and after screenshots of proposed changes.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can install using straight with,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package os1-theme&#xA;  :straight (:type git :host github :repo &#34;sashimacs/os1-theme&#34;)&#xA;  :defer nil&#xA;  :config (load-theme &#39;os1 t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can install using quelpa with,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Install and load `quelpa-use-package&#39;.&#xA;(package-install &#39;quelpa-use-package)&#xA;(require &#39;quelpa-use-package)&#xA;&#xA;;; Install OS1.&#xA;(use-package os1-theme&#xA;  :quelpa (os1-theme :fetcher github :repo &#34;sashimacs/os1-theme&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;OS&lt;sup&gt;1&lt;/sup&gt; currently inherits from the great &lt;a href=&#34;https://github.com/bbatsov/solarized-emacs&#34;&gt;Solarized for Emacs&lt;/a&gt; theme, so those options apply here too. In addition, the following has been added:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; The amount of padding, in pixels, to add around the modeline.&#xA;;; In the previews here, this is set to `8’, but its default is `1’.&#xA;(setq os1-modeline-padding 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These options must be set before loading. You can also use for example &lt;code&gt;:custom (os1-modeline-padding 8)&lt;/code&gt; in your use-package declarations to customize the theme before loading.&lt;/p&gt; &#xA;&lt;h3&gt;Previews&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sashimacs/os1-theme/previews/elisp.png&#34; alt=&#34;os1-elisp-preview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sashimacs/os1-theme/previews/minibuffer-active.png&#34; alt=&#34;os1-coding-minibuffer-preview&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ibraimgm/emacs-devtools</title>
    <updated>2023-04-14T01:33:40Z</updated>
    <id>tag:github.com,2023-04-14:/ibraimgm/emacs-devtools</id>
    <link href="https://github.com/ibraimgm/emacs-devtools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Developer tools for emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Emacs Devtools&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;emacs-devtools&lt;/code&gt; is pre-configured collection of emacs files to make the live of a developer easy. Originally my intent was to use emacs only to learn Lisp, but soon I find myself using more and more emacs every day. Suddenly, I realized that I had a bunch of customizations and utilities that could be very useful, mainly for emacs beginners.&lt;/p&gt; &#xA;&lt;p&gt;The next step was obvious: I cleaned and reorganized my configuration to make everything easier to understand and created this project in 2012. This is a major rewrite of the project, now requiring emacs 24+ that use the new package management mechanism to make things easier to configure and maintain. My hope is that this project serve as a starting point (or at least as a source of ideas) for your own personal emacs configuration.&lt;/p&gt; &#xA;&lt;p&gt;The best part: it&#39;s &lt;em&gt;fully functional&lt;/em&gt; in both Linux and Windows!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows Users&lt;/strong&gt;: This setup is tested regularly on Windows ans should work flawlessly, and without any additional software or configuration. If you find any problem, please take a look at the &lt;a href=&#34;https://github.com/ibraim-gm/emacs-devtools/raw/master/OLD_WINDOWS.md&#34;&gt;older, deprecated Windows-specific instructions&lt;/a&gt; and/or file a bug on &lt;a href=&#34;https://github.com/ibraim-gm/emacs-devtools&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;First of all, make sure you do not have a &lt;code&gt;.emacs&lt;/code&gt; file in your home. Then, just clone the repository in &lt;code&gt;~.emacs.d&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ibraim-gm/emacs-devtools.git ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, start emacs and execute &lt;code&gt;M-x dt-install&lt;/code&gt;. This will download and install all packages, and generate a new &lt;code&gt;.emacs&lt;/code&gt; file in your home directory. After restarting emacs, devtools will be installed and configured.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows Only&lt;/strong&gt;: If you have errors when trying to donwload the packages, try running emacs from inside a git terminal. After installing successfully, you can run emacs from outside the git terminal too.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;A lot of the features work seamlessly integrated in your editing (ex: smart parens, rainbow parens, ivy, auto completion, etc.) but some of them have additional commands bound by default.&lt;/p&gt; &#xA;&lt;p&gt;When in doubt, you can check &lt;code&gt;lisp/completion-init.el&lt;/code&gt; for general goodies; while &lt;code&gt;lisp/lang-init.el&lt;/code&gt; have language-specific configurations and extra bindings. Don&#39;t be shy!&lt;/p&gt; &#xA;&lt;h3&gt;Querying for help&lt;/h3&gt; &#xA;&lt;p&gt;To help you learn the new features, you can try &lt;code&gt;C-?&lt;/code&gt; to show a list of generic, but useful commands. Also, typing &lt;code&gt;M-x&lt;/code&gt; will show the available commands/keys if you wait a little.&lt;/p&gt; &#xA;&lt;h3&gt;Resizing and moving between windows&lt;/h3&gt; &#xA;&lt;p&gt;You can easy move between existing frames with &lt;code&gt;M-&amp;lt;arrow&amp;gt;&lt;/code&gt;. To enlarge or shrink a frame, you can use &lt;code&gt;C-S-&amp;lt;arrow&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Layouts&lt;/h3&gt; &#xA;&lt;p&gt;You can easily create and load custom frame layouts. Just use &lt;code&gt;C-c l l&lt;/code&gt; to load or &lt;code&gt;C-c l s&lt;/code&gt; to save. You can toggle window dedication with &lt;code&gt;&amp;lt;f11&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Magit and speedbar&lt;/h3&gt; &#xA;&lt;p&gt;You can have the power of magit with &lt;code&gt;C-x g&lt;/code&gt;. Also, &lt;code&gt;&amp;lt;f8&amp;gt;&lt;/code&gt; toggles a handy speedbar, that automatically integrates with your projectile projects.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;strong&gt;all features are disabled by default&lt;/strong&gt;. To enable them, you need to edit you newly-copied &lt;code&gt;.emacs&lt;/code&gt; and uncomment teh desired sections. The &#34;requires&#34; text of each feature is only informative: everything is installed automagically as long as you have an active internet connection.&lt;/p&gt; &#xA;&lt;h2&gt;Maintaining&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use &lt;code&gt;emacs-devtools&lt;/code&gt; as a starting point to your personal configuration, my personal recommendation is to &lt;strong&gt;fork&lt;/strong&gt; this project for a private repository and change/add/remove what you want in the fork. This way, you can have a &#34;backup&#34; of your personal options AND will be able to fetch any new features or bug fixes from the original project.&lt;/p&gt; &#xA;&lt;p&gt;Note that the packages are all &lt;em&gt;pinned&lt;/em&gt;. If you want to use different versions, you can unpin (or put a specific version), and run &lt;code&gt;M-x dt-install-packages&lt;/code&gt; to get the new version. You might want to use &lt;code&gt;M-x quelpa-self-upgrade&lt;/code&gt; too.&lt;/p&gt; &#xA;&lt;h2&gt;Old emacs?&lt;/h2&gt; &#xA;&lt;p&gt;If you insist on using an old version of emacs, you can try to use the (&lt;em&gt;very&lt;/em&gt;) &#34;old&#34; code. Take a look at the tag &lt;code&gt;before-el-get&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BSD-3. Take a look at &lt;code&gt;LICENSE&lt;/code&gt; and &lt;code&gt;AUTHORS&lt;/code&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Fuco1/emacs-cats</title>
    <updated>2023-04-14T01:33:40Z</updated>
    <id>tag:github.com,2023-04-14:/Fuco1/emacs-cats</id>
    <link href="https://github.com/Fuco1/emacs-cats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Functors, Monads, Categories for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Category theory in Emacs&lt;/h1&gt; &#xA;&lt;p&gt;This package implements various abstractions from Category Theory highly inspired by Haskell.&lt;/p&gt; &#xA;&lt;p&gt;The complete (Haskell) documentation can be found on the &lt;a href=&#34;https://hackage.haskell.org/package/base-4.18.0.0&#34;&gt;hackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Because Emacs runtime does not possess any abilities of type inference, we must explicitly pass the pure and return constructors to some functions where it is impossible to get from context. Other than this, the usage and interface is the same as the Haskell libraries.&lt;/p&gt; &#xA;&lt;p&gt;The macro &lt;code&gt;cats-do&lt;/code&gt; can be used to sequence monadic actions in an imperative way. Here is an example of a state monad:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defclass my-state ()&#xA;  ((config-file&#xA;    :initarg :config-file&#xA;    :accessor get-config-file)&#xA;   (working-dir&#xA;    :initarg :working-dir&#xA;    :accessor get-working-dir)))&#xA;&#xA;(defun my-exec-in-wd (cmd)&#xA;  &#34;Prepare an action running CMD in current state&#39;s working directory.&#34;&#xA;  (cats-do&#xA;   ;; map get-working-dir over the internal state, save the result in&#xA;   ;; variable `wd&#39;&#xA;   (:= wd (cats-fmap #&#39;get-working-dir (cats-state-get)))&#xA;   ;; the first argument to return is only used to determine the&#xA;   ;; &#34;instance&#34; of return for state, because Elisp cannot determine&#xA;   ;; this automatically during runtime.&#xA;   (cats-return (cats-data-state)&#xA;     (with-temp-buffer&#xA;       (let ((default-directory wd))&#xA;         (shell-command-to-string cmd))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More comprehensive examples are in the &lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/emacs-cats/master/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h1&gt;Classes and Methods&lt;/h1&gt; &#xA;&lt;p&gt;Classes are implemented by defining one or several &lt;code&gt;cl-defgeneric&lt;/code&gt; methods which need to be implemented (we call this an &lt;em&gt;instance&lt;/em&gt;). For example, to make a &lt;code&gt;list&lt;/code&gt; an instance of class &lt;code&gt;Functor&lt;/code&gt;, it needs to implemment &lt;code&gt;(cl-defmethod cats-fmap (fn (this list)))&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Following is a list of classes and corresponding methods.&lt;/p&gt; &#xA;&lt;h2&gt;Functors&lt;/h2&gt; &#xA;&lt;p&gt;A type &lt;code&gt;f&lt;/code&gt; is a &lt;code&gt;Functor&lt;/code&gt; if it provides a function &lt;code&gt;cats-fmap&lt;/code&gt; which, given any types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; lets you apply any function from &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; to turn an &lt;code&gt;f a&lt;/code&gt; into an &lt;code&gt;f b&lt;/code&gt;, preserving the structure of &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example: a list is a functor with &lt;code&gt;cats-fmap&lt;/code&gt; equal to &lt;code&gt;mapcar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Minimal implementation of Functor is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-fmap&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following laws must be satisfied:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Identity&#xA;  (cats-fmap #&#39;identity a)&#xA;= (identity a)&#xA;&#xA;;; Composition&#xA;  (cats-fmap (lambda (x) (funcall f (funcall g x))) structure)&#xA;= (cats-fmap f (cats-fmap g structure))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instances for built-in Elisp types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cons&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instances for types provided by Cats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-maybe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-ziplist&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-state&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Applicative&lt;/h2&gt; &#xA;&lt;p&gt;A functor with application, providing operations to embed pure expressions (&lt;code&gt;cats-pure&lt;/code&gt;), and sequence computations and combine their results (&lt;code&gt;cats-apply&lt;/code&gt;). Unlike Monads, Applicative application can not decide what to do next based on the result of previous action.&lt;/p&gt; &#xA;&lt;p&gt;Each Applicative must also implement &lt;strong&gt;Functor&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Minimal implementation of Applicative is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-pure&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-apply&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-lift-a2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instances for built-in Elisp types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt; (non-deterministic)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cons&lt;/code&gt; (zipper)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vector&lt;/code&gt; (non-deterministic)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instances for types provided by Cats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-ziplist&lt;/code&gt; is a list wrapper with zipping apply&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-maybe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-state&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Monad&lt;/h2&gt; &#xA;&lt;p&gt;The Monad class defines the basic operations over a monad, an abstract datatype of actions. Unlike Applicative, Monad binding can decide what to do next based on the result of previous action.&lt;/p&gt; &#xA;&lt;p&gt;Each Monad must also implement &lt;strong&gt;Applicative&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Minimal implementation of Monad is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-return&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-bind&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-seq&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following laws must be satisfied:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Left identity&#xA;  (cats-bind (cats-return monad-type a) fn)&#xA;= (funcall fn a)&#xA;&#xA;;; Right identity&#xA;  (cats-bind m (lambda (x) (cats-return monad-type x)))&#xA;= m&#xA;&#xA;;; Associativity&#xA;  (cats-bind m (lambda (x) (cats-bind (funcall k x) h)))&#xA;= (cats-bind (cats-bind m k) h)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instances for built-in Elisp types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt; (non-deterministic)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vector&lt;/code&gt; (non-deterministic)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instances for types provided by Cats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-maybe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-state&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Monoid&lt;/h2&gt; &#xA;&lt;p&gt;The class of monoids (types with an associative binary operation that has an identity).&lt;/p&gt; &#xA;&lt;p&gt;Minimal implementation of Monoid is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-mempty&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-mappend&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-mconcat&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following laws must be satisfied:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Right Identity&#xA;(cats-mappend a (cats-mempty a)) = a&#xA;&#xA;;; Left Identity&#xA;(cats-mappend (cats-mempty a) a) = a&#xA;&#xA;;; Associativity (semigroup)&#xA;  (cats-mappend a (cats-mappend b c))&#xA;= (cats-mappend (cats-mappend a b) c)&#xA;&#xA;;; Concatenation&#xA;  (cats-mconcat list-of-a)&#xA;= (cats-foldr #&#39;cats-mappend (cats-mempty item-of-a) list-of-a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instances for built-in Elisp types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;number&lt;/code&gt; (with sum)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;string&lt;/code&gt; (with concat)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instances for types provided by Cats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-endo&lt;/code&gt; - Monoid of endomorphisms under composition&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Foldable&lt;/h2&gt; &#xA;&lt;p&gt;The Foldable class represents data structures that can be reduced to a summary value one element at a time.&lt;/p&gt; &#xA;&lt;p&gt;Minimal implementation of Foldable is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-fold-map&lt;/code&gt; or &lt;code&gt;cats-foldr&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instances for built-in Elisp types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instances for types provided by Cats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-maybe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Traversable&lt;/h2&gt; &#xA;&lt;p&gt;Functors representing data structures that can be transformed to structures of the same shape by performing an Applicative (or, therefore, Monad) action on each element from left to right.&lt;/p&gt; &#xA;&lt;p&gt;Each Traversable must also implement &lt;strong&gt;Functor&lt;/strong&gt; and &lt;strong&gt;Foldable&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Minimal implementation of Traversable is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-traverse&lt;/code&gt; or &lt;code&gt;cats-sequence-a&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instances for built-in Elisp types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instances for types provided by Cats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-data-maybe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>