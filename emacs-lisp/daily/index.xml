<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:34:12Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aki2o/log4e</title>
    <updated>2023-02-19T01:34:12Z</updated>
    <id>tag:github.com,2023-02-19:/aki2o/log4e</id>
    <link href="https://github.com/aki2o/log4e" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provide a logging framework for elisp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/aki2o/log4e&#34;&gt;&lt;img src=&#34;https://travis-ci.org/aki2o/log4e.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s this?&lt;/h1&gt; &#xA;&lt;p&gt;This is a extension of Emacs provides logging framework for Elisp.&lt;/p&gt; &#xA;&lt;h1&gt;Feature&lt;/h1&gt; &#xA;&lt;h3&gt;Define function for logging automatically&lt;/h3&gt; &#xA;&lt;p&gt;Write the following sexp in your elisp file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(log4e:deflogger &#34;hoge&#34; &#34;%t [%l] %m&#34; &#34;%H:%M:%S&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can use the following function/command.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hoge–log-fatal&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-error&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-warn&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-info&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-debug&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-trace&lt;/li&gt; &#xA; &lt;li&gt;hoge–log&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-fatal*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-error*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-warn*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-info*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-debug*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-trace*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-set-level&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-enable-logging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-disable-logging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-enable-debugging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-disable-debugging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-enable-messaging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-disable-messaging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-debugging-p&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-set-coding-system&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-set-author-mail-address&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-clear-log&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-open-log&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-open-log-if-debug&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For detail, see Usage section.&lt;/p&gt; &#xA;&lt;h3&gt;font-lock on logging buffer&lt;/h3&gt; &#xA;&lt;p&gt;Here is the image of logging buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aki2o/log4e/master/image/demo1.png&#34; alt=&#34;demo1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following face is used for font-lock on logging buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;font-lock-doc-face&lt;/li&gt; &#xA; &lt;li&gt;font-lock-keyword-face&lt;/li&gt; &#xA; &lt;li&gt;font-lock-string-face&lt;/li&gt; &#xA; &lt;li&gt;font-lock-warning-face&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;key binding on logging buffer&lt;/h3&gt; &#xA;&lt;p&gt;The mode of logging buffer is log4e-mode which is based view-mode.&lt;br&gt; The following binding is added.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;J&lt;/code&gt; log4e:next-log … move to head of next log&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;K&lt;/code&gt; log4e:previous-log … move to head of previous log&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h3&gt;If use package.el&lt;/h3&gt; &#xA;&lt;p&gt;2013/07/19 It&#39;s available by using melpa.&lt;/p&gt; &#xA;&lt;h3&gt;If use el-get.el&lt;/h3&gt; &#xA;&lt;p&gt;2013/07/26 It&#39;s available. But, master branch only.&lt;/p&gt; &#xA;&lt;h3&gt;If use auto-install.el&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(auto-install-from-url &#34;https://raw.github.com/aki2o/log4e/master/log4e.el&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Download log4e.el and put it on your load-path.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;For example, develop elisp with prefix &#34;hoge&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Initially&lt;/h3&gt; &#xA;&lt;p&gt;Write the following in the elisp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;log4e)&#xA;(log4e:deflogger &#34;hoge&#34; &#34;%t [%l] %m&#34; &#34;%H:%M:%S&#34; &#39;((fatal . &#34;fatal&#34;)&#xA;                                                  (error . &#34;error&#34;)&#xA;                                                  (warn  . &#34;warn&#34;)&#xA;                                                  (info  . &#34;info&#34;)&#xA;                                                  (debug . &#34;debug&#34;)&#xA;                                                  (trace . &#34;trace&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;log4e:deflogger&lt;/code&gt; receives the following arguments.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The elisp prefix.&lt;/li&gt; &#xA; &lt;li&gt;Format of log. The following words has a special meaning in it. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;%t … Replaced with the 3rd argument.&lt;/li&gt; &#xA;   &lt;li&gt;%l … Replaced with LogLevel.&lt;/li&gt; &#xA;   &lt;li&gt;%m … Replaced with given message by the logging function. About them, see Coding section below.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Format of time. This value is passed to `format-time-string` and replaced with its returend.&lt;/li&gt; &#xA; &lt;li&gt;Alist of the logging function name. This is optional. If nil, This value is `log4e-default-logging-function-name-alist`.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Coding&lt;/h3&gt; &#xA;&lt;p&gt;Develop the elisp with logging.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun hoge-do-hoge (hoge)&#xA;  (if (not (stringp hoge))&#xA;      (progn (hoge--fatal &#34;failed do hoge : hoge is &#39;%s&#39;&#34; hoge)&#xA;             (hoge--log-open-log-if-debug))&#xA;    (hoge--debug &#34;start do hoge about &#39;%s&#39;&#34; hoge)&#xA;    (message &#34;hoge!&#34;)&#xA;    (hoge--info &#34;done hoge about &#39;%s&#39;&#34; hoge)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The logging functions are named by the 4th argument of &lt;code&gt;log4e:deflogger&lt;/code&gt;.&lt;br&gt; The arguments of them are passed to &lt;code&gt;format&lt;/code&gt; and its returned is used for the message part of log.&lt;br&gt; The returned of them is always nil.&lt;/p&gt; &#xA;&lt;h3&gt;Enable/Disable logging&lt;/h3&gt; &#xA;&lt;p&gt;By default, logging is disabled.&lt;br&gt; For doing logging, use &lt;code&gt;hoge--log-enable-logging&lt;/code&gt;.&lt;br&gt; If you want to do logging anytime, write &lt;code&gt;hoge--log-enable-logging&lt;/code&gt; in the elisp.&lt;br&gt; For stopping logging, use &lt;code&gt;hoge--log-disable-logging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Set range of logging level&lt;/h3&gt; &#xA;&lt;p&gt;By default, The logging range is from &#39;info&#39; to &#39;fatal&#39;.&lt;br&gt; So, eval the following …&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge-do-hoge &#34;HOGEGE&#34;)&#xA;(hoge--log-open-log)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the buffer is displayed that named &#39; \*log4e-hoge\*&#39;. And the string is like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;12:34:56 [INFO ] done hoge about &#39;HOGEGE&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you change the logging range, eval the following sexp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge--log-set-level &#39;debug &#39;fatal)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, eval the following …&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge-do-hoge &#34;FUGAGA&#34;)&#xA;(hoge--log-open-log)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the buffer is displayed that named &#39; \*log4e-hoge\*&#39;. And the string is like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;12:34:56 [INFO ] done hoge about &#39;HOGEGE&#39;&#xA;12:35:43 [DEBUG] start do hoge about &#39;FUGAGA&#39;&#xA;12:35:43 [INFO ] done hoge about &#39;FUGAGA&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you change the logging range anytime, write &lt;code&gt;hoge--log-set-level&lt;/code&gt; in the elisp.&lt;br&gt; &lt;code&gt;hoge--log-set-level&lt;/code&gt; receive the following arguments.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The lowest level for doing logging. Its list is &#39;trace&#39;, &#39;debug&#39;, &#39;info&#39;, &#39;warn&#39;, &#39;error&#39; and &#39;fatal&#39;.&lt;/li&gt; &#xA; &lt;li&gt;The highest level for doing logging. This is optional. If nil, This value is &#39;fatal&#39;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;For debug&lt;/h3&gt; &#xA;&lt;p&gt;When you debug the elisp, eval the following …&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge--log-enable-debugging)&#xA;(hoge-do-hoge &#39;hogege)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the buffer is displayed that named &#39; \*log4e-hoge\*&#39;. And the string is like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;12:34:56 [INFO ] done hoge about &#39;HOGEGE&#39;&#xA;12:35:43 [DEBUG] start do hoge about &#39;FUGAGA&#39;&#xA;12:35:43 [INFO ] done hoge about &#39;FUGAGA&#39;&#xA;12:54:32 [FATAL] failed do hoge : hoge is &#39;hogege&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to stop debugging, use &lt;code&gt;hoge--log-disable-debugging&lt;/code&gt;.&lt;br&gt; If you want to verify activity of debugging in the elisp, use &lt;code&gt;hoge--log-debugging-p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By using &lt;code&gt;hoge--log-enable-debugging&lt;/code&gt;, logging is enabled too.&lt;/p&gt; &#xA;&lt;h3&gt;Dump log into other buffer&lt;/h3&gt; &#xA;&lt;p&gt;You are able to dump the same log into other area with logging to standard log buffer by &lt;code&gt;hoge--log-enable-messaging&lt;/code&gt;.&lt;br&gt; The command receives an argument as a buffer. In default, it&#39;s echo area.&lt;br&gt; For stopping to dump, use &lt;code&gt;hoge--log-disable-messaging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Inhibit logging statement evaluation&lt;/h3&gt; &#xA;&lt;p&gt;Arguments of logging function are evaluated even if the logging level is not a logging range or logging is disabled like the following code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge--log-set-level &#39;info &#39;fatal)&#xA;(hoge--log-disable-logging)&#xA;(hoge--debug &#34;%s&#34; (very-big-cost-function)) ; &amp;lt;= This is done in any situation&#xA;(some-action)                               ; &amp;lt;= This will be not started until very-big-cost-function is finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the case, you are able to inhibit the evaluation using a macro version of the logging function like the following code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge--log-set-level &#39;info &#39;fatal)&#xA;(hoge--log-disable-logging)&#xA;(hoge--debug* &#34;%s&#34; (very-big-cost-function)) ; &amp;lt;= This is done only if this should be logged&#xA;(some-action)                                ; &amp;lt;= This will be started soon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But, if the macro version is used frequently, the compiled file size might come big.&lt;/p&gt; &#xA;&lt;h3&gt;Free log level function&lt;/h3&gt; &#xA;&lt;p&gt;If you want to do logging with changing log level by some condition locally, use &lt;code&gt;hoge--log&lt;/code&gt;.&lt;br&gt; &lt;code&gt;hoge--log&lt;/code&gt; is base of the logging function. About them, see Coding section above.&lt;br&gt; It receive a log level as 1st argument.&lt;/p&gt; &#xA;&lt;h3&gt;Insert logging statement quickly&lt;/h3&gt; &#xA;&lt;p&gt;You are able to insert logging statement quickly using &lt;code&gt;log4e:insert-start-log-quickly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aki2o/log4e/master/image/insert1.png&#34; alt=&#34;insert1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aki2o/log4e/master/image/insert2.png&#34; alt=&#34;insert2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to bind some key to the command, write like the following in your .emacs or site-start.el file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-key emacs-lisp-mode-map (kbd &#34;C-\\&#34;) &#39;log4e:insert-start-log-quickly)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clean log buffer&lt;/h3&gt; &#xA;&lt;p&gt;If you want to clear the log buffer named &#39; \*log4e-hoge\*&#39;, use &lt;code&gt;hoge--log-clear-log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tested On&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs … GNU Emacs 23.3.1 (i386-mingw-nt5.1.2600) of 2011-08-15 on GNUPACK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enjoy!!!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-circe/circe</title>
    <updated>2023-02-19T01:34:12Z</updated>
    <id>tag:github.com,2023-02-19:/emacs-circe/circe</id>
    <link href="https://github.com/emacs-circe/circe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Circe, a Client for IRC in Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Circe, a Client for IRC in Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-circe/circe/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-circe/circe/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/circe&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/circe-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-circe/circe/master/images/circe.jpg&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Circe is a Client for IRC in Emacs. It tries to have sane defaults, and integrates well with the rest of the editor, using standard Emacs key bindings and indicating activity in channels in the status bar so it stays out of your way unless you want to use it.&lt;/p&gt; &#xA;&lt;p&gt;Complexity-wise, it is somewhere between rcirc (very minimal) and ERC (very complex).&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-circe/circe/master/images/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;In order to securely connect to an IRC server using TLS, Circe requires an Emacs linked against the &lt;a href=&#34;https://www.gnutls.org/&#34;&gt;GnuTLS&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;For displaying images, Circe requires &lt;a href=&#34;https://www.imagemagick.org/script/index.php&#34;&gt;ImageMagick&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have MELPA Stable added to your package sources. To your .emacs, add this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives&#xA;             &#39;(&#34;melpa-stable&#34; . &#34;http://stable.melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, use &lt;code&gt;package-install&lt;/code&gt; to install Circe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET circe RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this, &lt;code&gt;M-x circe&lt;/code&gt; should work.&lt;/p&gt; &#xA;&lt;h3&gt;Development Version&lt;/h3&gt; &#xA;&lt;p&gt;In a shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;mkdir -d ~/.emacs.d/lisp/&#xA;cd ~/.emacs.d/lisp&#xA;git clone git://github.com/emacs-circe/circe.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the following to your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lisp&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/lisp/circe&#34;)&#xA;(require &#39;circe)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next time you start your Emacs, you should be able to use &lt;code&gt;M-x circe&lt;/code&gt; to connect to IRC.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting to IRC&lt;/h2&gt; &#xA;&lt;p&gt;To connect to IRC, simply use &lt;code&gt;M-x circe RET Libera Chat RET RET&lt;/code&gt;. This will connect you to Libera. You can join us on &lt;code&gt;#emacs-circe&lt;/code&gt; by using &lt;code&gt;/join #emacs-circe&lt;/code&gt; in the server buffer.&lt;/p&gt; &#xA;&lt;p&gt;A more elaborate setup would require you to edit your init file and add something like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lisp&#34;&gt;(setq circe-network-options&#xA;      &#39;((&#34;Libera Chat&#34;&#xA;         :tls t&#xA;         :nick &#34;my-nick&#34;&#xA;         :sasl-username &#34;my-nick&#34;&#xA;         :sasl-password &#34;my-password&#34;&#xA;         :channels (&#34;#emacs-circe&#34;)&#xA;         )))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this in your configuration, you can use &lt;code&gt;M-x circe RET Libera Chat RET&lt;/code&gt; to connect to Libera using these settings.&lt;/p&gt; &#xA;&lt;p&gt;If the network you are connecting to supports client certificate authentication and you have setup your certificate, you can tell circe to use it when login to the network. You can enable SASL external authentication also if the network supports it. An example to connect into Libera using a client certificate could be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lisp&#34;&gt;(setq circe-network-options&#xA;      &#39;((&#34;Libera Chat&#34;&#xA;         :tls t&#xA;         :tls-keylist ((&#34;/full/path/key.pem&#34;&#xA;                        &#34;/full/path/cert.pem&#34;))&#xA;         :sasl-external t&#xA;         :nick &#34;my-nick&#34;&#xA;         :channels (&#34;#emacs-circe&#34;)&#xA;         )))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;sasl-external&lt;/code&gt; is not required in order to be able to authenticate using client certificates and not all the networks support it.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sensible defaults&lt;/li&gt; &#xA; &lt;li&gt;Tab completion&lt;/li&gt; &#xA; &lt;li&gt;Nick highlighting&lt;/li&gt; &#xA; &lt;li&gt;Automatically displaying images in channel&lt;/li&gt; &#xA; &lt;li&gt;Logging&lt;/li&gt; &#xA; &lt;li&gt;Spell checker&lt;/li&gt; &#xA; &lt;li&gt;Ignore feature that also hides users who talk to users on your ignore list&lt;/li&gt; &#xA; &lt;li&gt;Ignored messages can be toggled so they show up and then hidden again&lt;/li&gt; &#xA; &lt;li&gt;TLS/SSL support&lt;/li&gt; &#xA; &lt;li&gt;SASL authentication support (PLAIN and EXTERNAL methods)&lt;/li&gt; &#xA; &lt;li&gt;Client certificate authentication&lt;/li&gt; &#xA; &lt;li&gt;Nickserv authentication, automatic ghosting, and nick re-gain&lt;/li&gt; &#xA; &lt;li&gt;Auto-join&lt;/li&gt; &#xA; &lt;li&gt;Ability to reduce join/part/quit spam from lurkers&lt;/li&gt; &#xA; &lt;li&gt;Automatic splitting of long lines at word boundaries&lt;/li&gt; &#xA; &lt;li&gt;Netsplit handling&lt;/li&gt; &#xA; &lt;li&gt;Activity tracking in the mode line&lt;/li&gt; &#xA; &lt;li&gt;Fully customizeable message display&lt;/li&gt; &#xA; &lt;li&gt;Topic changes can be shown as a diff&lt;/li&gt; &#xA; &lt;li&gt;Automatic linking of Emacs Lisp symbols, RFCs, PEPs, SRFIs, Github issues, etc.&lt;/li&gt; &#xA; &lt;li&gt;Automatic splitting of outgoing messages at word boundaries to adhere to IRC protocol limitations&lt;/li&gt; &#xA; &lt;li&gt;Flood protection&lt;/li&gt; &#xA; &lt;li&gt;Nickname coloring (via the &lt;code&gt;circe-color-nicks&lt;/code&gt; module)&lt;/li&gt; &#xA; &lt;li&gt;Lag monitoring (via the &lt;code&gt;circe-lagmon&lt;/code&gt; module)&lt;/li&gt; &#xA; &lt;li&gt;Automatic pasting to a paste site for long messages (via the &lt;code&gt;lui-autopaste&lt;/code&gt; module)&lt;/li&gt; &#xA; &lt;li&gt;Bar marking the last read position (via the &lt;code&gt;lui-track-bar&lt;/code&gt; module)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see the Wiki for further information:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-circe/circe/wiki&#34;&gt;https://github.com/emacs-circe/circe/wiki&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tekai/gntp.el</title>
    <updated>2023-02-19T01:34:12Z</updated>
    <id>tag:github.com,2023-02-19:/tekai/gntp.el</id>
    <link href="https://github.com/tekai/gntp.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GNTP implementation for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gntp.el&lt;/h1&gt; &#xA;&lt;p&gt;GNTP implementation for Emacs. It&#39;s very incomplete, no encryption, no real error handling etc. but has just what I need. Feel free to improve it.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;This is the setup I use for rcirc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; Growl notifications for IRC&#xA;(setq gntp-icon-path &#34;C:/home/site-lisp/todochiku-icons/&#34;)&#xA;(setq gntp-application-icon (concat gntp-icon-path &#34;emacs_32.png&#34;))&#xA;(setq gntp-server &#34;localhost&#34;)&#xA;&#xA;;; register notifications, only needs to be done once per server&#xA;&#xA;(let ((notifications&#xA;       `((irc-mention&#xA;            :display &#34;IRC Mention&#34;&#xA;            :enabled t&#xA;            :icon ,(concat gntp-icon-path &#34;groupevent.png&#34;))&#xA;           (irc-convo&#xA;            :display &#34;IRC Convo&#34;&#xA;            :enabled t&#xA;            :icon ,(concat gntp-icon-path &#34;chat.png&#34;)))))&#xA;  (gntp-register notifications gntp-server))&#xA;&#xA;(defun gntp-convo-rcirc-print-hook (process sender response target text)&#xA;  (when (and (string= sender target)&#xA;             (not (string= (rcirc-nick process) sender))&#xA;             (not (string= (rcirc-server-name process) sender))&#xA;             (not (memq (rcirc-get-buffer process target t)&#xA;                        (rcirc-visible-buffers))))&#xA;    (gntp-notify &#39;irc-convo &#34;IRC convo&#34;&#xA;                 (format &#34;&amp;lt;%s&amp;gt; %s&#34; sender text) gntp-server)))&#xA;(add-hook &#39;rcirc-print-functions &#39;gntp-convo-rcirc-print-hook)&#xA;&#xA;(defun gntp-rcirc-print-hook (process sender response target text)&#xA;  (when (and (rcirc-channel-p target)&#xA;             (string-match (rcirc-nick process) text)&#xA;             (not (string= (rcirc-nick process) sender))&#xA;             (not (string= (rcirc-server-name process) sender)))&#xA;    (gntp-notify &#39;irc-mention (format &#34;IRC mention&#34; target)&#xA;                 (format &#34;%s &amp;lt;%s&amp;gt; %s&#34; target sender text)&#xA;                 gntp-server)))&#xA;(add-hook &#39;rcirc-print-functions &#39;gntp-rcirc-print-hook)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Authors &amp;amp; Contributors&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tekai&#34;&gt;Engelke Eschner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/myuhe&#34;&gt;Yuhei Maeda&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>