<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-08T01:36:04Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ahyatt/ekg</title>
    <updated>2022-12-08T01:36:04Z</updated>
    <id>tag:github.com,2022-12-08:/ahyatt/ekg</id>
    <link href="https://github.com/ahyatt/ekg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The emacs knowledge graph, app for notes and structured data.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: ekg&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Design of ekg The =ekg= module is a simple but opinionated note taking application. It is a substitute for such other emacs applications such as =org-roam= or =denote=. ekg stands for /emacs knowledge graph/.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a few core ideas driving the design of ekg. The first is that a title and a tag are the same thing. This isn&#39;t unique to ekg, other tools such as Logseq also consider tags to be equivalent to pages of the same name, although this functionality is limited since tags can only be just one word. In org-roam, a tag is just a tag, so you can have a note called &#34;emacs&#34; and a tag called &#34;emacs&#34;, but these are not related. ekg takes the idea a step further: there are no titles, only tags. So, instead of writing text in a note called &#34;emacs&#34;, just write a note and tag it with &#34;emacs&#34;. There is no &#34;title&#34;, only tags. If you write another note about emacs, also tag it &#34;emacs&#34;, and maybe something else too. Or tag it something more involved, like an idea: &#34;emacs&#39;s power derives from putting all data in buffers, and making all commands deal with buffers.&#34; That&#39;s a perfectly fine tag, and if you notice a connecting idea, you can tag it with this as well.&lt;/p&gt; &#xA;&lt;p&gt;The advantage of this method is that it solves something that has bothered me for a while about the recent suite of tools like org-roam: backlinks are non-symmetrical. If you enter a note in your org-roam daily about emacs, and link it to the emacs note, then when you go to the emacs note, you have to explicitly enable the backlinks buffer to see the daily entry where you first entered it. Systems such as Logseq and the original Roam have backlinks alongside normal content, but this doesn&#39;t seem possible in emacs, where buffer in a file is expected show the file, and tricks with overlays can&#39;t solve the issue. Even if it could, I want a system in which it doesn&#39;t matter where you enter the data, it shows up in the original place the same as everywhere else it is linked to, not as a backlink, but just as part of the content. Having notes with no title, only tags, makes this possible, because there is no longer a difference between linking and writing in the context in, both are denoted by tags.&lt;/p&gt; &#xA;&lt;p&gt;As a consequence of this design, notes can be small, because to add another note to a subject, you don&#39;t need to append to an existing note, you can create another note.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, ekg has another key difference: it uses =sqlite= instead of the filesystem. When notes are small and do not have titles, files don&#39;t make a lot of sense anymore. Additionally, the filesystem is limited. Even in org-roam, which uses it, it needs to be augmented with sqlite anyway to enable fast querying of tags and other operations. The sqlite-only approach also means it is much easier to make certain kinds of changes, since they only involve changing the database and not the text as well. In general, text and data are separated as much as possible here, so there&#39;s no need or desire for the text to have to store data as well, we leave that completely to the database.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Warning ekg is a brand new package, and as such, there may be significant bugs. It has not yet had an initial release, but I hope to release something soon. The initial release will be accompanied by putting this package on a site such as MELPA or GNU ELPA.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installation Currently ekg is not part of any package archive. It requires the [[https://github.com/ahyatt/triples][triples]] package, which is a way to express a graph in sqlite in emacs, alongside basic querying functionality.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=triples= is on GNU ELPA, so can be installed via the package manager or =use-package=. There are also dependencies on the [[https://github.com/magnars/s.el][s]] and [[[[https://github.com/magnars/s.el][s]] and ][kv]] packages. An example installation using =use-package= and =straight= is below: #+begin_src emacs-lisp (use-package kv) (use-package s) (use-package triples) (use-package ekg :straight &#39;(ekg :type git :host github :repo &#34;ahyatt/ekg&#34;) :bind (([f11] . ekg-capture))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** TODO Add ekg to a package archive&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup ekg allows flexibility in the note&#39;s major mode, which can be anything, in theory. In reality, many modes are not suitable for notes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The variable =ekg-capture-default-mode= will control what mode is on for new notes. =ekg-capture-acceptable-modes= will control what modes can be set if you want to change the mode. By default, it is set to =org-mode=, =markdown-mode=, and =fundamental-mode=. The major mode is stored, alongside the note, and subsequent edits of the note will be in the major mode of the note.&lt;/p&gt; &#xA;&lt;p&gt;Because everything is tag based, deleting is done by just prepending &#34;trash/&#34; to all tags. This enables the note to be recovered by going to the trash-prepending tags (which are not part of auto-complete, but are there).&lt;/p&gt; &#xA;&lt;p&gt;The database used by ekg is defined in =ekg-db-file=, which defaults to =~/.emacs.d/ekg.db=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage To create a note, run =ekg-capture= to capture a text note, or =ekg-capture-url= to capture a website. The note will, by default, be tagged with the current date. This can be changed by changing the variable =ekg-capture-auto-tag-funcs=, which is a series of functions that are called and can add tags.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At the top of the note is a special section, which will be unfamiliar. This is the metadata section, where it stores and displays editable metadata, notably tags, but possibly other data such as URLs. If you want to change tags, just edit them in the metadata section. Tags should autocomplete based on the tags available to use.&lt;/p&gt; &#xA;&lt;p&gt;The basic read operation in =ekg= is to show a list of notes with the same tag, =ekg-show-tag=. This shows all notes tagged with the current tag. =ekg-show-tag-any= is similar, but allows showing notes that match any of a series of tags.&lt;/p&gt; &#xA;&lt;p&gt;To show a tag that is tagged as the current day, you can use =ekg-show-today=.&lt;/p&gt; &#xA;&lt;p&gt;In a tag buffer, you can use the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=n=, =p= to navigate up and down the notes.&lt;/li&gt; &#xA; &lt;li&gt;=c= to create a note with the current tag.&lt;/li&gt; &#xA; &lt;li&gt;=d= to delete the note, which will prompt to make sure you mean it.&lt;/li&gt; &#xA; &lt;li&gt;=g= to refresh the buffer, which shouldn&#39;t be necessary in most cases.&lt;/li&gt; &#xA; &lt;li&gt;=o= to open the current note.&lt;/li&gt; &#xA; &lt;li&gt;=r= to remove the current tag(s) from the note.&lt;/li&gt; &#xA; &lt;li&gt;=a= to show a new buffer with any of the tags from any of the notes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This last command, =a=, for =ekg-notes-any-tags=, is notable; it allows the user to expand the tags viewed to encompass all of the tag space in the current view. For example, if there are three notes in an &#34;emacs&#34; tag buffer, one tagged &#34;emacs&#34; and &#34;2022-10-02&#34;, one tagged &#34;emacs&#34; and &#34;vi&#34;, and one tagged &#34;emacs&#34;, &#34;buffer&#34;, and &#34;imenu&#34;, it would open a buffer as if the user had run =ekg-show-tags-any= with the arguments as if it was invoked like: #+begin_src emacs-lisp ekg-show-tag-any(&#39;(&#34;emacs&#34;, &#34;2022-10-02&#34;, &#34;vi&#34;, &#34;buffer&#34;, &#34;imenu&#34;)) #+end_src The subsequent buffer can again be expanded. Each expansion brings more of the surrounding contextual note-space to view.&lt;/p&gt; &#xA;&lt;p&gt;There is another command =ekg-show-tags-all= which will show notes who have all the tags specified (basically an =AND= of the tags). However, the resulting buffer can also be expanded with =ekg-notes-any-tags=, which then switches to showing notes with any of the tags on the screen (an =OR= of the tags).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Importing from org-roam You can import your notes from org-roam. This will turn all titles into tags, and all links will become tags as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Titles and tags will have any commas removed, since commas are commonly used in multiple completion as a separator, so anything with commas would otherwise cause problems when selected.&lt;/p&gt; &#xA;&lt;p&gt;To import from org-roam, in a =&lt;em&gt;scratch&lt;/em&gt;= buffer or any your favorite elisp execution method, run the following:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;ekg-org-roam-import) (ekg-org-roam-import) #+end_src&lt;/p&gt;</summary>
  </entry>
</feed>