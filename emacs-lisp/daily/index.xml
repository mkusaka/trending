<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-24T01:34:06Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jordeam/sel0456</title>
    <updated>2022-09-24T01:34:06Z</updated>
    <id>tag:github.com,2022-09-24:/jordeam/sel0456</id>
    <link href="https://github.com/jordeam/sel0456" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arquivos da Disciplina SEL0456&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SEL0456&lt;/h1&gt; &#xA;&lt;p&gt;Assuntos tratados na disciplina:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ferramentas &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;git, github, gitlab&lt;/li&gt; &#xA;   &lt;li&gt;cmake&lt;/li&gt; &#xA;   &lt;li&gt;IDE - Emacs (spacemacs), VS Code, PyCharm, Spyder, Jupyter, etc.&lt;/li&gt; &#xA;   &lt;li&gt;GDB&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linguagens abordadas: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;C&lt;/li&gt; &#xA;   &lt;li&gt;Python&lt;/li&gt; &#xA;   &lt;li&gt;Emacs Lisp&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Conceitos: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Programação Orientada a Objetos&lt;/li&gt; &#xA;   &lt;li&gt;Programação Funcional&lt;/li&gt; &#xA;   &lt;li&gt;Programação Imperativa&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Construção de Aplicativos com Interface Gráfica utilizando GTK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Aula 01&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Licenças de &lt;em&gt;Software&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Opensource&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Software&lt;/em&gt; livre (FOSS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Shareware&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Freeware&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Software&lt;/em&gt; proprietário&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sistema Operacional, Kernel, Libc, Shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Aula 02&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instalação de Sistema Operacional Baseado em Linux: &lt;strong&gt;Debian GNU/Linux 11 Codename bullseye&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jordeam/sel0456/main/aula-02/README.md&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Partições de HD&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Aula 03&lt;/h2&gt; &#xA;&lt;p&gt;Conceitos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;código de retorno de processo (&lt;code&gt;return&lt;/code&gt; ou &lt;code&gt;exit&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;variáveis locais, criadas na pilha, e variáveis globais&lt;/li&gt; &#xA; &lt;li&gt;Formato ELF, seções: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.data&lt;/li&gt; &#xA;   &lt;li&gt;.text&lt;/li&gt; &#xA;   &lt;li&gt;.bss&lt;/li&gt; &#xA;   &lt;li&gt;HEAP&lt;/li&gt; &#xA;   &lt;li&gt;Stack&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GDB&lt;/li&gt; &#xA; &lt;li&gt;Estrutura de programas em C &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arquivos de código fonte (.c)&lt;/li&gt; &#xA;   &lt;li&gt;Arquivos objeto (.o)&lt;/li&gt; &#xA;   &lt;li&gt;Arquivos de cabeçalho (.h)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compilador GCC e suas flags&lt;/li&gt; &#xA; &lt;li&gt;Makefile: Para criação e utilização do makefile no VS Code é necessário instalar uma extensão chamada Makefile Tools. Para instalar abra o Quick Open (Ctrl + P) e cole o seguinte comando: &lt;code&gt;ext install ms-vscode.makefile-tools&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>joewreschnig/auto-minor-mode</title>
    <updated>2022-09-24T01:34:06Z</updated>
    <id>tag:github.com,2022-09-24:/joewreschnig/auto-minor-mode</id>
    <link href="https://github.com/joewreschnig/auto-minor-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enable Emacs minor modes by buffer name and contents&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;auto-minor-mode&lt;/h1&gt; &#xA;&lt;p&gt;This package lets you enable minor modes based on file name and contents. To find the right modes, it checks filenames against patterns in &lt;code&gt;auto-minor-mode-alist&lt;/code&gt; and file contents against &lt;code&gt;auto-minor-mode-magic-alist&lt;/code&gt;. These work like the built-in Emacs variables &lt;code&gt;auto-mode-alist&lt;/code&gt; and &lt;code&gt;magic-mode-alist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike major modes, all matching minor modes are enabled, not only the first match.&lt;/p&gt; &#xA;&lt;p&gt;A reason you might want to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;auto-minor-mode-alist &#39;(&#34;-theme\\.el\\&#39;&#34; . rainbow-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s intentionally no equivalent of &lt;code&gt;interpreter-mode-alist&lt;/code&gt;. Interpreters should determine the major mode. Relevant minor modes can then be enabled by major mode hooks.&lt;/p&gt; &#xA;&lt;p&gt;Minor modes are set whenever &lt;code&gt;set-auto-mode&lt;/code&gt;, the built-in function responsible for handling automatic major modes, is called.&lt;/p&gt; &#xA;&lt;h2&gt;use-package Integration&lt;/h2&gt; &#xA;&lt;p&gt;If you also use &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;, two new keywords are added, &lt;code&gt;:minor&lt;/code&gt; and &lt;code&gt;:magic-minor&lt;/code&gt;, which register entries in these alists. You must load (and not defer) &lt;code&gt;auto-minor-mode&lt;/code&gt; before using these keywords.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xiongtx/eros</title>
    <updated>2022-09-24T01:34:06Z</updated>
    <id>tag:github.com,2022-09-24:/xiongtx/eros</id>
    <link href="https://github.com/xiongtx/eros" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Evaluation Result OverlayS for Emacs Lisp.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/eros&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/eros-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Eros&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;E&lt;/strong&gt;valuation &lt;strong&gt;R&lt;/strong&gt;esult &lt;strong&gt;O&lt;/strong&gt;verlay&lt;strong&gt;S&lt;/strong&gt; for Emacs Lisp.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiongtx/eros/master/doc/overlay.png&#34; alt=&#34;Overlay&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via &lt;a href=&#34;https://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For general information on installing Emacs packages, see the &lt;a href=&#34;https://www.emacswiki.org/emacs/InstallingPackages&#34;&gt;Emacs Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;In your init file, add the following to activate &lt;code&gt;eros-mode&lt;/code&gt; and see Emacs Lisp evaluation results as inline overlays.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(eros-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;M-x eros-mode&lt;/code&gt; to turn the minor mode off, or call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(eros-mode -1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The code is mostly taken from &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt;, and the idea came from &lt;a href=&#34;http://endlessparentheses.com/eval-result-overlays-in-emacs-lisp.html&#34;&gt;Artur Malabarba&#39;s blog&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>