<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-10T01:36:00Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>practicalli/spacemacs-config</title>
    <updated>2023-03-10T01:36:00Z</updated>
    <id>tag:github.com,2023-03-10:/practicalli/spacemacs-config</id>
    <link href="https://github.com/practicalli/spacemacs-config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;rich Clojure &amp; LSP config for Spacemacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Practicalli Spacemacs configuration&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;██████╗ ██████╗  █████╗  ██████╗████████╗██╗ ██████╗ █████╗ ██╗     ██╗     ██╗&#xA;██╔══██╗██╔══██╗██╔══██╗██╔════╝╚══██╔══╝██║██╔════╝██╔══██╗██║     ██║     ██║&#xA;██████╔╝██████╔╝███████║██║        ██║   ██║██║     ███████║██║     ██║     ██║&#xA;██╔═══╝ ██╔══██╗██╔══██║██║        ██║   ██║██║     ██╔══██║██║     ██║     ██║&#xA;██║     ██║  ██║██║  ██║╚██████╗   ██║   ██║╚██████╗██║  ██║███████╗███████╗██║&#xA;╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;User configuration to support the &lt;a href=&#34;https://practical.li/spacemacs&#34;&gt;Practicalli Spacemacs book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;recommended layers for use for enhanced Clojure development experience&lt;/li&gt; &#xA; &lt;li&gt;numerous tweaks for general &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/&#34;&gt;Spacemacs&lt;/a&gt; usage&lt;/li&gt; &#xA; &lt;li&gt;snippets (code and configuration templates) for clojure and markdown languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://practical.li/spacemacs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/practicalli/graphic-design/live/book-covers/practicalli-spacemacs-book-banner.png&#34; alt=&#34;Spacemacs Practicalli - Interactive Clojure development with Emacs and CIDER&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://practical.li/spacemacs/install-spacemacs/&#34;&gt;Practicalli Spacemacs - install spacemacs&lt;/a&gt; details installation and pre-install requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback &amp;amp; Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://practical.li/spacemacs/introduction/contributing/&#34;&gt;contributing guide for all Practicalli books and configurations&lt;/a&gt;. Thank you.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Design&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;dotspacemacs/user-config&lt;/code&gt; section includes additional configuration and is defined across several files to make it easier to manage updates to the configuration over time and avoid merging changes with your own customisation.&lt;/p&gt; &#xA;&lt;p&gt;Loaded configuration files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clojure-config.el&lt;/code&gt; - clojure-mode options, evil-cleverparents enable, portal tap&amp;gt; on nrepl &amp;amp; keybindings, custom elisp functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;theme-config.el&lt;/code&gt; - theme and mode-line configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org-config.el&lt;/code&gt; - notes and task faces and workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version-control-config.el&lt;/code&gt; - git, Magit and Forge configuration (predominantly forge config)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;user-config.el&lt;/code&gt; - general config tweaks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;eshell-config.el&lt;/code&gt; defines a custom prompt for eshell, although this configuration file is not loaded. Practicalli now uses vterm to use the operating system shell in a terminal popup window.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;load-file&lt;/code&gt; function includes the code from each file during startup. Comment the &lt;code&gt;load-file&lt;/code&gt; expression if that configuration is not required, or add your own configuration files to easily extend the Practicalli configuration without having to merge changes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.spacemacs.d/init.el&lt;/code&gt; is main Spacemacs configuration file (although a $HOME/.spacemacs) file will supersede this configuration and should therefore be removed.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;Discuss this guide &lt;a href=&#34;https://clojurians.slack.com/messages/practicalli&#34;&gt;on #practicalli channel of the Clojurians Slack community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://practical.li/blog/posts/cloure-community-getting-help/&#34;&gt;Clojurians community - Getting Help&lt;/a&gt; shows other ways to get help with Clojure.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor Practicalli&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/practicalli-john/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/practicalli/graphic-design/live/buttons/practicalli-github-sponsors-button.png&#34; alt=&#34;Sponsor practicalli-john&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The majority of my work is focused on the &lt;a href=&#34;https://practical.li/&#34;&gt;Practicalli series of books and videos&lt;/a&gt; and an advisory role with several communities&lt;/p&gt; &#xA;&lt;p&gt;Thank you to &lt;a href=&#34;https://www.cognitect.com/&#34;&gt;Cognitect&lt;/a&gt;, &lt;a href=&#34;https://nubank.com.br/&#34;&gt;Nubank&lt;/a&gt; and a wide range of other &lt;a href=&#34;https://github.com/sponsors/practicalli-john#sponsors&#34;&gt;sponsors&lt;/a&gt; for your continued support&lt;/p&gt; &#xA;&lt;p&gt;Thank you&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://practical.li/&#34;&gt;practical.li&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rksm/org-ai</title>
    <updated>2023-03-10T01:36:00Z</updated>
    <id>tag:github.com,2023-03-10:/rksm/org-ai</id>
    <link href="https://github.com/rksm/org-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT and DALL-E in org-mode using the OpenAI APIs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;org-ai&lt;/h1&gt; &#xA;&lt;p&gt;Minor mode for Emacs org-mode that provides access to OpenAI API&#39;s. Inside an org-mode buffer you can&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use ChatGPT to generate text&lt;/li&gt; &#xA; &lt;li&gt;generate images with a text prompt using DALL-E&lt;/li&gt; &#xA; &lt;li&gt;generate image variations of an input image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Implemented in pure Emacs Lisp, no external dependencies required (except currently for image variations[^1]).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: In order to use this you&#39;ll need an &lt;a href=&#34;https://platform.openai.com/&#34;&gt;OpenAI account&lt;/a&gt; and you need to get an API token. As far as I can tell, the current usage limits for the free tier get you pretty far.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;h3&gt;ChatGPT in org-mode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+begin_ai&#xA;Is Emacs the greatest editor?&#xA;#+end_ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/doc/org-ai-demo-1.gif&#34; alt=&#34;chat-gpt in org-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can continue to type and press &lt;code&gt;C-c C-c&lt;/code&gt; to create a conversation. &lt;code&gt;C-g&lt;/code&gt; will interrupt a running request.&lt;/p&gt; &#xA;&lt;h3&gt;DALL-E in org-mode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+begin_ai :image :size 256x256&#xA;Hyper realistic sci-fi rendering of super complicated technical machine.&#xA;#+end_ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/doc/org-ai-demo-2.gif&#34; alt=&#34;dall-e in org-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Image variations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/doc/org-ai-demo-3.gif&#34; alt=&#34;dall-e image generation in org-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#demos&#34;&gt;Demos&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#chatgpt-in-org-mode&#34;&gt;ChatGPT in org-mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#dall-e-in-org-mode&#34;&gt;DALL-E in org-mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#image-variations&#34;&gt;Image variations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#melpa&#34;&gt;Melpa&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#straightel&#34;&gt;Straight.el&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;#+begin_ai...#+end_ai&lt;/code&gt; special blocks&lt;/h3&gt; &#xA;&lt;p&gt;Similar to org-babel, these blocks demarcates input (and for ChatGPT also output) for the AI model. You can use it for AI chat, text completion and text -&amp;gt; image generation. See &lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#options&#34;&gt;options&lt;/a&gt; below for more information.&lt;/p&gt; &#xA;&lt;p&gt;Create a block like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+begin_ai&#xA;Is Emacs the greatest editor?&#xA;#+end_ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and press &lt;code&gt;C-c C-c&lt;/code&gt;. The Chat input will appear inline and once the response is complete, you can enter your reply and so on. See &lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#chatgpt-in-org-mode&#34;&gt;the demo&lt;/a&gt; below. You can press &lt;code&gt;C-g&lt;/code&gt; while the ai request is running to cancel it.&lt;/p&gt; &#xA;&lt;p&gt;Images will appear underneath the ai block inline. Images will be stored (together with their prompt) inside &lt;code&gt;org-ai-image-directory&lt;/code&gt; which defaults to &lt;code&gt;~/org/org-ai-images/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image variation&lt;/h3&gt; &#xA;&lt;p&gt;You can also use an existing image as input to generate more similar looking images. The &lt;code&gt;org-ai-image-variation&lt;/code&gt; command will prompt for a file path to an image, a size and a count and will then generate as many images and insert links to them inside the current &lt;code&gt;org-mode&lt;/code&gt; buffer. Images will be stored inside &lt;code&gt;org-ai-image-directory&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/rksm/org-ai/master/#image-variations&#34;&gt;demo&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/images/variations&#34;&gt;For more information see the OpenAI documentation&lt;/a&gt;. The input image needs to be square and its size needs to be less than 4MB. And you currently need curl available as a command line tool[^1].&lt;/p&gt; &#xA;&lt;p&gt;[^1]: &lt;strong&gt;Note:&lt;/strong&gt; Currenly the image variation implementation requires a command line curl to be installed. Reason for that is that the OpenAI API expects multipart/form-data requests and the emacs built-in &lt;code&gt;url-retrieve&lt;/code&gt; does not support that (At least I haven&#39;t figured out how). Switching to &lt;code&gt;request.el&lt;/code&gt; might be a better alternative. If you&#39;re interested in contributing, PRs are very welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;#+begin_ai...#+end_ai&lt;/code&gt; block can take the following options.&lt;/p&gt; &#xA;&lt;h3&gt;For ChatGPT&lt;/h3&gt; &#xA;&lt;p&gt;By default, the content of ai blocks are interpreted as messages for ChatGPT. Text following &lt;code&gt;[ME]:&lt;/code&gt; is associated with the user, text following &lt;code&gt;[AI]:&lt;/code&gt; is associated as the model&#39;s response. Optionally you can start the block with a &lt;code&gt;[SYS]: &amp;lt;behahvior&amp;gt;&lt;/code&gt; input to prime the model (see &lt;code&gt;org-ai-default-chat-system-prompt&lt;/code&gt; below).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:max-tokens number&lt;/code&gt; - number of maximum tokens to generate (default: 120)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:temperature number&lt;/code&gt; - temperature of the model (default: 1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:top-p number&lt;/code&gt; - top_p of the model (default: 1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:frequency-penalty number&lt;/code&gt; - frequency penalty of the model (default: 0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:presence-penalty&lt;/code&gt; - presence penalty of the model (default: 0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:sys-everywhere&lt;/code&gt; - repeat the system prompt for every user message (default: nil)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following custom variables can be used to configure the chat:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org-ai-default-chat-model&lt;/code&gt; (default: &lt;code&gt;&#34;gpt-3.5-turbo&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org-ai-default-max-tokens&lt;/code&gt; How long the response should be. Currently cannot exceed 4096. If this value is too small an answer might be cut off (default: 120)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org-ai-default-chat-system-prompt&lt;/code&gt; How to &#34;prime&#34; the model. This is a prompt that is injected before the user&#39;s input. (default: &lt;code&gt;&#34;You are a helpful assistant inside Emacs.&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org-ai-default-inject-sys-prompt-for-all-messages&lt;/code&gt; Wether to repeat the system prompt for every user message. Sometimes the model &#34;forgets&#34; how it was primed. This can help remind it. (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For DALL-E&lt;/h3&gt; &#xA;&lt;p&gt;When you add an &lt;code&gt;:image&lt;/code&gt; option to the ai block, the prompt will be used for image generation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:image&lt;/code&gt; - generate an image instead of text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:size&lt;/code&gt; - size of the image to generate (default: 256x256, can be 512x512 or 1024x1024)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:n&lt;/code&gt; - the number of images to generate (default: 1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following custom variables can be used to configure the image generation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org-ai-image-directory&lt;/code&gt; - where to store the generated images (default: &lt;code&gt;~/org/org-ai-images/&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other text models&lt;/h3&gt; &#xA;&lt;p&gt;The older completion models can also be prompted by adding the &lt;code&gt;:completion&lt;/code&gt; option to the ai block.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:completion&lt;/code&gt; - instead of using the chatgpt model, use the completion model&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:model&lt;/code&gt; - which model to use, see &lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;https://platform.openai.com/docs/models&lt;/a&gt; for a list of models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the detailed meaning of those parameters see the &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat&#34;&gt;OpenAI API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following custom variables can be used to configure the text generation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org-ai-default-completion-model&lt;/code&gt; (default: &lt;code&gt;&#34;text-davinci-003&#34;&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Melpa&lt;/h3&gt; &#xA;&lt;p&gt;The PR for &lt;a href=&#34;https://github.com/melpa/melpa/pull/8429&#34;&gt;melpa is currently pending&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Straight.el&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(straight-use-package&#xA; &#39;(org-ai :type git :host github :repo &#34;rksm/org-ai&#34;&#xA;          :local-repo &#34;org-ai&#34;&#xA;          :files (&#34;*.el&#34; &#34;README.md&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Checkout this repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone&#xA;https://github.com/rksm/org-ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, if you use &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package org-ai&#xA;  :load-path (lambda () &#34;path/to/org-ai&#34;)&#xA;  :commands (org-ai-mode)&#xA;  :custom&#xA;  (org-ai-openai-api-token &#34;&amp;lt;ENTER YOUR API TOKEN HERE&amp;gt;&#34;)&#xA;  :init&#xA;  (add-hook &#39;org-mode-hook #&#39;org-ai-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or just with &lt;code&gt;require&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;path/to/org-ai&#34;)&#xA;(require &#39;org)&#xA;(require &#39;org-ai)&#xA;(add-hook &#39;org-mode-hook #&#39;org-ai-mode)&#xA;(setq org-ai-openai-api-token &#34;&amp;lt;ENTER YOUR API TOKEN HERE&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Is this OpenAI specfic?&lt;/h3&gt; &#xA;&lt;p&gt;Currently yes but once there are more high-quality APIs available I&#39;m planning on supporting those as well.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Animeshz/hop.el</title>
    <updated>2023-03-10T01:36:00Z</updated>
    <id>tag:github.com,2023-03-10:/Animeshz/hop.el</id>
    <link href="https://github.com/Animeshz/hop.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easymotion-like plugin highly inspired from hop.nvim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hop.el&lt;/h1&gt; &#xA;&lt;p&gt;An easymotion-like plugin highly inspired from &lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;hop.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Emacs Motion on Speed!&#xA;Move anywhere in your buffer with 1 or 2 keypress.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Animeshz/hop.el/main/ss.jpg&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;While there has been past options for jumping over the buffers like &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;avy&lt;/a&gt; and &lt;a href=&#34;https://github.com/winterTTr/ace-jump-mode&#34;&gt;ace-jump-mode&lt;/a&gt;, they both didn&#39;t fit me due to various reasons &amp;amp; limitations.&lt;/p&gt; &#xA;&lt;p&gt;Hence, this package evolves.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Single-Keypress Jumps for Targets Closer to the Cursor&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Convenient:&lt;/strong&gt; Using single-keypress hop/jump as much as possible by generating hop sequence at runtime with &lt;a href=&#34;https://phaazon.net/blog/hop-trie-backtrack-filling&#34;&gt;TrieBackfilling Algorithm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible:&lt;/strong&gt; Customizable alphabet splitting and jump location (start/middle/end of match).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clear Distinction of Jumps&lt;/strong&gt; based on required keypress (faces) and that can also be customized.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy Modification&lt;/strong&gt; of Regex with &lt;strong&gt;Full PCRE Support&lt;/strong&gt; for hop selection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Default Exclusion of Subword Matches&lt;/strong&gt; for simpler jump targets (matching words after hyphen is usually a distraction by having too many jump targets).&lt;/li&gt; &#xA; &lt;li&gt;Last but not least, works across window splits.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I wouldn&#39;t say this is a feature, but in avy if you try to jump to &lt;code&gt;p&lt;/code&gt; in &lt;code&gt;abc p&lt;/code&gt;, then you&#39;ll only see 1 char due to buffer overflow, once you press that you&#39;ll see futher part of sequence, but this implementation automatically addresses that using 0 length overlay with &#39;before-string as necessary (as we reach &lt;code&gt;\n&lt;/code&gt; or &lt;code&gt;EOF&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It requires &lt;a href=&#34;https://github.com/syohex/emacs-pcre&#34;&gt;syohex/emacs-pcre&lt;/a&gt;, and pcre(-dev) package installed on your system at build time.&lt;/p&gt; &#xA;&lt;h3&gt;Install pcre(-dev) package based on your system&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo xbps-install -y pcre-devel&#xA;sudo pacman --no-confirm pcre&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install the emacs package&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using elpaca/straight as package manager, write the following package declaration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(use-package pcre&#xA;  ;; :straight if you use stright.el&#xA;  :elpaca (pcre :host github :repo &#34;syohex/emacs-pcre&#34;&#xA;                  :pre-build (&#34;make&#34; &#34;all&#34;)&#xA;                  :files (:default &#34;pcre.el&#34; &#34;pcre-core.so&#34;)))&#xA;(use-package hop&#xA;  :elpaca (hop :host github :repo &#34;Animeshz/hop.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The library exposes &lt;strong&gt;5 interactive functions&lt;/strong&gt; that can be accessed via M-x:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hop-word&lt;/li&gt; &#xA; &lt;li&gt;hop-char&lt;/li&gt; &#xA; &lt;li&gt;hop-line&lt;/li&gt; &#xA; &lt;li&gt;hop-line-skip-whitespace&lt;/li&gt; &#xA; &lt;li&gt;hop-regex-pattern&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of the function matches &amp;amp; create hops/jumps for their respective targets in the viewable buffer.&lt;/p&gt; &#xA;&lt;p&gt;Package also exposes a few &lt;strong&gt;user-customizable variables&lt;/strong&gt;, see the top of &lt;a href=&#34;https://raw.githubusercontent.com/Animeshz/hop.el/main/hop.el&#34;&gt;hop.el&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>