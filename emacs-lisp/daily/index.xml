<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-16T01:33:24Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>meain/scopeline.el</title>
    <updated>2023-03-16T01:33:24Z</updated>
    <id>tag:github.com,2023-03-16:/meain/scopeline.el</id>
    <link href="https://github.com/meain/scopeline.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Show info about the block at the end of the block&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scopeline.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14259816/208631769-052ac0ab-44df-4949-8f2f-3ef43e249f65.png&#34; alt=&#34;Screenshot of Emacs frame with scopeline.el enabled&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package lets you show the scope info of blocks like function definitions, loops, conditions etc. It does this by adding the first line of these blocks at the end of the last char of that block. In the screenshot you can see the light grey things after the closing brackets &lt;code&gt;}&lt;/code&gt;. It makes use of &lt;code&gt;tree-sitter&lt;/code&gt; to figure out block start and end of items. It has support for &lt;code&gt;elisp-tree-sitter&lt;/code&gt; as well as builtin &lt;code&gt;treesit&lt;/code&gt; package. As long as you have one or the other, it should work.&lt;/p&gt; &#xA;&lt;p&gt;The package exposes a single minor mode &lt;code&gt;scopeline-mode&lt;/code&gt; which you can use to enable or disable the functionality.&lt;/p&gt; &#xA;&lt;p&gt;To enable scopeline, you just have to call &lt;code&gt;scopeline-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample &lt;code&gt;use-package&lt;/code&gt; configuration to use it with &lt;code&gt;elisp-tree-sitter&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package scopeline&#xA;  :after tree-sitter&#xA;  :config (add-hook &#39;tree-sitter-mode-hook #&#39;scopeline-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using with &lt;code&gt;treesit&lt;/code&gt;, you can hook onto language specific modes.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scopeline-overlay-prefix&lt;/code&gt;: Change this to another string to change the prefix. Defaults to &lt;code&gt;&amp;nbsp;&amp;nbsp;Â¤&amp;nbsp;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scopeline-face&lt;/code&gt;: This is the face applied for the scopeline overlay, change this to change how it appears. Defaults to whatever comments are highlighted with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scopeline-targets&lt;/code&gt;: Update this alist which maps &lt;code&gt;major-mode&lt;/code&gt; to list of tree-sitter entries to control what all blocks get scopeline overlays&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scopeline-min-lines&lt;/code&gt;: Minimum number of lines before we start showing scopeline information. Default is set to 5. Set it to 0 to always show.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&#34;https://github.com/haringsrob/nvim_context_vt&#34;&gt;haringsrob/nvim_context_vt&lt;/a&gt; for the idea.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>