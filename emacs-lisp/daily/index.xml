<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-02T01:34:18Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antonhibl/gptai</title>
    <updated>2023-03-02T01:34:18Z</updated>
    <id>tag:github.com,2023-03-02:/antonhibl/gptai</id>
    <link href="https://github.com/antonhibl/gptai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI API toolings for emacs. Allows interacting with various GPT-3 Language Models directly in emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: GPTAI.el #+AUTHOR: Anton Hibl&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GPTAI :: an OpenAI API for Emacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This allows for easy communication between emacs and the openAI API platform; allows using all of the available models and integrates cleanly with emacs toolings. Here is the basic things you will need for set-up:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the package from MELPA using:&lt;/p&gt; &lt;p&gt;#+begin_src emacs-lisp (package-install &#39;gptai) #+end_src&lt;/p&gt; &lt;p&gt;then put this in your init.el:&lt;/p&gt; &lt;p&gt;#+begin_src emacs-lisp (require &#39;gptai) ;; set configurations (setq gptai-model &#34;&#xA;   &lt;model-here&gt;&#xA;    &#34;) (setq gptai-username &#34;&#xA;    &lt;username-here&gt;&#xA;     &#34;) (setq gptai-api-key &#34;&#xA;     &lt;api-key-here&gt;&#xA;      &#34;) ;; set keybindings optionally (global-set-key (kbd &#34;C-c o&#34;) &#39;gptai-send-query) #+end_src&#xA;     &lt;/api-key-here&gt;&#xA;    &lt;/username-here&gt;&#xA;   &lt;/model-here&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To fill out the details of the configuration section&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define the desired model to use; available models can be found by running &lt;del&gt;gptai-list-models&lt;/del&gt; , it will also display this list in the &lt;em&gt;gptai&lt;/em&gt; buffer. Use this to choose a model and set &lt;del&gt;gptai-model&lt;/del&gt; (text-davinci-003 is a good default model).&lt;/li&gt; &#xA; &lt;li&gt;Define your OpenAI username.&lt;/li&gt; &#xA; &lt;li&gt;Define your API key (your own key can be obtained from [[https://platform.openai.com/account/api-keys][OpenAI API Keys]])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After that optionally fill out the init section with some keybindings.&lt;/p&gt; &#xA;&lt;p&gt;** Text Querying&lt;/p&gt; &#xA;&lt;p&gt;You can send textual queries to different models of openAI using the functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-send-query&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Prompts in the minibuffer a query and returns the output at the point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-send-query-from-selection&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Sends the text in the current selection to openAI as the prompt to the openAI API model you specified in your configurations, returns the output in place of the original selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-send-query-from-buffer&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Sends the current buffer as the prompt to the openAI API model you specified in your configurations, returns the output in place of the original buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-spellcheck-text-from-selection&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Sends the selected text for spellchecking to openAI and replaces the selection with the corrected text.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-elaborate-on-text-from-selection&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Sends the selected text for further elaboration by openAI and replaces the original selection with the improved text.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Image Querying&lt;/p&gt; &#xA;&lt;p&gt;You can generate images with the DALL-E engine using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-send-image-query&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Prompts the user in the minibuffer for&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A prompt for the command&lt;/li&gt; &#xA;   &lt;li&gt;How many images you want to generate&lt;/li&gt; &#xA;   &lt;li&gt;What size they should be&lt;/li&gt; &#xA;   &lt;li&gt;Where you want to store them on the disk&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;It will then generate those images at the API endpoint, then use curl to download those images to your specified directory path. Once it is done, if one image was downloaded it will open it in a new buffer for viewing, otherwise if more were downloaded it will simply display success when done.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Code Querying and Generation&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;del&gt;gptai-code-query&lt;/del&gt; and &lt;del&gt;gptai-code-query-from-selection&lt;/del&gt; functions, you are able to generate code from instructive prompts in specified languages, both of these functions by default will prompt the user for a language and return the returned code in-place at your selection or point in the buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-code-query&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Prompts the user for instructions and language to use; then returns the output code that was generated at the point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-code-query-from-selection&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Uses the selection text as the instructions and prompts for a language to use; then returns the code that was generated in place of the original selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-explain-code-from-selection&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Explain the code from the selection, return output above selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-fix-code-from-selection&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Fix and debug the code from the selection, return the output in place of the original selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-document-code-from-selection&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Document and describe the code from the selection, return output above selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-optimize-code-from-selection&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Optimizes and refactors code from selection, returns output in place of the original selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gptai-improve-code-from-selection&lt;/del&gt;&lt;/p&gt; &lt;p&gt;Improves and extends on code from selection, returns output in place of original selection.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributing&lt;/p&gt; &#xA;&lt;p&gt;Feel free to make a PR with improvements, all PRs should include your changes as well as a addition to the CHANGELOG.md file noting any important changes for users to be aware of.&lt;/p&gt;</summary>
  </entry>
</feed>