<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-03T01:33:58Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacsmirror/git-timemachine</title>
    <updated>2022-11-03T01:33:58Z</updated>
    <id>tag:github.com,2022-11-03:/emacsmirror/git-timemachine</id>
    <link href="https://github.com/emacsmirror/git-timemachine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Walk through git revisions of a file&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Git time machine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsmirror/git-timemachine/master/timemachine.gif&#34; alt=&#34;Timemachine&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/git-timemachine&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/git-timemachine-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Installation alternatives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download git-timemachine.el and drop it somewhere in your &lt;code&gt;load-path&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you use &lt;code&gt;el-get&lt;/code&gt;, simply add &lt;code&gt;git-timemachine&lt;/code&gt; to your packages list.&lt;/li&gt; &#xA; &lt;li&gt;If you have melpa configured it&#39;s available through &lt;code&gt;package-install&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Visit a git-controlled file and issue &lt;code&gt;M-x git-timemachine&lt;/code&gt; (or bind it to a keybinding of your choice). If you just need to toggle the time machine you can use &lt;code&gt;M-x git-timemachine-toggle&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the following keys to navigate historic version of the file&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;p&lt;/code&gt; Visit previous historic version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;n&lt;/code&gt; Visit next historic version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;w&lt;/code&gt; Copy the abbreviated hash of the current historic version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;W&lt;/code&gt; Copy the full hash of the current historic version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;g&lt;/code&gt; Goto nth revision&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t&lt;/code&gt; Goto revision by selected commit message&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;q&lt;/code&gt; Exit the time machine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;b&lt;/code&gt; Run &lt;code&gt;magit-blame&lt;/code&gt; on the currently visited revision (if magit available).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c&lt;/code&gt; Show current commit using magit (if magit available).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;p&gt;Set &lt;code&gt;git-timemachine-abbreviation-length&lt;/code&gt; (default 12) to your preferred length for abbreviated commit hashes.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;git-timemachine-show-minibuffer-details&lt;/code&gt; (default t) to control whether details of the commit are shown in the minibuffer.&lt;/p&gt; &#xA;&lt;p&gt;Also &lt;code&gt;M-x customize [git-timemachine]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How do I &#34;rollback&#34; to the currently visited revision?&lt;/h3&gt; &#xA;&lt;p&gt;Just use your normal &lt;code&gt;write-file&lt;/code&gt; and supply the file name of your choice. Be aware that you might be throwing away local uncommitted changes to the file in question. If you don&#39;t want to use you muscle memory to write the file you can map &lt;code&gt;write-file&lt;/code&gt; to something short and sweet in &lt;code&gt;git-timemachine-mode-map&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>for-GET/know-your-http-well</title>
    <updated>2022-11-03T01:33:58Z</updated>
    <id>tag:github.com,2022-11-03:/for-GET/know-your-http-well</id>
    <link href="https://github.com/for-GET/know-your-http-well" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP headers, media-types, methods, relations and status codes, all summarized and linking to their specification.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KNOW YOUR HTTP * WELL&lt;/h1&gt; &#xA;&lt;p&gt;HTTP encodings, headers, media types, methods, relations and status codes, all summarized and linking to their specification.&lt;/p&gt; &#xA;&lt;p&gt;This project is used by &lt;a href=&#34;https://github.com/andreineculau/hyperrest-bin&#34;&gt;HyperREST bin&lt;/a&gt; at &lt;a href=&#34;http://bin.hyperrest.com&#34;&gt;bin.hyperrest.com&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/for-GET/know-your-http-well/master/specs.md&#34;&gt;SPECS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/for-GET/know-your-http-well/master/encodings.md&#34;&gt;ENCODINGS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/for-GET/know-your-http-well/master/headers.md&#34;&gt;HEADERS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MEDIA TYPES&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/for-GET/know-your-http-well/master/methods.md&#34;&gt;METHODS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/for-GET/know-your-http-well/master/relations.md&#34;&gt;RELATIONS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/for-GET/know-your-http-well/master/status-codes.md&#34;&gt;STATUS CODES&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to convert to other formats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://johnmacfarlane.net/pandoc/&#34;&gt;pandoc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://markedapp.com/&#34;&gt;Marked&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;h3&gt;Emacs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs&#34;&gt;(require &#39;know-your-http-well)&#xA;;; M-x http-header ;; content-type&#xA;;; M-x http-method ;; post | POST&#xA;;; M-x http-relation ;; describedby&#xA;;; M-x http-status-code ;; 500&#xA;;; M-x http-status-code ;; not_found | NOT_FOUND&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JavaScript&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var httpWell = require(&#39;know-your-http-well&#39;),&#xA;    statusWell = httpWell.statusPhrasesToCodes,&#xA;    phraseWell = httpWell.statusCodesToPhrases;&#xA;&#xA;// on the server side&#xA;res.statusCode = statusWell.NOT_FOUND&#xA;&#xA;// on the client side&#xA;if (res.statusCode !== statusWell.OK) {&#xA;    // Log &#34;Request returned 404 Not Found&#34;&#xA;    log(&#39;Request returned &#39; + res.statusCode + &#39; &#39; + phraseWell[res.statusCode]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON&lt;/h3&gt; &#xA;&lt;p&gt;Just take a look at &lt;a href=&#34;https://raw.githubusercontent.com/for-GET/know-your-http-well/master/json&#34;&gt;./json/*.json&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/for-GET/know-your-http-well/master/LICENSE&#34;&gt;Unlicense&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>