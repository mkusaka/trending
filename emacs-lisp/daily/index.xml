<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-04T01:31:31Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alphapapa/plz.el</title>
    <updated>2023-01-04T01:31:31Z</updated>
    <id>tag:github.com,2023-01-04:/alphapapa/plz.el</id>
    <link href="https://github.com/alphapapa/plz.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An HTTP library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: plz.el&lt;/p&gt; &#xA;&lt;p&gt;#+PROPERTY: LOGGING nil&lt;/p&gt; &#xA;&lt;h1&gt;Note: This readme works with the org-make-toc &lt;a href=&#34;https://github.com/alphapapa/org-make-toc&#34;&gt;https://github.com/alphapapa/org-make-toc&lt;/a&gt; package, which automatically updates the table of contents.&lt;/h1&gt; &#xA;&lt;p&gt;[[http://elpa.gnu.org/packages/plz.html][file:http://elpa.gnu.org/packages/plz.svg]]&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/alphapapa/plz.el/master/images/mascot.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;plz&lt;/del&gt; is an HTTP library for Emacs. It uses &lt;del&gt;curl&lt;/del&gt; as a backend, which avoids some of the issues with using Emacs&#39;s built-in &lt;del&gt;url&lt;/del&gt; library. It supports both synchronous and asynchronous requests. Its API is intended to be simple, natural, and expressive. Its code is intended to be simple and well-organized. Every feature is tested against [[https://httpbin.org/][httpbin]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :noexport: :PROPERTIES: :TOC: :include siblings :END: :CONTENTS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#examples][Examples]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#functions][Functions]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#queueing][Queueing]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#changelog][Changelog]]&lt;/li&gt; &#xA; &lt;li&gt;[[#credits][Credits]]&lt;/li&gt; &#xA; &lt;li&gt;[[#development][Development]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#copyright-assignment][Copyright assignment]] :END:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :TOC: :depth 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** GNU ELPA&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;plz&lt;/del&gt; is available in [[http://elpa.gnu.org/packages/plz.html][GNU ELPA]]. It may be installed in Emacs using the &lt;del&gt;package-install&lt;/del&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;** Manual&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;plz&lt;/del&gt; has no dependencies other than Emacs and &lt;del&gt;curl&lt;/del&gt;. It&#39;s known to work on Emacs 26.3 or later. To install it manually, simply place =plz.el= in your &lt;del&gt;load-path&lt;/del&gt; and &lt;del&gt;(require &#39;plz)&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :TOC: :depth 1 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main public function is &lt;del&gt;plz&lt;/del&gt;, which sends an HTTP request and returns either the result of the specified type (for a synchronous request), or the &lt;del&gt;curl&lt;/del&gt; process object (for asynchronous requests). For asynchronous requests, callback, error-handling, and finalizer functions may be specified, as well as various other options.&lt;/p&gt; &#xA;&lt;p&gt;** Examples&lt;/p&gt; &#xA;&lt;p&gt;Synchronously =GET= a URL and return the response body as a decoded string (here, raw JSON):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp :exports both :results value code :cache yes (plz &#39;get &#34;&lt;a href=&#34;https://httpbin.org/user-agent&#34;&gt;https://httpbin.org/user-agent&lt;/a&gt;&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;#+RESULTS: #+BEGIN_SRC elisp &#34;{\n &#34;user-agent&#34;: &#34;curl/7.35.0&#34;\n}\n&#34; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Synchronously =GET= a URL that returns a JSON object, and parse and return it as an alist:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp :exports both :results value code :cache yes (plz &#39;get &#34;&lt;a href=&#34;https://httpbin.org/get&#34;&gt;https://httpbin.org/get&lt;/a&gt;&#34; :as #&#39;json-read) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;#+RESULTS: #+BEGIN_SRC elisp ((args) (headers (Accept . &#34;&lt;em&gt;/&lt;/em&gt;&#34;) (Accept-Encoding . &#34;deflate, gzip&#34;) (Host . &#34;httpbin.org&#34;) (User-Agent . &#34;curl/7.35.0&#34;)) (url . &#34;&lt;a href=&#34;https://httpbin.org/get&#34;&gt;https://httpbin.org/get&lt;/a&gt;&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Asynchronously =POST= a JSON object in the request body, then parse a JSON object from the response body, and call a function with the result:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp :exports both :cache yes (plz &#39;post &#34;&lt;a href=&#34;https://httpbin.org/post&#34;&gt;https://httpbin.org/post&lt;/a&gt;&#34; :headers &#39;((&#34;Content-Type&#34; . &#34;application/json&#34;)) :body (json-encode &#39;((&#34;key&#34; . &#34;value&#34;))) :as #&#39;json-read :then (lambda (alist) (message &#34;Result: %s&#34; (alist-get &#39;data alist)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;#+RESULTS: : Result: {&#34;key&#34;:&#34;value&#34;}&lt;/p&gt; &#xA;&lt;p&gt;Synchronously download a JPEG file, then create an Emacs image object from the data:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp :exports both :cache yes (let ((jpeg-data (plz &#39;get &#34;&lt;a href=&#34;https://httpbin.org/image/jpeg&#34;&gt;https://httpbin.org/image/jpeg&lt;/a&gt;&#34; :as &#39;binary))) (create-image jpeg-data nil &#39;data)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;#+RESULTS: : (image :type jpeg :data &#34;&#34;ÿØÿà^@^PJFIF...&#34;)&lt;/p&gt; &#xA;&lt;p&gt;** Functions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;plz&lt;/del&gt; :: /(method url &amp;amp;key headers body else finally noquery (as &#39;string) (then &#39;sync) (body-type &#39;text) (decode t decode-s) (connect-timeout plz-connect-timeout) (timeout plz-timeout))/&lt;/p&gt; &lt;p&gt;Request &lt;del&gt;METHOD&lt;/del&gt; from &lt;del&gt;URL&lt;/del&gt; with curl. Return the curl process object or, for a synchronous request, the selected result.&lt;/p&gt; &lt;p&gt;&lt;del&gt;HEADERS&lt;/del&gt; may be an alist of extra headers to send with the request.&lt;/p&gt; &lt;p&gt;&lt;del&gt;BODY-TYPE&lt;/del&gt; may be &lt;del&gt;text&lt;/del&gt; to send &lt;del&gt;BODY&lt;/del&gt; as text, or &lt;del&gt;binary&lt;/del&gt; to send it as binary.&lt;/p&gt; &lt;p&gt;&lt;del&gt;AS&lt;/del&gt; selects the kind of result to pass to the callback function &lt;del&gt;THEN&lt;/del&gt;, or the kind of result to return for synchronous requests. It may be:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;buffer&lt;/del&gt; to pass the response buffer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;binary&lt;/del&gt; to pass the response body as an undecoded string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;string&lt;/del&gt; to pass the response body as a decoded string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;response&lt;/del&gt; to pass a &lt;del&gt;plz-response&lt;/del&gt; struct.&lt;/li&gt; &#xA;   &lt;li&gt;A function, to pass its return value; it is called in the response buffer, which is narrowed to the response body (suitable for, e.g. &lt;del&gt;json-read&lt;/del&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;file&lt;/del&gt; to pass a temporary filename to which the response body has been saved without decoding.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;(file FILENAME)&lt;/del&gt; to pass &lt;del&gt;FILENAME&lt;/del&gt; after having saved the response body to it without decoding. &lt;del&gt;FILENAME&lt;/del&gt; must be a non-existent file; if it exists, it will not be overwritten, and an error will be signaled.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If &lt;del&gt;DECODE&lt;/del&gt; is non-nil, the response body is decoded automatically. For binary content, it should be nil. When &lt;del&gt;AS&lt;/del&gt; is &lt;del&gt;binary&lt;/del&gt;, &lt;del&gt;DECODE&lt;/del&gt; is automatically set to nil.&lt;/p&gt; &lt;p&gt;&lt;del&gt;THEN&lt;/del&gt; is a callback function, whose sole argument is selected above with &lt;del&gt;AS&lt;/del&gt;. Or &lt;del&gt;THEN&lt;/del&gt; may be &lt;del&gt;sync&lt;/del&gt; to make a synchronous request, in which case the result is returned directly.&lt;/p&gt; &lt;p&gt;&lt;del&gt;ELSE&lt;/del&gt; is an optional callback function called when the request fails with one argument, a &lt;del&gt;plz-error&lt;/del&gt; struct. If &lt;del&gt;ELSE&lt;/del&gt; is nil, an error is signaled when the request fails, either &lt;del&gt;plz-curl-error&lt;/del&gt; or &lt;del&gt;plz-http-error&lt;/del&gt; as appropriate, with a &lt;del&gt;plz-error&lt;/del&gt; struct as the error data. For synchronous requests, this argument is ignored.&lt;/p&gt; &lt;p&gt;&lt;del&gt;FINALLY&lt;/del&gt; is an optional function called without argument after &lt;del&gt;THEN&lt;/del&gt; or &lt;del&gt;ELSE&lt;/del&gt;, as appropriate. For synchronous requests, this argument is ignored.&lt;/p&gt; &lt;p&gt;&lt;del&gt;CONNECT-TIMEOUT&lt;/del&gt; and &lt;del&gt;TIMEOUT&lt;/del&gt; are a number of seconds that limit how long it takes to connect to a host and to receive a response from a host, respectively.&lt;/p&gt; &lt;p&gt;&lt;del&gt;NOQUERY&lt;/del&gt; is passed to &lt;del&gt;make-process&lt;/del&gt;, which see.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Queueing&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;plz&lt;/del&gt; provides a simple system for queueing HTTP requests. First, make a &lt;del&gt;plz-queue&lt;/del&gt; struct by calling &lt;del&gt;make-plz-queue&lt;/del&gt;. Then call &lt;del&gt;plz-queue&lt;/del&gt; with the struct as the first argument, and the rest of the arguments being the same as those passed to &lt;del&gt;plz&lt;/del&gt;. Then call &lt;del&gt;plz-run&lt;/del&gt; to run the queued requests.&lt;/p&gt; &#xA;&lt;p&gt;All of the queue-related functions return the queue as their value, making them easy to use. For example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (defvar my-queue (make-plz-queue :limit 2))&lt;/p&gt; &#xA;&lt;p&gt;(plz-run (plz-queue my-queue &#39;get &#34;&lt;a href=&#34;https://httpbin.org/get?foo=0&#34;&gt;https://httpbin.org/get?foo=0&lt;/a&gt;&#34; :then (lambda (body) (message &#34;%s&#34; body)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (let ((queue (make-plz-queue :limit 2)) (urls &#39;(&#34;&lt;a href=&#34;https://httpbin.org/get?foo=0&#34;&gt;https://httpbin.org/get?foo=0&lt;/a&gt;&#34; &#34;&lt;a href=&#34;https://httpbin.org/get?foo=1&#34;&gt;https://httpbin.org/get?foo=1&lt;/a&gt;&#34;))) (plz-run (dolist (url urls queue) (plz-queue queue &#39;get url :then (lambda (body) (message &#34;%s&#34; body)))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You may also clear a queue with &lt;del&gt;plz-clear&lt;/del&gt;, which cancels any active or queued requests and calls their &lt;del&gt;:else&lt;/del&gt; functions. And &lt;del&gt;plz-length&lt;/del&gt; returns the number of a queue&#39;s active and queued requests.&lt;/p&gt; &#xA;&lt;p&gt;** Tips :PROPERTIES: :TOC: :ignore (this) :END:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can customize settings in the =plz= group, but this can only be used to adjust a few defaults. It&#39;s not intended that changing or binding global variables be necessary for normal operation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changelog :PROPERTIES: :TOC: :depth 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4-pre&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test suite explicitly tests with both HTTP/1.1 and HTTP/2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.3&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handle HTTP proxy headers from Curl. ([[https://github.com/alphapapa/plz.el/issues/2][#2]]. Thanks to [[https://github.com/alanthird][Alan Third]] and [[https://github.com/sawyerzheng][Sawyer Zheng]] for reporting.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replaced words not in Ispell&#39;s default dictionaries (so &lt;del&gt;checkdoc&lt;/del&gt; linting succeeds).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.2.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handle when Curl process is interrupted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple request queueing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1&lt;/p&gt; &#xA;&lt;p&gt;Initial release.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Credits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to [[https://github.com/skeeto][Chris Wellons]], author of the [[https://github.com/skeeto/elfeed][Elfeed]] feed reader and the popular blog [[https://nullprogram.com/][null program]], for his invaluable advice, review, and encouragement.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bug reports, feature requests, suggestions — /oh my/!&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;del&gt;plz&lt;/del&gt; is a young library, and its only client so far is [[https://github.com/alphapapa/ement.el][Ement.el]]. There are a variety of HTTP and &lt;del&gt;curl&lt;/del&gt; features it does not yet support, since they have not been needed by the author. Patches are welcome, as long as they include passing tests.&lt;/p&gt; &#xA;&lt;p&gt;** Copyright assignment&lt;/p&gt; &#xA;&lt;p&gt;This package is part of [[https://www.gnu.org/software/emacs/][GNU Emacs]], being distributed in [[https://elpa.gnu.org/][GNU ELPA]]. Contributions to this project must follow GNU guidelines, which means that, as with other parts of Emacs, patches of more than a few lines must be accompanied by having assigned copyright for the contribution to the FSF. Contributors who wish to do so may contact [[mailto:&lt;a href=&#34;mailto:emacs-devel@gnu.org&#34;&gt;emacs-devel@gnu.org&lt;/a&gt;][&lt;a href=&#34;mailto:emacs-devel@gnu.org&#34;&gt;emacs-devel@gnu.org&lt;/a&gt;]] to request the assignment form.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License :PROPERTIES: :TOC: :ignore (this) :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPLv3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COMMENT Export setup :noexport: :PROPERTIES: :TOC: :ignore (this descendants) :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Copied from org-super-agenda&#39;s readme, in which much was borrowed from Org&#39;s =org-manual.org=.&lt;/h1&gt; &#xA;&lt;p&gt;#+OPTIONS: broken-links:t *:t&lt;/p&gt; &#xA;&lt;p&gt;** Info export options&lt;/p&gt; &#xA;&lt;p&gt;#+TEXINFO_DIR_CATEGORY: Emacs #+TEXINFO_DIR_TITLE: Plz: (plz) #+TEXINFO_DIR_DESC: HTTP library using Curl as a backend&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: We could use these, but that causes a pointless error, &#34;org-compile-file: File &#34;..README.info&#34; wasn&#39;t produced...&#34;, so we just rename the files in the after-save-hook instead.&lt;/h1&gt; &#xA;&lt;h1&gt;#+TEXINFO_FILENAME: plz.info&lt;/h1&gt; &#xA;&lt;h1&gt;#+EXPORT_FILE_NAME: plz.texi&lt;/h1&gt; &#xA;&lt;p&gt;** File-local variables&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: Setting org-comment-string buffer-locally is a nasty hack to work around GitHub&#39;s org-ruby&#39;s HTML rendering, which does not respect noexport tags. The only way to hide this tree from its output is to use the COMMENT keyword, but that prevents Org from processing the export options declared in it. So since these file-local variables don&#39;t affect org-ruby, wet set org-comment-string to an unused keyword, which prevents Org from deleting this tree from the export buffer, which allows it to find the export options in it. And since org-export does respect the noexport tag, the tree is excluded from the info page.&lt;/h1&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;eval: (require &#39;org-make-toc)&lt;/h1&gt; &#xA;&lt;h1&gt;after-save-hook: (lambda nil (when (and (require &#39;ox-texinfo nil t) (org-texinfo-export-to-info)) (delete-file &#34;README.texi&#34;) (rename-file &#34;README.info&#34; &#34;plz.info&#34; t)))&lt;/h1&gt; &#xA;&lt;h1&gt;before-save-hook: org-make-toc&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-with-properties: ()&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-with-title: t&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-initial-scope: buffer&lt;/h1&gt; &#xA;&lt;h1&gt;org-comment-string: &#34;NOTCOMMENT&#34;&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>emacs-straight/kind-icon</title>
    <updated>2023-01-04T01:31:31Z</updated>
    <id>tag:github.com,2023-01-04:/emacs-straight/kind-icon</id>
    <link href="https://github.com/emacs-straight/kind-icon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the kind-icon package from GNU ELPA, current as of 2023-01-04&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kind-icon — colorful icons for completion in Emacs&lt;/h1&gt; &#xA;&lt;p&gt;This emacs package adds configurable icon or text-based completion prefixes based on the &lt;code&gt;:company-kind&lt;/code&gt; property that many completion backends (such as lsp-mode and Emacs 28&#39;s elisp-mode) provide.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;A few examples of &lt;code&gt;kind-icon&lt;/code&gt; in action with &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; providing completions:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;With &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt; and &lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;orderless&lt;/a&gt;:&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Using text-based icons:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/93749/141227979-9f22cbb6-8029-42f1-86b4-f4cdd03636b2.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/93749/141225205-9a718be8-f352-451f-892b-aaacae1eeaf6.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Mix of text and icons:&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Blended background color disabled:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/93749/141231327-5b15a92f-87f6-4a52-aff4-d7e9229842a9.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/93749/141227004-e4514961-245c-4aa0-888a-65c0a1b63757.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Get it from ELPA (e.g. &lt;code&gt;M-x package-install RET kind-icon RET&lt;/code&gt;). Note that icon support requires the small library &lt;a href=&#34;https://github.com/rougier/svg-lib&#34;&gt;svg-lib&lt;/a&gt;. At present &lt;code&gt;kind-icon&lt;/code&gt; has been tested extensively with the excellent &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt; in-buffer completion front-end (from the maker of vertico, consult, marginalia, and more).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;kind-icon&lt;/code&gt; works either as a &#34;margin-formatter&#34; (for supporting UI&#39;s such as corfu) or by wrapping the completion function, for other completion UI&#39;s which can handle the Emacs 28+ &lt;a href=&#34;https://git.savannah.gnu.org/cgit/emacs.git/tree/doc/lispref/minibuf.texi?id=d8e037eeaa7eef26349bc0fb3fa00e10a5c4b894#n1819&#34;&gt;&lt;code&gt;affixation-function&lt;/code&gt;&lt;/a&gt; completion property.&lt;/p&gt; &#xA;&lt;h3&gt;Using margin-formatters (preferred):&lt;/h3&gt; &#xA;&lt;p&gt;To enable for completion UI&#39;s with margin-formatters capability such as &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package kind-icon&#xA;  :ensure t&#xA;  :after corfu&#xA;  :custom&#xA;  (kind-icon-default-face &#39;corfu-default) ; to compute blended backgrounds correctly&#xA;  :config&#xA;  (add-to-list &#39;corfu-margin-formatters #&#39;kind-icon-margin-formatter))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wrapping completion-in-region:&lt;/h3&gt; &#xA;&lt;p&gt;The more generic approach of wrapping the &lt;code&gt;completion-in-region-function&lt;/code&gt; would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package kind-icon&#xA;  :ensure t&#xA;  :config&#xA;  (add-hook &#39;my-completion-ui-mode-hook&#xA;   &#x9;    (lambda ()&#xA;   &#x9;      (setq completion-in-region-function&#xA;   &#x9;&#x9;    (kind-icon-enhance-completion&#xA;   &#x9;&#x9;     completion-in-region-function)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for whichever &lt;code&gt;completion-ui&lt;/code&gt; you are using. Note that for this method to work, your completion UI must support the Emacs 28 &lt;code&gt;affixation-function&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration defaults should work fine, but &lt;code&gt;kind-icon&lt;/code&gt; can be customized to change the icons and colors, preference of icons vs. short-text (or mixed) prefixes, and more.&lt;/p&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;kind-icon&lt;/code&gt; has a few customization variables that allow you to configure its appearance. The easiest way to edit them is &lt;code&gt;M-x customize-group kind-icon&lt;/code&gt;, which automatically takes care of cleaning the cache upon changes. If you change them directly from lisp during a session (e.g. with &lt;code&gt;setq&lt;/code&gt;), call &lt;code&gt;M-x kind-icon-reset-cache&lt;/code&gt; to reset the temporary &lt;code&gt;kind-icon&lt;/code&gt; cache, so that the changes will take effect.&lt;/p&gt; &#xA;&lt;h4&gt;Important configuration variables:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;kind-icon-use-icons&lt;/code&gt;: If non-nil (the default), prefer icons for prefix badges. Otherwise, use text labels. Individual kind entries can also have their icons disabled by removing the &lt;code&gt;:icon&lt;/code&gt; property in the mapping (see below). If &lt;code&gt;svg-lib&lt;/code&gt; is unable to download a named icon and it is not cached on disk, text labels for that kind will be used as a fallback.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;kind-icon-mapping&lt;/code&gt;: This is the top level configuration mapping &lt;code&gt;:company-kind&lt;/code&gt; &#34;types&#34; like &lt;code&gt;&#39;variable&lt;/code&gt; and &lt;code&gt;&#39;function&lt;/code&gt;. Each item in this list has the format &lt;code&gt;(sym short-text :keyword value ...)&lt;/code&gt; where &lt;code&gt;sym&lt;/code&gt; is the kind (a symbol), and &lt;code&gt;short-text&lt;/code&gt; is the abbreviated text to display (if icons are not used), both of which must be present. The rest of the list is a property list with optional keys &lt;code&gt;:icon&lt;/code&gt; and &lt;code&gt;:face&lt;/code&gt;. The latter will be used to set the text foreground and (possibly) background colors on the badge. The former specifies an icon to use, and is simply a string name from the free &lt;a href=&#34;https://materialdesignicons.com&#34;&gt;material icon library&lt;/a&gt; used by &lt;a href=&#34;https://github.com/rougier/svg-lib&#34;&gt;svg-lib&lt;/a&gt;. Try &lt;code&gt;M-x customize-variable kind-icon-mapping&lt;/code&gt; for a nice interface including an icon Preview button. Pro-tip: keep your code buffer open with completion popped-up alongside the customization buffer. When you apply changes, they are immediately applied.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;kind-icon-default-face&lt;/code&gt;: A face from which the icon background color will be taken and blended with the &lt;code&gt;:face&lt;/code&gt; foreground color in the mapping table to create a custom background color. If not set, the frame default background color will be used for this purpose. Similarly, the foreground color for this face, if set, will be used if a &lt;code&gt;:face&lt;/code&gt; foreground is missing from the mapping.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;kind-icon-blend-background&lt;/code&gt;: If non-nil, computes a blend between a nominal background color (from either the background property of &lt;code&gt;kind-icon-default-face&lt;/code&gt;, if set, or frame background color) and the foreground :face. If &lt;code&gt;kind-icon-blend-background&lt;/code&gt; is nil, the background is taken from the :face background, &lt;code&gt;kind-icon-default-face&lt;/code&gt;, or frame background-color.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;kind-icon-blend-frac&lt;/code&gt;: The fractional blend between custom badge &lt;code&gt;:face&lt;/code&gt; foreground and background (see above) color to use as a custom background for each badge. A value of 0.0 simply replicates the background color. Values should likely stay below 0.3 or so.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Colors&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t like the default colors of the icons, you can customize the associated face, choose another pre-existing face, or substitute your own face. You can also change how the background color is displayed.&lt;/p&gt; &#xA;&lt;h4&gt;Foreground color&lt;/h4&gt; &#xA;&lt;p&gt;Icon foreground colors are matched in the default mapping to the face colors used by font-lock in programming modes (variables, function names, etc.). This gives consistency with in-buffer highlighting. These colors are taken from the &lt;code&gt;:face&lt;/code&gt; &lt;code&gt;:foreground&lt;/code&gt; color in &lt;code&gt;kind-icon-mapping&lt;/code&gt;. If no &lt;code&gt;:face&lt;/code&gt; is set for some kind, the foreground is taken from &lt;code&gt;kind-icon-default-face&lt;/code&gt; foreground, or, as a backup, the default frame foreground.&lt;/p&gt; &#xA;&lt;h4&gt;Background color&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;kind-icon&lt;/code&gt; creates a &lt;em&gt;blended&lt;/em&gt; background color that is a mix of a bit of the foreground color and the normal completion background (control the mix with &lt;code&gt;kind-icon-blend-frac&lt;/code&gt;). Note that if your completion UI uses a different background color from your normal buffer, you should configure the face it uses in &lt;code&gt;kind-icon-default-face&lt;/code&gt;. If you disable &lt;code&gt;kind-icon-blend-background&lt;/code&gt;, &lt;code&gt;kind-icon&lt;/code&gt; will use both the foreground &lt;em&gt;and&lt;/em&gt; (if set) background from the configured &lt;code&gt;:face&lt;/code&gt; for each kind, allowing you to configure arbitrary colors.&lt;/p&gt; &#xA;&lt;h3&gt;Icons&lt;/h3&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://materialdesignicons.com&#34;&gt;material icon library&lt;/a&gt; for the icons you can use, more than 6,500 of them! All you need to &#34;use&#34; an icon is its name. The easiest approach is to &lt;code&gt;M-x customize-variable kind-icon-mapping&lt;/code&gt;, find the kind you are interested in, and change its icon. Hit the &lt;code&gt;Preview&lt;/code&gt; button and check the message buffer to confirm it&#39;s the icon you were after, and Apply your changes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that &lt;code&gt;svg-lib&lt;/code&gt;, which &lt;code&gt;kind-icon&lt;/code&gt; uses, downloads and caches icons, by default in &lt;code&gt;.emacs.d/.cache/svg-lib/&lt;/code&gt;.&lt;/strong&gt; If no network connection is present, and the icon has not been cached on disk, the short-text is used as a backup for that session.&lt;/p&gt; &#xA;&lt;p&gt;And yes, you can use &lt;strong&gt;any icons&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/93749/141231207-94d14bd8-0e85-4315-aa29-f6200b2729cc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Old School: Text-based Icons&lt;/h3&gt; &#xA;&lt;p&gt;You can also use simple text-based prefixes instead of icons. The icons are quite lightweight so there shouldn&#39;t be much performance difference, but some may prefer a simpler look. A &#34;text&#34; icon is composed of either one or two characters (anything longer will be trimmed). Simply set the &lt;code&gt;kind-icon-use-icons&lt;/code&gt; variable to &lt;code&gt;nil&lt;/code&gt; and (if desired) customize the &#34;Short-Text&#34; in the mapping. Note that if you are not connected to the network, even if you have enabled icons, any icons which are not cached on disk will be replaced by their short text equivalents.&lt;/p&gt; &#xA;&lt;h3&gt;Previewing&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;M-x kind-icon-preview-all&lt;/code&gt; to reset and preview all icons (text and SVG icons both) in a view buffer. This also has the effect of pre-downloading all icons, courtesy svg-lib. Current defaults:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/93749/167690072-d8822ada-62b8-4b38-b8ea-987d83b38951.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Debugging Tips&lt;/h3&gt; &#xA;&lt;p&gt;If you get an error mentioning &lt;code&gt;corfu--post-command&lt;/code&gt;, and notice that you don&#39;t get a backtrace even after invoking &lt;code&gt;toggle-debug-on-error&lt;/code&gt;, this is because backtraces are inhibited during post-command hooks. To re-enable them, evaluate the following (e.g. in your &lt;code&gt;*scratch*&lt;/code&gt; buffer):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(advice-add &#39;corfu--post-command :around&#xA;&#x9;    (lambda (func)&#xA;&#x9;      (condition-case err&#xA;&#x9;&#x9;  (funcall func)&#xA;&#x9;&#x9;((debug error) (signal (car err) (cdr err))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related Packages&lt;/h2&gt; &#xA;&lt;p&gt;A small set of packages related to &lt;code&gt;kind-icon&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt; Is a sleek in-buffer completion frontend which fully supports standard emacs completions providers (aka completion at point functions — CAPFs). It was the original to include margin-formatter support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;company-mode&lt;/a&gt; is the all-inclusive completion system, and includes built-in support for icons based on the Microsoft VSCode set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iyefrat/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt; is font-based icon library which can be used to enrich dired, neotree, the mode line and others with icons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iyefrat/all-the-icons-completion/&#34;&gt;all-the-icons-completion&lt;/a&gt; builds on &lt;code&gt;all-the-icons&lt;/code&gt; to enrich minibuffer-based completion, including support for the excellent &lt;a href=&#34;https://github.com/minad/marginalia&#34;&gt;marginalia&lt;/a&gt; annotator.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;If you are using the emacs-mac fork of emacs on MacOS &amp;gt;=10.13, you should compile with &lt;code&gt;librsvg&lt;/code&gt; support, as the native SVG support using WebKit2 is slow and will impact performance.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to @rougier for the excellent &lt;a href=&#34;https://github.com/rougier/svg-lib&#34;&gt;svg-lib&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;to @minad, who developed &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt; (among many others) and contributed many great ideas to &lt;code&gt;kind-icon&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;to @dgutov, maintainer of &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;company&lt;/a&gt;, from which color-matching to font-lock faces was inspired.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>