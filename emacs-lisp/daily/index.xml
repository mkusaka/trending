<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-14T01:33:27Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mcandre/fuel</title>
    <updated>2024-01-14T01:33:27Z</updated>
    <id>tag:github.com,2024-01-14:/mcandre/fuel</id>
    <link href="https://github.com/mcandre/fuel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Factor&#39;s Ultimate Emacs Library - an emacs major mode for writing Factor code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FUEL, Factor&#39;s Ultimate Emacs Library&lt;/h1&gt; &#xA;&lt;p&gt;FUEL provides a complete environment for your Factor coding pleasure inside Emacs, including source code edition and interaction with a Factor listener instance running within Emacs.&lt;/p&gt; &#xA;&lt;p&gt;FUEL was started by Jose A Ortega as an extension to Eduardo Cavazos&#39; original factor.el code. Eduardo is also responsible of naming the beast.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;FUEL comes bundled with &lt;a href=&#34;http://factorcode.org/&#34;&gt;Factor&lt;/a&gt;, in the folder misc/fuel.&lt;/p&gt; &#xA;&lt;p&gt;To install FUEL, setup &lt;a href=&#34;http://marmalade-repo.org/&#34;&gt;Marmalade&lt;/a&gt; and &lt;code&gt;M-x package-install fuel&lt;/code&gt; and add this line to your Emacs initialisation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;factor-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;h3&gt;Running the listener&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using the default factor binary and images locations inside the Factor&#39;s source tree, that should be enough to start using FUEL.&lt;/p&gt; &#xA;&lt;p&gt;Editing any file with the extension &lt;code&gt;.factor&lt;/code&gt; will put you in factor-mode; try &lt;code&gt;C-hm&lt;/code&gt; for a summary of available commands.&lt;/p&gt; &#xA;&lt;p&gt;To start the listener, try &lt;code&gt;M-x run-factor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, FUEL will try to use the binary and image files in the factor installation directory. You can customize them with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq fuel-listener-factor-binary &amp;lt;full path to factor&amp;gt;)&#xA;(setq fuel-listener-factor-image &amp;lt;full path to factor image&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many aspects of the environment can be customized: &lt;code&gt;M-x customize-group fuel&lt;/code&gt; will show you how many.&lt;/p&gt; &#xA;&lt;h3&gt;Faster listener startup&lt;/h3&gt; &#xA;&lt;p&gt;On startup, run-factor loads the fuel vocabulary, which can take a while. If you want to speedup the load process, type &lt;code&gt;save&lt;/code&gt; in the listener prompt just after invoking run-factor. This will save a factor image (overwriting the current one) with all the needed vocabs.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can add the following line to your &lt;code&gt;.factor-boot-rc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;fuel&#34; require&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will ensure that the image generated while bootstrapping Factor contains fuel and the vocabularies it depends on.&lt;/p&gt; &#xA;&lt;h3&gt;Connecting to a running Factor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;run-factor&lt;/code&gt; starts a new factor listener process managed by Emacs. If you prefer to start Factor externally, you can also connect remotely from Emacs. Here&#39;s how to proceed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the factor listener, run FUEL: &#34;fuel&#34; run. This will start a server listener in port 9000.&lt;/li&gt; &#xA; &lt;li&gt;Switch to Emacs and issue the command &lt;code&gt;M-x connect-to-factor&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s it; you should be up and running. See the help for &lt;code&gt;connect-to-factor&lt;/code&gt; for how to use a different port.&lt;/p&gt; &#xA;&lt;h3&gt;Vocabulary creation&lt;/h3&gt; &#xA;&lt;p&gt;FUEL offers a basic interface to Factor&#39;s scaffolding utilities. To create a new vocabulary directory and associated files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x fuel-scaffold-vocab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and when in a vocab file, to create a docs file with boilerplate for each word:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x fuel-scaffold-help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Quick key reference&lt;/h4&gt; &#xA;&lt;p&gt;Triple chords ending in a single letter &#xA; &lt;x&gt;&#xA;   accept also C-&#xA;  &lt;x&gt;&#xA;    (e.g. C-c C-e C-r is the same as C-c C-e r).&#xA;  &lt;/x&gt;&#xA; &lt;/x&gt;&lt;/p&gt; &#xA;&lt;h3&gt;In factor source files&lt;/h3&gt; &#xA;&lt;p&gt;Commands in parenthesis can be invoked interactively with M-x &lt;command&gt;, not necessarily in a factor buffer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;|--------------------+------------------------------------------------------------|&#xA;| C-c C-z            | switch to listener (run-factor)                            |&#xA;| C-c C-o            | cycle between code, tests and docs files                   |&#xA;| C-c C-t            | run the unit tests for a vocabulary                        |&#xA;| C-c C-r            | switch to listener and refresh all loaded vocabs           |&#xA;| C-c C-s            | switch to other factor buffer (fuel-switch-to-buffer)      |&#xA;| C-x 4 s            | switch to other factor buffer in other window              |&#xA;| C-x 5 s            | switch to other factor buffer in other frame               |&#xA;|--------------------+------------------------------------------------------------|&#xA;| M-.                | edit word at point in Emacs (fuel-edit-word)               |&#xA;| M-,                | go back to where M-. was last invoked                      |&#xA;| M-TAB              | complete word at point                                     |&#xA;| C-c C-e u          | update USING: line (fuel-update-usings)                    |&#xA;| C-c C-e v          | edit vocabulary (fuel-edit-vocabulary)                     |&#xA;| C-c C-e w          | edit word (fuel-edit-word-at-point)                        |&#xA;| C-c C-e d          | edit word&#39;s doc (C-u M-x fuel-edit-word-doc-at-point)      |&#xA;| C-c C-e l          | load vocabs in USING: form                                 |&#xA;|--------------------+------------------------------------------------------------|&#xA;| C-c C-e r          | eval region                                                |&#xA;| C-M-r, C-c C-e e   | eval region, extending it to definition boundaries         |&#xA;| C-M-x, C-c C-e x   | eval definition around point                               |&#xA;| C-c C-k, C-c C-e k | run file (fuel-run-file)                                   |&#xA;|--------------------+------------------------------------------------------------|&#xA;| C-c C-d a          | toggle autodoc mode (fuel-autodoc-mode)                    |&#xA;| C-c C-d d          | help for word at point (fuel-help)                         |&#xA;| C-c C-d s          | short help word at point (fuel-help-short)                 |&#xA;| C-c C-d e          | show stack effect of current sexp (with prefix, region)    |&#xA;| C-c C-d p          | find words containing given substring (fuel-apropos)       |&#xA;| C-c C-d v          | show words in current file (with prefix, ask for vocab)    |&#xA;|--------------------+------------------------------------------------------------|&#xA;| C-c M-&amp;lt;            | show callers of word or vocabulary at point                |&#xA;|                    | (fuel-show-callers, fuel-vocab-usage)                      |&#xA;| C-c M-&amp;gt;            | show callees of word or vocabulary at point                |&#xA;|                    | (fuel-show-callees, fuel-vocab-uses)                       |&#xA;|--------------------+------------------------------------------------------------|&#xA;| C-c C-x s          | extract innermost sexp (up to point) as a separate word    |&#xA;|                    | (fuel-refactor-extract-sexp)                               |&#xA;| C-c C-x r          | extract region as a separate word                          |&#xA;|                    | (fuel-refactor-extract-region)                             |&#xA;| C-c C-x v          | extract region as a separate vocabulary                    |&#xA;|                    | (fuel-refactor-extract-vocab)                              |&#xA;| C-c C-x i          | replace word by its definition (fuel-refactor-inline-word) |&#xA;| C-c C-x w          | rename all uses of a word (fuel-refactor-rename-word)      |&#xA;| C-c C-x a          | extract region as a separate ARTICLE: form                 |&#xA;| C-c C-x g          | convert current word definition into GENERIC + method      |&#xA;|                    | (fuel-refactor-make-generic)                               |&#xA;|--------------------+------------------------------------------------------------|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In the listener&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;|---------+----------------------------------------------------------|&#xA;| TAB     | complete word at point                                   |&#xA;| M-.     | edit word at point in Emacs                              |&#xA;| C-c C-r | refresh all loaded vocabs                                |&#xA;| C-c C-a | toggle autodoc mode                                      |&#xA;| C-c C-p | find words containing given substring (M-x fuel-apropos) |&#xA;| C-c C-s | toggle stack mode                                        |&#xA;| C-c C-v | edit vocabulary                                          |&#xA;| C-c C-w | help for word at point                                   |&#xA;| C-c C-k | run file                                                 |&#xA;|---------+----------------------------------------------------------|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In the debugger (it pops up upon eval/compilation errors)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;|---------+-------------------------------------|&#xA;| g       | go to error                         |&#xA;| &amp;lt;digit&amp;gt; | invoke nth restart                  |&#xA;| w/e/l   | invoke :warnings, :errors, :linkage |&#xA;| q       | bury buffer                         |&#xA;|---------+-------------------------------------|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In the help browser&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;|-----------+----------------------------------------------------------|&#xA;| h         | help for word at point                                   |&#xA;| v         | help for a vocabulary                                    |&#xA;| a         | find words containing given substring (M-x fuel-apropos) |&#xA;| e         | edit current article                                     |&#xA;| b a       | bookmark current page                                    |&#xA;| b b       | display bookmarks                                        |&#xA;| b d       | delete bookmark at point                                 |&#xA;| n/p       | next/previous page                                       |&#xA;| l         | previous page                                            |&#xA;| SPC/S-SPC | scroll up/down                                           |&#xA;| TAB/S-TAB | next/previous link                                       |&#xA;| k         | kill current page and go to previous or next             |&#xA;| r         | refresh page                                             |&#xA;| c         | clean browsing history                                   |&#xA;| M-.       | edit word at point in Emacs                              |&#xA;| C-c C-z   | switch to listener                                       |&#xA;| q         | bury buffer                                              |&#xA;|-----------+----------------------------------------------------------|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In crossref buffers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;|-----------------+-----------------------------|&#xA;| TAB/BACKTAB     | navigate links              |&#xA;| RET/mouse click | follow link                 |&#xA;| h               | show help for word at point |&#xA;| q               | bury buffer                 |&#xA;|-----------------+-----------------------------|&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jdtsmith/eglot-booster</title>
    <updated>2024-01-14T01:33:27Z</updated>
    <id>tag:github.com,2024-01-14:/jdtsmith/eglot-booster</id>
    <link href="https://github.com/jdtsmith/eglot-booster" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Boost eglot using lsp-booster&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eglot-booster: Boost eglot using lsp-booster&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/blahgeek/emacs-lsp-booster&#34;&gt;emacs-lsp-booster&lt;/a&gt; project provides a rust-based wrapper program which substantially speeds up emacs&#39; interactions with lsp servers. This small package enables &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; to use it.&lt;/p&gt; &#xA;&lt;h2&gt;Install/Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install directly from this repo via &lt;code&gt;M-x package-vc-install&lt;/code&gt; (pasting in this URL), or using, e.g. &lt;code&gt;straight&lt;/code&gt;. Then, in your init, simply&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package eglot-booster&#xA;&#x9;:after eglot&#xA;&#x9;:config&#x9;(eglot-booster-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just use eglot as normal. You should notice no differences other than speedier performance and less I/O blocking.&lt;/p&gt; &#xA;&lt;p&gt;To verify that the wrapper is functioning, &lt;code&gt;M-x eglot-events-buffer&lt;/code&gt; and look at the beginning for &lt;code&gt;emacs_lsp_booster::app&lt;/code&gt; notices.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] At present only local lsp server programs which communicate by standard input/output can be wrapped, not lsp servers communicating over network ports (local or remote).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Maybe you don&#39;t even need this. You can &lt;code&gt;M-x eglot-booster&lt;/code&gt; to disable the booster at any time. Then &lt;code&gt;M-x eglot-shutdown-all&lt;/code&gt;, restart eglot (&lt;code&gt;M-x eglot&lt;/code&gt; is usually enough) in a large/heavy-weight file, and compare performance before and after.&lt;/p&gt;</summary>
  </entry>
</feed>