<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-12T01:34:59Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mclear-tools/tabspaces</title>
    <updated>2023-02-12T01:34:59Z</updated>
    <id>tag:github.com,2023-02-12:/mclear-tools/tabspaces</id>
    <link href="https://github.com/mclear-tools/tabspaces" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Tabspaces #+author: Colin McLear #+language: en #+export_file_name: tabspaces.texi #+texinfo_dir_category: Emacs #+texinfo_dir_title: Tabspaces: (tabspaces). #+texinfo_dir_desc: Workspaces using tab-bar and project.el&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/tabspaces&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/tabspaces-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tabspaces leverages [[https://github.com/emacs-mirror/emacs/blob/master/lisp/tab-bar.el][tab-bar.el]] and [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/project.el][project.el]] (both built into emacs 27+) to create buffer-isolated workspaces (or &#34;tabspaces&#34;) that also integrate with your version-controlled projects. It should work with emacs 27+. It is tested to work with a single frame workflow, but should work with multiple frames as well.&lt;/p&gt; &#xA;&lt;p&gt;While other great packages exist for managing workspaces, such as [[https://github.com/alphapapa/bufler.el][bufler]], [[https://github.com/nex3/perspective-el][perspective]] and [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]], this package is much less complex, and works entirely based on the built-in (to emacs 27+) tab-bar and project packages. If you like simple, this may be the workspace package for you. That said, bufler, perspective or persp-mode, etc. may better fit your needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: version 1.2 renames several functions and streamlines tab and project creation. Apologies if this breaks your workflow. Please update your configuration accordingly.&lt;/p&gt; &#xA;&lt;p&gt;** Basic Usage&lt;/p&gt; &#xA;&lt;p&gt;Calling the minor-mode =tabspaces-mode= sets up newly created tabs as buffer-isolated workspaces using =tab.el= in the background. Calling =tabspaces-mode= does not itself create a new tabbed workspace.&lt;/p&gt; &#xA;&lt;p&gt;Switch or create workspace via =tabspaces-switch-or-create-workspace=. Close a workspace by invoking =tabspaces-close-workspace=. Note that these two functions are simply wrappers around native =tab-bar= commands. You can close a workspace and /kill/ all buffers associated with it using =tabspaces-kill-buffers-close-workspace=.&lt;/p&gt; &#xA;&lt;p&gt;Open an existing version-controlled project in its own workspace using =tabspaces-open-or-create-project-and-workspace=. If no such project exists it will then create one in its own workspace for you.&lt;/p&gt; &#xA;&lt;p&gt;See workspace buffers using =tabspaces-switch-buffer= (for =consult= integration see below), which will only show buffers in the workspace (but list-buffers, ibuffer, etc. will show all buffers). Setting =tabspaces-use-filtered-buffers-as-default= to =t= remaps =switch-to-buffer= to =tabspaces-switch-to-buffer=.&lt;/p&gt; &#xA;&lt;p&gt;Adding buffers to a workspace is as simple as opening the buffer in the workspace. Delete buffers from a workspace either by killing them or using one of either =tabspaces-remove-selected-buffer= or =tabspaces-remove-current-buffer=. Removed buffers are still available from the default tabspace unless the variable =tabspaces-remove-to-default= is set to =nil=.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt; that other than tabbed buffer isolation for all created window tabs this package does not modify =tab-bar=, =tab-line=, or =project= in any way. It simply adds convenience functions for use with those packages. So it is still up to the user to configure tabs, etc., however they like.&lt;/p&gt; &#xA;&lt;p&gt;Here are some screenshots of tabspaces (with my [[https://github.com/Lambda-Emacs/lambda-themes][lambda-themes]]) and using =consult-buffer= (see below for instructions on that setup). You can see the workspace isolated buffers in each and the tabs at top:&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_HTML: :width 85% [[file:screenshots/tab-notes.png]] #+ATTR_HTML: :width 85% [[file:screenshots/tab-emacsd.png]]&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;You may install this package either from Melpa (=M-x package-install tabspaces RET=) or by cloning this repo and adding it to your load-path.&lt;/p&gt; &#xA;&lt;p&gt;** Setup&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s one possible way of setting up the package using [[https://github.com/jwiegley/use-package][use-package]] (and [[https://github.com/raxod502/straight.el][straight]], if you use that).&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package tabspaces ;; use this next line only if you also use straight, otherwise ignore it. :straight (:type git :host github :repo &#34;mclear-tools/tabspaces&#34;) :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup. :commands (tabspaces-switch-or-create-workspace tabspaces-open-or-create-project-and-workspace) :custom (tabspaces-use-filtered-buffers-as-default t) (tabspaces-default-tab &#34;Default&#34;) (tabspaces-remove-to-default t) (tabspaces-include-buffers &#39;(&#34;&lt;em&gt;scratch&lt;/em&gt;&#34;)) ;; sessions (tabspaces-session t) (tabspaces-session-auto-restore t))&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Keybindings Workspace Keybindings are defined in the following variable:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar tabspaces-command-map (let ((map (make-sparse-keymap))) (define-key map (kbd &#34;C&#34;) &#39;tabspaces-clear-buffers) (define-key map (kbd &#34;b&#34;) &#39;tabspaces-switch-to-buffer) (define-key map (kbd &#34;d&#34;) &#39;tabspaces-close-workspace) (define-key map (kbd &#34;k&#34;) &#39;tabspaces-kill-buffers-close-workspace) (define-key map (kbd &#34;o&#34;) &#39;tabspaces-open-or-create-project-and-workspace) (define-key map (kbd &#34;r&#34;) &#39;tabspaces-remove-current-buffer) (define-key map (kbd &#34;R&#34;) &#39;tabspaces-remove-selected-buffer) (define-key map (kbd &#34;s&#34;) &#39;tabspaces-switch-or-create-workspace) (define-key map (kbd &#34;t&#34;) &#39;tabspaces-switch-buffer-and-tab) map) &#34;Keymap for tabspace/workspace commands after `tabspaces-keymap-prefix&#39;.&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The variable =tabspaces-keymap-prefix= sets a key prefix (default is =C-c TAB=) for the keymap, but this can be changed to anything the user prefers.&lt;/p&gt; &#xA;&lt;p&gt;*** Buffer Filtering&lt;/p&gt; &#xA;&lt;p&gt;When =tabspaces-mode= is enabled use =tabspaces-switch-to-buffer= to choose from a filtered list of only those buffers in the current tab/workspace. Though =nil= by default, when =tabspaces-use-filtered-buffers-as-default= is set to =t= and =tabspaces-mode= is enabled, =switch-to-buffer= is globally remapped to =tabspaces-switch-to-buffer=, and thus only shows those buffers in the current workspace. For use with =consult-buffer=, see below.&lt;/p&gt; &#xA;&lt;p&gt;*** Switch Tabs via Buffer&lt;/p&gt; &#xA;&lt;p&gt;Sometimes the user may wish to switch to some open buffer in a tabspace and switch to that tab as well. Use =(=tabspaces-switch-buffer-and-tab=) to achieve this. If the buffer is open in more than one tabspace the user will be prompted to choose which tab to switch to. If there is no such buffer user will be prompted on whether to create it in a new tabspace or the current one.&lt;/p&gt; &#xA;&lt;p&gt;*** Persistent Tabspaces&lt;/p&gt; &#xA;&lt;p&gt;Rudimentary support for saving tabspaces across sessions has been implemented. Setting =tabspaces-session= to =t= ensures that all tabspaces and file-visiting buffers are saved. These may either be manually restored in the next session via =(=tabspaces-restore-session)= or they can be automatically opened when =(tabspaces-mode)= is activated if =tabspaces-session-auto-restore= is set to =t=.&lt;/p&gt; &#xA;&lt;p&gt;*** Additional Customization&lt;/p&gt; &#xA;&lt;p&gt;**** Consult&lt;/p&gt; &#xA;&lt;p&gt;If you have [[https://github.com/minad/consult][consult]] installed you might want to implement the following in your config to have workspace buffers in =consult-buffer=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Filter Buffers for Consult-Buffer&lt;/p&gt; &#xA;&lt;p&gt;(with-eval-after-load &#39;consult ;; hide full buffer list (still available with &#34;b&#34; prefix) (consult-customize consult--source-buffer :hidden t :default nil) ;; set consult-workspace buffer list (defvar consult--source-workspace (list :name &#34;Workspace Buffers&#34; :narrow ?w :history &#39;buffer-name-history :category &#39;buffer :state #&#39;consult--buffer-state :default t :items (lambda () (consult--buffer-query :predicate #&#39;tabspaces--local-buffer-p :sort &#39;visibility :as #&#39;buffer-name)))&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;Set workspace buffer list for consult-buffer.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(add-to-list &#39;consult-buffer-sources &#39;consult--source-workspace)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This should seamlessly integrate workspace buffers into =consult-buffer=, displaying workspace buffers by default and all buffers when narrowing using &#34;b&#34;. Note that you can also see all project related buffers and files just by narrowing with &#34;p&#34; in [[https://github.com/minad/consult#configuration][a default consult setup]].&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: If you typically toggle between having =tabspaces-mode= active and inactive, you may want to also include a hook function to turn off the =consult--source-workspace= above and modify the visibility of =consult--source-buffer=. You can do that with something like the following:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my--consult-tabspaces () &#34;Deactivate isolated buffers when not using tabspaces.&#34; (require &#39;consult) (cond (tabspaces-mode ;; hide full buffer list (still available with &#34;b&#34;) (consult-customize consult--source-buffer :hidden t :default nil) (add-to-list &#39;consult-buffer-sources &#39;consult--source-workspace)) (t ;; reset consult-buffer to show all buffers (consult-customize consult--source-buffer :hidden nil :default t) (setq consult-buffer-sources (remove #&#39;consult--source-workspace consult-buffer-sources)))))&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;tabspaces-mode-hook #&#39;my--consult-tabspaces)&lt;br&gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** Ivy&lt;/p&gt; &#xA;&lt;p&gt;If you use ivy you can use this function to limit your buffer search to only those in the tabspace.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun tabspaces-ivy-switch-buffer (buffer) &#34;Display the local buffer BUFFER in the selected window. This is the frame/tab-local equivilant to `switch-to-buffer&#39;.&#34; (interactive (list (let ((blst (mapcar #&#39;buffer-name (tabspaces-buffer-list)))) (read-buffer &#34;Switch to local buffer: &#34; blst nil (lambda (b) (member (if (stringp b) b (car b)) blst)))))) (ivy-switch-buffer buffer)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** Included Buffers&lt;/p&gt; &#xA;&lt;p&gt;By default the =&lt;em&gt;scratch&lt;/em&gt;= buffer is included in all workspaces. You can modify which buffers are included by default by changing the value of =tabspaces-include-buffers=.&lt;/p&gt; &#xA;&lt;p&gt;If you want emacs to startup with a set of initial buffers in a workspace (something I find works well) you could do something like the following:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my--tabspace-setup () &#34;Set up tabspace at startup.&#34; ;; Add &lt;em&gt;Messages&lt;/em&gt; and &lt;em&gt;splash&lt;/em&gt; to Tab `Home&#39; (tabspaces-mode 1) (progn (tab-bar-rename-tab &#34;Home&#34;) (when (get-buffer &#34;&lt;em&gt;Messages&lt;/em&gt;&#34;) (set-frame-parameter nil &#39;buffer-list (cons (get-buffer &#34;&lt;em&gt;Messages&lt;/em&gt;&#34;) (frame-parameter nil &#39;buffer-list)))) (when (get-buffer &#34;&lt;em&gt;splash&lt;/em&gt;&#34;) (set-frame-parameter nil &#39;buffer-list (cons (get-buffer &#34;&lt;em&gt;splash&lt;/em&gt;&#34;) (frame-parameter nil &#39;buffer-list))))))&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;after-init-hook #&#39;my--tabspace-setup) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Acknowledgments Code for this package is derived from, or inspired by, a variety of sources. These include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The original buffer filter function &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.rousette.org.uk/archives/using-the-tab-bar-in-emacs/&#34;&gt;https://www.rousette.org.uk/archives/using-the-tab-bar-in-emacs/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wamei/elscreen-separate-buffer-list/issues/8&#34;&gt;https://github.com/wamei/elscreen-separate-buffer-list/issues/8&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kaz-yos/emacs&#34;&gt;https://github.com/kaz-yos/emacs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Buffer filtering and removal &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/florommel/bufferlo&#34;&gt;https://github.com/florommel/bufferlo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Consult integration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/minad/consult#multiple-sources&#34;&gt;https://github.com/minad/consult#multiple-sources&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>