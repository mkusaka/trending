<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-02T01:32:56Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jdtsmith/indent-bars</title>
    <updated>2023-08-02T01:32:56Z</updated>
    <id>tag:github.com,2023-08-02:/jdtsmith/indent-bars</id>
    <link href="https://github.com/jdtsmith/indent-bars" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, configurable indentation guide-bars for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;indent-bars&lt;/h1&gt; &#xA;&lt;p&gt;Fast, configurable indentation guide-bars for Emacs.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;514&#34; alt=&#34;ib_default&#34; src=&#34;https://github.com/jdtsmith/indent-bars/assets/93749/4f652554-bede-4aa6-bdbc-233ec843d782&#34;&gt; &#xA;&lt;p&gt;This package provides vertical indentation &lt;em&gt;guide bars&lt;/em&gt;, with the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses stipple face properties with font-lock for ultra-fast performance (simply: &lt;em&gt;faces on spaces&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Learns your buffer indentation spacing from the mode.&lt;/li&gt; &#xA; &lt;li&gt;Bar colors can be blended with the frame background color, to reduce their intrusiveness.&lt;/li&gt; &#xA; &lt;li&gt;Bar appearance is highly configurable: width, position within the character, vertical fill/blank pattern, even zigzag (see &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/indent-bars/main/examples.md&#34;&gt;examples&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Optional depth-based coloring, with a customizable cyclical palette.&lt;/li&gt; &#xA; &lt;li&gt;Properly handles font size changes.&lt;/li&gt; &#xA; &lt;li&gt;Optional zero-cost current-depth bar highlighting, permitting bar color and/or appearance changes.&lt;/li&gt; &#xA; &lt;li&gt;Optional support for drawing bars on blank lines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Why?&lt;/h1&gt; &#xA;&lt;p&gt;There are (&lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/indent-bars/main/#related-packages&#34;&gt;many&lt;/a&gt;) existing packages that provide indentation highlighting/guides. But none:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;were fast enough with large files (including current depth highlighting)&lt;/li&gt; &#xA; &lt;li&gt;had enough guide appearance configurability&lt;/li&gt; &#xA; &lt;li&gt;were able to support depth-based coloring&lt;/li&gt; &#xA; &lt;li&gt;offered robust support for guides on blank lines&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Install/config&lt;/h1&gt; &#xA;&lt;p&gt;Not yet in a package database; simply clone and point &lt;code&gt;use-package&lt;/code&gt; at the correct path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package indent-bars&#xA;  :load-path &#34;~/code/emacs/indent-bars&#34;&#xA;  :hook ((python-mode yaml-mode) . indent-bars-mode)) ; or whichever modes you prefer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Straight&lt;/h2&gt; &#xA;&lt;p&gt;To clone with &lt;code&gt;use-package&lt;/code&gt; and &lt;code&gt;straight&lt;/code&gt;, add to config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package indent-bars&#xA;  :straight (indent-bars :type git :host github :repo &#34;jdtsmith/indent-bars&#34;)&#xA;  :hook ((python-mode yaml-mode) . indent-bars-mode)) ; or whichever modes you prefer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;For &lt;code&gt;indent-bars&lt;/code&gt; to work, your port and version of emacs must correctly display the &lt;code&gt;:stipple&lt;/code&gt; face attribute. &lt;strong&gt;Most do.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All known UNIX/GNU Linux versions support stipples.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Pure GTK&#34; (&lt;code&gt;--with-pgtk&lt;/code&gt; build flag) versions support stipples, but had a display bug that caused them to appear incorrectly (as &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/issues/3&#34;&gt;reverse video&lt;/a&gt;) and lead to &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/issues/6&#34;&gt;crashes&lt;/a&gt;; this was fixed in Emacs &lt;a href=&#34;https://lists.gnu.org/archive/html/bug-gnu-emacs/2023-07/msg02081.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On Mac, the &lt;a href=&#34;https://bitbucket.org/mituharu/emacs-mac/src/master/&#34;&gt;emacs-mac&lt;/a&gt;[^1] port has stipple support, but others do not.&lt;/li&gt; &#xA; &lt;li&gt;Windows Emacs does not (apparently) support stipples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:stipple&lt;/code&gt; is not supported on terminal emacs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[^1]: Most easily installed &lt;a href=&#34;https://github.com/railwaycat/homebrew-emacsmacport&#34;&gt;with brew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/issues&#34;&gt;open an issue&lt;/a&gt; with any updates/corrections to this list. See also &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/indent-bars/main/#testing-stipples&#34;&gt;Testing Stipples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x customize-group indent-bars&lt;/code&gt; is the easiest way to customize everything about the appearence and function of &lt;code&gt;indent-bars&lt;/code&gt;. Note: when changing any of these variables while &lt;code&gt;indent-bars&lt;/code&gt; is on, you must &lt;code&gt;M-x indent-bars-reset&lt;/code&gt; in the buffers of interest to see the resulting changes. See some &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/indent-bars/main/examples.md&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main customization variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;indent-bars-width-frac&lt;/code&gt;: The fractional width of the bar (0-1, in terms of fraction of a single character&#39;s width).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent-bars-pad-frac&lt;/code&gt;: The fractional padding offset of the bar from the left edge of the character.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent-bars-pattern&lt;/code&gt;: A string specifying the vertical structure of the bar (space=blank, non-space=filled). Scaled to the height of one character.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent-bars-zigzag&lt;/code&gt;: A fractional left-right &lt;em&gt;zigzag&lt;/em&gt; to apply to consecutive groups of identical non-space characters in &lt;code&gt;pattern&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent-bars-color&lt;/code&gt;: The main bar color, either a color name or face, from which foreground or background color will be taken. Also used to set a &lt;code&gt;:blend&lt;/code&gt; factor, to blend colors into the frame&#39;s background color.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent-bars-color-by-depth&lt;/code&gt;: How and whether to alter the color of the indent bars by indentation depth. Defaults to using the foreground of the &lt;code&gt;outline-*&lt;/code&gt; faces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent-bars-highlight-current-depth&lt;/code&gt;: How and whether to highlight the bars at the indentation depth of the current line. The current depth bar can change color (including blending with the pre-existing color), as well as structure (size, pad, pattern, zigzag).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent-bars-spacing-override&lt;/code&gt;: Normally the number of spaces for indentation is automatically discovered from the mode and other variables. If that doesn&#39;t work for any reason, it can be explicitly set using this variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent-bars-display-on-blank-lines&lt;/code&gt;: Whether to display bars on blank lines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the documentation of each variable for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Details and Caveats&lt;/h1&gt; &#xA;&lt;h2&gt;Speed&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;indent-bars&lt;/code&gt; was partially motivated by the inefficiency of older indentation highlight modes, and is designed for speed. It uses stipples (fixed bitmap patterns) and font lock for fast and efficient bar drawing&amp;nbsp;â€” &lt;em&gt;faces on spaces&lt;/em&gt;. Highlighting the current indentation level is essentially free, since it works by &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Remapping.html&#34;&gt;remapping&lt;/a&gt; the relevant face.&lt;/p&gt; &#xA;&lt;p&gt;The heaviest operation (though still fairly efficient) is &lt;strong&gt;blank-line highlighting&lt;/strong&gt;, since the indentation level of blank lines depends on their surrounding context, and strings must be allocated, styled, and used as &lt;code&gt;&#39;display&lt;/code&gt; properties. If you experience any speed issues, this is the first setting to turn off.&lt;/p&gt; &#xA;&lt;h2&gt;Indentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;indent-bars&lt;/code&gt; only works with space-based indentation, i.e. &lt;code&gt;indent-tabs-mode=nil&lt;/code&gt;. Note that many modes enable this by default.&lt;/p&gt; &#xA;&lt;h2&gt;Stipples&lt;/h2&gt; &#xA;&lt;p&gt;The fast &lt;em&gt;stipple&lt;/em&gt; method used for drawing bars enables lots of &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/indent-bars/main/examples.md&#34;&gt;interesting patterns&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Stipples are repeating patterns anchored to the entire emacs frame. &lt;code&gt;indent-bars&lt;/code&gt; basically &#34;opens windows&#34; on this fixed pattern to &#34;reveal&#34; the bars.&lt;/p&gt; &#xA;&lt;h3&gt;Testing Stipples&lt;/h3&gt; &#xA;&lt;p&gt;If you are experiencing issues with vertical bar display (missing, garbled, etc.), and would like to determine if stipples are working correctly in your build of emacs, enter (in the &lt;code&gt;*scratch*&lt;/code&gt; buffer, first &lt;code&gt;M-x font-lock-mode&lt;/code&gt; to disable fontification, then hitting &lt;code&gt;C-x C-e&lt;/code&gt; just after the last &lt;code&gt;)&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(let* ((w (window-font-width))&#xA;       (stipple `(,w 1 ,(apply #&#39;unibyte-string&#xA;&#x9;&#x9;&#x9;       (append (make-list (1- (/ (+ w 7) 8)) ?\0)&#xA;&#x9;&#x9;&#x9;&#x9;       &#39;(1))))))&#xA;  (insert &#34;\n&#34; (propertize (concat  (make-string 15 ?\s)&#xA;&#x9;&#x9;&#x9;&#x9;    &#34;THIS IS A TEST&#34;&#xA;&#x9;&#x9;&#x9;&#x9;    (make-string 15 ?\s))&#xA;                           &#39;face `(:background &#34;red&#34; :foreground &#34;blue&#34; :stipple ,stipple))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which should then look something like:&lt;/p&gt; &#xA;&lt;img width=&#34;668&#34; alt=&#34;image&#34; src=&#34;https://github.com/jdtsmith/indent-bars/assets/93749/dd0f65f5-3cdc-4865-a66d-41365cecadd0&#34;&gt; &#xA;&lt;h3&gt;Per-buffer stipple offsets&lt;/h3&gt; &#xA;&lt;p&gt;To get the bars in the right place, &lt;code&gt;indent-bars&lt;/code&gt; must consider the starting horizontal pixel position of the current window, and adjust the stipple pattern accordingly. It does this automatically, per buffer, so you shouldn&#39;t ever notice problems, even when re-sizing or re-arranging windows, changing font size, etc.&lt;/p&gt; &#xA;&lt;p&gt;There is one rare corner case, however: showing the &lt;em&gt;same buffer&lt;/em&gt; side by side in Emacs versions which support pixel-level window width/offsets (e.g. emacs-mac) can lead to unexpected bar positions in the non-active buffer, since the stipple offset in the remapped face applies &lt;em&gt;per-buffer&lt;/em&gt;, i.e. it can&#39;t be correct for left and right buffers at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Options are living with this, or (for Emacs &amp;gt;=29) instead of visiting the same buffer, cloning an indirect buffer (which has other advantages, like an independent region). Note that Emacs 28 and earlier have a bug which results in cloned buffers sharing the same face remapping list as their parent; this is fixed in Emacs 29.&lt;/p&gt; &#xA;&lt;h1&gt;Related Packages&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zk-phi/indent-guide&#34;&gt;indent-guide&lt;/a&gt;: An older package that uses overlays with &lt;code&gt;|&lt;/code&gt; characters. Some reports of performance concerns. Incompatible with company and other related in-buffer modes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antonj/Highlight-Indentation-for-Emacs&#34;&gt;highlight-indentation-mode&lt;/a&gt;: Uses overlays to draw indentation guides, and includes a current indentation mode. Partial support for blank line guides. &lt;code&gt;indent-bars&lt;/code&gt; adapts the indentation guessing function from this mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DarthFennec/highlight-indent-guides&#34;&gt;highlight-indent-guides&lt;/a&gt;: a highly configurable mode for indentation highlight, with color and style options, as well as current depth highlighting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/ideasman42/emacs-hl-indent-scope&#34;&gt;hl-indent-scope&lt;/a&gt;: Highlights indentation based on language scope - requiring support for each language, uses overlays to draw indentation guides.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skeeto/visual-indentation-mode&#34;&gt;visual-indentation-mode&lt;/a&gt;: Full character-based alternating color indentation guides. Package is now archived.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ichernyshovvv/org-timeblock</title>
    <updated>2023-08-02T01:32:56Z</updated>
    <id>tag:github.com,2023-08-02:/ichernyshovvv/org-timeblock</id>
    <link href="https://github.com/ichernyshovvv/org-timeblock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Schedule your day visually, using timeblocking technique inside Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: org-timeblock&lt;/p&gt; &#xA;&lt;p&gt;Schedule your day visually, using [[https://en.wikipedia.org/wiki/Timeblocking][timeblocking technique]] inside Emacs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#screenshots][Screenshots]]&lt;/li&gt; &#xA; &lt;li&gt;[[#screencast][Screencast]]&lt;/li&gt; &#xA; &lt;li&gt;[[#description][Description]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#customization][Customization]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots :PROPERTIES: :CUSTOM_ID: screenshots :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;org-timeblock-mode buffer:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/org-timeblock.png]]&lt;/p&gt; &#xA;&lt;p&gt;You can press &lt;del&gt;[t]&lt;/del&gt; to toggle the display of org-timeblock-list-mode buffer:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/org-timeblock-with-list.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screencast :PROPERTIES: :CUSTOM_ID: screencast :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://youtu.be/tuMcPotV71I]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Description :PROPERTIES: :CUSTOM_ID: description :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The builtin orgmode package for viewing tasks or events for a particular day, org-agenda, does not help you to quickly understand, where, for example, you have free time in your day or where you have overlapping tasks. Just a list of tasks is not sufficient. This package is created to fix this problem and provide some of the functionality that modern calendars provide.&lt;/p&gt; &#xA;&lt;p&gt;There are two major modes provided by the package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;org-timeblock-mode&lt;/del&gt;. Displays visual schedule (timeblocks) of org tasks that are scheduled or have an active timestamp in their body (orgmode events) for selected day (Currently, only day view is available). Available commands:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;org-timeblock-day-earlier/later &lt;del&gt;[C-&#xA;     &lt;down&gt;&#xA;      /&#xA;      &lt;up&gt;&#xA;       ]&#xA;      &lt;/up&gt;&#xA;     &lt;/down&gt;&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-set-duration &lt;del&gt;[d]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-reschedule &lt;del&gt;[s]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-new-task &lt;del&gt;[+]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-toggle-timeblock-list &lt;del&gt;[t]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-todo &lt;del&gt;[1]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-done &lt;del&gt;[5]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-switch-view &lt;del&gt;[v]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-jump-to-day &lt;del&gt;[j]&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;org-timeblock-list-mode&lt;/del&gt;. Displays a list of org tasks that are scheduled or orgmode events for selected day. It&#39;s sort of like a light org-agenda. The tasks can be sorted via &lt;del&gt;SCHEDULED&lt;/del&gt; org property or manually placed by user via commands &lt;del&gt;org-timeblock-list-drag-line-forward/backward [M-&#xA;    &lt;up&gt;&#xA;     /&#xA;     &lt;down&gt;&#xA;      ]&#xA;     &lt;/down&gt;&#xA;    &lt;/up&gt;&lt;/del&gt;. The order can be saved in a cache file via &lt;del&gt;org-timeblock-list-save [C-s]&lt;/del&gt; command. The sorting algorithm can be changed via &lt;del&gt;org-timeblock-list-toggle-sort-function [S]&lt;/del&gt; command.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;org-timeblock-list-schedule &lt;del&gt;[s]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-list-set-duration &lt;del&gt;[d]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-todo &lt;del&gt;[1]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-done &lt;del&gt;[5]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-list-drag-line-forward/backward &lt;del&gt;[M-&#xA;     &lt;down&gt;&#xA;      /&#xA;      &lt;up&gt;&#xA;       ]&#xA;      &lt;/up&gt;&#xA;     &lt;/down&gt;&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-list-toggle-sort-function &lt;del&gt;[S]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-list-toggle-timeblock &lt;del&gt;[t]&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :CUSTOM_ID: installation :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 28.1 (or higher)&lt;/li&gt; &#xA; &lt;li&gt;SVG support in your Emacs build&lt;/li&gt; &#xA; &lt;li&gt;org 9.6.7 (or higher)&lt;/li&gt; &#xA; &lt;li&gt;org-ql 0.7 (or higher)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For now, only manual installation is available. To install:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;del&gt;M-x package-install org-ql&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;git clone &lt;a href=&#34;https://github.com/ichernyshovvv/org-timeblock&#34;&gt;https://github.com/ichernyshovvv/org-timeblock&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add the path of the downloaded folder to &lt;del&gt;load-path&lt;/del&gt; somewhere in your Emacs config:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-to-list &#39;load-path &#34;path/to/org-timeblock/&#34;) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :CUSTOM_ID: usage :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enter &lt;del&gt;org-timeblock-list-mode&lt;/del&gt;, run &lt;del&gt;M-x org-timeblock-list&lt;/del&gt;. To enter &lt;del&gt;org-timeblock-mode&lt;/del&gt;, run &lt;del&gt;M-x org-timeblock&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;For both modes, the default date is today. All the tasks and events are searched in &lt;del&gt;(org-agenda-files)&lt;/del&gt;. You can change the displayed date via the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;org-timeblock-day-later &lt;del&gt;[C-&#xA;   &lt;down&gt;&#xA;    ]&#xA;   &lt;/down&gt;&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;org-timeblock-day-earlier &lt;del&gt;[C-&#xA;   &lt;up&gt;&#xA;    ]&#xA;   &lt;/up&gt;&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;org-timeblock-jump-to-day &lt;del&gt;[j]&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To navigate between tasks/blocks, use these commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;org-timeblock-list-mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;org-timeblock-list-previous-line &lt;del&gt;[&#xA;     &lt;up&gt;&#xA;      ]&#xA;     &lt;/up&gt;&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-list-next-line &lt;del&gt;[&#xA;     &lt;down&gt;&#xA;      ]&#xA;     &lt;/down&gt;&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;org-timeblock-mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;org-timeblock-forward-block &lt;del&gt;[&#xA;     &lt;down&gt;&#xA;      ]&#xA;     &lt;/down&gt;&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-bacward-block &lt;del&gt;[&#xA;     &lt;up&gt;&#xA;      ]&#xA;     &lt;/up&gt;&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In both modes, you can navigate via mouse clicks to select an entry or a block.&lt;/p&gt; &#xA;&lt;p&gt;To reschedule or change the duration of a task at point, use these commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;org-timeblock-list-mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;org-timeblock-list-schedule &lt;del&gt;[s]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-list-set-duration &lt;del&gt;[d]&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;org-timeblock-mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;org-timeblock-schedule &lt;del&gt;[s]&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;org-timeblock-set-duration &lt;del&gt;[d]&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customization :PROPERTIES: :CUSTOM_ID: customization :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;del&gt;M-x customize-group org-timeblock&lt;/del&gt; to see available customizable variables.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aurelienbottazini/tronesque</title>
    <updated>2023-08-02T01:32:56Z</updated>
    <id>tag:github.com,2023-08-02:/aurelienbottazini/tronesque</id>
    <link href="https://github.com/aurelienbottazini/tronesque" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Color theme for terminal, emacs, textmate based on Tron&lt;/p&gt;&lt;hr&gt;&lt;p&gt;License: GPL-3+&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2017 AurÃ©lien Bottazini&lt;/p&gt; &#xA;&lt;p&gt;Color Themes inspired by Tron.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aurelienbottazini/tronesque/master/images/terminal.jpg&#34; alt=&#34;terminal with tron theme&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aurelienbottazini/tronesque/master/images/color-theme-tronesque.el.png&#34; alt=&#34;emacs with tron theme&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>