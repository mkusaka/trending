<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-10T01:32:57Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>susam/devil</title>
    <updated>2023-05-10T01:32:57Z</updated>
    <id>tag:github.com,2023-05-10:/susam/devil</id>
    <link href="https://github.com/susam/devil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs minor mode that intercepts and translates keystrokes to provide a modifier-free editing experience&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Devil Mode&lt;/h1&gt; &#xA;&lt;p&gt;Devil mode trades your comma key in exchange for a modifier-free editing experience! Yes, the comma key! The key you would normally wield for punctuation in nearly every corner of text. Yes, this is twisted! It would not be called the Devil otherwise, would it? If it were any more rational, we might call it something divine, like, uh, the God mode? But alas, there is nothing divine to be found here. Welcome, instead, to the realm of the Devil! You will be granted the occasional use of the comma key for punctuation, but only if you can charm the Devil! But beware, for in this sinister domain, you must relinquish your comma key and embrace an editing experience that whispers wicked secrets into your fingertips!&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#notation&#34;&gt;Notation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#install-interactively-from-melpa&#34;&gt;Install Interactively from MELPA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#install-automatically-from-melpa&#34;&gt;Install Automatically from MELPA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#install-from-git-source&#34;&gt;Install from Git Source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#use-devil&#34;&gt;Use Devil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#typing-commas&#34;&gt;Typing Commas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#devil-reader&#34;&gt;Devil Reader&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#translation-rules&#34;&gt;Translation Rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#translation-examples&#34;&gt;Translation Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#bonus-key-bindings&#34;&gt;Bonus Key Bindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#custom-configuration-examples&#34;&gt;Custom Configuration Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#local-mode&#34;&gt;Local Mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#custom-appearance&#34;&gt;Custom Appearance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#custom-devil-key&#34;&gt;Custom Devil Key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#multiple-devil-keys&#34;&gt;Multiple Devil Keys&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#why&#34;&gt;Why?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#comparison-with-god-mode&#34;&gt;Comparison with God Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#channels&#34;&gt;Channels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#more&#34;&gt;More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Devil mode intercepts our keystrokes and translates them to Emacs key sequences according to a configurable set of translation rules. For example, with the default translation rules, when we type &lt;code&gt;, x , f&lt;/code&gt;, Devil translates it to &lt;code&gt;C-x C-f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The choice of the comma key (&lt;code&gt;,&lt;/code&gt;) to mean the control modifier key (&lt;code&gt;C-&lt;/code&gt;) may seem outrageous. After all, the comma is a very important punctuation both in prose as well as in code. Can we really get away with using &lt;code&gt;,&lt;/code&gt; to mean the &lt;code&gt;C-&lt;/code&gt; modifier? It turns out, this terrible idea can be made to work without too much of a hassle. At least it works for me! It might work for you too. If it does not, Devil can be configured to use another key instead of &lt;code&gt;,&lt;/code&gt; to mean the &lt;code&gt;C-&lt;/code&gt; modifier. See the section &lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#custom-devil-key&#34;&gt;Custom Devil Key&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;A sceptical reader may rightfully ask: If &lt;code&gt;,&lt;/code&gt; is translated to &lt;code&gt;C-&lt;/code&gt;, how on earth are we going to insert a literal &lt;code&gt;,&lt;/code&gt; into the text when we need to? The section &lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#typing-commas&#34;&gt;Typing Commas&lt;/a&gt; answers this. But before we get there, we have some fundamentals to cover. Take the plunge and see what unfolds! Maybe you will like this! Maybe you will not! If you do not like this, you can always retreat to God mode, Evil mode, the vanilla key bindings, or whatever piques your fancy!&lt;/p&gt; &#xA;&lt;h2&gt;Notation&lt;/h2&gt; &#xA;&lt;p&gt;A quick note about the notation used in the document: The previous example shows that &lt;code&gt;, x , f&lt;/code&gt; is translated to &lt;code&gt;C-x C-f&lt;/code&gt;. What this really means is that the key sequence &lt;kbd&gt;,&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;kbd&gt;,&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt; is translated to &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt;. We do not really type any space after the commas. The key &lt;kbd&gt;,&lt;/kbd&gt; is directly followed by the key &lt;kbd&gt;x&lt;/kbd&gt;. However, the key sequence notation used in this document contains spaces between each keystroke. This is consistent with how key sequences are represented in Emacs in general and how Emacs functions like &lt;code&gt;key-description&lt;/code&gt;, &lt;code&gt;describe-key&lt;/code&gt;, etc. represent key sequences. When we really need to type a space, it is represented as &lt;code&gt;SPC&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Install Interactively from MELPA&lt;/h3&gt; &#xA;&lt;p&gt;Devil is available via &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;. You may already have a preferred way of installing packages from MELPA. If so, install the package named &lt;code&gt;devil&lt;/code&gt; to get Devil. For the sake of completeness, here is a very basic way of installing Devil from MELPA:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to the Emacs initialization file (i.e., &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; or &lt;code&gt;~/.config/emacs/init.el&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Emacs with the updated initialization file and then type these commands:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-x package-refresh-contents RET&#xA;M-x package-install RET devil RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Confirm that Devil is installed successfully with this command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-x devil-show-version RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Devil mode with this command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-x global-devil-mode RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, x , f&lt;/code&gt; and watch Devil translate it to &lt;code&gt;C-x C-f&lt;/code&gt; and invoke the corresponding command.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install Automatically from MELPA&lt;/h3&gt; &#xA;&lt;p&gt;Here is yet another basic way to install and enable Devil using Elisp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;(unless package-archive-contents&#xA;  (package-refresh-contents))&#xA;(unless (package-installed-p &#39;devil)&#xA;  (package-install &#39;devil))&#xA;(global-devil-mode)&#xA;(global-set-key (kbd &#34;C-,&#34;) &#39;global-devil-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now type &lt;code&gt;, x , f&lt;/code&gt; and watch Devil translate it to &lt;code&gt;C-x C-f&lt;/code&gt; and invoke the corresponding command. Type &lt;code&gt;C-,&lt;/code&gt; to disable Devil mode. Type &lt;code&gt;C-,&lt;/code&gt; again to enable it.&lt;/p&gt; &#xA;&lt;h3&gt;Install from Git Source&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer obtaining Devil from its Git repository, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone Devil to your system:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/susam/devil.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your Emacs initialization:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/devil/&#34;)&#xA;(require &#39;devil)&#xA;(global-devil-mode)&#xA;(global-set-key (kbd &#34;C-,&#34;) &#39;global-devil-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the Emacs editor. Devil mode should now be enabled in all buffers. The modeline of each buffer should show the &lt;code&gt;Devil&lt;/code&gt; lighter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, x , f&lt;/code&gt; and watch Devil translate it to &lt;code&gt;C-x C-f&lt;/code&gt; and invoke the corresponding command. Type &lt;code&gt;C-,&lt;/code&gt; to disable Devil mode. Type &lt;code&gt;C-,&lt;/code&gt; again to enable it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Use Devil&lt;/h2&gt; &#xA;&lt;p&gt;Assuming vanilla Emacs key bindings have not been changed and Devil has not been customised, here are some examples that demonstrate how Devil may be used:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, x , f&lt;/code&gt; and watch Devil translate it to &lt;code&gt;C-x C-f&lt;/code&gt; and invoke the find file functionality.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, p&lt;/code&gt; to move up one line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To move up multiple lines, type &lt;code&gt;, p p p&lt;/code&gt; and so on. Some Devil key sequences are repeatable keys. The repeatable Devil key sequences can be repeated by typing the last key of the Devil key sequence over and over again.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Another example of a repeatable Devil key sequence is &lt;code&gt;, f f f&lt;/code&gt; which moves the cursor word by multiple characters. A few other examples of repeatable keys are &lt;code&gt;, k k k&lt;/code&gt; to kill lines, &lt;code&gt;, / / /&lt;/code&gt; to undo changs, etc. Type &lt;code&gt;C-h v devil-repeatable-keys RET&lt;/code&gt; to see the complete list of repeatable keys.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, s&lt;/code&gt; and watch Devil translate it to &lt;code&gt;C-s&lt;/code&gt; and invoke incremental search.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, m s&lt;/code&gt; and watch Devil translate it to &lt;code&gt;C-M-s&lt;/code&gt; and invoke regular-expression-based incremental search. Yes, &lt;code&gt;m&lt;/code&gt; is translated to &lt;code&gt;M-&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, m m x&lt;/code&gt; and watch Devil translate it to &lt;code&gt;M-x&lt;/code&gt; and invoke the corresponding command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, u , f&lt;/code&gt; and watch Devil translate it to &lt;code&gt;C-u C-f&lt;/code&gt; and move the cursor forward by 4 characters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, u u , f&lt;/code&gt; and the cursor moves forward by 16 characters. Devil uses its translation rules and an additional keymap to make the input key sequence behave like &lt;code&gt;C-u C-u C-f&lt;/code&gt; which moves the cursor forward by 16 characters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, SPC&lt;/code&gt; to type a comma followed by space. This is a special key sequence to make it convenient to type a comma in the text. Note that this sacrifices the use of &lt;code&gt;, SPC&lt;/code&gt; to mean &lt;code&gt;C-SPC&lt;/code&gt; which could have been a convenient way to set a mark.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, z SPC&lt;/code&gt; and watch Devil translate it to &lt;code&gt;C-SPC&lt;/code&gt; and set a mark. Yes, &lt;code&gt;, z&lt;/code&gt; is translated to &lt;code&gt;C-&lt;/code&gt; too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Similarly, type &lt;code&gt;, RET&lt;/code&gt; to type a comma followed by the return key. This is another special key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;, ,&lt;/code&gt; to type a single comma. This special key is useful for cases when you really need to type a single literal comma.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Typing Commas&lt;/h2&gt; &#xA;&lt;p&gt;Devil makes the questionable choice of using the comma as its activation key. As illustrated in the previous section, typing &lt;code&gt;, x , f&lt;/code&gt; produces the same effect as typing &lt;code&gt;C-x C-f&lt;/code&gt;. One might naturally wonder how then we are supposed to type literal commas.&lt;/p&gt; &#xA;&lt;p&gt;Most often when we edit text, we do not really type a comma in isolation. Often we immediately follow the comma with a space or a newline. This assumption usually holds good while editing regular text. However, this assumption may not hold in some situations, like while working with code when we need to add a single comma at the end of an existing line.&lt;/p&gt; &#xA;&lt;p&gt;In scenarios where the above assumption holds good, typing &lt;code&gt;, SPC&lt;/code&gt; inserts a comma and a space. Similarly, typing &lt;code&gt;, RET&lt;/code&gt; inserts a comma and a newline.&lt;/p&gt; &#xA;&lt;p&gt;In scenarios, when we do need to type a single comma, type &lt;code&gt;, ,&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;Also, it is worth mentioning here that if all this fiddling with the comma key feels clumsy, we could always customise the Devil key to something else that feels better. We could also disable Devil mode temporarily and enable it again later with &lt;code&gt;C-,&lt;/code&gt; as explained in section &lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#get-started&#34;&gt;Get Started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Devil Reader&lt;/h2&gt; &#xA;&lt;p&gt;The following points briefly describe how Devil reads Devil key sequences, translates them to Emacs key sequences, and runs commands bound to the key sequences:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;As soon as the Devil key is typed (which is &lt;code&gt;,&lt;/code&gt; by default), Devil wakes up and starts reading Devil key sequences. Type &lt;code&gt;C-h v devil-key RET&lt;/code&gt; to see the current Devil key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After each keystroke is read, Devil checks if the key sequence accumulated is a special key. If it is, then the special command bound to the special key is executed immediately. Note that this step is performed before any translation rules are applied to the input key sequence. This is how the Devil special key sequence &lt;code&gt;, SPC&lt;/code&gt; inserts a comma and a space. Type &lt;code&gt;C-h v devil-special-keys RET&lt;/code&gt; to see the list of special keys and the commands bound to them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the key sequence accumulated so far is not a special key, then Devil translates the Devil key sequence to a regular Emacs key sequence. If the regular Emacs key sequence turns out to be a complete key sequence and some command is found to be bound to it, then that command is executed immediately. This is how the Devil key sequence &lt;code&gt;, x , f&lt;/code&gt; is translated to &lt;code&gt;C-x C-f&lt;/code&gt; and the corresponding binding is executed. If the translated key sequence is a complete key sequence but no command is bound to it, then Devil displays a message that the key sequence is undefined. Type &lt;code&gt;C-h v devil-translations RET&lt;/code&gt; to see the list of translation rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After successfully translating a Devil key sequence to an Emacs key sequence and executing the command bound to it, Devil checks if the key sequence is a repeatable key sequence. If it is found to be a repeatable key sequence, then Devil sets a transient map so that the command can be repeated merely by typing the last keystroke of the input key sequence. This is how &lt;code&gt;, p p p&lt;/code&gt; moves the cursor up by three lines. Type &lt;code&gt;C-h v devil-repeatable-keys RET&lt;/code&gt; to see the list of repeatable Devil key sequences.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The variables &lt;code&gt;devil-special-keys&lt;/code&gt;, &lt;code&gt;devil-translations&lt;/code&gt;, and &lt;code&gt;devil-repeatable-keys&lt;/code&gt; may contain keys or values with the string &lt;code&gt;%k&lt;/code&gt; in them. This is a placeholder for &lt;code&gt;devil-key&lt;/code&gt;. While applying the special keys, translation rules, or repeat rules, each &lt;code&gt;%k&lt;/code&gt; is replaced with the actual value of &lt;code&gt;devil-key&lt;/code&gt; before applying the rules.&lt;/p&gt; &#xA;&lt;h2&gt;Translation Rules&lt;/h2&gt; &#xA;&lt;p&gt;The following points provide an account of the translation rules that Devil follows in order to convert a Devil key sequence entered by the user to an Emacs key sequence:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The input key vector read from the user is converted to a key description (i.e., the string functions like &lt;code&gt;describe-key&lt;/code&gt;, &lt;code&gt;key-description&lt;/code&gt;, produce). For example, if the user types &lt;kbd&gt;,&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;kbd&gt;,&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt;, it is converted to &lt;code&gt;, x , f&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now the resulting key description is translated with simple string replacements. If any part of the string matches a key in &lt;code&gt;devil-translations&lt;/code&gt;, then it is replaced with the corresponding value. For example, &lt;code&gt;, x , f&lt;/code&gt; is translated to &lt;code&gt;C- x C- f&lt;/code&gt;. Then Devil normalises the result to &lt;code&gt;C-x C-f&lt;/code&gt; by removing superfluous spaces after the modifier keys.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;However, if the simple string based replacement leads to an invalid Emacs key sequence, it skips the replacement that causes the resulting Emacs key sequence to become invalid. For example &lt;code&gt;, m ,&lt;/code&gt; results in &lt;code&gt;C-M-C-&lt;/code&gt; after the simple string replacement because the default translation rules replace &lt;code&gt;,&lt;/code&gt; with &lt;code&gt;C-&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; with &lt;code&gt;M-&lt;/code&gt;. However, &lt;code&gt;C-M-C-&lt;/code&gt; is an invalid key sequence, so the replacement of the second &lt;code&gt;,&lt;/code&gt; to &lt;code&gt;C-&lt;/code&gt; is skipped. Therefore, the input &lt;code&gt;, m ,&lt;/code&gt; is translated to &lt;code&gt;C-M-,&lt;/code&gt; instead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Translation Examples&lt;/h2&gt; &#xA;&lt;p&gt;By default, Devil supports a small but peculiar set of translation rules that can be used to avoid modifier keys while typing various types of key sequences. See &lt;code&gt;C-h v devil-translations RET&lt;/code&gt; for the translation rules. Here are some examples that demonstrate the default translation rules. The obvious ones are shown first first. The more peculiar translations come later in the table.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Input&lt;/th&gt; &#xA;   &lt;th&gt;Translated&lt;/th&gt; &#xA;   &lt;th&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;, s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;,&lt;/code&gt; is replaced with &lt;code&gt;C-&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;, m s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-M-s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;m&lt;/code&gt; is replaced with &lt;code&gt;M-&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;, z s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-SPC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;, z&lt;/code&gt; is replaced with &lt;code&gt;C-&lt;/code&gt; too&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;, z z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ditto&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;, m m x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;, m m&lt;/code&gt; is replaced with &lt;code&gt;M-&lt;/code&gt; too&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;, c , ,&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-c ,&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;, ,&lt;/code&gt; is replaced with &lt;code&gt;,&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note how we cannot use &lt;code&gt;, SPC&lt;/code&gt; to set a mark because that key sequence is already reserved as a special key sequence in &lt;code&gt;devil-special-keys&lt;/code&gt;, so Devil translates &lt;code&gt;, z&lt;/code&gt; to &lt;code&gt;C-&lt;/code&gt; too, so that we can still type &lt;code&gt;C-SPC&lt;/code&gt; using &lt;code&gt;, z s&lt;/code&gt; and set a mark.&lt;/p&gt; &#xA;&lt;p&gt;Also, note how the translation of &lt;code&gt;, m m&lt;/code&gt; to &lt;code&gt;M-&lt;/code&gt; allows us to enter a key sequence that begins with the &lt;code&gt;M-&lt;/code&gt; modifier key.&lt;/p&gt; &#xA;&lt;h2&gt;Bonus Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;Devil adds the following additional key bindings only when Devil is enabled globally with &lt;code&gt;global-devil-mode&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Adds the Devil key to &lt;code&gt;isearch-mode-map&lt;/code&gt;, so that Devil key sequences work in incremental search too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Adds &lt;code&gt;u&lt;/code&gt; to &lt;code&gt;universal-argument-more&lt;/code&gt; to allow repeating the universal argument command &lt;code&gt;C-u&lt;/code&gt; simply by repeating &lt;code&gt;u&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As mentioned before these features are available only when Devil is enabled globally with &lt;code&gt;global-devil-mode&lt;/code&gt;. If Devil is enabled locally with &lt;code&gt;devil-mode&lt;/code&gt;, then these features are not available.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Configuration Examples&lt;/h2&gt; &#xA;&lt;p&gt;In the examples presented below, the &lt;code&gt;(require &#39;devil)&lt;/code&gt; calls may be omitted if Devil has been installed from MELPA. There are appropriate autoloads in place in the Devil package that would ensure that it is loaded automatically on enabling Devil mode. However, the &lt;code&gt;require&lt;/code&gt; calls have been included in the examples below for the sake of completeness.&lt;/p&gt; &#xA;&lt;h3&gt;Local Mode&lt;/h3&gt; &#xA;&lt;p&gt;While the section &lt;a href=&#34;https://raw.githubusercontent.com/susam/devil/main/#get-started&#34;&gt;Get Started&lt;/a&gt; shows how we enable Devil mode globally, this section shows how we can enable it locally. Here is an example initialization code that enables Devil locally only in text buffers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;devil)&#xA;(add-hook &#39;text-mode-hook &#39;devil-mode)&#xA;(global-set-key (kbd &#34;C-,&#34;) &#39;devil-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is not recommended though because this does not provide a seamless Devil experience. For example, with Devil enabled locally in a text buffer like this, although we can type &lt;code&gt;, x , f&lt;/code&gt; to launch the find-file minibuffer, we cannot use Devil key sequences in the minibuffer. Further the special keymaps described in the previous section work only when Devil is enabled globally.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Appearance&lt;/h3&gt; &#xA;&lt;p&gt;The following initialization code shows how we can customise Devil to show a Devil smiley (😈) in the modeline and the echo area.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;devil)&#xA;(setq devil-lighter &#34; \U0001F608&#34;)&#xA;(setq devil-prompt &#34;\U0001F608 %t&#34;)&#xA;(global-devil-mode)&#xA;(global-set-key (kbd &#34;C-,&#34;) &#39;global-devil-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is how Emacs may look if emojis are rendered correctly:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://i.imgur.com/oYtwnGi.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/oYtwnGi.png&#34; alt=&#34;Screenshot of Emacs with Devil smiley&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Devil Key&lt;/h3&gt; &#xA;&lt;p&gt;The following initialization code shows how we can customise Devil to use a different Devil key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defvar devil-key &#34;&amp;lt;left&amp;gt;&#34;)&#xA;(defvar devil-special-keys &#39;((&#34;%k %k&#34; . (lambda () (interactive) (devil-run-key &#34;%k&#34;)))))&#xA;(require &#39;devil)&#xA;(global-devil-mode)&#xA;(global-set-key (kbd &#34;C-&amp;lt;left&amp;gt;&#34;) &#39;global-devil-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example sets the Devil key to the left arrow key, perhaps another dubious choice for the Devil key. With this configuration, we can use &lt;code&gt;&amp;lt;left&amp;gt; x &amp;lt;left&amp;gt; f&lt;/code&gt; and have Devil translate it to &lt;code&gt;C-x C-f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the above example defines the &lt;code&gt;devil-special-keys&lt;/code&gt; variable to have a single entry that allows typing &lt;code&gt;&amp;lt;left&amp;gt; &amp;lt;left&amp;gt;&lt;/code&gt; to produce the same effect as the original &lt;code&gt;&amp;lt;left&amp;gt;&lt;/code&gt;. It removes the other entries, so that &lt;code&gt;&amp;lt;left&amp;gt; SPC&lt;/code&gt; is no longer reserved as a special key. Thus &lt;code&gt;&amp;lt;left&amp;gt; SPC&lt;/code&gt; can now be used to set a mark like one would normally expect.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Devil Keys&lt;/h3&gt; &#xA;&lt;p&gt;While this package provides the comma (&lt;code&gt;,&lt;/code&gt;) as the default and the only Devil key, nothing stops you from extending the mode map to support multiple Devil keys. Say, you decide that in addition to activating Devil with &lt;code&gt;,&lt;/code&gt; which also plays the role of &lt;code&gt;C-&lt;/code&gt;, you also want to activate Devil with &lt;code&gt;.&lt;/code&gt; which must now play the role of &lt;code&gt;M-&lt;/code&gt;. To achieve such a result, you could use this initialization code as a starting point and then customise it further based on your requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defvar devil-mode-map&#xA;  (let ((map (make-sparse-keymap)))&#xA;    (define-key map (kbd &#34;,&#34;) #&#39;devil)&#xA;    (define-key map (kbd &#34;.&#34;) #&#39;devil)&#xA;    map))&#xA;(defvar devil-special-keys &#39;((&#34;, ,&#34; . (lambda () (insert &#34;,&#34;)))&#xA;                             (&#34;. .&#34; . (lambda () (insert &#34;.&#34;)))))&#xA;(defvar devil-translations &#39;((&#34;,&#34; . &#34;C-&#34;)&#xA;                             (&#34;.&#34; . &#34;M-&#34;)))&#xA;(require &#39;devil)&#xA;(global-devil-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this configuration, we can type &lt;code&gt;, x , f&lt;/code&gt; for &lt;code&gt;C-x C-f&lt;/code&gt; like before. But now we can also type &lt;code&gt;. x&lt;/code&gt; for &lt;code&gt;M-x&lt;/code&gt;. Similarly, we can type &lt;code&gt;, . s&lt;/code&gt; for &lt;code&gt;C-M-s&lt;/code&gt; and so on. Further, &lt;code&gt;, ,&lt;/code&gt; inserts a literal comma and &lt;code&gt;. .&lt;/code&gt; inserts a literal dot.&lt;/p&gt; &#xA;&lt;p&gt;Note that by default Devil configures only one activation key (&lt;code&gt;,&lt;/code&gt;) because the more activation keys we add, the more intrusive Devil becomes during regular editing tasks. Every key that we reserve for activating Devil loses its default function and then we need workarounds to somehow invoke the default function associated with that key (like repeating &lt;code&gt;.&lt;/code&gt; twice to insert a single &lt;code&gt;.&lt;/code&gt; in the above example). Therefore, it is a good idea to keep the number of Devil keys as small as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Why go to the trouble of creating and using something like this? Why not just remap &lt;kbd&gt;caps lock&lt;/kbd&gt; to &lt;kbd&gt;ctrl&lt;/kbd&gt; like every other sane person does? Or if it is so important to avoid modifier keys, why not use something like God mode or Evil mode?&lt;/p&gt; &#xA;&lt;p&gt;Well, for one, both God mode and Evil mode are modal editing modes. Devil, on the other hand, provides a modeless editing experience of Emacs as possible.&lt;/p&gt; &#xA;&lt;p&gt;Devil mode began as a fun little tiny experiment. From the outset, it was clear that using something as crucial as the comma for specifying the modifier key is asking for trouble. However, I still wanted to see how far I could go with it. It turned out that in a matter of days, I was using it full-time for all of my Emacs usage.&lt;/p&gt; &#xA;&lt;p&gt;This experiment was partly motivated by Macbook keyboards which do not have a right &lt;kbd&gt;ctrl&lt;/kbd&gt; key. Being a touch-typist myself, I found it inconvenient to type key combinations like &lt;code&gt;C-x&lt;/code&gt;, &lt;code&gt;C-a&lt;/code&gt;, &lt;code&gt;C-w&lt;/code&gt;, &lt;code&gt;C-s&lt;/code&gt;, etc. where both the modifier key and the modified key need to be pressed with the left hand fingers. I am not particularly fond of remapping &lt;kbd&gt;caps lock&lt;/kbd&gt; to behave like &lt;kbd&gt;ctrl&lt;/kbd&gt; because that still suffers from the problem that key combinations like &lt;code&gt;C-x&lt;/code&gt;, &lt;code&gt;C-a&lt;/code&gt; require pressing both the modifier key and the modified key with the left hand fingers. I know many people remap both their &lt;kbd&gt;caps lock&lt;/kbd&gt; and &lt;kbd&gt;enter&lt;/kbd&gt; to behave like &lt;kbd&gt;ctrl&lt;/kbd&gt;. While I think that is a fine solution, I was not willing to put up with the work required to make that work seamlessly across all the various operating systems I work on.&lt;/p&gt; &#xA;&lt;p&gt;What began as a tiny whimsical experiment a few years ago turned out to be quite effective, at least to me. I like that this solution is implemented purely as Elisp and therefore does not have any external dependency. I am sharing this solution here in the form of a minor mode, just in case, there is someone out there who might find this useful too.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with God Mode&lt;/h2&gt; &#xA;&lt;p&gt;God mode provides a modal editing experience but Devil does not. Devil has the same underlying philosophy as that of God mode, i.e., the user should not have to learn new key bindings. However, Devil does not have a hard separation between insert mode and command mode like God mode has. Instead, Devil waits for an activation key (&lt;code&gt;,&lt;/code&gt; by default) and as soon as it is activated, it intercepts and translates keys, runs the corresponding command, and then gets out of the way. So Devil tries to retain the modeless editing experience of vanilla Emacs as much as possible.&lt;/p&gt; &#xA;&lt;p&gt;Now it is worth mentioning that some of this modeless editing experience can be reproduced in god-mode too using its &lt;code&gt;god-execute-with-current-bindings&lt;/code&gt; function. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(global-set-key (kbd &#34;,&#34;) #&#39;god-execute-with-current-bindings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this configuration, God mode translates &lt;code&gt;, x f&lt;/code&gt; to &lt;code&gt;C-x C-f&lt;/code&gt;. Similarly &lt;code&gt;, g x&lt;/code&gt; invokes &lt;code&gt;M-x&lt;/code&gt; and &lt;code&gt;, G s&lt;/code&gt; invokes &lt;code&gt;C-M-x&lt;/code&gt;. This provides a modeless editing experience in God mode too. However, this experience does not extend seamlessly to minibuffers. Devil does extend its Devil key translation to minibuffers.&lt;/p&gt; &#xA;&lt;p&gt;Further note that in God mode the &lt;kbd&gt;ctrl&lt;/kbd&gt; modifier has sticky behaviour, i.e., the modifier remains active automatically for the entire key sequence. Therefore in the above example, we type &lt;code&gt;,&lt;/code&gt; only once while typing &lt;code&gt;, x f&lt;/code&gt; to invoke &lt;code&gt;C-x C-f&lt;/code&gt;. However, this sticky behaviour implies that we need some way to disambiguate between key sequences like &lt;code&gt;C-x C-o&lt;/code&gt; (delete blank lines) and &lt;code&gt;C-x o&lt;/code&gt; (other window). God mode solves this by introducing &lt;code&gt;SPC&lt;/code&gt; to deactivate the modifier, e.g., &lt;code&gt;, x o&lt;/code&gt; translates to &lt;code&gt;C-x C-o&lt;/code&gt; but &lt;code&gt;, x SPC o&lt;/code&gt; translates to &lt;code&gt;C-x o&lt;/code&gt;. Devil does not treat the modifier key as sticky which leads to simpler key sequences at the cost of a little additional typing, i.e., &lt;code&gt;, x , o&lt;/code&gt; translates to &lt;code&gt;C-x C-o&lt;/code&gt; and &lt;code&gt;, x o&lt;/code&gt; translates to &lt;code&gt;C-x o&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To summarize, there are primarily three things that Devil does differently:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide a modeless editing experience from the outset.&lt;/li&gt; &#xA; &lt;li&gt;Seamlessly extend the same editing experience to minibuffer, incremental search, etc.&lt;/li&gt; &#xA; &lt;li&gt;Translate key sequences using string replacements. This allows for arbitrary and sophisticated key translations for the adventurous.&lt;/li&gt; &#xA; &lt;li&gt;Choose non-sticky behaviour for the modifier keys.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These differences could make Devil easier to use than God mode for some people but clumsy for other people. It depends on one&#39;s tastes and preferences.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs, suggest improvements, or ask questions, &lt;a href=&#34;https://github.com/susam/devil/issues&#34;&gt;create issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Channels&lt;/h2&gt; &#xA;&lt;p&gt;The author of this project hangs out at the following places online:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://susam.net&#34;&gt;susam.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mastodon: &lt;a href=&#34;https://mastodon.social/@susam&#34;&gt;@susam@mastodon.social&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/susam&#34;&gt;@susam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/susam&#34;&gt;@susam&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are welcome to subscribe to, follow, or join one or more of the above channels to receive updates from the author or ask questions about this project.&lt;/p&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/susam/emacs4cl&#34;&gt;Emacs4CL&lt;/a&gt;, a DIY quick-starter kit to set up Emacs for Common Lisp programming.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/susam/emfy&#34;&gt;Emfy&lt;/a&gt;, a DIY quick-starter kit to set up Emacs for general purpose editing and programming.&lt;/p&gt;</summary>
  </entry>
</feed>