<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T01:40:00Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>d12frosted/vulpea</title>
    <updated>2022-07-17T01:40:00Z</updated>
    <id>tag:github.com,2022-07-17:/d12frosted/vulpea</id>
    <link href="https://github.com/d12frosted/vulpea" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of functions for note taking based on `org` and `org-roam`.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vulpea&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;256px&#34; src=&#34;https://barberry.io/images/vulpea-logo.png&#34; alt=&#34;Banner&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://melpa.org/#/vulpea&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/vulpea-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/vulpea&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/vulpea-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A collection of functions for note taking based on &lt;code&gt;org&lt;/code&gt; and &lt;code&gt;org-roam&lt;/code&gt;. This repository primary goal is to be a tested library for other applications and utilities around note taking.&lt;/p&gt; &#xA;&lt;p&gt;Users of this library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d12frosted/environment&#34;&gt;d12frosted/environment&lt;/a&gt; - Emacs configurations;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d12frosted/vino&#34;&gt;d12frosted/vino&lt;/a&gt; - collection of functions for cellar tracking and wine rating;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d12frosted/publicatorg&#34;&gt;d12frosted/publicatorg&lt;/a&gt; - a tool to make your Vulpea notes public.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orge26cb63&#34;&gt;Reasons to use &lt;code&gt;vulpea&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orgd25119b&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org5c6177d&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org581d7b2&#34;&gt;&lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orgcb4a867&#34;&gt;Doom Emacs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org036c284&#34;&gt;&lt;code&gt;vulpea-note&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org37b7ba9&#34;&gt;Metadata&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org9d318d9&#34;&gt;Why not properties drawer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orgbed940c&#34;&gt;Modules&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org6d08a53&#34;&gt;&lt;code&gt;vulpea&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org1fbb617&#34;&gt;&lt;code&gt;vulpea-select&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orga3d5ac1&#34;&gt;&lt;code&gt;vulpea-note&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org8c114e4&#34;&gt;&lt;code&gt;vulpea-db&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org714ea4a&#34;&gt;&lt;code&gt;vulpea-meta&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orgcc1a7f2&#34;&gt;&lt;code&gt;vulpea-buffer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org762cef0&#34;&gt;&lt;code&gt;vulpea-utils&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orge2e8069&#34;&gt;Performance&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orgef25680&#34;&gt;Query from database&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org902f9c6&#34;&gt;Coding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org6d71ab7&#34;&gt;Building and testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org3de8136&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;orge26cb63&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reasons to use &lt;code&gt;vulpea&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you are automating things around Org mode files and you want to have a tested library to build upon.&lt;/li&gt; &#xA; &lt;li&gt;While &lt;code&gt;org-roam&lt;/code&gt; was greatly simplified and has adopted some ideas from &lt;code&gt;vulpea&lt;/code&gt; starting from &lt;code&gt;v2&lt;/code&gt;, it still lacks certain pieces for programmatic usage. Just to name few of them: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-db-query&lt;/code&gt; is a great interface for quick database search without knowing its scheme. In many cases you just want to have a fully materialized note instead of a structure that lacks, say tags or aliases. So you don&#39;t need to write any extra SQL. See &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orge2e8069&#34;&gt;Performance&lt;/a&gt; for more information.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-select&lt;/code&gt; is a configurable interface for selecting a note with an optional filter. See &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org1fbb617&#34;&gt;vulpea-select&lt;/a&gt; for more information.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-create&lt;/code&gt; is a wrapper around &lt;code&gt;org-roam-capture-&lt;/code&gt; allowing to easily provide extra properties, tags and context when creating a new note. And most importantly - it returns a newly created note. See &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orge650cf5&#34;&gt;vulpea-create&lt;/a&gt; for more information.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Several interactive functions: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-find&lt;/code&gt; that acts like &lt;code&gt;org-roam-node-find&lt;/code&gt;, but (a) uses &lt;code&gt;vulpea-select&lt;/code&gt; for consistent experience and (b) allows to configure default and on-use filtering and candidates source. See &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orgf34bcd7&#34;&gt;vulpea-find&lt;/a&gt; for more information.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-find-backlink&lt;/code&gt; is just a convenient function to find a note linking currently opened one. For those who don&#39;t want to use &lt;code&gt;org-roam&lt;/code&gt; buffer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-insert&lt;/code&gt; that acts like &lt;code&gt;org-roam-node-insert&lt;/code&gt;, but (a) uses &lt;code&gt;vulpea-select&lt;/code&gt; for consistent experience, (b) allows to set &lt;code&gt;vulpea-insert-default-filter&lt;/code&gt; (see &lt;code&gt;vulpea-find&lt;/code&gt; for examples) and (c) allows to provide an insertion handler via &lt;code&gt;vulpea-insert-handle-functions&lt;/code&gt;, which is called with inserted note. See &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orgacf6cea&#34;&gt;vulpea-insert&lt;/a&gt; for more information.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea&lt;/code&gt; is more than just a wrapper around &lt;code&gt;org-roam&lt;/code&gt;, it contains more stuff: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Utilities for dealing with buffer properties (e.g. &lt;code&gt;#+KEY: VALUE&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Utilities for dealing with &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org74ad68c&#34;&gt;metadata&lt;/a&gt; (e.g. first description list in the buffer).&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;orgd25119b&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vulpea&lt;/code&gt; is available via &lt;a href=&#34;https://melpa.org/#/vulpea&#34;&gt;MELPA&lt;/a&gt;, but you can still install it manually, using &lt;a href=&#34;https://github.com/raxod502/straight&#34;&gt;straight&lt;/a&gt;, &lt;a href=&#34;https://github.com/quelpa/quelpa&#34;&gt;quelpa&lt;/a&gt;, or any package management tool of alike.&lt;/p&gt; &#xA;&lt;p&gt;In short, installation process is simple:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;code&gt;vulpea&lt;/code&gt; package via any preferred way.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;vulpea-db-autosync-enable&lt;/code&gt; (either via adding a hook to &lt;code&gt;org-roam-db-autosync-mode&lt;/code&gt; or directly).&lt;/li&gt; &#xA; &lt;li&gt;Before first usage you need to re-sync &lt;code&gt;org-roam-db&lt;/code&gt; from scratch, e.g. &lt;code&gt;(org-roam-db-sync &#39;force)&lt;/code&gt;. This is because &lt;code&gt;vulpea&lt;/code&gt; has several custom tables in addition to what &lt;code&gt;org-roam&lt;/code&gt; provides.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org5c6177d&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;(use-package vulpea&#xA;  :ensure t&#xA;  ;; hook into org-roam-db-autosync-mode you wish to enable&#xA;  ;; persistence of meta values (see respective section in README to&#xA;  ;; find out what meta means)&#xA;  :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org581d7b2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;(straight-use-package&#xA; &#39;(vulpea :type git :host github :repo &#34;d12frosted/vulpea&#34;))&#xA;&#xA;;; hook into org-roam-db-autosync-mode you wish to enable persistence&#xA;;; of meta values (see respective section in README to find out what&#xA;;; meta means)&#xA;(add-hook &#39;org-roam-db-autosync-mode-hook #&#39;vulpea-db-autosync-enable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you have &lt;a href=&#34;https://github.com/raxod502/straight.el/#integration-with-use-package&#34;&gt;integration&lt;/a&gt; with &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(use-package vulpea&#xA;  :straight (vulpea&#xA;             :type git&#xA;             :host github&#xA;             :repo &#34;d12frosted/vulpea&#34;)&#xA;  ;; hook into org-roam-db-autosync-mode you wish to enable&#xA;  ;; persistence of meta values (see respective section in README to&#xA;  ;; find out what meta means)&#xA;  :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;orgcb4a867&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Doom Emacs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;(use-package! vulpea&#xA;  :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org036c284&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vulpea-note&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A note is represented as a &lt;code&gt;vulpea-note&lt;/code&gt; structure with the following slots/fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-id&lt;/code&gt; - &lt;code&gt;ID&lt;/code&gt; property of note (file-level or heading level).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-path&lt;/code&gt; - absolute path to the note (even if the note is actually a heading);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-level&lt;/code&gt; - level of the note inside &lt;code&gt;:path&lt;/code&gt;, with &lt;code&gt;0&lt;/code&gt; being a file-level note and other numbers being a header;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-title&lt;/code&gt; - title of the note (it might be an alias);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-primary-title&lt;/code&gt; - primary title of the note (present only when &lt;code&gt;title&lt;/code&gt; is an alias);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-aliases&lt;/code&gt; - aliases of the note;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-links&lt;/code&gt; - list of links, each link being represented as &lt;code&gt;cons&lt;/code&gt; of type and link;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-tags&lt;/code&gt; - tags of the note;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-meta&lt;/code&gt; - associative list of &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org74ad68c&#34;&gt;metadata&lt;/a&gt;, where key is a string and the value is a list of strings. There are also two utilities to access/query metadata from note: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-note-meta-get-list&lt;/code&gt; - to get all values of given &lt;code&gt;PROP&lt;/code&gt; and &lt;code&gt;TYPE&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-note-meta-get&lt;/code&gt; - to get the first value of given &lt;code&gt;PROP&lt;/code&gt; and &lt;code&gt;TYPE&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-attach-dir&lt;/code&gt; - path to attachment directory. It respect all the &lt;a href=&#34;https://orgmode.org/manual/Attachment-options.html&#34;&gt;attachment options&lt;/a&gt;. This directory may not exist.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If &lt;code&gt;ID&lt;/code&gt; is not present in the note structure, this note is treated as non-existent. For example, &lt;code&gt;vulpea-select&lt;/code&gt; returns such a note, when &lt;code&gt;require-match&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; and the user selects non-existent note.&lt;/p&gt; &#xA;&lt;p&gt;Example of a note:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-db-get-by-id &#34;7705e5e4-bcd4-4e16-9ba7-fda8acdefe8c&#34;)&#xA;#s(vulpea-note :id &#34;7705e5e4-bcd4-4e16-9ba7-fda8acdefe8c&#34;&#xA;               :path &#34;/Users/d12frosted/Dropbox/vulpea/20200407160812-kitsune_book.org&#34;&#xA;               :level 0&#xA;               :title &#34;Kitsune Book&#34;&#xA;               :primary-title nil&#xA;               :aliases&#xA;               (&#34;vulpea&#34; &#34;Kitsune no Hon&#34;)&#xA;               :tags&#xA;               (&#34;personal&#34;)&#xA;               :links&#xA;               ((&#34;https&#34; . &#34;https://github.com/d12frosted/vulpea&#34;)&#xA;                (&#34;https&#34; . &#34;https://github.com/d12frosted/environment&#34;)&#xA;                (&#34;https&#34; . &#34;https://github.com/d12frosted/vino&#34;))&#xA;               :properties&#xA;               ((&#34;CATEGORY&#34; . &#34;20200407160812-kitsune_book&#34;)&#xA;                (&#34;ROAM_ALIASES&#34; . &#34;vulpea \&#34;Kitsune no Hon\&#34;&#34;)&#xA;                (&#34;ID&#34; . &#34;7705e5e4-bcd4-4e16-9ba7-fda8acdefe8c&#34;)&#xA;                (&#34;BLOCKED&#34; . &#34;&#34;)&#xA;                (&#34;FILE&#34; . &#34;/Users/d12frosted/Dropbox/vulpea/20200407160812-kitsune_book.org&#34;)&#xA;                (&#34;PRIORITY&#34; . &#34;B&#34;))&#xA;               :meta&#xA;               ((&#34;link&#34; &#34;[[https://github.com/d12frosted/vulpea][vulpea]]&#34;)&#xA;                (&#34;users&#34; &#34;[[https://github.com/d12frosted/environment][environment]]&#34; &#34;[[https://github.com/d12frosted/vino][vino]]&#34;)&#xA;                (&#34;status&#34; &#34;stable&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org37b7ba9&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Metadata&lt;/h2&gt; &#xA;&lt;p&gt;In general, metadata is a list of key value pairs that is represented by the first description list in the note, e.g. list like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- key1 :: value1&#xA;- key2 :: value21&#xA;- key2 :: value22&#xA;- key3 :: value3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be manipulated programatically by using functions from either &lt;code&gt;vulpea-meta&lt;/code&gt; module or from &lt;code&gt;vulpea-buffer&lt;/code&gt; module (those prefixed by &lt;code&gt;vulpea-buffer-meta&lt;/code&gt;). This data is also persisted in Org roam database for your convenience and is part of &lt;code&gt;vulpea-note&lt;/code&gt; returned by &lt;code&gt;vulpea-db&lt;/code&gt; module. See respective module documentation to find out all available functions.&lt;/p&gt; &#xA;&lt;p&gt;Currently metadata is limited to file-level only, e.g. description lists in outlines are not handled by &lt;code&gt;vulpea&lt;/code&gt;. Vote for &lt;a href=&#34;https://github.com/d12frosted/vulpea/issues/75&#34;&gt;vulpea#75&lt;/a&gt; to bring it faster.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org9d318d9&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Why not properties drawer&lt;/h3&gt; &#xA;&lt;p&gt;In many cases, properties are far better choice for storing technical &#39;metadata&#39;, like &lt;code&gt;ID&lt;/code&gt;, &lt;code&gt;DATE&lt;/code&gt;, &lt;code&gt;TAGS&lt;/code&gt;, etc. - something that is not really part of note content. After all, properties drawer is a drawer:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sometimes you want to keep information associated with an entry, but you normally do not want to see it. For this, Org mode has drawers.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://orgmode.org/manual/Drawers.html#Drawers&#34;&gt;orgmode.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Of course you can use &lt;a href=&#34;https://orgmode.org/manual/Properties-and-Columns.html#Properties-and-Columns&#34;&gt;properties drawer&lt;/a&gt; to implement simple database capabilities, but it has one important limitation - values are mere text, so you can&#39;t have real Org mode links there, meaning that &lt;a href=&#34;https://orgmode.org/worg/dev/org-element-api.html&#34;&gt;Element API&lt;/a&gt;, Org roam and some other tools &lt;strong&gt;do not&lt;/strong&gt; recognise them as links.&lt;/p&gt; &#xA;&lt;p&gt;Metadata provided by library is just a part of your note content, meaning that it incorporates well into existing tools. Sure enough it&#39;s not as rich as properties and is not as battle tested as properties, but you can give them a try.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;orgbed940c&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org6d08a53&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;vulpea&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This one-stop module contains some generic functions that didn&#39;t find their place in separate modules. It also imports every other module.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vulpea-find&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A one stop function to select and find (visit) a note that can be used both interactively (e.g. &lt;code&gt;M-x vulpea-find&lt;/code&gt;) and programatically. In the later case it provides multiple configuration bits.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;OTHER-WINDOW&lt;/code&gt; argument is nil (default), the note is visited in the current window. In order to use the &lt;em&gt;other&lt;/em&gt; window, you may use universal argument during interactive usage (e.g. &lt;code&gt;C-u M-x vulpea-find&lt;/code&gt;) or pass a non-nil value as argument:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(vulpea-find :other-window t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When &lt;code&gt;REQUIRE-MATCH&lt;/code&gt; argument is nil (default), user may select a non-existent note and the capture process is started. In order to disallow selection of non-existent note, pass non-nil value:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(vulpea-find :require-match t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;vulpea-find&lt;/code&gt; allows to configure candidates for selection in two ways - by controlling source of candidates and by controlling filtering function.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Filter function&lt;/p&gt; &lt;p&gt;Filtering is easy. It&#39;s just a function that takes one argument - &lt;code&gt;vulpea-note&lt;/code&gt; that is being filtered. You can configure default filtering function called &lt;code&gt;vulpea-find-default-filter&lt;/code&gt; (so it is applied to interactive usage) or pass an override for the default filtering function.&lt;/p&gt; &lt;p&gt;For example, you wish to list only file-level notes during interactive usage of &lt;code&gt;vulpea-find&lt;/code&gt; (to mimic how &lt;code&gt;org-roam-find&lt;/code&gt; was behaving in v1). For that you just need to configure the value of &lt;code&gt;vulpea-find-default-filter&lt;/code&gt; variable:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(setq vulpea-find-default-filter&#xA;      (lambda (note)&#xA;        (= (vulpea-note-level note) 0)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But of course, it&#39;s possible to override this behaviour when &lt;code&gt;vulpea-find&lt;/code&gt; is used programatically, just by passing filtering function as &lt;code&gt;FILTER-FN&lt;/code&gt; argument:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;;; by default `vulpea-find&#39; lists aliases, imagine that we want to&#xA;;; list only primary titles&#xA;(vulpea-find&#xA; :filter-fn (lambda (note)&#xA;              ;; primary-title is set only when title is one of the&#xA;              ;; aliases&#xA;              (null (vulpea-note-primary-title note))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Candidates function&lt;/p&gt; &lt;p&gt;As it was already mentioned, &lt;code&gt;vulpea-find&lt;/code&gt; allows to configure the source of candidates. This may be needed for performance considerations (e.g. to avoid filtering EVERY existing note in your database) or for some &#39;esoteric&#39; features (like ordering).&lt;/p&gt; &lt;p&gt;By default &lt;code&gt;vulpea-db-query&lt;/code&gt; is used as a source of candidates. Default source is controlled by &lt;code&gt;vulpea-find-default-candidates-source&lt;/code&gt; variable. You should change it only when your intention is to configure behaviour of &lt;code&gt;vulpea-find&lt;/code&gt; interactive usage. For example (an &#39;esoteric&#39; one):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(setq vulpea-find-default-candidates-source&#xA;      (lambda (filter)&#xA;        ;; sort notes by title, but keep in mind that your completion&#xA;        ;; framework might override this sorting, it&#39;s just an example&#xA;        (seq-sort-by&#xA;         #&#39;vulpea-note-title&#xA;         #&#39;string&amp;lt;&#xA;         (vulpea-db-query filter))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But in most cases you should not touch the configuration variable and instead apply an override via &lt;code&gt;CANDIDATES-FN&lt;/code&gt; argument. For example, if you wish to &#39;find&#39; a note linking to some specific note. Of course this can be achieved with a filtering function, but in this particular case performance can be drastically improved by overriding candidates source. You can achieve this by something along the lines:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;;; Let&#39;s say we have a note in the context. First, we use a&#xA;;; specialized query to find what links to a given note.&#xA;(let ((backlinks (vulpea-db-query-by-links-some&#xA;                  (list (cons &#34;id&#34; (vulpea-note-id note))))))&#xA;  ;; Secondly, we override default CANDIDATES-FN, so it simply&#xA;  ;; presents us a list of backlinks. We deliberately ignore filtering&#xA;  ;; function.&#xA;  (vulpea-find&#xA;   :candidates-fn (lambda (_) backlinks)&#xA;   :require-match t))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t rush into saving this function into your collection. It&#39;s already provided by &lt;code&gt;vulpea&lt;/code&gt; as &lt;code&gt;vulpea-find-backlink&lt;/code&gt;. Keep reading!&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vulpea-find-backlink&lt;/code&gt;&lt;/p&gt; &lt;p&gt;An interactive function to select and find (visit) a note linking to the currently visited note. Keep in mind that outlines with assigned &lt;code&gt;ID&lt;/code&gt; property are also treated as notes so you might want to go to beginning of buffer if you wish to select backlinks to current file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vulpea-insert&lt;/code&gt;&lt;/p&gt; &lt;p&gt;An interactive function to select a note and insert a link to it. When user selects non-existent note, it is captured via &lt;code&gt;org-roam-capture&lt;/code&gt; process (see &lt;code&gt;org-roam-capture-templates&lt;/code&gt;). Once the link is inserted, &lt;code&gt;vulpea-insert-handle-functions&lt;/code&gt; is called with inserted note as an argument, so you can easily perform any necessary post-insertion actions. Selection is controlled in a similar way to &lt;code&gt;vulpea-find&lt;/code&gt; - via global &lt;code&gt;vulpea-insert-default-filter&lt;/code&gt; or local filter.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Filter function&lt;/p&gt; &lt;p&gt;This argument is just a function that takes one argument - &lt;code&gt;vulpea-note&lt;/code&gt; that is being filtered. You can configure default filtering function called &lt;code&gt;vulpea-insert-default-filter&lt;/code&gt; (so it is applied to interactive usage) or pass an override for the default filtering function.&lt;/p&gt; &lt;p&gt;For example, you wish to list only file-level notes during interactive usage of &lt;code&gt;vulpea-insert&lt;/code&gt; (to mimic how &lt;code&gt;org-roam-find&lt;/code&gt; was behaving in v1). For that you just need to configure the value of &lt;code&gt;vulpea-insert-default-filter&lt;/code&gt; variable:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(setq vulpea-insert-default-filter&#xA;      (lambda (note)&#xA;        (= (vulpea-note-level note) 0)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But of course, it&#39;s possible to override this behaviour when &lt;code&gt;vulpea-insert&lt;/code&gt; is used programatically, just by passing filtering function as &lt;code&gt;FILTER-FN&lt;/code&gt; argument:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;;; by default `vulpea-insert&#39; lists aliases, imagine that we want to&#xA;;; list only primary titles&#xA;(vulpea-insert&#xA; (lambda (note)&#xA;   ;; primary-title is set only when title is one of the&#xA;   ;; aliases&#xA;   (null (vulpea-note-primary-title note))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Insertion handler&lt;/p&gt; &lt;p&gt;There are cases when you want to react somehow to link insertion. For this &lt;code&gt;vulpea&lt;/code&gt; provides a configuration variable &lt;code&gt;vulpea-insert-handle-functions&lt;/code&gt;, which is kind of a hook with argument - &lt;code&gt;vulpea-note&lt;/code&gt; that is linked.&lt;/p&gt; &lt;p&gt;For example, you want to tag an outline whenever a link to person is inserted (see some explanation of this use case in a dedicated &lt;a href=&#34;https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html&#34;&gt;blog post&lt;/a&gt;). For that you need to define a handler function first:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(defun my-vulpea-insert-handle (note)&#xA;  &#34;Hook to be called on NOTE after `vulpea-insert&#39;.&#34;&#xA;  (when-let* ((title (vulpea-note-title note))&#xA;              (tags (vulpea-note-tags note)))&#xA;    (when (seq-contains-p tags &#34;people&#34;)&#xA;      (save-excursion&#xA;        (ignore-errors&#xA;          (org-back-to-heading)&#xA;          (when (eq &#39;todo (org-element-property&#xA;                           :todo-type&#xA;                           (org-element-at-point)))&#xA;            (org-set-tags&#xA;             (seq-uniq&#xA;              (cons&#xA;               (vulpea--title-to-tag title)&#xA;               (org-get-tags nil t))))))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then you just need to add it as a hook:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(add-hook &#39;vulpea-insert-handle-functions&#xA;          #&#39;my-vulpea-insert-handle)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vulpea-create&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This function enables programmatic creation of new notes without the need to configure &lt;code&gt;org-roam-capture-templaces&lt;/code&gt;, but instead providing various bits to be inserted into new note. And yes, it returns you the created note. This function is heavily used in &lt;a href=&#34;https://github.com/d12frosted/vino&#34;&gt;vino&lt;/a&gt; and you can find several real world usage examples there.&lt;/p&gt; &lt;p&gt;The minimal usage example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(vulpea-create&#xA; &#34;Title of new note&#34;&#xA; &#34;relative/path/to/%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}.org&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will create a note file &lt;code&gt;relative/path/to/20211119082840-title-of-new-note.org&lt;/code&gt; with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;:PROPERTIES:&#xA;:ID:                     3dfd828f-fb73-41a6-9801-54bc17d41b57&#xA;:END:&#xA;#+title: Title of new note&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As you can see, thanks to &lt;code&gt;org-roam-capture&lt;/code&gt; and &lt;code&gt;org-capture&lt;/code&gt; system, this allows expansion of formatted text as long as expansion of variables from capture context. Read further to learn more.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Synchronous vs asynchronous&lt;/p&gt; &lt;p&gt;By default capture process is &#39;asynchronous&#39;, meaning that it waits for user input and confirmation. In some cases, &#39;synchronous&#39; creation is desired, so that note is created immediately and the created note is returned as result, so we can use it further. Example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-create&#xA;   &#34;immediate note&#34;&#xA;   &#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}.org&#34;&#xA;   :immediate-finish t)&#xA;#s(vulpea-note&#xA;   :id &#34;5733ca9e-5b42-4b6b-ace9-2fef1091d421&#34;&#xA;   :path &#34;/Users/d12frosted/Dropbox/vulpea/20211119095443-immediate_note.org&#34;&#xA;   :level 0&#xA;   :title &#34;immediate note&#34;&#xA;   :primary-title nil&#xA;   :aliases nil&#xA;   :tags nil&#xA;   :links nil&#xA;   :properties&#xA;   ((&#34;CATEGORY&#34; . &#34;20211119095443-immediate_note&#34;)&#xA;    (&#34;ID&#34; . &#34;5733ca9e-5b42-4b6b-ace9-2fef1091d421&#34;)&#xA;    (&#34;BLOCKED&#34; . &#34;&#34;)&#xA;    (&#34;FILE&#34; . &#34;/Users/d12frosted/Dropbox/vulpea/20211119095443-immediate_note.org&#34;)&#xA;    (&#34;PRIORITY&#34; . &#34;B&#34;))&#xA;   :meta nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And the content of created file is:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;:PROPERTIES:&#xA;:ID:                     5733ca9e-5b42-4b6b-ace9-2fef1091d421&#xA;:END:&#xA;#+title: immediate note&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;How cool is that? Pretty cool, I&#39;d say.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Extra content&lt;/p&gt; &lt;p&gt;Of course, in many cases we want to add much more than that into note file. In general, the file has the following format:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;:PROPERTIES:&#xA;:ID: ID&#xA;PROPERTIES if present&#xA;:END:&#xA;#+title: TITLE&#xA;#+filetags: TAGS if present&#xA;HEAD if present&#xA;&#xA;BODY if present&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So you can provide the following arguments controlling content:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;properties&lt;/code&gt; - a list consisting of &lt;code&gt;(key_str . val_str)&lt;/code&gt; pairs added to properties block;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;tags&lt;/code&gt; is a list of strings inserted as &lt;code&gt;filetags&lt;/code&gt; option (in a proper format);&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;head&lt;/code&gt; - a string inserted after &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;filetags&lt;/code&gt;;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;body&lt;/code&gt; - a string inserted after &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;filetags&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt;;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;Simple example to illustrate:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-create&#xA;   &#34;Rich note&#34;&#xA;   &#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}.org&#34;&#xA;   :properties &#39;((&#34;COUNTER&#34; . &#34;1&#34;)&#xA;                 (&#34;STATUS&#34; . &#34;ignore&#34;)&#xA;                 (&#34;ROAM_ALIASES&#34; . &#34;\&#34;Very rich note with an alias\&#34;&#34;))&#xA;   :tags &#39;(&#34;documentation&#34; &#34;showcase&#34;)&#xA;   :head &#34;#+author: unknown\n#+date: today&#34;&#xA;   :body &#34;It was a very nice day.\n\nBut I didn&#39;t feel that.&#34;&#xA;   :immediate-finish t)&#xA;#s(vulpea-note&#xA;   :id &#34;568d4e29-76dd-4630-82f9-e1e2006bebdc&#34;&#xA;   :path &#34;/Users/d12frosted/Dropbox/vulpea/20211119095644-rich_note.org&#34;&#xA;   :level 0&#xA;   :title &#34;Rich note&#34;&#xA;   :primary-title nil&#xA;   :aliases&#xA;   (&#34;Very rich note with an alias&#34;)&#xA;   :tags&#xA;   (&#34;documentation&#34; &#34;showcase&#34;)&#xA;   :links nil&#xA;   :properties&#xA;   ((&#34;CATEGORY&#34; . &#34;20211119095644-rich_note&#34;)&#xA;    (&#34;ROAM_ALIASES&#34; . &#34;Very rich note with an alias&#34;)&#xA;    (&#34;STATUS&#34; . &#34;ignore&#34;)&#xA;    (&#34;COUNTER&#34; . &#34;1&#34;)&#xA;    (&#34;ID&#34; . &#34;568d4e29-76dd-4630-82f9-e1e2006bebdc&#34;)&#xA;    (&#34;BLOCKED&#34; . &#34;&#34;)&#xA;    (&#34;FILE&#34; . &#34;/Users/d12frosted/Dropbox/vulpea/20211119095644-rich_note.org&#34;)&#xA;    (&#34;PRIORITY&#34; . &#34;B&#34;))&#xA;   :meta nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This creates the following note:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;:PROPERTIES:&#xA;:ID:                     568d4e29-76dd-4630-82f9-e1e2006bebdc&#xA;:COUNTER:                1&#xA;:STATUS:                 ignore&#xA;:ROAM_ALIASES:           &#34;Very rich note with an alias&#34;&#xA;:END:&#xA;#+title: Rich note&#xA;#+filetags: :documentation:showcase:&#xA;#+author: unknown&#xA;#+date: today&#xA;&#xA;It was a very nice day.&#xA;&#xA;But I didn&#39;t feel that.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Context variables&lt;/p&gt; &lt;p&gt;Any content piece (except for title) may have arbitrary amount of context variables in form &lt;code&gt;${VAR}&lt;/code&gt; that are expanded during note creation. By default there are 3 context variables - &lt;code&gt;slug&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;. But you may add extra variables to the context by passing &lt;code&gt;context&lt;/code&gt; variable:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-create&#xA;   &#34;A Book&#34;&#xA;   &#34;${slug}.org&#34;&#xA;   :context (list :name &#34;Frodo&#34;)&#xA;   :immediate-finish t&#xA;   :properties &#39;((&#34;AUTHOR&#34; . &#34;${name}&#34;))&#xA;   :tags &#39;(&#34;@${name}&#34;)&#xA;   :head &#34;#+author: ${name}&#34;&#xA;   :body &#34;This note was create by ${name}&#34;)&#xA;#s(vulpea-note&#xA;   :id &#34;1fecedf8-ccda-4d68-875e-111b8cc5992e&#34;&#xA;   :path &#34;/home/borysb/Dropbox/vulpea/a_book.org&#34;&#xA;   :level 0&#xA;   :title &#34;A Book&#34;&#xA;   :primary-title nil&#xA;   :aliases nil&#xA;   :tags&#xA;   (&#34;@Frodo&#34;)&#xA;   :links nil&#xA;   :properties&#xA;   ((&#34;CATEGORY&#34; . &#34;a_book&#34;)&#xA;    (&#34;AUTHOR&#34; . &#34;Frodo&#34;)&#xA;    (&#34;ID&#34; . &#34;1fecedf8-ccda-4d68-875e-111b8cc5992e&#34;)&#xA;    (&#34;BLOCKED&#34; . &#34;&#34;)&#xA;    (&#34;FILE&#34; . &#34;/home/borysb/Dropbox/vulpea/a_book.org&#34;)&#xA;    (&#34;PRIORITY&#34; . &#34;B&#34;))&#xA;   :meta nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This creates the following note:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;:PROPERTIES:&#xA;:ID:                     1fecedf8-ccda-4d68-875e-111b8cc5992e&#xA;:AUTHOR:                 Frodo&#xA;:END:&#xA;#+title: A Book&#xA;#+filetags: :@Frodo:&#xA;#+author: Frodo&#xA;&#xA;This note was create by Frodo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please keep in mind that you cannot override the default context via &lt;code&gt;context&lt;/code&gt; variable.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Mandatory ID&lt;/p&gt; &lt;p&gt;By default &lt;code&gt;id&lt;/code&gt; is being generated for you and you can not avoid it. This is what allows &lt;code&gt;vulpea-create&lt;/code&gt; to return created note for you. In some cases you might want to provide &lt;code&gt;id&lt;/code&gt; upfront instead of relying on generation. And &lt;code&gt;vulpea-create&lt;/code&gt; has an argument for that.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-create&#xA; &#34;Custom id&#34;&#xA; &#34;${slug}.org&#34;&#xA; :id &#34;xyz&#34;&#xA; :immediate-finish t)&#xA;#s(vulpea-note&#xA;   :id &#34;xyz&#34;&#xA;   :path &#34;/home/borysb/Dropbox/vulpea/custom_id.org&#34;&#xA;   :level 0&#xA;   :title &#34;Custom id&#34;&#xA;   :primary-title nil&#xA;   :aliases nil&#xA;   :tags nil&#xA;   :links nil&#xA;   :properties&#xA;   ((&#34;CATEGORY&#34; . &#34;custom_id&#34;)&#xA;    (&#34;ID&#34; . &#34;xyz&#34;)&#xA;    (&#34;BLOCKED&#34; . &#34;&#34;)&#xA;    (&#34;FILE&#34; . &#34;/home/borysb/Dropbox/vulpea/custom_id.org&#34;)&#xA;    (&#34;PRIORITY&#34; . &#34;B&#34;))&#xA;   :meta nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This creates the following note:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;:PROPERTIES:&#xA;:ID:                     xyz&#xA;:END:&#xA;#+title: Custom id&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org1fbb617&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;vulpea-select&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Common interface to select (e.g. &lt;code&gt;completing-read&lt;/code&gt;) a note from the set of notes. Used in functions like &lt;code&gt;vulpea-find&lt;/code&gt;, &lt;code&gt;vulpea-find-backlink&lt;/code&gt;, &lt;code&gt;vulpea-insert&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;div class=&#34;html&#34; id=&#34;org6de4361&#34;&gt; &#xA; &lt;p&gt; &amp;lt;div&amp;gt; &amp;lt;img src=&#34;images/vulpea-select.png&#34; width=&#34;100%&#34;/&amp;gt; &amp;lt;p align=&#34;center&#34;&amp;gt;&amp;lt;em&amp;gt;Narrowing by aliases and tags&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;There are two variants of selection: &lt;code&gt;vulpea-select-from&lt;/code&gt; and &lt;code&gt;vulpea-select&lt;/code&gt;. The difference between them is that the former accepts a list of notes to select from and the latter accepts a filter function which is applied to all notes in the database. Here are two examples to illustrate that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Select a note from the list of passed notes&#xA;(vulpea-select-from&#xA; &#34;Grape&#34;&#xA; ;; this function returns only notes that are tagged as &#39;wine&#39; and&#xA; ;; &#39;grape&#39; at the same time (see `vulpea-db &#39;documentation for more&#xA; ;; information on this function).&#xA; (vulpea-db-query-by-tags-every &#39;(&#34;wine&#34; &#34;grape&#34;))&#xA; :require-match t)&#xA;&#xA;;; Select a note from all notes filtered by some predicate.&#xA;(vulpea-select&#xA; &#34;Grape&#34;&#xA; :filter-fn&#xA; ;; We just manually check that the note is tagged as &#39;wine&#39; and&#xA; ;; &#39;grape&#39; at the same time.&#xA; (lambda (note)&#xA;   (let ((tags (vulpea-note-tags note)))&#xA;     (and (seq-contains-p tags &#34;wine&#34;)&#xA;          (seq-contains-p tags &#34;grape&#34;)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both of these examples achieve the same goal. The only practical difference here is performance. Sometimes you either already have a list of notes that you want to select from (so there is no need to filter all the database just to select those notes you already have) or you have a way to fetch a list of notes in a much faster way than by filtering whole database. See &lt;code&gt;vulpea-db&lt;/code&gt; for more information on performance.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Visual configuration&lt;/p&gt; &lt;p&gt;Each note is formatted using two functions - &lt;code&gt;vulpea-select-describe-fn&lt;/code&gt; and &lt;code&gt;vulpea-select-annotate-fn&lt;/code&gt;. Both of them are called by &lt;code&gt;vulpea-select&lt;/code&gt; interface with a note as argument and their result is concatenated. The only difference between them is purely aesthetical - description has normal face and annotation has &lt;code&gt;completions-annotations&lt;/code&gt; face.&lt;/p&gt; &lt;p&gt;By default &lt;code&gt;vulpea-select-describe-fn&lt;/code&gt; is defined as &lt;code&gt;vulpea-note-title&lt;/code&gt;; and &lt;code&gt;vulpea-select-annotate-fn&lt;/code&gt; returns aliases and tags if present. To illustrate how it works, let&#39;s use some fake notes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(make-vulpea-note&#xA; :id (org-id-new)&#xA; :path (expand-file-name &#34;note1.org&#34; org-roam-directory)&#xA; :title &#34;Note without aliases and without tags&#34;)&#xA;&#xA;(make-vulpea-note&#xA; :id (org-id-new)&#xA; :path (expand-file-name &#34;note2.org&#34; org-roam-directory)&#xA; :title &#34;Note with single tag&#34;&#xA; :tags &#39;(&#34;tag1&#34;))&#xA;&#xA;(make-vulpea-note&#xA; :id (org-id-new)&#xA; :path (expand-file-name &#34;note3.org&#34; org-roam-directory)&#xA; :title &#34;Note with multiple tags&#34;&#xA; :tags &#39;(&#34;tag1&#34; &#34;tag2&#34;))&#xA;&#xA;(make-vulpea-note&#xA; :id (org-id-new)&#xA; :path (expand-file-name &#34;subdir/aliases.org&#34; org-roam-directory)&#xA; :title &#34;Main title&#34;&#xA; :aliases &#39;(&#34;Alias 1&#34; &#34;Alias 2&#34;))&#xA;&#xA;(make-vulpea-note&#xA; :id (org-id-new)&#xA; :path (expand-file-name &#34;subdir/aliases.org&#34; org-roam-directory)&#xA; :title &#34;Alias 1&#34;&#xA; :primary-title &#34;Main title&#34;&#xA; :aliases &#39;(&#34;Alias 1&#34; &#34;Alias 2&#34;))&#xA;&#xA;(make-vulpea-note&#xA; :id (org-id-new)&#xA; :path (expand-file-name &#34;subdir/aliases.org&#34; org-roam-directory)&#xA; :title &#34;Alias 1&#34;&#xA; :primary-title &#34;Main title&#34;&#xA; :aliases &#39;(&#34;Alias 1&#34; &#34;Alias 2&#34;)&#xA; :tags &#39;(&#34;tag1&#34; &#34;tag2&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These notes are converted into the following lines:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;Note without aliases and without tags&#34;&#xA;&#34;Note with single tag #tag1&#34;&#xA;&#34;Note with multiple tags #tag1 #tag2&#34;&#xA;&#34;Main title&#34;&#xA;&#34;Alias 1 (Main title)&#34;&#xA;&#34;Alias 1 (Main title) #tag1 #tag2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;div class=&#34;html&#34; id=&#34;org807e0fb&#34;&gt; &#xA;   &lt;p&gt; &amp;lt;div&amp;gt; &amp;lt;img src=&#34;images/vulpea-select-example-1.png&#34; width=&#34;50%&#34;/&amp;gt; &amp;lt;p align=&#34;center&#34;&amp;gt;&amp;lt;em&amp;gt;Default describe behaviour&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &lt;/p&gt; &#xA;  &lt;/div&gt; &lt;p&gt;Of course, you can configure this behaviour. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;;; relative path // title&#xA;(setq vulpea-select-describe-fn&#xA;      (lambda (note)&#xA;        (concat&#xA;         (string-remove-prefix&#xA;          org-roam-directory&#xA;          (vulpea-note-path note))&#xA;         &#34; // &#34;&#xA;         (vulpea-note-title note))))&#xA;&#xA;;; display tags and ignore aliases&#xA;(setq vulpea-select-annotate-fn&#xA;      (lambda (note)&#xA;        (let* ((tags-str (mapconcat&#xA;                          (lambda (x) (concat &#34;#&#34; x))&#xA;                          (vulpea-note-tags note)&#xA;                          &#34; &#34;)))&#xA;          (if (string-empty-p tags-str)&#xA;              &#34;&#34;&#xA;            (concat &#34; &#34; tags-str)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This results in the following lines:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;note1.org // Note without aliases and without tags&#34;&#xA;&#34;note2.org // Note with single tag #tag1&#34;&#xA;&#34;note3.org // Note with multiple tags #tag1 #tag2&#34;&#xA;&#34;subdir/aliases.org // Main title&#34;&#xA;&#34;subdir/aliases.org // Alias 1&#34;&#xA;&#34;subdir/aliases.org // Alias 1 #tag1 #tag2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;div class=&#34;html&#34; id=&#34;orgf4b5b46&#34;&gt; &#xA;   &lt;p&gt; &amp;lt;div&amp;gt; &amp;lt;img src=&#34;images/vulpea-select-example-2.png&#34; width=&#34;50%&#34;/&amp;gt; &amp;lt;p align=&#34;center&#34;&amp;gt;&amp;lt;em&amp;gt;Custom describe behaviour&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &lt;/p&gt; &#xA;  &lt;/div&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;orga3d5ac1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;vulpea-note&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This module contains &lt;code&gt;vulpea-note&lt;/code&gt; definition, which is represented as a structure with the following slots/fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-id&lt;/code&gt; - &lt;code&gt;ID&lt;/code&gt; property of note (file-level or heading level).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-path&lt;/code&gt; - absolute path to the note (even if the note is actually a heading);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-level&lt;/code&gt; - level of the note inside &lt;code&gt;:path&lt;/code&gt;, with &lt;code&gt;0&lt;/code&gt; being a file-level note and other numbers being a header;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-title&lt;/code&gt; - title of the note (it might be an alias);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-primary-title&lt;/code&gt; - primary title of the note (present only when &lt;code&gt;title&lt;/code&gt; is an alias);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-aliases&lt;/code&gt; - aliases of the note;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-links&lt;/code&gt; - list of links, each link being represented as &lt;code&gt;cons&lt;/code&gt; of type and link;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-tags&lt;/code&gt; - tags of the note;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-note-meta&lt;/code&gt; - associative list of &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org74ad68c&#34;&gt;metadata&lt;/a&gt;, where key is a string and the value is a list of strings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If &lt;code&gt;ID&lt;/code&gt; is not present in the note structure, this note is treated as non-existent. For example, &lt;code&gt;vulpea-select&lt;/code&gt; returns such a note, when &lt;code&gt;require-match&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; and the user selects non-existent note.&lt;/p&gt; &#xA;&lt;p&gt;Example of a note:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-db-get-by-id &#34;7705e5e4-bcd4-4e16-9ba7-fda8acdefe8c&#34;)&#xA;#s(vulpea-note :id &#34;7705e5e4-bcd4-4e16-9ba7-fda8acdefe8c&#34;&#xA;               :path &#34;/Users/d12frosted/Dropbox/vulpea/20200407160812-kitsune_book.org&#34;&#xA;               :level 0&#xA;               :title &#34;Kitsune Book&#34;&#xA;               :primary-title nil&#xA;               :aliases&#xA;               (&#34;vulpea&#34; &#34;Kitsune no Hon&#34;)&#xA;               :tags&#xA;               (&#34;personal&#34;)&#xA;               :links&#xA;               ((&#34;https&#34; . &#34;https://github.com/d12frosted/vulpea&#34;)&#xA;                (&#34;https&#34; . &#34;https://github.com/d12frosted/environment&#34;)&#xA;                (&#34;https&#34; . &#34;https://github.com/d12frosted/vino&#34;))&#xA;               :properties&#xA;               ((&#34;CATEGORY&#34; . &#34;20200407160812-kitsune_book&#34;)&#xA;                (&#34;ROAM_ALIASES&#34; . &#34;vulpea \&#34;Kitsune no Hon\&#34;&#34;)&#xA;                (&#34;ID&#34; . &#34;7705e5e4-bcd4-4e16-9ba7-fda8acdefe8c&#34;)&#xA;                (&#34;BLOCKED&#34; . &#34;&#34;)&#xA;                (&#34;FILE&#34; . &#34;/Users/d12frosted/Dropbox/vulpea/20200407160812-kitsune_book.org&#34;)&#xA;                (&#34;PRIORITY&#34; . &#34;B&#34;))&#xA;               :meta&#xA;               ((&#34;link&#34; &#34;[[https://github.com/d12frosted/vulpea][vulpea]]&#34;)&#xA;                (&#34;users&#34; &#34;[[https://github.com/d12frosted/environment][environment]]&#34; &#34;[[https://github.com/d12frosted/vino][vino]]&#34;)&#xA;                (&#34;status&#34; &#34;stable&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Tags predicate&lt;/p&gt; &lt;p&gt;In some cases you want to check if a note is tagged somehow. Vulpea provides two shortcuts for this:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;vulpea-note-tagged-all-p&lt;/code&gt; - return non-nil if a NOTE is tagged by all of the TAGS.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;vulpea-note-tagged-any-p&lt;/code&gt; - return non-nil if a NOTE is tagged by any of the TAGS.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;(setq note (make-vulpea-note :tags &#39;(&#34;tag-1&#34; &#34;tag-2&#34; &#34;tag-3&#34;))) #s(vulpea-note nil nil nil nil nil nil (&#34;tag-1&#34; &#34;tag-2&#34; &#34;tag-3&#34;) nil nil nil)&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;(vulpea-note-tagged-all-p note &#34;tag-2&#34; &#34;tag-3&#34;) t&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;(vulpea-note-tagged-all-p note &#34;tag-2&#34; &#34;tag-3&#34; &#34;tag-4&#34;) nil&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;(vulpea-note-tagged-any-p note &#34;tag-2&#34; &#34;tag-3&#34;) t&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;(vulpea-note-tagged-all-p note &#34;tag-2&#34; &#34;tag-3&#34; &#34;tag-4&#34;) nil&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;(vulpea-note-tagged-all-p note &#34;tag-4&#34;) nil&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Accessing meta&lt;/p&gt; &lt;p&gt;In most cases you should not directly access &lt;code&gt;vulpea-note-meta&lt;/code&gt;, but instead you should use one of the helpers - &lt;code&gt;vulpea-note-meta-get&lt;/code&gt; and &lt;code&gt;vulpea-note-meta-get-list&lt;/code&gt;. The only difference between these two functions is how they treat repeating keys. The former returns only the first occurrence of the key, while the latter returns a list.&lt;/p&gt; &lt;p&gt;Let&#39;s take the following note as example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-db-get-by-id &#34;05907606-f836-45bf-bd36-a8444308eddd&#34;)&#xA;#s(vulpea-note :id &#34;05907606-f836-45bf-bd36-a8444308eddd&#34;&#xA;               :path &#34;...&#34;&#xA;               ...&#xA;               :meta&#xA;               ((&#34;name&#34; &#34;some name&#34;)&#xA;                (&#34;tags&#34; &#34;tag 1&#34;)&#xA;                (&#34;tags&#34; &#34;tag 2&#34;)&#xA;                (&#34;tags&#34; &#34;tag 3&#34;)&#xA;                (&#34;numbers&#34; &#34;12&#34;)&#xA;                (&#34;numbers&#34; &#34;18&#34;)&#xA;                (&#34;numbers&#34; &#34;24&#34;)&#xA;                (&#34;singleton&#34; &#34;only value&#34;)&#xA;                (&#34;symbol&#34; &#34;red&#34;)&#xA;                (&#34;url&#34; &#34;[[https://en.wikipedia.org/wiki/Frappato][wikipedia.org]]&#34;)&#xA;                (&#34;link&#34; &#34;[[id:444f94d7-61e0-4b7c-bb7e-100814c6b4bb][Note without META]]&#34;)&#xA;                (&#34;references&#34; &#34;[[id:444f94d7-61e0-4b7c-bb7e-100814c6b4bb][Note without META]]&#34;)&#xA;                (&#34;references&#34; &#34;[[id:5093fc4e-8c63-4e60-a1da-83fc7ecd5db7][Reference]]&#34;)&#xA;                (&#34;answer&#34; &#34;42&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As you can see, keys and values are strings. But that&#39;s not always useful, that&#39;s why &lt;code&gt;vulpea-note-meta-get&lt;/code&gt; and &lt;code&gt;vulpea-note-meta-get-list&lt;/code&gt; support string parsing of some common &#39;types&#39;: string (default), number, link (path of the link - either ID of the linked note or raw link), note (queries note by id from db) and symbol.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-note-meta-get note &#34;name&#34;)&#xA;&#34;some name&#34;&#xA;&#xA;&amp;gt; (vulpea-note-meta-get note &#34;name&#34; &#39;string)&#xA;&#34;some name&#34;&#xA;&#xA;&amp;gt; (vulpea-note-meta-get-list note &#34;name&#34;)&#xA;(&#34;some name&#34;)&#xA;&#xA;&amp;gt; (vulpea-note-meta-get note &#34;tags&#34;)&#xA;&#34;tag 1&#34;&#xA;&#xA;&amp;gt; (vulpea-note-meta-get-list note &#34;tags&#34;)&#xA;(&#34;tag 1&#34; &#34;tag 2&#34; &#34;tag 3&#34;)&#xA;&#xA;&amp;gt; (vulpea-note-meta-get note &#34;numbers&#34; &#39;number)&#xA;12&#xA;&#xA;&amp;gt; (vulpea-note-meta-get-list note &#34;numbers&#34; &#39;number)&#xA;(12 18 24)&#xA;&#xA;&amp;gt; (vulpea-note-meta-get note &#34;symbol&#34;)&#xA;&#34;red&#34;&#xA;&#xA;&amp;gt; (vulpea-note-meta-get note &#34;symbol&#34; &#39;symbol)&#xA;red&#xA;&#xA;&amp;gt; (vulpea-note-meta-get note &#34;url&#34; &#39;link)&#xA;&#34;https://en.wikipedia.org/wiki/Frappato&#34;&#xA;&#xA;&amp;gt; (vulpea-note-meta-get note &#34;link&#34; &#39;link)&#xA;&#34;444f94d7-61e0-4b7c-bb7e-100814c6b4bb&#34;&#xA;&#xA;&amp;gt; (vulpea-note-meta-get-list note &#34;references&#34; &#39;note)&#xA;(#s(vulpea-note :id &#34;444f94d7-61e0-4b7c-bb7e-100814c6b4bb&#34;&#xA;                :path &#34;...&#34;&#xA;                :title &#34;Note without META&#34;&#xA;                ...)&#xA; #s(vulpea-note :id &#34;5093fc4e-8c63-4e60-a1da-83fc7ecd5db7&#34;&#xA;                :path &#34;...&#34;&#xA;                :title &#34;Reference&#34;&#xA;                ...))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org8c114e4&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;vulpea-db&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This module contains functions to query notes from data base. In order for most of these functions to operate, one needs to enable &lt;code&gt;vulpea-db-autosync-mode&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orgd25119b&#34;&gt;Install&lt;/a&gt; section), for example, by using &lt;code&gt;vulpea-db-autosync-enable&lt;/code&gt;. This hooks into &lt;code&gt;org-roam.db&lt;/code&gt; by adding two extra tables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;meta&lt;/code&gt; - for storing &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org74ad68c&#34;&gt;Metadata&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notes&lt;/code&gt; - a view table of fully materialized note (see &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#orge2e8069&#34;&gt;Performance&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; You might need to perform a full re-sync of &lt;code&gt;org-roam.db&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vulpea-db-get-by-id&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The simplest function to get a note with some &lt;code&gt;ID&lt;/code&gt;. Supports both file-level notes and outlines/headings. Returns &lt;code&gt;vulpea-note&lt;/code&gt; if note with &lt;code&gt;ID&lt;/code&gt; exists and nil otherwise.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-db-get-by-id &#34;7705e5e4-bcd4-4e16-9ba7-fda8acdefe8c&#34;)&#xA;  #s(vulpea-note :id &#34;7705e5e4-bcd4-4e16-9ba7-fda8acdefe8c&#34;&#xA;                 :path &#34;/Users/d12frosted/Dropbox/vulpea/20200407160812-kitsune_book.org&#34;&#xA;                 :level 0&#xA;                 :title &#34;Kitsune Book&#34;&#xA;                 :primary-title nil&#xA;                 :aliases&#xA;                 (&#34;vulpea&#34; &#34;Kitsune no Hon&#34;)&#xA;                 :tags&#xA;                 (&#34;personal&#34;)&#xA;                 :links&#xA;                 ((&#34;https&#34; . &#34;https://github.com/d12frosted/vulpea&#34;)&#xA;                  (&#34;https&#34; . &#34;https://github.com/d12frosted/environment&#34;)&#xA;                  (&#34;https&#34; . &#34;https://github.com/d12frosted/vino&#34;))&#xA;                 :properties&#xA;                 ((&#34;CATEGORY&#34; . &#34;20200407160812-kitsune_book&#34;)&#xA;                  (&#34;ROAM_ALIASES&#34; . &#34;vulpea \&#34;Kitsune no Hon\&#34;&#34;)&#xA;                  (&#34;ID&#34; . &#34;7705e5e4-bcd4-4e16-9ba7-fda8acdefe8c&#34;)&#xA;                  (&#34;BLOCKED&#34; . &#34;&#34;)&#xA;                  (&#34;FILE&#34; . &#34;/Users/d12frosted/Dropbox/vulpea/20200407160812-kitsune_book.org&#34;)&#xA;                  (&#34;PRIORITY&#34; . &#34;B&#34;))&#xA;                 :meta&#xA;                 ((&#34;link&#34; &#34;[[https://github.com/d12frosted/vulpea][vulpea]]&#34;)&#xA;                  (&#34;users&#34; &#34;[[https://github.com/d12frosted/environment][environment]]&#34; &#34;[[https://github.com/d12frosted/vino][vino]]&#34;)&#xA;                  (&#34;status&#34; &#34;stable&#34;)))&#xA;&#xA;&amp;gt; (vulpea-db-get-by-id &#34;xyz&#34;)&#xA;nil&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vulpea-db-query&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Function to query notes from database with optional predicate. This function is very powerful as it allows to apply Emacs Lisp predicate on &lt;em&gt;every&lt;/em&gt; &lt;code&gt;vulpea-note&lt;/code&gt; in your database. This might be not very efficient on big set of notes, in such cases use specialized query functions.&lt;/p&gt; &lt;p&gt;When predicate is not passed, &lt;code&gt;vulpea-db-query&lt;/code&gt; returns ALL notes from your database.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (seq-length (vulpea-db-query))&#xA;9554&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since &lt;code&gt;vulpea-note&lt;/code&gt; contains so much information, you can do many complex things, with &lt;code&gt;vulpea-db-query&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-db-query&#xA;   (lambda (note)&#xA;     (and&#xA;      (seq-contains-p (vulpea-note-links note) (cons &#34;id&#34; &#34;8f62b3bd-2a36-4227-a0d3-4107cd8dac19&#34;))&#xA;      (or&#xA;       (seq-contains-p (vulpea-note-tags note) &#34;grape&#34;)&#xA;       (seq-contains-p (vulpea-note-tags note) &#34;cellar&#34;)))))&#xA;# 15 notes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Custom SQL&lt;/p&gt; &lt;p&gt;As you can see, &lt;code&gt;vulpea-db-query&lt;/code&gt; doesn&#39;t allow to pass any custom SQL for filtering or whatnot. For future-proof code you should avoid querying stuff manually from database, but in case you need to, just use &lt;code&gt;org-roam-db-query&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (org-roam-db-query&#xA;   [:select title&#xA;    :from notes&#xA;    :limit 1])&#xA;((&#34;Arianna Occhipinti&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specialized queries&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-db-query-by-tags-some&lt;/code&gt; - return all notes tagged with one of the provided &lt;code&gt;TAGS&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-db-query-by-tags-every&lt;/code&gt; - return all notes tagged by every tag from the list of provided &lt;code&gt;TAGS&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-db-query-by-links-some&lt;/code&gt; - return all notes linking at least one of the provided &lt;code&gt;DESTINATIONS&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-db-query-by-links-every&lt;/code&gt; - return all notes linking each and every provided &lt;code&gt;DESTINATIONS&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other functions&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-db-get-id-by-file&lt;/code&gt; - function to get &lt;code&gt;ID&lt;/code&gt; of a note represented by &lt;code&gt;FILE&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-db-get-file-by-id&lt;/code&gt; - function to get &lt;code&gt;FILE&lt;/code&gt; of a note represented by &lt;code&gt;ID&lt;/code&gt;. Supports headings of the note.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-db-search-by-title&lt;/code&gt; - function to query notes with &lt;code&gt;TITLE&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org714ea4a&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;vulpea-meta&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This module contains functions for manipulating note &lt;a href=&#34;https://raw.githubusercontent.com/d12frosted/vulpea/master/#org74ad68c&#34;&gt;metadata&lt;/a&gt; represented by the first description list in the note, e.g. list like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- key1 :: value1&#xA;- key2 :: value21&#xA;- key2 :: value22&#xA;- key3 :: value3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Functions of interest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-meta&lt;/code&gt; - function to get metadata from &lt;code&gt;NOTE-OR-ID&lt;/code&gt;. In most cases you should not use this function unless performance is important. In this case, take a look at bang functions, e.g. &lt;code&gt;vulpea-meta-get!&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-meta-get&lt;/code&gt; - function to get a value of &lt;code&gt;PROP&lt;/code&gt; for note with &lt;code&gt;ID&lt;/code&gt;. Value is parsed based on the passed &lt;code&gt;TYPE&lt;/code&gt; or as a string if omitted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-meta-get-list&lt;/code&gt; - function to get all values of &lt;code&gt;PROP&lt;/code&gt; for note with &lt;code&gt;ID&lt;/code&gt;. Values are parsed based on the passed &lt;code&gt;TYPE&lt;/code&gt; or as a string if omitted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-meta-set&lt;/code&gt; - function to set &lt;code&gt;VALUE&lt;/code&gt; of &lt;code&gt;PROP&lt;/code&gt; for &lt;code&gt;NOTE-OR-ID&lt;/code&gt;. Supports multi-value properties.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-meta-add&lt;/code&gt; - interactive version of &lt;code&gt;vulpea-meta-set&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-meta-add-list&lt;/code&gt; - interactive version of &lt;code&gt;vulpea-meta-set&lt;/code&gt; that operates on list values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-meta-remove&lt;/code&gt; - interactive function to remove a &lt;code&gt;PROP&lt;/code&gt; for &lt;code&gt;NOTE-OR-ID&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-meta-clean&lt;/code&gt; - interactive function to remove all meta for &lt;code&gt;NOTE-OR-ID&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;orgcc1a7f2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;vulpea-buffer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This module contains functions for prop and meta manipulations in current buffer.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Buffer properties&lt;/p&gt; &lt;p&gt;Buffer properties are key-values defined as &lt;code&gt;#+KEY: VALUE&lt;/code&gt; in the header of buffer.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-title-get&lt;/code&gt; - function to get title of the current buffer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-title-set&lt;/code&gt; - function to set title of the current buffer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-tags-get&lt;/code&gt; - function to get list of tags.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-tags-set&lt;/code&gt; - function to set/replace the value of &lt;code&gt;#+filetags&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-tags-add&lt;/code&gt; - function to add a tag to &lt;code&gt;#+filetags&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-tags-remove&lt;/code&gt; - function to remove a tag from &lt;code&gt;#+filetags&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-prop-set&lt;/code&gt; - function to set a &lt;code&gt;VALUE&lt;/code&gt; of property with &lt;code&gt;NAME&lt;/code&gt; in the current buffer, e.g. property in the buffer header using &lt;code&gt;#+NAME: value&lt;/code&gt; format.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-prop-set-list&lt;/code&gt; - function to set a value of property with &lt;code&gt;NAME&lt;/code&gt; to the list of &lt;code&gt;VALUES&lt;/code&gt; in the current buffer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-prop-get&lt;/code&gt; - function to get a value of property with &lt;code&gt;NAME&lt;/code&gt; from the current buffer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-prop-get-list&lt;/code&gt; - function to get a value of property with &lt;code&gt;NAME&lt;/code&gt; as a list separated by some &lt;code&gt;SEPARATORS&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-prop-remove&lt;/code&gt; - function to remove a property with &lt;code&gt;NAME&lt;/code&gt; from the current buffer.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Metadata&lt;/p&gt; &lt;p&gt;Metadata is defined as the first description list in the buffer, e.g. list like:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;- key1 :: value1&#xA;- key2 :: value21&#xA;- key2 :: value22&#xA;- key3 :: value3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-meta&lt;/code&gt; - function to get metadata from current buffer. By it&#39;s own it has little value, use the following functions to manipulate it.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-meta-get!&lt;/code&gt; - function to get a value of &lt;code&gt;PROP&lt;/code&gt; from &lt;code&gt;META&lt;/code&gt; (result of &lt;code&gt;vulpea-buffer-meta&lt;/code&gt;). Value is parsed based on the passed &lt;code&gt;TYPE&lt;/code&gt; or as a string if omitted. Use it performing multiple read operations in a row.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-meta-get-list!&lt;/code&gt; - function to get all values of &lt;code&gt;PROP&lt;/code&gt; from &lt;code&gt;META&lt;/code&gt; (result of &lt;code&gt;vulpea-buffer-meta&lt;/code&gt;). Values are parsed based on the passed &lt;code&gt;TYPE&lt;/code&gt; or as a string if omitted. Use it performing multiple read operations in a row.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-meta-set&lt;/code&gt; - function to set &lt;code&gt;VALUE&lt;/code&gt; of &lt;code&gt;PROP&lt;/code&gt; in current buffer. Supports multi-value properties.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-meta-remove&lt;/code&gt; - function to remove a &lt;code&gt;PROP&lt;/code&gt; from current buffer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-meta-clean&lt;/code&gt; - function to remove all meta from current buffer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vulpea-buffer-meta-format&lt;/code&gt; - function to format a &lt;code&gt;VALUE&lt;/code&gt; based in its type (used for value serialization).&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Example 1 - getting values&lt;/p&gt; &lt;p&gt;Consider the following Org Mode file.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;:PROPERTIES:&#xA;:ID:                     05907606-f836-45bf-bd36-a8444308eddd&#xA;:END:&#xA;#+title: Note with META&#xA;&#xA;- name :: some name&#xA;- tags :: tag 1&#xA;- tags :: tag 2&#xA;- tags :: tag 3&#xA;- numbers :: 12&#xA;- numbers :: 18&#xA;- numbers :: 24&#xA;- singleton :: only value&#xA;- symbol :: red&#xA;- url :: [[https://en.wikipedia.org/wiki/Frappato][wikipedia.org]]&#xA;- link :: [[id:444f94d7-61e0-4b7c-bb7e-100814c6b4bb][Note without META]]&#xA;- references :: [[id:444f94d7-61e0-4b7c-bb7e-100814c6b4bb][Note without META]]&#xA;- references :: [[id:5093fc4e-8c63-4e60-a1da-83fc7ecd5db7][Reference]]&#xA;- answer :: 42&#xA;&#xA;Don&#39;t mind me. I am a content of this note.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In order to get anything from meta, first you need to parse it:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (vulpea-buffer-meta)&#xA;(:file &#34;/path-to/with-meta.org&#34; :buffer (org-data ...))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then you can retrieve values from parse meta:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; (setq test-meta (vulpea-buffer-meta))&#xA;&#xA;&amp;gt; (vulpea-buffer-meta-get! test-meta &#34;name&#34;)&#xA;&#34;some name&#34;&#xA;&#xA;&amp;gt; (vulpea-buffer-meta-get! test-meta &#34;tags&#34;)&#xA;&#34;tag 1&#34;&#xA;&#xA;&amp;gt; (vulpea-buffer-meta-get-list! test-meta &#34;tags&#34;)&#xA;(&#34;tag 1&#34; &#34;tag 2&#34; &#34;tag 3&#34;)&#xA;&#xA;&amp;gt; (vulpea-buffer-meta-get-list! test-meta &#34;numbers&#34; &#39;number)&#xA;(12 18 24)&#xA;&#xA;&amp;gt; (vulpea-buffer-meta-get! test-meta &#34;symbol&#34; &#39;symbol)&#xA;red&#xA;&#xA;&amp;gt; (vulpea-buffer-meta-get! test-meta &#34;url&#34; &#39;link)&#xA;&#34;https://en.wikipedia.org/wiki/Frappato&#34;&#xA;&#xA;&amp;gt; (vulpea-buffer-meta-get! test-meta &#34;link&#34; &#39;link)&#xA;&#34;444f94d7-61e0-4b7c-bb7e-100814c6b4bb&#34;&#xA;&#xA;&amp;gt; (vulpea-buffer-meta-get-list! test-meta &#34;references&#34; &#39;note)&#xA;(#s(vulpea-note :id &#34;444f94d7-61e0-4b7c-bb7e-100814c6b4bb&#34;&#xA;                ...)&#xA; #s(vulpea-note :id &#34;5093fc4e-8c63-4e60-a1da-83fc7ecd5db7&#34;&#xA;                ...))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Example 2 - setting values&lt;/p&gt; &lt;p&gt;Consider the following Org Mode file.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;:PROPERTIES:&#xA;:ID:                     05907606-f836-45bf-bd36-a8444308eddd&#xA;:END:&#xA;#+title: Note with META&#xA;&#xA;- name :: some name&#xA;- tags :: tag 1&#xA;- tags :: tag 2&#xA;- tags :: tag 3&#xA;- numbers :: 12&#xA;- numbers :: 18&#xA;- numbers :: 24&#xA;- singleton :: only value&#xA;- symbol :: red&#xA;- url :: [[https://en.wikipedia.org/wiki/Frappato][wikipedia.org]]&#xA;- link :: [[id:444f94d7-61e0-4b7c-bb7e-100814c6b4bb][Note without META]]&#xA;- references :: [[id:444f94d7-61e0-4b7c-bb7e-100814c6b4bb][Note without META]]&#xA;- references :: [[id:5093fc4e-8c63-4e60-a1da-83fc7ecd5db7][Reference]]&#xA;- answer :: 42&#xA;&#xA;Don&#39;t mind me. I am a content of this note.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Imagine that we evaluated the following code in this buffer.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;;; put a value in the beginning of the list&#xA;(vulpea-buffer-meta-set &#34;date&#34; &#34;[2021-12-05]&#34;)&#xA;&#xA;;;  replace existing name value&#xA;(vulpea-buffer-meta-set &#34;name&#34; &#34;new name&#34;)&#xA;&#xA;;;replace list of references with new one&#xA;(vulpea-buffer-meta-set &#34;references&#34; (list (vulpea-db-get-by-id &#34;8f62b3bd-2a36-4227-a0d3-4107cd8dac19&#34;)))&#xA;&#xA;;; append to the end of list&#xA;(vulpea-buffer-meta-set &#34;years&#34; &#39;(1993 1994) &#39;append)&#xA;&#xA;;; remove numbers key&#xA;(vulpea-buffer-meta-remove &#34;numbers&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The resulting buffer will look like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;:PROPERTIES:&#xA;:ID:                     05907606-f836-45bf-bd36-a8444308eddd&#xA;:END:&#xA;#+title: Note with META&#xA;&#xA;- date :: [2021-12-05]&#xA;- name :: new name&#xA;- tags :: tag 1&#xA;- tags :: tag 2&#xA;- tags :: tag 3&#xA;- singleton :: only value&#xA;- symbol :: red&#xA;- url :: [[https://en.wikipedia.org/wiki/Frappato][wikipedia.org]]&#xA;- link :: [[id:444f94d7-61e0-4b7c-bb7e-100814c6b4bb][Note without META]]&#xA;- references :: [[id:8f62b3bd-2a36-4227-a0d3-4107cd8dac19][Arianna Occhipinti]]&#xA;- answer :: 42&#xA;- years :: 1993&#xA;- years :: 1994&#xA;&#xA;Don&#39;t mind me. I am a content of this note.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org762cef0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;vulpea-utils&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This module contains various utilities used by other modules. Functions of interest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-utils-with-note&lt;/code&gt; - function to execute &lt;code&gt;BODY&lt;/code&gt; with point at &lt;code&gt;NOTE&lt;/code&gt;. Supports file-level notes as well as heading notes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-utils-link-make-string&lt;/code&gt; - make a bracket link to &lt;code&gt;NOTE&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-utils-note-hash&lt;/code&gt; - function to calculate &lt;code&gt;sha1&lt;/code&gt; of a given &lt;code&gt;NOTE&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-utils-collect-while&lt;/code&gt; - utility to repeat some function and collect it&#39;s results until &lt;code&gt;C-g&lt;/code&gt; is used or passed filter returns &lt;code&gt;nil&lt;/code&gt;. Example of usage - you want to collect multiple values from user and be able to quit the process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-utils-repeat-while&lt;/code&gt; - utility to repeat some function and return first unfiltered result. Example of usage - you want to enforce some validation on value and keep prompting user until valid value is typed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;orge2e8069&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;orgef25680&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Query from database&lt;/h3&gt; &#xA;&lt;p&gt;This library provides multiple functions to query notes from the database. Basically, there is one powerful &lt;code&gt;vulpea-db-query&lt;/code&gt; allowing to filter notes by any &lt;code&gt;vulpea-note&lt;/code&gt; based predicate. The only downside of this power is performance and memory penalty as all notes are loaded into memory. In cases when performance is critical and the set of notes can be narrowed down, one can use specialized queries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-db-query-by-tags-some&lt;/code&gt; - return all notes tagged with one of the provided &lt;code&gt;TAGS&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-db-query-by-tags-every&lt;/code&gt; - return all notes tagged by every tag from the list of provided &lt;code&gt;TAGS&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-db-query-by-links-some&lt;/code&gt; - return all notes linking at least one of the provided &lt;code&gt;DESTINATIONS&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vulpea-db-query-by-links-every&lt;/code&gt; - return all notes linking each and every provided &lt;code&gt;DESTINATIONS&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following table displays time required to query notes by using &lt;code&gt;vulpea-db-query&lt;/code&gt; vs specialized query on the database of 9554 &lt;a href=&#34;https://github.com/d12frosted/vulpea-test-notes/&#34;&gt;generated notes&lt;/a&gt;. The difference between various test cases is partially explained by the fact that filtering functions result in different amount of notes. Since we need to retrieve full note structure, the more notes we have, the more time it takes.&lt;/p&gt; &#xA;&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt; &#xA; &lt;colgroup&gt; &#xA;  &lt;col class=&#34;org-left&#34;&gt; &#xA;  &lt;col class=&#34;org-left&#34;&gt; &#xA;  &lt;col class=&#34;org-right&#34;&gt; &#xA;  &lt;col class=&#34;org-right&#34;&gt; &#xA;  &lt;col class=&#34;org-right&#34;&gt; &#xA; &lt;/colgroup&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;test&lt;/th&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;result size&lt;/th&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;generic&lt;/th&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;specialized&lt;/th&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;ratio&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;&lt;code&gt;tags-some&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;30 notes&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;1.0112478712&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;0.0066033426&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;153.14182&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;&lt;code&gt;tags-every&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;3168 notes&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;1.0059819176&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;0.5709392964999999&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;1.7619770&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;&lt;code&gt;links-some&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;1657 notes&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;1.0462236128999999&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;0.4248580532&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;2.4625251&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;&lt;code&gt;links-every&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;92 notes&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;1.0204833089&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;0.0545313596&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;18.713696&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/d12frosted/vulpea/discussions/106#discussioncomment-1601429&#34;&gt;this comment&lt;/a&gt; for more background on why these functions where created.&lt;/p&gt; &#xA;&lt;p&gt;In order to make these functions as fast as possible, &lt;code&gt;vulpea-db&lt;/code&gt; module builds and maintains a view table called &lt;code&gt;notes&lt;/code&gt;. While it does drastically improve query performance (see the table below), it adds a small footprint on synchronisation time. See &lt;a href=&#34;https://github.com/d12frosted/vulpea/pull/116&#34;&gt;vulpea#116&lt;/a&gt; for more information on this feature and measurements.&lt;/p&gt; &#xA;&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt; &#xA; &lt;colgroup&gt; &#xA;  &lt;col class=&#34;org-left&#34;&gt; &#xA;  &lt;col class=&#34;org-left&#34;&gt; &#xA;  &lt;col class=&#34;org-right&#34;&gt; &#xA;  &lt;col class=&#34;org-right&#34;&gt; &#xA;  &lt;col class=&#34;org-right&#34;&gt; &#xA; &lt;/colgroup&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;test&lt;/th&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;result size&lt;/th&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;&lt;a href=&#34;https://github.com/d12frosted/vulpea/raw/551495a59fb8c3bcd49a091b233e24e4cb8b584c/vulpea-db.el#L76-L187&#34;&gt;regular&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;view table&lt;/th&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;ratio&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;&lt;code&gt;tags-some&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;30 notes&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;4.6693460650999995&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;1.0112478712&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;4.6174100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;&lt;code&gt;tags-every&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;3168 notes&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;4.7333844436999996&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;1.0059819176&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;4.7052381&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;&lt;code&gt;links-some&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;1657 notes&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;4.8095771283&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;1.0462236128999999&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;4.5970833&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;&lt;code&gt;links-every&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;92 notes&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;4.5517473337999995&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;1.0204833089&lt;/td&gt; &#xA;   &lt;td class=&#34;org-right&#34;&gt;4.4603839&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org902f9c6&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Coding&lt;/h2&gt; &#xA;&lt;p&gt;Vulpea is developed using &lt;a href=&#34;https://github.com/doublep/eldev/&#34;&gt;eldev&lt;/a&gt;. If you are using &lt;code&gt;flycheck&lt;/code&gt;, it is advised to also use &lt;a href=&#34;https://github.com/flycheck/flycheck-eldev&#34;&gt;flycheck-eldev&lt;/a&gt;, as it makes dependencies and project files available thus mitigating false negative results from default Emacs Lisp checker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org6d71ab7&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building and testing&lt;/h2&gt; &#xA;&lt;p&gt;Vulpea tests are written using &lt;a href=&#34;https://github.com/jorgenschaefer/emacs-buttercup/&#34;&gt;buttercup&lt;/a&gt; testing framework. And &lt;a href=&#34;https://github.com/doublep/eldev/&#34;&gt;eldev&lt;/a&gt; is used to run them both locally and on CI. In order to run the tests locally, first &lt;a href=&#34;https://github.com/doublep/eldev/id:b946c716-e3b3-4c84-8229-dde59ddd55aeation&#34;&gt;install&lt;/a&gt; &lt;code&gt;eldev&lt;/code&gt; and then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note, that the linter is used in this project, so you might want to run it as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;org3de8136&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://barberry.io/images/vulpea-logo.png&#34;&gt;Logo&lt;/a&gt; was created by &lt;a href=&#34;https://www.behance.net/irynarutylo&#34;&gt;Iryna Rutylo&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mpedramfar/zotra</title>
    <updated>2022-07-17T01:40:00Z</updated>
    <id>tag:github.com,2022-07-17:/mpedramfar/zotra</id>
    <link href="https://github.com/mpedramfar/zotra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zotra&lt;/h1&gt; &#xA;&lt;p&gt;This emacs library provides functions to get bibliographic information from a url and save it into a bibtex file. This is done using &lt;a href=&#34;https://www.zotero.org/support/translators&#34;&gt;Zotero translators&lt;/a&gt;, but without using the Zotero client.&lt;/p&gt; &#xA;&lt;h2&gt;Instalation&lt;/h2&gt; &#xA;&lt;h3&gt;Zotero translation server&lt;/h3&gt; &#xA;&lt;p&gt;Download and run the &lt;a href=&#34;https://github.com/zotero/translation-server/&#34;&gt;Zotero translation server&lt;/a&gt;. Note that this library tries to connect to this server and does not work when the server is not running.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 1: Using docker (easier to set up but uses more reources)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to install this is to install &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;docker&lt;/a&gt; and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull zotero/translation-server&#xA;docker run -d -p 1969:1969 --rm --name translation-server zotero/translation-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the translation server to always run (so that you wouldn&#39;t have to run it manually after each reboot), you can replace the second command with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --restart=always -d -p 1969:1969 --name translation-server zotero/translation-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 2: Using nodejs (more lightweight)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also run the translation server &lt;a href=&#34;https://github.com/zotero/translation-server/&#34;&gt;without docker, using nodejs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Zotra&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository and add the following line to your init file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/zotra&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage and configuration&lt;/h2&gt; &#xA;&lt;p&gt;From inside emacs, run &lt;code&gt;zotra-add-entry-from-url&lt;/code&gt;, then enter the url and choose the bibtex file to save into. Alternatively, you can run &lt;code&gt;zotra-add-entry-from-search&lt;/code&gt;, then enter the search identifier (DOI, ISBN, PMID, arXiv ID) and choose the bibtex file to save into.&lt;/p&gt; &#xA;&lt;p&gt;Here is the complete list of customizable variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;zotra-after-add-entry-hook&lt;/code&gt;&lt;/p&gt; &lt;p&gt;These functions are called after adding an entry. They take no arguments, and they can be used to cleanup and format new entries. For example, if you are using &lt;code&gt;org-ref&lt;/code&gt;, you could add this line to your init file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;zotra-after-add-entry-hook &#39;org-ref-clean-bibtex-entry)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The default value is: &#39;(bibtex-clean-entry)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;zotra-default-bibliography&lt;/code&gt;&lt;/p&gt; &lt;p&gt;If this variable is non-nil, interactive calls to &lt;code&gt;zotra-add-entry-from-url&lt;/code&gt; and &lt;code&gt;zotra-add-entry-from-search&lt;/code&gt; will not ask the user for the bibfile. Otherwise, zotra will make a list containing the &lt;code&gt;.bib&lt;/code&gt; files in the current directory and the files returned by &lt;code&gt;org-cite-list-bibliography-files&lt;/code&gt; and ask the user to choose one.&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;zotra-default-entry-format&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The citation format. Can be one of the following options:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;bibtex&lt;/li&gt; &#xA;   &lt;li&gt;biblatex&lt;/li&gt; &#xA;   &lt;li&gt;bookmarks&lt;/li&gt; &#xA;   &lt;li&gt;coins&lt;/li&gt; &#xA;   &lt;li&gt;csljson&lt;/li&gt; &#xA;   &lt;li&gt;csv&lt;/li&gt; &#xA;   &lt;li&gt;endnote_xml&lt;/li&gt; &#xA;   &lt;li&gt;evernote&lt;/li&gt; &#xA;   &lt;li&gt;mods&lt;/li&gt; &#xA;   &lt;li&gt;rdf_bibliontology&lt;/li&gt; &#xA;   &lt;li&gt;rdf_dc&lt;/li&gt; &#xA;   &lt;li&gt;rdf_zotero&lt;/li&gt; &#xA;   &lt;li&gt;refer&lt;/li&gt; &#xA;   &lt;li&gt;refworks_tagged&lt;/li&gt; &#xA;   &lt;li&gt;ris&lt;/li&gt; &#xA;   &lt;li&gt;tei&lt;/li&gt; &#xA;   &lt;li&gt;wikipedia&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;See &lt;a href=&#34;https://github.com/zotero/translation-server#export-translation&#34;&gt;https://github.com/zotero/translation-server#export-translation&lt;/a&gt; and &lt;a href=&#34;https://github.com/zotero/translation-server/raw/master/src/formats.js&#34;&gt;https://github.com/zotero/translation-server/blob/master/src/formats.js&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The default value is: &#34;bibtex&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;zotra-server-path&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The url and the port of the Zotero translation server to be used, without a trailing slash mark.&lt;/p&gt; &lt;p&gt;The default value is: &#34;&lt;a href=&#34;http://127.0.0.1:1969&#34;&gt;http://127.0.0.1:1969&lt;/a&gt;&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;zotra-url-cleanup-functions&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Currently, the Zotero translation server can’t handle links to pdf files. (See &lt;a href=&#34;https://github.com/zotero/translation-server/issues/70&#34;&gt;https://github.com/zotero/translation-server/issues/70&lt;/a&gt;). These functions provide a way to fix the issue by manually changing the link to a pdf to a link to another url for the article. Each function in this list should take a url and return a url. If the function is not applicable, it should return its input without change.&lt;/p&gt; &lt;p&gt;Currently, this is implemeted for:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;arxiv.org&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;zotra-url-retrieve-timeout&lt;/code&gt;&lt;/p&gt; &lt;p&gt;How many seconds to wait for server to get a response.&lt;/p&gt; &lt;p&gt;The default value is: 3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;zotra-use-curl&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Functions for retrieving citation entries use &lt;code&gt;url-retrieve-synchronously&lt;/code&gt;, but it sometimes fails. An alternative is to use the external &lt;code&gt;curl&lt;/code&gt; program to retrieve the data.&lt;/p&gt; &lt;p&gt;The default value is: nil&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using zotra with a browser and org-protocol&lt;/h3&gt; &#xA;&lt;p&gt;First you need to set up &lt;a href=&#34;https://orgmode.org/worg/org-contrib/org-protocol.html&#34;&gt;org-protocol&lt;/a&gt;. Then make a bookmark in your browser with the following url:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;javascript:location.href=(&#39;org-protocol://zotra?url=&#39;+ encodeURIComponent(location.href)+&#39;&amp;amp;bibfile=&#39;+encodeURIComponent(&#39;/path/to/bibfile.bib&#39;)+&#39;&amp;amp;format=my-save-format&#39;).replace(/&#39;/gi,&#34;%27&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;/path/to/bibfile.bib&lt;/code&gt; should be replaced with the path to the bibfile and &lt;code&gt;my-save-format&lt;/code&gt; should be replaced with one of the acceptable formats listed above.&lt;/p&gt; &#xA;&lt;p&gt;You can omit format and bibfile to use the value of &lt;code&gt;zotra-default-entry-format&lt;/code&gt; and &lt;code&gt;zotra-default-bibliography&lt;/code&gt; respectively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;javascript:location.href=(&#39;org-protocol://zotra?url=&#39;+ encodeURIComponent(location.href)).replace(/&#39;/gi,&#34;%27&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can click on the bookmark in any page and the bibliographic information of the page will be saved into emacs automatically.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/no-littering</title>
    <updated>2022-07-17T01:40:00Z</updated>
    <id>tag:github.com,2022-07-17:/emacscollective/no-littering</id>
    <link href="https://github.com/emacscollective/no-littering" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Help keeping ~/.emacs.d clean&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Help keeping ~/.emacs.d clean&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default paths used to store configuration files and persistent data are not consistent across Emacs packages. This isn&#39;t just a problem with third-party packages but even with built-in packages.&lt;/p&gt; &#xA;&lt;p&gt;Some packages put these files directly in &lt;del&gt;user-emacs-directory&lt;/del&gt; or &lt;del&gt;$HOME&lt;/del&gt; or in a subdirectory of either of the two or elsewhere. Furthermore sometimes file names are used that don&#39;t provide any insight into what package might have created them.&lt;/p&gt; &#xA;&lt;p&gt;This package sets out to fix this by changing the values of path variables to put configuration files in &lt;del&gt;no-littering-etc-directory&lt;/del&gt; (defaulting to &#34;etc/&#34; under &lt;del&gt;user-emacs-directory&lt;/del&gt;, thus usually &lt;del&gt;&#34;&lt;/del&gt;/.emacs.d/etc/&#34;&lt;del&gt;) and persistent data files in &lt;del&gt;no-littering-var-directory&lt;/del&gt; (defaulting to &lt;del&gt;&#34;var/&#34;&lt;/del&gt; under &lt;del&gt;user-emacs-directory&lt;/del&gt;, thus usually &lt;del&gt;&#34;&lt;/del&gt;/.emacs.d/var/&#34;&lt;/del&gt;), and by using descriptive file names and subdirectories when appropriate. This is similar to a color-theme; a &#34;path-theme&#34; if you will.&lt;/p&gt; &#xA;&lt;p&gt;We still have a long way to go until most built-in and many third-party path variables are properly &#34;themed&#34;. Like a color-theme, this package depends on user contributions to accomplish decent coverage. Pull requests are highly welcome (but please follow the conventions described below and in the pull request template).&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;no-littering&lt;/del&gt; cannot help with moving existing files to the new location. You will have to move the files manually. See issue [[https://github.com/emacscollective/no-littering/issues/79][#79]] for more information.&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;Load the feature &lt;del&gt;no-littering&lt;/del&gt; as early as possible in your init file. Make sure you load it at least before you change any path variables using some other method.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;no-littering) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you would like to use base directories different from what &lt;del&gt;no-littering&lt;/del&gt; uses by default, then you have to set the respective variables before loading the feature.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq no-littering-etc-directory (expand-file-name &#34;config/&#34; user-emacs-directory)) (setq no-littering-var-directory (expand-file-name &#34;data/&#34; user-emacs-directory)) (require &#39;no-littering) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Suggested Settings&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;del&gt;recentf&lt;/del&gt; then you might find it convenient to exclude all of the files in the &lt;del&gt;no-littering&lt;/del&gt; directories using something like the following.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;recentf) (add-to-list &#39;recentf-exclude no-littering-var-directory) (add-to-list &#39;recentf-exclude no-littering-etc-directory) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** Auto-save settings&lt;/p&gt; &#xA;&lt;p&gt;One of the most common types of files that Emacs creates automatically is auto-save files. By default, these appear in the current directory of a visited file. No-littering does not change this, but you can add the following code to your &lt;del&gt;init.el&lt;/del&gt; file to store these files in the &lt;del&gt;var&lt;/del&gt; directory:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq auto-save-file-name-transforms `((&#34;.*&#34; ,(no-littering-expand-var-file-name &#34;auto-save/&#34;) t))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** Saved customizations&lt;/p&gt; &#xA;&lt;p&gt;Emacs will save [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html ][customizations]] into your &lt;del&gt;init.el&lt;/del&gt; file by default. If you don&#39;t want that, you might want to store them in a sibling file or even in the &lt;del&gt;etc/&lt;/del&gt; directory:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq custom-file (expand-file-name &#34;custom.el&#34; user-emacs-directory)) ;; or (setq custom-file (no-littering-expand-etc-file-name &#34;custom.el&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** Native compilation cache&lt;/p&gt; &#xA;&lt;p&gt;When using Emacs 29, the location of the native compilation cache can be changed using a function, preferably in &lt;del&gt;early-init.el&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (when (fboundp &#39;startup-redirect-eln-cache) (startup-redirect-eln-cache (convert-standard-filename (expand-file-name &#34;var/eln-cache/&#34; user-emacs-directory)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Conventions&lt;/p&gt; &#xA;&lt;p&gt;*** (A) File names&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;File names are based on the name of the respective Emacs lisp variables and the name of the respective Emacs package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The name of the respective Emacs package should serve as the prefix of the file name, unless the file is in a subdirectory in which case the name of the subdirectory serves as the prefix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the name of the package and the prefix of the variable do not match, then we prefer the name of the package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the name of a path variable ends with &lt;del&gt;-file&lt;/del&gt;, &lt;del&gt;-default-file&lt;/del&gt;, &lt;del&gt;-directory&lt;/del&gt;, &lt;del&gt;-default-directory&lt;/del&gt;, or something similar, then that suffix is usually dropped from the file name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If applicable, the appropriate extension is added to the file name so that files are visited using the appropriate major-modes and also to provide a hint about the kind of data stored in the file. E.g. if a file contains an S-expression, then the suffix should be &lt;del&gt;*.el&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** (B) File location and subdirectories&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package has only one data file, then that is usually placed in &lt;del&gt;no-littering-var-directory&lt;/del&gt; itself. Likewise if a package has only one config file, then that is placed in &lt;del&gt;no-littering-etc-directory&lt;/del&gt; itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package has multiple data (or config files), then those files are placed in a subdirectory of &lt;del&gt;no-littering-var-directory&lt;/del&gt; (or &lt;del&gt;no-littering-etc-directory&lt;/del&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a subdirectory is used for a package&#39;s data (or config) file variables, then the name of the directory should match the name of the package in most cases. The subdirectory name may serve as the package prefix of the file name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package provides a &#34;framework&#34; for other packages to use, then we may reuse its directories for other packages that make use of that framework or otherwise &#34;extend&#34; the &#34;main package&#34;. E.g. we place all &lt;del&gt;helm&lt;/del&gt; related files in &lt;del&gt;helm/&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package only defines a single variable that specifies a data (or config) directory, then the directory name should nevertheless be just the package name. E.g. the path used for &lt;del&gt;sx-cache-directory&lt;/del&gt; from the &lt;del&gt;sx&lt;/del&gt; package is &lt;del&gt;sx/cache/&lt;/del&gt;, not &lt;del&gt;sx-cache/&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;However if the name of the directory variable implies that the package won&#39;t ever define any data (or config) files that won&#39;t be placed in that directory, then we use a top-level directory. E.g. when the name of the variable is &lt;del&gt;&#xA;    &lt;package&gt;&#xA;     -directory&#xA;    &lt;/package&gt;&lt;/del&gt;, in which case we would use just &lt;del&gt;&#xA;    &lt;package&gt;&#xA;     /&#xA;    &lt;/package&gt;&lt;/del&gt; as the path.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** (C) Ordering and alignment&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The code that sets the values of themed variables is split into two groups. The first group sets the value of variables that belong to packages that are part of Emacs, and the second group is used for variables that are defined by packages that are not part of Emacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each of these lists is sorted alphabetically (usually by variable name). Please keep it that way.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We attempt to align the value forms inside different &lt;del&gt;setq&lt;/del&gt; forms. If the symbol part for a particular variable is too long to allow doing so, then don&#39;t worry about it and just break the alignment. If it turns out that this happens very often, then we will adjust the alignment eventually.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** (D) Commit messages&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Please theme each package using a separate commit and use commit messages of the form &lt;del&gt;PACKAGE: theme VARIABLE&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package has several path variables, then you should theme them all in one commit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the variable names do not fit nicely on the summary line, then use a message such as:&lt;/p&gt; &lt;p&gt;#+begin_src text foo: theme variables&lt;/p&gt; &lt;p&gt;Theme &lt;code&gt;foo-config-file&#39;, &lt;/code&gt;foo-cache-directory&#39;, and `foo-persistent-file&#39;. #+end_src&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When appropriate add statements like the following to the commit message:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This file is used to store an s-expression.&lt;/li&gt; &#xA;   &lt;li&gt;This file is used to store raw text.&lt;/li&gt; &#xA;   &lt;li&gt;This is the only configuration/data file of the package.&lt;/li&gt; &#xA;   &lt;li&gt;This package does/doesn&#39;t take care of creating the containing directory if necessary. (If the package does not do it, then you should also fix that and submit an upstream pull request.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are uncertain, then be explicit about it by adding a comment to the pull-request.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;fill-column: 70&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
</feed>