<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-03T01:28:55Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>localauthor/org-side-tree</title>
    <updated>2023-10-03T01:28:55Z</updated>
    <id>tag:github.com,2023-10-03:/localauthor/org-side-tree</id>
    <link href="https://github.com/localauthor/org-side-tree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Navigate Org-mode outlines in Emacs via side window&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: org-side-tree&lt;/p&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/org-side-tree][file:https://melpa.org/packages/org-side-tree-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This package presents a navigable, interactive tree-structured outline of the current buffer&#39;s headings in a handy side window.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/localauthor/org-side-tree/blob/main/images/screenshot1.jpg?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The easiest way to install is from [[https://melpa.org/#/org-side-bar][MELPA]].&lt;/p&gt; &#xA;&lt;p&gt;Add =org-side-tree.el= to your loadpath and include =(require &#39;org-side-tree)= in your init file.&lt;/p&gt; &#xA;&lt;p&gt;Call =M-x org-side-tree= in any Org mode buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some Customization Options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-side-tree-persistent=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When non-nil, use a single buffer for all trees. When nil, each buffer will have its own tree-buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-side-tree-display-side=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Side of frame where tree-buffer will display.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-side-tree-fontify=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When non-nil, tree-buffer headings are fontified to match base-buffer. When nil, headings are in `org-side-tree-heading-face&#39;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-side-tree-enable-folding=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When non-nil, enable foldable headings in tree-buffers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Video Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/c3QLfl9_D5Y&#34;&gt;https://youtu.be/c3QLfl9_D5Y&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for non-Org files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package is generally functional in buffers that use =outline-mode= or =outline-minor-mode=. However, the depth and quality of support/functionality in these modes is highly dependent on what the buffer-local value of =outline-regexp= is. Therefore, individual experience may vary. Use advisedly.&lt;/p&gt; &#xA;&lt;p&gt;For example, in =emacs-lisp-mode=, consider setting =outline-regexp= as follows: #+begin_src elisp (setq-local outline-regexp &#34;;;;\(;* [^ \t\n]\)&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To set this automatically for every elisp buffer, add the following lines to your init file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-hook &#39;emacs-lisp-mode-hook (lambda () (setq-local outline-regexp &#34;;;;\(;* [^ \t\n]\)&#34;))) (add-hook &#39;emacs-lisp-mode-hook &#39;outline-minor-mode) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-helm/helm-ls-git</title>
    <updated>2023-10-03T01:28:55Z</updated>
    <id>tag:github.com,2023-10-03:/emacs-helm/helm-ls-git</id>
    <link href="https://github.com/emacs-helm/helm-ls-git" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use Helm to manage git projects&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/helm-ls-git&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/helm-ls-git-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34; title=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/helm-ls-git&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/helm-ls-git-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;helm-ls-git&lt;/h1&gt; &#xA;&lt;p&gt;Helm Git project manager.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-helm/helm-ls-git/master/images/helm-ls-git-1.png&#34; alt=&#34;directories&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-helm/helm-ls-git/master/images/helm-ls-git-2.png&#34; alt=&#34;directories&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Display list of branches in project and provide related actions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide git log view from branches source with related actions (diff, patches, reset, find file etc...)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Display the open buffers in project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Display a status source showing state of project (modified files etc...).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide its own commit facilities with a mode to edit commit (commit, amend etc...)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Allow rebasing and provide a mode to edit rebase-todo files&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Display stashes list and provide related actions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Display a list of all files in project under git control.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Allow looking quickly at diff on modified files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Allow switching to git status with your preferred frontend (vc-dir, magit,etc...)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Full integration of &lt;code&gt;git-grep&lt;/code&gt;, allow also usage of &lt;code&gt;helm-grep&lt;/code&gt; (you can use &lt;code&gt;ack-grep&lt;/code&gt; instead of &lt;code&gt;grep&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Integrate usage of &lt;code&gt;gid&lt;/code&gt; from &lt;a href=&#34;https://www.gnu.org/software/idutils/&#34;&gt;id-utils&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Full integration with &lt;code&gt;helm-find-files&lt;/code&gt;, allow you to browse project unrelated to current-buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In addition, all actions of type files and buffers are provided.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We assume that you have &lt;code&gt;git&lt;/code&gt; installed and that OSX users have solved &lt;a href=&#34;https://gist.github.com/jhrr/8852178&#34;&gt;any &lt;code&gt;$PATH&lt;/code&gt; issues&lt;/a&gt; that prevent them being able to call &lt;code&gt;git&lt;/code&gt; from emacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you are running at least &amp;gt;= Emacs-24.3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;helm&lt;/code&gt; according to the &lt;a href=&#34;https://github.com/emacs-helm/helm#getting-started&#34;&gt;instructions on its repo page&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using the MELPA package manager then &lt;code&gt;M-x list-packages&lt;/code&gt; and install &lt;code&gt;helm-ls-git&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or, if you are using &lt;code&gt;el-get&lt;/code&gt; then invoke &lt;code&gt;M-x el-get-install&lt;/code&gt; and at the &lt;code&gt;Install package:&lt;/code&gt; prompt type &lt;code&gt;helm-ls-git&lt;/code&gt; and hit enter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Otherwise, clone this repo and put &lt;code&gt;helm-ls-git.el&lt;/code&gt; somewhere on the emacs &lt;code&gt;load-path&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, add to your &lt;code&gt;.emacs.el&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Assuming you are already using helm and it is installed properly (See &lt;a href=&#34;http://emacs-helm.github.io/helm/&#34;&gt;Install helm&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;helm-ls-git)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use M-x &lt;code&gt;helm-browse-project&lt;/code&gt; or bind it to a key, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(global-set-key (kbd &#34;C-x C-d&#34;) &#39;helm-browse-project)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;helm-find-files&lt;/code&gt; you will be able to browse any git repo unrelated to the &lt;code&gt;current-buffer&lt;/code&gt;: M-x &lt;code&gt;helm-find-files&lt;/code&gt; navigate to some git repo and hit &lt;code&gt;C-x C-d&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also navigate in your git projects with M-x &lt;code&gt;helm-projects-history&lt;/code&gt; or bind it to a key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(global-set-key (kbd &#34;C-x r p&#34;) &#39;helm-projects-history)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the helm-ls-git sources somewhere else, you can build them individually with functions &lt;code&gt;helm-ls-git-build-git-status-source&lt;/code&gt;, &lt;code&gt;helm-ls-git-build-buffers-source&lt;/code&gt; and &lt;code&gt;helm-ls-git-build-ls-git-source&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As these sources are built with their own classes, they can be configured with defmethod &lt;code&gt;helm-setup-user-source&lt;/code&gt;, see &lt;a href=&#34;https://github.com/emacs-helm/helm/wiki/FAQ#why-is-a-customizable-helm-source-nil&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;helm-projects-history&lt;/code&gt; or &lt;code&gt;helm-browse-project&lt;/code&gt; as a starting point.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;By calling &lt;code&gt;helm-browse-project&lt;/code&gt; in any buffer that is a part of a git repo (or if you have navigated to a git repo from &lt;code&gt;helm-find-files&lt;/code&gt;), you will be presented with a corresponding helm buffer containing a list of all the files currently in that same repository. In the usual &lt;code&gt;helm&lt;/code&gt; style you can just type at the prompt in the minibuffer and see the results narrow according to the input of your search pattern.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When the helm-buffer is active and displaying results, the user can invoke &lt;code&gt;C-]&lt;/code&gt; to toggle between showing filenames or full pathnames for the data that helm is listing.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: You can also use directly &lt;code&gt;helm-ls-git-ls&lt;/code&gt;, but note that in this case your project will NOT be recorded in project history and BTW not available through M-x &lt;code&gt;helm-projects-history&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another way to record your projects is using bookmarks from &lt;code&gt;helm-find-files&lt;/code&gt; (&lt;code&gt;C-x r m&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Have fun!&lt;/p&gt;</summary>
  </entry>
</feed>