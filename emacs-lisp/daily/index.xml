<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-20T01:34:21Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xhcoding/emacs-aichat</title>
    <updated>2023-03-20T01:34:21Z</updated>
    <id>tag:github.com,2023-03-20:/xhcoding/emacs-aichat</id>
    <link href="https://github.com/xhcoding/emacs-aichat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI Chat in Emacs, including OpenAI and Bing Chat&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;p align=&#34;left&#34;&gt; #+html: &lt;a href=&#34;https://github.com/xhcoding/emacs-aichat/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/xhcoding/emacs-aichat/actions/workflows/test.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://github.com/xhcoding/emacs-aichat/raw/main/README.zh-CN.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/README-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-555555.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AI Chat in Emacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use AI chat features in Emacs, currently including Bing Chat and OpenAIâ€™s ChatGpt.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Requirements&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/ahyatt/emacs-websocket][emacs-websocket]] To communicate with Bing Chat, if you have already installed this package, please update to the latest version.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/chuntaro/emacs-async-await][emacs-async-await]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jrblevin/markdown-mode][markdown-mode]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Install&lt;/p&gt; &#xA;&lt;p&gt;Clone the repository to your local machine, and add the path to your =load-path= :&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh git clone &lt;a href=&#34;https://github.com/xhcoding/emacs-aichat.git&#34;&gt;https://github.com/xhcoding/emacs-aichat.git&lt;/a&gt; ~/.emacs.d/site-lisp/emacs-aichat #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-to-list &#39;load-path &#34;~/.emacs.d/site-lisp/emacs-aichat&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;add the following code to your emacs startup file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (require &#39;aichat) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or load separately&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (require &#39;aichat-bingai) ;; or (require &#39;aichat-openai) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bing Chat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below is information on setting up Bing AI. If you are interested in learning about using OpenAI, please scroll down to the OpenAI section.&lt;/p&gt; &#xA;&lt;p&gt;** Setup&lt;/p&gt; &#xA;&lt;p&gt;*** Check access (Required)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the latest version of Microsoft Edge&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://bing.com/chat&#34;&gt;http://bing.com/chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you see a chat feature, you are good to go&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Getting authentication (Required)&lt;/p&gt; &#xA;&lt;p&gt;emacs-aichat uses browser cookies to log in to Bing Chat, so you need to log in to &lt;a href=&#34;http://www.bing.com&#34;&gt;http://www.bing.com&lt;/a&gt; first in your browser.&lt;/p&gt; &#xA;&lt;p&gt;There are two ways to get the browser&#39;s cookie, you can choose any convenient method.&lt;/p&gt; &#xA;&lt;p&gt;**** Option one&lt;/p&gt; &#xA;&lt;p&gt;If you have a Python environment, run =pip3 install browser_cookie3= to install =browser_cookie3=, then open the terminal and execute the following code:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh python -c &#34;import browser_cookie3;list(map(lambda c: print(&#39;{} {} {} {} {} {}&#39;.format(c.name, c.value, c.expires,c.domain, c.secure, c.path)), filter(lambda c: c.domain in (&#39;.bing.com&#39;, &#39;www.bing.com&#39;), browser_cookie3.edge(domain_name=&#39;bing.com&#39;))))&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you can see the output and there is a =_U= field in the output, then you can log in successfully with this method.&lt;/p&gt; &#xA;&lt;p&gt;**** Option two&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the cookie editor extension for [[https://microsoftedge.microsoft.com/addons/detail/cookieeditor/neaplmfkghagebokkhpjpoebhdledlfi][Edge]]&lt;/li&gt; &#xA; &lt;li&gt;Go to bing.com&lt;/li&gt; &#xA; &lt;li&gt;Open the extension&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Export&#34; on the bottom right (This saves your cookies to clipboard)&lt;/li&gt; &#xA; &lt;li&gt;Paste your cookies into a file cookies.json&lt;/li&gt; &#xA; &lt;li&gt;Set =aichat-bingai-cookies-file= to your cookies.json path&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;*** Commands&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=aichat-bingai-chat= : Send a conversation message, adding =C-u= prefix will start a new conversation&lt;/li&gt; &#xA; &lt;li&gt;=aichat-bingai-assistant= : Send the selected region or the input content, and the returned result is displayed in the Buffer defined by =aichat-bingai-assistant-buffer=&lt;/li&gt; &#xA; &lt;li&gt;=aichat-bingai-replace-or-insert= : Send the selected region or the input content, and replace the selected region or insert at the current position with the returned result&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Customized fixed questioning approach.&lt;/p&gt; &#xA;&lt;p&gt;Use =aichat-bingai-prompt-create= to create a fixed way of asking questions, such as:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (aichat-bingai-prompt-create &#34;translator&#34; :input-prompt &#34;Please translate: &#34; :text-format &#34;Please identify the language I am speaking. If it is Chinese, please translate it into English; if it is not Chinese, please translate it into Chinese. Your answer must only contain the translated content. The following is the sentence I want to translate:\n%s&#34; :chat t :assistant t :replace-or-insert t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The above configuration will generate three functions: =aichat-bingai-chat-translator=, =aichat-bingai-assistant-translator=, and =aichat-bingai-replace-or-insert-translator=, which have the same effect as the above three commands, but the content of the query will be in the format of =text-format=.&lt;/p&gt; &#xA;&lt;p&gt;*** Options&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=aichat-bingai-cookies-file= : The path of cookies file.&lt;/li&gt; &#xA; &lt;li&gt;=aichat-bingai-conversation-style= : Conversation style, optional values are: =creative= , =balanced= or =precise= , default is =balanced=&lt;/li&gt; &#xA; &lt;li&gt;=aichat-bingai-chat-file= : a file that saves chat history&lt;/li&gt; &#xA; &lt;li&gt;=aichat-bingai-chat-display-function= : a function that displays chat files&lt;/li&gt; &#xA; &lt;li&gt;=aichat-bingai-assistant-buffer= : Display the buffer name of the content returned by =aichat-bingai-assistant=&lt;/li&gt; &#xA; &lt;li&gt;=aichat-bingai-assistant-display-function= : The function to display =aichat-bingai-assistant-buffer=, default to =display-buffer=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Setup&lt;/p&gt; &#xA;&lt;p&gt;*** AppKey&lt;/p&gt; &#xA;&lt;p&gt;emacs-aichat obtains AppKey through =auth-source-pick-first-password=, and writes your appkey into =~/.authinfo= file, with the following format:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src conf machine platform.openai.com login aichat-openai password your-app-key #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Proxy [Optional]&lt;/p&gt; &#xA;&lt;p&gt;Currently only tested http proxy, set =aichat-openai-proxy= as proxy address, for example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq aichat-openai-proxy &#34;localhost:51837&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;*** Commands&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=aichat-openai-assistant= : Send the selected region or the input content, and the returned result is displayed in the Buffer defined by =aichat-openai-assistant-buffer=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Options&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=aichat-openai-proxy= : set up an HTTP proxy that requests OpenAI&lt;/li&gt; &#xA; &lt;li&gt;=aichat-openai-assistant-buffer= : the buffer name of the OpenAI Assistant result&lt;/li&gt; &#xA; &lt;li&gt;=aichat-openai-assistant-display-function= : the function of display assistant buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feedback Issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To feedback your issue, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the debug mode by typing the command =aichat-toggle-debug=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/xhcoding/emacs-aichat/issues/new][Submit an issue]] and attach the content of the =&lt;em&gt;AICHAT-DEBUG&lt;/em&gt;= buffer when an error occurs.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>