<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-15T01:33:31Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>larstvei/Focus</title>
    <updated>2022-09-15T01:33:31Z</updated>
    <id>tag:github.com,2022-09-15:/larstvei/Focus</id>
    <link href="https://github.com/larstvei/Focus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dim the font color of text in surrounding paragraphs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://melpa.org/#/focus][file:https://melpa.org/packages/focus-badge.svg]] [[https://stable.melpa.org/#/focus][file:https://stable.melpa.org/packages/focus-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Focus&lt;/p&gt; &lt;p&gt;[[./focus-demo.gif]]&lt;/p&gt; &lt;p&gt;This is Focus, a package that dims surrounding text. It works with any theme and can be configured to focus in on different regions like sentences, paragraphs or code-blocks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;p&gt;It&#39;s available on [[https://melpa.org/#/focus][MELPA]] and [[https://stable.melpa.org/#/focus][MELPA Stable]]:&lt;/p&gt; &lt;p&gt;#+BEGIN_EXAMPLE M-x package-install focus #+END_EXAMPLE&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Usage&lt;/p&gt; &lt;p&gt;Enable &lt;del&gt;focus-mode&lt;/del&gt; with &lt;del&gt;M-x focus-mode&lt;/del&gt;.&lt;/p&gt; &lt;p&gt;A few interactive functions are provided:&lt;/p&gt; &lt;p&gt;| Function | Description | |----------------------+--------------------------------------------------------------------------| | &lt;del&gt;focus-change-thing&lt;/del&gt; | Adjust the narrowness of the focused section for the current buffer | | &lt;del&gt;focus-pin&lt;/del&gt; | Pin the focused section to its current location or the region, if active | | &lt;del&gt;focus-unpin&lt;/del&gt; | Unpin the focused section | | &lt;del&gt;focus-next-thing&lt;/del&gt; | Move the point to the middle of the Nth next thing | | &lt;del&gt;focus-prev-thing&lt;/del&gt; | Move the point to the middle of the Nth previous thing |&lt;/p&gt; &lt;p&gt;Focus relies on [[https://www.emacswiki.org/emacs/ThingAtPoint][Thing At Point]], which can retrieve a /thing/ surrounding the point. These /things/ may be a symbol, list, S-expression (sexp), function definition (defun), sentence, line, page and others. Calling &lt;del&gt;M-x focus-change-thing&lt;/del&gt; allows you to interactively change the kind of region which should be in focus.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Focus read-only mode&lt;/p&gt; &#xA;&lt;p&gt;Enable &lt;del&gt;focus-read-only-mode&lt;/del&gt; with &lt;del&gt;M-x focus-read-only-mode&lt;/del&gt;. It inhibits changes in a buffer, hides the cursor and provides bindings for moving between /things/.&lt;/p&gt; &#xA;&lt;p&gt;Some bindings for simple navigation and exiting &lt;code&gt;focus-read-only-mode&lt;/code&gt; are provided.&lt;/p&gt; &#xA;&lt;p&gt;| Keybinding | Description | |------------+-----------------------------| | &lt;del&gt;n&lt;/del&gt; | Jump to next /thing/ | | &lt;del&gt;SPC&lt;/del&gt; | Jump to next /thing/ | | &lt;del&gt;p&lt;/del&gt; | Jump to previous /thing/ | | &lt;del&gt;S-SPC&lt;/del&gt; | Jump to previous /thing/ | | &lt;del&gt;i&lt;/del&gt; | Exit &lt;del&gt;focus-read-only-mode&lt;/del&gt; | | &lt;del&gt;q&lt;/del&gt; | Exit &lt;del&gt;focus-read-only-mode&lt;/del&gt; |&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Customization&lt;/p&gt; &lt;p&gt;The choice of what /thing/ is suitable for a mode may be configured by setting the variable &lt;del&gt;focus-mode-to-thing&lt;/del&gt;. The default is&lt;/p&gt; &lt;p&gt;#+BEGIN_EXAMPLE &#39;((prog-mode . defun) (text-mode . sentence)) #+END_EXAMPLE&lt;/p&gt; &lt;p&gt;For modes inheriting &lt;del&gt;prog-mode&lt;/del&gt; (which are most programming modes), the default is the function-body, and for modes inheriting &lt;del&gt;text-mode&lt;/del&gt;, the default is a sentence.&lt;/p&gt; &lt;p&gt;For instance, adding the following to your &lt;del&gt;.emacs&lt;/del&gt;-file:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (add-to-list &#39;focus-mode-to-thing &#39;(python-mode . paragraph)) #+END_SRC&lt;/p&gt; &lt;p&gt;changes &lt;del&gt;python-mode&lt;/del&gt; to focus in on code-blocks with no blank lines rather than the entire function.&lt;/p&gt; &lt;p&gt;According to [[https://www.reddit.com/r/emacs/comments/b1vrar/lsp_support_for_focusel_using_lspmode/][this reddit post]], Focus plays nice with &lt;del&gt;lsp-mode&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Faces&lt;/p&gt; &#xA;&lt;p&gt;Focus offers two faces, one for the focused- and unfocused area. By default, the &lt;del&gt;focus-focused&lt;/del&gt; is the empty face, meaning there is no change, and &lt;del&gt;focus-unfocused&lt;/del&gt; inherits the comment face (which is usually subtle). The faces can easily be customized via &lt;del&gt;M-x list-faces-display&lt;/del&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rougier/sideframe</title>
    <updated>2022-09-15T01:33:31Z</updated>
    <id>tag:github.com,2022-09-15:/rougier/sideframe</id>
    <link href="https://github.com/rougier/sideframe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs side frames&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Sideframe is a package for creating sideframes that are glued to another parent frame. This can be used to display a menu or a dashboard for example. If you want to maximize a frame that has sideframes, use the &lt;code&gt;sideframe-toggle-maximized&lt;/code&gt; function that computes the size properly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/sideframe/master/sideframe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage example&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(sideframe-make &#39;left  32)&#xA;(sideframe-make &#39;right 32)&#xA;(sideframe-toggle-maximized)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using a theme that has both dark and light modes, you can also assign a different mode to the side frame (here with &lt;a href=&#34;https://github.com/rougier/nano-theme&#34;&gt;nano theme&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(sideframe-make &#39;left 32 &#39;dark `((foreground-color . ,nano-dark-foreground)&#xA;                                 (background-color . ,nano-dark-background)))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>emacs-straight/corfu</title>
    <updated>2022-09-15T01:33:31Z</updated>
    <id>tag:github.com,2022-09-15:/emacs-straight/corfu</id>
    <link href="https://github.com/emacs-straight/corfu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the corfu package from GNU ELPA, current as of 2022-09-14&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: corfu.el - Completion Overlay Region FUnction #+author: Daniel Mendler #+language: en #+export_file_name: corfu.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Corfu: (corfu). #+texinfo_dir_desc: Completion Overlay Region FUnction&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/corfu.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/corfu.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/corfu.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/corfu.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Corfu enhances completion at point with a small completion popup. The current candidates are shown in a popup below or above the point. Corfu is the minimalistic &lt;del&gt;completion-in-region&lt;/del&gt; counterpart of the [[https://github.com/minad/vertico][Vertico]] minibuffer UI.&lt;/p&gt; &#xA;&lt;p&gt;Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion UI. Completions are either provided by commands like &lt;del&gt;dabbrev-completion&lt;/del&gt; or by pluggable backends (&lt;del&gt;completion-at-point-functions&lt;/del&gt;, Capfs). Most programming language major modes implement a Capf. Furthermore the language server packages, [[https://github.com/joaotavora/eglot][Eglot]] and [[https://github.com/emacs-lsp/lsp-mode][Lsp-mode]], use Capfs which talk to the LSP server to retrieve the completions. Corfu does not include its own completion backends. The Emacs built-in Capfs and the Capfs provided by other programming language packages are usually sufficient. A few additional Capfs and completion utilities are provided by the [[https://github.com/minad/cape][Cape]] package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Corfu uses child frames to show the popup and falls back to the default setting of the &lt;del&gt;completion-in-region-function&lt;/del&gt; on non-graphical displays. If you want to use Corfu in the terminal, install the package [[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]], which provides an alternative overlay-based display.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/minad/corfu/raw/screenshots/light.png?raw=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/minad/corfu/raw/screenshots/dark.png?raw=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+toc: headlines 8&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Timer-based auto-completions (/off/ by default, set &lt;del&gt;corfu-auto&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Popup display with scrollbar indicator and arrow key navigation.&lt;/li&gt; &#xA; &lt;li&gt;The popup can be summoned explicitly by pressing =TAB= at any time.&lt;/li&gt; &#xA; &lt;li&gt;The current candidate is inserted with =TAB= and selected with =RET=.&lt;/li&gt; &#xA; &lt;li&gt;Candidates sorting by prefix, string length and alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;The selected candidate is previewed (configurable via &lt;del&gt;corfu-preview-current&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The selected candidate automatically committed on further input by default. (configurable via &lt;del&gt;corfu-preview-current&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The [[https://github.com/oantolin/orderless][Orderless]] completion style is supported. The filter string can contain arbitrary characters, after inserting a space via =M-SPC= (configurable via &lt;del&gt;corfu-quit-at-boundary&lt;/del&gt; and &lt;del&gt;corfu-separator&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Deferred completion style highlighting for performance.&lt;/li&gt; &#xA; &lt;li&gt;Support for candidate annotations and documentation in the echo area.&lt;/li&gt; &#xA; &lt;li&gt;Deprecated candidates are crossed out in the display.&lt;/li&gt; &#xA; &lt;li&gt;Icons can be provided by an external package via margin formatter functions.&lt;/li&gt; &#xA; &lt;li&gt;Extensions: Quick keys, Index keys, Sorting by history, Candidate documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation and Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu is available from [[http://elpa.gnu.org/packages/corfu.html][GNU ELPA]], such that it can be installed directly via &lt;del&gt;package-install&lt;/del&gt;. After installation, the global minor mode can be enabled with =M-x global-corfu-mode=. In order to configure Corfu and other packages in your init.el, you may want to use &lt;del&gt;use-package&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Corfu is highly flexible and customizable via &lt;del&gt;corfu-*&lt;/del&gt; customization variables, such that you can adapt it precisely to your requirements. However in order to quickly try out the Corfu completion package, it should be sufficient to activate &lt;del&gt;global-corfu-mode&lt;/del&gt;. You can experiment with manual completion for example in an Elisp buffer or in an Eshell or Shell buffer. For auto completion, set &lt;del&gt;corfu-auto=t&lt;/del&gt; before turning on &lt;del&gt;global-corfu-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package corfu ;; Optional customizations ;; :custom ;; (corfu-cycle t) ;; Enable cycling for `corfu-next/previous&#39; ;; (corfu-auto t) ;; Enable auto completion ;; (corfu-separator ?\s) ;; Orderless field separator ;; (corfu-quit-at-boundary nil) ;; Never quit at completion boundary ;; (corfu-quit-no-match nil) ;; Never quit, even if there is no match ;; (corfu-preview-current nil) ;; Disable current candidate preview ;; (corfu-preselect-first nil) ;; Disable candidate preselection ;; (corfu-on-exact-match nil) ;; Configure handling of exact matches ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area ;; (corfu-scroll-margin 5) ;; Use scroll margin&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Enable Corfu only for certain modes.&#xA;;; :hook ((prog-mode . corfu-mode)&#xA;;;        (shell-mode . corfu-mode)&#xA;;;        (eshell-mode . corfu-mode))&#xA;&#xA;;; Recommended: Enable Corfu globally.&#xA;;; This is recommended since Dabbrev can be used globally (M-/).&#xA;;; See also `corfu-excluded-modes&#39;.&#xA;:init&#xA;(global-corfu-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;;; A few more useful configurations... (use-package emacs :init ;; TAB cycle if there are only few candidates (setq completion-cycle-threshold 3)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Emacs 28: Hide commands in M-x which do not apply to the current mode.&#xA;;; Corfu commands are hidden, since they are not supposed to be used via M-x.&#xA;;; (setq read-extended-command-predicate&#xA;;;       #&#39;command-completion-default-include-p)&#xA;&#xA;;; Enable indentation+completion using the TAB key.&#xA;;; `completion-at-point&#39; is often bound to M-TAB.&#xA;(setq tab-always-indent &#39;complete))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Dabbrev completion is based on =completion-in-region= and can be used with Corfu. You may want to swap the =dabbrev-completion= with the =dabbrev-expand= key for easier access, if you prefer completion. Also take a look at the =cape-dabbrev= completion at point function provided by my [[https://github.com/minad/cape][Cape]] package.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use Dabbrev with Corfu! (use-package dabbrev ;; Swap M-/ and C-M-/ :bind ((&#34;M-/&#34; . dabbrev-completion) (&#34;C-M-/&#34; . dabbrev-expand)) ;; Other useful Dabbrev configurations. :custom (dabbrev-ignored-buffer-regexps &#39;(&#34;\.\(?:pdf\|jpe?g\|png\)\&#39;&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you start to configure the package more deeply, I recommend to give the Orderless completion style a try for filtering. Orderless completion is different from the familiar prefix TAB completion. Corfu can be used with the default completion styles. The use of Orderless is not a necessity.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Optionally use the `orderless&#39; completion style. (use-package orderless :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers &#39;(+orderless-dispatch) ;; orderless-component-separator #&#39;orderless-escapable-split-on-space) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles . (partial-completion)))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. See =+orderless-dispatch= in the [[https://github.com/minad/consult/wiki][Consult wiki]] for an advanced Orderless style dispatcher. Additionally enable =partial-completion= for file path expansion. =partial-completion= is important for file wildcard support. Multiple files can be opened at once with =find-file= if you enter a wildcard. You may also give the =initials= completion style a try.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[https://github.com/minad/corfu/wiki][Corfu Wiki]] and the [[https://github.com/minad/cape][Cape manual]] for additional Capf configuration tips. The Lsp-mode configuration is documented in the wiki. For more general documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want to create your own Capfs, you can find documentation about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Auto completion&lt;/p&gt; &#xA;&lt;p&gt;Auto completion is disabled by default, but can be enabled by setting &lt;del&gt;corfu-auto=t&lt;/del&gt;. Furthermore you may want to configure Corfu to quit completion eagerly, such that the completion popup stays out of your way when it appeared unexpectedly.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable auto completion and configure quitting (setq corfu-auto t corfu-quit-no-match &#39;separator) ;; or t #+end_src&lt;/p&gt; &#xA;&lt;p&gt;I recommend to experiment a bit with the various settings and key bindings to find a configuration which works for you. There is no one size fits all solution. Some people like auto completion, some like manual completion, some want to cycle with TAB and some with the arrow keys.&lt;/p&gt; &#xA;&lt;p&gt;In case you like aggressive auto completion settings, where the completion popup appears immediately, I recommend to use a cheap completion style like =basic=, which performs prefix filtering. In this case Corfu completion should still be very fast in buffers with efficient completion backends. You can try the following settings in an Elisp buffer or the Emacs scratch buffer.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Aggressive completion, cheap prefix filtering. (setq-local corfu-auto t corfu-auto-delay 0 corfu-auto-prefix 0 completion-styles &#39;(basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you want to combine fast prefix filtering and Orderless filtering you can still do that by defining a custom Orderless completion style via =orderless-define-completion-style=. We use a custom style dispatcher, which enables prefix filtering for input shorter than 4 characters. Note that such a setup is quite advanced. Please refer to the Orderless documentation and source code for further details.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun orderless-fast-dispatch (word index total) (and (= index 0) (= total 1) (length&amp;lt; word 4) `(orderless-regexp . ,(concat &#34;^&#34; (regexp-quote word)))))&lt;/p&gt; &#xA;&lt;p&gt;(orderless-define-completion-style orderless-fast (orderless-style-dispatchers &#39;(orderless-fast-dispatch)) (orderless-matching-styles &#39;(orderless-literal orderless-regexp)))&lt;/p&gt; &#xA;&lt;p&gt;(setq-local corfu-auto t corfu-auto-delay 0 corfu-auto-prefix 0 completion-styles &#39;(orderless-fast)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completing in the minibuffer&lt;/p&gt; &#xA;&lt;p&gt;Corfu can be used for completion in the minibuffer, since it relies on child frames to display the candidates. By default, &lt;del&gt;global-corfu-mode&lt;/del&gt; does not activate &lt;del&gt;corfu-mode&lt;/del&gt; in the minibuffer, to avoid interference with specialised minibuffer completion UIs like Vertico or Mct. However you may still want to enable Corfu completion for commands like &lt;del&gt;M-:&lt;/del&gt; (&lt;del&gt;eval-expression&lt;/del&gt;) or &lt;del&gt;M-!&lt;/del&gt; (&lt;del&gt;shell-command&lt;/del&gt;), which read from the minibuffer. Activate &lt;del&gt;corfu-mode&lt;/del&gt; only if &lt;del&gt;completion-at-point&lt;/del&gt; is bound in the minibuffer-local keymap to achieve this effect.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-enable-in-minibuffer () &#34;Enable Corfu in the minibuffer if `completion-at-point&#39; is bound.&#34; (when (where-is-internal #&#39;completion-at-point (list (current-local-map))) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook &#39;minibuffer-setup-hook #&#39;corfu-enable-in-minibuffer) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also enable Corfu more generally for every minibuffer, as long as no other completion UI is active. If you use Mct or Vertico as your main minibuffer completion UI, the following snippet should yield the desired result.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-enable-always-in-minibuffer () &#34;Enable Corfu in the minibuffer if Vertico/Mct are not active.&#34; (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook &#39;minibuffer-setup-hook #&#39;corfu-enable-always-in-minibuffer 1) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completing in the Eshell or Shell&lt;/p&gt; &#xA;&lt;p&gt;When completing in the Eshell I recommend conservative local settings without auto completion, such that the completion behavior is similar to widely used shells like Bash, Zsh or Fish.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;eshell-mode-hook (lambda () (setq-local corfu-auto nil) (corfu-mode))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;When pressing =RET= while the Corfu popup is visible, the &lt;del&gt;corfu-insert&lt;/del&gt; command will be invoked. This command does inserts the currently selected candidate, but it does not send the prompt input to Eshell or the comint process. Therefore you often have to press =RET= twice which feels like an unnecessary double confirmation. Fortunately it is easy to improve this! In my configuration I define the advice &lt;del&gt;corfu-send-shell&lt;/del&gt; which sends the candidate after insertion.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-send-shell (&amp;amp;rest _) &#34;Send completion candidate when inside comint/eshell.&#34; (cond ((and (derived-mode-p &#39;eshell-mode) (fboundp &#39;eshell-send-input)) (eshell-send-input)) ((and (derived-mode-p &#39;comint-mode) (fboundp &#39;comint-send-input)) (comint-send-input))))&lt;/p&gt; &#xA;&lt;p&gt;(advice-add #&#39;corfu-insert :after #&#39;corfu-send-shell) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Shell completion uses the flexible &lt;del&gt;Pcomplete&lt;/del&gt; mechanism internally, which allows you to program the completions per shell command. If you want to know more, look into this [[https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs][blog post]], which shows how to configure Pcomplete for git commands. I recommend the [[https://github.com/JonWaltman/pcmpl-args.el][pcmpl-args]] package which extends Pcomplete with completion support and helpful annotation support for more commands. Similar to the Fish shell, pcmpl-args uses man page parsing and --help output parsing to dynamically generate completions. This package brings Eshell completion to another level!&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately Pcomplete has a few technical issues, which we can work around with the [[https://github.com/minad/cape][Cape]] library (Completion at point extensions). Cape provides wrappers, which sanitize the Pcomplete function. Ideally the bugs in Pcomplete should be fixed upstream. &lt;em&gt;For now these two advices are strongly recommended to achieve a sane Eshell experience.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Silence the pcomplete capf, no errors or messages! (advice-add &#39;pcomplete-completions-at-point :around #&#39;cape-wrap-silent)&lt;/p&gt; &#xA;&lt;p&gt;;; Ensure that pcomplete does not write to the buffer ;; and behaves as a pure `completion-at-point-function&#39;. (advice-add &#39;pcomplete-completions-at-point :around #&#39;cape-wrap-purify) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Orderless completion&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/oantolin/orderless][Orderless]] is an advanced completion style that supports multi-component search filters separated by a configurable character (space, by default). Normally, entering characters like space which lie outside the completion region boundaries (words, typically) causes Corfu to quit. This behavior is helpful with auto-completion, which may pop-up when not desired, e.g. on entering a new variable name. Just keep typing and Corfu will get out of the way.&lt;/p&gt; &#xA;&lt;p&gt;But orderless search terms can contain arbitrary characters; they are also interpreted as regular expressions. To use orderless, set &lt;del&gt;corfu-separator&lt;/del&gt; (a space, by default) to the primary character of your orderless component separator.&lt;/p&gt; &#xA;&lt;p&gt;Then, when a new orderless component is desired, use =M-SPC= (&lt;del&gt;corfu-insert-separator&lt;/del&gt;) to enter the /first/ component separator in the input, and arbitrary orderless search terms and new separators can be entered thereafter.&lt;/p&gt; &#xA;&lt;p&gt;To treat the entire input as Orderless input, you can set the customization option &lt;del&gt;corfu-quit-at-boundary=t&lt;/del&gt;. This disables the predicate which checks if the current completion boundary has been left. In contrast, if you /always/ want to quit at the boundary, simply set &lt;del&gt;corfu-quit-at-boundary=nil&lt;/del&gt;. By default &lt;del&gt;corfu-quit-at-boundary&lt;/del&gt; is set to &lt;del&gt;separator&lt;/del&gt; which quits at completion boundaries as long as no separator has been inserted with &lt;del&gt;corfu-insert-separator&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, there exists the user option &lt;del&gt;corfu-quit-no-match&lt;/del&gt; which is set to =separator= by default. With this setting Corfu stays alive as soon as you start advanced filtering with a &lt;del&gt;corfu-separator&lt;/del&gt; even if there are no matches, for example due to a typo. As long as no separator character has been inserted with &lt;del&gt;corfu-insert-separator&lt;/del&gt;, Corfu will still quit if there are no matches. This ensures that the Corfu popup goes away quickly if completion is not possible.&lt;/p&gt; &#xA;&lt;p&gt;In the following we show two configurations, one which works best with auto completion and one which may work better with manual completion if you prefer to always use =SPC= to separate the Orderless components.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Auto completion example (use-package corfu :custom (corfu-auto t) ;; Enable auto completion ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space :bind ;; Another key binding can be used, such as S-SPC. ;; (:map corfu-map (&#34;M-SPC&#34; . corfu-insert-separator)) :init (global-corfu-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; Manual completion example (use-package corfu :custom ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space :bind ;; Configure SPC for separator insertion (:map corfu-map (&#34;SPC&#34; . corfu-insert-separator)) :init (global-corfu-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** TAB-and-Go completion&lt;/p&gt; &#xA;&lt;p&gt;You may be interested in configuring Corfu in TAB-and-Go style. Pressing TAB moves to the next candidate and further input will then commit the selection. Note that further input will not expand snippets or templates, which may not be desired but which leads overall to a more predictable behavior. In order to force snippet expansion, confirm a candidate explicitly with &lt;del&gt;RET&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package corfu ;; TAB-and-Go customizations :custom (corfu-cycle t) ;; Enable cycling for `corfu-next/previous&#39; (corfu-preselect-first nil) ;; Disable candidate preselection&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Use TAB for cycling, default is `corfu-complete&#39;.&#xA;:bind&#xA;(:map corfu-map&#xA;      (&#34;TAB&#34; . corfu-next)&#xA;      ([tab] . corfu-next)&#xA;      (&#34;S-TAB&#34; . corfu-previous)&#xA;      ([backtab] . corfu-previous))&#xA;&#xA;:init&#xA;(global-corfu-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Transfer completion to the minibuffer&lt;/p&gt; &#xA;&lt;p&gt;Sometimes it is useful to transfer the Corfu completion session to the minibuffer, since the minibuffer offers richer interaction features. In particular, [[https://github.com/oantolin/embark][Embark]] is available in the minibuffer, such that you can act on the candidates or export/collect the candidates to a separate buffer. Hopefully we can also add Corfu-support to Embark in the future, such that at least export/collect is possible directly from Corfu. But in my opinion having the ability to transfer the Corfu completion to the minibuffer is an even better feature, since further completion can be performed there.&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;corfu-move-to-minibuffer&lt;/del&gt; is defined here in terms of &lt;del&gt;consult-completion-in-region&lt;/del&gt;, which uses the minibuffer completion UI via &lt;del&gt;completing-read&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-move-to-minibuffer () (interactive) (let ((completion-extra-properties corfu--extra) completion-cycle-threshold completion-cycling) (apply #&#39;consult-completion-in-region completion-in-region--data))) (define-key corfu-map &#34;\M-m&#34; #&#39;corfu-move-to-minibuffer) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu uses a transient keymap &lt;del&gt;corfu-map&lt;/del&gt; which is active while the popup is shown. The keymap defines the following remappings and bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;beginning-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-first&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;end-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-last&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-down-command&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-scroll-down&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-up-command&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-scroll-up&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;next-line&lt;/del&gt;, =down=, =M-n= -&amp;gt; &lt;del&gt;corfu-next&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;previous-line&lt;/del&gt;, =up=, =M-p= -&amp;gt; &lt;del&gt;corfu-previous&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;completion-at-point&lt;/del&gt;, =TAB= -&amp;gt; &lt;del&gt;corfu-complete&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=RET= -&amp;gt; &lt;del&gt;corfu-insert&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-g= -&amp;gt; &lt;del&gt;corfu-info-location&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-h= -&amp;gt; &lt;del&gt;corfu-info-documentation&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-SPC= -&amp;gt; &lt;del&gt;corfu-insert-separator&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=C-g= -&amp;gt; &lt;del&gt;corfu-quit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;keyboard-escape-quit&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-reset&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensions :properties: :custom_id: extensions &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We maintain small extension packages to Corfu in this repository in the subdirectory [[https://github.com/minad/corfu/tree/main/extensions][extensions/]]. The extensions are installed together with Corfu if you pull the package from ELPA. The extensions are inactive by default and can be enabled manually if desired. Furthermore it is possible to install all of the files separately, both &lt;del&gt;corfu.el&lt;/del&gt; and the &lt;del&gt;corfu-*.el&lt;/del&gt; extensions. Currently the following extensions come with the Corfu ELPA package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-history.el][corfu-history]]: =corfu-history-mode= to remember selected candidates and to improve sorting.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-indexed.el][corfu-indexed]]: =corfu-indexed-mode= to select indexed candidates with prefix arguments.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-info.el][corfu-info]]: Actions to access the candidate location and documentation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-quick.el][corfu-quick]]: Commands to select using Avy-style quick keys.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the Commentary of those files for configuration details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complementary packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu works well together with all packages providing code completion via the &lt;del&gt;completion-at-point-functions&lt;/del&gt;. Many modes and packages already provide a Capf out of the box. Nevertheless you may want to look into complementary packages to enhance your setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]]: The corfu-terminal package provides an overlay-based display for Corfu, such that you can use Corfu in terminal Emacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/galeo/corfu-doc][corfu-doc]]: The corfu-doc package displays the candidate documentation in a popup next to the Corfu popup, similar to =company-quickhelp=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/oantolin/orderless][Orderless]]: Corfu supports completion styles, including the advanced [[https://github.com/oantolin/orderless][Orderless]] completion style, where the filtering expressions are separated by spaces or another character (see &lt;del&gt;corfu-separator&lt;/del&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/cape][Cape]]: Additional Capf backends and =completion-in-region= commands are provided by the [[https://github.com/minad/cape][Cape]] package. Among others, the package supplies a file path and a Dabbrev completion backend. Cape provides the &lt;del&gt;cape-company-to-capf&lt;/del&gt; adapter to reuse Company backends in Corfu. Furthermore the function &lt;del&gt;cape-super-capf&lt;/del&gt; can merge multiple Capfs, such that the candidates of multiple Capfs are displayed together at the same time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/jdtsmith/kind-icon][kind-icon]]: Icons are supported by Corfu via an external package. For example the [[https://github.com/jdtsmith/kind-icon][kind-icon]] package provides beautifully styled SVG icons based on monochromatic icon sets like material design.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/JonWaltman/pcmpl-args.el][pcmpl-args]]: Extend the Eshell/Shell Pcomplete mechanism with support for many more commands. Similar to the Fish shell, Pcomplete uses man page parsing to dynamically retrieve the completions and helpful annotations. This package brings Eshell completions to another level!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/tempel][Tempel]]: Tiny template/snippet package with templates in Lisp syntax, which can be used in conjunction with Corfu.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/vertico][Vertico]]: You may also want to look into my [[https://github.com/minad/vertico][Vertico]] package. Vertico is the minibuffer completion counterpart of Corfu.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/company-mode/company-mode][Company]]: Company is a widely used and mature completion package, which implements a similar interaction model and popup UI as Corfu. While Corfu relies exclusively on the standard Emacs completion API (Capfs), Company defines its own API for the backends. Company includes its completion backends, which are incompatible with the Emacs completion infrastructure. As a result of this design, Company is a more complex package than Corfu. Company by default uses overlays for the popup in contrast to the child frames used by Corfu. Overall both packages work well, but Company integrates less tightly with Emacs. The &lt;del&gt;completion-styles&lt;/del&gt; support is more limited and the &lt;del&gt;completion-at-point&lt;/del&gt; command and the &lt;del&gt;completion-in-region&lt;/del&gt; function do not invoke Company.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://git.sr.ht/~protesilaos/mct][Mct]]: Protesilaos&#39; Minibuffer Confines Transcended package supports both minibuffer completion and completion in region. It reuses the default completion UI for this purpose and installs a timer which live updates the completion buffer. The main advantage of Mct is that you work with a regular Emacs buffer instead of with a popup. You can take advantage of the usual Emacs commands to navigate in the completions buffer. On top, Mct enhances the movement such that you can quickly switch between the completions buffer and the minibuffer or the region which is being completed. Mct does not support timer-based auto completion, but the integration into Emacs is naturally tight. Note that Mct development is currently [[https://protesilaos.com/codelog/2022-04-14-emacs-discontinue-mct/][discontinued]] due to recent changes of the default completion UI on the Emacs master branch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/consult][consult-completion-in-region]]: The Consult package provides the function &lt;del&gt;consult-completion-in-region&lt;/del&gt; which can be set as &lt;del&gt;completion-in-region-function&lt;/del&gt; such that it handles &lt;del&gt;completion-at-point&lt;/del&gt;. The function works by transferring the in-buffer completion to the minibuffer. In the minibuffer, the minibuffer completion UI, for example [[https://github.com/minad/vertico][Vertico]] takes over. If you prefer to perform all your completions in the minibuffer &lt;del&gt;consult-completion-in-region&lt;/del&gt; is your best option.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/corfu.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
</feed>