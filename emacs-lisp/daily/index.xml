<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-25T01:28:39Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>quarto-dev/quarto-emacs</title>
    <updated>2024-02-25T01:28:39Z</updated>
    <id>tag:github.com,2024-02-25:/quarto-dev/quarto-emacs</id>
    <link href="https://github.com/quarto-dev/quarto-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An emacs mode for quarto: https://quarto.org&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;An emacs mode for quarto&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Quarto-mode&lt;/code&gt; is an emacs mode for editing &lt;a href=&#34;https://quarto.org&#34;&gt;quarto&lt;/a&gt; documents.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;quarto-mode&lt;/code&gt; is available on MELPA. From emacs,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-refresh-contents&#xA;M-x package-install&#xA;  quarto-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;quarto-mode&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add this to your &lt;code&gt;.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; load the library&#xA;(require &#39;quarto-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;quarto-mode&lt;/code&gt; package will associate a quarto &lt;a href=&#34;https://github.com/polymode/polymode&#34;&gt;polymode&lt;/a&gt; to &lt;code&gt;.qmd&lt;/code&gt; files. That means that there isn&#39;t an actual &lt;code&gt;quarto-mode&lt;/code&gt; mode. If you want to associate other files to the quarto polymode, you should use &lt;code&gt;poly-quarto-mode&lt;/code&gt;, such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Note that the following is not necessary to run quarto-mode in .qmd files! It&#39;s merely illustrating&#xA;;; how to associate different extensions to the mode.&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.Rmd\\&#39;&#34; . poly-quarto-mode))&#xA;&#xA;;; Or, with use-package:&#xA;(use-package quarto-mode&#xA;  :mode ((&#34;\\.Rmd&#34; . poly-quarto-mode))&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Quarto-mode requires the following packages to be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(polymode &#34;0.2.2&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(poly-markdown &#34;0.2.2&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(markdown-mode &#34;2.3&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(request &#34;0.3.2&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;quarto-mode + ESS&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://ess.r-project.org/&#34;&gt;ESS&lt;/a&gt;, &lt;code&gt;quarto-mode&lt;/code&gt; will use it. Otherwise, it won&#39;t. Specifically, &lt;code&gt;quarto-mode&lt;/code&gt; does not depend on ESS (or R), which means that if you want to use those features, you have to install ESS separately.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x quarto-preview&lt;/code&gt;. Start a &lt;code&gt;quarto preview&lt;/code&gt; server. If the current buffer has an associated file that exists in a quarto project, the command will preview the entire project. Otherwise, it will preview the specific file.&lt;/li&gt; &#xA; &lt;li&gt;Integration with poly-markdown&#39;s compilation. The default poly-markdown configuration runs plain &lt;code&gt;pandoc&lt;/code&gt; on the document; &lt;code&gt;quarto-mode&lt;/code&gt; uses &lt;code&gt;quarto render&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Differences in behavior between quarto-mode and markdown-mode&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-c *&lt;/code&gt; behavior&lt;/p&gt; &lt;p&gt;&lt;code&gt;quarto-mode&lt;/code&gt; uses features specific to quarto that make it behave differently from what &lt;code&gt;markdown-mode&lt;/code&gt; users might expect. By default, &lt;code&gt;quarto-mode&lt;/code&gt; uses &lt;code&gt;quarto preview&lt;/code&gt;, which works through a custom web server, and does not produce disk output upon preview. &lt;code&gt;quarto preview&lt;/code&gt; is significantly faster than rerendering entire files in interactive mode, so we encourage you to use it.&lt;/p&gt; &lt;p&gt;However, if you wish to not use &lt;code&gt;quarto preview&lt;/code&gt; and instead depend on the typical rendering mode of previewing, you can restore the standard &lt;code&gt;markdown-mode&lt;/code&gt; behavior by changing the &lt;code&gt;quarto-force-preview&lt;/code&gt; customization variable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>purcell/ruby-hash-syntax</title>
    <updated>2024-02-25T01:28:39Z</updated>
    <id>tag:github.com,2024-02-25:/purcell/ruby-hash-syntax</id>
    <link href="https://github.com/purcell/ruby-hash-syntax" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In Emacs, toggle ruby hash syntax between classic and 1.9 styles&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/ruby-hash-syntax&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/ruby-hash-syntax-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/ruby-hash-syntax&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/ruby-hash-syntax-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ruby-hash-syntax.el&lt;/h1&gt; &#xA;&lt;p&gt;Adapted from the method used by TextMate, this library provides a command &lt;code&gt;ruby-hash-syntax-toggle&lt;/code&gt; which attempts to automatically convert the selected region of ruby code between 1.8 and 1.9 hash styles.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;If you choose not to use one of the convenient packages in &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt;, you&#39;ll need to add the directory containing &lt;code&gt;ruby-hash-syntax.el&lt;/code&gt; to your &lt;code&gt;load-path&lt;/code&gt;, and then &lt;code&gt;(require &#39;ruby-hash-syntax)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Add the following to your emacs init file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;ruby-hash-syntax)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then select a block of ruby code containing a hash literal (perhaps using &lt;code&gt;mark-sexp&lt;/code&gt;), and run the &lt;code&gt;ruby-hash-syntax-toggle&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x ruby-hash-syntax-toggle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might like to bind that command to a key in &lt;code&gt;ruby-mode-map&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://coderwall.com/purcell&#34;&gt;&lt;img src=&#34;http://api.coderwall.com/purcell/endorsecount.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://uk.linkedin.com/in/stevepurcell&#34;&gt;&lt;img src=&#34;http://www.linkedin.com/img/webpromo/btn_liprofile_blue_80x15.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;Steve Purcell&#39;s blog&lt;/a&gt; // &lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;@sanityinc on Twitter&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>