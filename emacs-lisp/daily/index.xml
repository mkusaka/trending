<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-03T01:31:33Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-tree-sitter/ts-fold</title>
    <updated>2022-12-03T01:31:33Z</updated>
    <id>tag:github.com,2022-12-03:/emacs-tree-sitter/ts-fold</id>
    <link href="https://github.com/emacs-tree-sitter/ts-fold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code-folding using tree-sitter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jcs-emacs.github.io/jcs-elpa/#/ts-fold&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jcs-emacs/badges/master/elpa/v/ts-fold.svg?sanitize=true&#34; alt=&#34;JCS-ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ts-fold&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Code-folding using tree-sitter&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-tree-sitter/ts-fold/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-tree-sitter/ts-fold/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ts-fold&lt;/code&gt; builds on top of &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter&#34;&gt;elisp-tree-sitter&lt;/a&gt; to provide code folding based on the tree-sitter syntax tree.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/etc/screenshot.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;!-- Markdown is not able to render links with unicode so after refreshing the toc, select it and:&#xA;    `M-x regexp-replace #[^a-zA-Z] &lt;ret&gt; # &lt;ret&gt;` --&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#ts-fold&#34;&gt;ts-fold&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-installation&#34;&gt;💾 Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-method-1-with-straightel-and-use-package&#34;&gt;🔍 Method 1. with &lt;code&gt;straight.el&lt;/code&gt; and &lt;code&gt;use-package&lt;/code&gt;:&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-method-2-manual&#34;&gt;🔍 Method 2. Manual&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-commands&#34;&gt;📇 Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-supported-languages&#34;&gt;🔨 Supported languages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#%EF%B8%8F-indicators-mode&#34;&gt;⚖️ Indicators Mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-summary&#34;&gt;📝 Summary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-contribute&#34;&gt;🔰 Contribute&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-how-to-create-a-folding-parser&#34;&gt;❓ How to create a folding parser?&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-where-can-i-look-for-tree-sitter-node&#34;&gt;🔍 Where can I look for tree-sitter node?&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-how-do-i-create-the-function-for-the-corresponding-node&#34;&gt;🔍 How do I create the function for the corresponding node?&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-register-in-the-folding-parsers-alist&#34;&gt;🔍 Register in the folding parsers alist!&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-how-to-create-a-summary-parser&#34;&gt;❓ How to create a summary parser?&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/#-register-to-summary-parsers-alist&#34;&gt;🔍 Register to summary parsers alist!&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;💾 Installation&lt;/h2&gt; &#xA;&lt;h3&gt;🔍 Method 1. with &lt;code&gt;straight.el&lt;/code&gt; and &lt;code&gt;use-package&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package ts-fold&#xA;  :straight (ts-fold :type git :host github :repo &#34;emacs-tree-sitter/ts-fold&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔍 Method 2. Manual&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/emacs-tree-sitter/ts-fold /path/to/lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then in Emacs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/lib&#34;)&#xA;(require ts-fold)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package ts-fold&#xA;  :load-path &#34;/path/to/lib&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📇 Commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Commands&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ts-fold-close&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fold the current syntax node.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ts-fold-open&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open all folds inside the current syntax node.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ts-fold-open-recursively&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open the outmost fold of the current syntax node. Keep the sub-folds close.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ts-fold-close-all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;close all foldable syntax nodes in the current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ts-fold-open-all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open all folded syntax nodes in the current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ts-fold-toggle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle the syntax node at `point&#39;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🔨 Supported languages&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Please sort these two lists alphabetically!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;These languages are fairly complete:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bash&lt;/li&gt; &#xA; &lt;li&gt;C / C++ / C# / CSS&lt;/li&gt; &#xA; &lt;li&gt;Elixir&lt;/li&gt; &#xA; &lt;li&gt;Go&lt;/li&gt; &#xA; &lt;li&gt;HTML&lt;/li&gt; &#xA; &lt;li&gt;Java / JavaScript / JSX / JSON / Julia&lt;/li&gt; &#xA; &lt;li&gt;Nix&lt;/li&gt; &#xA; &lt;li&gt;PHP / Python&lt;/li&gt; &#xA; &lt;li&gt;R / Ruby / Rust&lt;/li&gt; &#xA; &lt;li&gt;Scala / Swift&lt;/li&gt; &#xA; &lt;li&gt;TypeScript / TSX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These languages are in development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agda&lt;/li&gt; &#xA; &lt;li&gt;Elm&lt;/li&gt; &#xA; &lt;li&gt;Emacs Lisp&lt;/li&gt; &#xA; &lt;li&gt;OCaml&lt;/li&gt; &#xA; &lt;li&gt;XML (upstream)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚖️ Indicators Mode&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/etc/indicators.png&#34; width=&#34;40%&#34; height=&#34;480%&amp;quot;/&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;You need to load &lt;code&gt;ts-fold-indicators-mode&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package ts-fold-indicators&#xA;:straight (ts-fold-indicators :type git :host github :repo &#34;emacs-tree-sitter/ts-fold&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/lib&#34;)&#xA;(require ts-fold)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package ts-fold-indicators&#xA;   :load-path &#34;/path/to/lib&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can then enable this manually by doing the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x ts-fold-indicators-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To enable this automatically whenever &lt;code&gt;tree-sitter-mode&lt;/code&gt; is enabled:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;tree-sitter-after-on-hook #ts-fold-indicators-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To switch to left/right fringe: (Default is &lt;code&gt;left-fringe&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setq ts-fold-indicators-fringe &#39;right-fringe)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To lower/higher the fringe overlay&#39;s priority: (Default is &lt;code&gt;30&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setq ts-fold-indicators-priority 30)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To apply different faces depending on some conditions: (Default is &lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;For example, to coordinate &lt;a href=&#34;https://github.com/emacs-vs/line-reminder&#34;&gt;line-reminder&lt;/a&gt; with this plugin.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq ts-fold-indicators-face-function&#xA;   (lambda (pos &amp;amp;rest _)&#xA;     (let ((ln (line-number-at-pos pos)))&#xA;       (cond&#xA;        ((memq ln line-reminder--change-lines) &#39;line-reminder-modified-sign-face)&#xA;        ((memq ln line-reminder--saved-lines) &#39;line-reminder-saved-sign-face)&#xA;        (t nil)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📝 Summary&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/ts-fold/master/etc/summary.gif&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This plugin automatically extracts summary from the comment/document string, so you can have a nice way to peek at what&#39;s inside the fold range.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t want this to happen, do: (Default is &lt;code&gt;t&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq ts-fold-summary-show nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Summary are truncated by length: (Default is &lt;code&gt;60&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq ts-fold-summary-max-length 60)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The exceeding string are replace by: (Default is &lt;code&gt;&#34;...&#34;&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq ts-fold-summary-exceeded-string &#34;...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change summary format: (Default is &lt;code&gt;&#34; &amp;lt;S&amp;gt; %s &#34;&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq ts-fold-summary-format &#34; &amp;lt;S&amp;gt; %s &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔰 Contribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/jcs090218&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/jcs090218&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-become%20a%20patron-orange.svg?logo=patreon&#34; alt=&#34;Become a patron&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enable &lt;code&gt;tree-sitter-mode&lt;/code&gt; first, then &lt;code&gt;tree-sitter-query-builder&lt;/code&gt; is useful to test out queries that determine what syntax nodes should be foldable and how to fold them. &lt;a href=&#34;https://ubolonton.github.io/emacs-tree-sitter/syntax-highlighting/queries/&#34;&gt;emacs-tree-sitter&lt;/a&gt; has an excellent documentation on how to write &lt;code&gt;tree-sitter&lt;/code&gt; queries.&lt;/p&gt; &#xA;&lt;h3&gt;❓ How to create a folding parser?&lt;/h3&gt; &#xA;&lt;p&gt;Parsers are defined in the &lt;code&gt;ts-fold-parsers.el&lt;/code&gt; file. Parser functions are named with the prefix &lt;code&gt;ts-fold-parsers-&lt;/code&gt; followed by the &lt;code&gt;language name&lt;/code&gt;. For example, if you want to create a parser for the &lt;code&gt;C&lt;/code&gt; programming language you should name it &lt;code&gt;ts-fold-parsers-c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parsers are association lists (alist) whose items consist of tree-sitter &lt;code&gt;node&lt;/code&gt; and a function that returns the folding range. See the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun ts-fold-parsers-csharp ()&#xA;  &#34;Rule sets for C#.&#34;&#xA;  &#39;((block . ts-fold-range-seq)&#xA;    ...))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;block&lt;/code&gt; is the tree-sitter node and &lt;code&gt;ts-fold-range-seq&lt;/code&gt; is the function that will return the folding range.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s move into details,&lt;/p&gt; &#xA;&lt;h4&gt;🔍 Where can I look for tree-sitter node?&lt;/h4&gt; &#xA;&lt;p&gt;To look for the correct node you have three options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;look at the &lt;code&gt;tree-sitter-[lang]/grammar.js&lt;/code&gt; implementation. In the above example, &lt;code&gt;block&lt;/code&gt; node is defined in the &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-c-sharp&#34;&gt;tree-sitter-c-sharp&lt;/a&gt;&#39;s &lt;code&gt;grammar.js&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;open a file of your language choice in emacs and &lt;code&gt;M-x tree-sitter-debug-mode&lt;/code&gt;. This will display the whole s-expr representing your file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(message &#34;%S&#34; (tsc-node-to-sexp))&lt;/code&gt; in your function to display what your function is seeing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Warning&lt;/p&gt; &#xA; &lt;p&gt;Make sure you look into the correct repository. Repositories are managed under &lt;a href=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs&#34;&gt;tree-sitter-langs&lt;/a&gt;&#39;s using git submodule. Some tree-sitter module aren&#39;t using the latest version!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;🔍 How do I create the function for the corresponding node?&lt;/h4&gt; &#xA;&lt;p&gt;Function take 2 arguments, &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;node&lt;/code&gt; - the targeted tree-sitter node; in this example, &lt;code&gt;block&lt;/code&gt; will be the targeting node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;offset&lt;/code&gt; - (optional) a cons of two integers. This is handy when you have a similar rule with little of positioning adjustment.&lt;/p&gt; &lt;p&gt;&lt;code&gt;tree-sitter-[lang]&lt;/code&gt; parsers are generally integrated by different authors, hence their naming and ruling are slightly different (+1/-1 position).&lt;/p&gt; &lt;p&gt;Let&#39;s look at function &lt;code&gt;ts-fold-range-seq&lt;/code&gt; for better understanding,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun ts-fold-range-seq (node offset)&#xA;  &#34;...&#34;&#xA;  (let ((beg (1+ (tsc-node-start-position node)))  ; node beginning position (from Rust layer)&#xA;        (end (1- (tsc-node-end-position node))))   ; node end position (from Rust layer)&#xA;    (ts-fold--cons-add (cons beg end) offset)))    ; return fold range&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;🔍 Register in the folding parsers alist!&lt;/h4&gt; &#xA;&lt;p&gt;Don&#39;t forget to add your parser to the entry alist with its corresponding &lt;code&gt;major-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defcustom ts-fold-range-alist&#xA;  `((agda-mode       . ,(ts-fold-parsers-agda))&#xA;    (sh-mode         . ,(ts-fold-parsers-bash))&#xA;    (c-mode          . ,(ts-fold-parsers-c))&#xA;    (c++-mode        . ,(ts-fold-parsers-c++))&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This variable is defined in package main file, &lt;code&gt;ts-fold.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;❓ How to create a summary parser?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ts-fold-summary.el&lt;/code&gt; module is used to extract and display a short description from the comment/docstring.&lt;/p&gt; &#xA;&lt;p&gt;To create a summary parser, you just have to create a function that could extract comment syntax correctly then register this function to &lt;code&gt;ts-fold-summary-parsers-alist&lt;/code&gt; defined in &lt;code&gt;ts-fold-summary.el&lt;/code&gt;. The display and shortening will be handled by the module itself.&lt;/p&gt; &#xA;&lt;p&gt;Functions should be named with the prefix &lt;code&gt;ts-fold-summary-&lt;/code&gt; followed by &lt;code&gt;style name&lt;/code&gt;. For example, to create a summary parser for Javadoc style, then it should be named &lt;code&gt;ts-fold-summary-javadoc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s see the implementation,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun ts-fold-summary-javadoc (doc-str)&#xA;  &#34;...&#34;&#xA;  (ts-fold-summary--generic doc-str &#34;*&#34;))  ; strip all asterisks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above summary parser for Javadoc simply remove &lt;code&gt;*&lt;/code&gt; from any given point.&lt;/p&gt; &#xA;&lt;h4&gt;🔍 Register to summary parsers alist!&lt;/h4&gt; &#xA;&lt;p&gt;Like folding parsers, you should register your summary parser to the entry alist with its corresponding &lt;code&gt;major-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defcustom ts-fold-summary-parsers-alist&#xA;  `((actionscript-mode . ts-fold-summary-javadoc)&#xA;    (bat-mode          . ts-fold-summary-batch)&#xA;    (c-mode            . ts-fold-summary-c)&#xA;    (c++-mode          . ts-fold-summary-c)&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>