<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:32:43Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jtatarik/magit-gitflow</title>
    <updated>2022-12-11T01:32:43Z</updated>
    <id>tag:github.com,2022-12-11:/jtatarik/magit-gitflow</id>
    <link href="https://github.com/jtatarik/magit-gitflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitFlow plugin for magit.el&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;magit-gitflow&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/petervanderdoes/gitflow&#34;&gt;GitFlow&lt;/a&gt; plugin for &lt;a href=&#34;https://github.com/magit/magit/tree/master&#34;&gt;magit.el&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/petervanderdoes/gitflow&#34;&gt;gitflow&lt;/a&gt; and put the following in your &lt;code&gt;.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; C-f in the magit status buffer invokes the magit-gitflow popup. If you&#xA;;;; would like to use a different key, set the magit-gitflow-popup-key variable&#xA;;;; before loading magit-gitflow&#xA;;; (setq magit-gitflow-popup-key &#34;C-n&#34;)&#xA;&#xA;(require &#39;magit-gitflow)&#xA;(add-hook &#39;magit-mode-hook &#39;turn-on-magit-gitflow)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Press &lt;kbd&gt;C-f&lt;/kbd&gt; in magit status buffer and you will be presented with the gitflow popup menu.&lt;/p&gt; &#xA;&lt;p&gt;All gitflow commands are also accessible through the Magit/Extensions/GitFlow pop-down menu.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Sasanidas/Apprentice</title>
    <updated>2022-12-11T01:32:43Z</updated>
    <id>tag:github.com,2022-12-11:/Sasanidas/Apprentice</id>
    <link href="https://github.com/Sasanidas/Apprentice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small alchemist ready to rock&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sasanidas/Apprentice/master/images/apprentice_banner.png&#34;&gt;&lt;/p&gt; #+html: &#xA;&lt;blockquote&gt;&#xA;  Elixir Tooling Integration Into Emacs &#xA;&lt;/blockquote&gt; [[https://img.shields.io/badge/license-GPL_3-green.svg]] [[https://github.com/Sasanidas/Apprentice/actions/workflows/main.yml/badge.svg]]&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apprentice is a fork [[https://github.com/tonini/alchemist.el][alchemist.el]], similar in some aspects but quite different in others.&lt;/p&gt; &#xA;&lt;p&gt;Like alchemist, Apprentice comes with a bunch of &lt;em&gt;features&lt;/em&gt;, which are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mix integration&lt;/li&gt; &#xA; &lt;li&gt;Compile &amp;amp; Execution of Elixir code&lt;/li&gt; &#xA; &lt;li&gt;Inline code evaluation&lt;/li&gt; &#xA; &lt;li&gt;Powerful IEx integration&lt;/li&gt; &#xA; &lt;li&gt;Elixir project management&lt;/li&gt; &#xA; &lt;li&gt;Phoenix support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quickstart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;For now, you can install this package by adding the files to the emacs load-path.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;package.el&lt;/code&gt; is the built-in package manager in Emacs.&lt;/h1&gt; &#xA;&lt;h1&gt;Apprentice.el is available on the two major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt;.&lt;/h1&gt; &#xA;&lt;h1&gt;You can install &lt;code&gt;Apprentice&lt;/code&gt; with the following command:&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;kbd&gt;M-x package-install [RET] apprentice [RET]&lt;/kbd&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Documentation is available [[https://github.com/Sasanidas/Apprentice/tree/master/doc][here]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you hit any problems, please first ensure that you are using the latest version of this code, and that you have updated your packages to the most recent available versions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To report bugs or feature requests: please use the [[https://github.com/Sasanidas/Apprentice/issues][issue tracker on Github]].&lt;/li&gt; &#xA; &lt;li&gt;To talk about the project with people in real time: please join the #emacs-elixir channel on IRC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you like what I do and want to support this project monetarily: #+html: &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=fmfs%40posteo.net&amp;amp;item_name=Donation&amp;amp;currency_code=EUR&#34;&gt;&lt;img alt=&#34;pipeline status&#34; src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License [[https://img.shields.io/badge/license-GPL_3-green.svg]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Distributed under the GNU General Public License, version 3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cute-jumper/embrace.el</title>
    <updated>2022-12-11T01:32:43Z</updated>
    <id>tag:github.com,2022-12-11:/cute-jumper/embrace.el</id>
    <link href="https://github.com/cute-jumper/embrace.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add/Change/Delete pairs based on `expand-region&#39;, similar to `evil-surround&#39;.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: embrace.el&lt;/p&gt; &#xA;&lt;p&gt;[[http://melpa.org/#/embrace][file:http://melpa.org/packages/embrace-badge.svg]] [[http://stable.melpa.org/#/embrace][file:http://stable.melpa.org/packages/embrace-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;Add/Change/Delete pairs based on [[https://github.com/magnars/expand-region.el][expand-region]].&lt;/p&gt; &#xA;&lt;p&gt;For =evil-surround= integration, see [[https://github.com/cute-jumper/evil-embrace.el][evil-embrace]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview This package is heavily inspired by [[https://github.com/timcharper/evil-surround][evil-surround]] (which is a port of the vim plugin [[https://github.com/tpope/vim-surround][surround.vim]]). But instead of using =evil= and its text objects, this package relies on another excellent package [[https://github.com/magnars/expand-region.el][expand-region]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Emacs users who don&#39;t like =evil= and thus don&#39;t use =evil-surround=, =embrace= provides similar commands that can be found in =evil-surround=. =Evil= is absolutely &lt;em&gt;not&lt;/em&gt; required. For =evil-surround= users, =embrace= can make your =evil-surround= commands even better! (Have you noticed that =evil-surround= doesn&#39;t work on many custom pairs?)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Usage There are three commands: =embrace-add=, =embrace-change= and =embrace-delete= that can add, change, and delete surrounding pairs respectively. You can bind these commands to your favorite key bindings.&lt;/p&gt; &lt;p&gt;There is also a dispatch command =embrace-commander=. After invoking =embrace-commander=, you can hit:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=a= for =embrace-add=&lt;/li&gt; &#xA;   &lt;li&gt;=c= for =embrace-change=&lt;/li&gt; &#xA;   &lt;li&gt;=d= for =embrace-delete=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Example&lt;/p&gt; &#xA;&lt;p&gt;It might be a little hard for users who have no experience in =evil= and =evil-surround= to understand what =embrace= can do. So let&#39;s give an example to show what =embrace= can do fist. You can look at the following sections to see the meaning of key bindings. In this example, I bind @@html:&lt;kbd&gt;@@C-,@@html:&lt;/kbd&gt;@@ to =embrace-commander=. Assume we have following text in =c-mode= and the cursor position is indicated by &lt;del&gt;|&lt;/del&gt;: : fo|o&lt;/p&gt; &#xA;&lt;p&gt;Press @@html:&lt;kbd&gt;@@C-, a w &#39;@@html:&lt;/kbd&gt;@@ to add &#39;&#39; to the current word: : &#39;fo|o&#39;&lt;/p&gt; &#xA;&lt;p&gt;Press @@html:&lt;kbd&gt;@@C-, a q {@@html:&lt;/kbd&gt;@@ to add {} to outside of the quotes: : {&#39;fo|o&#39;}&lt;/p&gt; &#xA;&lt;p&gt;Press @@html:&lt;kbd&gt;@@C-, c &#39; &#34;@@html:&lt;/kbd&gt;@@ to change the &#39;&#39; to &#34;&#34;: : {&#34;fo|o&#34;}&lt;/p&gt; &#xA;&lt;p&gt;Press @@html:&lt;kbd&gt;@@C-, c { t@@html:&lt;/kbd&gt;@@, and then enter the tag: body class=&#34;page-body&#34;, to change the {} to a tag: : &#34;fo|o&#34;&lt;/p&gt; &#xA;&lt;p&gt;Press @@html:&lt;kbd&gt;@@C-, c t f@@html:&lt;/kbd&gt;@@, and enter the function name =bar= to change the tag to a function call: : bar(&#34;fo|o&#34;)&lt;/p&gt; &#xA;&lt;p&gt;Press @@html:&lt;kbd&gt;@@C-, d f@@html:&lt;/kbd&gt;@@ to remove the function call: : &#34;fo|o&#34;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re an =evil-surround= user, you might notice that the last command can&#39;t be achieved by =evil-surround=. However, it works in =embrace=! And yes, you can find even more examples in which =evil-surround= doesn&#39;t work while =embrace= works!&lt;/p&gt; &#xA;&lt;p&gt;** Screencasts For non =evil-mode= users, use the following settings (they will be explained later): : (global-set-key (kbd &#34;C-,&#34;) #&#39;embrace-commander) : (add-hook &#39;org-mode-hook #&#39;embrace-org-mode-hook)&lt;/p&gt; &#xA;&lt;p&gt;Open an org-mode file, we can perform the following pair changing:&lt;/p&gt; &#xA;&lt;p&gt;[[./screencasts/embrace.gif]]&lt;/p&gt; &#xA;&lt;p&gt;For =evil-mode= users, here is a similar screencast (see [[https://github.com/cute-jumper/evil-embrace.el][evil-embrace]] for more details):&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/cute-jumper/evil-embrace.el/blob/master/screencasts/evil-embrace.gif]]&lt;/p&gt; &#xA;&lt;p&gt;And we have a friendly help system (Yes, it is based on some simplified code from [[https://github.com/justbur/emacs-which-key][which-key]]):&lt;/p&gt; &#xA;&lt;p&gt;Help to select a semantic unit:&lt;/p&gt; &#xA;&lt;p&gt;[[./screencasts/help_unit.png]]&lt;/p&gt; &#xA;&lt;p&gt;Help to delete a pair:&lt;/p&gt; &#xA;&lt;p&gt;[[./screencasts/help.png]]&lt;/p&gt; &#xA;&lt;p&gt;** =embrace-change= and =embrace-delete= These two commands can change and delete the surround pair respectively. For =evil-surround= users, =embrace-change= is similar to =cs= and =embrace-delete= is similar to =ds=.&lt;/p&gt; &#xA;&lt;p&gt;The surrounding pair is specified by a key, which is very similar to the key used for Vim&#39;s text objects. For example, =(= stands for the surrounding pair =(= and =)=, and ={= stands for the surrouding pair, ={= and =}=. The default key mappings are shown below: | Key | Left | right | |-----+---------------------+----------| | ( | &#34;(&#34; | &#34;)&#34; | | ) | &#34;( &#34; | &#34; )&#34; | | { | &#34;{&#34; | &#34;}&#34; | | } | &#34;{ &#34; | &#34; }&#34; | | [ | &#34;[&#34; | &#34;]&#34; | | ] | &#34;[ &#34; | &#34; ]&#34; | | &amp;gt; | &#34;&amp;lt;&#34; | &#34;&amp;gt;&#34; | | &#34; | &#34;&#34;&#34; | &#34;&#34;&#34; | | &#39; | &#34;&#39;&#34; | &#34;&#39;&#34; | | t | &#34;&#xA; &lt;foo bar=&#34;100&#34;&gt;&#xA;  &#34; | &#34;&#xA; &lt;/foo&gt;&#34; | | f | &#34;func(&#34; | &#34;)&#34; |&lt;/p&gt; &#xA;&lt;p&gt;Note that for =t= and =f= key, the real content is based on the user&#39;s input.&lt;/p&gt; &#xA;&lt;p&gt;** =embrace-add= This command is similar to =evil-surround=&#39;s =ys= command. We need to enter a key for the semantic unit to which we want to add a surrounding pair. The semantic unit is marked by the functions provided by =expand-region=.&lt;/p&gt; &#xA;&lt;p&gt;Here is the default mapping: | key | mark function | |-----+------------------------| | w | er/mark-word | | s | er/mark-symbol | | d | er/mark-defun | | p | er/mark-outside-pairs | | P | er/mark-inside-pairs | | q | er/mark-outside-quotes | | Q | er/mark-inside-quotes | | . | er/mark-sentence | | h | er/mark-paragraph |&lt;/p&gt; &#xA;&lt;p&gt;After pressing a key to select the semantic unit, you can press another key to add the surrounding pair, which is the same as =embrace-change= and =embrace-delete=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customization ** Adding More Semantic Units You can modify the variable =embrace-semantic-units-alist= and note that this variable is buffer-local so it is better to change the value in a hook: : (add-hook &#39;text-mode-hook : (lambda () : (add-to-list &#39;embrace-semantic-units-alist &#39;(?e . er/mark-email))))&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Adding More Surrounding Pairs Use the command =embrace-add-pair= to add a pair: : (embrace-add-pair key left right)&lt;/p&gt; &#xA;&lt;p&gt;The change is also buffer-local, so wrap it in a hook function: : (add-hook &#39;LaTeX-mode-hook : (lambda () : (embrace-add-pair ?e &#34;\begin{&#34; &#34;}&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;If you want add something like the =t= key for the tag, you can look at the function =embrace-add-pair-regexp= in the source code, and if you&#39;re planning to use =embrace-add-pair-regexp=, you should also use =embrace-build-help= to build the user-friendly help message.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you&#39;re using =embrace-add-pair= to add an existing key, then it will replace the old one.&lt;/p&gt; &#xA;&lt;p&gt;** Disable Help Message If you find the help message annoying, use the following code to disable it: : (setq embrace-show-help-p nil)&lt;/p&gt; &#xA;&lt;p&gt;** Example Settings I recommend binding a convenient key for =embrace-commander=. For example, : (global-set-key (kbd &#34;C-,&#34;) #&#39;embrace-commander)&lt;/p&gt; &#xA;&lt;p&gt;We have defined several example hook functions that provide additional key bindings which can be used in different major modes. Right now there are hooks for =LaTeX-mode= and =org-mode=:&lt;/p&gt; &#xA;&lt;p&gt;=LaTeX-mode=: | Key | Left | Right | |-----+------------+-------| | = | \verb\vert | \vert | | ~ | \texttt{ | } | | / | \emph{ | } | | * | \textbf{ | } |&lt;/p&gt; &#xA;&lt;p&gt;=org-mode=: | Key | Left | Right | |-----+------------------+-------------------| | = | = | = | | ~ | ~ | ~ | | / | / | / | | * | * | * | | _ | _ | _ | | + | + | + | | k | &lt;del&gt;@@html:&lt;kbd&gt;@@&lt;/kbd&gt;&lt;/del&gt; | &lt;del&gt;@@html:@@&lt;/del&gt; |&lt;/p&gt; &#xA;&lt;p&gt;=ruby-mode (and enh-ruby-mode)=: | Key | Left | Right | |-----+------+-------| | d | do | end | | # | #{ | } |&lt;/p&gt; &#xA;&lt;p&gt;To use them: : (add-hook &#39;LaTeX-mode-hook &#39;embrace-LaTeX-mode-hook) : (add-hook &#39;org-mode-hook &#39;embrace-org-mode-hook) : (add-hook &#39;ruby-mode-hook &#39;embrace-ruby-mode-hook) ;; or &#39;enh-ruby-mode-hook&lt;/p&gt; &#xA;&lt;p&gt;The code for the three hooks above (which are defined in =embrace.el=): : (defun embrace-LaTeX-mode-hook () : (dolist (lst &#39;((?= &#34;\verb|&#34; . &#34;|&#34;) : (?~ &#34;\texttt{&#34; . &#34;}&#34;) : (?/ &#34;\emph{&#34; . &#34;}&#34;) : (?* &#34;\textbf{&#34; . &#34;}&#34;))) : (embrace-add-pair (car lst) (cadr lst) (cddr lst)))) : (defun embrace-org-mode-hook () : (dolist (lst &#39;((?= &#34;=&#34; . &#34;=&#34;) : (?~ &#34;&lt;del&gt;&#34; . &#34;&lt;/del&gt;&#34;) : (?/ &#34;/&#34; . &#34;/&#34;) : (?* &#34;&lt;em&gt;&#34; . &#34;&lt;/em&gt;&#34;) : (?_ &#34;&lt;em&gt;&#34; . &#34;&lt;/em&gt;&#34;) : (?+ &#34;+&#34; . &#34;+&#34;) : (?k &#34;@@html:&lt;kbd&gt;@@&#34; . &#34;@@html:&lt;/kbd&gt;@@&#34;))) : (embrace-add-pair (car lst) (cadr lst) (cddr lst)))) : (defun embrace-ruby-mode-hook () : (dolist (lst &#39;((?# &#34;#{&#34; &#34;}&#34;) : (?d &#34;do&#34; &#34;end&#34;))) : (embrace-add-pair (car lst) (cadr lst) (caddr lst))))&lt;/p&gt; &#xA;&lt;p&gt;You can define and use your own hook function similar to the code above.&lt;/p&gt; &#xA;&lt;p&gt;Welcome to add some settings for more major modes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For =evil-surround= Users ** Where =embrace= is better From the previous example, you can see that =embrace= actually replicates all the funcionalities provided in =evil-surround= and it can even do more than =evil-surround=. Actually, they are quite different. Since =embrace= uses =expand-region= behind the scene, you can expect it to work as long as =expand-region= works. Unlike =evil-surround=, which is restricted to the pre-defined text objects, =embrace= can define nearly arbitrary surrounding pairs and three core commands always work. On the contratry, you get nearly no customization in =evil-surround=: custom pairs don&#39;t work in =cs= or =ds= if you don&#39;t have a corresponding text object defined (they work in =ys=).&lt;/p&gt; &lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt;: =embrace= is more customizable. ** Why not use together? Sure! You can make =embrace= and =evil-surround= work together. Look at [[https://github.com/cute-jumper/evil-embrace.el][evil-embrace]]!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contributions This package is still in early stage, but it is quite usable right now. More functions can be added and the evil integration is not perfect yet. Contributions are always welcome!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Related Packages&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[https://github.com/cute-jumper/evil-embrace.el][evil-embrace]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/magnars/expand-region.el][expand-region]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/timcharper/evil-surround][evil-surround]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/magnars/change-inner.el][change-inner]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/Fuco1/smartparens][smartparens]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>