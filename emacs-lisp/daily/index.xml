<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:33:04Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gabrielelanaro/emacs-for-python</title>
    <updated>2023-08-27T01:33:04Z</updated>
    <id>tag:github.com,2023-08-27:/gabrielelanaro/emacs-for-python</id>
    <link href="https://github.com/gabrielelanaro/emacs-for-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of emacs extensions specifically collected for python development, with workflow guidelines!&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Welcome to the best collection of emacs extensions ever I&#39;m collecting and customizing the perfect environment for python development, using the most beautiful emacs customization to obtain a really modern and exciting (yet stable) way to edit text files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the package are included also a lot of other packages and configurations, it&#39;s an upstart for clean emacs installations, these configuration however are very similar to emacs-starter-kit and I suggest you to give it a try, emacs-for-python is designed to work with it (instruction below).&lt;/p&gt; &#xA;&lt;p&gt;To get in contact or ask for help you have many possibilities:&lt;/p&gt; &#xA;&lt;p&gt;github issue tracker: [[https://github.com/gabrielelanaro/emacs-for-python/issues]]&lt;/p&gt; &#xA;&lt;p&gt;google+ page: [[https://plus.google.com/108723367526390492977/]]&lt;/p&gt; &#xA;&lt;p&gt;email me: [[mailto:&lt;a href=&#34;mailto:gabriele.lanaro@gmail.com&#34;&gt;gabriele.lanaro@gmail.com&lt;/a&gt;]]&lt;/p&gt; &#xA;&lt;p&gt;** Features The package is split into various files, in this way it&#39;s very easy to include what you really need.&lt;/p&gt; &#xA;&lt;p&gt;*** Python Related&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- Ropemacs (Custom) : A refactoring library&#xA;- Auto Completion with rope (Custom) : Tested to work well with Rope&#xA;- Flymake + pyflakes (Custom): Highlight errors on the fly, improved&#xA;  from the standard version&#xA;- Virtualenv : Original, In-development tool for using virtualenv in&#xA;  emacs.&#xA;- Custom Yasnippet Snippets&#xA;- Cython Mode: a mode for highlighting cython files&#xA;- latest python.el (fgallina/python.el)&#xA;- nosetests integration (nose.el)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Editing Packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- Open Next Line: C-o will open a line under the cursor (very&#xA;  similar to vim o)&#xA;- Auto Completion: Wonderful package for auto complete anything in&#xA;  emacs&#xA;- Yasnippet: Snippets on steroids&#xA;- Parentheses pairing (Custom): Bug-free parentheses pairing using&#xA;  skeletons.&#xA;- smart-operator: Automatically adds spaces around arithmetic operators.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Configurations&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- ido activation&#xA;- ibuffer instead of buffer menu&#xA;- eshell configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Keybindings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- Copy-Cut-Paste from clipboard with Super-C Super-X Super-V    &#xA;- Calc Mode remapping to M-c&#xA;- M-Tab remapped to C-Tab to avoid collisions with the desktop&#xA;  manager&#xA;- nose keybindings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;Put the emacs-for-python directory in .emacs.d directory (or any other), the add this line in your .emacs, it will enable all the features of emacs-for-python package (editing configuration, keybindings, python stuff etc...)&lt;/p&gt; &#xA;&lt;p&gt;: (load-file &#34;/path/to/emacs-for-python/epy-init.el&#34;)&lt;/p&gt; &#xA;&lt;p&gt;You may want to enable only some of the features provided by emacs-for-python, in this case just enable some of them:&lt;/p&gt; &#xA;&lt;p&gt;: (add-to-list &#39;load-path &#34;path/to/emacs-for-python/&#34;) ;; tell where to load the various files : (require &#39;epy-setup) ;; It will setup other loads, it is required! : (require &#39;epy-python) ;; If you want the python facilities [optional] : (require &#39;epy-completion) ;; If you want the autocompletion settings [optional] : (require &#39;epy-editing) ;; For configurations related to editing [optional] : (require &#39;epy-bindings) ;; For my suggested keybindings [optional] : (require &#39;epy-nose) ;; For nose integration&lt;/p&gt; &#xA;&lt;p&gt;For further information and usage suggestions check:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/gabrielelanaro/emacs-for-python/wiki]]&lt;/li&gt; &#xA; &lt;li&gt;[[http://wiki.github.com/gabrielelanaro/emacs-for-python/workflow]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is another nice tutorial on how to install emacs-for-python here: [[http://maddemcode.com/python/emacs-and-python-the-definitive-answer/]]&lt;/p&gt; &#xA;&lt;p&gt;*** Configuring the &lt;em&gt;flymake&lt;/em&gt; checker New in version 0.3: I changed the way you configure your checkers, now there is no predefined checker and you have to configure it by your own.&lt;/p&gt; &#xA;&lt;p&gt;The good news is that it is extremely simple to configure your own command, for example to configure the pyflakes checker install it and put in your customization file (.emacs):&lt;/p&gt; &#xA;&lt;p&gt;: (epy-setup-checker &#34;pyflakes %f&#34;)&lt;/p&gt; &#xA;&lt;p&gt;Obviously you can substitute the &lt;code&gt;&#34;pyflakes %f&#34;&lt;/code&gt; with whatever you want, you just have to keep in mind that &lt;code&gt;%f&lt;/code&gt; will be substituted with the file which is being checked.&lt;/p&gt; &#xA;&lt;p&gt;*** Adding the django snippets The django snippets comes as an option, you can load them using:&lt;/p&gt; &#xA;&lt;p&gt;: (epy-django-snippets)&lt;/p&gt; &#xA;&lt;p&gt;As a command using M-x or putting it in your .emacs. *** ipython integration Ipython can be integrated with python-mode. Clicking on the Python-&amp;gt;Start interpreter menu entry will spawn an ipython shell instead of a python one. To enable the feature put this line in your .emacs:&lt;/p&gt; &#xA;&lt;p&gt;: (epy-setup-ipython)&lt;/p&gt; &#xA;&lt;p&gt;*** line highlighting You may want to enable this feature with the color you prefer, to do so, drop one of the following lines in your .emacs : (global-hl-line-mode t) ;; To enable : (set-face-background &#39;hl-line &#34;black&#34;) ;; change with the color that you like : ;; for a list of colors: &lt;a href=&#34;http://raebear.net/comp/emacscolors.html&#34;&gt;http://raebear.net/comp/emacscolors.html&lt;/a&gt; *** Highlight Indentation Interesting way to have a visual clue on how the code is indented:&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/gabrielelanaro/emacs-for-python/raw/master/doc/highlight_line_ind.png]]&lt;/p&gt; &#xA;&lt;p&gt;: (require &#39;highlight-indentation) : (add-hook &#39;python-mode-hook &#39;highlight-indentation)&lt;/p&gt; &#xA;&lt;p&gt;*** disabling the auto-pairing of parenthesis To disable the auto-pairing, drop the following line: : (setq skeleton-pair nil)&lt;/p&gt; &#xA;&lt;p&gt;*** Nosetests keybindings First of all, install nosetests. Then open a python file in your project and: &lt;code&gt;C-c a&lt;/code&gt;: run all test &lt;code&gt;C-c m&lt;/code&gt;: run tests in the module &lt;code&gt;C-c .&lt;/code&gt;: run test under cursor&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;C-c p a&lt;/code&gt;, &lt;code&gt;C-c p m&lt;/code&gt;, &lt;code&gt;C-c p .&lt;/code&gt;: same as above but drop in pdb when there&#39;s an error (Very useful!) *** Disabling ropemacs Just add the line to your .emacs : (setq epy-enable-ropemacs nil)&lt;/p&gt; &#xA;&lt;p&gt;** Installation with emacs-starter-kit&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve built up a little fork of emacs starter kit that is greatly integrated with emacs-for-python, it seems the best solution to me!&lt;/p&gt; &#xA;&lt;p&gt;The repo is at this address: [[http://github.com/gabrielelanaro/emacs-starter-kit]]&lt;/p&gt; &#xA;&lt;p&gt;Remember that customization to emacs-starter-kit are done to a custom.el file, and so you can substitute your distribution of emacs-starter-kit and you have to copy just your customization file.&lt;/p&gt; &#xA;&lt;p&gt;** License&lt;/p&gt; &#xA;&lt;p&gt;This is mostly a distribution with some little tweaks, with respect of the licenses, my tweaks are distributed according to the term of the GNU GPL license, described in the file COPYING.&lt;/p&gt; &#xA;&lt;p&gt;Generally each file has its own license and copyright notice (most, if not all of packages are GPL), the license of rope (GPL) is in rope-dist/COPYING.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>demyanrogozhin/palm</title>
    <updated>2023-08-27T01:33:04Z</updated>
    <id>tag:github.com,2023-08-27:/demyanrogozhin/palm</id>
    <link href="https://github.com/demyanrogozhin/palm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Major Emacs Mode For Typed Racket&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Palm&lt;/h1&gt; &#xA;&lt;p&gt;A Major Emacs Mode For Typed Racket Being A Grand Amalgamation Of Emacs&#39; Geiser, ECB and CEDET.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the palm project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assume cloned into /tmp for the purposes of this procedure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;$ cd /tmp/palm&lt;/li&gt; &#xA; &lt;li&gt;Geiser and ECB are setup as git submodules.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$ git submodule init&lt;/li&gt; &#xA; &lt;li&gt;$ git submodule update&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Install Geiser normally (see Geiser site for detailed directions).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$ cd /tmp/palm/geiser&lt;/li&gt; &#xA; &lt;li&gt;$ ./autogen.sh&lt;/li&gt; &#xA; &lt;li&gt;$ ./configure&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Install ECB (again see primary EDB site for details)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$ cd /tmp/palm/ecb&lt;/li&gt; &#xA; &lt;li&gt;$ make&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Setup your .emacs.d/init.el file (basic approach here).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(add-to-list &#39;load-path &#34;/tmp/palm/ecb&#34;)&lt;/li&gt; &#xA; &lt;li&gt;(require &#39;ecb)&lt;/li&gt; &#xA; &lt;li&gt;(add-to-list &#39;load-path &#34;/tmp/palm/elisp&#34;)&lt;/li&gt; &#xA; &lt;li&gt;(require &#39;palm)&lt;/li&gt; &#xA; &lt;li&gt;(load-file &#34;/tmp/palm/geiser/elsip/geiser-load.el&#34;)&lt;/li&gt; &#xA; &lt;li&gt;(require &#39;geiser-install)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Edit a Racket file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$ emacs myfile.rkt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Something should happen.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>