<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T01:41:58Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-evil/evil</title>
    <updated>2022-06-05T01:41:58Z</updated>
    <id>tag:github.com,2022-06-05:/emacs-evil/evil</id>
    <link href="https://github.com/emacs-evil/evil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The extensible vi layer for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png&#34; alt=&#34;An extensible vi layer for Emacs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-evil/evil/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-evil/evil/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/evil&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/evil-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/evil&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/evil-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://elpa.nongnu.org/nongnu/evil.html&#34;&gt;&lt;img src=&#34;http://elpa.nongnu.org/nongnu/evil.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://evil.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/evil/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Evil is an &lt;strong&gt;e&lt;/strong&gt;xtensible &lt;strong&gt;vi&lt;/strong&gt; &lt;strong&gt;l&lt;/strong&gt;ayer for &lt;a href=&#34;http://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;. It emulates the main features of &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt;, and provides facilities for writing custom extensions. Also see our page on &lt;a href=&#34;http://emacswiki.org/emacs/Evil&#34;&gt;EmacsWiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://evil.readthedocs.io/en/latest/overview.html#installation-via-package-el&#34;&gt;official documentation&lt;/a&gt; for installation instructions. We recommend using &lt;em&gt;package.el&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a quickstart, you can add the following code to your Emacs init file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Set up package.el to work with MELPA&#xA;(require &#39;package)&#xA;(add-to-list &#39;package-archives&#xA;             &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;))&#xA;(package-initialize)&#xA;(package-refresh-contents)&#xA;&#xA;;; Download Evil&#xA;(unless (package-installed-p &#39;evil)&#xA;  (package-install &#39;evil))&#xA;&#xA;;; Enable Evil&#xA;(require &#39;evil)&#xA;(evil-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Evil requires Emacs 24.1 or later.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Evil requires any of the following for &lt;code&gt;C-r&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;undo-redo&lt;/code&gt; from Emacs 28&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://gitlab.com/tsc25/undo-tree&#34;&gt;undo-tree&lt;/a&gt; package (available via GNU ELPA)&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://gitlab.com/ideasman42/emacs-undo-fu&#34;&gt;undo-fu&lt;/a&gt; package (available via MELPA)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For the motions &lt;code&gt;g;&lt;/code&gt; &lt;code&gt;g,&lt;/code&gt; and for the last-change-register &lt;code&gt;.&lt;/code&gt;, Evil requires the &lt;a href=&#34;https://github.com/emacs-evil/goto-chg&#34;&gt;goto-chg.el&lt;/a&gt; package (available via MELPA and NonGNU ELPA), which provides the functions &lt;code&gt;goto-last-change&lt;/code&gt; and &lt;code&gt;goto-last-change-reverse&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Emacs 24.1 and 24.2 Evil also requires &lt;a href=&#34;https://elpa.gnu.org/packages/cl-lib.html&#34;&gt;cl-lib&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The latest version of the documentation is readable online &lt;a href=&#34;https://evil.readthedocs.io/en/latest/index.html&#34;&gt;here&lt;/a&gt;. It is also available as &lt;a href=&#34;https://readthedocs.org/projects/evil/downloads/pdf/latest/&#34;&gt;PDF&lt;/a&gt; and as &lt;a href=&#34;https://readthedocs.org/projects/evil/downloads/epub/latest/&#34;&gt;EPUB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Mailing list&lt;/h1&gt; &#xA;&lt;p&gt;Evil is discussed at the &lt;a href=&#34;http://lists.ourproject.org/cgi-bin/mailman/listinfo/implementations-list&#34;&gt;gmane.emacs.vim-emulation&lt;/a&gt; mailing list.&lt;/p&gt; &#xA;&lt;h1&gt;IRC&lt;/h1&gt; &#xA;&lt;p&gt;Visit us on &lt;code&gt;irc.libera.chat #evil-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/emacs-evil/evil/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for guidelines for issues and pull requests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dmitrym0/org-hyperscheduler</title>
    <updated>2022-06-05T01:41:58Z</updated>
    <id>tag:github.com,2022-06-05:/dmitrym0/org-hyperscheduler</id>
    <link href="https://github.com/dmitrym0/org-hyperscheduler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;org-hyperscheduler is an Emacs package that helps you organize your day.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://app.circleci.com/pipelines/github/dmitrym0/org-hyperscheduler?branch=main&amp;amp;filter=all][https://img.shields.io/circleci/build/gh/dmitrym0/org-hyperscheduler.svg]] [[https://github.com/dmitrym0/org-hyperscheduler/releases][file:https://www.shields.io/github/v/release/dmitrym0/org-hyperscheduler.svg?display_name=tag]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;org-hyperscheduler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What is Hyperscheduling #+begin_quote Hyperscheduling is the idea of fully planning your day using a calendar. Every minute of the day is assigned to some task using a calendar. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;** Table of Contents :TOC:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#org-hyperscheduler][org-hyperscheduler]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#what-is-hyperscheduling][What is Hyperscheduling]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#what-does-org-hyperscheduler-do][What does org-hyperscheduler do?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#planning-a-day][Planning A Day]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#screen-cast][Screen Cast]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#configuration][Configuration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#development][Development]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What does org-hyperscheduler do?&lt;/p&gt; &#xA;&lt;p&gt;org-hyperscheduler presents a web UI that allows agenda entries to be visualized and moved around easily.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a typical agenda (&lt;del&gt;C-c a a&lt;/del&gt;):&lt;/p&gt; &#xA;&lt;p&gt;[[file:images/org-agenda.png]]&lt;/p&gt; &#xA;&lt;p&gt;and here is how it&#39;s visualized in org-hyperscheduler:&lt;/p&gt; &#xA;&lt;p&gt;[[file:images/org-hs-ui.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;blue entries are coming from an external calendar (such as [[https://github.com/kidd/org-gcal.el][org-gcal]]).&lt;/li&gt; &#xA; &lt;li&gt;purple entries are part of standard org-agenda.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The user is free to modify entries or move them around provided =org-hyperschedule-readonly-mode= is disabled.&lt;/p&gt; &#xA;&lt;p&gt;** Planning A Day&lt;/p&gt; &#xA;&lt;p&gt;When planning a day, it&#39;s easy to start with a list of tasks:&lt;/p&gt; &#xA;&lt;p&gt;[[file:images/org-agenda-2.png]]&lt;/p&gt; &#xA;&lt;p&gt;and then visualize them to ensure that capacity is available:&lt;/p&gt; &#xA;&lt;p&gt;[[file:images/org-hs-ui-2.png]]&lt;/p&gt; &#xA;&lt;p&gt;** Screen Cast&lt;/p&gt; &#xA;&lt;p&gt;Real quick demo of what the package does:&lt;/p&gt; &#xA;&lt;p&gt;[[https://www.youtube.com/watch?v=8vhhIYIS0zY][https://img.youtube.com/vi/8vhhIYIS0zY/0.jpg]]&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;org-hyperschedule is &lt;em&gt;not&lt;/em&gt; currently available in MELPA. Once the package matures, it will be added.&lt;/p&gt; &#xA;&lt;p&gt;For now you can either download the source and install it manually or with &lt;del&gt;use-package&lt;/del&gt; and [[https://github.com/raxod502/straight.el][straight.el]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (use-package org-hyperscheduler :straight ( :repo &#34;dmitrym0/org-hyperscheduler&#34; :host github :type git :files (&#34;*&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can then invoke &lt;del&gt;M-x org-hyperscheduler-open&lt;/del&gt; to invoke the web view.&lt;/p&gt; &#xA;&lt;p&gt;** Configuration&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;del&gt;M-x customize-group org-hyperscheduler&lt;/del&gt; to configure this module.&lt;/p&gt; &#xA;&lt;p&gt;*** Read only mode&lt;/p&gt; &#xA;&lt;p&gt;org-hyperscheduler is able to update entries in Emacs when using the web UI. To suppor this functionality, org-hyperscheduler must create IDs for each scheduled entry. If you are not ok with org-hyperscheduler modifying your data, keep &lt;del&gt;org-hyperscheduler-readonly-mode&lt;/del&gt; turned on. In this mode you can visualize your agenda, but cannot make any changes in web UI.&lt;/p&gt; &#xA;&lt;p&gt;*** Hiding calendar entries from org-roam&lt;/p&gt; &#xA;&lt;p&gt;org-roam treats all entries with an &lt;del&gt;:ID:&lt;/del&gt; property as roam nodes. This is not what I wanted. org-roam excludes all entries with the G&lt;/p&gt; &#xA;&lt;p&gt;See &lt;del&gt;org-hyperscheduler-exclude-from-org-roam&lt;/del&gt; through &lt;del&gt;M-x customize-group org-hyperscheduler&lt;/del&gt; or&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;(setq org-hyperscheduler-exclude-from-org-roam t)&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Read only mode must be disabled for this to take effect.&lt;/p&gt; &#xA;&lt;p&gt;** Development&lt;/p&gt; &#xA;&lt;p&gt;*** Running tests&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install [[https://github.com/cask/cask][cask]] (&lt;del&gt;brew install cask&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;del&gt;cask&lt;/del&gt; to install dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;del&gt;cask exec buttercup -L .&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** See also **** org-roam-ui&lt;/p&gt; &#xA;&lt;p&gt;org-hyperscheduler was heavily inspired by [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]. If you&#39;re using [[https://github.com/org-roam/org-roam-ui][org-roam]] it&#39;s worth adding org-roam-ui.&lt;/p&gt; &#xA;&lt;p&gt;**** calfw&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/kiwanami/emacs-calfw][calfw]] is a (textmode) calendaring framwork for emacs. I found it somewhat late into the development of org-hyperscheduler. If I found it earlier, I may have skipepd developing this.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chenyanming/nov-xwidget</title>
    <updated>2022-06-05T01:41:58Z</updated>
    <id>tag:github.com,2022-06-05:/chenyanming/nov-xwidget</id>
    <link href="https://github.com/chenyanming/nov-xwidget" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The best epub reader in Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: nov-xwidget - the best epub reader in Emacs #+DATE: June 1, 2022 #+SINCE: &#xA; &lt;replace with next tagged release version&gt;&#xA;   #+STARTUP: inlineimages nofold&#xA; &lt;/replace&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction =nov-xwidget= extends [[https://depp.brause.cc/nov.el/][nov.el]] with the built-in xwidget webkit (You have to compile Emacs with xwidget support) and render the epub html/xhtml files with any customized CSS styles or JavaScript scripts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Features&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Render epub with any CSS or JavaScript scripts, including but not limited to fonts, layout etc.&lt;/li&gt; &#xA; &lt;li&gt;Support dark or light mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation and Configuration #+begin_src org (use-package nov-xwidget :demand t :after nov :config (map! :map nov-mode-map :n &#34;gv&#34; &#39;nov-xwidget-view) (add-hook &#39;nov-mode-hook &#39;nov-xwidget-inject-all-files)) #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Three options for you to configure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=nov-xwidget-script=&lt;/li&gt; &#xA; &lt;li&gt;=nov-xwidget-style-light=&lt;/li&gt; &#xA; &lt;li&gt;=nov-xwidget-style-dark=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Open an epub file in Emacs, then =M-x nov-xwidget-view= to change to xwidget webkit buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| Function | Feature | |------------------------------+-------------------------------------------------------| | =xwidget-webkit-back= | Back | | =xwidget-webkit-forward= | Forward | | =nov-xwidget-goto-toc= | Goto table of contents | | =nov-xwidget-next-document= | Goto next document | | =nov-xwidget-next-document= | Goto previous document | | =nov-xwidget-find-source-file= | Goto the original source file | | =nov-xwidget-inject-all-files= | Apply styles and scripts to all documents in one epub |&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions I need your helps on adding more advanced styles or scripts. Add more features and make Emacs as the best epub reader!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>