<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-30T01:34:10Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>susam/emacs4cl</title>
    <updated>2023-06-30T01:34:10Z</updated>
    <id>tag:github.com,2023-06-30:/susam/emacs4cl</id>
    <link href="https://github.com/susam/emacs4cl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A 50 line DIY kit to set up vanilla Emacs for Common Lisp programming&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Emacs For Common Lisp (Emacs4CL)&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides a tiny &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file to set up Emacs quickly for Common Lisp programming. This document provides a detailed description of how to set it up and get started with Common Lisp programming.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/view-~%2f.emacs-brightgreen&#34; alt=&#34;View Source&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-%233ea639&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mastodon.social/@susam&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/mastodon-%40susam-%2355f&#34; alt=&#34;Mastodon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository provides a good middle ground between configuring Emacs manually by installing SLIME, Paredit, etc. yourself with &lt;code&gt;M-x package-install&lt;/code&gt; commands and installing Portacle. It promotes a do-it-yourself approach to automate customizing Emacs for Common Lisp programming. Here is how the development environment is going to look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://susam.github.io/blob/img/emacs4cl/emacs4cl-0.5.0.png&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/emacs4cl/emacs4cl-0.5.0.png&#34; alt=&#34;Screenshot of Emacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are already comfortable with Emacs and only want to understand the content of the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file, you can skip ahead directly to the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#line-by-line-explanation&#34;&gt;Line-by-Line Explanation&lt;/a&gt; section that describes every line of this Emacs initialization file in detail.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#who-is-this-for&#34;&gt;Who Is This For?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#get-started&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#step-by-step-usage&#34;&gt;Step-by-Step Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#use-sbcl&#34;&gt;Use SBCL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#use-emacs&#34;&gt;Use Emacs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#use-slime&#34;&gt;Use SLIME&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#use-paredit&#34;&gt;Use Paredit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#use-rainbow-delimiters&#34;&gt;Use Rainbow Delimiters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#use-quicklisp&#34;&gt;Use Quicklisp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#line-by-line-explanation&#34;&gt;Line-by-Line Explanation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#tweak-ui&#34;&gt;Tweak UI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#use-spaces-for-indentation&#34;&gt;Use Spaces for Indentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#highlight-parentheses&#34;&gt;Highlight Parentheses&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#install-packages&#34;&gt;Install Packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#inferior-lisp-program&#34;&gt;Inferior Lisp Program&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#add-hooks&#34;&gt;Add Hooks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#colorful-parentheses&#34;&gt;Colorful Parentheses&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#more-emacs-customization&#34;&gt;More Emacs Customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#alternatives&#34;&gt;Alternatives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#opinion-references&#34;&gt;Opinion References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#channels&#34;&gt;Channels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who Is This For?&lt;/h2&gt; &#xA;&lt;p&gt;Are you an absolute beginner to Emacs? Are you so new to Emacs that you do not even have &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d&lt;/code&gt; on your file system? Have you considered learning Common Lisp but when you picked up a book like &lt;a href=&#34;http://www.gigamonkeys.com/book/&#34;&gt;Practical Common Lisp&lt;/a&gt;, you learnt that it recommends Emacs and SLIME for development environment and it seemed like a significant additional learning curve for you? If you answered &#34;yes&#34; to most of these questions, then this project is for you.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file in this project provides you a quick way to get started with setting up your development environment. This document explains how to do so in a step-by-step manner. This document also explains the content of &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file in a line-by-line manner.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;This section helps you to set up Emacs for Common Lisp development quickly and see what the end result looks like. Perform the following steps to get started:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install SBCL and Emacs.&lt;/p&gt; &lt;p&gt;On macOS, enter the following command if you have &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install sbcl&#xA;brew install --cask emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On Debian, Ubuntu, or another Debian-based Linux system, enter the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt-get install sbcl emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For other environments, download SBCL and Emacs from &lt;a href=&#34;http://www.sbcl.org/platform-table.html&#34;&gt;http://www.sbcl.org/platform-table.html&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;https://www.gnu.org/software/emacs/&lt;/a&gt; respectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the Emacs initialization file &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; provided here to your home directory. Here is an example &lt;code&gt;curl&lt;/code&gt; command that copies the initialization file to its traditional location:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://github.com/susam/emacs4cl/raw/main/.emacs &amp;gt;&amp;gt; ~/.emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here is another alternative that copies the initialization file to a more convenient location:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir ~/.emacs.d&#xA;curl -L https://github.com/susam/emacs4cl/raw/main/.emacs &amp;gt;&amp;gt; ~/.emacs.d/init.el&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Yet another popular alternative is to copy the initialization file to an XDG-compatible location as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p ~/.config/emacs&#xA;curl -L https://github.com/susam/emacs4cl/raw/main/.emacs &amp;gt;&amp;gt; ~/.config/emacs/init.el&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Emacs can automatically load the Emacs initialization file from any of the paths used above. See section &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;The Emacs Initialization File&lt;/a&gt; of the Emacs manual for more details about this. Most users these days prefer one of the last two locations because it allows all Emacs configuration to conveniently remain in one directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On macOS, you may receive the following error message in a dialog box: &#39;“Emacs.app” can’t be opened because Apple cannot check it for malicious software.&#39; To resolve this issue, go to Apple menu &amp;gt; System Preferences &amp;gt; Security &amp;amp; Privacy &amp;gt; General and click &#39;Open Anyway&#39;.&lt;/p&gt; &lt;p&gt;It may take a minute or so for Emacs to start the very first time. When it starts the first time with the new Emacs initialization file obtained in the previous step, it installs the packages specified in it. This is only a one-time activity. The next time you start Emacs, it will start instantly. We will see how &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; takes care of it in the line-by-line guide later.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Within Emacs, start SLIME by typing the following key sequence:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-x slime RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the Emacs world (and elsewhere too), the prefix &lt;code&gt;M-&lt;/code&gt; denotes the meta modifier key. It does not exist on most modern keyboards. Use the &lt;kbd&gt;alt&lt;/kbd&gt; key or the &lt;kbd&gt;option&lt;/kbd&gt; key as a modifier key or &lt;kbd&gt;esc&lt;/kbd&gt; as a prefix key to enter &lt;code&gt;M-&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, &lt;code&gt;M-x&lt;/code&gt; is going to be &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;x&lt;/kbd&gt; or &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;x&lt;/kbd&gt; or &lt;kbd&gt;esc&lt;/kbd&gt; &lt;kbd&gt;x&lt;/kbd&gt; on a modern keyboard.&lt;/p&gt; &lt;p&gt;Similarly, &lt;code&gt;RET&lt;/code&gt; denotes the &lt;kbd&gt;enter&lt;/kbd&gt; key or the &lt;kbd&gt;return&lt;/kbd&gt; key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After SLIME REPL starts, enter the following expression at the &lt;code&gt;CL-USER&amp;gt;&lt;/code&gt; prompt and type &lt;kbd&gt;enter&lt;/kbd&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(format t &#34;hello, world~%&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the output &lt;code&gt;&#34;hello, world&#34;&lt;/code&gt; appears in SLIME REPL, the development environment setup is complete.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optionally, install Quicklisp with the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O https://beta.quicklisp.org/quicklisp.lisp&#xA;sbcl --load quicklisp.lisp --eval &#34;(quicklisp-quickstart:install)&#34; --quit&#xA;sbcl --load ~/quicklisp/setup.lisp --eval &#34;(ql:add-to-init-file)&#34; --quit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Quicklisp helps in installing Common Lisp libraries from its repository. You do not need it when you have just begun learning Common Lisp. But as you grow more experienced with Common Lisp and begin developing real world applications, sooner or later, you will need Quicklisp to install libraries that help you solve your problems.&lt;/p&gt; &lt;p&gt;The first command in the code block fetches &lt;code&gt;quicklisp.lisp&lt;/code&gt;. The second command installs Quicklisp to &lt;code&gt;~/quicklisp&lt;/code&gt;. The third command adds some code to SBCL&#39;s initialization file at &lt;code&gt;~/.sbclrc&lt;/code&gt;, so that Quicklisp is automatically loaded when SBCL starts.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now that your environment is setup, read the next section to learn how to use this environment in more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Step-by-Step Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Use SBCL&lt;/h3&gt; &#xA;&lt;p&gt;Steel Bank Common Lisp (SBCL) is a high performance Common Lisp compiler. It runs on several Unix and Unix-like systems such as Linux, FreeBSD, macOS, etc. It also runs experimentally on Windows. It is the most popular free and open source implementation of Common Lisp as of December 2020. See the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#opinion-references&#34;&gt;Opinion References&lt;/a&gt; section for survey results related to this.&lt;/p&gt; &#xA;&lt;p&gt;The steps provided below show how to run SBCL independently. This is not a typical way to run SBCL because most of the time we interact with SBCL via SLIME right from within Emacs. However running it independently once helps one appreciate that it is an independent program that compiles and executes Common Lisp code. Here are the steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open your favourite editor, type this code, and save it as &lt;code&gt;hello.lisp&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(format t &#34;hello, world~%&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then enter this command in the shell to run the program:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sbcl --script hello.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now start the SBCL Read-Eval-Print Loop (REPL) with the following command in the shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sbcl&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An asterisk prompt appears. Enter a Common Lisp expression at the asterisk prompt like this and type &lt;kbd&gt;enter&lt;/kbd&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(+ 1 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The result should appear as the output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Similarly, enter the following expression at the SBCL prompt and type &lt;kbd&gt;enter&lt;/kbd&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(format t &#34;hello, world~%&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, enter the following expression and type &lt;kbd&gt;enter&lt;/kbd&gt; to exit the SBCL REPL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(exit)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Use Emacs&lt;/h3&gt; &#xA;&lt;p&gt;Emacs is a very powerful and extensible editor. It comes with over 10,000 built-in commands. A small section like this can barely scratch the surface of Emacs. Yet, this section makes a modest attempt at getting you started with Emacs and then provides more resources to learn further. Perform the following steps to get started:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Within Emacs, enter the following command to open a file, say, &lt;code&gt;hello.txt&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-f hello.txt RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A new buffer to edit &lt;code&gt;hello.txt&lt;/code&gt; is created. If a file with that name already exists on your file system, then it loads the content of the file into the buffer.&lt;/p&gt; &lt;p&gt;Note that in the Emacs world (and elsewhere too), the notation &lt;code&gt;C-&lt;/code&gt; denotes the &lt;kbd&gt;ctrl&lt;/kbd&gt; modifier key. Thus &lt;code&gt;C-x&lt;/code&gt; denotes &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;x&lt;/kbd&gt;.&lt;/p&gt; &lt;p&gt;The notation &lt;code&gt;RET&lt;/code&gt; denotes the &lt;kbd&gt;enter&lt;/kbd&gt; or &lt;kbd&gt;return&lt;/kbd&gt; key.&lt;/p&gt; &lt;p&gt;Typing consecutive &lt;code&gt;C-&lt;/code&gt; key sequences can be optimized by pressing and holding down the &lt;kbd&gt;ctrl&lt;/kbd&gt; key, then typing the other keys, and then releasing the &lt;kbd&gt;ctrl&lt;/kbd&gt; key. For example, to type &lt;code&gt;C-x C-f&lt;/code&gt;, first press and hold down &lt;kbd&gt;ctrl&lt;/kbd&gt;, then type &lt;kbd&gt;x&lt;/kbd&gt;, then type &lt;kbd&gt;f&lt;/kbd&gt;, and then release &lt;kbd&gt;ctrl&lt;/kbd&gt;. In other words, think of &lt;code&gt;C-x C-f&lt;/code&gt; as &lt;code&gt;C-(x f)&lt;/code&gt;. This shortcut works for other modifier keys too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now type some text into the buffer. Type out at least 3-4 words. We will need it for the next two steps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Move backward by one word with the following key sequence:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-b&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember from the previous section that &lt;code&gt;M-&lt;/code&gt; denotes the meta modifier key. The above command can be typed with &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;b&lt;/kbd&gt; or &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;b&lt;/kbd&gt; or &lt;kbd&gt;esc&lt;/kbd&gt; &lt;kbd&gt;b&lt;/kbd&gt;.&lt;/p&gt; &lt;p&gt;If you face any issue with the &lt;kbd&gt;alt&lt;/kbd&gt; key or the &lt;kbd&gt;option&lt;/kbd&gt; key, read &lt;a href=&#34;https://www.emacswiki.org/emacs/MetaKeyProblems&#34;&gt;Emacs Wiki: Meta Key Problems&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now move forward by one word with the following key sequence:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-f&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;C-g&lt;/code&gt; key sequence cancels the current command. This can be used when you mistype a command and want to start over or if you type a command partially, then change your mind and then you want to cancel the partially typed command. Try out these examples:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-f C-g&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;C-x C-g&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Save the buffer to a file on the file system with this command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quit Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-c&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now you know how to start Emacs, open a file, save it, and quit. Improve your Emacs knowledge further by taking the Emacs tutorial that comes along with Emacs. In Emacs, type &lt;code&gt;C-h t&lt;/code&gt; to start the tutorial.&lt;/p&gt; &#xA;&lt;p&gt;The key bindings to perform various operations like creating file, saving file, quitting the editor, etc. may look arcane at first, but repeated usage of the key bindings develops muscle memory soon and after having used them for a few days, one does not even have to think about them. The fingers do what the mind wants effortlessly due to muscle memory.&lt;/p&gt; &#xA;&lt;p&gt;While you are getting used to the Emacs key bindings, keep this &lt;a href=&#34;https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf&#34;&gt;GNU Emacs Reference Card&lt;/a&gt; handy.&lt;/p&gt; &#xA;&lt;h3&gt;Use SLIME&lt;/h3&gt; &#xA;&lt;p&gt;Superior Lisp Interaction Mode for Emacs (SLIME) is a very popular Emacs mode that adds support for interacting with a running Common Lisp process for compilation, debugging, document lookup, etc. while developing Common Lisp applications. Perform the following steps to get started with it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Within Emacs, start SLIME by typing the following key sequence:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-x slime RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember that &lt;code&gt;M-x&lt;/code&gt; translates to &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;x&lt;/kbd&gt; or &lt;kbd&gt;esc&lt;/kbd&gt; &lt;kbd&gt;x&lt;/kbd&gt; on a modern keyboard.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A new buffer named &lt;code&gt;*slime-repl sbcl*&lt;/code&gt; should have now appeared with the following prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;CL-USER&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is a Read-Eval-Print-Loop (REPL) where you can evaluate Common Lisp expressions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the following expression in the REPL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(+ 1 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following result should appear when you type &lt;kbd&gt;enter&lt;/kbd&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We will now see how to work on a Lisp source file and send expressions to the REPL for evaluation using SLIME commands without having to leave Emacs. First, create a buffer for a new file, for example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-f foo.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now enter this Lisp code into the buffer for &lt;code&gt;foo.lisp&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(+ 1 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;While the cursor is placed after the closing parenthesis (not on it, but after it), type the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-e&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The result &lt;code&gt;3&lt;/code&gt; should appear in a minibuffer at the bottom.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There is a lot more to SLIME than what is described above. To learn more about SLIME, see &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html&#34;&gt;Slime User Manual&lt;/a&gt;. Also, keep this &lt;a href=&#34;http://www.chiark.greenend.org.uk/doc/slime/slime-refcard.pdf&#34;&gt;Slime Quick Reference Card&lt;/a&gt; handy.&lt;/p&gt; &#xA;&lt;h3&gt;Use Paredit&lt;/h3&gt; &#xA;&lt;p&gt;Paredit helps in keeping parentheses balanced and also in performing structured editing of S-expressions in Lisp code. It provides a powerful set of commands to manipulate S-expressions in various ways. Perform the following steps to get started with Paredit:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a Common Lisp source file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-f foo.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type the following code only:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun square (x&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;At this point, Paredit should have inserted the two closing parentheses automatically. The code should look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun square (x))&#xA;                -&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The cursor should be situated just after the parameter &lt;code&gt;x&lt;/code&gt;. The underbar shows where the cursor should be.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type the closing parentheses now. Yes, type it even if the closing parenthesis is already present. The cursor should now skip over the first closing parenthesis like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun square (x))&#xA;                 -&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Of course, there was no need to type the closing parenthesis because it was already present but typing it out to skip over it is more efficient than moving over it with movement commands. This is, in fact, a very nifty feature of Paredit. We can enter code with the same keystrokes as we would without Paredit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now type &lt;code&gt;enter&lt;/code&gt; to create a new line just before the last parenthesis. A newline is inserted like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun square (x)&#xA;  )&#xA;  -&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now type only this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(* x x&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, Paredit would have inserted the closing parenthesis automatically. The code should look like this now:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun square (x)&#xA;  (* x x))&#xA;        -&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There is a lot more to Paredit than this. To learn more, see &lt;a href=&#34;http://danmidwood.com/content/2014/11/21/animated-paredit.html&#34;&gt;The Animated Guide to Paredit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: While many Lisp programmers find Paredit very convenient and powerful while manipulating S-expressions in Lisp code, there are a few people who do not like Paredit because they find the Paredit behaviour intrusive. See the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#opinion-references&#34;&gt;Opinion References&lt;/a&gt; section for more discussion on this topic.&lt;/p&gt; &#xA;&lt;h3&gt;Use Rainbow Delimiters&lt;/h3&gt; &#xA;&lt;p&gt;There is not much to learn about using Rainbow Delimiters. In the previous sections, you must have seen that as you type nested parentheses, each parenthesis is highlighted with a different color. That is done by Rainbow Delimiters. It colors each parenthesis according to its nesting depth level.&lt;/p&gt; &#xA;&lt;p&gt;Note: Not everyone likes Rainbow Delimiters. Some people find parentheses in multiple colors distracting. See the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#opinion-references&#34;&gt;Opinion References&lt;/a&gt; section for more discussion on this topic.&lt;/p&gt; &#xA;&lt;h3&gt;Use Quicklisp&lt;/h3&gt; &#xA;&lt;p&gt;This is an optional section for beginners to Common Lisp. Quicklisp helps in installing Common Lisp libraries from its repository. You would not need it when you are just learning Common Lisp as a beginner. But as you grow more experienced with Common Lisp and begin developing real world applications, sooner or later, you will need Quicklisp to install libraries that help you solve your problems.&lt;/p&gt; &#xA;&lt;p&gt;Ensure that you have installed Quicklisp as specified in the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#get-started&#34;&gt;Get Started&lt;/a&gt; section. Then follow these steps to become familiar with Quicklisp:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Within Emacs, start SLIME by typing the following key sequence:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-x slime RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a new file, say &lt;code&gt;server.lisp&lt;/code&gt; with the following key sequence:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-f server.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the following code into the buffer for the new file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ql:quickload &#34;hunchentoot&#34;)&#xA;(hunchentoot:start (make-instance &#39;hunchentoot:easy-acceptor :port 4242))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first line fetches and loads Hunchentoot from Quicklisp. Hunchentoot is a popular Common Lisp web server toolkit for building dynamic websites. The second line uses Hunchentoot to start a web server listening on TCP port 4242.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Evaluate the whole buffer with the following key sequence:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-x slime-eval-buffer RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visit &lt;a href=&#34;http://127.0.0.1:4242/&#34;&gt;http://127.0.0.1:4242/&lt;/a&gt; with your web browser. A web page with a welcome message from Hunchentoot should appear.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Line-by-Line Explanation&lt;/h2&gt; &#xA;&lt;p&gt;This section explains the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file provided here line-by-line.&lt;/p&gt; &#xA;&lt;h3&gt;Tweak UI&lt;/h3&gt; &#xA;&lt;p&gt;The first few lines in our &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; merely tweak the Emacs user interface. These are of course not essential for Common Lisp programming. However, many new Emacs users often ask how to customize the user interface to add a good color scheme and make it look minimal, so this section indulges a little in customizing the user interface. The actual Common Lisp related customization begins in the next section: &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/#highlight-parentheses&#34;&gt;Highlight Parentheses&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is a line-by-line explanation of the UI tweaks in &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When Emacs runs in a GUI window, by default, it starts with a menu bar, tool bar, and scroll bar. Many (but not all) users like to hide them in order to make the Emacs frame look clean and minimal. The following lines disable the tool bar and scroll bar. The menu bar is left enabled.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(when (display-graphic-p)&#xA;  (tool-bar-mode 0)&#xA;  (scroll-bar-mode 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;when&lt;/code&gt; expression checks if Emacs is running with graphic display before disabling the tool bar and scroll bar. Without the &lt;code&gt;when&lt;/code&gt; expression, we get the following error on Emacs without graphic display support: &lt;code&gt;Symbol&#39;s function definition is void: tool-bar-mode&lt;/code&gt;. An example of Emacs without graphics support is &lt;code&gt;emacs-nox&lt;/code&gt; on Debian 10. Note that this is only an author&#39;s preference. You may comment out one or more of these lines if you want to retain the tool bar or scroll bar.&lt;/p&gt; &lt;p&gt;Some users like to hide the menu bar as well. To disable the menu bar, include &lt;code&gt;(menu-bar-mode 0)&lt;/code&gt; as top-level-expression (i.e., outside the &lt;code&gt;when&lt;/code&gt; expression) in the initialization file. Even with the menu bar disabled, the menu can be accessed anytime by typing &lt;code&gt;&amp;lt;f10&amp;gt;&lt;/code&gt;. For beginners to Emacs, it is advisable to keep the menu bar enabled because it helps in discovering new features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inhibit the startup screen with the &lt;code&gt;Welcome to GNU Emacs&lt;/code&gt; message from appearing:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq inhibit-startup-screen t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are a beginner to Emacs, you might find the startup screen helpful. It contains links to tutorial, manuals, common tasks, etc. If you want to retain the startup screen, comment this line out.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Load a beautiful dark color theme known as &lt;code&gt;wombat&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(load-theme &#39;wombat)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to check the other built-in themes, type &lt;code&gt;M-x customize-themes RET&lt;/code&gt;. A new window with a buffer named &lt;code&gt;*Custom Themes*&lt;/code&gt; appear. In this buffer, select any theme you want to test. After you are done testing, you can close this new window with &lt;code&gt;C-x 0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose a darker shade of gray for the background color to improve the contrast of the theme:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-face-background &#39;default &#34;#111&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Although Wombat is a pretty nice theme that comes with Emacs, in this theme, the cursor, search matches, and comments can often be difficult to spot because they are all colored with different shades of gray while the background is also gray. The above line of Emacs Lisp code chooses a darker shade of gray for the background in order to improve the contrast and make the other elements that are colored with a lighter shade of gray easier to spot.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Use Spaces for Indentation&lt;/h3&gt; &#xA;&lt;p&gt;The following point shows how to configure Emacs to insert spaces, not tabs, for indenting code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use spaces, not tabs, for indentation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq-default indent-tabs-mode nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Emacs uses a mix of tabs and spaces by default for indentation and alignment. To verify the default behaviour, first comment out the above line of Emacs Lisp code, save it, then restart Emacs, then open a new Common Lisp source file, say, &lt;code&gt;C-x C-f foo.lisp RET&lt;/code&gt; and type the following three lines of Common Lisp code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun foo ()&#xA;  (concat &#34;foo&#34;&#xA;          &#34;bar&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While typing the above code, do not type &lt;kbd&gt;tab&lt;/kbd&gt; or &lt;kbd&gt;space&lt;/kbd&gt; to indent the second and third lines. When you type &lt;kbd&gt;enter&lt;/kbd&gt; at the end of each line, Emacs automatically inserts the necessary tabs and spaces to indent the code. After entering this code, type &lt;code&gt;M-x whitespace-mode RET&lt;/code&gt; to visualize whitespace characters. This mode displays each space with a middle dot (&lt;code&gt;·&lt;/code&gt;) and each tab with a right pointing guillemet (&lt;code&gt;»&lt;/code&gt;). With whitespace mode enabled, you should find that the second line of code is indented with two spaces but the third line is indented with a single tab followed by two spaces. Emacs has a &lt;code&gt;tab-width&lt;/code&gt; variable that is set to &lt;code&gt;8&lt;/code&gt; by default. For every &lt;code&gt;tab-width&lt;/code&gt; columns of indentation, Emacs inserts a tab to indent the code. The third line requires 10 leading spaces for alignment, so Emacs inserts one tab character followed by 2 spaces to make the third line look aligned. However, this code would look misaligned on another editor with a different &lt;code&gt;tab-width&lt;/code&gt; setting. That&#39;s why we configure Emacs to use only spaces to indent and align code.&lt;/p&gt; &lt;p&gt;Now to verify that the above line of Emacs Lisp code works as expected, uncomment the function call to set &lt;code&gt;indent-tabs-mode&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, save it, then restart Emacs, and then perform the above experiment involving the three lines of Emacs Lisp code again. This time, you should see that no tabs are used for indentation. Only spaces are used for indentation.&lt;/p&gt; &lt;p&gt;In some type of files, we must use literal tabs. For example, in &lt;code&gt;Makefile&lt;/code&gt;, the syntax of target rules require that the commands under a target are indented by a literal tab character. In such files, Emacs is smart enough to always use literal tabs for indentation regardless of the above variable setting.&lt;/p&gt; &lt;p&gt;Mixing tabs and spaces for indenting source code can be problematic, especially, when the author of code or Emacs inadvertently uses tabs for alignment (as opposed to using tabs for indentation only which would be fine) and another programmer views the file with an editor with a different tab width setting. In fact, in the experiment above, Emacs did use a literal tab character to align code which would cause the code to look misaligned on another editor with a different tab width setting. See &lt;a href=&#34;https://www.emacswiki.org/emacs/TabsAreEvil&#34;&gt;Tabs Are Evil&lt;/a&gt; for more details on this topic.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Highlight Parentheses&lt;/h3&gt; &#xA;&lt;p&gt;The following points describe how we enable highlighting of parentheses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The next point shows how to enable highlighting of matching pair of parentheses. By default, there is a small delay between the movement of a cursor and the highlighting of the matching pair of parentheses. The following line of code gets rid of this delay:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq show-paren-delay 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This line of code must come before the one in the next point for it to be effective.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Highlight matching parentheses:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(show-paren-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A pair of parenthesis is highlighted when the cursor is on the opening parenthesis of the pair or just after the closing parenthesis of the pair.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install Packages&lt;/h3&gt; &#xA;&lt;p&gt;The following points describe how we automate the installation of Emacs packages we need. These points are essential to Common Lisp programming with Emacs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The following code disables TLS 1.3 to work around a known bug in GNU Emacs versions 26.1 and 26.2:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(when (and (version&amp;lt; emacs-version &#34;26.3&#34;) (&amp;gt;= libgnutls-version 30603))&#xA;  (setq gnutls-algorithm-priority &#34;NORMAL:-VERS-TLS1.3&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;a href=&#34;https://debbugs.gnu.org/34341&#34;&gt;https://debbugs.gnu.org/34341&lt;/a&gt; for more details on the bug. This code is not required while using GNU Emacs version 26.3 or 27.1 or a later version although leaving this code intact should do no harm because this code checks whether the Emacs version is less than 26.3 before applying the workaround.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When we install packages using &lt;code&gt;package-install&lt;/code&gt; (coming up soon in a later point), a few customizations are written automatically into the Emacs initialization file (&lt;code&gt;~/.emacs&lt;/code&gt; in our case). This has the rather undesirable effect of our carefully handcrafted &lt;code&gt;~/.emacs&lt;/code&gt; being meddled by &lt;code&gt;package-install&lt;/code&gt;. To be precise, it is the &lt;code&gt;custom&lt;/code&gt; package invoked by &lt;code&gt;package-install&lt;/code&gt; that intrudes into our Emacs initialization file. To prevent that, we ask &lt;code&gt;custom&lt;/code&gt; to write the customizations to a separate file with the following code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq custom-file (concat user-emacs-directory &#34;custom.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that this line of code must occur before the &lt;code&gt;package-install&lt;/code&gt; call.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Emacs does not load the custom-file automatically, so we add the following code to load it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(load custom-file t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is important to load the custom-file because it may contain customizations we have written to it directly or via the customize interface (say, using &lt;code&gt;M-x customize RET&lt;/code&gt;). If we don&#39;t load this file, then any customizations written to this file will not become available in our Emacs environment.&lt;/p&gt; &lt;p&gt;The boolean argument &lt;code&gt;t&lt;/code&gt; ensures that no error occurs when the custom-file is missing. Without it, when Emacs starts for the first time with our initialization file and there is no custom-file yet, the following error occurs: &lt;code&gt;File is missing: Cannot open load file, No such file or directory, ~/.emacs.d/custom.el&lt;/code&gt;. Setting the second argument to &lt;code&gt;t&lt;/code&gt; prevents this error when Emacs is run with our initialization file for the first time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This is necessary for defining the &lt;code&gt;package-archives&lt;/code&gt; list we will use in the next point.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Milkypostman&#39;s Emacs Lisp Package Archive (MELPA) to the list of archives to fetch packages from:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default only GNU Emacs Lisp Package Archive (ELPA) is in the list of archives to fetch from. The above line adds MELPA too to the list. If you are curious to see what the original value of &lt;code&gt;package-archives&lt;/code&gt; was and what it is now due to the above line, type &lt;code&gt;C-h o package-archives RET&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initialize the package system:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While initializing the package system, this call also initializes the &lt;code&gt;package-archive-contents&lt;/code&gt; variable used in the next point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download package descriptions from package archives only if they have not been downloaded before:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(unless package-archive-contents&#xA;  (package-refresh-contents))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first line checks whether package descriptions from package archives have been fetched. See the &lt;code&gt;~/.emacs.d/elpa/archives&lt;/code&gt; or &lt;code&gt;~/.config/emacs/elpa/archives&lt;/code&gt; directory for archive contents in case you are curious. If the archive contents have not been fetched then the second line fetches them. Thus the second line executes only when the Emacs initialization is loaded for the first time. The first time Emacs starts with the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;.emacs&lt;/a&gt; file of this repository, it takes a while to fetch the package archives. However, once the package archives have been fetched and Emacs is started again later, it starts instantly because the code above takes care not to fetch package archives again when it is already cached locally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install SLIME, Paredit, and Rainbow Delimiters only if they are not installed already:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(dolist (package &#39;(slime paredit rainbow-delimiters))&#xA;  (unless (package-installed-p package)&#xA;    (package-install package)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This loops iterates over each package name in a list of packages. For each package, it checks whether the package is installed with the &lt;code&gt;package-installed-p&lt;/code&gt; function. If it is not installed, then it is installed with the &lt;code&gt;package-install&lt;/code&gt; function. You can modify the list of packages in the first line to add other packages that you might need in future or remove packages that you do not want.&lt;/p&gt; &lt;p&gt;The first time Emacs starts with this initialization file, it takes a while to install the packages we need. However, once the packages are installed and Emacs is started again later, it starts instantly because the code above takes care to not attempt installing packages that are already installed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inferior Lisp Program&lt;/h3&gt; &#xA;&lt;p&gt;The following steps describe setting up the &lt;code&gt;inferior-lisp-program&lt;/code&gt; variable so that Emacs can use SBCL to load and execute SLIME:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Emacs uses a variable named &lt;code&gt;inferior-lisp-program&lt;/code&gt; to start SLIME. The use of this variable can be seen in the next point. This variable specifies the program to be invoked for loading and executing SLIME. We will set this to just &lt;code&gt;sbcl&lt;/code&gt;, i.e., just the program name without the complete path. Avoiding absolute path of SBCL in Emacs initialization file has the advantage that the same initialization file can work well on other systems too where the location of SBCL may be different.&lt;/p&gt; &lt;p&gt;On macOS, when we install SBCL using &lt;code&gt;brew install sbcl&lt;/code&gt;, the compiler binary executable is written to &lt;code&gt;/usr/local/bin/sbcl&lt;/code&gt;. The path &lt;code&gt;/usr/local/bin&lt;/code&gt; is generally available in the shell&#39;s &lt;code&gt;$PATH&lt;/code&gt; environment variable, so when Emacs is launched from the shell, its &lt;code&gt;exec-path&lt;/code&gt; variable contains &lt;code&gt;/usr/local/bin&lt;/code&gt;. As a result, it can find &lt;code&gt;sbcl&lt;/code&gt; and start SLIME successfully.&lt;/p&gt; &lt;p&gt;However, when Emacs is launched from the desktop (say, from macOS Dock), it does not have &lt;code&gt;/usr/local/bin&lt;/code&gt; in its &lt;code&gt;exec-path&lt;/code&gt;, so it fails to start SLIME with this error: &lt;code&gt;Searching for program: No such file or directory, sbcl&lt;/code&gt;. The following line of code works around this issue by adding &lt;code&gt;/usr/local/bin&lt;/code&gt; to the &lt;code&gt;exec-path&lt;/code&gt; variable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;exec-path &#34;/usr/local/bin&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now there are several other ways to resolve this issue. A popular way is to specify the absolute path of SBCL as the &lt;code&gt;inferior-lisp-program&lt;/code&gt;. Yet another way is to configure macOS desktop such that when a program is launched from GUI, it contains &lt;code&gt;/usr/local/bin&lt;/code&gt; in its &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The workaround shown above is recommended in this document for two reasons. Firstly, we don&#39;t want to hard-code absolute path of SBCL in the Emacs initialization file, so that the same initilization file can work well on other systems where the location of SBCL may be different. Secondly, we want to keep the workaround minimally invasive, so that we don&#39;t have to go around meddling with the desktop settings only for the sake of Emacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify the program to be invoked for loading and executing SLIME:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq inferior-lisp-program &#34;sbcl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Add Hooks&lt;/h3&gt; &#xA;&lt;p&gt;This section describes how to enable Paredit and Rainbow Delimiters. These are not absolutely essential for having an interactive programming environment for Common Lisp. However many programmers find them useful while some do not.&lt;/p&gt; &#xA;&lt;p&gt;In case you decide not to use either Paredit or Rainbow Delimiters, then you may skip this section. In that case, you might also want to remove these packages from the &lt;code&gt;dolist&lt;/code&gt; expression of &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit while editing Emacs Lisp code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;emacs-lisp-mode-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Paredit helps in keeping parentheses balanced and in performing structured editing of S-expressions. While we configure it to be used for Common Lisp programming, we might as well configure it for editing Emacs Lisp code too. Then the experience of editing Emacs Lisp code and that of editing Common Lisp code will be consistent with each other.&lt;/p&gt; &lt;p&gt;To test that Paredit is enabled for editing Emacs Lisp code, open a new Emacs Lisp file, say, &lt;code&gt;foo.el&lt;/code&gt;. Then type &lt;code&gt;(&lt;/code&gt;. Paredit should automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit in eval-expression minibuffer:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;eval-expression-minibuffer-setup-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, enter &lt;code&gt;M-:&lt;/code&gt; to bring up the eval-expression minbuffer and type &lt;code&gt;(&lt;/code&gt;. Paredit should automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit while interactively evaluating Emacs Lisp expressions in inferior-emacs-lisp-mode (IELM):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;ielm-mode-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, enter &lt;code&gt;M-x ielm RET&lt;/code&gt;. When the &lt;code&gt;*ielm*&lt;/code&gt; buffer appears, type &lt;code&gt;(&lt;/code&gt;. Paredit should automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit in Lisp interaction mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;lisp-interaction-mode-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, first open a non-Lisp file, say, &lt;code&gt;C-x C-f foo.txt RET&lt;/code&gt;. Now type &lt;code&gt;(&lt;/code&gt;. Note that no corresponding &lt;code&gt;)&lt;/code&gt; is inserted because we are not in Lisp interaction mode yet. Delete &lt;code&gt;(&lt;/code&gt;. Then start Lisp interaction mode with the command &lt;code&gt;M-x lisp-interaction-mode RET&lt;/code&gt;. Type &lt;code&gt;(&lt;/code&gt; again. Paredit should now automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit while editing Common Lisp code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;lisp-mode-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, open a new Common Lisp source file, say, &lt;code&gt;C-x C-f foo.lisp RET&lt;/code&gt;. Then type &lt;code&gt;(&lt;/code&gt;. Paredit should automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit in SLIME REPL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;slime-repl-mode-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, start SLIME with &lt;code&gt;M-x slime RET&lt;/code&gt;. Then type &lt;code&gt;(&lt;/code&gt; in SLIME REPL. Paredit should automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When we type &lt;kbd&gt;backspace&lt;/kbd&gt; or &lt;kbd&gt;delete&lt;/kbd&gt; to delete a parenthesis in the SLIME REPL, Paredit fails to keep the parentheses balanced because SLIME interferes with Paredit by grabbing the delete key. To fix this issue, use the following code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;paredit)&#xA;(defun override-slime-del-key ()&#xA;  (define-key slime-repl-mode-map&#xA;    (read-kbd-macro paredit-backward-delete-key) nil))&#xA;(add-hook &#39;slime-repl-mode-hook &#39;override-slime-del-key)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, start SLIME with &lt;code&gt;M-x slime RET&lt;/code&gt;. Then type &lt;code&gt;(+ 1 (+ 2 (+ 3 4)))&lt;/code&gt;. Even though, the closing parentheses &lt;code&gt;)))&lt;/code&gt; will be automatically inserted, type them out to advance the cursor to the end of the line. When you type &lt;code&gt;)&lt;/code&gt; even if it is already present, Paredit just skips over the already present &lt;code&gt;)&lt;/code&gt;. Once you are at the end of the line, type &lt;kbd&gt;backspace&lt;/kbd&gt; or &lt;kbd&gt;delete&lt;/kbd&gt; multiple times. Paredit will keep the parentheses balanced at all times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Rainbow Delimiters while editing Emacs Lisp code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;emacs-lisp-mode-hook &#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Rainbow Delimiters color nested parentheses with different colors according to the depth level of each parenthesis. To test this open a new Emacs Lisp file, say, &lt;code&gt;foo.el&lt;/code&gt;. Then type &lt;code&gt;((((&lt;/code&gt;. Rainbow Delimiters should color each parenthesis differently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Rainbow Delimiters while interactively evaluating Emacs Lisp expressions in inferior-emacs-lisp-mode (IELM):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;ielm-mode-hook &#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, enter &lt;code&gt;M-x ielm RET&lt;/code&gt;. When the &lt;code&gt;*ielm*&lt;/code&gt; buffer comes up, type &lt;code&gt;((((&lt;/code&gt;. Rainbow Delimiters should color each parenthesis differently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Rainbow Delimiters in Lisp interaction mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;lisp-interaction-mode-hook &#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, first open a non-Lisp file, say, &lt;code&gt;foo.txt&lt;/code&gt;. Now type &lt;code&gt;((((&lt;/code&gt;. Then start Lisp interaction mode with the command &lt;code&gt;M-x lisp-interaction-mode RET&lt;/code&gt;. Rainbow Delimiters should now color each parenthesis differently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Rainbow Delimiters while editing Common Lisp code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;lisp-mode-hook &#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, open a new Common Lisp source file, say, &lt;code&gt;foo.lisp&lt;/code&gt;. Then type &lt;code&gt;((((&lt;/code&gt;. Rainbow Delimiters should color each parenthesis differently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Rainbow Delimiters in SLIME REPL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;slime-repl-mode-hook &#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, start SLIME with &lt;code&gt;M-x slime RET&lt;/code&gt;. Then type &lt;code&gt;((((&lt;/code&gt; at the REPL prompt. Rainbow Delimiters should color each parenthesis differently.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may have noticed that we did not enable Rainbow Delimiters for eval-expression. That is because it does not work as expected as of Dec 2020. See &lt;a href=&#34;https://github.com/Fanael/rainbow-delimiters/issues/57&#34;&gt;https://github.com/Fanael/rainbow-delimiters/issues/57&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Colorful Parentheses&lt;/h3&gt; &#xA;&lt;p&gt;The default colors that the Rainbow Delimiters package chooses for the nested parentheses are too subtle to easily recognize the matching pair of parentheses. Some Lisp programmers like to customize the colors to make the parentheses look more colorful. This section shows one way to do this.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This is necessary to use the various Rainbow Delimiters faces that appear in the next point.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;rainbow-delimiters)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set different colors for parentheses at different nesting level.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-face-foreground &#39;rainbow-delimiters-depth-1-face &#34;#c66&#34;)  ; red&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-2-face &#34;#6c6&#34;)  ; green&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-3-face &#34;#69f&#34;)  ; blue&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-4-face &#34;#cc6&#34;)  ; yellow&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-5-face &#34;#6cc&#34;)  ; cyan&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-6-face &#34;#c6c&#34;)  ; magenta&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-7-face &#34;#ccc&#34;)  ; light gray&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-8-face &#34;#999&#34;)  ; medium gray&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-9-face &#34;#666&#34;)  ; dark gray&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More Emacs Customization&lt;/h2&gt; &#xA;&lt;p&gt;This project focusses primarily on setting up a Common Lisp development environment. If you want to enhance your Emacs setup from being a Common Lisp development environment to being a more general purpose editing and programming environment, please see my new project &lt;a href=&#34;https://github.com/susam/emfy&#34;&gt;Emfy&lt;/a&gt;. Emfy is similar to this project, however, Emfy offers more customization to make Emacs easier to use for general purpose editing and programming.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;There are two popular alternatives to Emacs4CL:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portacle.github.io/&#34;&gt;Portacle&lt;/a&gt;: Portacle is an Emacs-based fully featured integrated development environment (IDE) for Common Lisp. Portacle consists of Emacs customized heavily with custom configuration and a rich selection of packages and tools that make it suitable for Common Lisp programming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lem-project.github.io/lem-page/&#34;&gt;Lem&lt;/a&gt;: Lem is an Emacs-like editor and Common Lisp IDE written from scratch using Common Lisp itself.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both are good alternatives to Emacs4CL. Since Lem is a completely different editor, there is not much to compare between Lem and Emacs4CL. Lem offers an appealing option for those who prefer to engage in Common Lisp development activities using an editor that is written in Common Lisp itself.&lt;/p&gt; &#xA;&lt;p&gt;Portacle, however, is Emacs packaged with custom packages, configuration, and Common Lisp tools. Portacle tucks away the underlying details of what goes into making Emacs ready for Common Lisp development in its rather large configuration directory. Since Portacle is still Emacs, to use Portacle effectively, you have to learn Emacs and SLIME anyway. If you are going to learn Emacs and SLIME anyway, you might as well set it up yourself. Then you can add only those customizations to Emacs that you need instead of Portacle deciding what your Emacs experience should be like.&lt;/p&gt; &#xA;&lt;p&gt;Emacs4CL provides a good middle ground between setting up Emacs from scratch manually and installing Portacle. It promotes a do-it-yourself approach to setting up Emacs for Common Lisp programming. More importantly, it helps you understand each step of the work that goes into customizing Emacs as an environment for Common Lisp programming.&lt;/p&gt; &#xA;&lt;h2&gt;Opinion References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSfg7UJRKrkI3OjOHWL4xI-murE4LpQjIxsiAhFdPEmtyLX3kg/viewanalytics&#34;&gt;State of Common Lisp Survey 2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lobste.rs/s/vgjknq/emacs_begin_learning_common_lisp#c_su9qz9&#34;&gt;Displaying line numbers is an Emacs anti-pattern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/5243421/303363&#34;&gt;Give paredit mode a chance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lobste.rs/s/vgjknq/emacs_begin_learning_common_lisp#c_0y6zpd&#34;&gt;Never warmed up to paredit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lobste.rs/s/vgjknq/emacs_begin_learning_common_lisp#c_1n78vl&#34;&gt;Coloring each paren differently only adds noise&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Channels&lt;/h2&gt; &#xA;&lt;p&gt;The following channels are available for asking questions, seeking help and receiving updates regarding this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub: &lt;a href=&#34;http://github.com/susam/emacs4cl/issues&#34;&gt;emacs4cl/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mastodon: &lt;a href=&#34;https://mastodon.social/@susam&#34;&gt;@susam@mastodon.social&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matrix: &lt;a href=&#34;https://matrix.to/#/#susam:matrix.org&#34;&gt;#susam:matrix.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Libera: &lt;a href=&#34;https://web.libera.chat/#susam&#34;&gt;#susam&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are welcome to follow or subscribe to one or more of these channels to receive updates and ask questions about this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This is free and open source software. You can use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of it, under the terms of the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;This software is provided &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, express or implied. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/emacs4cl/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>armindarvish/consult-gh</title>
    <updated>2023-06-30T01:34:10Z</updated>
    <id>tag:github.com,2023-06-30:/armindarvish/consult-gh</id>
    <link href="https://github.com/armindarvish/consult-gh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+include: ~/OrgFiles/armin/org-macros.setup #+OPTIONS: h:1 num:nil toc:nil d:nil&lt;/p&gt; &#xA;&lt;p&gt;#+TITLE: Consult-GH - A [[https://cli.github.com/][GitHub CLI]] client inside GNU Emacs using [[https://github.com/minad/consult][Consult]] #+AUTHOR: Armin Darvish #+LANGUAGE: en&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://github.com/armindarvish&#34;&gt;&lt;img alt=&#34;Armin Darvish&#34; src=&#34;https://img.shields.io/static/v1?label=Armin%20Darvish&amp;amp;message=consult-gh&amp;amp;color=00A8B0&amp;amp;logo=github&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://img.shields.io/static/v1?label=Made%20For&amp;amp;message=GNU%20Emacs&amp;amp;color=7a5aba&amp;amp;logo=gnuemacs&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Consult-GH provides an interface to interact with GitHub repositories (search, view files and issues, clone, fork, ...) from inside Emacs. It uses the awesome package [[https://github.com/minad/consult][consult]] by [[https://github.com/minad][Daniel Mendler]] and [[https://cli.github.com/][GitHub CLI]] and optionally [[https://github.com/oantolin/embark][Embark]] by [[https://github.com/oantolin][Omar Antolín Camarena]], and provides an intuitive UI using minibuffer completion familiar to Emacs users.&lt;/p&gt; &#xA;&lt;p&gt;Consult-GH offers the following &#34;MAIN&#34; interactive commands&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;=consult-gh-orgs=: for looking up GitHub users/organizations and loading their repositories including looking up multiple accounts at the same time.&lt;/li&gt; &#xA; &lt;li&gt;=consult-gh-search-repos=: for looking up repositories including multiple repositories at the same time.&lt;/li&gt; &#xA; &lt;li&gt;=consult-gh-find-file=: for looking up files within any branch of one or more repositories. This can include looking at different branches within the same repository.&lt;/li&gt; &#xA; &lt;li&gt;=consult-gh-search-issues=: for searching issues of one or more repositories&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In addition, Consult-GH provides interactive functions for /additional/ useful quick actions: 5. =consult-gh-default-repos=: This calls =consult-gh-org= on a defined default list of orgs stored in variable =consult-gh-default-orgs-list= for quick access to frequently used repositories. This can for example be useful for accessing your own repositories (in multiple accounts) quickly. 6. =consult-gh-repo-clone=: Quickly clone a repository with just typing the name of the repository. You can also clone multiple repositories at the same time (see examples below). This function has a post-hook =consult-gh-repo-post-clone-hook=. 7. =consult-gh-repo-fork=: Quickly fork one or more repositories. This function also has a post-hook =consult-gh-repo-post-fork-hook=.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, Consult-GH, also provides a number of useful [[https://github.com/oantolin/embark][Embark]] actions (see examples below.) You can see a full list of commands here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why Use Consult-GH? While there are several packages for interacting with GitHub and GitHub API such as [[https://github.com/sigma/gh.el][gh.el]], [[https://github.com/magit/ghub][magit/ghub]] and [[https://github.com/magit/forge][magit/forge]], [[https://github.com/sshaw/git-link][git-link]], [[https://github.com/rmuslimov/browse-at-remote][browse-at-remote]], and ... in my opinion none of these packages provide an intuitive UI to interact with GitHub repositories. Some of these are a collection of low-level API calls without user-friendly interactive commands and others simply retrieve a URL in the browser instead of providing GitHub interface inside Emacs. As a result, the user either has to implement their own functions to use the API calls or simply jump to the browser to interact with GitHub. Consult-GH aims to fill this gap and provide a tool that allows the user to interact with GitHub from within Emacs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that currently Consult-GH does not provide interactive commands to manage issues or pull request mainly because those functionalities are already available in other packages or tools. Personally, I like to use Consult-GH for searching repositories, browsing issues or view/download files without cloning entire repositories, etc. and use a package like [[https://github.com/magit/forge][magit/forge]] for managing issues, pull requests, etc. That said, I am open to including managing issues, pull requests or releases if there is a clear advantage in offering that as part of Consult-GH.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting Started ** Installation Before you start, make sure you understand that this is work in progress in its early stage and bugs and breaks are very much expected so use this at your own risk. *** Requirements In order to use Consult-GH, you need the following requirements:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;**** [[https://github.com/cli/cli][GitHub CLI]] To install GitHub CLI, follow the official documentations here: [[https://github.com/cli/cli#installation][GitHub CLI Installation]]. Make sure you are logged in by running =gh auth login= and following the instructions. Refer to the official manual if you need further help, [[https://cli.github.com/manual/][GitHub CLI Manual]].&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Why use gh instead of other Emacs packages?&lt;/em&gt; While there are other Emacs packages to interact with GitHub API, we use &#34;gh&#34; commandline tool as the backend instead of direct calls to REST API or GraphQL, and this is very much intentional. By leaving API functionalities to the official GitHub CLI tool, we simplify usage (no need to set up authentication within Emacs), reduce security risks (no risk of exposing authentication tokens, ...) and increase maintainability (no need to keep compatibility with API changes).&lt;/p&gt; &#xA;&lt;p&gt;**** [[https://github.com/minad/consult][Consult]] To install consult follow the official instructions here: [[https://github.com/minad/consult#configuration][Configuration of Consult.]]&lt;/p&gt; &#xA;&lt;p&gt;Also, make sure you review Consult&#39;s README since it recommends some other packages and useful configurations for different settings. Some of those may improve your experience of Consult-GH as well.&lt;/p&gt; &#xA;&lt;p&gt;**** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-JSON.html][json library]] in Emacs As of Emacs 27, json is available as built-in &lt;em&gt;if Emacs is compiled with json.&lt;/em&gt; You can run the command =json-available-p= to see if it is available in your version of Emacs. If json is not available you may still be able to use Consult-GH with limited functionality (for example you cannot view file contents).&lt;/p&gt; &#xA;&lt;p&gt;*** Recommended (&lt;em&gt;but not required&lt;/em&gt;) packages The following packages are not strictly required for Consult-GH to work, but it can improve your experience depending on your use-case.&lt;/p&gt; &#xA;&lt;p&gt;**** [[https://github.com/jrblevin/markdown-mode][markdown-mode]] Since =gh= returns information in markdown, installing [[https://github.com/jrblevin/markdown-mode][markdown-mode]] can significantly improve your experience (e.g. readability of previews, etc.). When =markdown-mode= is available, by default Consult-GH will use it as major mode to show previews of READMEs, otherwise it will be in raw text in =fundamental mode=.&lt;/p&gt; &#xA;&lt;p&gt;*** Installing Consult-GH Package Consult-GH is not currently on [[https://elpa.gnu.org/packages/consult.html][ELPA]] or [[https://melpa.org/#/consult][MELPA]]. Therefore, you need to install it using an alternative non-standard package managers such as [[https://github.com/radian-software/straight.el][straight.el]] or use manual installation.&lt;/p&gt; &#xA;&lt;p&gt;**** straight.el To install Consult-GH with straight.el you can use the following command #+begin_src emacs-lisp (straight-use-package &#39;(consult-gh :type git :host github :repo &#34;armindarvish/consult-gh&#34; :branch &#34;main&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;or if you use =use-package= macro with straight, you can do:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package consult-gh :straight (consult-gh :type git :host github :repo &#34;armindarvish/consult-gh&#34;) ) #+end_src You can also fork this repository and use your own repo.&lt;/p&gt; &#xA;&lt;p&gt;**** manual installation Clone this repo and make sure the files are on your load path, as described on [[https://www.emacswiki.org/emacs/LoadPath][EmacsWiki]].&lt;/p&gt; &#xA;&lt;p&gt;** Configuration Consult-GH is built with the idea that the user should be able to customize everything based on their use-case. In fact, the default configurations are minimal and prioritize performance over usability, therefore the user is very much expected to configure Consult-GH according to their use case. For example, with the default configuration, when selecting a repository, Consult-GH opens the link in a browser, but you can configure that to show the README inside Emacs or do something else (e.g. clone the repository). Therefore, I recommend you read through this section and understand how to configure the package according to your needs and for your specific use-case, but if you just want a drop-in minimal config, look at the snippet below and make sure you set the =consult-gh-default-orgs-list= to your own GitHub username instead of &#34;armindarvish&#34;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package consult-gh :straight (consult-gh :type git :host github :repo &#34;armindarvish/consult-gh&#34; :branch &#34;develop&#34;)&lt;/p&gt; &#xA;&lt;p&gt;:config ;;add your main GitHub account (replace &#34;armindarvish&#34; with your user or org) (add-to-list &#39;consult-gh-default-orgs-list &#34;armindarvish&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;;use &#34;gh org list&#34; to get a list of all your organizations and adds them to default list (setq consult-gh-default-orgs-list (append consult-gh-default-orgs-list (remove &#34;&#34; (split-string (consult-gh--command-to-string &#34;org&#34; &#34;list&#34;) &#34;\n&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;;; set the default folder for cloning repositories, By default Consult-GH will confirm this before cloning (setq consult-gh-default-clone-directory &#34;~/&#34;) )&lt;/p&gt; &#xA;&lt;p&gt;#+end_src The configuration above adds &#34;armindarvish&#34; to the default orgs (used by =consult-gh-default-repos= so you can quickly see all your repositories.&lt;/p&gt; &#xA;&lt;p&gt;*** Customization The following customizable variables are provided:&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-tempdir= This is where temporary files are saved. By default, this is set to your system temporary directory (=temporary-file-directory= variable in Emacs). Consult-GH uses this folder to store temporary files (such as files you are previewing).&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-crm-separator= This is used as =crm-separator= when selecting multiple values in completing read. By default, this is set to default value of =crm-separator= (e.g. &#34;,&#34;) but if you want to use a different character, you can change this for example by setting it to &#34;[\s]&#34; for using space as separator.&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh--repo-maxnum= This is the limit passed to =gh= as =--limit= argument to =gh repo list= or =gh search repos= commands and defines the number of repos shown when listing or searching repos. By default, it is set to 30 following the default values of =gh= itself, but it can be customized by the user to see more or fewer results.&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh--issue-maxnum= This is the limit passed to =gh= as =--limit= argument to =gh issue list= or =gh search issues= commands and defines the number of issues shown when listing or searching for issues. By default, it is set to 30 following the default values of =gh= itself, but it can be customized by the user to see more or fewer results.&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-large-file-warning-threshold= This is the maximum file size, above which =consult-gh= requests a confirmation for previewing, opening or saving the file. Default value is set by emacs built-in =large-file-warning-threshold= variable, but since =consult-gh= is downloading files from the internet, you may want to set this to a smaller value than =large-file-warning-threshold= depending on your network performance.&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-prioritize-local-folder=&lt;/p&gt; &#xA;&lt;p&gt;This varibale defines whther =gh= uses the git repo in the local folder to select/guess the repository for commands like =consult-gh-find-file= and =consult-gh-issue-list=, etc. Note that everything is still retrieved from the remote (for example =consult-gh-find-file= would fetch the contents of the repo from remote and not from the local folder) but the local repo name is used instead of querying the user. You can set this varibale to =&#34;suggest&#34;=, =t=, or =nil=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;suggest&#34; simply adds the local repo name as default input in the minibuffer so you don&#39;t have to type it out.&lt;/li&gt; &#xA; &lt;li&gt;t would skip the query and uses the local repo name, if any, otherwise it falls back to querying the user.&lt;/li&gt; &#xA; &lt;li&gt;nil would ignore the local repo name in the default-directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;**** =consult-gh--issues-state-to-show= The state of issues shown when listing or searching for issues. This is the string passed as =--state= argument to =gh search issues= or =gh issue list= and can accept =open=, =closed= or =all= for open, closed or all issues, respectively.&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-default-orgs-list= This is a list of default organizations you want to access frequently. I set this variable to organizations I am part of (a.k.a. to look at my own repositories) but you can add any account you want to look at frequently to this list. Here is an example of setting the default list to &#34;alphapapa&#34; and &#34;systemcrafters&#34;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-gh-default-orgs-list &#39;(&#34;alphapapa&#34; &#34;systemcrafters&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;or if you want to append to the list:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-gh-default-orgs-list (append consult-gh-default-orgs-list &#39;(&#34;alphapapa&#34; &#34;systemcrafters&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-preview-buffer-mode= This is the major-mode used to show repository previews. By default, it is set to =markdown-moe= because =gh repo view= returns the README contents (commonly in markdown syntax). But if you prefer to see the contents in =org-mode= format, you can set this variable to =&#39;org-mode=. Be aware that currently, the org-mode conversion is done with some simple regex replacement and while the performance is decent and the converted version is perfectly understandable, the org conversion may cause some inaccuracies. If you want to try this you can do:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-gh-preview-buffer-mode &#39;org-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-show-preview= This variable is a boolean determining whether Consult-GH shows previews or not. By default, this is set to nil because loading repository views or file contents can be resource-heavy depending on the size of the content. Therefore, it is left to the user intentionally turn this feature on if it is suitable for their use-case and their setup.&lt;/p&gt; &#xA;&lt;p&gt;Note that getting previews makes an API call to GitHub and downloads contents of a file. When =consult-gh-show-preview= is set to =nil= (default setting), no API call is made (no resources used) and no preview will be available either. This might be a useful configuration if you only want to see the name of repositories or issues and do actions such as cloning, forking or getting links, or jumping to urls in the browser but not for viewing files or issues within Emacs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you want to be able to get a preview on demand without turning previews on globally, then look at =consult-gh-preview-key= below.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-preview-key= This is similar to =consult-preview-key= but only for =consult-gh=. By default, it is set to the value of consult-preview-key to keep consistent experience across different consult packages, but you can set this variable explicitly for consult-gh. For example, if you have turned preview on by setting =consult-gh-show-preview= to =t=, but you still only want to see previews on demand, you can set =consult-gh-preview-key= to the key binding that shows the preview. Here is an example using =M-o= as preview key. With this setting, previews are shown only when you hit =meta+o=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-gh-show-preview t) (setq consult-gh-preview-key &#34;M-o&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Be aware that getting previews is resource heavy since it has to make an API call to GitHub and download contents of a file. If you set a specific key for =consult-gh-preview-key=, this API call and downloading the content is done only when you hit the key binding.&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-confirm-name-before-fork= This is a boolean determining whether Consult-GH asks for a repo name before forking a repository. By default, it is set to =nil=, meaning that Consult-GH uses the same repo name when forking. **** =consult-gh-confirm-before-clone= This is a boolean determining whether Consult-GH asks for path and directory name before cloning a repository. By default, it is set to =t=, meaning that Consult-GH asks the user for the path to clone a repository and the name to give the directory. However, if you don&#39;t want consult-gh to ask you every time you clone a repository, you can set this variable to =nil=, in which case Consult-GH clones repositories at =consult-gh-default-clone-directory= (see below) with the default name of the repository itself. Note that setting this variable to =nil= along with setting =consult-gh-default-clone-directory= to a directory where you keep all your repositories, allows quick cloning of multiple repositories (possibly even from different accounts on GitHub). **** =consult-gh-default-clone-directory= This variable points to the directory where repositories are cloned by default. By default, this is set to =&#34;&lt;del&gt;/&#34;= (a.k.a. user&#39;s home directory), and the user is asked for confirmation before cloning. Therefore, in the default setting no matter what this variable is, you can still choose the right path to clone each repository, but this means that you have to do this for every each repository you clone. By setting this variable to a default convenient path where you keep all your repositories, for example =&#34;&lt;/del&gt;/code/&#34;= or =&#34;~/projects/&#34;= , you can minimize the effort to navigate to the right path. Keep in mind that if you do clone multiple repositories at the same time, it would be convenient to have this variable set to the right path, so you don&#39;t have to navigate to it for each repository especially if you turn =consult-gh-confirm-before-clone= to nil (see above).&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-ask-for-path-before-save= This is a boolean determining whether Consult-GH asks for a path before saving a file (for single files and not cloning entire repositories). By default, it is set to =t=, meaning that Consult-GH asks the user for the path to save a file. However, if you don&#39;t want consult-gh to ask you every time you save a file, you can set this variable to =nil=, in which case Consult-GH saves files at =consult-gh-default-save-directory= (see below) with the name of the file. Note that setting this variable to =nil= along with setting =consult-gh-default-save-directory=, allows quick saving of multiple files (possibly even from different repositories).&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-default-save-directory= This variable stores the default path where files are saved and by default is set to =~/Downloads=. Keep in mind that This is used for saving individual files and not for cloning entire repositories, which uses =consult-gh-default-clone-directory= (see above).&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-default-branch-to-load= This variable is used for choosing a branch when viewing files within a repository. By default, it is set to =&#34;ask&#34;= meaning that Consult-GH will ask the user which branch to clone. If you set this to =nil=, then Consult-GH will load the &lt;em&gt;HEAD&lt;/em&gt; of the git repository. If you set this to =confirm=, Consult-GH will ask you if you want to view the &lt;em&gt;HEAD&lt;/em&gt; of the repository and if not will ask you to choose a branch. If you set this to any other ==string=, then Consult-GH uses that string as the name of the branch and will try to load this branch. Be aware that setting this to a string is probably not a good idea since this will be used for any repository and if the branch does not exist, will cause an error.&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-repo-action= This variable stores the function that is called when a repository is selected. By default, it is bound to =#&#39;consult-gh--repo-browse-url-action= which opens the homepage of the repository in a browser. You can change it to other provided functions such as =#&#39;consult-gh--repo-view-action= which instead fetches the README of the repository within an Emacs buffer or =#&#39; consult-gh--repo-browse-files-action= which shows the file tree of the repository (after choosing a branch) for the user to view the files. Other provided built-in actions include =#&#39;consult-gh--repo-clone-action= and =#&#39;consult-gh--repo-fork-action=. You can also set this variable to any custom function as long as it follows the patterns of the built-in functions (e.g. input ARGs,...)&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-issue-action= Similar to =consult-gh-repo-action= but for issues. This variable stores the default function that is called, when an issue is selected. By default, it is bound to =#&#39;consult-gh--issue-browse-url-action= which opens the issue page in a browser. Alternatively, you can bind it to =consult-gh--issue-view-action= if you want to see the issue inside an Emacs buffer. Note that this is only for viewing issues and not interacting (adding posts, filing new issues, etc.) with them. This is mainly due to the fact that the =gh= backend itself is also limited when it comes to managing issues (interactive command line queries are not that useful!). In the future, I may add more features here, but keep in mind that for managing issues (and pull requests), we can use other packages like [[https://github.com/magit/forge][magit/forge]] that cover sources other than GitHub as well and therefore this is not high in priority right now.&lt;/p&gt; &#xA;&lt;p&gt;**** =consult-gh-file-action= Similar to =consult-gh-repo-action= and =consult-gh-issue-action= but for files. This variable stores the default function that is called, when a file is selected. By default, it is bound to =#&#39; consult-gh--files-browse-url-action= which opens the file page in a browser. Alternatively, you can bind it to other provided action functions for files such as =consult-gh--files-view-action= which opens the file in an Emacs buffer (in the right major mode as well) or =consult-gh--files-save-file-action= which allows you to save a file without cloning the entire repository. If you select multiple files, using [[*=consult-gh-crm-separator=][=consult-gh-crm-separator=]], you can even save multiple files possibly from different repositories.&lt;/p&gt; &#xA;&lt;p&gt;*** Example Customization for Good Performance and Functionality Here is a good customization for great performance as well as functionality:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package consult-gh :straight (consult-gh :type git :host github :repo &#34;armindarvish/consult-gh&#34;) :custom (consult-gh-default-clone-directory &#34;~/projects&#34;) (consult-gh-show-preview t) (consult-gh-preview-key &#34;M-o&#34;) (consult-gh-issue-action #&#39;consult-gh--issue-view-action) (consult-gh-repo-action #&#39;consult-gh--repo-browse-files-action) (consult-gh-file-action #&#39;consult-gh--files-view-action) (consult-gh-large-file-warning-threshold 2500000) (consult-gh-prioritize-local-folder &#34;suggest&#34;) :config ;;add your main GitHub account (replace &#34;armindarvish&#34; with your user or org) (add-to-list &#39;consult-gh-default-orgs-list &#34;armindarvish&#34;) (require &#39;consult-gh-embark) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features and Demos For a detailed discussion and demo, see this blog post: [[https://www.armindarvish.com/en/post/consult-gh_working_with_github_inside_emacs_in_2023_/][consult-gh_working_with_github_inside_emacs_in_2023]]. If you prefer demo videos, you can watch this [[https://www.youtube.com/playlist?list=PLLKxLZdx_YyZdW4CidqbVPJjyo396Y1cx][YouTube Playlist]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the screenshots below, I am using vanilla emacs and a minimal config with [[https://github.com/protesilaos/modus-themes][modus-themes]], [[https://github.com/minad/vertico][vertico]], [[https://github.com/minad/marginalia][marginalia]], [[https://github.com/minad/consult][consult]], and [[https://github.com/oantolin/embark][embark]] and this repo with the following config:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package consult-gh :straight (consult-gh :type git :host github :repo &#34;armindarvish/consult-gh&#34;) :custom (consult-gh--default-maxnum 50) ;;change defualt max number of repos to 50 (consult-gh-show-preview t) ;;show preview automaically (consult-gh-preview-buffer-mode &#39;org-mode) ;;convert markdown files to org-mode for previews (consult-gh-issue-action #&#39;consult-gh--issue-view-action) ;;view issues inside emacs (consult-gh-repo-action #&#39;consult-gh--repo-browse-files-action) ;;browse files inside emacs (consult-gh-file-action #&#39;consult-gh--files-view-action) ;;open files in an emacs buffer :config (add-to-list &#39;consult-gh-default-orgs-list &#34;armindarvish&#34;) ;;add your GitHub user (require &#39;consult-gh-embark) (add-to-list &#39;savehist-additional-variables &#39;consult-gh--known-orgs-list) ;;keep record of searched orgs (add-to-list &#39;savehist-additional-variables &#39;consult-gh--known-repos-list)) ;;keep record of searched repos #+end_src ** Search repositories In the screenshot below, I use =consult-gh-search-repos= to search for repositories.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[https://github.com/armindarvish/consult-gh/blob/screenshots/screenshots/consult-gh-search-repos.gif]]&lt;/p&gt; &#xA;&lt;p&gt;** Looking at Repositories of User(s) In the screenshot below, I use =consult-gh-orgs= to find repositories of multiple accounts.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[https://github.com/armindarvish/consult-gh/blob/screenshots/screenshots/consult-gh-orgs.gif]]&lt;/p&gt; &#xA;&lt;p&gt;** Browsing Files in a Repository In the screenshot below, I use =consult-gh-find-file= to browse files of a repository. In this case I set =consult-gh-preview-key= to =&#34;M-o&#34;= to avoid automatically loading preview of large files. Instead I can load preview on demand by using &#34;M-o&#34; keybinding. #+begin_src emacs-lisp (setq consult-gh-preview-key &#34;M-o&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[./screenshots/consult-gh-find-file.gif]]&lt;/p&gt; &#xA;&lt;p&gt;** Searching/Viewing Issues In the screenshot below, I use =consult-gh-search-issues= to search for issues and then view them inside Emacs.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_ORG: :width 800px #+ATTR_LATEX: :width 800px #+ATTR_HTML: :width 800px [[https://github.com/armindarvish/consult-gh/blob/screenshots/screenshots/consult-gh-search-issues.gif]]&lt;/p&gt; &#xA;&lt;p&gt;** Embark Integration Consult-GH also provides embark integration defined in =consult-gh-embark.el= If you use [[https://github.com/oantolin/embark][Embark]], you can use these commands for additional actions on items in consult-gh menu. For example, you can set your default action for repos bound to =consult-gh-repo-browse-url-action= which opens the repo&#39;s url in a browser, but then call embark on any item for running alternative actions such as =consult-gh-repo-clone= or =consult-gh-repo-fork= etc. You can also call embark and select items with =embark-select= (by default bound to =SPC=) before running some commands on all of them, for example select multiple repos and run clone for all of them.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/armindarvish/consult-gh/blob/screenshots/screenshots/consult-gh-embark.gif]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug reports To report bug, first check if it is already reported in the [[https://github.com/armindarvish/consult-gh/issues][&lt;em&gt;issue tracker&lt;/em&gt;]] and see if there is an existing solution or add relevant comments and discussion under the same issue. If not file a new issue following these steps:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the dependencies are installed, and you are logged in by running =gh auth login= in the terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that dependencies (i.e. =consult= and =gh=) work properly independent of Consult-GH. You can for example run some other consult commands (e.g. =consult-buffer=) to make sure the problem is not form consult and run some =gh= commands in the shell (i.e. =gh repo list=) to see if they are working properly. If the problem is from consult or gh, please refer to their manuals and documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove the package and install the latest version (along with dependencies) and see if the issue persists.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In a bare bone vanilla Emacs (&amp;gt;=28) (e.g. =emacs -Q=), install the latest version of Consult-GH (and its dependencies) without any configuration or other packages and see if the issue still persists.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;File an issue and provide important information and context in as much detail as possible in your bug report. Important information can include:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your operating system, version of Emacs (or the version of emacsen you are using), version of gh (run =gh --version= in a shell), version of consult (see [[https://github.com/emacsorphanage/pkg-info][pkg-info]]).&lt;/li&gt; &#xA; &lt;li&gt;The installation method and the configuration you are using with your Consult-GH.&lt;/li&gt; &#xA; &lt;li&gt;If there is an error message, turn debug-on-error on (by =M-x toggle-debug-on-error=) and include the backtrace content in your report.&lt;/li&gt; &#xA; &lt;li&gt;If the error only exists when you have some other packages installed, list those packages (e.g. problem happens when evil is installed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions This is an open source package, and I appreciate feedback, suggestions, ideas, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to contribute to the code, please note that the main branch is currently stable (as stable as a work in progress like this can be) and the develop branch is the current work in progress. So, &lt;em&gt;start from the develop branch&lt;/em&gt; to get the latest work-in-progress updates and create a new branch with names such as feature/name-of-the-feature or fix/issue, ... Do the edits and then create a new pull request to merge back with the &lt;em&gt;develop&lt;/em&gt; branch when you are done with your edits. Importantly, keep in mind that I am using a &lt;em&gt;literate programming approach&lt;/em&gt; (given that this is a small project with very limited number of files) where everything goes into &lt;em&gt;consult-gh.org&lt;/em&gt; and then gets tangled to appropriate files (for now that includes consult-gh.el and consult-gh-embark.el). If you open a pull-request where you directly edited the .el files, I will likely not approve it because that will then get overwritten later when I tangle from the .org file. In other words, &lt;em&gt;Do Not Edit The .el Files!&lt;/em&gt; only edit the .org file and tangle to .el files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgments Obviously this package would not have been possible without the fabulous [[https://github.com/minad/consult][Consult]] package. It also took inspiration from other packages related to consult as well as [[https://github.com/sigma/gh.el][gh.el]], [[https://github.com/magit/forge][magit/forge]] and some other GitHub related work. Special thanks to the maintainer of consult package, [[https://github.com/minad][Daniel Mendler]], for useful advice, feedback and discussion.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>