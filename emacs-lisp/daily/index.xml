<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-19T01:27:06Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>s-kostyaev/ellama</title>
    <updated>2023-10-19T01:27:06Z</updated>
    <id>tag:github.com,2023-10-19:/s-kostyaev/ellama</id>
    <link href="https://github.com/s-kostyaev/ellama" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ollama client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ellama&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/ellama&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/ellama-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ellama lets you access LLMs locally using &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;ollama&lt;/a&gt;&#39;s API from Emacs. It offers a set of commands that allow you to inquire, define words, translate text and more through the Emacs interface. Ellama natively supports streaming output, making it effortless to use with your preferred text editor.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Firstly, you need to install &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;ollama&lt;/a&gt; and pull &lt;a href=&#34;https://ollama.ai/library/zephyr&#34;&gt;zephyr&lt;/a&gt; (default model) or any other model from &lt;a href=&#34;https://ollama.ai/library&#34;&gt;library&lt;/a&gt; (in that case you should customize &lt;code&gt;ellama-model&lt;/code&gt;) You can now install the package &lt;code&gt;ellama&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/#/getting-started&#34;&gt;MELPA&lt;/a&gt;. Just &lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;package-install&lt;/code&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; &lt;code&gt;ellama&lt;/code&gt; &lt;kbd&gt;Enter&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;ellama-ask&lt;/h3&gt; &#xA;&lt;p&gt;Ask Ellama about something by entering a prompt in an interactive buffer. &lt;img src=&#34;https://raw.githubusercontent.com/s-kostyaev/ellama/main/imgs/ellama-ask.gif&#34; alt=&#34;ellama-ask&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ellama-ask-about&lt;/h3&gt; &#xA;&lt;p&gt;Ask Ellama about a selected region or the current buffer. &lt;img src=&#34;https://raw.githubusercontent.com/s-kostyaev/ellama/main/imgs/ellama-ask-about.gif&#34; alt=&#34;ellama-ask-about&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ellama-translate&lt;/h3&gt; &#xA;&lt;p&gt;Ask Ellama to translate a selected region or word at the point. &lt;img src=&#34;https://raw.githubusercontent.com/s-kostyaev/ellama/main/imgs/ellama-translate.gif&#34; alt=&#34;ellama-translate&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ellama-define-word&lt;/h3&gt; &#xA;&lt;p&gt;Find the definition of the current word using Ellama. &lt;img src=&#34;https://raw.githubusercontent.com/s-kostyaev/ellama/main/imgs/ellama-define-word.gif&#34; alt=&#34;ellama-define-word&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ellama-summarize&lt;/h3&gt; &#xA;&lt;p&gt;Summarize a selected region or the current buffer using Ellama. &lt;img src=&#34;https://raw.githubusercontent.com/s-kostyaev/ellama/main/imgs/ellama-summarize.gif&#34; alt=&#34;ellama-summarize&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ellama-code-review&lt;/h3&gt; &#xA;&lt;p&gt;Review code in a selected region or the current buffer using Ellama. &lt;img src=&#34;https://raw.githubusercontent.com/s-kostyaev/ellama/main/imgs/ellama-code-review.gif&#34; alt=&#34;ellama-code-review&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ellama-change&lt;/h3&gt; &#xA;&lt;p&gt;Change text in a selected region or the current buffer according to a provided change.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-enhance-grammar-spelling&lt;/h3&gt; &#xA;&lt;p&gt;Enhance the grammar and spelling in the currently selected region or buffer using Ellama. &lt;img src=&#34;https://raw.githubusercontent.com/s-kostyaev/ellama/main/imgs/ellama-enhance-grammar-spelling.gif&#34; alt=&#34;ellama-enhance-grammar-spelling&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ellama-enhance-wording&lt;/h3&gt; &#xA;&lt;p&gt;Enhance the wording in the currently selected region or buffer using Ellama.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-make-concise&lt;/h3&gt; &#xA;&lt;p&gt;Make the text of the currently selected region or buffer concise and simple using Ellama.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-change-code&lt;/h3&gt; &#xA;&lt;p&gt;Change selected code or code in the current buffer according to a provided change using Ellama.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-enhance-code&lt;/h3&gt; &#xA;&lt;p&gt;Change selected code or code in the current buffer according to a provided change using Ellama.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-complete-code&lt;/h3&gt; &#xA;&lt;p&gt;Complete selected code or code in the current buffer according to a provided change using Ellama.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-add-code&lt;/h3&gt; &#xA;&lt;p&gt;Add new code according to a description, generating it with a provided context from the selected region or the current buffer using Ellama.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-render&lt;/h3&gt; &#xA;&lt;p&gt;Render the currently selected text or the text in the current buffer as a specified format using Ellama.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-make-list&lt;/h3&gt; &#xA;&lt;p&gt;Create a markdown list from the active region or the current buffer using Ellama.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-make-table&lt;/h3&gt; &#xA;&lt;p&gt;Create a markdown table from the active region or the current buffer using Ellama.&lt;/p&gt; &#xA;&lt;h3&gt;ellama-summarize-webpage&lt;/h3&gt; &#xA;&lt;p&gt;Summarize a webpage fetched from a URL using Ellama.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The following variables can be customized for the Ellama client:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-url&lt;/code&gt;: The URL to call Ollama.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-curl-executable&lt;/code&gt;: The path to curl executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-model&lt;/code&gt;: The model to use Ollama with. Default model is &lt;a href=&#34;https://ollama.ai/library/zephyr&#34;&gt;zephyr&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-buffer&lt;/code&gt;: The default Ellama buffer name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-always-show-buffer&lt;/code&gt;: Whether to always show the Ellama buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-user-nick&lt;/code&gt;: The user nick in logs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-assistant-nick&lt;/code&gt;: The assistant nick in logs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-buffer-mode&lt;/code&gt;: The major mode for the Ellama logs buffer. Default mode is &lt;code&gt;markdown-mode&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-language&lt;/code&gt;: The language for Ollama translation. Default language is english.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ellama-template&lt;/code&gt;: The template to use with Ollama instead of the default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/jmorganca&#34;&gt;Jeffrey Morgan&lt;/a&gt; for excellent project &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;ollama&lt;/a&gt;. This project cannot exist without it.&lt;/p&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/zweifisch&#34;&gt;zweifisch&lt;/a&gt; - I got some ideas from &lt;a href=&#34;https://github.com/zweifisch/ollama&#34;&gt;ollama.el&lt;/a&gt; what ollama client in Emacs can do.&lt;/p&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/David-Kunz&#34;&gt;Dr. David A. Kunz&lt;/a&gt; - I got more ideas from &lt;a href=&#34;https://github.com/David-Kunz/gen.nvim&#34;&gt;gen.nvim&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vhdl-linter/vhdl-linter</title>
    <updated>2023-10-19T01:27:06Z</updated>
    <id>tag:github.com,2023-10-19:/vhdl-linter/vhdl-linter</id>
    <link href="https://github.com/vhdl-linter/vhdl-linter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vhdl-linter&lt;/h1&gt; &#xA;&lt;p&gt;Introducing the open-source VHDL Linter, written in TypeScript and thoroughly unit-tested for maximum reliability. Our linter is the perfect tool for checking your VHDL code for errors and ensuring that it adheres to coding standards. With its advanced analysis engine, written in TypeScript, the VHDL Linter can quickly and easily identify any issues in your code, such as syntax errors or suboptimal coding practices. Plus, our extensive unit testing ensures that the linter is reliable and accurate, so you can trust the results it provides. Try the VHDL Linter today and see the difference it can make in your design process.&lt;/p&gt; &#xA;&lt;p&gt;(written by ChatGPT)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/vhdl-linter/vhdl-linter/actions/workflows/node.js.yml/badge.svg?branch=main&#34; alt=&#34;Node CI&#34;&gt; &lt;img src=&#34;https://github.com/vhdl-linter/vhdl-linter/actions/workflows/vunit_compile.yml/badge.svg?branch=main&#34; alt=&#34;VUnit Compile&#34;&gt; &lt;img src=&#34;https://github.com/vhdl-linter/vhdl-linter/actions/workflows/tslint.yml/badge.svg?branch=main&#34; alt=&#34;TS Lint&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;vhdl-linter&lt;/code&gt; can be used as a cli executable or as a VS Code extension.&lt;/p&gt; &#xA;&lt;h2&gt;Stand alone command line executable&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g @vhdl-linter/vhdl-linter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This provides the &lt;code&gt;vhdl-linter&lt;/code&gt; executable which can be used to lint one folder from the command line (e.g. for CI).&lt;/p&gt; &#xA;&lt;h2&gt;Extension for VS Code&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press &lt;code&gt;Ctrl+P&lt;/code&gt; to open the VS Code Quick Open Dialog&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;ext install g0t00.vhdl-linter&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Rules and style settings can be configured with &lt;code&gt;vhdl-linter.yml&lt;/code&gt; configuration files which modifies the default settings:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vhdl-linter/vhdl-linter/main/doc/configuration-example.png&#34; alt=&#34;configuration-example&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features (list is still incomplete)&lt;/h1&gt; &#xA;&lt;h2&gt;Project wide rename support&lt;/h2&gt; &#xA;&lt;p&gt;Most identifier can be renamed with the project wide rename feature. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ports&lt;/li&gt; &#xA; &lt;li&gt;signals&lt;/li&gt; &#xA; &lt;li&gt;package names&lt;/li&gt; &#xA; &lt;li&gt;entity names&lt;/li&gt; &#xA; &lt;li&gt;project wide definitions in packages (types, functions, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vhdl-linter/vhdl-linter/main/doc/rename.gif&#34; alt=&#34;rename&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Signature Help&lt;/h2&gt; &#xA;&lt;p&gt;Show the signature of the object being instantiated. Currently working for instantiation of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;entities&lt;/li&gt; &#xA; &lt;li&gt;procedures&lt;/li&gt; &#xA; &lt;li&gt;components&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Signature help is not yet supported for calling of functions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vhdl-linter/vhdl-linter/main/doc/signature-help.png&#34; alt=&#34;signature-helper&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vhdl-linter/vhdl-linter/main/doc/signature-help2.png&#34; alt=&#34;signature-helper-long&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Region Folding&lt;/h2&gt; &#xA;&lt;p&gt;Fold regions according to the file content:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;declarations&lt;/li&gt; &#xA; &lt;li&gt;statements&lt;/li&gt; &#xA; &lt;li&gt;use clauses (incl. library)&lt;/li&gt; &#xA; &lt;li&gt;interface lists&lt;/li&gt; &#xA; &lt;li&gt;special blocks like instantiations, association lists, case (generate), types (record and protected)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Style checking&lt;/h2&gt; &#xA;&lt;p&gt;Checks custom naming styles:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vhdl-linter/vhdl-linter/main/doc/namingStyle.gif&#34; alt=&#34;namingStyle&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Entity Converter&lt;/h2&gt; &#xA;&lt;p&gt;Automatically convert entities to a commonly used template:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;instantiation&lt;/li&gt; &#xA; &lt;li&gt;component&lt;/li&gt; &#xA; &lt;li&gt;SystemVerilog instantiation&lt;/li&gt; &#xA; &lt;li&gt;ports to signals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vhdl-linter/vhdl-linter/main/doc/entityConverter.gif&#34; alt=&#34;entityConverter&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Target library inference&lt;/h2&gt; &#xA;&lt;p&gt;The target library of vhdl design units is parsed from &lt;a href=&#34;https://vunit.github.io/py/vunit.html#vunit.ui.VUnit.add_source_files_from_csv&#34;&gt;csv files like vunit&lt;/a&gt; in the format &lt;code&gt;libary,filename&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The library is used for auto completion, reference checking and template generation (e.g. instantiation template for entities)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nicferrier/elisp-process</title>
    <updated>2023-10-19T01:27:06Z</updated>
    <id>tag:github.com,2023-10-19:/nicferrier/elisp-process</id>
    <link href="https://github.com/nicferrier/elisp-process" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elisp process tools. Mainly this is tools for starting and stopping types of Emacs process.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;= Elisp Processes =&lt;/p&gt; &#xA;&lt;p&gt;Bits and pieces to start Emacs processes and run Lisp in them.&lt;/p&gt;</summary>
  </entry>
</feed>