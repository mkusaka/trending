<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-15T01:34:41Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Zilong-Li/org-tufte</title>
    <updated>2023-03-15T01:34:41Z</updated>
    <id>tag:github.com,2023-03-15:/Zilong-Li/org-tufte</id>
    <link href="https://github.com/Zilong-Li/org-tufte" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Export org file to beautiful Tufte html&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Org file to beautiful Tufte html with one command&lt;/p&gt; &#xA;&lt;p&gt;I really like the design of Edward Tufteâ€™s handouts. However, there is no single command for just exporting a org file to the Tufte-like html for lazy people like me or newbie who don&#39;t know too much about org mode setups. Although there is [[https://github.com/dakrone/ox-tufte][ox-tufte]] intending to do the job, it didn&#39;t solve that the org-exported html template is not totally compatible with the [[https://edwardtufte.github.io/tufte-css/][Tufte CSS]] and the generated page is not responsive on mobile device. Also, its configuration makes it hard to use for newbie. Based on my own taste, I added some nice features by tweaking the html template and curating my own CSS. see &lt;a href=&#34;https://zilongli.org/code/tufte.css&#34;&gt;https://zilongli.org/code/tufte.css&lt;/a&gt;, &lt;a href=&#34;https://zilongli.org/code/org.css&#34;&gt;https://zilongli.org/code/org.css&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modern responsive html page powered by curated CSS.&lt;/li&gt; &#xA; &lt;li&gt;one command =M-x export-org-tufte-html= just give me what I want&lt;/li&gt; &#xA; &lt;li&gt;use fast and powerful =katex= instead of =mathjax= to render math.&lt;/li&gt; &#xA; &lt;li&gt;nice source code display by using =et-book-ligatures= font&lt;/li&gt; &#xA; &lt;li&gt;just works without having any org options eg =#+html_head:=&lt;/li&gt; &#xA; &lt;li&gt;disable full-width figures in default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** manual&lt;/p&gt; &#xA;&lt;p&gt;Just fetch [[file:org-tufte.el]] and save it somewhere. Then load it&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;load-path &#34;/path/to/org-tufte&#34;) (require &#39;org-tufte) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** use-package&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package org-tufte :ensure nil :init (add-to-list &#39;load-path &#34;PATH*&#34;) :config (require &#39;org-tufte) (setq org-tufte-htmlize-code t) ) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I feel being distracted by too many colors when reading blogs. Although the highlight of code block is not enabled, you can get this feature by =(setq org-tufte-htmlize-code t)=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;see the [[https://zilongli.org/code/org-tufte-example.html][example]] page here and the [[https://zilongli.org/code/org-tufte-example.org][org]] file.&lt;/p&gt; &#xA;&lt;p&gt;[[file:example-1.jpg]] [[file:example-4.jpg]] [[file:example-3.jpg]] [[file:example-2.jpg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Credits some codes are copied from&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sulami/sulami.github.io/raw/develop/config.el&#34;&gt;https://github.com/sulami/sulami.github.io/blob/develop/config.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dakrone/ox-tufte&#34;&gt;https://github.com/dakrone/ox-tufte&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Wilfred/flymake-jshint.el</title>
    <updated>2023-03-15T01:34:41Z</updated>
    <id>tag:github.com,2023-03-15:/Wilfred/flymake-jshint.el</id>
    <link href="https://github.com/Wilfred/flymake-jshint.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JSHint with flymake for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flymake-jshint&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use JSHint with emacs, you will need JSHint installed and available on your path. You should be able to do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ jshint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;without problem. To do this, you can install node.js, npm and jshint by doing the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install nodejs # or your distro / OS equivalent&#xA;$ sudo npm install -g jshint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will probably want to configure the warnings that JSHint produces. The full list is at &lt;a href=&#34;http://www.jshint.com/options/&#34;&gt;http://www.jshint.com/options/&lt;/a&gt; but for reference I use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{ &#34;browser&#34;: true, //browser constants, such as alert&#xA;  &#34;curly&#34;: true, // require {} on one-line if&#xA;  &#34;undef&#34;: true, // non-globals must be declared before use&#xA;  &#34;newcap&#34;: true, // constructors must start with capital letter&#xA;  &#34;jquery&#34;: true, // jQuery constants&#xA;  &#34;nomen&#34;: false, // permit leading/trailing underscores, these do actually mean private in jQuery plugins&#xA;  &#34;nonew&#34;: true, // don&#39;t permit object creation for side-effects only&#xA;  &#34;strict&#34;: true // require &#34;use strict&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save this in a file called whatever.json and then set &lt;code&gt;jshint-configuration-path&lt;/code&gt; to point to it.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add to your emacs config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;flymake-jshint)&#xA;(add-hook &#39;js-mode-hook &#39;flymake-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;making sure that flymake-jshint.el is on your load-path. If not, also add to your config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/path/to/flymake-jshint.el&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If JSHint isn&#39;t working for any reason, execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x set-variable flymake-log-level &amp;lt;RET&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and you will see what is going wrong listed in the &lt;code&gt;*Messages*&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lunaryorn/flycheck&#34;&gt;https://github.com/lunaryorn/flycheck&lt;/a&gt; supports JSHint&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/illusori/emacs-flymake&#34;&gt;https://github.com/illusori/emacs-flymake&lt;/a&gt; is a fork of flymake that also supports JSHint (but does not support JSHint configuration)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purcell/flymake-jslint&#34;&gt;https://github.com/purcell/flymake-jslint&lt;/a&gt; will probably also work with JSHint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;v2.2 -- Reverted to creating temporary files in a temporary directory, to avoid problems with file watches (see issues #1 and #2).&lt;/p&gt; &#xA;&lt;p&gt;v2.1 -- We now create temporary files in the same directory as the source file, so jshint can see .jshintrc configuration files.&lt;/p&gt; &#xA;&lt;p&gt;v2.0 -- Updated usage instructions following the port to flymake-easy&lt;/p&gt; &#xA;&lt;p&gt;v1.3 -- Refactored to use flymake-easy&lt;/p&gt;</summary>
  </entry>
</feed>