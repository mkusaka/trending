<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-20T01:29:06Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-straight/track-changes</title>
    <updated>2024-05-20T01:29:06Z</updated>
    <id>tag:github.com,2024-05-20:/emacs-straight/track-changes</id>
    <link href="https://github.com/emacs-straight/track-changes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the track-changes package from GNU ELPA, current as of 2024-05-20&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>emacs-rustic/rustic</title>
    <updated>2024-05-20T01:29:06Z</updated>
    <id>tag:github.com,2024-05-20:/emacs-rustic/rustic</id>
    <link href="https://github.com/emacs-rustic/rustic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rustic&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/psibi/rustic/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/psibi/rustic/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--toc:start--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#rustic&#34;&gt;Rustic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#quelpa&#34;&gt;quelpa&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#straight&#34;&gt;straight&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#remote&#34;&gt;remote&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#compilation&#34;&gt;Compilation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#navigating-errors&#34;&gt;Navigating errors&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#default-directory&#34;&gt;default directory&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#faces&#34;&gt;Faces&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#rustc-errors&#34;&gt;rustc errors&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#rustfmt&#34;&gt;Rustfmt&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#change-default-arguments&#34;&gt;Change default arguments&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#edition-2018&#34;&gt;edition 2018&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#remote&#34;&gt;remote&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#tree-sitter&#34;&gt;Tree sitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#lsp&#34;&gt;LSP&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#server&#34;&gt;Server&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#automatic-server-installation&#34;&gt;Automatic server installation&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#client&#34;&gt;Client&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#lsp-execute-code-action&#34;&gt;&lt;code&gt;lsp-execute-code-action&lt;/code&gt;&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#applying-code-actions&#34;&gt;Applying code actions&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#auto-import&#34;&gt;Auto import&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#macro-expansion&#34;&gt;Macro expansion&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#lsp-tramp&#34;&gt;LSP + TRAMP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#detached-file&#34;&gt;Detached file&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#cargo&#34;&gt;Cargo&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#edit&#34;&gt;Edit&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#run&#34;&gt;Run&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#outdated&#34;&gt;Outdated&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#expand&#34;&gt;Expand&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#spellcheck&#34;&gt;Spellcheck&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#more-cargo-commands&#34;&gt;More cargo commands&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#clippy&#34;&gt;Clippy&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#auto-fixing-before-compilation&#34;&gt;auto-fixing before compilation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#flycheck&#34;&gt;Flycheck&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#org-babel&#34;&gt;Org-babel&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#parameters&#34;&gt;Parameters&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#crates&#34;&gt;:crates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#features&#34;&gt;:features&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#paths&#34;&gt;:paths&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#toolchain&#34;&gt;:toolchain&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#main&#34;&gt;:main&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#include&#34;&gt;:include&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#use&#34;&gt;:use&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#envrc&#34;&gt;envrc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#spinner&#34;&gt;Spinner&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#rust-docs-in-org-mode&#34;&gt;rust docs in org-mode&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#popup&#34;&gt;Popup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#rust-mode&#34;&gt;rust-mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#elisp-tests&#34;&gt;elisp tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--toc:end--&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;This is a fork of &lt;a href=&#34;https://github.com/brotzeit/rustic&#34;&gt;rustic&lt;/a&gt; mode which is maintained. For more details, &lt;a href=&#34;https://github.com/brotzeit/rustic/pull/551#issuecomment-1959124829&#34;&gt;see here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This package is based on &lt;a href=&#34;https://github.com/rust-lang/rust-mode&#34;&gt;rust-mode&lt;/a&gt; and provides additional features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cargo popup&lt;/li&gt; &#xA; &lt;li&gt;multiline error parsing&lt;/li&gt; &#xA; &lt;li&gt;translation of ANSI control sequences through &lt;a href=&#34;https://github.com/atomontage/xterm-color&#34;&gt;xterm-color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;async org babel&lt;/li&gt; &#xA; &lt;li&gt;automatic LSP configuration with &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; or &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cask for testing&lt;/li&gt; &#xA; &lt;li&gt;etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;rustic only shares the rust-mode code from rust-mode.el and rust-utils.el. The other files provide functionality that is similar to some of the features of rustic, however can be considered light-weight compared to some rustic&#39;s functionality.&lt;/p&gt; &#xA;&lt;p&gt;The shared functions and options exist as aliases in the rust-mode and rustic namespace for backwards compatibility reasons(rustic has been a fork).&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-syntax-propertize&lt;/code&gt; and &lt;code&gt;adaptive-wrap-prefix-mode&lt;/code&gt; can lead to severe lag when editing larger files (#107)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First, you may need to install &lt;code&gt;rust-analyzer&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/#automatic-server-installation&#34;&gt;Automatic server installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you can&#39;t run rust-analyzer or cargo can&#39;t be found, your environment variables probably don&#39;t work in emacs. Try &lt;a href=&#34;https://github.com/purcell/exec-path-from-shell/tree/81125c5adbc903943c016c2984906dc089372a41#usage&#34;&gt;exec-path-from-shell&lt;/a&gt; to fix this.&lt;/p&gt; &#xA;&lt;h3&gt;quelpa&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;))&#xA;(package-initialize)&#xA;(package-refresh-contents)&#xA;&#xA;(use-package quelpa-use-package&#xA;  :ensure t)&#xA;&#xA;(use-package rustic&#xA;  :quelpa (rustic :fetcher github&#xA;                  :repo &#34;emacs-rustic/rustic&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If ‘spinner-1.7.3’ is unavailable” when trying to install rustic, you need to update GPG keys used by the ELPA package manager. Try installing &lt;a href=&#34;https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html&#34;&gt;gnu-elpa-keyring-update&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;straight&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raxod502/straight.el#install-packages&#34;&gt;straight.el&lt;/a&gt; clones each of your packages directly from its source. There are good additional &lt;a href=&#34;https://github.crookster.org/switching-to-straight.el-from-emacs-26-builtin-package.el/&#34;&gt;installation instructions&lt;/a&gt; for moving your package management from package.el to straight.&lt;/p&gt; &#xA;&lt;h2&gt;remote&lt;/h2&gt; &#xA;&lt;p&gt;rustfmt and most of the common cargo commands should work remotely. We are currently updating the code base. If you encounter any command that doesn&#39;t work remotely, please open an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/compilation_buffer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to use a Makefile you can either use &lt;code&gt;(setq rustic-compile-command &#34;make&#34;)&lt;/code&gt; or run &lt;code&gt;C-u&lt;/code&gt; + &lt;code&gt;rustic-compile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile&lt;/code&gt; compile project using &lt;code&gt;rustic-compile-command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-recompile&lt;/code&gt; recompile using &lt;code&gt;compilation-arguments&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-send-input&lt;/code&gt; send string to process of current buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-display-method&lt;/code&gt; choose function that displays the compilation buffer (use the function &lt;code&gt;ignore&lt;/code&gt;, if you don&#39;t want the buffer to be displayed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-backtrace&lt;/code&gt; change backtrace verbosity&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-rustflags&lt;/code&gt; set RUSTFLAGS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-command&lt;/code&gt; default command for rust compilation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-command-remote&lt;/code&gt; default command for remote rust compilation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported compile.el variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;compilation-arguments&lt;/li&gt; &#xA; &lt;li&gt;compilation-scroll-output (possible values are &lt;code&gt;t&lt;/code&gt; for automatic scrolling and &lt;code&gt;first-error&lt;/code&gt; to scroll to first error)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Navigating errors&lt;/h3&gt; &#xA;&lt;p&gt;Rustic defines a derived compilation-mode. Colors can be customized with several defcustoms. You can use &lt;code&gt;next-error&lt;/code&gt; and &lt;code&gt;compilation-next-error&lt;/code&gt; as for any other compilation buffer.&lt;/p&gt; &#xA;&lt;p&gt;However it&#39;s possible to also jump to line numbers that are displayed at the beginning of a line. This feature is provided by a hook around &lt;code&gt;compile-goto-error&lt;/code&gt;(&lt;code&gt;RET&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;default directory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-compile-directory-method&lt;/code&gt; allows you to set the directory that is used for compilation commands. The default is the current crate which is returned by &lt;code&gt;rustic-buffer-crate&lt;/code&gt;(there&#39;s also &lt;code&gt;rustic-buffer-workspace&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the project root you can use &lt;code&gt;rustic-project-root&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;FTR #174 #179 #236&lt;/p&gt; &#xA;&lt;h3&gt;Faces&lt;/h3&gt; &#xA;&lt;p&gt;The colors that are displayed in compilation buffers come from cargo and are translated by xterm-color. You can change these colors by modifying &lt;code&gt;rustic-ansi-faces&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-compilation-mode&lt;/code&gt; doesn&#39;t use the default faces of compile.el. If you want to change these colors you can use something similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(custom-set-faces&#xA;  &#39;(rustic-compilation-column ((t (:inherit compilation-column-number))))&#xA;  &#39;(rustic-compilation-line ((t (:foreground &#34;LimeGreen&#34;)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional faces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-message&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compilation-error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compilation-warning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compilation-info&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;rustc errors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/rustc_errno.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Rustfmt&lt;/h2&gt; &#xA;&lt;p&gt;Ensure rustfmt is installed by running &lt;code&gt;rustup component add rustfmt-preview&lt;/code&gt; in your project&#39;s directory.&lt;/p&gt; &#xA;&lt;p&gt;You can format your code with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-buffer&lt;/code&gt; format buffer with stdin&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-file&lt;/code&gt; format file and revert buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-fmt&lt;/code&gt; run cargo-fmt on workspace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-region&lt;/code&gt; format active region&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-dwim&lt;/code&gt; run format on region,file or cargo fmt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rustic uses the function &lt;code&gt;rustic-save-some-buffers&lt;/code&gt; for saving buffers before compilation.&lt;/p&gt; &#xA;&lt;p&gt;To save buffers automatically, you can change the value of &lt;code&gt;compilation-ask-about-save&lt;/code&gt;, it has higher precedence than &lt;code&gt;buffer-save-without-query&lt;/code&gt; when compiling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun rustic-mode-auto-save-hook ()&#xA;  &#34;Enable auto-saving in rustic-mode buffers.&#34;&#xA;  (when buffer-file-name&#xA;    (setq-local compilation-ask-about-save nil)))&#xA;(add-hook &#39;rustic-mode-hook &#39;rustic-mode-auto-save-hook)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-rustfmt-bin&lt;/code&gt; path to rustfmt executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-rustfmt-bin-remote&lt;/code&gt; default path to remote rustfmt executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-rustfmt-args&lt;/code&gt; additional args like +nightly&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-rustfmt-config-alist&lt;/code&gt; alist of rustfmt configuration options&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-display-method&lt;/code&gt; default function used for displaying rustfmt buffer (use the function &lt;code&gt;ignore&lt;/code&gt;, if you don&#39;t want the buffer to be displayed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-on-save-method&lt;/code&gt; function to use for on-save formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-format-trigger&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;on-save&lt;/code&gt; format buffer before saving&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;on-compile&lt;/code&gt; run &#39;cargo fmt&#39; before compilation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;nil&lt;/code&gt; don&#39;t format automatically&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-use-rust-save-some-buffers&lt;/code&gt; turn on to use automatic formatting for &lt;code&gt;save-some-buffers&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;known issues:&lt;/p&gt; &#xA;&lt;p&gt;in case you are using hideshow you might want to set &lt;code&gt;rustic-format-on-save-method&lt;/code&gt; to &lt;code&gt;rustic-format-buffer&lt;/code&gt;(#274)&lt;/p&gt; &#xA;&lt;h3&gt;Change default arguments&lt;/h3&gt; &#xA;&lt;p&gt;If you want to configure the following rustfmt call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rustfmt +nightly --config hard_tabs=true --config skip_children=false main.rs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq rustic-rustfmt-args &#34;+nightly&#34;)&#xA;(setq rustic-rustfmt-config-alist &#39;((hard_tabs . t) (skip_children . nil)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;edition 2018&lt;/h3&gt; &#xA;&lt;p&gt;If you are struggling with errors relating to the Rust edition in &lt;code&gt;Cargo.toml&lt;/code&gt;, this may in fact be a problem with &lt;code&gt;rustfmt&lt;/code&gt; and its default settings. To solve this, &lt;em&gt;even though the error message mentions &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/em&gt;, you have to put &lt;code&gt;edition = &#34;2018&#34;&lt;/code&gt; in a &lt;code&gt;rustfmt.toml&lt;/code&gt;. &lt;a href=&#34;https://github.com/rust-lang/rustfmt/issues/4454&#34;&gt;See here for more info&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;remote&lt;/h3&gt; &#xA;&lt;p&gt;Currently only &lt;code&gt;rustic-format-buffer&lt;/code&gt; works remotely.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-rustfmt-bin&lt;/code&gt; needs to be an absolute path to work remotely.&lt;/p&gt; &#xA;&lt;h2&gt;Tree sitter&lt;/h2&gt; &#xA;&lt;p&gt;For using tree sitter integration, make sure to enable tree sitter in rust-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package rust-mode&#xA;  :ensure t&#xA;  :init&#xA;  (setq rust-mode-treesitter-derive t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LSP&lt;/h2&gt; &#xA;&lt;p&gt;Disable &lt;code&gt;rustic-lsp-setup-p&lt;/code&gt; to turn off automatic LSP configuration. If you want to turn off LSP temporarily you can set &lt;code&gt;rustic-lsp-client&lt;/code&gt; to nil. You have to restart emacs when you switch lsp clients.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget that rustic doesn&#39;t contain the code for interacting with lsp servers. Therefore most issues are not related to rustic, but to the lsp client or server you are using.&lt;/p&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;rust-analyzer is the default and can be changed to rls if required (Note that rls is deprecated and is slated to be removed). lsp-mode related code was moved to the lsp-mode repo. &lt;code&gt;rustic-lsp-server&lt;/code&gt; sets the value of &lt;code&gt;lsp-rust-server&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Change rust-analyzer path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq rustic-analyzer-command &#39;(&#34;~/.cargo/bin/rust-analyzer&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using rustup to &lt;a href=&#34;https://rust-analyzer.github.io/manual.html#rustup&#34;&gt;manage your rust-analyzer&lt;/a&gt;, you would have to configure like this to make it work with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package rustic&#xA;  :custom&#xA;  (rustic-analyzer-command &#39;(&#34;rustup&#34; &#34;run&#34; &#34;stable&#34; &#34;rust-analyzer&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Automatic server installation&lt;/h4&gt; &#xA;&lt;p&gt;lsp-mode provides this feature, but eglot doesn&#39;t &lt;a href=&#34;https://github.com/brotzeit/rustic/issues/403&#34;&gt;#403&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://rust-analyzer.github.io/manual.html#installation&#34;&gt;rust-analyzer manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;The default package is &lt;code&gt;lsp-mode&lt;/code&gt;. But you can also use &lt;code&gt;eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq rustic-lsp-client &#39;eglot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LSP commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;xref-find-definitions&lt;/code&gt; find definitions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xref-find-references&lt;/code&gt; with helm and rust-analyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-add-missing-dependencies&lt;/code&gt; convenient command that adds missing dependencies to a crate&#39;s Cargo.toml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/xref_references.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;eglot&lt;/h4&gt; &#xA;&lt;p&gt;Turn off flymake.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;eglot--managed-mode-hook (lambda () (flymake-mode -1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;lsp-mode&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-describe-thing-at-point&lt;/code&gt; display documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-find-definition&lt;/code&gt; makes use of xref&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find more information in the &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/&#34;&gt;lsp-mode documentation for Rust&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;lsp-execute-code-action&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This command can be extremely convenient when applying code actions or using auto-imports.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;lsp-execute-code-action&lt;/code&gt; when lsp-ui displays code actions at the top of the sideline.&lt;/p&gt; &#xA;&lt;h6&gt;Applying code actions&lt;/h6&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/code_actions.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h6&gt;Auto import&lt;/h6&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/auto_import.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Macro expansion&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp-rust-analyzer-expand-macro&lt;/code&gt; expand macro call at point recursively.&lt;/p&gt; &#xA;&lt;p&gt;The results are formatted and highlighted by default, but you can use your own function by customizing &lt;code&gt;lsp-rust-analyzer-macro-expansion-method&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/macro_expansion.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;LSP + TRAMP&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-analyzer&lt;/code&gt; does work over TRAMP, but you have to register the client manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(with-eval-after-load &#34;lsp-rust&#34;&#xA; (lsp-register-client&#xA;  (make-lsp-client&#xA;   :new-connection (lsp-stdio-connection&#xA;                    (lambda ()&#xA;                      `(,(or (executable-find&#xA;                              (cl-first lsp-rust-analyzer-server-command))&#xA;                             (lsp-package-path &#39;rust-analyzer)&#xA;                             &#34;rust-analyzer&#34;)&#xA;                        ,@(cl-rest lsp-rust-analyzer-server-args))))&#xA;   :remote? t&#xA;   :major-modes &#39;(rust-mode rustic-mode)&#xA;   :initialization-options &#39;lsp-rust-analyzer--make-init-options&#xA;   :notification-handlers (ht&amp;lt;-alist lsp-rust-notification-handlers)&#xA;   :action-handlers (ht (&#34;rust-analyzer.runSingle&#34; #&#39;lsp-rust--analyzer-run-single))&#xA;   :library-folders-fn (lambda (_workspace) lsp-rust-library-directories)&#xA;   :after-open-fn (lambda ()&#xA;                    (when lsp-rust-analyzer-server-display-inlay-hints&#xA;                      (lsp-rust-analyzer-inlay-hints-mode)))&#xA;   :ignore-messages nil&#xA;   :server-id &#39;rust-analyzer-remote)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(based on &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/raw/68fddd5d9c5506b2adf6a3f67bbe568f44563dd4/clients/lsp-rust.el#L644&#34;&gt;https://github.com/emacs-lsp/lsp-mode/blob/68fddd5d9c5506b2adf6a3f67bbe568f44563dd4/clients/lsp-rust.el#L644&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have Emacs 28, due to some &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/issues/2514#issuecomment-759452037&#34;&gt;compatibility issues&lt;/a&gt;, you might have to additionally use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun start-file-process-shell-command@around (start-file-process-shell-command name buffer &amp;amp;rest args)&#xA;  &#34;Start a program in a subprocess.  Return the process object for it. Similar to `start-process-shell-command&#39;, but calls `start-file-process&#39;.&#34;&#xA;  ;; On remote hosts, the local `shell-file-name&#39; might be useless.&#xA;  (let ((command (mapconcat &#39;identity args &#34; &#34;)))&#xA;    (funcall start-file-process-shell-command name buffer command)))&#xA;&#xA;(advice-add &#39;start-file-process-shell-command :around #&#39;start-file-process-shell-command@around)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(thanks to &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/issues/2514#issuecomment-759452037&#34;&gt;https://github.com/emacs-lsp/lsp-mode/issues/2514#issuecomment-759452037&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll have to have &lt;code&gt;rust-analyzer&lt;/code&gt; already installed on the target machine.&lt;/p&gt; &#xA;&lt;h3&gt;Detached file&lt;/h3&gt; &#xA;&lt;p&gt;This is an early experimental feature, and is disabled by default.&lt;/p&gt; &#xA;&lt;p&gt;Source files not belonging to any crate, or &lt;em&gt;detached&lt;/em&gt; source files, are supported by rust-analyzer, and this feature can be enabled via &lt;code&gt;rustic-enable-detached-file-support&lt;/code&gt;. (Currently, only eglot is supported.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: Due to some current limitations, you should avoid opening a detached file in a large directory with this feature enabled.&lt;/p&gt; &#xA;&lt;h2&gt;Cargo&lt;/h2&gt; &#xA;&lt;p&gt;Since the cargo commands also use the derived compilation mode, you can use the commands that are mentioned in the &#34;compilation&#34; section.&lt;/p&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-bin&lt;/code&gt; Path to cargo executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-bin-remote&lt;/code&gt; Path to remote cargo executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-build-arguments&lt;/code&gt; default arguments for cargo build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-check-arguments&lt;/code&gt; default arguments for cargo check&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-auto-add-missing-dependencies&lt;/code&gt; automatically add missing dependencies to Cargo.toml by checking new diagnostics for &#39;unresolved import&#39; errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-use-last-stored-arguments&lt;/code&gt; always use stored arguments that were provided with &lt;code&gt;C-u&lt;/code&gt;(instead of requiring to run rustic &#34;rerun&#34; commands)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Edit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/killercup/cargo-edit&#34;&gt;cargo-edit&lt;/a&gt; provides commands to edit your dependencies quickly.&lt;/p&gt; &#xA;&lt;p&gt;The rustic commands can be called with prefix &lt;code&gt;C-u&lt;/code&gt; if you want to modify the parameters of a command.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-add&lt;/code&gt; Add crate to Cargo.toml using &#39;cargo add&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-rm&lt;/code&gt; Remove crate from Cargo.toml using &#39;cargo rm&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-upgrade&lt;/code&gt; Upgrade dependencies as specified in the local manifest file using &#39;cargo upgrade&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-add-missing-dependencies&lt;/code&gt; Add the missing dependencies for the current buffer to &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;p&gt;If you want to disable warnings when running cargo-test commands, you can set &lt;code&gt;(setq rustic-cargo-test-disable-warnings t)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-cargo-nextest-exec-command&lt;/code&gt; command for running &lt;a href=&#34;https://github.com/nextest-rs/nextest&#34;&gt;nextest&lt;/a&gt; &lt;code&gt;rustic-cargo-test&lt;/code&gt; run &#39;cargo test&#39;, when called with &lt;code&gt;C-u&lt;/code&gt; store arguments in &lt;code&gt;rustic-test-arguments&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-cargo-test-rerun&lt;/code&gt; rerun &#39;cargo test&#39; with arguments stored in &lt;code&gt;rustic-test-arguments&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rustic-cargo-current-test&lt;/code&gt; run test at point, whether it&#39;s a function or a module&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/cargo_current_test.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;Based on the usecase, we provide three variants of it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is meant for non interactive programs. It&#39;s creates a new mode which is built on top of &lt;code&gt;rustic-compilation-mode&lt;/code&gt;. You can press &lt;code&gt;g&lt;/code&gt; in this mode&#39;s buffer to make it re-run.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-comint-run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is meant for both interactive and non interactive programs. For non interactive programs, you would need to pass data to it via stdin. It&#39;s creates a new mode which is built on top of &lt;code&gt;comint-mode&lt;/code&gt;. You can press &lt;code&gt;C-c C-g&lt;/code&gt; in this mode&#39;s buffer to make it re-run. You can pass input to the program directly in it&#39;s output buffer and press &lt;code&gt;RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-plain-run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is similar to the above &lt;code&gt;rustic-cargo-comint-run&lt;/code&gt;. Input can be sent to the program in one of two ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile-send-input&lt;/code&gt;, which reads the input from the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-run-use-comint&lt;/code&gt;: when this variable is set to t, the input can be typed directly into the output buffer of &#39;cargo run&#39; and sent off with &lt;code&gt;RET&lt;/code&gt;, just like in &lt;code&gt;comint-mode&lt;/code&gt;. You need &lt;a href=&#34;https://polymode.github.io&#34;&gt;polymode&lt;/a&gt; installed for this to work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Outdated&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;rustic-cargo-outdated&lt;/code&gt; to get a list of dependencies that are out of date. The results are displayed in &lt;code&gt;tabulated-list-mode&lt;/code&gt; and you can use most commands you know from the emacs package menu. This option requires the rust package &lt;code&gt;cargo-outdated&lt;/code&gt; to be installed before being used.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;u&lt;/code&gt; mark single crate for upgrade and prompt user for version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;U&lt;/code&gt; mark all upgradable crates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;l&lt;/code&gt; mark single crate for upgrading to latest version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;L&lt;/code&gt; mark all crates to latest version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;m&lt;/code&gt; remove mark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x&lt;/code&gt; perform marked package menu actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r&lt;/code&gt; refresh crate list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;q&lt;/code&gt; quit window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/outdated.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Expand&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dtolnay/cargo-expand&#34;&gt;cargo-expand&lt;/a&gt; provides the ability to expand macros. It also provides the ability to target a specific modules or a named item within a module (eg: &lt;code&gt;module::Type&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-expand&lt;/code&gt;: runs &lt;code&gt;cargo expand&lt;/code&gt;. You can also use universal argument to target a specific named item to expand.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Spellcheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/drahnr/cargo-spellcheck&#34;&gt;cargo spellcheck&lt;/a&gt; checks the documentation for spelling and grammar mistakes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-spellcheck&lt;/code&gt;: runs &lt;code&gt;cargo spellcheck&lt;/code&gt; and will open a buffer where you can go through the various errors pointed out by it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;More cargo commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-init&lt;/code&gt; run &#39;cargo init&#39; to initialize a directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-new&lt;/code&gt; use &#39;cargo new&#39; to create a new package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-bench&lt;/code&gt; run &#39;cargo bench&#39; for the current project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-build-doc&lt;/code&gt; build the documentation for the current project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-doc&lt;/code&gt; open the documentation for the current project in a browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-lints&lt;/code&gt; called with &lt;code&gt;rustic-lints-arguments&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-install&lt;/code&gt; run &#39;cargo install&#39; on the current package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-update&lt;/code&gt; run &lt;code&gt;cargo update&lt;/code&gt; on the current package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Clippy&lt;/h2&gt; &#xA;&lt;p&gt;Currently cargo does not display the correct installation command for some toolchains when clippy isn&#39;t installed. If you have problems try it with &lt;code&gt;rustup component add --toolchain nightly clippy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can change the parameters &lt;code&gt;rustic-default-clippy-arguments&lt;/code&gt; that default to &#34;--benches --tests --all-features&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;auto-fixing before compilation&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to run &#39;clippy --fix&#39; automatically when starting a compile process by setting &lt;code&gt;rustic-cargo-clippy-trigger-fix&lt;/code&gt; to &lt;code&gt;&#39;on-compile&lt;/code&gt;. You can also use &lt;code&gt;&#39;on-save&lt;/code&gt;, but this doesn&#39;t work in combination with automatic formatting.&lt;/p&gt; &#xA;&lt;p&gt;This feature can be used in combination with auto-formatting.&lt;/p&gt; &#xA;&lt;p&gt;Works for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-compile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-recompile&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-clippy&lt;/code&gt; to view the results in a derived compilation mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-cargo-clippy-fix&lt;/code&gt; run &#39;clippy fix&#39; using &lt;code&gt;rustic-cargo-clippy-fix-args&lt;/code&gt; the default value is &#34;--allow-dirty&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Flycheck&lt;/h3&gt; &#xA;&lt;p&gt;In case you want to use clippy with flycheck but without LSP, you can activate this checker and use the command &lt;code&gt;flycheck-list-errors&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(push &#39;rustic-clippy flycheck-checkers)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turn off flycheck.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(remove-hook &#39;rustic-mode-hook &#39;flycheck-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The checker automatically detects the active toolchain and applies the correct parameters. You can set a default value for both stable and nightly toolchains. These are the default values.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-flycheck-clippy-params-stable&lt;/code&gt; &#34;--message-format=json&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-flycheck-clippy-params-nightly&lt;/code&gt; &#34;--message-format=json -Zunstable-options&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;lsp-mode&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;lsp-mode&lt;/code&gt; with rust-analyzer, you can set &lt;code&gt;lsp-rust-analyzer-cargo-watch-command&lt;/code&gt; to clippy instead of activating the checker &lt;code&gt;rustic-clippy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Org-babel&lt;/h2&gt; &#xA;&lt;h3&gt;Intro&lt;/h3&gt; &#xA;&lt;p&gt;Blocks run asynchronously and a running babel process is indicated by a spinner in the mode-line. It&#39;s possible to use crates in babel blocks. Execute babel block with &lt;code&gt;org-babel-execute-src-block&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supported org babel parameters:&lt;/p&gt; &#xA;&lt;p&gt;Write to file &lt;code&gt;:results file :file ~/babel-output&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-format-src-block&lt;/code&gt; format block after successful build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-display-compilation-buffer&lt;/code&gt; display compilation buffer of babel process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-auto-wrap-main&lt;/code&gt; wrap body into main function&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-default-toolchain&lt;/code&gt; active toolchain for babel blocks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;lsp-mode&lt;/h3&gt; &#xA;&lt;p&gt;You can use lsp in babel blocks with &lt;code&gt;lsp-org&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-format-block&lt;/code&gt; format block at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-header-insert-crates&lt;/code&gt; include missing dependencies in &lt;code&gt;:crates&lt;/code&gt; header arg&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-visit-project&lt;/code&gt; find generated project of block at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-babel-clippy&lt;/code&gt; run clippy on block(currently doesn&#39;t honor babel params, you can open a feature request if you miss it)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;h4&gt;:crates&lt;/h4&gt; &#xA;&lt;p&gt;This block shows how to use crates with the latest version for both serde and regex.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;*&#34; will be added automatically for serde.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC rust :crates &#39;(serde (regex . *))&#xA;  extern crate regex;&#xA;  extern crate serde;&#xA;  use regex::Regex;&#xA;&#xA;  fn main() {&#xA;      let re = Regex::new(r&#34;^\d{4}-\d{2}-\d{2}$&#34;).unwrap();&#xA;      assert!(re.is_match(&#34;2014-01-01&#34;));&#xA;  }&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:features&lt;/h4&gt; &#xA;&lt;p&gt;If specific crate features are required then these can be specified with the &lt;code&gt;:features&lt;/code&gt; argument. Note that if it is just a single feature then a string, instead of a list, will also be accepted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC rust :crates &#39;((tokio . 1.0)) :features &#39;((tokio . (&#34;rt-multi-thread&#34; &#34;time&#34;)))&#xA;  extern crate tokio;&#xA;&#xA;  fn main() {&#xA;      tokio::runtime::Runtime::new()&#xA;          .unwrap()&#xA;          .block_on(async {&#xA;              tokio::time::sleep(tokio::time::Duration::from_millis(10)).await;&#xA;          });&#xA;  }&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:paths&lt;/h4&gt; &#xA;&lt;p&gt;Similarly, to depend on local Rust crates, you can set the &lt;code&gt;:paths&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC rust :crates &#39;((foo . 1.0)) :paths &#39;((foo . &#34;/home/you/code/foo&#34;))&#xA;  use foo::Foo;&#xA;&#xA;  fn main() {&#xA;    // Your code.&#xA;  }&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:toolchain&lt;/h4&gt; &#xA;&lt;p&gt;You can specify the &lt;code&gt;:toolchain&lt;/code&gt; by quoted &lt;code&gt;&#39;stable&lt;/code&gt;/&lt;code&gt;&#39;nightly&lt;/code&gt;/&lt;code&gt;&#39;beta&lt;/code&gt;, or specify a &lt;a href=&#34;https://rust-lang.github.io/rustup/concepts/toolchains.html&#34;&gt;toolchain version&lt;/a&gt; like &lt;code&gt;&#34;1.63.0&#34;&lt;/code&gt;, &lt;code&gt;&#34;nightly-2022-08-08&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+begin_src rust :toolchain &#39;nightly&#xA;fn main() {&#xA;    let foo: String = vec![&#34;a&#34;, &#34;b&#34;, &#34;c&#34;].into_iter().intersperse(&#34;,&#34;).collect();&#xA;&#xA;    println!(&#34;{}&#34;, foo);&#xA;}&#xA;#+end_src&#xA;&#xA;#+RESULTS:&#xA;: a,b,c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:main&lt;/h4&gt; &#xA;&lt;p&gt;Auto wrap whole block body in a &lt;code&gt;fn main&lt;/code&gt; function call if none exists.&lt;/p&gt; &#xA;&lt;p&gt;Since this is very handy in most code snippets, so the default value is &lt;code&gt;yes&lt;/code&gt;. &lt;code&gt;no&lt;/code&gt; if you don&#39;t want this feature(for example, you don&#39;t want regex search slow things down).&lt;/p&gt; &#xA;&lt;p&gt;You can also set a default value by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; By setq this default to `nil`, you&#39;ll have to explict set params to &#34;:main yes&#34; in each block&#xA;(setq rustic-babel-auto-wrap-main nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+begin_src rust :main yes&#xA;let x = vec![1, 2, 3].iter().map(|&amp;amp;x| x + 1).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();&#xA;println!(&#34;{:?}&#34;, x);&#xA;#+end_src&#xA;&#xA;#+results:&#xA;: [2, 3, 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:include&lt;/h4&gt; &#xA;&lt;p&gt;This parameter allows you to run code that is located in different babel blocks by using named blocks with the &lt;code&gt;:include&lt;/code&gt; keyword. This feature only concats the blocks so you don&#39;t need to import the code you want to use.&lt;/p&gt; &#xA;&lt;p&gt;You can still use &lt;code&gt;:main&lt;/code&gt; to wrap the code of the main block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+name: b1&#xA;#+begin_src rust&#xA;pub fn b1_func() -&amp;gt; String {&#xA;    String::from(&#34;b1 function called&#34;)&#xA;}&#xA;#+end_src&#xA;&#xA;#+name: b2&#xA;#+begin_src rust&#xA;pub fn b2_func() -&amp;gt; String {&#xA;    String::from(&#34;b2 function called&#34;)&#xA;}&#xA;#+end_src&#xA;&#xA;#+begin_src rust :include &#39;(b1 b2)&#xA;  fn main() {&#xA;      println!(&#34;{:?}&#34;, b1_func());&#xA;      println!(&#34;{:?}&#34;, b2_func());&#xA;  }&#xA;#+end_src&#xA;&#xA;#+RESULTS:&#xA;: &#34;b1 function called&#34;&#xA;: &#34;b2 function called&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;:use&lt;/h4&gt; &#xA;&lt;p&gt;When using this keyword blocks are treated as modules. The files are generated automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+name: mymodule&#xA;#+begin_src rust&#xA;pub fn myfunc() -&amp;gt; String {&#xA;    String::from(&#34;mymodule function called&#34;)&#xA;}&#xA;#+end_src&#xA;&#xA;#+begin_src rust :use &#39;(mymodule)&#xA;use mymodule::myfunc;&#xA;&#xA;fn main() {&#xA;    println!(&#34;{:?}&#34;, myfunc());&#xA;}&#xA;#+end_src&#xA;&#xA;#+RESULTS:&#xA;: &#34;mymodule function called&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;envrc&lt;/h2&gt; &#xA;&lt;p&gt;To load your Rust toolchain via &lt;a href=&#34;https://github.com/purcell/envrc&#34;&gt;envrc&lt;/a&gt;, ensure that the &lt;a href=&#34;https://github.com/purcell/inheritenv&#34;&gt;inheritenv&lt;/a&gt; package is available before loading rustic, so that auxiliary rustic buffers acquire the correct environment to find the toolchain.&lt;/p&gt; &#xA;&lt;h2&gt;Spinner&lt;/h2&gt; &#xA;&lt;p&gt;In case you want to use a different spinner type you can modify &lt;code&gt;rustic-spinner-type&lt;/code&gt; or turn it off completely with &lt;code&gt;rustic-display-spinner&lt;/code&gt;.(&lt;a href=&#34;https://github.com/Malabarba/spinner.el/raw/master/spinner.el#L104&#34;&gt;Available spinner types&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;rust docs in org-mode&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to read rust documentation inside Emacs! This currently requires LSP-mode and cargo. Unfortunately, this probably won&#39;t work on Windows. &lt;img src=&#34;https://raw.githubusercontent.com/emacs-rustic/rustic/main/img/rustic-doc.png&#34; alt=&#34;Rustic-doc example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pandoc.org/installing.html&#34;&gt;pandoc&lt;/a&gt; preferably at least version 2.11, as it will give somewhat nicer generated documentation. Versions older than 2.9 may not work - if you&#39;re on a debian based distro installing through your regular repo might not work out.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/cargo/getting-started/installation.html&#34;&gt;cargo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bunogi/cargo-makedocs&#34;&gt;cargo-makedocs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd-find&lt;/a&gt; Old versions, especially before 2.x, may not work. Install through Cargo if you&#39;re having issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacsorphanage/helm-ag&#34;&gt;helm-ag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;ripgrep&lt;/code&gt; and &lt;code&gt;helm-ag&lt;/code&gt; are optional but highly recommended.&lt;/p&gt; &#xA;&lt;p&gt;If only ripgrep is installed, it will be used with the emacs &lt;code&gt;grep&lt;/code&gt; command. In case neither is available, the emacs &lt;code&gt;grep&lt;/code&gt; command will use &lt;code&gt;grep&lt;/code&gt;, like in the good old days.&lt;/p&gt; &#xA;&lt;p&gt;When a required cargo package is missing you will be asked if you want to install them when running rustic-doc-setup.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable &lt;code&gt;rustic-doc-mode&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rustic-doc-setup&lt;/code&gt; to download files that rustic-doc needs to convert rust documentation and also convert &lt;code&gt;std&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can now convert package-specific documentation with &lt;code&gt;rustic-doc-convert-current-package&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search the org files with &lt;code&gt;rustic-doc-search&lt;/code&gt; (bound to &lt;code&gt;C-#&lt;/code&gt; by default) if you are in &lt;code&gt;Rust mode&lt;/code&gt;, &lt;code&gt;Rustic mode&lt;/code&gt; or &lt;code&gt;Org mode&lt;/code&gt;. If you hover over a symbol when you invoke the command, &lt;code&gt;rustic-doc-search&lt;/code&gt; will insert a default value.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;universal argument&lt;/code&gt; to only search for level 1 headers like struct or enum names.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can change the defaults by modifying&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-doc-rg-search-command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-doc-search-function&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You should re-run &lt;code&gt;rustic-doc-setup&lt;/code&gt; once in a while, to update the pandoc filter.&lt;/li&gt; &#xA; &lt;li&gt;If rustic-doc does not find the documentation for something, the first thing to do is check the project&#39;s &lt;code&gt;target/doc&lt;/code&gt; folder for the corresponding &lt;code&gt;.html-file&lt;/code&gt;. If there is no file there, there is nothing for rustic-doc to convert. If there is a file there, please create an issue!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Popup&lt;/h2&gt; &#xA;&lt;p&gt;You can execute commands with &lt;code&gt;rustic-popup&lt;/code&gt;(call it with optional argument &lt;code&gt;C-u&lt;/code&gt; to choose a directory). The list of commands can be customized with &lt;code&gt;rustic-popup-commands&lt;/code&gt;. The command &lt;code&gt;rustic-popup-default-action&lt;/code&gt; (&lt;code&gt;RET&lt;/code&gt; or &lt;code&gt;TAB&lt;/code&gt;) allows you to change:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RUST_BACKTRACE&lt;/code&gt; environment variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compilation-arguments&lt;/code&gt; for &lt;code&gt;recompile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;arguments for &lt;code&gt;cargo test&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to close the popup after you ran a command you can set &lt;code&gt;rustic-kill-buffer-and-window&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/popup.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;View help buffer containing a command&#39;s flags with &lt;code&gt;h&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brotzeit/rustic/master/img/popup_help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;rust-mode&lt;/h2&gt; &#xA;&lt;p&gt;rustic-mode derives from rust-mode, however we replace default key bindings and some hooks.&lt;/p&gt; &#xA;&lt;p&gt;There are also some additional commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-dbg-wrap-or-unwrap&lt;/code&gt; Either remove or add the dbg! macro&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-toggle-mutability&lt;/code&gt; Toggles the mutability of the variable defined on the current line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-promote-module-into-dir&lt;/code&gt; Promote the module file visited by the current buffer into its own directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;elisp tests&lt;/h2&gt; &#xA;&lt;p&gt;To run the tests, you will need &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cask emacs --batch -L . -L test -l test/all-tests.el -f ert-run-tests-batch-and-exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;alternatively you can use &lt;code&gt;just test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs, feature requests and bug reports are very welcome. If you want to add a new feature please open an issue in advance so we can discuss the details.&lt;/p&gt;</summary>
  </entry>
</feed>