<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-23T01:33:52Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rougier/notes-list</title>
    <updated>2023-03-23T01:33:52Z</updated>
    <id>tag:github.com,2023-03-23:/rougier/notes-list</id>
    <link href="https://github.com/rougier/notes-list" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs notes list&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Notes list&lt;/h1&gt; &#xA;&lt;p&gt;Notes list collects notes in user-defined directories and populate a buffer with a summary of each note. To do so, notes are parsed such as to extract title, icon, date, summary and tags. A typical org note header is thus&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+TITLE:    Emacs hacking&#xA;#+DATE:     2023-03-17&#xA;#+FILETAGS: HACK EMACS CODE&#xA;#+SUMMARY:  Notes about emacs hacking ideas&#xA;#+ICON:     bootstrap/journal-code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Icons are build using the &lt;a href=&#34;https://github.com/rougier/svg-lib&#34;&gt;svg-lib&lt;/a&gt; library and syntax is &lt;code&gt;collection/name&lt;/code&gt; where collection is one one &lt;code&gt;simple&lt;/code&gt;, &lt;code&gt;bootstrap&lt;/code&gt;, &lt;code&gt;material&lt;/code&gt; and &lt;code&gt;octicons&lt;/code&gt;. For available icons, please refere to the svg-lib documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/notes-list/master/notes-list.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xenodium/chatgpt-shell</title>
    <updated>2023-03-23T01:33:52Z</updated>
    <id>tag:github.com,2023-03-23:/xenodium/chatgpt-shell</id>
    <link href="https://github.com/xenodium/chatgpt-shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;ðŸ‘‰ [[https://github.com/sponsors/xenodium][Support my work via GitHub Sponsors]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chatgpt-shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A minimal ChatGPT Emacs shell.&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/chatgpt-shell-demo.gif&#34; width=&#34;80%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Note&lt;/p&gt; &#xA;&lt;p&gt;This is very much an experimental proof of concept, possibly incomplete, or maybe with some rough edges. Pull requests with improvements or fixes totally welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Load =(require &#39;chatgpt-shell)=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set OpenAI key ** As function #+begin_src emacs-lisp (setq chatgpt-shell-openai-key (lambda () (nth 0 (process-lines &#34;pass&#34; &#34;show&#34; &#34;openai-key&#34;)))) #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Manually =M-x set-variable chatgpt-shell-openai-key=&lt;/p&gt; &#xA;&lt;p&gt;** As variable #+begin_src emacs-lisp (setq chatgpt-shell-openai-key &#34;my key&#34;) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Launch with =M-x chatgpt-shell=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clear buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Type =clear= as a prompt.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh ChatGPT&amp;gt; clear #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, use either =M-x chatgpt-shell-clear-buffer= or =M-x comint-clear-buffer=.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skeeto/javadoc-lookup</title>
    <updated>2023-03-23T01:33:52Z</updated>
    <id>tag:github.com,2023-03-23:/skeeto/javadoc-lookup</id>
    <link href="https://github.com/skeeto/javadoc-lookup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickly lookup Javadoc pages from Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;javadoc-lookup&lt;/h1&gt; &#xA;&lt;p&gt;This package provides a &lt;code&gt;javadoc-lookup&lt;/code&gt; function for quickly looking up Javadoc for any library from within Emacs, optionally integrating with Maven. A browser is launched to view the documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;javadoc-lookup&lt;/code&gt; is not bound to any key by default, so you may want to add this to your initialization file,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(global-set-key (kbd &#34;C-h j&#34;) &#39;javadoc-lookup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An index for the core Java classes (i.e. java.*) is provided built-in. Beyond this, you&#39;ll want to tell javadoc-lookup what else you would like to have indexed. There are two ways to do this. You can point it to the root of a library&#39;s documentation on your filesystem. For example (the first entry here will replace the built-in index),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(javadoc-add-roots &#34;/usr/share/doc/openjdk-8-jdk/api&#34;&#xA;                   &#34;~/src/project/doc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, more conveniently, you can &lt;strong&gt;fetch and index documentation from Maven&lt;/strong&gt;! This is done by specifying an artifact as a sequence of three strings/symbols: &lt;code&gt;[groupId artifactId version]&lt;/code&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(javadoc-add-artifacts [org.lwjgl.lwjg lwjgl &#34;2.8.2&#34;]&#xA;                       [com.nullprogram native-guide &#34;0.2&#34;]&#xA;                       [org.apache.commons commons-math3 &#34;3.0&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature requires that you have Maven and the command-line unzip utility installed on your system. The initial fetch is slow but Emacs will operate from its own cache after that.&lt;/p&gt; &#xA;&lt;h2&gt;Import functions&lt;/h2&gt; &#xA;&lt;p&gt;Two functions for managing Java imports is provided: &lt;code&gt;javadoc-add-import&lt;/code&gt; and &lt;code&gt;javadoc-sort-imports&lt;/code&gt;. The former integrates with the javadoc-lookup index to provide completions.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This package obsoletes my previous java-docs package. Use this one instead.&lt;/p&gt;</summary>
  </entry>
</feed>