<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-17T01:33:08Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>roife/emt</title>
    <updated>2023-11-17T01:33:08Z</updated>
    <id>tag:github.com,2023-11-17:/roife/emt</id>
    <link href="https://github.com/roife/emt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs macOS Tokenizer, tokenizing CJK words with macOS&#39;s built-in NLP tokenizer.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;emt.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Introduction&lt;/p&gt; &#xA;&lt;p&gt;EMT stands for =Emacs MacOS Tokenizer=.&lt;/p&gt; &#xA;&lt;p&gt;This package use macOS&#39;s built-in NLP tokenizer to tokenize and operate on CJK words in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;*** Requirements&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 10.15 or later&lt;/li&gt; &#xA; &lt;li&gt;Emacs 26.1 or later, built with dynamic module support (use =--with-modules= during compilation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Build dynamic module&lt;/p&gt; &#xA;&lt;p&gt;**** Pre-built (recommendation)&lt;/p&gt; &#xA;&lt;p&gt;When you first enable =emt-mode=, if the module cannot be found, it will prompt whether to automatically download it from GitHub. Or you can manually retrieve the pre-built module from the [[https://github.com/roife/emacs-macos-tokenizer/releases][releases]] section and place the =dylib= file in the =emacs-macos-tokenizer-lib-path= (by default, it is located at =modules/libEMT.dylib= within your personal configuration folder, normally =~/.emacs.d/modules/libEMT.dylib=).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Current version of the dynamic module is v2.0.0, make sure you have updated to latest module.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;**** Manually build&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Build the module using =emt-compile-module=, which compiles and copies the module to =emt-lib-path=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you enconter the folloing error:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote No such module &#34;PackageDescription&#34; #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;run the following command and try again:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src bash sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Install package&lt;/p&gt; &#xA;&lt;p&gt;Install with =straight= and =use-package=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package emt :straight (:host github :repo &#34;roife/emt&#34; :files (&#34;&lt;em&gt;.el&#34; &#34;module/&lt;/em&gt;&#34; &#34;module&#34;)) :hook (after-init . emt-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Customization&lt;/p&gt; &#xA;&lt;p&gt;*** =emt-use-cache=&lt;/p&gt; &#xA;&lt;p&gt;Caches for results of tokenization if non-nil. Default is =t=.&lt;/p&gt; &#xA;&lt;p&gt;*** =emt-cache-lru-size=&lt;/p&gt; &#xA;&lt;p&gt;The size of LRU cache. Default is =50=.&lt;/p&gt; &#xA;&lt;p&gt;*** =emt-lib-path=&lt;/p&gt; &#xA;&lt;p&gt;The path to the directory of dynamic library for emt. Default is =~/.emacs.d/modules/libEMT.dylib=.&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;*** keymap: =emt-mode-map=&lt;/p&gt; &#xA;&lt;p&gt;It remaps =forward-word=, =backward-word=, =kill-word= and =backward-kill-word= to use emt&#39;s version.&lt;/p&gt; &#xA;&lt;p&gt;*** Minor mode&lt;/p&gt; &#xA;&lt;p&gt;It calls =emt-ensure=, which load dynamic modeuls and set =emt-mode-map=.&lt;/p&gt; &#xA;&lt;p&gt;*** Functions&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-word-at-point-or-forward=&lt;/p&gt; &#xA;&lt;p&gt;Return the word at point. If current point is at bound of a word, return the one forward.&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-word-at-point-or-backward=&lt;/p&gt; &#xA;&lt;p&gt;Return the word at point. If current point is at bound of a word, return the one backward.&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-compile-module=&lt;/p&gt; &#xA;&lt;p&gt;Compile and copy the module to =emt-lib-path=.&lt;/p&gt; &#xA;&lt;p&gt;It takes an optional argument =path=, which is the path to the directory of dynamic library. By default, =path= is set to =emt-lib-path=.&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-ensure=&lt;/p&gt; &#xA;&lt;p&gt;Load dynamic module.&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-split=&lt;/p&gt; &#xA;&lt;p&gt;Split string into a list of words.&lt;/p&gt; &#xA;&lt;p&gt;Return a list of word bounds (a cons of the beginning position and the ending position of a word)&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-forward-word=&lt;/p&gt; &#xA;&lt;p&gt;CJK compatible version of =forward-word=.&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-backward-word=&lt;/p&gt; &#xA;&lt;p&gt;CJK compatible version of =backward-word=.&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-kill-word=&lt;/p&gt; &#xA;&lt;p&gt;CJK compatible version of =kill-word=.&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-backward-kill-word=&lt;/p&gt; &#xA;&lt;p&gt;CJK compatible version of =backward-kill-word=.&lt;/p&gt; &#xA;&lt;p&gt;**** =emt-mark-word=&lt;/p&gt; &#xA;&lt;p&gt;CJK compatible version of =mark-word=.&lt;/p&gt; &#xA;&lt;p&gt;** Acknowledgements&lt;/p&gt; &#xA;&lt;p&gt;This package is inspired by [[https://github.com/cireu/jieba.el/][jieba.el]] which is a Chinese tokenizer for Emacs using =jieba=.&lt;/p&gt; &#xA;&lt;p&gt;The dynamic module uses [[https://github.com/SavchenkoValeriy/emacs-swift-module.git][emacs-swift-module]], which provides an interface for writing Emacs dynamic modules in Swift.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nex3/haml-mode</title>
    <updated>2023-11-17T01:33:08Z</updated>
    <id>tag:github.com,2023-11-17:/nex3/haml-mode</id>
    <link href="https://github.com/nex3/haml-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs mode for Haml.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/haml-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/haml-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/haml-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/haml-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nex3/haml-mode/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/nex3/haml-mode/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;haml-mode for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;haml-mode&lt;/code&gt; is an Emacs major mode for use with &lt;a href=&#34;http://haml.info/&#34;&gt;HAML&lt;/a&gt; source files.&lt;/p&gt; &#xA;&lt;p&gt;It provides syntax highlighting and support for syntax-aware indentation.&lt;/p&gt; &#xA;&lt;p&gt;Support for syntax checking is built into &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt;. For &lt;code&gt;flymake&lt;/code&gt;, see &lt;a href=&#34;https://github.com/purcell/flymake-haml&#34;&gt;flymake-haml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Via ELPA (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;haml-mode&lt;/code&gt; from the &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Ensure &lt;code&gt;haml-mode.el&lt;/code&gt; is in a directory on your load-path, and add the following to your &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;haml-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Optional functionality&lt;/h2&gt; &#xA;&lt;p&gt;Certain nested &lt;code&gt;:filter&lt;/code&gt; blocks are syntax-highlighted if additional libraries are available. Emacs 24&#39;s &lt;code&gt;js&lt;/code&gt; library will be used for &lt;code&gt;:javascript&lt;/code&gt; blocks, while &lt;code&gt;markdown-mode&lt;/code&gt; and &lt;code&gt;textile-mode&lt;/code&gt; will be used for &lt;code&gt;:markdown&lt;/code&gt; and &lt;code&gt;:textile&lt;/code&gt; blocks respectively.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Author: Natalie Weizenbaum&lt;/p&gt; &#xA;&lt;p&gt;Maintainer: &lt;a href=&#34;https://github.com/purcell&#34;&gt;Steve Purcell&lt;/a&gt; &#xA; &lt;steve at sanityinc dot com&gt;&lt;/steve&gt;&lt;/p&gt; &#xA;&lt;p&gt;Homepage: &lt;a href=&#34;https://github.com/nex3/haml-mode&#34;&gt;https://github.com/nex3/haml-mode&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>