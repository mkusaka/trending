<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-03T01:36:31Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Trevoke/org-gtd.el</title>
    <updated>2023-06-03T01:36:31Z</updated>
    <id>tag:github.com,2023-06-03:/Trevoke/org-gtd.el</id>
    <link href="https://github.com/Trevoke/org-gtd.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A package for using GTD with org-mode&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;NOTICE This is org-gtd 3.0.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check documentation in [[doc/]] (and the info manual within emacs itself) if you&#39;re upgrading. Please report all defects as Github issues.&lt;/p&gt; &#xA;&lt;p&gt;Use existing tags if you&#39;d rather stick to a pre-3.0 version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sponsorship I&#39;ve put many hours of reading, research, and coding, to put this together. If it delivers value to you, helps you manage your life, please consider sponsoring ([[https://github.com/sponsors/Trevoke/][Github sponsors]] or [[https://www.patreon.com/LokiConsulting][Patreon]]) and allowing me to continue putting work into this package and other projects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Org GTD This package tries to replicate as closely as possible the GTD workflow. This package assumes familiarity with GTD.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides a system that allows you to capture incoming things into an inbox, then process the inbox and categorize each item based on the GTD categories. It leverages org-agenda to show today&#39;s items as well as the NEXT items. It also has a simple project management system, which currently assumes all tasks in a project are sequential.&lt;/p&gt; &#xA;&lt;p&gt;For a comprehensive instruction manual, see the documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Either the info file (within emacs, &lt;del&gt;C-h i m org gtd RET&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;or in the [[doc/]] directory of the repository, there is a &lt;del&gt;.org&lt;/del&gt; file you can peruse.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The documentation also details how to upgrade from one version to another.&lt;/p&gt; &#xA;&lt;p&gt;** Whirlwind tour of the package What follows is an incomplete description of the package. It is useful if you just want to take it for a test run. Read the full documentation for the full set of features and customizability. *** GTD Meta Modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-mode&lt;/del&gt; :: If you want to be able to refresh the org-agenda views and have all the &lt;del&gt;org-gtd&lt;/del&gt; files included in your &lt;del&gt;org-agenda-files&lt;/del&gt;, you&#39;ll need this to be enabled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Customizable variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-directory&lt;/del&gt; :: Directory where org-gtd will look for its files&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-areas-of-focus&lt;/del&gt; :: List of strings representing Horizon 3. See Steps 4 and 6 for further details. *** GTD Step 1/6 : Capture Functions:&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-capture&lt;/del&gt; :: A wrapper around &lt;del&gt;org-capture&lt;/del&gt;. Use it to capture items into the GTD inbox. Will create the inbox file if it does not exist.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Customizable variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-capture-templates&lt;/del&gt; :: Defines behavior for &lt;del&gt;org-gtd-capture&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** GTD Step 2/6 : Process Functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-process-inbox&lt;/del&gt; :: Start a loop around step 3 (Clarify) for every item in the inbox. *** GTD Step 3/6 : Clarify Functions:&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-clarify-item&lt;/del&gt; :: Call this from any org heading to clarify this item as a one-off and organize it into org-gtd.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-clarify-agenda-item&lt;/del&gt; :: Call this from any item in the agenda to clarify this item and organize it into org-gtd.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-clarify-switch-to-buffer&lt;/del&gt; :: Call this to switch back to any existing clarify buffer. Use this instead of switching back through the normal flow, as this manages some state.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keymaps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-clarify-map&lt;/del&gt; :: Sparse keymap for minor mode used in the clarify buffer. *** GTD Step 4/6 : Organize Functions:&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-organize&lt;/del&gt; :: Pop up a menu asking how to organize (e.g. single action, appointment, etc.) the item at point. Great function to bind on &lt;del&gt;org-gtd-clarify-map&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-organize-hooks&lt;/del&gt; :: Series of functions that get called to decorate each item (e.g. org tags, org effort, etc.). Add &lt;del&gt;org-gtd-set-area-of-focus&lt;/del&gt; to this one to set areas of focus on each item. *** GTD Step 5/6 : Engage daily Functions:&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-engage&lt;/del&gt; :: Your daily view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-engage-grouped-by-context&lt;/del&gt; :: All NEXT actions, grouped by tags beginning with =@=. This may not work if you remove &lt;del&gt;org-set-tags-command&lt;/del&gt; from &lt;del&gt;org-gtd-organize-hooks&lt;/del&gt;. *** GTD Step 6/6 : Review Functions:&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-oops&lt;/del&gt; :: Show all the missed appointments. Oops!&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-review-area-of-focus&lt;/del&gt; :: Show an agenda view designed for one of your areas of focus.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-gtd-review-stuck-*&lt;/del&gt; :: The =*= here is any of the action types; you can find any of the ones that have fallen through the cracks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Directory tree&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=dev= :: used as a jail environment. Copy somewhere else and spin up with &lt;del&gt;$ HOME=&#34;dev/&#34; emacs&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=doc= :: where the documentation lives&lt;/li&gt; &#xA; &lt;li&gt;=test= :: where the tests are&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Community If you want help, you can open an issue right on Github.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;re also welcome to join my [[https://discord.gg/2kAK6TfqJq][discord server]] for all conversations related to org-gtd in particular and GTD in general. Many of the ideas for org-gtd came out of my reading the GTD book, and then reading some sections multiple times, but I am in no way an expert. Defining the GTD domain, which is to say, getting to clear nomenclature with clear actions, is still a work in progress.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Animated demos of org-gtd ** Projects [[doc/project.gif]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Lambda-Emacs/lambda-line</title>
    <updated>2023-06-03T01:36:31Z</updated>
    <id>tag:github.com,2023-06-03:/Lambda-Emacs/lambda-line</id>
    <link href="https://github.com/Lambda-Emacs/lambda-line" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A configurable status line for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Lambda-line is a custom status-line (or &#34;mode-line) for Emacs. It is configurable for use either as a header-line or as a footer-line.&lt;/p&gt; &#xA;&lt;p&gt;The status-line has the structure:&lt;/p&gt; &#xA;&lt;p&gt;[ status name (primary) tertiary secondary ]&lt;/p&gt; &#xA;&lt;p&gt;Information displayed depends on major mode. Not all segments display in every mode.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_HTML: :width 85% [[file:screenshots/read-write-dark.png]] #+ATTR_HTML: :width 85% [[file:screenshots/read-only-dark.png]] #+ATTR_HTML: :width 85% [[file:screenshots/write-dark-prog.png]] #+ATTR_HTML: :width 85% [[file:screenshots/read-write-light.png]] #+ATTR_HTML: :width 85% [[file:screenshots/read-only-light.png]] #+ATTR_HTML: :width 85% [[file:screenshots/line-time-icon.png]] #+ATTR_HTML: :width 85% [[file:screenshots/inverted-rw.png]] #+ATTR_HTML: :width 85% [[file:screenshots/inverted-ro.png]]&lt;/p&gt; &#xA;&lt;p&gt;To achieve the above coloration of the status-line see [[https://github.com/Lambda-Emacs/lambda-themes][lambda-themes]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lambda-line is not yet on MELPA. In the meantime to use this package you&#39;ll have to clone or otherwise download the repo and put it into your load path. Here&#39;s a basic way of setting it up using [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/raxod502/straight.el][straight]].&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package lambda-line :straight (:type git :host github :repo &#34;lambda-emacs/lambda-line&#34;) :custom (lambda-line-icon-time t) ;; requires ClockFace font (see below) (lambda-line-clockface-update-fontset &#34;ClockFaceRect&#34;) ;; set clock icon (lambda-line-position &#39;top) ;; Set position of status-line (lambda-line-abbrev t) ;; abbreviate major modes (lambda-line-hspace &#34; &#34;) ;; add some cushion (lambda-line-prefix t) ;; use a prefix symbol (lambda-line-prefix-padding nil) ;; no extra space for prefix (lambda-line-status-invert nil) ;; no invert colors (lambda-line-gui-ro-symbol &#34; â¨‚&#34;) ;; symbols (lambda-line-gui-mod-symbol &#34; â¬¤&#34;) (lambda-line-gui-rw-symbol &#34; â—¯&#34;) (lambda-line-space-top +.50) ;; padding on top and bottom of line (lambda-line-space-bottom -.50) (lambda-line-symbol-position 0.1) ;; adjust the vertical placement of symbol :config ;; activate lambda-line (lambda-line-mode) ;; set divider line in footer (when (eq lambda-line-position &#39;top) (setq-default mode-line-format (list &#34;%&lt;em&gt;&#34;)) (setq mode-line-format (list &#34;%&lt;/em&gt;&#34;)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lambda-line has a lot of different options for customization. Please see =M-x customize-group lambda-line= for full details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Set =lambda-line-position= to header (top) or footer (bottom).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a prefix status icon in the status-line with =lambda-line-prefix t=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Customize the various prefix status symbols in both GUI and TTY with =lambda-line-GUI/TTY-RO/RW/MD-symbol=.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;NOTE&lt;/em&gt;: If you use symbols you should make sure you are using a font that will display them properly. Here is one reliable way, using [[https://fontlibrary.org/assets/downloads/symbola/cf81aeb303c13ce765877d31571dc5c7/symbola.zip][Symbola]] font: #+begin_src emacs-lisp (use-package fontset :straight (:type built-in) ;; only include this if you use straight :config ;; Use symbola for proper unicode (when (member &#34;Symbola&#34; (font-family-list)) (set-fontset-font t &#39;symbol &#34;Symbola&#34; nil))) #+end_src&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Abbreviate major modes with =lambda-line-abbrev=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Show current time (via dynamic icon font)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that time is only shown when =display-time-mode= is non-nil.&lt;/li&gt; &#xA;   &lt;li&gt;The time icon uses a specific set of fonts. Install [[https://github.com/ocodo/ClockFace-font][ClockFace Fonts]] and the time will be displayed using these fonts. You can download and install the fonts within Emacs via =M-x lambda-line-install-clockface-fonts=.&lt;/li&gt; &#xA;   &lt;li&gt;You can choose which clock icon you&#39;d prefer, via =M-x lambda-line-clockface-select-font=. To set it programmatically in your config, use the function =(lambda-line-clockface-update-fontset FONT)=; e.g. =(lambda-line-clockface-update-fontset &#34;ClockFaceRect&#34;)=. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Available styles are =ClockFace=, =ClockFaceSolid=, =ClockFaceRect=, =ClockFaceRectSolid=&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;To display time as only an icon, set =lambda-line-icon-time= to =t=. When set to nil, the icon clock and text time will be displayed. To display time only as text, set =lambda-line-icon-time= to =-1= (the default).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Show both vc project and branch in the modeline&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Show the diff in the status-line with =lambda-line-git-diff-mode-line=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the symbol for vc project buffers with =lambda-line-vc-symbol=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set a visual bell with =lambda-line-visual-bell=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set char length for truncating information using =lambda-line-truncate-value=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Control the right margin padding with =lambda-line-hspace=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the top and bottom padding of the status-line with =lambda-line-space-top=. and =lambda-line-space-bottom=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the position of the prefix status symbol with =lambda-line-symbol-position=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Show flycheck/flymake report in status-line with =lambda-line-syntax=.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you use flymake, you might want to configure the status-line display with the following, which provides a minimalist display: #+begin_src emacs-lisp (customize-set-variable &#39;flymake-mode-line-counter-format &#39;(&#34;&#34; flymake-mode-line-error-counter flymake-mode-line-warning-counter flymake-mode-line-note-counter &#34;&#34;)) (customize-set-variable &#39;flymake-mode-line-format &#39;(&#34; &#34; flymake-mode-line-exception flymake-mode-line-counters)) #+end_src&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the modes in which the status-line is formatted with =lambda-line-mode-formats=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the default display function for the status-line with =lambda-line-default-mode-format=. This is set to =lambda-line-default-mode= but can be customized to any function the user wishes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lambda-line also sets a variety of faces that can be individually customized.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The basic structure of the status line is heavily indebted to Rougier&#39;s work on [[https://github.com/rougier/nano-modeline][nano-modeline]].&lt;/li&gt; &#xA; &lt;li&gt;My [[https://github.com/mclear-tools/bespoke-modeline][bespoke-modeline]] was my first attempt to create a custom mode-line and the original basis for much of the current code.&lt;/li&gt; &#xA; &lt;li&gt;The idea for the flycheck/flymake segment function is originally from [[https://github.com/jessiehildebrandt/mood-line][mood-line]].&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>astoff/devdocs.el</title>
    <updated>2023-06-03T01:36:31Z</updated>
    <id>tag:github.com,2023-06-03:/astoff/devdocs.el</id>
    <link href="https://github.com/astoff/devdocs.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs viewer for DevDocs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: devdocs.el --- Emacs viewer for DevDocs&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;http://elpa.gnu.org/packages/devdocs.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/devdocs.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/devdocs&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/devdocs-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;devdocs.el is a documentation viewer for Emacs similar to the built-in Info browser, but geared towards documentation distributed by the [[https://devdocs.io][DevDocs]] website. Currently, this covers over 500 versions of 188 different software components.&lt;/p&gt; &#xA;&lt;p&gt;The stable version of the package is available from [[https://elpa.gnu.org/packages/devdocs.html][GNU ELPA]] and a development version is available from [[https://melpa.org/#/devdocs][MELPA]]; to install, type =M-x package-install RET devdocs=.&lt;/p&gt; &#xA;&lt;p&gt;#+caption: Reading and looking up documentation entries. [[https://raw.githubusercontent.com/astoff/devdocs.el/images/screenshot.png]]&lt;/p&gt; &#xA;&lt;p&gt;** Basic usage&lt;/p&gt; &#xA;&lt;p&gt;To get started, download some documentation with =M-x devdocs-install=. This will query &lt;a href=&#34;https://devdocs.io&#34;&gt;https://devdocs.io&lt;/a&gt; for the available documents and save the selected one to disk. To read the installed documentation, there are two options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=devdocs-peruse=: Select a document and display its first page.&lt;/li&gt; &#xA; &lt;li&gt;=devdocs-lookup=: Select an index entry and display it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s handy to have a keybinding for the latter command. One possibility, in analogy to =C-h S= (=info-lookup-symbol=), is&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (global-set-key (kbd &#34;C-h D&#34;) &#39;devdocs-lookup) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In any given buffer, the first call to =devdocs-lookup= will query for a list of documents to search (you can select more than one option by entering a comma-separated list). This selection will be remembered in subsequent calls to =devdocs-lookup=, unless a prefix argument is given; in this case you can select a new list of documents.&lt;/p&gt; &#xA;&lt;p&gt;In the =&lt;em&gt;devdocs&lt;/em&gt;= buffer, navigation keys similar to Info and =&lt;em&gt;Help&lt;/em&gt;= buffers are available; press =C-h m= for details. Internal hyperlinks are opened in the same viewing buffer, and external links are opened as =browse-url= normally would.&lt;/p&gt; &#xA;&lt;p&gt;** Managing documents&lt;/p&gt; &#xA;&lt;p&gt;To manage the collection of installed documents, use the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=devdocs-install=: Download and install (or reinstall) a document distributed by [[https://devdocs.io]].&lt;/li&gt; &#xA; &lt;li&gt;=devdocs-delete=: Remove an installed document.&lt;/li&gt; &#xA; &lt;li&gt;=devdocs-update-all=: Download and reinstall all installed documents for which a newer version is available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In some cases, variants of a document are available for each (major) version. It is possible to install several versions in parallel.&lt;/p&gt; &#xA;&lt;p&gt;Documents are installed under =devdocs-data-dir=, which defaults to =~/.emacs.d/devdocs=. To completely uninstall the package, remove this directory.&lt;/p&gt; &#xA;&lt;p&gt;** Setting the default documents for a collection of buffers&lt;/p&gt; &#xA;&lt;p&gt;You may wish to select a predefined list of documents in all buffers of a certain major mode or project. To achieve this, set the =devdocs-current-docs= variable directly, say via [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][dir-local variables]] or a mode hook:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-hook &#39;python-mode-hook (lambda () (setq-local devdocs-current-docs &#39;(&#34;python~3.9&#34;)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As usual, calling =devdocs-lookup= with a prefix argument redefines the selected documents for that specific buffer.&lt;/p&gt; &#xA;&lt;p&gt;** Contributing&lt;/p&gt; &#xA;&lt;p&gt;Discussions, suggestions and code contributions are welcome! Since this package is part of GNU ELPA, nontrivial contributions (above 15 lines of code) require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
</feed>