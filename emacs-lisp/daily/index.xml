<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-09T01:39:29Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-eask/eask</title>
    <updated>2022-08-09T01:39:29Z</updated>
    <id>tag:github.com,2022-08-09:/emacs-eask/eask</id>
    <link href="https://github.com/emacs-eask/eask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line tool for building and testing Emacs Lisp packages&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-eask/eask/master/#&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/emacs-eask/eask/master/docs/static/logo.png&#34; width=&#34;20%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Eask&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Command-line tool for building and testing Emacs Lisp packages&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-green.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/software/emacs/download.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Emacs-26.1+-7F5AB6.svg?logo=gnu%20emacs&amp;amp;logoColor=white&#34; alt=&#34;Emacs Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-eask/eask/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/emacs-eask/eask.svg?logo=github&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eask is a command-line tool that helps you build, lint, and test Emacs Lisp packages. It creates a clean environment to sandbox your elisp code without influencing your personal configuration. Eask aims to be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consistent&lt;/strong&gt; enough to sandbox across all systems&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;General&lt;/strong&gt; enough to have Emacsers often used commands (byte-compile, checkdoc, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robust&lt;/strong&gt; enough to provide useful results even in the presence of user errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency-free&lt;/strong&gt; so that the tool can be run on any platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ðŸ”— Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-eask.github.io/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-eask.github.io/Getting-Started/Install-Eask/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-eask.github.io/Getting-Started/Commands-and-options/&#34;&gt;Command-line interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-eask.github.io/Examples/Real-project-examples/&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ðŸ§ª Testing&lt;/h2&gt; &#xA;&lt;h6&gt;Documentation&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Keep the documentation page up to date&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/docs.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/docs.yml/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Development&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compile source and check redefined&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/compile.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/compile.yml/badge.svg?sanitize=true&#34; alt=&#34;Compile&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compatibility check for each Emacs version&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/compat.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/compat.yml/badge.svg?sanitize=true&#34; alt=&#34;Compat&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Build executables&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Commands&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test commands in global (config) mode&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/global.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/global.yml/badge.svg?sanitize=true&#34; alt=&#34;Global&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test commands in development (package) mode&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/local.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/local.yml/badge.svg?sanitize=true&#34; alt=&#34;Local&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test to install packages&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/install.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/install.yml/badge.svg?sanitize=true&#34; alt=&#34;Install&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test execute commands&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/exec.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/exec.yml/badge.svg?sanitize=true&#34; alt=&#34;Exec&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test emacs commands&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/emacs.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/emacs.yml/badge.svg?sanitize=true&#34; alt=&#34;Emacs&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test to search packages&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/search.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/search.yml/badge.svg?sanitize=true&#34; alt=&#34;Search&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test to upgrade and check outdated packages&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/outdated_upgrade.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/outdated_upgrade.yml/badge.svg?sanitize=true&#34; alt=&#34;Outdated_Upgrade&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Eask&lt;/code&gt;-file checker&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/checker.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/checker.yml/badge.svg?sanitize=true&#34; alt=&#34;Checker&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Options&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test option switches&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/options.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/options.yml/badge.svg?sanitize=true&#34; alt=&#34;Options&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Test&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test &lt;code&gt;ert&lt;/code&gt; command&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/test_ert.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/test_ert.yml/badge.svg?sanitize=true&#34; alt=&#34;Test ert&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test &lt;code&gt;ert-runner&lt;/code&gt; command&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/test_ert-runner.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/test_ert-runner.yml/badge.svg?sanitize=true&#34; alt=&#34;Test ert-runner&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test &lt;code&gt;buttercup&lt;/code&gt; command&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/eask/actions/workflows/test_buttercup.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/eask/actions/workflows/test_buttercup.yml/badge.svg?sanitize=true&#34; alt=&#34;Test buttercup&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>rougier/minibuffer-header</title>
    <updated>2022-08-09T01:39:29Z</updated>
    <id>tag:github.com,2022-08-09:/rougier/minibuffer-header</id>
    <link href="https://github.com/rougier/minibuffer-header" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minibuffer header for GNU/Emacs&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Minbuffer header line&lt;/h2&gt; &#xA;&lt;p&gt;Minibuffer header line mode is a minor mode for GNU/Emacs that insert a header line in the minibuffer.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(package-install &#39;minibuffer-header)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage example:&lt;/h3&gt; &#xA;&lt;p&gt;Activate with &lt;code&gt;M-x: minibuffer-header-mode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Screenshot&lt;/h3&gt; &#xA;&lt;h4&gt;Vanilla Emacs&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/minibuffer-header/master/screenshot-1.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Nano Emacs&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/minibuffer-header/master/screenshot-2.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/go-eldoc</title>
    <updated>2022-08-09T01:39:29Z</updated>
    <id>tag:github.com,2022-08-09:/emacsorphanage/go-eldoc</id>
    <link href="https://github.com/emacsorphanage/go-eldoc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eldoc for go language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;go-eldoc.el &lt;a href=&#34;https://travis-ci.org/syohex/emacs-go-eldoc&#34;&gt;&lt;img src=&#34;https://travis-ci.org/syohex/emacs-go-eldoc.svg?sanitize=true&#34; alt=&#34;travis badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/go-eldoc&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/go-eldoc-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/go-eldoc&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/go-eldoc-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;go-eldoc.el&lt;/code&gt; provides eldoc for Go language. &lt;code&gt;go-eldoc.el&lt;/code&gt; shows type information for variable, functions and current argument position of function.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;h3&gt;Argument Type of Function&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/go-eldoc/master/image/go-eldoc1.png&#34; alt=&#34;Screenshot of showing argument type of function&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Variable Type Information&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/go-eldoc/master/image/go-eldoc2.png&#34; alt=&#34;Screenshot of showing variable type information&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Return Value Type&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/go-eldoc/master/image/go-eldoc3.png&#34; alt=&#34;Screenshot of showing return value type&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependency&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nsf/gocode&#34;&gt;gocode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dominikh/go-mode.el&#34;&gt;go-mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;go-mode&lt;/code&gt; with package.el from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;. And you can install &lt;code&gt;gocode&lt;/code&gt; by &lt;code&gt;go get&lt;/code&gt; as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% go get -u github.com/nsf/gocode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;go-eldoc.el&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; with package.el.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;))&#xA;(package-initialize)&#xA;(package-refresh-contents)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;evaluate this code and &lt;kbd&gt;M-x package-install go-eldoc&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Call &lt;code&gt;go-eldoc-setup&lt;/code&gt; function at &lt;code&gt;go-mode-hook&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;go-eldoc) ;; Don&#39;t need to require, if you install by package.el&#xA;(add-hook &#39;go-mode-hook &#39;go-eldoc-setup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;p&gt;You can change face of current argument position by &lt;code&gt;eldoc-highlight-function-argument&lt;/code&gt; like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(set-face-attribute &#39;eldoc-highlight-function-argument nil&#xA;                    :underline t :foreground &#34;green&#34;&#xA;                    :weight &#39;bold)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;go-eldoc-gocode&lt;/code&gt;(Default: &lt;code&gt;gocode&lt;/code&gt;)&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;gocode&lt;/code&gt; location. You need not to set this variable if you set (&lt;code&gt;$GOPATH/bin&lt;/code&gt;) to PATH environment variable correctly.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;go-eldoc-gocode-args&lt;/code&gt;(Default: &lt;code&gt;nil&lt;/code&gt;)&lt;/h5&gt; &#xA;&lt;p&gt;Arguments of &lt;code&gt;gocode&lt;/code&gt; command. Type of this variable is list of strings.&lt;/p&gt;</summary>
  </entry>
</feed>