<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-24T01:24:28Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AntonHakansson/org-nix-shell</title>
    <updated>2024-02-24T01:24:28Z</updated>
    <id>tag:github.com,2024-02-24:/AntonHakansson/org-nix-shell</id>
    <link href="https://github.com/AntonHakansson/org-nix-shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use buffer-local nix-shell environments in org-mode.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  #+html: &#xA; &lt;h2 align=&#34;center&#34;&gt;org-nix-shell&lt;/h2&gt; #+html: &#xA; &lt;p&gt;Buffer-local nix-shell environments in org-mode.&lt;/p&gt; #+html: &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/AntonHakansson/org-nix-shell/main/img/showcase-alt.png&#34;&gt; #+html: &#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use nix shells directly in org-mode source blocks. =org-nix-shell= works by seamlessly inheriting a nix shell environment using [[https://direnv.net/][direnv]] before executing org-babel source blocks.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quickstart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src org ,#+name: nix-shell ,#+begin_src nix { pkgs ? import &#xA; &lt;nixpkgs&gt;&#xA;   {} }: pkgs.mkShell { buildInputs = [ pkgs.hello ]; } ,#+end_src&#xA; &lt;/nixpkgs&gt;&lt;/p&gt; &#xA;&lt;p&gt;,#+begin_src sh :nix-shell &#34;nix-shell&#34; # load named nix-shell src block hello # use &#39;hello&#39; dependency ,#+end_src #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Enable =org-nix-shell-mode= and evaluate or export the buffer. See [[file:demo.org][demo.org]] with examples for Python and C.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;First create a nix shell in a named source block.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org ,#+name: &#xA; &lt;name&gt;&#xA;   ,#+begin_src nix { pkgs ? import &#xA;  &lt;nixpkgs&gt;&#xA;    {} }: pkgs.mkShell { buildInputs = with pkgs; [ python3 ]; } ,#+end_src #+end_src&#xA;  &lt;/nixpkgs&gt;&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;p&gt;Source blocks with a =:nix-shell &#xA; &lt;name&gt;&#xA;  = header argument will use the nix shell environment specified by =&#xA;  &lt;name&gt;&#xA;   =; where =&#xA;   &lt;name&gt;&#xA;    = is the corresponding named source block in the same buffer. Other source blocks should be unaffected and you can explicitly set =:nix-shell &#39;nil= to not depend on any nix shell.&#xA;   &lt;/name&gt;&#xA;  &lt;/name&gt;&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use the nix shell above we can do:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org ,#+begin_src python :nix-shell &#xA; &lt;name&gt;&#xA;   print(&#34;hello from python&#34;) ,#+end_src #+end_src&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are three ways to configure the =:nix-shell= header property; also see [[https://orgmode.org/manual/Using-Header-Arguments.html][Using Header Arguments (The Org Manual)]]. In increasing order of priority they are:&lt;/p&gt; &#xA;&lt;p&gt;** Buffer Scope&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org ,#+property: header-args: :nix-shell &#xA; &lt;name&gt;&#xA;   #+end_src&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Subtree Scope&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org ,* sample header :PROPERTIES: :header-args: :nix-shell &#xA; &lt;name&gt;&#xA;   :END: #+end_src&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Source Block Scope&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org ,#+begin_src python :nix-shell &#xA; &lt;name&gt;&#xA;   print(&#34;hello from python&#34;) ,#+end_src #+end_src&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure [[https://nixos.org/manual/nix/stable/command-ref/nix-shell][nix-shell]] and [[https://direnv.net/][direnv]] is installed on your system ([[https://github.com/nix-community/nix-direnv#installation][nix-community/nix-direnv#Installation]]).&lt;/p&gt; &#xA;&lt;p&gt;** Manual&lt;/p&gt; &#xA;&lt;p&gt;First, put [[file:org-nix-shell.el][org-nix-shell.el]] in your load path.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;org-nix-shell) (add-hook &#39;org-mode-hook &#39;org-nix-shell-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Melpa&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package org-nix-shell :hook (org-mode . org-nix-shell-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Straight&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (use-package org-nix-shell :straight &#39;(org-nix-shell :type git :host github :repo &#34;AntonHakansson/org-nix-shell&#34;) :hook (org-mode . org-nix-shell-mode)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=M-x customize-group org-nix-shell= to see available customizable variables.&lt;/p&gt;</summary>
  </entry>
</feed>