<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-25T01:31:25Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ledyba/.emacs.d</title>
    <updated>2024-01-25T01:31:25Z</updated>
    <id>tag:github.com,2024-01-25:/ledyba/.emacs.d</id>
    <link href="https://github.com/ledyba/.emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.emacs.dです。&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>ajsharp/emacs.d</title>
    <updated>2024-01-25T01:31:25Z</updated>
    <id>tag:github.com,2024-01-25:/ajsharp/emacs.d</id>
    <link href="https://github.com/ajsharp/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My emacs.d directory&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Emacs Starter Kit&lt;/h1&gt; &#xA;&lt;p&gt;The Starter Kit should provide a saner set of defaults than you get normally with Emacs. It was originally intended for beginners, but it should provide a reasonable working environment for anyone using Emacs for dynamic languages. It also bundles a number of useful libraries that are not distributed with Emacs for various reasons.&lt;/p&gt; &#xA;&lt;p&gt;The latest version is at &lt;a href=&#34;http://github.com/technomancy/emacs-starter-kit/&#34;&gt;http://github.com/technomancy/emacs-starter-kit/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Learning&lt;/h2&gt; &#xA;&lt;p&gt;This won&#39;t teach you Emacs, but it&#39;ll make it easier to get comfortable. To access the tutorial, press control-h followed by t.&lt;/p&gt; &#xA;&lt;p&gt;You may also find the &lt;a href=&#34;http://peepcode.com/products/meet-emacs&#34;&gt;PeepCode Meet Emacs screencast&lt;/a&gt; helpful. The &lt;a href=&#34;http://emacswiki.org&#34;&gt;Emacs Wiki&lt;/a&gt; is also very handy.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install GNU Emacs (at least version 22, 23 is preferred) Use your package manager if you have one. Otherwise Mac users may get &lt;a href=&#34;http://emacsformacosx.com/&#34;&gt;some prebuilt binaries&lt;/a&gt;, and Windows users can get them &lt;a href=&#34;http://ftp.gnu.org/pub/gnu/emacs/windows/emacs-23.1-bin-i386.zip&#34;&gt;from GNU&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Move the directory containing this file to ~/.emacs.d (If you already have a directory at ~/.emacs.d move it out of the way and put this there instead.)&lt;/li&gt; &#xA; &lt;li&gt;Launch Emacs!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you find yourself missing some autoloads after an update (which should manifest itself as &#34;void function: foobar&#34; errors) try M-x regen-autoloads. After some updates an M-x recompile-init will be necessary; this should be noted in the commit messages.&lt;/p&gt; &#xA;&lt;p&gt;If you want to keep your regular ~/.emacs.d in place and just launch a single instance using the starter kit, try the following invocation:&lt;/p&gt; &#xA;&lt;p&gt;$ emacs -q -l ~/src/emacs-starter-kit/init.el&lt;/p&gt; &#xA;&lt;p&gt;Note that having a ~/.emacs file might override the starter kit loading, so if you&#39;ve having trouble loading it, make sure that file is not present.&lt;/p&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;The init.el file is where everything begins. It&#39;s the first file to get loaded. The starter-kit-* files provide what I consider to be better defaults, both for different programming languages and for built-in Emacs features like bindings or registers.&lt;/p&gt; &#xA;&lt;p&gt;Files that are pending submission to ELPA are bundled with the starter kit under the directory elpa-to-submit/. The understanding is that these are bundled just because nobody&#39;s gotten around to turning them into packages, and the bundling of them is temporary. For these libraries, autoloads will be generated and kept in the loaddefs.el file. This allows them to be loaded on demand rather than at startup.&lt;/p&gt; &#xA;&lt;p&gt;There are also a few files that are meant for code that doesn&#39;t belong in the Starter Kit. First, the user-specific-config file is the file named after your user with the extension &#34;.el&#34;. In addition, if a directory named after your user exists, it will be added to the load-path, and any elisp files in it will be loaded. Finally, the Starter Kit will look for a file named after the current hostname ending in &#34;.el&#34; which will allow host-specific configuration. This is where you should put code that you don&#39;t think would be useful to everyone. That will allow you to merge with newer versions of the starter-kit without conflicts.&lt;/p&gt; &#xA;&lt;h2&gt;Emacs Lisp Package Archive&lt;/h2&gt; &#xA;&lt;p&gt;Libraries from &lt;a href=&#34;http://tromey.com/elpa&#34;&gt;ELPA&lt;/a&gt; are preferred when available since dependencies are handled automatically, and the burden to update them is removed from the user. In the long term, ideally everything would be installed via ELPA, and only package.el would need to be distributed with the starter kit. (Or better yet, package.el would come with Emacs...) See starter-kit-elpa.el for a list of libraries that are pending submission to ELPA. Packages get installed in the elpa/ directory.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s no vendor/ directory in the starter kit because if an external library is useful enough to be bundled with the starter kit, it should be useful enough to submit to ELPA so that everyone can use it, not just users of the starter kit.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes packages are removed from the Starter Kit as they get added to ELPA itself. This has occasionally caused problems with certain packages. If you run into problems with such a package, try removing everything from inside the elpa/ directory and invoking M-x starter-kit-elpa-install in a fresh instance.&lt;/p&gt; &#xA;&lt;h2&gt;Variants of Emacs&lt;/h2&gt; &#xA;&lt;p&gt;The Starter Kit is designed to work with GNU Emacs version 22 or greater. Using it with forks or other variants is not supported. It probably won&#39;t work with XEmacs, though some have reported getting it to work with Aquamacs. However, since Aquamacs is not portable, it&#39;s difficult to test in it, and breakage is common.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you know your way around Emacs, please try out the starter kit as a replacement for your regular dotfiles for a while. If there&#39;s anything you just can&#39;t live without, add it or let me know so I can add it. Take a look at what happens in init.el to get started.&lt;/p&gt; &#xA;&lt;p&gt;Also: see the file TODO. Helping submit new libraries to ELPA is the easiest way to help out. There are two ways you can do this: either take new libraries and make them ready for ELPA, dropping them in the elpa-to-submit directory or take files that are already in elpa-to-submit, ensuring all their dependencies are correctly loaded into ELPA, and sending them to the ELPA maintainer. There are details at &lt;a href=&#34;http://tromey.com/elpa/upload.html&#34;&gt;http://tromey.com/elpa/upload.html&lt;/a&gt; for how ELPA submission works. Grep the project for TODO for other things.&lt;/p&gt; &#xA;&lt;p&gt;Files are licensed under the same license as Emacs unless otherwise specified. See the file COPYING for details.&lt;/p&gt; &#xA;&lt;p&gt;The latest version is at &lt;a href=&#34;http://github.com/technomancy/emacs-starter-kit/&#34;&gt;http://github.com/technomancy/emacs-starter-kit/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Unix, /home/$USER/.emacs.d, on windows Documents and Settings/%your user name%/Application Data&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gucong/emacs-chinese-conv</title>
    <updated>2024-01-25T01:31:25Z</updated>
    <id>tag:github.com,2024-01-25:/gucong/emacs-chinese-conv</id>
    <link href="https://github.com/gucong/emacs-chinese-conv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;convert between simplified and traditional chinese&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chinese-conv&lt;/h1&gt; &#xA;&lt;p&gt;A front end in emacs to convert between simplified and traditional Chinese with opencc or cconv.&lt;/p&gt; &#xA;&lt;p&gt;Author: Cong Gu&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisite&lt;/h3&gt; &#xA;&lt;p&gt;Have either &lt;a href=&#34;https://github.com/BYVoid/OpenCC&#34;&gt;opencc&lt;/a&gt; or &lt;a href=&#34;https://github.com/xiaoyjy/cconv&#34;&gt;cconv&lt;/a&gt; installed in your system.&lt;/p&gt; &#xA;&lt;h3&gt;Use &lt;a href=&#34;http://melpa.org/#/getting-started&#34;&gt;MELPA&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt; &lt;code&gt;chinese-conv&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Put the following into init file (e.g. &lt;code&gt;~/.emacs&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;chinese-conv)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Put chinese-conv.el into desired location (e.g. &lt;code&gt;~/.emacs/site-lisp/&lt;/code&gt;) and put the following into init file (e.g. &lt;code&gt;~/.emacs&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/site-lisp&#34;)&#xA;(require &#39;chinese-conv)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Chinese-conv comes with support for &lt;a href=&#34;https://github.com/BYVoid/OpenCC&#34;&gt;opencc&lt;/a&gt; and &lt;a href=&#34;https://github.com/xiaoyjy/cconv&#34;&gt;cconv&lt;/a&gt; as backends.&lt;/p&gt; &#xA;&lt;h3&gt;Use opencc as backend (Default)&lt;/h3&gt; &#xA;&lt;p&gt;To change opencc program path, set &lt;code&gt;chinese-conv-opencc-program&lt;/code&gt; (default: &#34;opencc&#34;),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq chinese-conv-opencc-program &#34;/PATH/TO/BIN/opencc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change opencc data directory, set &lt;code&gt;chinese-conv-opencc-data&lt;/code&gt; (default: &#34;/usr/share/opencc/&#34;),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq chinese-conv-opencc-data &#34;/PATH/TO/DATA/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use cconv as backend&lt;/h3&gt; &#xA;&lt;p&gt;Set the backend to cconv,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq chinese-conv-backend &#34;cconv&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change cconv program path, set &lt;code&gt;chinese-conv-cconv-program&lt;/code&gt; (default: &#34;cconv&#34;),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq chinese-conv-cconv-program &#34;/PATH/TO/BIN/cconv&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Interactive query&lt;/h3&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;chinese-conv&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt; &lt;code&gt;后天&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt; &lt;code&gt;traditional&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;后天&lt;/code&gt; is the string to convert. The interactive command will guess it from marked region or current word.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;traditional&lt;/code&gt; is the conversion type. It is read with completion among all the available types. Hit &lt;code&gt;TAB&lt;/code&gt; for a complete list of available types.&lt;/p&gt; &#xA;&lt;p&gt;The result will be displayed in minibuffer.&lt;/p&gt; &#xA;&lt;h3&gt;Interactive replace&lt;/h3&gt; &#xA;&lt;p&gt;Example: Mark the region to be converted in the buffer, then&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;chinese-conv-replace&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt; &lt;code&gt;traditional&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The marked region will be converted to traditional characters.&lt;/p&gt; &#xA;&lt;h3&gt;Non-interactive API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(chinese-conv &#34;后天&#34; &#34;traditional&#34;)&#xA;=&amp;gt; &#34;後天&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Backend can be explicitly specified,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(chinese-conv &#34;后天&#34; &#34;traditional&#34; &#34;opencc&#34;)&#xA;=&amp;gt; &#34;後天&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>