<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-01T01:30:56Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alphapapa/org-web-tools</title>
    <updated>2023-11-01T01:30:56Z</updated>
    <id>tag:github.com,2023-11-01:/alphapapa/org-web-tools</id>
    <link href="https://github.com/alphapapa/org-web-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;View, capture, and archive Web pages in Org-mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: org-web-tools #+PROPERTY: LOGGING nil&lt;/p&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/org-web-tools][file:https://melpa.org/packages/org-web-tools-badge.svg]] [[https://stable.melpa.org/#/org-web-tools][file:https://stable.melpa.org/packages/org-web-tools-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This file contains library functions and commands useful for retrieving web page content and processing it into Org-mode content.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can copy a URL to the clipboard or kill-ring, then run a command that downloads the page, isolates the &#34;readable&#34; content with =eww-readable=, converts it to Org-mode content with Pandoc, and displays it in an Org-mode buffer. Another command does all of that but inserts it as an Org entry instead of displaying it in a new buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :noexport_1:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Requirements&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 25.1 or later.&lt;/li&gt; &#xA; &lt;li&gt;Commands that process HTML into Org require [[https://pandoc.org/][Pandoc]]. &lt;em&gt;Note:&lt;/em&gt; The output of current Pandoc versions differs substantially from versions that may still be present in stable Linux distros. If you encounter any issues, please install a more recent version of Pandoc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** MELPA&lt;/p&gt; &#xA;&lt;p&gt;If you installed from MELPA, just run one of the [[*Usage][commands]] below. If you want to use any of the functions in your own code, you should &lt;del&gt;(require &#39;org-web-tools)&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Manual&lt;/p&gt; &#xA;&lt;p&gt;Install [[https://github.com/magnars/dash.el][dash.el]], [[https://github.com/tali713/esxml][esxml]], [[https://github.com/tkf/emacs-request][request]], and [[https://github.com/magnars/s.el][s.el]]. Then require this package in your init file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (require &#39;org-web-tools) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :noexport_1:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Commands&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-web-tools-insert-link-for-url=: Insert an Org-mode link to the URL in the clipboard or kill-ring. Downloads the page to get the HTML title.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools-insert-web-page-as-entry=: Insert the web page for the URL in the clipboard or kill-ring as an Org-mode entry, as a sibling heading of the current entry.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools-read-url-as-org=: Display the web page for the URL in the clipboard or kill-ring as Org-mode text in a new buffer, processed with =eww-readable=.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools-convert-links-to-page-entries=: Convert all URLs and Org links in current Org entry to Org headings, each containing the web page content of that URL, converted to Org-mode text and processed with =eww-readable=. This should be called on an entry that solely contains a list of URLs or links.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-web-tools-archive-attach&lt;/del&gt;: Download archive of page at URL and attach with =org-attach=. If =CHOOSE-FN= is non-nil (interactively, with universal prefix), prompt for the archive function to use. If =VIEW= is non-nil (interactively, with two universal prefixes), view the archive immediately after attaching. (See also [[https://github.com/scallywag/org-board][org-board]]).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-web-tools-archive-view&lt;/del&gt;: Open Zip file archive of web page. Extracts to a temp directory and opens with &lt;del&gt;browse-url-default-browser&lt;/del&gt;. Note: the extracted files are left on-disk in the temp directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Functions&lt;/p&gt; &#xA;&lt;p&gt;These are used in the commands above and may be useful in building your own commands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-web-tools--dom-to-html=: Return parsed HTML DOM as an HTML string. Note: This is an approximation and is not necessarily correct HTML (e.g. IMG tags may be rendered with a closing &#34;&#34; tag).&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools--eww-readable=: Return &#34;readable&#34; part of HTML with title.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools--get-url=: Return content for URL as string.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools--html-to-org-with-pandoc=: Return string of HTML converted to Org with Pandoc. When SELECTOR is non-nil, the HTML is filtered using =esxml-query= SELECTOR and re-rendered to HTML with =org-web-tools--dom-to-html=, which see.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools--url-as-readable-org=: Return string containing Org entry of URL&#39;s web page content. Content is processed with =eww-readable= and Pandoc. Entry will be a top-level heading, with article contents below a second-level &#34;Article&#34; heading, and a timestamp in the first-level entry for writing comments.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools--demote-headings-below=: Demote all headings in buffer so the highest level is below LEVEL.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools--get-first-url=: Return URL in clipboard, or first URL in the kill-ring, or nil if none.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-web-tools--read-url&lt;/del&gt;: Return a URL by searching at point, then in clipboard, then in kill-ring, and finally prompting the user.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools--read-org-bracket-link=: Return (TARGET . DESCRIPTION) for Org bracket LINK or next link on current line.&lt;/li&gt; &#xA; &lt;li&gt;=org-web-tools--remove-dos-crlf=: Remove all DOS CRLF (^M) in buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changelog :noexport_1:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.3-pre&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default options to Wget (see [[https://github.com/alphapapa/org-web-tools/issues/35][#35]]).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;del&gt;plz&lt;/del&gt; HTTP library and make various related optimizations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Removed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Internal function &lt;del&gt;org-web-tools--html-title&lt;/del&gt;. (If your program used this function, it&#39;s trivially reimplemented; see source code.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Improvements&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Archiving tools: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can use multiple functions to attempt archiving.&lt;/li&gt; &#xA;   &lt;li&gt;Associated options control retry attempts, delays, and fallbacks to other functions.&lt;/li&gt; &#xA;   &lt;li&gt;Functions to archive Web pages with =wget= and =tar=: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Function &lt;del&gt;org-web-tools-archive--wget-tar&lt;/del&gt; archives a URL&#39;s Web page, including page resources.&lt;/li&gt; &#xA;     &lt;li&gt;Function =org-web-tools-archive--wget-tar-html-only= archives a URL&#39;s HTML only.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Command &lt;del&gt;org-web-tools-archive-view&lt;/del&gt; handles both =zip= and =tar= archives.&lt;/li&gt; &#xA;   &lt;li&gt;The default settings use =wget= and =tar= to archive pages (because the &lt;del&gt;archive.today&lt;/del&gt; service has not worked reliably with external tools for a long time).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-web-tools-archive-fn&lt;/del&gt; defaults to using &lt;del&gt;wget&lt;/del&gt; and &lt;del&gt;tar&lt;/del&gt; to archive pages to XZ archives with HTML and page resources. (The &lt;del&gt;archive.is&lt;/del&gt; service has not worked reliably with other tools for a long time.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-web-tools--org-link-for-url= now returns the URL if the HTML page has no title tag. This avoids an error, e.g. when used in an Org capture template.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Compatibility&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 27.1 or later is now required.&lt;/li&gt; &#xA; &lt;li&gt;Updated for Org 9.3&#39;s changes to &lt;del&gt;org-bracket-link-regexp&lt;/del&gt;. (Thanks to [[https://github.com/bcc32][Aaron Zeng]] and [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; &#xA; &lt;li&gt;Activate &lt;del&gt;org-mode&lt;/del&gt; in temporary buffer for &lt;del&gt;org-web-tools--html-to-org-with-pandoc&lt;/del&gt;. ([[https://github.com/alphapapa/org-web-tools/issues/56][#56]]. Thanks to [[https://github.com/mooseyboots][mooseyboots]].)&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;del&gt;compat&lt;/del&gt; library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.1.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only test non-nil items in &lt;del&gt;org-web-tools--get-first-url&lt;/del&gt;. This makes it work properly in non-GUI Emacs sessions. (Thanks to [[https://github.com/bsima][Ben Sima]] for reporting.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.1.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Require &lt;del&gt;org-attach&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command &lt;del&gt;org-web-tools-attach-url-archive&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Command &lt;del&gt;org-web-tools-view-archive&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Function &lt;del&gt;org-web-tools--read-url&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Changes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remove all property drawers that contain the =CUSTOM_ID= property from Pandoc output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First declared stable release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development :noexport_1:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributions and suggestions are welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License :noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPLv3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Wu-Bo/.emacs.d</title>
    <updated>2023-11-01T01:30:56Z</updated>
    <id>tag:github.com,2023-11-01:/Wu-Bo/.emacs.d</id>
    <link href="https://github.com/Wu-Bo/.emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;emacs 扩展仓库&lt;/p&gt;&lt;hr&gt;&lt;p&gt;C-c / hippe-expand Tab yasnippet M / auto-complete-clang-async&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tjaartvdwalt/emacs-config</title>
    <updated>2023-11-01T01:30:56Z</updated>
    <id>tag:github.com,2023-11-01:/tjaartvdwalt/emacs-config</id>
    <link href="https://github.com/tjaartvdwalt/emacs-config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;my emacs config&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;My Emacs config&lt;/h1&gt; &#xA;&lt;p&gt;This is my personal Emacs config.&lt;/p&gt; &#xA;&lt;p&gt;I wrote this config to self install the required plugins before configuring them.&lt;/p&gt; &#xA;&lt;h2&gt;Installation of plugins&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to install a plugin: &lt;a href=&#34;https://github.com/tjaartvdwalt/emacs-config/raw/master/config/elpa.el&#34;&gt;ELPA&lt;/a&gt; or &lt;a href=&#34;https://github.com/tjaartvdwalt/emacs-config/raw/master/config/el-get.el&#34;&gt;el-get&lt;/a&gt; Elpa is the preferred installation method but el-get can install packages from more sources.&lt;/p&gt; &#xA;&lt;h3&gt;ELPA&lt;/h3&gt; &#xA;&lt;p&gt;The way to install a package is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(elpa-install &#39;my-package)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;el-get&lt;/h3&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;h3&gt;mu4e&lt;/h3&gt; &#xA;&lt;p&gt;mu4e is not available through one of the plugin installation systems. It is bundled with &lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/&#34;&gt;mu&lt;/a&gt;. On Arch Linux mu can be installed through the AUR.&lt;/p&gt; &#xA;&lt;p&gt;mu does not fetch email, it is primarily a mail indexer and works with mail in the maildir format. A really nice tool that handles the mail synchronisation is &lt;a href=&#34;http://offlineimap.org/&#34;&gt;offlineimap&lt;/a&gt;. The config for offlineimap is beyond the scope of this document.&lt;/p&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://github.com/tjaartvdwalt/emacs-config/raw/master/config/mu4e.el&#34;&gt;config&lt;/a&gt; is a work in progress. The general idea is that I want to configure multiple email accounts by setting the &lt;code&gt;my-mu4e-account-alist&lt;/code&gt; variable. All the config should be done dynamically using these values.&lt;/p&gt; &#xA;&lt;h4&gt;Bookmarks&lt;/h4&gt; &#xA;&lt;p&gt;I like to view my spam separate from the rest of my mail. I changed the default bookmarks &lt;code&gt;Unread messages&lt;/code&gt; &lt;code&gt;Today&#39;s messages&lt;/code&gt; &lt;code&gt;Last 7 days&lt;/code&gt; and &lt;code&gt;Messages with images&lt;/code&gt; to exclude messages that are in the Spam or Trash folders.&lt;/p&gt; &#xA;&lt;p&gt;I also added the following bookmarks: &lt;code&gt;Messages in Inbox&lt;/code&gt; to show a unified Inbox for all my accounts. &lt;code&gt;Sent Mail&lt;/code&gt; to show the Sent Mail folders &lt;code&gt;Spam&lt;/code&gt; to show the Spam folders &lt;code&gt;Trashed messages&lt;/code&gt; to show the Trash folders &lt;code&gt;Draft messages&lt;/code&gt; to show the Drafts folders&lt;/p&gt; &#xA;&lt;h4&gt;Smart refiling&lt;/h4&gt; &#xA;&lt;p&gt;Smart refiling is one of the features that make mu4e very cool. Basically you can Archive your emails by some email attribute. I Archive my emails based on the year it was sent.&lt;/p&gt; &#xA;&lt;p&gt;The refiling algorithm checks the year the email under point was sent and marks it for refiling in the corresponding year subfolder in the Archive folder for that account.&lt;/p&gt; &#xA;&lt;p&gt;For example if your email config looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq mu4e-maildir &#34;~/Maildir/&#34;)&#xA;&#xA;(defvar my-mu4e-account-alist&#xA;&#39;((&#34;my@email.com&#34;&#xA;(mu4e-refile-folder &#34;/my@email.com/Archives&#34;)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you try to refile an email that was sent on &#34;28 December 2013&#34; your email will be filed in the following directory in your maildir.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/Maildir/my@email.com/Archives.2013&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Spam&lt;/h4&gt; &#xA;&lt;h3&gt;sudo tramp&lt;/h3&gt;</summary>
  </entry>
</feed>