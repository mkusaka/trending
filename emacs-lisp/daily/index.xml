<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:32:25Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xhelin/emacs-conf</title>
    <updated>2022-09-25T01:32:25Z</updated>
    <id>tag:github.com,2022-09-25:/xhelin/emacs-conf</id>
    <link href="https://github.com/xhelin/emacs-conf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;emacs configuration files&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>davidmiller/dizzee</title>
    <updated>2022-09-25T01:32:25Z</updated>
    <id>tag:github.com,2022-09-25:/davidmiller/dizzee</id>
    <link href="https://github.com/davidmiller/dizzee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Library for managing subprocesses&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;======================================== Dizzee - Subprocess management for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;Dizzee is a pleasant way to manage your project&#39;s subprocesses in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;You have a project.&lt;/p&gt; &#xA;&lt;p&gt;In order to get an instance running and start working, you have to manually launch say... 4 processes in 4 different shells.&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;em&gt;Not Fun&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thankfully it is also a definable, repeatable process - which means that we can &lt;em&gt;Use Programming&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At worst, this is &lt;em&gt;More Fun&lt;/em&gt; than doing it yourself every time.&lt;/p&gt; &#xA;&lt;h1&gt;Services&lt;/h1&gt; &#xA;&lt;p&gt;The fundamental abstraction in Dizzee is that of a &lt;code&gt;Service&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A service is an individual process such as you would otherwise launch in a shell - e.g. serving the contents of a directory on localhost port 7878::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;you@yourbox $ python -m SimpleHTTPServer 7878&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In production you might (read &lt;em&gt;really, really should&lt;/em&gt;) have a whole webserver to take care of that sort of thing, but while working you take a simpler route.&lt;/p&gt; &#xA;&lt;p&gt;With Dizzee you could define a &lt;code&gt;service&lt;/code&gt; called &lt;em&gt;my-static&lt;/em&gt; to turn this process into a simple::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x my-static-start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To define this as a Dizzee service you would add the following to your .emacs::&lt;/p&gt; &#xA;&lt;p&gt;(dz-defservice my-static &#34;python&#34; :args (&#34;-m&#34; &#34;SimpleHTTPServer&#34; &#34;7878&#34;) :cd &#34;/home/you/your-awesome-project/static&#34;)&lt;/p&gt; &#xA;&lt;p&gt;This provides you with the following functions that you can bind to shortcuts or call with M-x::&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;my-static-start&lt;/li&gt; &#xA; &lt;li&gt;my-static-stop&lt;/li&gt; &#xA; &lt;li&gt;my-static-restart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Arguments to dz-defservice&lt;/h2&gt; &#xA;&lt;p&gt;Positional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Service - (symbol) The name of the service&lt;/li&gt; &#xA; &lt;li&gt;Command - (string) The executable to run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keyword:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;:cd - (string) The directory in which you would like the service to run&lt;/li&gt; &#xA; &lt;li&gt;:args - (list of strings) The arguments you would like to be passed to the executable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Service Groups&lt;/h1&gt; &#xA;&lt;p&gt;With &lt;code&gt;Service Groups&lt;/code&gt; things get even &lt;em&gt;More Fun&lt;/em&gt;. &lt;code&gt;Service Groups&lt;/code&gt; allow you to define a group of conceptually related &lt;code&gt;Services&lt;/code&gt; that you will want to launch simultaneously.&lt;/p&gt; &#xA;&lt;h2&gt;By Way Of Example&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s say you are plausibly working on a &#34;Server&#34; that will talk to a &#34;Client&#34;. Having defined the &lt;code&gt;Sevices&lt;/code&gt; my-server and my-client you can then define a &lt;code&gt;Service Group&lt;/code&gt;::&lt;/p&gt; &#xA;&lt;p&gt;(dz-defservice-group my-project (my-server my-client))&lt;/p&gt; &#xA;&lt;p&gt;This will provide the M-x functions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;my-project-start - Starts all the services&lt;/li&gt; &#xA; &lt;li&gt;my-project-stop - Stops all the services&lt;/li&gt; &#xA; &lt;li&gt;my-project-restart - Restarts all the services&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Reloading&lt;/h1&gt; &#xA;&lt;p&gt;Dizzee also provides a reloader to restart your service when you make changes to the source. More complete docs to follow. For now C-h f dz-register-reload&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Use el-get with the github repo as a git source.&lt;/p&gt; &#xA;&lt;p&gt;Or, if you insist, (&lt;em&gt;grumbles...&lt;/em&gt;) download dizzee.el and::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;dizzee)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Bugs&lt;/h1&gt; &#xA;&lt;p&gt;Use the Github tracker &lt;a href=&#34;https://github.com/davidmiller/dizzee/issues&#34;&gt;https://github.com/davidmiller/dizzee/issues&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>