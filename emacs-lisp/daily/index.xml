<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:34:13Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mhayashi1120/Emacs-wgrep</title>
    <updated>2022-09-20T01:34:13Z</updated>
    <id>tag:github.com,2022-09-20:/mhayashi1120/Emacs-wgrep</id>
    <link href="https://github.com/mhayashi1120/Emacs-wgrep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Writable grep buffer and apply the changes to files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wgrep.el&lt;/h1&gt; &#xA;&lt;h2&gt;Summary:&lt;/h2&gt; &#xA;&lt;p&gt;wgrep allows you to edit a grep buffer and apply those changes to the file buffer like &lt;code&gt;sed&lt;/code&gt; interactively. No need to learn sed script, just learn Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Install:&lt;/h2&gt; &#xA;&lt;p&gt;Put this file into load-path&#39;ed directory, and byte compile it if desired. And put the following expression into your ~/.emacs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;wgrep)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage:&lt;/h2&gt; &#xA;&lt;p&gt;You can edit the text in the &lt;em&gt;grep&lt;/em&gt; buffer after typing &lt;code&gt;C-c C-p&lt;/code&gt; . After that the changed text is highlighted. The following keybindings are defined:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-e&lt;/code&gt;: Apply the changes to file buffers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-u&lt;/code&gt;: All changes are unmarked and ignored.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-d&lt;/code&gt;: Mark as delete to current line (including newline).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-r&lt;/code&gt;: Remove the changes in the region (these changes are not applied to the files. Of course, the remaining changes can still be applied to the files.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: Toggle read-only area.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-k&lt;/code&gt;: Discard all changes and exit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-x C-q&lt;/code&gt;: Exit wgrep mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To save all buffers that wgrep has changed, run&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x wgrep-save-all-buffers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To save buffer automatically when &lt;code&gt;wgrep-finish-edit&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq wgrep-auto-save-buffer t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can change the default key binding to switch to wgrep.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq wgrep-enable-key &#34;r&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To apply all changes regardless of whether or not buffer is read-only.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq wgrep-change-readonly-file t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Trivial features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;wdired.el like interface.&lt;/li&gt; &#xA; &lt;li&gt;Support GNU grep &lt;code&gt;--context&lt;/code&gt; (&lt;code&gt;-A&lt;/code&gt; &lt;code&gt;-B&lt;/code&gt; and &lt;code&gt;-C&lt;/code&gt;) option.&lt;/li&gt; &#xA; &lt;li&gt;Can handle too many files.&lt;/li&gt; &#xA; &lt;li&gt;Can handle newline insertion in &lt;em&gt;grep&lt;/em&gt; buffer.&lt;/li&gt; &#xA; &lt;li&gt;Delete whole line include newline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Similar software:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/sed/&#34;&gt;GNU sed&lt;/a&gt; &lt;a href=&#34;https://github.com/syohex/emacs-helm-ag&#34;&gt;helm-ag&lt;/a&gt; has a similar feature.&lt;/p&gt; &#xA;&lt;h2&gt;History:&lt;/h2&gt; &#xA;&lt;p&gt;This program was forked from Matsushita Akihisa&#39;s &lt;a href=&#34;http://www.bookshelf.jp/elc/grep-edit.el&#34;&gt;grep-edit.el v2.11&lt;/a&gt;. As this website is now inaccessible, &lt;a href=&#34;https://www.emacswiki.org/emacs/grep-edit.el&#34;&gt;emacswiki.org&#39;s&lt;/a&gt; copy may be consulted.&lt;/p&gt; &#xA;&lt;p&gt;Imported version can be downloaded from this orphan commit: &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep/tree/import-original-author/&#34;&gt;https://github.com/mhayashi1120/Emacs-wgrep/tree/import-original-author/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Following added implementations and differences.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support GNU grep context option -A -B and -C&lt;/li&gt; &#xA; &lt;li&gt;Some bugfix. (wrong coloring text etc..)&lt;/li&gt; &#xA; &lt;li&gt;wdired.el like interface.&lt;/li&gt; &#xA; &lt;li&gt;Remove all advice.&lt;/li&gt; &#xA; &lt;li&gt;Bind to local variables. (grep-a-lot.el works well)&lt;/li&gt; &#xA; &lt;li&gt;After save buffer, colored face will be removed.&lt;/li&gt; &#xA; &lt;li&gt;Change face easy to see.&lt;/li&gt; &#xA; &lt;li&gt;Reinforce checking error.&lt;/li&gt; &#xA; &lt;li&gt;Support removing whole line include new-line.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pashky/restclient.el</title>
    <updated>2022-09-20T01:34:13Z</updated>
    <id>tag:github.com,2022-09-20:/pashky/restclient.el</id>
    <link href="https://github.com/pashky/restclient.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP REST client tool for emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;restclient.el&lt;/h1&gt; &#xA;&lt;p&gt;This is a tool to manually explore and test HTTP REST webservices. Runs queries from a plain-text query sheet, displays results as a pretty-printed XML, JSON and even images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/QtCID.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;You can easily install &lt;code&gt;restclient&lt;/code&gt; using &lt;code&gt;package.el&lt;/code&gt; from &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, deploy &lt;code&gt;restclient.el&lt;/code&gt; into your site-lisp as usual, then add &lt;code&gt;(require &#39;restclient)&lt;/code&gt; to your Emacs start-up file.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, you can prepare a text file with queries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;restclient-mode&lt;/code&gt; is a major mode which does a bit of highlighting and supports a few additional keypresses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-c&lt;/code&gt;: runs the query under the cursor, tries to pretty-print the response (if possible)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-r&lt;/code&gt;: same, but doesn&#39;t do anything with the response, just shows the buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-v&lt;/code&gt;: same as &lt;code&gt;C-c C-c&lt;/code&gt;, but doesn&#39;t switch focus to other window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: jump to the previous query&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-n&lt;/code&gt;: jump to the next query&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-.&lt;/code&gt;: mark the query under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-u&lt;/code&gt;: copy query under the cursor as a curl command&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-g&lt;/code&gt;: start a &lt;a href=&#34;https://emacs-helm.github.io/helm/&#34;&gt;helm&lt;/a&gt; session with sources for variables and requests (if helm is available, of course)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c n n&lt;/code&gt;: narrow to region of current request (including headers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TAB&lt;/code&gt;: hide/show current request body, only if&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-a&lt;/code&gt;: show all collapsed regions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-i&lt;/code&gt;: show information on resclient variables at point&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The last two functions are implemented as &lt;code&gt;restclient-outline-mode&lt;/code&gt; minor mode, which is activated by default via hook for major mode. Remove this hook using &lt;code&gt;(remove-hook &#39;restclient-mode-hook &#39;restclient-outline-mode)&lt;/code&gt; if you don&#39;t wish to have this behaviour, or it clashes with any other binding for &lt;code&gt;TAB&lt;/code&gt; like autocomplete.&lt;/p&gt; &#xA;&lt;p&gt;Query file example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# -*- restclient -*-&#xA;#&#xA;# Gets  all Github APIs, formats JSON, shows response status and headers underneath.&#xA;# Also sends a User-Agent header, because the Github API requires this.&#xA;#&#xA;GET https://api.github.com&#xA;User-Agent: Emacs Restclient&#xA;&#xA;#&#xA;# XML is supported - highlight, pretty-print&#xA;#&#xA;GET http://www.redmine.org/issues.xml?limit=10&#xA;&#xA;#&#xA;# It can even show an image!&#xA;#&#xA;GET http://upload.wikimedia.org/wikipedia/commons/6/63/Wikipedia-logo.png&#xA;#&#xA;# A bit of json GET, you can pass headers too&#xA;#&#xA;GET http://jira.atlassian.com/rest/api/latest/issue/JRA-9&#xA;User-Agent: Emacs24&#xA;Accept-Encoding: compress, gzip&#xA;&#xA;#&#xA;# Post works too, entity just goes after an empty line. Same is for PUT.&#xA;#&#xA;POST https://jira.atlassian.com/rest/api/2/search&#xA;Content-Type: application/json&#xA;&#xA;{&#xA;        &#34;jql&#34;: &#34;project = HCPUB&#34;,&#xA;        &#34;startAt&#34;: 0,&#xA;        &#34;maxResults&#34;: 15,&#xA;        &#34;fields&#34;: [&#xA;                &#34;summary&#34;,&#xA;                &#34;status&#34;,&#xA;                &#34;assignee&#34;&#xA;        ]&#xA;}&#xA;#&#xA;# And delete, will return not-found error...&#xA;#&#xA;DELETE https://jira.atlassian.com/rest/api/2/version/20&#xA;&#xA;# Set a variable to the value of your ip address using a jq expression&#xA;GET http://httpbin.org/ip&#xA;-&amp;gt; jq-set-var :my-ip .origin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lines starting with &lt;code&gt;#&lt;/code&gt; are considered comments AND also act as separators.&lt;/p&gt; &#xA;&lt;p&gt;HTTPS and image display requires additional dll&#39;s on windows (libtls, libpng, libjpeg etc), which are not in the emacs distribution.&lt;/p&gt; &#xA;&lt;p&gt;More examples can be found in the &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h1&gt;In-buffer variables&lt;/h1&gt; &#xA;&lt;p&gt;You declare a variable like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar = the value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar := (some (artbitrary &#39;elisp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In second form, the value of variable is evaluated as Emacs Lisp form immediately. Evaluation of variables is done from top to bottom. Only one one-line form for each variable is allowed, so use &lt;code&gt;(progn ...)&lt;/code&gt; and some virtual line wrap mode if you need more. There&#39;s no way to reference earlier declared &lt;em&gt;restclient&lt;/em&gt; variables, but you can always use &lt;code&gt;setq&lt;/code&gt; to save state.&lt;/p&gt; &#xA;&lt;p&gt;Variables can be multiline too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar = &amp;lt;&amp;lt;&#xA;Authorization: :my-auth&#xA;Content-Type: application/json&#xA;User-Agent: SomeApp/1.0&#xA;#&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar := &amp;lt;&amp;lt;&#xA;(some-long-elisp&#xA;    (code spanning many lines)&#xA;#&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; is used to mark a start of multiline value, the actual value is starting on the next line then. The end of such variable value is the same comment marker &lt;code&gt;#&lt;/code&gt; and last end of line doesn&#39;t count, same is for request bodies.&lt;/p&gt; &#xA;&lt;p&gt;After the var is declared, you can use it in the URL, the header values and the body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Some generic vars&#xA;&#xA;:my-auth = 319854857345898457457&#xA;:my-headers = &amp;lt;&amp;lt;&#xA;Authorization: :my-auth&#xA;Content-Type: application/json&#xA;User-Agent: SomeApp/1.0&#xA;#&#xA;&#xA;# Update a user&#39;s name&#xA;&#xA;:user-id = 7&#xA;:the-name := (format &#34;%s %s %d&#34; &#39;Neo (md5 &#34;The Chosen&#34;) (+ 100 1))&#xA;&#xA;PUT http://localhost:4000/users/:user-id/&#xA;:my-headers&#xA;&#xA;{ &#34;name&#34;: &#34;:the-name&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Varaibles can also be set based on the body of a response using the per-request hooks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# set a variable :my-ip to the value of your ip address using elisp evaluated in the result buffer&#xA;GET http://httpbin.org/ip&#xA;-&amp;gt; run-hook (restclient-set-var &#34;:my-ip&#34; (cdr (assq &#39;origin (json-read))))&#xA;&#xA;# same thing with jq if it&#39;s installed&#xA;GET http://httpbin.org/ip &#xA;-&amp;gt; jq-set-var :my-ip .origin&#xA;&#xA;# set a variable :my-var using a more complex jq expression (requires jq-mode)&#xA;GET https://httpbin.org/json&#xA;-&amp;gt; jq-set-var :my-var .slideshow.slides[0].title&#xA;&#xA;# hooks come before the body on POST&#xA;POST http://httpbin.org/post&#xA;-&amp;gt; jq-set-var :test .json.test&#xA;&#xA;{&#34;test&#34;: &#34;foo&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;File uploads&lt;/h1&gt; &#xA;&lt;p&gt;Restclient now allows to specify file path to use as a body, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://httpbin.org/post&#xA;Content-type: text/plain&#xA;&#xA;&amp;lt; /etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caveats:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiline variables can be used in headers or body. In URL too, but it doesn&#39;t make sense unless it was long elisp expression evaluating to simple value.&lt;/li&gt; &#xA; &lt;li&gt;Yet same variable cannot contain both headers and body, it must be split into two and separated by empty line as usual.&lt;/li&gt; &#xA; &lt;li&gt;Variables now can reference each other, substitution happens in several passes and stops when there&#39;s no more variables. Please avoid circular references. There&#39;s customizable safeguard of maximum 10 passes to prevent hanging in this case, but it will slow things down.&lt;/li&gt; &#xA; &lt;li&gt;Variable declaration only considered above request line.&lt;/li&gt; &#xA; &lt;li&gt;Be careful of what you put in that elisp. No security checks are done, so it can format your hardrive. If there&#39;s a parsing or evaluation error, it will tell you in the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Elisp variables can evaluate to values containing other variable references, this will be substituted too. But you cannot substitute parts of elisp expressions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;There are several variables available to customize &lt;code&gt;restclient&lt;/code&gt; to your liking. Also, all font lock faces are now customizable in &lt;code&gt;resclient-faces&lt;/code&gt; group too.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-log-request&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: t&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Determines whether restclient logs to the *Messages* buffer.&lt;/p&gt; &#xA;&lt;p&gt;If non-nil, restclient requests will be logged. If nil, they will not be.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-same-buffer-response&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: t&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Re-use same buffer for responses or create a new one each time.&lt;/p&gt; &#xA;&lt;p&gt;If non-nil, re-use the buffer named by &lt;code&gt;rest-client-buffer-response-name&lt;/code&gt; for all requests.&lt;/p&gt; &#xA;&lt;p&gt;If nil, generate a buffer name based on the request type and url, and increment it for subsequent requests.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;GET http://example.org&lt;/code&gt; would produce the following buffer names on 3 subsequent calls:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;*HTTP GET http://example.org*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*HTTP GET http://example.org*&amp;lt;2&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*HTTP GET http://example.org*&amp;lt;3&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;restclient-same-buffer-response-name&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: *HTTP Response*&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Name for response buffer to be used when &lt;code&gt;restclient-same-buffer-response&lt;/code&gt; is true.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-inhibit-cookies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: nil&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inhibit restclient from sending cookies implicitly.&lt;/p&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comment lines &lt;code&gt;#&lt;/code&gt; act as end of entity. Yes, that means you can&#39;t post shell script or anything with hashes as PUT/POST entity. I&#39;m fine with this right now, but may use more unique separator in future.&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m not sure if it handles different encodings, I suspect it won&#39;t play well with anything non-ascii. I&#39;m yet to figure it out.&lt;/li&gt; &#xA; &lt;li&gt;Variable usages are not highlighted&lt;/li&gt; &#xA; &lt;li&gt;If your Emacs is older than 26.1, some GET requests to &lt;code&gt;localhost&lt;/code&gt; might fail because of that &lt;a href=&#34;http://debbugs.gnu.org/cgi/bugreport.cgi?bug=17976&#34;&gt;bug&lt;/a&gt; in Emacs/url.el. As a workaround you can use &lt;code&gt;127.0.0.1&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;History&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;01/Aug/2016&lt;/em&gt; Added ability to narrow to region&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;06/Apr/2016&lt;/em&gt; Helm sources for variables and requests added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;06/Apr/2016&lt;/em&gt; File uploads! See upstairs for syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;06/Apr/2016&lt;/em&gt; Added customizable faces for all syntax highlighting, so it can be used in themes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;05/Apr/2016&lt;/em&gt; Added ability to declare multi-line variables (e.g. set of headers repeated for each request) and substitute variable values recursively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;25/Mar/2015&lt;/em&gt; Chop last newline from request body. If you really need to send one, just add one more, otherwise url-encoded POSTs will fail.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;15/Jun/2013&lt;/em&gt; Added support for variables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Related 3rd party packages&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iquiw/company-restclient&#34;&gt;company-restclient&lt;/a&gt;: It provides auto-completion for HTTP methods and headers in restclient-mode. Completion source is given by know-your-http-well.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alf/ob-restclient.el&#34;&gt;ob-restclient&lt;/a&gt;: An extension to restclient.el for emacs that provides org-babel support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bounceme/restclient.vim&#34;&gt;restclient.vim&lt;/a&gt;: Brings the restclient to vim! Responses display in vim&#39;s internal pager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Public domain, do whatever you want.&lt;/p&gt; &#xA;&lt;h1&gt;Author&lt;/h1&gt; &#xA;&lt;p&gt;Pavel Kurnosov &lt;a href=&#34;mailto:pashky@gmail.com&#34;&gt;pashky@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cask/cask</title>
    <updated>2022-09-20T01:34:13Z</updated>
    <id>tag:github.com,2022-09-20:/cask/cask</id>
    <link href="https://github.com/cask/cask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project management tool for Emacs&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Cask&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/cask/cask/actions][https://github.com/cask/cask/actions/workflows/test.yml/badge.svg]] [[https://melpa.org/#/cask][https://melpa.org/packages/cask-badge.svg]] [[https://stable.melpa.org/#/cask][https://stable.melpa.org/packages/cask-badge.svg]] #+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/cask/cask/master/cask_small.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cask can be likened to =venv= or =maven= for Emacs Lisp development, although, as with all things emacs, is decidedly less sophisticated (but no less arcane).&lt;/p&gt; &#xA;&lt;p&gt;Cask provisions dependencies within a sandbox via a user-defined &#34;Cask&#34; file analogous to =requirements-dev.txt= or =pom.xml=.&lt;/p&gt; &#xA;&lt;p&gt;Cask does not absolve you of having to learn emacs&#39;s command flags. Cask only constructs the sandbox, one for each version of emacs you choose to test.&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src shell git clone &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;https://github.com/cask/cask&lt;/a&gt; make -C cask install #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Not-so-quick start With just this baseline &#34;Cask&#34; file, you can run most of the commands described in [[http://cask.readthedocs.io]].&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (source gnu) (source melpa)&lt;/p&gt; &#xA;&lt;p&gt;(package-file &#34;your-main-file.el&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To run ert tests under an older emacs:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh EMACS=emacs-25.3 cask emacs --batch -l mytest.el -f ert-run-tests-batch #+end_src&lt;/p&gt; &#xA;&lt;p&gt;/We have deprecated the/ &lt;del&gt;cask exec&lt;/del&gt; /invocation, and consequently no longer recommend/ &lt;del&gt;cask exec ert-runner&lt;/del&gt; /nor/ &lt;del&gt;cask exec ecukes&lt;/del&gt; /./&lt;/p&gt; &#xA;&lt;p&gt;** Typical Makefile Usage&lt;/p&gt; &#xA;&lt;p&gt;Egregious boilerplate follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src makefile :tangle README.makefile export EMACS ?= $(shell which emacs) CASK_DIR := $(shell cask package-directory)&lt;/p&gt; &#xA;&lt;p&gt;$(CASK_DIR): Cask cask install @touch $(CASK_DIR)&lt;/p&gt; &#xA;&lt;p&gt;.PHONY: cask cask: $(CASK_DIR)&lt;/p&gt; &#xA;&lt;p&gt;.PHONY: compile compile: cask ! (cask eval &#34;(let ((byte-compile-error-on-warn t)) &lt;br&gt; (cask-cli/build))&#34; 2&amp;gt;&amp;amp;1 &lt;br&gt; | egrep -a &#34;(Warning|Error):&#34;) ; &lt;br&gt; (ret=$$? ; cask clean-elc &amp;amp;&amp;amp; exit $$ret)&lt;/p&gt; &#xA;&lt;p&gt;.PHONY: test test: compile cask emacs --batch -L ./test -l readme-test -f ert-run-tests-batch #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Typical CI Usage&lt;/p&gt; &#xA;&lt;p&gt;Cask, in conjunction with [[https://github.com/purcell/setup-emacs][setup-emacs]], is commonly used in Github Actions. Egregious boilerplate follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src yaml :tangle .github/workflows/readme.yml jobs: test: runs-on: ubuntu-latest strategy: matrix: emacs-version: - 26.3 - 27.2 - 28.1 steps: - uses: actions/checkout@v2 - uses: purcell/setup-emacs@master with: version: ${{ matrix.emacs-version }} - uses: actions/cache@v2 id: cache-cask-packages with: path: .cask key: cache-cask-packages-000 - uses: actions/cache@v2 id: cache-cask-executable with: path: ~/.cask key: cache-cask-executable-000 - uses: cask/setup-cask@master if: steps.cache-cask-executable.outputs.cache-hit != &#39;true&#39; with: version: snapshot - run: echo &#34;$HOME/.cask/bin&#34; &amp;gt;&amp;gt; $GITHUB_PATH #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Frequently Asked Questions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why does install &#34;not know where to install&#34;? :: After assaying cross-platform schemes like =systemd-path= and =XDG_DATA_HOME= to figure out a suitable install directory, Cask resorts to the old, unspoken standbys of =&lt;del&gt;/.local/bin= and =&lt;/del&gt;/bin=. If neither of those are present, then =make install= gives up with that error. I couldn&#39;t determine a more standard method last I asked stackoverflow.com.&lt;/li&gt; &#xA; &lt;li&gt;Why is everything you say inconsistent with cask.readthedocs.io? :: I would disregard nearly everything at cask.readthedocs.io, especially the [[https://cask.readthedocs.io/en/latest/guide/usage.html#quickstart][Quickstart page]]. In particular, I would not =require cask= in your dot.emacs since cask is now largely a command-line tool independent of whatever you do within emacs. If you are calling =cask-initialize= in your dot.emacs or harken back to the bygone era of [[https://github.com/rdallasgray/pallet][pallet]], I&#39;m afraid you&#39;re on your own.&lt;/li&gt; &#xA; &lt;li&gt;Why must I replicate dependencies in the Cask file? :: You mustn&#39;t, but probably more than half of Cask deployments in the wild needlessly do. =cask list= automatically shows your package&#39;s dependencies if you specify them /pro forma/ in a =Package-Requires= header. The oft-confused [[https://cask.readthedocs.io/en/latest/guide/dsl.html#el.function.development][development stanza]] is analogous to =requirements-dev.txt=. Only packages required by your testing apparatus, e.g., =ert-runner=, should be added there.&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t Cask make things more complicated? :: Yes, because it forces you to test your package under multiple versions of emacs. Most packages don&#39;t do any testing at all, which is why emacs has lost credibility with the computing public.&lt;/li&gt; &#xA; &lt;li&gt;Is Cask a vassal of MELPA? :: Yes, Cask&#39;s early development history is intertwined with that of MELPA&#39;s [[https://github.com/melpa/package-build/blob/master/package-build.el][package-build]]. Cask employs that module for all packaging tasks including dependency provisioning.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>