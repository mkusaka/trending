<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-12T01:39:08Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>myrjola/diminish.el</title>
    <updated>2022-08-12T01:39:08Z</updated>
    <id>tag:github.com,2022-08-12:/myrjola/diminish.el</id>
    <link href="https://github.com/myrjola/diminish.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Diminished modes are minor modes with no modeline display&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/packages/diminish.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/diminish.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/devel/diminish.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/diminish.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/diminish&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/diminish-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/diminish&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/diminish-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;diminish.el&lt;/h1&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When we diminish a mode, we are saying we want it to continue doing its work for us, but we no longer want to be reminded of it. It becomes a night worker, like a janitor; it becomes an invisible man; it remains a component, perhaps an important one, sometimes an indispensable one, of the mechanism that maintains the day-people&#39;s world, but its place in their thoughts is diminished, usually to nothing. As we grow old we diminish more and more such thoughts, such people, usually to nothing. -- Will Mengarini&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This package implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.&lt;/p&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;diminish)&#xA;&#xA;(diminish &#39;rainbow-mode)                                       ; Hide lighter from mode-line&#xA;(diminish &#39;rainbow-mode &#34; Rbow&#34;)                               ; Replace rainbow-mode lighter with &#34; Rbow&#34;&#xA;(diminish &#39;rainbow-mode &#39;rainbow-mode-lighter)                 ; Use raingow-mode-lighter variable value&#xA;(diminish &#39;rainbow-mode &#39;(&#34; &#34; &#34;R-&#34; &#34;bow&#34;))                     ; Replace rainbow-mode lighter with &#34; R-bow&#34;&#xA;(diminish &#39;rainbow-mode &#39;((&#34; &#34; &#34;R&#34;) &#34;/&#34; &#34;bow&#34;))                ; Replace rainbow-mode lighter with &#34; R/bow&#34;&#xA;(diminish &#39;rainbow-mode &#39;(:eval (format &#34; Rbow/%s&#34; (+ 2 3))))  ; Replace rainbow-mode lighter with &#34; Rbow/5&#34;&#xA;(diminish &#39;rainbow-mode                                        ; Replace rainbow-mode lighter with greened &#34; Rbow&#34;&#xA;  &#39;(:propertize &#34; Rbow&#34; face &#39;(:foreground &#34;green&#34;)))&#xA;(diminish &#39;rainbow-mode                                        ; If rainbow-mode-mode-linep is non-nil &#34; Rbow/t&#34;&#xA;  &#39;(rainbow-mode-mode-linep &#34; Rbow/t&#34; &#34; Rbow/nil&#34;))&#xA;(diminish &#39;rainbow-mode &#39;(3 &#34; Rbow&#34; &#34;/&#34; &#34;s&#34;))                  ; Replace rainbow-mode lighter with &#34; Rb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ref: &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Data.html&#34;&gt;Emacs manual - The Data Structure of the Mode Line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;John Wiegley&#39;s &lt;a href=&#34;https://github.com/jwiegley/use-package#diminishing-and-delighting-minor-modes&#34;&gt;use-package&lt;/a&gt; macro also has support for diminish.el.&lt;/p&gt; &#xA;&lt;h1&gt;Copyright Assignment&lt;/h1&gt; &#xA;&lt;p&gt;Diminish is subject to the same &lt;a href=&#34;https://www.fsf.org/licensing/contributor-faq&#34;&gt;copyright assignment&lt;/a&gt; policy as GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;https://www.gnu.org/prep/maintain/html_node/Legally-Significant.html#Legally-Significant&#34;&gt;legally significant&lt;/a&gt; contributions can only be merged after the author has completed their paperwork. Please ask for the request form, and we&#39;ll send it to you.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgments&lt;/h1&gt; &#xA;&lt;p&gt;diminish.el was created by Will Mengarini on 19th of February 1998 and is now maintained by &lt;a href=&#34;https://github.com/myrjola&#34;&gt;Martin Yrjölä&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skeeto/visual-indentation-mode</title>
    <updated>2022-08-12T01:39:08Z</updated>
    <id>tag:github.com,2022-08-12:/skeeto/visual-indentation-mode</id>
    <link href="https://github.com/skeeto/visual-indentation-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs minor mode to visualize source indentation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Emacs visual-indentation-mode&lt;/h1&gt; &#xA;&lt;p&gt;This minor mode highlights indentation. It looks like this,&lt;/p&gt; &#xA;&lt;h3&gt;Lisp&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/883Uq.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Java&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/KKMs3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;Everything falls apart when indentation is done by tabs. Since this is just a proof of concept, and only losers use tabs, I won&#39;t be fixing this.&lt;/p&gt; &#xA;&lt;h3&gt;See also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspired by the code presentation format here: &lt;a href=&#34;http://www.infoq.com/presentations/Bootstrapping-Clojure&#34;&gt;Bootstrapping Clojure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antonj/Highlight-Indentation-for-Emacs/&#34;&gt;Highlighting indentation for Emacs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>bbatsov/helm-projectile</title>
    <updated>2022-08-12T01:39:08Z</updated>
    <id>tag:github.com,2022-08-12:/bbatsov/helm-projectile</id>
    <link href="https://github.com/bbatsov/helm-projectile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Helm UI for Projectile&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/helm-projectile&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/helm-projectile-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/helm-projectile&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/helm-projectile-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Helm Projectile&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt; can be integrated with &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;Helm&lt;/a&gt; via &lt;code&gt;helm-source-projectile-projects&lt;/code&gt;, &lt;code&gt;helm-source-projectile-files-list&lt;/code&gt;, &lt;code&gt;helm-source-projectile-buffers-list&lt;/code&gt; and &lt;code&gt;helm-source-projectile-recentf-list&lt;/code&gt; sources (available in &lt;code&gt;helm-projectile.el&lt;/code&gt;). There is also an example function for calling Helm with the Projectile file source. You can call it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x helm-projectile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or even better - invoke the key binding &lt;kbd&gt;h&lt;/kbd&gt; in Projectile&#39;s keymap. Assuming you&#39;ve opted for one of the recommended keymap prefixes (&lt;code&gt;C-c p&lt;/code&gt; or &lt;code&gt;s-p&lt;/code&gt;), that would mean &lt;kbd&gt;C-c p h&lt;/kbd&gt; or &lt;kbd&gt;s-p h&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See Projectile&#39;s &lt;a href=&#34;https://docs.projectile.mx/projectile/installation.html#installation-via-package-el&#34;&gt;installation docs&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install helm-projectile is via &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;package.el&lt;/h3&gt; &#xA;&lt;h4&gt;MELPA&lt;/h4&gt; &#xA;&lt;p&gt;You can install a snapshot version of helm-projectile from the &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repository. The version of Projectile there will always be up-to-date, but it might be unstable (albeit rarely).&lt;/p&gt; &#xA;&lt;h4&gt;MELPA Stable&lt;/h4&gt; &#xA;&lt;p&gt;You can install the last stable version of helm-projectile from the &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h3&gt;el-get&lt;/h3&gt; &#xA;&lt;p&gt;helm-projectile is also available for installation from the &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;h3&gt;Emacs Prelude&lt;/h3&gt; &#xA;&lt;p&gt;helm-projectile is naturally part of the &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt;. If you&#39;re a Prelude user - helm-projectile is already properly configured and ready for action.&lt;/p&gt; &#xA;&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;Users of Debian 9 or later or Ubuntu 16.04 or later may &lt;code&gt;apt install elpa-helm-projectile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For those who prefer helm to ido/ivy, the command &lt;code&gt;helm-projectile-switch-project&lt;/code&gt; can be used to replace &lt;code&gt;projectile-switch-project&lt;/code&gt; to switch project. Please note that this is different from simply setting &lt;code&gt;projectile-completion-system&lt;/code&gt; to &lt;code&gt;helm&lt;/code&gt;, which just enables projectile to use the Helm completion to complete a project name. The benefit of using &lt;code&gt;helm-projectile-switch-project&lt;/code&gt; is that on any selected project we can fire many actions, not limited to just the &#34;switch to project&#34; action, as in the case of using helm completion by setting &lt;code&gt;projectile-completion-system&lt;/code&gt; to &lt;code&gt;helm&lt;/code&gt;. Currently, there are five actions: &#34;Switch to project&#34;, &#34;Open Dired in project&#39;s directory&#34;, &#34;Open project root in vc-dir or magit&#34;, &#34;Switch to Eshell&#34; and &#34;Grep project files&#34;. We will add more and more actions in the future.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;helm-projectile&lt;/code&gt; is capable of opening multiple files by marking the files with &lt;kbd&gt;C-SPC&lt;/kbd&gt; or mark all files with &lt;kbd&gt;M-a&lt;/kbd&gt;. Then, press &lt;kbd&gt;RET&lt;/kbd&gt;, all the selected files will be opened.&lt;/p&gt; &#xA;&lt;p&gt;Note that the helm grep is different from &lt;code&gt;projectile-grep&lt;/code&gt; because the helm grep is incremental. To use it, select your projects (select multiple projects by pressing C-SPC), press &#34;C-s&#34; (or &#34;C-u C-s&#34; for recursive grep), and type your regexp. As you type the regexp in the mini buffer, the live grep results are displayed incrementally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;helm-projectile&lt;/code&gt; also provides Helm versions of common Projectile commands. Currently, these are the supported commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-switch-project&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-find-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-find-file-in-known-projects&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-find-file-dwim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-find-dir&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-recentf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-switch-to-buffer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-grep&lt;/code&gt; (can be used for both grep or ack)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-ag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm-projectile-rg&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace Helm equivalent commands in &lt;code&gt;projectile-commander&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A virtual directory manager that is unique to Helm Projectile&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why should you use these commands compared with the normal Projectile commands, even if the normal commands use &lt;code&gt;helm&lt;/code&gt; as &lt;code&gt;projectile-completion-system&lt;/code&gt;? The answer is, Helm specific commands give more useful features. For example, &lt;code&gt;helm-projectile-switch-project&lt;/code&gt; allows opening a project in Dired, Magit or Eshell. &lt;code&gt;helm-projectile-find-file&lt;/code&gt; reuses actions in &lt;code&gt;helm-find-files&lt;/code&gt; (which is plenty) and able to open multiple files. Another reason is that in a large source tree, helm-projectile could be slow because it has to open all available sources.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use these commands, you have to activate it to replace the normal Projectile commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;; (setq helm-projectile-fuzzy-match nil)&#xA;(require &#39;helm-projectile)&#xA;(helm-projectile-on)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already activate helm-projectile key bindings and you don&#39;t like it, you can turn it off and use the normal Projectile bindings with command &lt;code&gt;helm-projectile-off&lt;/code&gt;. Similarly, if you want to disable fuzzy matching in Helm Projectile (it is enabled by default), you must set &lt;code&gt;helm-projectile-fuzzy-match&lt;/code&gt; to nil before loading &lt;code&gt;helm-projectile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To fully learn Helm Projectile and see what it is capable of, you should refer to this guide: &lt;a href=&#34;http://tuhdo.github.io/helm-projectile.html&#34;&gt;Exploring large projects with Projectile and Helm Projectile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Obviously you need to have Helm installed for this to work. :-)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bbatsov/helm-projectile/master/screenshots/helm-projectile.png&#34; alt=&#34;Helm-Projectile Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;The project is currently looking for more maintainers. I (Bozhidar) don&#39;t use Helm myself and don&#39;t have much time for the project, so I would definitely appreciate some help with it.&lt;/p&gt; &#xA;&lt;p&gt;Contact me via e-mail or twitter if you&#39;d like to become a co-maintainer.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Check out the project&#39;s &lt;a href=&#34;https://github.com/bbatsov/helm-projectile/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open&#34;&gt;issue list&lt;/a&gt; a list of unresolved issues. By the way - feel free to fix any of them and sent me a pull request. :-)&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/bbatsov/helm-projectile/contributors&#34;&gt;list&lt;/a&gt; of all the people who have contributed to the development of Projectile.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;A fairly extensive changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/bbatsov/helm-projectile/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We started keeping track of changes there after version 1.0.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2011-2020 Bozhidar Batsov and &lt;a href=&#34;https://github.com/bbatsov/helm-projectile/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the GNU General Public License, version 3&lt;/p&gt;</summary>
  </entry>
</feed>