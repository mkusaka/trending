<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-10T01:31:30Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jorgenschaefer/elpy</title>
    <updated>2022-12-10T01:31:30Z</updated>
    <id>tag:github.com,2022-12-10:/jorgenschaefer/elpy</id>
    <link href="https://github.com/jorgenschaefer/elpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Python Development Environment&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/jorgenschaefer/elpy/workflows/Tests/badge.svg?branch=master&#34;&gt;https://github.com/jorgenschaefer/elpy/workflows/Tests/badge.svg?branch=master&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/jorgenschaefer/elpy/actions?query=workflow%3ATests&#34;&gt;https://github.com/jorgenschaefer/elpy/actions?query=workflow%3ATests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://readthedocs.org/projects/elpy/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/elpy/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/?badge=latest&#34;&gt;https://elpy.readthedocs.io/en/latest/?badge=latest&lt;/a&gt; :alt: Documentation Status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://coveralls.io/repos/jorgenschaefer/elpy/badge.svg?branch=master&#34;&gt;https://coveralls.io/repos/jorgenschaefer/elpy/badge.svg?branch=master&lt;/a&gt; :target: &lt;a href=&#34;https://coveralls.io/r/jorgenschaefer/elpy?branch=master&#34;&gt;https://coveralls.io/r/jorgenschaefer/elpy?branch=master&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://melpa.org/packages/elpy-badge.svg&#34;&gt;https://melpa.org/packages/elpy-badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://melpa.org/#/elpy&#34;&gt;https://melpa.org/#/elpy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://stable.melpa.org/packages/elpy-badge.svg&#34;&gt;https://stable.melpa.org/packages/elpy-badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://stable.melpa.org/#/elpy&#34;&gt;https://stable.melpa.org/#/elpy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;========================== Elpy, the Emacs Python IDE&lt;/h1&gt; &#xA;&lt;p&gt;Elpy is an Emacs package to bring powerful Python editing to Emacs. It combines and configures a number of other packages, both written in Emacs Lisp as well as Python. Elpy is fully documented at &lt;code&gt;Readthedocs&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. _Readthedocs: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/index.html&#34;&gt;https://elpy.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;IMPORTANT NOTE: Looking for a maintainer&lt;/h1&gt; &#xA;&lt;p&gt;I find myself (@galaunay, current maintainer), unable to maintain Elpy at the moment, and probably for a while. If you are interested in getting involved in Elpy, please contact me by mail, &lt;strong&gt;the project definitely needs you&lt;/strong&gt; !&lt;/p&gt; &#xA;&lt;p&gt;In the meantime, I will keep an eye on the PRs to integrate any fix and/or new features proposed, but I will definitely not be able to treat the issues in a satisfying manner. If you are stuck with an issue, please have a look at the &lt;code&gt;documentation&lt;/code&gt;&lt;em&gt;, there is a lot of answers there. @gfederix also made some bug fixing in his &lt;code&gt;fork&lt;/code&gt;&lt;/em&gt;, so you can try using this version of Elpy.&lt;/p&gt; &#xA;&lt;p&gt;.. _documentation: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/index.html&#34;&gt;https://elpy.readthedocs.io/en/latest/index.html&lt;/a&gt; .. _fork: &lt;a href=&#34;https://github.com/gfederix/elpy&#34;&gt;https://github.com/gfederix/elpy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Code completion&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Code Navigation&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Interactive Python shell&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Virtualenv support&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;On-the-fly syntax checking&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Access to documentation&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Debugging&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Testing&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Profiling&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Snippet Expansion&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Code hinting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _Code completion: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#completion&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#completion&lt;/a&gt; .. _Code Navigation: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#navigation&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#navigation&lt;/a&gt; .. _On-the-fly syntax checking: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#syntax-checking&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#syntax-checking&lt;/a&gt; .. _Interactive Python shell: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#interactive-python&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#interactive-python&lt;/a&gt; .. _Access to documentation: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#documentation&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#documentation&lt;/a&gt; .. _Debugging: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#debugging&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#debugging&lt;/a&gt; .. _Testing: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#testing&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#testing&lt;/a&gt; .. _Profiling: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#profiling&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#profiling&lt;/a&gt; .. _Virtualenv support: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/concepts.html#virtual-envs&#34;&gt;https://elpy.readthedocs.io/en/latest/concepts.html#virtual-envs&lt;/a&gt; .. _Snippet Expansion: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#snippets&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#snippets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Elpy is available on Melpa, the most straightforward way to install it is to use &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;(use-package elpy :ensure t :init (elpy-enable))&lt;/p&gt; &#xA;&lt;p&gt;For other installation alternatives, see the documentation section &lt;code&gt;Installation&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. _Installation: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/introduction.html#installation&#34;&gt;https://elpy.readthedocs.io/en/latest/introduction.html#installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;Once installed, Elpy will automatically provide code completion, syntax error highlighting and code hinting (in the modeline) for python files. Elpy offers a lot of features, but the following keybindings should be enough to get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;:kbd:&lt;code&gt;C-c C-c&lt;/code&gt; evaluates the current python script (or region if something is selected) in an interactive python shell. The python shell is automatically displayed aside of your script.&lt;/li&gt; &#xA; &lt;li&gt;:kbd:&lt;code&gt;C-RET&lt;/code&gt; evaluates the current statement (current line plus the following nested lines).&lt;/li&gt; &#xA; &lt;li&gt;:kbd:&lt;code&gt;C-c C-z&lt;/code&gt; switches between your script and the interactive shell.&lt;/li&gt; &#xA; &lt;li&gt;:kbd:&lt;code&gt;C-c C-d&lt;/code&gt; displays documentation for the thing under cursor. The documentation will pop in a different buffer, that can be closed with :kbd:&lt;code&gt;q&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please have a look at the documentation at &lt;code&gt;Readthedocs&lt;/code&gt;_ if you want to know more about what Elpy can do.&lt;/p&gt; &#xA;&lt;p&gt;.. _Readthedocs: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/index.html&#34;&gt;https://elpy.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;External resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Emacs: The Best Python Editor?&lt;/code&gt;_ by Jon Fincher&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Managing a Python development environment in Emacs&lt;/code&gt;_ by Diego Fern√°ndez Giraldo&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Configuring GNU emacs with elpy on MacOS&lt;/code&gt;_ by Kenneth H. East&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _Managing a Python development environment in Emacs: &lt;a href=&#34;https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a&#34;&gt;https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a&lt;/a&gt; .. _Emacs: The Best Python Editor?: &lt;a href=&#34;https://realpython.com/emacs-the-best-python-editor&#34;&gt;https://realpython.com/emacs-the-best-python-editor&lt;/a&gt; .. _Configuring GNU emacs with elpy on MacOS: &lt;a href=&#34;https://east.fm/posts/configuring-gnu-emacs-with-elpy-on-macos/index.html#&#34;&gt;https://east.fm/posts/configuring-gnu-emacs-with-elpy-on-macos/index.html#&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;For questions regarding Elpy, do not hesitate to open an &lt;code&gt;issue on github&lt;/code&gt;_ or visit us on IRC, channel &lt;code&gt;#emacs-elpy&lt;/code&gt; on &lt;code&gt;irc.freenode.net&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;.. _issue on github: &lt;a href=&#34;https://github.com/jorgenschaefer/elpy/issues/new&#34;&gt;https://github.com/jorgenschaefer/elpy/issues/new&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>edkolev/evil-lion</title>
    <updated>2022-12-10T01:31:30Z</updated>
    <id>tag:github.com,2022-12-10:/edkolev/evil-lion</id>
    <link href="https://github.com/edkolev/evil-lion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Evil align operator&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/edkolev/evil-lion&#34;&gt;&lt;img src=&#34;https://travis-ci.org/edkolev/evil-lion.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/evil-lion&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/evil-lion-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/23845388/6edda00c-07d0-11e7-9ea1-ffa945f03980.png&#34; alt=&#34;Emacs evil alignment operator&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;evil-lion&lt;/h1&gt; &#xA;&lt;p&gt;This package provides &lt;code&gt;gl&lt;/code&gt; and &lt;code&gt;gL&lt;/code&gt; align operators: &lt;code&gt;gl MOTION CHAR&lt;/code&gt; and right-align &lt;code&gt;gL MOTION CHAR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use CHAR &lt;code&gt;/&lt;/code&gt; to enter regular expression if a single character wouldn&#39;t suffice.&lt;/p&gt; &#xA;&lt;p&gt;Use CHAR &lt;code&gt;RET&lt;/code&gt; to align with align.el&#39;s default rules for the active major mode.&lt;/p&gt; &#xA;&lt;p&gt;Port of &lt;a href=&#34;https://github.com/tommcdo/vim-lion&#34;&gt;vim-lion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/23858247/7f33c4c6-0808-11e7-822c-e63c787c2f2b.png&#34; alt=&#34;scar&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;with &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package evil-lion&#xA;  :ensure t&#xA;  :config&#xA;  (evil-lion-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;without &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install RET evil-lion RET&lt;/code&gt;, then add in &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(evil-lion-mode)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Align with &lt;code&gt;gl MOTION CHAR&lt;/code&gt; or right-align with &lt;code&gt;gL MOTION CHAR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the align separator is &lt;code&gt;/&lt;/code&gt; you will be prompted for a regular expression instead of a plain character. If the align separator is &lt;code&gt;RET&lt;/code&gt; alignment will be performed with align.el&#39;s rules specific for the major mode.&lt;/p&gt; &#xA;&lt;p&gt;You can pass count &lt;code&gt;1&lt;/code&gt; to align on the first occurrence of &lt;code&gt;CHAR&lt;/code&gt;. To pass count, use: &lt;code&gt;COUNT gl MOTION CHAR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Example, left align &lt;code&gt;gl&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;After pressing &lt;code&gt;glip=&lt;/code&gt; (&lt;code&gt;gl&lt;/code&gt; is the operator, &lt;code&gt;ip&lt;/code&gt; text object paragraph, &lt;code&gt;=&lt;/code&gt; separator)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;one = 1&#xA;three = 3&#xA;fifteen = 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;one     = 1&#xA;three   = 3&#xA;fifteen = 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example, right align with &lt;code&gt;gL&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;After pressing &lt;code&gt;gLip,&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;one, two, three,&#xA;fifteen, sixteen, seventeen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;one,     two,     three,&#xA;fifteen, sixteen, seventeen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example, align with major mode&#39;s alignment rules:&lt;/h4&gt; &#xA;&lt;p&gt;In perl-mode, after pressing &lt;code&gt;glib RET&lt;/code&gt; (&lt;code&gt;RET&lt;/code&gt; is return key, not individal keys):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my %hash = (&#xA;   a =&amp;gt; 1,&#xA;   bbb =&amp;gt; 2,&#xA;   cccc =&amp;gt; 3,&#xA;&#xA;   a =&amp;gt; 1,&#xA;   bbb =&amp;gt; 2,&#xA;   cccccc =&amp;gt; 3&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $hash = (&#xA;   a    =&amp;gt; 1,&#xA;   bbb  =&amp;gt; 2,&#xA;   cccc =&amp;gt; 3,&#xA;&#xA;   a      =&amp;gt; 1,&#xA;   bbb    =&amp;gt; 2,&#xA;   cccccc =&amp;gt; 3&#xA;););&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example, align on the first occurrence of CHAR:&lt;/h4&gt; &#xA;&lt;p&gt;After pressing &lt;code&gt;1glip&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(red &#34;red&#34;&#xA;(teal-green &#34;#6fb593&#34;)&#xA;(wheat &#34;#b9c791&#34;)&#xA;(blue &#34;blue&#34;)&#xA;(cyan &#34;#54b6b6&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(red        &#34;red&#34;&#xA;(teal-green &#34;#6fb593&#34;)&#xA;(wheat      &#34;#b9c791&#34;)&#xA;(blue       &#34;blue&#34;)&#xA;(cyan       &#34;#54b6b6&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;Disable squeezing of spaces&lt;/h4&gt; &#xA;&lt;p&gt;By default, evil-lion will remove unnecessary spaces if there are any. To disable this behaviour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq evil-lion-squeeze-spaces nil) ;; default t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Change the default keys&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; use `g a` (mnemonic `align`)&#xA;;; these variables should be changed before (evil-lion-mode) is called&#xA;(setq evil-lion-left-align-key (kbd &#34;g a&#34;))&#xA;(setq evil-lion-right-align-key (kbd &#34;g A&#34;))&#xA;(evil-lion-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with&lt;code&gt;use-package&lt;/code&gt; and &lt;code&gt;bind-key&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(use-package evil-lion&#xA;  :ensure t&#xA;  :bind (:map evil-normal-state-map&#xA;         (&#34;g l &#34; . evil-lion-left)&#xA;         (&#34;g L &#34; . evil-lion-right)&#xA;         :map evil-visual-state-map&#xA;         (&#34;g l &#34; . evil-lion-left)&#xA;         (&#34;g L &#34; . evil-lion-right)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bind in prog modes only&lt;/h4&gt; &#xA;&lt;p&gt;Bind &lt;code&gt;evil-lion-left&lt;/code&gt; and &lt;code&gt;evil-lion-right&lt;/code&gt; to your liking. The &lt;code&gt;evil-lion-mode&lt;/code&gt; is just a convenience mode and should not be enalbed with this setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(evil-define-key &#39;normal prog-mode-map&#xA;  (kbd &#34;g l&#34;) &#39;evil-lion-left&#xA;  (kbd &#34;g L&#34;) &#39;evil-lion-right)&#xA;&#xA;(evil-define-key &#39;visual prog-mode-map&#xA;  (kbd &#34;g l&#34;) &#39;evil-lion-left&#xA;  (kbd &#34;g L&#34;) &#39;evil-lion-right)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>