<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-07T01:34:07Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skuro/plantuml-mode</title>
    <updated>2023-08-07T01:34:07Z</updated>
    <id>tag:github.com,2023-08-07:/skuro/plantuml-mode</id>
    <link href="https://github.com/skuro/plantuml-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A major mode for editing PlantUML sources in Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/plantuml-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/plantuml-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/plantuml-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/plantuml-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/skuro/plantuml-mode&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/skuro/plantuml-mode.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/skuro/plantuml-mode?branch=HEAD&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/skuro/plantuml-mode/badge.svg?branch=HEAD&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PlantUML mode for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skuro/plantuml-mode/master/banner.png&#34; alt=&#34;plantuml-mode in action&#34; title=&#34;Behold the beauty of text-based UML diagrams!&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“Pummel me all you want,&#34; I say. &#34;Pummel me to death, in fact. My answers will not change.&#34; The Invierno step back, frowning. &#34;You must love her very much,&#34; he says, not unkindly.”&lt;/p&gt; &#xA; &lt;p&gt;from &lt;a href=&#34;https://www.goodreads.com/book/show/11431896-the-bitter-kingdom&#34;&gt;The Bitter Kingdom - Fire and Thorns #3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;http://plantuml.sourceforge.net/&#34;&gt;PlantUML&lt;/a&gt; major mode for Emacs.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Guide&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install with &lt;code&gt;M-x package-install&amp;lt;RET&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enable mode for current buffer &lt;code&gt;M-x plantuml-mode&amp;lt;RET&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write some PlantUML:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;@startuml&#xA;Alice -&amp;gt; Bob: Authentication Request&#xA;Bob --&amp;gt; Alice: Authentication Response&#xA;&#xA;Alice -&amp;gt; Bob: Another authentication Request&#xA;Alice &amp;lt;-- Bob: Another authentication Response&#xA;@enduml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Preview diagrams with &lt;code&gt;C-c C-c&lt;/code&gt; (&lt;code&gt;plantuml-preview&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This may send information to &lt;code&gt;&#34;https://www.plantuml.com/plantuml&#34;&lt;/code&gt;! Check that &lt;code&gt;plantuml-default-exec-mode&lt;/code&gt; is configured correctly for your use case before previewing any sensitive material.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;    ;; Sample jar configuration&#xA;    (setq plantuml-jar-path &#34;/path/to/your/copy/of/plantuml.jar&#34;)&#xA;    (setq plantuml-default-exec-mode &#39;jar)&#xA;&#xA;    ;; Sample executable configuration&#xA;    (setq plantuml-executable-path &#34;/path/to/your/copy/of/plantuml.bin&#34;)&#xA;    (setq plantuml-default-exec-mode &#39;executable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/skuro/plantuml-mode/develop/#execution-modes&#34;&gt;Execution modes&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Make sure you have &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt; enabled in your &lt;code&gt;emacs.d&lt;/code&gt;. Then, you can just&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install&amp;lt;RET&amp;gt;&#xA;plantuml-mode&amp;lt;RET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, to enable preview you need to tell &lt;code&gt;plantuml-mode&lt;/code&gt; where to locate the PlantUML JAR file. By default it will look for it in &lt;code&gt;~/plantuml.jar&lt;/code&gt;, but you can specify any location with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x customize-variable&amp;lt;RET&amp;gt;&#xA;plantuml-jar-path&amp;lt;RET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also download the latest version of PlantUML straight into &lt;code&gt;plantuml-jar-path&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x plantuml-download-jar&amp;lt;RET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlight&lt;/li&gt; &#xA; &lt;li&gt;Autocompletion&lt;/li&gt; &#xA; &lt;li&gt;Preview of buffer or region&lt;/li&gt; &#xA; &lt;li&gt;[EXPERIMENTAL] Use either local JAR or remote server for preview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Enable the major mode&lt;/h1&gt; &#xA;&lt;p&gt;You can automatically enable &lt;code&gt;plantuml-mode&lt;/code&gt; for files with extension &lt;code&gt;.plantuml&lt;/code&gt; by adding the following to your &lt;code&gt;.emacsrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Enable plantuml-mode for PlantUML files&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.plantuml\\&#39;&#34; . plantuml-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you can always enable manually the major mode by typing &lt;code&gt;M-x plantuml-mode&lt;/code&gt; once in the desired PlantUML file buffer.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;You can tell &lt;code&gt;plantuml-mode&lt;/code&gt; to autocomplete the word before the cursor by typing &lt;code&gt;M-x plantuml-complete-symbol&lt;/code&gt;. This will open a popup with all the available completions as found in the list of keywords given by running PlantUML with the &lt;code&gt;-language&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;To render the PlantUML diagram within Emacs, you can hit &lt;code&gt;M-x plantuml-preview&lt;/code&gt;. This will run PlantUML and display the result in the &lt;code&gt;*PLANTUML-Preview*&lt;/code&gt; buffer. The format used to render the diagram is automagically chosen from what&#39;s supported by your Emacs. It will be one of the following, in order of preference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SVG&lt;/li&gt; &#xA; &lt;li&gt;PNG&lt;/li&gt; &#xA; &lt;li&gt;Unicode ASCII art&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The diagram will be either created from the selected region if one is available in the current buffer, or using the whole buffer otherwise.&lt;/p&gt; &#xA;&lt;p&gt;If you want to force a specific output format, you can customize the variable &lt;code&gt;plantuml-output-type&lt;/code&gt; to the value you prefer.&lt;/p&gt; &#xA;&lt;h2&gt;Default key bindings&lt;/h2&gt; &#xA;&lt;p&gt;The following shortcuts are enabled by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C-c C-c  plantuml-preview: renders a PlantUML diagram from the current buffer in the best supported format&#xA;&#xA;C-u C-c C-c  plantuml-preview in other window&#xA;&#xA;C-u C-u C-c C-c plantuml-preview in other frame&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integration with &lt;code&gt;org-mode&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;plantuml-mode&lt;/code&gt; to edit PlantUML source snippets within an &lt;a href=&#34;http://orgmode.org/&#34;&gt;&lt;code&gt;org-mode&lt;/code&gt;&lt;/a&gt; document. To do so, you need to first register it with the &lt;code&gt;plantuml&lt;/code&gt; language:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list&#xA;  &#39;org-src-lang-modes &#39;(&#34;plantuml&#34; . plantuml))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can edit a &lt;code&gt;plantuml&lt;/code&gt; code block with &lt;code&gt;plantuml-mode&lt;/code&gt; by hitting &lt;code&gt;C-&#39;&lt;/code&gt; while inside of the code block itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;#+BEGIN_SRC plantuml&#xA;  &amp;lt;hit C-c &#39; here to open a plantuml-mode buffer&amp;gt;&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When in the &lt;code&gt;plantuml-mode&lt;/code&gt; buffer you can then hit again &lt;code&gt;C-&#39;&lt;/code&gt; to return to the original &lt;code&gt;org-mode&lt;/code&gt; document.&lt;/p&gt; &#xA;&lt;h1&gt;Execution modes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;As of &lt;code&gt;v1.3.0&lt;/code&gt; support is added for switching execution mode. The following two modes are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;jar&lt;/code&gt; (default) to run PlantUML as a local JAR file. This is the traditional system used by &lt;code&gt;plantuml-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server&lt;/code&gt; (experimental) to let an instance of &lt;a href=&#34;https://github.com/plantuml/plantuml-server&#34;&gt;&lt;code&gt;plantuml-server&lt;/code&gt;&lt;/a&gt; render the preview&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;executable&lt;/code&gt; to run PlantUML as a local executable file. This is useful if your package manager provides a executable for PlantUML.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can customize &lt;code&gt;plantuml-default-exec-mode&lt;/code&gt; or run &lt;code&gt;plantuml-set-exec-mode&lt;/code&gt; from a &lt;code&gt;plantuml-mode&lt;/code&gt; buffer to switch modes.&lt;/p&gt; &#xA;&lt;h2&gt;Configure server rendering&lt;/h2&gt; &#xA;&lt;p&gt;When selecting &lt;code&gt;server&lt;/code&gt; execution modes, you can customize the following variable to set the server to use for rendering:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plantuml-server-url&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It defaults to &lt;code&gt;&#34;https://www.plantuml.com/plantuml&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Migration from &lt;code&gt;puml-mode&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;If you were previously using &lt;code&gt;puml-mode&lt;/code&gt;, you should change any reference to a &lt;code&gt;puml-..&lt;/code&gt; variable or function to its &lt;code&gt;plantuml-..&lt;/code&gt; counterpart. Most notably, &lt;code&gt;puml-plantuml-jar-path&lt;/code&gt; is now just &lt;code&gt;plantuml-jar-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deprecation warning&lt;/h2&gt; &#xA;&lt;p&gt;If &lt;code&gt;puml-mode&lt;/code&gt; is still being loaded by your Emacs, a Warning will be shown any time you open a PlantUML file. This is to remind you that you are running deprecated software. If you want to suppress the (intentionally) annoying warning, you can customize the variable &lt;code&gt;plantuml-suppress-deprecation-warning&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;h2&gt;Debug messages&lt;/h2&gt; &#xA;&lt;p&gt;As of &lt;code&gt;v0.6.2&lt;/code&gt; the following commands have been added to help resolving problems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plantuml-enable-debug&#xA;plantuml-disable-debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With debug enabled, the actual command used to invoke PlantUML is printed into a buffer called &lt;code&gt;*PLANTUML Messages*&lt;/code&gt;. You can inspect that buffer to make sure that PlantUML is properly set up, or use it to supply extra information when opening &lt;a href=&#34;https://github.com/skuro/plantuml-mode/issues&#34;&gt;issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Blank previews&lt;/h2&gt; &#xA;&lt;p&gt;If you are using SVG rendering and &lt;code&gt;plantuml-preview&lt;/code&gt; shows you an empty buffer, chances are something is wrong with the PlantUML output. While inside the preview buffer, hit &lt;code&gt;C-c C-c&lt;/code&gt; to switch to the textual mode and see if the output is valid SVG.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Development happens mostly on the &lt;code&gt;develop&lt;/code&gt; branch, which is released on MELPA at every commit. The &lt;code&gt;master&lt;/code&gt; branch is used to generate tags which are then released to &lt;a href=&#34;https://stable.melpa.org&#34;&gt;MELPA stable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to contribute to &lt;code&gt;plantuml-mode&lt;/code&gt; make sure to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;agree with the &lt;a href=&#34;https://raw.githubusercontent.com/skuro/plantuml-mode/develop/#License&#34;&gt;GPLv3+ licencing terms&lt;/a&gt; as they are mandated by Emacs&lt;/li&gt; &#xA; &lt;li&gt;install &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;&lt;code&gt;cask&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;always test your code and run the full test suite with &lt;code&gt;cask exec ert-runner&lt;/code&gt; (or just by &lt;code&gt;make&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ensure you always target &lt;code&gt;develop&lt;/code&gt; in your pull requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For collaborators who have merge access to the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make sure &lt;a href=&#34;https://raw.githubusercontent.com/skuro/plantuml-mode/develop/blob/develop/bin/set-version.sh&#34;&gt;&lt;code&gt;set-version.sh&lt;/code&gt;&lt;/a&gt; is run as part of your &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&#34;&gt;&lt;code&gt;pre-commit&lt;/code&gt; git hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;always merge PRs on the command line&lt;/li&gt; &#xA; &lt;li&gt;when releasing a new stable version, add the proper entry in the changelog within &lt;code&gt;plantuml-mode.el&lt;/code&gt; to ensure the right version is set for &lt;code&gt;plantuml-mode-version&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;This project stemmed from the great work of &lt;a href=&#34;http://zhangweize.wordpress.com/2010/09/20/update-plantuml-mode/&#34;&gt;Zhang Weize&lt;/a&gt;, and the current code still borrows a lot from it.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/svargellin&#34;&gt;Pavel G. Koukoushkin&lt;/a&gt; for implementing the preview functionality. Thanks to &lt;a href=&#34;https://github.com/rymndhng&#34;&gt;Raymond Huang&lt;/a&gt; for implementing the first drop of the indentation support.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/skuro/plantuml-mode/graphs/contributors&#34;&gt;all the awesome contributors&lt;/a&gt;, you rock!&lt;/p&gt; &#xA;&lt;h1&gt;See also&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://plantuml.com/&#34;&gt;PlantUML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexmurray/flycheck-plantuml&#34;&gt;&lt;code&gt;flycheck-plantuml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Released under the terms of &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GPLv3&lt;/a&gt; or (at your option) any later version. See &lt;a href=&#34;https://github.com/skuro/plantuml-mode/raw/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>