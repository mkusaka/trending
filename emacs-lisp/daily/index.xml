<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-26T01:26:09Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>liushihao456/symbols-outline.el</title>
    <updated>2023-08-26T01:26:09Z</updated>
    <id>tag:github.com,2023-08-26:/liushihao456/symbols-outline.el</id>
    <link href="https://github.com/liushihao456/symbols-outline.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display symbols (functions, variables, etc) in a side window.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/symbols-outline&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/symbols-outline-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;This package displays all the symbols (including classes, functions, variables, etc., depending on what the backend outputs), in an outline view.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;List the symbols in a well-organized window.&lt;/li&gt; &#xA; &lt;li&gt;The outline window position follows your cursor in the original buffer.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s easy to navigate between symbols via moving in the outline window.&lt;/li&gt; &#xA; &lt;li&gt;Allows various and custom backends. Currently ctags and lsp-mode/eglot backends are provided.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/liushihao456/symbols-outline.el/master/screen_record.gif&#34;&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Symbols-outline.el relies on a backend to get the symbols. By default the ctags backend is used. Or if &lt;code&gt;lsp-mode&lt;/code&gt; or &lt;code&gt;eglot&lt;/code&gt; is active, you can use the lsp backend. See &lt;code&gt;symbols-outline-fetch-fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If using ctags backend, &lt;code&gt;ctags&lt;/code&gt; must be installed on your machine.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;This package is in Melpa so you can install it with your favorite package manager.&lt;/p&gt; &#xA;&lt;h1&gt;Example configuration&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &#34;C-c i&#34;) &#39;symbols-outline-show)&#xA;(with-eval-after-load &#39;symbols-outline&#xA;  ;; By default the ctags backend is selected&#xA;  (unless (executable-find &#34;ctags&#34;)&#xA;    ;; Use lsp-mode or eglot as backend&#xA;    (setq symbols-outline-fetch-fn #&#39;symbols-outline-lsp-fetch))&#xA;  (setq symbols-outline-window-position &#39;left)&#xA;  (symbols-outline-follow-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Keybindings in the outline window&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;g&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-refresh&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Refresh&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;q&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;quit-window&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Close the outline window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-next&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go to the next symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;p&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-prev&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go to the previous symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;f&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-next-same-level&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go the the next symbol of the same level&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;b&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-prev-same-level&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go the the previous symbol of the same level&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;u&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-move-depth-up&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go the the parent symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;d&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-move-depth-down&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go the the child symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TAB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-toggle-node&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fold/unfold the children symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;S-TAB&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-cycle-visibility-globally&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fold/unfold globally&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;RET&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-visit&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go to the symbol under cursor in the original buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;M-RET&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symbols-outline-visit-and-quit&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go to the symbol under cursor in the original buffer and close the outline window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Customizations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;symbols-outline-window-position&lt;/code&gt;: the outline window position. Default &lt;code&gt;right&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;symbols-outline-window-width&lt;/code&gt;: the outline side window width. Default &lt;code&gt;30&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;symbols-outline-no-other-window&lt;/code&gt;: if &lt;code&gt;t&lt;/code&gt;, the outline side window will not be selected with the &lt;code&gt;other-window&lt;/code&gt; command. Instead, you can switch to the outline window with &lt;code&gt;symbols-outline-show&lt;/code&gt;. Default &lt;code&gt;t&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;symbols-outline-no-delete-other-window&lt;/code&gt;: if &lt;code&gt;t&lt;/code&gt;, the outline side window will not be deleted by the &lt;code&gt;delete-other-windows&lt;/code&gt; command. Default &lt;code&gt;t&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;symbols-outline-collapse-functions-on-startup&lt;/code&gt;: whether to collapse function nodes on startup to hide the parameter nodes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nex3/perspective-el</title>
    <updated>2023-08-26T01:26:09Z</updated>
    <id>tag:github.com,2023-08-26:/nex3/perspective-el</id>
    <link href="https://github.com/nex3/perspective-el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Perspectives for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Perspective for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nex3/perspective-el/actions/workflows/test-perspective.yml/badge.svg?sanitize=true&#34; alt=&#34;Test perspective&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Perspective package provides multiple named workspaces (or &#34;perspectives&#34;) in Emacs, similar to multiple desktops in window managers like Awesome and XMonad, and Spaces on the Mac.&lt;/p&gt; &#xA;&lt;p&gt;Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&#34;&gt;xref&lt;/a&gt; ring. This makes it easy to work on many separate projects without getting lost in all the buffers. Switching to a perspective activates its window configuration, and when in a perspective, only its buffers are available (by default).&lt;/p&gt; &#xA;&lt;p&gt;Each Emacs frame has a distinct list of perspectives.&lt;/p&gt; &#xA;&lt;p&gt;Perspective supports saving its state to a file, so long-lived work sessions may be saved and recovered as needed.&lt;/p&gt; &#xA;&lt;p&gt;At long last this project has a &lt;a href=&#34;https://github.com/nex3/perspective-el/raw/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;; please refer to it for release notes.&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#sample-use-cases&#34;&gt;Sample Use Cases&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#multiple-projects&#34;&gt;Multiple Projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#yak-shaving&#34;&gt;Yak Shaving&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#perspective-merging&#34;&gt;Perspective Merging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#similar-packages&#34;&gt;Similar Packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#buffer-switchers&#34;&gt;Buffer Switchers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#notes-on-completing-read-enhancements&#34;&gt;Notes on &lt;code&gt;completing-read&lt;/code&gt; Enhancements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#saving-sessions-to-disk&#34;&gt;Saving Sessions to Disk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#some-musings-on-emacs-window-layouts&#34;&gt;Some Musings on Emacs Window Layouts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Sample Use Cases&lt;/h2&gt; &#xA;&lt;h3&gt;Multiple Projects&lt;/h3&gt; &#xA;&lt;p&gt;Working on multiple projects can become difficult to organize as their buffer lists mix together during a long-running Emacs session. Searching for a buffer by name works well if you know what to search for, but sometimes picking from a list is easier — in which case, keeping the list well-pruned for relevant buffers becomes an important source of efficiency in file and buffer management. Perspective helps out by letting you keep separate named buffer lists and window layouts.&lt;/p&gt; &#xA;&lt;p&gt;This use case works really well in conjunction with &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt;. Projectile helps with buffer navigation (and other project-specific tasks) in cases when a project has a well-defined root directory. Perspective then steps in to help manage unrelated buffers: shells, REPLs, &lt;code&gt;dired&lt;/code&gt; buffers visiting directories outside the project, or files relevant to the project not under the same root as the rest of the source. It also helps deal with the situation of one project with multiple source repositories where having a shared window layout or buffer list makes sense.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://catb.org/jargon/html/Y/yak-shaving.html&#34;&gt;Yak Shaving&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Suppose you&#39;re developing feature X in perspective &lt;code&gt;feature-X&lt;/code&gt;. This keeps you working with one set of files and windows. You then realize that this feature requires you to fix a bug in an unrelated set of files. You don&#39;t want to lose all the context you have built up for feature X, so you open a new perspective, &lt;code&gt;bugfix-Y&lt;/code&gt;, letting you open new files and buffers without disturbing your work on &lt;code&gt;feature-X&lt;/code&gt;. Then you are asked to urgently look into something related to development of feature Z, but again: you don&#39;t want to lose context. So you open a new perspective &lt;code&gt;feature-Z&lt;/code&gt;, and fill it with a whole bunch of new files and windows — all without losing any of the context for your work on bug Y or feature X.&lt;/p&gt; &#xA;&lt;p&gt;When you finish looking at Z, you close perspective &lt;code&gt;feature-Z&lt;/code&gt;, and return to &lt;code&gt;bugfix-Y&lt;/code&gt;, and restore its window layout and buffer list. When you finish with Y, you close perspective &lt;code&gt;bugfix-Y&lt;/code&gt; and return to &lt;code&gt;feature-X&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(Hint: this workflow works best with the &lt;code&gt;persp-sort&lt;/code&gt; variable set to &lt;code&gt;&#39;created&lt;/code&gt; — see documentation below.)&lt;/p&gt; &#xA;&lt;h3&gt;Perspective Merging&lt;/h3&gt; &#xA;&lt;p&gt;Yak shaving is useful for working on projects that are largely unrelated but sometimes you are working on multiple projects that are very much related, to the point that you want to view files from both projects at the same time. This is where perspective merging comes in.&lt;/p&gt; &#xA;&lt;p&gt;Suppose you are working on a project that requires developing multiple auxiliary libraries. It may get messy to develop both the main project and all the libraries from the same perspective so instead you put each library in its own perspective so you can work on them in isolation. All of a sudden though you wish to see library code from the main projects perspective. Instead of switching back and forth between the library and main projects perspectives you can run &lt;code&gt;M-x persp-merge&lt;/code&gt; and import the buffers from the libraries perspective. When you are done you can run remove the imported buffers with &lt;code&gt;M-x persp-unmerge&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The purpose of perspective merging is to combine the buffer lists of different perspectives while keeping a clear distinction of which buffers belong to which perspective.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can merge together as many perspectives as you want.&lt;/li&gt; &#xA; &lt;li&gt;Merging is one directional so if you merge A into B, B&#39;s buffers will not be available in A.&lt;/li&gt; &#xA; &lt;li&gt;Merging is not transitive so if you merge A into B, then B into C, the buffers in A will not be available in C.&lt;/li&gt; &#xA; &lt;li&gt;The merge state is saved across sessions when using &lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#saving-sessions-to-disk&#34;&gt;persp-state-{save,load}&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Similar Packages&lt;/h2&gt; &#xA;&lt;p&gt;The following Emacs packages implement comparable functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bad-ptr/persp-mode.el&#34;&gt;persp-mode&lt;/a&gt;: A Perspective fork, which implements perspective sharing between Emacs frames. It also has a different approach to saving state and different configuration options. There has been some &lt;a href=&#34;https://github.com/nex3/perspective-el/issues/88#issuecomment-513996542&#34;&gt;interest&lt;/a&gt; &lt;a href=&#34;https://github.com/nex3/perspective-el/issues/111&#34;&gt;expressed&lt;/a&gt; in merging the two projects. &lt;em&gt;Due to conflicting function names, &lt;code&gt;persp-mode.el&lt;/code&gt; and Perspective cannot be installed simultaneously.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pashinin/workgroups2&#34;&gt;Workgroups 2&lt;/a&gt;: Similar to Perspective in terms of features. Its &lt;a href=&#34;https://github.com/tlh/workgroups.el&#34;&gt;original codebase&lt;/a&gt; seems to predate Emacs acquiring a native ability to serialize window layouts, so it has custom serialization code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wasamasa/eyebrowse&#34;&gt;eyebrowse&lt;/a&gt;: Supports window layouts but not buffer lists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ilohmar/wconf&#34;&gt;wconf&lt;/a&gt;: Supports window layouts but not buffer lists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/knu/elscreen&#34;&gt;ElScreen&lt;/a&gt;: Supports window layouts but not buffer lists; seems unmaintained.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alphapapa/burly.el&#34;&gt;Burly&lt;/a&gt;: An approach to persisting window and frame configurations using Emacs bookmarks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Emacs 27 includes two new buffer and window organizing features: Tab Line (&lt;code&gt;global-tab-line-mode&lt;/code&gt;) and Tab Bar (&lt;code&gt;tab-bar-mode&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tab Line maintains a list of buffers which had been opened in a given window, and anchors it to that window. It is analogous to tabs as used in web browsers and other text editors, and therefore orthogonal to Perspective.&lt;/li&gt; &#xA; &lt;li&gt;Tab Bar maintains window layouts (with optional names). In this, it is similar to Perspective. Unlike Perspective, it does not support buffer lists. Using Perspective and Tab Bar at the same time is not recommended at this time, since the tab list is global (i.e., will show up in all perspectives) and is likely to cause confusion. It would be an interesting future feature for Perspective to adopt the tab bar and allow keeping a distinct set of tabs per-perspective.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Perspective does not work with &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html&#34;&gt;Emacs &lt;code&gt;desktop.el&lt;/code&gt;&lt;/a&gt;. This is because Perspective state stores buffer and window information in frame parameters, and &lt;code&gt;desktop-save-mode&lt;/code&gt; does not support saving those types of data.&lt;/p&gt; &#xA;&lt;p&gt;Instead, Perspective provides its own &lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#saving-sessions-to-disk&#34;&gt;disk save and load&lt;/a&gt; feature, which cleanly saves perspectives.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You should install Perspective from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users of &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; can install Perspective as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package perspective&#xA;  :bind&#xA;  (&#34;C-x C-b&#34; . persp-list-buffers)         ; or use a nicer switcher, see below&#xA;  :custom&#xA;  (persp-mode-prefix-key (kbd &#34;C-c M-p&#34;))  ; pick your own prefix key here&#xA;  :init&#xA;  (persp-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace the binding for &lt;code&gt;C-x C-b&lt;/code&gt;, the default Emacs buffer switcher, with one of the nicer implementations described in the &lt;a href=&#34;https://raw.githubusercontent.com/nex3/perspective-el/master/#buffer-switchers&#34;&gt;Buffer switchers&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;If not using &lt;code&gt;use-package&lt;/code&gt;, put &lt;code&gt;perspective.el&lt;/code&gt; from this source repository somewhere on your load path, and use something similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;perspective)&#xA;(global-set-key (kbd &#34;C-x C-b&#34;) &#39;persp-list-buffers)&#xA;(customize-set-variable &#39;persp-mode-prefix-key (kbd &#34;C-c M-p&#34;))&#xA;(persp-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users of Debian 9 or later or Ubuntu 16.04 or later may simply &lt;code&gt;apt-get install elpa-perspective&lt;/code&gt;, though be aware that the stable version provided in these repositories is likely to be (extremely) outdated.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To activate Perspective, use &lt;code&gt;(persp-mode)&lt;/code&gt;. This creates a single default &lt;code&gt;main&lt;/code&gt; perpsective.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; Since the release of Emacs 28, Perspective no longer ships with a default command prefix. Users should pick a prefix comfortable for them. In the days of Emacs 27 and earlier, the default prefix was &lt;code&gt;C-x x&lt;/code&gt;. This conflicts with bindings built into Emacs 28.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To set a prefix key for all Perspective commands, customize &lt;code&gt;persp-mode-prefix-key&lt;/code&gt;. Reasonable choices include &lt;code&gt;C-x x&lt;/code&gt; (for users who don&#39;t care about the Emacs buffer-related commands this shadows), &lt;code&gt;C-z&lt;/code&gt; (for users who don&#39;t suspend Emacs to shell background), &lt;code&gt;C-c C-p&lt;/code&gt; (for users who don&#39;t mind the conflicting keys with &lt;code&gt;org-mode&lt;/code&gt; and &lt;code&gt;markdown-mode&lt;/code&gt;), &lt;code&gt;C-c M-p&lt;/code&gt; (for users who don&#39;t mind the slightly awkward chord), and &lt;code&gt;H-p&lt;/code&gt; (for users who don&#39;t mind relying exclusively on a non-standard Hyper modifier).&lt;/p&gt; &#xA;&lt;p&gt;The actual command keys (the ones pressed after the prefix) are defined in &lt;code&gt;perspective-map&lt;/code&gt;. Here are the main commands defined in &lt;code&gt;perspective-map&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;s&lt;/code&gt; — &lt;code&gt;persp-switch&lt;/code&gt;: Query a perspective to switch to, or create&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;`&lt;/code&gt; — &lt;code&gt;persp-switch-by-number&lt;/code&gt;: Switch to perspective by number, or switch quickly using numbers &lt;code&gt;1, 2, 3.. 0&lt;/code&gt; as prefix args; note this will probably be most useful with &lt;code&gt;persp-sort&lt;/code&gt; set to &lt;code&gt;&#39;created&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;k&lt;/code&gt; — &lt;code&gt;persp-remove-buffer&lt;/code&gt;: Query a buffer to remove from current perspective&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c&lt;/code&gt; — &lt;code&gt;persp-kill&lt;/code&gt; : Query a perspective to kill&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r&lt;/code&gt; — &lt;code&gt;persp-rename&lt;/code&gt;: Rename current perspective&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt; — &lt;code&gt;persp-add-buffer&lt;/code&gt;: Query an open buffer to add to current perspective&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; — &lt;code&gt;persp-set-buffer&lt;/code&gt;: Add buffer to current perspective and remove it from all others&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;b&lt;/code&gt; - &lt;code&gt;persp-switch-to-buffer&lt;/code&gt;: Like &lt;code&gt;switch-to-buffer&lt;/code&gt;; includes all buffers from all perspectives; changes perspective if necessary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;i&lt;/code&gt; — &lt;code&gt;persp-import&lt;/code&gt;: Import a given perspective from another frame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;&amp;lt;right&amp;gt;&lt;/code&gt; — &lt;code&gt;persp-next&lt;/code&gt;: Switch to next perspective&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p&lt;/code&gt;, &lt;code&gt;&amp;lt;left&amp;gt;&lt;/code&gt; — &lt;code&gt;persp-prev&lt;/code&gt;: Switch to previous perspective&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;m&lt;/code&gt; — &lt;code&gt;persp-merge&lt;/code&gt;: Temporarily merge the buffers from one perspective into another&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;u&lt;/code&gt; — &lt;code&gt;persp-unmerge&lt;/code&gt;: Undo the effects of a &lt;code&gt;persp-merge&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;g&lt;/code&gt; — &lt;code&gt;persp-add-buffer-to-frame-global&lt;/code&gt;: Add buffer to a frame-specific &#34;global&#34; perspective&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-s&lt;/code&gt; — &lt;code&gt;persp-state-save&lt;/code&gt;: Save all perspectives in all frames to a file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-l&lt;/code&gt; — &lt;code&gt;persp-state-load&lt;/code&gt;: Load all perspectives from a file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Buffer Switchers&lt;/h3&gt; &#xA;&lt;p&gt;Since Perspective maintains distinct buffer lists for each perspective, it helps to use a Perspective-aware buffer switcher.&lt;/p&gt; &#xA;&lt;p&gt;When using one of the following buffer switchers, you will only be prompted for buffers in the current perspective and the frame-specific &#34;global&#34; shared perspective. (The &lt;code&gt;persp-add-buffer-to-frame-global&lt;/code&gt; command adds a buffer to this special frame-specific perspective, whose name is determined by &lt;code&gt;persp-frame-global-perspective-name&lt;/code&gt; and defaults to &lt;code&gt;GLOBAL&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ido&lt;/strong&gt;: &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/ido/index.html&#34;&gt;Interactive Do (Ido, &lt;code&gt;ido-mode&lt;/code&gt;)&lt;/a&gt;, in particular its &lt;code&gt;ido-switch-buffer&lt;/code&gt; command, is automatically Perspective-aware when &lt;code&gt;persp-mode&lt;/code&gt; is enabled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;list-buffers / buffer-menu&lt;/strong&gt;: Perspective provides wrappers for the similar &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/List-Buffers.html&#34;&gt;&lt;code&gt;list-buffers&lt;/code&gt; and &lt;code&gt;buffer-menu&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;persp-list-buffers&lt;/code&gt; and &lt;code&gt;persp-buffer-menu&lt;/code&gt;. (Note that Emacs binds &lt;code&gt;C-x C-b&lt;/code&gt; to &lt;code&gt;list-buffers&lt;/code&gt; by default.) When these functions are called normally, they show the buffer menu filtered by the current perspective. With a prefix argument, they show the buffer menu of all the buffers in all perspectives. (The difference between &lt;code&gt;list-buffers&lt;/code&gt; and &lt;code&gt;buffer-menu&lt;/code&gt;: the former calls &lt;code&gt;display-buffer&lt;/code&gt;, i.e., may split windows depending on &lt;code&gt;display-buffer-alist&lt;/code&gt;, and the latter calls &lt;code&gt;switch-to-buffer&lt;/code&gt;, i.e., flips the current window to the buffer list buffer.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;bs.el&lt;/code&gt;&lt;/strong&gt;: Perspective provides a wrapper for &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Buffer-Menus.html&#34;&gt;&lt;code&gt;bs-show&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;persp-bs-show&lt;/code&gt;. When this function is called normally, it shows a list of buffers filtered by the current perspective. With a prefix argument, it shows a list of buffers in all perspectives.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IBuffer&lt;/strong&gt;: Perspective provides a wrapper for &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Buffer-Menus.html&#34;&gt;&lt;code&gt;ibuffer&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;persp-ibuffer&lt;/code&gt;. When this function is called normally, it shows a list of buffers filtered by the current perspective. With a prefix argument, it shows a list of buffers in all perspectives.&lt;/p&gt; &#xA;&lt;p&gt;If you want to group buffers by persp-name in ibuffer buffer, use &lt;code&gt;persp-ibuffer-set-filter-groups&lt;/code&gt;. Or, make it the default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;ibuffer-hook&#xA;          (lambda ()&#xA;            (persp-ibuffer-set-filter-groups)&#xA;            (unless (eq ibuffer-sorting-mode &#39;alphabetic)&#xA;              (ibuffer-do-sort-by-alphabetic))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Helm&lt;/strong&gt;: Perspective ships with buffer-listing advice for Helm, so Helm&#39;s buffer listing code should be automatically Perspective-aware when &lt;code&gt;persp-mode&lt;/code&gt; is enabled. (Older versions of Helm relied on the machinery of &lt;code&gt;ido-mode&lt;/code&gt; for listing buffers, so they did not require this advice; see &lt;a href=&#34;https://github.com/emacs-helm/helm/commit/f7fa3a9e0ef1f69c42e0c513d02c9f76ea9a4344&#34;&gt;&lt;code&gt;this Helm commit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/nex3/perspective-el/commit/c2d3542418967b55f05d5b5ba71c9fbfe4cd3d4f&#34;&gt;&lt;code&gt;this Perspective commit&lt;/code&gt;&lt;/a&gt; for details.) If &lt;code&gt;helm-buffers-list&lt;/code&gt; is called with a prefix argument, it will show buffers in all perspectives. In addition, Perspective adds actions to &lt;code&gt;helm-buffers-list&lt;/code&gt; to add buffers to the current perspective (mainly relevant to the prefix-argument version) and to remove buffers from the current perspective.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Consult&lt;/strong&gt;: Perspective provides &lt;code&gt;persp-consult-source&lt;/code&gt; source that will list buffers in current perspective. You can hide default buffer source and add &lt;code&gt;persp-consult-source&lt;/code&gt; to &lt;code&gt;consult-buffer-sources&lt;/code&gt; for consult to only list buffers in current perspective like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(consult-customize consult--source-buffer :hidden t :default nil)&#xA;(add-to-list &#39;consult-buffer-sources persp-consult-source)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you can still access list of all buffers in all perspectives by &lt;a href=&#34;https://github.com/minad/consult#narrowing-and-grouping&#34;&gt;narrowing&lt;/a&gt; using prefix &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ivy / Counsel&lt;/strong&gt;: Perspective provides two commands for listing buffers using Ivy and Counsel: &lt;code&gt;persp-ivy-switch-buffer&lt;/code&gt; and &lt;code&gt;persp-counsel-switch-buffer&lt;/code&gt;. When these functions are called normally, they show a list of buffers filtered by the current perspective. With a prefix argument, they shows a list of buffers in all perspectives. The distinction between the &lt;code&gt;ivy&lt;/code&gt; and &lt;code&gt;counsel&lt;/code&gt; versions is the same as between &lt;code&gt;ivy-switch-buffer&lt;/code&gt; and &lt;code&gt;counsel-switch-buffer&lt;/code&gt;: the latter shows a preview of the buffer to switch to, and the former does not.&lt;/p&gt; &#xA;&lt;p&gt;It is a good idea to bind one these helper functions with the &lt;code&gt;:bind&lt;/code&gt; form of &lt;code&gt;use-package&lt;/code&gt;. Or, if you do not use &lt;code&gt;use-package&lt;/code&gt;, it can also be bound globally, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(global-set-key (kbd &#34;C-x C-b&#34;) (lambda (arg)&#xA;                                  (interactive &#34;P&#34;)&#xA;                                  (if (fboundp &#39;persp-bs-show)&#xA;                                      (persp-bs-show arg)&#xA;                                    (bs-show &#34;all&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notes on &lt;code&gt;completing-read&lt;/code&gt; Enhancements&lt;/h3&gt; &#xA;&lt;p&gt;Users of a &lt;code&gt;completing-read&lt;/code&gt; enhancement framework (such as Ivy, &lt;a href=&#34;https://github.com/raxod502/selectrum&#34;&gt;Selectrum&lt;/a&gt;, or &lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt;) may wish to use the following two functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;persp-switch-to-buffer*&lt;/code&gt; replaces &lt;code&gt;switch-to-buffer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;persp-kill-buffer*&lt;/code&gt; replaces &lt;code&gt;kill-buffer&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both these functions behave like the built-ins, but use &lt;code&gt;completing-read&lt;/code&gt; directly. When called normally, they list buffers filtered by the current perspective. With a prefix argument, they list buffers in all perspectives.&lt;/p&gt; &#xA;&lt;p&gt;The following sample &lt;code&gt;use-package&lt;/code&gt; invocation changes Emacs default key bindings to use the replacements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(use-package perspective&#xA;  :bind ((&#34;C-x b&#34; . persp-switch-to-buffer*)&#xA;         (&#34;C-x k&#34; . persp-kill-buffer*))&#xA;  :config&#xA;  (persp-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving Sessions to Disk&lt;/h2&gt; &#xA;&lt;p&gt;A pair of functions, &lt;code&gt;persp-state-save&lt;/code&gt; and &lt;code&gt;persp-state-load&lt;/code&gt;, implement perspective durability on disk. When called interactively, they prompt for files to save sessions to and restore from.&lt;/p&gt; &#xA;&lt;p&gt;A custom variable, &lt;code&gt;persp-state-default-file&lt;/code&gt;, sets a default file to use for saving and restoring perspectives. When it is set, &lt;code&gt;persp-state-save&lt;/code&gt; may be called non-interactively without an argument and it will save to the file referenced by that variable. This makes it easy to automatically save perspective sessions when Emacs exits:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;kill-emacs-hook #&#39;persp-state-save)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A limitation of &lt;code&gt;persp-state-save&lt;/code&gt; and &lt;code&gt;persp-state-load&lt;/code&gt; is that they do not attempt to deal with non-file-visiting buffers with non-trivial state. Saving shell, REPL, and &lt;code&gt;compilation-mode&lt;/code&gt; buffers is not supported. When saved to a file, any windows pointing to them are changed to point to the perspective&#39;s &lt;code&gt;*scratch*&lt;/code&gt; buffer. (Live windows are, of course, left alone.)&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Perspective supports several custom variables (see its section in &lt;code&gt;M-x customize&lt;/code&gt;). The following are likely to be of most interest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;persp-sort&lt;/code&gt;: Select the order in which to sort perspectives when calling &lt;code&gt;persp-switch&lt;/code&gt;. Defaults to &lt;code&gt;&#39;name&lt;/code&gt; (alphabetical), but &lt;code&gt;&#39;access&lt;/code&gt; (by most recently accessed) and &lt;code&gt;&#39;created&lt;/code&gt; (by order created) are available. Note that &lt;code&gt;persp-switch-by-number&lt;/code&gt; is likely to be confusing when this is set to &lt;code&gt;&#39;access&lt;/code&gt;, as the numbers associated with a perspective will change all the time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;persp-interactive-completion-function&lt;/code&gt;: Used for prompting for a perspective name. &lt;code&gt;completing-read&lt;/code&gt; is the default, with &lt;code&gt;ido-completing-read&lt;/code&gt; enabled with &lt;code&gt;ido-mode&lt;/code&gt;. &lt;code&gt;ivy-completing-read&lt;/code&gt; is broadly compatible, but unfortunately sorts alphabetically and therefore breaks the &lt;code&gt;persp-sort&lt;/code&gt; setting. Helm, unfortunately, does not have a &lt;code&gt;completing-read&lt;/code&gt; compatible implementation out of the box (&lt;code&gt;helm-completing-read-default-1&lt;/code&gt; purports to be this but does not have the same &lt;code&gt;&amp;amp;optional&lt;/code&gt; defaults). &lt;em&gt;&lt;code&gt;ido-completing-read&lt;/code&gt; is the recommended setting here unless a &lt;code&gt;completing-read&lt;/code&gt; enhancement framework is used.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;persp-mode-prefix-key&lt;/code&gt;: Changes the default key prefix for Perspective commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;persp-state-default-file&lt;/code&gt;: Changes the default file to use for saving and loading Perspective state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;persp-show-modestring&lt;/code&gt;: Determines if Perspective should show its status in the modeline. It defaults to &lt;code&gt;t&lt;/code&gt;, but can also be &lt;code&gt;nil&lt;/code&gt; (turning off the modeline status display) or &lt;code&gt;&#39;header&lt;/code&gt; (which uses the header line instead of the modeline).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;persp-modestring-short&lt;/code&gt;: When set to &lt;code&gt;t&lt;/code&gt;, show a shortened modeline string with only the current perspective instead of the full list. Defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;persp-purge-initial-persp-on-save&lt;/code&gt;: When set to &lt;code&gt;t&lt;/code&gt;, will kill all buffers of the initial perspective upon calling &lt;code&gt;perps-state-save&lt;/code&gt;. The buffers whose name match a regexp in the list &lt;code&gt;persp-purge-initial-persp-on-save-exceptions&lt;/code&gt; won&#39;t get killed. This allows using the initial perspective as a kind of scratch space.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To change keys used after the prefix key, with &lt;code&gt;use-package&lt;/code&gt; you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; remap n to N to switch to next perspective&#xA;(use-package perspective&#xA;  :bind (&#xA;    :map perspective-map&#xA;      (&#34;n&#34; . nil)&#xA;      (&#34;N&#34; . persp-next)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or without &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(define-key perspective-map (kbd &#34;n&#34;) nil)&#xA;(define-key perspective-map (kbd &#34;N&#34;) &#39;persp-next)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Some Musings on Emacs Window Layouts&lt;/h2&gt; &#xA;&lt;p&gt;The following discussion exceeds the needs of documenting Perspective, but it falls in the category of helping users learn to manage Emacs sessions, and therefore will likely help potential users of Perspective make the experience smoother.&lt;/p&gt; &#xA;&lt;p&gt;Emacs has bad default behavior when it comes to window handling: many commands and modes have a habit of splitting existing windows and changing the user&#39;s carefully thought-out window layout. This tends to be a more serious problem for people who run Emacs on large displays (possibly in full-screen mode): the greater amount of screen real estate makes it easy to split the frame into many smaller windows, making any unexpected alterations more disruptive.&lt;/p&gt; &#xA;&lt;p&gt;As a result of indiscriminate-seeming window splits and buffer switching in existing windows, new Emacs users can get into the habit of expecting Emacs and its packages to lack basic respect for their layouts. Hence the popularity of things like &lt;code&gt;winner-mode&lt;/code&gt;, and packages like &lt;a href=&#34;https://github.com/wasamasa/shackle&#34;&gt;shackle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This may make the value of Perspective seem questionable: why bother with carefully preserving window layouts if Emacs just throws them away on a &lt;code&gt;M-x compile&lt;/code&gt;? The answer is to fix the broken defaults. This is fairly easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(customize-set-variable &#39;display-buffer-base-action&#xA;  &#39;((display-buffer-reuse-window display-buffer-same-window)&#xA;    (reusable-frames . t)))&#xA;&#xA;(customize-set-variable &#39;even-window-sizes nil)     ; avoid resizing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These settings do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Tell &lt;code&gt;display-buffer&lt;/code&gt; to reuse existing windows as much as possible, including in other frames. For example, if there is already a &lt;code&gt;*compilation*&lt;/code&gt; buffer in a visible window, switch to that window. This means that Emacs will usually switch windows in a &#34;do what I mean&#34; manner for a warmed-up workflow (one with, say, a couple of source windows, a compilation output window, and a Magit window).&lt;/li&gt; &#xA; &lt;li&gt;Prevent splits by telling &lt;code&gt;display-buffer&lt;/code&gt; to switch to the target buffer in the &lt;em&gt;current&lt;/em&gt; window. For example, if there is no &lt;code&gt;*compilation*&lt;/code&gt; buffer visible, then the buffer in whichever window was current when &lt;code&gt;compile&lt;/code&gt; was run will be replaced with &lt;code&gt;*compilation*&lt;/code&gt;. This may seem intrusive, since it changes out the current buffer, but keep in mind that most buffers popped up in this manner are easy to dismiss, either with a dedicated keybinding (often &lt;code&gt;q&lt;/code&gt;) or the universally-applicable &lt;code&gt;kill-buffer&lt;/code&gt;. This is easier than restoring window arrangements. It is also easier to handle for pre-arranged window layouts, since the appropriate command can simply be run in a window prepared for it in advance. (If this is a step too far, then replace &lt;code&gt;display-buffer-same-window&lt;/code&gt; with &lt;code&gt;display-buffer-pop-up-window&lt;/code&gt;.)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;(An earlier version of this hint modified &lt;code&gt;display-buffer-alist&lt;/code&gt; instead of &lt;code&gt;display-buffer-base-action&lt;/code&gt;. This was &lt;a href=&#34;https://debbugs.gnu.org/cgi/bugreport.cgi?bug=49069#25&#34;&gt;too aggressive&lt;/a&gt; and can impact packages which may legitimately want to split windows.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Buffers.html#Displaying-Buffers&#34;&gt;Documentation of the Emacs framework responsible for &#34;pop-up&#34; windows, &lt;code&gt;display-buffer&lt;/code&gt;&lt;/a&gt;, is dense and difficult to read, so there have been attempts to summarize the most important bits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ess.r-project.org/Manual/ess.html#Controlling-buffer-display&#34;&gt;https://ess.r-project.org/Manual/ess.html#Controlling-buffer-display&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://old.reddit.com/r/emacs/comments/cpdr6m/any_additional_docstutorials_on_displaybuffer_and/ews94n1/&#34;&gt;https://old.reddit.com/r/emacs/comments/cpdr6m/any_additional_docstutorials_on_displaybuffer_and/ews94n1/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.masteringemacs.org/article/demystifying-emacs-window-manager&#34;&gt;https://www.masteringemacs.org/article/demystifying-emacs-window-manager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>