<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-25T01:35:36Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joostkremers/writeroom-mode</title>
    <updated>2022-08-25T01:35:36Z</updated>
    <id>tag:github.com,2022-08-25:/joostkremers/writeroom-mode</id>
    <link href="https://github.com/joostkremers/writeroom-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Writeroom-mode: distraction-free writing for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Writeroom-mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;writeroom-mode&lt;/code&gt; is a minor mode for Emacs that implements a distraction-free writing mode similar to the famous Writeroom editor for OS X. &lt;code&gt;writeroom-mode&lt;/code&gt; is meant for GNU Emacs 24, lower versions are not actively supported.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;writeroom-mode&lt;/code&gt; can be installed through the package manager from &lt;a href=&#34;http://melpa.org/&#34;&gt;Melpa&lt;/a&gt;. If installing manually, make sure to also install its dependency &lt;a href=&#34;https://github.com/joostkremers/visual-fill-column&#34;&gt;&lt;code&gt;visual-fill-column&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;writeroom-mode&lt;/code&gt; can be activated in a buffer by calling &lt;code&gt;M-x writeroom-mode RET&lt;/code&gt;. A screen shot can probably explain best what &lt;code&gt;writeroom-mode&lt;/code&gt; does. In the default configuration, after activating &lt;code&gt;writeroom-mode&lt;/code&gt;, your screen looks like this (modulo the colour theme, of course):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joostkremers/writeroom-mode/master/writeroom-mode.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;writeroom-mode&lt;/code&gt; does the following things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;activate fullscreen&lt;/li&gt; &#xA; &lt;li&gt;disable transparency&lt;/li&gt; &#xA; &lt;li&gt;disable the menu bar&lt;/li&gt; &#xA; &lt;li&gt;disable the tool bar&lt;/li&gt; &#xA; &lt;li&gt;disable the scroll bar&lt;/li&gt; &#xA; &lt;li&gt;enable a bottom window divider of 1 pixel&lt;/li&gt; &#xA; &lt;li&gt;maximise the current window (i.e., delete all other windows in the frame)&lt;/li&gt; &#xA; &lt;li&gt;place the fringes outside the margins&lt;/li&gt; &#xA; &lt;li&gt;disable the mode line&lt;/li&gt; &#xA; &lt;li&gt;add window margins to the current buffer so that the text is 80 characters wide&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The last three effects are buffer-local. The other effects apply to the current frame. Because &lt;code&gt;writeroom-mode&lt;/code&gt; is a minor mode, this isn&#39;t entirely on the up and up, since minor modes aren&#39;t supposed to have such global effects. But &lt;code&gt;writeroom-mode&lt;/code&gt; is meant for distraction-free writing, so these effects do make sense.&lt;/p&gt; &#xA;&lt;p&gt;All these effects can be disabled or customised. In addition, there are several more options that are disabled by default but can be enabled in the &lt;a href=&#34;https://raw.githubusercontent.com/joostkremers/writeroom-mode/master/#customisation&#34;&gt;customisation buffer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Multiple writeroom-mode buffers&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to activate &lt;code&gt;writeroom-mode&lt;/code&gt; in more than one buffer. The global effects are of course activated only once and they remain active until &lt;code&gt;writeroom-mode&lt;/code&gt; is deactivated in &lt;em&gt;all&lt;/em&gt; buffers. Alternatively, if you wish to use &lt;code&gt;writeroom-mode&lt;/code&gt; in all buffers that have a particular major mode (e.g., &lt;code&gt;text-mode&lt;/code&gt;, &lt;code&gt;markdown-mode&lt;/code&gt;), you can use the global minor mode &lt;code&gt;global-writeroom-mode&lt;/code&gt;. This function enables the global effects and activates the buffer-local effects in all (current and future) buffers that have a major mode listed in the user option &lt;code&gt;writeroom-major-modes&lt;/code&gt; (by default only &lt;code&gt;text-mode&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;global-writeroom-mode&lt;/code&gt; is active, the function &lt;code&gt;writeroom-mode&lt;/code&gt; can still be called to enable or disable &lt;code&gt;writeroom-mode&lt;/code&gt; in individual buffers (regardless of their major mode, of course). Calling &lt;code&gt;global-writeroom-mode&lt;/code&gt; again disables &lt;code&gt;writeroom-mode&lt;/code&gt; in all buffers in which it is active, also those in which it was activated manually.&lt;/p&gt; &#xA;&lt;h2&gt;Frame effects&lt;/h2&gt; &#xA;&lt;p&gt;Most of the global effects that &lt;code&gt;writeroom-mode&lt;/code&gt; enables are handled by setting specific frame parameters. This means that they apply to the current frame. If you switch to another frame and display a &lt;code&gt;writeroom-mode&lt;/code&gt; buffer, only the buffer-local effects will be visible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;writeroom-mode&lt;/code&gt; tries to make sure that it only affects one frame, and that it restores that particular frame when it is deactivated in the last buffer. This means it should be safe to activate &lt;code&gt;writeroom-mode&lt;/code&gt; in one frame and deactivate it in another. Killing the &lt;code&gt;writeroom-mode&lt;/code&gt; frame should also be safe.&lt;/p&gt; &#xA;&lt;p&gt;The affected frame is always restored to its original state, before &lt;code&gt;writeroom-mode&lt;/code&gt; was activated, even if you change any of the frame parameters manually while &lt;code&gt;writeroom-mode&lt;/code&gt; is active.&lt;/p&gt; &#xA;&lt;h2&gt;Customisation&lt;/h2&gt; &#xA;&lt;p&gt;The customisation buffer for &lt;code&gt;writeroom-mode&lt;/code&gt; can be opened with &lt;code&gt;M-x customize-group RET writeroom RET&lt;/code&gt;. It provides the options listed below.&lt;/p&gt; &#xA;&lt;h3&gt;Added Width Left&lt;/h3&gt; &#xA;&lt;p&gt;Extra columns added to the left side of the text area. These columns are added after the text area is centred, so that the text area is essentially off-set to the left by the amount provided. This can be an integer or a function of no arguments that should return an integer. By default, this is used to accommodate line numbers if &lt;code&gt;display-line-numbers-mode&lt;/code&gt; is active, so that the actual text is still centred.&lt;/p&gt; &#xA;&lt;h3&gt;Border Width&lt;/h3&gt; &#xA;&lt;p&gt;Width of the border around the text area. Disabled by default, see &lt;code&gt;writeroom-global-effects&lt;/code&gt; to enable the border.&lt;/p&gt; &#xA;&lt;h3&gt;Bottom Divider Width&lt;/h3&gt; &#xA;&lt;p&gt;Width in pixels of the bottom window divider. Default value is 1. The bottom window divider helps in distinguishing the minibuffer from the text area, and also in distinguishing two windows split top-to-bottom.&lt;/p&gt; &#xA;&lt;h3&gt;Extra Line Spacing&lt;/h3&gt; &#xA;&lt;p&gt;Increase the line spacing. Can be an absolute value (the number of pixels to add to the line) or a number relative to the default line height. Disabled by default.&lt;/p&gt; &#xA;&lt;h3&gt;Fringes Outside Margins&lt;/h3&gt; &#xA;&lt;p&gt;If set, place the fringes outside the margins. &lt;code&gt;writeroom-mode&lt;/code&gt; expands the window margins, causing the fringes to be pushed inside, which may be visually distracting. This option keeps the fringes at the window’s edges. Unset it if you prefer to have the fringes close to the text.&lt;/p&gt; &#xA;&lt;h3&gt;Fullscreen Effect&lt;/h3&gt; &#xA;&lt;p&gt;Effect to apply when &lt;code&gt;writeroom-mode&lt;/code&gt; activates fullscreen. Can be &lt;code&gt;fullboth&lt;/code&gt;, which uses the entire screen (i.e., window decorations are disabled and the window manager’s panel or task bar is covered by the Emacs frame) or &lt;code&gt;maximized&lt;/code&gt;, in which case the Emacs frame is maximised but keeps its window decorations and does not cover the panel.&lt;/p&gt; &#xA;&lt;h3&gt;Global Effects&lt;/h3&gt; &#xA;&lt;p&gt;List of global effects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fullscreen&lt;/li&gt; &#xA; &lt;li&gt;transparency&lt;/li&gt; &#xA; &lt;li&gt;scroll bar&lt;/li&gt; &#xA; &lt;li&gt;menu bar&lt;/li&gt; &#xA; &lt;li&gt;tool bar&lt;/li&gt; &#xA; &lt;li&gt;bottom window divider&lt;/li&gt; &#xA; &lt;li&gt;border (add a border around the text area; disabled by default)&lt;/li&gt; &#xA; &lt;li&gt;sticky (display the window on all virtual workspaces; disabled by default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each option can be enabled or disabled individually.&lt;/p&gt; &#xA;&lt;h3&gt;Header Line&lt;/h3&gt; &#xA;&lt;p&gt;The header line format to use. This option can be &lt;code&gt;nil&lt;/code&gt; (the default), which disables the header line entirely, it can be &lt;code&gt;t&lt;/code&gt;, which retains the header line, or it can be set to a customised format. Note that Emacs does not use the header line by default, so changing this option from the default only makes sense if you have a customised header line that you do not want to be displayed in &lt;code&gt;writeroom-mode&lt;/code&gt; buffers.&lt;/p&gt; &#xA;&lt;p&gt;As an additional possibility, this option can be set to the symbol &lt;code&gt;mode-line&lt;/code&gt;, in which case the standard mode line is shown in the header line.&lt;/p&gt; &#xA;&lt;h3&gt;Maximize Window&lt;/h3&gt; &#xA;&lt;p&gt;Maximise the current window in its frame, i.e., delete all other windows.&lt;/p&gt; &#xA;&lt;h3&gt;Writeroom-mode Disable Hook&lt;/h3&gt; &#xA;&lt;p&gt;Hook run when &lt;code&gt;writeroom-mode&lt;/code&gt; is disabled. This hook can be used to disable effects that are enabled in &lt;code&gt;writeroom-mode-enable-hook&lt;/code&gt; (see below).&lt;/p&gt; &#xA;&lt;h3&gt;Writeroom-mode Enable Hook&lt;/h3&gt; &#xA;&lt;p&gt;Hook run when &lt;code&gt;writeroom-mode&lt;/code&gt; is enabled. This hook is run just before &lt;code&gt;writeroom-mode-hook&lt;/code&gt; is run. Unlike &lt;code&gt;writeroom-mode-hook&lt;/code&gt;, it is not run when &lt;code&gt;writeroom-mode&lt;/code&gt; is disabled.&lt;/p&gt; &#xA;&lt;p&gt;Note, however, that if you have a minor mode that you want activated and deactivated along with &lt;code&gt;writeroom-mode&lt;/code&gt; (e.g., &lt;code&gt;variable-pitch-mode&lt;/code&gt;), it is usually more convenient to simply add it to the option &lt;code&gt;writeroom-local-effects&lt;/code&gt; (see below).&lt;/p&gt; &#xA;&lt;h3&gt;Left Shift&lt;/h3&gt; &#xA;&lt;p&gt;The number of columns by which the text area is shifted to the left (if positive) or right (if negative). This can be a number or a list of functions that each return a number, which are then summed. By default, the text area is shifted by the width of the line number column.&lt;/p&gt; &#xA;&lt;h3&gt;Local Effects&lt;/h3&gt; &#xA;&lt;p&gt;A list of functions that enable buffer-local effects. These functions are called with the argument &lt;code&gt;1&lt;/code&gt; when &lt;code&gt;writeroom-mode&lt;/code&gt; is enabled and with the argument &lt;code&gt;-1&lt;/code&gt; when it is disabled.&lt;/p&gt; &#xA;&lt;p&gt;You can add minor modes to this option that you want activated together with &lt;code&gt;writeroom-mode&lt;/code&gt; but also deactivated again when you deactivate &lt;code&gt;writeroom-mode&lt;/code&gt;. You can, of course also add your own functions to this option, provided they take the arguments &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mode Line&lt;/h3&gt; &#xA;&lt;p&gt;The mode line format to use. This option can be &lt;code&gt;nil&lt;/code&gt; (the default), which disables the mode line altogether, it can be &lt;code&gt;t&lt;/code&gt;, which retains the mode line, or it can be set to a customised format to only show some information. If the latter option is chosen, the mode line shows only the file name and the file modification status, but the format can be customised. See the documentation for the variable &lt;code&gt;mode-line-format&lt;/code&gt; for details. If you set this option, it may be more visually pleasing to set the option Bottom Divider Width to 0.&lt;/p&gt; &#xA;&lt;h3&gt;Mode Line Toggle Position&lt;/h3&gt; &#xA;&lt;p&gt;If you disable or customise the mode line, you may sometimes want to see the entire mode line. &lt;code&gt;writeroom-mode&lt;/code&gt; provides the function &lt;code&gt;writeroom-toggle-mode-line&lt;/code&gt; (see below) to do this. You can specify where you want to make the mode line visible when using this function: in the mode line itself, or in the header line.&lt;/p&gt; &#xA;&lt;p&gt;Note that the default value of this option is to display the mode line in the header line, because for some reason that is more reliable. (Toggling the mode line multiple times in a row does not always work very well.)&lt;/p&gt; &#xA;&lt;h3&gt;Restore Window Config&lt;/h3&gt; &#xA;&lt;p&gt;Restore the window configuration that existed before &lt;code&gt;writeroom-mode&lt;/code&gt; was activated. This is primarily useful if you use &lt;code&gt;writeroom-mode&lt;/code&gt; in only a single buffer, since the window configuration that is restored is the one that existed at the moment when &lt;code&gt;writeroom-mode&lt;/code&gt; is called for the first time. Disabled by default.&lt;/p&gt; &#xA;&lt;h3&gt;Width&lt;/h3&gt; &#xA;&lt;p&gt;Width of the text area. Can be specified as an absolute value (number of characters) or as a fraction of the total window width (in which case it should be a number between 0 and 1).&lt;/p&gt; &#xA;&lt;h2&gt;Changing the width interactively&lt;/h2&gt; &#xA;&lt;p&gt;The width of the text area in the current buffer can be changed interactively with the commands &lt;code&gt;writeroom-increase-width&lt;/code&gt; and &lt;code&gt;writeroom-decrease-width&lt;/code&gt;, which increase and decrease the text width by 2 characters. There is also a more general command &lt;code&gt;writeroom-adjust-width&lt;/code&gt;, which adjusts the width of the text area by the amount passed as prefix argument. That is, calling it with &lt;code&gt;M-5 M-x writeroom-adjust-width&lt;/code&gt; increases the text width by 5 characters. Calling &lt;code&gt;writeroom-adjust-width&lt;/code&gt; without prefix argument resets the width to the default value.&lt;/p&gt; &#xA;&lt;p&gt;These commands are not bound to any keys, but you can bind them in the following manner (the actual keys are just examples, of course; choose any keys you like):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(with-eval-after-load &#39;writeroom-mode&#xA;  (define-key writeroom-mode-map (kbd &#34;C-M-&amp;lt;&#34;) #&#39;writeroom-decrease-width)&#xA;  (define-key writeroom-mode-map (kbd &#34;C-M-&amp;gt;&#34;) #&#39;writeroom-increase-width)&#xA;  (define-key writeroom-mode-map (kbd &#34;C-M-=&#34;) #&#39;writeroom-adjust-width))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Text size adjustments&lt;/h2&gt; &#xA;&lt;p&gt;Text size adjustments are taken into account in calculating the margins, which means that if the text size is increased, the margins are decreased, so that the number of characters on the line remains more or less the same. Since it is not possible to detect interactive text size adjustments (e.g., with &lt;code&gt;text-size-adjust&lt;/code&gt;), the adjustments of the margins cannot be made automatically. You need to force a redisplay, e.g., with the command &lt;code&gt;redraw-display&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can advise the command you use for adjusting the text size (most likely &lt;code&gt;text-size-adjust&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(advice-add &#39;text-scale-adjust :after&#xA;  #&#39;visual-fill-column-adjust)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Displaying the mode line&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;writeroom-mode&lt;/code&gt; disables the mode line. If you occasionally need to see the full mode line, you can use the command &lt;code&gt;writeroom-toggle-mode-line&lt;/code&gt;, which makes the mode line visible. Calling it again hides the mode line. This command is bound to &lt;code&gt;s-?&lt;/code&gt; (&lt;code&gt;s&lt;/code&gt; is the super key, i.e., the Windows key on PCs, the ⌘ key on Macs), but it can be rebound by putting something like the following in your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(with-eval-after-load &#39;writeroom-mode&#xA;  (define-key writeroom-mode-map (kbd &#34;s-?&#34;) nil)&#xA;  (define-key writeroom-mode-map (kbd &#34;&amp;lt;some-key&amp;gt;&#34;) #’writeroom-toggle-mode-line))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first &lt;code&gt;define-key&lt;/code&gt; disables the binding for &lt;code&gt;s-?&lt;/code&gt;. Substitute your preferred key binding in the second line to bind &lt;code&gt;writeroom-toggle-mode-line&lt;/code&gt; to it.&lt;/p&gt; &#xA;&lt;h2&gt;Adding global effects&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to add your own global effects to &lt;code&gt;writeroom-mode&lt;/code&gt;. If there is a global minor mode that you want turned on when &lt;code&gt;writeroom-mode&lt;/code&gt; is activated for the first time, you can simply add it to the user option &lt;code&gt;writeroom-global-effects&lt;/code&gt; by checking the box &#34;Custom effects&#34;, clicking the &lt;code&gt;[INS]&lt;/code&gt; button and adding the function to the list.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can also write your own function. This function should take one argument and enable the effect if the argument is &lt;code&gt;1&lt;/code&gt; and disable it if the argument is &lt;code&gt;-1&lt;/code&gt;. To give an example, if you want to activate a minimalist colour theme in &lt;code&gt;writeroom-mode&lt;/code&gt;, you can write the following function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun my-writeroom-theme (arg)&#xA;  (cond&#xA;   ((= arg 1)&#xA;    (enable-theme &#39;minimalist-dark))&#xA;   ((= arg -1)&#xA;    (disable-theme &#39;minimalist-dark))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your function affects the frame, you should make sure that it only affects the &lt;code&gt;writeroom-mode&lt;/code&gt; frame by passing the variable &lt;code&gt;writeroom--frame&lt;/code&gt; to all frame-changing functions. If your frame effect involves changing the value of a frame parameter, you may be able to use the macro &lt;code&gt;define-writeroom-global-effect&lt;/code&gt;; see its doc string for details.&lt;/p&gt; &#xA;&lt;p&gt;In principle, it is not a good idea to define a custom global effect function as a toggle, but if you are sure you&#39;ll only ever use a single frame, it should be safe enough. For example, sometimes setting the &lt;code&gt;fullscreen&lt;/code&gt; frame parameter does not work. In this case, if you&#39;re on Linux, you could send an X client message directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun my-toggle-fullscreen (_)&#xA;  (x-send-client-message nil 0 nil &#34;_NET_WM_STATE&#34; 32&#xA;                         &#39;(2 &#34;_NET_WM_STATE_FULLSCREEN&#34; 0)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other similar modes&lt;/h2&gt; &#xA;&lt;p&gt;There are two other modes that I know of that also implement a distraction-free writing environment: &lt;a href=&#34;https://github.com/joaotavora/darkroom&#34;&gt;Darkroom&lt;/a&gt; and &lt;a href=&#34;https://github.com/rnkn/olivetti&#34;&gt;Olivetti&lt;/a&gt;. Both are narrower in scope than &lt;code&gt;writeroom-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In particular, both Darkroom and Olivetti only affect the buffer (or more precisely, its window), not the frame. They centre the text by adding window margins, and optionally resize the text and hide the mode line. They do not make Emacs fullscreen and do not remove the menu and tool bars, the scroll bar or the window decorations. This is a conscious choice (see, e.g., &lt;a href=&#34;https://github.com/joaotavora/darkroom/pull/2&#34;&gt;this pull request&lt;/a&gt; and &lt;a href=&#34;https://github.com/rnkn/olivetti/issues/6&#34;&gt;this issue&lt;/a&gt;), motivated by the fact that affecting the frame in this way may lead to problems when using multiple Emacs frames.&lt;/p&gt; &#xA;&lt;p&gt;It is true that changing the appearance of the current frame (the global effects, as &lt;code&gt;writeroom-mode&lt;/code&gt; calls them) is risky if you use multiple frames. &lt;code&gt;writeroom-mode&lt;/code&gt; applies its global effects to the frame that is current when it is first activated and tries to make sure that &lt;em&gt;only&lt;/em&gt; this frame is ever affected. Therefore, it should be safe to use &lt;code&gt;writeroom-mode&lt;/code&gt;, even if you use multiple frames. (If you do run into issues, however, I would welcome a bug report.) Alternatively, you can turn off all global effects and use &lt;code&gt;writeroom-mode&lt;/code&gt; in much the same way as Darkroom or Olivetti.&lt;/p&gt; &#xA;&lt;p&gt;Another difference with Darkroom and Olivetti is that &lt;code&gt;writeroom-mode&lt;/code&gt; tries to be as customisable as possible. It has a larger number of customisation options than either of the other modes and also provides a way to add custom global effects. This may or may not be what you need, of course.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>schalkwijk/emacs-config</title>
    <updated>2022-08-25T01:35:36Z</updated>
    <id>tag:github.com,2022-08-25:/schalkwijk/emacs-config</id>
    <link href="https://github.com/schalkwijk/emacs-config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My humble emacs setup.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>editorconfig/editorconfig-emacs</title>
    <updated>2022-08-25T01:35:36Z</updated>
    <id>tag:github.com,2022-08-25:/editorconfig/editorconfig-emacs</id>
    <link href="https://github.com/editorconfig/editorconfig-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EditorConfig plugin for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/editorconfig/editorconfig-emacs/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt; &lt;a href=&#34;http://melpa.org/#/editorconfig&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/editorconfig-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/editorconfig&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/editorconfig-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://elpa.nongnu.org/nongnu/editorconfig.html&#34;&gt;&lt;img src=&#34;http://elpa.nongnu.org/nongnu/editorconfig.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;EditorConfig Emacs Plugin&lt;/h1&gt; &#xA;&lt;p&gt;This is an &lt;a href=&#34;https://editorconfig.org&#34;&gt;EditorConfig&lt;/a&gt; plugin for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;package.el&lt;/h3&gt; &#xA;&lt;p&gt;This package is available from &lt;a href=&#34;https://melpa.org/#/editorconfig&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;https://stable.melpa.org/#/editorconfig&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://elpa.nongnu.org/nongnu/editorconfig.html&#34;&gt;NonGNU ELPA&lt;/a&gt;. Install from these repositories and enable global minor-mode &lt;code&gt;editorconfig-mode&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(editorconfig-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Normally, enabling &lt;code&gt;editorconfig-mode&lt;/code&gt; should be enough for this plugin to work: all other configurations are optional. This mode sets up hooks so that EditorConfig properties will be loaded and applied to the new buffers automatically when visiting files.&lt;/p&gt; &#xA;&lt;h3&gt;use-package&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://www.emacswiki.org/emacs/UsePackage&#34;&gt;&lt;strong&gt;use-package&lt;/strong&gt;&lt;/a&gt;, add the following to your &lt;code&gt;init.el&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package editorconfig&#xA;  :ensure t&#xA;  :config&#xA;  (editorconfig-mode 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;Copy all &lt;code&gt;.el&lt;/code&gt; files in this repository to &lt;code&gt;~/.emacs.d/lisp&lt;/code&gt; and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/lisp&#34;)&#xA;(require &#39;editorconfig)&#xA;(editorconfig-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported properties&lt;/h2&gt; &#xA;&lt;p&gt;Current Emacs plugin coverage for EditorConfig&#39;s &lt;a href=&#34;https://editorconfig.org/#supported-properties&#34;&gt;properties&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;indent_style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent_size&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tab_width&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;end_of_line&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim_trailing_whitespace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;insert_final_newline = true&lt;/code&gt; is supported&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&lt;code&gt;insert_final_newline = false&lt;/code&gt;&lt;/del&gt; is not enforced (as in trailing newlines actually being removed automagically), we just buffer-locally override any preferences that would auto-add them to files &lt;code&gt;.editorconfig&lt;/code&gt; marks as trailing-newline-free&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_line_length&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&lt;code&gt;file_type_ext&lt;/code&gt; (Experimental)&lt;/del&gt; (See below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&lt;code&gt;file_type_emacs&lt;/code&gt; (Experimental)&lt;/del&gt; (See below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;root&lt;/code&gt; (only used by EditorConfig core)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not yet covered properties marked with &lt;del&gt;over-strike&lt;/del&gt; – pull requests implementing missing features warmly welcomed! Typically, you will want to tie these to native functionality, or the configuration of existing packages handling the feature.&lt;/p&gt; &#xA;&lt;p&gt;As several packages have their own handling of, say, indentation, we might not yet cover some mode you use, but we try to add the ones that show up on our radar.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;del&gt;File Type (file_type_ext, file_type_emacs)&lt;/del&gt;&lt;/h3&gt; &#xA;&lt;p&gt;File-type feature is currently disabled, because this package is now undergoing big internal refactoring. For those who want this functionality, please consider using &lt;a href=&#34;https://github.com/10sr/editorconfig-custom-majormode-el&#34;&gt;editorconfig-custom-majormode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;editorconfig-emacs&lt;/code&gt; provides some customize variables.&lt;/p&gt; &#xA;&lt;p&gt;Here are some of these variables: for the full list of available variables, type &lt;kbd&gt;M-x customize-group [RET] editorconfig [RET]&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;editorconfig-trim-whitespaces-mode&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Buffer local minor-mode to use to trim trailing whitespaces.&lt;/p&gt; &#xA;&lt;p&gt;If set, editorconfig will enable/disable this mode in accord with &lt;code&gt;trim_trailing_whitespace&lt;/code&gt; property in &lt;code&gt;.editorconfig&lt;/code&gt;. Otherwise, use Emacs built-in &lt;code&gt;delete-trailing-whitespace&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;One possible value is &lt;a href=&#34;https://github.com/lewang/ws-butler&#34;&gt;&lt;code&gt;ws-butler-mode&lt;/code&gt;&lt;/a&gt;, with which only lines touched get trimmed. To use it, add following to your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq editorconfig-trim-whitespaces-mode&#xA;      &#39;ws-butler-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;editorconfig-after-apply-functions&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;(Formerly &lt;code&gt;editorconfig-custom-hooks&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;A list of functions which will be called after loading common EditorConfig settings, when you can set some custom variables.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;web-mode&lt;/code&gt; has several variables for indentation offset size and EditorConfig sets them at once by &lt;code&gt;indent_size&lt;/code&gt;. You can stop indenting only blocks of &lt;code&gt;web-mode&lt;/code&gt; by adding following to your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;editorconfig-after-apply-functions&#xA;  (lambda (props) (setq web-mode-block-padding 0)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Enabling &lt;code&gt;editorconfig-mode&lt;/code&gt; should be enough for normal cases.&lt;/p&gt; &#xA;&lt;p&gt;When EditorConfig properties are not effective for unknown reason, we recommend first trying &lt;code&gt;M-x editorconfig-display-current-properties&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This command will open a new buffer and display the EditorConfig properties loaded for current buffer. You can check if EditorConfig properties were not read for buffers at all, or they were loaded but did not take effect for some other reasons.&lt;/p&gt; &#xA;&lt;h3&gt;Indentation for new major-modes&lt;/h3&gt; &#xA;&lt;p&gt;Because most Emacs major-modes have their own indentation settings, this plugin requires explicit support for each major-mode for &lt;code&gt;indent_size&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;By default this plugin ships with settings for many major-modes, but, sorry to say, it cannot be perfect. Especially it is difficult to support brand-new major-modes. Please feel free to submit issue or pull-request for such major-mode!&lt;/p&gt; &#xA;&lt;p&gt;Supported major-modes and their indentation configs are defined in the variable &lt;code&gt;editorconfig-indentation-alist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Not work at all for FOO-mode!&lt;/h3&gt; &#xA;&lt;p&gt;Most cases properties are loaded just after visiting files when &lt;code&gt;editorconfig-mode&lt;/code&gt; is enabled. But it is known that there are major-modes that this mechanism does not work for and require explicit call of &lt;code&gt;editorconfig-apply&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Typically it will occur when the major-mode is not defined using &lt;code&gt;define-derived-mode&lt;/code&gt; (&lt;code&gt;rpm-spec-mode&lt;/code&gt; is an example for this). Please feel free to submit issues if you find such modes!&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;editorconfig-format-buffer&lt;/code&gt; does not work well with lsp-mode&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; configures indent-region-function so that Emacs uses language servers&#39; &lt;code&gt;textDocument/rangeFormatting&lt;/code&gt; request to format text in buffers. So EditorConfig settings are ignored unless language servers themselves support loading configs from &lt;code&gt;.editorconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this behavior ad-hocly, set &lt;code&gt;lsp-enable-indentation&lt;/code&gt; to nil.&lt;/p&gt; &#xA;&lt;h2&gt;Submitting Bugs and Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;Bugs, feature requests, and other issues should be submitted to the issue tracker: &lt;a href=&#34;https://github.com/editorconfig/editorconfig-emacs/issues&#34;&gt;https://github.com/editorconfig/editorconfig-emacs/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;Make and &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt; must be installed to run the tests locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start a new Emacs process with current &lt;code&gt;*.el&lt;/code&gt; and without loading user init file, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;EditorConfig Emacs Plugin is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>