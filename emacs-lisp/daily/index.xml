<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:32:47Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>minad/consult-flycheck</title>
    <updated>2022-09-01T01:32:47Z</updated>
    <id>tag:github.com,2022-09-01:/minad/consult-flycheck</id>
    <link href="https://github.com/minad/consult-flycheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: consult-flycheck.el - Consult integration for Flycheck #+author: Daniel Mendler #+language: en&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/consult-flycheck&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/consult-flycheck-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/consult-flycheck&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/consult-flycheck-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package provides the =consult-flycheck= command, which integrates [[https://github.com/minad/consult][Consult]] with [[https://github.com/flycheck/flycheck][Flycheck]]. Take a look at the [[https://github.com/minad/consult/blob/main/README.org][Consult README]] for an extensive documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Wilfred/helpful</title>
    <updated>2022-09-01T01:32:47Z</updated>
    <id>tag:github.com,2022-09-01:/Wilfred/helpful</id>
    <link href="https://github.com/Wilfred/helpful" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A better Emacs *help* buffer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Helpful &lt;a href=&#34;https://coveralls.io/github/Wilfred/helpful?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/Wilfred/helpful/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/helpful&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/helpful-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Aaronepower/tokei&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/wilfred/helpful&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Helpful is an alternative to the built-in Emacs help that provides much more contextual information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/helpful/master/screenshots/helpful.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install from MELPA, then call one of the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;helpful-callable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helpful-function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helpful-macro&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helpful-command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helpful-key&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helpful-variable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helpful-at-point&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to replace the default Emacs help keybindings, you can do so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Note that the built-in `describe-function&#39; includes both functions&#xA;;; and macros. `helpful-function&#39; is functions only, so we provide&#xA;;; `helpful-callable&#39; as a drop-in replacement.&#xA;(global-set-key (kbd &#34;C-h f&#34;) #&#39;helpful-callable)&#xA;&#xA;(global-set-key (kbd &#34;C-h v&#34;) #&#39;helpful-variable)&#xA;(global-set-key (kbd &#34;C-h k&#34;) #&#39;helpful-key)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I also recommend the following keybindings to get the most out of helpful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Lookup the current symbol at point. C-c C-d is a common keybinding&#xA;;; for this in lisp modes.&#xA;(global-set-key (kbd &#34;C-c C-d&#34;) #&#39;helpful-at-point)&#xA;&#xA;;; Look up *F*unctions (excludes macros).&#xA;;;&#xA;;; By default, C-h F is bound to `Info-goto-emacs-command-node&#39;. Helpful&#xA;;; already links to the manual, if a function is referenced there.&#xA;(global-set-key (kbd &#34;C-h F&#34;) #&#39;helpful-function)&#xA;&#xA;;; Look up *C*ommands.&#xA;;;&#xA;;; By default, C-h C is bound to describe `describe-coding-system&#39;. I&#xA;;; don&#39;t find this very useful, but it&#39;s frequently useful to only&#xA;;; look at interactive functions.&#xA;(global-set-key (kbd &#34;C-h C&#34;) #&#39;helpful-command)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy&lt;/a&gt; users can use Helpful with counsel commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq counsel-describe-function-function #&#39;helpful-callable)&#xA;(setq counsel-describe-variable-function #&#39;helpful-variable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Source code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/helpful/master/screenshots/helpful_source.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Helpful will try really hard to show the source code. It shows the source code for interactively defined functions (unlike the built-in Help) and falls back to the raw sexp if no source is available.&lt;/p&gt; &#xA;&lt;h3&gt;View Callers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/helpful/master/screenshots/helpful_refs.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Helpful will show you where a function is being called!&lt;/p&gt; &#xA;&lt;h3&gt;Prettier Docstrings&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/helpful/master/screenshots/helpful_docstring.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docstrings in helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highlight the summary (the first sentence)&lt;/li&gt; &#xA; &lt;li&gt;Include cross-references to other functions/variables&lt;/li&gt; &#xA; &lt;li&gt;Linkify references to Info nodes&lt;/li&gt; &#xA; &lt;li&gt;Hide superfluous punctuation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/helpful/master/screenshots/helpful_view_in_manual.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If a symbol is also documented in the Info manual, helpful will provide a link to the relevant section too.&lt;/p&gt; &#xA;&lt;h3&gt;Symbol Properties&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/helpful/master/screenshots/helpful_props.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Helpful will show you the properties that have been applied to the current symbol. This provides visibility of features like edebug or byte-code optimisation.&lt;/p&gt; &#xA;&lt;p&gt;Helpful will also highlight any symbol aliases.&lt;/p&gt; &#xA;&lt;h3&gt;Describe Commands&lt;/h3&gt; &#xA;&lt;p&gt;Helpful provides a separate &lt;code&gt;helpful-command&lt;/code&gt; function, for when you just want to view interactive functions.&lt;/p&gt; &#xA;&lt;h3&gt;View Keymaps&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/helpful/master/screenshots/helpful_bindings.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Helpful displays any keybindings that apply to interactive functions.&lt;/p&gt; &#xA;&lt;h3&gt;Integrated Tooling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/helpful/master/screenshots/helpful_tools.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can trace, debug or disassemble functions from inside Helpful. This is discoverable and doesn&#39;t require memorisation of commands.&lt;/p&gt; &#xA;&lt;h3&gt;Aliases&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Wilfred/helpful/master/screenshots/helpful_aliases.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If a function has multiple aliases in Emacs, Helpful will show all of the aliases defined.&lt;/p&gt; &#xA;&lt;h2&gt;Inspirations&lt;/h2&gt; &#xA;&lt;p&gt;This project has been heavily influenced by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/help+.el&#34;&gt;help+.el&lt;/a&gt;, help-fns+.el, help-mode+.el&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pQQTScuApWk&#34;&gt;Dave Williams&#39; demo of Lucid&#39;s Energize&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPLv3+.&lt;/p&gt; &#xA;&lt;p&gt;I am providing code in the repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not my employer.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stsquad/dired-rsync</title>
    <updated>2022-09-01T01:32:47Z</updated>
    <id>tag:github.com,2022-09-01:/stsquad/dired-rsync</id>
    <link href="https://github.com/stsquad/dired-rsync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Support for rsync from Emacs dired buffers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+Title: dired-rsync -- asynchronous rsync from dired&lt;/p&gt; &#xA;&lt;p&gt;[[https://stable.melpa.org/#/dired-rsync][file:https://stable.melpa.org/packages/dired-rsync-badge.svg]] [[https://melpa.org/#/dired-rsync][file:https://melpa.org/packages/dired-rsync-badge.svg]] [[https://travis-ci.org/stsquad/dired-rsync][file:https://travis-ci.org/stsquad/dired-rsync.svg?branch=master]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package adds a single command &lt;del&gt;dired-rsync&lt;/del&gt; which allows the user to copy marked files in a &lt;del&gt;dired&lt;/del&gt; buffer via rsync. This is useful, especially for large files, because the copy happens in the background and doesn&#39;t lock up Emacs. It is also more efficient than using tramps own encoding methods for moving data between systems.&lt;/p&gt; &#xA;&lt;p&gt;Configuration is simple as you only need to bind the &lt;del&gt;dired-rsync&lt;/del&gt; command to your preferred &lt;del&gt;dired&lt;/del&gt; binding.&lt;/p&gt; &#xA;&lt;p&gt;#+name: configuring-dired-rsync #+begin_src emacs-lisp (use-package dired-rsync :config (bind-key &#34;C-c C-r&#34; &#39;dired-rsync dired-mode-map)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customisation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A variable called &lt;del&gt;dired-rsync-modeline-status&lt;/del&gt; is provided for mode lines that will report the number of active rsync operations in progress. The variable &lt;del&gt;dired-rsync-job-count&lt;/del&gt; contains the number of currently active &lt;del&gt;dired-rsync&lt;/del&gt; jobs currently running.&lt;/p&gt; &#xA;&lt;p&gt;For those that don&#39;t like the way &lt;del&gt;dired-rsync&lt;/del&gt; unmarks transferred files when it completes please see &lt;del&gt;dired-rsync-unmark-on-completion&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to tweak the way marks are collected you can customise &lt;del&gt;dired-rsync-source-files&lt;/del&gt; and provide your own function to return a list of fully qualified names to include in the command.&lt;/p&gt; &#xA;&lt;p&gt;From time to time the call to rsync may fail. dired-rsync keeps the process buffer around for debugging and reports to the console. You can customise &lt;del&gt;dired-rsync-failed-hook&lt;/del&gt; with your own hook function or select the more aggressive &lt;del&gt;dired-rsync--pop-to-rsync-failed-buf&lt;/del&gt; to pop straight to the buffer. Also you can customise &lt;del&gt;dired-rsync-success-hook&lt;/del&gt; with your own hook function to provide notification for compleated transfers.&lt;/p&gt; &#xA;&lt;p&gt;The options &lt;del&gt;dired-rsync-command&lt;/del&gt; and &lt;del&gt;dired-rsync-options&lt;/del&gt; are there to modify the call to rsync but a user is unlikely to need to tweak these.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Technical Notes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While you can use rsync to copy files locally the main use case is copying files to/from a remote system. The rsync tool is always run locally as rsync needs working SSH authentication to work. If you can access a remote machine via tramp/ssh without having to enter a password (because ssh-agent is working) then rsync should work fine.&lt;/p&gt; &#xA;&lt;p&gt;You can also do a remote-to-remote copy although this does involve setting up a port forward so the first remote can access the second remote. Also as dired-rsync needs to reverse ssh from your source location it is best if you fully qualify the location in tramp (i.e. user@remote:/dest/path) so it can extract the correct username to login with. It&#39;s ugly but it works.&lt;/p&gt; &#xA;&lt;p&gt;The test used by &lt;del&gt;dired-rsync&lt;/del&gt; is &lt;del&gt;tramp-tramp-file-p&lt;/del&gt; which will mean any tramp path will attempt to be converted to an rsync path with optional ssh transport. Obviously if your remote target doesn&#39;t also have ssh running and remote rsync binary this will fail. The reporting could be improved.&lt;/p&gt; &#xA;&lt;p&gt;There have been several attempts at doing this but I found them wanting in usability. This attempts to clean up the ideas from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://truongtx.me/tmtxt-dired-async.html&#34;&gt;https://truongtx.me/tmtxt-dired-async.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oremacs.com/2016/02/24/dired-rsync/&#34;&gt;https://oremacs.com/2016/02/24/dired-rsync/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vxlabs.com/2018/03/30/asynchronous-rsync-with-emacs-dired-and-tramp/&#34;&gt;https://vxlabs.com/2018/03/30/asynchronous-rsync-with-emacs-dired-and-tramp/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;in a hopefully cleaner and more idiomatic way.&lt;/p&gt;</summary>
  </entry>
</feed>