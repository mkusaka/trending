<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-02T01:29:10Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>akermu/emacs-libvterm</title>
    <updated>2024-04-02T01:29:10Z</updated>
    <id>tag:github.com,2024-04-02:/akermu/emacs-libvterm</id>
    <link href="https://github.com/akermu/emacs-libvterm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs libvterm integration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/vterm&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/vterm-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Emacs-libvterm (&lt;em&gt;vterm&lt;/em&gt;) is fully-fledged terminal emulator inside GNU Emacs based on &lt;a href=&#34;https://github.com/neovim/libvterm&#34;&gt;libvterm&lt;/a&gt;, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;This package is in active development and, while being stable enough to be used as a daily-driver, it is currently in &lt;strong&gt;alpha&lt;/strong&gt; stage. This means that occasionally the public interface will change (for example names of options or functions). A list of recent breaking changes is in &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#breaking-changes&#34;&gt;appendix&lt;/a&gt;. Moreover, emacs-libvterm deals directly with some low-level operations, hence, bugs can lead to segmentation faults and crashes. If that happens, please &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/new&#34;&gt;report the problem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Given that eshell, shell, and (ansi-)term are Emacs built-in, why should I use vterm?&lt;/h2&gt; &#xA;&lt;p&gt;The short answer is: unparalleled performance and compatibility with standard command-line tools.&lt;/p&gt; &#xA;&lt;p&gt;For the long answer, let us discuss the differences between &lt;code&gt;eshell&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;term&lt;/code&gt; and &lt;code&gt;vterm&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;eshell&lt;/code&gt;: it is a shell completely implemented in Emacs Lisp. It is well-integrated in Emacs and it runs on Windows. It does not support command line tools that require terminal manipulation capabilities (e.g., &lt;code&gt;ncdu&lt;/code&gt;, &lt;code&gt;nmtui&lt;/code&gt;, ...).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shell&lt;/code&gt;: it interfaces with a standard shell (e.g., &lt;code&gt;bash&lt;/code&gt;). It reads an input from Emacs, sends it to the shell, and reports back the output from the shell. As such, like &lt;code&gt;eshell&lt;/code&gt;, it does not support interactive commands, especially those that directly handle how the output should be displayed (e.g., &lt;code&gt;htop&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;term&lt;/code&gt;: it is a terminal emulator written in elisp. &lt;code&gt;term&lt;/code&gt; runs a shell (similarly to other terminal emulators like Gnome Terminal) and programs can directly manipulate the output using escape codes. Hence, many interactive applications (like the one aforementioned) work with &lt;code&gt;term&lt;/code&gt;. However, &lt;code&gt;term&lt;/code&gt; and &lt;code&gt;ansi-term&lt;/code&gt; do not implement all the escapes codes needed, so some programs do not work properly. Moreover, &lt;code&gt;term&lt;/code&gt; has inferior performance compared to standalone terminals, especially with large bursts of output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm&lt;/code&gt;: like &lt;code&gt;term&lt;/code&gt; it is a terminal emulator. Unlike &lt;code&gt;term&lt;/code&gt;, the core of &lt;code&gt;vterm&lt;/code&gt; is an external library written in C, &lt;code&gt;libvterm&lt;/code&gt;. For this reason, &lt;code&gt;vterm&lt;/code&gt; outperforms &lt;code&gt;term&lt;/code&gt; and has a nearly universal compatibility with terminal applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vterm is not for you if you are using Windows, or if you cannot set up Emacs with support for modules. Otherwise, you should try vterm, as it provides a superior terminal experience in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; is like using Gnome Terminal inside Emacs: Vterm is fully-featured and fast, but is not as well integrated in Emacs as &lt;code&gt;eshell&lt;/code&gt; (yet), so some of the editing keybinding you are used to using may not work. For example, &lt;code&gt;evil-mode&lt;/code&gt; is currently not supported (though, users can enable VI emulation in their shells). This is because keys are sent directly to the shell. We are constantly working to improve this.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Before installing emacs-libvterm, you need to make sure you have installed&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;GNU Emacs (&amp;gt;= 25.1) with &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Dynamic-Modules.html&#34;&gt;module support&lt;/a&gt;. You can check that, by verifying that &lt;code&gt;module-file-suffix&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;cmake (&amp;gt;= 3.11)&lt;/li&gt; &#xA; &lt;li&gt;libtool-bin (related issues: &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/66&#34;&gt;#66&lt;/a&gt; &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/85#issuecomment-491845136&#34;&gt;#85&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OPTIONAL: &lt;a href=&#34;https://github.com/Sbozzolo/libvterm-mirror.git&#34;&gt;libvterm&lt;/a&gt; (&amp;gt;= 0.2). This library can be found in the official repositories of most distributions (e.g., Arch, Debian, Fedora, Gentoo, openSUSE, Ubuntu). Typical names are &lt;code&gt;libvterm&lt;/code&gt; (Arch, Fedora, Gentoo, openSUSE), or &lt;code&gt;libvterm-dev&lt;/code&gt; (Debian, Ubuntu). If not available, &lt;code&gt;libvterm&lt;/code&gt; will be downloaded during the compilation process. Some distributions (e.g. Ubuntu &amp;lt; 20.04, Debian &amp;lt; 11) have versions of &lt;code&gt;libvterm&lt;/code&gt; that are too old. If you find compilation errors related to &lt;code&gt;VTERM_COLOR&lt;/code&gt;, you should not use your system libvterm. See &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#frequently-asked-questions-and-problems&#34;&gt;FAQ&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;From MELPA&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; is available on &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;, and it can be installed as a normal package. If the requirements are satisfied (mainly, Emacs was built with support for modules), &lt;code&gt;vterm&lt;/code&gt; will compile the module the first time it is run. This is the recommended way to install &lt;code&gt;vterm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; can be install from MELPA with &lt;code&gt;use-package&lt;/code&gt; by adding the following lines to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package vterm&#xA;    :ensure t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To take full advantage of the capabilities of &lt;code&gt;vterm&lt;/code&gt;, you should configure your shell too. Read about this in the section &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#shell-side-configuration&#34;&gt;shell-side configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manual installation&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/akermu/emacs-libvterm.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, vterm will try to find if libvterm is installed. If it is not found, emacs-libvterm will download the latest version available of libvterm (from &lt;a href=&#34;https://github.com/neovim/libvterm&#34;&gt;here&lt;/a&gt;), compile it, and use it. If you always want to use the vendored version as opposed to the one on you system, set &lt;code&gt;USE_SYSTEM_LIBVTERM&lt;/code&gt; to &lt;code&gt;no&lt;/code&gt;. To do this, change &lt;code&gt;cmake ..&lt;/code&gt; with &lt;code&gt;cmake -DUSE_SYSTEM_LIBVTERM=no ..&lt;/code&gt; in the following instructions.&lt;/p&gt; &#xA;&lt;p&gt;Build the module with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd emacs-libvterm&#xA;mkdir -p build&#xA;cd build&#xA;cmake ..&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add this to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;path/to/emacs-libvterm&#34;)&#xA;(require &#39;vterm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package vterm&#xA;  :load-path  &#34;path/to/emacs-libvterm/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;vterm and Ubuntu&lt;/h2&gt; &#xA;&lt;h3&gt;20.04&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; on Ubuntu requires additional steps. The latest LTS version (20.04) ships without CMake installed and Emacs27 is not yet available from Ubuntu&#39;s package repository.&lt;/p&gt; &#xA;&lt;p&gt;The basic steps for getting vterm to work on Ubuntu 20.04 are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure Emacs27 is installed&lt;/li&gt; &#xA; &lt;li&gt;Install cmake, libtool, and libtool-bin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a few options for installing Emacs27 on Ubuntu 20.04:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile Emacs27 from source&lt;/li&gt; &#xA; &lt;li&gt;Install Emacs27 from Snap&lt;/li&gt; &#xA; &lt;li&gt;Install Emacs27 from Kevin Kelley&#39;s PPA&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In any case, if you have an older Emacs version you will need to purge it before proceeding:&lt;/p&gt; &#xA;&lt;h4&gt;Purge Emacs&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt --purge remove emacs&#xA;sudo apt autoremove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing Emacs27 from Kevin Kelley PPA&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo add-apt-repository ppa:kelleyk/emacs&#xA;sudo apt install emacs27&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;If you get an error about emacs27_common during the install process:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Errors were encountered while processing:&#xA; /tmp/apt-dpkg-install-RVK8CA/064-emacs27-common_27.1~1.git86d8d76aa3-kk2+20.04_all.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt --purge remove emacs-common&#xA;sudo apt --fix-broken install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing Emacs27 from Snap&lt;/h4&gt; &#xA;&lt;p&gt;I hesitate to include SNAP here, because I ran into a number of GTK Theme parsing errors, and Fontconfig errors when I tested it, and reverted to installing from Kevin Kelley&#39;s PPA. YMMV&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo snap install emacs --classic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install CMake and Libtool&lt;/h4&gt; &#xA;&lt;p&gt;In Ubuntu 20.04 CMake (v3.16.3-1ubuntu1) and Libtool can be installed with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install cmake&#xA;sudo apt install libtool&#xA;sudo apt install libtool-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;18.04&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; on Ubuntu 18.04 requires additional steps. 18.04 ships with a version of CMake that is too old for &lt;code&gt;vterm&lt;/code&gt; and GNU Emacs is not compiled with support for dynamical module loading.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to install GNU Emacs with module support from Kevin Kelley&#39;s PPA. The binary in Ubuntu Emacs Lisp PPA is currently broken and leads to segmentation faults (see &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/185#issuecomment-562237077&#34;&gt;#185&lt;/a&gt;). In case Emacs is already on the system, you need to purge it before proceeding with the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo add-apt-repository ppa:kelleyk/emacs&#xA;sudo apt update&#xA;sudo apt-get install emacs26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A way to install a recent version of CMake (&amp;gt;= 3.11) is with linuxbrew.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In some cases, &lt;code&gt;/bin/sh&lt;/code&gt; needs to be relinked to &lt;code&gt;/bin/bash&lt;/code&gt; for the compilation to work (see, &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/216#issuecomment-575934593&#34;&gt;#216&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Pull requests to improve support for Ubuntu are welcome (e.g., simplifying the installation).&lt;/p&gt; &#xA;&lt;p&gt;Some releases of Ubuntu (e.g., 18.04) ship with a old version of libvterm that can lead to compilation errors. If you have this problem, see the &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#frequently-asked-questions-and-problems&#34;&gt;FAQ&lt;/a&gt; for a solution.&lt;/p&gt; &#xA;&lt;h2&gt;GNU Guix&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; and its dependencies are available in GNU Guix as &lt;a href=&#34;https://guix.gnu.org/packages/emacs-vterm-0-1.7d7381f/&#34;&gt;emacs-vterm&lt;/a&gt;. The package can be installed with &lt;code&gt;guix package -i emacs-vterm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shell-side configuration&lt;/h2&gt; &#xA;&lt;p&gt;Some of the most useful features in &lt;code&gt;vterm&lt;/code&gt; (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#directory-tracking-and-prompt-tracking&#34;&gt;directory-tracking and prompt-tracking&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#message-passing&#34;&gt;message passing&lt;/a&gt;) require shell-side configurations. The main goal of these additional functions is to enable the shell to send information to &lt;code&gt;vterm&lt;/code&gt; via properly escaped sequences. A function that helps in this task, &lt;code&gt;vterm_printf&lt;/code&gt;, is defined below. This function is widely used throughout this readme.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, put this in your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vterm_printf() {&#xA;    if [ -n &#34;$TMUX&#34; ] &amp;amp;&amp;amp; ([ &#34;${TERM%%-*}&#34; = &#34;tmux&#34; ] || [ &#34;${TERM%%-*}&#34; = &#34;screen&#34; ]); then&#xA;        # Tell tmux to pass the escape sequences through&#xA;        printf &#34;\ePtmux;\e\e]%s\007\e\\&#34; &#34;$1&#34;&#xA;    elif [ &#34;${TERM%%-*}&#34; = &#34;screen&#34; ]; then&#xA;        # GNU screen (screen, screen-256color, screen-256color-bce)&#xA;        printf &#34;\eP\e]%s\007\e\\&#34; &#34;$1&#34;&#xA;    else&#xA;        printf &#34;\e]%s\e\\&#34; &#34;$1&#34;&#xA;    fi&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This works also for &lt;code&gt;dash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt; put this in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function vterm_printf;&#xA;    if begin; [  -n &#34;$TMUX&#34; ]  ; and  string match -q -r &#34;screen|tmux&#34; &#34;$TERM&#34;; end&#xA;        # tell tmux to pass the escape sequences through&#xA;        printf &#34;\ePtmux;\e\e]%s\007\e\\&#34; &#34;$argv&#34;&#xA;    else if string match -q -- &#34;screen*&#34; &#34;$TERM&#34;&#xA;        # GNU screen (screen, screen-256color, screen-256color-bce)&#xA;        printf &#34;\eP\e]%s\007\e\\&#34; &#34;$argv&#34;&#xA;    else&#xA;        printf &#34;\e]%s\e\\&#34; &#34;$argv&#34;&#xA;    end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Debugging and testing&lt;/h1&gt; &#xA;&lt;p&gt;If you have successfully built the module, you can test it by executing the following command in the &lt;code&gt;build&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Open a terminal in the current window.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-other-window&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Open a terminal in another window.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-copy-mode&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When you enable &lt;code&gt;vterm-copy-mode&lt;/code&gt;, the terminal buffer behaves like a normal &lt;code&gt;read-only&lt;/code&gt; text buffer: you can search, copy text, etc. The default keybinding to toggle &lt;code&gt;vterm-copy-mode&lt;/code&gt; is &lt;code&gt;C-c C-t&lt;/code&gt;. When a region is selected, it is possible to copy the text and leave &lt;code&gt;vterm-copy-mode&lt;/code&gt; with the enter key.&lt;/p&gt; &#xA;&lt;p&gt;If no region is selected when the enter key is pressed it will copy the current line from start to end. If &lt;code&gt;vterm-copy-exclude-prompt&lt;/code&gt; is true it will skip the prompt and not include it in the copy.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt; does exactly what the name suggests: it clears the current buffer from the data that it is not currently visible. &lt;code&gt;vterm-clear-scrollback&lt;/code&gt; is bound to &lt;code&gt;C-c C-l&lt;/code&gt;. This function is typically used with the &lt;code&gt;clear&lt;/code&gt; function provided by the shell to clear both screen and scrollback. In order to achieve this behavior, you need to add a new shell alias.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;, put this in your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;if [[ &#34;$INSIDE_EMACS&#34; = &#39;vterm&#39; ]]; then&#xA;    alias clear=&#39;vterm_printf &#34;51;Evterm-clear-scrollback&#34;;tput clear&#39;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, put this in your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [[ &#34;$INSIDE_EMACS&#34; = &#39;vterm&#39; ]]; then&#xA;    function clear() {&#xA;        vterm_printf &#34;51;Evterm-clear-scrollback&#34;;&#xA;        tput clear;&#xA;    }&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;if [ &#34;$INSIDE_EMACS&#34; = &#39;vterm&#39; ]&#xA;    function clear&#xA;        vterm_printf &#34;51;Evterm-clear-scrollback&#34;;&#xA;        tput clear;&#xA;    end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These aliases take advantage of the fact that &lt;code&gt;vterm&lt;/code&gt; can execute &lt;code&gt;elisp&lt;/code&gt; commands, as explained below.&lt;/p&gt; &#xA;&lt;p&gt;If it possible to automatically clear the scrollback when the screen is cleared by setting the variable &lt;code&gt;vterm-clear-scrollback-when-clearing&lt;/code&gt;: When &lt;code&gt;vterm-clear-scrollback-when-clearing&lt;/code&gt; is non nil, &lt;code&gt;C-l&lt;/code&gt; clears both the screen and the scrollback. When is nil, &lt;code&gt;C-l&lt;/code&gt; only clears the screen. The opposite behavior can be achieved by using the universal prefix (i.e., calling &lt;code&gt;C-u C-l&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-shell&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Shell to run in a new vterm. It defaults to &lt;code&gt;$SHELL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-environment&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;to add more environment variables there is the custom vterm-environment which has a similar format than the internal Emacs variable process-environment. You can check the documentation with C-h v process-environment for more details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-term-environment-variable&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Value for the &lt;code&gt;TERM&lt;/code&gt; environment variable. It defaults to &lt;code&gt;xterm-256color&lt;/code&gt;. If &lt;a href=&#34;https://github.com/dieggsy/eterm-256color&#34;&gt;eterm-256color&lt;/a&gt; is installed, setting &lt;code&gt;vterm-term-environment-variable&lt;/code&gt; to &lt;code&gt;eterm-color&lt;/code&gt; improves the rendering of colors in some systems.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If set to &lt;code&gt;t&lt;/code&gt;, buffers are killed when the associated process is terminated (for example, by logging out the shell). Keeping buffers around it is useful if you need to copy or manipulate the content.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-module-cmake-args&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Compilation flags and arguments to be given to CMake when compiling the module. This string is directly passed to CMake, so it uses the same syntax. At the moment, it main use is for compiling vterm using the system libvterm instead of the one downloaded from GitHub. You can find all the arguments and flags available with &lt;code&gt;cmake -LA&lt;/code&gt; in the build directory.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-copy-exclude-prompt&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Controls whether or not to exclude the prompt when copying a line in &lt;code&gt;vterm-copy-mode&lt;/code&gt;. Using the universal prefix before calling &lt;code&gt;vterm-copy-mode-done&lt;/code&gt; will invert the value for that call, allowing you to temporarily override the setting. When a prompt is not found, the whole line is copied.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt; determines whether to use the vterm prompt tracking, if false it use the regexp in &lt;code&gt;vterm-copy-prompt-regexp&lt;/code&gt; to search for the prompt.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-enable-manipulate-selection-data-by-osc52&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Vterm support copy text to Emacs kill ring and system clipboard by using OSC 52. See &lt;a href=&#34;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html&#34;&gt;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html&lt;/a&gt; for more info about OSC 52. For example: send &#39;blabla&#39; to kill ring: printf &#34;\033]52;c;$(printf &#34;%s&#34; &#34;blabla&#34; | base64)\a&#34;&lt;/p&gt; &#xA;&lt;p&gt;tmux can share its copy buffer to terminals by supporting osc52(like iterm2 xterm), you can enable this feature for tmux by : set -g set-clipboard on #osc 52 copy paste share with iterm set -ga terminal-overrides &#39;,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007&#39; set -ga terminal-overrides &#39;,screen*:XT:Ms=\E]52;%p1%s;%p2%s\007&#39;&lt;/p&gt; &#xA;&lt;p&gt;The clipboard querying/clearing functionality offered by OSC 52 is not implemented here, And for security reason, this feature is disabled by default.&#34;&lt;/p&gt; &#xA;&lt;p&gt;This feature need the new way of handling strings with a struct &lt;code&gt;VTermStringFragment&lt;/code&gt; in libvterm. You&#39;d better compile emacs-libvterm with &lt;code&gt;cmake -DUSE_SYSTEM_LIBVTERM=no ..&lt;/code&gt;. If you don&#39;t do that, when the content you want to copied is too long, it would be truncated by bug of libvterm.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-buffer-name-string&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;vterm-buffer-name-string&lt;/code&gt; is not nil, vterm renames automatically its own buffers with &lt;code&gt;vterm-buffer-name-string&lt;/code&gt;. This string can contain the character &lt;code&gt;%s&lt;/code&gt;, which is substituted with the &lt;em&gt;title&lt;/em&gt; (as defined by the shell, see below). A possible value for &lt;code&gt;vterm-buffer-name-string&lt;/code&gt; is &lt;code&gt;vterm %s&lt;/code&gt;, according to which all the vterm buffers will be named &#34;vterm TITLE&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This requires some shell-side configuration to print the title. For example to set the name &#34;HOSTNAME:PWD&#34;, use can you the following:&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;autoload -U add-zsh-hook&#xA;add-zsh-hook -Uz chpwd (){ print -Pn &#34;\e]2;%m:%2~\a&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PROMPT_COMMAND=&#34;${PROMPT_COMMAND:+$PROMPT_COMMAND; }&#34;&#39;echo -ne &#34;\033]0;${HOSTNAME}:${PWD}\007&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function fish_title&#xA;    hostname&#xA;    echo &#34;:&#34;&#xA;    prompt_pwd&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://tldp.org/HOWTO/Xterm-Title-4.html&#34;&gt;zsh and bash&lt;/a&gt; and &lt;a href=&#34;https://fishshell.com/docs/current/#programmable-title&#34;&gt;fish documentations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-always-compile-module&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Vterm needs &lt;code&gt;vterm-module&lt;/code&gt; to work. This can be compiled externally, or &lt;code&gt;vterm&lt;/code&gt; will ask the user whether to build the module when &lt;code&gt;vterm&lt;/code&gt; is first called. To avoid this question and always compile the module, set &lt;code&gt;vterm-always-compile-module&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-copy-mode-remove-fake-newlines&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When not-nil fake newlines are removed on entering copy mode. vterm inserts fake-newlines purely for rendering. When using &lt;code&gt;vterm-copy-mode&lt;/code&gt; these are in conflict with many emacs functions like isearch-forward. if this varialbe is not-nil the fake-newlines are removed on entering copy-mode and re-inserted on leaving copy mode. Also truncate-lines is set to t on entering copy-mode and set to nil on leaving.&lt;/p&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;If you want a key to be sent to the terminal, bind it to &lt;code&gt;vterm--self-insert&lt;/code&gt;, or remove it from &lt;code&gt;vterm-mode-map&lt;/code&gt;. By default, &lt;code&gt;vterm.el&lt;/code&gt; binds most of the &lt;code&gt;C-&amp;lt;char&amp;gt;&lt;/code&gt; and &lt;code&gt;M-&amp;lt;char&amp;gt;&lt;/code&gt; keys, &lt;code&gt;&amp;lt;f1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;f12&amp;gt;&lt;/code&gt; and some special keys like &lt;code&gt;&amp;lt;backspace&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt;. Sending a keyboard interrupt is bound to &lt;code&gt;C-c C-c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to send a keypress that is already recognized by Emacs, such as &lt;code&gt;C-g&lt;/code&gt;, use the interactive function &lt;code&gt;vterm-send-next-key&lt;/code&gt;. This can be bound to a key in the &lt;code&gt;vterm-mode-map&lt;/code&gt; like &lt;code&gt;C-q&lt;/code&gt;, in which case pressing &lt;code&gt;C-q C-g&lt;/code&gt; will send a &lt;code&gt;C-g&lt;/code&gt; key to the terminal, and so on for other modified keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key vterm-mode-map (kbd &#34;C-q&#34;) #&#39;vterm-send-next-key)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be useful for controlling an application running in the terminal, such as Emacs or Nano.&lt;/p&gt; &#xA;&lt;h2&gt;Fonts&lt;/h2&gt; &#xA;&lt;p&gt;You can change the font (the &lt;em&gt;face&lt;/em&gt;) used in a vterm with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;vterm-mode-hook&#xA;          (lambda ()&#xA;            (set (make-local-variable &#39;buffer-face-mode-face) &#39;fixed-pitch)&#xA;                 (buffer-face-mode t)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where instead of &lt;code&gt;&#39;fixed-pitch&lt;/code&gt; you specify the face you want to use. The example reported here can be used to force vterm to use a mono-spaced font (the &lt;code&gt;fixed-pitch&lt;/code&gt; face). This is useful when your default font in Emacs is a proportional font.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, you can disable some text properties (bold, underline, reverse video) setting the relative option to &lt;code&gt;t&lt;/code&gt; (&lt;code&gt;vterm-disable-bold&lt;/code&gt;, &lt;code&gt;vterm-disable-underline&lt;/code&gt;, or &lt;code&gt;vterm-disable-inverse-video&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can use another font for vterm buffer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;vterm-mode-hook&#xA;          (lambda ()&#xA;               (set (make-local-variable &#39;buffer-face-mode-face) &#39;(:family &#34;IosevkaTerm Nerd Font&#34;))&#xA;               (buffer-face-mode t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Blink cursor&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;vterm-ignore-blink-cursor&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;, vterm will ignore request from application to turn on or off cursor blink.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;nil&lt;/code&gt;, cursor in any window may begin to blink or not blink because &lt;code&gt;blink-cursor-mode&lt;/code&gt; is a global minor mode in Emacs, you can use &lt;code&gt;M-x blink-cursor-mode&lt;/code&gt; to toggle.&lt;/p&gt; &#xA;&lt;h2&gt;Colors&lt;/h2&gt; &#xA;&lt;p&gt;Customize the following faces to your liking. It is possible to specify different colors for foreground and background via the &lt;code&gt;:foreground&lt;/code&gt; and &lt;code&gt;:background&lt;/code&gt; attributes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vterm-color-black&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-red&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-green&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-yellow&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-blue&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-magenta&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-cyan&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-white&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-black&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-red&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-green&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-yellow&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-blue&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-magenta&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-cyan&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-white&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory tracking and Prompt tracking&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; supports &lt;em&gt;directory tracking&lt;/em&gt;. If this feature is enabled, the default directory in Emacs and the current working directory in &lt;code&gt;vterm&lt;/code&gt; are synced. As a result, interactive functions that ask for a path or a file (e.g., &lt;code&gt;dired&lt;/code&gt; or &lt;code&gt;find-file&lt;/code&gt;) will do so starting from the current location.&lt;/p&gt; &#xA;&lt;p&gt;And &lt;code&gt;vterm&lt;/code&gt; supports &lt;em&gt;prompt tracking&lt;/em&gt;. If this feature is enabled, Emacs knows where the prompt ends, you needn&#39;t customize &lt;code&gt;term-prompt-regexp&lt;/code&gt; any more. Then you can use &lt;code&gt;vterm-next-prompt&lt;/code&gt; and &lt;code&gt;vterm-previous-prompt&lt;/code&gt; moving to end of next/previous prompt. The default keybinding is &lt;code&gt;C-c C-n&lt;/code&gt; and &lt;code&gt;C-c C-p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And &lt;code&gt;vterm-beginning-of-line&lt;/code&gt; would move the point to the first character after the shell prompt on this line. If the point is already there, move to the beginning of the line. The default keybinding is &lt;code&gt;C-a&lt;/code&gt; in &lt;code&gt;vterm-copy-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And &lt;code&gt;vterm--at-prompt-p&lt;/code&gt; would check whether the cursor is at the point just after the shell prompt.&lt;/p&gt; &#xA;&lt;p&gt;Directory tracking and Prompt tracking requires some configuration, as the shell has to be instructed to share the relevant information with Emacs. The following pieces of code assume that you have the function &lt;code&gt;vterm_printf&lt;/code&gt; as defined in section &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#shell-side-configuration&#34;&gt;shell-side configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;, put this at the end of your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;vterm_prompt_end() {&#xA;    vterm_printf &#34;51;A$(whoami)@$(hostname):$(pwd)&#34;&#xA;}&#xA;setopt PROMPT_SUBST&#xA;PROMPT=$PROMPT&#39;%{$(vterm_prompt_end)%}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, put this at the end of your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vterm_prompt_end(){&#xA;    vterm_printf &#34;51;A$(whoami)@$(hostname):$(pwd)&#34;&#xA;}&#xA;PS1=$PS1&#39;\[$(vterm_prompt_end)\]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;, put this in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function vterm_prompt_end;&#xA;    vterm_printf &#39;51;A&#39;(whoami)&#39;@&#39;(hostname)&#39;:&#39;(pwd)&#xA;end&#xA;functions --copy fish_prompt vterm_old_fish_prompt&#xA;function fish_prompt --description &#39;Write out the prompt; do not replace this. Instead, put this at end of your file.&#39;&#xA;    # Remove the trailing newline from the original prompt. This is done&#xA;    # using the string builtin from fish, but to make sure any escape codes&#xA;    # are correctly interpreted, use %b for printf.&#xA;    printf &#34;%b&#34; (string join &#34;\n&#34; (vterm_old_fish_prompt))&#xA;    vterm_prompt_end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we are using the function &lt;code&gt;vterm_printf&lt;/code&gt; that we have discussed above, so make sure that this function is defined in your configuration file.&lt;/p&gt; &#xA;&lt;p&gt;Directory tracking works on remote servers too. In case the hostname of your remote machine does not match the actual hostname needed to connect to that server, change &lt;code&gt;$(hostname)&lt;/code&gt; with the correct one. For example, if the correct hostname is &lt;code&gt;foo&lt;/code&gt; and the username is &lt;code&gt;bar&lt;/code&gt;, you should have something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;HOSTNAME=foo&#xA;USER=baz&#xA;vterm_printf &#34;51;A$USER@$HOSTNAME:$(pwd)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Message passing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; can read and execute commands. At the moment, a command is passed by providing a specific escape sequence. For example, to evaluate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(message &#34;Hello!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;printf &#34;\e]51;Emessage \&#34;Hello\!\&#34;\e\\&#34;&#xA;# or&#xA;vterm_printf &#34;51;Emessage \&#34;Hello\!\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The commands that are understood are defined in the setting &lt;code&gt;vterm-eval-cmds&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As &lt;code&gt;split-string-and-unquote&lt;/code&gt; is used the parse the passed string, double quotes and backslashes need to be escaped via backslash. A convenient shell function to automate the substitution is&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vterm_cmd() {&#xA;    local vterm_elisp&#xA;    vterm_elisp=&#34;&#34;&#xA;    while [ $# -gt 0 ]; do&#xA;        vterm_elisp=&#34;$vterm_elisp&#34;&#34;$(printf &#39;&#34;%s&#34; &#39; &#34;$(printf &#34;%s&#34; &#34;$1&#34; | sed -e &#39;s|\\|\\\\|g&#39; -e &#39;s|&#34;|\\&#34;|g&#39;)&#34;)&#34;&#xA;        shift&#xA;    done&#xA;    vterm_printf &#34;51;E$vterm_elisp&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function vterm_cmd --description &#39;Run an Emacs command among the ones been defined in vterm-eval-cmds.&#39;&#xA;    set -l vterm_elisp ()&#xA;    for arg in $argv&#xA;        set -a vterm_elisp (printf &#39;&#34;%s&#34; &#39; (string replace -a -r &#39;([\\\\&#34;])&#39; &#39;\\\\\\\\$1&#39; $arg))&#xA;    end&#xA;    vterm_printf &#39;51;E&#39;(string join &#39;&#39; $vterm_elisp)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can write shell functions to call the ones defined in &lt;code&gt;vterm-eval-cmds&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;find_file() {&#xA;    vterm_cmd find-file &#34;$(realpath &#34;${@:-.}&#34;)&#34;&#xA;}&#xA;&#xA;say() {&#xA;    vterm_cmd message &#34;%s&#34; &#34;$*&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for &lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function find_file&#xA;    set -q argv[1]; or set argv[1] &#34;.&#34;&#xA;    vterm_cmd find-file (realpath &#34;$argv&#34;)&#xA;end&#xA;&#xA;function say&#xA;    vterm_cmd message &#34;%s&#34; &#34;$argv&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This newly defined &lt;code&gt;find_file&lt;/code&gt; function can now be used inside &lt;code&gt;vterm&lt;/code&gt; as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;find_file name_of_file_in_local_directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you call &lt;code&gt;find_file&lt;/code&gt; without specifying any file (you just execute &lt;code&gt;find_file&lt;/code&gt; in your shell), &lt;code&gt;dired&lt;/code&gt; will open with the current directory.&lt;/p&gt; &#xA;&lt;p&gt;As an example, say you like having files opened below the current window. You could add the command to do it on the lisp side like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(push (list &#34;find-file-below&#34;&#xA;            (lambda (path)&#xA;              (if-let* ((buf (find-file-noselect path))&#xA;                        (window (display-buffer-below-selected buf nil)))&#xA;                  (select-window window)&#xA;                (message &#34;Failed to open file: %s&#34; path))))&#xA;      vterm-eval-cmds)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the command in your &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;open_file_below() {&#xA;    vterm_cmd find-file-below &#34;$(realpath &#34;${@:-.}&#34;)&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can open any file from inside your shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;open_file_below ~/Documents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shell-side configuration files&lt;/h2&gt; &#xA;&lt;p&gt;The configurations described in earlier sections are combined in &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/etc/&#34;&gt;&lt;code&gt;etc/&lt;/code&gt;&lt;/a&gt;. These can be appended to or loaded into your user configuration file. Alternatively, they can be installed system-wide, for example in &lt;code&gt;/etc/bash/bashrc.d/&lt;/code&gt;, &lt;code&gt;/etc/profile.d/&lt;/code&gt; (for &lt;code&gt;zsh&lt;/code&gt;), or &lt;code&gt;/etc/fish/conf.d/&lt;/code&gt; for &lt;code&gt;fish&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using vterm Emacs sets the environment variable INSIDE_EMACS in the subshell to ‘vterm’. Usually the programs check this variable to determine whether they are running inside Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Vterm also sets an extra variable EMACS_VTERM_PATH to the place where the vterm library is installed. This is very useful because when vterm is installed from melpa the Shell-side configuration files are in the EMACS_VTERM_PATH inside the /etc sub-directory. After a package update, the directory name changes, so, a code like this in your bashrc could be enough to load always the latest version of the file from the right location without coping any file manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if [[ &#34;$INSIDE_EMACS&#34; = &#39;vterm&#39; ]] \&#xA;    &amp;amp;&amp;amp; [[ -n ${EMACS_VTERM_PATH} ]] \&#xA;    &amp;amp;&amp;amp; [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then&#xA;&#x9;source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frequently Asked Questions and Problems&lt;/h2&gt; &#xA;&lt;h3&gt;How can I increase the size of the scrollback?&lt;/h3&gt; &#xA;&lt;p&gt;By default, the scrollback can contain up to 1000 lines per each vterm buffer. You can increase this up to 100000 by changing the variable &lt;code&gt;vterm-max-scrollback&lt;/code&gt;. If you want to increase it further, you have to edit the file &lt;code&gt;vterm-module.h&lt;/code&gt;, change the variable &lt;code&gt;SB_MAX&lt;/code&gt;, and set the new value for &lt;code&gt;vterm-max-scrollback&lt;/code&gt;. The potential maximum memory consumption of vterm buffers increases with &lt;code&gt;vterm-max-scrollback&lt;/code&gt;, so setting &lt;code&gt;SB_MAX&lt;/code&gt; to extreme values may lead to system instabilities and crashes.&lt;/p&gt; &#xA;&lt;h3&gt;How can I automatically close vterm buffers when the process is terminated?&lt;/h3&gt; &#xA;&lt;p&gt;There is an option for that: set &lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The package does not compile, I have errors related to &lt;code&gt;VTERM_COLOR&lt;/code&gt;.&lt;/h3&gt; &#xA;&lt;p&gt;The version of &lt;code&gt;libvterm&lt;/code&gt; installed on your system is too old. You should let &lt;code&gt;emacs-libvterm&lt;/code&gt; download &lt;code&gt;libvterm&lt;/code&gt; for you. You can either uninstall your libvterm, or instruct Emacs to ignore the system libvterm. If you are compiling from Emacs, you can do this by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq vterm-module-cmake-args &#34;-DUSE_SYSTEM_LIBVTERM=no&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and compile again. If you are compiling with CMake, use the flag &lt;code&gt;-DUSE_SYSTEM_LIBVTERM=no&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;C-backspace&amp;gt;&lt;/code&gt; doesn&#39;t kill previous word.&lt;/h3&gt; &#xA;&lt;p&gt;This can be fixed by rebinding the key to what &lt;code&gt;C-w&lt;/code&gt; does:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key vterm-mode-map (kbd &#34;&amp;lt;C-backspace&amp;gt;&#34;)&#xA;    (lambda () (interactive) (vterm-send-key (kbd &#34;C-w&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;counsel-yank-pop&lt;/code&gt; doesn&#39;t work.&lt;/h3&gt; &#xA;&lt;p&gt;Add this piece of code to your configuration file to make &lt;code&gt;counsel&lt;/code&gt; use the correct function to yank in vterm buffers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun vterm-counsel-yank-pop-action (orig-fun &amp;amp;rest args)&#xA;  (if (equal major-mode &#39;vterm-mode)&#xA;      (let ((inhibit-read-only t)&#xA;            (yank-undo-function (lambda (_start _end) (vterm-undo))))&#xA;        (cl-letf (((symbol-function &#39;insert-for-yank)&#xA;               (lambda (str) (vterm-send-string str t))))&#xA;            (apply orig-fun args)))&#xA;    (apply orig-fun args)))&#xA;&#xA;(advice-add &#39;counsel-yank-pop-action :around #&#39;vterm-counsel-yank-pop-action)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How can I get the local directory without shell-side configuration?&lt;/h3&gt; &#xA;&lt;p&gt;We recommend that you set up shell-side configuration for reliable directory tracking. If you cannot do it, a possible workaround is the following.&lt;/p&gt; &#xA;&lt;p&gt;On most GNU/Linux systems, you can read current directory from &lt;code&gt;/proc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun vterm-directory-sync ()&#xA;  &#34;Synchronize current working directory.&#34;&#xA;  (interactive)&#xA;  (when vterm--process&#xA;    (let* ((pid (process-id vterm--process))&#xA;           (dir (file-truename (format &#34;/proc/%d/cwd/&#34; pid))))&#xA;      (setq default-directory dir))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A possible application of this function is in combination with &lt;code&gt;find-file&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(advice-add #&#39;find-file :before #&#39;vterm-directory-sync)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method does not work on remote machines.&lt;/p&gt; &#xA;&lt;h3&gt;How can I get the directory tracking in a more understandable way?&lt;/h3&gt; &#xA;&lt;p&gt;If you looked at the recommended way to set-up directory tracking, you will have noticed that it requires printing obscure code like &lt;code&gt;\e]2;%m:%2~\a&lt;/code&gt; (unless you are using &lt;code&gt;fish&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;There is another way to achieve this behavior. Define a shell function, on a local host you can simply use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vterm_set_directory() {&#xA;    vterm_cmd update-pwd &#34;$PWD/&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On a remote one, use instead&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vterm_set_directory() {&#xA;    vterm_cmd update-pwd &#34;/-:&#34;&#34;$USER&#34;&#34;@&#34;&#34;$HOSTNAME&#34;&#34;:&#34;&#34;$PWD/&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, for &lt;code&gt;zsh&lt;/code&gt;, add this function to the &lt;code&gt;chpwd&lt;/code&gt; hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;autoload -U add-zsh-hook&#xA;add-zsh-hook -Uz chpwd (){ vterm_set_directory }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, append it to the prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PROMPT_COMMAND=&#34;${PROMPT_COMMAND:+$PROMPT_COMMAND; }vterm_set_directory&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, add &lt;code&gt;update-pwd&lt;/code&gt; to the list of commands that Emacs is allowed to execute from vterm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;vterm-eval-cmds &#39;(&#34;update-pwd&#34; (lambda (path) (setq default-directory path))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When evil-mode is enabled, the cursor moves back in normal state, and this messes directory tracking&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;evil-collection&lt;/code&gt; provides a solution for this problem. If you do not want to use &lt;code&gt;evil-collection&lt;/code&gt;, you can add the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun evil-collection-vterm-escape-stay ()&#xA;&#34;Go back to normal state but don&#39;t move&#xA;cursor backwards. Moving cursor backwards is the default vim behavior but it is&#xA;not appropriate in some cases like terminals.&#34;&#xA;(setq-local evil-move-cursor-back nil))&#xA;&#xA;(add-hook &#39;vterm-mode-hook #&#39;evil-collection-vterm-escape-stay)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jixiuf/vterm-toggle&#34;&gt;vterm-toggle&lt;/a&gt;: Toggles between a vterm and the current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/suonlight/multi-libvterm&#34;&gt;multi-libvterm&lt;/a&gt;: Multiterm for emacs-libvterm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Breaking changes&lt;/h3&gt; &#xA;&lt;p&gt;Obsolete variables will be removed in version 0.1.&lt;/p&gt; &#xA;&lt;h4&gt;August 2022&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-send-C-[a-z]&lt;/code&gt; &lt;code&gt;vterm-send-M-[a-z]&lt;/code&gt; &lt;code&gt;vterm-define-key&lt;/code&gt; &lt;code&gt;vterm-send-{up/down/left/right/prior/next/meta-dot/meta-comma/ctrl-slash}&lt;/code&gt; were obsolete, please use &lt;code&gt;vterm-send&lt;/code&gt; or &lt;code&gt;vterm-send-key&lt;/code&gt; or &lt;code&gt;vterm--self-insert&lt;/code&gt; instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;October 2020&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-disable-bold-font&lt;/code&gt; was renamed to &lt;code&gt;vterm-disable-bold&lt;/code&gt; to uniform it with the other similar options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;July 2020&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-use-vterm-prompt&lt;/code&gt; was renamed to &lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt; is set to &lt;code&gt;t&lt;/code&gt; by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;April 2020&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt; was renamed to &lt;code&gt;vterm-clear-scrollback-when-clearning&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-set-title-functions&lt;/code&gt; was removed. In its place, there is a new custom option &lt;code&gt;vterm-buffer-name-string&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/vterm-buffer-name-string&#34;&gt;vterm-buffer-name-string&lt;/a&gt; for documentation.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>