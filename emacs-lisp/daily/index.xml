<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:30:39Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>licht1stein/context-transient.el</title>
    <updated>2024-05-01T01:30:39Z</updated>
    <id>tag:github.com,2024-05-01:/licht1stein/context-transient.el</id>
    <link href="https://github.com/licht1stein/context-transient.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Context specific transient menus for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;context-transient.el&lt;/h1&gt; &#xA;&lt;p&gt;Easily create context-specific transient menus for Emacs. Context can be anything — buffer name, current git repo, current project etc. See examples.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This is a menu I get when pressing F6 while working on one of my projects:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/licht1stein/context-transient.el/master/img/example-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;What the commands do is not important, what&#39;s important is how easy it was to make a project-specific transient menu with useful commands.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have defined your context-specific transients, call them with &lt;code&gt;M-x context-transient RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Using use-package and elpaca:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package context-transient&#xA;  :elpaca (:type git :host github :repo &#34;licht1stein/context-transient.el&#34;)&#xA;  :defer nil&#xA;  :bind (&#34;&amp;lt;f6&amp;gt;&#34; . context-transient))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I recommend binding &lt;code&gt;context-transient&lt;/code&gt; to something easily accessible, F6 in the example above.&lt;/p&gt; &#xA;&lt;h2&gt;Defining context transients&lt;/h2&gt; &#xA;&lt;p&gt;Context transients are defined using &lt;code&gt;context-transient-define&lt;/code&gt;. You can specify one of the following keys to check current context:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:repo&lt;/code&gt; - checks if the current git repo name is equal to this&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:project&lt;/code&gt; - checks if the current project name is equal to this (note, this is built-in project.el, not projectile)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:buffer&lt;/code&gt; - checks if the current buffer name is equal to this&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:mode&lt;/code&gt;- checks if the current major mode is this&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:context&lt;/code&gt; - arbitrary code that will be run to check if the transient should be run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Obviously, it&#39;s quite possible to define several transients that would apply to the current context. In this case user will be prompted to choose which one to run.&lt;/p&gt; &#xA;&lt;h3&gt;Git repo context (&lt;code&gt;:repo&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;This example defines a transient menu for git repos. Note the usage of &lt;code&gt;:repo&lt;/code&gt; function — this is a helper function that returns &lt;code&gt;t&lt;/code&gt; if the repo name is equal to it&#39;s argument. But context accepts any expression that evaluates to &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define context-transient-repo&#xA;  :doc &#34;Repo specific transient&#34;&#xA;  :repo &#34;context-transient.el&#xA;  :menu&#xA;  [&#34;Section&#34;&#xA;  [&#34;Subsection&#34;&#xA;   (&#34;i&#34; &#34;Increase font&#34; text-scale-increase :transient nil)&#xA;   (&#34;o&#34; &#34;Decrease font&#34; text-scale-decrease :transient nil)]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/licht1stein/context-transient.el/master/img/example-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Buffer name context (&lt;code&gt;:buffer&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;The following example runs the transient if current buffer name is &lt;code&gt;*scratch*&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define itch&#xA;  :doc &#34;Itch a *scratch*&#34;&#xA;  :buffer &#34;*scratch*&#34;&#xA;  :menu&#xA;  [[&#34;Test&#34; (&#34;i&#34; &#34;Itch *scratch*&#34; (lambda () (interactive) (message &#34;Itched&#34;)))]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Project context (&lt;code&gt;:project&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;This will check if the built-in project.el project name is equal to this. Same as &lt;code&gt;:buffer&lt;/code&gt; or &lt;code&gt;:repo&lt;/code&gt; — just pass a project name as a string.&lt;/p&gt; &#xA;&lt;h3&gt;Major mode context (&lt;code&gt;:mode&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Checks if the current major-mode is this. Note, you need to provided the major mode as a quoted symbol, and not as a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define&#xA; dired-transient&#xA; :doc &#34;My Dired Transient&#34;&#xA; :mode &#39;dired-mode&#xA; :menu&#xA; [[&#34;Dired&#34;&#xA;   (&#34;d&#34; &#34;Dired mode&#34; (lambda () (interactive) (message &#34;This is dired!&#34;)))]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Any expression context (&lt;code&gt;:context&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;You can run any lisp expression in &lt;code&gt;:context&lt;/code&gt;. For example, transient only works on Thursdays:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define thursdays-transient&#xA;  :doc &#34;Only show this menu on Thursdays&#34;&#xA;  :context (equal &#34;Thursday&#34; (format-time-string &#34;%A&#34;))&#xA;  :menu&#xA;  [[&#34;Thursday!&#34;&#xA;    (&#34;t&#34; &#34;Once a week&#34; (lambda () (interactive) (message &#34;IT IS THURSDAY!&#34;)))]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clojure Specific Example&lt;/h3&gt; &#xA;&lt;p&gt;Normally with transient you would need to be a bit more verbose to use it to run interactive CIDER commands while working on a Clojure project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define my-clj-transient&#xA;  :doc &#34;Transient for my-clj-repo&#34;&#xA;  :repo &#34;my-clj-repo&#34;&#xA;  :menu &#xA;  [[&#34;REPL&#34;&#xA;   (&#34;c&#34; &#34;Connect REPL&#34; (lambda () (interactive) (cider-connect-clj &#39;(:host &#34;localhost&#34; :port 63000))) :transient nil)&#xA;   (&#34;d&#34; &#34;Sync deps&#34; (lambda () (interactive) (cider-interactive-eval &#34;(sync-deps)&#34;)))]&#xA;  [&#34;Debug&#34;&#xA;   (&#34;p&#34; &#34;Start portal&#34; (lambda () (interactive) (cider-interactive-eval &#34;(user/portal)&#34;)))&#xA;   (&#34;P&#34; &#34;Clear portal&#34; (lambda () (interactive) (cider-interactive-eval &#34;(user/portal-clear)&#34;)))&#xA;   (&#34;S&#34; &#34;Require snitch&#34; (lambda () (interactive) (cider-interactive-eval &#34;(require &#39;[snitch.core :refer [defn* defmethod* *fn *let]])&#34;)))]&#xA;  [&#34;Systems&#34;&#xA;   (&#34;a&#34; &#34;(Re)start main system&#34; (lambda () (interactive) (cider-interactive-eval &#34;(user/restart-sync)&#34;)))&#xA;   (&#34;A&#34; &#34;Stop main system&#34; (lambda () (interactive) (cider-interactive-eval &#34;(user/restart-sync)&#34;)))]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/licht1stein/context-transient.el/master/img/example-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Better way for Clojure&lt;/h4&gt; &#xA;&lt;p&gt;There&#39;s a much nicer way to do this with context-transient. We provide a helper function &lt;code&gt;context-transient-require-defclj&lt;/code&gt;that creates a &lt;code&gt;defclj&lt;/code&gt; macro and allows rewriting the above example like in the code below.&lt;/p&gt; &#xA;&lt;p&gt;Note, that commands created by &lt;code&gt;defclj&lt;/code&gt; are interactive and can also &lt;strong&gt;be used from the &lt;code&gt;M-x&lt;/code&gt; menu&lt;/strong&gt; or bound to hotkeys. Because of this, &lt;code&gt;defclj&lt;/code&gt; also accepts an optional docstring:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(defclj my-sync-deps (sync-deps) &#34;Sync project deps&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the rewritten menu from above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-require-defclj)&#xA;&#xA;(defclj my-sync-deps (sync-deps) &#34;Sync project deps&#34;)&#xA;(defclj my-portal (user/portal))&#xA;(defclj my-portal-clear (user/portal-clear))&#xA;(defclj my-require-snitch (require &#39;[snitch.core :refer [defn* defmethod* *fn *let]]))&#xA;(defclj my-restart-sync (user/restart-sync))&#xA;(defclj my-stop-sync (user/stop-sync))&#xA;&#xA;(context-transient-define&#xA; my-clj-transient&#xA; :doc &#34;Transient for my-clj repo&#34;&#xA; :repo &#34;my-clj-repo&#34;&#xA; :menu&#xA; [[&#34;REPL&#34;&#xA;   (&#34;c&#34; &#34;Connect REPL&#34; (lambda () (interactive) (cider-connect-clj &#39;(:host &#34;localhost&#34; :port 63000))) :transient nil)&#xA;   (&#34;d&#34; &#34;Sync deps&#34; my-sync-deps)]&#xA;  [&#34;Debug&#34;&#xA;   (&#34;p&#34; &#34;Start portal&#34; my-portal)&#xA;   (&#34;P&#34; &#34;Clear portal&#34; my-portal-clear)&#xA;   (&#34;S&#34; &#34;Require snitch&#34; my-require-snitch)]&#xA;  [&#34;Systems&#34;&#xA;   (&#34;a&#34; &#34;(Re)start main system&#34; my-restart-sync)&#xA;   (&#34;A&#34; &#34;Stop main system&#34; my-stop-sync)]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that the second argument to &lt;code&gt;defclj&lt;/code&gt; is unquoted Clojure code, not elisp.&lt;/p&gt; &#xA;&lt;h2&gt;Clearing context-transients&lt;/h2&gt; &#xA;&lt;p&gt;If for some reason a previously defined transient misbehaves, you can clear all context transients by running &lt;code&gt;M-x context-transient-clear RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;This library started as a variation on my &lt;a href=&#34;https://github.com/licht1stein/repo-hydra.el&#34;&gt;repo-hydra.el&lt;/a&gt; library. But thanks to the help from &lt;a href=&#34;https://github.com/progfolio&#34;&gt;Nicholas Vollmer (@progfolio)&lt;/a&gt; it became a much more useful tool.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>federicotdn/verb</title>
    <updated>2024-05-01T01:30:39Z</updated>
    <id>tag:github.com,2024-05-01:/federicotdn/verb</id>
    <link href="https://github.com/federicotdn/verb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Organize and send HTTP requests from Emacs&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;verb&#34; src=&#34;https://github.com/federicotdn/verb/raw/main/extra/logo/logo2.png&#34; width=&#34;50%&#34;&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Verb&lt;/strong&gt; is a package for Emacs which allows you to organize and send HTTP requests.&lt;/p&gt; &#xA;&lt;p&gt;The package introduces a new minor mode, &lt;strong&gt;Verb mode&lt;/strong&gt;, which works as an extension to &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org mode&lt;/a&gt;. The core idea is to organize specifications for HTTP requests using Org&#39;s tree structure. Properties defined in the child headings extend or sometimes override properties defined in the parent headings - this way, it is easy to define many HTTP request specifications without having to repeat common components as URL hosts, authentication headers, ports, etc. Verb tries to combine the usefulness of Org mode with the common functionality provided by other HTTP clients. However, very little knowledge of Org mode is needed to use Verb.&lt;/p&gt; &#xA;&lt;p&gt;Verb requires at least Emacs version 26 to work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/federicotdn/verb/actions&#34;&gt;&lt;img src=&#34;https://github.com/federicotdn/verb/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/verb&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/verb-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/verb&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/verb-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/federicotdn/verb.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Send HTTP and HTTPS requests from Emacs.&lt;/li&gt; &#xA; &lt;li&gt;Organize request specifications into trees using Org mode.&lt;/li&gt; &#xA; &lt;li&gt;Easily define common attributes (URLs, query strings, headers, etc.) for many requests.&lt;/li&gt; &#xA; &lt;li&gt;Correctly handle text encodings (charsets) for requests and responses.&lt;/li&gt; &#xA; &lt;li&gt;Display PDF, PNG, JPEG, BMP, GIF and SVG responses.&lt;/li&gt; &#xA; &lt;li&gt;Embed Emacs Lisp expressions in specifications (with code completion!).&lt;/li&gt; &#xA; &lt;li&gt;Can export requests to &lt;code&gt;curl&lt;/code&gt; and other external tools.&lt;/li&gt; &#xA; &lt;li&gt;Integrates with Babel and EWW.&lt;/li&gt; &#xA; &lt;li&gt;Includes mouse support (menu bar and mode line).&lt;/li&gt; &#xA; &lt;li&gt;Supports file uploads.&lt;/li&gt; &#xA; &lt;li&gt;Has no dependencies!&lt;/li&gt; &#xA; &lt;li&gt;Easy to use! (hopefully).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#usage-guide&#34;&gt;Usage Guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#writing-request-specifications&#34;&gt;Writing Request Specifications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#enabling-verb-in-org-buffers&#34;&gt;Enabling Verb in Org Buffers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#sending-requests&#34;&gt;Sending Requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#the-response-body-buffer&#34;&gt;The Response Body Buffer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#re-sending-requests&#34;&gt;Re-sending Requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#show-corresponding-request&#34;&gt;Show Corresponding Request&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#the-response-headers-buffer&#34;&gt;The Response Headers Buffer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#specifying-http-headers&#34;&gt;Specifying HTTP Headers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#adding-a-body&#34;&gt;Adding a Body&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#extend-and-override-requests&#34;&gt;Extend and Override Requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#modifying-requests-before-sending&#34;&gt;Modifying Requests before Sending&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#emacs-lisp-code-tags&#34;&gt;Emacs Lisp Code Tags&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#code-completion&#34;&gt;Code Completion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#verb-variables&#34;&gt;Verb Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#last-response&#34;&gt;Last Response&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#storing-responses-by-key&#34;&gt;Storing Responses by Key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#request-mapping-functions&#34;&gt;Request Mapping Functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#body-lines-starting-with-&#34;&gt;Body Lines starting with &lt;code&gt;*&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#file-uploads&#34;&gt;File Uploads&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#multipart-data&#34;&gt;Multipart Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#base-headers&#34;&gt;Base Headers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#export-requests&#34;&gt;Export Requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#babel-integration&#34;&gt;Babel Integration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#sending-requests-op-send&#34;&gt;Sending Requests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#send-with-partial-retrieval-op-send-&#34;&gt;Send with Partial Retrieval&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#exporting-requests-op-export-&#34;&gt;Exporting Requests&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#proxies&#34;&gt;Proxies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#verb-log&#34;&gt;Verb Log&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#hooks-variables-functions&#34;&gt;Hooks, Variables, Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#related-packages&#34;&gt;Related Packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#similar-packages&#34;&gt;Similar Packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Emacs 26+&lt;/h3&gt; &#xA;&lt;p&gt;You can install Verb by using the &lt;code&gt;package-install&lt;/code&gt; command (make sure either &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt; are included in your package sources):&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt; &lt;code&gt;verb&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once Verb has been installed and loaded, add the following to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(with-eval-after-load &#39;org&#xA;  (define-key org-mode-map (kbd &#34;C-c C-r&#34;) verb-command-map))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;, you&#39;ll need to modify your entry for &lt;code&gt;org&lt;/code&gt; instead. Create one if you don&#39;t have one already, and under the &lt;code&gt;:config&lt;/code&gt; key, add the code necessary to bind the Verb command map to a key. The end result should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package org&#xA;  :mode (&#34;\\.org\\&#39;&#34; . org-mode)&#xA;  :config (define-key org-mode-map (kbd &#34;C-c C-r&#34;) verb-command-map))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both cases will set &lt;kbd&gt;C-c C-r&lt;/kbd&gt; as the prefix key for all Verb commands in Org mode. Feel free to use another key if you prefer that.&lt;/p&gt; &#xA;&lt;p&gt;If you do not want to use a package manager, you can just add all &lt;code&gt;.el&lt;/code&gt; files to your &lt;code&gt;load-path&lt;/code&gt; instead of installing it as a package.&lt;/p&gt; &#xA;&lt;h3&gt;Spacemacs&lt;/h3&gt; &#xA;&lt;p&gt;Verb is available on the &lt;code&gt;develop&lt;/code&gt; branch of Spacemacs. To enable it, read the &lt;a href=&#34;https://develop.spacemacs.org/layers/+emacs/org/README.html#verb-support&#34;&gt;documentation on enabling Verb support&lt;/a&gt;. To view the default keybindings, see the &lt;a href=&#34;https://develop.spacemacs.org/layers/+emacs/org/README.html#verb&#34;&gt;Verb mode bindings&lt;/a&gt; table.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a minimal example in case you want to get started without reading the &lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#usage-guide&#34;&gt;Usage Guide&lt;/a&gt;. Place the following on an Org mode buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Example request                            :verb:&#xA;get https://api.ipify.org/?format=json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, press &lt;kbd&gt;C-c C-r C-r&lt;/kbd&gt; to send the HTTP request.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a more complete example that includes defines two requests, both of which share the same base URL and &lt;code&gt;Accept&lt;/code&gt; header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Quick Start for Verb                       :verb:&#xA;# Comments start with &#39;#&#39;. You can only place&#xA;# comments before the URL and in the headers.&#xA;&#xA;template https://reqres.in/api&#xA;Accept: application/json&#xA;&#xA;** Create a new user&#xA;# Because the base URL is defined in the parent&#xA;# heading, there&#39;s no need to repeat it here.&#xA;# We can also add more headers here, or override&#xA;# ones defined in parents.&#xA;&#xA;post /users&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;Jane Smith&#34;,&#xA;    &#34;city&#34;: &#34;Berlin&#34;&#xA;}&#xA;&#xA;** Fetch a product&#xA;# Use Emacs Lisp code tags to make the request&#xA;# content dynamic. Code tags can be used anywhere&#xA;# in the request specification.&#xA;&#xA;get /products/{{(read-number &#34;Product ID: &#34;)}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can send any of the two requests by moving the point to one of the level 2 headings (marked with &lt;code&gt;**&lt;/code&gt;), and then pressing &lt;kbd&gt;C-c C-r C-r&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6868935/73489132-6bc81f00-43aa-11ea-9815-2d482cb60a40.png&#34; alt=&#34;n2&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/6868935/73489133-6bc81f00-43aa-11ea-84c3-d9c1695145d0.png&#34; alt=&#34;n3&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/6868935/73489131-6b2f8880-43aa-11ea-82bd-45142b942055.png&#34; alt=&#34;n1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage Guide&lt;/h2&gt; &#xA;&lt;p&gt;This guide, and other Verb-related documentation, assume that you&#39;re using &lt;kbd&gt;C-c C-r&lt;/kbd&gt; as the prefix key for all Verb commands, and that you&#39;re also getting started with Org mode.&lt;/p&gt; &#xA;&lt;p&gt;All public (and private) variables and functions in the Verb package are documented. If you wish to know more about one of them, use &lt;kbd&gt;C-h v&lt;/kbd&gt; and &lt;kbd&gt;C-h f&lt;/kbd&gt; respectively.&lt;/p&gt; &#xA;&lt;h3&gt;Writing Request Specifications&lt;/h3&gt; &#xA;&lt;p&gt;After setting up Verb, begin by creating a new &lt;code&gt;guide.org&lt;/code&gt; file. In the example file, add the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Get users list         :verb:&#xA;get https://reqres.in/api/users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This defines a minimal HTTP request specification under the &#34;Get users list&#34; heading, composed of a method (&lt;code&gt;GET&lt;/code&gt;) and a URL (&lt;code&gt;https://reqres.in/api/users&lt;/code&gt;). The heading is prefixed with only one &lt;code&gt;*&lt;/code&gt;, which makes it a level 1 heading. The number of &lt;code&gt;*&lt;/code&gt;s determines a heading&#39;s level. All the text under a heading corresponds to the HTTP request it is describing. It is not possible to write request specifications without adding a heading at the top.&lt;/p&gt; &#xA;&lt;p&gt;Note that the heading has a &lt;code&gt;:verb:&lt;/code&gt; tag. &lt;strong&gt;Verb functions only process headings that contain this tag, and ignore the rest.&lt;/strong&gt; This allows you to create documents that may have a combination of HTTP request specifications and other information types. To tag a heading, simply move the point to it and press &lt;kbd&gt;C-c C-c&lt;/kbd&gt;, and then type in &lt;code&gt;verb&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt;. Note that in Org mode, by default, headings inherit their parents&#39; tags (see the &lt;code&gt;org-use-tag-inheritance&lt;/code&gt; variable). This implies that once you&#39;ve tagged one of the parent headings, all its child headings will have that tag as well.&lt;/p&gt; &#xA;&lt;p&gt;To easily add the &lt;code&gt;:verb:&lt;/code&gt; tag to all headings in an Org document, add the following at the top of your file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+FILETAGS: :verb:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may tweak the text value of the tag used by modifying the &lt;code&gt;verb-tag&lt;/code&gt; variable. Note that if you modify it, you&#39;ll need to update your files as well.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling Verb in Org Buffers&lt;/h3&gt; &#xA;&lt;p&gt;When you open an &lt;code&gt;.org&lt;/code&gt; file with HTTP request specifications in it, Verb mode won&#39;t be enabled by default. To enable it, you can choose from these different options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run one of the commands that enable Verb automatically (e.g. &lt;code&gt;verb-send-request-on-point-other-window-stay&lt;/code&gt;). You may use the keybinding set up in your &lt;code&gt;init.el&lt;/code&gt; file (i.e. &lt;kbd&gt;C-c C-r C-r&lt;/kbd&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#installation&#34;&gt;Installation&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;kbd&gt;M-x&lt;/kbd&gt;&lt;code&gt;verb-mode&lt;/code&gt;&lt;kbd&gt;RET&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add a file-local variable at the bottom of your file:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Local Variables:&#xA;# eval: (verb-mode)&#xA;# End:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In general, the first option should be useful enough for most cases. Once Verb mode has been enabled, &lt;code&gt;Verb&lt;/code&gt; should appear on the modeline. To disable Verb mode, run &lt;kbd&gt;M-x&lt;/kbd&gt;&lt;code&gt;verb-mode&lt;/code&gt;&lt;kbd&gt;RET&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sending Requests&lt;/h3&gt; &#xA;&lt;p&gt;To actually send the HTTP request, use one of the &lt;code&gt;verb-send-request-on-point&lt;/code&gt; commands. They are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;C-c C-r C-r&lt;/kbd&gt;: &lt;code&gt;verb-send-request-on-point-other-window-stay&lt;/code&gt; sends the request and shows the response on a buffer in another window, but doesn&#39;t switch to that window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;C-c C-r C-s&lt;/kbd&gt;: &lt;code&gt;verb-send-request-on-point-other-window&lt;/code&gt; sends the request, shows the response on a buffer in another window, and switches to it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;C-c C-r C-f&lt;/kbd&gt;: &lt;code&gt;verb-send-request-on-point&lt;/code&gt; sends the request, and shows the response on a buffer in the currently selected window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;C-c C-r C-&#xA;   &lt;return&gt;&lt;/return&gt;&lt;/kbd&gt;: &lt;code&gt;verb-send-request-on-point-no-window&lt;/code&gt; sends the request, but does not show the response buffer anywhere. The response status (e.g. &lt;code&gt;HTTP/1.1 200 OK | GET http://example.com&lt;/code&gt;) will be shown on the minibuffer. This is useful for cases where one is only interested in the request&#39;s side effects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Request sending is asynchronous - you can do other stuff while Emacs waits for the server&#39;s response. If the response is taking too long to be received, a warning will be displayed in the minibuffer. You can modify this behaviour by modifying the &lt;code&gt;verb-show-timeout-warning&lt;/code&gt; variable&#39;s value.&lt;/p&gt; &#xA;&lt;h3&gt;The Response Body Buffer&lt;/h3&gt; &#xA;&lt;p&gt;After you have sent the request and the server has answered back successfully, you should now be seeing the populated response body buffer. The response body buffer always has the &lt;code&gt;verb-response-body-mode&lt;/code&gt; minor mode activated (indicated by &lt;code&gt;Verb[Body]&lt;/code&gt; in the modeline).&lt;/p&gt; &#xA;&lt;p&gt;The buffer will have an active &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Header-Lines.html&#34;&gt;header line&lt;/a&gt;, showing something similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK | 0.754s | application/json | 1020 bytes | /foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This text indicates the status of the HTTP response, the time in seconds it took for it to be completed, the type of the contents received (or &lt;code&gt;-&lt;/code&gt; if the content type is unknown), and the number of bytes in the response body (read from the &lt;code&gt;Content-Length&lt;/code&gt; header, when possible, otherwise from the local buffer size).&lt;/p&gt; &#xA;&lt;p&gt;The contents of the response body will be shown on the buffer. To choose how they will be actually shown, the following steps are followed:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The content type is extracted from the &lt;code&gt;Content-Type&lt;/code&gt; header. If the header is not present, the content type is defined as &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A content handler is chosen for this content type. There are two types of handlers: handlers for text content types (such as JSON, XML, etc.) and handlers for binary content types (such as PNG, PDF, etc.). These handlers are listed in the &lt;code&gt;verb-content-type-handlers&lt;/code&gt; variable. If no handler matched the content type (or if the content type is &lt;code&gt;nil&lt;/code&gt;), choose &lt;code&gt;fundamental-mode&lt;/code&gt; by default (as a text content type handler).&lt;/li&gt; &#xA; &lt;li&gt;Depending on the content type handler chosen: &lt;br&gt; &lt;strong&gt;Text:&lt;/strong&gt; If the chosen handler is for text, decode the response body using the charset described in the &lt;code&gt;Content-Type&lt;/code&gt; header. If no charset was specified, use the one specified by &lt;code&gt;verb-default-response-charset&lt;/code&gt; (default: &lt;code&gt;utf-8&lt;/code&gt;). After that is done, call the handler (e.g. &lt;code&gt;xml-mode&lt;/code&gt;). &lt;br&gt; &lt;strong&gt;Binary:&lt;/strong&gt; If the chosen handler is for a binary type, call the handler directly after loading the raw bytes into the buffer (e.g. &lt;code&gt;doc-view-mode&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The handler will have set an appropriate major mode to display and/or edit the received content.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There&#39;s two recommended ways of closing response buffers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the response buffer is the current buffer, you can use the &lt;code&gt;verb-kill-response-buffer-and-window&lt;/code&gt; command, which is bound by default to &lt;kbd&gt;C-c C-r C-k&lt;/kbd&gt;. This command will also kill the associated response headers buffer (see the &lt;a href=&#34;https://github.com/federicotdn/verb#the-response-headers-buffer&#34;&gt;Response Headers Buffer&lt;/a&gt; section).&lt;/li&gt; &#xA; &lt;li&gt;If the response buffer is not the current buffer (e.g. you are still on your &lt;code&gt;guide.org&lt;/code&gt; buffer), you can kill &lt;strong&gt;all&lt;/strong&gt; response buffers by using the &lt;code&gt;verb-kill-all-response-buffers&lt;/code&gt;, which is bound to &lt;kbd&gt;C-c C-r C-k&lt;/kbd&gt; by default. Response headers buffers will also be killed automatically.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you send more HTTP requests, more response buffers will be created, with &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; at the end of their name to distinguish between them. If you wish to automatically have old response buffers killed when making a new request, set the &lt;code&gt;verb-auto-kill-response-buffers&lt;/code&gt; variable to &lt;code&gt;t&lt;/code&gt;. If wish for old response buffers to be killed, with the exception of the N most recent ones, then set &lt;code&gt;verb-auto-kill-response-buffers&lt;/code&gt; to that integer number. This is useful for keeping track of the history of responses received, without creating too many buffers.&lt;/p&gt; &#xA;&lt;h3&gt;Re-sending Requests&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to re-send the request that generated the current response buffer, select the window showing it and use the &lt;code&gt;verb-re-send-request&lt;/code&gt; command, which is bound to &lt;kbd&gt;C-c C-r C-f&lt;/kbd&gt; by default. Note that the exact same request will be sent, even if the originating &lt;code&gt;.org&lt;/code&gt; file was modified. To instead re-send the request using EWW, use &lt;kbd&gt;C-c C-r C-w&lt;/kbd&gt; instead (this only works for &lt;code&gt;GET&lt;/code&gt; requests).&lt;/p&gt; &#xA;&lt;h3&gt;Show Corresponding Request&lt;/h3&gt; &#xA;&lt;p&gt;While viewing the contents of an HTTP response, you can use the &lt;code&gt;verb-show-request&lt;/code&gt; command in order to show the corresponding request that generated this response. By default, the command is bound to &lt;kbd&gt;C-c C-r C-s&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The Response Headers Buffer&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to see the HTTP response headers, use the &lt;code&gt;verb-toggle-show-headers&lt;/code&gt; command while the response body buffer is selected. By default, it is bound to &lt;kbd&gt;C-c C-r C-r&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The response headers buffer will be opened on a new window. The new window will be generated by splitting the window displaying the response body buffer into two parts using &lt;code&gt;split-window&lt;/code&gt;. The response headers buffer will have the &lt;code&gt;verb-response-headers-mode&lt;/code&gt; major mode activated, indicated by &lt;code&gt;Verb[Headers]&lt;/code&gt; in the modeline. The buffer will also have a header line showing the number of headers received.&lt;/p&gt; &#xA;&lt;p&gt;The contents of the response headers buffer will be the actual HTTP headers received, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Content-Encoding: gzip&#xA;Content-Type: application/json; charset=utf-8&#xA;Date: Thu, 02 Jan 2020 23:29:19 GMT&#xA;Server: nginx&#xA;Vary: Accept-Encoding&#xA;Content-Length: 619&#xA;Connection: keep-alive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To close the response headers buffer, use the &lt;code&gt;verb-toggle-show-headers&lt;/code&gt; command again (&lt;kbd&gt;C-c C-r C-r&lt;/kbd&gt;) while the response body buffer is selected.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying HTTP Headers&lt;/h3&gt; &#xA;&lt;p&gt;You can add headers to your request specifications. To do this, simply write them below the request method and URL. Following from our first example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Get users list         :verb:&#xA;get https://reqres.in/api/users&#xA;Accept: application/json&#xA;Content-Language: de-DE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All headers must be written immediately after the method + URL line, without any blank lines in between. It is also possible to comment out headers. To do this, simply add &lt;code&gt;#&lt;/code&gt; at the beginning of the line.&lt;/p&gt; &#xA;&lt;p&gt;A certain set of headers will &lt;strong&gt;always&lt;/strong&gt; be included in sent requests, even if they haven&#39;t been specified. Some of them are due to requirements of the HTTP standard, and others due to limitations of the &lt;code&gt;url&lt;/code&gt; Emacs library. They are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MIME-Version&lt;/code&gt;: &lt;code&gt;1.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Connection&lt;/code&gt;: &lt;code&gt;close&lt;/code&gt; or &lt;code&gt;keep-alive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Content-Length&lt;/code&gt;: &lt;em&gt;number of bytes in request body&lt;/em&gt; (only when body is present)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Host&lt;/code&gt;: &lt;em&gt;URL host&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Accept&lt;/code&gt;: &lt;code&gt;*/*&lt;/code&gt; (default value, but may be overwritten by the user)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;: &lt;code&gt;gzip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Extension&lt;/code&gt;: &lt;code&gt;Security/Digest Security/SSL&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you include one of these headers in one of your requests (except &lt;code&gt;Accept&lt;/code&gt;), Verb will add a warning to the &lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#verb-log&#34;&gt;log&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &#34;header&#34; != &#34;heading&#34;, &#34;header&#34; is used to refer to HTTP headers, and &#34;heading&#34; is used to refer to the elements Org mode uses to separate sections of text. Sometimes, &#34;headline&#34; or &#34;outline&#34; is used to refer to headings as well.&lt;/p&gt; &#xA;&lt;h3&gt;Adding a Body&lt;/h3&gt; &#xA;&lt;p&gt;To add a body to your HTTP request, simply insert it below the method, URL and headers. A blank line &lt;strong&gt;must&lt;/strong&gt; be left between the headers and the body. Continuing with our previous example, add the following contents at the end of the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Create a user         :verb:&#xA;post https://reqres.in/api/users&#xA;Accept: application/json&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;John&#34;,&#xA;    &#34;age&#34;: 42&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The body will include everything starting from the line next to the blank line after the headers, up to the buffer&#39;s ending or the next heading (i.e. the next line starting with &lt;code&gt;*&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: By default, all whitespace present will be included in the request body. You can control this behaviour with the &lt;code&gt;verb-trim-body-end&lt;/code&gt; variable, for example, set it to &lt;code&gt;&#34;[ \t\n\r]+&#34;&lt;/code&gt; to trim all trailing whitespace. This is useful if you wish to leave some blank lines between request specifications for increased readability.&lt;/p&gt; &#xA;&lt;p&gt;To encode the request body, Verb will use the &lt;code&gt;charset&lt;/code&gt; value defined in the &lt;code&gt;Content-Type&lt;/code&gt; header of the request. If the header is present but &lt;code&gt;charset&lt;/code&gt; is not defined, or if the header is not present, the charset &lt;code&gt;verb-default-request-charset&lt;/code&gt; will be used (default: &lt;code&gt;utf-8&lt;/code&gt;). Note that the current buffer&#39;s file encoding has no effect on how the request body is encoded.&lt;/p&gt; &#xA;&lt;p&gt;If your body contains binary data (i.e. raw bytes that do not correspond to any particular character), that data will be sent without any encoding.&lt;/p&gt; &#xA;&lt;p&gt;The request body can also be wrapped inside a Babel source block. If this is the case, the lines containing the &lt;code&gt;#+begin_src&lt;/code&gt; and &lt;code&gt;#+end_src&lt;/code&gt; delimiters will be automatically erased before the request is sent. For example, the request body above could be wrapped with a &lt;code&gt;javascript&lt;/code&gt; source block for better font locking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Create a user         :verb:&#xA;post https://reqres.in/api/users&#xA;Accept: application/json&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;#+begin_src javascript&#xA;{&#xA;    &#34;name&#34;: &#34;John&#34;,&#xA;    &#34;age&#34;: 42&#xA;}&#xA;#+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This feature is &lt;strong&gt;not&lt;/strong&gt; related with Verb&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/#babel-integration&#34;&gt;Babel Integration&lt;/a&gt;, which only applies to Babel source blocks with &lt;code&gt;verb&lt;/code&gt; specified as language, and takes into consideration the whole request specification (not just the body).&lt;/p&gt; &#xA;&lt;h3&gt;Extend and Override Requests&lt;/h3&gt; &#xA;&lt;p&gt;Our example file should now look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Get users list         :verb:&#xA;get https://reqres.in/api/users&#xA;Accept: application/json&#xA;Content-Language: de-DE&#xA;&#xA;* Create a user          :verb:&#xA;post https://reqres.in/api/users&#xA;Accept: application/json&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;John&#34;,&#xA;    &#34;age&#34;: 42&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the two request specifications share many things in common: the URL host, path and one header. In order to avoid repeating all this information, we can actually define a &lt;code&gt;template&lt;/code&gt; request, establishing all the common attributes among requests, and then extend this template request with different values. Using &lt;code&gt;template&lt;/code&gt; allows you to avoid specifying an HTTP method at a points in your file where you only want to establish shared attributes for other requests. To use it, create a new level 1 heading, and move the already existing headings below it, making them level 2 child headings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* User management             :verb:&#xA;template https://reqres.in/api/users&#xA;Accept: application/json&#xA;&#xA;** Get users list&#xA;get&#xA;Content-Language: de-DE&#xA;&#xA;** Create a user&#xA;post&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;John&#34;,&#xA;    &#34;age&#34;: 42&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, when we send the request under &#34;Get users list&#34;, Verb will collect all the properties defined in all the parent headings tagged with &lt;code&gt;:verb:&lt;/code&gt; (in this case, a URL and one header), and then extend/override them with the attributes under this specific heading. Any number of levels can be traversed this way. This is how each attribute of an HTTP request specification is extended/overridden:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Method:&lt;/strong&gt; The last heading&#39;s (i.e. the one with no children) method will be used. The value &lt;code&gt;template&lt;/code&gt; does not count as a method and will be ignored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Scheme&lt;/strong&gt;: The last defined heading&#39;s URL scheme will be used (&lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Host&lt;/strong&gt;: The last defined heading&#39;s URL host will be used.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Port&lt;/strong&gt;: The last defined heading&#39;s URL port will be used.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Path&lt;/strong&gt;: All paths will be concatenated, starting with the first heading (i.e. the topmost parent).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Query&lt;/strong&gt;: Query string arguments will be merged. Values from child headings have higher priority.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Fragment&lt;/strong&gt;: The last defined heading&#39;s URL fragment will be used.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Headers&lt;/strong&gt;: All headers will be merged. Values from child headings have higher priority.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Body&lt;/strong&gt;: The last request body present in a heading will be used (if no heading defines a body, none will be used).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you try to send a request from the level 1 header, you&#39;ll get an error, as at that level there&#39;s no specified HTTP method.&lt;/p&gt; &#xA;&lt;p&gt;You can create hierarchies with any number of headings, with many levels of nesting. A good idea is to create a single &lt;code&gt;.org&lt;/code&gt; file to describe, for example, a single HTTP API. This file will contain a level 1 heading defining some common attributes, such as the URL scheme, host and root path, along with an &lt;code&gt;Authentication&lt;/code&gt; header. The level 2 headings will specify different resources (e.g. &lt;code&gt;users&lt;/code&gt;, &lt;code&gt;products&lt;/code&gt;, etc.), and the level 3 headings will specify actions to run on those resources (e.g. &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, etc.). For example (unrelated to &lt;code&gt;guide.org&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Foobar Blog API                    :verb:&#xA;template https://foobar-blog-api.org/api/v1&#xA;Accept: application/json&#xA;&#xA;** Users&#xA;template /users&#xA;&#xA;*** Create a user&#xA;post&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;John&#34;,&#xA;    &#34;posts&#34;: []&#xA;}&#xA;&#xA;*** Search users&#xA;get ?name=John&#xA;&#xA;*** Delete all users&#xA;delete&#xA;&#xA;** Posts&#xA;template /posts?lang=en&#xA;&#xA;*** Search posts&#xA;get ?text=example&#xA;&#xA;*** Delete all posts&#xA;delete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modifying Requests before Sending&lt;/h3&gt; &#xA;&lt;p&gt;As you add more and more headings with different properties, it can get hard to track what will actually be sent once you use one of the &lt;code&gt;verb-send-request-on-point-*&lt;/code&gt; commands. To review a request before it is sent, use the keyboard prefix argument &lt;kbd&gt;C-u&lt;/kbd&gt; before invoking one of the send commands. This will open a temporary buffer which will contain only the request that is about to be sent. In this buffer, you can actually modify the contents of the request in whatever way you like. By doing this, you can try different variations of one request, without having to edit your &lt;code&gt;.org&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Once you have finished reviewing/modifying the request, press &lt;kbd&gt;C-c C-c&lt;/kbd&gt; to send it. If you don&#39;t want to send the request, press &lt;kbd&gt;C-c C-k&lt;/kbd&gt; to kill the buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Any changes done in the temporary buffer will not be saved.&lt;/p&gt; &#xA;&lt;h3&gt;Emacs Lisp Code Tags&lt;/h3&gt; &#xA;&lt;p&gt;You can embed Emacs Lisp code inside request specifications by using code tags. When sending the request, Verb will evaluate all code tags, and replace them with the results of the evaluations. Code tags may appear anywhere in the request specification: the URL, method, headers and body. By default, code tags are delimited with &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; (see the customizable variable &lt;code&gt;verb-code-tag-delimiters&lt;/code&gt;). Note that code tags are in no way related to &lt;a href=&#34;https://orgmode.org/manual/Macro-Replacement.html&#34;&gt;Org mode macros&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the type of the resulting value for a code tag, Verb will do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;string&lt;/code&gt;: The value will be inserted as-is into the request contents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffer&lt;/code&gt;: The buffer&#39;s contents will be inserted into the request using &lt;code&gt;insert-buffer-substring&lt;/code&gt;. If the buffer&#39;s &lt;code&gt;verb-kill-this-buffer&lt;/code&gt; variable is set to non-&lt;code&gt;nil&lt;/code&gt;, the buffer will be killed after its contents have been read. The variable&#39;s default value is &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Other types: The value will be converted to a string using &lt;code&gt;(format &#34;%s&#34; result)&lt;/code&gt; and inserted into the request contents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s extend the previous example so that it now uses code tags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* User management              :verb:&#xA;template https://reqres.in/api/users&#xA;Accept: application/json&#xA;&#xA;** Get users list&#xA;get&#xA;Content-Language: de-DE&#xA;&#xA;** Create a user&#xA;post&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;{{(user-full-name)}}&#34;,&#xA;    &#34;age&#34;: &#34;{{(read-string &#34;Age: &#34;)}}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that interactive functions like &lt;code&gt;read-string&lt;/code&gt; can be used inside code tags as well - they will be evaluated before the request is sent, and the resulting value will be inserted into the content.&lt;/p&gt; &#xA;&lt;h3&gt;Code Completion&lt;/h3&gt; &#xA;&lt;p&gt;You can enable completion for Emacs Lisp inside code tags. To do this, set the &lt;code&gt;verb-enable-elisp-completion&lt;/code&gt; variable to &lt;code&gt;t&lt;/code&gt; (the default value). Code completion will work automatically with &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;&lt;code&gt;company-mode&lt;/code&gt;&lt;/a&gt;, if it is installed.&lt;/p&gt; &#xA;&lt;p&gt;Note that the point must be surrounded by the code tag delimiters (e.g. &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;) in the same line for completion to work. If you&#39;re using &lt;code&gt;electric-pair-mode&lt;/code&gt;, matching tag delimiters will be inserted automatically, so this won&#39;t be a problem. &lt;code&gt;verb-mode&lt;/code&gt; should also be enabled, as enabling it will load the completion function itself.&lt;/p&gt; &#xA;&lt;h3&gt;Verb Variables&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s suppose that the two endpoints from the previous example now require authentication to be used. We could then modify the example to look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* User management              :verb:&#xA;template https://reqres.in/api/users&#xA;Accept: application/json&#xA;Authentication: {{(verb-var token)}}&#xA;&#xA;** Get users list&#xA;get&#xA;Content-Language: de-DE&#xA;&#xA;** Create a user&#xA;post&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;{{(user-full-name)}}&#34;,&#xA;    &#34;age&#34;: &#34;{{(read-string &#34;Age: &#34;)}}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example now uses the &lt;code&gt;verb-var&lt;/code&gt; macro in the first code tag. This macro essentially returns the value associated with the specified symbol - in this case, &lt;code&gt;token&lt;/code&gt;. If the symbol does not have any associated value yet, the user is prompted for one using &lt;code&gt;read-string&lt;/code&gt;. The value is then associated with the symbol and returned. If you don&#39;t wish to be prompted for a value, you can specify a second parameter, which will be used as the default value. That value will be associated to the symbol the first time &lt;code&gt;verb-var&lt;/code&gt; is invoked.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to explicitly re-set the value of a variable set with &lt;code&gt;verb-var&lt;/code&gt;, use the &lt;code&gt;verb-set-var&lt;/code&gt; interactive command. The command is bound to &lt;kbd&gt;C-c C-r C-v&lt;/kbd&gt; by default, and works similarly to the built-in &lt;code&gt;set-variable&lt;/code&gt; command. You will be prompted for a variable that has been previously set with &lt;code&gt;verb-var&lt;/code&gt;. You may also specify a completely new variable name, in which case it will be created and its value set. To see the current value of all variables, use the &lt;code&gt;verb-show-vars&lt;/code&gt; command. To unset all variable values, use the &lt;code&gt;verb-unset-vars&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;To quickly copy the value of a variable into the clipboard, use the keyboard prefix argument &lt;kbd&gt;C-u&lt;/kbd&gt; before invoking &lt;code&gt;verb-set-var&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;verb-var&lt;/code&gt; and &lt;code&gt;verb-set-var&lt;/code&gt; are useful for writing requests that include sensitive information (such as passwords or tokens), or for writing requests that can be parameterized with different values (such as IDs or search terms).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Values set with &lt;code&gt;verb-var&lt;/code&gt; and &lt;code&gt;verb-set-var&lt;/code&gt; will be lost if the buffer is killed.&lt;/p&gt; &#xA;&lt;h3&gt;Last Response&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to access the last response&#39;s attributes, use the &lt;code&gt;verb-last&lt;/code&gt; variable (type: &lt;code&gt;verb-response&lt;/code&gt;). The following example does this; add it to the ending of your &lt;code&gt;guide.org&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(...)&#xA;&#xA;** Get last created user&#xA;# Extract the &#34;id&#34; value from the previous&#xA;# JSON response body.&#xA;&#xA;get /{{(verb-json-get (oref verb-last body) &#34;id&#34;)}}&#xA;Accept: application/json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;verb-json-get&lt;/code&gt; function takes a JSON-formatted text as its first argument and a list of keys as the rest, and returns the value under those keys in the JSON text (similar to how &lt;a href=&#34;https://goessner.net/articles/JsonPath/&#34;&gt;JSONPath&lt;/a&gt; works). This function is useful for using previous responses&#39; contents, check its documentation for more details.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to use the last response&#39;s headers instead, you can use the &lt;code&gt;verb-headers-get&lt;/code&gt; function. An example call may look like: &lt;code&gt;(verb-headers-get (oref verb-last headers) &#34;Content-Type&#34;)&lt;/code&gt;, which will return the string contents of the &lt;code&gt;Content-Type&lt;/code&gt; response header.&lt;/p&gt; &#xA;&lt;h3&gt;Storing Responses by Key&lt;/h3&gt; &#xA;&lt;p&gt;When writing a request specification, you may add &lt;a href=&#34;https://orgmode.org/manual/Property-Syntax.html&#34;&gt;properties&lt;/a&gt; via the Org special &lt;code&gt;:properties:&lt;/code&gt;/&lt;code&gt;&lt;span&gt;🔚&lt;/span&gt;&lt;/code&gt; drawer to its heading. Any properties starting with &lt;code&gt;Verb-&lt;/code&gt; (case insensitive) will be added to the request as metadata. Other properties will be ignored.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Verb-Store&lt;/code&gt; property has a special meaning. When this property is set, Verb will automatically store the request&#39;s response under the specified value. To retrieve the response later, use the &lt;code&gt;verb-stored-response&lt;/code&gt; function. It takes as an argument the same string key used previously.&lt;/p&gt; &#xA;&lt;p&gt;So, for example, we could modify our create/retrieve user endpoints like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(...)&#xA;&#xA;** Create a user&#xA;:properties:&#xA;:Verb-Store: new-user&#xA;&lt;span&gt;🔚&lt;/span&gt;&#xA;&#xA;post&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;{{(user-full-name)}}&#34;,&#xA;    &#34;age&#34;: &#34;{{(read-string &#34;Age: &#34;)}}&#34;&#xA;}&#xA;&#xA;** Get last created user&#xA;get /{{(verb-json-get (oref (verb-stored-response &#34;new-user&#34;) body) &#34;id&#34;)}}&#xA;Accept: application/json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the &#34;Create a user&#34; request has been sent at least once, the result will be stored internally under &#34;new-user&#34;. It can then be used later at any time. Sending the request again will overwrite the previous value, and killing the response buffer will not erase the stored response. The &lt;code&gt;Verb-Store&lt;/code&gt; mechanism is a bit more robust than using just &lt;code&gt;verb-last&lt;/code&gt;, as sending any (unrelated) request will always re-set &lt;code&gt;verb-last&lt;/code&gt; globally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When reading heading properties such as &lt;code&gt;Verb-Store&lt;/code&gt;, properties for parent headings are ignored by default. This can be controlled using the &lt;code&gt;org-use-property-inheritance&lt;/code&gt; variable (default: &lt;code&gt;nil&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Request Mapping Functions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Verb-Map-Request&lt;/code&gt; heading property also has a special meaning in Verb. When present, it can be used to specify a mapping function than will be called right before the corresponding request is sent or exported, with the request itself as its sole argument. The function must return the same request specification object (type &lt;code&gt;verb-request-spec&lt;/code&gt;), or a new one. With this, it is possible to apply custom transformations to requests before they are sent or exported.&lt;/p&gt; &#xA;&lt;p&gt;So, for example, having the following function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun remove-body-newlines (rs)&#xA;  ;; RS is of type `verb-request-spec&#39;&#xA;  (oset rs body (replace-regexp-in-string &#34;\n&#34; &#34; &#34; (oref rs body)))&#xA;  rs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We could add the following level 2 heading to the example in the previous section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(...)&#xA;&#xA;** Upload file to user storage&#xA;:properties:&#xA;:Verb-Map-Request: remove-body-newlines&#xA;&lt;span&gt;🔚&lt;/span&gt;&#xA;&#xA;post /{{(verb-var user-id)}}/upload&#xA;Content-Type: text/plain; charset=utf-8&#xA;&#xA;foo,&#xA;bar,&#xA;baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When sent or exported, the request&#39;s body will by modified by &lt;code&gt;remove-body-newlines&lt;/code&gt;, and the resulting body content will be a single line, &lt;code&gt;foo,bar,baz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The function to be mapped can also be a &lt;code&gt;lambda&lt;/code&gt; expression, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(...)&#xA;&#xA;** Upload file to user storage&#xA;:properties:&#xA;:Verb-Map-Request:  (lambda (rs)&#xA;:Verb-Map-Request+:   (thread-last&#xA;:Verb-Map-Request+:     (oref rs body)&#xA;:Verb-Map-Request+:     (replace-regexp-in-string &#34;\n&#34; &#34; &#34;)&#xA;:Verb-Map-Request+:     (oset rs body))&#xA;:Verb-Map-Request+:   rs)&#xA;&lt;span&gt;🔚&lt;/span&gt;&#xA;&#xA;post /{{(verb-var user-id)}}/upload&#xA;Content-Type: text/plain; charset=utf-8&#xA;&#xA;foo,&#xA;bar,&#xA;baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This has the same effect as the previous example. Note also how we&#39;ve used the feature of adding to a propertie&#39;s value. The final &lt;code&gt;lambda&lt;/code&gt; expression will be equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(lambda (rs) (thread-last (oref rs body) (replace-regexp-in-string &#34;\n&#34; &#34; &#34;) (oset rs body)) rs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The mapping function will be called after evaluating code tags, and the request specification passed will already have its inherited/overridden values from parent headings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When reading heading properties such as &lt;code&gt;Verb-Map-Request&lt;/code&gt;, properties for parent headings are ignored by default. This can be controlled using the &lt;code&gt;org-use-property-inheritance&lt;/code&gt; variable (default: &lt;code&gt;nil&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Body Lines starting with &lt;code&gt;*&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You may have noticed that because headings start with &lt;code&gt;*&lt;/code&gt;, you cannot include lines starting with &lt;code&gt;*&lt;/code&gt; in your request bodies, because Org will interpret them as a new heading. To get around this, you can prefix request body lines starting with &lt;code&gt;*&lt;/code&gt; with an empty code tag, &lt;code&gt;{{}}&lt;/code&gt;. The empty code tag will evaluate to the empty string, so it won&#39;t modify the content of your request body. Following from our previous example, we can modify it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(...)&#xA;&#xA;** Upload file to user storage&#xA;post /{{(verb-var user-id)}}/upload&#xA;Content-Type: text/markdown; charset=utf-8&#xA;&#xA;# Sample Markdown file&#xA;&#xA;{{}}**This text is bold.**&#xA;{{}}*This text is italicized.*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File Uploads&lt;/h3&gt; &#xA;&lt;p&gt;To upload a file, you can use the included &lt;code&gt;verb-read-file&lt;/code&gt; function. This function reads a file into a buffer and sets its &lt;code&gt;verb-kill-this-buffer&lt;/code&gt; variable to &lt;code&gt;t&lt;/code&gt;, and then returns the buffer. Use it from inside code tags to insert the contents of a local file in a request. To test this, we can modify the previous example so that instead of manually writing a Markdown file, we now read one from disk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(...)&#xA;&#xA;** Upload file to user storage&#xA;post /{{(verb-var user-id)}}/upload&#xA;Content-Type: text/markdown; charset=utf-8&#xA;&#xA;{{(verb-read-file &#34;documents/myfile.md&#34;)}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember to specify &lt;code&gt;Content-Type&lt;/code&gt; in your HTTP headers, as Verb won&#39;t do this for you. This will let the server know how to interpret the contents of the request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If uploading binary files (e.g. a PNG image), it&#39;s a good idea to set &lt;code&gt;verb-read-file&lt;/code&gt;&#39;s second argument (&lt;code&gt;coding-system&lt;/code&gt;) to &lt;code&gt;&#39;binary&lt;/code&gt;. This will instruct Emacs to insert the file contents into the request buffer as raw bytes.&lt;/p&gt; &#xA;&lt;h3&gt;Multipart Data&lt;/h3&gt; &#xA;&lt;p&gt;Verb makes it easy for you to use the &lt;code&gt;multipart/form-data&lt;/code&gt; content type in your requests. Two helper functions are provided: &lt;code&gt;verb-boundary&lt;/code&gt; and &lt;code&gt;verb-part&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;verb-boundary&lt;/code&gt; is called using code tags within a request specification, it will return a string containing a valid randomly-generated multipart boundary. This function must be called at least once in order to establish the boundary value when a request is being constructed from request specifications.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, the &lt;code&gt;verb-part&lt;/code&gt; function can be used in code tags to start new parts (when called with at least one argument), and also to insert the final boundary delimiter (when called with no arguments). The first argument will correspond to the &lt;code&gt;name&lt;/code&gt; attribute of the &lt;code&gt;Content-Disposition&lt;/code&gt; header, and the second to the &lt;code&gt;filename&lt;/code&gt; attribute of the same header.&lt;/p&gt; &#xA;&lt;p&gt;The following is an example that combines these two functions, along with &lt;code&gt;verb-read-file&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(...)&#xA;&#xA;** Upload two files to user storage&#xA;post /{{(verb-var user-id)}}/upload&#xA;Content-Type: multipart/form-data; boundary={{(verb-boundary)}}&#xA;&#xA;{{(verb-part &#34;file&#34; &#34;file1.txt&#34;)}}&#xA;Content-Type: text/plain&#xA;&#xA;{{(verb-read-file &#34;documents/file1.txt&#34;)}}&#xA;{{(verb-part &#34;file&#34; &#34;file2.xml&#34;)}}&#xA;Content-Type: application/xml&#xA;&#xA;{{(verb-read-file &#34;documents/file2.xml&#34;)}}&#xA;{{(verb-part)}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In HTTP, the end-of-line marker is CRLF (&lt;code&gt;\r\n&lt;/code&gt;) instead of LF (&lt;code&gt;\n&lt;/code&gt;). Although some web servers handle LF as CRLF for compatibility, some do not. If you encounter a similar problem, try to insert CR (&lt;code&gt;\r&lt;/code&gt;) manually. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(...)&#xA;&#xA;** Upload two files to user storage&#xA;post /{{(verb-var user-id)}}/upload&#xA;Content-Type: multipart/form-data; boundary={{(verb-boundary)}}&#xA;&#xA;{{(verb-part &#34;file&#34; &#34;file1.txt&#34;)}}^M&#xA;Content-Type: text/plain^M&#xA;^M&#xA;{{(verb-read-file &#34;documents/file1.txt&#34;)}}^M&#xA;{{(verb-part &#34;file&#34; &#34;file2.xml&#34;)}}^M&#xA;Content-Type: application/xml^M&#xA;^M&#xA;{{(verb-read-file &#34;documents/file2.xml&#34;)}}^M&#xA;{{(verb-part)}}^M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;^M&lt;/code&gt; is CR (&lt;code&gt;\r&lt;/code&gt;) which is inserted by Emacs with &lt;kbd&gt;C-q C-m&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Base Headers&lt;/h3&gt; &#xA;&lt;p&gt;You can define a set of base headers for all your HTTP requests in all &lt;code&gt;.org&lt;/code&gt; files via the &lt;code&gt;verb-base-headers&lt;/code&gt; variable. These headers will be defined globally, but may still be overridden by re-specifying them somewhere in the headings hierarchy. The variable must be set to an alist of &lt;code&gt;(KEY . VALUE)&lt;/code&gt; elements, where &lt;code&gt;KEY&lt;/code&gt; and &lt;code&gt;VALUE&lt;/code&gt; are strings. For example, here&#39;s how to add a &lt;code&gt;User-Agent&lt;/code&gt; header to all requests in all files from your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq verb-base-headers &#39;((&#34;User-Agent&#34; . &#34;my-user-agent&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Export Requests&lt;/h3&gt; &#xA;&lt;p&gt;You can export request specifications to other formats or tools by using the &lt;code&gt;verb-export-request-on-point&lt;/code&gt; command, by default bound to &lt;kbd&gt;C-c C-r C-e&lt;/kbd&gt;. When used, you will be prompted for an export function. The ones currently available are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;curl&lt;/code&gt;: Convert the request specification into a &lt;a href=&#34;https://curl.haxx.se/&#34;&gt;curl&lt;/a&gt; command and add it to the kill ring (clipboard).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;verb&lt;/code&gt;: Display the request specification in the same format Verb uses. This is still useful as the request displayed will be the one generated by combining the properties of the parent headings as well.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eww&lt;/code&gt;: Perform the request described by the specification using EWW (Emacs Web Wowser). This will only work on &lt;code&gt;GET&lt;/code&gt; requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;websocat&lt;/code&gt;: Convert the request specification into a &lt;a href=&#34;https://github.com/vi/websocat&#34;&gt;websocat&lt;/a&gt; command and add it to the kill ring.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Code tags will be evaluated when exporting a request.&lt;/p&gt; &#xA;&lt;h3&gt;Babel Integration&lt;/h3&gt; &#xA;&lt;p&gt;Verb also works on Org &lt;a href=&#34;https://orgmode.org/worg/org-contrib/babel/&#34;&gt;Babel&lt;/a&gt; source blocks. This feature allows you to send an HTTP request, and view the results in the same &lt;code&gt;.org&lt;/code&gt; buffer where the request was read from. You can also export requests to different formats (like &lt;code&gt;curl&lt;/code&gt;) and view the results in the same buffer as well.&lt;/p&gt; &#xA;&lt;p&gt;To enable this feature, remember to add &lt;code&gt;verb&lt;/code&gt; to the &lt;code&gt;org-babel-load-languages&lt;/code&gt; list. To do this, you may add the following to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(org-babel-do-load-languages&#xA; &#39;org-babel-load-languages&#xA; &#39;((verb . t)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once that&#39;s done, simply wrap your HTTP request specification (excluding the Org heading) with &lt;code&gt;#+begin_src&lt;/code&gt;/&lt;code&gt;#+end_src&lt;/code&gt; using &lt;code&gt;verb&lt;/code&gt; as the source block language. For example, given the following request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Make a request to an API         :verb:&#xA;&#xA;post https://example.com/api/users&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;Jane Smith&#34;,&#xA;    &#34;age&#34;: &#34;35&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Babel-compatible version would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Make a request to an API         :verb:&#xA;&#xA;#+begin_src verb :wrap src ob-verb-response&#xA;post https://example.com/api/users&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;Jane Smith&#34;,&#xA;    &#34;age&#34;: &#34;35&#34;&#xA;}&#xA;#+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Babel source blocks with &lt;code&gt;verb&lt;/code&gt; as a language accept a header argument called &lt;code&gt;:op&lt;/code&gt;. Depending on the value that appears after this argument, Verb will execute different actions when &lt;kbd&gt;C-c C-c&lt;/kbd&gt; is pressed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is possible to specify arguments for a &lt;code&gt;verb&lt;/code&gt; source block by using the &lt;a href=&#34;https://orgmode.org/manual/Environment-of-a-Code-Block.html&#34;&gt;&lt;code&gt;:var&lt;/code&gt; keyword&lt;/a&gt;. To read the arguments, use &lt;code&gt;(verb-var &amp;lt;variable-name&amp;gt;)&lt;/code&gt; inside a code block.&lt;/p&gt; &#xA;&lt;h4&gt;Sending Requests (&lt;code&gt;:op send&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;By default, if &lt;code&gt;:op&lt;/code&gt; is not specified, Verb will assume &lt;code&gt;:op send&lt;/code&gt; was intended.&lt;/p&gt; &#xA;&lt;p&gt;To send the request, move the point to its &lt;code&gt;verb&lt;/code&gt; source block and press &lt;kbd&gt;C-c C-c&lt;/kbd&gt;. The result of the request will appear below. Adding the &lt;code&gt;:wrap src ob-verb-response&lt;/code&gt; argument tells Babel to wrap the response in another source block, using &lt;code&gt;ob-verb-response-mode&lt;/code&gt; as major mode for font locking.&lt;/p&gt; &#xA;&lt;p&gt;As opposed to requests sent with the &lt;code&gt;verb-send-request-on-point-*&lt;/code&gt; commands, requests sent with Babel will block Emacs until they are complete. There&#39;s a configurable timeout for this, see the &lt;code&gt;verb-babel-timeout&lt;/code&gt; variable for more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When Verb operates on a Babel source block, &lt;strong&gt;it still takes into consideration the whole headings hierarchy&lt;/strong&gt;. This means that any attributes defined in parent headings will be brought over and potentially overridden by the current source block&#39;s. The request specifications in the parent headings may be defined in Babel source blocks as well, Verb will read them anyways. In other words, you can freely mix between regular request specifications and request specification written inside Babel source blocks within the hierarchy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The heading containing the source block where &lt;kbd&gt;C-c C-c&lt;/kbd&gt; is pressed does not need to be tagged with &lt;code&gt;:verb:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Send with Partial Retrieval (&lt;code&gt;:op send ...&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Instead of specifying just &lt;code&gt;:op send&lt;/code&gt;, you may add an additional argument: &lt;code&gt;get-headers&lt;/code&gt; or &lt;code&gt;get-body&lt;/code&gt;. Using the former will change the result of executing the source block to just the response headers. Using the latter will do the same, but for the response body. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Make a request to an API (get body only)         :verb:&#xA;#+begin_src verb :wrap src ob-verb-response :op send get-body&#xA;post https://example.com/api/users&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;Jane Smith&#34;,&#xA;    &#34;age&#34;: &#34;35&#34;&#xA;}&#xA;#+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Exporting Requests (&lt;code&gt;:op export ...&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;If you wish to export the request to a particular format instead, use the &lt;code&gt;:op export ...&lt;/code&gt; header argument on your source block. These are the values it can be used with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:op export curl&lt;/code&gt;: Export this request to &lt;code&gt;curl&lt;/code&gt; format and insert the results below.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:op export verb&lt;/code&gt;: Export this request to Verb format and insert the results below.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:op export websocat&lt;/code&gt;: Export this request to &lt;code&gt;websocat&lt;/code&gt; format and insert the results below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So for example, if you wanted to export the previous example to &lt;code&gt;curl&lt;/code&gt;, you would need to write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Export request to curl         :verb:&#xA;#+begin_src verb :op export curl&#xA;post https://example.com/api/users&#xA;Content-Type: application/json; charset=utf-8&#xA;&#xA;{&#xA;    &#34;name&#34;: &#34;Jane Smith&#34;,&#xA;    &#34;age&#34;: &#34;35&#34;&#xA;}&#xA;#+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute the source block again with &lt;kbd&gt;C-c C-c&lt;/kbd&gt;, which will execute the export and insert the results below.&lt;/p&gt; &#xA;&lt;h3&gt;Proxies&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s two ways of using HTTP proxies in Verb. The first one is to manually configure the &lt;code&gt;url-proxy-services&lt;/code&gt; variable like explained in &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/url/Proxies.html&#34;&gt;Proxies and Gatewaying&lt;/a&gt;. The second one is to specify a proxy address by using the &lt;code&gt;Verb-Proxy&lt;/code&gt; heading property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;** Make a request using an HTTP proxy         :verb:&#xA;:properties:&#xA;:Verb-Proxy: my-proxy:5050&#xA;&lt;span&gt;🔚&lt;/span&gt;&#xA;&#xA;get http://internal-api/users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the request is sent, the value of &lt;code&gt;Verb-Proxy&lt;/code&gt; will automatically be added to &lt;code&gt;url-proxy-services&lt;/code&gt;, and then automatically removed.&lt;/p&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;To see all aspects of Verb that may be customized, use &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;customize-group&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt; &lt;code&gt;verb&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Verb Log&lt;/h3&gt; &#xA;&lt;p&gt;When you send a request or receive a response, some information is logged in the &lt;code&gt;*Verb Log*&lt;/code&gt; buffer. You can use this log to get some more details on any errors that might have happened and other internal stuff. You can disable logging by setting the &lt;code&gt;verb-enable-log&lt;/code&gt; variable to &lt;code&gt;nil&lt;/code&gt;. To read the log, you can use the &lt;code&gt;verb-show-log&lt;/code&gt; command. While reading the log, you can press &lt;kbd&gt;q&lt;/kbd&gt; to go back to the previous buffer.&lt;/p&gt; &#xA;&lt;p&gt;The Emacs &lt;code&gt;url&lt;/code&gt; library also keeps its own internal log - it can be useful for debugging requests that are not working as expected. To enable &lt;code&gt;url&lt;/code&gt; logging, set &lt;code&gt;url-debug&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; (by default, it&#39;s disabled). After sending a request, switch to the &lt;code&gt;*URL-DEBUG*&lt;/code&gt; buffer to read any logged information.&lt;/p&gt; &#xA;&lt;h2&gt;Hooks, Variables, Functions&lt;/h2&gt; &#xA;&lt;p&gt;To see a listing of Verb&#39;s publicly defined hooks, functions, variables and classes, see the &lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/extra/verb-api.md&#34;&gt;verb-api.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/examples&#34;&gt;examples/&lt;/a&gt; directory contains various &lt;code&gt;.org&lt;/code&gt; files which showcase different features of the package.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: When trying to send a request, an error is shown: &#34;No request specifications found&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;: Tag the headings containing request specifications with &lt;code&gt;:verb:&lt;/code&gt;. Tags are inherited by default, so in most cases you can just tag the topmost parent heading.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: URL elements containing underscores such as &lt;code&gt;page_size&lt;/code&gt; are shown as subscripts (&lt;a href=&#34;https://github.com/federicotdn/verb/issues/3&#34;&gt;Issue #3&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;: Set the &lt;code&gt;org-use-sub-superscripts&lt;/code&gt; variable to &lt;code&gt;{}&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;. You can do this file-locally by adding the following at the end of the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Local Variables:&#xA;# org-use-sub-superscripts: {}&#xA;# End:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;The changelog for this project can be found in &lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs and suggestions are welcome. Ideally, new features and functions should include tests, see file &lt;code&gt;test/verb-test.el&lt;/code&gt;. To run the tests locally, you will need to have a Python 3.6+ interpreter installed, and then run the following command (needed only once):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make setup-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run only one test, set the &lt;code&gt;SELECTOR&lt;/code&gt; environment variable to the tests&#39;s name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ SELECTOR=test-nonempty-string make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also check for byte-compilation warnings and documentation/package issues. First, run (needed only once):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make setup-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, run the checks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s a good idea to test your changes on a vanilla Emacs instance (&lt;code&gt;-q&lt;/code&gt; flag). To easily do this, use the &lt;code&gt;run&lt;/code&gt; recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, a list of all recipes and their descriptions can be obtained using &lt;code&gt;make help&lt;/code&gt; or simply &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A PR will need to successfully go through all the checks mentioned above in order to be reviewed first. Please remember to target your PR against the &lt;code&gt;main&lt;/code&gt; branch (not &lt;code&gt;master&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Related Packages&lt;/h2&gt; &#xA;&lt;p&gt;Verb&#39;s functionality can be extended via some related packages, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flashcode/impostman&#34;&gt;impostman&lt;/a&gt;: Can be used to import &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt; collections into Verb.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Similar Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pashky/restclient.el&#34;&gt;restclient&lt;/a&gt;: Verb is an attempt to improve upon the core idea of the &lt;code&gt;restclient&lt;/code&gt; package: writing request specifications on a buffer, and receiving the responses on another. As of April 17, 2024 &lt;code&gt;restclient&lt;/code&gt; has been archived and is no longer maintained.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abrochard/walkman&#34;&gt;walkman&lt;/a&gt;: Write HTTP requests in Org mode and send them using &lt;code&gt;curl&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/astoff/plz-see.el&#34;&gt;plz-see.el&lt;/a&gt;: An interactive HTTP client for Emacs based on the &lt;a href=&#34;https://github.com/alphapapa/plz.el&#34;&gt;plz.el&lt;/a&gt; library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;These are the users that have contributed to developing Verb, via code and/or documentation (in order of date of first contribution):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stig&#34;&gt;stig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flashcode&#34;&gt;flashcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ananthakumaran&#34;&gt;ananthakumaran&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prashantvithani&#34;&gt;prashantvithani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/c4710n&#34;&gt;c4710n&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bigodel&#34;&gt;bigodel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agzam&#34;&gt;agzam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isamert&#34;&gt;isamert&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the GNU General Public License, version 3.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/federicotdn/verb/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>meedstrom/org-node</title>
    <updated>2024-05-01T01:30:39Z</updated>
    <id>tag:github.com,2024-05-01:/meedstrom/org-node</id>
    <link href="https://github.com/meedstrom/org-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;org-node ** Recent changes [2024-04-30]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We no longer depend on a =BACKLINKS= property! It is still a great way to show backlinks, so it remains as an option.&lt;/li&gt; &#xA; &lt;li&gt;Renamed =CACHED_BACKLINKS= to just =BACKLINKS=. One =M-x org-node-backlink-fix-all= will take care of the rename, or you can remove them all with =M-x org-node-backlink-regret=.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Breaking API change&lt;/em&gt; -- nodes are objects now, not plists! Unfortunately the software can&#39;t give you a deprecation notice, because plists fail silently (that&#39;s why the change). See updated examples for =org-node-filter-fn= etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What&#39;s all this&lt;/p&gt; &#xA;&lt;p&gt;I found org-roam too slow, so I made [[https://github.com/meedstrom/quickroam][quickroam]]. And that idea spun off into this package, a standalone thing. I hope it&#39;s also easier to learn.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;If you were using org-roam&lt;/em&gt;, there is nothing to migrate. You can use both packages. It&#39;s exactly the same on-disk format: &#34;notes&#34; are identified by their org-id.&lt;/p&gt; &lt;p&gt;Thanks to shims, &lt;em&gt;you can even skip syncing the org-roam DB&lt;/em&gt; but still use its features, like the rich backlinks buffer and org-roam-capture!&lt;/p&gt; &lt;p&gt;In pursuit of being &#34;just org-id&#34;, this package has no equivalent setting to =org-roam-directory= -- it just looks up =org-id-locations=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;If you were not using org-roam&lt;/em&gt;, maybe think of it as a limited, focused [[https://github.com/alphapapa/org-ql][org-ql]]. If you were the sort of person to prefer ID-links over file links or any other type of link, you&#39;re in the right place: this basically lets you forget about filenames and hierarchies and directory structures -- as long as you&#39;ve assigned an org-id to something, you can find it later.&lt;/p&gt; &lt;p&gt;And you can still keep doing hierarchies and structures, where that brings you joy, unlike systems that mandate limitations like &#34;one note per file&#34; or strict rules about naming files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What&#39;s a &#34;node&#34;?&lt;/p&gt; &#xA;&lt;p&gt;My life can be divided into two periods &#34;&lt;em&gt;before org-roam&lt;/em&gt;&#34; and &#34;&lt;em&gt;after org-roam&lt;/em&gt;&#34;. I crossed a kind of gap once I got a good way to link between my notes. It&#39;s odd to remember when I just relied on browsing hierarchies of subtrees -- what a strange way to do things!&lt;/p&gt; &#xA;&lt;p&gt;At the core, all the &#34;notetaking packages&#34; (orgrr/zk/deft/org-roam/denote/...) try to help you with this: make it easy to link between notes.&lt;/p&gt; &#xA;&lt;p&gt;Right off the bat, that imposes two requirements: a method to search for notes, since you can&#39;t link to something you can&#39;t search for, and a decision about exactly what kinds of things should turn up as search hits.&lt;/p&gt; &#xA;&lt;p&gt;Just searching for Org files is too coarse, and just searching for any subtree anywhere brings in too much clutter.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what org-roam invented. It turns out that if you limit the search hits to just those files and subtrees you&#39;ve deigned to assign an org-id -- which roughly maps to everything you&#39;ve ever thought it was worth linking to -- it filters out the noise excellently.&lt;/p&gt; &#xA;&lt;p&gt;Once a subtree has an ID you can link to, it&#39;s a &#34;node&#34; because it has joined the wider graph, the network of linked nodes. I wish the English language had more distinct sounds for the words &#34;node&#34; and &#34;note&#34;, but to clarify, I&#39;ll say &#34;ID-node&#34; when the distinction matters.&lt;/p&gt; &#xA;&lt;p&gt;** Feature matrix&lt;/p&gt; &#xA;&lt;p&gt;For your pleasure, here&#39;s a comparison of three similar notetaking systems: all permitting org-id as first-class citizen and not locking you into an &#34;one-note-per-file&#34; concept.&lt;/p&gt; &#xA;&lt;p&gt;| | org-roam | org-node | [[https://github.com/toshism/org-super-links][org-super-links]] | |------------------------------------+-------------+--------------------+----------------------| | Backlinks | yes | yes | yes | | Node search and insert | yes | yes | no (suggests org-ql) | | Node aliases | yes | yes | not applicable | | Rich backlinks buffer | yes | yes (org-roam&#39;s) | no | | Reflinks | yes | yes (as backlinks) | no | | Ref search | yes | yes (as aliases) | no | | Extract subtree to new file | yes | yes | no | | Can configure rich completions | yes | yes | not applicable | | org-roam-capture integration | yes | yes | no | | org-capture integration | no | yes | no | | Backlinks in same window | no | yes | yes | | Avoid scanning :BACKLINKS: drawers | no | yes | yes | | Find files/headings without ID | no | yes | not applicable | | Node exclusion | yes | limited | not applicable | | Support =roam:= links | yes | no | no | | Warn about dead links | no | no | no | | Some query-able cache | org-roam-db | org-nodes | no | |------------------------------------+-------------+--------------------+----------------------| | Cache mandatory | yes | no | no | | Time to re-cache my 2000 files | 3 minutes | 1 second | not applicable |&lt;/p&gt; &#xA;&lt;p&gt;This isn&#39;t a totally fair comparison; org-roam has an advantage in the details, see Appendix II. With org-node I&#39;ve made what I would&#39;ve liked to hack on, so it&#39;s more simplistic in many aspects.&lt;/p&gt; &#xA;&lt;p&gt;** Setup&lt;/p&gt; &#xA;&lt;p&gt;Add an init snippet like this (assuming [[https://github.com/radian-software/straight.el][straight.el]]):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (use-package org-node :straight (org-node :type git :host github :repo &#34;meedstrom/org-node&#34;) :hook (org-mode . org-node-cache-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Quick start&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re new to these concepts, fear not. The main things for day-to-day operation are two commands: &#34;find&#34; and &#34;insert-link&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;(OK if you love [[https://github.com/meedstrom/org-node?tab=readme-ov-file#org-capture][org-capture]], you might end up using that a lot too, but you know who you are.)&lt;/h1&gt; &#xA;&lt;p&gt;Pick some good keys and try them out, and you can come back to this README later---or never.&lt;/p&gt; &#xA;&lt;p&gt;The keys I use:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (global-set-key (kbd &#34;&#xA; &lt;f2&gt;&#xA;   f&#34;) #&#39;org-node-find) (global-set-key (kbd &#34;&#xA;  &lt;f2&gt;&#xA;    i&#34;) #&#39;org-node-insert-link) #+end_src&#xA;  &lt;/f2&gt;&#xA; &lt;/f2&gt;&lt;/p&gt; &#xA;&lt;p&gt;(I like F2, but if you don&#39;t, maybe M-s?)&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (global-set-key (kbd &#34;M-s f&#34;) #&#39;org-node-find) (global-set-key (kbd &#34;M-s i&#34;) #&#39;org-node-insert-link) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To browse config options, type =M-x customize-group RET org-node RET=.&lt;/p&gt; &#xA;&lt;p&gt;Final tip for the newbie: you normally create new nodes through these same commands! Just type the name of a node that doesn&#39;t exist.&lt;/p&gt; &#xA;&lt;p&gt;*** Use Org-roam at the same time?&lt;/p&gt; &#xA;&lt;p&gt;These user options help you feel at home using both packages side-by-side:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq org-node-creation-fn #&#39;org-node-new-by-roam-capture) (setq org-node-slug-fn #&#39;org-node-slugify-like-roam) (setq org-node-creation-hook nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In addition, if you&#39;ve been struggling with slow saving of big files, consider these org-roam settings:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq org-roam-db-update-on-save nil) ;; don&#39;t scan file on save (setq org-roam-link-auto-replace nil) ;; don&#39;t look for roam: links on save #+end_src&lt;/p&gt; &#xA;&lt;p&gt;With that done, try out these command substitutes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-node-find= instead of =org-roam-node-find=&lt;/li&gt; &#xA; &lt;li&gt;=org-node-insert-link= instead of =org-roam-node-insert=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out more under [[https://github.com/meedstrom/org-node?tab=readme-ov-file#commands][Commands]]. Enjoy!&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m guessing you also want the [[https://github.com/meedstrom/org-node?tab=readme-ov-file#backlink-solution-1-org-roam-buffer][org-roam-buffer]]. See next section.&lt;/p&gt; &#xA;&lt;p&gt;** Backlink solution 1: org-roam-buffer&lt;/p&gt; &#xA;&lt;p&gt;Want the good old =M-x org-roam-buffer-toggle=?&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Option 1A&lt;/em&gt;. Feed data to org-roam so all its features will Just Work^{sort of}. For a first-time run, type =M-x org-node-feed-roam-db= (slow!). Then add the following init snippet to keep the database updated over time.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-hook &#39;org-node-cache-scan-file-hook #&#39;org-node-feed-file-to-roam-db) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Option 1B&lt;/em&gt;. Cut out the DB altogether. Instead of the above, add this hack:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (advice-add &#39;org-roam-backlinks-get :override #&#39;org-node--fabricate-roam-backlinks) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Backlink solution 2: inside the file&lt;/p&gt; &#xA;&lt;p&gt;I love this solution, because I rarely have space on my screen to fit a whole window for backlinks anyway.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Option 2A&lt;/em&gt;. Let org-node add a =:BACKLINKS:= property to all nodes.&lt;/p&gt; &#xA;&lt;p&gt;For a first-time run, type =M-x org-node-backlink-fix-all=. (Don&#39;t worry, if you change your mind there is =M-x org-node-backlink-regret=.)&lt;/p&gt; &#xA;&lt;p&gt;Then start using the minor mode =org-node-backlink-mode=, which keeps these properties updated. Init snippet:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-hook &#39;org-mode-hook #&#39;org-node-backlink-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Option 2B&lt;/em&gt; Let [[https://github.com/toshism/org-super-links][org-super-links]] manage a =:BACKLINKS:...:END:= drawer.&lt;/p&gt; &#xA;&lt;p&gt;I /think/ the following should work. Totally untested, let me know!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (add-hook &#39;org-node-insert-link-hook #&#39;org-node-convert-link-to-super) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Misc *** Org-capture&lt;/p&gt; &#xA;&lt;p&gt;You may know that org-roam has its own set of capture templates: the =org-roam-capture-templates=.&lt;/p&gt; &#xA;&lt;p&gt;It can make sense, for people who fully understand the magic of capture templates. I didn&#39;t, so I was not confident using a second-order abstraction over an already leaky abstraction.&lt;/p&gt; &#xA;&lt;p&gt;So can we reproduce the functionality on top of vanilla org-capture? That&#39;d be less scary. The answer is yes!&lt;/p&gt; &#xA;&lt;p&gt;Set-up: write a capture template that uses =(function org-node-capture-target)= as the =target=, and then you can use it via good old =M-x org-capture= to capture to any of your ID nodes. Something like:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq org-capture-templates &#39;((&#34;n&#34; &#34;ID node&#34; plain (function org-node-capture-target)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;And if you want the commands =org-node-find= &amp;amp; =org-node-insert-link= to likewise outsource to org-capture when creating new nodes, use the following setting.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq org-node-creation-fn #&#39;org-capture) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Rich completions&lt;/p&gt; &#xA;&lt;p&gt;How to see the headings&#39; full outline paths while searching for nodes:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp ;; Prepend completions with the heading&#39;s outline path (setq org-node-format-candidate-fn (lambda (node title) (if-let ((olp (org-node-olp node))) (concat (string-join olp &#34; &amp;gt; &#34;) &#34; &amp;gt; &#34; title) title))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Limitations: excluding notes The =org-node-filter-fn= works well for ignoring TODO items that happen to have an ID, and ignoring org-drill items and that sort of thing, but beyond that, it has limited utility because unlike org-roam, &lt;em&gt;child ID nodes of an excluded node are not excluded!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;So let&#39;s say you have a big archive file, fulla IDs, and you want to exclude all of it. Putting a =:ROAM_EXCLUDE: t= at the top won&#39;t do it. As it stands, what I&#39;d suggest is unfortunately, look at the file name.&lt;/p&gt; &#xA;&lt;p&gt;The point of org-id is to avoid dependence on filenames, but it&#39;s often pragmatic to let up on purism just a bit :-) It works well for me to filter out any file or directory that happens to contain &#34;archive&#34; in the name:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq org-node-filter-fn (lambda (node) (not (or (org-node-todo node) (member &#34;drill&#34; (org-node-tags node)) (assoc &#34;ROAM_EXCLUDE&#34; (org-node-properties node)) (string-search &#34;archive&#34; (org-node-file-path node)))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Limitations: org-id&lt;/p&gt; &#xA;&lt;p&gt;In lieu of a convenient =org-roam-update-org-id-locations=, see [[https://github.com/meedstrom/org-node?tab=readme-ov-file#appendix-iii-taking-ownership-of-org-id][Appendix III]] for how to defeat org-id&#39;s idiosyncrasies, ensuring org-node knows about all the relevant ID locations.&lt;/p&gt; &#xA;&lt;p&gt;*** Commands&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-node-find= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A counterpart to =org-roam-node-find=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=org-node-insert-link= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A counterpart to =org-roam-node-insert=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=org-node-insert-transclusion=&lt;/li&gt; &#xA; &lt;li&gt;=org-node-insert-transclusion-as-subtree=&lt;/li&gt; &#xA; &lt;li&gt;=org-node-extract-subtree= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A bizarro counterpart to =org-roam-extract-subtree=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=org-node-nodeify-entry= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Trivial - give an ID to subtree at point (and run org-node-creation-hook)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=org-node-create-subtree= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Trivial - insert a new subtree with an ID (and run org-node-creation-hook)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=org-node-random=&lt;/li&gt; &#xA; &lt;li&gt;=org-node-rewrite-links-ask= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Look for link descriptions that got out of sync with the current node title, then prompt at each link to update it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=org-node-rename-file-by-title= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto-rename the file based on the current =#+title=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=org-node-backlink-fix-all= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add =BACKLINKS= property to every node everywhere that should have one&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=org-node-backlink-regret= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In case you regret using this package -- remove all =BACKLINKS=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Appendix I: Rosetta stone&lt;/p&gt; &#xA;&lt;p&gt;API comparison between org-roam and org-node.&lt;/p&gt; &#xA;&lt;p&gt;| Action | org-roam | org-node | |---------------------------------+---------------------------------+-------------------------------------------------------------------------------------| | Get ID at point | =(org-roam-id-at-point)= | =(org-id-get nil nil nil t)= | | Get node at point | =(org-roam-node-at-point)= | =(gethash (org-id-get nil nil nil t) org-nodes)= | | Get list of files | =(org-roam-list-files)= | =(seq-uniq (hash-table-values org-id-locations))= | | Prompt user to pick a node | =(org-roam-node-read)= | =(gethash (completing-read &#34;Node: &#34; org-node-collection) org-node-collection)= | | Get backlink objects | =(org-roam-backlinks-get NODE)= | =(gethash (org-node id NODE) org-node--links-table)= | | Get reflink objects | =(org-roam-reflinks-get NODE)= | =(gethash (org-node id NODE) org-node--reflinks-table)= | | Get title | =(org-roam-node-title NODE)= | =(org-node-title NODE)= | | Get title of file where NODE is | =(org-roam-node-file-title NODE)= | =(org-node-file-title NODE)= | | Get ID | =(org-roam-node-id NODE)= | =(org-node-id NODE)= | | Get filename | =(org-roam-node-file NODE)= | =(org-node-file-path NODE)= | | Get tags | =(org-roam-node-tags NODE)= | =(org-node-tags NODE)=, no inherited tags | | Get outline level | =(org-roam-node-level NODE)= | =(org-node-level NODE)=, | | Get char position | =(org-roam-node-point NODE)= | =(org-node-pos NODE)= | | Get properties | =(org-roam-node-properties NODE)= | =(org-node-properties NODE)=, no inherited properties | | Get subtree TODO state | =(org-roam-node-todo NODE)= | =(org-node-todo NODE)=, only that match global =org-todo-keywords= | | Get subtree SCHEDULED | =(org-roam-node-scheduled NODE)= | =(org-node-scheduled NODE)= | | Get subtree DEADLINE | =(org-roam-node-deadline NODE)= | =(org-node-deadline NODE)= | | Get outline-path | =(org-roam-node-olp NODE)= | =(org-node-olp NODE)= | | Get =ROAM_REFS= | =(org-roam-node-refs NODE)= | =(org-node-refs NODE)= | | Get =ROAM_ALIASES= | =(org-roam-node-aliases NODE)= | =(org-node-aliases NODE)= | | Get =ROAM_EXCLUDE= | | =(assoc &#34;ROAM_EXCLUDE&#34; (org-node-properties NODE))=, doesn&#39;t inherit parent excludes! | | Get whether this is a subtree | | =(org-node-is-subtree NODE)= | | Get subtree heading sans TODO | =(org-roam-node-title NODE)= | =(org-node--visit-get-true-heading NODE)= | | Get subtree priority | =(org-roam-node-priority NODE)= | | | Ensure fresh data | =(org-roam-db-sync)= | =(org-node-cache-ensure-fresh)= |&lt;/p&gt; &#xA;&lt;p&gt;** Appendix II: Pros of org-roam&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;It is the most general toolkit. Take a function like =org-roam-id-at-point=. Why does it exist, when you could use =(org-id-get nil nil nil t)=? Well, the org-roam version ignores those ancestor headings that have an ID but have been marked not to count as &#34;Roam nodes&#34;, so it travels further up the tree until it finds one that is indeed &#34;a Roam node&#34;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This brings good to some users. Complexity is not the enemy. It&#39;s just a bit of a YAML vs TOML situation. Or lsp-mode vs eglot. I prefer to try to be &#34;closer to the metal&#34;, use vanilla =org-capture= instead of =org-roam-capture=, look up vanilla =org-id-locations= instead of =org-roam-directory= etc. Not have so many wrappers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Take the variable =org-roam-mode-sections=. Under any ordinary Emacs Lisp package, this would just be a list of functions. But in fact, you can add to it a cons cell of a function plus the arguments to pass to it. I like programmability, but this is ... oriented towards people who aren&#39;t programmers, I think.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It does make the org-roam source code a slower read. You scratch your head and ask &#34;Why is it made that way?&#34; Then you see, and you say &#34;Ah, but /I/ don&#39;t need that!&#34; Well, maybe someone does.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Take the variable =org-roam-node-display-templates=. At least, others may consider this a pro, but for my tastes no. I try to let people customize with little lambdas and provide examples of how they&#39;d get some result or other. This instead has the dream UI where you can just set the variable to a string &#34;${olp} ${tags} ${title}&#34; or some such and be done with it. Problem is it&#39;s a new mini-DSL (domain-specific language), and when you learn it you miss out on an elisp lesson. Convenient for beginners but also /keeps/ them beginners.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Appendix III: Taking ownership of org-id&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say most of your Org files sit in a folder =/home/kept/notes/= but some others are outside, scattered here and there, plus you&#39;d like to try not depending on the handy =org-roam-update-org-id-locations=.&lt;/p&gt; &#xA;&lt;p&gt;The challenges with org-id:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The classic way to tell it where to look for IDs is adding the directories to =org-agenda-files=. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unfortunately with thousands of files, this slows down the agenda something extreme. Not an option.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;An alternative way is to populate =org-id-extra-files= or =org-agenda-text-search-extra-files=. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See snippet A, but unfortunately with thousands of files this slows down =M-x customize-group= for org-id or org-agenda something extreme.&lt;/li&gt; &#xA;   &lt;li&gt;Sounds like org-id could use a patch... I&#39;ll email someone about it...eventually&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To sidestep the small problem with #2, you could trust in org-id to keep itself updated, because it does that every time your Emacs creates or sees an ID. You regenerate org-id-locations /once/ (or well, once every time you wipe .emacs.d). See snippets B or C.&lt;/li&gt; &#xA; &lt;li&gt;org-id complains about duplicate IDs because it&#39;s also looking in e.g. the versioned backups generated by Logseq &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;So, you need some sort of exclusion ruleset. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;For an elisp-only way, see snippets A or B.&lt;/li&gt; &#xA;     &lt;li&gt;A /natural/ way is to obey =.ignore= or =.gitignore=, if you already keep such files. I&#39;ve found no elisp gitignore parser, but see snippet C for a way to use ripgrep&#39;s builtin parser.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Why org-roam didn&#39;t give you this problem? It has actually been suppressing org-id errors!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If your Emacs quits unexpectedly, it can &lt;em&gt;forget many ID locations!&lt;/em&gt; To ensure it remembers, either use a hook like : (add-hook &#39;after-save-hook : (defun my-save-id-soon () : (run-with-idle-timer 10 t #&#39;org-id-locations-save))) or enable =eager-state-preempt-kill-emacs-hook-mode= from [[https://github.com/meedstrom/eager-state][eager-state]].&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Snippet A #+begin_src elisp ;; Populate `org-id-extra-files&#39; (dolist (file (--mapcat (directory-files-recursively it &#34;\.org$&#34;) &#39;(;; Example values &#34;/home/kept/notes/&#34; &#34;/home/kept/project1/&#34; &#34;/home/kept/project2/&#34;))) (when (not (or (string-search &#34;/logseq/bak/&#34; file) (string-search &#34;/logseq/version-files/&#34; file))) (push file org-id-extra-files)))&lt;/p&gt; &#xA;&lt;p&gt;;; Eval to regen the `org-id-locations-file&#39; - NOT needed on init (org-id-update-id-locations) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Snippet B #+begin_src elisp (unless (and (file-exists-p org-id-locations-file) (org-id-locations-load) (not (hash-table-empty-p org-id-locations))) ;; Tell org-id without setting `org-id-extra-files&#39; (org-id-update-id-locations (--reject (or (string-search &#34;/logseq/bak/&#34; it) (string-search &#34;/logseq/version-files/&#34; it)) (--mapcat (directory-files-recursively it &#34;\.org$&#34;) &#39;(;; Example values &#34;/home/kept/notes/&#34; &#34;/home/kept/project1/&#34; &#34;/home/kept/project2/&#34;))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Snippet C #+begin_src elisp (unless (and (file-exists-p org-id-locations-file) (org-id-locations-load) (not (hash-table-empty-p org-id-locations))) (dolist (default-directory &#39;(;; Example values &#34;/home/kept/notes/&#34; &#34;/home/kept/project1/&#34; &#34;/home/kept/project2/&#34;)) ;; Borrow ripgrep&#39;s ability to obey .ignore/.gitignore (org-id-update-id-locations (split-string (shell-command-to-string &#34;rg -ilt org :ID:&#34;) &#34;\n&#34; t)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Bonus snippet: full reset&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp ;; FOR TESTING: wipe all records ;; You ONLY need to wipe if it won&#39;t shut up about duplicates! (progn (delete-file org-id-locations-file) (setq org-id-locations nil) (setq org-id--locations-checksum nil) (setq org-agenda-text-search-extra-files nil) (setq org-id-files nil) (setq org-id-extra-files nil)) #+end_src&lt;/p&gt;</summary>
  </entry>
</feed>