<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-28T01:25:08Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>s-kostyaev/elisa</title>
    <updated>2024-02-28T01:25:08Z</updated>
    <id>tag:github.com,2024-02-28:/s-kostyaev/elisa</id>
    <link href="https://github.com/s-kostyaev/elisa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ELISA (Emacs Lisp Information System Assistant) is a project designed to help Emacs users quickly find answers to their questions related to Emacs and Emacs Lisp. Utilizing the powerful Ellama package, ELISA provides accurate and relevant responses to user queries, enhancing productivity and efficiency in the Emacs environment.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;ELISA&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[http://www.gnu.org/licenses/gpl-3.0.txt][file:https://img.shields.io/badge/license-GPL_3-green.svg]]&lt;/p&gt; &#xA;&lt;p&gt;ELISA (Emacs Lisp Information System Assistant) is a project designed to help Emacs users quickly find answers to their questions related to Emacs and Emacs Lisp. Utilizing the powerful Ellama package, ELISA provides accurate and relevant responses to user queries, enhancing productivity and efficiency in the Emacs environment. By integrating links to the Emacs info manual after answering a question, ELISA ensures that users have easy access to additional information on the topic, making it an essential tool for both beginners and advanced Emacs users.&lt;/p&gt; &#xA;&lt;p&gt;ELISA creates index from info manuals. When you send message to &lt;del&gt;elisa-chat&lt;/del&gt; it search to semantically similar info nodes in index, get first &lt;del&gt;elisa-limit&lt;/del&gt; nodes, add it to context and send your message to llm. LLM generates answer to your message based on provided context. You can read not only answer generated by llm, but also info manuals by provided links.&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;You need emacs 29.2 or newer to use this package. Will be on package archives soon. For now you can use &lt;del&gt;package-vc&lt;/del&gt; to install ELISA:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (package-vc-install &#34;&lt;a href=&#34;https://github.com/s-kostyaev/elisa&#34;&gt;https://github.com/s-kostyaev/elisa&lt;/a&gt;&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can use this package with different llm providers. By default it uses [[https://github.com/jmorganca/ollama][ollama]] provider both for embeddings and chat. If you ok with it, you need to install [[https://github.com/jmorganca/ollama][ollama]] and pull used models:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src shell ollama pull nomic-embed-text ollama pull sskostyaev/openchat:8k-rag #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Second model is just [[https://ollama.com/library/openchat][openchat]] with exactly 2 tweaks: context window extended to 8k and temperature set to 0 to better usage for RAG (Retrieval Augmented Generation). You can try other models, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://ollama.com/library/all-minilm][all-minilm]] for embeddings&lt;/li&gt; &#xA; &lt;li&gt;[[sskostyaev/mistral:32k-rag][sskostyaev/mistral:32k-rag]] for chat&lt;/li&gt; &#xA; &lt;li&gt;other [[https://ollama.com/library][models]] or [[https://github.com/ahyatt/llm?tab=readme-ov-file#setting-up-providers][providers]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/ollama/ollama?tab=readme-ov-file#create-a-model][create your own model]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Create index for builtin, external or all info manuals by one of this commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-async-parse-builtin-manuals&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-async-parse-external-manuals&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-async-parse-all-manuals&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This can take some time.&lt;/p&gt; &#xA;&lt;p&gt;** Commands&lt;/p&gt; &#xA;&lt;p&gt;*** elisa-chat&lt;/p&gt; &#xA;&lt;p&gt;Entrypoint. Makes similarity search in index, add semantically similar info nodes into context and query llm for prompt. Uses &lt;del&gt;ellama&lt;/del&gt; under the hood. Call one of parse manuals functions to create index before use it.&lt;/p&gt; &#xA;&lt;p&gt;*** elisa-download-sqlite-vss&lt;/p&gt; &#xA;&lt;p&gt;Download [[https://github.com/asg017/sqlite-vss][sqlite vss]] extension to provide similarity search. Will be called automatically if needed.&lt;/p&gt; &#xA;&lt;p&gt;*** elisa-async-parse-builtin-manuals&lt;/p&gt; &#xA;&lt;p&gt;Parse builtin emacs info manuals asyncronously. Can take long time.&lt;/p&gt; &#xA;&lt;p&gt;*** elisa-async-parse-external-manuals&lt;/p&gt; &#xA;&lt;p&gt;Parse external emacs info manuals asyncronously.&lt;/p&gt; &#xA;&lt;p&gt;*** elisa-async-parse-all-manuals&lt;/p&gt; &#xA;&lt;p&gt;Parse all emacs info manuals asyncronously.&lt;/p&gt; &#xA;&lt;p&gt;One of parse functions should be called before &lt;del&gt;elisa-chat&lt;/del&gt; to create index.&lt;/p&gt; &#xA;&lt;p&gt;** Configuration&lt;/p&gt; &#xA;&lt;p&gt;Example configuration. With default installation you don&#39;t need it.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package elisa :init (setopt elisa-limit 5) (require &#39;llm-ollama) (setopt elisa-embeddings-provider (make-llm-ollama :embedding-model &#34;nomic-embed-text&#34;)) (setopt elisa-chat-provider (make-llm-ollama :chat-model &#34;sskostyaev/openchat:8k-rag&#34; :embedding-model &#34;nomic-embed-text&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The following variables can be customized for ELISA:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-embeddings-provider&lt;/del&gt;: Embeddings provider to generate embeddings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-chat-provider&lt;/del&gt;: Chat provider.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-db-directory&lt;/del&gt;: Directory for elisa database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-limit&lt;/del&gt;: Count info nodes to pass into llm context for answer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-find-executable&lt;/del&gt;: Path to find executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-tar-executable&lt;/del&gt;: Path to tar executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;elisa-sqlite-vss-version&lt;/del&gt;: Sqlite VSS version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributions&lt;/p&gt; &#xA;&lt;p&gt;To contribute, submit a pull request or report a bug. This library is planned to be part of GNU ELPA; major contributions must be from someone with FSF papers. Alternatively, you can write a module and share it on a different archive like MELPA.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bramadams/embark-org-roam</title>
    <updated>2024-02-28T01:25:08Z</updated>
    <id>tag:github.com,2024-02-28:/bramadams/embark-org-roam</id>
    <link href="https://github.com/bramadams/embark-org-roam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embark export buffer for org roam nodes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: embark-org-roam #+HTML: &lt;img src=&#34;https://github.com/bramadams/embark-org-roam/actions/workflows/melpazoid.yml/badge.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+PROPERTY: LOGGING nil&lt;/p&gt; &#xA;&lt;h1&gt;Note: This readme works with the org-make-toc &lt;a href=&#34;https://github.com/alphapapa/org-make-toc&#34;&gt;https://github.com/alphapapa/org-make-toc&lt;/a&gt; package, which automatically updates the table of contents.&lt;/h1&gt; &#xA;&lt;p&gt;This package provides an embark export buffer for org roam nodes, which is super-useful when &#34;harvesting&#34; your org-roam knowledge base for sources to be used for a specific paper, diary entry, development task, etc. The buffer uses org-mode, and by default lists the selected org roam nodes in a checklist, allowing to check off items as you are processing them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The [[screenshot1.png][first screenshot]] shows a checklist version of the org roam export buffer, while the [[screenshot1.png][second screenshot]] shows a read-only version of the buffer. These buffers were obtained by searching org roam nodes for entries matching the term &#34;python&#34;, then =embark-select=-ing the org roam nodes of interest, followed by =embark-export=.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bramadams/embark-org-roam/main/screenshot1.png&#34; width=&#34;90%&#34;&gt;&lt;/p&gt; #+html: &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bramadams/embark-org-roam/main/screenshot2.png&#34; width=&#34;90%&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :noexport: :PROPERTIES: :TOC: :include siblings :END: :CONTENTS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#changelog][Changelog]]&lt;/li&gt; &#xA; &lt;li&gt;[[#credits][Credits]]&lt;/li&gt; &#xA; &lt;li&gt;[[#development][Development]]&lt;/li&gt; &#xA; &lt;li&gt;[[#license][License]] :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :TOC: :depth 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Manual&lt;/p&gt; &#xA;&lt;p&gt;Install these required packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=embark=&lt;/li&gt; &#xA; &lt;li&gt;=org-roam=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then put this file in your load-path, and put this in your init file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (require &#39;embark-org-roam) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Straight&lt;/p&gt; &#xA;&lt;p&gt;Put this in your init file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (use-package embark-org-roam :ensure t :straight (embark-org-roam :type git :host github :repo &#34;bramadams/embark-org-roam&#34;) :after (org-roam embark) :demand t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Elpaca&lt;/p&gt; &#xA;&lt;p&gt;Put this in your init file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (use-package embark-org-roam :ensure t :elpaca (embark-org-roam :type git :host github :repo &#34;bramadams/embark-org-roam&#34;) :after (org-roam embark) :demand t) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :TOC: :depth 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use =embark-select= to select all org roam nodes of interest, then use =embark-export=, which will open a special org mode buffer containing links to the selected nodes.&lt;/p&gt; &#xA;&lt;p&gt;You can customize whether the exported buffer is read-only using the =embark-org-roam-readonly= variable. By default, the buffer is &lt;em&gt;not&lt;/em&gt; read-only, resulting in an org-mode checklist.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changelog :PROPERTIES: :TOC: :depth 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1&lt;/p&gt; &#xA;&lt;p&gt;Initial release.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Credits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package would not have been possible without the following magnificent packages: [[https://github.com/org-roam/org-roam][org-roam]] and [[https://github.com/oantolin/embark][embark]]. Also a big thanks to alphapapa for their [[https://github.com/alphapapa/emacs-package-dev-handbook ][Emacs package development handbook]]!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any bug reports, feature requests, suggestions, etc. welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[LICENSE][GPLv3]]&lt;/p&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;eval: (require &#39;org-make-toc)&lt;/h1&gt; &#xA;&lt;h1&gt;before-save-hook: org-make-toc&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-with-properties: ()&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-with-title: t&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
</feed>