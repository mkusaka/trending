<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-13T01:51:58Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>seagle0128/doom-modeline</title>
    <updated>2022-06-13T01:51:58Z</updated>
    <id>tag:github.com,2022-06-13:/seagle0128/doom-modeline</id>
    <link href="https://github.com/seagle0128/doom-modeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;doom-modeline&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/seagle0128/doom-modeline/actions&#34;&gt;&lt;img src=&#34;https://github.com/seagle0128/doom-modeline/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/release&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/seagle0128/doom-modeline.svg?label=Release&#34; alt=&#34;Release Tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/License&#34;&gt;&lt;img src=&#34;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/doom-modeline&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/doom-modeline-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/doom-modeline&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/doom-modeline-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#doom-modeline&#34;&gt;doom-modeline&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#feature&#34;&gt;Feature&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#use-package&#34;&gt;Use-package&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#customize&#34;&gt;Customize&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s integrated into &lt;a href=&#34;https://github.com/seagle0128/.emacs.d&#34;&gt;Centaur Emacs&lt;/a&gt;, &lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;Doom Emacs&lt;/a&gt; and &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;doom-modeline&lt;/code&gt; was designed for minimalism, and offers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A match count panel (for &lt;code&gt;anzu&lt;/code&gt;, &lt;code&gt;iedit&lt;/code&gt;, &lt;code&gt;multiple-cursors&lt;/code&gt;, &lt;code&gt;symbol-overlay&lt;/code&gt;, and &lt;code&gt;evil-search&lt;/code&gt;, etc.)&lt;/li&gt; &#xA; &lt;li&gt;An indicator for recording a macro&lt;/li&gt; &#xA; &lt;li&gt;Current environment version (e.g. &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, etc.) in the major-mode&lt;/li&gt; &#xA; &lt;li&gt;A customizable mode-line height (see &lt;code&gt;doom-modeline-height&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A minor modes segment which is compatible with &lt;code&gt;minions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An error/warning count segment for &lt;code&gt;flymake&lt;/code&gt;/&lt;code&gt;flycheck&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A workspace number/name segment for &lt;code&gt;eyebrowse&lt;/code&gt; or &lt;code&gt;tab-bar-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A perspective name segment for &lt;code&gt;persp-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A window number segment for &lt;code&gt;ace-window&lt;/code&gt;, &lt;code&gt;winum&lt;/code&gt; and &lt;code&gt;window-numbering&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for modal editing state, including &lt;code&gt;evil&lt;/code&gt;, &lt;code&gt;overwrite&lt;/code&gt;, &lt;code&gt;god&lt;/code&gt;, &lt;code&gt;ryo&lt;/code&gt; and &lt;code&gt;xah-fly-keys&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;An indicator for &lt;code&gt;battery&lt;/code&gt; status&lt;/li&gt; &#xA; &lt;li&gt;An indicator for current input method&lt;/li&gt; &#xA; &lt;li&gt;An indicator for debug state&lt;/li&gt; &#xA; &lt;li&gt;An indicator for remote host&lt;/li&gt; &#xA; &lt;li&gt;An indicator for LSP state with &lt;code&gt;lsp-mode&lt;/code&gt; or &lt;code&gt;eglot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for GitHub notifications&lt;/li&gt; &#xA; &lt;li&gt;An indicator for unread emails with &lt;code&gt;mu4e-alert&lt;/code&gt; and &lt;code&gt;gnus&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for IRC notifications with &lt;code&gt;circe&lt;/code&gt;, &lt;code&gt;rcirc&lt;/code&gt; or &lt;code&gt;erc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for buffer position which is compatible with &lt;code&gt;nyan-mode&lt;/code&gt; or &lt;code&gt;poke-line&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for party &lt;code&gt;parrot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for PDF page number with &lt;code&gt;pdf-tools&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for markdown/org preview with &lt;code&gt;grip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Truncated file name, file icon, buffer state and project name in buffer information segment, which is compatible with &lt;code&gt;project&lt;/code&gt;, &lt;code&gt;projectile&lt;/code&gt; and &lt;code&gt;find-file-in-project&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;New mode-line for &lt;code&gt;Info-mode&lt;/code&gt; buffers&lt;/li&gt; &#xA; &lt;li&gt;New package mode-line for &lt;code&gt;paradox&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;New mode-line for &lt;code&gt;helm&lt;/code&gt; buffers&lt;/li&gt; &#xA; &lt;li&gt;New mode-line for &lt;code&gt;git-timemachine&lt;/code&gt; buffers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694177-10dcd280-fbc0-11e8-8d21-971ede6afdb5.png&#34; alt=&#34;modeline&#34; title=&#34;Mode-line&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694189-6913d480-fbc0-11e8-93ae-9578455dcd2c.png&#34; alt=&#34;search_replace&#34; title=&#34;Search and Replace&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/162925065-0ffe40fd-1efd-469b-bf09-c62fe2d22fd2.png&#34; alt=&#34;evil_search&#34; title=&#34;Evil Search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694199-cc056b80-fbc0-11e8-9bb1-533b1e64da66.png&#34; alt=&#34;macro&#34; title=&#34;Macro&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/51301117-0805d900-1a69-11e9-957d-b4c7a70a1cf8.png&#34; alt=&#34;no_icons&#34; title=&#34;No Icons&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50414928-3c63ec00-0853-11e9-9b26-6a1df278d332.png&#34; alt=&#34;color_icon_cpp&#34; title=&#34;Color C++ icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50415081-1428bd00-0854-11e9-9ae5-91805290c524.png&#34; alt=&#34;color_icon_java&#34; title=&#34;Color Java icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50415381-9f568280-0855-11e9-9478-34a6dd614d96.png&#34; alt=&#34;color_icon_elisp&#34; title=&#34;Color Elisp icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/68990534-332aa600-088f-11ea-920f-20c9527a6466.png&#34; alt=&#34;evil_normal_state_icon&#34; title=&#34;Evil Normal State icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/68990540-4dfd1a80-088f-11ea-8e53-ab77af4c58c2.png&#34; alt=&#34;evil_insert_state_icon&#34; title=&#34;Evil Insert State icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694476-b8103880-fbc5-11e8-9c18-91f5e9258333.png&#34; alt=&#34;evil_normal_state&#34; title=&#34;Evil Normal State&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694461-8b5c2100-fbc5-11e8-993e-d97baa9f01af.png&#34; alt=&#34;evil_insert_state&#34; title=&#34;Evil Insert State&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/53592864-c751c180-3bc9-11e9-9914-493007c013d5.png&#34; alt=&#34;lsp_version&#34; title=&#34;Perspective, LSP, Version, VCS and Flycheck&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694481-e0983280-fbc5-11e8-8cb2-c8d2e782bcdb.png&#34; alt=&#34;perspective&#34; title=&#34;Perspective, LSP, Version and VCS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/53592683-64602a80-3bc9-11e9-8054-91f79aa930b9.png&#34; alt=&#34;notifications&#34; title=&#34;Notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50301291-de857c00-04c1-11e9-84c5-bfbc8de8295f.png&#34; alt=&#34;minions&#34; title=&#34;Minions and minor modes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50302008-c57dca80-04c3-11e9-8578-50154ef4f9f0.png&#34; alt=&#34;debug&#34; title=&#34;Debug state&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/51301061-da209480-1a68-11e9-9f64-905d889df9d6.png&#34; alt=&#34;nyan_parrot&#34; title=&#34;Nyan and Parrot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/69004814-20c67000-0954-11ea-8489-f5a527a80574.png&#34; alt=&#34;irc&#34; title=&#34;IRC Notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/53593622-ba35d200-3bcb-11e9-85b3-38d64d05c127.png&#34; alt=&#34;battery&#34; title=&#34;Battery&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/57503916-e769d380-7324-11e9-906d-44c79f7408a3.png&#34; alt=&#34;package&#34; title=&#34;Package&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/57506248-d96c8080-732d-11e9-8167-644c8fc4e0db.png&#34; alt=&#34;info&#34; title=&#34;Info&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/57506112-6531dd00-732d-11e9-8a5e-22166f42dd4c.png&#34; alt=&#34;helm&#34; title=&#34;Helm&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;From melpa, &lt;code&gt;M-x package-install RET doom-modeline RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;init.el&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;doom-modeline)&#xA;(doom-modeline-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;after-init-hook #&#39;doom-modeline-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use-package&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package doom-modeline&#xA;  :ensure t&#xA;  :init (doom-modeline-mode 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package doom-modeline&#xA;  :ensure t&#xA;  :hook (after-init . doom-modeline-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This package is able to display icons if &lt;code&gt;all-the-icons&lt;/code&gt; package and required fonts are installed. Run &lt;code&gt;M-x all-the-icons-install-fonts&lt;/code&gt; to install the necessary fonts. Please refer to the &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el#installation&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;init.el&lt;/code&gt; if you want to use icons,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Install via `M-x package-install RET all-the-icons RET`&#xA;(require &#39;all-the-icons)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package all-the-icons&#xA;  :ensure t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Strongly recommend to use &lt;a href=&#34;https://github.com/hlissner/emacs-doom-themes&#34;&gt;doom-themes&lt;/a&gt; at the same time.&lt;/p&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;M-x customize-group RET doom-modeline RET&lt;/code&gt; or set the variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; If non-nil, cause imenu to see `doom-modeline&#39; declarations.&#xA;;; This is done by adjusting `lisp-imenu-generic-expression&#39; to&#xA;;; include support for finding `doom-modeline-def-*&#39; forms.&#xA;;; Must be set before loading doom-modeline.&#xA;(setq doom-modeline-support-imenu t)&#xA;&#xA;;; How tall the mode-line should be. It&#39;s only respected in GUI.&#xA;;; If the actual char height is larger, it respects the actual height.&#xA;(setq doom-modeline-height 25)&#xA;&#xA;;; How wide the mode-line bar should be. It&#39;s only respected in GUI.&#xA;(setq doom-modeline-bar-width 4)&#xA;&#xA;;; Whether to use hud instead of default bar. It&#39;s only respected in GUI.&#xA;(setq doom-modeline-hud nil)&#xA;&#xA;;; The limit of the window width.&#xA;;; If `window-width&#39; is smaller than the limit, some information won&#39;t be&#xA;;; displayed. It can be an integer or a float number. `nil&#39; means no limit.&#34;&#xA;(setq doom-modeline-window-width-limit 0.25)&#xA;&#xA;;; How to detect the project root.&#xA;;; nil means to use `default-directory&#39;.&#xA;;; The project management packages have some issues on detecting project root.&#xA;;; e.g. `projectile&#39; doesn&#39;t handle symlink folders well, while `project&#39; is unable&#xA;;; to hanle sub-projects.&#xA;;; You can specify one if you encounter the issue.&#xA;(setq doom-modeline-project-detection &#39;auto)&#xA;&#xA;;; Determines the style used by `doom-modeline-buffer-file-name&#39;.&#xA;;;&#xA;;; Given ~/Projects/FOSS/emacs/lisp/comint.el&#xA;;;   auto =&amp;gt; emacs/lisp/comint.el (in a project) or comint.el&#xA;;;   truncate-upto-project =&amp;gt; ~/P/F/emacs/lisp/comint.el&#xA;;;   truncate-from-project =&amp;gt; ~/Projects/FOSS/emacs/l/comint.el&#xA;;;   truncate-with-project =&amp;gt; emacs/l/comint.el&#xA;;;   truncate-except-project =&amp;gt; ~/P/F/emacs/l/comint.el&#xA;;;   truncate-upto-root =&amp;gt; ~/P/F/e/lisp/comint.el&#xA;;;   truncate-all =&amp;gt; ~/P/F/e/l/comint.el&#xA;;;   truncate-nil =&amp;gt; ~/Projects/FOSS/emacs/lisp/comint.el&#xA;;;   relative-from-project =&amp;gt; emacs/lisp/comint.el&#xA;;;   relative-to-project =&amp;gt; lisp/comint.el&#xA;;;   file-name =&amp;gt; comint.el&#xA;;;   buffer-name =&amp;gt; comint.el&amp;lt;2&amp;gt; (uniquify buffer name)&#xA;;;&#xA;;; If you are experiencing the laggy issue, especially while editing remote files&#xA;;; with tramp, please try `file-name&#39; style.&#xA;;; Please refer to https://github.com/bbatsov/projectile/issues/657.&#xA;(setq doom-modeline-buffer-file-name-style &#39;auto)&#xA;&#xA;;; Whether display icons in the mode-line.&#xA;;; While using the server mode in GUI, should set the value explicitly.&#xA;(setq doom-modeline-icon t)&#xA;&#xA;;; Whether display the icon for `major-mode&#39;. It respects `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-major-mode-icon t)&#xA;&#xA;;; Whether display the colorful icon for `major-mode&#39;.&#xA;;; It respects `all-the-icons-color-icons&#39;.&#xA;(setq doom-modeline-major-mode-color-icon t)&#xA;&#xA;;; Whether display the icon for the buffer state. It respects `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-buffer-state-icon t)&#xA;&#xA;;; Whether display the modification icon for the buffer.&#xA;;; It respects `doom-modeline-icon&#39; and `doom-modeline-buffer-state-icon&#39;.&#xA;(setq doom-modeline-buffer-modification-icon t)&#xA;&#xA;;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.&#xA;(setq doom-modeline-unicode-fallback nil)&#xA;&#xA;;; Whether display the buffer name.&#xA;(setq doom-modeline-buffer-name t)&#xA;&#xA;;; Whether display the minor modes in the mode-line.&#xA;(setq doom-modeline-minor-modes nil)&#xA;&#xA;;; If non-nil, a word count will be added to the selection-info modeline segment.&#xA;(setq doom-modeline-enable-word-count nil)&#xA;&#xA;;; Major modes in which to display word count continuously.&#xA;;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count&#39;.&#xA;;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count&#39; or&#xA;;; remove the modes from `doom-modeline-continuous-word-count-modes&#39;.&#xA;(setq doom-modeline-continuous-word-count-modes &#39;(markdown-mode gfm-mode org-mode))&#xA;&#xA;;; Whether display the buffer encoding.&#xA;(setq doom-modeline-buffer-encoding t)&#xA;&#xA;;; Whether display the indentation information.&#xA;(setq doom-modeline-indent-info nil)&#xA;&#xA;;; If non-nil, only display one number for checker information if applicable.&#xA;(setq doom-modeline-checker-simple-format t)&#xA;&#xA;;; The maximum number displayed for notifications.&#xA;(setq doom-modeline-number-limit 99)&#xA;&#xA;;; The maximum displayed length of the branch name of version control.&#xA;(setq doom-modeline-vcs-max-length 12)&#xA;&#xA;;; Whether display the workspace name. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-workspace-name t)&#xA;&#xA;;; Whether display the perspective name. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-persp-name t)&#xA;&#xA;;; If non nil the default perspective name is displayed in the mode-line.&#xA;(setq doom-modeline-display-default-persp-name nil)&#xA;&#xA;;; If non nil the perspective name is displayed alongside a folder icon.&#xA;(setq doom-modeline-persp-icon t)&#xA;&#xA;;; Whether display the `lsp&#39; state. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-lsp t)&#xA;&#xA;;; Whether display the GitHub notifications. It requires `ghub&#39; package.&#xA;(setq doom-modeline-github nil)&#xA;&#xA;;; The interval of checking GitHub.&#xA;(setq doom-modeline-github-interval (* 30 60))&#xA;&#xA;;; Whether display the modal state icon.&#xA;;; Including `evil&#39;, `overwrite&#39;, `god&#39;, `ryo&#39; and `xah-fly-keys&#39;, etc.&#xA;(setq doom-modeline-modal-icon t)&#xA;&#xA;;; Whether display the mu4e notifications. It requires `mu4e-alert&#39; package.&#xA;(setq doom-modeline-mu4e nil)&#xA;;; also enable the start of mu4e-alert&#xA;(mu4e-alert-enable-mode-line-display)&#xA;&#xA;;; Whether display the gnus notifications.&#xA;(setq doom-modeline-gnus t)&#xA;&#xA;;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)&#xA;(setq doom-modeline-gnus-timer 2)&#xA;&#xA;;; Wheter groups should be excludede when gnus automatically being updated.&#xA;(setq doom-modeline-gnus-excluded-groups &#39;(&#34;dummy.group&#34;))&#xA;&#xA;;; Whether display the IRC notifications. It requires `circe&#39; or `erc&#39; package.&#xA;(setq doom-modeline-irc t)&#xA;&#xA;;; Function to stylize the irc buffer names.&#xA;(setq doom-modeline-irc-stylize &#39;identity)&#xA;&#xA;;; Whether display the environment version.&#xA;(setq doom-modeline-env-version t)&#xA;;; Or for individual languages&#xA;(setq doom-modeline-env-enable-python t)&#xA;(setq doom-modeline-env-enable-ruby t)&#xA;(setq doom-modeline-env-enable-perl t)&#xA;(setq doom-modeline-env-enable-go t)&#xA;(setq doom-modeline-env-enable-elixir t)&#xA;(setq doom-modeline-env-enable-rust t)&#xA;&#xA;;; Change the executables to use for the language version string&#xA;(setq doom-modeline-env-python-executable &#34;python&#34;) ; or `python-shell-interpreter&#39;&#xA;(setq doom-modeline-env-ruby-executable &#34;ruby&#34;)&#xA;(setq doom-modeline-env-perl-executable &#34;perl&#34;)&#xA;(setq doom-modeline-env-go-executable &#34;go&#34;)&#xA;(setq doom-modeline-env-elixir-executable &#34;iex&#34;)&#xA;(setq doom-modeline-env-rust-executable &#34;rustc&#34;)&#xA;&#xA;;; What to display as the version while a new one is being loaded&#xA;(setq doom-modeline-env-load-string &#34;...&#34;)&#xA;&#xA;;; Hooks that run before/after the modeline version string is updated&#xA;(setq doom-modeline-before-update-env-hook nil)&#xA;(setq doom-modeline-after-update-env-hook nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display icons correctly?&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt; are necessary. Then run &lt;code&gt;M-x all-the-icons-install-fonts&lt;/code&gt; to install the resource fonts. On Windows, the fonts should be installed manually. &lt;code&gt;all-the-icons&lt;/code&gt; only support GUI. If you don&#39;t like color icons, &lt;code&gt;(setq all-the-icons-color-icons nil)&lt;/code&gt; to disable it. Please refer to &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons.el&lt;/a&gt; for details.&lt;/p&gt; &lt;p&gt;If the icons are not displayed correctly although &lt;code&gt;all-the-icons&lt;/code&gt; fonts are installed correctly, please install the &lt;a href=&#34;http://users.teilar.gr/~g1951d/License.pdf&#34;&gt;non-free&lt;/a&gt; font &lt;a href=&#34;https://dn-works.com/wp-content/uploads/2020/UFAS-Fonts/Symbola.zip&#34;&gt;Symbola&lt;/a&gt;. This issue usually occurs on Windows.&lt;/p&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://github.com/tumashu/cnfonts&#34;&gt;cnfonts&lt;/a&gt;, it will conflict with &lt;code&gt;all-the-icons&lt;/code&gt;. The workaround is &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/278#issuecomment-569510336&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I am experiencing the laggy issue, how to resolve it?&lt;/p&gt; &lt;p&gt;Add this configuration into your init file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Don’t compact font caches during GC.&#xA;(setq inhibit-compacting-font-caches t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A ridiculous path is displayed on the mode-line while visiting a symbolink.&lt;/p&gt; &lt;p&gt;It&#39;s the default behaviors of Vanilla Emacs. If you want to display the real names, please put this into your init file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq find-file-visit-truename t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the file is controlled by vc, refer to the documentation of &lt;code&gt;vc-follow-symlinks&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why doesn&#39;t change of branch reflect in modeline?&lt;/p&gt; &lt;p&gt;Actually it&#39;s related to &lt;code&gt;magit&lt;/code&gt; and &lt;code&gt;vc-mode&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Workaround: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Revert the buffers manually.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;(setq auto-revert-check-vc-info t)&lt;/code&gt; brings the performance issue.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Refer to: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://magit.vc/manual/magit/The-mode_002dline-information-isn_0027t-always-up_002dto_002ddate.html&#34;&gt;The mode-line information isn’t always up-to-date&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/magit/magit/issues/2687&#34;&gt;Maybe provide an alternative to VC&#39;s mode-line information&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can I add my mode-line segments myself? How to do that? How can I define my own mode-line?&lt;/p&gt; &lt;p&gt;There are two methods.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If the information is simple, just add to &lt;code&gt;mode-line-misc-info&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use &lt;code&gt;doom-modeline-def-modeline&lt;/code&gt; to define your own mode-line and set it as default.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Define your custom doom-modeline&#xA;(doom-modeline-def-modeline &#39;my-simple-line&#xA;  &#39;(bar matches buffer-info remote-host buffer-position parrot selection-info)&#xA;  &#39;(misc-info minor-modes input-method buffer-encoding major-mode process vcs checker))&#xA;&#xA;;; Add to `doom-modeline-mode-hook` or other hooks&#xA;(defun setup-custom-doom-modeline ()&#xA;   (doom-modeline-set-modeline &#39;my-simple-line &#39;default))&#xA;(add-hook &#39;doom-modeline-mode-hook &#39;setup-custom-doom-modeline)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to specify font family in modeline?&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq doom-modeline-height 1)&#xA;(set-face-attribute &#39;doom-modeline nil :family &#34;Noto Sans&#34; :height 100)&#xA;(set-face-attribute &#39;doom-modeline-inactive nil :family &#34;Noto Sans&#34; :height 100)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(custom-set-faces&#xA;  &#39;(doom-modeline ((t (:family &#34;Noto Sans&#34; :height 0.9))))&#xA;  &#39;(doom-modeline-inactive ((t (:family &#34;Noto Sans&#34; :height 0.9)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/189&#34;&gt;#189&lt;/a&gt; and &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/301&#34;&gt;#301&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to disable symbolic links expanding in mode-line?&lt;/p&gt; &lt;p&gt;If you encounter the issue like this&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9449246/62822565-c3f93380-bb74-11e9-95f6-f9c24a6cbd14.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &lt;p&gt;please try this setting&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; built-in `project&#39; on 26+&#xA;(setq doom-modeline-project-detection &#39;project)&#xA;;; or `find-in-project&#39; if it&#39;s installed&#xA;(setq doom-modeline-project-detection &#39;ffip)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more details, refer to &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/209&#34;&gt;#209&lt;/a&gt; and &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/224&#34;&gt;#224&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can &lt;code&gt;doom-modeline&lt;/code&gt; show match count while search with &lt;code&gt;evil-search&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Yes. For better experience, should enable &lt;code&gt;anzu-mode&lt;/code&gt; and load &lt;code&gt;evil-anzu&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to show that the R is running in inferior ess R mode?&lt;/p&gt; &lt;p&gt;The ess R mode modifies &lt;code&gt;mode-line-buffer-identification&lt;/code&gt; directly to display the status. To display the status in &lt;code&gt;doom-modeline&lt;/code&gt;, you can add the status to &lt;code&gt;mode-line-process&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt; as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;inferior-ess-mode-hook&#xA;      (lambda ()&#xA;        (add-to-list &#39;mode-line-process &#39;(:eval (nth ess--busy-count ess-busy-strings)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you think it&#39;s helpful for you, please consider paying a cup of coffee for me. Thank you! &lt;span&gt;😄&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818854-44204900-e248-11e9-9cc5-3e6339587cd8.png&#34; alt=&#34;Alipay&#34; width=&#34;120&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818844-366ac380-e248-11e9-931c-4bd872d0566b.png&#34; alt=&#34;Wechat Pay&#34; width=&#34;120&#34;&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://paypal.me/seagle0128&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://www.paypalobjects.com/digitalassets/c/website/marketing/apac/C2/logos-buttons/optimize/44_Grey_PayPal_Pill_Button.png&#34; alt=&#34;PayPal&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.buymeacoffee.com/s9giES1&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; width=&#34;160&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>neeasade/ct.el</title>
    <updated>2022-06-13T01:51:58Z</updated>
    <id>tag:github.com,2022-06-13:/neeasade/ct.el</id>
    <link href="https://github.com/neeasade/ct.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;color tools for emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;🔵 🟣 🟢 🟤 🟡 🔴 🟠&lt;/p&gt; &#xA;&lt;p&gt;ct.el (color tools) is a color library for Emacs meant for making changes to individual colors in various color spaces. Builds on top of [[https://github.com/emacs-mirror/emacs/blob/master/lisp/color.el][color.el]] and [[https://github.com/hsluv/hsluv-emacs][hsluv-emacs]], providing a consistent interface to many color spaces, in addition to some utility functions. Visualized in [[https://notes.neeasade.net/color-spaces.html][this blog post]], used to create [[https://github.com/neeasade/tarps][tarps]]. Shouted out by [[https://protesilaos.com/codelog/2021-01-11-modus-themes-review-select-faint-colours/][prot]] (of modus themes fame).&lt;/p&gt; &#xA;&lt;p&gt;Supported color spaces: [[#rgb][rgb]] • [[#hsl][hsl]] • [[#hsv][hsv]] • [[#hsluv][hsluv]] • [[#hpluv][hpluv]] • [[#lab][lab]] • [[#lch][lch]]&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;ct.el is on [[https://melpa.org/#/ct][melpa]]. You may also install with [[https://github.com/raxod502/straight.el][straight.el]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (straight-use-package &#39;(ct :host github :repo &#34;neeasade/ct.el&#34; :branch &#34;master&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Conventions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Colorspace number range values are 0-100 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Exception: Hue (0-360 degrees)&lt;/li&gt; &#xA;   &lt;li&gt;Exception: L&lt;em&gt;AB&lt;/em&gt; (-100-100)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Values are clamped to valid ranges coming out of the &lt;del&gt;ct-edit&lt;/del&gt; functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hue is clamped via modulo 360&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Functions *** Color Properties&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#ct-contrast-ratio-c1-c2][ct-contrast-ratio]] &lt;del&gt;(C1 C2)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-distance-c1-c2][ct-distance]] &lt;del&gt;(C1 C2)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-format-argb-c-optional-opacity-end][ct-format-argb]] &lt;del&gt;(C &amp;amp;optional OPACITY END)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-format-rbga-c-optional-opacity][ct-format-rbga]] &lt;del&gt;(C &amp;amp;optional OPACITY)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-light-p-c-optional-scale][ct-light-p]] &lt;del&gt;(C &amp;amp;optional SCALE)&lt;/del&gt; *** Color Modification&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-complement-c][ct-complement]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-gradient-step-start-end-optional-with-ends-space][ct-gradient]] &lt;del&gt;(STEP START END &amp;amp;optional WITH-ENDS SPACE)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-greaten-c-optional-percent][ct-greaten]] &lt;del&gt;(C &amp;amp;optional PERCENT)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-lessen-c-optional-percent][ct-lessen]] &lt;del&gt;(C &amp;amp;optional PERCENT)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-iterate-start-op-condition][ct-iterate]] &lt;del&gt;(START OP CONDITION)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-iterations-start-op-condition][ct-iterations]] &lt;del&gt;(START OP CONDITION)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-lab-change-whitepoint-c-w1-w2][ct-lab-change-whitepoint]] &lt;del&gt;(C W1 W2)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-mix-colors-optional-space][ct-mix]] &lt;del&gt;(COLORS &amp;amp;optional SPACE)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-mix-opacity-top-bottom-opacity][ct-mix-opacity]] &lt;del&gt;(TOP BOTTOM OPACITY)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-pastel-c-optional-smod-vmod][ct-pastel]] &lt;del&gt;(C &amp;amp;optional SMOD VMOD)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-tint-ratio-foreground-background-ratio][ct-tint-ratio]] &lt;del&gt;(FOREGROUND BACKGROUND RATIO)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-rotation-hpluv-c-interval][ct-rotation-hpluv]] &lt;del&gt;(C INTERVAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-rotation-hsl-c-interval][ct-rotation-hsl]] &lt;del&gt;(C INTERVAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-rotation-hsluv-c-interval][ct-rotation-hsluv]] &lt;del&gt;(C INTERVAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-rotation-hsv-c-interval][ct-rotation-hsv]] &lt;del&gt;(C INTERVAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-rotation-lch-c-interval][ct-rotation-lch]] &lt;del&gt;(C INTERVAL)&lt;/del&gt; *** RGB&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-make-rgb-r-g-b][ct-make-rgb]] &lt;del&gt;(R G B)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-rgb-c][ct-get-rgb]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-rgb-r-c][ct-get-rgb-r]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-rgb-g-c][ct-get-rgb-g]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-rgb-b-c][ct-get-rgb-b]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-c-transform][ct-edit-rgb]] &lt;del&gt;(C TRANSFORM)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-b-c-func-or-val][ct-edit-rgb-b]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-b-dec-c-optional-v][ct-edit-rgb-b-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-b-inc-c-optional-v][ct-edit-rgb-b-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-g-c-func-or-val][ct-edit-rgb-g]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-g-dec-c-optional-v][ct-edit-rgb-g-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-g-inc-c-optional-v][ct-edit-rgb-g-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-r-c-func-or-val][ct-edit-rgb-r]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-r-dec-c-optional-v][ct-edit-rgb-r-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-rgb-r-inc-c-optional-v][ct-edit-rgb-r-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; *** LAB&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-make-lab-l-a-b][ct-make-lab]] &lt;del&gt;(L A B)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-lab-c][ct-get-lab]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-lab-l-c][ct-get-lab-l]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-lab-b-c][ct-get-lab-b]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-lab-a-c][ct-get-lab-a]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-c-transform][ct-edit-lab]] &lt;del&gt;(C TRANSFORM)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-a-c-func-or-val][ct-edit-lab-a]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-a-dec-c-optional-v][ct-edit-lab-a-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-a-inc-c-optional-v][ct-edit-lab-a-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-b-c-func-or-val][ct-edit-lab-b]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-b-dec-c-optional-v][ct-edit-lab-b-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-b-inc-c-optional-v][ct-edit-lab-b-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-l-c-func-or-val][ct-edit-lab-l]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-l-dec-c-optional-v][ct-edit-lab-l-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lab-l-inc-c-optional-v][ct-edit-lab-l-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; *** HSL&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-make-hsl-h-s-l][ct-make-hsl]] &lt;del&gt;(H S L)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsl-c][ct-get-hsl]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsl-s-c][ct-get-hsl-s]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsl-l-c][ct-get-hsl-l]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsl-h-c][ct-get-hsl-h]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-c-transform][ct-edit-hsl]] &lt;del&gt;(C TRANSFORM)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-h-c-func-or-val][ct-edit-hsl-h]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-h-dec-c-optional-v][ct-edit-hsl-h-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-h-inc-c-optional-v][ct-edit-hsl-h-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-l-c-func-or-val][ct-edit-hsl-l]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-l-dec-c-optional-v][ct-edit-hsl-l-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-l-inc-c-optional-v][ct-edit-hsl-l-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-s-c-func-or-val][ct-edit-hsl-s]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-s-dec-c-optional-v][ct-edit-hsl-s-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsl-s-inc-c-optional-v][ct-edit-hsl-s-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; *** HSLuv&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-make-hsluv-h-s-l][ct-make-hsluv]] &lt;del&gt;(H S L)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsluv-c][ct-get-hsluv]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsluv-s-c][ct-get-hsluv-s]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsluv-l-c][ct-get-hsluv-l]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsluv-h-c][ct-get-hsluv-h]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-c-transform][ct-edit-hsluv]] &lt;del&gt;(C TRANSFORM)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-h-c-func-or-val][ct-edit-hsluv-h]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-h-dec-c-optional-v][ct-edit-hsluv-h-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-h-inc-c-optional-v][ct-edit-hsluv-h-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-l-c-func-or-val][ct-edit-hsluv-l]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-l-dec-c-optional-v][ct-edit-hsluv-l-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-l-inc-c-optional-v][ct-edit-hsluv-l-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-s-c-func-or-val][ct-edit-hsluv-s]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-s-dec-c-optional-v][ct-edit-hsluv-s-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsluv-s-inc-c-optional-v][ct-edit-hsluv-s-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; *** LCH&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-make-lch-l-c-h][ct-make-lch]] &lt;del&gt;(L C H)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-lch-c][ct-get-lch]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-lch-l-c][ct-get-lch-l]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-lch-h-c][ct-get-lch-h]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-lch-c-c][ct-get-lch-c]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-c-transform][ct-edit-lch]] &lt;del&gt;(C TRANSFORM)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-c-c-func-or-val][ct-edit-lch-c]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-c-dec-c-optional-v][ct-edit-lch-c-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-c-inc-c-optional-v][ct-edit-lch-c-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-h-c-func-or-val][ct-edit-lch-h]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-h-dec-c-optional-v][ct-edit-lch-h-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-h-inc-c-optional-v][ct-edit-lch-h-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-l-c-func-or-val][ct-edit-lch-l]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-l-dec-c-optional-v][ct-edit-lch-l-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-lch-l-inc-c-optional-v][ct-edit-lch-l-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; *** HSV&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-make-hsv-h-s-v][ct-make-hsv]] &lt;del&gt;(H S V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsv-c][ct-get-hsv]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsv-v-c][ct-get-hsv-v]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsv-s-c][ct-get-hsv-s]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hsv-h-c][ct-get-hsv-h]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-c-transform][ct-edit-hsv]] &lt;del&gt;(C TRANSFORM)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-h-c-func-or-val][ct-edit-hsv-h]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-h-dec-c-optional-v][ct-edit-hsv-h-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-h-inc-c-optional-v][ct-edit-hsv-h-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-s-c-func-or-val][ct-edit-hsv-s]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-s-dec-c-optional-v][ct-edit-hsv-s-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-s-inc-c-optional-v][ct-edit-hsv-s-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-v-c-func-or-val][ct-edit-hsv-v]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-v-dec-c-optional-v][ct-edit-hsv-v-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hsv-v-inc-c-optional-v][ct-edit-hsv-v-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; *** HPLUV&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-make-hpluv-h-p-l][ct-make-hpluv]] &lt;del&gt;(H P L)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hpluv-c][ct-get-hpluv]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hpluv-p-c][ct-get-hpluv-p]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hpluv-l-c][ct-get-hpluv-l]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-get-hpluv-h-c][ct-get-hpluv-h]] &lt;del&gt;(C)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-c-transform][ct-edit-hpluv]] &lt;del&gt;(C TRANSFORM)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-h-c-func-or-val][ct-edit-hpluv-h]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-h-dec-c-optional-v][ct-edit-hpluv-h-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-h-inc-c-optional-v][ct-edit-hpluv-h-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-l-c-func-or-val][ct-edit-hpluv-l]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-l-dec-c-optional-v][ct-edit-hpluv-l-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-l-inc-c-optional-v][ct-edit-hpluv-l-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-p-c-func-or-val][ct-edit-hpluv-p]] &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-p-dec-c-optional-v][ct-edit-hpluv-p-dec]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;[[#ct-edit-hpluv-p-inc-c-optional-v][ct-edit-hpluv-p-inc]] &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; ** Color Properties Functions for seeing properties of colors not necessarily related to a particular color space. **** ct-contrast-ratio &lt;del&gt;(C1 C2)&lt;/del&gt; Get the contrast ratio between C1 and C2. #+BEGIN_src elisp (ct-contrast-ratio &#34;#bbbbbb&#34; &#34;#4fa5e8&#34;) ;; =&amp;gt; 1.3881996647056503 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/bbbbbb/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 1.3881996647056503 #+END_quote **** ct-distance &lt;del&gt;(C1 C2)&lt;/del&gt; Get cie-DE2000 distance between C1 and C2 -- value is 0-100. #+BEGIN_src elisp (ct-distance &#34;#4fa5e8&#34; &#34;#bc9a43&#34;) ;; =&amp;gt; 53.05461635462344 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]],[[https://via.placeholder.com/16/bc9a43/000000.png?text=+]] → 53.05461635462344 #+END_quote **** ct-format-argb &lt;del&gt;(C &amp;amp;optional OPACITY END)&lt;/del&gt; Argb formatting: Pass in C and OPACITY 0-100, get a string representation of C as follows: &#39;#AAFFFFFF&#39;, where AA is a hex pair for the alpha, followed by FF times 3 hex pairs for red, green, blue. If END is truthy, then format will be &#39;#FFFFFFAA&#39;. #+BEGIN_src elisp (ct-format-argb &#34;#4fa5e8&#34; 80 t) ;; =&amp;gt; &#34;#4fa5e8cc&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → #4fa5e8cc #+END_quote **** ct-format-rbga &lt;del&gt;(C &amp;amp;optional OPACITY)&lt;/del&gt; RGBA formatting: Pass in C and OPACITY 0-100, get a string representation of C as follows: &#39;rgba(R, G, B, OPACITY)&#39;, where values RGB are 0-255, and OPACITY is 0-1.0 (default 1.0). #+BEGIN_src elisp (ct-format-rbga &#34;#4fa5e8&#34; 80) ;; =&amp;gt; &#34;rgba(79, 165, 232, 0.8)&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → rgba(79, 165, 232, 0.8) #+END_quote **** ct-light-p &lt;del&gt;(C &amp;amp;optional SCALE)&lt;/del&gt; Determine if C is a light color with lightness in the LAB space. Optionally override SCALE comparison value. #+BEGIN_src elisp (ct-light-p &#34;#4fa5e8&#34;) ;; =&amp;gt; t #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → t #+END_quote ** Color Modification Functions for modifying colors in some way potentially unrelated to a specific colorspace **** ct-complement &lt;del&gt;(C)&lt;/del&gt; Return a complement color of C in the HSLUV space. #+BEGIN_src elisp (ct-complement &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#bc9a43&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/bc9a43/000000.png?text=+]] #+END_quote **** ct-gradient &lt;del&gt;(STEP START END &amp;amp;optional WITH-ENDS SPACE)&lt;/del&gt; Create a gradient from color START to color END in STEP parts. Optionally include START and END in results using WITH-ENDS. Optionally choose a colorspace with SPACE (see &#39;ct--colorspace-map&#39;). Hue-inclusive colorspaces may see mixed results. #+BEGIN_src elisp (ct-gradient 5 &#34;#4fa5e8&#34; &#34;#bc9a43&#34; t) ;; =&amp;gt; (&#34;#4fa5e8&#34; &#34;#6aa2be&#34; &#34;#859f95&#34; &#34;#a09c6c&#34; &#34;#bc9a43&#34;) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]],[[https://via.placeholder.com/16/bc9a43/000000.png?text=+]] → [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]],[[https://via.placeholder.com/16/6aa2be/000000.png?text=+]],[[https://via.placeholder.com/16/859f95/000000.png?text=+]],[[https://via.placeholder.com/16/a09c6c/000000.png?text=+]],[[https://via.placeholder.com/16/bc9a43/000000.png?text=+]] #+END_quote **** ct-greaten &lt;del&gt;(C &amp;amp;optional PERCENT)&lt;/del&gt; Make a light color C lighter, a dark color C darker (by PERCENT). #+BEGIN_src elisp (ct-greaten &#34;#4fa5e8&#34; 20) ;; =&amp;gt; &#34;#8ddbff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/8ddbff/000000.png?text=+]] #+END_quote **** ct-lessen &lt;del&gt;(C &amp;amp;optional PERCENT)&lt;/del&gt; Make a light color C darker, a dark color C lighter (by PERCENT). #+BEGIN_src elisp (ct-lessen &#34;#4fa5e8&#34; 20) ;; =&amp;gt; &#34;#0071af&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/0071af/000000.png?text=+]] #+END_quote **** ct-iterate &lt;del&gt;(START OP CONDITION)&lt;/del&gt; Do OP on START color until CONDITION is met or op has no effect. #+BEGIN_src elisp (ct-iterate &#34;#4fa5e8&#34; &#39;ct-edit-hsv-v-inc (lambda (c) (&amp;gt; (ct-distance c &#34;#4fa5e8&#34;) 10))) ;; =&amp;gt; &#34;#4f98ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4f98ff/000000.png?text=+]] #+END_quote **** ct-iterations &lt;del&gt;(START OP CONDITION)&lt;/del&gt; Do OP on START color until CONDITION is met or op has no effect - return all intermediate parts. #+BEGIN_src elisp (ct-iterations &#34;#4fa5e8&#34; &#39;ct-edit-hsv-v-inc (lambda (c) (&amp;gt; (ct-distance c &#34;#4fa5e8&#34;) 10))) ;; =&amp;gt; (&#34;#4fa5e8&#34; &#34;#4fa5e9&#34; &#34;#4fa5ea&#34; &#34;#4fa5eb&#34; &#34;#4fa5ec&#34; &#34;#4fa5ed&#34; &#34;#4fa5ee&#34; &#34;#4fa5ef&#34; &#34;#4fa5f0&#34; &#34;#4fa5f1&#34; &#34;#4fa5f2&#34; &#34;#4fa5f3&#34; &#34;#4fa5f4&#34; &#34;#4fa5f5&#34; &#34;#4fa5f6&#34; &#34;#4fa5f7&#34; &#34;#4fa5f8&#34; &#34;#4fa5f9&#34; &#34;#4fa5fa&#34; &#34;#4fa5fb&#34; &#34;#4fa5fc&#34; &#34;#4fa5fd&#34; &#34;#4fa5fe&#34; &#34;#4fa5ff&#34; &#34;#4fa4ff&#34; &#34;#4fa3ff&#34; &#34;#4fa2ff&#34; &#34;#4fa1ff&#34; &#34;#4fa0ff&#34; &#34;#4f9fff&#34; &#34;#4f9eff&#34; &#34;#4f9dff&#34; &#34;#4f9cff&#34; &#34;#4f9bff&#34; &#34;#4f9aff&#34; &#34;#4f99ff&#34; &#34;#4f98ff&#34;) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5e9/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5ea/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5eb/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5ec/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5ed/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5ee/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5ef/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f0/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f1/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f2/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f3/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f4/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f5/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f6/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f7/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f8/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5f9/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5fa/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5fb/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5fc/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5fd/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5fe/000000.png?text=+]],[[https://via.placeholder.com/16/4fa5ff/000000.png?text=+]],[[https://via.placeholder.com/16/4fa4ff/000000.png?text=+]],[[https://via.placeholder.com/16/4fa3ff/000000.png?text=+]],[[https://via.placeholder.com/16/4fa2ff/000000.png?text=+]],[[https://via.placeholder.com/16/4fa1ff/000000.png?text=+]],[[https://via.placeholder.com/16/4fa0ff/000000.png?text=+]],[[https://via.placeholder.com/16/4f9fff/000000.png?text=+]],[[https://via.placeholder.com/16/4f9eff/000000.png?text=+]],[[https://via.placeholder.com/16/4f9dff/000000.png?text=+]],[[https://via.placeholder.com/16/4f9cff/000000.png?text=+]],[[https://via.placeholder.com/16/4f9bff/000000.png?text=+]],[[https://via.placeholder.com/16/4f9aff/000000.png?text=+]],[[https://via.placeholder.com/16/4f99ff/000000.png?text=+]],[[https://via.placeholder.com/16/4f98ff/000000.png?text=+]] #+END_quote **** ct-lab-change-whitepoint &lt;del&gt;(C W1 W2)&lt;/del&gt; Convert a color C wrt white points W1 and W2 through the lab colorspace. #+BEGIN_src elisp (ct-lab-change-whitepoint &#34;#4fa5e8&#34; color-d50-xyz color-d55-xyz) ;; =&amp;gt; &#34;#29a6f4&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/29a6f4/000000.png?text=+]] #+END_quote **** ct-mix &lt;del&gt;(COLORS &amp;amp;optional SPACE)&lt;/del&gt; Mix COLORS in space SPACE. See also: &#39;ct--colorspace-map&#39;. #+BEGIN_src elisp (ct-mix (list &#34;#4fa5e8&#34; &#34;#bbbbbb&#34; &#34;#bc9a43&#34;)) ;; =&amp;gt; &#34;#a0a48a&#34; #+END_src #+BEGIN_quote → [[https://via.placeholder.com/16/a0a48a/000000.png?text=+]] #+END_quote **** ct-mix-opacity &lt;del&gt;(TOP BOTTOM OPACITY)&lt;/del&gt; Get resulting color of TOP color with OPACITY overlayed against BOTTOM. Opacity is expected to be 0.0-1.0. #+BEGIN_src elisp (ct-mix-opacity &#34;#4fa5e8&#34; &#34;#bbbbbb&#34; 80) ;; =&amp;gt; &#34;#0000ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]],[[https://via.placeholder.com/16/bbbbbb/000000.png?text=+]] → [[https://via.placeholder.com/16/0000ff/000000.png?text=+]] #+END_quote **** ct-pastel &lt;del&gt;(C &amp;amp;optional SMOD VMOD)&lt;/del&gt; Make a color C more &#39;pastel&#39; in the hsluv space -- optionally change the rate of change with SMOD and VMOD. #+BEGIN_src elisp (ct-pastel &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#77a2c4&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/77a2c4/000000.png?text=+]] #+END_quote **** ct-tint-ratio &lt;del&gt;(FOREGROUND BACKGROUND RATIO)&lt;/del&gt; Tint a FOREGROUND against BACKGROUND until contrast RATIO minimum is reached. #+BEGIN_src elisp (ct-tint-ratio &#34;#4fa5e8&#34; &#34;#bbbbbb&#34; 3) ;; =&amp;gt; &#34;#1369ac&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]],[[https://via.placeholder.com/16/bbbbbb/000000.png?text=+]] → [[https://via.placeholder.com/16/1369ac/000000.png?text=+]] #+END_quote **** ct-rotation-hpluv &lt;del&gt;(C INTERVAL)&lt;/del&gt; Perform a hue rotation in hpluv space starting with color C by INTERVAL degrees. #+BEGIN_src elisp (ct-rotation-hpluv &#34;#4fa5e8&#34; 60) ;; =&amp;gt; (&#34;#72a2d2&#34; &#34;#c48acb&#34; &#34;#d78895&#34; &#34;#b89a59&#34; &#34;#74ac68&#34; &#34;#03b1a7&#34;) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/72a2d2/000000.png?text=+]],[[https://via.placeholder.com/16/c48acb/000000.png?text=+]],[[https://via.placeholder.com/16/d78895/000000.png?text=+]],[[https://via.placeholder.com/16/b89a59/000000.png?text=+]],[[https://via.placeholder.com/16/74ac68/000000.png?text=+]],[[https://via.placeholder.com/16/03b1a7/000000.png?text=+]] #+END_quote **** ct-rotation-hsl &lt;del&gt;(C INTERVAL)&lt;/del&gt; Perform a hue rotation in hsl space starting with color C by INTERVAL degrees. #+BEGIN_src elisp (ct-rotation-hsl &#34;#4fa5e8&#34; 60) ;; =&amp;gt; (&#34;#4fa4e8&#34; &#34;#914fe8&#34; &#34;#e84fa4&#34; &#34;#e8914f&#34; &#34;#a5e84f&#34; &#34;#4fe892&#34;) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4fa4e8/000000.png?text=+]],[[https://via.placeholder.com/16/914fe8/000000.png?text=+]],[[https://via.placeholder.com/16/e84fa4/000000.png?text=+]],[[https://via.placeholder.com/16/e8914f/000000.png?text=+]],[[https://via.placeholder.com/16/a5e84f/000000.png?text=+]],[[https://via.placeholder.com/16/4fe892/000000.png?text=+]] #+END_quote **** ct-rotation-hsluv &lt;del&gt;(C INTERVAL)&lt;/del&gt; Perform a hue rotation in hsluv space starting with color C by INTERVAL degrees. #+BEGIN_src elisp (ct-rotation-hsluv &#34;#4fa5e8&#34; 60) ;; =&amp;gt; (&#34;#4ea5e7&#34; &#34;#e173ec&#34; &#34;#f0798f&#34; &#34;#bc9a43&#34; &#34;#5cb143&#34; &#34;#48ada5&#34;) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4ea5e7/000000.png?text=+]],[[https://via.placeholder.com/16/e173ec/000000.png?text=+]],[[https://via.placeholder.com/16/f0798f/000000.png?text=+]],[[https://via.placeholder.com/16/bc9a43/000000.png?text=+]],[[https://via.placeholder.com/16/5cb143/000000.png?text=+]],[[https://via.placeholder.com/16/48ada5/000000.png?text=+]] #+END_quote **** ct-rotation-hsv &lt;del&gt;(C INTERVAL)&lt;/del&gt; Perform a hue rotation in hsv space starting with color C by INTERVAL degrees. #+BEGIN_src elisp (ct-rotation-hsv &#34;#4fa5e8&#34; 60) ;; =&amp;gt; (&#34;#4ea5e8&#34; &#34;#914ee8&#34; &#34;#e84ea5&#34; &#34;#e8924e&#34; &#34;#a5e84e&#34; &#34;#4ee892&#34;) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4ea5e8/000000.png?text=+]],[[https://via.placeholder.com/16/914ee8/000000.png?text=+]],[[https://via.placeholder.com/16/e84ea5/000000.png?text=+]],[[https://via.placeholder.com/16/e8924e/000000.png?text=+]],[[https://via.placeholder.com/16/a5e84e/000000.png?text=+]],[[https://via.placeholder.com/16/4ee892/000000.png?text=+]] #+END_quote **** ct-rotation-lch &lt;del&gt;(C INTERVAL)&lt;/del&gt; Perform a hue rotation in lch space starting with color C by INTERVAL degrees. #+BEGIN_src elisp (ct-rotation-lch &#34;#4fa5e8&#34; 60) ;; =&amp;gt; (&#34;#4fa4e8&#34; &#34;#c48acc&#34; &#34;#e58183&#34; &#34;#bd9953&#34; &#34;#6dad6f&#34; &#34;#00b1ba&#34;) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4fa4e8/000000.png?text=+]],[[https://via.placeholder.com/16/c48acc/000000.png?text=+]],[[https://via.placeholder.com/16/e58183/000000.png?text=+]],[[https://via.placeholder.com/16/bd9953/000000.png?text=+]],[[https://via.placeholder.com/16/6dad6f/000000.png?text=+]],[[https://via.placeholder.com/16/00b1ba/000000.png?text=+]] #+END_quote ** RGB &lt;a href=&#34;https://notes.neeasade.net/color-spaces.html#h-99356355-d54c-41d8-bc1a-6e14e29f42c8&#34;&gt;https://notes.neeasade.net/color-spaces.html#h-99356355-d54c-41d8-bc1a-6e14e29f42c8&lt;/a&gt; **** ct-make-rgb &lt;del&gt;(R G B)&lt;/del&gt; Make a color using R&lt;em&gt;G&lt;/em&gt;B properties. #+BEGIN_src elisp (ct-make-rgb 30.980392156862745 64.70588235294117 90.98039215686275) ;; =&amp;gt; &#34;#4fa4e8&#34; #+END_src #+BEGIN_quote → [[https://via.placeholder.com/16/4fa4e8/000000.png?text=+]] #+END_quote **** ct-get-rgb &lt;del&gt;(C)&lt;/del&gt; Get rgb representation of color C. #+BEGIN_src elisp (ct-get-rgb &#34;#4fa5e8&#34;) ;; =&amp;gt; (30.980392156862745 64.70588235294117 90.98039215686275) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → (30.980392156862745 64.70588235294117 90.98039215686275) #+END_quote **** ct-get-rgb-r &lt;del&gt;(C)&lt;/del&gt; Get rgb-r representation of color C. #+BEGIN_src elisp (ct-get-rgb-r &#34;#4fa5e8&#34;) ;; =&amp;gt; 30.980392156862745 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 30.980392156862745 #+END_quote **** ct-get-rgb-g &lt;del&gt;(C)&lt;/del&gt; Get rgb-g representation of color C. #+BEGIN_src elisp (ct-get-rgb-g &#34;#4fa5e8&#34;) ;; =&amp;gt; 64.70588235294117 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 64.70588235294117 #+END_quote **** ct-get-rgb-b &lt;del&gt;(C)&lt;/del&gt; Get rgb-b representation of color C. #+BEGIN_src elisp (ct-get-rgb-b &#34;#4fa5e8&#34;) ;; =&amp;gt; 90.98039215686275 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 90.98039215686275 #+END_quote **** ct-edit-rgb &lt;del&gt;(C TRANSFORM)&lt;/del&gt; Work with a color C in the RGB space using function TRANSFORM. Ranges for RGB are all 0-100. #+BEGIN_src elisp (ct-edit-rgb &#34;#4fa5e8&#34; (lambda (R G B) (list R 0 0))) ;; =&amp;gt; &#34;#4f0000&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4f0000/000000.png?text=+]] #+END_quote **** ct-edit-rgb-b &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property rgb-b of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-rgb-b &#34;#4fa5e8&#34; (lambda (b) (+ b 50))) ;; =&amp;gt; &#34;#4fa4ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4fa4ff/000000.png?text=+]] #+END_quote **** ct-edit-rgb-b-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease rgb-b value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-rgb-b-dec &#34;#bbbbbb&#34; 10) ;; =&amp;gt; &#34;#bbbba1&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/bbbbbb/000000.png?text=+]] → [[https://via.placeholder.com/16/bbbba1/000000.png?text=+]] #+END_quote **** ct-edit-rgb-b-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase rgb-b value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-rgb-b-inc &#34;#bbbbbb&#34;) ;; =&amp;gt; &#34;#bbbbbc&#34; #+END_src **** ct-edit-rgb-g &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property rgb-g of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-rgb-g &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#4fffe8&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4fffe8/000000.png?text=+]] #+END_quote **** ct-edit-rgb-g-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease rgb-g value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-rgb-g-dec &#34;#bbbbbb&#34; 10) ;; =&amp;gt; &#34;#bba1bb&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/bbbbbb/000000.png?text=+]] → [[https://via.placeholder.com/16/bba1bb/000000.png?text=+]] #+END_quote **** ct-edit-rgb-g-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase rgb-g value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-rgb-g-inc &#34;#bbbbbb&#34;) ;; =&amp;gt; &#34;#bbbcbb&#34; #+END_src **** ct-edit-rgb-r &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property rgb-r of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-rgb-r &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#ffa4e8&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/ffa4e8/000000.png?text=+]] #+END_quote **** ct-edit-rgb-r-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease rgb-r value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-rgb-r-dec &#34;#bbbbbb&#34; 10) ;; =&amp;gt; &#34;#a1bbbb&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/bbbbbb/000000.png?text=+]] → [[https://via.placeholder.com/16/a1bbbb/000000.png?text=+]] #+END_quote **** ct-edit-rgb-r-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase rgb-r value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-rgb-r-inc &#34;#bbbbbb&#34;) ;; =&amp;gt; &#34;#bcbbbb&#34; #+END_src ** LAB &lt;a href=&#34;https://notes.neeasade.net/color-spaces.html#h-9d5a1a9a-75d3-48f5-bf00-85332d9b023e&#34;&gt;https://notes.neeasade.net/color-spaces.html#h-9d5a1a9a-75d3-48f5-bf00-85332d9b023e&lt;/a&gt; **** ct-make-lab &lt;del&gt;(L A B)&lt;/del&gt; Make a color using L&lt;em&gt;A&lt;/em&gt;B properties. #+BEGIN_src elisp (ct-make-lab 65.27524119433272 -5.264411618969234 -41.33308089969405) ;; =&amp;gt; &#34;#4fa4e8&#34; #+END_src #+BEGIN_quote → [[https://via.placeholder.com/16/4fa4e8/000000.png?text=+]] #+END_quote **** ct-get-lab &lt;del&gt;(C)&lt;/del&gt; Get lab representation of color C. #+BEGIN_src elisp (ct-get-lab &#34;#4fa5e8&#34;) ;; =&amp;gt; (65.27524119433272 -5.264411618969234 -41.33308089969405) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → (65.27524119433272 -5.264411618969234 -41.33308089969405) #+END_quote **** ct-get-lab-l &lt;del&gt;(C)&lt;/del&gt; Get lab-l representation of color C. #+BEGIN_src elisp (ct-get-lab-l &#34;#4fa5e8&#34;) ;; =&amp;gt; 65.27524119433272 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 65.27524119433272 #+END_quote **** ct-get-lab-b &lt;del&gt;(C)&lt;/del&gt; Get lab-b representation of color C. #+BEGIN_src elisp (ct-get-lab-b &#34;#4fa5e8&#34;) ;; =&amp;gt; -41.33308089969405 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → -41.33308089969405 #+END_quote **** ct-get-lab-a &lt;del&gt;(C)&lt;/del&gt; Get lab-a representation of color C. #+BEGIN_src elisp (ct-get-lab-a &#34;#4fa5e8&#34;) ;; =&amp;gt; -5.264411618969234 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → -5.264411618969234 #+END_quote **** ct-edit-lab &lt;del&gt;(C TRANSFORM)&lt;/del&gt; Work with a color C in the LAB space using function TRANSFORM. Ranges for LAB are {0-100,-100-100,-100-100}. #+BEGIN_src elisp (ct-edit-lab &#34;#4fa5e8&#34; (lambda (L A B) (list L -100 -100))) ;; =&amp;gt; &#34;#00ccff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/00ccff/000000.png?text=+]] #+END_quote **** ct-edit-lab-a &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property lab-a of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-lab-a &#34;#4fa5e8&#34; (lambda (a) (- a 20))) ;; =&amp;gt; &#34;#00aee7&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/00aee7/000000.png?text=+]] #+END_quote **** ct-edit-lab-a-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease lab-a value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lab-a-dec &#34;#4fa5e8&#34; 20) ;; =&amp;gt; &#34;#00aee7&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/00aee7/000000.png?text=+]] #+END_quote **** ct-edit-lab-a-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase lab-a value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lab-a-inc &#34;#4fa5e8&#34; 20) ;; =&amp;gt; &#34;#8c99e8&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/8c99e8/000000.png?text=+]] #+END_quote **** ct-edit-lab-b &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property lab-b of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-lab-b &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#b79e00&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/b79e00/000000.png?text=+]] #+END_quote **** ct-edit-lab-b-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease lab-b value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lab-b-dec &#34;#4fa5e8&#34; 20) ;; =&amp;gt; &#34;#00a7ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/00a7ff/000000.png?text=+]] #+END_quote **** ct-edit-lab-b-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase lab-b value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lab-b-inc &#34;#4fa5e8&#34; 20) ;; =&amp;gt; &#34;#7aa3c4&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/7aa3c4/000000.png?text=+]] #+END_quote **** ct-edit-lab-l &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property lab-l of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-lab-l &#34;#4fa5e8&#34; 0) ;; =&amp;gt; &#34;#000a3d&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/000a3d/000000.png?text=+]] #+END_quote **** ct-edit-lab-l-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease lab-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lab-l-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea4e7&#34; #+END_src **** ct-edit-lab-l-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase lab-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lab-l-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#50a5e8&#34; #+END_src ** HSL &lt;a href=&#34;https://notes.neeasade.net/color-spaces.html#h-43869bc7-a7d1-410f-9341-521974751dac&#34;&gt;https://notes.neeasade.net/color-spaces.html#h-43869bc7-a7d1-410f-9341-521974751dac&lt;/a&gt; **** ct-make-hsl &lt;del&gt;(H S L)&lt;/del&gt; Make a color using H&lt;em&gt;S&lt;/em&gt;L properties. #+BEGIN_src elisp (ct-make-hsl 206.27450980392157 76.88442211055275 60.98039215686275) ;; =&amp;gt; &#34;#4fa4e8&#34; #+END_src #+BEGIN_quote → [[https://via.placeholder.com/16/4fa4e8/000000.png?text=+]] #+END_quote **** ct-get-hsl &lt;del&gt;(C)&lt;/del&gt; Get hsl representation of color C. #+BEGIN_src elisp (ct-get-hsl &#34;#4fa5e8&#34;) ;; =&amp;gt; (206.27450980392157 76.88442211055275 60.98039215686275) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → (206.27450980392157 76.88442211055275 60.98039215686275) #+END_quote **** ct-get-hsl-s &lt;del&gt;(C)&lt;/del&gt; Get hsl-s representation of color C. #+BEGIN_src elisp (ct-get-hsl-s &#34;#4fa5e8&#34;) ;; =&amp;gt; 76.88442211055275 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 76.88442211055275 #+END_quote **** ct-get-hsl-l &lt;del&gt;(C)&lt;/del&gt; Get hsl-l representation of color C. #+BEGIN_src elisp (ct-get-hsl-l &#34;#4fa5e8&#34;) ;; =&amp;gt; 60.98039215686275 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 60.98039215686275 #+END_quote **** ct-get-hsl-h &lt;del&gt;(C)&lt;/del&gt; Get hsl-h representation of color C. #+BEGIN_src elisp (ct-get-hsl-h &#34;#4fa5e8&#34;) ;; =&amp;gt; 206.27450980392157 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 206.27450980392157 #+END_quote **** ct-edit-hsl &lt;del&gt;(C TRANSFORM)&lt;/del&gt; Work with a color C in the HSL space using function TRANSFORM. Ranges for HSL are {0-360,0-100,0-100}. #+BEGIN_src elisp (ct-edit-hsl &#34;#4fa5e8&#34; (lambda (H S L) (list (+ H 60) 100 L))) ;; =&amp;gt; &#34;#8f38ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/8f38ff/000000.png?text=+]] #+END_quote **** ct-edit-hsl-h &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hsl-h of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hsl-h &#34;#4fa5e8&#34; (lambda (H) (+ H 60))) ;; =&amp;gt; &#34;#914fe8&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/914fe8/000000.png?text=+]] #+END_quote **** ct-edit-hsl-h-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hsl-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsl-h-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4fa6e8&#34; #+END_src **** ct-edit-hsl-h-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hsl-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsl-h-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4fa4e8&#34; #+END_src **** ct-edit-hsl-l &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hsl-l of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hsl-l &#34;#4fa5e8&#34; 0) ;; =&amp;gt; &#34;#000000&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/000000/000000.png?text=+]] #+END_quote **** ct-edit-hsl-l-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hsl-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsl-l-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea4e7&#34; #+END_src **** ct-edit-hsl-l-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hsl-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsl-l-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#50a5e8&#34; #+END_src **** ct-edit-hsl-s &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hsl-s of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hsl-s &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#38a7ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/38a7ff/000000.png?text=+]] #+END_quote **** ct-edit-hsl-s-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hsl-s value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsl-s-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4fa4e7&#34; #+END_src **** ct-edit-hsl-s-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hsl-s value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsl-s-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea5e8&#34; #+END_src ** HSLuv &lt;a href=&#34;https://notes.neeasade.net/color-spaces.html#h-c147b84d-d95b-4d2d-8426-2f96529a8428&#34;&gt;https://notes.neeasade.net/color-spaces.html#h-c147b84d-d95b-4d2d-8426-2f96529a8428&lt;/a&gt; **** ct-make-hsluv &lt;del&gt;(H S L)&lt;/del&gt; Make a color using H&lt;em&gt;S&lt;/em&gt;L&lt;em&gt;uv properties. #+BEGIN_src elisp (ct-make-hsluv 242.63535329133538 81.00935604214261 65.27665592005344) ;; =&amp;gt; &#34;#4ea5e7&#34; #+END_src #+BEGIN_quote → [[https://via.placeholder.com/16/4ea5e7/000000.png?text=+]] #+END_quote **** ct-get-hsluv &lt;del&gt;(C)&lt;/del&gt; Get hsluv representation of color C. #+BEGIN_src elisp (ct-get-hsluv &#34;#4fa5e8&#34;) ;; =&amp;gt; (242.63535329133538 81.00935604214261 65.27665592005344) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → (242.63535329133538 81.00935604214261 65.27665592005344) #+END_quote **** ct-get-hsluv-s &lt;del&gt;(C)&lt;/del&gt; Get hsluv-s representation of color C. #+BEGIN_src elisp (ct-get-hsluv-s &#34;#4fa5e8&#34;) ;; =&amp;gt; 81.00935604214261 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 81.00935604214261 #+END_quote **** ct-get-hsluv-l &lt;del&gt;(C)&lt;/del&gt; Get hsluv-l representation of color C. #+BEGIN_src elisp (ct-get-hsluv-l &#34;#4fa5e8&#34;) ;; =&amp;gt; 65.27665592005344 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 65.27665592005344 #+END_quote **** ct-get-hsluv-h &lt;del&gt;(C)&lt;/del&gt; Get hsluv-h representation of color C. #+BEGIN_src elisp (ct-get-hsluv-h &#34;#4fa5e8&#34;) ;; =&amp;gt; 242.63535329133538 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 242.63535329133538 #+END_quote **** ct-edit-hsluv &lt;del&gt;(C TRANSFORM)&lt;/del&gt; Work with a color C in the HSLUV space using function TRANSFORM. Ranges for HSLUV are {0-360,0-100,0-100}. #+BEGIN_src elisp (ct-edit-hsluv &#34;#4fa5e8&#34; (lambda (H S L) (list (+ H 60) 100 L))) ;; =&amp;gt; &#34;#f160ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/f160ff/000000.png?text=+]] #+END_quote **** ct-edit-hsluv-h &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hsluv-h of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hsluv-h &#34;#4fa5e8&#34; (lambda (H) (+ H 60))) ;; =&amp;gt; &#34;#e173ec&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/e173ec/000000.png?text=+]] #+END_quote **** ct-edit-hsluv-h-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hsluv-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsluv-h-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea5e7&#34; #+END_src **** ct-edit-hsluv-h-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hsluv-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsluv-h-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4fa4e8&#34; #+END_src **** ct-edit-hsluv-l &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hsluv-l of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hsluv-l &#34;#4fa5e8&#34; 0) ;; =&amp;gt; &#34;#000000&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/000000/000000.png?text=+]] #+END_quote **** ct-edit-hsluv-l-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hsluv-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsluv-l-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea4e7&#34; #+END_src **** ct-edit-hsluv-l-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hsluv-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsluv-l-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4fa5e9&#34; #+END_src **** ct-edit-hsluv-s &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hsluv-s of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hsluv-s &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#00a6f8&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/00a6f8/000000.png?text=+]] #+END_quote **** ct-edit-hsluv-s-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hsluv-s value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsluv-s-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4fa4e7&#34; #+END_src **** ct-edit-hsluv-s-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hsluv-s value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsluv-s-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea5e8&#34; #+END_src ** LCH &lt;a href=&#34;https://notes.neeasade.net/color-spaces.html#h-c4f93e1f-4fa6-4ebc-99c1-18b6de0ef413&#34;&gt;https://notes.neeasade.net/color-spaces.html#h-c4f93e1f-4fa6-4ebc-99c1-18b6de0ef413&lt;/a&gt; **** ct-make-lch &lt;del&gt;(L C H)&lt;/del&gt; Make a color using L&lt;/em&gt;C&lt;em&gt;H properties. #+BEGIN_src elisp (ct-make-lch 65.27524119433272 41.666984608375394 -97.25842954163491) ;; =&amp;gt; &#34;#4fa4e8&#34; #+END_src #+BEGIN_quote → [[https://via.placeholder.com/16/4fa4e8/000000.png?text=+]] #+END_quote **** ct-get-lch &lt;del&gt;(C)&lt;/del&gt; Get lch representation of color C. #+BEGIN_src elisp (ct-get-lch &#34;#4fa5e8&#34;) ;; =&amp;gt; (65.27524119433272 41.666984608375394 -97.25842954163491) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → (65.27524119433272 41.666984608375394 -97.25842954163491) #+END_quote **** ct-get-lch-l &lt;del&gt;(C)&lt;/del&gt; Get lch-l representation of color C. #+BEGIN_src elisp (ct-get-lch-l &#34;#4fa5e8&#34;) ;; =&amp;gt; 65.27524119433272 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 65.27524119433272 #+END_quote **** ct-get-lch-h &lt;del&gt;(C)&lt;/del&gt; Get lch-h representation of color C. #+BEGIN_src elisp (ct-get-lch-h &#34;#4fa5e8&#34;) ;; =&amp;gt; -97.25842954163491 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → -97.25842954163491 #+END_quote **** ct-get-lch-c &lt;del&gt;(C)&lt;/del&gt; Get lch-c representation of color C. #+BEGIN_src elisp (ct-get-lch-c &#34;#4fa5e8&#34;) ;; =&amp;gt; 41.666984608375394 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 41.666984608375394 #+END_quote **** ct-edit-lch &lt;del&gt;(C TRANSFORM)&lt;/del&gt; Work with a color C in the LCH space using function TRANSFORM. Ranges for LCH are {0-100,0-100,0-360}. #+BEGIN_src elisp (ct-edit-lch &#34;#4fa5e8&#34; (lambda (L C H) (list L 100 (+ H 90)))) ;; =&amp;gt; &#34;#ff00b8&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/ff00b8/000000.png?text=+]] #+END_quote **** ct-edit-lch-c &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property lch-c of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-lch-c &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#00b0ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/00b0ff/000000.png?text=+]] #+END_quote **** ct-edit-lch-c-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease lch-c value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lch-c-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4fa4e7&#34; #+END_src **** ct-edit-lch-c-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase lch-c value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lch-c-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea5e8&#34; #+END_src **** ct-edit-lch-h &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property lch-h of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-lch-h &#34;#4fa5e8&#34; (lambda (H) (+ H 90))) ;; =&amp;gt; &#34;#df81a9&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/df81a9/000000.png?text=+]] #+END_quote **** ct-edit-lch-h-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease lch-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lch-h-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea5e7&#34; #+END_src **** ct-edit-lch-h-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase lch-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lch-h-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4fa4e8&#34; #+END_src **** ct-edit-lch-l &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property lch-l of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-lch-l &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#baffff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/baffff/000000.png?text=+]] #+END_quote **** ct-edit-lch-l-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease lch-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lch-l-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea4e7&#34; #+END_src **** ct-edit-lch-l-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase lch-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-lch-l-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#50a5e8&#34; #+END_src ** HSV &lt;a href=&#34;https://en.wikipedia.org/wiki/HSL_and_HSV&#34;&gt;https://en.wikipedia.org/wiki/HSL_and_HSV&lt;/a&gt; **** ct-make-hsv &lt;del&gt;(H S V)&lt;/del&gt; Make a color using H&lt;/em&gt;S&lt;em&gt;V properties. #+BEGIN_src elisp (ct-make-hsv 206.27450980392157 65.94827586206897 90.98039215686275) ;; =&amp;gt; &#34;#4ea5e8&#34; #+END_src #+BEGIN_quote → [[https://via.placeholder.com/16/4ea5e8/000000.png?text=+]] #+END_quote **** ct-get-hsv &lt;del&gt;(C)&lt;/del&gt; Get hsv representation of color C. #+BEGIN_src elisp (ct-get-hsv &#34;#4fa5e8&#34;) ;; =&amp;gt; (206.27450980392157 65.94827586206897 90.98039215686275) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → (206.27450980392157 65.94827586206897 90.98039215686275) #+END_quote **** ct-get-hsv-v &lt;del&gt;(C)&lt;/del&gt; Get hsv-v representation of color C. #+BEGIN_src elisp (ct-get-hsv-v &#34;#4fa5e8&#34;) ;; =&amp;gt; 90.98039215686275 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 90.98039215686275 #+END_quote **** ct-get-hsv-s &lt;del&gt;(C)&lt;/del&gt; Get hsv-s representation of color C. #+BEGIN_src elisp (ct-get-hsv-s &#34;#4fa5e8&#34;) ;; =&amp;gt; 65.94827586206897 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 65.94827586206897 #+END_quote **** ct-get-hsv-h &lt;del&gt;(C)&lt;/del&gt; Get hsv-h representation of color C. #+BEGIN_src elisp (ct-get-hsv-h &#34;#4fa5e8&#34;) ;; =&amp;gt; 206.27450980392157 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 206.27450980392157 #+END_quote **** ct-edit-hsv &lt;del&gt;(C TRANSFORM)&lt;/del&gt; Work with a color C in the HSV space using function TRANSFORM. Ranges for HSV are {0-360,0-100,0-100}. #+BEGIN_src elisp (ct-edit-hsv &#34;#4fa5e8&#34; (lambda (H S V) (list H 20 100))) ;; =&amp;gt; &#34;#cce8ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/cce8ff/000000.png?text=+]] #+END_quote **** ct-edit-hsv-h &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hsv-h of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hsv-h &#34;#4fa5e8&#34; (-partial #&#39;+ 30)) ;; =&amp;gt; &#34;#4e58e8&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/4e58e8/000000.png?text=+]] #+END_quote **** ct-edit-hsv-h-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hsv-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsv-h-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea5e8&#34; #+END_src **** ct-edit-hsv-h-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hsv-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsv-h-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea4e8&#34; #+END_src **** ct-edit-hsv-s &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hsv-s of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hsv-s &#34;#4fa5e8&#34; 20) ;; =&amp;gt; &#34;#b9d3e8&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/b9d3e8/000000.png?text=+]] #+END_quote **** ct-edit-hsv-s-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hsv-s value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsv-s-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#50a5e8&#34; #+END_src **** ct-edit-hsv-s-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hsv-s value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsv-s-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea4e8&#34; #+END_src **** ct-edit-hsv-v &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hsv-v of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hsv-v &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#56b5ff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/56b5ff/000000.png?text=+]] #+END_quote **** ct-edit-hsv-v-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hsv-v value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsv-v-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4ea4e7&#34; #+END_src **** ct-edit-hsv-v-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hsv-v value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hsv-v-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#4fa5e9&#34; #+END_src ** HPLUV &lt;a href=&#34;https://ajalt.github.io/colormath/api/colormath/com.github.ajalt.colormath.model/-h-p-luv/index.html&#34;&gt;https://ajalt.github.io/colormath/api/colormath/com.github.ajalt.colormath.model/-h-p-luv/index.html&lt;/a&gt; **** ct-make-hpluv &lt;del&gt;(H P L)&lt;/del&gt; Make a color using H&lt;/em&gt;P&lt;em&gt;L&lt;/em&gt;uv properties. #+BEGIN_src elisp (ct-make-hpluv 242.63535329133538 143.13047428079187 65.27665592005344) ;; =&amp;gt; &#34;#72a2d2&#34; #+END_src #+BEGIN_quote → [[https://via.placeholder.com/16/72a2d2/000000.png?text=+]] #+END_quote **** ct-get-hpluv &lt;del&gt;(C)&lt;/del&gt; Get hpluv representation of color C. #+BEGIN_src elisp (ct-get-hpluv &#34;#4fa5e8&#34;) ;; =&amp;gt; (242.63535329133538 143.13047428079187 65.27665592005344) #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → (242.63535329133538 143.13047428079187 65.27665592005344) #+END_quote **** ct-get-hpluv-p &lt;del&gt;(C)&lt;/del&gt; Get hpluv-p representation of color C. #+BEGIN_src elisp (ct-get-hpluv-p &#34;#4fa5e8&#34;) ;; =&amp;gt; 143.13047428079187 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 143.13047428079187 #+END_quote **** ct-get-hpluv-l &lt;del&gt;(C)&lt;/del&gt; Get hpluv-l representation of color C. #+BEGIN_src elisp (ct-get-hpluv-l &#34;#4fa5e8&#34;) ;; =&amp;gt; 65.27665592005344 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 65.27665592005344 #+END_quote **** ct-get-hpluv-h &lt;del&gt;(C)&lt;/del&gt; Get hpluv-h representation of color C. #+BEGIN_src elisp (ct-get-hpluv-h &#34;#4fa5e8&#34;) ;; =&amp;gt; 242.63535329133538 #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → 242.63535329133538 #+END_quote **** ct-edit-hpluv &lt;del&gt;(C TRANSFORM)&lt;/del&gt; Work with a color C in the HPLUV space using function TRANSFORM. Ranges for HPLUV are {0-360,0-100,0-100}. #+BEGIN_src elisp (ct-edit-hpluv &#34;#4fa5e8&#34; (lambda (H P L) (list H 100 L))) ;; =&amp;gt; &#34;#72a2d2&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/72a2d2/000000.png?text=+]] #+END_quote **** ct-edit-hpluv-h &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hpluv-h of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hpluv-h &#34;#4fa5e8&#34; 0) ;; =&amp;gt; &#34;#d78798&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/d78798/000000.png?text=+]] #+END_quote **** ct-edit-hpluv-h-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hpluv-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hpluv-h-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#71a2d2&#34; #+END_src **** ct-edit-hpluv-h-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hpluv-h value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hpluv-h-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#72a2d2&#34; #+END_src **** ct-edit-hpluv-l &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hpluv-l of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hpluv-l &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#feffff&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/feffff/000000.png?text=+]] #+END_quote **** ct-edit-hpluv-l-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hpluv-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hpluv-l-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#71a2d2&#34; #+END_src **** ct-edit-hpluv-l-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hpluv-l value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hpluv-l-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#72a3d3&#34; #+END_src **** ct-edit-hpluv-p &lt;del&gt;(C FUNC-OR-VAL)&lt;/del&gt; Transform property hpluv-p of C using FUNC-OR-VAL. #+BEGIN_src elisp (ct-edit-hpluv-p &#34;#4fa5e8&#34; 100) ;; =&amp;gt; &#34;#72a2d2&#34; #+END_src #+BEGIN_quote [[https://via.placeholder.com/16/4fa5e8/000000.png?text=+]] → [[https://via.placeholder.com/16/72a2d2/000000.png?text=+]] #+END_quote **** ct-edit-hpluv-p-dec &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Decrease hpluv-p value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hpluv-p-dec &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#72a2d2&#34; #+END_src **** ct-edit-hpluv-p-inc &lt;del&gt;(C &amp;amp;optional V)&lt;/del&gt; Increase hpluv-p value of C by V (defaults to the minimum amount needed to change C). #+BEGIN_src elisp (ct-edit-hpluv-p-inc &#34;#4fa5e8&#34;) ;; =&amp;gt; &#34;#72a2d2&#34; #+END_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Gotchas&lt;/p&gt; &#xA;&lt;p&gt;Some colors as defined in color spaces may not be represented in the RGB space (and vice versa). The edit functions clamp values going out. One example is the narrowly scoped &lt;del&gt;hpluv&lt;/del&gt; space:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (ct-get-hpluv &#34;#dd00cc&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; That p value is way out of range! ;; =&amp;gt; (314.3830496716472 282.01497572464575 51.53528501195089)&lt;/p&gt; &#xA;&lt;p&gt;;; notice we ask for the same color back, but the transform functions clamp the output to maximum HPL values: (ct-edit-hpluv &#34;#dd00cc&#34; &#39;list)&lt;/p&gt; &#xA;&lt;p&gt;;; =&amp;gt; &#34;#9f6898&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Testing&lt;/p&gt; &#xA;&lt;p&gt;Right now testing happens by using the &lt;code&gt;ct-make-*&lt;/code&gt; functions(these use the transform functions, which make up the basis for all the color space functions) against:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://css.land/lch/&#34;&gt;https://css.land/lch/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://colorizer.org/&#34;&gt;http://colorizer.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Related links&lt;/p&gt; &#xA;&lt;p&gt;Emacs color libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/color.el&#34;&gt;https://github.com/emacs-mirror/emacs/blob/master/lisp/color.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacsfodder/kurecolor&#34;&gt;https://github.com/emacsfodder/kurecolor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yurikhan/yk-color&#34;&gt;https://github.com/yurikhan/yk-color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hsluv/hsluv-emacs&#34;&gt;https://github.com/hsluv/hsluv-emacs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;General color knowledge:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://colorizer.org/&#34;&gt;http://colorizer.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://peteroupc.github.io/colorgen.html&#34;&gt;https://peteroupc.github.io/colorgen.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/WCAG20/#relativeluminancedef&#34;&gt;https://www.w3.org/TR/WCAG20/#relativeluminancedef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CIELAB_color_space&#34;&gt;https://en.wikipedia.org/wiki/CIELAB_color_space&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tkf/emacs-request</title>
    <updated>2022-06-13T01:51:58Z</updated>
    <id>tag:github.com,2022-06-13:/tkf/emacs-request</id>
    <link href="https://github.com/tkf/emacs-request" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Request.el -- Easy HTTP request for Emacs Lisp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|build-status| |melpa-badge| |melpa-stable-badge|&lt;/p&gt; &#xA;&lt;h1&gt;==================================== request.el -- an elisp HTTP library&lt;/h1&gt; &#xA;&lt;p&gt;Uses &lt;code&gt;curl&lt;/code&gt; as its backend or Emacs&#39;s native &lt;code&gt;url.el&lt;/code&gt; library if &lt;code&gt;curl&lt;/code&gt; is not found.&lt;/p&gt; &#xA;&lt;p&gt;The default encoding for requests is &lt;code&gt;utf-8&lt;/code&gt;. Please explicitly specify &lt;code&gt;:encoding &#39;binary&lt;/code&gt; for binary data.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;As described in &lt;code&gt;Getting started&lt;/code&gt;_, ensure melpa&#39;s whereabouts in &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt;::&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;&lt;a href=&#34;https://melpa.org/packages/&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&#34;))&lt;/p&gt; &#xA;&lt;p&gt;Then&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;M-x package-refresh-contents RET M-x package-install RET request RET&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, directly clone this repo and &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;GET:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/get&#34;&gt;http://httpbin.org/get&lt;/a&gt;&#34; :params &#39;((&#34;key&#34; . &#34;value&#34;) (&#34;key2&#34; . &#34;value2&#34;)) :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;args data)))))&lt;/p&gt; &#xA;&lt;p&gt;POST:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/post&#34;&gt;http://httpbin.org/post&lt;/a&gt;&#34; :type &#34;POST&#34; :data &#39;((&#34;key&#34; . &#34;value&#34;) (&#34;key2&#34; . &#34;value2&#34;)) ;; :data &#34;key=value&amp;amp;key2=value2&#34; ;; this is equivalent :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;form data)))))&lt;/p&gt; &#xA;&lt;p&gt;Block until completion:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/get&#34;&gt;http://httpbin.org/get&lt;/a&gt;&#34; :sync t :complete (cl-function (lambda (&amp;amp;key response &amp;amp;allow-other-keys) (message &#34;Done: %s&#34; (request-response-status-code response)))))&lt;/p&gt; &#xA;&lt;p&gt;Curl authentication:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/get&#34;&gt;http://httpbin.org/get&lt;/a&gt;&#34; :auth &#34;digest&#34; ;; or &#34;basic&#34;, &#34;anyauth&#34;, etc., which see curl(1) :complete (cl-function (lambda (&amp;amp;key response &amp;amp;allow-other-keys) (message &#34;Done: %s&#34; (request-response-status-code response)))))&lt;/p&gt; &#xA;&lt;p&gt;Request binary data:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/get&#34;&gt;http://httpbin.org/get&lt;/a&gt;&#34; :encoding &#39;binary :complete (cl-function (lambda (&amp;amp;key response &amp;amp;allow-other-keys) (message &#34;Done: %s&#34; (request-response-status-code response)))))&lt;/p&gt; &#xA;&lt;p&gt;POST file (&lt;strong&gt;WARNING&lt;/strong&gt;: it will send the contents of the current buffer!):&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/post&#34;&gt;http://httpbin.org/post&lt;/a&gt;&#34; :type &#34;POST&#34; :files `((&#34;current buffer&#34; . ,(current-buffer))) :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;files data)))))&lt;/p&gt; &#xA;&lt;p&gt;Rich callback dispatch (like &lt;code&gt;jQuery.ajax&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/status/418&#34;&gt;http://httpbin.org/status/418&lt;/a&gt;&#34; ;; &#34;&lt;a href=&#34;http://httpbin.org/status/200&#34;&gt;http://httpbin.org/status/200&lt;/a&gt;&#34; ;; success callback will be called. ;; &#34;&lt;a href=&#34;http://httpbin.org/status/400&#34;&gt;http://httpbin.org/status/400&lt;/a&gt;&#34; ;; you will see &#34;Got 400.&#34; :parser &#39;buffer-string :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (when data (with-current-buffer (get-buffer-create &#34;&lt;em&gt;request demo&lt;/em&gt;&#34;) (erase-buffer) (insert data) (pop-to-buffer (current-buffer)))))) :error (cl-function (lambda (&amp;amp;rest args &amp;amp;key error-thrown &amp;amp;allow-other-keys) (message &#34;Got error: %S&#34; error-thrown))) :complete (lambda (&amp;amp;rest _) (message &#34;Finished!&#34;)) :status-code &#39;((400 . (lambda (&amp;amp;rest _) (message &#34;Got 400.&#34;))) (418 . (lambda (&amp;amp;rest _) (message &#34;Got 418.&#34;)))))&lt;/p&gt; &#xA;&lt;p&gt;Flexible PARSER option:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;https://github.com/tkf/emacs-request/commits/master.atom&#34;&gt;https://github.com/tkf/emacs-request/commits/master.atom&lt;/a&gt;&#34; ;; Parse XML in response body: :parser (lambda () (libxml-parse-xml-region (point) (point-max))) :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) ;; Just don&#39;t look at this function.... (let ((get (lambda (node &amp;amp;rest names) (if names (apply get (first (xml-get-children node (car names))) (cdr names)) (first (xml-node-children node)))))) (message &#34;Latest commit: %s (by %s)&#34; (funcall get data &#39;entry &#39;title) (funcall get data &#39;entry &#39;author &#39;name))))))&lt;/p&gt; &#xA;&lt;p&gt;PUT JSON data:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/put&#34;&gt;http://httpbin.org/put&lt;/a&gt;&#34; :type &#34;PUT&#34; :data (json-encode &#39;((&#34;key&#34; . &#34;value&#34;) (&#34;key2&#34; . &#34;value2&#34;))) :headers &#39;((&#34;Content-Type&#34; . &#34;application/json&#34;)) :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;json data)))))&lt;/p&gt; &#xA;&lt;p&gt;PUT JSON data including non-ascii strings:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/put&#34;&gt;http://httpbin.org/put&lt;/a&gt;&#34; :type &#34;PUT&#34; :data (json-encode &#39;((&#34;key&#34; . &#34;値1&#34;) (&#34;key2&#34; . &#34;値2&#34;))) :headers &#39;((&#34;Content-Type&#34; . &#34;application/json&#34;)) :parser &#39;json-read :encoding &#39;utf-8 :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;json data)))))&lt;/p&gt; &#xA;&lt;p&gt;Another PUT JSON example (nested JSON using alist structure, how to represent a boolean &amp;amp; how to selectively evaluate lisp):&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;;; (1) Prepend alist structure with a backtick (&lt;code&gt;) rather than single quote (&#39;) ;; to allow elisp evaluation of selected elements prefixed with a comma (,) ;; (2) This value is expected as a boolean so use the nil / t elisp alist denotation ;; (3) The function will be evaluated as it has been prefixed with a comma (,) (request &#34;http://httpbin.org/put&#34; :type &#34;PUT&#34; :data (json-encode &lt;/code&gt;((&#34;jsonArray&#34; . ((&#34;item1&#34; . &#34;value 1&#34;) ;; (1) (&#34;item2&#34; . t) ;; (2) (&#34;item3&#34; . ,(your-custom-elisp-function)))))) ;; (3) :headers &#39;((&#34;Content-Type&#34; . &#34;application/json&#34;)) :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;json data)))))&lt;/p&gt; &#xA;&lt;p&gt;GET with Unix domain socket data:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;http:/hello.txt&#34; :unix-socket &#34;/tmp/app.sock&#34; :parser (lambda () (buffer-string)) :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;Got: %s&#34; data))))&lt;/p&gt; &#xA;&lt;h1&gt;Legacy documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Github Pages &amp;lt;https://tkf.github.io/emacs-request/&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. |build-status| image:: &lt;a href=&#34;https://github.com/tkf/emacs-request/workflows/CI/badge.svg&#34;&gt;https://github.com/tkf/emacs-request/workflows/CI/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/tkf/emacs-request/actions&#34;&gt;https://github.com/tkf/emacs-request/actions&lt;/a&gt; :alt: Build Status .. |melpa-badge| image:: &lt;a href=&#34;http://melpa.org/packages/request-badge.svg&#34;&gt;http://melpa.org/packages/request-badge.svg&lt;/a&gt; :target: &lt;a href=&#34;http://melpa.org/#/request&#34;&gt;http://melpa.org/#/request&lt;/a&gt; :alt: MELPA Badge .. |melpa-stable-badge| image:: &lt;a href=&#34;http://stable.melpa.org/packages/request-badge.svg&#34;&gt;http://stable.melpa.org/packages/request-badge.svg&lt;/a&gt; :target: &lt;a href=&#34;http://stable.melpa.org/#/request&#34;&gt;http://stable.melpa.org/#/request&lt;/a&gt; :alt: MELPA Stable Badge .. _Getting started: &lt;a href=&#34;http://melpa.org/#/getting-started&#34;&gt;http://melpa.org/#/getting-started&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>