<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-21T01:41:33Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>protesilaos/denote</title>
    <updated>2022-06-21T01:41:33Z</updated>
    <id>tag:github.com,2022-06-21:/protesilaos/denote</id>
    <link href="https://github.com/protesilaos/denote" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple notes for Emacs with an efficient file-naming scheme (we are close to the first stable release)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: denote: Simple notes with an efficient file-naming scheme #+author: Protesilaos Stavrou #+email: &lt;a href=&#34;mailto:info@protesilaos.com&#34;&gt;info@protesilaos.com&lt;/a&gt; #+language: en #+options: &#39;:t toc:nil author:t email:t num:t #+startup: content&lt;/p&gt; &#xA;&lt;p&gt;#+macro: stable-version N/A #+macro: release-date N/A #+macro: development-version 0.1.0-dev #+macro: file @@texinfo:@file{@@$1@@texinfo:}@@ #+macro: space @@texinfo:@: @@ #+macro: kbd @@texinfo:@kbd{@@$1@@texinfo:}@@&lt;/p&gt; &#xA;&lt;p&gt;#+export_file_name: denote.texi&lt;/p&gt; &#xA;&lt;p&gt;#+texinfo_filename: denote.info #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Denote: (denote) #+texinfo_dir_desc: Simple notes with an efficient file-naming scheme #+texinfo_header: @set MAINTAINERSITE @uref{&lt;a href=&#34;https://protesilaos.com,maintainer&#34;&gt;https://protesilaos.com,maintainer&lt;/a&gt; webpage} #+texinfo_header: @set MAINTAINER Protesilaos Stavrou #+texinfo_header: @set MAINTAINEREMAIL @email{&lt;a href=&#34;mailto:info@protesilaos.com&#34;&gt;info@protesilaos.com&lt;/a&gt;} #+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:&lt;a href=&#34;mailto:info@protesilaos.com&#34;&gt;info@protesilaos.com&lt;/a&gt;,contact the maintainer}&lt;/p&gt; &#xA;&lt;p&gt;#+texinfo: @insertcopying&lt;/p&gt; &#xA;&lt;p&gt;This manual, written by Protesilaos Stavrou, describes the customization options for the Emacs package called =denote= (or =denote.el=), and provides every other piece of information pertinent to it.&lt;/p&gt; &#xA;&lt;p&gt;The documentation furnished herein corresponds to stable version {{{stable-version}}}, released on {{{release-date}}}. Any reference to a newer feature which does not yet form part of the latest tagged commit, is explicitly marked as such.&lt;/p&gt; &#xA;&lt;p&gt;Current development target is {{{development-version}}}.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Package name (GNU ELPA): =denote= (once {{{development-version}}} is out)&lt;/li&gt; &#xA; &lt;li&gt;Official manual: &lt;a href=&#34;https://protesilaos.com/emacs/denote&#34;&gt;https://protesilaos.com/emacs/denote&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git repo on SourceHut: &lt;a href=&#34;https://git.sr.ht/~protesilaos/denote&#34;&gt;https://git.sr.ht/~protesilaos/denote&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mirrors: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/protesilaos/denote&#34;&gt;https://github.com/protesilaos/denote&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;GitLab: &lt;a href=&#34;https://gitlab.com/protesilaos/denote&#34;&gt;https://gitlab.com/protesilaos/denote&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;https://lists.sr.ht/~protesilaos/denote&#34;&gt;https://lists.sr.ht/~protesilaos/denote&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are viewing the README.org version of this file, please note that the GNU ELPA machinery automatically generates an Info manual out of it (relevant once {{{development-version}}} is released).&lt;/p&gt; &#xA;&lt;p&gt;#+toc: headlines 8 insert TOC here, with eight headline levels&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COPYING :PROPERTIES: :COPYING: t :CUSTOM_ID: h:40b18bb2-4dc1-4202-bd0b-6fab535b2a0f :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Copyright (C) 2022 Free Software Foundation, Inc.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with the Front-Cover Texts being “A GNU Manual,” and with the Back-Cover Texts as in (a) below. A copy of the license is included in the section entitled “GNU Free Documentation License.”&lt;/p&gt; &#xA;&lt;p&gt;(a) The FSF’s Back-Cover Text is: “You have the freedom to copy and modify this GNU manual.” #+end_quote&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview :PROPERTIES: :CUSTOM_ID: h:a09b70a2-ae0b-4855-ac14-1dddfc8e3241 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Denote aims to be a simple-to-use, focused-in-scope, and effective note-taking tool for Emacs. It is based on the following core design principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Predictability :: File names must follow a consistent and descriptive naming convention ([[#h:4e9c7512-84dc-4dfb-9fa9-e15d51178e5d][The file-naming scheme]]). The file name alone should offer a clear indication of what the contents are, without reference to any other metadatum. This convention is not specific to note-taking, as it is pertinent to any form of file that is part of the user&#39;s long-term storage ([[#h:532e8e2a-9b7d-41c0-8f4b-3c5cbb7d4dca][Renaming files]]).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Composability :: Be a good Emacs citizen, by integrating with other packages or built-in functionality instead of re-inventing functions such as for filtering or greping. Do not introduce strong dependencies on specific libraries. The author of Denote (Protesilaos, aka &#34;Prot&#34;) writes ordinary notes in plain text (=.txt=), switching to an Org file only when its expanded set of functionality is required for the task at hand ([[#h:17896c8c-d97a-4faa-abf6-31df99746ca6][Points of entry]]).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Portability :: Notes are plain text and should remain portable. The way Denote writes file names, the front matter it included in the note&#39;s header, and the links it establishes must all be adequately usable with standard Unix tools. No need for a databse or some specialised software. As Denote develops and this manual is fully fleshed out, there will be concrete examples on how to do the Denote-equivalent on the command-line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flexibility :: Do not assume the user&#39;s preference for a note-taking methodology. Denote is conceptually similar to the Zettelkasten Method, which you can learn more about in this detailed introduction: &lt;a href=&#34;https://zettelkasten.de/introduction/&#34;&gt;https://zettelkasten.de/introduction/&lt;/a&gt;. Notes are atomic (one file per note) and have a unique identifier. However, Denote does not enforce a particular methodology for knowledge management, such as a restricted vocabulary or mutually exclusive sets of keywords. It is up to the user to apply the requisite rigor and/or creativity in pursuit of their preferred workflow ([[#h:6060a7e6-f179-4d42-a9de-a9968aaebecc][Writing metanotes]]).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hackability :: Denote&#39;s code base consists of small and reusable functions. They all have documentation strings. The idea is to make it easier for users of varying levels of expertise to understand what is going on and make surgical interventions where necessary (e.g. to tweak some formatting). In this manual, we provide concrete examples on such user-level configurations ([[#h:4a6d92dd-19eb-4fcc-a7b5-05ce04da3a92][Keep a journal or diary]]).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now the important part... &#34;Denote&#34; is the familiar word, though it also is a play on the &#34;note&#34; concept. Plus, we can come up with acronyms, recursive or otherwise, of increasingly dubious utility like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t Ever Note Only The Epiphenomenal&lt;/li&gt; &#xA; &lt;li&gt;Denote Everything Neatly; Omit The Excesses&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But we&#39;ll let you get back to work. Don&#39;t Eschew or Neglect your Obligations, Tasks, and Engagements.&lt;/p&gt; &#xA;&lt;p&gt;** All the functions and user options in brief :PROPERTIES: :CUSTOM_ID: h:a4d783fb-ef36-4e90-b048-836906edf7df :END:&lt;/p&gt; &#xA;&lt;p&gt;The following are explained at length in this document. Here we provide a reference card.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-org-capture&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-create-note&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-create-note-using-type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-create-note-using-date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-rename-file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-rewrite-front-matter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link-buttonize-buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link-find-file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link-backlinks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link-add-links&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link-insert-link&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link-show-backlinks-buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link-insert-links-matching-regexp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-mode-in-directories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;User options&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-allow-multi-word-keywords&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-file-type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-known-keywords&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-infer-keywords&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-sort-keywords&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-org-capture-specifiers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-rename-expert&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-post-rename-functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-front-matter-date-format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link-fontify-backlinks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-link-backlinks-display-buffer-action&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-directories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Faces (used by denote-dired-mode)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-field-date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-field-delimiter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-field-extension&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-field-keywords&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-field-time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;denote-dired-field-title&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The file-naming scheme :PROPERTIES: :CUSTOM_ID: h:4e9c7512-84dc-4dfb-9fa9-e15d51178e5d :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+vindex: denote-directory Notes are stored as a flat list in the &lt;del&gt;denote-directory&lt;/del&gt; (i.e. no subdirectories). The default path is =~/Documents/notes=.&lt;/p&gt; &#xA;&lt;p&gt;Every note produced by Denote follows this pattern ([[#h:17896c8c-d97a-4faa-abf6-31df99746ca6][Points of entry]]):&lt;/p&gt; &#xA;&lt;p&gt;: DATE--TITLE__KEYWORDS.EXTENSION&lt;/p&gt; &#xA;&lt;p&gt;The =DATE= field represents the date in year-month-day format followed by the capital letter =T= (for &#34;time&#34;) and the current time in hour-minute-second notation. The presentation is compact: =20220531T091625=. The =DATE= serves as the unique identifier of each note.&lt;/p&gt; &#xA;&lt;p&gt;The =TITLE= field is the title of the note, as provided by the user. It automatically gets downcased and hyphenated. An entry about &#34;Economics in the Euro Area&#34; produces an =economics-in-the-euro-area= string for the =TITLE= of the file name.&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-allow-multi-word-keywords The =KEYWORDS= field consists of one or more entries demarcated by an underscore (the separator is inserted automatically). Each keyword is a string provided by the user at the relevant prompt which broadly describes the contents of the entry. Keywords that need to be more than one-word-long must be written with hyphens: any other character, such as spaces or the plus sign is automatically converted into a hyphen. So when =emacs_library= appears in a file name, it is interpreted as two distinct keywords, whereas =emacs-library= is one keyword. This is reflected in how the keywords are recorded in the note ([[#h:13218826-56a5-482a-9b91-5b6de4f14261][Front matter]]). While Denote supports multi-word keywords by default, the user option &lt;del&gt;denote-allow-multi-word-keywords&lt;/del&gt; can be set to nil to forcibly join all words into one, meaning that an input of =word1 word2= will be written as =word1word2=.&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-file-type The =EXTENSION= is the file type. By default, it is =.org= (&lt;del&gt;org-mode&lt;/del&gt;) though the user option &lt;del&gt;denote-file-type&lt;/del&gt; provides support for Markdown with YAML or TOML variants (=.md= which runs &lt;del&gt;markdown-mode&lt;/del&gt;) and plain text (=.txt= via &lt;del&gt;text-mode&lt;/del&gt;). Consult its doc string for the minutia. While files end in the =.org= extension by default, the Denote code base does not actually depend on org.el and/or its accoutrements.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;: 20220610T043241--initial-thoughts-on-the-zettelkasten-method__notetaking.org : 20220610T062201--define-custom-org-hyperlink-type__denote_emacs_package.md : 20220610T162327--on-hierarchy-and-taxis__notetaking_philosophy.txt&lt;/p&gt; &#xA;&lt;p&gt;The different field separators, namely =--= and =__= introduce an efficient way to anchor searches (such as with Emacs commands like &lt;del&gt;isearch&lt;/del&gt; or from the command-line with &lt;del&gt;find&lt;/del&gt; and related). A query for =&lt;em&gt;word= always matches a keyword, while a regexp in the form of, say, =&#34;\([0-9T]+?\)--\(.*?\)&lt;/em&gt;&#34;= captures the date in group =\1= and the title in =\2= (test any regular expression in the current buffer by invoking =M-x re-builder=).&lt;/p&gt; &#xA;&lt;p&gt;[[#h:8ed2bb6f-b5be-4711-82e9-8bee5bb06ece][Extending Denote]].&lt;/p&gt; &#xA;&lt;p&gt;While Denote is an Emacs package, notes should work long-term and not depend on the functionality of a specific program. The file-naming scheme we apply guarantees that a listing is readable in a variety of contexts.&lt;/p&gt; &#xA;&lt;p&gt;** Sluggified title and keywords :PROPERTIES: :CUSTOM_ID: h:ae8b19a1-7f67-4258-96b3-370a72c43f4e :END:&lt;/p&gt; &#xA;&lt;p&gt;Denote has to be highly opinionated about which characters can be used in file names and the file&#39;s front matter in order to enforce its file-naming scheme. The private variable &lt;del&gt;denote--punctuation-regexp&lt;/del&gt; holds the relevant value. In simple terms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;What we count as &#34;illegal characters&#34; are converted into hyphens.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Input for a file title is hyphenated and downcased. The original value is preserved only in the note&#39;s contents ([[#h:13218826-56a5-482a-9b91-5b6de4f14261][Front matter]]).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keywords should not have spaces or other delimiters. If they do, they are converted into hyphens. Keywords are always downcased.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Points of entry :PROPERTIES: :CUSTOM_ID: h:17896c8c-d97a-4faa-abf6-31df99746ca6 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+findex: denote #+findex: denote-type #+findex: denote-org-capture #+findex: denote-date There are four ways to write a note with Denote: invoke the &lt;del&gt;denote&lt;/del&gt;, &lt;del&gt;denote-type&lt;/del&gt;, &lt;del&gt;denote-date&lt;/del&gt; commands, or leverage the &lt;del&gt;org-capture-templates&lt;/del&gt; by setting up a template which calls the function &lt;del&gt;denote-org-capture&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the first case, all that is needed is to run &lt;del&gt;denote&lt;/del&gt;. It will prompt for a title. Once it is supplied, the command will ask for keywords. The resulting note will have a file name as already explained ([[#h:4e9c7512-84dc-4dfb-9fa9-e15d51178e5d][The file naming scheme]]).&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-known-keywords #+vindex: denote-infer-keywords The keyword prompt supports minibuffer completion. Available candidates are those defined in the user option &lt;del&gt;denote-known-keywords&lt;/del&gt;. More candidates can be inferred from the names of existing notes, by setting &lt;del&gt;denote-infer-keywords&lt;/del&gt; to non-nil (which is the case by default).&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-sort-keywords Multiple keywords can be inserted by separating them with a comma (or whatever the value of the &lt;del&gt;crm-indicator&lt;/del&gt; is---which should be a comma). When the user option &lt;del&gt;denote-sort-keywords&lt;/del&gt; is non-nil (the default), keywords are sorted alphabetically (technically, the sorting is done with &lt;del&gt;string-lessp&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;denote&lt;/del&gt; command can also be called from Lisp, in which case it expects the =TITLE= and =KEYWORDS= arguments. The former is a string, the latter a list of strings.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;denote-type&lt;/del&gt; command is like &lt;del&gt;denote&lt;/del&gt; except it also prompts for a file type to use as a local value for &lt;del&gt;denote-file-type&lt;/del&gt;. In practical terms, this lets you produce, say, a note in Markdown even though you normally write in Org ([[#h:f34b172b-3440-446c-aec1-bf818d0aabfe][Notes in multiple file types]]).&lt;/p&gt; &#xA;&lt;p&gt;Similarly, the &lt;del&gt;denote-date&lt;/del&gt; command accepts the same =TITLE= and =KEYWORDS= arguments, though it starts by asking for a date. Normally, Denote use the current date and time to construct an identifier, but &lt;del&gt;denote-date&lt;/del&gt; allows the user to specify any date+time combination. The input for the =DATE= argument is like =2022-06-16= or =2022-06-16 14:30=. When the time is omitted, it is interpreted as =00:00=.&lt;/p&gt; &#xA;&lt;p&gt;Since the ability to insert a date may result in duplicate identifiers, Denote takes care to abort the operation if such an identity is established (e.g. when you use &lt;del&gt;denote-date&lt;/del&gt; with =2022-06-16= twice, it will generate the same identifier of =20220616T000000=). The user must thus call the &lt;del&gt;denote-date&lt;/del&gt; command again and provide a unique value.&lt;/p&gt; &#xA;&lt;p&gt;For integration with &lt;del&gt;org-capture&lt;/del&gt;, the user must first add the relevant template. Such as:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (with-eval-after-load &#39;org-capture (require &#39;denote-org-capture) (add-to-list &#39;org-capture-templates &#39;(&#34;n&#34; &#34;New note (with Denote)&#34; plain (file denote-last-path) #&#39;denote-org-capture :no-save t :immediate-finish nil :kill-buffer t :jump-to-captured t))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;[ In the future, we might develop Denote in ways which do not require such manual intervation. ]&lt;/p&gt; &#xA;&lt;p&gt;Once the template is added, it is accessed from the specified key. If, for instance, &lt;del&gt;org-capture&lt;/del&gt; is bound to =C-c c=, then the note creation is initiated with =C-c c n=. After that, the process is the same as with invoking &lt;del&gt;denote&lt;/del&gt; directly, namely: a prompt for a title followed by a prompt for keywords.&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-org-capture-specifiers Users may prefer to leverage &lt;del&gt;org-capture&lt;/del&gt; in order to extend file creation with the specifiers described in the &lt;del&gt;org-capture-templates&lt;/del&gt; documentation (such as to capture the active region and/or create a hyperlink pointing to the given context). Due to the particular file-naming scheme of Denote, such specifiers cannot be written directly in the template. Instead, they have to be assigned to the user option &lt;del&gt;denote-org-capture-specifiers&lt;/del&gt;, which is interpreted by the function &lt;del&gt;denote-org-capture&lt;/del&gt;. Example with our default value:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq denote-org-capture-specifiers &#34;%l\n%i\n%?&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;del&gt;denote-org-capture&lt;/del&gt; ignores the &lt;del&gt;denote-file-type&lt;/del&gt;: it always sets the Org file extension for the created note to ensure that the capture process works as intended, especially for the desired output of the &lt;del&gt;denote-org-capture-specifiers&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+findex: denote-create-note #+findex: denote-create-note-using-type #+findex: denote-create-note-using-date For convencience, the &lt;del&gt;denote&lt;/del&gt; command has a &lt;del&gt;denote-create-note&lt;/del&gt; alias. Same for &lt;del&gt;denote-type&lt;/del&gt; which is &lt;del&gt;denote-create-note-using-type&lt;/del&gt; and &lt;del&gt;denote-date&lt;/del&gt; that has &lt;del&gt;denote-create-note-using-date&lt;/del&gt;. The purpose of these aliases is to provide alternative, more descriptive names of select commands to aid with discoverability.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Renaming files :PROPERTIES: :CUSTOM_ID: h:532e8e2a-9b7d-41c0-8f4b-3c5cbb7d4dca :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Denote&#39;s file-naming scheme is not specific to notes or text files: it is useful for all sorts of files, such as multimedia and PDFs that form part of the user&#39;s longer-term storage ([[#h:4e9c7512-84dc-4dfb-9fa9-e15d51178e5d][The file-naming scheme]]). While Denote does not manage such files, it already has all the mechanisms to facilitate the task of renaming them.&lt;/p&gt; &#xA;&lt;p&gt;#+findex: denote-dired-rename-file To this end, we provide the &lt;del&gt;denote-dired-rename-file&lt;/del&gt; command. It has a two-fold purpose: (i) to change the name of an existing file while retaining its identifier and (ii) to write a Denote-compliant file name for an item that was not created by &lt;del&gt;denote&lt;/del&gt; or related commands (such as an image or PDF).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;denote-dired-rename-file&lt;/del&gt; command will target the file at point if it finds one in the current Dired buffer. Otherwise it prompts with minibuffer completion for a file name. It then uses the familiar prompts for a =TITLE= and =KEYWORDS= the same way the &lt;del&gt;denote&lt;/del&gt; command does ([[#h:17896c8c-d97a-4faa-abf6-31df99746ca6][Points of entry]]). As a final step, it asks for confirmation before renaming the file at point, showing a message like:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example Rename sample.pdf to 20220612T052900--my-sample-title__testing.pdf? (y or n) #+end_example&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-dired-rename-expert However, if the user option &lt;del&gt;denote-dired-rename-expert&lt;/del&gt; is non-nil, conduct the renaming operation outright---no questions asked.&lt;/p&gt; &#xA;&lt;p&gt;When operating on a file that has no identifier, such as =sample.pdf=, Denote reads the file properties to retrieve its last modification time. If the file was from a past date like 2000-11-31 it will get an identifier starting with =20001131= followed by the time component (per our file-naming scheme).&lt;/p&gt; &#xA;&lt;p&gt;The file type extension (e.g. =.pdf=) is read from the underlying file and is preserved through the renaming process. Files that have no extension are simply left without one.&lt;/p&gt; &#xA;&lt;p&gt;Renaming only occurs relative to the current directory. Files are not moved between directories.&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-dired-post-rename-functions #+findex: denote-dired-rewrite-front-matter The final step of the &lt;del&gt;denote-dired-rename-file&lt;/del&gt; command is to call the special hook &lt;del&gt;denote-dired-post-rename-functions&lt;/del&gt;. Functions added to that hook must accept three arguments, as explained in its doc string. For the time being, the only function we define is the one which updates the underlying note&#39;s front matter to match the new file name: &lt;del&gt;denote-dired-rewrite-front-matter&lt;/del&gt;. The function takes care to only operate on an actual note, instead of arbitrary files.&lt;/p&gt; &#xA;&lt;p&gt;DEVELOPMENT NOTE: the &lt;del&gt;denote-dired-rewrite-front-matter&lt;/del&gt; needs to be tested thoroughly. It rewrites file contents so we have to be sure it does the right thing. To avoid any trouble, it always asks for confirmation before performing the replacement. This confirmation ignores &lt;del&gt;denote-dired-rename-expert&lt;/del&gt; for the time being, though we might want to lift that restriction once everything works as intended.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Front matter :PROPERTIES: :CUSTOM_ID: h:13218826-56a5-482a-9b91-5b6de4f14261 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notes have their own &#34;front matter&#34;. This is a block of data at the top of the file, which is automatically generated at the creation of a new note. The front matter includes the title and keywords (aka &#34;tags&#34; or &#34;filetags&#34;, depending on the file type) which the user specified at the relevant prompt, as well as the date and unique identifier which are derived automatically.&lt;/p&gt; &#xA;&lt;p&gt;This is how it looks for Org mode (&lt;del&gt;denote-file-type&lt;/del&gt; is nil):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example #+title: This is a sample note #+date: 2022-06-10 #+filetags: denote testing #+identifier: 20220610T202537 #+end_example&lt;/p&gt; &#xA;&lt;p&gt;For Markdown with YAML, it looks like this (&lt;del&gt;denote-file-type&lt;/del&gt; has the =markdown-yaml= value):&lt;/p&gt; &#xA;&lt;h2&gt;#+begin_example&lt;/h2&gt; &#xA;&lt;h2&gt;title: &#34;This is a sample note&#34; date: 2022-06-10 tags: denote testing identifier: &#34;20220610T202021&#34;&lt;/h2&gt; &#xA;&lt;p&gt;#+end_example&lt;/p&gt; &#xA;&lt;p&gt;For Markdown with TOML, it looks like this (&lt;del&gt;denote-file-type&lt;/del&gt; has the =markdown-toml= value):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example +++ title = &#34;This is a sample note&#34; date = 2022-06-10 tags = [&#34;denote&#34;, &#34;testing&#34;] identifier = &#34;20220610T201510&#34; +++ #+end_example&lt;/p&gt; &#xA;&lt;p&gt;And for plain text, we have the following (&lt;del&gt;denote-file-type&lt;/del&gt; has the =text= value):&lt;/p&gt; &#xA;&lt;h2&gt;#+begin_example title: This is a sample note date: 2022-06-10 tags: denote testing identifier: 20220610T202232&lt;/h2&gt; &#xA;&lt;p&gt;#+end_example&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-front-matter-date-format The format of the date in the front matter is controlled by the user option &lt;del&gt;denote-front-matter-date-format&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When the value is nil (the default), the date uses a plain =YEAR-MONTH-DAY= notation, like =2022-06-08= (the ISO 8601 standard).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When the value is the =org-timestamp= symbol, the date is recorded as an inactive Org timestamp, such as =[2022-06-08 Wed 06:19]=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An arbitrary string value is interpreted as the argument for the function &lt;del&gt;format-time-string&lt;/del&gt;. This gives the user maximum control over how time is represented in the front matter.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When &lt;del&gt;denote-file-type&lt;/del&gt; specifies one of the Markdown flavors, we ignore this user option in order to enforce the RFC3339 specification (Markdown is typically employed in static site generators as source code for Web pages). However, when &lt;del&gt;denote-front-matter-date-format&lt;/del&gt; has a string value, this rule is suspended: we use whatever the user wants.&lt;/p&gt; &#xA;&lt;p&gt;** Tweaking the front matter :PROPERTIES: :CUSTOM_ID: h:f69371d5-1843-493d-9ff5-c1ab3b43024e :END:&lt;/p&gt; &#xA;&lt;p&gt;What follows is for advanced users. When in doubt, only configure variables we describe as a &#34;user option&#34;: they are declared in the source code with the &lt;del&gt;defcustom&lt;/del&gt; keyword.&lt;/p&gt; &#xA;&lt;p&gt;Denote&#39;s code base is designed in a composable way, which lets the user make precise interventions to affect the output of the relevant commands. One such case is to configure the front matter, such as by changing the order the keys appear in, renaming them, or adding new elements.&lt;/p&gt; &#xA;&lt;p&gt;Some examples are in order, starting with the Org file type. This is what we have in =denote.el=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar denote-org-front-matter &#34;#+title: %s #+date: %s #+filetags: %s #+identifier: %s \n&#34; &#34;Org front matter value for `format&#39;. The order of the arguments is TITLE, DATE, KEYWORDS, ID. If you are an avdanced user who wants to edit this variable to affect how front matter is produced, consider using something like %2$s to control where Nth argument is placed.&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The default front matter is:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example #+title: This is a sample note #+date: 2022-06-10 #+filetags: denote testing #+identifier: 20220610T202537 #+end_example&lt;/p&gt; &#xA;&lt;p&gt;We can add a =PROPERTIES= drawer to it, with something like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq denote-org-front-matter &#34;:PROPERTIES: :ID: %4$s :END: #+title: %1$s #+date: %2$s #+filetags: %3$s #+identifier: %4$s \n&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The output is now formatted thus:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example :PROPERTIES: :ID: 20220611T092444 :END: #+title: This is a sample note #+date: 2022-06-11 #+filetags: denote testing #+identifier: 20220611T092444 #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Notice how we can pass a number to the =%s= specifier. This is what allows us to change the placement of the provided arguments.&lt;/p&gt; &#xA;&lt;p&gt;For another example, we will use the plain text variant, as it differs a bit from the above. By default it is formatted this way:&lt;/p&gt; &#xA;&lt;h2&gt;#+begin_example title: This is a sample note date: 2022-06-10 tags: denote testing identifier: 20220610T202232&lt;/h2&gt; &#xA;&lt;p&gt;#+end_example&lt;/p&gt; &#xA;&lt;p&gt;The line with the hyphens is the product of the fifth format specifier, as documented in &lt;del&gt;denote-text-front-matter&lt;/del&gt;. Its value is stored in &lt;del&gt;denote-text-front-matter-delimiter&lt;/del&gt;. Say we want to have a delimiter both at the top and bottom:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq denote-text-front-matter &#34;%5$s title: %1$s date: %2$s tags: %3$s identifier: %4$s %5$s\n\n&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Which gives us:&lt;/p&gt; &#xA;&lt;h2&gt;#+begin_example&lt;/h2&gt; &#xA;&lt;h2&gt;title: This is a sample note date: 2022-06-11 tags: denote testing identifier: 20220611T093252&lt;/h2&gt; &#xA;&lt;p&gt;#+end_example&lt;/p&gt; &#xA;&lt;p&gt;Or we would rather use another character instead of hyphens, such as the equals sign:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq denote-text-front-matter-delimiter (make-string 27 ?=)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Remember that this is for advanced users. If you want to see changes done on this front, you are welcome to share your thoughts and/or participate in the development of Denote.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linking notes :PROPERTIES: :CUSTOM_ID: h:fc913d54-26c8-4c41-be86-999839e8ad31 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;DEVELOPMENT NOTE 2022-06-19 22:48 +0300: This is the final part that remains to be finalised before the release of the first stable version (planned for 2022-06-22--2022-06-24). There still are some updates to be made.&lt;/p&gt; &#xA;&lt;p&gt;#+findex: denote-link The &lt;del&gt;denote-link&lt;/del&gt; command inserts a link at point to an entry specified at the minibuffer prompt. Links are formatted depending on the file type of current note. In Org and plain text buffers, links are formatted thus: =[[denote:IDENTIFIER][TITLE]]=. While in Markdown they are expressed as =&lt;a href=&#34;denote:IDENTIFIER&#34;&gt;TITLE&lt;/a&gt;=.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;del&gt;denote-link&lt;/del&gt; is called with a prefix argument (=C-u= by default) it formats links like =[[denote:IDENTIFIER]]=. The user might prefer its simplicity.&lt;/p&gt; &#xA;&lt;p&gt;Inserted links are automatically buttonized and remain active for as long as the buffer is available. In Org this is handled automatically as Denote creates its own custom hyperlink: the =denote:= type which works exactly like the =file:=. In Markdown and plain text, Denote handles the buttonization of those links.&lt;/p&gt; &#xA;&lt;p&gt;To buttonize links in existing files while visiting them, the user must add this snippet to their setup:&lt;/p&gt; &#xA;&lt;p&gt;#+findex: denote-link-buttonize-buffer #+begin_src emacs-lisp (add-hook &#39;find-file-hook #&#39;denote-link-buttonize-buffer) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+findex: denote-link-find-file Denote has a major-mode-agnostic mechanism to collect all linked file references in the current buffer and return them as an appropriately formatted list. This list can then be used in interactive commands. The &lt;del&gt;denote-link-find-file&lt;/del&gt; is such a command. It uses minibuffer completion to visit a file that is linked to from the current note. The candidates have the correct metadata, which is ideal for integration with other standards-compliant tools ([[#h:8ed2bb6f-b5be-4711-82e9-8bee5bb06ece][Extending Denote]]). For instance, a package such as =marginalia= will display accurate annotations, while the =embark= package will be able to work its magic such as in exporting the list into a filtered Dired buffer (i.e. a familiar Dired listing with only the files of the current minibuffer session).&lt;/p&gt; &#xA;&lt;p&gt;#+findex: denote-link-backlinks The command &lt;del&gt;denote-link-backlinks&lt;/del&gt; produces a bespoke buffer which displays the file name of all notes linking to the current one. Each file name appears on its own line and is buttonized so that it performs the action of visiting the referenced file. [Development note: currently this depends on the =find= executable. Maybe we can make it work with Emacs&#39; &lt;del&gt;xref&lt;/del&gt; facility to work everywhere without losing the bespoke buffer?] The backlinks&#39; buffer looks like this:&lt;/p&gt; &#xA;&lt;h2&gt;#+begin_example Backlinks to &#34;On being honest&#34; (20220614T130812)&lt;/h2&gt; &#xA;&lt;p&gt;20220614T145606--let-this-glance-become-a-stare__journal.txt 20220616T182958--not-feeling-butterflies-in-your-stomach__journal.txt #+end_example&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-link-fontify-backlinks The backlinks&#39; buffer is fontified by default, though the user has access to the &lt;del&gt;denote-link-fontify-backlinks&lt;/del&gt; option to disable this effect by setting its value to nil.&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-link-backlinks-display-buffer-action The placement of the backlinks&#39; buffer is subject to the user option &lt;del&gt;denote-link-backlinks-display-buffer-action&lt;/del&gt;. Due to the nature of the underlying &lt;del&gt;display-buffer&lt;/del&gt; mechanism, this inevitably is an advanced feature. By default, the backlinks&#39; buffer is displayed below the current window. The doc string of our user option includes a configuration that places the buffer in a left side window instead. Reproducing it here for your convenience:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq denote-link-backlinks-display-buffer-action &#39;((display-buffer-reuse-window display-buffer-in-side-window) (side . left) (slot . 99) (window-width . 0.3))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+findex: denote-link-add-links The command &lt;del&gt;denote-link-add-links&lt;/del&gt; adds links at point matching a regular expression or plain string. The links are inserted as a typographic list, such as:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;link1&lt;/li&gt; &#xA; &lt;li&gt;link2&lt;/li&gt; &#xA; &lt;li&gt;link3 #+end_example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each link is formatted according to the file type of the current note, as explained further above about the &lt;del&gt;denote-link&lt;/del&gt; command. The current note is excluded from the matching entries (adding a link to itself is pointless).&lt;/p&gt; &#xA;&lt;p&gt;When called with a prefix argument (=C-u=) &lt;del&gt;denote-link-add-links&lt;/del&gt; will format all links as =[[denote:IDENTIFIER]]=, hence a typographic list:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[denote:IDENTIFIER-1]]&lt;/li&gt; &#xA; &lt;li&gt;[[denote:IDENTIFIER-2]]&lt;/li&gt; &#xA; &lt;li&gt;[[denote:IDENTIFIER-3]] #+end_example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Same examples of a regular expression that can be used with this command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=journal= match all files which include =journal= anywhere in their name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=_journal= match all files which include =journal= as a keyword.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=^2022.*_journal= match all file names starting with =2022= and including the keyword =journal=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=.txt= match all files including =.txt=. In practical terms, this only applies to the file extension, as Denote automatically removes dots (and other characters) from the base file name.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If files are created with &lt;del&gt;denote-sort-keywords&lt;/del&gt; as non-nil (the default), then it is easy to write a regexp that includes multiple keywords in alphabetic order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=_denote.*_package= match all files that include both the =denote= and =package= keywords, in this order.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=(.*denote.&lt;em&gt;package.&lt;/em&gt;)|(.*package.&lt;em&gt;denote.&lt;/em&gt;)= is the same as above, but out-of-order.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Remember that regexp constructs only need to be escaped once (like =|=) when done interactively but twice when called from Lisp. What we show above is for interactive usage.&lt;/p&gt; &#xA;&lt;p&gt;#+findex: denote-link-insert-link #+findex: denote-link-show-backlinks-buffer #+findex: denote-link-insert-links-matching-regexp For convenience, the &lt;del&gt;denote-link&lt;/del&gt; command has an alias called &lt;del&gt;denote-link-insert-link&lt;/del&gt;. The &lt;del&gt;denote-link-backlinks&lt;/del&gt; can also be used as &lt;del&gt;denote-link-show-backlinks-buffer&lt;/del&gt;. While &lt;del&gt;denote-link-add-links&lt;/del&gt; is aliased &lt;del&gt;denote-link-insert-links-matching-regexp&lt;/del&gt;. The purpose of these aliases is to offer alternative, more descriptive names of select commands.&lt;/p&gt; &#xA;&lt;p&gt;** Writing metanotes :PROPERTIES: :CUSTOM_ID: h:6060a7e6-f179-4d42-a9de-a9968aaebecc :END:&lt;/p&gt; &#xA;&lt;p&gt;A &#34;metanote&#34; is an entry that describes other entries who have something in common. Writing metanotes can be part of a workflow where the user periodically reviews their work in search of patterns and deeper insights. For example, you might want to read your journal entries from the past year to reflect on your experiences, evolution as a person, and the like.&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;denote-link-add-links&lt;/del&gt;, which we covered extensively in the previous section, is suited for this task ([[#h:fc913d54-26c8-4c41-be86-999839e8ad31][Linking notes]]). You will create your metanote the way you use Denote ordinarily (metanotes may have the =metanote= keyword), write an introduction or however you want to go about it, invoke &lt;del&gt;denote-link-add-links&lt;/del&gt; to cite the notes that match the given regexp, and continue writing.&lt;/p&gt; &#xA;&lt;p&gt;Metanotes can serve as entry points to groupings of individual notes. They are not the same as a filtered list of files, i.e. what you would do in Dired or the minibuffer where you narrow the list of notes to a given query. Metanotes contain the filtered list plus your thoughts about it. The act of purposefully grouping notes together and contemplating on their shared patterns is what adds value.&lt;/p&gt; &#xA;&lt;p&gt;Your future self will appreciate metanotes for the function they serve in encapsulating knowledge, while current you will be equipped with the knowledge derived from the deliberate self-reflection.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fontification in Dired :PROPERTIES: :CUSTOM_ID: h:337f9cf0-9f66-45af-b73f-f6370472fb51 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+findex: denote-dired-mode One of the upsides of Denote&#39;s file-naming scheme is the predictable pattern it establishes, which appears as a near-tabular presentation in a listing of notes (i.e. in Dired). The &lt;del&gt;denote-dired-mode&lt;/del&gt; can help enhance this impression, by fontifying the components of the file name to make the date (identifier) and keywords stand out.&lt;/p&gt; &#xA;&lt;p&gt;There are two ways to set the mode. Either use it for all directories, which probably is not needed:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;denote-dired) (add-hook &#39;dired-mode-hook #&#39;denote-dired-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-dired-directories #+findex: denote-dired-mode-in-directories Or configure the user option &lt;del&gt;denote-dired-directories&lt;/del&gt; and then set up the function &lt;del&gt;denote-dired-mode-in-directories&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;denote-dired)&lt;/p&gt; &#xA;&lt;p&gt;;; We use different ways to specify a path for demo purposes. (setq denote-dired-directories (list denote-directory (thread-last denote-directory (expand-file-name &#34;attachments&#34;)) (expand-file-name &#34;~/Documents/vlog&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;dired-mode-hook #&#39;denote-dired-mode-in-directories) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The faces we define are:&lt;/p&gt; &#xA;&lt;p&gt;#+vindex: denote-dired-field-date #+vindex: denote-dired-field-delimiter #+vindex: denote-dired-field-extension #+vindex: denote-dired-field-keywords #+vindex: denote-dired-field-time #+vindex: denote-dired-field-title&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;denote-dired-field-date&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;denote-dired-field-delimiter&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;denote-dired-field-extension&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;denote-dired-field-keywords&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;denote-dired-field-time&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;denote-dired-field-title&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the time being, the =diredfl= package is not compatible with this facility.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;denote-dired-mode&lt;/del&gt; does not only fontify note files that were created by Denote: it covers every file name that follows our naming conventions ([[#h:4e9c7512-84dc-4dfb-9fa9-e15d51178e5d][The file-naming scheme]]). This is particularly useful for scenaria where, say, one wants to organise their collection of PDFs and multimedia in a systematic way (and, perhaps, use them as attachments for the notes Denote produces).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minibuffer histories :PROPERTIES: :CUSTOM_ID: h:82dc1203-d689-44b2-9a6c-b37776209651 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Denote has a dedicated minibuffer history for each one of its prompts. This practically means that using =M-p= (&lt;del&gt;previous-history-element&lt;/del&gt;) and =M-n= (&lt;del&gt;next-history-element&lt;/del&gt;) will only cycle through the relevant record of inputs, such as your latest titles in the =TITLE= prompt, and keywords in the =KEYWORDS= prompt.&lt;/p&gt; &#xA;&lt;p&gt;The built-in =savehist= library saves minibuffer histories. Sample configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;savehist) (setq savehist-file (locate-user-emacs-file &#34;savehist&#34;)) (setq history-length 10000) (setq history-delete-duplicates t) (setq savehist-save-minibuffer-history t) (add-hook &#39;after-init-hook #&#39;savehist-mode) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notes in multiple file types :PROPERTIES: :CUSTOM_ID: h:f34b172b-3440-446c-aec1-bf818d0aabfe :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As noted before, Denote does not have a particular preference on the workflow the user wishes to follow nor does it expect a specific file type. It is entirely possible to store notes in a variety of formats across multiple directories and Denote will still be able to work with them, provided they follow the file-naming scheme and have an identifier in their front matter, where relevant. Here we show how to create new notes that take the example of the &lt;del&gt;denote-type&lt;/del&gt; command and take it one step further.&lt;/p&gt; &#xA;&lt;p&gt;Suppose you want to use the &lt;del&gt;denote&lt;/del&gt; command to store some notes in Markdown, others in Org, and others still in plain text. Maybe you also want to place each of those in its own directory. Using the &lt;del&gt;denote-type&lt;/del&gt; command is not sufficient, as it only operates on the value of the user option &lt;del&gt;denote-directory&lt;/del&gt;. You need some small wrapper functions.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=~/Documents/notes/= is your default and contains Org files.&lt;/li&gt; &#xA; &lt;li&gt;=~/Documents/blog/= holds the files of your blog.&lt;/li&gt; &#xA; &lt;li&gt;=~/Documents/random/= is where you scribble thoughts in plain text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why would you do that? It does not matter. This is for didactic purposes. All you need to do is write functions that &lt;del&gt;let&lt;/del&gt; bind the &lt;del&gt;denote-directory&lt;/del&gt; and to the desired value.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-denote-markdown-toml () &#34;Create Markdown+TOML note in &lt;del&gt;/Documents/blog/.&#34; (interactive) (let ((denote-file-type &#39;markdown-toml) (denote-directory &#34;&lt;/del&gt;/Documents/blog/&#34;)) (call-interactively #&#39;denote)))&lt;/p&gt; &#xA;&lt;p&gt;(defun my-denote-plain-text () &#34;Create plain text note in &lt;del&gt;/Documents/random/.&#34; (interactive) (let ((denote-file-type &#39;text) (denote-directory &#34;&lt;/del&gt;/Documents/random/&#34;)) (call-interactively #&#39;denote))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You do not need a third command for the Org files, as those would be the default used by regular &lt;del&gt;denote&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Given Denote&#39;s composable code, you can tweak the output however you like, including the contents of the file ([[#h:f69371d5-1843-493d-9ff5-c1ab3b43024e][Tweaking the front matter]]).&lt;/p&gt; &#xA;&lt;p&gt;If you do place different types of notes in their own directories, you must introduce directory-local variables to keep things working seamlessly. Otherwise you cannot create notes, retrieve backlinks, and so on. To that end, the &lt;del&gt;denote-directory&lt;/del&gt; variable considers the symbols =default-directory= or =local= as safe local variables. Write a =.dir-locals.el= file in each of your non-default notes directories with the following contents (replacing =default-directory= with =local=, if you prefer):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;;; Directory Local Variables ;;; For more information see (info &#34;(emacs) Directory Variables&#34;)&lt;/p&gt; &#xA;&lt;p&gt;((nil . ((denote-directory . default-directory)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will allow things to work smoothly (e.g. &lt;del&gt;denote-infer-keywords&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Your default &lt;del&gt;denote-directory&lt;/del&gt; does not need this, as it already is the normal target that Denote uses.&lt;/p&gt; &#xA;&lt;p&gt;Want to automate aspects of note creation ([[#h:4a6d92dd-19eb-4fcc-a7b5-05ce04da3a92][Keep a journal or diary]])? Have more ideas? Something does not work quite right? Areas you wish were more abstract in the code? Please participate in the development process.&lt;/p&gt; &#xA;&lt;p&gt;** Keep a journal or diary :PROPERTIES: :CUSTOM_ID: h:4a6d92dd-19eb-4fcc-a7b5-05ce04da3a92 :END:&lt;/p&gt; &#xA;&lt;p&gt;While there are subtle technical differences between a journal and a diary, we will consider those equivalent in the interest of brevity: they both describe a personal space that holds a record of your thoughts about your experiences and/or view of events in the world.&lt;/p&gt; &#xA;&lt;p&gt;Suppose you are committed to writing an entry every day. Unlike what we demonstrated before, your writing will follow a regular naming pattern ([[#h:f34b172b-3440-446c-aec1-bf818d0aabfe][Notes in multiple file types]]). You know that the title of the new note must always look like =Tuesday 14 June 2022= and the keyword has to be =journal= or =diary=. As such, you want to automate the task instead of being prompted each time, as is the norm with &lt;del&gt;denote&lt;/del&gt; and the relevant commands ([[#h:17896c8c-d97a-4faa-abf6-31df99746ca6][Points of entry]]). This is easy to accomplish because &lt;del&gt;denote&lt;/del&gt; can be called from Lisp and given the required arguments of =TITLE= and =KEYWORDS= directly. All you need is a simple wrapper function:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-denote-journal () &#34;Create an entry tagged &#39;journal&#39; with the date as its title.&#34; (interactive) (denote (format-time-string &#34;%A %e %B %Y&#34;) ; format like Tuesday 14 June 2022 &#34;journal&#34;)) ; multiple keywords are a list of strings: &#39;(&#34;one&#34; &#34;two&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;By invoking &lt;del&gt;my-denote-journal&lt;/del&gt; you will go straight into the newly created note and commit to your writing outright.&lt;/p&gt; &#xA;&lt;p&gt;Of course, you can always set up the function so that it asks for a =TITLE= but still automatically applies the =journal= tag:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun denote-journal-with-title () &#34;Create an entry tagged &#39;journal&#39;, while prompting for a title.&#34; (interactive) (denote (denote--title-prompt) ; ask for title, instead of using human-readable date &#34;journal&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Sometimes journaling is done with the intent to hone one&#39;s writing skills. Perhaps you are learning a new language or wish to communicate your ideas with greater clarity and precision. As with everything that requires a degree of sophistication, you have to work for it---write, write, write!&lt;/p&gt; &#xA;&lt;p&gt;One way to test your progress is to set a timer. It helps you gauge your output and its quality. To use a timer with Emacs, consider the =tmr= package:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-denote-journal-with-tmr () &#34;Like &lt;code&gt;my-denote-journal&#39;, but also set a 10-minute timer. The &lt;/code&gt;tmr&#39; command is part of the `tmr&#39; package.&#34; (interactive) (denote (format-time-string &#34;%A %e %B %Y&#34;) &#34;journal&#34;) (tmr 10 &#34;Practice writing in my journal&#34;)) ; set 10 minute timer with a description #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Once the timer elapses, stop writing and review your performance. Practice makes perfect!&lt;/p&gt; &#xA;&lt;p&gt;[ As Denote matures, we may add hooks to control what happens before or after the creation of a new note. We shall also document more examples of tasks that can be accomplished with this package. ]&lt;/p&gt; &#xA;&lt;p&gt;Sources for =tmr=:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Package name (GNU ELPA): =tmr=&lt;/li&gt; &#xA; &lt;li&gt;Official manual: &lt;a href=&#34;https://protesilaos.com/emacs/tmr&#34;&gt;https://protesilaos.com/emacs/tmr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git repo on SourceHut: &lt;a href=&#34;https://git.sr.ht/~protesilaos/tmr&#34;&gt;https://git.sr.ht/~protesilaos/tmr&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mirrors: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/protesilaos/tmr&#34;&gt;https://github.com/protesilaos/tmr&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;GitLab: &lt;a href=&#34;https://gitlab.com/protesilaos/tmr&#34;&gt;https://gitlab.com/protesilaos/tmr&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;https://lists.sr.ht/~protesilaos/tmr&#34;&gt;https://lists.sr.ht/~protesilaos/tmr&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Recall what we discussed elsewhere in the manual about changing the file type and target directory ([[#h:f34b172b-3440-446c-aec1-bf818d0aabfe][Notes in multiple file types]]). You basically &lt;del&gt;let&lt;/del&gt; bind the relevant variables. Such bindings are specific to the function: they do not affect anything outside of it, so you can keep the defaults for your regular notes and use something different for your journaling. For example, the following snippet is like the previous sample of writing a journal entry and setting a timer, but it also uses a plain text file type and adds the new note to the =~/Documents/journal/= directory:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-denote-journal-with-tmr-and-custom-type-and-dir () &#34;Like `my-denote-journal-with-tmr&#39; with custom type and directory.&#34; (interactive) (let ((denote-file-type &#39;text) ; it supports other file types as well: read its doc string (denote-directory &#34;~/Documents/journal/&#34;)) (denote (format-time-string &#34;%A %e %B %Y&#34;) &#34;journal&#34;) (tmr 10 &#34;Practice writing in my journal&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Finally, we can incorporate the idea of the &lt;del&gt;denote-date&lt;/del&gt; command into our journaling workflow. Unlike regular &lt;del&gt;denote&lt;/del&gt;, this command has a slightly different structure. Below are variants of the aforementioned ideas. If you pick more than one, just give them a unique name (the text right after &lt;del&gt;defun&lt;/del&gt;):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-denote-journal-with-date (date title) &#34;Ask for DATE and TITLE to write a journal entry.&lt;/p&gt; &#xA;&lt;p&gt;Read the doc string of `denote-date&#39; on what a valid DATE is.&#34; (interactive (list (denote--date-prompt) (denote--title-prompt))) (when-let ((d (denote--valid-date date)) (id (format-time-string denote--id-format d)) ((denote--barf-duplicate-id id))) (denote--prepare-note title &#34;journal&#34; nil d id)))&lt;/p&gt; &#xA;&lt;p&gt;(defun my-denote-journal-with-date (date) &#34;Ask for DATE to write a journal entry.&lt;/p&gt; &#xA;&lt;p&gt;Read the doc string of `denote-date&#39; on what a valid DATE input is.&lt;/p&gt; &#xA;&lt;p&gt;The title of the note is something like Tuesday 17 June 2020, though you can modify the `format-time-string&#39; specifiers as described in its doc string.&#34; (interactive (list (denote--date-prompt))) (when-let ((d (denote--valid-date date)) (id (format-time-string denote--id-format d)) ((denote--barf-duplicate-id id))) (denote--prepare-note (format-time-string &#34;%A %e %B %Y&#34; d) &#34;journal&#34; nil d id)))&lt;/p&gt; &#xA;&lt;p&gt;(defun my-denote-journal-with-date (date) &#34;Ask for DATE to write a journal entry.&lt;/p&gt; &#xA;&lt;p&gt;Journal entries are stored in ~/Documents/journal/ and use plain text for their `denote-file-type&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Read the doc string of `denote-date&#39; on what a valid DATE input is.&lt;/p&gt; &#xA;&lt;p&gt;The title of the note is something like Tuesday 17 June 2020, though you can modify the `format-time-string&#39; specifiers as described in its doc string.&#34; (interactive (list (denote--date-prompt))) (when-let ((d (denote--valid-date date)) (id (format-time-string denote--id-format d)) ((denote--barf-duplicate-id id)) (denote-file-type &#39;text) ; it supports other file types as well: read its doc string (denote-directory &#34;~/Documents/journal/&#34;)) (denote--prepare-note (format-time-string &#34;%A %e %B %Y&#34; d) &#34;journal&#34; nil d id)))&lt;/p&gt; &#xA;&lt;p&gt;(defun my-denote-journal-with-date (date) &#34;Ask for DATE to write a journal entry and start a 10-minute tmr.&lt;/p&gt; &#xA;&lt;p&gt;Journal entries are stored in ~/Documents/journal/ and use plain text for their &lt;code&gt;denote-file-type&#39;. The &lt;/code&gt;tmr&#39; command comes from the package of the same name (same dev as Denote&#39;s).&lt;/p&gt; &#xA;&lt;p&gt;Read the doc string of `denote-date&#39; on what a valid DATE input is.&lt;/p&gt; &#xA;&lt;p&gt;The title of the note is something like Tuesday 17 June 2020, though you can modify the `format-time-string&#39; specifiers as described in its doc string.&#34; (interactive (list (denote--date-prompt))) (when-let ((d (denote--valid-date date)) (id (format-time-string denote--id-format d)) ((denote--barf-duplicate-id id)) (denote-file-type &#39;text) ; it supports other file types as well: read its doc string (denote-directory &#34;~/Documents/journal/&#34;)) (denote--prepare-note (format-time-string &#34;%A %e %B %Y&#34; d) &#34;journal&#34; nil d id) (tmr 10 &#34;Practice writing in my journal&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extending Denote :PROPERTIES: :CUSTOM_ID: h:8ed2bb6f-b5be-4711-82e9-8bee5bb06ece :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Denote is a tool with a narrow scope: create notes and link between them, based on the aforementioned file-naming scheme. For other common operations the user is advised to rely on standard Emacs facilities or specialised third-party packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To search through notes, use =M-x grep=, =M-x find-name-dired=, =M-x consult-find=, =M-x consult-grep=, and so on (the latter two are provided by the =consult= package).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To quickly jump to the &lt;del&gt;denote-directory&lt;/del&gt;, visit it with =M-x find-file= and then make a bookmark with =M-x bookmark-set=. Access bookmarks with =M-x bookmark-jump=, =M-x consult-buffer= (from =consult=), and the like.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Control the versioning of notes by turning the &lt;del&gt;denote-directory&lt;/del&gt; into a Git project. Consider the built-in project.el or the =projectile= package, as well as the built-in VC framework and/or the =magit= package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is possible to narrow the list of notes in Dired using a regular expression or literal string. Do =M-x dired-mark-files-regexp RET type-regexp-here RET t k=. The =t= will toggle the match so that it marks all files that do not match the regexp and =k= will remove them from the buffer (restore them by reverting the buffer).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A narrowed list of files can also be produced through the minibuffer, with the help of the =embark= package. For example, =M-x find-file RET path/to/denote-directory RET regexp embark-act embark-export=. The final two commands, &lt;del&gt;embark-act&lt;/del&gt; and &lt;del&gt;embark-export&lt;/del&gt;, are normally bound to keys. The whole sequence will thus look like =C-x C-f path RET regexp C-. E=.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :CUSTOM_ID: h:f3bdac2c-4704-4a51-948c-a789a2589790 :END: #+cindex: Installation instructions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** COMMENT GNU ELPA package :PROPERTIES: :CUSTOM_ID: h:42953f87-82bd-43ec-ab99-22b1e22955e7 :END:&lt;/p&gt; &#xA;&lt;p&gt;The package is available as =denote=. Simply do:&lt;/p&gt; &#xA;&lt;p&gt;: M-x package-refresh-contents : M-x package-install&lt;/p&gt; &#xA;&lt;p&gt;And search for it.&lt;/p&gt; &#xA;&lt;p&gt;GNU ELPA provides the latest stable release. Those who prefer to follow the development process in order to report bugs or suggest changes, can use the version of the package from the GNU-devel ELPA archive. Read: &lt;a href=&#34;https://protesilaos.com/codelog/2022-05-13-emacs-elpa-devel/&#34;&gt;https://protesilaos.com/codelog/2022-05-13-emacs-elpa-devel/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Manual installation :PROPERTIES: :CUSTOM_ID: h:d397712c-c8c0-4cfa-ad1a-ef28cf78d1f0 :END:&lt;/p&gt; &#xA;&lt;p&gt;Assuming your Emacs files are found in =~/.emacs.d/=, execute the following commands in a shell prompt:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh cd ~/.emacs.d&lt;/p&gt; &#xA;&lt;h1&gt;Create a directory for manually-installed packages&lt;/h1&gt; &#xA;&lt;p&gt;mkdir manual-packages&lt;/p&gt; &#xA;&lt;h1&gt;Go to the new directory&lt;/h1&gt; &#xA;&lt;p&gt;cd manual-packages&lt;/p&gt; &#xA;&lt;h1&gt;Clone this repo, naming it &#34;denote&#34;&lt;/h1&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://git.sr.ht/~protesilaos/denote&#34;&gt;https://git.sr.ht/~protesilaos/denote&lt;/a&gt; denote #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Finally, in your =init.el= (or equivalent) evaluate this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Make Elisp files in that directory available to the user. (add-to-list &#39;load-path &#34;~/.emacs.d/manual-packages/denote&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Everything is in place to set up the package.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sample configuration :PROPERTIES: :CUSTOM_ID: h:5d16932d-4f7b-493d-8e6a-e5c396b15fd6 :END: #+cindex: Package configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;denote)&lt;/p&gt; &#xA;&lt;p&gt;;; Remember to check the doc strings of those variables. (setq denote-directory (expand-file-name &#34;~/Documents/notes/&#34;)) (setq denote-known-keywords &#39;(&#34;emacs&#34; &#34;philosophy&#34; &#34;politics&#34; &#34;economics&#34;)) (setq denote-infer-keywords t) (setq denote-sort-keywords t) (setq denote-file-type nil) ; Org is the default, set others here&lt;/p&gt; &#xA;&lt;p&gt;;; We allow multi-word keywords by default. The author&#39;s personal ;; preference is for single-word keywords for a more rigid workflow. (setq denote-allow-multi-word-keywords t)&lt;/p&gt; &#xA;&lt;p&gt;(setq denote-front-matter-date-format nil) ; change this to `org-timestamp&#39; or custom string&lt;/p&gt; &#xA;&lt;p&gt;;; You will not need to `require&#39; all those individually once the ;; package is available. (require &#39;denote-retrieve) (require &#39;denote-link)&lt;/p&gt; &#xA;&lt;p&gt;;; If you use Markdown or plain text files (Org renders links as buttons ;; right away) (add-hook &#39;find-file-hook #&#39;denote-link-buttonize-buffer)&lt;/p&gt; &#xA;&lt;p&gt;(require &#39;denote-dired) (setq denote-dired-rename-expert nil)&lt;/p&gt; &#xA;&lt;p&gt;;; We use different ways to specify a path for demo purposes. (setq denote-dired-directories (list denote-directory (thread-last denote-directory (expand-file-name &#34;attachments&#34;)) (expand-file-name &#34;~/Documents/books&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;;; Generic (great if you rename files Denote-style in lots of places): ;; (add-hook &#39;dired-mode-hook #&#39;denote-dired-mode) ;; ;; OR if only want it in `denote-dired-directories&#39;: (add-hook &#39;dired-mode-hook #&#39;denote-dired-mode-in-directories)&lt;/p&gt; &#xA;&lt;p&gt;;; Here is a custom, user-level command from one of the examples we ;; showed in this manual. We define it here and add it to a key binding ;; below. (defun my-denote-journal () &#34;Create an entry tagged &#39;journal&#39;, while prompting for a title.&#34; (interactive) (denote (denote--title-prompt) &#34;journal&#34;))&lt;/p&gt; &#xA;&lt;p&gt;;; Denote does not define any key bindings. This is for the user to ;; decide. For example: (let ((map global-map)) (define-key map (kbd &#34;C-c n j&#34;) #&#39;my-denote-journal) ; our custom command (define-key map (kbd &#34;C-c n n&#34;) #&#39;denote) (define-key map (kbd &#34;C-c n N&#34;) #&#39;denote-type) (define-key map (kbd &#34;C-c n d&#34;) #&#39;denote-date) ;; If you intend to use Denote with a variety of file types, it is ;; easier to bind the link-related commands to the &lt;code&gt;global-map&#39;, as ;; shown here. Otherwise follow the same pattern for &lt;/code&gt;org-mode-map&#39;, ;; &lt;code&gt;markdown-mode-map&#39;, and/or &lt;/code&gt;text-mode-map&#39;. (define-key map (kbd &#34;C-c n i&#34;) #&#39;denote-link) ; &#34;insert&#34; mnemonic (define-key map (kbd &#34;C-c n I&#34;) #&#39;denote-link-add-links) (define-key map (kbd &#34;C-c n l&#34;) #&#39;denote-link-find-file) ; &#34;list&#34; links (define-key map (kbd &#34;C-c n b&#34;) #&#39;denote-link-backlinks) ;; Note that &lt;code&gt;denote-dired-rename-file&#39; can work from any context, not ;; just Dired bufffers. That is why we bind it here to the ;; &lt;/code&gt;global-map&#39;. (define-key map (kbd &#34;C-c n r&#34;) #&#39;denote-dired-rename-file))&lt;/p&gt; &#xA;&lt;p&gt;(with-eval-after-load &#39;org-capture (require &#39;denote-org-capture) (setq denote-org-capture-specifiers &#34;%l\n%i\n%?&#34;) (add-to-list &#39;org-capture-templates &#39;(&#34;n&#34; &#34;New note (with denote.el)&#34; plain (file denote-last-path) #&#39;denote-org-capture :no-save t :immediate-finish nil :kill-buffer t :jump-to-captured t))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributing :PROPERTIES: :CUSTOM_ID: h:1ebe4865-c001-4747-a6f2-0fe45aad71cd :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Denote is a GNU ELPA package (relevant once {{{development-version}}} is released). As such, any significant change to the code requires copyright assignment to the Free Software Foundation (more below).&lt;/p&gt; &#xA;&lt;p&gt;You do not need to be a programmer to contribute to this package. Sharing an idea or describing a workflow is equally helpful, as it teaches us something we may not know and might be able to cover either by extending Denote or expanding this manual ([[#h:044a6a0f-e382-4013-8279-8bf4e64e73c0][Things to do]]). If you prefer to write a blog post, make sure you share it with us: we can add a section herein referencing all such articles. Everyone gets acknowledged ([[#h:f8126820-3b59-49fa-bcc2-73bd60132bb9][Acknowledgements]]). There is no such thing as an &#34;insignificant contribution&#34;---they all matter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Package name (GNU ELPA): =denote= (once {{{development-version}}} is out)&lt;/li&gt; &#xA; &lt;li&gt;Official manual: &lt;a href=&#34;https://protesilaos.com/emacs/denote&#34;&gt;https://protesilaos.com/emacs/denote&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git repo on SourceHut: &lt;a href=&#34;https://git.sr.ht/~protesilaos/denote&#34;&gt;https://git.sr.ht/~protesilaos/denote&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mirrors: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/protesilaos/denote&#34;&gt;https://github.com/protesilaos/denote&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;GitLab: &lt;a href=&#34;https://gitlab.com/protesilaos/denote&#34;&gt;https://gitlab.com/protesilaos/denote&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;https://lists.sr.ht/~protesilaos/denote&#34;&gt;https://lists.sr.ht/~protesilaos/denote&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If our public media are not suitable, you are welcome to contact me (Protesilaos) in private: &lt;a href=&#34;https://protesilaos.com/contact&#34;&gt;https://protesilaos.com/contact&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright assignment is a prerequisite to sharing code. It is a simple process. Check the request form below (please adapt it accordingly). You must write an email to the address mentioned in the form and then wait for the FSF to send you a legal agreement. Sign the document and file it back to them. This could all happen via email and take about a week. You are encouraged to go through this process. You only need to do it once. It will allow you to make contributions to Emacs in general.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example text Please email the following information to &lt;a href=&#34;mailto:assign@gnu.org&#34;&gt;assign@gnu.org&lt;/a&gt;, and we will send you the assignment form for your past and future changes.&lt;/p&gt; &#xA;&lt;p&gt;Please use your full legal name (in ASCII characters) as the subject line of the message.&lt;/p&gt; &#xA;&lt;p&gt;REQUEST: SEND FORM FOR PAST AND FUTURE CHANGES&lt;/p&gt; &#xA;&lt;p&gt;[What is the name of the program or package you&#39;re contributing to?]&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs&lt;/p&gt; &#xA;&lt;p&gt;[Did you copy any files or text written by someone else in these changes? Even if that material is free software, we need to know about it.]&lt;/p&gt; &#xA;&lt;p&gt;Copied a few snippets from the same files I edited. Their author, Protesilaos Stavrou, has already assigned copyright to the Free Software Foundation.&lt;/p&gt; &#xA;&lt;p&gt;[Do you have an employer who might have a basis to claim to own your changes? Do you attend a school which might make such a claim?]&lt;/p&gt; &#xA;&lt;p&gt;[For the copyright registration, what country are you a citizen of?]&lt;/p&gt; &#xA;&lt;p&gt;[What year were you born?]&lt;/p&gt; &#xA;&lt;p&gt;[Please write your email address here.]&lt;/p&gt; &#xA;&lt;p&gt;[Please write your postal address here.]&lt;/p&gt; &#xA;&lt;p&gt;[Which files have you changed so far, and which new files have you written so far?]&lt;/p&gt; &#xA;&lt;p&gt;#+end_example&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Things to do :PROPERTIES: :CUSTOM_ID: h:044a6a0f-e382-4013-8279-8bf4e64e73c0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Denote should work well for what is described in this manual. Though we can always do better. These are some of the tasks that are planned for the future and which you might want to help with ([[#h:1ebe4865-c001-4747-a6f2-0fe45aad71cd][Contributing]]).&lt;/p&gt; &#xA;&lt;p&gt;This is a non-exhaustive list and you are always welcome to either report or work on something else.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Buttonize =denote:= links in Markdown and plain text, but not Org.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ensure integration between =denote:= links and Embark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add command that expands the identifier in links to a full name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add command that rewrites full names in links, if they are invalid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Consider completion-at-point after =denote:= links.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Experiment with switch to =id:= link type instead of =denote:=.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support mutually-exclusive sets of tags.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are just ideas. We need to consider the pros and cons in each case and act accordingly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives to Denote :PROPERTIES: :CUSTOM_ID: h:dbb51a1b-90b8-48e8-953c-e2fb3e36981e :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;What follows is a list of Emacs packages for note-taking. I (Protesilaos) have not used any of them, as I was manually applying my file-naming scheme beforehand and by the time those packages were available I was already hacking on the predecessor of Denote as a means of learning Emacs Lisp (a package which I called &#34;Unassuming Sidenotes of Little Significance&#34;, aka &#34;USLS&#34; which is pronounced as &#34;U-S-L-S&#34; or &#34;useless&#34;). As such, I cannot comment at length on the differences between Denote and each of those packages, beside what I gather from their documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/org-roam/org-roam][org-roam]] :: The de facto standard in the Emacs milieu---and rightly so! It has a massive community, is featureful, and should be an excellent companion to anyone who is invested in the Org ecosystem and/or knows what &#34;Roam&#34; is (I don&#39;t). It has been explained to me that Org Roam uses a database to store a cache about your notes. It otherwise uses standard Org files. The cache helps refer to the same node through aliases which can provide lots of options. Personally, I follow a single-topic-per-note approach, so anything beyond that is overkill. If the database is only for a cache, then maybe that has no downside, though I am careful with any kind of specialised program as it creates a dependency. If you ask me about database software in particular, I have no idea how to use one, let alone debug it or retrieve data from it if something goes awry (I could learn, but that is beside the point).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/localauthor/zk][zk (or zk.el)]] :: Reading its documentation makes me think that this is Denote&#39;s sibling or cousin---they have a lot of things in common, including the preference to rely on plain files and standard tools. One general difference is that Denote is trying to not replicate existing functionality, such as by not offering its own file index as a substitute for Dired or the minibuffer. Another potential difference is that Denote is not a zettelkasten implementation per se, though I am not sure how ZK interprets or enforces that methodology. In our case, Denote does not do zettelkasten (the user does it, if they want to); Denote primarily creates files with a unique identifier.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/ymherklotz/emacs-zettelkasten][zettelkasten]] :: This is another one of Denote&#39;s relatives, at least insofar as the goal of simplicity is concerned. The major difference is that according to its documentation &#34;the name of the file that is created is just a unique ID&#34;. This is not consistent with our file-naming scheme which is all about making sense of your files by their name alone and being able to visually parse a listing of them without any kind of specialised tool (e.g. =ls -l= or =ls -C= on the command-line from inside the &lt;del&gt;denote-directory&lt;/del&gt; give you a human-readable set of files names, while =find * -maxdepth 0 -type f= is another approach).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/EFLS/zetteldeft][zetteldeft]] :: This is a zettelkasten note-taking system built on top of the =deft= package. Deft provides a search interface to a directory, in this case the one holding the user&#39;s =zetteldeft= notes. Denote has no such dependency and is not opinionated about how the user prefers to search/access their notes: use Dired, Grep, the =consult= package, or whatever else you already have set up for all things Emacs, not just your notes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Searching through =M-x list-packages= for &#34;zettel&#34; brings up more matches. =zetteldesk= is an extension to Org Roam and, as such, I cannot possibly know what Org Roam truly misses and what the added-value of this package is. =neuron-mode= builds on top of an external program called =neuron=, which I have never used.&lt;/p&gt; &#xA;&lt;p&gt;Searching for &#34;note&#34; gives us a few more results. =notes-mode= has precious little documentation and I cannot tell what it actually does (as I said in my presentation for LibrePlanet 2022, inadequate docs are a bug). =side-notes= differs from what we try to do with Denote, as it basically gives you the means to record your thoughts about some other project you are working on and keep them on the side: so it and Denote should not be mutually exclusive.&lt;/p&gt; &#xA;&lt;p&gt;If I missed something, please let me know.&lt;/p&gt; &#xA;&lt;p&gt;** Alternative ideas wih Emacs and further reading :PROPERTIES: :CUSTOM_ID: h:188c0986-f2fa-444f-b493-5429356e75cf :END:&lt;/p&gt; &#xA;&lt;p&gt;This section covers blog posts from the Emacs community on the matter of note-taking. They may reference some of the packages covered in the previous section or provide their custom code ([[#h:dbb51a1b-90b8-48e8-953c-e2fb3e36981e][Alternatives to Denote]]). The list is unsorted.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;José Antonio Ortega Ruiz (aka &#34;jao&#34;) explains a note-taking method that is simple like Denote but differs in other ways. An interesting approach overall: &lt;a href=&#34;https://jao.io/blog/2022-06-19-simple-note-taking.html&#34;&gt;https://jao.io/blog/2022-06-19-simple-note-taking.html&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Jethro Kuan (the main =org-roam= developer) explains their note-taking techniques: &lt;a href=&#34;https://jethrokuan.github.io/org-roam-guide/&#34;&gt;https://jethrokuan.github.io/org-roam-guide/&lt;/a&gt;. Good ideas all round, regardless of the package/code you choose to use.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[ Development note: help expand this list. ]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Frequently Asked Questions :PROPERTIES: :CUSTOM_ID: h:da2944c6-cde6-4c65-8f2d-579305a159bb :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I (Protesilaos) answer some questions I have received or might get. It is assumed that you have read the rest of this manual: I will not go into the specifics of how Denote works.&lt;/p&gt; &#xA;&lt;p&gt;** Why develop Denote when PACKAGE already exists? :PROPERTIES: :CUSTOM_ID: h:b875450a-ae22-4899-ac23-c10fa9c279bb :END:&lt;/p&gt; &#xA;&lt;p&gt;I wrote Denote because I was using a variant of Denote&#39;s file-naming scheme before I was even an Emacs user (I switched to Emacs from Tmux+Vim+CLI in the summer of 2019). I was originally inspired by Jekyll, the static site generator, which I started using for my website in 2016 (was on WordPress before). Jekyll&#39;s files follow the =YYYY-MM-DD-TITLE.md= pattern. I liked its efficiency relative to the unstructured mess I had before. Eventually, I started using that scheme outside the confines of my website&#39;s source code. Over time I refined it and here we are.&lt;/p&gt; &#xA;&lt;p&gt;Note-taking is something I take very seriously, as I am a prolific writer (just check my website, which only reveals the tip of the iceberg). As such, I need a program that does exactly what I want and which I know how to extend. I originally tried to use Org capture templates to create new files with a Denote-style file-naming scheme but never managed to achieve it. Maybe because &lt;del&gt;org-capture&lt;/del&gt; has some hard-coded assumptions or I simply am not competent enough to hack on core Org facilities. Whatever the case, an alternative was in order.&lt;/p&gt; &#xA;&lt;p&gt;The existence of PACKAGE is never a good reason for me not to conduct my own experiments for recreational, educational, or practical purposes. Whether you should use Denote or not is another matter altogether: choose whatever you want.&lt;/p&gt; &#xA;&lt;p&gt;** Why not rely exclusively on Org? :PROPERTIES: :CUSTOM_ID: h:b9831849-5c71-484e-b444-bac19cc13151 :END:&lt;/p&gt; &#xA;&lt;p&gt;I think Org is one of Emacs&#39; killer apps. I also believe it is not the right tool for every job. When I write notes, I want to focus on writing. Nothing more. I thus have no need for stuff like org-babel, scheduling to-do items, clocking time, and so on. The more &#34;mental dependencies&#34; you add to your workflow, the heavier the burden you carry and the less focused you are on the task at hand.&lt;/p&gt; &#xA;&lt;p&gt;In technical terms, I also am not fond of Org&#39;s code base (I understand why it is the way it is---just commenting on the fact). Ever tried to read it? You will routinely find functions that are tens-to-hundreds of lines long and have all sorts of special casing. As I am not a programmer and only learnt to write Elisp through trial and error, I have no confidence in my ability to make Org do what I want at that level.&lt;/p&gt; &#xA;&lt;p&gt;Perhaps the master programmer is one who can deal with complexity and keep adding to it. I am of the opposite view as language---code included---is at its communicative best when it is clear and accessible.&lt;/p&gt; &#xA;&lt;p&gt;Make no mistake: I use Org for the agenda and also to write technical documentation that needs to be exported to various formats, including this very manual.&lt;/p&gt; &#xA;&lt;p&gt;** Why care about Unix tools when you use Emacs? :PROPERTIES: :CUSTOM_ID: h:da1e2469-8f04-450b-a379-a854efa80a36 :END:&lt;/p&gt; &#xA;&lt;p&gt;My notes form part of my longer-term storage. I do not want to have to rely on a special program to be able to read them or filter them. Unix is universal, at least as far as I am concerned.&lt;/p&gt; &#xA;&lt;p&gt;Denote streamlines some tasks and makes things easier in general, which is consistent with how Emacs provides a layer of interactivity on top of Unix. Still, Denote&#39;s utilities can, in principle, be implemented as POSIX shell scripts (minus the Emacs-specific parts like fontification in Dired or the buttonization of links).&lt;/p&gt; &#xA;&lt;p&gt;Portability matters. For example, in the future I might own a smartphone, so I prefer not to require Emacs, Org, or some other executable to access my files on the go.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, I might want to share those files with someone. If I make Emacs a requirement, I am limiting my circle to a handful of relatively advanced users.&lt;/p&gt; &#xA;&lt;p&gt;Please don&#39;t misinterpret this: I am using Emacs full-time for my computing and maintain a growing list of packages for it. This is just me thinking long-term.&lt;/p&gt; &#xA;&lt;p&gt;** Why many small files instead of few large ones? :PROPERTIES: :CUSTOM_ID: h:7d2e7b8a-d484-4c1d-8688-17f70f242ad7 :END:&lt;/p&gt; &#xA;&lt;p&gt;I have read that Org favours the latter method. If true, I strongly disagree with it because of the implicit dependency it introduces and the way it favours machine-friendliness over human-readability in terms of accessing information. Notes are long-term storage. I might want to access them on (i) some device with limited features, (ii) print on paper, (iii) share with another person who is not a tech wizard.&lt;/p&gt; &#xA;&lt;p&gt;There are good arguments for few large files, but all either prioritize machine-friendliness or presuppose the use of sophisticated tools like Emacs+Org.&lt;/p&gt; &#xA;&lt;p&gt;Good luck using =less= on a generic TTY to read a file with a zillion words, headings, sub-headings, sub-sub-headings, property drawers, and other constructs! You will not get the otherwise wonderful folding of headings the way you do in Emacs---do not take such features for granted.&lt;/p&gt; &#xA;&lt;p&gt;My point is that notes should be atomic to help the user---and potentially the user&#39;s family, friends, acquaintances---make sense of them in a wide range of scenaria. The more program-agnostic your file is, the better for you and/or everyone else you might share your writings with.&lt;/p&gt; &#xA;&lt;p&gt;Human-readability means that we optimize for what matters to us. If (a) you are the only one who will ever read your notes, (b) always have access to good software like Emacs+Org, (c) do not care about printing on paper, then Denote&#39;s model is not for you. Maybe you need to tweak some &lt;del&gt;org-capture&lt;/del&gt; template to append a new entry to one mega file (I do that for my Org agenda, by the way, as I explained before about using the right tool for the job).&lt;/p&gt; &#xA;&lt;p&gt;** I add TODOs to my files; will the many files slow down the Org agenda? :PROPERTIES: :CUSTOM_ID: h:63c2f8d4-79ed-4c55-b3ef-e048a05802c0 :END:&lt;/p&gt; &#xA;&lt;p&gt;I have not tested it, but assume that yes, many files will slow down the agenda. Consider looking into one of Denote&#39;s alternatives, with =org-roam= being the obvious choice ([[#h:dbb51a1b-90b8-48e8-953c-e2fb3e36981e][Alternatives to Denote]]).&lt;/p&gt; &#xA;&lt;p&gt;Or, if you want my opinion, decouple your longer-term storage from your ephemeral to-do list: Denote (and others) can be used for the former, while you let standard Org work splendidly for the latter---that is what I do, anyway.&lt;/p&gt; &#xA;&lt;p&gt;** I want to sort by last modified, why won&#39;t Denote let me? :PROPERTIES: :CUSTOM_ID: h:a7fd5e0a-78f7-434e-aa2e-e150479c16e2 :END:&lt;/p&gt; &#xA;&lt;p&gt;Denote does not sort files and will not reinvent tools that handle such functionality. This is the job of the file manager or command-line executable that lists files.&lt;/p&gt; &#xA;&lt;p&gt;I encourage you to read the manpage of the =ls= executable. It will help you in general, while it applies to Emacs as well via Dired. The gist is that you can update the =ls= flags that Dired uses on-the-fly: type =C-u M-x dired-sort-toggle-or-edit= (=C-u s= by default) and append =--sort=time= at the prompt. To reverse the order, add the =-r= flag. The user option &lt;del&gt;dired-listing-switches&lt;/del&gt; sets your default preference.&lt;/p&gt; &#xA;&lt;p&gt;** How do you handle the last modified case? :PROPERTIES: :CUSTOM_ID: h:764b5e87-cd22-4937-b5fc-af3892d6b3d8 :END:&lt;/p&gt; &#xA;&lt;p&gt;Denote does not insert any meta data or heading pertaining to edits in the file. I am of the view that these either do not scale well or are not descriptive enough. Suppose you use a &#34;lastmod&#34; heading with a timestamp: which lines where edited and what did the change amount to?&lt;/p&gt; &#xA;&lt;p&gt;This is where an external program can be helpful. Use a Version Control System, such as Git, to keep track of all your notes. Every time you add a new file, record the addition. Same for post-creation edits. Your VCS will let you review the history of those changes. For instance, Emacs&#39; built-in version control framework has a command that produces a log of changes for the current file: =M-x vc-print-log=, bound to =C-x v l= by default. From there one can access the corresponding diff output (use =M-x describe-mode= (=C-h m=) in an unfamiliar buffer to learn more about it). With Git in particular, Emacs users have the option of the all-round excellent =magit= package.&lt;/p&gt; &#xA;&lt;p&gt;In short: let Denote (or equivalent) create notes and link between them, the file manager organise and provide access to files, search programs deal with searching and narrowing, and version control software handle the tracking of changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgements :PROPERTIES: :CUSTOM_ID: h:f8126820-3b59-49fa-bcc2-73bd60132bb9 :END: #+cindex: Contributors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Denote is meant to be a collective effort. Every bit of help matters.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Author/maintainer :: Protesilaos Stavrou.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contributions to code or the manual :: Damien Cassou, Jack Baty, Kaushal Modi.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ideas and/or user feedback :: Damien Cassou, Frank Ehmsen, Jack Baty, Kaushal Modi, Sven Seebeck, Ypot.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special thanks to Peter Povinec who helped refine the file-naming scheme, which is the cornerstone of this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Free Documentation License :PROPERTIES: :APPENDIX: t :CUSTOM_ID: h:2d84e73e-c143-43b5-b388-a6765da974ea :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+texinfo: @include doclicense.texi&lt;/p&gt; &#xA;&lt;p&gt;#+begin_export html&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&#xA;                GNU Free Documentation License&#xA;                 Version 1.3, 3 November 2008&#xA;&#xA;&#xA; Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.&#xA;     &#xA; &lt;https: fsf.org /&gt;&#xA; Everyone is permitted to copy and distribute verbatim copies&#xA; of this license document, but changing it is not allowed.&#xA;&#xA;0. PREAMBLE&#xA;&#xA;The purpose of this License is to make a manual, textbook, or other&#xA;functional and useful document &#34;free&#34; in the sense of freedom: to&#xA;assure everyone the effective freedom to copy and redistribute it,&#xA;with or without modifying it, either commercially or noncommercially.&#xA;Secondarily, this License preserves for the author and publisher a way&#xA;to get credit for their work, while not being considered responsible&#xA;for modifications made by others.&#xA;&#xA;This License is a kind of &#34;copyleft&#34;, which means that derivative&#xA;works of the document must themselves be free in the same sense.  It&#xA;complements the GNU General Public License, which is a copyleft&#xA;license designed for free software.&#xA;&#xA;We have designed this License in order to use it for manuals for free&#xA;software, because free software needs free documentation: a free&#xA;program should come with manuals providing the same freedoms that the&#xA;software does.  But this License is not limited to software manuals;&#xA;it can be used for any textual work, regardless of subject matter or&#xA;whether it is published as a printed book.  We recommend this License&#xA;principally for works whose purpose is instruction or reference.&#xA;&#xA;&#xA;1. APPLICABILITY AND DEFINITIONS&#xA;&#xA;This License applies to any manual or other work, in any medium, that&#xA;contains a notice placed by the copyright holder saying it can be&#xA;distributed under the terms of this License.  Such a notice grants a&#xA;world-wide, royalty-free license, unlimited in duration, to use that&#xA;work under the conditions stated herein.  The &#34;Document&#34;, below,&#xA;refers to any such manual or work.  Any member of the public is a&#xA;licensee, and is addressed as &#34;you&#34;.  You accept the license if you&#xA;copy, modify or distribute the work in a way requiring permission&#xA;under copyright law.&#xA;&#xA;A &#34;Modified Version&#34; of the Document means any work containing the&#xA;Document or a portion of it, either copied verbatim, or with&#xA;modifications and/or translated into another language.&#xA;&#xA;A &#34;Secondary Section&#34; is a named appendix or a front-matter section of&#xA;the Document that deals exclusively with the relationship of the&#xA;publishers or authors of the Document to the Document&#39;s overall&#xA;subject (or to related matters) and contains nothing that could fall&#xA;directly within that overall subject.  (Thus, if the Document is in&#xA;part a textbook of mathematics, a Secondary Section may not explain&#xA;any mathematics.)  The relationship could be a matter of historical&#xA;connection with the subject or with related matters, or of legal,&#xA;commercial, philosophical, ethical or political position regarding&#xA;them.&#xA;&#xA;The &#34;Invariant Sections&#34; are certain Secondary Sections whose titles&#xA;are designated, as being those of Invariant Sections, in the notice&#xA;that says that the Document is released under this License.  If a&#xA;section does not fit the above definition of Secondary then it is not&#xA;allowed to be designated as Invariant.  The Document may contain zero&#xA;Invariant Sections.  If the Document does not identify any Invariant&#xA;Sections then there are none.&#xA;&#xA;The &#34;Cover Texts&#34; are certain short passages of text that are listed,&#xA;as Front-Cover Texts or Back-Cover Texts, in the notice that says that&#xA;the Document is released under this License.  A Front-Cover Text may&#xA;be at most 5 words, and a Back-Cover Text may be at most 25 words.&#xA;&#xA;A &#34;Transparent&#34; copy of the Document means a machine-readable copy,&#xA;represented in a format whose specification is available to the&#xA;general public, that is suitable for revising the document&#xA;straightforwardly with generic text editors or (for images composed of&#xA;pixels) generic paint programs or (for drawings) some widely available&#xA;drawing editor, and that is suitable for input to text formatters or&#xA;for automatic translation to a variety of formats suitable for input&#xA;to text formatters.  A copy made in an otherwise Transparent file&#xA;format whose markup, or absence of markup, has been arranged to thwart&#xA;or discourage subsequent modification by readers is not Transparent.&#xA;An image format is not Transparent if used for any substantial amount&#xA;of text.  A copy that is not &#34;Transparent&#34; is called &#34;Opaque&#34;.&#xA;&#xA;Examples of suitable formats for Transparent copies include plain&#xA;ASCII without markup, Texinfo input format, LaTeX input format, SGML&#xA;or XML using a publicly available DTD, and standard-conforming simple&#xA;HTML, PostScript or PDF designed for human modification.  Examples of&#xA;transparent image formats include PNG, XCF and JPG.  Opaque formats&#xA;include proprietary formats that can be read and edited only by&#xA;proprietary word processors, SGML or XML for which the DTD and/or&#xA;processing tools are not generally available, and the&#xA;machine-generated HTML, PostScript or PDF produced by some word&#xA;processors for output purposes only.&#xA;&#xA;The &#34;Title Page&#34; means, for a printed book, the title page itself,&#xA;plus such following pages as are needed to hold, legibly, the material&#xA;this License requires to appear in the title page.  For works in&#xA;formats which do not have any title page as such, &#34;Title Page&#34; means&#xA;the text near the most prominent appearance of the work&#39;s title,&#xA;preceding the beginning of the body of the text.&#xA;&#xA;The &#34;publisher&#34; means any person or entity that distributes copies of&#xA;the Document to the public.&#xA;&#xA;A section &#34;Entitled XYZ&#34; means a named subunit of the Document whose&#xA;title either is precisely XYZ or contains XYZ in parentheses following&#xA;text that translates XYZ in another language.  (Here XYZ stands for a&#xA;specific section name mentioned below, such as &#34;Acknowledgements&#34;,&#xA;&#34;Dedications&#34;, &#34;Endorsements&#34;, or &#34;History&#34;.)  To &#34;Preserve the Title&#34;&#xA;of such a section when you modify the Document means that it remains a&#xA;section &#34;Entitled XYZ&#34; according to this definition.&#xA;&#xA;The Document may include Warranty Disclaimers next to the notice which&#xA;states that this License applies to the Document.  These Warranty&#xA;Disclaimers are considered to be included by reference in this&#xA;License, but only as regards disclaiming warranties: any other&#xA;implication that these Warranty Disclaimers may have is void and has&#xA;no effect on the meaning of this License.&#xA;&#xA;2. VERBATIM COPYING&#xA;&#xA;You may copy and distribute the Document in any medium, either&#xA;commercially or noncommercially, provided that this License, the&#xA;copyright notices, and the license notice saying this License applies&#xA;to the Document are reproduced in all copies, and that you add no&#xA;other conditions whatsoever to those of this License.  You may not use&#xA;technical measures to obstruct or control the reading or further&#xA;copying of the copies you make or distribute.  However, you may accept&#xA;compensation in exchange for copies.  If you distribute a large enough&#xA;number of copies you must also follow the conditions in section 3.&#xA;&#xA;You may also lend copies, under the same conditions stated above, and&#xA;you may publicly display copies.&#xA;&#xA;&#xA;3. COPYING IN QUANTITY&#xA;&#xA;If you publish printed copies (or copies in media that commonly have&#xA;printed covers) of the Document, numbering more than 100, and the&#xA;Document&#39;s license notice requires Cover Texts, you must enclose the&#xA;copies in covers that carry, clearly and legibly, all these Cover&#xA;Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on&#xA;the back cover.  Both covers must also clearly and legibly identify&#xA;you as the publisher of these copies.  The front cover must present&#xA;the full title with all words of the title equally prominent and&#xA;visible.  You may add other material on the covers in addition.&#xA;Copying with changes limited to the covers, as long as they preserve&#xA;the title of the Document and satisfy these conditions, can be treated&#xA;as verbatim copying in other respects.&#xA;&#xA;If the required texts for either cover are too voluminous to fit&#xA;legibly, you should put the first ones listed (as many as fit&#xA;reasonably) on the actual cover, and continue the rest onto adjacent&#xA;pages.&#xA;&#xA;If you publish or distribute Opaque copies of the Document numbering&#xA;more than 100, you must either include a machine-readable Transparent&#xA;copy along with each Opaque copy, or state in or with each Opaque copy&#xA;a computer-network location from which the general network-using&#xA;public has access to download using public-standard network protocols&#xA;a complete Transparent copy of the Document, free of added material.&#xA;If you use the latter option, you must take reasonably prudent steps,&#xA;when you begin distribution of Opaque copies in quantity, to ensure&#xA;that this Transparent copy will remain thus accessible at the stated&#xA;location until at least one year after the last time you distribute an&#xA;Opaque copy (directly or through your agents or retailers) of that&#xA;edition to the public.&#xA;&#xA;It is requested, but not required, that you contact the authors of the&#xA;Document well before redistributing any large number of copies, to&#xA;give them a chance to provide you with an updated version of the&#xA;Document.&#xA;&#xA;&#xA;4. MODIFICATIONS&#xA;&#xA;You may copy and distribute a Modified Version of the Document under&#xA;the conditions of sections 2 and 3 above, provided that you release&#xA;the Modified Version under precisely this License, with the Modified&#xA;Version filling the role of the Document, thus licensing distribution&#xA;and modification of the Modified Version to whoever possesses a copy&#xA;of it.  In addition, you must do these things in the Modified Version:&#xA;&#xA;A. Use in the Title Page (and on the covers, if any) a title distinct&#xA;   from that of the Document, and from those of previous versions&#xA;   (which should, if there were any, be listed in the History section&#xA;   of the Document).  You may use the same title as a previous version&#xA;   if the original publisher of that version gives permission.&#xA;B. List on the Title Page, as authors, one or more persons or entities&#xA;   responsible for authorship of the modifications in the Modified&#xA;   Version, together with at least five of the principal authors of the&#xA;   Document (all of its principal authors, if it has fewer than five),&#xA;   unless they release you from this requirement.&#xA;C. State on the Title page the name of the publisher of the&#xA;   Modified Version, as the publisher.&#xA;D. Preserve all the copyright notices of the Document.&#xA;E. Add an appropriate copyright notice for your modifications&#xA;   adjacent to the other copyright notices.&#xA;F. Include, immediately after the copyright notices, a license notice&#xA;   giving the public permission to use the Modified Version under the&#xA;   terms of this License, in the form shown in the Addendum below.&#xA;G. Preserve in that license notice the full lists of Invariant Sections&#xA;   and required Cover Texts given in the Document&#39;s license notice.&#xA;H. Include an unaltered copy of this License.&#xA;I. Preserve the section Entitled &#34;History&#34;, Preserve its Title, and add&#xA;   to it an item stating at least the title, year, new authors, and&#xA;   publisher of the Modified Version as given on the Title Page.  If&#xA;   there is no section Entitled &#34;History&#34; in the Document, create one&#xA;   stating the title, year, authors, and publisher of the Document as&#xA;   given on its Title Page, then add an item describing the Modified&#xA;   Version as stated in the previous sentence.&#xA;J. Preserve the network location, if any, given in the Document for&#xA;   public access to a Transparent copy of the Document, and likewise&#xA;   the network locations given in the Document for previous versions&#xA;   it was based on.  These may be placed in the &#34;History&#34; section.&#xA;   You may omit a network location for a work that was published at&#xA;   least four years before the Document itself, or if the original&#xA;   publisher of the version it refers to gives permission.&#xA;K. For any section Entitled &#34;Acknowledgements&#34; or &#34;Dedications&#34;,&#xA;   Preserve the Title of the section, and preserve in the section all&#xA;   the substance and tone of each of the contributor acknowledgements&#xA;   and/or dedications given therein.&#xA;L. Preserve all the Invariant Sections of the Document,&#xA;   unaltered in their text and in their titles.  Section numbers&#xA;   or the equivalent are not considered part of the section titles.&#xA;M. Delete any section Entitled &#34;Endorsements&#34;.  Such a section&#xA;   may not be included in the Modified Version.&#xA;N. Do not retitle any existing section to be Entitled &#34;Endorsements&#34;&#xA;   or to conflict in title with any Invariant Section.&#xA;O. Preserve any Warranty Disclaimers.&#xA;&#xA;If the Modified Version includes new front-matter sections or&#xA;appendices that qualify as Secondary Sections and contain no material&#xA;copied from the Document, you may at your option designate some or all&#xA;of these sections as invariant.  To do this, add their titles to the&#xA;list of Invariant Sections in the Modified Version&#39;s license notice.&#xA;These titles must be distinct from any other section titles.&#xA;&#xA;You may add a section Entitled &#34;Endorsements&#34;, provided it contains&#xA;nothing but endorsements of your Modified Version by various&#xA;parties--for example, statements of peer review or that the text has&#xA;been approved by an organization as the authoritative definition of a&#xA;standard.&#xA;&#xA;You may add a passage of up to five words as a Front-Cover Text, and a&#xA;passage of up to 25 words as a Back-Cover Text, to the end of the list&#xA;of Cover Texts in the Modified Version.  Only one passage of&#xA;Front-Cover Text and one of Back-Cover Text may be added by (or&#xA;through arrangements made by) any one entity.  If the Document already&#xA;includes a cover text for the same cover, previously added by you or&#xA;by arrangement made by the same entity you are acting on behalf of,&#xA;you may not add another; but you may replace the old one, on explicit&#xA;permission from the previous publisher that added the old one.&#xA;&#xA;The author(s) and publisher(s) of the Document do not by this License&#xA;give permission to use their names for publicity for or to assert or&#xA;imply endorsement of any Modified Version.&#xA;&#xA;&#xA;5. COMBINING DOCUMENTS&#xA;&#xA;You may combine the Document with other documents released under this&#xA;License, under the terms defined in section 4 above for modified&#xA;versions, provided that you include in the combination all of the&#xA;Invariant Sections of all of the original documents, unmodified, and&#xA;list them all as Invariant Sections of your combined work in its&#xA;license notice, and that you preserve all their Warranty Disclaimers.&#xA;&#xA;The combined work need only contain one copy of this License, and&#xA;multiple identical Invariant Sections may be replaced with a single&#xA;copy.  If there are multiple Invariant Sections with the same name but&#xA;different contents, make the title of each such section unique by&#xA;adding at the end of it, in parentheses, the name of the original&#xA;author or publisher of that section if known, or else a unique number.&#xA;Make the same adjustment to the section titles in the list of&#xA;Invariant Sections in the license notice of the combined work.&#xA;&#xA;In the combination, you must combine any sections Entitled &#34;History&#34;&#xA;in the various original documents, forming one section Entitled&#xA;&#34;History&#34;; likewise combine any sections Entitled &#34;Acknowledgements&#34;,&#xA;and any sections Entitled &#34;Dedications&#34;.  You must delete all sections&#xA;Entitled &#34;Endorsements&#34;.&#xA;&#xA;&#xA;6. COLLECTIONS OF DOCUMENTS&#xA;&#xA;You may make a collection consisting of the Document and other&#xA;documents released under this License, and replace the individual&#xA;copies of this License in the various documents with a single copy&#xA;that is included in the collection, provided that you follow the rules&#xA;of this License for verbatim copying of each of the documents in all&#xA;other respects.&#xA;&#xA;You may extract a single document from such a collection, and&#xA;distribute it individually under this License, provided you insert a&#xA;copy of this License into the extracted document, and follow this&#xA;License in all other respects regarding verbatim copying of that&#xA;document.&#xA;&#xA;&#xA;7. AGGREGATION WITH INDEPENDENT WORKS&#xA;&#xA;A compilation of the Document or its derivatives with other separate&#xA;and independent documents or works, in or on a volume of a storage or&#xA;distribution medium, is called an &#34;aggregate&#34; if the copyright&#xA;resulting from the compilation is not used to limit the legal rights&#xA;of the compilation&#39;s users beyond what the individual works permit.&#xA;When the Document is included in an aggregate, this License does not&#xA;apply to the other works in the aggregate which are not themselves&#xA;derivative works of the Document.&#xA;&#xA;If the Cover Text requirement of section 3 is applicable to these&#xA;copies of the Document, then if the Document is less than one half of&#xA;the entire aggregate, the Document&#39;s Cover Texts may be placed on&#xA;covers that bracket the Document within the aggregate, or the&#xA;electronic equivalent of covers if the Document is in electronic form.&#xA;Otherwise they must appear on printed covers that bracket the whole&#xA;aggregate.&#xA;&#xA;&#xA;8. TRANSLATION&#xA;&#xA;Translation is considered a kind of modification, so you may&#xA;distribute translations of the Document under the terms of section 4.&#xA;Replacing Invariant Sections with translations requires special&#xA;permission from their copyright holders, but you may include&#xA;translations of some or all Invariant Sections in addition to the&#xA;original versions of these Invariant Sections.  You may include a&#xA;translation of this License, and all the license notices in the&#xA;Document, and any Warranty Disclaimers, provided that you also include&#xA;the original English version of this License and the original versions&#xA;of those notices and disclaimers.  In case of a disagreement between&#xA;the translation and the original version of this License or a notice&#xA;or disclaimer, the original version will prevail.&#xA;&#xA;If a section in the Document is Entitled &#34;Acknowledgements&#34;,&#xA;&#34;Dedications&#34;, or &#34;History&#34;, the requirement (section 4) to Preserve&#xA;its Title (section 1) will typically require changing the actual&#xA;title.&#xA;&#xA;&#xA;9. TERMINATION&#xA;&#xA;You may not copy, modify, sublicense, or distribute the Document&#xA;except as expressly provided under this License.  Any attempt&#xA;otherwise to copy, modify, sublicense, or distribute it is void, and&#xA;will automatically terminate your rights under this License.&#xA;&#xA;However, if you cease all violation of this License, then your license&#xA;from a particular copyright holder is reinstated (a) provisionally,&#xA;unless and until the copyright holder explicitly and finally&#xA;terminates your license, and (b) permanently, if the copyright holder&#xA;fails to notify you of the violation by some reasonable means prior to&#xA;60 days after the cessation.&#xA;&#xA;Moreover, your license from a particular copyright holder is&#xA;reinstated permanently if the copyright holder notifies you of the&#xA;violation by some reasonable means, this is the first time you have&#xA;received notice of violation of this License (for any work) from that&#xA;copyright holder, and you cure the violation prior to 30 days after&#xA;your receipt of the notice.&#xA;&#xA;Termination of your rights under this section does not terminate the&#xA;licenses of parties who have received copies or rights from you under&#xA;this License.  If your rights have been terminated and not permanently&#xA;reinstated, receipt of a copy of some or all of the same material does&#xA;not give you any rights to use it.&#xA;&#xA;&#xA;10. FUTURE REVISIONS OF THIS LICENSE&#xA;&#xA;The Free Software Foundation may publish new, revised versions of the&#xA;GNU Free Documentation License from time to time.  Such new versions&#xA;will be similar in spirit to the present version, but may differ in&#xA;detail to address new problems or concerns.  See&#xA;https://www.gnu.org/licenses/.&#xA;&#xA;Each version of the License is given a distinguishing version number.&#xA;If the Document specifies that a particular numbered version of this&#xA;License &#34;or any later version&#34; applies to it, you have the option of&#xA;following the terms and conditions either of that specified version or&#xA;of any later version that has been published (not as a draft) by the&#xA;Free Software Foundation.  If the Document does not specify a version&#xA;number of this License, you may choose any version ever published (not&#xA;as a draft) by the Free Software Foundation.  If the Document&#xA;specifies that a proxy can decide which future versions of this&#xA;License can be used, that proxy&#39;s public statement of acceptance of a&#xA;version permanently authorizes you to choose that version for the&#xA;Document.&#xA;&#xA;11. RELICENSING&#xA;&#xA;&#34;Massive Multiauthor Collaboration Site&#34; (or &#34;MMC Site&#34;) means any&#xA;World Wide Web server that publishes copyrightable works and also&#xA;provides prominent facilities for anybody to edit those works.  A&#xA;public wiki that anybody can edit is an example of such a server.  A&#xA;&#34;Massive Multiauthor Collaboration&#34; (or &#34;MMC&#34;) contained in the site&#xA;means any set of copyrightable works thus published on the MMC site.&#xA;&#xA;&#34;CC-BY-SA&#34; means the Creative Commons Attribution-Share Alike 3.0&#xA;license published by Creative Commons Corporation, a not-for-profit&#xA;corporation with a principal place of business in San Francisco,&#xA;California, as well as future copyleft versions of that license&#xA;published by that same organization.&#xA;&#xA;&#34;Incorporate&#34; means to publish or republish a Document, in whole or in&#xA;part, as part of another Document.&#xA;&#xA;An MMC is &#34;eligible for relicensing&#34; if it is licensed under this&#xA;License, and if all works that were first published under this License&#xA;somewhere other than this MMC, and subsequently incorporated in whole or&#xA;in part into the MMC, (1) had no cover texts or invariant sections, and&#xA;(2) were thus incorporated prior to November 1, 2008.&#xA;&#xA;The operator of an MMC Site may republish an MMC contained in the site&#xA;under CC-BY-SA on the same site at any time before August 1, 2009,&#xA;provided the MMC is eligible for relicensing.&#xA;&#xA;&#xA;ADDENDUM: How to use this License for your documents&#xA;&#xA;To use this License in a document you have written, include a copy of&#xA;the License in the document and put the following copyright and&#xA;license notices just after the title page:&#xA;&#xA;    Copyright (c)  YEAR  YOUR NAME.&#xA;    Permission is granted to copy, distribute and/or modify this document&#xA;    under the terms of the GNU Free Documentation License, Version 1.3&#xA;    or any later version published by the Free Software Foundation;&#xA;    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.&#xA;    A copy of the license is included in the section entitled &#34;GNU&#xA;    Free Documentation License&#34;.&#xA;&#xA;If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,&#xA;replace the &#34;with...Texts.&#34; line with this:&#xA;&#xA;    with the Invariant Sections being LIST THEIR TITLES, with the&#xA;    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.&#xA;&#xA;If you have Invariant Sections without Cover Texts, or some other&#xA;combination of the three, merge those two alternatives to suit the&#xA;situation.&#xA;&#xA;If your document contains nontrivial examples of program code, we&#xA;recommend releasing these examples in parallel under your choice of&#xA;free software license, such as the GNU General Public License,&#xA;to permit their use in free software.&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_export&lt;/p&gt; &#xA;&lt;p&gt;#+html: &amp;lt;!--&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Indices :PROPERTIES: :CUSTOM_ID: h:dd530040-de9d-4f2b-8dfd-d8b8f14c058e :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Function index :PROPERTIES: :INDEX: fn :CUSTOM_ID: h:317b8c20-6dc1-4390-a20a-d01d75a48ccb :END:&lt;/p&gt; &#xA;&lt;p&gt;** Variable index :PROPERTIES: :INDEX: vr :CUSTOM_ID: h:2f69d4fe-0804-4f7f-aa57-4e03e7f20d98 :END:&lt;/p&gt; &#xA;&lt;p&gt;** Concept index :PROPERTIES: :INDEX: cp :CUSTOM_ID: h:10365e44-2fc0-4b66-a613-682fea09ee68 :END:&lt;/p&gt; &#xA;&lt;p&gt;#+html: --&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alphapapa/org-super-agenda</title>
    <updated>2022-06-21T01:41:33Z</updated>
    <id>tag:github.com,2022-06-21:/alphapapa/org-super-agenda</id>
    <link href="https://github.com/alphapapa/org-super-agenda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Supercharge your Org daily/weekly agenda by grouping items&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: org-super-agenda&lt;/p&gt; &#xA;&lt;p&gt;#+PROPERTY: LOGGING nil&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;a href=&#34;https://melpa.org/#/org-super-agenda&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/org-super-agenda-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/org-super-agenda&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/org-super-agenda-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction :PROPERTIES: :TOC: ignore :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package lets you &#34;supercharge&#34; your Org daily/weekly agenda. The idea is to group items into sections, rather than having them all in one big list.&lt;/p&gt; &#xA;&lt;p&gt;Now you can sort-of do this already with custom agenda commands, but when you do that, you lose the daily/weekly aspect of the agenda: items are no longer shown based on deadline/scheduled timestamps, but are shown no-matter-what.&lt;/p&gt; &#xA;&lt;p&gt;So this package filters the results from &lt;del&gt;org-agenda-finalize-entries&lt;/del&gt;, which runs just before items are inserted into agenda views. It runs them through a set of filters that separate them into groups. Then the groups are inserted into the agenda buffer, and any remaining items are inserted at the end. Empty groups are not displayed.&lt;/p&gt; &#xA;&lt;p&gt;The end result is your standard daily/weekly agenda, but arranged into groups defined by you. You might put items with certain tags in one group, habits in another group, items with certain todo keywords in another, and items with certain priorities in another. The possibilities are only limited by the grouping functions.&lt;/p&gt; &#xA;&lt;p&gt;The primary use of this package is for the daily/weekly agenda, made by the &lt;del&gt;org-agenda-list&lt;/del&gt; command, but it also works for other agenda views, like &lt;del&gt;org-tags-view&lt;/del&gt;, &lt;del&gt;org-todo-list&lt;/del&gt;, &lt;del&gt;org-search-view&lt;/del&gt;, etc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :PROPERTIES: :TOC: this :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#screenshots][Screenshots]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#examples][Examples]]&lt;/li&gt; &#xA; &lt;li&gt;[[#group-selectors][Group selectors]]&lt;/li&gt; &#xA; &lt;li&gt;[[#tips][Tips]]&lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]]&lt;/li&gt; &#xA; &lt;li&gt;[[#changelog][Changelog]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots :PROPERTIES: :TOC: 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s what a normal agenda looks like:&lt;/p&gt; &#xA;&lt;p&gt;[[images/screenshots/screenshot-before.png]]&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what the &#34;super&#34; agenda looks like:&lt;/p&gt; &#xA;&lt;p&gt;[[images/screenshots/screenshot-after.png]]&lt;/p&gt; &#xA;&lt;p&gt;There are also a few [[images/screenshots/index.org][more screenshots]].&lt;/p&gt; &#xA;&lt;p&gt;** COMMENT Tasks :noexport: :PROPERTIES: :ID: 4ff94c53-a5c3-47ec-8bcb-76909f37ca2f :END:&lt;/p&gt; &#xA;&lt;p&gt;*** TODO Figure out how to exclude screenshots from info page but not GitHub rendering&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :TOC: 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** MELPA&lt;/p&gt; &#xA;&lt;p&gt;Just install the =org-super-agenda= package!&lt;/p&gt; &#xA;&lt;p&gt;** Manual installation&lt;/p&gt; &#xA;&lt;p&gt;If you want to install manually, you must also install these packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs &amp;gt;= 26.1&lt;/li&gt; &#xA; &lt;li&gt;=dash= &amp;gt;= 2.13&lt;/li&gt; &#xA; &lt;li&gt;=ht= &amp;gt;=2.2&lt;/li&gt; &#xA; &lt;li&gt;=org-mode= &amp;gt;= 9.0&lt;/li&gt; &#xA; &lt;li&gt;=s= &amp;gt;= 1.10&lt;/li&gt; &#xA; &lt;li&gt;=ts=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then put =org-super-agenda.el= in your =load-path=, and eval =(require &#39;org-super-agenda)=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :TOC: 1 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable &lt;del&gt;org-super-agenda-mode&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the variable &lt;del&gt;org-super-agenda-groups&lt;/del&gt; as desired (see example below).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; In order for groups to be automatically, persistently applied to all agenda buffers, the variable &lt;del&gt;org-super-agenda-groups&lt;/del&gt; /must be set in the global scope/ (e.g. with &lt;del&gt;setq&lt;/del&gt; in your init file, or using the customization interface). Alternatively, it can be &lt;del&gt;let&lt;/del&gt;-bound in lisp code that calls &lt;del&gt;org-agenda&lt;/del&gt; commands, but in that case, the setting /will not persist across agenda commands/ (so after refreshing an agenda buffer by pressing =g=, there will be no groups).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run an Org agenda command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the day with confidence, knowing that nothing important has been lost in the jumble of /ahem/ overdue items.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Examples&lt;/p&gt; &#xA;&lt;p&gt;At first you might feel bewildered by all the options. Never fear, [[examples.org][examples]] are here!&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the code for the screenshots above. You can test it quickly by evaluating this code block:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (let ((org-super-agenda-groups &#39;(;; Each group has an implicit boolean OR operator between its selectors. (:name &#34;Today&#34; ; Optionally specify section name :time-grid t ; Items that appear on the time grid :todo &#34;TODAY&#34;) ; Items that have this TODO keyword (:name &#34;Important&#34; ;; Single arguments given alone :tag &#34;bills&#34; :priority &#34;A&#34;) ;; Set order of multiple groups at once (:order-multi (2 (:name &#34;Shopping in town&#34; ;; Boolean AND group matches items that match all subgroups :and (:tag &#34;shopping&#34; :tag &#34;@town&#34;)) (:name &#34;Food-related&#34; ;; Multiple args given in list with implicit OR :tag (&#34;food&#34; &#34;dinner&#34;)) (:name &#34;Personal&#34; :habit t :tag &#34;personal&#34;) (:name &#34;Space-related (non-moon-or-planet-related)&#34; ;; Regexps match case-insensitively on the entire entry :and (:regexp (&#34;space&#34; &#34;NASA&#34;) ;; Boolean NOT also has implicit OR between selectors :not (:regexp &#34;moon&#34; :tag &#34;planet&#34;))))) ;; Groups supply their own section names when none are given (:todo &#34;WAITING&#34; :order 8) ; Set order of this section (:todo (&#34;SOMEDAY&#34; &#34;TO-READ&#34; &#34;CHECK&#34; &#34;TO-WATCH&#34; &#34;WATCHING&#34;) ;; Show this group at the end of the agenda (since it has the ;; highest number). If you specified this group last, items ;; with these todo keywords that e.g. have priority A would be ;; displayed in that group instead, because items are grouped ;; out in the order the groups are listed. :order 9) (:priority&amp;lt;= &#34;B&#34; ;; Show this section after &#34;Today&#34; and &#34;Important&#34;, because ;; their order is unspecified, defaulting to 0. Sections ;; are displayed lowest-number-first. :order 1) ;; After the last group, the agenda will display items that didn&#39;t ;; match any of these groups, with the default order position of 99 ))) (org-agenda nil &#34;a&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The groups apply to all agenda commands (at least, every one that calls &lt;del&gt;org-agenda-finalize-entries&lt;/del&gt;). You can set different groups for custom commands by setting &lt;del&gt;org-super-agenda-groups&lt;/del&gt; in the custom command&#39;s &lt;del&gt;settings&lt;/del&gt; list (see the description for &lt;del&gt;org-agenda-custom-commands&lt;/del&gt;). You can disable grouping by binding &lt;del&gt;org-super-agenda-groups&lt;/del&gt; to nil around a call to an agenda command, or you can disable it globally by disabling the mode.&lt;/p&gt; &#xA;&lt;p&gt;*** COMMENT Tasks :noexport:&lt;/p&gt; &#xA;&lt;p&gt;**** TODO Export examples to info page&lt;/p&gt; &#xA;&lt;p&gt;** Group selectors&lt;/p&gt; &#xA;&lt;p&gt;Each group selector creates a group in the agenda containing the items it matches and consumes those items; any items it doesn&#39;t match are passed to the next group selector. The selector &lt;del&gt;:discard&lt;/del&gt; is an exception: it consumes any items it matches without creating an agenda group and passes through the rest to the next selector.&lt;/p&gt; &#xA;&lt;p&gt;Each group selector takes an argument which can be a single atom or a list, e.g. &lt;del&gt;:tag&lt;/del&gt; takes a string or list of strings. Some selectors are predicates, like &lt;del&gt;:deadline&lt;/del&gt; or &lt;del&gt;:habit&lt;/del&gt;; for consistency, they also take an argument, but it is ignored.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The order of items may not be preserved after grouping due to the implementation&#39;s using hash tables. Future versions may address this shortcoming.&lt;/p&gt; &#xA;&lt;p&gt;*** Keywords&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:name= :: Optionally, set group name header. May be a string; or the symbol &lt;del&gt;none&lt;/del&gt;, in which case no header will be inserted. If &lt;del&gt;:name&lt;/del&gt; is not set at all, the group will be named automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:face&lt;/del&gt; :: A /face/ to apply to items in the group. If /face/ is a plist containing &lt;del&gt;:append t&lt;/del&gt;, it will be appended. See function &lt;del&gt;add-face-text-property&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:transformer&lt;/del&gt; :: Used to transform item strings before display. Either a function called with one argument, the item string, or a sexp, in which case the item string is bound to &lt;del&gt;it&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Special selectors&lt;/p&gt; &#xA;&lt;p&gt;Every selector requires an argument, even if it&#39;s just &lt;del&gt;t&lt;/del&gt;, e.g. &lt;del&gt;:anything&lt;/del&gt;, &lt;del&gt;:auto-category&lt;/del&gt;, &lt;del&gt;:auto-group&lt;/del&gt;, and &lt;del&gt;:discard&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:and= :: Group ITEMS that match all selectors in GROUP.&lt;/li&gt; &#xA; &lt;li&gt;=:anything= :: Select every item, no matter what. This is probably most useful with &lt;del&gt;:discard&lt;/del&gt;, because it doesn&#39;t actually test anything, so it&#39;s faster than, e.g. &lt;del&gt;:regexp &#34;.&#34;&lt;/del&gt;, which has to get the entry text for every item.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-category= :: This automatically groups items by their category (usually the filename it&#39;s in, without the =.org= suffix).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-dir-name&lt;/del&gt; :: This automatically groups items by the directory name of their source buffer.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-group= :: This selects items that have the =agenda-group= Org property set. By setting this property for a subtree, every item in it will be sorted into an agenda group by that name and placed into the agenda where the &lt;del&gt;:auto-group&lt;/del&gt; selector is ([[examples.org#automatically-by-group][example]]).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-map&lt;/del&gt; :: This automatically groups items by the value returned when applying each item to the given function as a string from the agenda buffer ([[examples.org#automatically-by-mapping-a-function][example]]). The function should return a string to be used as the grouping key and as the header for its group.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-outline-path= :: This automatically groups items by their outline path hierarchy, like =Plans/Take over the universe/Take over the moon=.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-parent&lt;/del&gt; :: This automatically groups items by their parent heading. This is surprisingly handy, especially if you group tasks hierarchically by project and use agenda restrictions to limit the agenda to a subtree.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-planning= :: This automatically groups items by their earliest of scheduled date or deadline, formatted according to variable &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-priority= :: This automatically groups items by their priority.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-property&lt;/del&gt; :: This automatically groups items by the value of the given property ([[examples.org#automatically-by-property][example]]).&lt;/li&gt; &#xA; &lt;li&gt;=:auto-tags= :: This automatically groups items by all of their tags (i.e. items with exactly the same tags, in any order, will be grouped together).&lt;/li&gt; &#xA; &lt;li&gt;=:auto-todo= :: This automatically groups items by their to-do keyword.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-ts&lt;/del&gt; :: This automatically groups items by the date of their latest timestamp anywhere in the entry, formatted according to variable &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:discard= :: Discard items that match selectors. Any groups processed after this one will not see discarded items. You might use this at the beginning or end of a list of groups, either to narrow down the list of items (used in combination with &lt;del&gt;:not&lt;/del&gt;), or to exclude items you&#39;re not interested in.&lt;/li&gt; &#xA; &lt;li&gt;=:not= :: Group ITEMS that match no selectors in GROUP. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that the &lt;del&gt;:not&lt;/del&gt; group selector /creates/ a group with items it /does not/ match; it can be combined with &lt;del&gt;:discard&lt;/del&gt; to discard items that /don&#39;t/ match. For example, &lt;del&gt;(:discard (:not (:priority &#34;A&#34;)))&lt;/del&gt; as the first selector would mean that only priority &lt;del&gt;A&lt;/del&gt; items would appear in the agenda, while &lt;del&gt;(:discard (:priority &#34;C&#34;))&lt;/del&gt; would mean that any priority &lt;del&gt;C&lt;/del&gt; items would not appear in the agenda.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=:order= :: A number setting the order sections will be displayed in the agenda, lowest number first. Defaults to =0=.&lt;/li&gt; &#xA; &lt;li&gt;=:order-multi= :: Set the order of multiple groups at once, like &lt;del&gt;(:order-multi (2 (groupA) (groupB) ...))&lt;/del&gt; to set the order of these groups to 2.&lt;/li&gt; &#xA; &lt;li&gt;=:take= :: Take the first N items in GROUP. If N is negative, take the last N items. For example, &lt;del&gt;(:take (-3 group))&lt;/del&gt; will take the last 3 items from the group. The remainder of items are discarded. Note: The order of entries from GROUP is not guaranteed to be preserved, so &lt;del&gt;:take&lt;/del&gt; may not always show expected entries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Normal selectors&lt;/p&gt; &#xA;&lt;p&gt;These selectors take one argument alone, or multiple arguments in a list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:category= :: Group items that match any of the given categories. Argument may be a string or list of strings.&lt;/li&gt; &#xA; &lt;li&gt;=:children= :: Select any item that has child entries. Argument may be &lt;del&gt;t&lt;/del&gt; to match if it has any children, &lt;del&gt;nil&lt;/del&gt; to match if it has no children, &lt;del&gt;todo&lt;/del&gt; to match if it has children with any to-do keywords, or a string to match if it has children with certain to-do keywords. You might use this to select items that are project top-level headings. Be aware that this may be very slow in non-daily/weekly agenda views because of its recursive nature.&lt;/li&gt; &#xA; &lt;li&gt;=:date= :: Group items that have a date associated. Argument can be =t= to match items with any date, =nil= to match items without a date, or =today= to match items with today’s date. The =ts-date= text-property is matched against.&lt;/li&gt; &#xA; &lt;li&gt;=:deadline= :: Group items that have a deadline. Argument can be &lt;del&gt;t&lt;/del&gt; (to match items with any deadline), &lt;del&gt;nil&lt;/del&gt; (to match items that have no deadline), &lt;del&gt;past&lt;/del&gt; (to match items with a deadline in the past), &lt;del&gt;today&lt;/del&gt; (to match items whose deadline is today), or &lt;del&gt;future&lt;/del&gt; (to match items with a deadline in the future). Argument may also be given like &lt;del&gt;before DATE&lt;/del&gt; or &lt;del&gt;after DATE&lt;/del&gt; where DATE is a date string that &lt;del&gt;org-time-string-to-absolute&lt;/del&gt; can process.&lt;/li&gt; &#xA; &lt;li&gt;=:effort&amp;lt;= :: Group items that are less than (or equal to) the given effort. Argument is a time-duration string, like &lt;del&gt;5&lt;/del&gt; or &lt;del&gt;0:05&lt;/del&gt; for 5 minutes.&lt;/li&gt; &#xA; &lt;li&gt;=:effort&amp;gt;= :: Group items that are higher than (or equal to) the given effort. Argument is a time-duration string, like &lt;del&gt;5&lt;/del&gt; or &lt;del&gt;0:05&lt;/del&gt; for 5 minutes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:file-path&lt;/del&gt; :: Group items whose buffers&#39; filename paths match any of the given regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=:habit= :: Group habit items (items which have a =STYLE: habit= Org property).&lt;/li&gt; &#xA; &lt;li&gt;=:heading-regexp= :: Group items whose headings match any of the given regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=:log= :: Group Agenda Log Mode items. Argument may be &lt;del&gt;close&lt;/del&gt; or &lt;del&gt;closed&lt;/del&gt; to select items closed today; &lt;del&gt;clock&lt;/del&gt; or &lt;del&gt;clocked&lt;/del&gt; to select items clocked today; &lt;del&gt;changed&lt;/del&gt; or &lt;del&gt;state&lt;/del&gt; to select items whose to-do state was changed today; &lt;del&gt;t&lt;/del&gt; to select any logged item, or &lt;del&gt;nil&lt;/del&gt; to select any non-logged item. (See also variable &lt;del&gt;org-agenda-log-mode-items&lt;/del&gt;.) Note that these items may also be matched by the &lt;del&gt;:time-grid&lt;/del&gt; selector, so if you want these displayed in their own group, you may need to select them in a group before a group containing the &lt;del&gt;:time-grid&lt;/del&gt; selector.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:pred&lt;/del&gt; :: Group items if any of the given predicate functions return non-nil when called with each item as a string from the agenda buffer ([[examples.org#by-predicate][example]]).&lt;/li&gt; &#xA; &lt;li&gt;=:priority= :: Group items that match any of the given priorities. Argument may be a string or list of strings, which should be the priority letter, e.g. &lt;del&gt;A&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:priority&amp;gt;= :: Group items that are higher than the given priority, e.g. &lt;del&gt;C&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:priority&amp;gt;== :: Group items that are higher than or equal to the given priority, e.g. &lt;del&gt;B&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:priority&amp;lt;= :: Group items that are lower than the given priority, e.g. &lt;del&gt;A&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:priority&amp;lt;== :: Group items that are lower than or equal to the given priority, e.g. &lt;del&gt;B&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:property= :: Group items with a property, optionally matching a value. Argument may be a property name string, or a list of property name string and either value string or predicate with which to test the value.&lt;/li&gt; &#xA; &lt;li&gt;=:regexp= :: Group items that match any of the given regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=:scheduled= :: Group items that are scheduled. Argument can be &lt;del&gt;t&lt;/del&gt; (to match items scheduled for any date), &lt;del&gt;nil&lt;/del&gt; (to match items that are not schedule), &lt;del&gt;past&lt;/del&gt; (to match items scheduled for the past), &lt;del&gt;today&lt;/del&gt; (to match items scheduled for today), or &lt;del&gt;future&lt;/del&gt; (to match items scheduled for the future). Argument may also be given like &lt;del&gt;before DATE&lt;/del&gt; or &lt;del&gt;after DATE&lt;/del&gt; where DATE is a date string that &lt;del&gt;org-time-string-to-absolute&lt;/del&gt; can process.&lt;/li&gt; &#xA; &lt;li&gt;=:tag= :: Group items that match any of the given tags. Argument may be a string or list of strings.&lt;/li&gt; &#xA; &lt;li&gt;=:time-grid= :: Group items that appear on the time grid.&lt;/li&gt; &#xA; &lt;li&gt;=:todo= :: Group items that match any of the given TODO keywords. Argument may be a string or list of strings, or &lt;del&gt;t&lt;/del&gt; to match any keyword, or &lt;del&gt;nil&lt;/del&gt; to match only non-todo items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tips&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An [[info:org-super-agenda][info page]] is included, with the contents of this readme file.&lt;/li&gt; &#xA; &lt;li&gt;Group headers use the keymap =org-super-agenda-header-map=, allowing you to bind keys in that map which will take effect when point is on a header. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example, [[https://github.com/gregsexton/origami.el][origami]] works with =org-super-agenda= buffers without any extra configuration. Just activate =origami-mode= in the agenda buffer and use the command =origami-toggle-node= to fold groups. You can bind, e.g. =TAB= to that command in the header map, and then you can easily collapse groups as if they were an outline. You might even fold some automatically ([[examples.org#automatically-fold-certain-groups-with-origami][example]]).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAQ :PROPERTIES: :TOC: 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Why are some items not displayed even though I used group selectors for them?&lt;/p&gt; &#xA;&lt;p&gt;This is a common misunderstanding of how this package works. As written in the introduction, it does not /collect/ items. It only /groups/ items that are collected by Org Agenda or =org-ql=. So if your Agenda command or =org-ql= query does not collect certain items, they will not be displayed, regardless of what =org-super-agenda= groups you configure.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/alphapapa/org-ql][org-ql]] provides an easier way to write queries to generate agenda-like views that can be grouped with =org-super-agenda=.&lt;/p&gt; &#xA;&lt;p&gt;** Why did a group disappear when I moved it to the end of the list?&lt;/p&gt; &#xA;&lt;p&gt;As explained in the usage instructions and shown in the example, items are collected into groups in the order the groups are listed, and empty groups are not shown. To display a group out of the order in which groups are listed, use =:order=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changelog :PROPERTIES: :TOC: 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.3-pre&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:property&lt;/del&gt;, which groups items with a property, optionally also matching a value or predicate. (Thanks to [[https://github.com/weipe][Per Weijnitz]].)&lt;/li&gt; &#xA; &lt;li&gt;Special selector &lt;del&gt;:take&lt;/del&gt;, which limits the number of items displayed in a group. (Thanks to [[https://github.com/pkazmier][Pete Kazmier]].)&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-hide-empty-groups&lt;/del&gt;, which hides empty groups. (Thanks to [[https://github.com/cslux][Christian Schwarzgruber]].)&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-keep-order&lt;/del&gt;, which re-sorts items after grouping to preserve their original sort order. (Thanks to [[https://github.com/Alexander-Miller][Alexander-Miller]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-planning&lt;/del&gt;, which groups items by their earliest of scheduled date or deadline, formatted according to variable &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-ts&lt;/del&gt;, which groups items by the date of their latest timestamp anywhere in the entry, formatted according to variable &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Selector =:auto-tags=, which groups items by all of their tags.&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;, used to format date headers in the &lt;del&gt;:auto-date&lt;/del&gt; selector.&lt;/li&gt; &#xA; &lt;li&gt;To-do keyword faces are applied to keywords in group headers.&lt;/li&gt; &#xA; &lt;li&gt;Option =org-super-agenda-header-separator= may also be a character, which is automatically repeated to the window width. (Thanks to [[https://github.com/sheepduke][YUE Daian]].)&lt;/li&gt; &#xA; &lt;li&gt;Option =org-super-agenda-header-properties=. It sets =org-agenda-structural-header= by default, which enables navigating to headers with the default =M-{= / =M-}= bindings in agenda buffers. (Thanks to [[https://github.com/haji-ali][Abdul-Lateef Haji-Ali]].)&lt;/li&gt; &#xA; &lt;li&gt;Option =org-super-agenda-header-prefix=, a string prepended to group headers. ([[https://github.com/alphapapa/org-super-agenda/issues/108][#108]]. Thanks to [[https://github.com/cslux][Christian Schwarzgruber]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Group headers face is now appended to face list instead of overriding it.&lt;/li&gt; &#xA; &lt;li&gt;Minimum Emacs version requirement is now 26.1 (required by =ts= library).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:children todo= group selection ([[https://github.com/alphapapa/org-super-agenda/issues/75][#75]]). (Thanks to [[https://github.com/bleggett][Ben Leggett]] and [[https://github.com/whirm][Elric Milon]].)&lt;/li&gt; &#xA; &lt;li&gt;=:children= group headings.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t show blank lines for disabled headers (i.e. with &lt;del&gt;:name none&lt;/del&gt; and =org-super-agenda-header-separator= set to an empty string). (Fixes [[https://github.com/alphapapa/org-super-agenda/issues/105][#105]]. Thanks to [[https://github.com/floscr][Florian Schrödl]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Updated&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tests updated for Org 9.2.4.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-habit= is now loaded when =org-super-agenda= is loaded. This avoids issues, real and potential, and should not cause any problems.&lt;/li&gt; &#xA; &lt;li&gt;Variable =org-super-agenda-allow-unsafe-groups= may be used to disable groups which call arbitrary functions (e.g. when called from other packages that may read code from untrusted origins).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.1.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Selector =:auto-dir-name= did not handle items without markers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keyword &lt;del&gt;:face&lt;/del&gt;, used to apply faces to items in groups.&lt;/li&gt; &#xA; &lt;li&gt;Keyword &lt;del&gt;:transformer&lt;/del&gt;, used to transform items in groups.&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-header-separator&lt;/del&gt;, which can, e.g. be set to an empty string for a more compact view. (Thanks to [[https://github.com/sdelafond][Sébastien Delafond]].)&lt;/li&gt; &#xA; &lt;li&gt;Face &lt;del&gt;org-super-agenda-header&lt;/del&gt;, which can be used to customize group headers. (Thanks to [[https://github.com/cslux][Christian Schwarzgruber]].)&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-map&lt;/del&gt;, which groups items by the value returned when applying items to a function.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:file-path&lt;/del&gt;, which groups items by regular expressions matched against their buffers&#39; filename paths.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:pred&lt;/del&gt;, which matches if any of the given predicate functions return non-nil when called with the item string from the agenda buffer.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-dir-name&lt;/del&gt;, which groups items by the directory name of their source buffer.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-parent&lt;/del&gt;, which groups items by their parent heading.&lt;/li&gt; &#xA; &lt;li&gt;Selector =:auto-todo=, which groups items by their to-do keyword.&lt;/li&gt; &#xA; &lt;li&gt;Selector =:auto-priority=, which groups items by their priority.&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-unmatched-name&lt;/del&gt;, used to change the name of the unmatched group. (Thanks to [[https://github.com/m-cat][Marcin Swieczkowski]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refactor auto-groups with macro.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0.3&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Require &lt;del&gt;seq&lt;/del&gt; library. (Fixes #54. Thanks to [[https://github.com/cryptorick][Rick Hanson]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Byte-compiler warnings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initialize &lt;del&gt;org-super-agenda-header-map&lt;/del&gt; to a copy of &lt;del&gt;org-agenda-mode-map&lt;/del&gt;. (Fixes [[https://github.com/alphapapa/org-super-agenda/issues/50][#50]]. Thanks to [[https://github.com/yiufung][Yiufung Cheong]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0.0&lt;/p&gt; &#xA;&lt;p&gt;First tagged version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development :PROPERTIES: :TOC: ignore :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributions and feedback are welcome.&lt;/p&gt; &#xA;&lt;p&gt;If you find this useful, I&#39;d appreciate if you would share a screenshot or two of your agenda views using it (minus any private data, of course). I&#39;d like to get ideas for how to better organize my agenda. :)&lt;/p&gt; &#xA;&lt;p&gt;** Bugs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The =org-search-view= agenda command does not seem to set the =todo-state= text property for items it finds, so the =:todo= selector doesn&#39;t work with it. We should be able to work around this by getting the todo state for each item manually, but we have to make sure that we only do that when necessary, otherwise it might be slow. And I wouldn&#39;t be surprised if there are other selectors that don&#39;t work with this or other commands, but =org-agenda-list= should work fine, and =org-tags-view= and =org-todo-list= seem to work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tests&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s easy to run the tests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install [[https://github.com/cask/cask][Cask]].&lt;/li&gt; &#xA; &lt;li&gt;From the repo root directory, run =cask install=, which installs Emacs and package dependencies into the =.cask= directory.&lt;/li&gt; &#xA; &lt;li&gt;Run =make test=.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Credits :PROPERTIES: :TOC: ignore :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to [[https://github.com/balajisivaraman][Balaji Sivaraman]] for contributing the =:category= selector.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to [[https://github.com/hmw42][Michael Welle]] for contributing the customizable =auto-group= Org property name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License :PROPERTIES: :TOC: ignore :COPYING: t :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPLv3+&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COMMENT Export Setup :noexport: :PROPERTIES: :TOC: ignore :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Much borrowed from Org&#39;s =org-manual.org=.&lt;/h1&gt; &#xA;&lt;p&gt;#+OPTIONS: broken-links:t *:t&lt;/p&gt; &#xA;&lt;p&gt;** Info export options&lt;/p&gt; &#xA;&lt;p&gt;#+TEXINFO_DIR_CATEGORY: Emacs #+TEXINFO_DIR_TITLE: Org Super Agenda: (org-super-agenda) #+TEXINFO_DIR_DESC: Flexible grouping for the Org Agenda&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: We could use these, but that causes a pointless error, &#34;org-compile-file: File &#34;..README.info&#34; wasn&#39;t produced...&#34;, so we just rename the files in the after-save-hook instead.&lt;/h1&gt; &#xA;&lt;h1&gt;#+TEXINFO_FILENAME: org-super-agenda.info&lt;/h1&gt; &#xA;&lt;h1&gt;#+EXPORT_FILE_NAME: org-super-agenda.texi&lt;/h1&gt; &#xA;&lt;p&gt;** File-local variables&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: Setting org-comment-string buffer-locally is a nasty hack to work around GitHub&#39;s org-ruby&#39;s HTML rendering, which does not respect noexport tags. The only way to hide this tree from its output is to use the COMMENT keyword, but that prevents Org from processing the export options declared in it. So since these file-local variables don&#39;t affect org-ruby, wet set org-comment-string to an unused keyword, which prevents Org from deleting this tree from the export buffer, which allows it to find the export options in it. And since org-export does respect the noexport tag, the tree is excluded from the info page.&lt;/h1&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;before-save-hook: org-make-toc&lt;/h1&gt; &#xA;&lt;h1&gt;after-save-hook: (lambda nil (when (and (require &#39;ox-texinfo nil t) (org-texinfo-export-to-info)) (delete-file &#34;README.texi&#34;) (rename-file &#34;README.info&#34; &#34;org-super-agenda.info&#34; t)))&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-initial-scope: buffer&lt;/h1&gt; &#xA;&lt;h1&gt;org-comment-string: &#34;NOTCOMMENT&#34;&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/lsp-treemacs</title>
    <updated>2022-06-21T01:41:33Z</updated>
    <id>tag:github.com,2022-06-21:/emacs-lsp/lsp-treemacs</id>
    <link href="https://github.com/emacs-lsp/lsp-treemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lsp-mode ❤️ treemacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://github.com/emacs-lsp/lsp-treemacs/actions][file:https://github.com/emacs-lsp/lsp-treemacs/workflows/CI/badge.svg]] [[https://melpa.org/#/lsp-treemacs][file:https://melpa.org/packages/lsp-treemacs-badge.svg]] [[https://stable.melpa.org/#/lsp-treemacs][file:https://stable.melpa.org/packages/lsp-treemacs-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :TOC_4_gh:noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#summary][Summary]]&lt;/li&gt; &#xA; &lt;li&gt;[[#synchronization][Synchronization]]&lt;/li&gt; &#xA; &lt;li&gt;[[#views][Views]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#lsp-treemacs-errors-list][lsp-treemacs-errors-list]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#commands][Commands]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#screenshot][Screenshot]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#lsp-treemacs-symbols][lsp-treemacs-symbols]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#screenshot-1][Screenshot]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#lsp-treemacs-referenceslsp-treemacs-implementations][lsp-treemacs-references/lsp-treemacs-implementations]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#screenshot-2][Screenshot]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#lsp-treemacs-call-hierarchy][lsp-treemacs-call-hierarchy]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#screenshot-3][Screenshot]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#lsp-treemacs-type-hierarchy][lsp-treemacs-type-hierarchy]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#lsp-treemacs-deps-list][lsp-treemacs-deps-list]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#commands-1][Commands]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#screenshot-4][Screenshot]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Summary Integration between [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] and [[https://github.com/Alexander-Miller/treemacs][treemacs]] and implementation of treeview controls using [[https://github.com/Alexander-Miller/treemacs][treemacs]] as a tree renderer.&lt;/li&gt; &#xA; &lt;li&gt;Synchronization To enable bidirectional synchronization of lsp workspace folders and [[https://github.com/Alexander-Miller/treemacs][treemacs]] projects. #+begin_src emacs-lisp (lsp-treemacs-sync-mode 1) #+end_src&lt;/li&gt; &#xA; &lt;li&gt;Views ** lsp-treemacs-errors-list Displays tree like error list structure. *** Commands *** Screenshot [[file:screenshots/error-list.png]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;lsp-treemacs-quick-fix&lt;/del&gt; or press &lt;del&gt;x&lt;/del&gt; when you are in Error List view - offer quickfixes for the error at point. ** lsp-treemacs-symbols Displays symbols information. *** Screenshot [[file:screenshots/symbols-list.gif]] ** lsp-treemacs-references/lsp-treemacs-implementations Display references/implementations using tree view: *** Screenshot [[file:screenshots/references.gif]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** lsp-treemacs-call-hierarchy Display call hierarchy. Use =C-u M-x lsp-treemacs-call-hierarchy= to display outgoing call hierarchy. *** Screenshot [[file:screenshots/call-hierarchy.gif]] ** lsp-treemacs-type-hierarchy Display type hierarchy. ** lsp-treemacs-deps-list Browse java dependencies, namespaces, files, etc. *** Commands - &lt;del&gt;lsp-treemacs-java-deps-follow&lt;/del&gt; - select the current editor in the dependency - &lt;del&gt;lsp-treemacs-java-deps-refresh&lt;/del&gt; - refresh the view. Bound to &lt;del&gt;r&lt;/del&gt;. *** Screenshot [[file:screenshots/dependencies.gif]]&lt;/p&gt;</summary>
  </entry>
</feed>