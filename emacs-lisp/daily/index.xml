<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-13T01:36:24Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Ziqi-Yang/peek</title>
    <updated>2023-07-13T01:36:24Z</updated>
    <id>tag:github.com,2023-07-13:/Ziqi-Yang/peek</id>
    <link href="https://github.com/Ziqi-Yang/peek" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create peek view below/above cursor point to show things. An Emacs Plugin.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Peek&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/made_with-emacs-purple&#34; alt=&#34;Static Badge&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sr.ht/~meow_king/peek/&#34;&gt;project&lt;/a&gt;/&lt;a href=&#34;https://sr.ht/~meow_king/peek/lists&#34;&gt;mailing lists&lt;/a&gt;/&lt;a href=&#34;https://sr.ht/~meow_king/peek/trackers&#34;&gt;tickets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package allow you to create a peek view below/above cursor point to show things.&lt;/p&gt; &#xA;&lt;p&gt;Note: this package is still in frequent updating, with function name changing possibly.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Peek view follows your cursor.&lt;/li&gt; &#xA; &lt;li&gt;Buffer and window local peek views. Also capable for content sharing between different buffer and windows.&lt;/li&gt; &#xA; &lt;li&gt;Store text of marked region, and then display it on the peek view.&lt;/li&gt; &#xA; &lt;li&gt;Peek the destination of &lt;code&gt;xref-find-definitions&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eldoc-message-function&lt;/code&gt; and &lt;code&gt;eldoc-display-functions&lt;/code&gt; integration.&lt;/li&gt; &#xA; &lt;li&gt;Scroll up or down inside peek view.&lt;/li&gt; &#xA; &lt;li&gt;live update&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ziqi-Yang/peek/main/demo.md&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Store marked region and peek it later:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Mark a region&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;peek-overlay-dwim&lt;/code&gt; to store the region&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;peek-overlay-dwim&lt;/code&gt; again to show a peek view of the marked content. You can use this command in other buffer/window to show the marked content.&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;peek-overlay-dwim&lt;/code&gt; to hidden the peek view.&lt;br&gt; Tips: You can make the peek view of the marked region automatically updated by customize &lt;code&gt;peek-live-update&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;. Or you want to manually update content, you can use &lt;code&gt;peek-view-refresh&lt;/code&gt; command. It should be noted that live updating/refreshing peek view can only be done when the source buffer(owns marked region) is alive.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find definition of a symbol.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;peek-xref-definition-dwim&lt;/code&gt; to show the definition at the cursor point in peek view.&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;peek-xref-definition-dwim&lt;/code&gt; again to hide the peek view. You can also use &lt;code&gt;peek-overlay-dwim&lt;/code&gt; to do this job.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Display eldoc for the symbol under cursor.&lt;br&gt; note: you need Emacs version &amp;gt;= 28.1&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Customize `peek-enable-eldoc-display-integration&#39; to t.&lt;/li&gt; &#xA;   &lt;li&gt;You may also want to remove other eldoc display functions&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(remove-hook &#39;eldoc-display-functions &#39;eldoc-display-in-buffer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;eldoc&lt;/code&gt; to diplay eldoc for the symbol under cursor.&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;peek-overlay-dwim&lt;/code&gt; to hide the peek view.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Display eldoc message&lt;br&gt; Customize &lt;code&gt;peek-enable-eldoc-message-integration&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; to enable the eldoc message integration. You may also want to customize &lt;code&gt;peek-eldoc-message-overlay-position&lt;/code&gt; too.&lt;br&gt; Note: &lt;code&gt;peek-overlay-eldoc-message-toggle-stauts&lt;/code&gt; function can be used to toggle whether the peek view for eldoc message will be shown.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scroll up/down in the peek view&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;M-n&lt;/code&gt;: peek-next-line&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;M-p&lt;/code&gt;: peek-prev-line&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package peek&#xA;  :straight (:type git :host sourcehut :repo &#34;meow_king/peek&#34;)&#xA;&#xA;  :custom&#xA;  ;; only list some mostly-want-changed settings &#xA;  (peek-overlay-window-size 11) ;; lines&#xA;  ;; one line before the place found by `xref-find-definitions&#39; will also appear in peek view &#xA;  (peek-xref-surrounding-above-lines 1)&#xA;  (peek-overlay-position &#39;above) ;; or below&#xA;  &#xA;  (peek-live-update t) ;; live update peek view of a marked region&#xA;&#xA;  (peek-enable-eldoc-message-integration t) ;; enable `eldoc-message-function&#39; integration&#xA;  ;; eldoc message overlay at two lines below the point&#xA;  ;; It&#39;s recommended to set the eldoc message overlay below the point since the pop up of&#xA;  ;; the peek overlay may cause visual shaking&#xA;  (peek-eldoc-message-overlay-position 2)&#xA;&#xA;  ;; enable `eldoc-display-functons&#39;  integration&#xA;  ;; note: you need Emacs version &amp;gt;= 28.1&#xA;  (peek-enable-eldoc-display-integration t)&#xA;&#xA;  :config&#xA;  (global-peek-mode 1)&#xA;&#xA;  ;; Keybindings &#xA;  ;; default keybindings in peek-mode-keymap&#xA;  (define-key peek-mode-keymap (kbd &#34;M-n&#34;) &#39;peek-next-line)&#xA;  (define-key peek-mode-keymap (kbd &#34;M-p&#34;) &#39;peek-prev-line)&#xA;  &#xA;  ;; or you can use `keymap-global-set&#39;, which is introduced in emacs 29&#xA;  (global-set-key (kbd &#34;C-x P p&#34;) #&#39;peek-overlay-dwim)&#xA;  (global-set-key (kbd &#34;C-x P d&#34;) #&#39;peek-xref-definition-dwim)&#xA;  (global-set-key (kbd &#34;C-x P m&#34;) #&#39;peek-overlay-eldoc-message-toggle-stauts)&#xA;  (global-set-key (kbd &#34;C-c c d&#34;) #&#39;eldoc)&#xA;  &#xA;  ;; Eldoc display setting&#xA;  ;; Besides making `peek-enable-eldoc-display-integration&#39; to t, you may want to remove&#xA;  ;;   other eldoc display functions.&#xA;  (remove-hook &#39;eldoc-display-functions &#39;eldoc-display-in-buffer)&#xA;  &#xA;  ;; you may also want to set scroll margin (see its docs)&#xA;  (setq scroll-margin 5))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All Customization Variables&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;code&gt;customize&lt;/code&gt; -&amp;gt; &lt;code&gt;peek&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Additional API&lt;/h3&gt; &#xA;&lt;p&gt;These API may be useful for advanced customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;eldoc-message-function&lt;/code&gt; related API: &lt;code&gt;peek-overlay-eldoc-message-toggle-stauts&lt;/code&gt;, &lt;code&gt;peek-overlay-eldoc-message-disable&lt;/code&gt;, &lt;code&gt;peek-overlay-eldoc-message-enable&lt;/code&gt;. Possible customization direction: for model editing mode like &lt;code&gt;evil&lt;/code&gt;, you can use these function to only enable displaying eldoc message overlay(peek view) when in &lt;em&gt;insert&lt;/em&gt; mode. Personally I use &lt;a href=&#34;https://github.com/meow-edit/meow&#34;&gt;meow&lt;/a&gt;, and this is my settings:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;meow-insert-enter-hook &#39;peek-overlay-eldoc-message-enable)&#xA;(add-hook &#39;meow-insert-exit-hook &#39;peek-overlay-eldoc-message-disable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;peek-overlay-set-custom-content&lt;/code&gt;, &lt;code&gt;peek-overlay-toggle&lt;/code&gt;, &lt;code&gt;peek-overlay-hide&lt;/code&gt;, &lt;code&gt;peek-overlay-show&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Future Plan&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Support &lt;code&gt;Child frame&lt;/code&gt;. (Currently &lt;code&gt;Peek&lt;/code&gt; only support &lt;code&gt;overlay&lt;/code&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;Pseudo &lt;code&gt;overlay&lt;/code&gt; that behaves like floating on the upper layer of the text (like child frame, so we have better terminal support). Maybe I should take a look at the source code of &lt;code&gt;corfu&lt;/code&gt; or &lt;code&gt;company&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;h4&gt;Overlay&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/universal-ctags/citre/raw/master/citre-ui-peek.el&#34;&gt;citre&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repo.or.cz/inline-docs.git/blob/HEAD:/inline-docs.el&#34;&gt;inline-docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;h4&gt;Overlay&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpitclaudel/quick-peek&#34;&gt;quick-peek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui/raw/master/lsp-ui-peek.el&#34;&gt;lsp-ui&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Child Frame&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tuhdo.github.io/emacs-frame-peek.html&#34;&gt;http://tuhdo.github.io/emacs-frame-peek.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tumashu/vertico-posframe/raw/main/vertico-posframe.el&#34;&gt;vertico-posframe&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>lewang/ws-butler</title>
    <updated>2023-07-13T01:36:24Z</updated>
    <id>tag:github.com,2023-07-13:/lewang/ws-butler</id>
    <link href="https://github.com/lewang/ws-butler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unobtrusively trim extraneous white-space *ONLY* in lines edited.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/lewang/ws-butler&#34;&gt;&lt;img src=&#34;https://travis-ci.org/lewang/ws-butler.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ws-butler -- an unobtrusive way to trim spaces from end of line&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Only lines touched get trimmed. If the white space at end of buffer is changed, then blank lines at the end of buffer are truncated respecting &lt;code&gt;require-final-newline&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Trimming only happens when saving.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What does unobtrusive mean?&lt;/h2&gt; &#xA;&lt;p&gt;The user is not made explicitly aware when trimming happens. You keep working and the butler takes care of whitespace for you.&lt;/p&gt; &#xA;&lt;p&gt;This means if point is at a location that was trimmed, point is not moved, but the data on disk has been cleaned up (revert the buffer to confirm).&lt;/p&gt; &#xA;&lt;h3&gt;Not moving point because of space deletion.&lt;/h3&gt; &#xA;&lt;p&gt;By default, ws-butler preserves &#34;virtual spaces&#34; in front of point if necessary. The file on disk is cleaned up however.&lt;/p&gt; &#xA;&lt;p&gt;This can be disabled with &lt;code&gt;ws-butler-keep-whitespace-before-point&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Trimming only specific lines.&lt;/h4&gt; &#xA;&lt;p&gt;There might be lines you don&#39;t want to get trimmed, e.g. spaces in multiline strings. The behavior can be customized through &lt;code&gt;ws-butler-trim-predicate&lt;/code&gt;. This variable should hold a function that expects 2 arguments (region beginning and end) and should return true only for regions that one wants to get trimmed. As an example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq ws-butler-trim-predicate&#xA;      (lambda (beg end)&#xA;        (not (eq &#39;font-lock-string-face&#xA;                 (get-text-property end &#39;face)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Debian 9 or later or Ubuntu 16.10 or later&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;apt-get install elpa-ws-butler&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;To use ws-butler, require it and add ws-butler-mode as a hook on any mode where you would like it to be enabled. For example, to enable for all programming language modes, add this to your .emacs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;ws-butler)&#xA;(add-hook &#39;prog-mode-hook #&#39;ws-butler-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use ws-butler-global-mode to turn it on everywhere.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;I started by trimming all spaces at EOL in source code in a &#34;write-file-hook&#34; when I started programming. It seemed like a great idea.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then I got a job working on a code base where no one else trimmed spaces, so my commits became super noisy. I wanted to stop being the &#34;white space&#34; police, so switched to &lt;a href=&#34;ftp://ftp.lysator.liu.se/pub/emacs/ws-trim.el&#34;&gt;ws-trim&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ws-trim works in a &lt;code&gt;post-command-hook&lt;/code&gt; and trims white space while you edit.&lt;/li&gt; &#xA;   &lt;li&gt;This was too eager for me. For example, I would stop and scroll away to look at some code, and when I get back to continue, my indentation is gone.&lt;/li&gt; &#xA;   &lt;li&gt;It caused some problems with other customizations which also rely on &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I started experimenting with using &lt;code&gt;highlight-changes-mode&lt;/code&gt; to trim only lines I touch on save.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, the dependency on &lt;code&gt;highlight-changes-mode&lt;/code&gt; has been removed and we handle change changing through text properties ourselves.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>