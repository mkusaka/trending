<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-30T01:34:08Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ppareit/graphviz-dot-mode</title>
    <updated>2022-08-30T01:34:08Z</updated>
    <id>tag:github.com,2022-08-30:/ppareit/graphviz-dot-mode</id>
    <link href="https://github.com/ppareit/graphviz-dot-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs mode for the DOT language, used by graphviz.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;graphviz-dot-mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt; package for working with &lt;a href=&#34;https://graphviz.org&#34;&gt;Graphviz&lt;/a&gt; DOT-format files.&lt;/p&gt; &#xA;&lt;p&gt;The features of this package help you to create &lt;code&gt;.dot&lt;/code&gt; or &lt;code&gt;.gv&lt;/code&gt; files containing syntax compatible with Graphviz and use Graphviz to convert these files to diagrams. &lt;a href=&#34;https://graphviz.org&#34;&gt;Graphviz&lt;/a&gt; is a set of open source graph visualization tools created by AT&amp;amp;T Labs Research. A graph is a way of representing information as a network of connected nodes (shapes) and edges (lines).&lt;/p&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;This of course depends on Emacs and Graphviz. Installation from the command prompt should be something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo dnf install emacs graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting up MELPA&lt;/h2&gt; &#xA;&lt;p&gt;Add the &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; archive to the list of archives used by the Emacs package manager by adding the following lines to your &lt;code&gt;.emacs&lt;/code&gt; or other Emacs start-up file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives&#xA;             &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;))&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluate above code or restart Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Setting up use-package&lt;/h2&gt; &#xA;&lt;p&gt;Add the &lt;a href=&#34;https://jwiegley.github.io/use-package/&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; package to your Emacs by adding the following lines to your start-up file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(unless (package-installed-p &#39;use-package)&#xA;  (package-refresh-contents)&#xA;  (package-install &#39;use-package))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluate above code or restart Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Setting up graphviz-dot-mode&lt;/h2&gt; &#xA;&lt;p&gt;Now you can finally add Graphviz support to your Emacs by adding the following lines to your start-up file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package graphviz-dot-mode&#xA;  :ensure t&#xA;  :config&#xA;  (setq graphviz-dot-indent-width 4))&#xA;&#xA;(use-package company-graphviz-dot&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Evaluate above code or restart Emacs.&lt;/p&gt; &#xA;&lt;h1&gt;Using &lt;code&gt;graphviz-dot-mode&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Once installation and setup is completed, usage is as simple as creating or opening a &lt;code&gt;.dot&lt;/code&gt; file with &lt;code&gt;C-x C-f&lt;/code&gt; (&lt;code&gt;find-file&lt;/code&gt;). The file will open in dot mode. Syntax should be highlighted, completion should work and viewing your work is only one keystroke away with &lt;code&gt;C-c C-p&lt;/code&gt;. Some useful commands are described below.&lt;/p&gt; &#xA;&lt;h3&gt;Indenting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-M-q&lt;/code&gt; (&lt;code&gt;graphviz-dot-indent-graph&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;This command will indent the graph, digraph, or subgraph at point and any subgraph within it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;TAB&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This key will automatically indent the line.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Completion&lt;/h3&gt; &#xA;&lt;p&gt;Completion makes use of &lt;a href=&#34;http://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;company-complete&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This command will complete the attribute or value keyword at point. If more than one completion is possible, a list with suggestions is displayed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commenting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-;&lt;/code&gt; (&lt;code&gt;comment-dwim&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;This command will perform the comment command you want (Do What I Mean). If the region is active and &lt;code&gt;transient-mark-mode&lt;/code&gt; is on, it will comment the region, unless it only consists of comments, in which case it will un-comment the region. Else, if the current line is empty, it will insert a blank comment line, otherwise it will append a comment to the line and indent it.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;C-u M-;&lt;/code&gt; to kill the comment on the current line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-x C-;&lt;/code&gt; (&lt;code&gt;comment-line&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;This command will comment or un-comment the current line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-j&lt;/code&gt; (&lt;code&gt;comment-indent-newline&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;This command will break line the at point and indent, continuing a comment if within one. This indents the body of the continued comment under the previous comment line.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-c&lt;/code&gt; (&lt;code&gt;compile&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;This command compiles the current dot file visited by the Emacs buffer. The output file is in the same directory and has the extension determined by the variable &lt;code&gt;graphviz-dot-preview-extension&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-x `&lt;/code&gt; (&lt;code&gt;next-error&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;This command will jump to the location in the source file of the next error from the most recent compile. Use &lt;code&gt;C-c c&lt;/code&gt; to compile first.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Viewing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-p&lt;/code&gt; (&lt;code&gt;graphviz-dot-preview&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;This command compiles and then (if it compiled successfully) shows the output of the current dot file visited by the Emacs buffer, provided that Emacs is running on a graphical display capable of displaying the graphic file output by &lt;code&gt;dot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;See &lt;code&gt;image-file-name-extensions&lt;/code&gt; to customize the graphic files that can be displayed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c v&lt;/code&gt; (&lt;code&gt;graphviz-dot-view&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;This command invokes an external viewer specified by the variable &lt;code&gt;graphviz-dot-view-command&lt;/code&gt;. If &lt;code&gt;graphviz-dot-view-edit-command&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;, you will be prompted to enter a new &lt;code&gt;graphviz-dot-view-command&lt;/code&gt;. If &lt;code&gt;graphviz-dot-save-before-view&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;, the buffer is saved before the external viewer command is invoked.&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://graphviz.gitlab.io/resources/&#34;&gt;https://graphviz.gitlab.io/resources/&lt;/a&gt; for a list of Graphviz viewers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Customizing&lt;/h1&gt; &#xA;&lt;p&gt;You may customize variables by typing&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x graphviz-dot-customize RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or by setting them to different values in your start-up file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;graphviz-dot-dot-program&lt;/code&gt; string, default: “dot”&lt;/p&gt; &lt;p&gt;This variable determines the command name (and path, if necessary) used to invoke the Graphviz &lt;code&gt;dot&lt;/code&gt; program. The &lt;code&gt;C-c C-c&lt;/code&gt; (&lt;code&gt;compile&lt;/code&gt;) function invokes this command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;graphviz-dot-preview-extension&lt;/code&gt; string, default “png”&lt;/p&gt; &lt;p&gt;This variable determines the file extension used for the &lt;code&gt;C-c C-c&lt;/code&gt; (&lt;code&gt;compile&lt;/code&gt;) and &lt;code&gt;C-c C-p&lt;/code&gt; (&lt;code&gt;graphviz-dot-preview&lt;/code&gt;) functions. The format for the compile command is&lt;/p&gt; &lt;p&gt;&lt;code&gt;dot -T&amp;lt;extension&amp;gt; &amp;lt;filename&amp;gt;.dot &amp;gt; &amp;lt;filename&amp;gt;.&amp;lt;extension&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;graphviz-dot-save-before-view&lt;/code&gt; boolean, default &lt;code&gt;t&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This variable controls whether the buffer will be saved to the visited file before the &lt;code&gt;C-c C-v&lt;/code&gt; (&lt;code&gt;graphviz-dot-view&lt;/code&gt;) function invokes the external dot-file viewer command. Set this boolean variable to &lt;code&gt;t&lt;/code&gt; (true) or &lt;code&gt;nil&lt;/code&gt; (false).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;graphviz-dot-view-command&lt;/code&gt; string, default: “dotty %s”&lt;/p&gt; &lt;p&gt;This variable determines the command name (and path, if necessary) used to invoke an external dot-file viewer program. The &lt;code&gt;C-c C-v&lt;/code&gt; (&lt;code&gt;graphviz-dot-view&lt;/code&gt;) function invokes this command. The name of the file visited by the buffer will be substituted for &lt;code&gt;%s&lt;/code&gt; in this string.&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://graphviz.gitlab.io/resources/&#34;&gt;https://graphviz.gitlab.io/resources/&lt;/a&gt; for a list of Graphviz viewers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;graphviz-dot-view-edit-command&lt;/code&gt; boolean, default: &lt;code&gt;nil&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This variable controls whether you will be prompted for the external dot-file viewer command name when you use &lt;code&gt;C-c C-v&lt;/code&gt; &lt;code&gt;graphviz-dot-view&lt;/code&gt;. Set this to &lt;code&gt;t&lt;/code&gt; (true) to be prompted to edit the viewer command variable &lt;code&gt;graphviz-dot-view-command&lt;/code&gt; every time you use &lt;code&gt;C-c C-v&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; to avoid the prompt.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;graphviz-dot-indent-width&lt;/code&gt; integer, default: &lt;code&gt;default-tab-width&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This variable determines the indentation used in &lt;code&gt;graphviz-dot-mode&lt;/code&gt; buffers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;graphviz-dot-mode-hook&lt;/code&gt; list of functions, default: &lt;code&gt;nil&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This variable determines which functions are called when &lt;code&gt;graphviz-dot-mode&lt;/code&gt; starts. To use it, add a line like below to your &lt;code&gt;.emacs&lt;/code&gt; or other startup file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;graphviz-dot-mode-hook &#39;my-hook)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Issues, requests and questions can go on its issue tracker: &lt;a href=&#34;https://github.com/ppareit/graphviz-dot-mode/issues&#34;&gt;https://github.com/ppareit/graphviz-dot-mode/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;This mode is maintained at its github page: &lt;a href=&#34;https://github.com/ppareit/graphviz-dot-mode&#34;&gt;https://github.com/ppareit/graphviz-dot-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can support the maintainer through a &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ZBVLYKWYMXQ3G&#34;&gt;paypal donation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;graphviz-dot-mode&lt;/code&gt; was written by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pieter Pareit &lt;a href=&#34;mailto:pieter.pareit@gmail.com&#34;&gt;pieter.pareit@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rubens Ramos &lt;a href=&#34;mailto:rubensr@users.sourceforge.net&#34;&gt;rubensr@users.sourceforge.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eric Anderson &lt;a href=&#34;http://www.ece.cmu.edu/~andersoe/&#34;&gt;http://www.ece.cmu.edu/~andersoe/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Daniel Birket &lt;a href=&#34;mailto:danielb@birket.com&#34;&gt;danielb@birket.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other contributors are noted in the version history in the &lt;code&gt;graphviz-dot-mode.el&lt;/code&gt; file and the commit history on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;The source code is maintained on GitHub at &lt;a href=&#34;https://github.com/ppareit/graphviz-dot-mode&#34;&gt;https://github.com/ppareit/graphviz-dot-mode&lt;/a&gt; by Pieter Pareit (&lt;a href=&#34;mailto:pieter.pareit@gmail.com&#34;&gt;pieter.pareit@gmail.com&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-helm/helm</title>
    <updated>2022-08-30T01:34:08Z</updated>
    <id>tag:github.com,2022-08-30:/emacs-helm/helm</id>
    <link href="https://github.com/emacs-helm/helm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs incremental completion and selection narrowing framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/helm&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/helm-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/helm&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/helm-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/emacs-helm/helm&#34;&gt;&lt;img alt=&#34;Travis CI&#34; src=&#34;https://travis-ci.org/emacs-helm/helm.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Emacs-Helm&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/1541688?v=3&amp;amp;s=200&#34; alt=&#34;Emacs-helm&#34; title=&#34;&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;justify&#34;&gt; &lt;b&gt;Helm&lt;/b&gt; is an Emacs framework for incremental completions and narrowing selections. It provides an easy-to-use API for developers wishing to build their own Helm applications in Emacs, powerful search tools and dozens of already built-in commands providing completion to almost everything. It is a must-have for anyone using Emacs as a main work environment. Helm has been widely adopted by many Emacs power-users. It is available in Melpa and can be easily installed from the Emacs package manager. &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://emacs-helm.github.io/helm/&#34;&gt;&lt;b&gt;Homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/emacs-helm/helm/releases&#34;&gt;&lt;b&gt;Downloads&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/emacs-helm/helm/wiki#install&#34;&gt;&lt;b&gt;Get started&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/emacs-helm/helm/wiki&#34;&gt;&lt;b&gt;Helm wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/emacs-helm/helm/wiki/FAQ&#34;&gt;&lt;b&gt;FAQ&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Helm in action searching with &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34; &lt;b&gt;Grep Ag&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/emacs-helm/helm/raw/master/images/helm-grep-ag-persistent.png?raw=true&#34; alt=&#34;Emacs-helm grep ag&#34; title=&#34;&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/closql</title>
    <updated>2022-08-30T01:34:08Z</updated>
    <id>tag:github.com,2022-08-30:/emacscollective/closql</id>
    <link href="https://github.com/emacscollective/closql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Store EIEIO objects using EmacSQL&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Store EIEIO objects using EmacSQL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Store uniform [[https://www.gnu.org/software/emacs/manual/html_node/eieio/index.html][EIEIO]] objects in an [[https://github.com/skeeto/emacsql][EmacSQL]] database. [[https://www.sqlite.org][SQLite]] is used as backend. This library imposes some restrictions on what kind of objects can be stored; it isn&#39;t intended to store arbitrary objects. All objects have to share a common superclass and subclasses cannot add any additional instance slots.&lt;/p&gt;</summary>
  </entry>
</feed>