<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-02T01:35:28Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-elsa/Elsa</title>
    <updated>2023-07-02T01:35:28Z</updated>
    <id>tag:github.com,2023-07-02:/emacs-elsa/Elsa</id>
    <link href="https://github.com/emacs-elsa/Elsa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Lisp Static Analyzer and gradual type system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/nashamri/elsa-logo/master/elsa-logo-transparent.png&#34; width=&#34;133&#34; height=&#34;100&#34;&gt; Elsa - Emacs Lisp Static Analyser &lt;a href=&#34;https://github.com/emacs-elsa/Elsa/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-elsa/Elsa/actions/workflows/test.yml/badge.svg?branch=master&#34; alt=&#34;test&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;(Your favourite princess now in Emacs!)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/github/emacs-elsa/Elsa?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/emacs-elsa/Elsa/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=A5PMGVKCQBT88&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-Donate-orange.svg?logo=paypal&#34; alt=&#34;Paypal logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/user?u=3282358&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Patreon-Become%20a%20patron-orange.svg?logo=patreon&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Elsa is a tool that analyses your code without loading or running it. It is 100% side-effect free and we strive to keep it that way, so you can analyse any elisp code from anywhere safely.&lt;/p&gt; &#xA;&lt;p&gt;Elsa adds a powerful type system on top of Emacs lisp (completely optional). In can track types and provide helpful hints when things don&#39;t match up before you even try to run the code.&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#state-of-the-project&#34;&gt;State of the project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#non-exhaustive-list-of-features&#34;&gt;Non-exhaustive list of features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#detect-dead-code&#34;&gt;Detect dead code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#enforce-style-rules&#34;&gt;Enforce style rules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#look-for-suspicious-code&#34;&gt;Look for suspicious code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#track-types-of-expressions&#34;&gt;Track types of expressions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#understand-functional-overloads&#34;&gt;Understand functional overloads&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#how-do-i-run-it&#34;&gt;How do I run it&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#eask&#34;&gt;Eask&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#cask&#34;&gt;Cask&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#language-server-protocol-lsp&#34;&gt;Language server protocol (LSP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#makemsh&#34;&gt;makem.sh&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#emake&#34;&gt;EMake&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#flycheckflymake-integration&#34;&gt;Flycheck/Flymake integration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#analysis-extension&#34;&gt;Analysis extension&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#rulesets&#34;&gt;Rulesets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#type-annotations&#34;&gt;Type annotations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#how-can-i-contribute-to-this-project&#34;&gt;How can I contribute to this project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#faq&#34;&gt;F.A.Q.&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#whats-up-with-the-logo&#34;&gt;What&#39;s up with the logo?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#for-developers&#34;&gt;For developers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#how-to-write-an-extension-for-your-favourite-package&#34;&gt;How to write an extension for your-favourite-package&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#how-to-write-a-ruleset&#34;&gt;How to write a ruleset&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;Dynamic programming languages, such as Emacs Lisp, JavaScript and Python, have many advantages over statically typed languages like Java or C++. They allow for faster development and prototyping due to their dynamic nature, which makes it easier to write and test code quickly.&lt;/p&gt; &#xA;&lt;p&gt;However, dynamic languages lack the type checking and safety features that statically typed languages provide. This can lead to errors that are difficult to catch during development and can cause issues in production. By adding a type system on top of a dynamic language, we can enjoy the benefits of both dynamic and static languages.&lt;/p&gt; &#xA;&lt;p&gt;Elsa is a type system and analyser for Emacs Lisp, which aims to provide the benefits of a type system while retaining the flexibility and expressiveness of Lisp. It is similar to TypeScript for JavaScript or Python Type Hints for Python in that it provides a way to add static type checking to a dynamically typed language.&lt;/p&gt; &#xA;&lt;p&gt;Elsa tries to be idiomatic and use as much available information as possible, such as edebug declarations, defmethod specializers or EIEIO class slot types, so the amount of code that needs to be annotated is minimized.&lt;/p&gt; &#xA;&lt;h1&gt;State of the project&lt;/h1&gt; &#xA;&lt;p&gt;We are currently in a &lt;em&gt;beta&lt;/em&gt; phase. API, the type system and annotations are quite stable. We support multiple ways to install and run the analyser.&lt;/p&gt; &#xA;&lt;p&gt;Elsa lacks a lot of type annotations for built-in functions (there is about 1500 of them) and variables. The analysis results are therefore still sub optimal.&lt;/p&gt; &#xA;&lt;p&gt;Things might still break at any point.&lt;/p&gt; &#xA;&lt;h1&gt;Non-exhaustive list of features&lt;/h1&gt; &#xA;&lt;p&gt;Here comes a non-exhaustive list of some more interesting features.&lt;/p&gt; &#xA;&lt;p&gt;The error highlightings in the screenshots are provided by &lt;a href=&#34;https://github.com/emacs-elsa/flycheck-elsa&#34;&gt;Elsa Flycheck extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Everything you see here actually works, this is not just for show!&lt;/p&gt; &#xA;&lt;h2&gt;Detect dead code&lt;/h2&gt; &#xA;&lt;h3&gt;Detect suspicious branching logic&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/dead-code-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/dead-code-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Find unreachable code in short-circuiting forms&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/unreachable-code-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Enforce style rules&lt;/h2&gt; &#xA;&lt;h3&gt;Provide helpful tips for making code cleaner&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/useless-code-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/useless-code-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Add custom rules for your own project with rulesets&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/custom-ruleset-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make formatting consistent&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/formatting-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Look for suspicious code&lt;/h2&gt; &#xA;&lt;h3&gt;Find references to free/unbound variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/unbound-variable-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t assign to free variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/unbound-variable-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Detect conditions which are always true or false&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/always-nil-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/always-non-nil-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make sure functions are passed enough arguments&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/number-of-args-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make sure functions are not passed too many arguments&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/number-of-args-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Track types of expressions&lt;/h2&gt; &#xA;&lt;h3&gt;Check types of arguments passed to functions for compatibility&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/type-inference-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/type-inference-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/type-inference-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Understand type narrowing from type guards and predicates&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/useless-narrowing-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/useless-narrowing-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Understand functional overloads&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;downcase&lt;/code&gt; can take a string and return a string or take an int and return an int. Because we pass a string variable &lt;code&gt;s&lt;/code&gt;, we can disambiguate which overload of the function must be used and we can derive the return type of the function as &lt;code&gt;string&lt;/code&gt; instead of &lt;code&gt;(or string int)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/functional-deps-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If we pass an input which doesn&#39;t match any overload, Elsa will show a helpful report of what overloads are available and what argument didn&#39;t match.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/images/functional-deps-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How do I run it&lt;/h1&gt; &#xA;&lt;p&gt;Elsa can be run with &lt;a href=&#34;https://github.com/emacs-eask/cli&#34;&gt;Eask&lt;/a&gt;, &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt;, &lt;a href=&#34;https://github.com/alphapapa/makem.sh&#34;&gt;makem.sh&lt;/a&gt; or &lt;a href=&#34;https://github.com/vermiculus/emake.el&#34;&gt;EMake&lt;/a&gt;. Before you can perform analysis, see the &lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/#configuration&#34;&gt;Configuration&lt;/a&gt; section on how to configure the project.&lt;/p&gt; &#xA;&lt;p&gt;Elsa project provides support for the Eask, Cask and LSP methods. For makem.sh and EMake support, contact the authors of those packages directly.&lt;/p&gt; &#xA;&lt;p&gt;If you use Eask or Cask, you can use Flycheck and Flymake integrations (see below).&lt;/p&gt; &#xA;&lt;p&gt;In addition, Elsa also implements Language Server Protocol (LSP) and can be used with &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/&#34;&gt;lsp-mode&lt;/a&gt;. This is the best option because all the state is cached in the server and all the operations are very fast. LSP also exposes features of Elsa otherwise not available, such as completion (via &lt;code&gt;lsp-completion-mode&lt;/code&gt;) or contextual hover type information.&lt;/p&gt; &#xA;&lt;p&gt;The following table summarizes the options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Eask&lt;/th&gt; &#xA;   &lt;th&gt;Cask&lt;/th&gt; &#xA;   &lt;th&gt;makem.sh&lt;/th&gt; &#xA;   &lt;th&gt;EMake&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stand-alone analysis from CLI&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flycheck integration&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;⨯&lt;/td&gt; &#xA;   &lt;td&gt;⨯&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flymake integration&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;⨯&lt;/td&gt; &#xA;   &lt;td&gt;⨯&lt;/td&gt; &#xA;   &lt;td&gt;⨯&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Language Server Protocol (LSP)&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;⨯&lt;/td&gt; &#xA;   &lt;td&gt;⨯&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when you run Elsa in a project for the first time, it is recommended to start it from the CLI because it will need to crawl all the dependencies you use and save the analysis results to cache files. This can take a couple of minutes if you have many dependencies (or if you include something like &lt;code&gt;org&lt;/code&gt; which pulls in about 300 other packages).&lt;/p&gt; &#xA;&lt;p&gt;After the results are cached, next time you need them Elsa can load them from cache and this is generally very fast.&lt;/p&gt; &#xA;&lt;p&gt;You can start the LSP right away but it will be unresponsive during the time it is doing the initial analysis.&lt;/p&gt; &#xA;&lt;h2&gt;Eask&lt;/h2&gt; &#xA;&lt;h3&gt;[RECOMMENDED] Using packaged version (via &lt;code&gt;lint&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to execute Elsa with &lt;a href=&#34;https://github.com/emacs-eask/cli&#34;&gt;Eask&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eask lint elsa [PATTERNS]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;[PATTERNS]&lt;/code&gt; is optional; the default will lint all your package files.&lt;/p&gt; &#xA;&lt;h3&gt;[RECOMMENDED] Using packaged version (via &lt;code&gt;exec&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;This method uses &lt;a href=&#34;https://github.com/emacs-eask/cli&#34;&gt;Eask&lt;/a&gt; and installs Elsa from &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(depends-on &#34;elsa&#34;)&lt;/code&gt; to &lt;code&gt;Eask&lt;/code&gt; file of your project.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;eask install-deps&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eask exec elsa FILE-TO-ANALYSE [ANOTHER-FILE...]&lt;/code&gt; to analyse the file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using development version (via &lt;code&gt;exec&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;To use the development version of Elsa, you can clone the repository and use the &lt;code&gt;eask link&lt;/code&gt; feature to use the code from the clone.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/emacs-elsa/Elsa.git&lt;/code&gt; somewhere to your computer.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(depends-on &#34;elsa&#34;)&lt;/code&gt; to &lt;code&gt;Eask&lt;/code&gt; file of your project.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;eask link add elsa &amp;lt;path-to-elsa-repo&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eask exec elsa FILE-TO-ANALYSE [ANOTHER-FILE...]&lt;/code&gt; to analyse the file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Cask&lt;/h2&gt; &#xA;&lt;h3&gt;[RECOMMENDED] Using packaged version&lt;/h3&gt; &#xA;&lt;p&gt;This method uses &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt; and installs Elsa from &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(depends-on &#34;elsa&#34;)&lt;/code&gt; to &lt;code&gt;Cask&lt;/code&gt; file of your project.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cask install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cask exec elsa FILE-TO-ANALYSE [ANOTHER-FILE...]&lt;/code&gt; to analyse the file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using development version&lt;/h3&gt; &#xA;&lt;p&gt;To use the development version of Elsa, you can clone the repository and use the &lt;code&gt;cask link&lt;/code&gt; feature to use the code from the clone.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/emacs-elsa/Elsa.git&lt;/code&gt; somewhere to your computer.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(depends-on &#34;elsa&#34;)&lt;/code&gt; to &lt;code&gt;Cask&lt;/code&gt; file of your project.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cask link elsa &amp;lt;path-to-elsa-repo&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cask exec elsa FILE-TO-ANALYSE [ANOTHER-FILE...]&lt;/code&gt; to analyse the file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Language server protocol (LSP)&lt;/h2&gt; &#xA;&lt;p&gt;Elsa&#39;s LSP implementation is currently work in progress, but the server is stable enough that it is useful to have it on. It makes the linting very fast, because all the state is cached in the server instance and we don&#39;t have to re-read the entire cache very time from scratch (like when running through flycheck or flymake).&lt;/p&gt; &#xA;&lt;p&gt;Elsa currently supports &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/&#34;&gt;lsp-mode&lt;/a&gt;, but it is not yet built-in to lsp-mode itself because it (Elsa LSP) is not stable enough. To use Elsa LSP, run &lt;code&gt;(elsa-lsp-register)&lt;/code&gt; or &lt;code&gt;M-x elsa-lsp-register&lt;/code&gt;to register the client with &lt;code&gt;lsp-mode&lt;/code&gt;. After that, using &lt;code&gt;M-x lsp&lt;/code&gt; in an Elisp buffer will start a workspace.&lt;/p&gt; &#xA;&lt;p&gt;Currently, these LSP capabilities are supported&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Capability&lt;/th&gt; &#xA;   &lt;th&gt;Implemented&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hoverProvider&lt;/td&gt; &#xA;   &lt;td&gt;Provides contextual type annotations of forms under point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;textDocumentSync&lt;/td&gt; &#xA;   &lt;td&gt;openClose, save&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;completionProvider&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;functions from workspace&lt;/li&gt;&#xA;     &lt;li&gt;variables from scope and workspace&lt;/li&gt;&#xA;     &lt;li&gt;special resolution of oref/oset slot names&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;makem.sh&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;makem.sh&lt;/code&gt;, simply run this command from the project root directory, which installs and runs Elsa in a temporary sandbox:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./makem.sh --sandbox lint-elsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a non-temporary sandbox directory named &lt;code&gt;.sandbox&lt;/code&gt; and avoid installing Elsa on each run:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Initialize the sandbox: &lt;code&gt;./makem.sh -s.sandbox --install-deps --install-linters&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run Elsa: &lt;code&gt;./makem.sh -s.sandbox lint-elsa&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;code&gt;makem.sh&lt;/code&gt;&#39;s documentation for more information.&lt;/p&gt; &#xA;&lt;h3&gt;EMake&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve already installed &lt;a href=&#34;https://github.com/vermiculus/emake.el&#34;&gt;EMake&lt;/a&gt;, run &lt;code&gt;make lint-elsa&lt;/code&gt;. You may need to update to a recent version via &lt;code&gt;EMAKE_SHA1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, install EMake via the usual means:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash &amp;lt;(curl -fsSL https://raw.githubusercontent.com/vermiculus/emake.el/master/new)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script will prompt you for the name of your package and then bootstrap EMake. You can now run Elsa&#39;s checks with &lt;code&gt;make lint-elsa&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Flycheck/Flymake integration&lt;/h2&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; you can use the &lt;a href=&#34;https://github.com/emacs-elsa/flycheck-elsa&#34;&gt;flycheck-elsa&lt;/a&gt; package which integrates Elsa with Flycheck.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Flymake.html&#34;&gt;flymake&lt;/a&gt;, you can use &lt;a href=&#34;https://github.com/flymake/flymake-elsa&#34;&gt;flymake-elsa&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;For now Elsa supports very little configuration. To &#34;Elsa-enable&#34; your project, you have to add an &lt;code&gt;Elsafile.el&lt;/code&gt; to the root of your project.&lt;/p&gt; &#xA;&lt;p&gt;Elsa has a concept of extensions and rulesets, which currently exist mostly internally and are wrapped in one big &#34;default&#34; ruleset and extension. This system is still work in progress.&lt;/p&gt; &#xA;&lt;p&gt;The following are some ways you can extend Elsa today.&lt;/p&gt; &#xA;&lt;h2&gt;Analysis extension&lt;/h2&gt; &#xA;&lt;p&gt;One way to extend Elsa is by providing special analysis rules for more forms and functions where we can exploit the knowledge of how the function behaves to narrow the analysis down more.&lt;/p&gt; &#xA;&lt;p&gt;For example, we can say that if the input of &lt;code&gt;not&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;, the return value is always &lt;code&gt;nil&lt;/code&gt;. This encodes our domain knowledge in form of an analysis rule.&lt;/p&gt; &#xA;&lt;p&gt;All the rules are added in form of extensions. Elsa has few core extensions for most common built-in functions such as list manipulation (&lt;code&gt;car&lt;/code&gt;, &lt;code&gt;nth&lt;/code&gt;...), predicates (&lt;code&gt;stringp&lt;/code&gt;, &lt;code&gt;atomp&lt;/code&gt;...), logical functions (&lt;code&gt;not&lt;/code&gt;, ...) and so on. These are automatically loaded because the functions are so common virtually every project is going to use them.&lt;/p&gt; &#xA;&lt;p&gt;Additional extensions are provided for popular external packages such as &lt;a href=&#34;https://github.com/magnars/dash.el&#34;&gt;dash.el&lt;/a&gt;. To use them, add to your &lt;code&gt;Elsafile.el&lt;/code&gt; the &lt;code&gt;register-extensions&lt;/code&gt; form, like so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(register-extensions&#xA; dash&#xA; ;; more extensions here&#xA; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extensions are auto-loaded when Elsa comes upon a require form. For a &lt;code&gt;(require &#39;foo)&lt;/code&gt; it will look for &lt;code&gt;elsa-extension-foo.el&lt;/code&gt; and tries to load it. This means that in practice you will never have to register extensions for most of the 3rd party packages.&lt;/p&gt; &#xA;&lt;h2&gt;Rulesets&lt;/h2&gt; &#xA;&lt;p&gt;After analysis of the forms is done we have all the type information and the AST ready to be further processed by various checks and rules.&lt;/p&gt; &#xA;&lt;p&gt;These can be (non-exhaustive list):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stylistic, such as checking that a variable uses &lt;code&gt;lisp-case&lt;/code&gt; for naming instead of &lt;code&gt;snake_case&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Syntactic, such as checking we are not wrapping the else branch of &lt;code&gt;if&lt;/code&gt; with a useless &lt;code&gt;progn&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Semantic, such as checking that the condition of &lt;code&gt;if&lt;/code&gt; does not always evaluate to &lt;code&gt;non-nil&lt;/code&gt; (in which case the &lt;code&gt;if&lt;/code&gt; form is useless).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Elsa provides some built-in rulesets and more can also be used by loading extensions.&lt;/p&gt; &#xA;&lt;p&gt;To register a ruleset, add the following form to &lt;code&gt;Elsafile.el&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(register-ruleset&#xA; dead-code&#xA; style&#xA; ;; more rulesets here&#xA; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Type annotations&lt;/h1&gt; &#xA;&lt;p&gt;In Elisp users are not required to provide type annotations to their code. While at many places the types can be inferred there are places, especially in user-defined functions, where we can not guess the correct type (we can only infer what we see during runtime).&lt;/p&gt; &#xA;&lt;p&gt;Read the type annotations &lt;a href=&#34;https://raw.githubusercontent.com/emacs-elsa/Elsa/master/docs/type-annotations.org&#34;&gt;documentation&lt;/a&gt; for more information on how to write your own types.&lt;/p&gt; &#xA;&lt;h1&gt;How can I contribute to this project&lt;/h1&gt; &#xA;&lt;p&gt;Open an issue if you want to work on something (not necessarily listed below in the roadmap) so we won&#39;t duplicate work. Or just give us feedback or helpful tips.&lt;/p&gt; &#xA;&lt;p&gt;You can provide type definitions for built-in functions by extending &lt;code&gt;elsa-typed-builtin.el&lt;/code&gt;. There is plenty to go. Some of the types necessary to express what we want might not exist or be supported yet, open an issue so we can discuss how to model things.&lt;/p&gt; &#xA;&lt;h1&gt;F.A.Q.&lt;/h1&gt; &#xA;&lt;h2&gt;What&#39;s up with the logo?&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/emacs-elsa/Elsa/issues/80&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;For developers&lt;/h1&gt; &#xA;&lt;p&gt;After calling &lt;code&gt;(require &#39;elsa-font-lock)&lt;/code&gt; there is a function &lt;code&gt;elsa-setup-font-lock&lt;/code&gt; which can be called from &lt;code&gt;emacs-lisp-mode-hook&lt;/code&gt; to set up some additional font-locking for Elsa types.&lt;/p&gt; &#xA;&lt;h2&gt;How to write an extension for your-favourite-package&lt;/h2&gt; &#xA;&lt;h2&gt;How to write a ruleset&lt;/h2&gt; &#xA;&lt;h1&gt;Acknowledgments&lt;/h1&gt; &#xA;&lt;p&gt;The biggest inspiration has been the &lt;a href=&#34;https://github.com/phpstan/phpstan&#34;&gt;PHPStan&lt;/a&gt; project, which provided me the initial impetus to start this project. I have went through their sources many times finding inspiration and picking out features.&lt;/p&gt; &#xA;&lt;p&gt;The second inspiration is &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;, which turned a rather uninteresting language into a powerhouse of the (not only) web.&lt;/p&gt; &#xA;&lt;p&gt;I borrow heavily from both of these projects and extend my gratitude and admiration.&lt;/p&gt;</summary>
  </entry>
</feed>