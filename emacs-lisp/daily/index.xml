<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-28T02:01:19Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xenodium/dwim-shell-command</title>
    <updated>2022-07-28T02:01:19Z</updated>
    <id>tag:github.com,2022-07-28:/xenodium/dwim-shell-command</id>
    <link href="https://github.com/xenodium/dwim-shell-command" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs shell commands with DWIM behaviour&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;dwim-shell-command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/dwim-shell-command/main/images/template.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Run M-x =dwim-shell-command= to execute [[https://en.wikipedia.org/wiki/DWIM][DWIM]] shell commands&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asynchronously.&lt;/li&gt; &#xA; &lt;li&gt;Using noweb templates.&lt;/li&gt; &#xA; &lt;li&gt;Automatically injecting files (from [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] or other buffers) or kill ring.&lt;/li&gt; &#xA; &lt;li&gt;Managing buffer focus with heuristics.&lt;/li&gt; &#xA; &lt;li&gt;Showing progress bar.&lt;/li&gt; &#xA; &lt;li&gt;Quick buffer exit.&lt;/li&gt; &#xA; &lt;li&gt;More reusable history.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Bring command-line utilities to your Emacs workflows&lt;/p&gt; &#xA;&lt;p&gt;Use =dwim-shell-command-on-marked-files= to easily integrate command-line utilities into frequent Emacs workflows (ie. operate on current buffer or [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] files).&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :lexical no (defun my/dwim-shell-command-convert-to-gif () &#34;Convert all marked videos to optimized gif(s).&#34; (interactive) (dwim-shell-command-on-marked-files &#34;Convert to gif&#34; &#34;ffmpeg -loglevel quiet -stats -y -i &amp;lt;&#xA; &lt;f&gt;&#xA;  &amp;gt; -pix_fmt rgb24 -r 15 &amp;lt;&#xA;  &lt;fne&gt;&#xA;   &amp;gt;.gif&#34; :utils &#34;ffmpeg&#34;)) #+end_src&#xA;  &lt;/fne&gt;&#xA; &lt;/f&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Which files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=dwim-shell-command= attempts to guess which file(s) you may want the command to operate on.&lt;/p&gt; &#xA;&lt;p&gt;If visiting a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] buffer, draw the marked file(s).&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/dwim-shell-command/main/images/diredmark.webp&#34; width=&#34;75%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If visiting any other buffer with an associated file, use that.&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/dwim-shell-command/main/images/blur.png&#34; width=&#34;75%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;noweb templates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Operate on drawn files using either the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=&amp;lt;&#xA;  &lt;f&gt;&#xA;   &amp;gt;= (file path)&#xA;  &lt;/f&gt;&lt;/li&gt; &#xA; &lt;li&gt;=&amp;lt;&#xA;  &lt;fne&gt;&#xA;   &amp;gt;= (file path without extension)&#xA;  &lt;/fne&gt;&lt;/li&gt; &#xA; &lt;li&gt;=&amp;lt;&#xA;  &lt;e&gt;&#xA;   &amp;gt;= (extension)&#xA;  &lt;/e&gt;&lt;/li&gt; &#xA; &lt;li&gt;=&amp;lt;&amp;gt;= (generate a temporary directory)&lt;/li&gt; &#xA; &lt;li&gt;=&amp;lt;&amp;lt;*&amp;gt;&amp;gt;= (all files joined)&lt;/li&gt; &#xA; &lt;li&gt;=&amp;lt;&#xA;  &lt;cb&gt;&#xA;   &amp;gt;= (clipboard)&#xA;  &lt;/cb&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;With drawn files =path/to/image1.png= and =path/to/image2.png=&lt;/p&gt; &#xA;&lt;p&gt;=convert &amp;lt;&#xA; &lt;f&gt;&#xA;  &amp;gt; &amp;lt;&#xA;  &lt;fne&gt;&#xA;   &amp;gt;.jpg= expands to&#xA;  &lt;/fne&gt;&#xA; &lt;/f&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh convert path/to/image1.png path/to/image1.jpg convert path/to/image2.png path/to/image2.jpg #+end_src&lt;/p&gt; &#xA;&lt;p&gt;while =ls -lh &amp;lt;&amp;lt;*&amp;gt;&amp;gt;= expands to&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh ls -lh path/to/image1.png path/to/image2.png #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Focus&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=dwim-shell-command= creates a process buffer to capture command output, but neither displays nor focuses on it by default. Instead, it tries to guess what&#39;s more convenient to focus on.&lt;/p&gt; &#xA;&lt;p&gt;While the process is busy, show a spinner in the minibuffer. No focus changes.&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/dwim-shell-command/main/images/progress.webp&#34; width=&#34;50%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After process is finished:&lt;/p&gt; &#xA;&lt;p&gt;If there were any files created in the =default-directory=, jump to a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] buffer and move point to the new file (via [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-Enter.html][dired-jump]]).&lt;/p&gt; &#xA;&lt;p&gt;[[file:images/showme.png]]&lt;/p&gt; &#xA;&lt;p&gt;If no new files were created, automatically switch focus to the process buffer and display its output.&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/dwim-shell-command/main/images/apple.webp&#34; width=&#34;50%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: You can prevent this automatic focus by prepending your command with whitespace.&lt;/p&gt; &#xA;&lt;p&gt;&#34; convert &amp;lt;&#xA; &lt;f&gt;&#xA;  &amp;gt; &amp;lt;&#xA;  &lt;fne&gt;&#xA;   &amp;gt;.jpg&#34;&#xA;  &lt;/fne&gt;&#xA; &lt;/f&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the shell command caused any errors, offer to focus the process buffer and display its output.&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/dwim-shell-command/main/images/couldnt.png&#34; width=&#34;75%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** Easily create utilities&lt;/p&gt; &#xA;&lt;p&gt;Command-line utilities like [[https://ffmpeg.org/][ffmpeg]] can be easily integrated into Emacs flows (without the need to remember any flags or parameters) by wrapping command invocations into functions and invoking via =M-x= (or your favorite binding). Same DWIM behavior from =dwim-shell-command= is inherited.&lt;/p&gt; &#xA;&lt;p&gt;All gifs in this README were created via M-x =dwim-shell-command-convert-to-gif=, powered by =dwim-shell-command-on-marked-files=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :lexical no (defun my/dwim-shell-command-convert-to-gif () &#34;Convert all marked videos to optimized gif(s).&#34; (interactive) (dwim-shell-command-on-marked-files &#34;Convert to gif&#34; &#34;ffmpeg -loglevel quiet -stats -y -i &amp;lt;&#xA; &lt;f&gt;&#xA;  &amp;gt; -pix_fmt rgb24 -r 15 &amp;lt;&#xA;  &lt;fne&gt;&#xA;   &amp;gt;.gif&#34; :utils &#34;ffmpeg&#34;)) #+end_src&#xA;  &lt;/fne&gt;&#xA; &lt;/f&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/dwim-shell-command/main/images/togif.webp&#34; width=&#34;60%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This makes wrapping one-liners a breeze, so let&#39;s do some more...&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :lexical no (defun my/dwim-shell-command-convert-audio-to-mp3 () &#34;Convert all marked audio to mp3(s).&#34; (interactive) (dwim-shell-command-on-marked-files &#34;Convert to mp3&#34; &#34;ffmpeg -stats -n -i &#39;&amp;lt;&#xA; &lt;f&gt;&#xA;  &amp;gt;&#39; -acodec libmp3lame &#39;&amp;lt;&#xA;  &lt;fne&gt;&#xA;   &amp;gt;.mp3&#39;&#34; :utils &#34;ffmpeg&#34;))&#xA;  &lt;/fne&gt;&#xA; &lt;/f&gt;&lt;/p&gt; &#xA;&lt;p&gt;(defun my/dwim-shell-command-convert-image-to-jpg () &#34;Convert all marked images to jpg(s).&#34; (interactive) (dwim-shell-command-on-marked-files &#34;Convert to jpg&#34; &#34;convert -verbose &#39;&amp;lt;&#xA; &lt;f&gt;&#xA;  &amp;gt;&#39; &#39;&amp;lt;&#xA;  &lt;fne&gt;&#xA;   &amp;gt;.jpg&#39;&#34; :utils &#34;convert&#34;))&#xA;  &lt;/fne&gt;&#xA; &lt;/f&gt;&lt;/p&gt; &#xA;&lt;p&gt;(defun my/dwim-shell-command-drop-video-audio () &#34;Drop audio from all marked videos.&#34; (interactive) (dwim-shell-command-on-marked-files &#34;Drop audio&#34; &#34;ffmpeg -i &#39;&amp;lt;&#xA; &lt;f&gt;&#xA;  &amp;gt;&#39; -c copy -an &#39;&amp;lt;&#xA;  &lt;fne&gt;&#xA;   &amp;gt;_no_audio.&amp;lt;&#xA;   &lt;e&gt;&#xA;    &amp;gt;&#39;&#34; :utils &#34;ffmpeg&#34;)) #+end_src&#xA;   &lt;/e&gt;&#xA;  &lt;/fne&gt;&#xA; &lt;/f&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick exit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Process buffers are read-only and can be quickly closed by pressing =q=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More reusable history Because of templates, command history becomes automatically reusable in other contexts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/dwim-shell-command/main/images/history.png&#34; width=&#34;75%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=dwim-shell-command= is available on [[https://melpa.org/#/company-org-block][MELPA]].&lt;/p&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/dwim-shell-command][file:https://melpa.org/packages/dwim-shell-command.svg]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install via M-x /package-install/.&lt;/li&gt; &#xA; &lt;li&gt;Require, set edit style, and add company backend:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;dwim-shell-command) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Now you&#39;re ready to run&lt;/p&gt; &#xA;&lt;p&gt;M-x =dwim-shell-command=&lt;/p&gt; &#xA;&lt;p&gt;** use-package&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, can also install via [[https://github.com/jwiegley/use-package][use-package]], define your own commands and remap to =shell-command=&#39;s existing binding using something like:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :lexical no (use-package dwim-shell-command :ensure t :bind (([remap shell-command] . dwim-shell-command) :map dired-mode-map ([remap dired-do-async-shell-command] . dwim-shell-command) ([remap dired-do-shell-command] . dwim-shell-command) ([remap dired-smart-shell-command] . dwim-shell-command)) :config (defun my/dwim-shell-command-convert-to-gif () &#34;Convert all marked videos to optimized gif(s).&#34; (interactive) (dwim-shell-command-on-marked-files &#34;Convert to gif&#34; &#34;ffmpeg -loglevel quiet -stats -y -i &amp;lt;&#xA; &lt;f&gt;&#xA;  &amp;gt; -pix_fmt rgb24 -r 15 &amp;lt;&#xA;  &lt;fne&gt;&#xA;   &amp;gt;.gif&#34; :utils &#34;ffmpeg&#34;))) #+end_src&#xA;  &lt;/fne&gt;&#xA; &lt;/f&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install command line utilities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;m including an optional package ([[https://github.com/xenodium/dwim-shell-command/blob/dwim-shell-command-commands.el][dwim-shell-commands.el]]), with all the command line utilities I&#39;ve brought in via =dwim-shell-command-on-marked-files=. Feel free to optionally load it via:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :lexical no (require &#39;dwim-shell-commands) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To give you an idea, here&#39;s what I got so far:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=dwim-shell-commands-audio-to-mp3=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-bin-plist-to-xml=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-clipboard-to-qr=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-drop-video-audio=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-files-combined-size=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-git-clone-clipboard-url=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-git-clone-clipboard-url-to-downloads=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-image-to-grayscale=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-image-to-icns=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-image-to-jpg=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-image-to-png=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-pdf-password-protect=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-reorient-image=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-resize-gif=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-resize-image=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-resize-video=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-speed-up-gif=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-speed-up-video=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-unzip=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-video-to-gif=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-video-to-optimized-gif=&lt;/li&gt; &#xA; &lt;li&gt;=dwim-shell-commands-video-to-webp=&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hlissner/emacs-hide-mode-line</title>
    <updated>2022-07-28T02:01:19Z</updated>
    <id>tag:github.com,2022-07-28:/hlissner/emacs-hide-mode-line</id>
    <link href="https://github.com/hlissner/emacs-hide-mode-line" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs plugin that hides (or masks) the current buffer&#39;s mode-line&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/hide-mode-line&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/hide-mode-line-badge.svg?style=flat-square&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hlissner/emacs-hide-mode-line/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?style=flat-square&#34; alt=&#34;MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;hide-mode-line&lt;/h1&gt; &#xA;&lt;p&gt;Provides &lt;code&gt;hide-mode-line-mode&lt;/code&gt;. A minor mode that hides (or masks) the mode-line in your current buffer. It can be used to toggle an alternative mode-line, toggle its visibility, or simply disable the mode-line in buffers where it isn&#39;t very useful otherwise.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Extracted from &lt;code&gt;doom-hide-modeline-mode&lt;/code&gt; in &lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;Doom Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;hide-mode-line&lt;/code&gt; is available on MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install hide-mode-line&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;hide-mode-line)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;hide-mode-line-mode&lt;/code&gt; to hooks where you don&#39;t want a mode-line, like the completion-list or org todo/agenda-popup windows, or neotree.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;completion-list-mode-hook #&#39;hide-mode-line-mode)&#xA;(add-hook &#39;neotree-mode-hook #&#39;hide-mode-line-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or replace the mode-line in specific windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(let ((hide-mode-line-format &#39;(&#34;%b&#34;)))&#xA;  (hide-mode-line-mode +1))&#xA;&#xA;(setq-local hide-mode-line-format &#39;(&#34;%b&#34;))&#xA;(hide-mode-line-mode +1)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>astahlman/ob-async</title>
    <updated>2022-07-28T02:01:19Z</updated>
    <id>tag:github.com,2022-07-28:/astahlman/ob-async</id>
    <link href="https://github.com/astahlman/ob-async" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Asynchronous src_block execution for org-babel&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/astahlman/ob-async&#34;&gt;&lt;img src=&#34;https://travis-ci.org/astahlman/ob-async.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/ob-async&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/ob-async-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/ob-async&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/ob-async-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ob-async&lt;/code&gt; enables asynchronous execution of org-babel src blocks, like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/astahlman/ob-async/master/readme-demo.gif&#34; alt=&#34;Demo of async sh execution&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ob-async&lt;/code&gt; isn&#39;t tied to src blocks in a specific org-babel language. Simply add the keyword &lt;code&gt;:async&lt;/code&gt; to the header-args of any org-babel src block and invoke &lt;code&gt;ob-async-org-babel-execute-src-block&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ob-async&lt;/code&gt; is available in MELPA. If you&#39;d rather install from source, make sure &lt;code&gt;ob-async.el&lt;/code&gt; is on your &lt;code&gt;load-path&lt;/code&gt;, like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path &#34;$PATH_TO_OB_ASYNC_ROOT_DIR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Require the package and &lt;code&gt;ob-async&lt;/code&gt; will handle any source block which includes &lt;code&gt;:async&lt;/code&gt; in its header-args.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;ob-async)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ob-async&lt;/code&gt; should work with no additional setup for most languages. However, there are a few known edge-cases which require extra configuration.&lt;/p&gt; &#xA;&lt;h3&gt;ob-async-no-async-languages-alist&lt;/h3&gt; &#xA;&lt;p&gt;Some org-babel languages (e.g., &lt;code&gt;ob-python&lt;/code&gt;) define their own &lt;code&gt;:async&lt;/code&gt; keyword that conflicts with &lt;code&gt;ob-async&lt;/code&gt;. &lt;code&gt;ob-async&lt;/code&gt; will ignore any languages in this blacklist, even if the &lt;code&gt;:async&lt;/code&gt; keywords is present. Note that the &lt;code&gt;-alist&lt;/code&gt; suffix is misleading; this variable actually represents a plain list and will be renamed in a future release.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq ob-async-no-async-languages-alist &#39;(&#34;ipython&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional context, see &lt;a href=&#34;https://github.com/astahlman/ob-async/pull/35&#34;&gt;https://github.com/astahlman/ob-async/pull/35&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ob-async-pre-execute-src-block-hook&lt;/h3&gt; &#xA;&lt;p&gt;Some org-babel languages require additional user configuration. For example, &lt;code&gt;ob-julia&lt;/code&gt; requires &lt;code&gt;inferior-julia-program-name&lt;/code&gt; to be defined. Normally you would define such variables in your &lt;code&gt;init.el&lt;/code&gt;, but src block execution occurs in an Emacs subprocess which does not evaluate &lt;code&gt;init.el&lt;/code&gt; on startup. Instead, you can place initialization logic in &lt;code&gt;ob-async-pre-execute-src-block-hook&lt;/code&gt;, which runs before execution of every src block.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;ob-async-pre-execute-src-block-hook&#xA;        &#39;(lambda ()&#xA;           (setq inferior-julia-program-name &#34;/usr/local/bin/julia&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional context, see &lt;a href=&#34;https://github.com/astahlman/ob-async/issues/37&#34;&gt;https://github.com/astahlman/ob-async/issues/37&lt;/a&gt; and &lt;a href=&#34;https://github.com/jwiegley/emacs-async/pull/73&#34;&gt;https://github.com/jwiegley/emacs-async/pull/73&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt; manages dependencies and runs tests. Once Cask is installed, you can &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;First, go through the troubleshooting checklist, &lt;code&gt;troubleshooting.org&lt;/code&gt;. It&#39;s an org-mode file in this repository that&#39;s designed to diagnose issues with ob-async. If that doesn&#39;t solve your problem, include a copy of the entire file (which will include your &lt;code&gt;#+RESULTS&lt;/code&gt; blocks) in a Github issue.&lt;/p&gt;</summary>
  </entry>
</feed>