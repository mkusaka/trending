<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-06T01:32:38Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AmaiKinono/puni</title>
    <updated>2022-10-06T01:32:38Z</updated>
    <id>tag:github.com,2022-10-06:/AmaiKinono/puni</id>
    <link href="https://github.com/AmaiKinono/puni" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Structured editing (soft deletion, expression navigating &amp; manipulating) that supports many major modes out of the box.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Puni&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/img/logo.svg?sanitize=true&#34; alt=&#34;logo&#34; width=&#34;360&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;Parentheses Universalistic&lt;/i&gt;&lt;/p&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#what-is-it&#34;&gt;What is it?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#a-set-of-soft-deletion-commands&#34;&gt;A set of soft deletion commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#a-factory-of-soft-deletion-commands&#34;&gt;A factory of soft deletion commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#sexp-navigating--manipulating-commands&#34;&gt;Sexp navigating &amp;amp; manipulating commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#out-of-box-support-for-many-major-modes&#34;&gt;Out of box support for many major modes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#comparison-with-other-packages&#34;&gt;Comparison with other packages&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#paredit--lispy&#34;&gt;ParEdit &amp;amp; Lispy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#smartparens&#34;&gt;Smartparens&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#commands&#34;&gt;Commands&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#deletion-commands&#34;&gt;Deletion commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#navigation-commands&#34;&gt;Navigation commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#marking-commands&#34;&gt;Marking commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#sexp-manipulating-commands&#34;&gt;Sexp manipulating commands.&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#puni-squeeze&#34;&gt;&lt;code&gt;puni-squeeze&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#slurp--barf&#34;&gt;slurp &amp;amp; barf&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#puni-raise&#34;&gt;&lt;code&gt;puni-raise&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#puni-convolute&#34;&gt;&lt;code&gt;puni-convolute&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#other-commands&#34;&gt;Other commands&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#define-your-own-soft-deletion-commands&#34;&gt;Define your own soft deletion commands&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#strict-sexp&#34;&gt;&lt;code&gt;strict-sexp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#style&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#fail-action&#34;&gt;&lt;code&gt;fail-action&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#caveats&#34;&gt;Caveats&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#doesnt-work-well-in-some-major-modes&#34;&gt;Doesn&#39;t work well in some major modes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#lack-of-auto-pairing&#34;&gt;Lack of auto pairing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#what-does-puni-means-anyway&#34;&gt;What does &#34;Puni&#34; means anyway?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/#donation&#34;&gt;Donation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;h3&gt;A set of soft deletion commands&lt;/h3&gt; &#xA;&lt;p&gt;Puni contains commands for soft deletion, which means deleting while keeping parentheses (or other delimiters, like html tags) balanced. Let&#39;s see them in action:&lt;/p&gt; &#xA;&lt;p&gt;Kill lines softly in Lisp code (&lt;code&gt;emacs-lisp-mode&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/img/lisp.gif&#34; alt=&#34;kill-line-in-lisp-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In LaTeX document (&lt;code&gt;tex-mode&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/img/tex.gif&#34; alt=&#34;kill-line-in-tex-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In HTML template (&lt;code&gt;web-mode&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/img/web.gif&#34; alt=&#34;kill-line-in-web-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Look how it kills softly inside/between/out of tags.&lt;/p&gt; &#xA;&lt;p&gt;In shell script (&lt;code&gt;sh-mode&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/img/shell.gif&#34; alt=&#34;kill-line-in-sh-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Puni knows the &lt;code&gt;)&lt;/code&gt; is just a suffix of a condition, not a closing delimiter.&lt;/p&gt; &#xA;&lt;h3&gt;A factory of soft deletion commands&lt;/h3&gt; &#xA;&lt;p&gt;That&#39;s not the whole story. Puni offers a simple yet powerful API, &lt;code&gt;puni-soft-delete-by-move&lt;/code&gt;, for you to define soft delete commands in a style that fits your need and taste.&lt;/p&gt; &#xA;&lt;p&gt;For example, the default &lt;code&gt;puni-backward-kill-word&lt;/code&gt; behaves like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(foo bar)|&#xA;;; call `puni-backward-kill-word&#39;&#xA;(foo |)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;|&lt;/code&gt; means the cursor position. If you don&#39;t like this, you could define &lt;code&gt;my-backward-kill-word&lt;/code&gt; that behaves like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(foo bar)|&#xA;;; call `my-backward-kill-word&#39;&#xA;(foo |bar)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default &lt;code&gt;puni-kill-line&lt;/code&gt; behaves like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;| foo (bar&#xA;       baz)&#xA;;; call `puni-kill-line&#39;&#xA;|&#xA;;; (nothing left)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While you can define a &lt;code&gt;my-kill-line&lt;/code&gt; that&#39;s not so greedy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;| foo (bar&#xA;       baz)&#xA;;; call `my-kill-line&#39;&#xA;| (bar&#xA;       baz)&#xA;;; call `my-kill-line&#39; again&#xA;|&#xA;;; (nothing left)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s very easy to define commands like this. I&#39;ll show you how to do this later.&lt;/p&gt; &#xA;&lt;h3&gt;Sexp navigating &amp;amp; manipulating commands&lt;/h3&gt; &#xA;&lt;p&gt;As Puni understands the &#34;balanced expression&#34; concept, it offeres you commands to move by sexps, and manipulating sexps. Think about ParEdit, but works for Lisp and other languages.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of slurping &amp;amp; barfing in HTML (in &lt;code&gt;web-mode&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/img/slurp-barf.gif&#34; alt=&#34;slurp-and-barf-in-web-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Notice the ending delimiter is blinked as a visual cue.&lt;/p&gt; &#xA;&lt;h3&gt;Out of box support for many major modes&lt;/h3&gt; &#xA;&lt;p&gt;That&#39;s still not the whole story. Let me reveal the ultimate truth of Puni, hang tight...&lt;/p&gt; &#xA;&lt;p&gt;There are &lt;em&gt;absolutely no language-specific logic&lt;/em&gt; inside Puni!&lt;/p&gt; &#xA;&lt;p&gt;Wait, it can&#39;t be! Or how does it support &lt;code&gt;web-mode&lt;/code&gt; and &lt;code&gt;tex-mode&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;p&gt;Well, it turns out that Emacs has a built-in function that knows what is a balanced expression (or, a sexp): &lt;code&gt;forward-sexp&lt;/code&gt;. If we call &lt;code&gt;forward-sexp&lt;/code&gt; until it throws an error, we know we&#39;ve hit the boundary, so it&#39;s safe to delete until this position. Try this in some Lisp code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(foo |bar)&#xA;;; call `forward-sexp&#39;&#xA;(foo bar|)&#xA;;; call `forward-sexp&#39;&#xA;(foo bar|) ;; (Signals an error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A major mode can provide a &lt;code&gt;forward-sexp-function&lt;/code&gt;. Ideally, it should work like the built-in &lt;code&gt;forward-sexp&lt;/code&gt;, but unfortunately, many of these &lt;code&gt;forward-sexp-function&lt;/code&gt;s have all sorts of problems, with the prominent one being jumping out of current sexp to search for a start/end of a sexp. For example, in web-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;|p&amp;gt;foo&amp;lt;/p&amp;gt;&#xA;&amp;lt;!-- call `forward-sexp` --&amp;gt;&#xA;&amp;lt;p&amp;gt;|foo&amp;lt;/p&amp;gt;&#xA;&amp;lt;!-- what we really want --&amp;gt;&#xA;&amp;lt;p|&amp;gt;foo&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Puni fixes the behavior of these &lt;code&gt;forward-sexp-functions&lt;/code&gt; in a generic way, by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consecutively call &lt;code&gt;forward-sexp&lt;/code&gt;, in different directions&lt;/li&gt; &#xA; &lt;li&gt;Syntax table&lt;/li&gt; &#xA; &lt;li&gt;Common sense&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So we get &lt;code&gt;puni-strict-forward-sexp&lt;/code&gt; and &lt;code&gt;puni-strict-backward-sexp&lt;/code&gt;. These are &#34;strict&#34; versions of the &lt;code&gt;forward-sexp&lt;/code&gt; function available in current major mode, which means they move forward one sexp at a time, and stops at the boundary. This is the &#34;ideal&#34; &lt;code&gt;forward-sexp&lt;/code&gt; function, and is the basis of all the commands offered by Puni.&lt;/p&gt; &#xA;&lt;p&gt;By taking this approach, Puni supports many major modes out of the box.&lt;/p&gt; &#xA;&lt;p&gt;And that really is the whole story ;)&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with other packages&lt;/h2&gt; &#xA;&lt;h3&gt;ParEdit &amp;amp; Lispy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/ParEdit&#34;&gt;ParEdit&lt;/a&gt; is a minor mode for structured editing of Lisp code. It implements soft deletion, and sexp manipulating commands, as Puni does.&lt;/p&gt; &#xA;&lt;p&gt;Compared to ParEdit, Puni&#39;s pros:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports many major modes, not only Lisp.&lt;/li&gt; &#xA; &lt;li&gt;An API for defining your own soft deletion commands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Puni&#39;s cons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Puni doesn&#39;t implement &lt;code&gt;down-list&lt;/code&gt;, so it lacks commands that needs to go into a list, like joining the sexps before and after point.&lt;/li&gt; &#xA; &lt;li&gt;Many of ParEdit&#39;s behavior is specially tweaked for Lisp, like inserting a &lt;code&gt;(&lt;/code&gt; will also insert a space before it when proper. Puni doesn&#39;t do that.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ParEdit could be mostly replaced by Puni. But if you are wondering if there are still more efficient ways of editing Lisp code, maybe &lt;a href=&#34;https://github.com/abo-abo/lispy&#34;&gt;Lispy&lt;/a&gt; is for you.&lt;/p&gt; &#xA;&lt;p&gt;Lispy is like ParEdit, with shorter (mostly single-key, without modifier) keybindings. It feels like modal editing for Lisp, that means the commands are faster to execute, and easier to combine to form complex operations. This keybinding design is the killer feature of Lispy.&lt;/p&gt; &#xA;&lt;p&gt;Lispy also offers much more commands than ParEdit, focusing on faster move, inline help, code evaluation, semantic transformation of Lisp code, etc. All or part of these features are implemented for Python, Julia, and several Lisp dialects.&lt;/p&gt; &#xA;&lt;h3&gt;Smartparens&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Fuco1/smartparens&#34;&gt;Smartparens&lt;/a&gt; is ParEdit for all languages, like Puni.&lt;/p&gt; &#xA;&lt;p&gt;It takes a different approach than Puni: instead of making use of Emacs built-in mechanisms, it creates its own extensible machine for parsing pairs, and extends it for many languages. The result: It&#39;s around 10k lines of code, while Puni is around 2k lines.&lt;/p&gt; &#xA;&lt;p&gt;At present, the main problem of smartparens is many bugs aren&#39;t fixed for years. For example, due to changes in the architecture, HTML related functionality has been slowly breaking down, and there has been no effort to save it. Now you&#39;ll encounter many problems using smartparens in &lt;code&gt;web-mode&lt;/code&gt;. The biggest one, to me, is &lt;code&gt;sp-kill-hybrid-sexp&lt;/code&gt; (the equivalent of &lt;code&gt;puni-kill-line&lt;/code&gt;) is not working in &lt;code&gt;web-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Puni lacks some commands that smartparens has. But the advantages are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Puni has simpler architecture and much less code, so it&#39;s easier to maintain.&lt;/li&gt; &#xA; &lt;li&gt;Puni contains no language-specific logic, so there&#39;ll never be situations like &#34;I don&#39;t want to fix a bug for you because I don&#39;t use that language&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Again, an API for defining your own soft deletion commands.&lt;/li&gt; &#xA; &lt;li&gt;At present, Puni is in a healthier state. You&#39;ve already seen it works well in &lt;code&gt;web-mode&lt;/code&gt; ;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;puni&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;. Below are instructions to manually install Puni.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ git clone https://github.com/AmaiKinono/puni.git /path/to/puni/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the path to your &lt;code&gt;load-path&lt;/code&gt; in your Emacs configuration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/puni/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Require &lt;code&gt;puni&lt;/code&gt; in your config:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;puni)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;puni-mode&lt;/code&gt; offers keybindings for some pre-defined soft delete commands. You can enable &lt;code&gt;puni-global-mode&lt;/code&gt; to enable them everywhere, and add &lt;code&gt;puni-disable-puni-mode&lt;/code&gt; to mode hooks where you don&#39;t want to use Puni:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(puni-global-mode)&#xA;(add-hook &#39;term-mode-hook #&#39;puni-disable-puni-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or you can enable &lt;code&gt;puni-mode&lt;/code&gt; only for programming and structured markup languages:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(dolist (hook &#39;(prog-mode-hook sgml-mode-hook nxml-mode-hook tex-mode-hook eval-expression-minibuffer-setup-hook))&#xA;  (add-hook hook #&#39;puni-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here are 2 configuration examples using &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Use puni-mode globally and disable it for term-mode.&#xA;(use-package puni&#xA;  :defer t&#xA;  :init&#xA;  ;; The autoloads of Puni are set up so you can enable `puni-mode` or&#xA;  ;; `puni-global-mode` before `puni` is actually loaded. Only after you press&#xA;  ;; any key that calls Puni commands, it&#39;s loaded.&#xA;  (puni-global-mode)&#xA;  (add-hook &#39;term-mode-hook #&#39;puni-disable-puni-mode))&#xA;&#xA;;; Use puni-mode only for certain major modes.&#xA;(use-package puni&#xA;  :defer t&#xA;  :hook ((prog-mode sgml-mode nxml-mode tex-mode eval-expression-minibuffer-setup) . puni-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Deletion commands&lt;/h3&gt; &#xA;&lt;p&gt;First we have some &#34;delete by move&#34; commands:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Default keybinding&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-forward-delete-char&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-backward-delete-char&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DEL&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-forward-kill-word&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-backward-kill-word&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-DEL&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-kill-line&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-k&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-backward-kill-line&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-S-k&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;puni-forward-delete-char&lt;/code&gt; and &lt;code&gt;puni-backward-delete-char&lt;/code&gt; delete a char softly. Or when the point is between a pair of delimiters, these delimiters will be deleted.&lt;/p&gt; &#xA;&lt;p&gt;When there is an active region, &lt;code&gt;puni-forward/backward-delete-char&lt;/code&gt; try to delete/kill that region (This behavior respects the variable &lt;code&gt;delete-active-region&lt;/code&gt;). If it will cause an unbalanced state, Puni prompts you for confirmation. You can disable the prompt by setting &lt;code&gt;puni-confirm-when-delete-unbalanced-active-region&lt;/code&gt; to nil.&lt;/p&gt; &#xA;&lt;p&gt;You can also call &lt;code&gt;puni-kill-active-region&lt;/code&gt; directly. It&#39;s bind to &lt;code&gt;C-w&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;puni-force-delete&lt;/code&gt; (&lt;code&gt;C-c DEL&lt;/code&gt;) is for deleting the char before point, or the active region, no matter they are balanced or not. This is handy if you break the syntax structure by accident, and Puni doesn&#39;t allow you to delete something. I personally bind it to &lt;code&gt;C-h&lt;/code&gt; as I use it often, and &lt;code&gt;C-h&lt;/code&gt; is the shortcut in the terminal to kill a char backward.&lt;/p&gt; &#xA;&lt;h3&gt;Navigation commands&lt;/h3&gt; &#xA;&lt;p&gt;We have some &#34;navigate by sexp&#34; commands:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Default keybinding&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-forward-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-M-f&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-backward-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-M-b&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-beginning-of-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-M-a&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-end-of-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-M-e&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;puni-forward/backward-sexp&lt;/code&gt; are similar to their built-in versions, but based on Puni&#39;s &#34;strict forward/backward sexp&#34; functions, so the behavior is more predictable, and won&#39;t take you out of current sexp.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;puni-beginning-of-sexp&lt;/code&gt;, it will take you to the point after the opening delimiter, then before it, then after another one... So consecutively calling it will take you all the way across opening delimiters. Same to &lt;code&gt;puni-end-of-sexp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While we can go out sexps using &lt;code&gt;puni-beginning/end-of-sexp&lt;/code&gt;, it&#39;s hard to implement commands that goes into a sexp. As an alternative, Puni provides these commands:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Default keybinding&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-syntactic-forward-punct&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-(&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;puni-syntactic-backward-punct&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These commands basically takes you to the next/previous punctuation, but it does more than that to give you a &#34;syntactical navigating&#34; feeling. See their docstrings for details. These are also handy in &lt;code&gt;text-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Marking commands&lt;/h3&gt; &#xA;&lt;p&gt;Puni offeres commands to mark things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-mark-sexp-at-point&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-mark-list-around-point&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-mark-sexp-around-point&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-expand-region&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;puni-expand-region&lt;/code&gt; is designed to be called consecutively. It marks the sexp at point, then the list around point, then the sexp around point, then the list containing the sexp around point... In short, it expands the active region by semantic units.&lt;/p&gt; &#xA;&lt;p&gt;These commands don&#39;t have pre-defined keybindings in &lt;code&gt;puni-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sexp manipulating commands.&lt;/h3&gt; &#xA;&lt;p&gt;These commands don&#39;t have pre-defined keybindings in &lt;code&gt;puni-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;puni-squeeze&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This copies the list around point (which is the part inside the delimiters), and delete the sexp around point (including the delimiters). It can be used to &#34;rewrap&#34; a sexp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;foo (bar|) baz&#xA;;; Call `puni-squeeze&#39;&#xA;foo | baz&#xA;;; Type in a pair of brackets&#xA;foo [|] baz&#xA;;; Call `yank&#39;&#xA;foo [bar|] baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When there&#39;s an active balanced region, this copies the region and delete the sexp around it.&lt;/p&gt; &#xA;&lt;h4&gt;slurp &amp;amp; barf&lt;/h4&gt; &#xA;&lt;p&gt;There are 4 these commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-slurp-forward&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-barf-forward&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-slurp-backward&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-barf-backward&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They move the delimiters of the sexp around point across sexps around it. It&#39;s better to understand them using an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;foo (bar|) baz&#xA;;; Call `puni-slurp-forward&#39;&#xA;foo (bar| baz)&#xA;;; Call `puni-barf-forward&#39;&#xA;foo (bar|) baz&#xA;;; Call `puni-slurp-backward&#39;&#xA;(foo bar|) baz&#xA;;; Call `puni-barf-backward&#39;&#xA;foo (bar|) baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The moved delimiter is blinked as a visual cue. You could set &lt;code&gt;puni-blink-for-slurp-barf&lt;/code&gt; to nil to disable this behavior.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;puni-raise&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This uses the sexp at point to replace its parent sexp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(or |(func1) (func2))&#xA;;; Call `puni-raise&#39;&#xA;|(func1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there&#39;s an active balanced region, this replaces the region&#39;s parent sexp with it.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;puni-convolute&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This exchanges the order of application of two closest outer forms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(let ((var (func)))&#xA;  (some-macro&#xA;    |body))&#xA;;; Call `puni-convolute&#39;&#xA;(some-macro&#xA;  (let ((var (func)))&#xA;    |body))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other commands&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-splice&lt;/code&gt;: Unwrap the sexp around point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-split&lt;/code&gt;: Split the sexp around point into two.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-transpose&lt;/code&gt;: Swap the sexps before and after point.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Define your own soft deletion commands&lt;/h2&gt; &#xA;&lt;p&gt;The API for this is &lt;code&gt;puni-soft-delete-by-move&lt;/code&gt;. Let&#39;s see a simplified definition of &lt;code&gt;puni-kill-line&lt;/code&gt;. Notice the comments about the arguments of &lt;code&gt;puni-soft-delete-by-move&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun puni-kill-line ()&#xA;  &#34;Kill a line forward while keeping expressions balanced.&#34;&#xA;  (interactive)&#xA;  (puni-soft-delete-by-move&#xA;   ;; FUNC: `puni-soft-delete-by-move` softly deletes the region from&#xA;   ;; cursor to the position after calling FUNC.&#xA;   (lambda ()&#xA;     (if (eolp) (forward-char) (end-of-line)))&#xA;   ;; STRICT-SEXP: More on this later.&#xA;   &#39;strict-sexp&#xA;   ;; STYLE: More on this later.&#xA;   &#39;beyond&#xA;   ;; KILL: Save deleted region to kill-ring if non-nil.&#xA;   &#39;kill&#xA;   ;; FAIL-ACTION argument is not used here.&#xA;   ))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;strict-sexp&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;strict-sexp&lt;/code&gt; is nil, symbols are treated as sexps, even if they are actually delimiters. For example, in &lt;code&gt;ruby-mode&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;|def func&#xA;    puts &#34;Hello&#34;&#xA;end&#xA;# call `puni-kill-line`&#xA;|&#xA;# (nothing left)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s change &lt;code&gt;strict-sexp&lt;/code&gt; to nil:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;|def func&#xA;    puts &#34;Hello&#34;&#xA;end&#xA;# call `puni-kill-line`&#xA;|&#xA;    puts &#34;Hello&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;style&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The default style of &lt;code&gt;puni-kill-line&lt;/code&gt; is &lt;code&gt;beyond&lt;/code&gt;. It means deleting sexps until no more to delete, or we&#39;ve reached a position after the line end. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;| foo (bar&#xA;       baz)&#xA;;; call `puni-kill-line`&#xA;|&#xA;;; (nothing left)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;within&lt;/code&gt; style is basically the same, but it stops before the line end:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;| foo (bar&#xA;       baz)&#xA;;; call `puni-kill-line`&#xA;|(bar&#xA;       baz)&#xA;;; call `puni-kill-line`&#xA;|(bar&#xA;       baz)&#xA;;; (nothing happened, as the line end is inside the next sexp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can combine &lt;code&gt;within&lt;/code&gt; style with &lt;code&gt;fail-action&lt;/code&gt; being &lt;code&gt;delete-one&lt;/code&gt;, so when there&#39;s no complete sexp before the line end to delete, it deletes one sexp forward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;| foo (bar&#xA;       baz)&#xA;;; call `puni-kill-line`&#xA;|(bar&#xA;       baz)&#xA;;; call `puni-kill-line`&#xA;|&#xA;;; (nothing left)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;precise&lt;/code&gt; style means deleting until the line end, but only when the part between the cursor and line end is balanced:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;|(foo bar)&#xA;;; call `puni-kill-line`&#xA;|&#xA;;; (nothing left)&#xA;&#xA;;; another situation:&#xA;|(foo&#xA;  bar)&#xA;;; call `puni-kill-line`&#xA;|(foo&#xA;  bar)&#xA;;; (nothing happened)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This style is more useful for deletion in smaller regions, like word and char.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;fail-action&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This argument decides what to do if nothing can be deleted according to &lt;code&gt;style&lt;/code&gt;. Let&#39;s take &lt;code&gt;puni-backward-kill-word&lt;/code&gt; as an example, its &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;precise&lt;/code&gt;. So in this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(foo bar)|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can&#39;t delete anything.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;fail-action&lt;/code&gt; is nil, it does nothing.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;fail-action&lt;/code&gt; is &lt;code&gt;delete-one&lt;/code&gt;, it deletes backward one sexp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;|&#xA;;; (nothing left)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;fail-action&lt;/code&gt; is &lt;code&gt;jump&lt;/code&gt;, it jumps to the beginning of the previous word:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(foo |bar)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;fail-action&lt;/code&gt; is &lt;code&gt;jump-and-reverse-delete&lt;/code&gt; (the one used by &lt;code&gt;puni-backward-kill-word&lt;/code&gt;), it jumps to the the beginning of the previous word, and soft delete from here to the previous cursor position (the line end in this case), with &lt;code&gt;style&lt;/code&gt; being &lt;code&gt;within&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(foo |)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conclusion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;puni-soft-delete-by-move&lt;/code&gt; is a simple API for defining soft deletion commands. It has 2 key arguments: &lt;code&gt;style&lt;/code&gt; decides which part to delete, and &lt;code&gt;fail-action&lt;/code&gt; decides what to do if nothing can be deleted. By combining these 2 arguments, you can create soft deletion commands that fits your need and taste.&lt;/p&gt; &#xA;&lt;p&gt;If this is not enough, read the &#34;APIs&#34; section in the source code. Puni further provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sexp navigating/locating functions: Move by sexps, locating the boundary of sexps/lists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-region-balance-p&lt;/code&gt;: Test if region is balanced.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;puni-soft-delete&lt;/code&gt;: Similar to &lt;code&gt;puni-soft-delete-by-move&lt;/code&gt; but you need to tell it delete from which point to which point directly.&lt;/li&gt; &#xA; &lt;li&gt;Other tool functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be sure to use the implementation of built-in commands as a reference when defining your own commands. Also, read the &lt;a href=&#34;https://github.com/AmaiKinono/puni/wiki&#34;&gt;wiki&lt;/a&gt; for inspirations.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s talk about things that Puni can&#39;t do, or doesn&#39;t do well.&lt;/p&gt; &#xA;&lt;h3&gt;Doesn&#39;t work well in some major modes&lt;/h3&gt; &#xA;&lt;p&gt;If the &lt;code&gt;forward-sexp-function&lt;/code&gt; in a major mode has absolutely no idea about a syntax structure, then Puni can&#39;t deal with it. For example, in &lt;code&gt;html-mode&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;hello|&amp;lt;/p&amp;gt;&#xA;&amp;lt;!-- call `forward-sexp` --&amp;gt;&#xA;&amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;|&#xA;&amp;lt;!-- call `backward-sexp` --&amp;gt;&#xA;&amp;lt;p&amp;gt;hello|&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;html-mode&lt;/code&gt; thinks &lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; itself is a complete sexp, so Puni will just happily delete it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;hello|&amp;lt;/p&amp;gt;&#xA;&amp;lt;!-- call `puni-kill-line` --&amp;gt;&#xA;&amp;lt;p&amp;gt;hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;xml-mode&lt;/code&gt; and &lt;code&gt;web-mode&lt;/code&gt; doesn&#39;t have this problem.&lt;/p&gt; &#xA;&lt;p&gt;In general, it&#39;s still safe to enable &lt;code&gt;puni-mode&lt;/code&gt; everywhere, as even if a major mode doesn&#39;t implement its own &lt;code&gt;forward-sexp-function&lt;/code&gt;, the built-in one (that works well with Lisp) is used as a fallback, which works for brackets (&lt;code&gt;()&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;) and strings. For many languages, this is enough. Besides, we can always use &lt;code&gt;puni-force-delete&lt;/code&gt; to temporarily get rid of the restrictions set up by Puni.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s worth noting that Emacs comes with a great indentation engine called &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE.html&#34;&gt;SMIE&lt;/a&gt;. With it, a major mode can provide a table of grammar rules, and get:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;reliable auto-indentation&lt;/li&gt; &#xA; &lt;li&gt;a &lt;code&gt;forward-sexp-function&lt;/code&gt;, which is what Puni needs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many major modes using SMIE, like &lt;code&gt;ruby-mode&lt;/code&gt;, &lt;code&gt;sh-mode&lt;/code&gt; and &lt;code&gt;css-mode&lt;/code&gt;. As SMIE is being used in a growing number of major modes, they get support from Puni, for free.&lt;/p&gt; &#xA;&lt;h3&gt;Lack of auto pairing&lt;/h3&gt; &#xA;&lt;p&gt;Puni doesn&#39;t support auto pairing, as I haven&#39;t found a way to implement it in a generic way. If you have any idea about this, please tell me!&lt;/p&gt; &#xA;&lt;p&gt;For now, you can use these for auto pairing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;electric-pair-mode&lt;/code&gt;: It&#39;s a built-in minor mode that automatically closes your opening brackets. Its default behavior is carefully designed to keep brackets balanced when you insert things. I use this package daily, and I love it.&lt;/p&gt; &lt;p&gt;It&#39;s disadvantage is that only single-character brackets (like &lt;code&gt;(&lt;/code&gt;/&lt;code&gt;)&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;/&lt;code&gt;]&lt;/code&gt;, &lt;code&gt;&#34;&lt;/code&gt;) are supported. You can&#39;t auto close delimiters like &lt;code&gt;if ... end if&lt;/code&gt; or &lt;code&gt;&amp;lt;p&amp;gt; ... &amp;lt;/p&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Some major/minor modes come with their own tools for auto-pairing. For example, &lt;code&gt;web-mode&lt;/code&gt; can auto close html tags, &lt;code&gt;tex-mode&lt;/code&gt; has &lt;code&gt;latex-close-block&lt;/code&gt; command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For major modes using SMIE, there&#39;s a &lt;code&gt;smie-close-block&lt;/code&gt; command.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What does &#34;Puni&#34; means anyway?&lt;/h2&gt; &#xA;&lt;p&gt;&#34;punipuni&#34;（ぷにぷに）is a Japanese mimetic word means &#34;soft&#34;, &#34;bouncy&#34;, or &#34;pillowy&#34;.&lt;/p&gt; &#xA;&lt;p&gt;If you are surrounded by punipuni things, you feel safe and relieved. That&#39;s my feeling when using Puni: never need to worry about messing up parentheses anymore.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Parentheses Universalistic&#34; is another explanation ;)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs and issues are welcomed!&lt;/p&gt; &#xA;&lt;p&gt;But please keep in mind that, due to the unique approach Puni takes, it can&#39;t fix every use case in every language, or we&#39;ll end up with a lot of ad-hoc tricks, which contradicts with the unified approach taken by Puni.&lt;/p&gt; &#xA;&lt;p&gt;So, before you report a bug of the commands, I&#39;d like you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you&#39;ve read README thoroughly, and have at least a vague concept of how Puni works.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try &lt;code&gt;forward-sexp&lt;/code&gt; and &lt;code&gt;backward-sexp&lt;/code&gt; around the thing you want to delete/manipulate on, and get an idea of how they understand the syntactic structure around there.&lt;/p&gt; &lt;p&gt;Here we are talking about the built-in &lt;code&gt;forward/backward-sexp&lt;/code&gt; commands, not &lt;code&gt;puni-forward/backward-sexp&lt;/code&gt;. When &lt;code&gt;puni-mode&lt;/code&gt; is enabled, &lt;code&gt;C-M-f&lt;/code&gt; and &lt;code&gt;C-M-b&lt;/code&gt; are bound to the latter ones.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, if you think there&#39;s any hope that it can be solved, post an issue with the investigations you&#39;ve made.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;If Puni makes you happy, please consider buying me a beer to make me happy ;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;by Alipay&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/img/alipay.jpg&#34; alt=&#34;Alipay&#34; width=&#34;180&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;by Wechat Pay&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AmaiKinono/puni/master/img/wechat-pay.png&#34; alt=&#34;Wechat Pay&#34; width=&#34;180&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;by &lt;a href=&#34;https://www.buymeacoffee.com/amaikinono&#34;&gt;Buy me a coffee&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>quelpa/quelpa</title>
    <updated>2022-10-06T01:32:38Z</updated>
    <id>tag:github.com,2022-10-06:/quelpa/quelpa</id>
    <link href="https://github.com/quelpa/quelpa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build and install your Emacs Lisp packages on-the-fly directly from source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Note: This readme&#39;s tables of contents are generated with org-make-toc &lt;a href=&#34;https://github.com/alphapapa/org-make-toc&#34;&gt;https://github.com/alphapapa/org-make-toc&lt;/a&gt;.&lt;/h1&gt; &#xA;&lt;p&gt;[[logo/quelpa-logo-h64.png]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/quelpa/quelpa/actions][file:https://github.com/quelpa/quelpa/workflows/CI/badge.svg]] [[https://melpa.org/#/quelpa][file:https://melpa.org/packages/quelpa-badge.svg]] [[https://stable.melpa.org/#/quelpa][file:https://stable.melpa.org/packages/quelpa-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;Build and install your Emacs Lisp packages on-the-fly and directly from source.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;News&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2002/09/26: Support elpa-devel version scheme (e.x, =0.27.0.20220914.164819=) with =:vertion-type quelpa= in recipes&lt;/li&gt; &#xA; &lt;li&gt;2021/03/12: Switch default from shallow clone to partial clone for git recipes&lt;/li&gt; &#xA; &lt;li&gt;2020/03/04: Obsoleted packages will automatically be removed when newer package installed successfully&lt;/li&gt; &#xA; &lt;li&gt;2020/03/02: Emacs 24 is not supported anymore, please upgrade to use =quelpa=&lt;/li&gt; &#xA; &lt;li&gt;2020/03/02: &lt;em&gt;BREAKING CHANGE&lt;/em&gt; =bootstrap.el= has been deprecated, please change your bootstrapping snippet as documented in the Installation section below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :PROPERTIES: :TOC: :include siblings :depth 1 :ignore this :force depth :END: :CONTENTS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#overview][Overview]]&lt;/li&gt; &#xA; &lt;li&gt;[[#requirements][Requirements]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#why-quelpa][Why &#34;Quelpa&#34;?]] :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=quelpa= is a tool to compile and install Emacs Lisp packages locally from local or remote source code.&lt;/p&gt; &#xA;&lt;p&gt;Given a recipe in [[https://github.com/melpa/melpa#recipe-format][MELPA&#39;s format]], for example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE elisp (quelpa &#39;(hydra :repo &#34;abo-abo/hydra&#34; :fetcher github)) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;=quelpa= gets the package source code, builds an ELPA compatible package and installs that locally with =package.el=. The installed packages can then be managed in the usual way with =M-x list-packages=.&lt;/p&gt; &#xA;&lt;p&gt;=quelpa= can be used in many ways, for example to manage your personal packages, testing development versions of other packages or as a helper when developing a package to test building, compiling and installing it.&lt;/p&gt; &#xA;&lt;p&gt;To get an idea how to use it to manage your Emacs setup, take a look at the [[https://framagit.org/steckerhalter/steckemacs.el][steckemacs configuration]], which uses [[https://github.com/quelpa/quelpa-use-package][quelpa-use-package]] to integrate with =use-package=.&lt;/p&gt; &#xA;&lt;p&gt;You can build and install packages from (fetcher names in parens): Git (=git=), GitHub (=github=), Bazaar (=bzr=), Mercurial (=hg=), Subversion (=svn=), CVS (=cvs=), Darcs (=darcs=), Fossil (=fossil=) and EmacsWiki (=wiki=)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requirements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 25.1&lt;/li&gt; &#xA; &lt;li&gt;tar&lt;/li&gt; &#xA; &lt;li&gt;git (recommend version &amp;gt;= 2.20): [[http://git-scm.com/]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every build requires the corresponding build tool. To install a =subversion= hosted package, you need to have =subversion= installed.&lt;/p&gt; &#xA;&lt;p&gt;Note: Even if the sources of a package are fetched with a VCS tool you have installed, they might have dependencies that require a different VCS tool. Better install the most common ones before proceeding.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :TOC: :include descendants :depth 1 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may install =quelpa= like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using [[https://github.com/melpa/melpa#usage][MELPA]], run =M-x package-install RET quelpa RET=.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, place file =quelpa.el= into a directory in your Emacs =load-path=, then use &lt;del&gt;(require &#39;quelpa)&lt;/del&gt; in your init file.&lt;/li&gt; &#xA; &lt;li&gt;If you want to bootstrap =quelpa= automatically from your init file, you can use this snippet:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (unless (package-installed-p &#39;quelpa) (with-temp-buffer (url-insert-file-contents &#34;&lt;a href=&#34;https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el&#34;&gt;https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el&lt;/a&gt;&#34;) (eval-buffer) (quelpa-self-upgrade))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :TOC: :include descendants :depth 1 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cool. Now that we are all setup, enjoy the ride.&lt;/p&gt; &#xA;&lt;p&gt;:CONTENTS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#installing-packages][Installing packages]]&lt;/li&gt; &#xA; &lt;li&gt;[[#upgrading-packages][Upgrading packages]]&lt;/li&gt; &#xA; &lt;li&gt;[[#managing-packages][Managing packages]]&lt;/li&gt; &#xA; &lt;li&gt;[[#using-tagged-versions][Using tagged versions]]&lt;/li&gt; &#xA; &lt;li&gt;[[#additional-recipe-fetchers][Additional recipe fetchers]]&lt;/li&gt; &#xA; &lt;li&gt;[[#additional-options][Additional options]] :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Installing packages&lt;/p&gt; &#xA;&lt;p&gt;There are two ways to install packages with Quelpa:&lt;/p&gt; &#xA;&lt;p&gt;**** By package name&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactively, use =M-x quelpa RET=, then input a package name with completion.&lt;/li&gt; &#xA; &lt;li&gt;In Lisp code, use &lt;del&gt;(quelpa &#39;package-name)&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will fetch the package&#39;s source code from its repository, build the package, and install it.&lt;/p&gt; &#xA;&lt;p&gt;**** By recipe&lt;/p&gt; &#xA;&lt;p&gt;You can also install packages that are not on MELPA by providing a recipe in the proper [[https://github.com/melpa/melpa/#recipe-format][format]]. For example, call =quelpa= with a recipe like:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (quelpa &#39;(discover-my-major :fetcher git :url &#34;&lt;a href=&#34;https://framagit.org/steckerhalter/discover-my-major.git&#34;&gt;https://framagit.org/steckerhalter/discover-my-major.git&lt;/a&gt;&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Once you installed a package with its own recipe, Quelpa will remember it and next time it can offer you to upgrade/install the package again with =M-x quelpa RET=.&lt;/p&gt; &#xA;&lt;p&gt;** Upgrading packages&lt;/p&gt; &#xA;&lt;p&gt;By default, Quelpa does not upgrade installed packages. You can enable upgrading globally by running =M-x customize-variable RET quelpa-upgrade-p RET=.&lt;/p&gt; &#xA;&lt;p&gt;To override the default and upgrade individual packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactively, call =quelpa= with a universal prefix argument, like =C-u M-x quelpa RET=.&lt;/li&gt; &#xA; &lt;li&gt;From Lisp, call =quelpa= with the keyword argument =:upgrade=, like &lt;del&gt;(quelpa &#39;package-name :upgrade t)&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Interactively, call =M-x quelpa-upgrade RET=, it will list all Quelpa installed packages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When evaluating a buffer of =quelpa= calls, you may prevent a package from being upgraded by setting =:upgrade nil=, like =(quelpa &#39;package-name :upgrade nil)=.&lt;/p&gt; &#xA;&lt;p&gt;*** Upgrading all packages&lt;/p&gt; &#xA;&lt;p&gt;You may choose to upgrade all Quelpa-installed packages at Emacs startup, but that can slow down Emacs&#39;s startup considerably.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you may upgrade all Quelpa-installed packages using =M-x quelpa-upgrade-all RET=. This command relies on the cache file, set in variable =quelpa-cache-file=. It is updated after every =quelpa= invocation.&lt;/p&gt; &#xA;&lt;p&gt;By default, when upgrading all packages, Quelpa also upgrades itself. Disable this by setting variable =quelpa-self-upgrade-p= to =nil=.&lt;/p&gt; &#xA;&lt;p&gt;To run =quelpa-upgrade-all= at most every 7 days, after all the init files are loaded:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (setq quelpa-upgrade-interval 7) (add-hook #&#39;after-init-hook #&#39;quelpa-upgrade-all-maybe) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Managing packages&lt;/p&gt; &#xA;&lt;p&gt;Quelpa installs packages using Emacs&#39;s built-in package library, =package.el=, so after installing a package with Quelpa, you can view its status and remove it using =M-x list-packages RET=. Note that deleting a package this way does not yet affect Quelpa&#39;s cache, so Quelpa will still consider the package to have been installed with Quelpa.&lt;/p&gt; &#xA;&lt;p&gt;Quelpa will automatically remove obsoleted package versions after upgrading. Disable this by setting =quelpa-autoremove-p= to =nil=.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you may prevent a package old version from being removed by setting =:autoremove nil=, like =(quelpa &#39;foo :autoremove nil)=.&lt;/p&gt; &#xA;&lt;p&gt;Also, here is the default actions of each Quelpa command related to removing packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=M-x quelpa-upgrade-all=, =M-x quelpa-upgrade=, =C-u M-x quelpa= will by default &lt;em&gt;remove&lt;/em&gt; obsoleted packages&lt;/li&gt; &#xA; &lt;li&gt;=M-x quelpa= will by default &lt;em&gt;not remove&lt;/em&gt; obsoleted package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Using tagged versions&lt;/p&gt; &#xA;&lt;p&gt;Quelpa can be instructed to build tagged versions of packages. This means that the Git or Mercurial repository is queried for a tagged version, and if one is found, that version will be built. For more information please see [[https://github.com/melpa/melpa#stable-packages][MELPA&#39;s notes on stable packages]].&lt;/p&gt; &#xA;&lt;p&gt;To enable building of tagged versions globally, set variable =quelpa-stable-p= to =t=.&lt;/p&gt; &#xA;&lt;p&gt;To do so for a single package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the =quelpa= command, use the command&#39;s keyword argument =:stable=, like &lt;del&gt;(quelpa &#39;package-name :stable t)&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In a package&#39;s recipe, use the same keyword, like &lt;del&gt;(quelpa &#39;(package-name :stable t))&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using the argument to the =quelpa= command overrides the global setting =quelpa-stable-p=, and using the argument in a recipe overrides both the command argument and the global setting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Non-tagged package version numbers are generated at build time using the current date, and these numbers usually are sorted as higher than tagged version numbers. Therefore, if you have installed a non-tagged package version and wish to replace it with a tagged version, you must first remove the package, then install the tagged version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Tagged versions are commonly referred to as &#34;stable&#34; versions (since these are the versions appearing in the MELPA Stable repo). However, such package versions are not necessarily more stable than the untagged versions provided in the non-&#34;Stable&#34; MELPA repo, and using them is not generally recommended. Therefore, we do not refer to such versions as &#34;stable&#34; versions.&lt;/p&gt; &#xA;&lt;p&gt;** Additional recipe fetchers&lt;/p&gt; &#xA;&lt;p&gt;You may use these additional fetchers in recipes:&lt;/p&gt; &#xA;&lt;p&gt;*** URL&lt;/p&gt; &#xA;&lt;p&gt;The =url= fetcher builds packages from single =.el= files. The URL may be a remote HTTP one or a local =file://= one. For example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (quelpa &#39;(rainbow-mode :fetcher url :url &#34;&lt;a href=&#34;http://git.savannah.gnu.org/cgit/emacs/elpa.git/plain/packages/rainbow-mode/rainbow-mode.el&#34;&gt;http://git.savannah.gnu.org/cgit/emacs/elpa.git/plain/packages/rainbow-mode/rainbow-mode.el&lt;/a&gt;&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, upgrades are managed through file hashes, so if the content has changed, Quelpa will upgrade the package.&lt;/li&gt; &#xA; &lt;li&gt;Existing version numbers are retained. Quelpa uses a version suffix that allows the original version to retain priority, so if you install a package from another source with the same version, it will be preferred. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To omit the Quelpa-specific version suffix, use the parameter =:version original=. For example:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (quelpa &#39;(queue :version original :fetcher url :url &#34;&lt;a href=&#34;http://www.dr-qubit.org/download.php?file=predictive/queue.el&#34;&gt;http://www.dr-qubit.org/download.php?file=predictive/queue.el&lt;/a&gt;&#34; )) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** File&lt;/p&gt; &#xA;&lt;p&gt;The =file= fetcher builds single-file packages from local =.el= files. For example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (quelpa &#39;(rainbow-mode :fetcher file :path &#34;/home/user/src/rainbow-mode/rainbow-mode.el&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;It also builds multi-file packages from a local directory. For example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (quelpa &#39;(rainbow-mode :fetcher file :path &#34;~/src/rainbow-mode&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specifying a directory for =:path= does not retain existing version numbers, nor does it respect the =:version original= parameter.&lt;/li&gt; &#xA; &lt;li&gt;Paths are expanded with =expand-file-name=, so =~= in path names is expanded to the user&#39;s home directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Github SSH&lt;/p&gt; &#xA;&lt;p&gt;The =github-ssh= fetcher builds packages from =github ssh= link, it&#39;s alternative of =github= fetcher which builds packages from =https= link. For example, the following recipe will clone =Quelpa= from =&lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:quelpa/quelpa.git= and builds it:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (quelpa &#39;(quelpa :fetcher github-ssh :repo &#34;quelpa/quelpa&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You should setup [[https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent][Github ssh key]] before using this.&lt;/li&gt; &#xA; &lt;li&gt;This fetcher will come handy when you want to modify the packages and contribute back without the needs of enter password everytime.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Additional options&lt;/p&gt; &#xA;&lt;p&gt;*** Prevent updating of MELPA repo on Emacs startup&lt;/p&gt; &#xA;&lt;p&gt;By default, when Quelpa is loaded, it updates the local clone of the MELPA git repo, which ensures that the latest recipes are always available. If you load Quelpa in your init file, this naturally lengthens Emacs&#39;s startup time. You may disable this by setting =quelpa-update-melpa-p= to nil before loading Quelpa.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to use MELPA recipes at all (e.g. if you&#39;re using Quelpa mainly to install packages not in MELPA) you can disable all fetching of the MELPA repo by setting =quelpa-checkout-melpa-p= to nil.&lt;/p&gt; &#xA;&lt;p&gt;*** Use local recipes&lt;/p&gt; &#xA;&lt;p&gt;You may configure Quelpa to use recipes stored in a local directory in preference to those in MELPA. This may be helpful if you wish to modify a MELPA recipe. The variable =quelpa-melpa-recipe-stores= is a list of directory paths which are searched for recipes; by default, it contains the path to the local MELPA clone&#39;s recipes directory. Directories listed in the variable are searched in order, so to give your own recipe directory preference, add it to the front of the list, like:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (add-to-list &#39;quelpa-melpa-recipe-stores &#34;/home/user/src/recipes&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;If a package&#39;s recipe is not found in that directory, Quelpa will fall back on remaining directories in the list, including the MELPA recipe directory.&lt;/p&gt; &#xA;&lt;p&gt;Recipe files should be named after the package name, without any filename extension.&lt;/p&gt; &#xA;&lt;h1&gt;FIXME: What does this mean? # Alternatively, you can also specify a list of recipes instead.&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why &#34;Quelpa&#34;?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The German word /quelle/ means /spring/ (as in: water source) but also /source/. /Source code/ is translated to /quellcode/. /ELPA/ is the abbreviation for Emacs Lisp Package Archive. You get the idea.&lt;/p&gt;</summary>
  </entry>
</feed>