<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-29T01:30:03Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pythonic-emacs/anaconda-mode</title>
    <updated>2024-08-29T01:30:03Z</updated>
    <id>tag:github.com,2024-08-29:/pythonic-emacs/anaconda-mode</id>
    <link href="https://github.com/pythonic-emacs/anaconda-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code navigation, documentation lookup and completion for Python.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/pythonic-emacs/anaconda-mode/master/static/logo.png&#34;&gt; Anaconda mode &lt;a href=&#34;https://melpa.org/#/anaconda-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/anaconda-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/anaconda-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/anaconda-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pythonic-emacs/anaconda-mode/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/pythonic-emacs/anaconda-mode/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code navigation, documentation lookup and completion for Python.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pythonic-emacs/anaconda-mode/master/static/completion.png&#34; alt=&#34;Completion screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pythonic-emacs/anaconda-mode/master/static/reference.png&#34; alt=&#34;Reference search screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Anaconda mode provides the following features&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;context-sensitive code completion&lt;/li&gt; &#xA; &lt;li&gt;jump to definitions&lt;/li&gt; &#xA; &lt;li&gt;find references&lt;/li&gt; &#xA; &lt;li&gt;view documentation&lt;/li&gt; &#xA; &lt;li&gt;virtual environment&lt;/li&gt; &#xA; &lt;li&gt;eldoc mode&lt;/li&gt; &#xA; &lt;li&gt;all this stuff inside vagrant, docker and remote hosts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Python Versions&lt;/h2&gt; &#xA;&lt;p&gt;2.7, 3.4 - 3.12&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use this package you need to install &lt;code&gt;setuptools&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;package.el&lt;/h4&gt; &#xA;&lt;p&gt;All you need to do is install the package from &lt;a href=&#34;https://melpa.org/&#34;&gt;Melpa&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET anaconda-mode RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual&lt;/h4&gt; &#xA;&lt;p&gt;Clone this repository somewhere and add this directory to your &lt;code&gt;load-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Prelude&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;anaconda-mode&lt;/code&gt; is included in the &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt; distribution. You can use it as well. Look at the &lt;code&gt;prelude-python&lt;/code&gt; module to see more details.&lt;/p&gt; &#xA;&lt;h4&gt;Spacemacs&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;anaconda-mode&lt;/code&gt; is included in the &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt; distribution. You can use it as well. Look at the &lt;a href=&#34;https://develop.spacemacs.org/layers/+lang/python/README.html&#34;&gt;python&lt;/a&gt; language layer to see more details.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can automatically enable &lt;code&gt;anaconda-mode&lt;/code&gt; in all python buffers with following code in your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;python-mode-hook &#39;anaconda-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ElDoc&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;anaconda-eldoc-mode&lt;/code&gt; provide document function to &lt;code&gt;eldoc-mode&lt;/code&gt; so when your point is between the parenthesis of a function call, its parameters are shown in the echo area. All You need is to enable &lt;code&gt;anaconda-eldoc-mode&lt;/code&gt; in addition to the previous setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;python-mode-hook &#39;anaconda-eldoc-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To start a completion press &lt;code&gt;C-M-i&lt;/code&gt;. This is the standard emacs binding for &lt;code&gt;complete-at-point&lt;/code&gt; function. You can use &lt;a href=&#34;http://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt; with &lt;a href=&#34;https://github.com/proofit404/company-anaconda&#34;&gt;company-anaconda&lt;/a&gt; backend to get more intelligent UI.&lt;/p&gt; &#xA;&lt;h4&gt;Interactive commands&lt;/h4&gt; &#xA;&lt;p&gt;Here is a list of interactive commands available with anaconda-mode&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C-M-i&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-complete&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M-.&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-find-definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C-x 4 .&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-find-definitions-other-window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C-x 5 .&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-find-definitions-other-frame&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M-=&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-find-assignments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C-x 4 =&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-find-assignments-other-window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C-x 5 =&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-find-assignments-other-frame&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M-r&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-find-references&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C-x 4 r&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-find-references-other-window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C-x 5 r&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-find-references-other-frame&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M-,&lt;/td&gt; &#xA;   &lt;td&gt;xref-pop-marker-stack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;M-?&lt;/td&gt; &#xA;   &lt;td&gt;anaconda-mode-show-doc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If multiple candidates are found for definitions, assignments or usages, you&#39;ll see an advanced anaconda navigator buffer.&lt;/p&gt; &#xA;&lt;h4&gt;PYTHONPATH&lt;/h4&gt; &#xA;&lt;p&gt;You can add your project to the Emacs &lt;code&gt;PYTHONPATH&lt;/code&gt;. If you store project dependencies somewhere on your machine, you can add them as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;python-shell-extra-pythonpaths &#34;/path/to/the/project&#34;)&#xA;(add-to-list &#39;python-shell-extra-pythonpaths &#34;/path/to/the/dependency&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Virtual environment&lt;/h4&gt; &#xA;&lt;p&gt;Use a virtual environment to isolate your project dependencies from others on the system. You can additionally install your project in an editable mode in the virtual environment. This will improve search functionality. Then activate this virtual environment inside Emacs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x pythonic-activate RET /path/to/virtualenv RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also you can use &lt;a href=&#34;https://github.com/proofit404/pyenv-mode&#34;&gt;pyenv-mode&lt;/a&gt; or similar package to hold virtual environment in actual state.&lt;/p&gt; &#xA;&lt;p&gt;Each action above applies to &lt;code&gt;anaconda-mode&lt;/code&gt; immediately. The next &lt;code&gt;anaconda-mode&lt;/code&gt; command you call will use this environment for search completion candidates.&lt;/p&gt; &#xA;&lt;h4&gt;Tramp&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s possible to use anaconda-mode on a remote server when you connect to it using tramp. Anaconda-mode can search for completion candidates and all other stuff on remote server while you&#39;re running Emacs locally. Just open an interesting remote file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C-x C-f /ssh:remote_host:project/__init__.py RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After tramp successfully connects and you see actual buffer content, completion and definitions search should work as usual. You can even use virtual environment from remote host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x pythonic-activate RET /ssh:remote_host:/home/user/venv RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or specify another remote interpreter&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq python-shell-interpreter &#34;/usr/bin/python&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important to remember that &lt;code&gt;remote_host&lt;/code&gt; must be a real host name or an IP address. SSH aliases not allowed to be used with anaconda-mode. All kinds of searching from inside the virtual environment are available from any buffer. However searching inside your project is available only if you open it on the same machine as the interpreter.&lt;/p&gt; &#xA;&lt;h4&gt;Vagrant&lt;/h4&gt; &#xA;&lt;p&gt;You can get all the intelligent features of anaconda-mode with virtual environments deployed on your vagrant box. Fire up the vagrant machine as usual. The easiest way to handle authentication is to copy your public ssh key to the vagrant box.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh-copy-id vagrant@localhost -p 2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now open your project inside the vagrant box.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C-x C-f /ssh:vagrant@localhost#2222:/vagrant/polls/views.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally you can activate your project environment, if installed inside vagrant.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x pythonic-activate RET /ssh:vagrant@localhost#2222:/vagrant/polls/venv RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;You can use definition, reference and auto-completion search for dependencies installed in the Docker container. Let suppose your project layout is the same as in &lt;a href=&#34;https://docs.docker.com/compose/django/&#34;&gt;Compose and Django&lt;/a&gt; tutorial. To use &lt;code&gt;anaconda-mode&lt;/code&gt; together with Docker you need to install two additional external dependencies. First of all, you need to install &lt;a href=&#34;https://github.com/emacs-pe/docker-tramp.el&#34;&gt;docker-tramp&lt;/a&gt; Emacs package. The second step is to install Unix &lt;code&gt;socat&lt;/code&gt; utility. You should have your containers up and running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, you can set Python interpreter to one installed inside container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq python-shell-interpreter &#34;/usr/local/bin/python&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can open some file inside the project running inside a container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C-x C-f /docker:root@django_web_1:/code/manage.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you try to find the definition of the Django module imported in this buffer, &lt;code&gt;anaconda-mode&lt;/code&gt; will jump to the package installed inside this Docker container.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;If you see constant response reading error, try to change localhost address from default &lt;code&gt;127.0.0.1&lt;/code&gt; to &lt;code&gt;localhost&lt;/code&gt;. This is likely to fix problems on Mac OS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq anaconda-mode-localhost-address &#34;localhost&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bug Reports&lt;/h2&gt; &#xA;&lt;p&gt;Please attach &lt;code&gt;*anaconda-mode*&lt;/code&gt;, &lt;code&gt;*anaconda-response*&lt;/code&gt; and &lt;code&gt;*anaconda-socat*&lt;/code&gt; buffer content to every created issue.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dmitry Gutov &lt;strong&gt;@dgutov&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bo Lin &lt;strong&gt;@sadboy&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vasilij Schneidermann &lt;strong&gt;@wasamasa&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fredrik Bergroth &lt;strong&gt;@fbergroth&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fabio Corneti &lt;strong&gt;@fabiocorneti&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tom Davis &lt;strong&gt;@tdavis&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sviridov Alexander &lt;strong&gt;@sviridov&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mario Rodas &lt;strong&gt;@marsam&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>