<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-20T01:35:16Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Exafunction/codeium.el</title>
    <updated>2023-02-20T01:35:16Z</updated>
    <id>tag:github.com,2023-02-20:/Exafunction/codeium.el</id>
    <link href="https://github.com/Exafunction/codeium.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free, ultrafast Copilot alternative for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; alt=&#34;Codeium&#34; src=&#34;https://raw.githubusercontent.com/Exafunction/codeium.el/main/codeium.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/3XFf78nAx5&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1027685395649015980?label=community&amp;amp;color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=codeiumdev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style--blue?style=social&amp;amp;logo=twitter&amp;amp;label=Follow%20%40codeiumdev&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/Exafunction/codeium.vim&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Codeium.codeium&#34;&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/i/Codeium.codeium?label=Visual%20Studio&amp;amp;logo=visualstudio&#34; alt=&#34;Visual Studio&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/20540-codeium/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/d/20540?label=JetBrains&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open-vsx.org/extension/Codeium/codeium&#34;&gt;&lt;img src=&#34;https://img.shields.io/open-vsx/dt/Codeium/codeium?label=Open%20VSX&#34; alt=&#34;Open VSX&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/codeium/hobjkcpmjhlegmobgonaagepfckjkceh&#34;&gt;&lt;img src=&#34;https://img.shields.io/chrome-web-store/users/hobjkcpmjhlegmobgonaagepfckjkceh?label=Google%20Chrome&amp;amp;logo=googlechrome&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Google Chrome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;codeium.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Free, ultrafast, extensible AI code completion tool for Emacs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Codeium autocompletes your code with AI in all major IDEs. We &lt;a href=&#34;https://www.codeium.com/blog/codeium-copilot-alternative-in-emacs&#34;&gt;launched&lt;/a&gt; this implementation of the Codeium plugin for Emacs to bring this modern coding superpower to more developers. Check out our &lt;a href=&#34;https://www.codeium.com/playground&#34;&gt;playground&lt;/a&gt; if you want to quickly try out Codeium online.&lt;/p&gt; &#xA;&lt;p&gt;codeium.el provides a &lt;code&gt;completion-at-point-functions&lt;/code&gt; backend. It is designed to be use with a front-end, such as &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt;, &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;, or the built-in &lt;code&gt;completion-at-point&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;codeium.el is an open source client and (mostly) written by &lt;a href=&#34;https://github.com/Alan-Chen99&#34;&gt;Alan Chen&lt;/a&gt;. It uses a proprietary language server binary, currently downloaded (automatically, with confirmation) from &lt;a href=&#34;https://github.com/Exafunction/codeium/releases/&#34;&gt;here&lt;/a&gt;. Use &lt;code&gt;M-x codeium-diagnose&lt;/code&gt; to see apis/fields that would be sent to the local language server, and the command used to run the local language server. Customize &lt;code&gt;codeium-api-enabled&lt;/code&gt;, &lt;code&gt;codeium-fields-regexps&lt;/code&gt; and &lt;code&gt;codeium-command&lt;/code&gt; to change them.&lt;/p&gt; &#xA;&lt;p&gt;Contributions are welcome! Feel free to submit pull requests and issues related to the package.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7545794/219270660-f14ddb8c-7087-4d97-9a15-b043467a2c00.gif&#34; alt=&#34;Emacs Demo - Final&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;üöÄ Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install a text-completion frontend of your choice. (We recommend &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;Exafunction/codeium.el&lt;/code&gt; using your emacs package manager of choice, or manually. See &lt;a href=&#34;https://raw.githubusercontent.com/Exafunction/codeium.el/main/#-installation-options&#34;&gt;Installation Options&lt;/a&gt; below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;M-x codeium-install&lt;/code&gt; to set up the package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;codeium-completion-at-point&lt;/code&gt; to your &lt;code&gt;completion-at-point-functions&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start seeing suggestions!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can see all customization options via &lt;code&gt;M-x customize&lt;/code&gt;. (better documentation coming soon!)&lt;/p&gt; &#xA;&lt;p&gt;Here is an example configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; we recommend using use-package to organize your init.el&#xA;(use-package codeium&#xA;    ;; if you use straight&#xA;    ;; :straight &#39;(:type git :host github :repo &#34;Exafunction/codeium.el&#34;)&#xA;    ;; otherwise, make sure that the codeium.el file is on load-path&#xA;    &#xA;    :init&#xA;    ;; use globally&#xA;    (add-to-list &#39;completion-at-point-functions #&#39;codeium-completion-at-point)&#xA;    ;; or on a hook&#xA;    ;; (add-hook &#39;python-mode-hook&#xA;    ;;     (lambda ()&#xA;    ;;         (setq-local completion-at-point-functions &#39;(codeium-completion-at-point))))&#xA;&#xA;    ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):&#xA;    ;; (add-hook &#39;python-mode-hook&#xA;    ;;     (lambda ()&#xA;    ;;         (setq-local completion-at-point-functions&#xA;    ;;             (list (cape-super-capf #&#39;codeium-completion-at-point #&#39;lsp-completion-at-point)))))&#xA;    ;; an async company-backend is coming soon!&#xA;&#xA;    ;; codeium-completion-at-point is autoloaded, but you can&#xA;    ;; optionally set a timer, which might speed up things as the&#xA;    ;; codeium local language server takes ~0.2s to start up&#xA;    ;; (add-hook &#39;emacs-startup-hook&#xA;    ;;  (lambda () (run-with-timer 0.1 nil #&#39;codeium-init)))&#xA;&#xA;    :defer t&#xA;    :config&#xA;    (setq use-dialog-box nil) ;; do not use popup boxes&#xA;&#xA;    ;; if you don&#39;t want to use customize to save the api-key&#xA;    ;; (setq codeium/metadata/api_key &#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;)&#xA;&#xA;    ;; get codeium status in the modeline&#xA;    (setq codeium-mode-line-enable&#xA;        (lambda (api) (not (memq api &#39;(CancelRequest Heartbeat AcceptCompletion)))))&#xA;    (add-to-list &#39;mode-line-format &#39;(:eval (car-safe codeium-mode-line)) t)&#xA;    ;; alternatively for a more extensive mode-line&#xA;    ;; (add-to-list &#39;mode-line-format &#39;(-50 &#34;&#34; codeium-mode-line) t)&#xA;&#xA;    ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server&#xA;    (setq codeium-api-enabled&#xA;        (lambda (api)&#xA;            (memq api &#39;(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))&#xA;    ;; you can also set a config for a single buffer like this:&#xA;    ;; (add-hook &#39;python-mode-hook&#xA;    ;;     (lambda ()&#xA;    ;;         (setq-local codeium/editor_options/tab_size 4)))&#xA;&#xA;    ;; You can overwrite all the codeium configs!&#xA;    ;; for example, we recommend limiting the string sent to codeium for better performance&#xA;    (defun my-codeium/document/text ()&#xA;        (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))&#xA;    ;; if you change the text, you should also change the cursor_offset&#xA;    ;; warning: this is measured by UTF-8 encoded bytes&#xA;    (defun my-codeium/document/cursor_offset ()&#xA;        (codeium-utf8-byte-length&#xA;            (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))&#xA;    (setq codeium/document/text &#39;my-codeium/document/text)&#xA;    (setq codeium/document/cursor_offset &#39;my-codeium/document/cursor_offset))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example configuration for company-mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package company&#xA;    :defer 0.1&#xA;    :config&#xA;    (global-company-mode t)&#xA;    (setq-default&#xA;        company-idle-delay 0.05&#xA;        company-require-match nil&#xA;        company-minimum-prefix-length 0&#xA;        &#xA;        ;; get only preview&#xA;        company-frontends &#39;(company-preview-frontend)&#xA;        ;; also get a drop down&#xA;        ;; company-frontends &#39;(company-pseudo-tooltip-frontend company-preview-frontend)&#xA;        ))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also access codeium.el from elisp; here is a snippet that returns the full response of a &lt;code&gt;GetCompletions&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(cl-letf*&#xA;    (&#xA;        ;; making a new codeium-state (thus a new local language server process)&#xA;        ;; takes ~0.2 seconds; avoid when possible&#xA;        (state (codeium-state-make :name &#34;example&#34;))&#xA;        ((codeium-config &#39;codeium/document/text state) &#34;def fibi(n):&#34;)&#xA;        ((codeium-config &#39;codeium/document/cursor_offset state) 12)&#xA;        ((codeium-config &#39;codeium-api-enabled state) (lambda (api) (eq api &#39;GetCompletions))))&#xA;    (unwind-protect&#xA;        (progn&#xA;            (codeium-init state)&#xA;            ;; make async requests using codeium-request&#xA;            (cdr (codeium-request-synchronously &#39;GetCompletions state nil)))&#xA;        ;; cleans up temp files, kill process. Scheduled async requests on this state will be dropped.&#xA;        (codeium-reset state)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, among other things, you get probabilities for each token! We would love to see a PR or your own package that uses those!&lt;/p&gt; &#xA;&lt;h2&gt;üíæ Installation Options&lt;/h2&gt; &#xA;&lt;h3&gt;‚û°Ô∏è straight.el&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(straight-use-package &#39;(codeium :type git :host github :repo &#34;Exafunction/codeium.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üí™ Manual&lt;/h3&gt; &#xA;&lt;p&gt;Run the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 https://github.com/Exafunction/codeium.el ~/.emacs.d/codeium.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/codeium.el&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Do you have a working installation for another Emacs environment (Spacemacs, Doom Emacs)? Submit a PR so we can share it with others!&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>