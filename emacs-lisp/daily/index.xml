<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T01:40:12Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bbatsov/projectile</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/bbatsov/projectile</id>
    <link href="https://github.com/bbatsov/projectile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project Interaction Library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Projectile&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bbatsov/projectile/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/bbatsov/projectile/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/projectile&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/projectile-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/projectile&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/projectile-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/projectile.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/projectile.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Synopsis&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Projectile&lt;/strong&gt; is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible). For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU &lt;code&gt;find&lt;/code&gt; (but for performance sake an indexing mechanism backed by external commands exists as well).&lt;/p&gt; &#xA;&lt;p&gt;Projectile tries to be practical - portability is great, but if some external tools could speed up some task substantially and the tools are available, Projectile will leverage them.&lt;/p&gt; &#xA;&lt;p&gt;This library provides easy project management and navigation. The concept of a project is pretty basic - just a folder containing some special file (e.g. a VCS marker or a project descriptor file like &lt;code&gt;pom.xml&lt;/code&gt; or &lt;code&gt;Gemfile&lt;/code&gt;). Projectile will auto-detect pretty much every popular project type out of the box and you can easily extend it with additional project types.&lt;/p&gt; &#xA;&lt;p&gt;Here are some of Projectile&#39;s features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;jump to a file in project&lt;/li&gt; &#xA; &lt;li&gt;jump to a project buffer&lt;/li&gt; &#xA; &lt;li&gt;jump to a test in project&lt;/li&gt; &#xA; &lt;li&gt;toggle between files with same names but different extensions (e.g. &lt;code&gt;.h&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;.c/.cpp&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;Gemfile.lock&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;toggle between code and its test (e.g. &lt;code&gt;main.service.js&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;main.service.spec.js&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;jump to recently visited files in the project&lt;/li&gt; &#xA; &lt;li&gt;switch between projects you have worked on&lt;/li&gt; &#xA; &lt;li&gt;kill (close) all project buffers&lt;/li&gt; &#xA; &lt;li&gt;replace in project&lt;/li&gt; &#xA; &lt;li&gt;grep (search) in project&lt;/li&gt; &#xA; &lt;li&gt;run shell commands in a project (e.g. &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;lein&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;support for multiple minibuffer completion/selection libraries (&lt;code&gt;ido&lt;/code&gt;, &lt;code&gt;ivy&lt;/code&gt;, &lt;code&gt;helm&lt;/code&gt; and the default completion system)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=GRQKNBM6P8VRQ&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;Paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been developing Projectile for a decade now (since 2011). While it&#39;s a fun project to work on, it still requires a lot of time and energy to maintain.&lt;/p&gt; &#xA;&lt;p&gt;You can support my work on Projectile via &lt;a href=&#34;https://www.paypal.me/bbatsov&#34;&gt;PayPal&lt;/a&gt;, &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;Patreon&lt;/a&gt; and &lt;a href=&#34;https://github.com/sponsors/bbatsov&#34;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Projectile in Action&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a glimpse of Projectile in action (using &lt;code&gt;ivy&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bbatsov/projectile/master/doc/modules/ROOT/assets/images/projectile-demo.gif&#34; alt=&#34;Projectile Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this short demo you can see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;finding files in a project&lt;/li&gt; &#xA; &lt;li&gt;switching between implementation and test&lt;/li&gt; &#xA; &lt;li&gt;switching between projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The instructions that follow are meant to get you from zero to a running Projectile setup in a minute. Visit the &lt;a href=&#34;https://docs.projectile.mx&#34;&gt;online documentation&lt;/a&gt; for (way) more details.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;package.el&lt;/code&gt; is the built-in package manager in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Projectile is available on all major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href=&#34;https://elpa.nongnu.org&#34;&gt;NonGNU ELPA&lt;/a&gt;, &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can install Projectile with the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt; &lt;code&gt;projectile&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.04 or later may simply &lt;code&gt;apt-get install elpa-projectile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally add this to your Emacs config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(projectile-mode +1)&#xA;;; Recommended keymap prefix on macOS&#xA;(define-key projectile-mode-map (kbd &#34;s-p&#34;) &#39;projectile-command-map)&#xA;;; Recommended keymap prefix on Windows/Linux&#xA;(define-key projectile-mode-map (kbd &#34;C-c p&#34;) &#39;projectile-command-map)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those keymap prefixes are just a suggestion. Feel free to put there whatever works best for you.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;p&gt;Enable &lt;code&gt;projectile-mode&lt;/code&gt;, open a file in one of your projects and type a command such as &lt;kbd&gt;C-c p f&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.projectile.mx&#34;&gt;online documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some operations like search (grep) depend (presently) on external utilities such as &lt;code&gt;find&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Commands depending on external utilities might misbehave on the &lt;code&gt;fish&lt;/code&gt; shell.&lt;/li&gt; &#xA; &lt;li&gt;Using Projectile over TRAMP might be slow in certain cases.&lt;/li&gt; &#xA; &lt;li&gt;Some commands might misbehave on complex project setups (e.g. a git project with submodules).&lt;/li&gt; &#xA; &lt;li&gt;Projectile was mostly tested on Unix OS-es (e.g. GNU/Linux and macOS), so some functionality might not work well on Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Check out the project&#39;s &lt;a href=&#34;https://github.com/bbatsov/projectile/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open&#34;&gt;issue list&lt;/a&gt; a list of unresolved issues. By the way - feel free to fix any of them and send me a pull request. :-)&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/bbatsov/projectile/contributors&#34;&gt;list&lt;/a&gt; of all the people who have contributed to the development of Projectile (a.k.a. Projectile&#39;s Hall of Fame).&lt;/p&gt; &#xA;&lt;p&gt;Joining this esteemed group of people is only a commit away!&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;A fairly extensive changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/bbatsov/projectile/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright Â© 2011-2021 Bozhidar Batsov and &lt;a href=&#34;https://github.com/bbatsov/projectile/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the GNU General Public License, version 3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DiamondBond/emacs</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/DiamondBond/emacs</id>
    <link href="https://github.com/DiamondBond/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Emacs configuration.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Diamond&#39;s Emacs #+AUTHOR: index #+EMAIL: &lt;a href=&#34;mailto:diamondbond1@gmail.com&#34;&gt;diamondbond1@gmail.com&lt;/a&gt; #+LANGUAGE: en #+CREATOR: Emacs 28.1 (Org mode 9.5.3) #+OPTIONS: toc:2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[./img/screenshot.png]]&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote&lt;/p&gt; &#xA;&lt;p&gt;Simple Emacs configuration aimed at enhancing the default experience, akin to something equidistant between vanilla &amp;amp; doom.&lt;/p&gt; &#xA;&lt;p&gt;#+end_quote&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://diamondbond.neocities.org/emacs.html][The entire config file can be viewed here in HTML format]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/DiamondBond/emacs/blob/master/docs/emacsfromsource.org][Emacs build instructions]].&lt;/p&gt; &#xA;&lt;p&gt;Clone this repo:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ git clone &lt;a href=&#34;https://github.com/diamondbond/emacs.git&#34;&gt;https://github.com/diamondbond/emacs.git&lt;/a&gt; ~/.emacs.d --depth 1 #+end_src&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/DiamondBond/emacs/blob/master/bin/tangle.sh][Tangle]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ cd ~/.emacs.d/bin $ ./tangle.sh #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Please run tangle.sh whenever you edit a =.org= configuration file.&lt;/p&gt; &#xA;&lt;p&gt;** Icons&lt;/p&gt; &#xA;&lt;p&gt;If you care about fancy icons, install the fonts provided by [[https://github.com/domtronn/all-the-icons.el][all the icons]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp M-x all-the-icons-install-fonts #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** LSP&lt;/p&gt; &#xA;&lt;p&gt;Most IDE-like features are provided by the [[https://github.com/emacs-lsp/lsp-mode][LSP]] package. For it to work properly, you need to install the appropriate [[https://github.com/emacs-lsp/lsp-mode#supported-languages][language servers]].&lt;/p&gt; &#xA;&lt;p&gt;** Email&lt;/p&gt; &#xA;&lt;p&gt;Refer to the [[https://github.com/DiamondBond/emacs/blob/master/docs/setupemail.org][Email setup documentation]] for this functionality.&lt;/p&gt; &#xA;&lt;p&gt;** Dependencies&lt;/p&gt; &#xA;&lt;p&gt;Refer to the [[https://github.com/DiamondBond/emacs/blob/master/docs/dependencies.org][Dependencies documentation]].&lt;/p&gt; &#xA;&lt;p&gt;** Customization&lt;/p&gt; &#xA;&lt;p&gt;Edit =.emacs.d/globals.org= to change the default username, email address, nicks &amp;amp; browser.&lt;/p&gt; &#xA;&lt;p&gt;Edit =.emacs.d/userconfig.org= to add your custom settings and/or override base settings.&lt;/p&gt; &#xA;&lt;p&gt;You may also edit =.emacs.d/config.org= directly, but your custom settings might be wiped out during an update.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tangling&lt;/p&gt; &#xA;&lt;p&gt;This Emacs configuration will auto-tangle all the related configuration .org files on save via the [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] package.&lt;/p&gt; &#xA;&lt;p&gt;Add tangle.sh to =$PATH= in your =~/.bashrc= file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh PATH=&#34;$HOME/.emacs.d/bin:$PATH&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Now you can call tangle.sh from anywhere.&lt;/p&gt; &#xA;&lt;p&gt;I recommend adding this alias to your =~/.bash_aliases= file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh alias edaemon=&#34;tangle.sh &amp;amp;&amp;amp; emacs --daemon&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will tangle any changes made and start the Emacs daemon.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: call =tangle.sh= with an arbitrary arg to use [[https://github.com/DiamondBond/bin/blob/master/auth-restore.sh][M-x auth-restore]].&lt;/p&gt; &#xA;&lt;p&gt;** Running&lt;/p&gt; &#xA;&lt;p&gt;Start Emacs with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ edaemon #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Connect to the Emacs daemon via =emacsclient= with the following command:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ emacsclient -c -n -a &#39;emacs&#39; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Updating&lt;/p&gt; &#xA;&lt;p&gt;Update this Emacs configuration and upgrade its packages with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp M-x config/update #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Quiting&lt;/p&gt; &#xA;&lt;p&gt;Ask the Emacs daemon to gracefully exit with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp M-x kill-emacs #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/emacs.d</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/purcell/emacs.d</id>
    <link href="https://github.com/purcell/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs configuration bundle with batteries included&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/purcell/emacs.d/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/emacs.d/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;A reasonable Emacs config&lt;/h1&gt; &#xA;&lt;p&gt;This is my emacs configuration tree, continually used and tweaked since 2000, and it may be a good starting point for other Emacs users, especially web developers. These days it&#39;s somewhat geared towards OS X, but it is known to also work on Linux and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Emacs itself comes with support for many programming languages. This config adds improved defaults and extended support for the following, listed in the approximate order of how much I use them, from most to least:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Haskell / Purescript / Elm / OCaml&lt;/li&gt; &#xA; &lt;li&gt;Ruby / Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;CSS / LESS / SASS / SCSS&lt;/li&gt; &#xA; &lt;li&gt;Javascript / Typescript / Coffeescript&lt;/li&gt; &#xA; &lt;li&gt;HTML / HAML / Markdown / Textile / ERB&lt;/li&gt; &#xA; &lt;li&gt;Common Lisp (with Slime)&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Clojure (with Cider and nRepl)&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Erlang&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In particular, there&#39;s a nice config for &lt;em&gt;autocompletion&lt;/em&gt; with &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company&lt;/a&gt;, and &lt;code&gt;flymake&lt;/code&gt; (re-using backends from &lt;a href=&#34;http://www.flycheck.org&#34;&gt;flycheck&lt;/a&gt;) is used to immediately highlight syntax errors in Ruby, Python, Javascript, Haskell and a number of other languages.&lt;/p&gt; &#xA;&lt;p&gt;LSP support is provided using &lt;code&gt;eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Emacs versions&lt;/h2&gt; &#xA;&lt;p&gt;The config should run on Emacs 25.1 or greater and is designed to degrade smoothly - see the CI build - but note that much newer versions are required for an increasing number of key packages, so to get full functionality you should use the latest Emacs version available to you.&lt;/p&gt; &#xA;&lt;p&gt;Some Windows users might need to follow &lt;a href=&#34;http://xn--9dbdkw.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html&#34;&gt;these instructions&lt;/a&gt; to get TLS (ie. SSL) support included in their Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Other requirements&lt;/h2&gt; &#xA;&lt;p&gt;To make the most of the programming language-specific support in this config, further programs will likely be required, particularly those that &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; uses to provide on-the-fly syntax checking.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install, clone this repo to &lt;code&gt;~/.emacs.d&lt;/code&gt;, i.e. ensure that the &lt;code&gt;init.el&lt;/code&gt; contained in this repo ends up at &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/purcell/emacs.d.git ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon starting up Emacs for the first time, further third-party packages will be automatically downloaded and installed. If you encounter any errors at that stage, try restarting Emacs, and possibly running &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; before doing so.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;Update the config with &lt;code&gt;git pull&lt;/code&gt;. You&#39;ll probably also want/need to update the third-party packages regularly too, because that&#39;s what I do, and the config assumes it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-list-packages&lt;/kbd&gt;, then &lt;kbd&gt;U&lt;/kbd&gt; followed by &lt;kbd&gt;x&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should usually restart Emacs after pulling changes or updating packages so that they can take effect. Emacs should usually restore your working buffers when you restart due to this configuration&#39;s use of the &lt;code&gt;desktop&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; packages.&lt;/p&gt; &#xA;&lt;h2&gt;Changing themes and adding your own customization&lt;/h2&gt; &#xA;&lt;p&gt;To add your own customization, use &lt;kbd&gt;M-x customize&lt;/kbd&gt;, &lt;kbd&gt;M-x customize-themes&lt;/kbd&gt; etc. and/or create a file &lt;code&gt;~/.emacs.d/lisp/init-local.el&lt;/code&gt; which looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;... your code here ...&#xA;&#xA;(provide &#39;init-local)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need initialisation code which executes earlier in the startup process, you can also create an &lt;code&gt;~/.emacs.d/lisp/init-preload-local.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to customize things more extensively, you should probably just fork the repo and hack away at the config to make it your own! Remember to regularly merge in changes from this repo, so that your config remains compatible with the latest package and Emacs versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that I cannot provide support for customised versions of this configuration.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support / issues&lt;/h2&gt; &#xA;&lt;p&gt;If you hit any problems, please first ensure that you are using the latest version of this code, and that you have updated your packages to the most recent available versions (see &#34;Updates&#34; above). If you still experience problems, go ahead and &lt;a href=&#34;https://github.com/purcell/emacs.d&#34;&gt;file an issue on the github project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;-Steve Purcell&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;ð Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;ð¼ LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;â sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;ð¦ @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joaotavora/eglot</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/joaotavora/eglot</id>
    <link href="https://github.com/joaotavora/eglot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A client for Language Server Protocol servers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/joaotavora/eglot/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/joaotavora/eglot/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/eglot.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/eglot.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/eglot&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/eglot-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;M-x Eglot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;E&lt;/em&gt;macs Poly&lt;em&gt;glot&lt;/em&gt;: an Emacs &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;LSP&lt;/a&gt; client that stays out of your way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ð½ Scroll down this README for some &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#animated_gifs&#34;&gt;pretty gifs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ð Read about &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#connecting&#34;&gt;servers&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#commands&#34;&gt;commands and keybindings&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#customization&#34;&gt;customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ð£ Read the &lt;a href=&#34;https://github.com/joaotavora/eglot/raw/master/NEWS.md&#34;&gt;NEWS&lt;/a&gt; file&lt;/li&gt; &#xA; &lt;li&gt;ð Folks over at Google &lt;a href=&#34;https://opensource.googleblog.com/2020/10/announcing-latest-google-open-source.html&#34;&gt;seem to like it&lt;/a&gt;. Thanks!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;em&gt;1-2-3&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Install from &lt;a href=&#34;https://elpa.gnu.org/packages/eglot.html&#34;&gt;GNU ELPA&lt;/a&gt; or &lt;a href=&#34;https://melpa.org/#/eglot&#34;&gt;MELPA&lt;/a&gt;. Just type &lt;code&gt;M-x package-install RET eglot RET&lt;/code&gt; into Emacs 26.1+.&lt;/p&gt; &#xA;&lt;p&gt;Now find some source file, any source file, and type &lt;code&gt;M-x eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;That&#39;s it&lt;/em&gt;. If you&#39;re lucky, this guesses the LSP program to start for the language you&#39;re using. Otherwise, it prompts you to enter one.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;1-2-3-pitfall!&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;By design, Eglot doesn&#39;t depend on anything but Emacs. But there &lt;em&gt;are&lt;/em&gt; ELPA dependencies to newer versions of so-called &#34;core packages&#34; developed &lt;em&gt;in the Emacs mainline&lt;/em&gt;. So unless you&#39;re using a bleeding-edge Emacs, where loading &lt;code&gt;eglot.el&lt;/code&gt; is all you&#39;d need to do, make sure your package system pulls in and loads the newest &lt;code&gt;project.el&lt;/code&gt;, &lt;code&gt;xref.el&lt;/code&gt;, &lt;code&gt;eldoc.el&lt;/code&gt;, etc... In case of trouble &lt;code&gt;M-x find-library&lt;/code&gt; can help you tell if that happened.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;connecting&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Connecting to a server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt; can guess and work out-of-the-box with these servers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ada&#39;s &lt;a href=&#34;https://github.com/AdaCore/ada_language_server&#34;&gt;ada_language_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bash&#39;s &lt;a href=&#34;https://github.com/mads-hartmann/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C/C++&#39;s &lt;a href=&#34;https://clang.llvm.org/extra/clangd.html&#34;&gt;clangd&lt;/a&gt; or &lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;ccls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C#&#39;s &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn&#34;&gt;omnisharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clojure&#39;s &lt;a href=&#34;https://clojure-lsp.io&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CMake&#39;s &lt;a href=&#34;https://github.com/regen100/cmake-language-server&#34;&gt;cmake-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CSS&#39;s &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;css-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dart&#39;s &lt;a href=&#34;https://github.com/dart-lang/sdk/raw/master/pkg/analysis_server/tool/lsp_spec/README.md&#34;&gt;analysis_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dockerfile&#39;s &lt;a href=&#34;https://github.com/rcjsuen/dockerfile-language-server-nodejs&#34;&gt;docker-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elixir&#39;s &lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixir-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elm&#39;s &lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erlang&#39;s &lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang_ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fortran&#39;s &lt;a href=&#34;https://github.com/hansec/fortran-language-server&#34;&gt;fortls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Futhark&#39;s &lt;a href=&#34;https://futhark-lang.org&#34;&gt;futhark lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go&#39;s &lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Godot Engine&#39;s &lt;a href=&#34;https://godotengine.org&#34;&gt;built-in LSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTML &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;html-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haskell&#39;s &lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;haskell-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON&#39;s &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-json-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java&#39;s &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Javascript&#39;s &lt;a href=&#34;https://github.com/theia-ide/typescript-language-server&#34;&gt;TS &amp;amp; JS Language Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&#39;s &lt;a href=&#34;https://github.com/fwcd/KotlinLanguageServer&#34;&gt;kotlin-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lua&#39;s &lt;a href=&#34;https://github.com/Alloyed/lua-lsp&#34;&gt;lua-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mint&#39;s &lt;a href=&#34;https://www.mint-lang.com/&#34;&gt;mint-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nix&#39;s &lt;a href=&#34;https://github.com/nix-community/rnix-lsp&#34;&gt;rnix-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ocaml&#39;s &lt;a href=&#34;https://github.com/ocaml/ocaml-lsp/&#34;&gt;ocaml-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP&#39;s &lt;a href=&#34;https://github.com/felixfbecker/php-language-server&#34;&gt;php-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PureScript&#39;s &lt;a href=&#34;https://github.com/nwolverson/purescript-language-server&#34;&gt;purescript-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python&#39;s &lt;a href=&#34;https://github.com/python-lsp/python-lsp-server&#34;&gt;pylsp&lt;/a&gt;, &lt;a href=&#34;https://github.com/palantir/python-language-server&#34;&gt;pyls&lt;/a&gt; or &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;R&#39;s &lt;a href=&#34;https://cran.r-project.org/package=languageserver&#34;&gt;languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Racket&#39;s &lt;a href=&#34;https://github.com/jeapostrophe/racket-langserver&#34;&gt;racket-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby&#39;s &lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust&#39;s &lt;a href=&#34;https://github.com/rust-analyzer/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scala&#39;s &lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TeX/LaTeX&#39;s &lt;a href=&#34;https://github.com/astoff/digestif&#34;&gt;Digestif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VimScript&#39;s &lt;a href=&#34;https://github.com/iamcco/vim-language-server&#34;&gt;vim-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YAML&#39;s &lt;a href=&#34;https://github.com/redhat-developer/yaml-language-server&#34;&gt;yaml-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zig&#39;s &lt;a href=&#34;https://github.com/zigtools/zls&#34;&gt;zls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;ll add to this list as I test more servers. In the meantime you can customize &lt;code&gt;eglot-server-programs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs &#39;(foo-mode . (&#34;foo-language-server&#34; &#34;--args&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let me know how well it works and we can add it to the list.&lt;/p&gt; &#xA;&lt;p&gt;To skip the guess and always be prompted use &lt;code&gt;C-u M-x eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting automatically&lt;/h2&gt; &#xA;&lt;p&gt;You can also do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (add-hook &#39;foo-mode-hook &#39;eglot-ensure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;, to attempt to start an eglot session automatically every time a &lt;code&gt;foo-mode&lt;/code&gt; buffer is visited.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting via TCP&lt;/h2&gt; &#xA;&lt;p&gt;The examples above use a &#34;pipe&#34; to talk to the server, which works fine on Linux and OSX but in some cases &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Subprocess-hang.html&#34;&gt;&lt;em&gt;may not work on Windows&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To circumvent this limitation, or if the server doesn&#39;t like pipes, you can use &lt;code&gt;C-u M-x eglot&lt;/code&gt; and give it &lt;code&gt;server:port&lt;/code&gt; pattern to connect to a previously started TCP server serving LSP information.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to start it manually every time, you can configure Eglot to start it and immediately connect to it. Ruby&#39;s &lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt; server already works this way out-of-the-box.&lt;/p&gt; &#xA;&lt;p&gt;For another example, suppose you also wanted start Python&#39;s &lt;code&gt;pyls&lt;/code&gt; this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs&#xA;             `(python-mode . (&#34;pyls&#34; &#34;-v&#34; &#34;--tcp&#34; &#34;--host&#34;&#xA;                              &#34;localhost&#34; &#34;--port&#34; :autoport)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see that the element associated with &lt;code&gt;python-mode&lt;/code&gt; is now a more complicated invocation of the &lt;code&gt;pyls&lt;/code&gt; program, which requests that it be started as a server. Notice the &lt;code&gt;:autoport&lt;/code&gt; symbol in there: it is replaced dynamically by a local port believed to be vacant, so that the ensuing TCP connection finds a listening server.&lt;/p&gt; &#xA;&lt;h2&gt;Per-project server configuration&lt;/h2&gt; &#xA;&lt;p&gt;Most servers can guess good defaults and will operate nicely out-of-the-box, but some need to be configured specially via LSP interfaces. Additionally, in some situations, you may also want a particular server to operate differently across different projects.&lt;/p&gt; &#xA;&lt;p&gt;Per-project settings are realized with Emacs&#39;s &lt;em&gt;directory variables&lt;/em&gt; and the Elisp variable &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;. To make a particular Python project always enable Pyls&#39;s snippet support, put a file named &lt;code&gt;.dir-locals.el&lt;/code&gt; in the project&#39;s root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((python-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . ((:pyls . (:plugins (:jedi_completion (:include_params t)))))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells Emacs that any &lt;code&gt;python-mode&lt;/code&gt; buffers in that directory should have a particular buffer-local value of &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;. That variable&#39;s value should be &lt;em&gt;association list&lt;/em&gt; of &lt;em&gt;parameter sections&lt;/em&gt; which are presumably understood by the server. In this example, we associate section &lt;code&gt;pyls&lt;/code&gt; with the parameters object &lt;code&gt;(:plugins (:jedi_completion (:include_params t)))&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now, supposing that you also had some Go code in the very same project, you can configure the Gopls server in the same file. Adding a section for &lt;code&gt;go-mode&lt;/code&gt;, the file&#39;s contents become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((python-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . ((:pyls . (:plugins (:jedi_completion (:include_params t))))))))&#xA; (go-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . ((:gopls . (:usePlaceholders t)))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you can&#39;t afford an actual &lt;code&gt;.dir-locals.el&lt;/code&gt; file, or if managing these files becomes cumbersome, the Emacs manual teaches you programmatic ways to leverage per-directory local variables.&lt;/p&gt; &#xA;&lt;h2&gt;Handling quirky servers&lt;/h2&gt; &#xA;&lt;p&gt;Some servers need even more special hand-holding to operate correctly. If your server has some quirk or non-conformity, it&#39;s possible to extend Eglot via Elisp to adapt to it. Here&#39;s an example on how to get &lt;a href=&#34;https://github.com/cquery-project/cquery&#34;&gt;cquery&lt;/a&gt; working:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs &#39;((c++ mode c-mode) . (eglot-cquery &#34;cquery&#34;)))&#xA;&#xA;(defclass eglot-cquery (eglot-lsp-server) ()&#xA;  :documentation &#34;A custom class for cquery&#39;s C/C++ langserver.&#34;)&#xA;&#xA;(cl-defmethod eglot-initialization-options ((server eglot-cquery))&#xA;  &#34;Passes through required cquery initialization options&#34;&#xA;  (let* ((root (car (project-roots (eglot--project server))))&#xA;         (cache (expand-file-name &#34;.cquery_cached_index/&#34; root)))&#xA;    (list :cacheDirectory (file-name-as-directory cache)&#xA;          :progressReportFrequencyMs -1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, some servers require the language identifier strings they are sent by &lt;code&gt;eglot&lt;/code&gt; to match the exact strings used by VSCode. &lt;code&gt;eglot&lt;/code&gt; usually guesses these identifiers from the major mode name (e.g. &lt;code&gt;elm-mode&lt;/code&gt; â &lt;code&gt;&#34;elm&#34;&lt;/code&gt;), but the mapping can be overridden using the &lt;code&gt;:LANGUAGE-ID&lt;/code&gt; element in the syntax of &lt;code&gt;eglot-server-programs&lt;/code&gt; if necessary.&lt;/p&gt; &#xA;&lt;h2&gt;TRAMP support&lt;/h2&gt; &#xA;&lt;p&gt;Should just work. Try &lt;code&gt;M-x eglot&lt;/code&gt; in a buffer visiting a remote file on a server where you&#39;ve also installed the language server. Only supported on Emacs 27.1 or later.&lt;/p&gt; &#xA;&lt;p&gt;Emacs 27 users may find some language servers &lt;a href=&#34;https://github.com/joaotavora/eglot/issues/662&#34;&gt;fail to start up over TRAMP&lt;/a&gt;. If you experience this issue, update TRAMP to 2.5.0.4 or later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;reporting bugs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Reporting bugs&lt;/h1&gt; &#xA;&lt;p&gt;Having trouble connecting to a server? Expected to have a certain capability supported by it (e.g. completion) but nothing happens? Or do you get spurious and annoying errors in an otherwise smooth operation? We may have help, so open a &lt;a href=&#34;https://github.com/joaotavora/eglot/issues&#34;&gt;new issue&lt;/a&gt; and try to be as precise and objective about the problem as you can:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Include the invaluable &lt;strong&gt;events transcript&lt;/strong&gt;. You can display that buffer with &lt;code&gt;M-x eglot-events-buffer&lt;/code&gt;. It contains the JSONRPC messages exchanged between client and server, as well as the messages the server prints to stderr.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If Emacs errored (you saw -- and possibly heard -- an error message), make sure you repeat the process using &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; so you &lt;strong&gt;get a backtrace&lt;/strong&gt; of the error that you should also attach to the bug report.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try to replicate the problem with &lt;strong&gt;as clean an Emacs run as possible&lt;/strong&gt;. This means an empty &lt;code&gt;.emacs&lt;/code&gt; init file or close to it (just loading &lt;code&gt;eglot.el&lt;/code&gt;, &lt;code&gt;company.el&lt;/code&gt; and &lt;code&gt;yasnippet.el&lt;/code&gt; for example, and you don&#39;t even need &lt;code&gt;use-package.el&lt;/code&gt; to do that).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Some more notes: it is often the case the you will have to report the problem to the LSP server&#39;s developers, too, though it&#39;s understandable that you report it Eglot first, since it is the user-facing frontend first. If the problem is indeed on Eglot&#39;s side, we &lt;em&gt;do&lt;/em&gt; want to fix it, but because Eglot&#39;s developers have limited resources and no way to test all the possible server combinations, you&#39;ll sometimes have to do most of the testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;commands&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Commands and keybindings&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s a summary of available commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt;, as described above;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-reconnect&lt;/code&gt; reconnects to current server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-shutdown&lt;/code&gt; says bye-bye to server of your choice;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-shutdown-all&lt;/code&gt; says bye-bye to every server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-rename&lt;/code&gt; ask the server to rename the symbol at point;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-format&lt;/code&gt; asks the server to format buffer or the active region;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-code-actions&lt;/code&gt; asks the server for any &#34;code actions&#34; at point. Can also be invoked by &lt;code&gt;mouse-1&lt;/code&gt;-clicking some diagnostics. Also &lt;code&gt;M-x eglot-code-action-&amp;lt;TAB&amp;gt;&lt;/code&gt; for shortcuts to specific actions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eldoc&lt;/code&gt; asks the Eldoc system for help at point (this command isn&#39;t specific to Eglot, by the way, it works in other contexts).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-events-buffer&lt;/code&gt; jumps to the events buffer for debugging communication with the server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-stderr-buffer&lt;/code&gt; if the LSP server is printing useful debug information in stderr, jumps to a buffer with these contents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-signal-didChangeConfiguration&lt;/code&gt; updates the LSP server configuration according to the value of the variable &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;, which you may be set in a &lt;code&gt;.dir-locals&lt;/code&gt; file, for example.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are &lt;em&gt;no keybindings&lt;/em&gt; specific to Eglot, but you can bind stuff in &lt;code&gt;eglot-mode-map&lt;/code&gt;, which is active as long as Eglot is managing a file in your project. The commands don&#39;t need to be Eglot-specific, either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-key eglot-mode-map (kbd &#34;C-c r&#34;) &#39;eglot-rename)&#xA;(define-key eglot-mode-map (kbd &#34;C-c o&#34;) &#39;eglot-code-action-organize-imports)&#xA;(define-key eglot-mode-map (kbd &#34;C-c h&#34;) &#39;eldoc)&#xA;(define-key eglot-mode-map (kbd &#34;&amp;lt;f6&amp;gt;&#34;) &#39;xref-find-definitions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;customization&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s a quick summary of the customization options. In Eglot&#39;s customization group (&lt;code&gt;M-x customize-group&lt;/code&gt;) there is more documentation on what these do.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-autoreconnect&lt;/code&gt;: Control ability to reconnect automatically to the LSP server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-connect-timeout&lt;/code&gt;: Number of seconds before timing out LSP connection attempts;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-sync-connect&lt;/code&gt;: Control blocking of LSP connection attempts;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-events-buffer-size&lt;/code&gt;: Control the size of the Eglot events buffer;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-ignored-server-capabilities&lt;/code&gt;: LSP server capabilities that Eglot could use, but won&#39;t;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-confirm-server-initiated-edits&lt;/code&gt;: If non-nil, ask for confirmation before allowing server to edit the source buffer&#39;s text;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a couple more variables that you can customize via Emacs lisp:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-server-programs&lt;/code&gt;: as described &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#connecting&#34;&gt;above&lt;/a&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-strict-mode&lt;/code&gt;: Set to &lt;code&gt;nil&lt;/code&gt; by default, meaning Eglot is generally lenient about non-conforming servers. Set this to &lt;code&gt;(disallow-non-standard-keys enforce-required-keys)&lt;/code&gt; when debugging servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-server-initialized-hook&lt;/code&gt;: Hook run after server is successfully initialized;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-managed-mode-hook&lt;/code&gt;: Hook run after Eglot started or stopped managing a buffer. Use &lt;code&gt;eglot-managed-p&lt;/code&gt; to tell if current buffer is still being managed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-stay-out-of&lt;/code&gt;: List of Emacs features that Eglot shouldn&#39;t automatically try to manage on users&#39; behalf. Useful when you need non-LSP Flymake or Company backends. See docstring for examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-extend-to-xref&lt;/code&gt;: If non-nil and &lt;code&gt;xref-find-definitions&lt;/code&gt; lands you in a file outside your project -- like a system-installed library or header file -- transiently consider it managed by the same LSP server. That file is still outside your project (i.e. &lt;code&gt;project-find-file&lt;/code&gt; won&#39;t find it).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How does Eglot work?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt; starts a server via a shell-command guessed from &lt;code&gt;eglot-server-programs&lt;/code&gt;, using the current major-mode (for whatever language you&#39;re programming in) as a hint.&lt;/p&gt; &#xA;&lt;p&gt;If the connection is successful, you see an &lt;code&gt;[eglot:&amp;lt;server&amp;gt;]&lt;/code&gt; indicator pop up in your mode-line. More importantly, this means current &lt;em&gt;and future&lt;/em&gt; file buffers of that major mode &lt;em&gt;inside your current project&lt;/em&gt; automatically become &#34;managed&#34; by the LSP server, This means that information about these file&#39;s contents is exchanged periodically to provide enhanced coding assistance. Eglot works primarily with Emacs&#39; built-in libraries and &lt;em&gt;not&lt;/em&gt; with third-party replacements for those facilities.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;definitions can be found via &lt;code&gt;xref-find-definitions&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;on-the-fly diagnostics for the buffer or project are given by &lt;code&gt;flymake-mode&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;function signature hints are given by &lt;code&gt;eldoc-mode&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;completion can be summoned with &lt;code&gt;completion-at-point&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;projects are discovered via &lt;code&gt;project.el&lt;/code&gt;&#39;s API;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some extra features are provided if certain libraries are installed and enabled, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;completion dropdowns via &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;snippet completions via &lt;a href=&#34;https://elpa.gnu.org/packages/yasnippet.html&#34;&gt;yasnippet&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;marked-up documentation via &lt;a href=&#34;https://github.com/defunkt/markdown-mode&#34;&gt;markdown&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Eglot doesn&#39;t &lt;em&gt;require&lt;/em&gt; these libraries to work effectively, but will use them automatically if they are found to be active.&lt;/p&gt; &#xA;&lt;p&gt;To &#34;unmanage&#34; a project&#39;s buffers, shutdown the server with &lt;code&gt;M-x eglot-shutdown&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;animated_gifs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;Obligatory animated gif section&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Completion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-completions.gif&#34; alt=&#34;eglot-completions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The animation shows &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company-mode&lt;/a&gt; presenting the completion candidates to the user, but Eglot works with the built-in &lt;code&gt;completion-at-point&lt;/code&gt; function as well, which is usually bound to &lt;code&gt;C-M-i&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Snippet completion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-snippets-on-completion.gif&#34; alt=&#34;eglot-snippets-on-completion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot provides template based completion if the server supports snippet completion and &lt;a href=&#34;https://elpa.gnu.org/packages/yasnippet.html&#34;&gt;yasnippet&lt;/a&gt; is enabled &lt;em&gt;before&lt;/em&gt; Eglot connects to the server. The animation shows &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company-mode&lt;/a&gt;, but &lt;code&gt;completion-at-point&lt;/code&gt; also works with snippets.&lt;/p&gt; &#xA;&lt;h2&gt;Diagnostics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-diagnostics.gif&#34; alt=&#34;eglot-diagnostics&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot relays the diagnostics information received from the LSP server to Emacs&#39;s &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;Flymake&lt;/a&gt;, which annotates/underlines the problematic parts of the buffer. The information is shared with the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt; system, meaning that the commands &lt;code&gt;eldoc&lt;/code&gt; and &lt;code&gt;eldoc-doc-buffer&lt;/code&gt; (the latter bound to &lt;code&gt;C-h-.&lt;/code&gt; for convenience) show diagnostics along with other documentation under point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;Flymake&lt;/a&gt; provides other convenient ways to view and manage diagnostic errors. These are described in its &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When Eglot manages a buffer, it disables pre-existing Flymake backends. See variable &lt;code&gt;eglot-stay-out-of&lt;/code&gt; to change that.&lt;/p&gt; &#xA;&lt;h2&gt;Code Actions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-code-actions.gif&#34; alt=&#34;eglot-code-actions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The LSP server may provide code actions, for example, to fix a diagnostic error or to suggest refactoring edits. The commands are frequently associating with Flymake diagnostic annotations, so that left-clicking them shows a menu. Additionally, the command &lt;code&gt;eglot-code-actions&lt;/code&gt; asks the server for any code spanning a given region.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes, these code actions are initiated by the server. See &lt;code&gt;eglot-confirm-server-initiated-edits&lt;/code&gt; to control that behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Hover on symbol /function signature&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-hover-on-symbol.gif&#34; alt=&#34;eglot-hover-on-symbol&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here, too, the LSP server&#39;s view of a given symbol or function signature is relayed to the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt; system. The commands &lt;code&gt;eldoc&lt;/code&gt; and &lt;code&gt;eldoc-doc-buffer&lt;/code&gt; commands access that information.&lt;/p&gt; &#xA;&lt;p&gt;There are customization variables to help adjust &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt;&#39;s liberal use of the lower &#34;echo area&#34;, among other options. If you still find the solicitous nature of this LSP feature too distracting, you can use &lt;code&gt;eglot-ignored-server-capabilities&lt;/code&gt; to turn it off.&lt;/p&gt; &#xA;&lt;h2&gt;Rename&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-rename.gif&#34; alt=&#34;eglot-rename&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;M-x eglot-rename RET&lt;/code&gt; to rename the symbol at point.&lt;/p&gt; &#xA;&lt;h2&gt;Find definition&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-xref-find-definition.gif&#34; alt=&#34;eglot-xref-find-definition&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To jump to the definition of a symbol, use the built-in &lt;code&gt;xref-find-definitions&lt;/code&gt; command, which is bound to &lt;code&gt;M-.&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Find references&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-xref-find-references.gif&#34; alt=&#34;eglot-xref-find-references&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot here relies on Emacs&#39; built-in functionality as well. &lt;code&gt;xref-find-references&lt;/code&gt; is bound to &lt;code&gt;M-?&lt;/code&gt;. Additionally, Eglot provides the following similar commands: &lt;code&gt;eglot-find-declaration&lt;/code&gt;, &lt;code&gt;eglot-find-implementation&lt;/code&gt;, &lt;code&gt;eglot-find-typeDefinition&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Historical differences to lsp-mode.el&lt;/h1&gt; &#xA;&lt;p&gt;Around May 2018, I wrote a comparison of Eglot to &lt;code&gt;lsp-mode.el&lt;/code&gt;, and was discussed with its then-maintainer. That mode has since been refactored/rewritten and now &lt;a href=&#34;https://github.com/joaotavora/eglot/issues/180&#34;&gt;purports to support&lt;/a&gt; a lot of features that differentiated Eglot from it. It may now be very different or very similar to Eglot, or even sing with the birds in the trees, so &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;go check it out&lt;/a&gt;. That said, here&#39;s the original comparison, which I will not be updating any more.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Eglot is considerably less code and hassle than lsp-mode.el. In most cases, there&#39;s nothing to configure. It&#39;s a minimalist approach focused on user experience and performance.&lt;/p&gt; &#xA;&lt;p&gt;User-visible differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The single most visible difference is the friendly entry point &lt;code&gt;M-x eglot&lt;/code&gt;, not &lt;code&gt;M-x eglot-&amp;lt;language&amp;gt;&lt;/code&gt;. Also, there are no &lt;code&gt;eglot-&amp;lt;language&amp;gt;&lt;/code&gt; extra packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s no &#34;whitelisting&#34; or &#34;blacklisting&#34; directories to languages. &lt;code&gt;M-x eglot&lt;/code&gt; starts servers to handle file of a major mode inside a specific project, using Emacs&#39;s built-in &lt;code&gt;project.el&lt;/code&gt; library to discover projects. Then it automatically detects current and future opened files under that project and syncs with server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy way to quit/restart a server, just middle/right click on the connection name;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pretty interactive mode-line section for live tracking of server communication;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Automatically restarts frequently crashing servers;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slow-to-start servers start asynchronously in the background;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Server-initiated edits are confirmed with the user;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diagnostics work out-of-the-box (no &lt;code&gt;flycheck.el&lt;/code&gt; needed);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Smoother/more responsive (read below).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Under the hood:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Message parser is much simpler.&lt;/li&gt; &#xA; &lt;li&gt;Defers signature requests like &lt;code&gt;textDocument/hover&lt;/code&gt; until server is ready.&lt;/li&gt; &#xA; &lt;li&gt;Sends &lt;code&gt;textDocument/didChange&lt;/code&gt; for groups of edits, not one per each tiny change.&lt;/li&gt; &#xA; &lt;li&gt;Easier to read and maintain elisp. Yeah I know, &lt;em&gt;very subjective&lt;/em&gt;, so judge for yourself.&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t &lt;em&gt;require&lt;/em&gt; anything other than Emacs, but will automatically upgrade to work with stuff outside Emacs, like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;markdown-mode&lt;/code&gt;, if you happen to have these installed.&lt;/li&gt; &#xA; &lt;li&gt;Has automated tests that check against actual LSP servers.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Copyright Assignment&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Eglot&lt;/code&gt; is subject to the same &lt;a href=&#34;https://www.fsf.org/licensing/contributor-faq&#34;&gt;copyright assignment&lt;/a&gt; policy as &lt;code&gt;GNU Emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;https://www.gnu.org/prep/maintain/html_node/Legally-Significant.html#Legally-Significant&#34;&gt;legally significant&lt;/a&gt; contributions can only be merged after the author has completed their paperwork. Please ask for the request form, and we&#39;ll send it to you.&lt;/p&gt; &#xA;&lt;!-- Language servers --&gt; &#xA;&lt;!-- Other references --&gt;</summary>
  </entry>
  <entry>
    <title>melpa/melpa</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/melpa/melpa</id>
    <link href="https://github.com/melpa/melpa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recipes and build machinery for the biggest Emacs package repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MELPA&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/melpa/melpa/actions&#34;&gt;&lt;img src=&#34;https://github.com/melpa/melpa/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MELPA is a growing collection of &lt;code&gt;package.el&lt;/code&gt;-compatible Emacs Lisp packages built automatically on our server from the upstream source code using simple recipes. (Think of it as a server-side version of &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, or even &lt;a href=&#34;https://github.com/Homebrew/homebrew&#34;&gt;Homebrew&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Packages are updated at intervals throughout the day.&lt;/p&gt; &#xA;&lt;p&gt;To browse available packages, check out the &lt;a href=&#34;https://melpa.org/&#34;&gt;archive index page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adding packages is as simple as submitting a new recipe as a pull request; read on for details.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#build-scripts&#34;&gt;Build Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#mirrors&#34;&gt;Mirrors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the MELPA repository, you&#39;ll need an Emacs with &lt;code&gt;package.el&lt;/code&gt;, ie. Emacs 24.1 or greater. To test TLS support you can visit a HTTPS URL, for example with &lt;code&gt;M-x eww RET https://wikipedia.org RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enable installation of packages from MELPA by adding an entry to &lt;code&gt;package-archives&lt;/code&gt; after &lt;code&gt;(require &#39;package)&lt;/code&gt; and before the call to &lt;code&gt;package-initialize&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`&#xA;;; and `package-pinned-packages`. Most users will not need or want to do this.&#xA;;;(add-to-list &#39;package-archives &#39;(&#34;melpa-stable&#34; . &#34;https://stable.melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just use &lt;code&gt;M-x package-list-packages&lt;/code&gt; to browse and install packages from MELPA and elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Note that you&#39;ll need to run &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; or &lt;code&gt;M-x package-list-packages&lt;/code&gt; to ensure that Emacs has fetched the MELPA package list before you can install packages with &lt;code&gt;M-x package-install&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;h3&gt;MELPA Stable&lt;/h3&gt; &#xA;&lt;p&gt;Packages in MELPA are built directly from the latest package source code in the upstream repositories, but we also build and publish packages corresponding to the latest tagged code in those repositories, where version tags exist. These packages are published in a separate package archive called &lt;a href=&#34;https://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt;. Most users should prefer MELPA over MELPA Stable.&lt;/p&gt; &#xA;&lt;p&gt;Some notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you leave the original MELPA server in your &lt;code&gt;package-archives&lt;/code&gt; then by default you will get the &lt;em&gt;development&lt;/em&gt; versions of packages and not the stable ones, because the development versions are higher.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your Emacs has the variables &lt;code&gt;package-pinned-packages&lt;/code&gt; (available in 24.4 and later) and/or &lt;code&gt;package-archive-priorities&lt;/code&gt;, you can customize or modify those variables as needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use the &lt;a href=&#34;https://github.com/milkypostman/package-filter&#34;&gt;package-filter.el&lt;/a&gt; package which we provide.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will probably want to remove all packages and then reinstall them. Any packages you already have installed from MELPA will never get &#34;updated&#34; to the stable version because of the way version numbering is handled.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the MELPA maintainers do not use MELPA Stable themselves, and do not particularly recommend its use.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/CONTRIBUTING.org&#34;&gt;CONTRIBUTING.org&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Recipe Format&lt;/h2&gt; &#xA;&lt;p&gt;Packages are specified by files in the &lt;code&gt;recipes&lt;/code&gt; directory. You can contribute a new package by adding a new file under &lt;code&gt;recipes&lt;/code&gt; using the following form (&lt;code&gt;[...]&lt;/code&gt; denotes optional or conditional values),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&amp;lt;package-name&amp;gt;&#xA; :fetcher [git|github|gitlab|hg]&#xA; [:url &#34;&amp;lt;repo url&amp;gt;&#34;]&#xA; [:repo &#34;github-or-gitlab-user/repo-name&#34;]&#xA; [:commit &#34;commit&#34;]&#xA; [:branch &#34;branch&#34;]&#xA; [:version-regexp &#34;&amp;lt;regexp&amp;gt;&#34;]&#xA; [:files (&#34;&amp;lt;file1&amp;gt;&#34; ...)]&#xA; [:old-names (&amp;lt;old-name&amp;gt; ...)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-name&lt;/code&gt; a lisp symbol that has the same name as the package being specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:fetcher&lt;/code&gt; specifies the type of repository that &lt;code&gt;:url&lt;/code&gt; or &lt;code&gt;:repo&lt;/code&gt; points to. MELPA supports &lt;a href=&#34;http://git-scm.com/&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://gitlab.com/&#34;&gt;&lt;code&gt;gitlab&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;&lt;code&gt;hg&lt;/code&gt;&lt;/a&gt; (Mercurial).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:url&lt;/code&gt; specifies the URL of the version control repository. &lt;em&gt;required for the &lt;code&gt;git&lt;/code&gt;, and &lt;code&gt;hg&lt;/code&gt; fetchers.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt; specifies the github or gitlab repository and is of the form &lt;code&gt;user/repo-name&lt;/code&gt;. &lt;em&gt;required for the &lt;code&gt;github&lt;/code&gt; and &lt;code&gt;gitlab&lt;/code&gt; fetchers&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:commit&lt;/code&gt; specifies the commit of the git repo to checkout. The value will be passed to &lt;code&gt;git reset&lt;/code&gt; in a repo where &lt;code&gt;upstream&lt;/code&gt; is the original repository. Can therefore be either a SHA, if pointing at a specific commit, or a full ref prefixed with &#34;origin/&#34;. Only used by the &lt;code&gt;git&lt;/code&gt;-based fetchers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt; specifies the branch of the git repo to use. This is like &lt;code&gt;:commit&lt;/code&gt;, but it adds the &#34;origin/&#34; prefix automatically. This must be specified when using a branch other than the default branch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:version-regexp&lt;/code&gt; is a regular expression for extracting a version-string from the repository tags. The default matches typical version tags such as &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;R16&lt;/code&gt; or &lt;code&gt;v4.3.5&lt;/code&gt;, so you should not override it unless necessary. For an unusual tag like &#34;OTP-18.1.5&#34;, we might add &lt;code&gt;:version-regexp &#34;[^0-9]*\\(.*\\)&#34;&lt;/code&gt; to strip the &#34;OTP-&#34; prefix. The captured portion of the regexp must be parseable by Emacs&#39; &lt;code&gt;version-to-list&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt; optional property specifying the elisp and info files used to build the package. Please do not override this if the default value (below) is adequate, which it should usually be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;&#39;(&#34;*.el&#34; &#34;lisp/*.el&#34;&#xA;  &#34;dir&#34; &#34;*.info&#34; &#34;*.texi&#34; &#34;*.texinfo&#34;&#xA;  &#34;doc/dir&#34; &#34;doc/*.info&#34; &#34;doc/*.texi&#34; &#34;doc/*.texinfo&#34;&#xA;  &#34;docs/dir&#34; &#34;docs/*.info&#34; &#34;docs/*.texi&#34; &#34;docs/*.texinfo&#34;&#xA;  (:exclude&#xA;   &#34;.dir-locals.el&#34; &#34;lisp/.dir-locals.el&#34;&#xA;   &#34;test.el&#34; &#34;tests.el&#34; &#34;*-test.el&#34; &#34;*-tests.el&#34;&#xA;   &#34;lisp/test.el&#34; &#34;lisp/tests.el&#34; &#34;lisp/*-test.el&#34; &#34;lisp/*-tests.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that elisp in subdirectories is never included by default, so you might find it convenient to keep your package&#39;s elisp in the root of your repository, and separate auxiliary files such as tests into subdirectories to keep packaging simple.&lt;/p&gt; &lt;p&gt;The elements of the &lt;code&gt;:files&lt;/code&gt; list are glob-expanded and processed from left to right to make a list of paths that will be copied into the root of the new package, as if by using &lt;code&gt;cp -R [SRCPATHS] DEST&lt;/code&gt;. This means a directory like &#34;foo/bar&#34; would become &#34;bar&#34; in the new package. To specify a destination subdirectory, use a list element of the form &lt;code&gt;(SUBDIR SRCPATH ...)&lt;/code&gt;. Likewise, to filter out paths expanded earlier in the list, use &lt;code&gt;(:exclude SRCPATH ...)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If your package requires some additional files, but is otherwise fine with the defaults, it&#39;s recommended to use the special element &lt;code&gt;:defaults&lt;/code&gt; as the very first element of the &lt;code&gt;:files&lt;/code&gt; list, which causes the default value shown above to be prepended to the specified file list. For example &lt;code&gt;:files (:defaults &#34;snippets&#34;)&lt;/code&gt; would cause the &#34;snippets&#34; subdir to be copied in addition to the defaults.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:old-names&lt;/code&gt; specifies former names of the package, if any. The value is a list of symbols.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example: Single File Repository&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nonsequitur/smex&#34;&gt;smex&lt;/a&gt; is a repository that contains two files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;README.markdown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smex.el&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since there is only one &lt;code&gt;.el&lt;/code&gt; file, this package only needs the &lt;code&gt;:repo&lt;/code&gt; and &lt;code&gt;:fetcher&lt;/code&gt; specified,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(smex :repo &#34;nonsequitur/smex&#34; :fetcher github)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Packages in one Repository&lt;/h3&gt; &#xA;&lt;p&gt;Assume we have a repository containing three libraries &lt;code&gt;mypackage.el&lt;/code&gt;, &lt;code&gt;helm-mypackage.el&lt;/code&gt;, and &lt;code&gt;persp-mypackage.el&lt;/code&gt;. The latter two libraries are optional and users who don&#39;t want to use the packages &lt;code&gt;helm&lt;/code&gt; and/or &lt;code&gt;perspective&lt;/code&gt; should not be forced to install them just so they can install &lt;code&gt;mypackage&lt;/code&gt;. These libraries should therefore be distributed as separate packages.&lt;/p&gt; &#xA;&lt;p&gt;The three packages have to be declared in three separate files &lt;code&gt;recipes/mypackage&lt;/code&gt;, &lt;code&gt;recipes/helm-mypackage&lt;/code&gt;, and &lt;code&gt;recipes/persp-mypackage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(mypackage :repo &#34;someuser/mypackage&#34;&#xA;           :fetcher github&#xA;           :files (&#34;mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(helm-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                :fetcher github&#xA;                :files (&#34;helm-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(persp-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                 :fetcher github&#xA;                 :files (&#34;persp-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Files in Multiple Directories&lt;/h3&gt; &#xA;&lt;p&gt;There are special cases where creation of the package comes from many different sub-directories in the repository and the destination sub-directories need to be explicitly set.&lt;/p&gt; &#xA;&lt;p&gt;Consider the &lt;code&gt;flymake-perlcritic&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(flymake-perlcritic :repo &#34;illusori/emacs-flymake-perlcritic&#34;&#xA;                    :fetcher github&#xA;                    :files (&#34;*.el&#34; (&#34;bin&#34; &#34;bin/flymake_perlcritic&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will result in a package structure of,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flymake-perlcritic-YYYMMDD&#xA;|-- bin&#xA;|   `-- flymake_perlcritic&#xA;|-- flymake-perlcritic-pkg.el&#xA;`-- flymake-perlcritic.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that specifying an entry in &lt;code&gt;:files&lt;/code&gt; that is a list takes the first element to be the destination directory. These can be embedded further, such as the following---hypothetical---entry for &lt;code&gt;:files&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&#34;*.el&#34; (&#34;snippets&#34;&#xA;         (&#34;html-mode&#34; &#34;snippets/html-mode/*&#34;)&#xA;         (&#34;python-mode&#34; &#34;snippets/python-mode/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which would result in a package with &lt;code&gt;*.el&lt;/code&gt; in something like,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package-YYYYMMDD&#xA;|-- snippets&#xA;|   |-- html-mode&#xA;|   |   |-- div&#xA;|   |   `-- html&#xA;|   `-- python-mode&#xA;|       |-- for&#xA;|       `-- main&#xA;`-- package.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But a better solution, given that we probably want to copy the &lt;em&gt;entire&lt;/em&gt; &lt;code&gt;snippets&lt;/code&gt; directory to the root of the package, we could just specify that directory. Consider the &lt;code&gt;pony-mode&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(pony-mode&#xA; :repo &#34;davidmiller/pony-mode&#34;&#xA; :fetcher github&#xA; :files (&#34;src/*.el&#34; &#34;snippets&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which generates the package,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pony-mode-YYYYMMDD&#xA;|-- pony-mode-pkg.el&#xA;|-- pony-mode.el&#xA;|-- pony-tpl.el&#xA;`-- snippets&#xA;    |-- html-mode&#xA;    |   |-- bl&#xA;    |   |-- ex&#xA;    |   |-- for&#xA;    |   |-- if&#xA;    |   |-- loa&#xA;    |   |-- sup&#xA;    |   |-- testc&#xA;    |   `-- {{&#xA;    `-- python-mode&#xA;        |-- auth-view&#xA;        |-- bn&#xA;        |-- model&#xA;        |-- modelform&#xA;        |-- render-to&#xA;        |-- testc&#xA;        `-- view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Scripts&lt;/h2&gt; &#xA;&lt;p&gt;Building MELPA is all based around using the &lt;code&gt;Makefile&lt;/code&gt; included in the root repository directory. Described below are the actions that accepted by the &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all&lt;/code&gt; -- Builds all packages under the &lt;code&gt;recipes/&lt;/code&gt; directory and compiles the &lt;code&gt;index.html&lt;/code&gt; file for the &lt;a href=&#34;https://melpa.org&#34;&gt;melpa&lt;/a&gt; website.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes/&amp;lt;NAME&amp;gt;&lt;/code&gt; -- Build individual recipe &lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;. Built packages are put in the &lt;code&gt;packages/&lt;/code&gt; folder with version corresponding to the date of the latest commit that modified at least one of the files specified by the recipe; given according to the &lt;code&gt;%Y%m%d&lt;/code&gt; format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt; -- build all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;archive.json&lt;/code&gt; -- construct the &lt;code&gt;archive.json&lt;/code&gt; file that will contain a JSON object of all compiled packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes.json&lt;/code&gt; -- construct the &lt;code&gt;recipes.json&lt;/code&gt; file containing a JSON object of all packages available for building.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt; -- clean everything.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;html&lt;/code&gt; -- build &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-working&lt;/code&gt; -- remove all repositories that have been checked out to the &lt;code&gt;working/&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-packages&lt;/code&gt; -- remove all compiled packages from the &lt;code&gt;packages&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-json&lt;/code&gt; -- remove all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that these scripts require an Emacs with &lt;code&gt;package.el&lt;/code&gt; installed, such as Emacs 24. If you have an older version of Emacs, you can get a suitable &lt;code&gt;package.el&lt;/code&gt; &lt;a href=&#34;https://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;All repository code is contained in the file &lt;code&gt;package-build/package-build.el&lt;/code&gt;. That code is maintained in a &lt;a href=&#34;https://github.com/melpa/package-build&#34;&gt;separate repository&lt;/a&gt;: the version in the MELPA repository is imported using &lt;code&gt;git subtree&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-all)&lt;/code&gt; : build packages for all recipes in the directory specified by &lt;code&gt;package-build-recipes-dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-archive NAME)&lt;/code&gt; : interactive elisp function to build a single archive. NAME is a symbol for the package to be built. Packages are staged in the directory specified by &lt;code&gt;package-build-working-dir&lt;/code&gt; and built packages are placed in the directory specified by &lt;code&gt;package-build-archive-dir&lt;/code&gt;. Packages are versioned based on the most recent commit date to package files based on commits to upstream package repository. For multi-file packages, the file &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt; is automatically generated and contains &lt;em&gt;description&lt;/em&gt;, &lt;em&gt;version&lt;/em&gt;, and &lt;em&gt;requires&lt;/em&gt; information determined by searching &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt;, &lt;code&gt;&amp;lt;NAME&amp;gt;.el&lt;/code&gt;, and &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el.in&lt;/code&gt;, if they exist in the repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-working-dir&lt;/code&gt; : Staging area containing package repositories and package directories being built.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-archive-dir&lt;/code&gt; : Location to store &lt;code&gt;archive-contents&lt;/code&gt; and any built packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-recipes-dir&lt;/code&gt; : Directory containing MELPA compatible recipes. See &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt; section for more details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Packages end up in the &lt;code&gt;packages/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-archive-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;Repositories are checked out to the &lt;code&gt;working/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-working-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h2&gt;Mirrors&lt;/h2&gt; &#xA;&lt;p&gt;Official mirrors are available (with many thanks to mirrorservice.org) so that if melpa.org is down, packages can still be installed. The following are the HTTP/HTTPS URLs to use in &lt;code&gt;package-archives&lt;/code&gt; for MELPA and MELPA Stable respectively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only the packages are mirrored, not the web site front-end itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;We are NOT responsible for the contents of any UNOFFICIAL mirror of our packages.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;MELPA&lt;/em&gt; is &lt;em&gt;Milkypostman&#39;s ELPA&lt;/em&gt; or &lt;em&gt;Milkypostman&#39;s Experimental Lisp Package Archive&lt;/em&gt; if you&#39;re not into the whole brevity thing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jorgenschaefer/emacs-buttercup</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/jorgenschaefer/emacs-buttercup</id>
    <link href="https://github.com/jorgenschaefer/emacs-buttercup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Behavior-Driven Emacs Lisp Testing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Buttercup â Behavior-Driven Emacs Lisp Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jorgenschaefer/emacs-buttercup/actions?query=workflow%3A%22Build+and+test%22+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/jorgenschaefer/emacs-buttercup/workflows/Build%20and%20test/badge.svg?sanitize=true&#34; alt=&#34;Build and test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/buttercup&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/buttercup-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jorgenschaefer/emacs-buttercup/master/docs/images/buttercup.jpg&#34; alt=&#34;Ranculus repens, photo by sannse&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Buttercup is a behavior-driven development framework for testing Emacs Lisp code. It allows to group related tests so they can share common set-up and tear-down code, and allows the programmer to âspyâ on functions to ensure they are called with the right arguments during testing.&lt;/p&gt; &#xA;&lt;p&gt;The framework is heavily inspired by &lt;a href=&#34;https://jasmine.github.io/edge/introduction.html&#34;&gt;Jasmine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Full article: &lt;a href=&#34;https://raw.githubusercontent.com/jorgenschaefer/emacs-buttercup/master/docs/writing-tests.md&#34;&gt;Writing Tests&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple test looks like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lisp&#34;&gt;(describe &#34;A suite&#34;&#xA;  (it &#34;contains a spec with an expectation&#34;&#xA;    (expect t :to-be t)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Full article: &lt;a href=&#34;https://raw.githubusercontent.com/jorgenschaefer/emacs-buttercup/master/docs/running-tests.md&#34;&gt;Running Tests&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install buttercup from &lt;a href=&#34;http://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt;. Add the following to your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives&#xA;             &#39;(&#34;melpa-stable&#34; . &#34;http://stable.melpa.org/packages/&#34;) t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should allow you to &lt;code&gt;M-x package-install RET buttercup RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.10 or later may simply &lt;code&gt;apt-get install elpa-buttercup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now create a file called &lt;code&gt;test-feature.el&lt;/code&gt; with these contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Lisp&#34;&gt;(describe &#34;A suite&#34;&#xA;  (it &#34;contains a spec with an expectation&#34;&#xA;    (expect t :to-be t)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now use buttercup to run this test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ emacs -batch -f package-initialize -L . -f buttercup-run-discover&#xA;Running 1 specs.&#xA;&#xA;A suite&#xA;  contains a spec with an expectation&#xA;&#xA;Ran 1 specs, 0 failed, in 0.0 seconds.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations, you ran your first test!&lt;/p&gt; &#xA;&lt;h2&gt;Feature List&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shared set-up and tear-down sections to reduce code repetition and share a common environment among tests.&lt;/li&gt; &#xA; &lt;li&gt;Easy to read and extensible &lt;code&gt;expect&lt;/code&gt; macro to describe expected behavior.&lt;/li&gt; &#xA; &lt;li&gt;Powerful mocking framework, called âspies,â to both cause them to return expected values or throw errors as needed by the test, as well as to ensure functions are called with expected arguments during tests.&lt;/li&gt; &#xA; &lt;li&gt;Built to be run within a Continuous Integration environment, including test runners to discover and execute tests in a directory tree.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why not ERT?&lt;/h3&gt; &#xA;&lt;p&gt;Emacs comes with a testing framework, &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_mono/ert.html&#34;&gt;ERT&lt;/a&gt;. Buttercup was written to address some shortcomings of that framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ERT &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_mono/ert.html#Fixtures-and-Test-Suites&#34;&gt;deliberately leaves it up to the programmer to define set-up and tear-down code&lt;/a&gt;, which requires a lot of boiler-plate code for every set-up function. Buttercup makes this easy and seamless.&lt;/li&gt; &#xA; &lt;li&gt;ERT has no good way of being run in a continuous integration environment. There are &lt;a href=&#34;https://github.com/rejeep/ert-runner.el&#34;&gt;external projects to make this less of a pain&lt;/a&gt; instead. Once all is said and done, you installed six external packages your project does not need just to run your own tests. And that does not include a mocking library.&lt;/li&gt; &#xA; &lt;li&gt;ERT has no way of grouping related tests, requiring every test name to share the same prefix, making names long and hard to read.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nonetheless, ERT is a great project. It introduced testing to Emacs, and Buttercup learned a lot from its code to record a stack trace for error display. Even though Buttercup tries to be a better testing framework than ERT, we do wish ERT and the ERT maintainers all the best and hope both frameworks can continue to benefit from each other.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-evil/evil-collection</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/emacs-evil/evil-collection</id>
    <link href="https://github.com/emacs-evil/evil-collection" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A set of keybindings for evil-mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Evil Collection #+STARTUP: noindent&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/emacs-evil/evil-collection/actions][file:https://github.com/emacs-evil/evil-collection/workflows/build/badge.svg?branch=master]] [[https://melpa.org/#/evil-collection][file:https://melpa.org/packages/evil-collection-badge.svg]] [[https://stable.melpa.org/#/evil-collection][file:https://stable.melpa.org/packages/evil-collection-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This is a collection of [[https://github.com/emacs-evil/evil][Evil]] bindings for /the parts of Emacs/ that Evil does not cover properly by default, such as &lt;del&gt;help-mode&lt;/del&gt;, &lt;del&gt;M-x calendar&lt;/del&gt;, Eshell and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Warning:&lt;/em&gt; Expect some default bindings to change in the future.&lt;/p&gt; &#xA;&lt;p&gt;** Preliminaries&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;del&gt;evil-overriding-maps&lt;/del&gt; is assumed as &lt;del&gt;nil&lt;/del&gt; to reduce redundant &lt;del&gt;w/W/l/f/t&lt;/del&gt; etc evil bindings. See [[https://github.com/emacs-evil/evil-collection/pull/501][Fixup Info-mode]] for example.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Goals&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Reduce context switching: As soon as &#34;moving around&#34; gets hardwired to &lt;del&gt;&#xA;    &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;, it becomes frustratingly inefficient not to have it everywhere.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Community work: setting up bindings is tremendous work and joining force can only save hours for all of Evil users out there. While not everyone may agree on the chosen bindings, it helps to have something to start with rather than nothing at all. In the end, users are free to override a subset of the proposed bindings to best fit their needs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Consistency: Having all bindings defined in one place allows for enforcing consistency across special modes and coordinating the community work to define a reference implementation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Get the package, either from MELPA:&lt;/p&gt; &lt;p&gt;: M-x package-install RET evil-collection RET&lt;/p&gt; &lt;p&gt;Or clone / download this repository and modify your &lt;del&gt;load-path&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (add-to-list &#39;load-path (expand-file-name &#34;/path/to/evil-collection/&#34; user-emacs-directory))&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Register the bindings, either all at once with&lt;/p&gt; &lt;p&gt;: (evil-collection-init)&lt;/p&gt; &lt;p&gt;or mode-by-mode, for instance:&lt;/p&gt; &lt;p&gt;: (with-eval-after-load &#39;calendar (evil-collection-calendar-setup))&lt;/p&gt; &lt;p&gt;or by providing an argument to &lt;del&gt;evil-collection-init&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (evil-collection-init &#39;calendar)&lt;/p&gt; &lt;p&gt;a list can also be provided to &lt;del&gt;evil-collection-init&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (evil-collection-init &#39;(calendar dired calc ediff))&lt;/p&gt; &lt;p&gt;The list of supported modes is configured by &lt;del&gt;evil-collection-mode-list&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection&lt;/del&gt; assumes &lt;del&gt;evil-want-keybinding&lt;/del&gt; is set to &lt;del&gt;nil&lt;/del&gt; and &lt;del&gt;evil-want-integration&lt;/del&gt; is set to &lt;del&gt;t&lt;/del&gt; before loading &lt;del&gt;evil&lt;/del&gt; and &lt;del&gt;evil-collection&lt;/del&gt;. Note some other packages may load evil (e.g. evil-leader) so bear that in mind when determining when to set the variables.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/emacs-evil/evil-collection/issues/60&#34;&gt;https://github.com/emacs-evil/evil-collection/issues/60&lt;/a&gt; and &lt;a href=&#34;https://github.com/emacs-evil/evil/pull/1087&#34;&gt;https://github.com/emacs-evil/evil/pull/1087&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (setq evil-want-integration t) ;; This is optional since it&#39;s already set to t by default. (setq evil-want-keybinding nil) (require &#39;evil) (when (require &#39;evil-collection nil t) (evil-collection-init)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s another full TLDR &lt;del&gt;use-package&lt;/del&gt; example.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package evil :ensure t :init (setq evil-want-integration t) ;; This is optional since it&#39;s already set to t by default. (setq evil-want-keybinding nil) :config (evil-mode 1))&lt;/p&gt; &#xA;&lt;p&gt;(use-package evil-collection :after evil :ensure t :config (evil-collection-init)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If you don&#39;t like surprises but still want to use &lt;del&gt;evil-collection-init&lt;/del&gt;, setting &lt;del&gt;evil-collection-mode-list&lt;/del&gt; to nil and adding each mode manually might be a better option.&lt;/p&gt; &#xA;&lt;p&gt;** Configuration&lt;/p&gt; &#xA;&lt;p&gt;Modify &lt;del&gt;evil-collection-mode-list&lt;/del&gt; to disable or add any modes that should be evilified by &lt;del&gt;evil-collection&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;| Variable | Default | Description | |--------------------------------------------+---------+-------------------------------------------------------------------| | evil-collection-calendar-want-org-bindings | nil | Set up Org functions in calendar keymap. | | evil-collection-outline-bind-tab-p | nil | Enable &#xA; &lt;tab&gt;&#xA;  -based bindings in Outline mode. | | evil-collection-term-sync-state-and-mode-p | t | Synchronize insert/normal state with char/line-mode in term-mode. | | evil-collection-setup-minibuffer | nil | Set up Vim style bindings in the minibuffer. | | evil-collection-setup-debugger-keys | t | Set up debugger keys for certain modes. | | evil-collection-want-unimpaired-p | t | Set up unimpaired bindings globally. | | evil-collection-want-find-usages-bindings | t | Bind -find references-, etc to various modes. |&#xA; &lt;/tab&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to enable Evil in the minibuffer, you&#39;ll have to turn it on explicitly by customizing &lt;del&gt;evil-collection-setup-minibuffer&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;. Some minibuffer-related packages such as Helm rely on this option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;use-package&lt;/del&gt; example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package evil-collection :custom (evil-collection-setup-minibuffer t) :init (evil-collection-init)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Guidelines&lt;/p&gt; &#xA;&lt;p&gt;The following rules serve as guiding principles to define the set of standard Evil bindings for various modes. Since special modes are by definition structurally incomparable, those rules cannot be expected to be applied universally.&lt;/p&gt; &#xA;&lt;p&gt;The rules are more-or-less sorted by priority.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t bind anything to &lt;del&gt;:&lt;/del&gt; nor &lt;del&gt;&#xA;    &lt;escape&gt;&lt;/escape&gt;&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the movement keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;h&lt;/del&gt;, &lt;del&gt;j&lt;/del&gt;, &lt;del&gt;k&lt;/del&gt;, &lt;del&gt;l&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;w&lt;/del&gt;, &lt;del&gt;W&lt;/del&gt;, &lt;del&gt;b&lt;/del&gt;, &lt;del&gt;B&lt;/del&gt;, &lt;del&gt;e&lt;/del&gt;, &lt;del&gt;E&lt;/del&gt;, &lt;del&gt;ge&lt;/del&gt;, &lt;del&gt;gE&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;f&lt;/del&gt;, &lt;del&gt;F&lt;/del&gt;, &lt;del&gt;t&lt;/del&gt;, &lt;del&gt;T&lt;/del&gt;, &lt;del&gt;;&lt;/del&gt;, =,=&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;gg&lt;/del&gt;, &lt;del&gt;G&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;|&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;%&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;+&lt;/del&gt;, &lt;del&gt;-&lt;/del&gt;, &lt;del&gt;0&lt;/del&gt;, &lt;del&gt;^&lt;/del&gt;, &lt;del&gt;$&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-i&lt;/del&gt;, &lt;del&gt;C-o&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the yanking and register keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;y&lt;/del&gt;, &lt;del&gt;Y&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;=&#34;=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the search keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;/&lt;/del&gt;, &lt;del&gt;?&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;#&lt;/del&gt;, &lt;del&gt;*&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the mark keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;m&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;=&#39;=, =~=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the windowing keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;H&lt;/del&gt;, &lt;del&gt;L&lt;/del&gt;, &lt;del&gt;M&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-e&lt;/del&gt;, &lt;del&gt;C-y&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-f&lt;/del&gt;, &lt;del&gt;C-b&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-d&lt;/del&gt;, &lt;del&gt;C-u&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-w&lt;/del&gt;-prefixed bindings.&lt;/li&gt; &#xA;   &lt;li&gt;Some &lt;del&gt;z&lt;/del&gt;-prefixed bindings (see below).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The following keys are free when insert state does not make sense in the current mode:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;a&lt;/del&gt;, &lt;del&gt;A&lt;/del&gt;, &lt;del&gt;i&lt;/del&gt;, &lt;del&gt;I&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;c&lt;/del&gt;, &lt;del&gt;C&lt;/del&gt;, &lt;del&gt;r&lt;/del&gt;, &lt;del&gt;R&lt;/del&gt;, &lt;del&gt;s&lt;/del&gt;, &lt;del&gt;S&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;d&lt;/del&gt;, &lt;del&gt;D&lt;/del&gt;, &lt;del&gt;x&lt;/del&gt;, &lt;del&gt;X&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;o&lt;/del&gt;, &lt;del&gt;O&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;p&lt;/del&gt;, &lt;del&gt;P&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;=&lt;/del&gt;, &lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;J&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;=~=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Any of those keys can be set to be a prefix key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prefix keys: &lt;del&gt;g&lt;/del&gt; and &lt;del&gt;z&lt;/del&gt; are the ubiquitous prefix keys.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;g&lt;/del&gt; generally stands for &#34;go&#34; and is best used for movements.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;z&lt;/del&gt; is used for scrolling, folding, spell-checking and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Macro and action keys&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;@&lt;/del&gt;, &lt;del&gt;q&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;.&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure terminal compatibility without sacrificing GUI key bindings.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tab key &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Tab key is recognized as &lt;del&gt;&#xA;       &lt;tab&gt;&lt;/tab&gt;&lt;/del&gt; in GUI and &lt;del&gt;TAB&lt;/del&gt; in terminal. &lt;del&gt;TAB&lt;/del&gt; equals &lt;del&gt;C-i&lt;/del&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;C-i&lt;/del&gt; is bound to jumping forward for vim compatibility. If Shift+Tab is not relevant, just bind &lt;del&gt;g TAB&lt;/del&gt; to the function that Tab is bound to. If Shift+Tab is relevant, bind &lt;del&gt;g]&lt;/del&gt; and &lt;del&gt;g TAB&lt;/del&gt; to the function that Tab is bound to, and bind &lt;del&gt;g[&lt;/del&gt; to the function that Shift+Tab is bound to for terminal compatibility.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Enter key &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Enter key is recognized as &lt;del&gt;&#xA;       &lt;return&gt;&lt;/return&gt;&lt;/del&gt; in GUI and &lt;del&gt;RET&lt;/del&gt; in terminal. &lt;del&gt;RET&lt;/del&gt; equals &lt;del&gt;Ctrl+m&lt;/del&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Bind only &lt;del&gt;RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt;. Or, bind &lt;del&gt;RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; to the same functions &lt;del&gt;&#xA;       &lt;return&gt;&lt;/return&gt;&lt;/del&gt; and &lt;del&gt;&#xA;       &lt;m-return&gt;&lt;/m-return&gt;&lt;/del&gt; are bound to.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;S-RET&lt;/del&gt; is impossible on terminal. Bind &lt;del&gt;&#xA;       &lt;s-return&gt;&lt;/s-return&gt;&lt;/del&gt; and a vacant key to the same function for terminal compatibility.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Rationale&lt;/p&gt; &#xA;&lt;p&gt;Many special modes share the same set of similar actions. Those actions should share the same bindings across all modes whenever feasible.&lt;/p&gt; &#xA;&lt;p&gt;*** Motion (&lt;del&gt;[&lt;/del&gt;, &lt;del&gt;]&lt;/del&gt;, &lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;, &lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;, &lt;del&gt;gj&lt;/del&gt;, &lt;del&gt;gk&lt;/del&gt;, &lt;del&gt;C-j&lt;/del&gt;, &lt;del&gt;C-k&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;: Use &lt;del&gt;[-&lt;/del&gt; and &lt;del&gt;]-&lt;/del&gt; prefixed keys for navigation between sections.&lt;/p&gt; &lt;p&gt;If the mode makes no difference between the end of a section and the beginning of the next, use &lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gj&lt;/del&gt; and &lt;del&gt;gk&lt;/del&gt;: synonym for &lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;. That&#39;s what [[evilmagit][evil-magit]] does.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Question:&lt;/em&gt; Should &lt;del&gt;gj&lt;/del&gt; / &lt;del&gt;gk&lt;/del&gt; rather be synonyms for &lt;del&gt;C-j&lt;/del&gt; / &lt;del&gt;C-k&lt;/del&gt;? They cannot emulate the behaviour of &lt;del&gt;[]&lt;/del&gt; or &lt;del&gt;][&lt;/del&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-j&lt;/del&gt;, &lt;del&gt;C-k&lt;/del&gt;: If there is granularity, i.e. subsections, use &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; to browse them. This reflects [[evilmagit][evil-magit]] and [[evilmu4e][evil-mu4e]] default bindings.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;: If there is no paragraph structure, &lt;del&gt;{&lt;/del&gt; and &lt;del&gt;}&lt;/del&gt; can be used for sub-sectioning.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;: If there is no sentence structure, &lt;del&gt;(&lt;/del&gt; and &lt;del&gt;)&lt;/del&gt; can be used for sub-sectioning.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;HJKL&lt;/del&gt;: &lt;del&gt;hjkl&lt;/del&gt; can be used for atomic movements, but &lt;del&gt;HJKL&lt;/del&gt; can usually not be used because &lt;del&gt;H&lt;/del&gt;, &lt;del&gt;K&lt;/del&gt; and &lt;del&gt;L&lt;/del&gt; are all universal (&lt;del&gt;J&lt;/del&gt; is &lt;del&gt;evil-join&lt;/del&gt; and usually does not make sense in special modes).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-h&lt;/del&gt; should not be remapped: Since we have &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; for vertical motion, it would make sense to use &lt;del&gt;C-h&lt;/del&gt; and &lt;del&gt;C-l&lt;/del&gt; for horizontal motion. There are some shortcomings though:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;In Vim, &lt;del&gt;C-h&lt;/del&gt; works as backspace, but Evil does not follow that behaviour.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;In Emacs, it is a prefix key for all help-related commands, and so is &lt;del&gt;&#xA;        &lt;f1&gt;&lt;/f1&gt;&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Most importantly, &lt;del&gt;C-h&lt;/del&gt; is too widespread and ubiquitous to be replaced. So we don&#39;t.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-l&lt;/del&gt;: As a consequence of the former point, &lt;del&gt;C-l&lt;/del&gt; is available.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;M-&#xA;      &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;: Those keys are usually free in Evil but still bound to their Emacs default (e.g. &lt;del&gt;M-l&lt;/del&gt; is &lt;del&gt;downcase-word&lt;/del&gt;). Besides, if &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; are already used, having &lt;del&gt;M-j&lt;/del&gt; and &lt;del&gt;M-k&lt;/del&gt; might add up to the confusion.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Quitting (&lt;del&gt;q&lt;/del&gt;, &lt;del&gt;ZQ&lt;/del&gt;, &lt;del&gt;ZZ&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;In Vim, &lt;del&gt;q&lt;/del&gt; is for recording macros. Vim quits with &lt;del&gt;ZZ&lt;/del&gt; or &lt;del&gt;ZQ&lt;/del&gt;. In most Emacs special modes, it stands for quitting while macros are recorded/played with &lt;del&gt;&#xA;  &lt;f3&gt;&lt;/f3&gt;&lt;/del&gt; and &lt;del&gt;&#xA;  &lt;f4&gt;&lt;/f4&gt;&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A good rule of thumb would be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Always bind &lt;del&gt;q&lt;/del&gt;, &lt;del&gt;ZZ&lt;/del&gt; and &lt;del&gt;ZQ&lt;/del&gt; to the mode specific quitting functions. If there is none,&lt;/li&gt; &#xA; &lt;li&gt;Bind &lt;del&gt;q&lt;/del&gt; and &lt;del&gt;ZZ&lt;/del&gt; to &lt;del&gt;quit-window&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bind &lt;del&gt;ZQ&lt;/del&gt; to &lt;del&gt;evil-quit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;If macros don&#39;t make sense in current mode, then &lt;del&gt;@&lt;/del&gt; is available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Refreshing / Reverting (&lt;del&gt;gr&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gr&lt;/del&gt; is used for refreshing in [[evilmagit][evil-magit]], [[evilmu4e][evil-mu4e]], and some Spacemacs configurations (org-agenda and neotree among others).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;C-l&lt;/del&gt; is traditionally used to refresh the terminal screen. Since there does not seem to be any existing use of it, we leave the binding free for other uses.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Marking&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;m&lt;/del&gt; defaults to &lt;del&gt;evil-set-marker&lt;/del&gt; which might not be very useful in special modes. =&#39;= can still be used as it can jump to other buffers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;m&lt;/del&gt;: Mark or toggle mark, depending on what the mode offers. In visual mode, always mark. With a numeric argument, toggle mark on that many following lines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;u&lt;/del&gt;: Unmark current selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;U&lt;/del&gt;: Unmark all.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=&lt;del&gt;=: Toggle all marks. This mirrors the &#34;invert-char&#34; Vim command bound to =&lt;/del&gt;= by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;M&lt;/del&gt;: Mark all, if available. Otherwise use =U~=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;*&lt;/del&gt;: Mark-prefix or mark all if current mode has no prefix. &lt;del&gt;*&lt;/del&gt; is traditionally a wildcard.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;%&lt;/del&gt;: Mark regexp.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;x&lt;/del&gt;: Execute action on marks. This mirrors Dired&#39;s binding of &lt;del&gt;x&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If &lt;del&gt;*&lt;/del&gt; is used for marking, then &lt;del&gt;#&lt;/del&gt; is free.&lt;/p&gt; &#xA;&lt;p&gt;Also note that Emacs inconsistently uses &lt;del&gt;u&lt;/del&gt; and &lt;del&gt;U&lt;/del&gt; to unmark.&lt;/p&gt; &#xA;&lt;p&gt;*** Selecting / Filtering / Narrowing / Searching&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;s&lt;/del&gt; and &lt;del&gt;S&lt;/del&gt; seem to be used in some places like [[mu4e][mu4e]].&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;s&lt;/del&gt;: [s]elect/[s]earch/filter candidates according to a pattern.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;S&lt;/del&gt;: Remove filter and select all.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;=&lt;/del&gt; is usually free and its significance is obvious. It&#39;s taken for zooming though.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;|&lt;/del&gt; is not free but the pipe symbolic is very tantalizing.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Sorting&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;o&lt;/del&gt;: Change the sort [o]rder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;O&lt;/del&gt;: Sort in reverse order.&lt;/p&gt; &lt;p&gt;There is no real consensus around which key to bind to sorting. What others do by default:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;package-menu&lt;/del&gt; uses &lt;del&gt;S&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;M-x proced&lt;/del&gt; and Dired use &lt;del&gt;s&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;profiler&lt;/del&gt; uses &lt;del&gt;A&lt;/del&gt; and &lt;del&gt;D&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[[mu4e][mu4e]] uses &lt;del&gt;O&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[[http://www.nongnu.org/ranger/][ranger]] uses &lt;del&gt;o&lt;/del&gt;, inspired from [[http://mutt.org][Mutt]].&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Go to definition (&lt;del&gt;gd&lt;/del&gt;, &lt;del&gt;gD&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;gd&lt;/del&gt;: [g]o to [d]efinition. This is mostly for programming modes. If there&#39;s a corresponding &#39;pop&#39; action, use &lt;del&gt;C-t&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Go to references, etc (&lt;del&gt;gr&lt;/del&gt;, &lt;del&gt;gA&lt;/del&gt;) When &lt;del&gt;evil-collection-want-find-usages-bindings&lt;/del&gt; is set to t:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gr&lt;/del&gt;: [g] to [r]eferences. This binding is also used for refresh/reverting modes in non programming modes but is usually empty for programming modes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gA&lt;/del&gt;: [g]o to [A]ssignments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Additional bindings: There may be additional binds under this category. Please file a Pull Request if so.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Go to current entity&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;.&lt;/del&gt;: go to current entity (day for calendar, playing track for [[EMMS][EMMS]]). Bind only if more relevant than &lt;del&gt;evil-repeat&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Open thing at point (&lt;del&gt;RET&lt;/del&gt;, &lt;del&gt;S-RET&lt;/del&gt;, &lt;del&gt;M-RET&lt;/del&gt;, &lt;del&gt;go&lt;/del&gt;, &lt;del&gt;gO&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;RET&lt;/del&gt;, &lt;del&gt;S-RET&lt;/del&gt;, &lt;del&gt;M-RET&lt;/del&gt;: Open thing at point in current window, open in other window and display in other window respectively. The latter is like the former with the focus remaining on the current window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;go&lt;/del&gt;, &lt;del&gt;gO&lt;/del&gt;: When available, same as &lt;del&gt;S-RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; respectively. This is useful in terminals where &lt;del&gt;S-RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; might not work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Emacs-style jumping (&lt;del&gt;J&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;J&lt;/del&gt;: [[mu4e][mu4e]] has &lt;del&gt;j&lt;/del&gt; and [[evil-mu4e][evil-mu4e]] uses &lt;del&gt;J&lt;/del&gt;, so we use &lt;del&gt;J&lt;/del&gt; too.&lt;/p&gt; &lt;p&gt;Some special modes like [[mu4e][mu4e]] and ibuffer offer to &#34;jump&#34; to a different buffer. This sometimes depends on the thing at point.&lt;/p&gt; &lt;p&gt;This is not related to Evil jumps like &lt;del&gt;C-i&lt;/del&gt; and &lt;del&gt;C-o&lt;/del&gt;, nor to &#34;go to definition&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Browse URL (&lt;del&gt;gx&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;gx&lt;/del&gt;: go to URL. This is a default Vim binding.&lt;/p&gt; &#xA;&lt;p&gt;*** Help (&lt;del&gt;?&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;g?&lt;/del&gt; : is the standard key for help related commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;?&lt;/del&gt; in places where backward search is not very useful.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** History browsing (&lt;del&gt;C-n&lt;/del&gt;, &lt;del&gt;C-p&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;C-n&lt;/del&gt; and &lt;del&gt;C-p&lt;/del&gt; are standard bindings to browse the history elements.&lt;/p&gt; &#xA;&lt;p&gt;*** Bookmarking&lt;/p&gt; &#xA;&lt;p&gt;?&lt;/p&gt; &#xA;&lt;p&gt;*** REPL (&lt;del&gt;gz&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;If the mode has a Go To REPL-type command, set it to &lt;del&gt;gz&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Zooming (&lt;del&gt;+&lt;/del&gt;, &lt;del&gt;-&lt;/del&gt;, &lt;del&gt;=&lt;/del&gt;, &lt;del&gt;0&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; have obvious meanings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;0&lt;/del&gt; has a somewhat intuitive meaning, plus it is next to &lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; on QWERTY.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;=&lt;/del&gt; is useful as a synonym for &lt;del&gt;+&lt;/del&gt; because it is the unshifted key of &lt;del&gt;+&lt;/del&gt; on QWERTY.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Debugging&lt;/p&gt; &#xA;&lt;p&gt;When debugging is on, debugger keys takes the most precedence.&lt;/p&gt; &#xA;&lt;p&gt;These keys will be set when there&#39;s an available command for them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;n&lt;/del&gt; : Step Over&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;i&lt;/del&gt; : Step Into&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;o&lt;/del&gt; : Step Out&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;c&lt;/del&gt; : Continue/Resume Execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;L&lt;/del&gt; : Locals&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;t&lt;/del&gt; : Tracing&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;q&lt;/del&gt; : Quit Debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;H&lt;/del&gt; : Continue until Point&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;e&lt;/del&gt; : Evaluate Expression&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;b&lt;/del&gt; : Set Breakpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;u&lt;/del&gt; : Unset Breakpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&amp;gt;&lt;/del&gt; : Navigate to Next Frame&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&amp;lt;&lt;/del&gt; : Navigate to Previous Frame&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;g?&lt;/del&gt; : Help&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;J&lt;/del&gt; : Jump to debugger location&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;R&lt;/del&gt; : Restart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For debugging outside of debugger being on (e.g. setting initial breakpoints), we use similar keys to [[https://github.com/realgud/realgud][realgud]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;f5&lt;/del&gt; Start/Continue/Resume Execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;S-f5&lt;/del&gt; Continue Execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Mouse-1&lt;/del&gt; Toggle Breakpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;f9&lt;/del&gt; Toggle Breakpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;f10&lt;/del&gt; Step Over&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;f11&lt;/del&gt; Step Into&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;S-f11&lt;/del&gt; Step Out&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Editable Buffers&lt;/p&gt; &#xA;&lt;p&gt;For buffers where insert-state doesn&#39;t make sense but buffer can be edited, (e.g. wdired or wgrep), pressing &lt;del&gt;i&lt;/del&gt; will change into editable state.&lt;/p&gt; &#xA;&lt;p&gt;When this editable state is turned on,&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;ZQ&lt;/del&gt; will abort and clear any changes. &lt;del&gt;ZZ&lt;/del&gt; will finish and save any changes. &lt;del&gt;ESC&lt;/del&gt; will exit editable state.&lt;/p&gt; &#xA;&lt;p&gt;*** :q/:wq/etc&lt;/p&gt; &#xA;&lt;p&gt;Modes with commands that can be bound to :q/:wq/etc will have those keys remapped.&lt;/p&gt; &#xA;&lt;p&gt;** Key Translation&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection-translate-key&lt;/del&gt; allows binding a key to the definition of another key in the same keymap (comparable to how Vim&#39;s keybindings work). Its arguments are the &lt;del&gt;states&lt;/del&gt; and &lt;del&gt;keymaps&lt;/del&gt; to bind/look up the key(s) in followed optionally by keyword arguments (currently only &lt;del&gt;:destructive&lt;/del&gt;) and key/replacement pairs. &lt;del&gt;states&lt;/del&gt; should be nil for non-evil keymaps, and both &lt;del&gt;states&lt;/del&gt; and &lt;del&gt;keymaps&lt;/del&gt; can be a single symbol or a list of symbols.&lt;/p&gt; &#xA;&lt;p&gt;This function can be useful for making key swaps/cycles en masse. For example, someone who uses an alternate keyboard layout may want to retain the &lt;del&gt;hjkl&lt;/del&gt; positions for directional movement in dired, the calendar, etc.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example for Colemak of making swaps in a single keymap:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (evil-collection-translate-key nil &#39;evil-motion-state-map ;; colemak hnei is qwerty hjkl &#34;n&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;i&#34; &#34;l&#34; ;; add back nei &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;n&#34; &#34;l&#34; &#34;i&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of using &lt;del&gt;evil-collection-setup-hook&lt;/del&gt; to cycle the keys for all modes in &lt;del&gt;evil-collection-mode-list&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-hjkl-rotation (_mode mode-keymaps &amp;amp;rest _rest) (evil-collection-translate-key &#39;normal mode-keymaps &#34;n&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;i&#34; &#34;l&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;n&#34; &#34;l&#34; &#34;i&#34;))&lt;/p&gt; &#xA;&lt;p&gt;;; called after evil-collection makes its keybindings (add-hook &#39;evil-collection-setup-hook #&#39;my-hjkl-rotation)&lt;/p&gt; &#xA;&lt;p&gt;(evil-collection-init) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;A more common use case of &lt;del&gt;evil-collection-translate-key&lt;/del&gt; would be for keeping the functionality of some keys that users may bind globally. For example, &lt;del&gt;SPC&lt;/del&gt;, &lt;del&gt;[&lt;/del&gt;, and &lt;del&gt;]&lt;/del&gt; are bound in some modes. If you use these keys as global prefix keys that you never want to be overridden, you&#39;ll want to give them higher priority than other evil keybindings (e.g. those made by &lt;del&gt;(evil-define-key &#39;normal some-map ...)&lt;/del&gt;). To do this, you can create an &#34;intercept&#34; map and bind your prefix keys in it instead of in &lt;del&gt;evil-normal-state-map&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar my-intercept-mode-map (make-sparse-keymap) &#34;High precedence keymap.&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(define-minor-mode my-intercept-mode &#34;Global minor mode for higher precedence evil keybindings.&#34; :global t)&lt;/p&gt; &#xA;&lt;p&gt;(my-intercept-mode)&lt;/p&gt; &#xA;&lt;p&gt;(dolist (state &#39;(normal visual insert)) (evil-make-intercept-map ;; NOTE: This requires an evil version from 2018-03-20 or later (evil-get-auxiliary-keymap my-intercept-mode-map state t t) state))&lt;/p&gt; &#xA;&lt;p&gt;(evil-define-key &#39;normal my-intercept-mode-map (kbd &#34;SPC f&#34;) &#39;find-file) ;; ... #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can then define replacement keys:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-prefix-translations (_mode mode-keymaps &amp;amp;rest _rest) (evil-collection-translate-key &#39;normal mode-keymaps &#34;C-SPC&#34; &#34;SPC&#34; ;; these need to be unbound first; this needs to be in same statement &#34;[&#34; nil &#34;]&#34; nil &#34;[[&#34; &#34;[&#34; &#34;]]&#34; &#34;]&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;evil-collection-setup-hook #&#39;my-prefix-translations)&lt;/p&gt; &#xA;&lt;p&gt;(evil-collection-init) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;By default, the first invocation of &lt;del&gt;evil-collection-translate-key&lt;/del&gt; will make a backup of the keymap. Each subsequent invocation will look up keys in the backup instead of the original. This means that a call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt; will always have the same behavior even if evaluated multiple times. When &lt;del&gt;:destructive t&lt;/del&gt; is specified, keys are looked up in the keymap as it is currently. This means that a call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt; that swapped two keys would continue to swap/unswap them with each call. Therefore when &lt;del&gt;:destructive t&lt;/del&gt; is used, all cycles/swaps must be done within a single call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt;. To make a comparison to Vim keybindings, &lt;del&gt;:destructive t&lt;/del&gt; is comparable to Vim&#39;s &lt;del&gt;map&lt;/del&gt;, and &lt;del&gt;:destructive nil&lt;/del&gt; is comparable to Vim&#39;s &lt;del&gt;noremap&lt;/del&gt; (where the &#34;original&#34; keybindings are those that existed in the keymap when &lt;del&gt;evil-collection-translate-key&lt;/del&gt; was first called). You&#39;ll almost always want to use the default behavior (especially in your init file). The limitation of &lt;del&gt;:destructive nil&lt;/del&gt; is that you can&#39;t translate a key to another key that was defined after the first &lt;del&gt;evil-collection-translate-key&lt;/del&gt;, so &lt;del&gt;:destructive t&lt;/del&gt; may be useful for interactive experimentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection-swap-key&lt;/del&gt; is also provided as a wrapper around &lt;del&gt;evil-collection-translate-key&lt;/del&gt; that allows swapping keys:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (evil-collection-swap-key nil &#39;evil-motion-state-map &#34;;&#34; &#34;:&#34;) ;; is equivalent to (evil-collection-translate-key nil &#39;evil-motion-state-map &#34;;&#34; &#34;:&#34; &#34;:&#34; &#34;;&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In some cases, keys are bound through &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt; and may need to be translated using &lt;del&gt;evil-collection-translate-minor-mode-key&lt;/del&gt; and/or &lt;del&gt;evil-collection-swap-minor-mode-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (evil-collection-swap-minor-mode-key &#39;(normal motion) &#39;(evil-snipe-local-mode evil-snipe-override-local-mode) &#34;k&#34; &#34;s&#34; ;; Set this to t to make this swap the keys everytime ;; this expression is evaluated. :destructive nil)&lt;/p&gt; &#xA;&lt;p&gt;(evil-collection-translate-minor-mode-key &#39;(normal motion) &#39;(evil-snipe-local-mode evil-snipe-override-local-mode) &#34;k&#34; &#34;s&#34; &#34;s&#34; &#34;k&#34; ;; Set this to t to make this swap the keys everytime ;; this expression is evaluated. :destructive nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Third-party packages&lt;/p&gt; &#xA;&lt;p&gt;Third-party packages are provided by several parties:&lt;/p&gt; &#xA;&lt;p&gt;| Major mode | Evil bindings | |------------+--------------------------| | ledger | [[https://github.com/atheriel/evil-ledger][evil-ledger]] | | lispy | [[https://github.com/noctuid/lispyville][lispyville]] or [[https://github.com/sp3ctum/evil-lispy][evil-lispy]] | | org | [[https://github.com/GuiltyDolphin/org-evil][org-evil]] or [[https://github.com/Somelauw/evil-org-mode][evil-org]] | | markdown | [[https://github.com/Somelauw/evil-markdown][evil-markdown]] |&lt;/p&gt; &#xA;&lt;p&gt;Also &lt;del&gt;evil-collection&lt;/del&gt; has minimal support (&lt;del&gt;TAB&lt;/del&gt;, &lt;del&gt;S-TAB&lt;/del&gt; and sentence/paragraph forwarding) for &lt;del&gt;markdown&lt;/del&gt; and &lt;del&gt;org&lt;/del&gt; if you prefer less packages installed.&lt;/p&gt; &#xA;&lt;p&gt;Should you know any suitable package not mentioned in this list, let us know and file an issue.&lt;/p&gt; &#xA;&lt;p&gt;Other references:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/syl20bnr/spacemacs/blob/master/doc/CONVENTIONS.org#key-bindings-conventions][Spacemacs]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/evil][Doom Emacs]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** FAQ&lt;/p&gt; &#xA;&lt;p&gt;*** Making SPC work similarly to [[https://github.com/syl20bnr/spacemacs][spacemacs]].&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection&lt;/del&gt; binds over SPC in many packages. To use SPC as a leader key with the [[https://github.com/noctuid/general.el][general]] library:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package general :ensure t :init (setq general-override-states &#39;(insert emacs hybrid normal visual motion operator replace)) :config (general-define-key :states &#39;(normal visual motion) :keymaps &#39;override &#34;SPC&#34; &#39;hydra-space/body)) ;; Replace &#39;hydra-space/body with your leader function. #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See [[https://github.com/noctuid/evil-guide][noctuid&#39;s evil guide]] for other approaches.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unintialized mode maps in &lt;del&gt;evil-collection-setup-hook&lt;/del&gt;. &lt;del&gt;evil-collection-setup-hook&lt;/del&gt; is ran with a list of keymaps passed into it. Some misconfigured modes may not have yet initialized their keymap at this time so the value of the variable may be nil. In that case, an alternative is to use a mode-hook to do any custom settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (add-hook &#39;evil-collection-setup-hook (lambda (_mode keymaps) (add-hook &#39;ediff-mode-hook (lambda () (... keymaps ...))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;View [[https://github.com/emacs-evil/evil-collection/issues/196][196]] for more info.&lt;/p&gt; &#xA;&lt;p&gt;*** Modes left behind&lt;/p&gt; &#xA;&lt;p&gt;Some modes might still remain unsupported by this package. Should you be missing your &lt;del&gt;&#xA;  &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;, please feel free to do a pull request.&lt;/p&gt; &#xA;&lt;p&gt;*** Writing a new binding&lt;/p&gt; &#xA;&lt;p&gt;This [[template][yasnippet template]] can be used to bootstrap a new binding.&lt;/p&gt; &#xA;&lt;p&gt;For example, if we were to want to add &lt;del&gt;evil-collection&lt;/del&gt; support to &lt;del&gt;eldoc&lt;/del&gt;. (e.g.) There is a package that contains:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (provide &#39;eldoc) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Create a directory named eldoc under [[modes-directory][modes/]]. Create a file named evil-collection-eldoc.el under the newly created eldoc directory. Then use the above template as an example or, using [[yasnippet][yasnippet]], &lt;del&gt;yas-expand&lt;/del&gt; the above template which will result in something like below:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes ;;; evil-collection-eldoc.el --- Bindings for `eldoc&#39;. -&lt;em&gt;- lexical-binding: t -&lt;/em&gt;-&lt;/p&gt; &#xA;&lt;p&gt;;; Copyright (C) 2022 James Nguyen&lt;/p&gt; &#xA;&lt;p&gt;;; Author: James Nguyen &lt;a href=&#34;mailto:james@jojojames.com&#34;&gt;james@jojojames.com&lt;/a&gt; ;; Maintainer: James Nguyen &lt;a href=&#34;mailto:james@jojojames.com&#34;&gt;james@jojojames.com&lt;/a&gt; ;; URL: &lt;a href=&#34;https://github.com/emacs-evil/evil-collection&#34;&gt;https://github.com/emacs-evil/evil-collection&lt;/a&gt; ;; Version: 0.0.2 ;; Package-Requires: ((emacs &#34;27.1&#34;)) ;; Keywords: evil, emacs, convenience, tools&lt;/p&gt; &#xA;&lt;p&gt;;; This program is free software; you can redistribute it and/or modify ;; it under the terms of the GNU General Public License as published by ;; the Free Software Foundation, either version 3 of the License, or ;; (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;;; This program is distributed in the hope that it will be useful, ;; but WITHOUT ANY WARRANTY; without even the implied warranty of ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ;; GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;;; You should have received a copy of the GNU General Public License ;; along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;;;; Commentary: ;;; Bindings for eldoc.&lt;/p&gt; &#xA;&lt;p&gt;;;; Code: (require &#39;evil-collection) (require &#39;eldoc nil t)&lt;/p&gt; &#xA;&lt;p&gt;(defvar eldoc-mode-map) (defconst evil-collection-eldoc-maps &#39;(eldoc-mode-map))&lt;/p&gt; &#xA;&lt;p&gt;(defun evil-collection-eldoc-setup () &#34;Set up `evil&#39; bindings for eldoc.&#34; (evil-collection-define-key &#39;normal &#39;eldoc-mode-map ))&lt;/p&gt; &#xA;&lt;p&gt;(provide &#39;evil-collection-eldoc) ;;; evil-collection-eldoc.el ends here #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Finally, add &lt;del&gt;eldoc&lt;/del&gt; to &lt;del&gt;evil-collection--supported-modes&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (defvar evil-collection--supported-modes &lt;code&gt;( ;; ... eldoc ;; ... ) &#34;List of modes supported by evil-collection. Elements are either target mode symbols or lists which &lt;/code&gt;car&#39; is the mode symbol and `cdr&#39; the packages to register.&#34;) #+end_src ** Submitting Issues&lt;/p&gt; &#xA;&lt;p&gt;When reproducing issues, you can use this emacs -Q recipe.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (setq user-emacs-directory &#34;~/.emacs.1.d&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(setq package-enable-at-startup nil package-archives &#39;((&#34;melpa&#34; . &#34;&lt;a href=&#34;https://melpa.org/packages/&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&#34;) (&#34;gnu&#34; . &#34;&lt;a href=&#34;http://elpa.gnu.org/packages/&#34;&gt;http://elpa.gnu.org/packages/&lt;/a&gt;&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;(require &#39;package) (package-initialize) (unless (package-installed-p &#39;use-package) (package-refresh-contents) (package-install &#39;use-package)) (require &#39;use-package) (setq use-package-always-ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package evil :ensure t :init (setq evil-want-keybinding nil) :config (evil-mode 1))&lt;/p&gt; &#xA;&lt;p&gt;(use-package evil-collection :after evil :ensure t :config (evil-collection-init)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Contributing&lt;/p&gt; &#xA;&lt;p&gt;We welcome any additional modes that are not already supported.&lt;/p&gt; &#xA;&lt;p&gt;All bindings in &lt;del&gt;evil-collection&lt;/del&gt; are open to change so if there&#39;s a better or more consistent binding, please [[https://github.com/emacs-evil/evil-collection/issues][open an issue]] or [[https://github.com/emacs-evil/evil-collection/pulls][submit a pull request]].&lt;/p&gt; &#xA;&lt;p&gt;Follow [[https://github.com/bbatsov/emacs-lisp-style-guide/][The Emacs Lisp Style Guide]] for coding conventions.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/erlang/otp/wiki/writing-good-commit-messages][Erlang/OTP]] has a good read for helpful commit messages.&lt;/p&gt; &#xA;&lt;p&gt;#+LINK: EMMS &lt;a href=&#34;https://www.gnu.org/software/emms/&#34;&gt;https://www.gnu.org/software/emms/&lt;/a&gt; #+LINK: evilmagit &lt;a href=&#34;https://github.com/emacs-evil/evil-magit&#34;&gt;https://github.com/emacs-evil/evil-magit&lt;/a&gt; #+LINK: evilmu4e &lt;a href=&#34;https://github.com/JorisE/evil-mu4e&#34;&gt;https://github.com/JorisE/evil-mu4e&lt;/a&gt; #+LINK: mu4e &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e.html&#34;&gt;https://www.djcbsoftware.nl/code/mu/mu4e.html&lt;/a&gt; #+LINK: yasnippet &lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;https://github.com/joaotavora/yasnippet&lt;/a&gt; #+LINK: template &lt;a href=&#34;https://github.com/emacs-evil/evil-collection/raw/master/yasnippet_evil-collection&#34;&gt;https://github.com/emacs-evil/evil-collection/blob/master/yasnippet_evil-collection&lt;/a&gt; #+LINK: modes-directory &lt;a href=&#34;https://github.com/emacs-evil/evil-collection/tree/master/modes&#34;&gt;https://github.com/emacs-evil/evil-collection/tree/master/modes&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>noctuid/general.el</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/noctuid/general.el</id>
    <link href="https://github.com/noctuid/general.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;More convenient key definitions in emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: General User Manual #+AUTHOR: Fox Kiester #+LANGUAGE: en #+TEXINFO_DIR_CATEGORY: Emacs #+TEXINFO_DIR_TITLE: General: (general). #+TEXINFO_DIR_DESC: More convenient key definitions.&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: If you are viewing this in org-mode, it is recommended that you install and enable [[https://github.com/snosov1/toc-org][toc-org]], so that all internal links open correctly&lt;/h1&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/general][file:https://melpa.org/packages/general-badge.svg]] [[https://github.com/noctuid/general.el/actions?query=workflow%3Atest][https://github.com/noctuid/general.el/workflows/test/badge.svg]] [[https://codecov.io/gh/noctuid/general.el][https://codecov.io/gh/noctuid/general.el/branch/master/graph/badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/noctuid/general.el][file:http://i.imgur.com/SXA66y7.png]] #+BEGIN_QUOTE A general is a leader. -- onioncheese #+END_QUOTE&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recent Breaking Changes :noexport: ** 2018-01-21 =general-default-...= variables are obsolete =general-default-prefix=, =general-default-non-normal-prefix=, =general-default-global-prefix=, =general-default-states=, and =general-default-keymaps= still work. However, they will eventually be removed, so please switch to using &lt;del&gt;general-create-definer&lt;/del&gt; if you want to use a definer with different defaults.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 2018-01-20 &lt;del&gt;general-create-vim-definer&lt;/del&gt; and &lt;del&gt;general-create-dual-vim-definer&lt;/del&gt; have been removed &lt;del&gt;general-create-definer&lt;/del&gt; should now be used instead as it is now capable of the same functionality (&lt;del&gt;general-evil-setup&lt;/del&gt; now uses it). Additionally, &lt;del&gt;general-vim-definer-default&lt;/del&gt; is obsolete and will be removed eventually. The second argument to &lt;del&gt;general-evil-setup&lt;/del&gt; is no longer used and will also be removed eventually. The vim definers will now always set the default =:states= (and never the default =:keymaps=) because of the change below.&lt;/p&gt; &#xA;&lt;p&gt;** 2018-01-20 =:states &#39;normal= is now the same as =:keymaps &#39;normal= =:keymaps &#39;global :states &#39;normal= will now bind in &lt;del&gt;evil-normal-state-keymap&lt;/del&gt; as opposed to the normal state auxiliary keymap of &lt;del&gt;(current-global-map)&lt;/del&gt; (see [[#note-for-evil-users][Note for Evil Users]]). It is not recommended to bind in a state and &lt;del&gt;(current-global-map)&lt;/del&gt;. If you want to prevent certain keys from being overridden, please use evil intercept keymaps instead.&lt;/p&gt; &#xA;&lt;p&gt;If you update general, please make sure that you are also using a recent version of evil.&lt;/p&gt; &#xA;&lt;p&gt;** 2018-01-20: &lt;del&gt;general-simulate-keys&lt;/del&gt; is now obsolete Please switch to &lt;del&gt;general-key&lt;/del&gt; or &lt;del&gt;general-simulate-key&lt;/del&gt;. Note that keyword arguments have replaced the positional arguments of &lt;del&gt;general-simulate-keys&lt;/del&gt;. &lt;del&gt;general-simulate-keys&lt;/del&gt; will likely be removed sometime in the future.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :noexport:TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#about][About]]&lt;/li&gt; &#xA; &lt;li&gt;[[#dependency-versions][Dependency Versions]]&lt;/li&gt; &#xA; &lt;li&gt;[[#key-features][Key Features]]&lt;/li&gt; &#xA; &lt;li&gt;[[#reading-recommendations][Reading Recommendations]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage-recommendations-and-documentation-clarifications][Usage Recommendations and Documentation Clarifications]]&lt;/li&gt; &#xA; &lt;li&gt;[[#basic-examples][Basic Examples]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#general-examples][General Examples]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-examples][Evil Examples]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#switching-completely-to-general][Switching Completely to General]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#general-define-key-details][&lt;del&gt;general-define-key&lt;/del&gt; Details]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#definitions][Definitions]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#keyword-arguments][Keyword Arguments]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#predicates][Predicates]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#keymapstate-aliases][Keymap/State Aliases]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#general-define-key-wrappers][&lt;del&gt;general-define-key&lt;/del&gt; Wrappers]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#positional-argument-wrappers][Positional Argument Wrappers]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#mass-key-unbinding-wrapper][Mass Key Unbinding Wrapper]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#creating-new-key-definers][Creating New Key Definers]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#vim-like-definers][Vim-like Definers]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#note-for-evil-users][Note for Evil Users]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#override-keymaps-and-buffer-local-keybindings][Override Keymaps and Buffer Local Keybindings]]&lt;/li&gt; &#xA; &lt;li&gt;[[#displaying-keybindings][Displaying Keybindings]]&lt;/li&gt; &#xA; &lt;li&gt;[[#functionsmacros-to-aid-key-definition][Functions/Macros to Aid Key Definition]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#disclaimer][Disclaimer]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#simulating-keypresses][Simulating Keypresses]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#mapping-under-non-prefix-keys][Mapping Under Non-prefix Keys]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#choosing-definitions-based-on-predicates][Choosing Definitions Based on Predicates]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#key-translation][Key &#34;Translation&#34;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#automatic-key-unbinding][Automatic Key Unbinding]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#non-keybinding-related-configuration-helpers][Non-keybinding-related Configuration Helpers]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#settings][Settings]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#hooks-and-advice][Hooks and Advice]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#miscellaneous][Miscellaneous]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#integration-with-other-packages][Integration with Other Packages]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#use-package-keywords][Use-package Keywords]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#general-keyword][:general Keyword]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#no-autoload-keyword][:no-autoload Keyword]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#hook-keywords][Hook Keywords]] &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;[[#ghook-keyword][:ghook Keyword]]&lt;/li&gt; &#xA;       &lt;li&gt;[[#gfhook-keyword][:gfhook Keyword]]&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#use-with-key-chord][Use with Key-chord]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#extended-definition-syntax][Extended Definition Syntax]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#autoloaded-keymaps][&#34;Autoloaded&#34; Keymaps]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#which-key-integration][Which Key Integration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-command-properties][Evil Command Properties]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#user-defined-extended-definition-keywords][User-defined Extended Definition Keywords]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#user-defined-key-definers][User-defined Key Definers]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#wrapping-evil-define-minor-mode-key][Wrapping &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#lispy-integration-wrapping-lispy-define-key][Lispy Integration/ Wrapping &lt;del&gt;lispy-define-key&lt;/del&gt;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#worf-integration-wrapping-worf-define-key][Worf Integration/ Wrapping &lt;del&gt;worf-define-key&lt;/del&gt;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#other-provided-definers][Other Provided Definers]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#how-do-i-prevent-key-sequence-starts-with-non-prefix-key-errors][How do I prevent =Key sequence starts with non-prefix key= errors?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#why-dont-some-evil-keybindings-work-immediately][Why don&#39;t some evil keybindings work (immediately)?]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About =general.el= provides a more convenient method for binding keys in emacs (for both evil and non-evil users). Like =use-package=, which provides a convenient, unified interface for managing packages, =general.el= is intended to provide a convenient, unified interface for key definitions. While this package does implement some completely new functionality (such as the ability to make vim-style keybindings under non-prefix keys with an optional timeout), its primary purpose is to build on existing functionality to make key definition more clear and concise. &lt;del&gt;general-define-key&lt;/del&gt; is user-extensible and supports defining multiple keys in multiple keymaps at once, implicitly wrapping key strings with &lt;del&gt;(kbd ...)&lt;/del&gt;, using named prefix key sequences (like the leader key in vim), and much more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One advantage of using &lt;del&gt;general-define-key&lt;/del&gt; (or a wrapper for it) even in cases where its extra functionality isn&#39;t necessary and doesn&#39;t significantly improve brevity is that all keybindings are recorded and can be displayed later with &lt;del&gt;general-describe-keybindings&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This manual explains the most relevant parts of every =general.el= feature. All user-facing functions, macros, and variables also have docstrings (e.g. accessible with =C-h f= or =C-h v=), so please consult these for further details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Dependency Versions Please use MELPA and not MELPA stable for installing optional dependencies (e.g. evil and use-package). General may rely on functionality not in released versions for these packages, so if you are having trouble, please try updating them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Key Features&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provides a single function, &lt;del&gt;general-define-key&lt;/del&gt;, that is usable for all key definition; wrappers are provided as well&lt;/li&gt; &#xA; &lt;li&gt;Does not hide important details of key definition (unlike =evil-leader.el=); users should be familiar with &lt;del&gt;define-key&lt;/del&gt; and other definers (e.g. &lt;del&gt;evil-define-key(*)&lt;/del&gt; for evil users) before using this package&lt;/li&gt; &#xA; &lt;li&gt;Uses a syntax similar to &lt;del&gt;setq&lt;/del&gt; for key definitions (like &lt;del&gt;evil-define-key&lt;/del&gt;, &lt;del&gt;bind-map&lt;/del&gt;, =evil-leader.el=, etc.; unlike &lt;del&gt;bind-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Provides tight (and optional) integration with evil (unlike &lt;del&gt;bind-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-def&lt;/del&gt; can act as a drop-in replacement for the following definers (see the documentation below for a minor caveat) (unique): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;general-define-key&lt;/del&gt; and &lt;del&gt;global-set-key&lt;/del&gt; (no positional keymap argument)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;define-key&lt;/del&gt; and &lt;del&gt;evil-global-set-key&lt;/del&gt; (positional argument for keymap)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;evil-define-key&lt;/del&gt; (positional argument for state and keymap)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;With the =:definer= keyword, &lt;del&gt;general-define-key&lt;/del&gt; can be extended to use any key definition function (e.g. &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt;, &lt;del&gt;lispy-define-key&lt;/del&gt;, etc.) (unique)&lt;/li&gt; &#xA; &lt;li&gt;With &#34;extended&#34; definitions, user-created keywords can be added globally (in &lt;del&gt;general-define-key&lt;/del&gt;) and locally (in an &#34;extended&#34; definition plist) to extend the behavior of &lt;del&gt;general-define-key&lt;/del&gt; (unique)&lt;/li&gt; &#xA; &lt;li&gt;Allows binding keys in multiple keymaps/states at once (unlike &lt;del&gt;bind-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Automatically wraps string keys and definitions with &lt;del&gt;kbd&lt;/del&gt; (this behavior can be turned off for compatibility with &lt;del&gt;define-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Allows using an arbitrary number of prefix keys or &#34;leaders&#34; of any length (but does not require prefix keys like) (unlike =evil-leader.el=)&lt;/li&gt; &#xA; &lt;li&gt;Allows for automatically creating prefix commands (but does not require creating them like &lt;del&gt;bind-key&lt;/del&gt; does)&lt;/li&gt; &#xA; &lt;li&gt;Allows for buffer-local keybindings (unlike &lt;del&gt;local-set-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Allows deferring keybindings until the specified keymap exists (no need to use &lt;del&gt;(with-)eval-after-load&lt;/del&gt;) (like &lt;del&gt;evil-define-key&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Allows displaying defined keys (like =bind-key.el=)&lt;/li&gt; &#xA; &lt;li&gt;Provides integration with other packages such as =key-chord.el= and =which-key.el= (unique)&lt;/li&gt; &#xA; &lt;li&gt;Provides other helpers for keybindings (unique): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A method for creating &#34;autoloaded&#34; keymaps (like =bind-key.el=)&lt;/li&gt; &#xA;   &lt;li&gt;A potentially better way to simulate keypresses (works with prefix args and for incomplete key sequences, i.e. a key bound to a keymap)&lt;/li&gt; &#xA;   &lt;li&gt;A method for binding under non-prefix keys with an optional timeout (like in vim; e.g. bind =jk= in insert mode without losing =j=)&lt;/li&gt; &#xA;   &lt;li&gt;A helper to create a menu item to dispatch to different definitions based on predicates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Provides other helpers for configuration (e.g. more convenient functions for hooks and advice)&lt;/li&gt; &#xA; &lt;li&gt;Is well tested (unlike =evil-leader.el=)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reading Recommendations Before using =general.el=, you should first be familiar with &lt;del&gt;define-key&lt;/del&gt;, &lt;del&gt;global-set-key&lt;/del&gt;, and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html][emacs&#39; key binding system]]. I recommend reading [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]] if you are new to emacs. Also see &lt;del&gt;define-key&lt;/del&gt;&#39;s help text for information on valid keys and definitions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are also using evil, you should first be familiar with how &lt;del&gt;evil-define-key&lt;/del&gt;, &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt;, etc. work. If you are a new evil user, I&#39;d recommend looking at my [[https://github.com/noctuid/evil-guide][evil guide]]. The [[https://github.com/noctuid/evil-guide#keybindings-and-states][Keybindings and States]] section in particular may be useful&lt;/p&gt; &#xA;&lt;p&gt;A large number of issues opened on this repository are not specifically related to =general.el= (e.g. user usage or syntax errors that would also occur without &lt;del&gt;general-define-key&lt;/del&gt;). While I don&#39;t mind generic questions about keybinding issues, you may save yourself some time if you first determine whether or not an issue is related to &lt;del&gt;general-define-key&lt;/del&gt; by, if possible, testing with an equivalent &lt;del&gt;define-key&lt;/del&gt;, &lt;del&gt;evil-define-key&lt;/del&gt;, etc. statement.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[#faq][FAQ]] for commonly asked questions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Recommendations and Documentation Clarifications To facilitate extensibility and easy creation of wrappers, &lt;del&gt;general-define-key&lt;/del&gt; uses keyword arguments to specify everything besides the key definitions, including for the =:states= and =:keymaps=. Since users will most often specify one or both of these keyword arguments, &lt;del&gt;general-define-key&lt;/del&gt; is often less concise than &lt;del&gt;define-key&lt;/del&gt; or &lt;del&gt;evil-define-key&lt;/del&gt;. It is for this reason that it is recommended that &lt;del&gt;general-define-key&lt;/del&gt; not be used directly. =general.el= provides wrappers around &lt;del&gt;general-define-key&lt;/del&gt; that take positional arguments, and it is recommended that you use these instead of &lt;del&gt;general-define-key&lt;/del&gt;. &lt;del&gt;general-create-definer&lt;/del&gt; can also be used to create a new definer with certain default settings (e.g. prefix settings). For clarity and consistency, examples in the documentation usually use &lt;del&gt;general-define-key&lt;/del&gt; unless the example is explicitly for a wrapper. However, [[#positional-argument-wrappers][&lt;del&gt;general-def&lt;/del&gt;]] is recommended over &lt;del&gt;general-define-key&lt;/del&gt; as it is more flexible and concise. Positional arguments are /optional but not required/, so &lt;del&gt;general-def&lt;/del&gt; can basically act as a drop-in replacement for many key definers (including &lt;del&gt;general-define-key&lt;/del&gt;, &lt;del&gt;define-key&lt;/del&gt;, and &lt;del&gt;evil-define-key&lt;/del&gt;). Note that &lt;del&gt;general-create-definer&lt;/del&gt; and the =:general= keyword argument for &lt;del&gt;use-package&lt;/del&gt; use &lt;del&gt;general-def&lt;/del&gt;. I personally only use &lt;del&gt;general-def&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since it is more common for commands to not be sharp quoted in key definitions, this package&#39;s examples use single quotes for commands. I personally prefer to always properly sharp quote functions, so commands in the actual non-example code are always sharp quoted.&lt;/p&gt; &#xA;&lt;p&gt;Although &lt;del&gt;general-define-key&lt;/del&gt; will automatically defer keybindings until the specified keymaps exist, you can still use it with &lt;del&gt;with-eval-after-load&lt;/del&gt; or use-package&#39;s =:config= keyword whenever it makes sense to. If you have a lot of keybindings, this could potentially shave some fraction of a second off of your startup time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic Examples ** General Examples #+begin_src emacs-lisp (require &#39;general)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;;; * Global Keybindings ;; &lt;code&gt;general-define-key&#39; acts like &lt;/code&gt;global-set-key&#39; when :keymaps is not ;; specified (because &#34;:keymaps &#39;global&#34; is the default) ;; kbd is not necessary and arbitrary amount of key def pairs are allowed (general-define-key &#34;M-x&#34; &#39;amx ; or &#39;smex &#34;C-s&#34; &#39;counsel-grep-or-swiper)&lt;/p&gt; &#xA;&lt;p&gt;;; * Mode Keybindings ;; &lt;code&gt;general-define-key&#39; is comparable to &lt;/code&gt;define-key&#39; when :keymaps is specified (general-define-key ;; NOTE: keymaps specified with :keymaps must be quoted :keymaps &#39;org-mode-map &#34;C-c C-q&#34; &#39;counsel-org-tag ;; ... ) ;; &lt;code&gt;general-def&#39; can be used instead for &lt;/code&gt;define-key&#39;-like syntax (general-def org-mode-map &#34;C-c C-q&#34; &#39;counsel-org-tag ;; ... )&lt;/p&gt; &#xA;&lt;p&gt;;; * Prefix Keybindings ;; :prefix can be used to prevent redundant specification of prefix keys (general-define-key :prefix &#34;C-c&#34; ;; bind &#34;C-c a&#34; to &#39;org-agenda &#34;a&#34; &#39;org-agenda &#34;b&#34; &#39;counsel-bookmark &#34;c&#34; &#39;org-capture)&lt;/p&gt; &#xA;&lt;p&gt;;; for frequently used prefix keys, the user can create a custom definer with a ;; default :prefix ;; using a variable is not necessary, but it may be useful if you want to ;; experiment with different prefix keys and aren&#39;t using `general-create-definer&#39; (defconst my-leader &#34;C-c&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(general-create-definer my-leader-def ;; :prefix my-leader ;; or without a variable :prefix &#34;C-c&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; ** Global Keybindings (my-leader-def &#34;a&#34; &#39;org-agenda &#34;b&#34; &#39;counsel-bookmark &#34;c&#34; &#39;org-capture)&lt;/p&gt; &#xA;&lt;p&gt;;; ** Mode Keybindings (my-leader-def :keymaps &#39;clojure-mode-map ;; bind &#34;C-c C-l&#34; &#34;C-l&#34; &#39;cider-load-file &#34;C-z&#34; &#39;cider-switch-to-repl-buffer) ;; &lt;code&gt;general-create-definer&#39; creates wrappers around &lt;/code&gt;general-def&#39;, so ;; `define-key&#39;-like syntax is also supported (my-leader-def clojure-mode-map &#34;C-l&#34; &#39;cider-load-file &#34;C-z&#34; &#39;cider-switch-to-repl-buffer)&lt;/p&gt; &#xA;&lt;p&gt;;; * Settings ;; change &lt;code&gt;auto-revert-interval&#39; after autorevert has been loaded (&lt;/code&gt;setq&#39; will ;; not work) (general-setq auto-revert-interval 10) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Evil Examples #+begin_src emacs-lisp (require &#39;general)&lt;/p&gt; &#xA;&lt;p&gt;;; * Global Keybindings ;; &lt;code&gt;general-define-key&#39; acts like &lt;/code&gt;evil-define-key&#39; when :states is specified (general-define-key :states &#39;motion ;; swap ; and : &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char) ;; same as (general-define-key :states &#39;motion &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char) ;; &lt;code&gt;general-def&#39; can be used instead for &lt;/code&gt;evil-global-set-key&#39;-like syntax (general-def &#39;motion &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char)&lt;/p&gt; &#xA;&lt;p&gt;;; alternative using &lt;code&gt;general-translate-key&#39; ;; swap ; and : in &lt;/code&gt;evil-motion-state-map&#39; (general-swap-key nil &#39;motion &#34;;&#34; &#34;:&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; * Mode Keybindings (general-define-key :states &#39;normal :keymaps &#39;emacs-lisp-mode-map ;; or xref equivalent &#34;K&#34; &#39;elisp-slime-nav-describe-elisp-thing-at-point) ;; &lt;code&gt;general-def&#39; can be used instead for &lt;/code&gt;evil-define-key&#39;-like syntax (general-def &#39;normal emacs-lisp-mode-map &#34;K&#34; &#39;elisp-slime-nav-describe-elisp-thing-at-point)&lt;/p&gt; &#xA;&lt;p&gt;;; * Prefix Keybindings ;; :prefix can be used to prevent redundant specification of prefix keys ;; again, variables are not necessary and likely not useful if you are only ;; using a definer created with `general-create-definer&#39; for the prefixes ;; (defconst my-leader &#34;SPC&#34;) ;; (defconst my-local-leader &#34;SPC m&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(general-create-definer my-leader-def ;; :prefix my-leader :prefix &#34;SPC&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(general-create-definer my-local-leader-def ;; :prefix my-local-leader :prefix &#34;SPC m&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; ** Global Keybindings (my-leader-def :keymaps &#39;normal ;; bind &#34;SPC a&#34; &#34;a&#34; &#39;org-agenda &#34;b&#34; &#39;counsel-bookmark &#34;c&#34; &#39;org-capture) ;; &lt;code&gt;general-create-definer&#39; creates wrappers around &lt;/code&gt;general-def&#39;, so ;; `evil-global-set-key&#39;-like syntax is also supported (my-leader-def &#39;normal &#34;a&#34; &#39;org-agenda &#34;b&#34; &#39;counsel-bookmark &#34;c&#34; &#39;org-capture)&lt;/p&gt; &#xA;&lt;p&gt;;; to prevent your leader keybindings from ever being overridden (e.g. an evil ;; package may bind &#34;SPC&#34;), use :keymaps &#39;override (my-leader-def :states &#39;normal :keymaps &#39;override &#34;a&#34; &#39;org-agenda) ;; or (my-leader-def &#39;normal &#39;override &#34;a&#34; &#39;org-agenda)&lt;/p&gt; &#xA;&lt;p&gt;;; ** Mode Keybindings (my-local-leader-def :states &#39;normal :keymaps &#39;org-mode-map &#34;y&#34; &#39;org-store-link &#34;p&#34; &#39;org-insert-link ;; ... ) ;; &lt;code&gt;general-create-definer&#39; creates wrappers around &lt;/code&gt;general-def&#39;, so ;; `evil-define-key&#39;-like syntax is also supported (my-local-leader-def &#39;normal org-mode-map &#34;y&#34; &#39;org-store-link &#34;p&#34; &#39;org-insert-link ;; ... )&lt;/p&gt; &#xA;&lt;p&gt;;; * Settings ;; change evil&#39;s search module after evil has been loaded (`setq&#39; will not work) (general-setq evil-search-module &#39;evil-search) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Vim-like definitions: #+begin_src emacs-lisp (general-evil-setup) ;; * Global Keybindings ;; all keywords arguments are still supported ;; these are just wrappers around `general-def&#39; that set a default :states (general-nmap :prefix &#34;SPC&#34; &#34;p&#34; &#39;helm-mini)&lt;/p&gt; &#xA;&lt;p&gt;;; bind in motion state (inherited by the normal, visual, and operator states) (general-mmap &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char)&lt;/p&gt; &#xA;&lt;p&gt;;; alternatively, for shorter names (general-evil-setup t) (mmap &#34;;&#34; &#39;evil-ex &#34;:&#34; &#39;evil-repeat-find-char)&lt;/p&gt; &#xA;&lt;p&gt;;; * Mode Keybindings (general-nmap :keymaps &#39;emacs-lisp-mode-map &#34;K&#34; &#39;elisp-slime-nav-describe-elisp-thing-at-point) ;; same as (general-nmap emacs-lisp-mode-map &#34;K&#34; &#39;elisp-slime-nav-describe-elisp-thing-at-point)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Switching Completely to General It is possible to gradually switch to using general by using it only for new configuration and slowly converting old configuration if desired. If you would like to quickly convert all keybindings in your init file to use general so that they show up with &lt;del&gt;general-describe-keybindings&lt;/del&gt;, you can potentially use regexp replace. For example, you could use =M-&amp;lt; C-M-% (global-set-key|define-key|evil-global-set-key|evil-define-key) RET general-def RET !=. The evil equivalent would be =:%s/(global-set-key|define-key|evil-global-set-key|evil-define-key)/general-def/g=.&lt;/p&gt; &#xA;&lt;p&gt;There are two caveats. The old key definers all require using &lt;del&gt;kbd&lt;/del&gt;. This means that you will either have to remove every &lt;del&gt;kbd&lt;/del&gt; in these key definers (e.g. =:%s/(kbd ?(.*?))/\1/gc=; you should likely confirm whether each &lt;del&gt;kbd&lt;/del&gt; should be removed) or set =general-implicit-kbd= to nil for the old configuration. Furthermore, &lt;del&gt;general-def&lt;/del&gt; can only correctly replace definer statements where the first specified key is a string or vector. It will not work correctly to replace a definer that uses a variable or function for the first key (e.g. &lt;del&gt;(global-set-key my-key &#39;command)&lt;/del&gt; cannot be replaced directly with &lt;del&gt;general-def&lt;/del&gt;). To use general for definitions like this, you must either use the actual equivalent definer that &lt;del&gt;general-def&lt;/del&gt; ends up using (&lt;del&gt;general-define-key&lt;/del&gt;, &lt;del&gt;general-emacs-define-key&lt;/del&gt;, or &lt;del&gt;evil-define-key&lt;/del&gt;) or explicitly separate the positional arguments from the first key with a bogus keyword argument (e.g. &lt;del&gt;(general-def :start-maps my-key &#39;command)&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you decide to do this, please make sure that your configuration is backed up, and test this out to make sure that there are no errors before permanently changing your configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;general-define-key&lt;/del&gt; Details This package provides one main function, &lt;del&gt;general-define-key&lt;/del&gt;, for key definitions for both evil and non-evil users. It is recommended you use the provided wrappers around it or create your own with &lt;del&gt;general-create-definer&lt;/del&gt;, but first you should understand the keyword arguments provided by &lt;del&gt;general-define-key&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Definitions The only positional arguments for &lt;del&gt;general-define-key&lt;/del&gt; are any number of key/definition pairs. General supports all key and definition types supported by &lt;del&gt;define-key&lt;/del&gt; (see its help text) as well as its own [[#extended-definition-syntax][&#34;extended definitions&#34;]]. Here are a few examples of definitions that aren&#39;t standard =&#34;string key&#34; &#39;command= pairs: #+begin_src emacs-lisp ;; vector keys, including [t] and [remap] are supported (general-define-key :keymaps &#39;org-capture-mode-map [remap evil-save-and-close] &#39;org-capture-finalize [remap evil-save-modified-and-close] &#39;org-capture-finalize [remap evil-quit] &#39;org-capture-kill)&lt;/p&gt; &#xA;&lt;p&gt;(general-define-key :states &#39;normal :keymaps &#39;org-capture-mode-map ;; keyboard macro definition &#34;RET&#34; &#34;C-c C-c&#34; ;; general.el extended definition &#34;SPC k&#34; &#39;(org-capture-kill :which-key &#34;abort capture&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;kbd&lt;/del&gt; will automatically be called on every string key. =general-implicit-kbd= can be set to nil if you want to manually use &lt;del&gt;(kbd &#34;key&#34;)&lt;/del&gt;. This option is mainly provided to make it easy to transition to &lt;del&gt;general-define-key&lt;/del&gt; or &lt;del&gt;general-def&lt;/del&gt; from other key definers with search and replace and therefore only applies to &lt;del&gt;general-define-key&lt;/del&gt; (and wrappers). &lt;del&gt;kbd&lt;/del&gt; will always be called on string keys for other helpers such as &lt;del&gt;general-key&lt;/del&gt;, &lt;del&gt;general-key-dispatch&lt;/del&gt;, and &lt;del&gt;general-translate-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Keyword Arguments =:prefix=, =:states=, and =:keymaps= are the most basic keyword arguments. By default, there is no prefix or state (each is nil), and the keymap is =&#39;global=. Each keymap can either be a quoted keymap, quoted [[#keymapstate-aliases][keymap alias]], =&#39;global=, or =&#39;local=. This is the biggest contrast between &lt;del&gt;general-define-key&lt;/del&gt; and other definers such as &lt;del&gt;define-key&lt;/del&gt;, where the keymap is passed in directly. Note that the provided wrappers such as &lt;del&gt;general-def&lt;/del&gt; do not require quoting keymaps. When the keymap is =&#39;local=, the key will be bound only in the current buffer (see [[#override-keymaps-and-buffer-local-keybindings][here]] for more details). When the keymap is =&#39;global=, the key will be bound in &lt;del&gt;(current-global-map)&lt;/del&gt; (or the corresponding evil global map if =:states= is specified; see [[#note-for-evil-users][Note for Evil Users]] for more information).&lt;/p&gt; &#xA;&lt;p&gt;=:states= and =:keymaps= can be lists or a single element, allowing the user to define keys for multiple evil states or keymaps simultaneously. This can be useful in certain situations to prevent redundancy.&lt;/p&gt; &#xA;&lt;p&gt;Using a different prefix for the insert and emacs states (or any state in =general-non-normal-states=) can be done with =:non-normal-prefix= or =:global-prefix=. By default, =:prefix= will apply to all keys, but if one (or both) of the other prefix keywords is specified, =:prefix= will only apply to evil states not listed in =general-non-normal-states=. This is also the case for the global evil keymaps such as =evil-normal-state-map=. =:non-normal-prefix= will always only apply to the non-normal states. =:global-prefix= will always apply to all keys. For example, this command will bind =SPC /= to swiper in normal state and =M-SPC /= to swiper in emacs and insert state: #+begin_src emacs-lisp (general-define-key :keymaps &#39;(normal insert emacs) :prefix &#34;SPC&#34; :non-normal-prefix &#34;M-SPC&#34; &#34;/&#34; &#39;swiper) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you would like to create a named prefix keymap for your prefix keys, you can also specify =:prefix-command= and/or =:prefix-map=. All prefix keys will then be bound to the prefix command or prefix keymap in the correct keymaps. If =:prefix-command= is specified, &lt;del&gt;define-prefix-command&lt;/del&gt; will be used with =prefix-map= and =prefix-name= passed in as additional arguments to &lt;del&gt;define-prefix-command&lt;/del&gt;. If only =:prefix-map= is specified, a prefix keymap alone will be created with a menu item/prompt corresponding to =:prefix-name=. Note that existing prefix commands/keymaps will not be redefined, so reevaluating a general.el form that uses =:prefix-command= or =:prefix-map= will not clear the previously created keymap. #+begin_src emacs-lisp (general-define-key :keymaps &#39;(normal insert emacs) :prefix &#34;SPC&#34; :non-normal-prefix &#34;M-SPC&#34; :prefix-command &#39;my-prefix-command :prefix-map &#39;my-prefix-map &#34;/&#34; &#39;swiper) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;General is flexible in allowing you to choose how you write things, so if the above would be something you&#39;d use often, you could create a function with the above keyword arguments as defaults using [[#creating-new-key-definers][&lt;del&gt;general-create-definer&lt;/del&gt;]] and write the definition like this: #+begin_src emacs-lisp (my-normal-and-insert-define-key &#34;/&#34; &#39;swiper) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =:infix= keyword can be used to sandwich keys in between all of the specified prefix keys and the keys in each mapping. This is mainly useful when using multiple prefix keywords and especially when using wrappers. For example, if you wanted to define several keys that were prefixed with =SPC g= in normal state and =M-SPC g= in insert state, you could use the previous wrapper with =:infix= instead of re-specifying both =:prefix= and =:non-normal-prefix=: #+begin_src emacs-lisp (my-normal-and-insert-define-key :infix &#34;g&#34; &amp;lt;maps...&amp;gt;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you just want to create the prefix keymap and bind keys directly in it without immediately binding a prefix key to the prefix keymap, simply don&#39;t specify =:keymaps= or =:prefix=: #+begin_src emacs-lisp ;; bind &#34;/&#34; directly in the newly created my-prefix-map (general-define-key :prefix-map &#39;my-prefix-map &#34;/&#34; &#39;swiper) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;There is also a =:predicate= keyword for giving a condition under which a map should be active.&lt;/p&gt; &#xA;&lt;p&gt;*** Predicates The user can use the &lt;del&gt;:predicate&lt;/del&gt; keyword to specify a condition under which the map(s) should be active. For example: #+begin_src emacs-lisp (general-define-key :keymaps &#39;local :predicate &#39;(eobp) &#34;&#xA; &lt;right&gt;&#xA;  &#34; &#39;beginning-of-buffer) #+end_src&#xA; &lt;/right&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;&#xA;  &lt;right&gt;&lt;/right&gt;&lt;/del&gt; will now behave normally except at the end of the buffer where it will jump to the beginning of the buffer. Note that with &lt;del&gt;:predicate&lt;/del&gt;, you can still only have a key bound once in a single keymap. In other words, =:predicate= is only useful if a fallback keybinding already exists in a different, lower precedence keymap. If you want to have a key take different actions depending on conditions in a single keymap, see [[#choosing-definitions-based-on-predicates][Choosing Definition Based on Predicates]].&lt;/p&gt; &#xA;&lt;p&gt;See [[http://endlessparentheses.com/define-context-aware-keys-in-emacs.html][this post]] for more information about how this works.&lt;/p&gt; &#xA;&lt;p&gt;** Keymap/State Aliases To prevent the need to type out long keymap names like =evil-inner-text-objects-map=, general allows the user to specify shorthand names for keymaps by altering =general-keymap-aliases= (and for states by altering =general-state-aliases=). These are alists of either an alias or a list of aliases to the full keymap name: #+begin_src emacs-lisp (push &#39;(help . help-map) general-keymap-aliases) ;; or (push &#39;((h help) . help-map) general-keymap-aliases) ;; or (emacs 25+) (setf (alist-get &#39;help general-keymap-aliases) &#39;help-map) ;; or (emacs 25+) (setf (alist-get &#39;(h help) general-keymap-aliases) &#39;help-map)&lt;/p&gt; &#xA;&lt;p&gt;;; now (general-define-key :keymaps &#39;help ...) ;; is the same as (general-define-key :keymaps &#39;help-map ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that earlier entries in the alist take precedence.&lt;/p&gt; &#xA;&lt;p&gt;By default, the global evil state and text object keymaps have aliases. This allows for using the same syntax as &lt;del&gt;evil-global-set-key&lt;/del&gt; and &lt;del&gt;evil-define-key&lt;/del&gt;: #+begin_src emacs-lisp (general-define-key :keymaps &#39;motion ...) ;; or (general-define-key :keymaps &#39;m ...) #+end_src See =general-keymap-aliases= for all default aliases.&lt;/p&gt; &#xA;&lt;p&gt;All keymap symbols are immediately processed by &lt;del&gt;general--unalias&lt;/del&gt;. By overriding this function, it would be possible to, for example, automatically append =-map= or =-mode-map= to keymap names that don&#39;t end in =-map= or do something more complicated to create a generic shorthand without having manually specify all aliases. This is not recommended as it could potentially become confusing (and would currently break =:definer &#39;minor-mode=), but if anyone would find this useful, feel free to make an issue, and I&#39;ll consider adding it as an option.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;general-define-key&lt;/del&gt; Wrappers *** Positional Argument Wrappers When defining keys in specific keymaps and states, using positional arguments can be shorter. General has two macros that can basically act as drop-in replacements for &lt;del&gt;define-key&lt;/del&gt; and &lt;del&gt;evil-define-key&lt;/del&gt; and another macro that can basically act is a drop-in replacement for both of those and more. They are &lt;del&gt;general-emacs-define-key&lt;/del&gt;, &lt;del&gt;general-evil-define-key&lt;/del&gt;, and &lt;del&gt;general-def&lt;/del&gt; respectively. These are simply wrappers for &lt;del&gt;general-define-key&lt;/del&gt; that pass the positional arguments to the corresponding keywords. However, for compatibility with &lt;del&gt;define-key&lt;/del&gt; and &lt;del&gt;evil-define-key&lt;/del&gt;, it is not necessary to quote keymaps. Both keymaps and states can be left quoted or unquoted (regardless of whether they are lists).&lt;/p&gt; &#xA;&lt;p&gt;For example, the following are all equivalent: #+begin_src emacs-lisp (general-define-key :keymaps &#39;org-mode-map &#34;M-n&#34; &#39;org-next-visible-heading &#34;M-p&#34; &#39;org-previous-visible-heading)&lt;/p&gt; &#xA;&lt;p&gt;(general-emacs-define-key org-mode-map &#34;M-n&#34; &#39;org-next-visible-heading &#34;M-p&#34; &#39;org-previous-visible-heading)&lt;/p&gt; &#xA;&lt;p&gt;;; rough equivalent with define-key (with-eval-after-load &#39;org-mode (define-key org-mode-map (kbd &#34;M-n&#34;) &#39;org-next-visible-heading) (define-key org-mode-map (kbd &#34;M-p&#34;) &#39;org-previous-visible-heading)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Similarly, the following are all equivalent: #+begin_src emacs-lisp (general-define-key :states &#39;(normal visual) :keymaps &#39;org-mode-map &#34;gj&#34; &#39;org-next-visible-heading &#34;gk&#34; &#39;org-previous-visible-heading)&lt;/p&gt; &#xA;&lt;p&gt;(general-evil-define-key &#39;(normal visual) org-mode-map &#34;gj&#34; &#39;org-next-visible-heading &#34;gk&#34; &#39;org-previous-visible-heading)&lt;/p&gt; &#xA;&lt;p&gt;;; equivalent with evil-define-key (evil-define-key &#39;(normal visual) org-mode-map &#34;gj&#34; &#39;org-next-visible-heading &#34;gk&#34; &#39;org-previous-visible-heading) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The actual behavior of these two macros is the same as &lt;del&gt;general-define-key&lt;/del&gt;. You can still use &lt;del&gt;general-define-key&lt;/del&gt;&#39;s keyword arguments after the positional arguments (however, =:keymaps= and =:states= will not override the positional arguments): #+begin_src emacs-lisp ;; these are both valid (general-emacs-define-key &#39;global :prefix &#34;C-c&#34; &#34;/&#34; &#39;swiper)&lt;/p&gt; &#xA;&lt;p&gt;(general-evil-define-key &#39;normal org-mode-map :prefix &#34;SPC&#34; &#34;g&#34; &#39;worf-goto) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As for &lt;del&gt;global-set-key&lt;/del&gt; and &lt;del&gt;evil-global-set-key&lt;/del&gt;, wrappers are not needed. By default &lt;del&gt;general-define-key&lt;/del&gt; acts like &lt;del&gt;global-set-key&lt;/del&gt;, and &lt;del&gt;general-emacs-define-key&lt;/del&gt; can also act like &lt;del&gt;global-evil-set-key&lt;/del&gt; using the symbols for evil&#39;s states (see [[#keymapstate-aliases][keymap aliases]]).&lt;/p&gt; &#xA;&lt;p&gt;The third macro, &lt;del&gt;general-def&lt;/del&gt;, is provided for those who would prefer to use a single, succinctly named definer for all of the previous cases. It will act the same as &lt;del&gt;general-define-key&lt;/del&gt;, &lt;del&gt;general-emacs-define-key&lt;/del&gt;, or &lt;del&gt;general-evil-define-key&lt;/del&gt; depending on the number of positional arguments. #+begin_src emacs-lisp ;; use `general-define-key&#39; when no &#34;positional&#34; arguments (general-def &#34;key&#34; &#39;def ...) ;; example equivalents (general-define-key &#34;key&#34; &#39;def) (global-set-key (kbd &#34;key&#34;) &#39;def)&lt;/p&gt; &#xA;&lt;p&gt;;; use &lt;code&gt;general-emacs-define-key&#39; when one &#34;positional&#34; argument (general-def org-mode-map &#34;key&#34; &#39;def ...) ;; example equivalent (define-key org-mode-map (kbd &#34;key&#34;) &#39;def) ;; act like &lt;/code&gt;evil-global-set-key&#39; (general-def &#39;normal &#34;key&#34; &#39;def ...) ;; example equivalents (evil-global-set-key &#39;normal (kbd &#34;key&#34;) &#39;def) (evil-define-key &#39;normal &#39;global (kbd &#34;key&#34;) &#39;def)&lt;/p&gt; &#xA;&lt;p&gt;;; use `general-evil-define-key&#39; when two &#34;positional&#34; arguments (general-def &#39;normal org-mode-map &#34;key&#34; &#39;def ...) ;; example equivalent (evil-define-key &#39;normal org-mode-map (kbd &#34;key&#34;) &#39;def) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that all leading quoted and unquoted symbols and lists are considered to be positional arguments. This means that if you want to use a variable or function for a key that could be a positional argument, you should either use the definer &lt;del&gt;general-def&lt;/del&gt; would end up using (&lt;del&gt;general-define-key&lt;/del&gt;, &lt;del&gt;general-emacs-define-key&lt;/del&gt;, or &lt;del&gt;evil-define-key&lt;/del&gt;) or explicitly separate the positional arguments from the first key with a bogus keyword argument: #+begin_src emacs-lisp (general-def :start-maps t some-key &#39;some-command) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Mass Key Unbinding Wrapper &lt;del&gt;general-unbind&lt;/del&gt; acts as &lt;del&gt;general-def&lt;/del&gt;, but the positional arguments should all be keys (instead of pairs of keys and definitions) that should be unbound: #+begin_src emacs-lisp (general-unbind &#39;insert &#34;C-v&#34; &#34;C-k&#34; &#34;C-y&#34; &#34;C-e&#34;) ;; equivalent to (general-def &#39;insert &#34;C-v&#34; nil &#34;C-k&#34; nil &#34;C-y&#34; nil &#34;C-e&#34; nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This wrapper can also be used, for example, if you want to disable certain commands or keys from working in certain modes by using with =:with= keyword argument (example use case taken from [[https://github.com/emacs-evil/evil-collection/blob/9fc1a19807dfcd0cc2b221832b6e6faad80a291d/evil-collection-util.el#L32][evil-collection]]): #+begin_src emacs-lisp (general-unbind &#39;normal Info-mode-map :with &#39;ignore [remap evil-append] [remap evil-append-line] [remap evil-insert] [remap evil-insert-line]) ;; equivalent to (general-def &#39;normal Info-mode-map [remap evil-append] &#39;ignore [remap evil-append-line] &#39;ignore [remap evil-insert] &#39;ignore [remap evil-insert-line] &#39;ignore) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The reason that this functionality is implemented as a wrapper and not as a keyword argument for &lt;del&gt;general-define-key&lt;/del&gt; is that &lt;del&gt;cl-defun&lt;/del&gt; cannot correctly parse keyword arguments when the keyword is in an odd position (e.g. =(&#34;a&#34; :keyword &#39;arg)= instead of =(:keyword &#39;arg &#34;a&#34;)=). For example, if this functionality was implemented with an =:unbind= keyword, the =:general= use-package keyword and any definer created with &lt;del&gt;general-create-definer&lt;/del&gt; would not work if the user specified an odd number of keys to unbind (because the default keyword arguments would be at the end of the arglist, in the wrong positions). As I&#39;d rather not re-implement keyword argument parsing just for this use case, this functionality is provided as a macro. This macro will correctly handle any positioning for keyword arguments.&lt;/p&gt; &#xA;&lt;p&gt;*** Creating New Key Definers The &lt;del&gt;general-create-definer&lt;/del&gt; macro can create definers that wrap &lt;del&gt;general-def&lt;/del&gt; but with certain default settings. For example, it can be used to create a definer that will default to a certain prefix (like &lt;del&gt;evil-leader&lt;/del&gt; does): #+begin_src emacs-lisp ;; basic example (general-create-definer my-leader-def :prefix &#34;C-c&#34;) ;; bind &#34;C-c o&#34; to `other-window&#39; (my-leader-def &#34;o&#34; &#39;other-window)&lt;/p&gt; &#xA;&lt;p&gt;;; more complex example (general-create-definer tyrant-def :states &#39;(normal insert emacs) :prefix &#34;SPC&#34; :non-normal-prefix &#34;M-SPC&#34; :prefix-command &#39;tyrant-prefix-command :prefix-map &#39;tyrant-prefix-map) ;; globally bind &#34;SPC /&#34; in normal state and &#34;M-SPC /&#34; in the insert/emacs ;; states to `swiper&#39; (tyrant-def &#34;/&#34; &#39;swiper)&lt;/p&gt; &#xA;&lt;p&gt;;; for org-mode, bind &#34;SPC o&#34; in normal state and &#34;M-SPC /&#34; in the insert/emacs ;; states to `counsel-org-goto&#39; (tyrant-def org-mode-map &#34;o&#34; &#39;counsel-org-goto) ;; same as (tyrant-def :keymaps &#39;org-mode-map &#34;o&#34; &#39;counsel-org-goto) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;It takes an optional =:wrapping= keyword argument that can be specified to use another definer instead of &lt;del&gt;general-def&lt;/del&gt;: #+begin_src emacs-lisp (general-create-definer my-prefix-def :wrapping general-emacs-define-key :prefix &#34;M-,&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Vim-like Definers &lt;del&gt;general-evil-setup&lt;/del&gt; can be used to generate key definition functions that are named similarly to vim&#39;s. Currently, the following functions will be created:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;general-imap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-emap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-nmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-vmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-omap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-mmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-rmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-iemap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-nvmap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-otomap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-itomap&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;general-tomap&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are wrappers around &lt;del&gt;general-def&lt;/del&gt; created with &lt;del&gt;general-create-definer&lt;/del&gt; that set the default =:states=. You can see the help text for each for a more specific description. &lt;del&gt;general-evil-setup&lt;/del&gt; can be called with a non-nil argument (i.e. &lt;del&gt;(general-evil-setup t)&lt;/del&gt;) to create non-prefixed aliases for these definers (e.g. &lt;del&gt;nmap&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here is an example using &lt;del&gt;general-nmap&lt;/del&gt;: #+begin_src emacs-lisp (general-evil-setup) ;; define in evil-normal-state-map (general-nmap &#34;key&#34; &#39;def ...) ;; define in the normal state auxiliary map for org-mode-map (general-nmap org-mode-map &#34;key&#34; &#39;def ...) ;; same as (general-nmap :keymaps &#39;org-mode-map &#34;key&#34; &#39;def ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Note for Evil Users When =:states= is specified, &lt;del&gt;general-define-key&lt;/del&gt; will act as a wrapper around &lt;del&gt;evil-define-key*&lt;/del&gt;. &lt;del&gt;evil-define-key*&lt;/del&gt; now directly supports the symbol =global= for the keymap argument, so the following are equivalent: #+begin_src emacs-lisp (general-define-key ;; (default) ;; :keymaps &#39;global :states &#39;(normal visual) ...) (general-define-key :keymaps &#39;(normal visual) ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that this previously was not the case and &lt;del&gt;(general-define-key :states &#39;normal ...)&lt;/del&gt; would bind in the normal state auxiliary map for &lt;del&gt;(current-global-map)&lt;/del&gt;. Since auxiliary maps have a higher precedence than evil global and override keymaps, this was previously mentioned as one possible way of preventing certain keybindings from being overridden. However, this is not a reliable method. Keys bound in auxiliary maps can override keys bound in other auxiliary maps, for example, and keys bound in evil local or minor-mode keymaps will always override keys bound in regular auxiliary maps. If you need this functionality, please use evil intercept keymaps instead (see [[#override-keymaps-and-buffer-local-keybindings][Override Keymaps]]).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Override Keymaps and Buffer Local Keybindings General.el provides the equivalent of =bind-key=&#39;s =override-global-map= as =general-override-mode-map= (keymap alias is =&#39;override=). When =general-override-mode= is enabled, keys bound in =general-override-mode-map= will take precedence over keys bound in any other minor mode keymaps. By default, general.el will automatically enable =general-override-mode= when binding a key in =general-override-mode-map=. If you would prefer to enable it manually (e.g. you wish to toggle it at some point), you can set =general-override-auto-enable= to nil.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;General also provides a local equivalent called =general-override-local-mode= which is used to add support for buffer-local keybindings (with higher precedence than mode keybindings) by specifying =:keymaps &#39;local=. Unlike with the global override mode, =:keymaps &#39;local= should always be used instead of the actual keymap name since =:keymaps &#39;local= will cause general.el to automatically turn on the corresponding minor mode and perform some necessary extra setup. Note that this is not the same as using &lt;del&gt;local-set-key&lt;/del&gt; (which will bind the key for the current buffer&#39;s major mode, affecting other buffers). When =:states= is specified with =:keymaps &#39;local=, &lt;del&gt;evil-local-set-key&lt;/del&gt; will be used instead.&lt;/p&gt; &#xA;&lt;p&gt;Note that binding directly in =general-override-mode-map= (i.e. no =:states= specified) is only useful for non-evil keybindings. Evil keybindings already override almost all normal emacs keybindings using the same method used here (i.e. evil keymaps are in =emulation-mode-map-alists=). The main exceptions where evil keybindings will be overridden by non-evil keybindings are noted [[https://github.com/noctuid/evil-guide#what-overrides-evil][here]] with explanations on how to deal with these cases. To understand which evil keybindings override others, review the [[https://github.com/noctuid/evil-guide#keymap-precedence][precedence for evil keymaps]]. If you want a global evil keybinding to not be overridden by any other evil keymaps (e.g. overriding keymaps created in =evil-integration.el= or auxiliary keymaps created by some evil package), you can use intercept keymaps. You can make any keymap an intercept keymap, but it may be convenient to just use =general-override-mode-map= for this purpose since the necessary setup (&lt;del&gt;evil-make-intercept-map&lt;/del&gt;) has already been performed: #+begin_src emacs-lisp ;; keybindings that should not be overriden (general-define-key :states &#39;normal :keymaps &#39;override :prefix &#34;SPC&#34; &#34;f&#34; &#39;find-file)&lt;/p&gt; &#xA;&lt;p&gt;;; the above has precedence over the following (excerpt from evil-collection) ;; &#34;SPC f&#34; will still work as `find-file&#39; (evil-define-key &#39;normal transmission-mode-map (kbd &#34;SPC&#34;) &#39;scroll-up-command) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that by default, evil keybindings made with =:keymaps &#39;override= will override even those made with =:keymaps &#39;local=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Displaying Keybindings General keeps track of all your keybindings and allows presenting them as tables in an org buffer using &lt;del&gt;general-describe-keybindings&lt;/del&gt;. By default, they will be displayed in this order:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Buffer local keybindings (i.e. =:keymaps &#39;local=)&lt;/li&gt; &#xA; &lt;li&gt;Global keybindings (i.e. =:keymaps &#39;global=)&lt;/li&gt; &#xA; &lt;li&gt;Global evil keybindings (e.g. =:keymaps &#39;evil-normal-state-map=)&lt;/li&gt; &#xA; &lt;li&gt;Other keybindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Within these categories keymaps, states, and keybindings will be presented in the order they were created in. For each keybinding created, this command will display the key, the definition, and the previous definition. The previous definition will only be updated when the definition changes by default. To have it only be updated when the key was previously unbound, the user can set =general-describe-update-previous-definition= to =nil=.&lt;/p&gt; &#xA;&lt;p&gt;The order in which keybindings are displayed is customizable. All keymaps listed in =general-describe-priority-keymaps= will be displayed first. The rest can optionally be sorted by setting =general-describe-keymap-sort-function= (nil by default). The order evil states are displayed in can be altered either by changing =general-describe-state-sort-function= or changing the order of states in =general-describe-evil-states=. Keybindings can also be sorted if the user sets =general-describe-keybinding-sort-function=. Here is an example that will sort everything alphabetically: #+begin_src emacs-lisp (setq general-describe-priority-keymaps nil general-describe-keymap-sort-function #&#39;general-sort-by-car general-describe-state-sort-function #&#39;general-sort-by-car) ;; sort keybindings alphabetically by key (setq general-describe-keybinding-sort-function #&#39;general-sort-by-car) ;; sort keybindings alphabetically by definition (setq general-describe-keybinding-sort-function #&#39;general-sort-by-cadr) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For reference, keybindings are stored in an alist. Here is what is passed to each sorting function: #+begin_src emacs-lisp ;; &lt;code&gt;general-keybindings&#39; - an alist of keymap to state alist ;; passed to &lt;/code&gt;general-describe-keymap-sort-function&#39; ((keymap-name . state-alist) ...) ;; a state alist (state name is nil if there is no state) ;; passed to &lt;code&gt;general-describe-state-sort-function&#39; ((state-name . keybindings) ...) ;; the list of keybindings is passed to &lt;/code&gt;general-describe-keybinding-sort-function&#39; ((&#34;key after kbd applied&#34; &#39;def &#39;previous-def) ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To actually change how the keybinding table is printed, the user could override &lt;del&gt;general--print-map&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions/Macros to Aid Key Definition ** Disclaimer Key simulation (for &lt;del&gt;general-simulate-key&lt;/del&gt; and &lt;del&gt;general-key-dispatch&lt;/del&gt; but not for &lt;del&gt;general-key&lt;/del&gt;) can result in duplicate keys being recorded for keyboard macros and evil repeating. To work around this issue, =general.el= will discard these duplicate keys during macro playback (i.e. =executing-kbd-macro= is non-nil). So far, this seems to be a reliable method for getting macros and repeating to work correctly with key simulation. However, it is hard (and maybe impossible) to test some of these cases automatically since it involves simulating keys that in turn simulate keys, and, for example, I haven&#39;t found a way to correctly simulate recording a macro in these cases. Therefore, if you find any issues with macro playback or evil repeating when using &lt;del&gt;general-simulate-key&lt;/del&gt; or &lt;del&gt;general-key-dispatch&lt;/del&gt;, please make an issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Simulating Keypresses General provides two macros called &lt;del&gt;general-key&lt;/del&gt; and &lt;del&gt;general-simulate-key&lt;/del&gt; that can be used to simulate key sequences. In some cases, they can be used similarly to keyboard macros, but they have some advantages. Unlike with a keyboard macro, prefix arguments will work for the command that ends up running. Also, the key simulated does not have to correspond to the full key sequence for a command. See [[https://www.emacswiki.org/emacs/Evil#toc14][here]] for information on an alternative method of doing some of the things these key simulation helpers can do using &lt;del&gt;key-translation-map&lt;/del&gt;. I personally prefer general&#39;s helpers as they are simple and more powerful.&lt;/p&gt; &#xA;&lt;p&gt;Note that when a named prefix keymap/command exists (e.g. &lt;del&gt;help-command&lt;/del&gt;), you should generally prefer to bind directly to that. However, this is not possible for a key like =C-c= whose definition varies depending on the buffer. Therefore, you need to use either &lt;del&gt;general-key&lt;/del&gt; or &lt;del&gt;general-simulate-key&lt;/del&gt;: #+begin_src emacs-lisp (general-nmap &#34;SPC&#34; (general-simulate-key &#34;C-c&#34;)) ;; or (general-nmap &#34;SPC&#34; (general-key &#34;C-c&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Although both will work correctly, [[https://github.com/justbur/emacs-which-key][which-key]] does not currently show all available keys when &lt;del&gt;general-key&lt;/del&gt; is used, so I would currently recommend using &lt;del&gt;general-simulate-key&lt;/del&gt; instead for an example like this.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, &lt;del&gt;general-key&lt;/del&gt; should be preferred for simulating a key that corresponds to a single command. Unlike &lt;del&gt;general-simulate-key&lt;/del&gt;, which creates/returns a function, &lt;del&gt;general-key&lt;/del&gt; expands to an extended menu item like &lt;del&gt;general-predicate-dispatch&lt;/del&gt;. Using an extended menu item is a simpler and more direct approach as emacs will dynamically look up and act as the specified key. This has the advantage of showing the docstring for the exact command with =C-h k=. If the key to act as is unbound, key lookup can continue (like if =:predicate= returns nil), so having a fallback keybinding is possible with &lt;del&gt;general-key&lt;/del&gt; but not with &lt;del&gt;general-simulate-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another downside of &lt;del&gt;general-simulate-key&lt;/del&gt; is that any commands/functions called just afterwards will actually be run before the keys are simulated. This won&#39;t affect the most common use cases, but it makes setting up and tearing down a context more difficult (e.g. simulating a key in a specific evil state requires using =post-command-hook= for &lt;del&gt;general-simulate-key&lt;/del&gt; but not for &lt;del&gt;general-key&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-key&lt;/del&gt; may be useful when you want to have a key act as another without having to bind it to the exact command in every relevant keymap: #+begin_src emacs-lisp (general-nmap &#34;RET&#34; (general-key &#34;C-c C-c&#34;)) ;; a keyboard macro works, but C-h k will not show the command docstring (general-nmap &#34;RET&#34; &#34;C-c C-c&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-simulate-key&lt;/del&gt; and &lt;del&gt;general-key&lt;/del&gt; also support keyword arguments to control the context the keys are simulated in (both support =:state=; &lt;del&gt;general-simulate-key&lt;/del&gt; supports =:keymap= for now but I don&#39;t know how useful it is; please make an issue if you think it would be useful to add =:keymap= to &lt;del&gt;general-key&lt;/del&gt;). For example: #+begin_src emacs-lisp (general-nmap &#34;j&#34; (general-simulate-key &#34;C-n&#34; :state &#39;emacs)) ;; &lt;code&gt;general-key&#39; supports :state only&lt;/code&gt; (general-nmap &#34;j&#34; (general-key &#34;C-n&#34; :state &#39;emacs)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-key&lt;/del&gt; also supports custom setup and teardown before key lookup. Here&#39;s a similar example to the previous one: #+begin_src emacs-lisp (general-nmap &#34;j&#34; (general-key &#34;C-n&#34; :setup (evil-local-mode -1) :teardown (evil-local-mode))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The advantage of &lt;del&gt;general-simulate-key&lt;/del&gt; over &lt;del&gt;general-key&lt;/del&gt; is that it can be used to simulate a key sequence corresponding to multiple commands or a command followed by a key sequence. The key argument can be replaced by a list of a command and keys (e.g. &lt;del&gt;(general-simulate-key (&#39;evil-delete &#34;iw&#34;))&lt;/del&gt;). For example, the following is possible with &lt;del&gt;general-simulate-key&lt;/del&gt; but not with &lt;del&gt;general-key&lt;/del&gt; or a keyboard macro: #+begin_src emacs-lisp (general-nmap &#34;s&#34; (general-simulate-key (&#39;evil-ex &#34;s/&#34;))) #+end_src See the next section for another reasonable use case for this feature.&lt;/p&gt; &#xA;&lt;p&gt;When a command is specified for &lt;del&gt;general-simulate-key&lt;/del&gt;, general will used the remapped version of it if it exists (e.g. if =[remap evil-delete] &#39;lispyville-delete= is in an active keymap, &lt;del&gt;lispyville-delete&lt;/del&gt; will be used instead of &lt;del&gt;evil-delete&lt;/del&gt;). To use the exact command instead, =:remap nil= can be specified&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-simulate-key&lt;/del&gt; creates a named function with a docstring, so which-key and &lt;del&gt;describe-key&lt;/del&gt; will work properly for keys bound to a command created with it. The automatically generated function name, docstring, and which-key description can be replaced with keyword arguments: #+begin_src emacs-lisp (general-nmap &#34;SPC&#34; (general-simulate-key &#34;C-c&#34; :state &#39;emacs :name general-SPC-simulates-C-c :docstring &#34;Simulate C-c in emacs state with SPC.&#34; :which-key &#34;Simulate C-c&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Make sure that you don&#39;t bind a key to simulate itself (e.g. &lt;del&gt;(general-emap &#34;C-n&#34; (general-simulate-key &#34;C-n&#34; :state &#39;emacs))&lt;/del&gt;) as this will cause an infinite loop.&lt;/p&gt; &#xA;&lt;p&gt;** Mapping Under Non-prefix Keys This functionality is mainly targeted at evil users, but it could potentially be useful for non-evil users as well. In vim you can bind something like =cow= without a problem. With evil, =c= is bound to &lt;del&gt;evil-change&lt;/del&gt;, so you can&#39;t bind directly to =cow=. A workaround for this case is to bind a key in &lt;del&gt;evil-operator-state-map&lt;/del&gt;, but this won&#39;t work when operator state is not used (e.g. you want to bind something like =ctb= or =jk= in insert state). I&#39;ve come up with a more general workaround called &lt;del&gt;general-key-dispatch&lt;/del&gt;. Consider the following example: #+begin_src emacs-lisp (general-nmap &#34;c&#34; (general-key-dispatch &#39;evil-change &#34;ow&#34; &#39;toggle-word-wrap &#34;tb&#34; &#39;some-command &#34;c&#34; &#39;evil-change-whole-line ;; alternatively if there was no linewise version: &#34;c&#34; (general-simulate-key (&#39;evil-change &#34;c&#34;)))) ;; &lt;code&gt;evil-change&#39; is not bound in &lt;/code&gt;evil-visual-state-map&#39; by default but ;; inherited from `evil-normal-state-map&#39; ;; if you don&#39;t want &#34;c&#34; to be affected in visual state, you should add this (general-vmap &#34;c&#34; &#39;evil-change) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-key-dispatch&lt;/del&gt; is a function-creating macro. In this example, the command created will wait for user input and try to match one of the specified key sequences (e.g. =ow=). If a key sequence is matched, the corresponding command will be executed. Otherwise it will fall back to simulating the fallback command followed by the unmatched keys (using the same mechanism as &lt;del&gt;general-simulate-key&lt;/del&gt;). For example, =ow= is bound, so =cow= would run &lt;del&gt;toggle-word-wrap&lt;/del&gt;. On the other hand, =b= is not mapped, so =cb= would act the same as =cb= would by default. Counts and repeating should still work for both the mapped keys and fallback command. Because evil handles =cc= differently (since =c= is not a motion), =c= must be explicitly bound to &lt;del&gt;evil-change-whole-line&lt;/del&gt; (or to simulate =(&#39;evil-change &#34;c&#34;)=) to keep its behavior. =c= is not actually bound in visual state by default, so to keep =c= working the same in visual state, you should explicitly bind it to &lt;del&gt;evil-change&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Like with &lt;del&gt;general-simulate-key&lt;/del&gt;, general will first check to see if the command to be executed has been remapped (e.g. if =[remap evil-delete] &#39;lispyville-delete= is in an active keymap, &lt;del&gt;lispyville-delete&lt;/del&gt; will be used instead of &lt;del&gt;evil-delete&lt;/del&gt;). To use the exact command instead, =:remap nil= can be specified.&lt;/p&gt; &#xA;&lt;p&gt;Another thing to note is that you can&#39;t bind a key in the &lt;del&gt;general-key-dispatch&lt;/del&gt; section to simulate the base key (i.e. the key you bind to the resulting command, in this case =c=). For this example, you couldn&#39;t bind =w= to &lt;del&gt;(general-simulate-key &#34;ciw&#34;)&lt;/del&gt;. While this wouldn&#39;t cause an infinite loop, it wouldn&#39;t work either, so you would have to use the command name instead (e.g &lt;del&gt;(general-simulate-key (&#39;evil-change &#34;iw&#34;))&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Also, if you use a count in the middle (e.g. =c2tb= and =2= is not explicitly bound), the fallback command will be run immediately. If anyone cares about this, feel free to make an issue. I could potentially add an option to allow changing the count in the middle without immediately falling back to the default command.&lt;/p&gt; &#xA;&lt;p&gt;Another possible use case of &lt;del&gt;general-key-dispatch&lt;/del&gt; is to emulate vim&#39;s =imap=. For example, you can recreate the common =jk= to =&#xA; &lt;esc&gt;&#xA;  = keybinding: #+begin_src emacs-lisp (general-imap &#34;j&#34; (general-key-dispatch &#39;self-insert-command &#34;k&#34; &#39;evil-normal-state)) #+end_src&#xA; &lt;/esc&gt;&lt;/p&gt; &#xA;&lt;p&gt;Commands created in this way support an optional timeout, meaning you could still insert =jk= (without =C-q= / &lt;del&gt;quoted-insert&lt;/del&gt;) like with [[https://www.emacswiki.org/emacs/key-chord.el][key-chord.el]]: #+begin_src emacs-lisp (general-imap &#34;j&#34; (general-key-dispatch &#39;self-insert-command :timeout 0.25 &#34;k&#34; &#39;evil-normal-state)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If there is input lag, a timeout will not work well (this is also true for packages like key-chord.el). One example is vterm (even though there is not normally visible input lag). In vterm, the real amount of time you would have to wait after pressing &#34;j&#34; before pressing &#34;k&#34; is longer than 0.25 seconds. It is also likely that the next character you type will be input instead (e.g. &#34;jo&#34; would result in &#34;oo&#34;). There&#39;s not much that can be done about the first problem. You can try lowering the timeout in a problematic mode. However, if the input lag is inconsistently present (e.g. caused by some minor mode) and/or severe, this probably won&#39;t help much. You can at least address the second problem by explicitly specifying the character you want to insert: #+begin_src emacs-lisp (defun my-insert-j () (interactive) (insert &#34;j&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(general-imap &#34;j&#34; (general-key-dispatch &#39;my-insert-j :timeout 0.25 &#34;k&#34; &#39;evil-normal-state)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If input lag is an issue, =:timeout= can still be used as a visual enhancement. For example, you can bind =SPC SPC= to end a sentence if you don&#39;t normally need to type two spaces anywhere else. This works without =:timeout= but is visually confusing since spaces are never be inserted until the next keypress. =:timeout= can be used to enhance such a keybinding: #+begin_src emacs-lisp (defun my-insert-space () (interactive) (insert &#34; &#34;))&lt;/p&gt; &#xA;&lt;p&gt;(defun my-sentence-end () (interactive) (insert &#34;. &#34;))&lt;/p&gt; &#xA;&lt;p&gt;(general-def &#39;insert text-mode-map &#34;SPC&#34; (general-key-dispatch &#39;my-insert-space :timeout 0.1 &#34;SPC&#34; &#39;my-sentence-end)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;del&gt;general-key-dispatch&lt;/del&gt; with a timeout to mirror some prefix keymap in insert state, it may also convenient to use the =:inherit-keymap= keyword. This allows using prefix keybindings without the need to re-specify them in the &lt;del&gt;general-key-dispatch&lt;/del&gt;: #+begin_src emacs-lisp (general-nmap :prefix &#34;,&#34; :prefix-command &#39;my-prefix-map &#34;g&#34; &#39;magit-status)&lt;/p&gt; &#xA;&lt;p&gt;(general-imap &#34;,&#34; (general-key-dispatch &#39;self-insert-command :timeout 0.25 :inherit-keymap my-prefix-map)) #+end_src If you bind more keys under your prefix later on in normal state, they will still be available when pressing the prefix in insert state without the need to re-evaluate the &lt;del&gt;general-key-dispatch&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;del&gt;general-key-dispatch&lt;/del&gt; will prevent name clashes by appending a unique number to name of the created command (e.g. &lt;del&gt;general-dispatch-self-insert-command-G402&lt;/del&gt;). If you would like to reference the created command by name, you can name it yourself using the =:name= keyword argument (e.g. =:name general-insert-prefix-dispatch=).&lt;/p&gt; &#xA;&lt;p&gt;Like with &lt;del&gt;general-simulate-key&lt;/del&gt; used with a command name, the behavior of &lt;del&gt;evil-repeat&lt;/del&gt; will depend on the command that ends up running. Having repeating work correctly requires handling a lot of edge cases, so please make an issue if you find any problems. Note that evil does not support repeating a count that comes before an operator currently, but repeating should work when the count follows the operator key (=3cc= vs =c3c=).&lt;/p&gt; &#xA;&lt;p&gt;** Choosing Definitions Based on Predicates &lt;del&gt;general-predicate-dispatch&lt;/del&gt; can be used to generate a &lt;del&gt;menu-item&lt;/del&gt; that will behave differently based on the provided predicates. It takes a fallback definition as the first argument and then a list of predicates and alternate definitions (which can be commands, keymaps, etc.). Predicates are checked in order. If no predicate is matched and the fallback command is nil, then the mapping will be ignored (the keymap with the next highest precedence, if one exists, will be checked for the pressed key(s)).&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (general-define-key &#34;&#xA; &lt;right&gt;&#xA;  &#34; (general-predicate-dispatch &#39;right-char ;; pred def ... (eolp) &#39;beginning-of-line)) #+end_src&#xA; &lt;/right&gt;&lt;/p&gt; &#xA;&lt;p&gt;The =:docstring= keyword can be specified to add a description to the extended menu item.&lt;/p&gt; &#xA;&lt;p&gt;** Key &#34;Translation&#34; &lt;del&gt;general-translate-key&lt;/del&gt; allows binding a key to the definition of another key in the same keymap (comparable to how vim&#39;s keybindings work). Its arguments are the =states= (which can be nil for non-evil keymaps) and =keymaps= (both symbols or lists of symbols like for &lt;del&gt;general-define-key&lt;/del&gt;) to bind/look up the key(s) in followed optionally by keyword arguments (currently only =:destructive=) and key/replacement pairs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection-translate-key&lt;/del&gt; allows binding a key to the definition of another key in the same keymap (comparable to how vim&#39;s keybindings work). Its arguments are the =states= and =keymaps= to bind/look up the key(s) in followed optionally by keyword arguments (currently only =:destructive=) and key/replacement pairs. =states= can be nil for non-evil keymaps, and both =states= and =keymaps= can be a single symbol or a list of symbols.&lt;/p&gt; &#xA;&lt;p&gt;This can be particularly useful, for example, when you want make key swaps/cycles en masse. This use case is similar to one for &lt;del&gt;general-simulate-key&lt;/del&gt; (i.e. make a key act as another key that has a consistent meaning but different commands for different modes without having to individually bind the key to the exact definition in each mode&#39;s keymap). However, &lt;del&gt;general-simulate-key&lt;/del&gt; is not always suitable for this purpose. It can be used to, for example, make =j= in normal state act as =C-n= in emacs state (to use the default &#34;down&#34; navigation key for all modes without needing to individually make keybindings for every mode), but it cannot be used to swap/cycle keys within a single keymap, as this would cause an infinite loop of simulating the other key(s).&lt;/p&gt; &#xA;&lt;p&gt;An example use case of &lt;del&gt;general-translate-key&lt;/del&gt; is for non-QWERTY users who want to retain the hjkl keyboard positions for movement in dired, mu4e, etc. When using a package that already creates hjkl keybindings for the desired mode(s) (e.g. [[https://github.com/jojojames/evil-collection][evil-collection]]), it is easily possible to make these cycles in a single statement: #+begin_src emacs-lisp ;; single invocation example (general-translate-key nil &#39;evil-normal-state-keymap &#34;n&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; ...) ;; cycling keys en masse (dolist (keymap keymaps-with-hjkl-keybindings) (general-translate-key &#39;normal keymap ;; colemak hnei is qwerty hjkl &#34;n&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;i&#34; &#34;l&#34; ;; add back nei &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;n&#34; &#34;l&#34; &#34;i&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;By default, the first invocation of &lt;del&gt;general-translate-key&lt;/del&gt; will make a backup of the keymap. Each subsequent invocation will look up keys in the backup instead of the original. This means that a call to &lt;del&gt;general-translate-key&lt;/del&gt; will always have the same behavior even if evaluated multiple times. When =:destructive t= is specified, keys are looked up in the keymap as it is currently. This means that a call to &lt;del&gt;general-translate-key&lt;/del&gt; that swapped two keys would continue to swap/unswap them with each call. Therefore when =:destructive t= is used, all cycles/swaps must be done within a single call to &lt;del&gt;general-translate-key&lt;/del&gt;. To make a comparison to vim keybindings, =:destructive t= is comparable to vim&#39;s &lt;del&gt;map&lt;/del&gt;, and =:destructive nil= is comparable to vim&#39;s &lt;del&gt;noremap&lt;/del&gt; (where the &#34;original&#34; keybindings are those that existed in the keymap when &lt;del&gt;general-translate-key&lt;/del&gt; was first used).&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll almost always want to use the default behavior (especially in your init file). The limitation of =:destructive nil= is that you can&#39;t translate a key to another key that was defined after the first &lt;del&gt;evil-collection-translate-key&lt;/del&gt;, so =:destructive t= may be useful for interactive experimentation.&lt;/p&gt; &#xA;&lt;p&gt;Note that general state and keymap aliases (as well as =local= and =global=) and =general-implicit-kbd= are supported by &lt;del&gt;general-translate-key&lt;/del&gt;: #+begin_src emacs-lisp ;; normal -&amp;gt; evil-normal-state-keymap (general-translate-key nil &#39;normal ;; kbd not necessary by default &#34;C-p&#34; &#34;C-n&#34;) #+end_src Keys are bound using &lt;del&gt;general-define-key&lt;/del&gt;, so they are viewable with &lt;del&gt;general-describe-keybindings&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-swap-key&lt;/del&gt; is provided as a wrapper around &lt;del&gt;general-translate-key&lt;/del&gt; that allows swapping keys: #+begin_src emacs-lisp (general-swap-key nil &#39;normal &#34;;&#34; &#34;:&#34; &#34;a&#34; &#34;A&#34;) ;; equivalent to (general-translate-key nil &#39;normal &#34;;&#34; &#34;:&#34; &#34;:&#34; &#34;;&#34; &#34;a&#34; &#34;A&#34; &#34;A&#34; &#34;a&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Automatic Key Unbinding To automatically prevent =Key sequence starts with a non-prefix key= errors without the need to explicitly unbind non-prefix keys, you can add &lt;del&gt;(general-auto-unbind-keys)&lt;/del&gt; to your configuration file. This will advise &lt;del&gt;define-key&lt;/del&gt; to unbind any bound subsequence of the =KEY=. Currently, this will only have an effect for =general.el= key definers. The advice can later be removed with &lt;del&gt;(general-auto-unbind-keys t)&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The reason that advice is used is because &lt;del&gt;general-define-key&lt;/del&gt; does not always define keys in the same manner. Because customer definers are supported with =:definer=, &lt;del&gt;general-define-key&lt;/del&gt; does not have the necessary information to handle every case itself.&lt;/p&gt; &#xA;&lt;p&gt;As a final note, if you, for example, bind =s= to a command using &lt;del&gt;general-define-key&lt;/del&gt; and then later bind =s &#xA; &lt;key&gt;&#xA;  = to something, =s= will still show up in &#xA;  &lt;del&gt;general-describe-keybindings&lt;/del&gt; even though it&#39;s no longer bound. Since this is preventable by simply removing the initial unused keybinding, I likely will not try to add a workaround to fix this.&#xA; &lt;/key&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-keybinding-related Configuration Helpers General.el also provides a few helper functions/macros for other configuration purposes. They are intended to be slightly more convenient versions of functions/macros provided by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Settings &lt;del&gt;general-setq&lt;/del&gt; is a stripped-down &lt;del&gt;customize-set-variable&lt;/del&gt; that can act as a drop-in replacement for &lt;del&gt;setq&lt;/del&gt;. The reason you might want to use it instead of &lt;del&gt;setq&lt;/del&gt; is that &lt;del&gt;setq&lt;/del&gt; cannot correctly set all variables. Some variables defined with &lt;del&gt;defcustom&lt;/del&gt; specify a custom setter with =:set= that must be used for changes to take effect (e.g. =auto-revert-interval=). If the corresponding package has already been loaded, using &lt;del&gt;setq&lt;/del&gt; will generally not work to set these variables. On the other hand, &lt;del&gt;general-setq&lt;/del&gt; will correctly use the custom setter when necessary. One benefit of &lt;del&gt;general-setq&lt;/del&gt; over &lt;del&gt;customize-set-variable&lt;/del&gt; is that it can be used to set multiple variables at once. It does not do everything &lt;del&gt;customize-set-variable&lt;/del&gt; does (e.g. it cannot be used interactively, does not attempt to load variable dependencies, and does not allow the user to specify comments). From some basic testing, it is 10x to 100x faster because of this, but the speed difference should not really be noticeable if you aren&#39;t setting thousands of variables during emacs initialization.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example using variables that have a custom setter: #+begin_src emacs-lisp (general-setq auto-revert-interval 10 evil-want-Y-yank-to-eol t evil-search-module &#39;evil-search) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;del&gt;setq&lt;/del&gt; will work as expected as long it is used before the corresponding package is loaded, but with &lt;del&gt;customize-set-variable&lt;/del&gt; or &lt;del&gt;general-setq&lt;/del&gt;, you do not need to worry about whether or not the package has been loaded. If you decide to use &lt;del&gt;general-setq&lt;/del&gt;, I&#39;d recommend aliasing it to something shorter like &lt;del&gt;gsetq&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;One major difference from &lt;del&gt;customize-set-variable&lt;/del&gt; that you should be aware of is that &lt;del&gt;general-setq&lt;/del&gt; falls back to using &lt;del&gt;set&lt;/del&gt; instead of &lt;del&gt;set-default&lt;/del&gt;. This means that, like &lt;del&gt;setq&lt;/del&gt;, it will alter the local value of buffer-local variables instead of the default value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-setq-default&lt;/del&gt; and &lt;del&gt;general-setq-local&lt;/del&gt; also exist but do not attempt to call custom setters. The reason for this is that I have never seen any custom setters for variables that make sense to set both globally and locally (custom setters I&#39;ve seen just use &lt;del&gt;set-default&lt;/del&gt;). &lt;del&gt;setq-default&lt;/del&gt; is useful when you want to globally change the default for a buffer-local variable. &lt;del&gt;setq-local&lt;/del&gt; is useful when you want to make a non-buffer-local variable buffer-local and then change its local value (&lt;del&gt;setq&lt;/del&gt; already preferentially alters the buffer-local value of a variable if there is one). For now, the general.el equivalents are just aliases, but in the future, they will likely record user settings to be displayed in a table later.&lt;/p&gt; &#xA;&lt;p&gt;** Hooks and Advice &lt;del&gt;general-add-hook&lt;/del&gt;, &lt;del&gt;general-remove-hook&lt;/del&gt;, &lt;del&gt;general-advice-add&lt;/del&gt;, and &lt;del&gt;general-advice-remove&lt;/del&gt; all act as drop-in replacements for their corresponding functions but allow lists for some of the arguments. The hook functions allow specifying lists for the hooks and functions, and the advice functions allow specifying lists for the symbols and functions. Because I don&#39;t like the difference in naming for the default advice functions, &lt;del&gt;general-add-advice&lt;/del&gt; and &lt;del&gt;general-remove-advice&lt;/del&gt; are also provided as aliases.&lt;/p&gt; &#xA;&lt;p&gt;For example: #+begin_src emacs-lisp (general-add-hook my-lisp-mode-hooks (list #&#39;lispy-mode #&#39;rainbow-delimiters-mode)) ;; note that setting the :jump command property is recommended instead of this (general-add-advice (list &#39;git-gutter:next-hunk &#39;git-gutter:previous-hunk) :before #&#39;evil-set-jump) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-add-hook&lt;/del&gt; and &lt;del&gt;general-add-advice&lt;/del&gt; can add &#34;transient&#34; functions to hooks or as advice. These transient functions will remove themselves from the hook or as advice after they run once (inspired by Doom Emacs). Additionally, they can remove themselves after the first time they return non-nil or after any arbitrary condition is met. For an example of this, see the implementation of &lt;del&gt;general-after-gui&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Miscellaneous &lt;del&gt;general-after-init&lt;/del&gt; can be used to run code after initialization (e.g. &lt;del&gt;(general-after-init (do-something) (do-something-else))&lt;/del&gt;). It just adds to =after-init-hook= or runs the code immediately if initialization has happened already.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;general-after-gui&lt;/del&gt; and &lt;del&gt;general-after-tty&lt;/del&gt; can be used to run some code once after the first graphical or terminal frame is created. Here is an example use case: #+begin_src emacs-lisp (use-package clipetty :ensure t :init ;; only need to load if create a terminal frame ;; `global-clipetty-mode&#39; will not cause issues if enabled for a server with ;; both graphical and terminal frames (general-after-tty (global-clipetty-mode))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;These both use &lt;del&gt;general-add-hook&lt;/del&gt; to create &#34;transient&#34; hooks.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integration with Other Packages ** Use-package Keywords *** :general Keyword General also optionally provides a use-package keyword. =:general= is similar to =:bind= in that it implies =:defer t= whenever there are bound commands that can be autoloaded (e.g. it will not imply =:defer t= if the only bound command is to a lambda, for example). Whenever autoloadable commands are bound, and the option &lt;del&gt;general-use-package-emit-autoloads&lt;/del&gt; is non-nil, use-package will create autoloads for them (though this is usually not necessary). The keyword is followed by one or more lists containing arguments for &lt;del&gt;general-def&lt;/del&gt;; there is no difference in syntax: #+begin_src emacs-lisp (use-package org :general (&#34;C-c c&#34; &#39;org-capture) (:keymaps &#39;org-mode-map &#34;TAB&#34; &#39;org-cycle) ;; uses &lt;code&gt;general-def&#39; not &lt;/code&gt;general-define-key&#39;, so this is fine (org-mode-map &#34;TAB&#34; &#39;org-cycle)) #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The =:general= keyword also supports using any other key definer/wrapper by manually specifying it: #+begin_src emacs-lisp (use-package org :general (general-nmap &#34;SPC c&#34; &#39;org-capture)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;One annoyance you may encounter is that the default function for indentation will indent a list starting with a keyword like a function: #+begin_src emacs-lisp (:keymaps &#39;org-mode-map &#34;TAB&#34; &#39;org-cycle) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This is an annoyance you may have using other emacs packages as well and can be fixed by modifying =lisp-indent-function= (see [[http://emacs.stackexchange.com/q/10230/5278][this emacs stackexchange question]] and Fuco1&#39;s modified &lt;del&gt;lisp-indent-function&lt;/del&gt; in one of the answers there).&lt;/p&gt; &#xA;&lt;p&gt;*** :no-autoload Keyword If generating autoloads for commands is not desirable, it can be disabled globally (with the =general-use-package-emit-autoloads= option), on a per-binding basis, or on a per-form basis. To skip generating autoloads for a command, use the extended command definition and set the =:no-autoload= option to non-nil. This can be particularly handy when binding to functions defined in the same use-package block, otherwise the byte-compiler complains about multiple definitions of the same function: #+begin_src emacs-lisp (use-package org :general (:states &#39;normal &#34;SPC oa&#34; &#39;(my-org-agenda :no-autoload t)) :preface (defun my-org-agenda () (interactive) (let ((org-agenda-tag-filter-preset &#39;(&#34;-drill&#34;))) (call-interactively #&#39;org-agenda)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The keyword can also be used at the global level, instructing general to skip autoloads for all the keybindings in a form: #+begin_src emacs-lisp :general (:states &#39;normal :no-autoload t &#34;SPC oa&#34; #&#39;my-org-agenda &#34;SPC oc&#34; #&#39;my-org-capture) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you wish to disable emitting autoloads with the =general-use-package-emit-autoloads= variable in a byte-compiled configuration, make sure it is set during macro-expansion time before the =use-package= declarations, with something like &lt;del&gt;(eval-and-compile (setq general-use-package-emit-autoloads nil))&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Hook Keywords General provides two alternatives to =:hook= that use &lt;del&gt;general-add-hook&lt;/del&gt; called =:ghook= and =:gfhook=. Both take any number of arguments of symbols or lists. List arguments work the same for both; they correspond to a list of arguments for [[#hooks-and-advice][&lt;del&gt;general-add-hook&lt;/del&gt;]]. The primary difference between the two is that symbol arguments to =:ghook= are /hooks/, but they are /functions/ for =:gfhook= (hence the =f=). Furthermore, =:ghook= usually implies =:defer t=, and =:gfhook= never implies =:defer t=. =:ghook= should be used when the &lt;del&gt;general-add-hook&lt;/del&gt; is meant to trigger the loading of the package. =:gfhook= should be used when the &lt;del&gt;general-add-hook&lt;/del&gt; is meant to trigger some function in response to the package&#39;s mode being enabled (or toggled in the case of a minor mode). More simply put, =:ghook= is suited towards enabling minor modes, and =:gfhook= is suited towards performing setup once some mode has loaded. The use case for each is further explained below.&lt;/p&gt; &#xA;&lt;p&gt;**** :ghook Keyword =:ghook= is intended to be used to add a package&#39;s minor mode enabling function to a user-specified /hook/, so that when hook is run, the package will be loaded and the mode enabled. This means that =:ghook= will usually imply =:defer t=. While it does not always imply =:defer t=, it will add any non-lambda functions to =:commands= (this is the same behavior as =:hook=). Though this is usually unnecessary (the commands probably already have autoloads), it will in turn imply =:defer t=.&lt;/p&gt; &#xA;&lt;p&gt;Symbols specified with =:ghook= correspond to hooks, and the function to add to each hook is inferred from the package&#39;s name (i.e. =-mode= is automatically added to the package name unless the package&#39;s name already ends in =-mode=). For example, these are all the same: #+begin_src emacs-lisp (use-package rainbow-delimiters :ghook &#39;prog-mode-hook)&lt;/p&gt; &#xA;&lt;p&gt;(use-package rainbow-delimiters ;; `general-add-hook&#39; arglist: HOOKS FUNCTIONS &amp;amp;optional APPEND LOCAL ;; a missing FUNCTIONS argument will be replaced with inferred minor mode :ghook (&#39;prog-mode-hook))&lt;/p&gt; &#xA;&lt;p&gt;(use-package rainbow-delimiters ;; a null or non-symbol placeholder for FUNCTIONS will be replaced with ;; inferred minor mode command; this may be useful if you want to keep the ;; inferred command but also want to set the APPEND and/or LOCAL arguments ;; afterwards, e.g. (&#39;prog-mode-hook nil t) :ghook (&#39;prog-mode-hook nil))&lt;/p&gt; &#xA;&lt;p&gt;(use-package rainbow-delimiters ;; the full arglist for `general-add-hook&#39; can be specified ;; this is necessary if inference is not possible (see below for an example) :ghook (&#39;prog-mode-hook #&#39;rainbow-delimiters-mode))&lt;/p&gt; &#xA;&lt;p&gt;(use-package ;; :commands implies :defer t :commands rainbow-delimiters-mode :init (general-add-hook &#39;prog-mode-hook #&#39;rainbow-delimiters-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you are already familiar with =:hook=, you should note that there are quite a few syntactic differences between =:ghook= and =:hook=. Firstly, quoting the hooks and functions is required. Like =:general= uses the same syntax as &lt;del&gt;general-def(ine-key)&lt;/del&gt; (unlike =:bind=), =:ghook= uses the same syntax as &lt;del&gt;(general-)add-hook&lt;/del&gt; for both clarity and convenience. For example, the user may want to use a helper function/macro to generate the function(s) to add to the hook (see the [[#gfhook-keyword][:gfhook section]] for a specific example). The user may also want to specify a variable containing a list of hooks instead of an actual hook name: #+begin_src emacs-lisp (defconst my-lisp-mode-hooks &#39;(lisp-mode-hook emacs-lisp-mode-hook clojure-mode-hook scheme-mode-hook ;; ... ))&lt;/p&gt; &#xA;&lt;p&gt;(use-package lispy :ghook my-lisp-mode-hooks)&lt;/p&gt; &#xA;&lt;p&gt;;; same as (use-package lispy :ghook (my-lisp-mode-hooks))&lt;/p&gt; &#xA;&lt;p&gt;;; same as (use-package lispy ;; `general-add-hook&#39; can take a list of hooks for the HOOK argument :ghook (&#39;(lisp-mode-hook emacs-lisp-mode-hook clojure-mode-hook scheme-mode-hook ;; ... ))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, =:ghook= will not automatically add =-hook= to specified hook symbols (i.e. you must specify =prog-mode-hook=; =prog-mode= is not sufficient). This design decision is intended to help prevent confusion since =:gfhook= also exists, and its symbols correspond to functions (not hooks) that could also end in =-mode= (and could potentially not be sharp quoted). I don&#39;t think the loss in conciseness is major, and hopefully this will help always make it immediately clear whether symbols correspond to functions or hooks.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, =:hook= only takes one argument, whereas =:ghook= can take an arbitrary number of arguments (just like =:general=): #+begin_src emacs-lisp (use-package lispy ;; any number of symbols (or lists) is allowed :ghook &#39;lisp-mode-hook &#39;emacs-lisp-mode-hook &#39;clojure-mode-hook &#39;scheme-mode-hook) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that if the function name cannot be inferred from the package name (i.e. the package name or the package name with =-mode= appended is not correct), you need to specify a full &lt;del&gt;general-add-hook&lt;/del&gt; arglist: #+begin_src emacs-lisp (use-package yasnippet :ghook (&#39;(text-mode-hook prog-mode-hook) #&#39;yas-minor-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** :gfhook Keyword =:gfhook= is intended to be used to specify /functions/ to add to the package&#39;s mode hook. The hook is inferred from the package&#39;s name (by appending either =-mode-hook= or just =-hook= if the package&#39;s name ends in =-mode=). If the hook cannot be inferred from the package name, then the full arglist must be specified just as with =:ghook=. Unlike =:ghook=, =:gfhook= never adds functions to =:commands= and therefore never implies =:defer t=. This is because the functions specified are ones that should be run when turning on (or toggling) the mode(s) the package provides. The specified functions are external to the package, could be called elsewhere, and therefore should not trigger the package to load. The following all have the same effect: #+begin_src emacs-lisp (use-package org ;; for a major-mode package, you might use :mode to imply :defer t (or just ;; use :defer t; or just `use-package-always-defer&#39; which I personally prefer) :gfhook #&#39;visual-line-mode #&#39;my-org-setup ;; ... )&lt;/p&gt; &#xA;&lt;p&gt;(use-package org :init (general-add-hook &#39;org-mode-hook #&#39;visual-line-mode) (general-add-hook &#39;org-mode-hook #&#39;my-org-setup))&lt;/p&gt; &#xA;&lt;p&gt;;; this is also valid but less concise (use-package org ;; specify null or non-symbol placeholder for HOOKS to use inferred hook :gfhook (nil (list #&#39;visual-line-mode #&#39;my-org-setup)))&lt;/p&gt; &#xA;&lt;p&gt;(use-package org :init (general-add-hook &#39;org-mode-hook (list #&#39;visual-line-mode #&#39;my-org-setup))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Like with =:ghook=, =:gfhook= still requires quoting, so you can use variables and function/macro calls to generate the function to add to the hook: #+begin_src emacs-lisp (defmacro disable (mode) `(lambda () (,mode -1)))&lt;/p&gt; &#xA;&lt;p&gt;(use-package proced ;; must be in a `general-add-hook&#39; argument list, so that it itself is not ;; considered one :gfhook (nil (disable visual-line-mode))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Although you could use =:gfhook= to enable minor modes for some major mode (e.g. enable flyspell inside &lt;del&gt;(use-package org)&lt;/del&gt;), it is probably more logical/organized to group these hooks along with their minor modes&#39; use-package declarations (e.g. using =:ghook=). =:gfhook= is more suited for setup functions. Expanding on the proced example: #+begin_src emacs-lisp (defun my-proced-setup () (visual-line-mode -1) ;; not global; has to be run in buffer (proced-toggle-auto-update t))&lt;/p&gt; &#xA;&lt;p&gt;(use-package proced :gfhook #&#39;my-proced-setup) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Use with Key-chord General provides a simple function that will rewrite a string into a key-chord vector. This allows you to easily use general to create definitions for =key-chord.el=. The following are equivalent:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (key-chord-define evil-insert-state-map &#34;jk&#34; &#39;evil-normal-state) (general-define-key :keymaps &#39;evil-insert-state-map (general-chord &#34;jk&#34;) &#39;evil-normal-state (general-chord &#34;kj&#34;) &#39;evil-normal-state) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that the order of the keys does matter unlike with the default &lt;del&gt;key-chord-define&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extended Definition Syntax General.el supports some extra per-definition keywords. It has &#34;type&#34; keywords that give general.el some extra information to use to create definitions (e.g. =:prefix-command= and =:keymap=) and other keywords that will alter or ignore definitions (e.g. =:predicate= and =:ignore=).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The system that allows for the default keywords can also be extended by the user to support more keywords that can either directly alter the definition or just be used for side effects (like =:which-key=). An extended definition keyword can have any number of helper keywords (and can also be used as a helper keyword itself, e.g. =:keymap=). See [[#user-defined-extended-definition-keywords][User-defined Extended Definition Keywords]] for more information on creating new keywords.&lt;/p&gt; &#xA;&lt;p&gt;Here are the keywords available by default (helper keywords are subitems; specific examples are given later):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:def= - Implicit; this is paired with the actual definition (helper keyword; does not trigger any special behavior by itself)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&#34;Type&#34; specifiers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:keymap= - For keymaps; if the keymap is not defined, will create an &#34;autoloaded&#34; keymap for =:package= &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=:package= - The package to load (also global)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=:prefix-command= and/or =:prefix-map= - These are the same as =:def= and =:keymap= respectively but will create a prefix command and/or keymap (these behave the same as the global keyword arguments except for any key as opposed to just =:prefix=) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=:prefix-name= The keymap menu name/prompt (global value never considered)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=:ignore= - Do not create a keybinding for the key def pair&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that every bindable definition must have =:def=, but general allows for shorthand where =:def= can be omitted or a &#34;type&#34; specifier can be used instead: #+begin_src emacs-lisp ;; shorthand &#39;(swiper :wk &#34;swipe&#34;) ;; rewritten to &#39;(:def swiper :wk &#34;swipe&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; shorthand &#39;(:keymap some-keymap) ;; rewritten to &#39;(:def some-keymap :keymap some-keymap) ;; same as &#39;(:def some-keymap :keymap t)&lt;/p&gt; &#xA;&lt;p&gt;;; shorthand &#39;(:prefix-command my-prefix-cmd :prefix-map my-prefix-map) ;; rewritten to &#39;(:def my-prefix-cmd :prefix-command my-prefix-cmd :prefix-map my-prefix-map) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;After the shorthand expansion, the type keywords are handled exactly the same as any other extended definition keyword.&lt;/p&gt; &#xA;&lt;p&gt;Which-key functionality (see below for more details):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:which-key= or =:wk= - The replacement text (or cons or function) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=:major-modes= - Major modes to match (optional; also global)&lt;/li&gt; &#xA;   &lt;li&gt;=:wk-match-keys= - Whether to include the keys in the match cons (defaults to =t= globally)&lt;/li&gt; &#xA;   &lt;li&gt;=:wk-match-binding= - Whether to include the binding in the match cons (defaults to =t=; also global)&lt;/li&gt; &#xA;   &lt;li&gt;=:wk-full-keys= - Whether the bound keys correspond to the full sequence to match (defaults to =t=; also global)&lt;/li&gt; &#xA;   &lt;li&gt;=:keymap= - When non-nil, general will not try to match a keymap symbol as if it was a command&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Evil command properties (see below for more details):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:properties= - The list of properties to add to the command (also global)&lt;/li&gt; &#xA; &lt;li&gt;=:repeat= - The repeat property to set for the command (also global)&lt;/li&gt; &#xA; &lt;li&gt;=:jump= - The jump property to set for the command (also global)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Global keywords that can be overridden locally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:predicate=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default value for a keyword is =nil= unless otherwise specified.&lt;/p&gt; &#xA;&lt;p&gt;** &#34;Autoloaded&#34; Keymaps As the first example, an extended definition can be used to create an &#34;autoload&#34; for a keymap like use-package&#39;s =:bind-keymap= keyword does: #+begin_src emacs-lisp (general-define-key &#34;C-c p&#34; &#39;(:keymap projectile-command-map :package projectile)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Using this feature, a key can be bound to a keymap that does not exist yet and still work as expected. Projectile will be loaded when =C-c p= is used for the first time. This is done by using an intermediate function to load the package and rebind the keys.&lt;/p&gt; &#xA;&lt;p&gt;=:keymap= is the primary keyword that triggers this check. It can also be used as a helper keyword (e.g. for =which-key=). If the keymap already exists, general will not try to create an autoloaded keymap, and =:package= is not required.&lt;/p&gt; &#xA;&lt;p&gt;=:package= is a helper keyword that can be specified locally within the extended definition or globally. When using the use-package =:general= keyword, it will automatically be specified.&lt;/p&gt; &#xA;&lt;p&gt;** Which Key Integration If you are not already familiar with which-key&#39;s replacement system, please see the docstring for &lt;del&gt;which-key-replacement-alist&lt;/del&gt; if you don&#39;t understand any of the examples or information here.&lt;/p&gt; &#xA;&lt;p&gt;There are several benefits to using general.el to add which-key replacements. The main benefit is that because the keys and definition are already specified, general.el can automatically assemble the match cons. This reuse of information saves a little space since it is not necessary to make an additional call to &lt;del&gt;which-key-add-key-based-replacements&lt;/del&gt; with the key information. It is also useful since which-key does not currently provide any convenience function for creating a replacement that matches a binding (you have to manually add to &lt;del&gt;which-key-replacement-alist&lt;/del&gt;). However, see which-key&#39;s [[https://github.com/justbur/emacs-which-key#automatic][which-key-enable-extended-define-key]] which provides another method for automatically creating replacements and binding keys simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;Another related benefit of using =:which-key= instead of &lt;del&gt;which-key-add-key-based-replacements&lt;/del&gt; directly even for keys that won&#39;t be bound is that replacements will be added for all prefix combinations (i.e. when =:non-normal-prefix= and/or =:global-prefix= are also specified).&lt;/p&gt; &#xA;&lt;p&gt;The argument supplied to =:which-key= or =:wk= is equivalent to the REPLACEMENT argument in &lt;del&gt;which-key-add-key-based-replacements&lt;/del&gt;. It can be a full replacement cons of =(KEY . BINDING)= or just a string (which will be used as the BINDING and serve as the new description). Additionally it can be a function that will return a replacement cons (see the docstring for &lt;del&gt;which-key-replacements-alist&lt;/del&gt; or the which-key README). Finally, which-key allows for a special replacement of =t= to prevent a key from being shown in the which-key popup at all.&lt;/p&gt; &#xA;&lt;p&gt;The =:which-key= keyword can be used with the =:major-modes= keyword (locally or globally) which can be compared to using &lt;del&gt;which-key-add-major-mode-key-based-replacements&lt;/del&gt;. =:major-modes= can have the following values (see the examples below):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=t= - the major mode will be obtained from all keymaps by removing &#34;-map&#34;&lt;/li&gt; &#xA; &lt;li&gt;the major mode name (when only one keymap is specified)&lt;/li&gt; &#xA; &lt;li&gt;a list of the following values: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=t= - same behavior as above but only for corresponding index in =:keymaps=&lt;/li&gt; &#xA;   &lt;li&gt;the major mode name for that index&lt;/li&gt; &#xA;   &lt;li&gt;=nil= (or no item at the index) - don&#39;t match the major mode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=:wk-match-keys=, =:wk-match-binding=, and =:wk-full-keys= can be used to customize the match cons. Generally these will not need to be adjusted. The binding is only included in the match cons if one is available, and =:wk-full-keys= only needs to be specified as =nil= if you are binding keys in a prefix map.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples: #+begin_src emacs-lisp (general-define-key :prefix &#34;SPC&#34; :keymaps &#39;normal ;; unbind SPC and give it a title for which-key (see echo area) &#34;&#34; &#39;(nil :which-key &#34;my lieutenant general prefix&#34;) ;; bind nothing but give SPC f a description for which-key &#34;f&#34; &#39;(:ignore t :which-key &#34;file prefix&#34;) ;; use a cons as a replacement &#34;g&#34; &#39;(:ignore t :wk (&#34;g-key&#34; . &#34;git prefix&#34;)) ;; toggle lispy; use a function as a replacement to show if currently on &#34;l&#34; &#39;(lispy-mode :wk my-lispy-which-key-display) ;; for a keymap, only the keys will be matched; ;; :no-match-binding is not necessary &#34;p&#34; &#39;(:keymap projectile-command-map :wk &#34;projectile prefix&#34;) ;; don&#39;t display this keybinding at all &#34;z&#34; &#39;(hidden-command :wk t) ...)&lt;/p&gt; &#xA;&lt;p&gt;(general-define-key :keymaps &#39;help-map ;; allow keys before bound keys in match ;; since binding in a prefix map :wk-full-keys nil ;; make a prefix-command and add description &#34;A&#34; &#39;(:prefix-command apropos-prefix-map :which-key &#34;apropos&#34;))&lt;/p&gt; &#xA;&lt;p&gt;;; an equivalent of the above (general-define-key :keymaps &#39;help-map :wk-full-keys nil :prefix &#34;A&#34; :prefix-command &#39;apropos-prefix-map ;; make a prefix-command and add description &#34;&#34; &#39;(:ignore t :which-key &#34;apropos&#34;))&lt;/p&gt; &#xA;&lt;p&gt;;; :major-modes (general-define-key :keymaps &#39;emacs-lisp-mode-map :major-modes t ...)&lt;/p&gt; &#xA;&lt;p&gt;(general-define-key :keymaps &#39;(no-follow-convention-mode-keymap1 org-mode-map) :major-modes &#39;(no-follow-convention-mode t) ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Evil Command Properties The =:properties=, =:repeat=, and =:jump= keywords can be used to add evil command properties: #+begin_src emacs-lisp (general-define-key :keymaps &#39;normal :prefix &#34;SPC&#34; &#34;gj&#34; &#39;(git-gutter:next-hunk :properties (:repeat t :jump t)) &#34;gk&#34; &#39;(git-gutter:previous-hunk :repeat t :jump t))&lt;/p&gt; &#xA;&lt;p&gt;;; they also work globally (general-define-key :keymaps &#39;normal :prefix &#34;SPC&#34; :properties &#39;(:repeat t :jump t) ;; or :repeat t :jump t &#34;gj&#34; &#39;git-gutter:next-hunk &#34;gk&#34; &#39;git-gutter:previous-hunk)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that the default for commands without a repeat property are treated the same as commands with =:repeat t=, so the above repeat configuration isn&#39;t explicitly necessary in this case.&lt;/p&gt; &#xA;&lt;p&gt;If you would like for more keywords to be added that correspond to specific properties (like =:repeat=), feel free to make an issue or pull request. For more information on command properties see evil&#39;s documentation and [[https://github.com/noctuid/evil-guide#command-properties][here]].&lt;/p&gt; &#xA;&lt;p&gt;** User-defined Extended Definition Keywords New keywords and functionality can be added by the user by adding a keyword to =general-extended-def-keywords= and creating a corresponding function named &lt;del&gt;general-extended-def-:&#xA;  &lt;keyword&gt;&lt;/keyword&gt;&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Whenever this keyword is specified, general calls the corresponding function with the arguments =state keymap key edef kargs=. Generally, you can ignore at least some of these arguments. =state= and =keymap= are the evil state (nil if none) and keymap that the =key= (internal representation; &lt;del&gt;kbd&lt;/del&gt; already used if necessary) is being bound in. Note that =keymap= will be the symbol for the keymap in case it is needed. To get the actual keymap, using &lt;del&gt;general--get-keymap&lt;/del&gt; is recommended. =edef= is the extended definition itself, and =kargs= is the plist of all the keyword arguments given to the original &lt;del&gt;general-define-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Extended definition functions can optionally alter the definitions. Keywords that have this behavior must be added to either =general-rewrite-def-keywords= or =general-rewrite-def-after-keywords= instead of to =general-extended-def-keywords=. The difference between the two is that the former will alter the definition before the functions for the keywords in =general-extended-def-keywords= are called. Functions that alter the definition should return a new extended definition plist with the =:def= entry updated. For a simple example of a function that does not alter the definition, see &lt;del&gt;general-extended-def-:properties&lt;/del&gt;. For a simple example of a function that does alter the definition, see &lt;del&gt;general-extended-def-:predicate&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Extended definition keywords may use any number of helper keywords. These do not need to be added to any variables but should be distinct from any other keywords.&lt;/p&gt; &#xA;&lt;p&gt;Note that the keywords in =general-extended-def-keywords= and their helper keywords can all be specified both globally and locally. Since globally specifying keywords may not always make sense, it is up to the &lt;del&gt;general-extended-def-:&#xA;  &lt;keyword&gt;&lt;/keyword&gt;&lt;/del&gt; function to decide how to handle things. When a keyword can be specified both globally and locally, &lt;del&gt;general--getf&lt;/del&gt; may be useful to get the local value or the global value if there is no local one (e.g. &lt;del&gt;(general--getf edef kargs :predicate)&lt;/del&gt;). If it does not make sense for your keyword to be specified globally, you can add it to =general-extended-def-global-ignore-keywords=. This will prevent your function from being called unless the keyword is specified locally.&lt;/p&gt; &#xA;&lt;p&gt;Although &lt;del&gt;general--get-keymap&lt;/del&gt; and &lt;del&gt;general--getf&lt;/del&gt; are marked internal, they will continue to exist and keep their current functionality; they are intended to be used as helpers for extended definitions.&lt;/p&gt; &#xA;&lt;p&gt;You can rely on =edef= being a valid extended definition plist with a =:def= keyword. Even if the user only specifies a keyword globally and does not explicitly write definitions as plists or explicitly specify =:def=, general will automatically rewrite definitions to be valid plists. Consider the following example: #+begin_src emacs-lisp (general-define-key :predicate &#39;(eobp) &#34;&#xA; &lt;right&gt;&#xA;  &#34; &#39;beginning-of-buffer) ;; call `general-extended-def-:predicate&#39; with this as an edef argument: &#39;(:def beginning-of-buffer)&#xA; &lt;/right&gt;&lt;/p&gt; &#xA;&lt;p&gt;(general-define-key &#34;&#xA; &lt;right&gt;&#xA;  &#34; &#39;(beginning-of-buffer :predicate (eobp))) ;; call `general-extended-def-:predicate&#39; with this as an edef argument: &#39;(:def beginning-of-buffer :predicate (eobp)) #+end_src&#xA; &lt;/right&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the docstring of =general-extended-def-keywords=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User-defined Key Definers In addition to being able to add new keywords for extended definitions, the user can also create their own key definers. These are generally useful when you want to use some package-specific key definer that has some additional functionality (e.g. &lt;del&gt;lispy-define-key&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternate definers can be used by specifying the =:definer= keyword (globally or inside an extended definition): #+begin_src emacs-lisp (general-define-key :definer &#39;my &#34;key&#34; &#39;def &#34;key2&#34; &#39;(def2 :definer &#39;my-other)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The user-created function should be named &lt;del&gt;general-&#xA;  &lt;definer&gt;&#xA;   -define-key&#xA;  &lt;/definer&gt;&lt;/del&gt;. It will be passed =state keymap key def orig-def kargs=. These arguments are the same as for extended definition functions except for =def= and =orig-def=. =def= is the transformed definition in its final form (though the definer may also alter it before binding it). On the other hand, =orig-def= is the original definition but always as an extended definition plist (e.g. =&#39;(:def command)= if the user only specified =&#39;command=).&lt;/p&gt; &#xA;&lt;p&gt;Like extended definitions, custom definers can have any number of helper keyword arguments specified locally in an extended definition or globally in the arguments to &lt;del&gt;general-define-key&lt;/del&gt;. In cases where a keyword can be both global and local, &lt;del&gt;general--getf&lt;/del&gt; is a useful helper function. Since the keymap passed in is a symbol, &lt;del&gt;general--get-keymap&lt;/del&gt; may be useful as well for transforming it to the keymap value. &lt;del&gt;key-description&lt;/del&gt; will also be useful if the underlying definition function uses &lt;del&gt;kbd&lt;/del&gt; (since =key= is the internal representation ready to be passed directly to &lt;del&gt;define-key&lt;/del&gt;; note that &lt;del&gt;key-description&lt;/del&gt; will work with both strings and vectors, including something like =[remap kill-line]=).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;del&gt;general-lispy-define-key&lt;/del&gt; for a basic example.&lt;/p&gt; &#xA;&lt;p&gt;** Wrapping &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt; If you want to use &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt; instead of &lt;del&gt;evil-define-key*&lt;/del&gt;, you can use =:definer &#39;minor-mode=. This will repurpose =:keymaps= to specify minor mode names instead of keymap names: #+begin_src emacs-lisp (general-define-key :definer &#39;minor-mode :states &#39;normal :keymaps &#39;org-src-mode &#34;RET&#34; &#39;org-edit-src-exit) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you are wondering why you might want to use &lt;del&gt;evil-define-minor-mode-key&lt;/del&gt;, see [[https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately][here]].&lt;/p&gt; &#xA;&lt;p&gt;** Lispy Integration/ Wrapping &lt;del&gt;lispy-define-key&lt;/del&gt; To use &lt;del&gt;lispy-define-key&lt;/del&gt; to make the definitions, =:definer &#39;lispy= can be specified. =:lispy-plist= can be specified globally or in an extended definition to set the last argument to &lt;del&gt;lispy-define-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Worf Integration/ Wrapping &lt;del&gt;worf-define-key&lt;/del&gt; To use &lt;del&gt;worf-define-key&lt;/del&gt; to make the definitions, =:definer &#39;worf= can be specified. =:worf-plist= can be specified globally or in an extended definition to set the last argument to &lt;del&gt;worf-define-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Other Provided Definers To use &lt;del&gt;lpy-define-key&lt;/del&gt; to make the definitions, =:definer &#39;lpy= can be specified.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAQ ** How do I prevent =Key sequence starts with non-prefix key= errors? By default, emacs does not support binding a key sequence where a subsequence of the key is already bound in the same keymap (e.g. you cannot bind =C-a a= to a command in a keymap where =C-a= is already bound to a command).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to be able to bind both key sequences and fall back to the shorter key&#39;s command after a timeout or unmatched keypress, see [[#mapping-under-non-prefix-keys][general-key-dispatch]].&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, you should unbind the non-prefix key. For example: #+begin_src emacs-lisp (general-define-key :keymaps &#39;normal :prefix &#34;s&#34; ;; prefix keys are prepended to other keys, so &#34;&#34; refers to the prefix itself &#34;&#34; nil &#34;a&#34; #&#39;def ;; ... ) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you would rather force key definitions to always be made regardless of whether a subsequence of the key is already bound, [[#automatic-key-unbinding][general can automatically unbind keys when necessary to prevent this error]].&lt;/p&gt; &#xA;&lt;p&gt;** Why don&#39;t some evil keybindings work (immediately)? This is a [[https://github.com/emacs-evil/evil/issues/301][known issue for evil]]. To work around this problem, you can use [[#wrapping-evil-define-minor-mode-key][:definer &#39;minor-mode]]. See [[https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately][here]] for more information.&lt;/p&gt; &#xA;&lt;h1&gt;increase max depth&lt;/h1&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;toc-org-max-depth: 4&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>mhayashi1120/Emacs-wgrep</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/mhayashi1120/Emacs-wgrep</id>
    <link href="https://github.com/mhayashi1120/Emacs-wgrep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Writable grep buffer and apply the changes to files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wgrep.el&lt;/h1&gt; &#xA;&lt;h2&gt;Summary:&lt;/h2&gt; &#xA;&lt;p&gt;wgrep allows you to edit a grep buffer and apply those changes to the file buffer like &lt;code&gt;sed&lt;/code&gt; interactively. No need to learn sed script, just learn Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Install:&lt;/h2&gt; &#xA;&lt;p&gt;Put this file into load-path&#39;ed directory, and byte compile it if desired. And put the following expression into your ~/.emacs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;wgrep)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage:&lt;/h2&gt; &#xA;&lt;p&gt;You can edit the text in the &lt;em&gt;grep&lt;/em&gt; buffer after typing &lt;code&gt;C-c C-p&lt;/code&gt; . After that the changed text is highlighted. The following keybindings are defined:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-e&lt;/code&gt;: Apply the changes to file buffers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-u&lt;/code&gt;: All changes are unmarked and ignored.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-d&lt;/code&gt;: Mark as delete to current line (including newline).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-r&lt;/code&gt;: Remove the changes in the region (these changes are not applied to the files. Of course, the remaining changes can still be applied to the files.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: Toggle read-only area.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-c C-k&lt;/code&gt;: Discard all changes and exit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-x C-q&lt;/code&gt;: Exit wgrep mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To save all buffers that wgrep has changed, run&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x wgrep-save-all-buffers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To save buffer automatically when &lt;code&gt;wgrep-finish-edit&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq wgrep-auto-save-buffer t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can change the default key binding to switch to wgrep.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq wgrep-enable-key &#34;r&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To apply all changes regardless of whether or not buffer is read-only.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq wgrep-change-readonly-file t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Trivial features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;wdired.el like interface.&lt;/li&gt; &#xA; &lt;li&gt;Support GNU grep &lt;code&gt;--context&lt;/code&gt; (&lt;code&gt;-A&lt;/code&gt; &lt;code&gt;-B&lt;/code&gt; and &lt;code&gt;-C&lt;/code&gt;) option.&lt;/li&gt; &#xA; &lt;li&gt;Can handle too many files.&lt;/li&gt; &#xA; &lt;li&gt;Can handle newline insertion in &lt;em&gt;grep&lt;/em&gt; buffer.&lt;/li&gt; &#xA; &lt;li&gt;Delete whole line include newline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Similar software:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/sed/&#34;&gt;GNU sed&lt;/a&gt; &lt;a href=&#34;https://github.com/syohex/emacs-helm-ag&#34;&gt;helm-ag&lt;/a&gt; has a similar feature.&lt;/p&gt; &#xA;&lt;h2&gt;History:&lt;/h2&gt; &#xA;&lt;p&gt;This program was forked from Matsushita Akihisa&#39;s &lt;a href=&#34;http://www.bookshelf.jp/elc/grep-edit.el&#34;&gt;grep-edit.el v2.11&lt;/a&gt;. As this website is now inaccessible, &lt;a href=&#34;https://www.emacswiki.org/emacs/grep-edit.el&#34;&gt;emacswiki.org&#39;s&lt;/a&gt; copy may be consulted.&lt;/p&gt; &#xA;&lt;p&gt;Imported version can be downloaded from this orphan commit: &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep/tree/import-original-author/&#34;&gt;https://github.com/mhayashi1120/Emacs-wgrep/tree/import-original-author/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Following added implementations and differences.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support GNU grep context option -A -B and -C&lt;/li&gt; &#xA; &lt;li&gt;Some bugfix. (wrong coloring text etc..)&lt;/li&gt; &#xA; &lt;li&gt;wdired.el like interface.&lt;/li&gt; &#xA; &lt;li&gt;Remove all advice.&lt;/li&gt; &#xA; &lt;li&gt;Bind to local variables. (grep-a-lot.el works well)&lt;/li&gt; &#xA; &lt;li&gt;After save buffer, colored face will be removed.&lt;/li&gt; &#xA; &lt;li&gt;Change face easy to see.&lt;/li&gt; &#xA; &lt;li&gt;Reinforce checking error.&lt;/li&gt; &#xA; &lt;li&gt;Support removing whole line include new-line.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>minad/vertico</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/minad/vertico</id>
    <link href="https://github.com/minad/vertico" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ð« vertico.el - VERTical Interactive COmpletion&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: vertico.el - VERTical Interactive COmpletion #+author: Daniel Mendler #+language: en #+export_file_name: vertico.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Vertico: (vertico). #+texinfo_dir_desc: VERTical Interactive COmpletion.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/vertico.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/vertico.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Vertigomovie_restoration.jpg/800px-Vertigomovie_restoration.jpg&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The main focus of Vertico is to provide a UI which behaves /correctly/ under all circumstances. By reusing the built-in facilities system, Vertico achieves /full compatibility/ with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extensible and modular. Additional enhancements are available as [[#extensions][extensions]] or [[#complementary-packages][complementary packages]]. The code base is small and maintainable. The main &lt;del&gt;vertico.el&lt;/del&gt; package is only about 600 lines of code without white space and comments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertical display with arrow key navigation. See the [[#extensions][extensions]] for additional display modes.&lt;/li&gt; &#xA; &lt;li&gt;Prompt shows the current candidate index and the total number of candidates.&lt;/li&gt; &#xA; &lt;li&gt;The current candidate is inserted with =TAB= and selected with =RET=.&lt;/li&gt; &#xA; &lt;li&gt;Non-existing candidates can be submitted with =M-RET= or by moving the point to the prompt.&lt;/li&gt; &#xA; &lt;li&gt;Configurable sorting by history position, length and alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;Long candidates with newlines are formatted to take up less space.&lt;/li&gt; &#xA; &lt;li&gt;Deferred completion style highlighting for performance.&lt;/li&gt; &#xA; &lt;li&gt;Annotations are displayed next to the candidates (&lt;del&gt;annotation-&lt;/del&gt; and &lt;del&gt;affixation-function&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Support for candidate grouping and group cycling commands (&lt;del&gt;group-function&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-mx.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico defines its own local keymap in the minibuffer which is derived from &lt;del&gt;minibuffer-local-map&lt;/del&gt;. The keymap keeps most of the &lt;del&gt;fundamental-mode&lt;/del&gt; keybindings intact and remaps and binds only a handful of commands. Note in particular the binding of =TAB= to &lt;del&gt;vertico-insert&lt;/del&gt; and the bindings of &lt;del&gt;vertico-exit/exit-input&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;beginning-of-buffer&lt;/del&gt;, &lt;del&gt;minibuffer-beginning-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-first&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;end-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-last&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-down-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-down&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-up-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-up&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;next-line&lt;/del&gt;, &lt;del&gt;next-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;previous-line&lt;/del&gt;, &lt;del&gt;previous-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;forward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;backward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;exit-minibuffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-exit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;kill-ring-save&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-save&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-RET= -&amp;gt; &lt;del&gt;vertico-exit-input&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=TAB= -&amp;gt; &lt;del&gt;vertico-insert&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is available from [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]]. You can install it directly via &lt;del&gt;package-install&lt;/del&gt;. After installation, you can activate the global minor mode with =M-x vertico-mode=. In order to configure Vertico and other packages in your init.el, you may want to take advantage of &lt;del&gt;use-package&lt;/del&gt;. Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico (use-package vertico :init (vertico-mode)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Different scroll margin&#xA;;; (setq vertico-scroll-margin 0)&#xA;&#xA;;; Show more candidates&#xA;;; (setq vertico-count 20)&#xA;&#xA;;; Grow and shrink the Vertico minibuffer&#xA;;; (setq vertico-resize t)&#xA;&#xA;;; Optionally enable cycling for `vertico-next&#39; and `vertico-previous&#39;.&#xA;;; (setq vertico-cycle t)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;;; Persist history over Emacs restarts. Vertico sorts by history position. (use-package savehist :init (savehist-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; A few more useful configurations... (use-package emacs :init ;; Add prompt indicator to &lt;code&gt;completing-read-multiple&#39;. ;; We display [CRM&amp;lt;separator&amp;gt;], e.g., [CRM,] if the separator is a comma. (defun crm-indicator (args) (cons (format &#34;[CRM%s] %s&#34; (replace-regexp-in-string &#34;\\&lt;/code&gt;\[.&lt;em&gt;?]\&lt;/em&gt;\|\[.&lt;em&gt;?]\&lt;/em&gt;\&#39;&#34; &#34;&#34; crm-separator) (car args)) (cdr args))) (advice-add #&#39;completing-read-multiple :filter-args #&#39;crm-indicator)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Do not allow the cursor in the minibuffer prompt&#xA;(setq minibuffer-prompt-properties&#xA;      &#39;(read-only t cursor-intangible t face minibuffer-prompt))&#xA;(add-hook &#39;minibuffer-setup-hook #&#39;cursor-intangible-mode)&#xA;&#xA;;; Emacs 28: Hide commands in M-x which do not work in the current mode.&#xA;;; Vertico commands are hidden in normal buffers.&#xA;;; (setq read-extended-command-predicate&#xA;;;       #&#39;command-completion-default-include-p)&#xA;&#xA;;; Enable recursive minibuffers&#xA;(setq enable-recursive-minibuffers t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;I recommend to give Orderless completion a try, which is different from the prefix TAB completion used by the basic default completion system or in shells.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Optionally use the `orderless&#39; completion style. (use-package orderless :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers &#39;(+orderless-dispatch) ;; orderless-component-separator #&#39;orderless-escapable-split-on-space) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles partial-completion))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. See =+orderless-dispatch= in the [[https://github.com/minad/consult/wiki][Consult wiki]] for an advanced Orderless style dispatcher. Additionally enable =partial-completion= for file path expansion. =partial-completion= is important for file wildcard support. Multiple files can be opened at once with =find-file= if you enter a wildcard. You may also give the =initials= completion style a try.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[https://github.com/minad/vertico/wiki][Vertico Wiki]] for additional configuration tips. For more general documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want to create your own completion commands, you can find documentation about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Completion styles and TAB completion&lt;/p&gt; &#xA;&lt;p&gt;The bindings of the &lt;del&gt;minibuffer-local-completion-map&lt;/del&gt; are not available in Vertico by default. This means that TAB works differently from what you may expect from the default Emacs completion system.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to have the default completion commands a key press away you can add new bindings or even replace the Vertico bindings. Then the default completion commands behave as usual. For example you can use =M-TAB= to cycle between candidates if you have set &lt;del&gt;completion-cycle-threshold&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;?&#34; #&#39;minibuffer-completion-help) (define-key vertico-map (kbd &#34;M-RET&#34;) #&#39;minibuffer-force-complete-and-exit) (define-key vertico-map (kbd &#34;M-TAB&#34;) #&#39;minibuffer-complete) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;orderless&lt;/del&gt; completion style does not support completion of a common prefix substring, as you may be familiar with from shells or the basic default completion system. The reason is that the Orderless input string is usually not a prefix. In order to support completing prefixes you may want to combine &lt;del&gt;orderless&lt;/del&gt; with &lt;del&gt;substring&lt;/del&gt; in your =completion-styles= configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(substring orderless basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can experiment with the built-in completion-styles, e.g., adding =partial-completion= or =flex=. The =partial-completion= style is important to add if you want to open multiple files at once with &lt;del&gt;find-file&lt;/del&gt; using wildcards. In order to open multiple files at once, you have to move to the prompt and then press =RET=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic substring partial-completion flex)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Because Vertico is fully compatible with Emacs default completion system, further customization of completion behavior can be achieved by setting the designated Emacs variables. For example, one may wish to disable case-sensitivity for file and buffer matching when built-in completion styles are used instead of &lt;del&gt;orderless&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq read-file-name-completion-ignore-case t read-buffer-completion-ignore-case t completion-ignore-case t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completion-at-point and completion-in-region&lt;/p&gt; &#xA;&lt;p&gt;The =completion-at-point= command is usually bound to =M-TAB= or =TAB=. In case you want to use Vertico for completion-at-point/completion-in-region, you can use the function &lt;del&gt;consult-completion-in-region&lt;/del&gt; provided by the Consult package.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =completion-in-region-function= setting also affects TAB completion in the minibuffer when =M-:= (&lt;del&gt;eval-expression&lt;/del&gt;) is used.&lt;/p&gt; &#xA;&lt;p&gt;You may also want to look into my [[https://github.com/minad/corfu][Corfu]] package, which provides a minimal completion system for =completion-in-region= in a child frame popup. Corfu is also a narrowly focused package and developed in the same spirit as Vertico.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensions :properties: :custom_id: extensions &lt;span&gt;ð&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We maintain small extension packages to Vertico in this repository in the subdirectory [[https://github.com/minad/vertico/tree/main/extensions][extensions/]]. The extensions are installed together with Vertico if you pull the package from ELPA. The extensions are inactive by default and can be enabled manually if desired. Furthermore it is possible to install all of the files separately, both &lt;del&gt;vertico.el&lt;/del&gt; and the &lt;del&gt;vertico-*.el&lt;/del&gt; extensions. Currently the following extensions come with the Vertico ELPA package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-buffer.el][vertico-buffer]]: =vertico-buffer-mode= to display Vertico in a separate buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-directory.el][vertico-directory]]: Commands for Ido-like directory navigation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-flat.el][vertico-flat]]: =vertico-flat-mode= to enable a flat, horizontal display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-grid.el][vertico-grid]]: =vertico-grid-mode= to enable a grid display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-indexed.el][vertico-indexed]]: =vertico-indexed-mode= to select indexed candidates with prefix arguments.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-mouse.el][vertico-mouse]]: =vertico-mouse-mode= to support for scrolling and candidate selection.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-multiform.el][vertico-multiform]]: Configure Vertico modes per command or completion category.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-quick.el][vertico-quick]]: Commands to select using Avy-style quick keys.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-repeat.el][vertico-repeat]]: The command =vertico-repeat= repeats the last completion session.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-reverse.el][vertico-reverse]]: =vertico-reverse-mode= to reverse the display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-unobtrusive.el][vertico-unobtrusive]]: =vertico-unobtrusive-mode= displays only the topmost candidate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the Commentary of those files for configuration details. With these extensions it is possible to adapt Vertico such that it matches your preference or behaves similar to other familiar UIs. For example, the combination =vertico-flat= plus =vertico-directory= resembles Ido in look and feel. For an interface similar to Helm, the extension =vertico-buffer= allows you to configure freely where the completion buffer opens, instead of growing the minibuffer. Furthermore =vertico-buffer= will adjust the number of displayed candidates according to the buffer height.&lt;/p&gt; &#xA;&lt;p&gt;Configuration example for =vertico-directory=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure directory extension. (use-package vertico-directory :after vertico :ensure nil ;; More convenient directory navigation commands :bind (:map vertico-map (&#34;RET&#34; . vertico-directory-enter) (&#34;DEL&#34; . vertico-directory-delete-char) (&#34;M-DEL&#34; . vertico-directory-delete-word)) ;; Tidy shadowed file names :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Configure Vertico per command or completion category&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-ripgrep.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;Vertico offers the =vertico-multiform-mode= which allows you to configure Vertico per command or per completion category. The =vertico-buffer-mode= enables a Helm-like buffer display, which takes more space but also displays more candidates. This verbose display mode is useful for commands like &lt;del&gt;consult-imenu&lt;/del&gt; or &lt;del&gt;consult-outline&lt;/del&gt; since the buffer display allows you to get a better overview over the entire current buffer. But for other commands you want to keep using the default Vertico display. &lt;del&gt;vertico-multiform-mode&lt;/del&gt; solves this configuration problem!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico-multiform (vertico-multiform-mode)&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per command. ;; Use a buffer with indices for imenu ;; and a flat (Ido-like) menu for M-x. (setq vertico-multiform-commands &#39;((consult-imenu buffer indexed) (execute-extended-command unobtrusive)))&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per completion category. ;; Use the grid display for files and a buffer ;; for the consult-grep commands. (setq vertico-multiform-categories &#39;((file grid) (consult-grep buffer))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Temporary toggling between the different display modes is possible. Bind the following commands:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;\M-V&#34; #&#39;vertico-multiform-vertical) (define-key vertico-map &#34;\M-G&#34; #&#39;vertico-multiform-grid) (define-key vertico-map &#34;\M-F&#34; #&#39;vertico-multiform-flat) (define-key vertico-map &#34;\M-R&#34; #&#39;vertico-multiform-reverse) (define-key vertico-map &#34;\M-U&#34; #&#39;vertico-multiform-unobtrusive) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can use your own functions or even lambdas to configure the completion behavior per command or per completion category. The function must have the calling convention of a mode, i.e., it takes a single argument, which is either 1 to turn on the mode and -1 to turn off the mode.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure &lt;code&gt;consult-outline&#39; as a scaled down TOC in a separate buffer (setq vertico-multiform-commands &lt;/code&gt;((consult-outline buffer ,(lambda (_) (text-scale-set -1))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Furthermore you can tune buffer-local settings per command or category.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Change the default sorting function. ;; See &lt;code&gt;vertico-sort-function&#39; and &lt;/code&gt;vertico-sort-override-function&#39;. (setq vertico-multiform-commands &#39;((describe-symbol (vertico-sort-function . vertico-sort-alpha))))&lt;/p&gt; &#xA;&lt;p&gt;(setq vertico-multiform-categories &#39;((symbol (vertico-sort-function . vertico-sort-alpha)) (file (vertico-sort-function . sort-directories-first))))&lt;/p&gt; &#xA;&lt;p&gt;;; Sort directories before files (defun sort-directories-first (files) (setq files (vertico-sort-history-length-alpha files)) (nconc (seq-filter (lambda (x) (string-suffix-p &#34;/&#34; x)) files) (seq-remove (lambda (x) (string-suffix-p &#34;/&#34; x)) files))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Combining these features allows us to fine-tune the completion display even more by adjusting the &lt;del&gt;vertico-buffer-display-action&lt;/del&gt;. We can for example reuse the current window for commands of the &lt;del&gt;consult-grep&lt;/del&gt; category (&lt;del&gt;consult-grep&lt;/del&gt;, &lt;del&gt;consult-git-grep&lt;/del&gt; and &lt;del&gt;consult-ripgrep&lt;/del&gt;). Note that this configuration is incompatible with Consult preview, since the previewed buffer is usually shown in exactly this window. Nevertheless this snippet demonstrates the flexibility of the configuration system.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure the buffer display and the buffer display action (setq vertico-multiform-categories &#39;((consult-grep buffer (vertico-buffer-display-action . (display-buffer-same-window)))))&lt;/p&gt; &#xA;&lt;p&gt;;; Disable preview for consult-grep commands (consult-customize consult-ripgrep consult-git-grep consult-grep :preview-key nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As another example, the following code uses &lt;del&gt;vertico-flat&lt;/del&gt; and &lt;del&gt;vertico-cycle&lt;/del&gt; to emulate &lt;del&gt;(ido-mode &#39;buffer)&lt;/del&gt;, i.e., Ido when it is enabled only for completion of buffer names. &lt;del&gt;vertico-cycle&lt;/del&gt; set to &lt;del&gt;t&lt;/del&gt; is necessary here to prevent completion candidates from disappearing when they scroll off-screen to the left.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq vertico-multiform-categories &#39;((buffer flat (vertico-cycle . t)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complementary packages :properties: :custom_id: complementary-packages &lt;span&gt;ð&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico integrates well with complementary packages, which enrich the completion UI. These packages are fully supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][Marginalia]]: Rich annotations in the minibuffer&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult][Consult]]: Useful search and navigation commands&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][Embark]]: Minibuffer actions and context menu&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][Orderless]]: Advanced completion style&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to get accustomed with the package ecosystem, I recommed the following quick start approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start with plain Emacs (&lt;del&gt;emacs -Q&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Install and enable Vertico to get incremental minibuffer completion.&lt;/li&gt; &#xA; &lt;li&gt;Install Orderless and/or configure the built-in completion styles for more flexible minibuffer filtering.&lt;/li&gt; &#xA; &lt;li&gt;Install Marginalia if you like rich minibuffer annotations.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark and add two keybindings for &lt;del&gt;embark-dwim&lt;/del&gt; and &lt;del&gt;embark-act&lt;/del&gt;. I am using the mnemonic keybindings =M-.= and =C-.= since these commands allow you to act on the object at point or in the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Install Consult if you want additional featureful completion commands, e.g., the buffer switcher &lt;del&gt;consult-buffer&lt;/del&gt; with preview or the line-based search &lt;del&gt;consult-line&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark-Consult and Wgrep for export from =consult-line= to =occur-mode= buffers and from =consult-grep= to editable =grep-mode= buffers.&lt;/li&gt; &#xA; &lt;li&gt;Fine tune Vertico with [[#extensions][extensions]].&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The ecosystem is modular. You don&#39;t have to use all of these components. Use only the ones you like and the ones which fit well into your setup. The steps 1. to 4. introduce no new commands over plain Emacs. Step 5. introduces the new commands &lt;del&gt;embark-act&lt;/del&gt; and &lt;del&gt;embark-dwim&lt;/del&gt;. In step 6. you get the Consult commands, some offer new functionality not present in Emacs already (e.g., &lt;del&gt;consult-line&lt;/del&gt;) and some are substitutes (e.g., &lt;del&gt;consult-buffer&lt;/del&gt; for &lt;del&gt;switch-to-buffer&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Child frames and Popups&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An often requested feature is the ability to display the completions in a child frame popup. Personally I am critical of using child frames for minibuffer completion. From my experience it introduces more problems than it solves. Most importantly child frames hide the content of the underlying buffer. Furthermore child frames do not play well together with changing windows and entering recursive minibuffer sessions. On top, child frames can feel slow and sometimes flicker. A better alternative is the &lt;del&gt;vertico-buffer&lt;/del&gt; display which can even be configured individually per command using &lt;del&gt;vertico-multiform&lt;/del&gt;. On the plus side of child frames, the completion display appears at the center of the screen, where your eyes are focused. Please give the following packages a try and judge for yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/muffinmad/emacs-mini-frame][mini-frame]]: Display the entire minibuffer in a child frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/mini-popup][mini-popup]]: Slightly simpler alternative to mini-frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tumashu/vertico-posframe][vertico-posframe]]: Display only the Vertico minibuffer in a child frame using the posframe library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many alternative completion UIs, each UI with its own advantages and disadvantages.&lt;/p&gt; &#xA;&lt;p&gt;Vertico aims to be 100% compliant with all Emacs commands and achieves that with a minimal code base, relying purely on &lt;del&gt;completing-read&lt;/del&gt; while avoiding to invent its own APIs. Inventing a custom API as Helm or Ivy is explicitly avoided in order to increase flexibility and package reuse. Due to its small code base and reuse of the Emacs built-in facilities, bugs and compatibility issues are less likely to occur in comparison to completion UIs or full completion systems, which reimplement a lot of functionality.&lt;/p&gt; &#xA;&lt;p&gt;Since Vertico only provides the UI, you may want to combine it with some of the complementary packages, to give a full-featured completion experience similar to Helm or Ivy. Overall the packages in the spirit of Vertico have a different style than Helm or Ivy. The idea is to have smaller independent components, which one can add and understand step by step. Each component focuses on its niche and tries to be as non-intrusive as possible. Vertico targets users interested in crafting their Emacs precisely to their liking - completion plays an integral part in how the users interacts with Emacs.&lt;/p&gt; &#xA;&lt;p&gt;There are other interactive completion UIs, which follow a similar philosophy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][Mct]]: Minibuffer and Completions in Tandem. Mct reuses the default &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer and enhances it with automatic updates and additional keybindings, to select a candidate and move between minibuffer and completions buffer. Mct can be configured to open only when requested. Furthermore since Mct uses a fully functional buffer you can reuse all your familar buffer commands inside the completions buffer. The main distinction to Vertico&#39;s approach is that &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer displays all matching candidates. This has the advantage that you can interact freely with the candidates and jump around with Isearch or Avy. On the other hand it necessarily causes a slowdown in comparison to Vertico, which only displays a subset of candidates. Mct supports completion in region via its &lt;del&gt;mct-region-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/icomplete-vertical][Icomplete-vertical]]: This package enhances the Emacs builtin Icomplete with a vertical display. In contrast to Vertico, Icomplete rotates the candidates such that the current candidate always appears at the top. From my perspective, candidate rotation feels a bit less intuitive than the UI of Vertico or Selectrum. Note that Emacs 28 offers a built-in &lt;del&gt;icomplete-vertical-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/raxod502/selectrum][Selectrum]]: Selectrum is the predecessor of Vertico, since it directly inspired Vertico. Selectrum has a similar UI and interaction model as Vertico. Vertico offers additional features and is more flexible than Selectrum thanks to its [[#extensions][extensions]]. Unfortunately Selectrum is not fully compatible with every Emacs completion command and dynamic completion tables ([[https://github.com/raxod502/selectrum/issues/481][Issue #481]]), since it uses its own filtering infrastructure, which deviates from the standard Emacs completion facilities. The filtering infrastructure also leads to a larger and more complex code base.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to learn more about Vertico and minibuffer completion, check out the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/hlissner/doom-emacs/tree/develop/modules/completion/vertico][Doom Emacs Vertico Module]]: Vertico is Doom&#39;s default completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=w9hHMDyF9V4][Emacs Minibuffer Completions]] (2022-02-12) by Greg Yut.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=hPwDbx--Waw][Vertico Extensions for Emacs]] (2022-01-08) by Karthik Chikmagalur.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/5ffb2at2d7w][Using Emacs Episode 80 - Vertico, Marginalia, Consult and Embark]] (2021-10-26) by Mike Zamansky.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=UtqE-lR2HCA][System Crafters Live! - Replacing Ivy and Counsel with Vertico and Consult]] (2021-05-21) by David Wilson.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=J0OaRy85MOo][Streamline Your Emacs Completions with Vertico]] (2021-05-17) by David Wilson.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Problematic completion commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is robust in most scenarios. However some completion commands make certain assumptions about the completion styles and the completion UI. Some of these assumptions may not hold in Vertico or other UIs and require minor workarounds.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-refile&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-refile&lt;/del&gt; uses &lt;del&gt;org-olpath-completing-read&lt;/del&gt; to complete the outline path in steps, when &lt;del&gt;org-refile-use-outline-path&lt;/del&gt; is non-nil.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately the implementation of this Org completion table assumes that the &lt;del&gt;basic&lt;/del&gt; completion style is used. The table is incompatible with completion styles like &lt;del&gt;substring&lt;/del&gt;, &lt;del&gt;flex&lt;/del&gt; or &lt;del&gt;orderless&lt;/del&gt;. In order to fix the issue at the root, the completion table should make use of completion boundaries similar to the built-in file completion table. In your user configuration you can prioritize &lt;del&gt;basic&lt;/del&gt; before &lt;del&gt;orderless&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 1: Use the basic completion style (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps t) (advice-add #&#39;org-olpath-completing-read :around (lambda (&amp;amp;rest args) (minibuffer-with-setup-hook (lambda () (setq-local completion-styles &#39;(basic))) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you may want to disable the outline path completion in steps. The completion on the full path can be quicker since the input string matches directly against substrings of the full path, which is useful with Orderless. However the list of possible completions becomes much more cluttered.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 2: Complete full paths (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-agenda-filter&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;del&gt;org-refile&lt;/del&gt;, the &lt;del&gt;org-agenda-filter&lt;/del&gt; completion function (&lt;del&gt;org-agenda-filter-completion-function&lt;/del&gt;) does not make use of completion boundaries. Unfortunately =TAB= completion (&lt;del&gt;minibuffer-complete&lt;/del&gt;) does not work for this reason. This affects Vertico and also the Emacs default completion system. For example if you enter &lt;del&gt;+tag&amp;lt;0 TAB&lt;/del&gt; the input is replaced with &lt;del&gt;0:10&lt;/del&gt; which is not correct. With preserved completion boundaries, the expected result would be &lt;del&gt;+tag&amp;lt;0:10&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;tmm-menubar&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The text menu bar works well with Vertico but always shows a =&lt;em&gt;Completions&lt;/em&gt;= buffer, which is unwanted if you use the Vertico UI. This completion buffer can be disabled with an advice. If you disabled the standard GUI menu bar and prefer the Vertico interface you may also overwrite the default F10 keybinding.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (global-set-key [f10] #&#39;tmm-menubar) (advice-add #&#39;tmm-add-prompt :after #&#39;minibuffer-hide-completions) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;ffap-menu&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;ffap-menu&lt;/del&gt; shows the =&lt;em&gt;Completions&lt;/em&gt;= buffer by default like &lt;del&gt;tmm-menubar&lt;/del&gt;, which is unnecessary with Vertico. This completion buffer can be disabled as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add #&#39;ffap-menu-ask :around (lambda (&amp;amp;rest args) (cl-letf (((symbol-function #&#39;minibuffer-completion-help) #&#39;ignore)) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;completion-table-dynamic&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dynamic completion tables (&lt;del&gt;completion-table-dynamic&lt;/del&gt;, &lt;del&gt;completion-table-in-turn&lt;/del&gt;, etc.) should work well with Vertico. However the requirement is that the =basic= completion style is enabled. The =basic= style performs prefix filtering by passing the input to the completion table (or the dynamic completion table function). The =basic= completion style must not necessarily be configured with highest priority, it can also come after other completion styles like =orderless=, =substring= or =flex=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic)) ;; (setq completion-styles &#39;(orderless basic)) (completing-read &#34;Dynamic: &#34; (completion-table-dynamic (lambda (str) (list (concat str &#34;1&#34;) (concat str &#34;2&#34;) (concat str &#34;3&#34;))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Submitting the empty string&lt;/p&gt; &#xA;&lt;p&gt;The commands &lt;del&gt;multi-occur&lt;/del&gt;, &lt;del&gt;auto-insert&lt;/del&gt;, &lt;del&gt;bbdb-create&lt;/del&gt; read multiple arguments from the minibuffer with &lt;del&gt;completing-read&lt;/del&gt;, one at a time, until you submit an empty string. You should type =M-RET= (&lt;del&gt;vertico-exit-input&lt;/del&gt;) to finish the loop. Directly pressing =RET= (&lt;del&gt;vertico-exit&lt;/del&gt;) does not work since the first candidate is preselected.&lt;/p&gt; &#xA;&lt;p&gt;The underlying issue is that &lt;del&gt;completing-read&lt;/del&gt; always allows you to exit with the empty string, which is called the /null completion/, even if the &lt;del&gt;REQUIRE-MATCH&lt;/del&gt; argument is non-nil. Try the following two calls to &lt;del&gt;completing-read&lt;/del&gt; with =C-x C-e=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match) (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match nil nil &#34;&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In both cases the empty string can be submitted. In the first case no explicit default value is specified and Vertico preselects the &lt;em&gt;first&lt;/em&gt; candidate. In order to exit with the empty string, press =M-RET=. In the second case the explicit default value &#34;&#34; is specified and Vertico preselects the prompt, such that exiting with the empty string is possible by pressing =RET= only.&lt;/p&gt; &#xA;&lt;p&gt;** Tramp hostname completion&lt;/p&gt; &#xA;&lt;p&gt;In combination with Orderless, hostnames are not made available for completion after entering =/ssh:=. In order to avoid this problem, the =basic= completion style should be specified for the file completion category, such that =basic= is tried before =orderless=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic partial-completion)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For users who are familiar with the =completion-style= machinery: You may also define a custom completion style which sets in only for remote files!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun basic-remote-try-completion (string table pred point) (and (vertico--remote-p string) (completion-basic-try-completion string table pred point))) (defun basic-remote-all-completions (string table pred point) (and (vertico--remote-p string) (completion-basic-all-completions string table pred point))) (add-to-list &#39;completion-styles-alist &#39;(basic-remote basic-remote-try-completion basic-remote-all-completions nil)) (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic-remote partial-completion)))) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iqbalansari/restart-emacs</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/iqbalansari/restart-emacs</id>
    <link href="https://github.com/iqbalansari/restart-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple emacs package to restart emacs from within emacs&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart Emacs&lt;/p&gt; &lt;p&gt;[[http://melpa.org/#/restart-emacs][file:http://melpa.org/packages/restart-emacs-badge.svg]] [[http://stable.melpa.org/#/restart-emacs][file:http://stable.melpa.org/packages/restart-emacs-badge.svg]] [[https://travis-ci.org/iqbalansari/restart-emacs][https://travis-ci.org/iqbalansari/restart-emacs.svg?branch=master]] [[http://www.gnu.org/licenses/gpl-3.0.html][http://img.shields.io/:license-gpl3-blue.svg]] [[http://makeapullrequest.com][file:https://img.shields.io/badge/PRs-welcome-brightgreen.svg]]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Table of contents :TOC_3_gh:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#restart-emacs][Restart Emacs]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#what-is-this][What is this?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#installation][Installation]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#elpa][ELPA]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#el-get][El-get]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#compatibility][Compatibility]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#restarting-gui-emacs][Restarting GUI Emacs]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#restarting-emacs-running-in-a-terminal][Restarting Emacs running in a terminal]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#restarting-emacs-daemons][Restarting Emacs daemons]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#contributing][Contributing]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#known-issues][Known Issues]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#command-line-arguments-are-not-preserved][Command line arguments are not preserved]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#the-restarted-daemon-quits-as-soon-as-the-all-the-visible-frames-are-killed][The restarted daemon quits as soon as the all the visible frames are killed]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What is this? This is a simple package to restart Emacs for within Emacs. Inspired by [[http://emacs.stackexchange.com/questions/5428/restart-emacs-from-within-emacs][this]] stackoverflow question.&lt;/p&gt; &#xA;&lt;p&gt;** Installation *** ELPA &lt;del&gt;restart-emacs&lt;/del&gt; is available on [[http://melpa.org/#/restart-emacs][MELPA]] and [[http://stable.melpa.org/#/restart-emacs][MELPA Stable]]. Please follow the instructions on MELPA [[http://melpa.org/#/getting-started][website]] to enable it, if you haven&#39;t already.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can then install ~restart-emacs~ from the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Menu.html][package menu]]. Alternatively install it by doing the following&#xA;&#xA;Refresh the package index&#xA;#+BEGIN_QUOTE&#xA;M-x package-refresh-contents RET&#xA;#+END_QUOTE&#xA;&#xA;And then install it by doing&#xA;#+BEGIN_QUOTE&#xA;M-x package-install RET restart-emacs&#xA;#+END_QUOTE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** El-get &lt;del&gt;restart-emacs&lt;/del&gt; can also be installed using &lt;del&gt;el-get&lt;/del&gt;. Assuming you have latest version of el-get installing it by doing something similar to #+BEGIN_QUOTE M-x el-get-install RET restart-emacs #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;** Usage It offers a command &lt;del&gt;restart-emacs&lt;/del&gt; which kills current Emacs session and starts a new session.&lt;/p&gt; &#xA;&lt;p&gt;Additional arguments to be passed to the new instance can be specified using prefix arguments&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with a single &lt;del&gt;universal-argument&lt;/del&gt; (=C-u=) Emacs is restarted with &lt;del&gt;--debug-init&lt;/del&gt; flag&lt;/li&gt; &#xA; &lt;li&gt;with two &lt;del&gt;universal-argument&lt;/del&gt; (=C-u= =C-u=) Emacs is restarted with &lt;del&gt;-Q&lt;/del&gt; flag&lt;/li&gt; &#xA; &lt;li&gt;with three &lt;del&gt;universal-argument&lt;/del&gt; (=C-u= =C-u= =C-u=) the user is prompted for the arguments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;del&gt;restart-emacs&lt;/del&gt; can restore frames on restart, right this is experimental and disabled by default to enable it set &lt;del&gt;restart-emacs-restore-frames&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is also a second command &lt;del&gt;restart-emacs-start-new-emacs&lt;/del&gt; which starts a new session of Emacs without killing the current one. It takes the same arguments as &lt;del&gt;restart-emacs&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Compatibility *** Restarting GUI Emacs Restarting graphical Emacs should work on any UNIXy system with &lt;del&gt;sh&lt;/del&gt; and on Windows.&lt;/p&gt; &#xA;&lt;p&gt;*** Restarting Emacs running in a terminal This requires that the shell from which Emacs was launched supports job control. This has been tested to work on &lt;del&gt;sh&lt;/del&gt;, &lt;del&gt;bash&lt;/del&gt;, &lt;del&gt;zsh&lt;/del&gt;, &lt;del&gt;fish&lt;/del&gt;, &lt;del&gt;csh&lt;/del&gt; and &lt;del&gt;tcsh&lt;/del&gt;, however this does not work on Windows.&lt;/p&gt; &#xA;&lt;p&gt;*** Restarting Emacs daemons The latest version of &lt;del&gt;restart-emacs&lt;/del&gt; can now restart Emacs daemons. The the frames are restored once the daemon restarts using &lt;del&gt;desktop-mode&lt;/del&gt;. However since &lt;del&gt;desktop-mode&lt;/del&gt; learned to restore frames only Emacs version 24.4 onwards the daemons can be restarted only on Emacs versions 24.4 and later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Another issue with restarting Emacs daemons is that the frames open in a&#xA;terminal cannot be recreated on restart, instead the ~restart-emacs~ would&#xA;write a notification on the terminal with the instructions to reconnect, any&#xA;suggestions to improve this are welcome.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Contributing Code as well as documentation contributions are welcome.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/cask/cask][Cask]] is used to manage project dependencies so make sure you have it installed. To run the tests you need to install the dependencies by running the following&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh cask install #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;After the installation completes you can run the tests by running the following command&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh cask exec ert-runner #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Known Issues *** Command line arguments are not preserved The new Emacs instance does not use the same command line arguments as the running instance. See [[https://github.com/iqbalansari/restart-emacs/issues/11][#11]] for more details *** The restarted daemon quits as soon as the all the visible frames are killed See &lt;a href=&#34;https://github.com/iqbalansari/restart-emacs/issues/10#issuecomment-307565719&#34;&gt;https://github.com/iqbalansari/restart-emacs/issues/10#issuecomment-307565719&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doomemacs/doomemacs</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/doomemacs/doomemacs</id>
    <link href="https://github.com/doomemacs/doomemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Doom Emacs&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt; â¢ &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Documentation&lt;/a&gt; â¢ &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt; â¢ &lt;a href=&#34;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&#34;&gt;Screenshots&lt;/a&gt; â¢ &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&#34; alt=&#34;Made with Doom Emacs&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Supports-Emacs_27.1--28.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Supports Emacs 27.1 - 28.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/doomemacs/doomemacs/master?style=flat-square&#34; alt=&#34;Latest commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square&#34; alt=&#34;Build status: master&#34;&gt; &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.doomemacs.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&#34; alt=&#34;Discourse server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&#34; alt=&#34;Doom Emacs Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&#34;&gt;Getting help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;a href=&#34;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmerâenvious of the features of modern text editorsâspirals into despair before he succumbs to the &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Doom is a configuration framework for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; &#xA;&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; &#xA; &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; &#xA; &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; &#xA; &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; &#xA; &lt;li&gt;A declarative &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; &#xA; &lt;li&gt;Optional vim emulation powered by &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&#34;&gt;more&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; &#xA; &lt;li&gt;A Spacemacs-esque &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&#34;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; &#xA; &lt;li&gt;A rule-based &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&#34;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; &#xA; &lt;li&gt;Per-file indentation style detection and &lt;a href=&#34;http://editorconfig.org/&#34;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; &#xA; &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;ivy&lt;/a&gt; or &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; &#xA; &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; &#xA; &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git 2.23+&lt;/li&gt; &#xA; &lt;li&gt;Emacs 27.1+ (&lt;em&gt;27.2 is recommended&lt;/em&gt;, or &lt;a href=&#34;https://www.emacswiki.org/emacs/GccEmacs&#34;&gt;native-comp&lt;/a&gt;. &lt;strong&gt;29+ is not supported&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; &#xA; &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Doom is comprised of &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d&#xA;~/.emacs.d/bin/doom install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&#34;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.emacs.d/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom build&lt;/code&gt; to recompile all installed packages (use this if you up/downgrade Emacs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/6&#34;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/5&#34;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/7&#34;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting help&lt;/h1&gt; &#xA;&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Our documentation&lt;/a&gt; covers many use cases. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&#34;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&#34;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&#34;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&#34;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&#34;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; &#xA;   &lt;li&gt;Your issue may be documented in the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues&#34;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&#34; alt=&#34;Donate on liberapay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I &lt;span&gt;â¤ï¸&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&#34;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t hesitate to &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues/new&#34;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;liberapay&lt;/a&gt; or &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sshaw/git-link</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/sshaw/git-link</id>
    <link href="https://github.com/sshaw/git-link" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package to get the GitHub/Bitbucket/GitLab/... URL for a buffer location&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-link&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/git-link&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/git-link-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/sshaw/git-link&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sshaw/git-link.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Interactive Emacs functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link&lt;/code&gt; returns the URL for the current buffer&#39;s file location at the current line number or active region.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit&lt;/code&gt; returns the URL for the commit at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-homepage&lt;/code&gt; returns the URL for the repository&#39;s homepage.&lt;/p&gt; &#xA;&lt;p&gt;URLs are added to the kill ring.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Functions can be called interactively (&lt;code&gt;M-x git-link&lt;/code&gt;) or via a key binding of your choice. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(global-set-key (kbd &#34;C-c g l&#34;) &#39;git-link)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a prefix argument prompt for the remote&#39;s name. Defaults to &lt;code&gt;&#34;origin&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With a prefix argument of &lt;code&gt;-&lt;/code&gt;, generate a link without line numbers.&lt;/p&gt; &#xA;&lt;p&gt;Works with Dired, Magit, VC revisions, and Tramp too.&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Global setting are elisp variables. They can be set directly or via &lt;code&gt;M-x customize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Local settings are managed via the repository&#39;s git configuration. They can be set via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --local --add setting value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Local settings have precedence over global settings.&lt;/p&gt; &#xA;&lt;h4&gt;Global&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to, defaults to the current branch.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-open-in-browser&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; also open link in browser via &lt;code&gt;browse-url&lt;/code&gt;, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-commit&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; use the latest commit&#39;s hash in the link instead of the branch name, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-single-line-number&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If &lt;code&gt;nil&lt;/code&gt; line numbers are only added when the selection contains more than 1 line, defaults to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;git-link&lt;/code&gt; will exclude line numbers when invoked with the &lt;code&gt;-&lt;/code&gt; prefix argument.&lt;/p&gt; &#xA;&lt;h4&gt;Local&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Services&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/devops/&#34;&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/codecommit/&#34;&gt;AWS CodeCommit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bitbucket.com&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/&#34;&gt;Codeberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/Cgit&#34;&gt;cgit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com&#34;&gt;GitLab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gitorious.org&#34;&gt;Gitorious&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.savannah.gnu.org/cgit&#34;&gt;Savannah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcegraph.com&#34;&gt;Sourcegraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Git Timemachine&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://gitlab.com/pidu/git-timemachine&#34;&gt;&lt;code&gt;git-timemachine-mode&lt;/code&gt;&lt;/a&gt; is active &lt;code&gt;git-link&lt;/code&gt; generates a URL for the version of the file being visited.&lt;/p&gt; &#xA;&lt;h3&gt;Sourcegraph&lt;/h3&gt; &#xA;&lt;p&gt;To link to files on a Sourcegraph server add a git remote pointing to the repository&#39;s Sourcegraph page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git remote add sourcegraph https://sourcegraph.com/github.com/sshaw/copy-as-format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Links can be generated by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#usage&#34;&gt;specifying &lt;code&gt;sourcegraph&lt;/code&gt; as your remote&lt;/a&gt; when calling the desired link function or by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#settings&#34;&gt;setting &lt;code&gt;sourcegraph&lt;/code&gt; as the default remote&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that the remote can be named anything but its URL&#39;s host must match what&#39;s in the associated link function&#39;s alist. This defaults to &lt;code&gt;&#34;sourcegraph&#34;&lt;/code&gt; but can be changed. See &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#building-links-and-adding-services&#34;&gt;Building Links and Adding Services&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;URLs with ports or an http scheme will not work. It&#39;s a trivial fix so if it&#39;s a problem for you please open an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Building Links and Adding Services&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-remote-alist&lt;/code&gt; is an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. The FUNCTION creates URLs for file on remote host names that match the REGEXP. To add (or modify) how URLs are created for a given host, add appropriate elements to this list.&lt;/p&gt; &#xA;&lt;p&gt;As an example, one of the default elements in this alist is &lt;code&gt;(&#34;gitlab&#34; git-link-gitlab)&lt;/code&gt;. So the &lt;code&gt;git-link-gitlab&lt;/code&gt; function will be used to create URLs to files in remotes that match the &lt;em&gt;regexp&lt;/em&gt; &lt;code&gt;&#34;gitlab&#34;&lt;/code&gt;. That would cover common Gitlab host URLs like &lt;em&gt;&#34;gitlab.com&#34;&lt;/em&gt;, &lt;em&gt;&#34;gitlab.example.com&#34;&lt;/em&gt; and &lt;em&gt;&#34;gitlab.example.org&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit-remote-alist&lt;/code&gt; is also an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. Here, the FUNCTION creates URLs to the commit pages, for remote hosts matching REGEXP.&lt;/p&gt; &#xA;&lt;p&gt;If you use a self-hosted version of one of the supported services, but your remote URL does match with the defaults, you can configure these link function alists. For example, for a GitHub Enterprise instance at &lt;code&gt;gh.example.com&lt;/code&gt;, you could add the following to your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(eval-after-load &#39;git-link&#xA; &#39;(progn&#xA;   (add-to-list &#39;git-link-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-github))&#xA;   (add-to-list &#39;git-link-commit-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-commit-github))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME FILENAME BRANCH COMMIT START END&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FILENAME&lt;/code&gt; source file, relative to &lt;code&gt;DIRNAME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BRANCH&lt;/code&gt; active branch, may be &lt;code&gt;nil&lt;/code&gt; if the repo&#39;s in &#34;detached HEAD&#34; state&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the latest commit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;START&lt;/code&gt; starting line number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;END&lt;/code&gt; ending line number, &lt;code&gt;nil&lt;/code&gt; unless region is active&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link-commit&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME COMMIT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the commit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;See Also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/copy-as-format&#34;&gt;copy-as-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/output-as-format&#34;&gt;output-as-format&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More tests!&lt;/li&gt; &#xA; &lt;li&gt;Consolidate &lt;code&gt;git-link-*-alist&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git-link-grep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rust-lang/rust-mode</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/rust-lang/rust-mode</id>
    <link href="https://github.com/rust-lang/rust-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs configuration for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rust-mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.nongnu.org/nongnu/rust-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/rust-mode.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/rust-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/rust-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rust-lang/rust-mode/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/rust-lang/rust-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#rust-mode&#34;&gt;rust-mode&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#melpa&#34;&gt;Melpa&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#manual-installation&#34;&gt;Manual installation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#feature-guide&#34;&gt;Feature guide&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#indentation&#34;&gt;Indentation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#code-formatting&#34;&gt;Code formatting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#prettifying&#34;&gt;Prettifying&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#running--testing--compiling-code&#34;&gt;Running / testing / compiling code&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#clippy&#34;&gt;Clippy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#easy-insertion-of-dbg&#34;&gt;Easy insertion of dbg!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#more-commands&#34;&gt;More commands&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#highlighting-with-tree-sitter&#34;&gt;highlighting with tree-sitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#lsp&#34;&gt;LSP&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#auto-completion&#34;&gt;Auto-completion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#other-recommended-packages&#34;&gt;Other recommended packages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#flycheck&#34;&gt;flycheck&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#cargoel&#34;&gt;cargo.el&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#cargo-mode&#34;&gt;cargo-mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#rustic&#34;&gt;rustic&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#optional-features&#34;&gt;Optional features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#for-package-maintainers&#34;&gt;For package maintainers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-mode&lt;/code&gt; makes editing &lt;a href=&#34;http://rust-lang.org&#34;&gt;Rust&lt;/a&gt; code with Emacs enjoyable. It requires Emacs 25 or later, and is included in both &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt; and &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;This mode provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlighting (for Font Lock Mode)&lt;/li&gt; &#xA; &lt;li&gt;Indentation&lt;/li&gt; &#xA; &lt;li&gt;Integration with Cargo, clippy and rustfmt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This mode does &lt;em&gt;not&lt;/em&gt; provide autocompletion, or jumping to function / trait definitions. See &lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#auto-completion--code-navigation&#34;&gt;Auto-completion / code navigation&lt;/a&gt; below for tips on how to enable this.&lt;/p&gt; &#xA;&lt;p&gt;If you are missing features in rust-mode, please check out &lt;a href=&#34;https://github.com/brotzeit/rustic&#34;&gt;rustic&lt;/a&gt; before you open a feature request. It depends on rust-mode and provides additional features. This allows us to keep rust-mode light-weight for users that are happy with basic functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-syntax-propertize&lt;/code&gt; and &lt;code&gt;adaptive-wrap-prefix-mode&lt;/code&gt; can lead to severe lag when editing larger files (&lt;a href=&#34;https://github.com/brotzeit/rustic/issues/107&#34;&gt;https://github.com/brotzeit/rustic/issues/107&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Melpa&lt;/h3&gt; &#xA;&lt;p&gt;The package is available on MELPA. Add this to your init.el.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives&#xA;             &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;(package-refresh-contents)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can install &lt;code&gt;rust-mode&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install rust-mode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And put this in your config to load rust-mode automatically:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(require &#39;rust-mode)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;NonGNU ELPA&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; can be used out of the box in emacs28.&lt;/p&gt; &#xA;&lt;p&gt;For older versions you need to add something like the following to your init file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(with-eval-after-load &#39;package (add-to-list &#39;package-archives &#39;(&#34;nongnu&#34; . &#34;https://elpa.nongnu.org/nongnu/&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository locally, and add this to your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/rust-mode/&#34;)&#xA;(autoload &#39;rust-mode &#34;rust-mode&#34; nil t)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.rs\\&#39;&#34; . rust-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature guide&lt;/h2&gt; &#xA;&lt;h3&gt;Indentation&lt;/h3&gt; &#xA;&lt;p&gt;Commands like &lt;kbd&gt;TAB&lt;/kbd&gt; should indent correctly.&lt;/p&gt; &#xA;&lt;p&gt;The Rust style guide recommends spaces rather than tabs for indentation; to follow the recommendation add this to your init.el, which forces indentation to always use spaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;rust-mode-hook&#xA;          (lambda () (setq indent-tabs-mode nil)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since Emacs â¥ 24.4, &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Indent-Convenience.html&#34;&gt;&lt;code&gt;electric-indent-mode&lt;/code&gt;&lt;/a&gt; is turned on by default. If you do not like it, call &lt;code&gt;(electric-indent-mode 0)&lt;/code&gt; in &lt;code&gt;rust-mode-hook&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Code formatting&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;rust-format-buffer&lt;/code&gt; function will format your code with &lt;a href=&#34;https://github.com/rust-lang/rustfmt&#34;&gt;rustfmt&lt;/a&gt; if installed. By default, this is bound to &lt;kbd&gt;C-c C-f&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;rust-format-on-save&lt;/code&gt; enables automatic formatting on save. For example, add the following in your init.el to enable format on save:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq rust-format-on-save t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prettifying&lt;/h3&gt; &#xA;&lt;p&gt;You can toggle prettification of your code by running &lt;code&gt;M-x prettify-symbols-mode&lt;/code&gt;. If you&#39;d like to automatically enable this for all rust files, add the following to your init.el.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;rust-mode-hook&#xA;          (lambda () (prettify-symbols-mode)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add your own prettifications to &lt;code&gt;rust-prettify-symbols-alist&lt;/code&gt;. For example, to display &lt;code&gt;x.add(y)&lt;/code&gt; as &lt;code&gt;xâ(y)&lt;/code&gt;, simply add to your init file &lt;code&gt;(push &#39;(&#34;.add&#34; . ?â) rust-prettify-symbols-alist)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running / testing / compiling code&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;rust-run&lt;/code&gt;, &lt;code&gt;rust-test&lt;/code&gt;, &lt;code&gt;rust-compile&lt;/code&gt; and &lt;code&gt;rust-check&lt;/code&gt; functions shell out to Cargo to run, test, build and check your code. Under the hood, these use the standard Emacs &lt;code&gt;compile&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;These are not bound by default. To bind these to keyboard shortcuts, you can use the following in your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key rust-mode-map (kbd &#34;C-c C-c&#34;) &#39;rust-run)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clippy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-run-clippy&lt;/code&gt; runs &lt;a href=&#34;https://github.com/rust-lang/rust-clippy&#34;&gt;Clippy&lt;/a&gt;, a linter.&lt;/p&gt; &#xA;&lt;h3&gt;Easy insertion of dbg!&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-dbg-wrap-or-unwrap&lt;/code&gt; either wraps or unwraps the current region in &lt;code&gt;dbg!&lt;/code&gt;. This can be useful for easily adding debug lines to your program.&lt;/p&gt; &#xA;&lt;p&gt;This is bound to &lt;kbd&gt;C-c C-d&lt;/kbd&gt; by default.&lt;/p&gt; &#xA;&lt;h3&gt;More commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-toggle-mutability&lt;/code&gt; toggle mut for var defined at current line&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;highlighting with tree-sitter&lt;/h2&gt; &#xA;&lt;p&gt;You should take a look at &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter&#34;&gt;tree-sitter&lt;/a&gt;. When the dependencies are installed you can activate the feature with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package tree-sitter&#xA;  :config&#xA;  (require &#39;tree-sitter-langs)&#xA;  (global-tree-sitter-mode)&#xA;  (add-hook &#39;tree-sitter-after-on-hook #&#39;tree-sitter-hl-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LSP&lt;/h2&gt; &#xA;&lt;h3&gt;eglot&lt;/h3&gt; &#xA;&lt;p&gt;A lightweight lsp client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;rust-mode-hook &#39;eglot-ensure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;lsp-mode&lt;/h3&gt; &#xA;&lt;p&gt;Provides more features and you can enhance the functionality by using additional packages. You can find more information in the &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/installation/#vanilla-emacs&#34;&gt;lsp-mode wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;rust-mode-hook #&#39;lsp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Auto-completion&lt;/h2&gt; &#xA;&lt;p&gt;You can either use a lsp client or &lt;a href=&#34;https://github.com/racer-rust/racer&#34;&gt;racer&lt;/a&gt; with &lt;a href=&#34;https://github.com/racer-rust/emacs-racer#installation&#34;&gt;emacs-racer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other recommended packages&lt;/h2&gt; &#xA;&lt;h3&gt;flycheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; allows highlighting compile errors and Clippy lints inline.&lt;/p&gt; &#xA;&lt;h3&gt;cargo.el&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kwrooijen/cargo.el&#34;&gt;cargo.el&lt;/a&gt; provides a minor mode for integration with Cargo, Rust&#39;s package manager.&lt;/p&gt; &#xA;&lt;h3&gt;cargo-mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ayrat555/cargo-mode&#34;&gt;cargo-mode&lt;/a&gt; is an Emacs minor mode which allows to dynamically select a Cargo command. The reasons behind this package can be found in &lt;a href=&#34;https://www.badykov.com/emacs/2021/05/29/emacs-cargo-mode/&#34;&gt;the post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;rustic&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/brotzeit/rustic&#34;&gt;rustic&lt;/a&gt; is based on rust-mode, extending it with other features such as integration with LSP and with flycheck.&lt;/p&gt; &#xA;&lt;h2&gt;Optional features&lt;/h2&gt; &#xA;&lt;p&gt;The features of the following files can be disabled with &lt;code&gt;rust-load-optional-libraries&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rust-cargo.el&lt;/li&gt; &#xA; &lt;li&gt;rust-compile.el&lt;/li&gt; &#xA; &lt;li&gt;rust-playpen.el&lt;/li&gt; &#xA; &lt;li&gt;rust-rustfmt.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They are disabled by default when you use rustic as it has its own implementations for those features.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-cargo-default-arguments&lt;/code&gt; set additional cargo args used for check,compile,run,test&lt;/p&gt; &#xA;&lt;h2&gt;For package maintainers&lt;/h2&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run elisp tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome. We are also looking for additional maintainers.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hlissner/emacs-hide-mode-line</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/hlissner/emacs-hide-mode-line</id>
    <link href="https://github.com/hlissner/emacs-hide-mode-line" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs plugin that hides (or masks) the current buffer&#39;s mode-line&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/hide-mode-line&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/hide-mode-line-badge.svg?style=flat-square&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hlissner/emacs-hide-mode-line/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?style=flat-square&#34; alt=&#34;MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;hide-mode-line&lt;/h1&gt; &#xA;&lt;p&gt;Provides &lt;code&gt;hide-mode-line-mode&lt;/code&gt;. A minor mode that hides (or masks) the mode-line in your current buffer. It can be used to toggle an alternative mode-line, toggle its visibility, or simply disable the mode-line in buffers where it isn&#39;t very useful otherwise.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Extracted from &lt;code&gt;doom-hide-modeline-mode&lt;/code&gt; in &lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;Doom Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;hide-mode-line&lt;/code&gt; is available on MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install hide-mode-line&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;hide-mode-line)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;hide-mode-line-mode&lt;/code&gt; to hooks where you don&#39;t want a mode-line, like the completion-list or org todo/agenda-popup windows, or neotree.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;completion-list-mode-hook #&#39;hide-mode-line-mode)&#xA;(add-hook &#39;neotree-mode-hook #&#39;hide-mode-line-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or replace the mode-line in specific windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(let ((hide-mode-line-format &#39;(&#34;%b&#34;)))&#xA;  (hide-mode-line-mode +1))&#xA;&#xA;(setq-local hide-mode-line-format &#39;(&#34;%b&#34;))&#xA;(hide-mode-line-mode +1)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>emacs-mirror/emacs</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/emacs-mirror/emacs</id>
    <link href="https://github.com/emacs-mirror/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2022 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; &#xA;&lt;p&gt;This directory tree holds version 29.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; &#xA;&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; &#xA;&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; &#xA;&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&#34;mailto:bug-gnu-emacs@gnu.org&#34;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; &#xA;&lt;p&gt;See the &#34;Bugs&#34; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&#34;https://savannah.gnu.org/mail/?group=emacs&#34;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&#34;https://lists.gnu.org/&#34;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; &#xA;&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; &#xA;&lt;p&gt;There are several subdirectories:&lt;/p&gt; &#xA;&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script.&lt;/p&gt; &#xA;&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; &#xA;&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; &#xA;&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; &#xA;&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>radian-software/straight.el</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/radian-software/straight.el</id>
    <link href="https://github.com/radian-software/straight.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ð Next-generation, purely functional package manager for the Emacs hacker.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;straight.el&lt;/strong&gt;: next-generation, purely functional package manager for the &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt; hacker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please check out the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#faq&#34;&gt;FAQ&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#news&#34;&gt;news&lt;/a&gt; :)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/raxod502/straight.el&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/raxod502/straight.el/tree/develop.svg?style=svg&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/raxod502/straight.el&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/raxod502/straight.el.svg?sanitize=true&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- longlines-start --&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#guiding-principles&#34;&gt;Guiding principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#install-packages&#34;&gt;Install packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#but-what-about-my-fork-of-obscure-el-package&#34;&gt;But what about my fork of (obscure .el package)?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package&#34;&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#edit-packages-locally&#34;&gt;Edit packages locally&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#automatic-repository-management&#34;&gt;Automatic repository management&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#configuration-reproducibility&#34;&gt;Configuration reproducibility&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#conceptual-overview&#34;&gt;Conceptual overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#tldr&#34;&gt;TL;DR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-is-a-package&#34;&gt;What is a package?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-packages-come-from&#34;&gt;Where do packages come from?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-does-this-look-like-on-disk&#34;&gt;What does this look like on disk?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-repositories-come-from&#34;&gt;Where do repositories come from?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-does-it-mean-to-load-a-package&#34;&gt;What does it mean to load a package?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-recipes-come-from&#34;&gt;Where do recipes come from?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-happens-when-i-call-straight-use-package&#34;&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-does-it-mean-to-register-a-package&#34;&gt;What does it mean to register a package?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-does-straightel-know-when-to-rebuild-packages&#34;&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-does-straightel-know-what-packages-are-installed&#34;&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-other-package-managers&#34;&gt;Comparison to other package managers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#tldr-1&#34;&gt;TL;DR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-packageel&#34;&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-packageel&#34;&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#additional-notes&#34;&gt;Additional notes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-quelpa&#34;&gt;Comparison to Quelpa&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-1&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-quelpa&#34;&gt;Advantages of Quelpa&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#additional-notes-1&#34;&gt;Additional notes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-cask&#34;&gt;Comparison to Cask&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-2&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-cask&#34;&gt;Advantages of Cask&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-el-get&#34;&gt;Comparison to el-get&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-3&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-el-get&#34;&gt;Advantages of el-get&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-borg&#34;&gt;Comparison to Borg&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-4&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-borg&#34;&gt;Advantages of Borg&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-the-manual-approach&#34;&gt;Comparison to the manual approach&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-5&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-the-manual-approach&#34;&gt;Advantages of the manual approach&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#user-manual&#34;&gt;User manual&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#bootstrapping-straightel&#34;&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&#34;&gt;Installing packages programmatically&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-with-a-custom-recipe&#34;&gt;Installing with a custom recipe&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#additional-arguments-to-straight-use-package&#34;&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#variants-of-straight-use-package&#34;&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-when-packages-are-built&#34;&gt;Customizing when packages are built&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#custom-or-manual-modification-detection&#34;&gt;Custom or manual modification detection&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#summary-of-options-for-package-modification-detection&#34;&gt;Summary of options for package modification detection&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#find-at-startup&#34;&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#check-on-save&#34;&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#watch-files&#34;&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-how-packages-are-built&#34;&gt;Customizing how packages are built&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#autoload-generation&#34;&gt;Autoload generation&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#byte-compilation&#34;&gt;Byte compilation&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#native-compilation&#34;&gt;Native compilation&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#symbolic-links&#34;&gt;Symbolic links&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-how-packages-are-made-available&#34;&gt;Customizing how packages are made available&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#hooks-run-by-straight-use-package&#34;&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;The recipe format&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;Version-control backends&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&#34;&gt;Git backend&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#deprecated-upstream-keyword&#34;&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&#34;&gt;Recipe lookup&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#updating-recipe-repositories&#34;&gt;Updating recipe repositories&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-recipe-repositories&#34;&gt;Customizing recipe repositories&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#gnu-elpa&#34;&gt;GNU ELPA&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#emacsmirror&#34;&gt;Emacsmirror&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#defining-new-recipe-repositories&#34;&gt;Defining new recipe repositories&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-recipes&#34;&gt;Overriding recipes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-the-recipe-for-straightel&#34;&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&#34;&gt;Interactive usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;Version control operations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&#34;&gt;Lockfile management&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-profile-system&#34;&gt;The profile system&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#packages-and-the-init-file&#34;&gt;Packages and the init-file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#using-straightel-to-reproduce-bugs&#34;&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#-in-other-packages&#34;&gt;... in other packages&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#-in-straightel-itself&#34;&gt;... in &lt;code&gt;straight.el&lt;/code&gt; itself&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#using-straightel-to-develop-packages&#34;&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-other-packages&#34;&gt;Integration with other packages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package-1&#34;&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-packageel&#34;&gt;&#34;Integration&#34; with &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-flycheck&#34;&gt;Integration with Flycheck&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-hydra&#34;&gt;Integration with Hydra&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;Developer manual&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#low-level-functions&#34;&gt;Low-level functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#trivia&#34;&gt;Trivia&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comments-and-docstrings&#34;&gt;Comments and docstrings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#my-init-time-got-slower&#34;&gt;My init time got slower&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#could-not-find-package-in-recipe-repositories&#34;&gt;&#34;Could not find package in recipe repositories&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-do-i-update-melpa-et-al&#34;&gt;How do I update MELPA et al.?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#my-use-package-form-isnt-working-properly&#34;&gt;My &lt;code&gt;use-package&lt;/code&gt; form isn&#39;t working properly&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-do-i-uninstall-a-package&#34;&gt;How do I uninstall a package?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-wrong-version-of-my-package-was-loaded&#34;&gt;The wrong version of my package was loaded&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#i-get-could-not-read-usernamepassword-errors&#34;&gt;I get &#34;could not read username/password&#34; errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-do-i-pin-package-versions-or-use-only-tagged-releases&#34;&gt;How do I pin package versions or use only tagged releases?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-can-i-use-the-built-in-version-of-a-package&#34;&gt;How can I use the built-in version of a package?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#news&#34;&gt;News&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#jan-1-2021&#34;&gt;Jan 1, 2021&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#april-19-2020&#34;&gt;April 19, 2020&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;!-- longlines-stop --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Emacs packages listed on &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt;, or &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt;, or provide your own recipes.&lt;/li&gt; &#xA; &lt;li&gt;Packages are cloned as Git (or other) repositories, not as opaque tarballs.&lt;/li&gt; &#xA; &lt;li&gt;Make changes to a package simply by editing its source code, no additional steps required. Contribute upstream just by pushing your changes.&lt;/li&gt; &#xA; &lt;li&gt;Powerful interactive workflows (with popups Ã  la Magit) for performing bulk maintenance on the Git repositories for your packages.&lt;/li&gt; &#xA; &lt;li&gt;Save and load version lockfiles that ensure 100% reproducibility for your Emacs configuration. Package state is defined entirely by your init-file and (optional) lockfile, with no extra persistent data floating around.&lt;/li&gt; &#xA; &lt;li&gt;Specify package descriptions using a powerful format based on &lt;a href=&#34;https://github.com/melpa/melpa#recipe-format&#34;&gt;MELPA recipes&lt;/a&gt; (with a familiar but improved syntax).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; integration.&lt;/li&gt; &#xA; &lt;li&gt;Modular: you can install your packages manually and straight.el will load them for you. Or you can also have straight.el install your packages, while you provide the recipes explicitly. Or straight.el can also fetch recipes, if you want. Bulk repository management and package updates are also optional.&lt;/li&gt; &#xA; &lt;li&gt;Extensible APIs to add new recipe sources and version-control backends.&lt;/li&gt; &#xA; &lt;li&gt;The cleanest source code you&#39;ve ever seen. &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comments-and-docstrings&#34;&gt;45%&lt;/a&gt; of &lt;code&gt;straight.el&lt;/code&gt; is comments and docstrings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;straight.el&lt;/code&gt; is a replacement for &lt;code&gt;package.el&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;use-package&lt;/code&gt;. &lt;code&gt;use-package&lt;/code&gt; can be used with either &lt;code&gt;package.el&lt;/code&gt; or &lt;code&gt;straight.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Guiding principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Init-file and version lockfiles as the sole source of truth. No persistent state kept elsewhere.&lt;/li&gt; &#xA; &lt;li&gt;100% reproducible package management, accounting for changes in packages, recipe repositories, configuration, and the package manager itself.&lt;/li&gt; &#xA; &lt;li&gt;No support whatsoever for &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Edit packages by editing their code, no extra steps required. Allow for manual version control operations.&lt;/li&gt; &#xA; &lt;li&gt;Compatibility with MELPA, GNU ELPA, and Emacsmirror.&lt;/li&gt; &#xA; &lt;li&gt;Trivial to quickly try out a package without permanently installing it.&lt;/li&gt; &#xA; &lt;li&gt;Good for reproducing an issue with &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note: &lt;code&gt;straight.el&lt;/code&gt; supports a minimum version of Emacs 25.1, and works on macOS, Windows, and most flavors of Linux. You must install &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; in order to use &lt;code&gt;straight.el&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;First, place the following bootstrap code in your init-file:&lt;/p&gt; &#xA;&lt;!-- longlines-start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defvar bootstrap-version)&#xA;(let ((bootstrap-file&#xA;       (expand-file-name &#34;straight/repos/straight.el/bootstrap.el&#34; user-emacs-directory))&#xA;      (bootstrap-version 5))&#xA;  (unless (file-exists-p bootstrap-file)&#xA;    (with-current-buffer&#xA;        (url-retrieve-synchronously&#xA;         &#34;https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el&#34;&#xA;         &#39;silent &#39;inhibit-cookies)&#xA;      (goto-char (point-max))&#xA;      (eval-print-last-sexp)))&#xA;  (load bootstrap-file nil &#39;nomessage))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- longlines-stop --&gt; &#xA;&lt;p&gt;Here are some variables you may be interested in (some of them must be set &lt;strong&gt;before&lt;/strong&gt; the bootstrap code runs, if they might affect how &lt;code&gt;straight.el&lt;/code&gt; itself is loaded):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-the-recipe-for-straightel&#34;&gt;&lt;code&gt;straight-repository-branch&lt;/code&gt;&lt;/a&gt; -- to get the latest version of &lt;code&gt;straight.el&lt;/code&gt; from the &lt;code&gt;develop&lt;/code&gt; branch, rather than the default &lt;code&gt;master&lt;/code&gt; which is updated less frequently but which is ostensibly more stable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-when-packages-are-built&#34;&gt;&lt;code&gt;straight-check-for-modifications&lt;/code&gt;&lt;/a&gt; -- to configure an alternate way for &lt;code&gt;straight.el&lt;/code&gt; to check for modifications made to package source code, rather than the default (which is 100% reliable, but has a minor cost to startup time).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package-1&#34;&gt;&lt;code&gt;straight-use-package-by-default&lt;/code&gt;&lt;/a&gt; -- if you use &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, then this makes each &lt;code&gt;use-package&lt;/code&gt; form also invoke &lt;code&gt;straight.el&lt;/code&gt; to install the package, unless otherwise specified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&#34;&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;&lt;/a&gt; -- by default, &lt;code&gt;straight.el&lt;/code&gt; clones over HTTPS. If you need packages from private Git repositories in your configuration, then you might want to use SSH instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-base-dir&lt;/code&gt; -- by default, straight&#39;s main directory, containing it&#39;s build files and package repos, is located in &lt;code&gt;user-emacs-directory&lt;/code&gt;. You can change the location of straight&#39;s base directory via this variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-build-dir&lt;/code&gt; -- by default, the directory in which packages are built is located at &lt;code&gt;straight-base-dir&lt;/code&gt;/build. Changing this variable will change the name of that directory and the name of the build cache file (unless &lt;code&gt;straight-build-cache-fixed-name&lt;/code&gt; is non-nil).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You should remove any code that relates to &lt;code&gt;package.el&lt;/code&gt;; for example, references to &lt;code&gt;package-initialize&lt;/code&gt;, &lt;code&gt;package-archives&lt;/code&gt;, and (if you&#39;re using &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;) &lt;code&gt;:ensure&lt;/code&gt; or &lt;code&gt;use-package-always-ensure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users of Emacs versions &amp;gt;= 27 will want to add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq package-enable-at-startup nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to their &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html&#34;&gt;early init-file&lt;/a&gt; to prevent package.el loading packages prior to their init-file loading.&lt;/p&gt; &#xA;&lt;p&gt;While it is technically possible to use both &lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; at the same time, there is no real reason to, and it might result in oddities like packages getting loaded more than once.&lt;/p&gt; &#xA;&lt;h4&gt;Debugging&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sometimes, in a corporate environment, &lt;code&gt;url-retrieve-synchronously&lt;/code&gt; may not work and &lt;code&gt;straight.el&lt;/code&gt; will be unable to download the installation script mentioned in the bootstrap snippet. In this case, you may simply clone this repository into &lt;code&gt;~/.emacs.d/straight/repos/straight.el&lt;/code&gt; and check out your desired revision/branch. The installation script is just a more convenient way of doing that automatically when necessary (and looking up the correct revision of &lt;code&gt;straight.el&lt;/code&gt; in your lockfile, if any).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On macOS, you may receive an error:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Could not create connection to raw.githubusercontent.com:443&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is likely because you are using an ancient version of Emacs which has a broken TLS configuration. Upgrade with &lt;code&gt;brew upgrade emacs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install packages&lt;/h3&gt; &#xA;&lt;p&gt;Out of the box, you can install any package listed on &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt;, or &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt;, which is to say any package in existence. (Although MELPA is used as a package listing, packages are installed by cloning their Git repositories rather than by downloading tarballs like &lt;code&gt;package.el&lt;/code&gt; does.) To install a package temporarily (until you restart Emacs), run &lt;code&gt;M-x straight-use-package&lt;/code&gt; and select the package you want. To install a package permanently, place a call to &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;el-patch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that installing a package will activate all of its autoloads, but it will not actually &lt;code&gt;require&lt;/code&gt; the features provided by the package. This means that you might need to use &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;autoload&lt;/code&gt; for some antiquated packages that do not properly declare their autoloads.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&#34;&gt;the package lifecycle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;But what about my fork of (obscure .el package)?&lt;/h3&gt; &#xA;&lt;p&gt;Instead of passing just a package name to &lt;code&gt;straight-use-package&lt;/code&gt;, you can pass a list (&#34;recipe&#34;). You can see the default recipe for any given package by running &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;. For example, the recipe for &lt;code&gt;el-patch&lt;/code&gt; is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, if you have forked &lt;code&gt;el-patch&lt;/code&gt; and you want to use your fork instead of the upstream, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :type git :host github :repo &#34;your-name/el-patch&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In fact, &lt;code&gt;straight.el&lt;/code&gt; has explicit support for using a forked package, since this is so common:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;&#xA;            :fork (:host github&#xA;                   :repo &#34;your-name/el-patch&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above, &lt;code&gt;:type git&lt;/code&gt; may be omitted if you leave &lt;code&gt;straight-default-vc&lt;/code&gt; at its default value of &lt;code&gt;git&lt;/code&gt;. Parts of the &lt;code&gt;:fork&lt;/code&gt; keyword may be omitted as well. One common case is when your fork is on the same host and has the same name as the upstream repository. In this case, assuming &lt;code&gt;straight-host-usernames&lt;/code&gt; is set, specifying a fork is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;&#xA;            :fork t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;straight.el&lt;/code&gt; doesn&#39;t do any Git operations during startup unless it needs to clone a package from scratch. This is for performance. You can explicitly request for &lt;code&gt;straight.el&lt;/code&gt; to fix up the Git configuration after you change a package recipe, e.g. to add a fork. See &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#automatic-repository-management&#34;&gt;Automatic repository management&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;the recipe format&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&#34;&gt;the Git backend&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; is a macro that provides convenient syntactic sugar for many common tasks related to installing and configuring Emacs packages. Of course, it does not actually install the packages, but instead defers to a package manager, like &lt;code&gt;straight.el&lt;/code&gt; (which comes with &lt;code&gt;use-package&lt;/code&gt; integration by default).&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;code&gt;use-package&lt;/code&gt;, first install it with &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;use-package)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now &lt;code&gt;use-package&lt;/code&gt; will use &lt;code&gt;straight.el&lt;/code&gt; to automatically install missing packages if you provide &lt;code&gt;:straight t&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can still provide a custom recipe for the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight (el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;&#xA;                      :fork (:host github&#xA;                             :repo &#34;your-name/el-patch&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:straight&lt;/code&gt; keyword accepts backquoted forms. This makes it possible to dynamically compute part of the recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight `(el-patch :type git&#xA;                       :repo ,(alist-get &#39;el-patch my-package-urls)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specifying &lt;code&gt;:straight t&lt;/code&gt; is unnecessary if you set &lt;code&gt;straight-use-package-by-default&lt;/code&gt; to a non-nil value. (Note that the variable &lt;code&gt;use-package-always-ensure&lt;/code&gt; is associated with &lt;code&gt;package.el&lt;/code&gt;, and you should not use it with &lt;code&gt;straight.el&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package-1&#34;&gt;&lt;code&gt;straight.el&lt;/code&gt;&#39;s &lt;code&gt;use-package&lt;/code&gt; integration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Edit packages locally&lt;/h3&gt; &#xA;&lt;p&gt;One of the biggest strengths of &lt;code&gt;straight.el&lt;/code&gt; is that editing packages locally is trivial. You literally just edit the files (&lt;code&gt;find-function&lt;/code&gt; and friends all work as you would expect). Packages will be automatically rebuilt if necessary when Emacs next starts up.&lt;/p&gt; &#xA;&lt;p&gt;You can even commit your changes and push or pull to various remotes using Git. You have complete control over your packages&#39; Git repositories.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&#34;&gt;the package lifecycle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic repository management&lt;/h3&gt; &#xA;&lt;p&gt;While being able to make arbitrary changes to your packages is very powerful, it can also get tiring to keep track of the all those changes. For this reason, &lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful interactive workflows to perform bulk operations on your packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To restore each package to its canonical state (a clean working directory with the main branch checked out, and the remotes set correctly), run &lt;code&gt;M-x straight-normalize-package&lt;/code&gt; or &lt;code&gt;M-x straight-normalize-all&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To fetch from each package&#39;s configured remote, run &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-fetch-all&lt;/code&gt;; to also fetch from the upstream for forked packages, supply a prefix argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To merge changes from each package&#39;s configured remote, run &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;; to also merge from the upstream for forked packages, supply a prefix argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To push all local changes to each package&#39;s configured remote, run &lt;code&gt;M-x straight-push-package&lt;/code&gt; or &lt;code&gt;M-x straight-push-all&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these commands are highly interactive and ask you before making any changes. At any point, you can stop and perform manual operations with Magit or other tools in a recursive edit.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;bulk repository management&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration reproducibility&lt;/h3&gt; &#xA;&lt;p&gt;To save the currently checked out revisions of all of your packages, run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. The resulting file (&lt;code&gt;~/.emacs.d/straight/versions/default.el&lt;/code&gt;), together with your init-file, perfectly define your package configuration. Keep your version lockfile checked into version control; when you install your Emacs configuration on another machine, the versions of packages specified in your lockfile will automatically be checked out after the packages are installed. You can manually revert all packages to the revisions specified in the lockfile by running &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&#34;&gt;version lockfiles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Conceptual overview&lt;/h2&gt; &#xA;&lt;p&gt;This section describes, at a high level, how the different mechanisms in &lt;code&gt;straight.el&lt;/code&gt; play together. This illustrates how &lt;code&gt;straight.el&lt;/code&gt; manages to accomplish all of its &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#guiding-principles&#34;&gt;guiding principles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; operates by cloning Git repositories and then symlinking files into Emacs&#39; load path. The collection of symlinked files constitutes the package, which is defined by its recipe. The recipe also describes which local repository to link the files from, and how to clone that repository, if it is absent.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, the recipe you provide is registered with &lt;code&gt;straight.el&lt;/code&gt; for future reference. Then the package&#39;s repository is cloned if it is absent, the package is rebuilt if its files have changed since the last build (as determined by &lt;code&gt;find(1)&lt;/code&gt;), and its autoloads are evaluated.&lt;/p&gt; &#xA;&lt;p&gt;You can also provide only a package name, in which case the recipe will be looked up in one of several configurable recipe repositories, which are just packages themselves (albeit with the build step disabled).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines which packages are installed solely by how and when &lt;code&gt;straight-use-package&lt;/code&gt; is invoked in your init-file.&lt;/p&gt; &#xA;&lt;h3&gt;What is a package?&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;em&gt;package&lt;/em&gt; is a collection of Emacs Lisp (and possibly other) files. The most common case is just a single &lt;code&gt;.el&lt;/code&gt; file, but some packages have many &lt;code&gt;.el&lt;/code&gt; files, and some even have a directory structure.&lt;/p&gt; &#xA;&lt;p&gt;Note that a package is defined only as a collection of files. It doesn&#39;t necessarily correspond to a Git repository, or an entry on MELPA, or anything like that. Frequently there is a relationship between all of these concepts, but that relationship does not always have to be direct or one-to-one.&lt;/p&gt; &#xA;&lt;p&gt;A package also has a name, which must be unique. This is the name that is used for the folder holding the package&#39;s files. It is frequently the same as the name of a Git repository, or an entry on MELPA, but again this does not have to be the case.&lt;/p&gt; &#xA;&lt;h3&gt;Where do packages come from?&lt;/h3&gt; &#xA;&lt;p&gt;If you really wanted all of your packages to be unambiguously defined, you could just copy and paste all of their files into version control. But that would defeat the purpose of using a package manager like &lt;code&gt;straight.el&lt;/code&gt;. In &lt;code&gt;straight.el&lt;/code&gt;, packages are defined by two sources of information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;em&gt;local repository&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;a &lt;em&gt;build recipe&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The local repository is just a directory containing some files. Of course, it also has a name, which may or may not be the same as the package&#39;s name. Frequently, the local repository is also a Git repository, but this is not necessary.&lt;/p&gt; &#xA;&lt;p&gt;The build recipe is not a literal data structure. It is a concept that represents a certain subset of the package&#39;s recipe. Specifically, the &lt;code&gt;:files&lt;/code&gt;, &lt;code&gt;:local-repo&lt;/code&gt;, and &lt;code&gt;:build&lt;/code&gt; keywords.&lt;/p&gt; &#xA;&lt;p&gt;To transform this &lt;em&gt;information&lt;/em&gt; into an actual package that Emacs can load, &lt;code&gt;straight.el&lt;/code&gt; &lt;em&gt;builds&lt;/em&gt; the package. This means that some symbolic links are created in the package&#39;s directory that point back into the local repository&#39;s directory. Exactly how these symlinks are created is determined by the &lt;code&gt;:files&lt;/code&gt; directive, and which local repository the symlinks point to is determined by the &lt;code&gt;:local-repo&lt;/code&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;After the symlinks are created, the resulting files are byte-compiled, and their autoloads are generated and written into a file in the package&#39;s directory.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;:build nil&lt;/code&gt; is specified, however, this entire process is skipped. This mechanism is used for recipe repositories.&lt;/p&gt; &#xA;&lt;h3&gt;What does this look like on disk?&lt;/h3&gt; &#xA;&lt;p&gt;The local repositories are kept in &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, and the built packages are kept in &lt;code&gt;~/.emacs.d/straight/build&lt;/code&gt;. If you have initialized &lt;code&gt;straight.el&lt;/code&gt; and loaded package &lt;code&gt;el-patch&lt;/code&gt;, then your &lt;code&gt;~/.emacs.d/straight&lt;/code&gt; directory will look roughly like this (some irrelevant details have been omitted for pedagogical purposes):&lt;/p&gt; &#xA;&lt;!-- longlines-start --&gt; &#xA;&lt;pre&gt;&lt;code&gt;straight&#xA;âââ build&#xA;â   âââ el-patch&#xA;â   â   âââ el-patch-autoloads.el&#xA;â   â   âââ el-patch.el -&amp;gt; ~/.emacs.d/straight/repos/el-patch/el-patch.el&#xA;â   â   âââ el-patch.elc&#xA;â   âââ straight&#xA;â       âââ straight-autoloads.el&#xA;â       âââ straight.el -&amp;gt; ~/.emacs.d/straight/repos/straight.el/straight.el&#xA;â       âââ straight.elc&#xA;âââ repos&#xA;    âââ el-patch&#xA;    â   âââ CHANGELOG.md&#xA;    â   âââ LICENSE.md&#xA;    â   âââ README.md&#xA;    â   âââ el-patch.el&#xA;    âââ straight.el&#xA;        âââ LICENSE.md&#xA;        âââ Makefile&#xA;        âââ README.md&#xA;        âââ bootstrap.el&#xA;        âââ install.el&#xA;        âââ straight.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- longlines-stop --&gt; &#xA;&lt;p&gt;As you can see, the package names are &lt;code&gt;el-patch&lt;/code&gt; and &lt;code&gt;straight&lt;/code&gt;. While &lt;code&gt;el-patch&lt;/code&gt; is built from a local repository of the same name, &lt;code&gt;straight&lt;/code&gt; is built from a local repository by the name &lt;code&gt;straight.el&lt;/code&gt;. Also note that only &lt;code&gt;.el&lt;/code&gt; files are symlinked, since only they are relevant to Emacs.&lt;/p&gt; &#xA;&lt;h3&gt;Where do repositories come from?&lt;/h3&gt; &#xA;&lt;p&gt;Local repositories provide a way to define packages without specifying the contents of all of their files explicitly. But that&#39;s not helpful without a higher-level way to define local repositories without specifying the contents of all of &lt;em&gt;their&lt;/em&gt; files. In &lt;code&gt;straight.el&lt;/code&gt;, local repositories are defined by two sources of information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;em&gt;fetch recipe&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;the &lt;em&gt;version lockfiles&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The fetch recipe is, like the build recipe, a concept representing a certain subset of the package&#39;s overall recipe. The situation is more interesting here because &lt;code&gt;straight.el&lt;/code&gt; supports multiple version-control backends. The version-control backend specified by the fetch recipe is determined by the &lt;code&gt;:type&lt;/code&gt; directive (which defaults to &lt;code&gt;straight-default-vc&lt;/code&gt;). Each version-control backend then accepts some set of additional directives. For example, the &lt;code&gt;git&lt;/code&gt; backend accepts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:repo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:branch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:fork&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:protocol&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a local repository is not present, then its fetch recipe describes how to obtain it. This is done using the &lt;code&gt;straight-vc-clone&lt;/code&gt; function, which delegates to one of the backend implementations of the &lt;code&gt;clone&lt;/code&gt; operation, according to &lt;code&gt;:type&lt;/code&gt;. (The option &lt;code&gt;:type built-in&lt;/code&gt; is a special case that results in all version-control operations for the package being ignored.)&lt;/p&gt; &#xA;&lt;p&gt;However, even with a particular repository source specified, there is still the question of which version of the repository to use. This is where the version lockfiles come in. When a local repository is cloned, the version lockfiles are searched to see if there is a particular commit specified for that local repository&#39;s name. If so, that commit is checked out. (For the &lt;code&gt;git&lt;/code&gt; backend, commits are 40-character strings representing SHA-1 hashes, but the representation of a commit identifier could be different across different backends.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;straight-freeze-versions&lt;/code&gt; and &lt;code&gt;straight-thaw-versions&lt;/code&gt; methods also use backend-delegating methods; in this case, they are &lt;code&gt;straight-vc-get-commit&lt;/code&gt; and &lt;code&gt;straight-vc-check-out-commit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The fetch recipe and version lockfiles, together with the configuration options for &lt;code&gt;straight.el&lt;/code&gt;, precisely define the state of a local repository. Of course, you may make any changes you want to the local repository. But this information defines a &#34;canonical&#34; state that you may revert to at any time.&lt;/p&gt; &#xA;&lt;p&gt;When this information is combined with the build recipe, &lt;code&gt;straight.el&lt;/code&gt; is able to construct canonical, universal versions of your Emacs packages that will be the same everywhere and forever.&lt;/p&gt; &#xA;&lt;p&gt;Note that you do not have to provide fetch recipes or version lockfiles. You may manage your local repositories manually, if you wish, although this has obvious disadvantages in terms of repeatability and maintainability.&lt;/p&gt; &#xA;&lt;h3&gt;What does it mean to load a package?&lt;/h3&gt; &#xA;&lt;p&gt;A prerequisite to loading a package is making sure the package has been built. After that is done, loading the package means adding its directory to the load path and evaluating its autoloads file.&lt;/p&gt; &#xA;&lt;p&gt;Adding the directory to the load path means that you can use &lt;code&gt;require&lt;/code&gt; to load the package&#39;s files. Note that &lt;code&gt;straight.el&lt;/code&gt; does not do this for you, since loading packages immediately is usually not necessary and it immensely slows down Emacs startup.&lt;/p&gt; &#xA;&lt;p&gt;Evaluating the autoloads file means that calling the functions that are defined in the autoloads file will automatically &lt;code&gt;require&lt;/code&gt; the files that define those functions. All modern packages define their functions in autoloads and are designed to be loaded on-demand when those functions are called. Antiquated packages may need you to explicitly define autoloads, or to just &lt;code&gt;require&lt;/code&gt; the package right away.&lt;/p&gt; &#xA;&lt;h3&gt;Where do recipes come from?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; does not require an actual recipe. You can just give it a package name, and it will look up the recipe. This is done using &lt;em&gt;recipe repositories&lt;/em&gt;. Recipe repositories are set up as a swappable backend system, much like the version-control backend system.&lt;/p&gt; &#xA;&lt;p&gt;A recipe repository consists of four parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a fetch recipe for the local repository (this will typically include &lt;code&gt;:build nil&lt;/code&gt;, since recipe repositories usually do not need to be built)&lt;/li&gt; &#xA; &lt;li&gt;a function that, provided the local repository is already available, returns a list of all packages that have recipes in the recipe repository&lt;/li&gt; &#xA; &lt;li&gt;a function that, given a package name, returns the recipe for that package, or nil if the recipe repository does not provide a recipe for the package&lt;/li&gt; &#xA; &lt;li&gt;an entry in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; indicating that the recipe provided actually corresponds to a recipe repository (otherwise it would just be a regular package)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that recipe repositories are implemented as regular packages! This means that all the usual package management operations work on them as well. It also means that you use &lt;code&gt;straight-use-package&lt;/code&gt; to register them (although typically you will provide arguments to &lt;code&gt;straight-use-package&lt;/code&gt; so that the recipe repository is only registered, and not cloned until it is needed; see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-happens-when-i-call-straight-use-package&#34;&gt;the section on &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then each recipe repository in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; is checked for a recipe for that package. Once one is found, it is used. Otherwise, an error is signaled (unless the package is built-in to Emacs, according to &lt;code&gt;package.el&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;straight.el&lt;/code&gt; uses its own recipe format which is similar, but not identical, to the one used by MELPA (see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;the section on the recipe format&lt;/a&gt; for information on the differences). The recipe repository backends abstract over the formatting differences in different recipe sources to translate recipes into the uniform format used by &lt;code&gt;straight.el&lt;/code&gt;. When you run &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, the translated recipe is what is returned.&lt;/p&gt; &#xA;&lt;h3&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;There are three actions that &lt;code&gt;straight-use-package&lt;/code&gt; can take:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register a package&#39;s recipe with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone a package&#39;s local repository, if it is missing.&lt;/li&gt; &#xA; &lt;li&gt;Build a package, if it has been changed since the last time it was built, and load it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These actions must be performed in order. Depending on the arguments you pass to &lt;code&gt;straight-use-package&lt;/code&gt;, one, two, or all three may be performed.&lt;/p&gt; &#xA;&lt;p&gt;The normal case is to do all three. The fetch recipe is only required if the local repository is actually missing, but the build recipe is always required.&lt;/p&gt; &#xA;&lt;p&gt;Deferred installation can be accomplished by telling &lt;code&gt;straight-use-package&lt;/code&gt; to stop if the local repository is not already available. The deferred installation can be triggered by invoking &lt;code&gt;straight-use-package&lt;/code&gt; again, but telling it to go ahead and clone the repository (this is the default behavior). Because &lt;code&gt;straight-use-package&lt;/code&gt; already registered the package&#39;s recipe the first time, you don&#39;t have to provide it again.&lt;/p&gt; &#xA;&lt;p&gt;In some extraordinary circumstances (such as when &lt;code&gt;straight.el&lt;/code&gt; is bootstrapping its own installation), it may be desirable to clone a package&#39;s local repository if it is missing, but to stop before building and loading the package. This can also be done by &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What does it mean to register a package?&lt;/h3&gt; &#xA;&lt;p&gt;Package registration is the first action taken by &lt;code&gt;straight-use-package&lt;/code&gt;, before building and cloning. First, if only a package name was provided to &lt;code&gt;straight-use-package&lt;/code&gt;, a recipe is obtained from the configured recipe repositories. Next, the resulting recipe is recorded in various caches.&lt;/p&gt; &#xA;&lt;p&gt;This is important, since it allows for several things to happen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if you later want to perform another operation on the package using &lt;code&gt;straight.el&lt;/code&gt;, you do not need to provide the recipe again&lt;/li&gt; &#xA; &lt;li&gt;if you use a custom recipe for Package A, and Package B requires Package A as a dependency, your custom recipe is remembered and re-used when Package A is used as a dependency, to avoid conflicts.&lt;/li&gt; &#xA; &lt;li&gt;when multiple packages are built from the same local repository, and you have specified a custom fetch recipe for one of those packages, &lt;code&gt;straight.el&lt;/code&gt; can intelligently merge that fetch recipe into the automatically retrieved recipes of dependencies, in order to avoid conflicts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; knows which packages you have installed, if you want to perform interactive operations on them.&lt;/li&gt; &#xA; &lt;li&gt;if you accidentally provide two different recipes for the same package, &lt;code&gt;straight.el&lt;/code&gt; can issue a helpful warning, since this may lead to surprising behavior.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/h3&gt; &#xA;&lt;p&gt;When you request for &lt;code&gt;straight.el&lt;/code&gt; to load a package (using &lt;code&gt;straight-use-package&lt;/code&gt;), it first checks if the package needs to be rebuilt. This means that some of the files in its local repository have been modified since the last time the package was built. &lt;code&gt;straight.el&lt;/code&gt; uses an optimized &lt;code&gt;find(1)&lt;/code&gt; command to check for package modifications, and it uses some caching mechanisms to perform bulk &lt;code&gt;find(1)&lt;/code&gt; operations on multiple packages, to speed up these checks (although it never performs optimizations that may result in erroneous behavior).&lt;/p&gt; &#xA;&lt;p&gt;This check occurs during Emacs init, when your init-file makes calls to &lt;code&gt;straight-use-package&lt;/code&gt;. You may notice a significant delay on the first &lt;code&gt;straight-use-package&lt;/code&gt; call, because this is when &lt;code&gt;straight.el&lt;/code&gt; performs a bulk &lt;code&gt;find(1)&lt;/code&gt; call and caches the results for later usage (this speeds up init considerably). The total delay is likely to be on the order of 100ms for a double-digit number of packages.&lt;/p&gt; &#xA;&lt;p&gt;The rebuild detection system is what allows for you to make changes to packages whenever you would like, without performing any additional operations.&lt;/p&gt; &#xA;&lt;p&gt;(Packages are also rebuilt when their recipes change, of course.)&lt;/p&gt; &#xA;&lt;h3&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; does not require you to declare a central list of packages anywhere, like Cask does. Instead, it determines what packages are to be loaded implicitly, by your invocations of &lt;code&gt;straight-use-package&lt;/code&gt; during Emacs initialization. Furthermore, &lt;code&gt;straight.el&lt;/code&gt; allows you to install packages after initialization using &lt;code&gt;M-x straight-use-package&lt;/code&gt; (or even by evaluating &lt;code&gt;straight-use-package&lt;/code&gt; forms). However, &lt;code&gt;straight.el&lt;/code&gt; still provides advanced features such as bulk package management and version locking. This creates some interesting challenges which other package managers do not have to deal with.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; solves these problems using a concept called &lt;em&gt;transactions&lt;/em&gt;. The operation of the transaction system is mostly transparent to the user, at least in recent versions of &lt;code&gt;straight.el&lt;/code&gt;. Basically, it provides a way for &lt;code&gt;straight.el&lt;/code&gt; to keep track of what happens within a single user operation (e.g. evaluate a buffer of &lt;code&gt;straight-use-package&lt;/code&gt; calls, or load the init-file).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; uses the transaction system to keep track of what packages you request in your init-file. If you invoke &lt;code&gt;straight-use-package&lt;/code&gt; interactively, then this invalidates that information, since you have now requested a package that is not in your init-file. For this reason, if you have invoked &lt;code&gt;straight-use-package&lt;/code&gt; interactively, running &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt; will prompt you to first reload your init-file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: reloading your init-file must have the effect of running all of the same &lt;code&gt;straight.el&lt;/code&gt;-related functions again. For example, if you bootstrap &lt;code&gt;straight.el&lt;/code&gt; in a sub-file that you only &lt;code&gt;require&lt;/code&gt; instead of &lt;code&gt;load&lt;/code&gt;, then the reloading functionality will not work correctly and you may receive the message &lt;code&gt;Caches are still outdated; something is seriously wrong&lt;/code&gt;. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/437&#34;&gt;#437&lt;/a&gt; for discussion.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comparison to other package managers&lt;/h2&gt; &#xA;&lt;p&gt;(Disclaimer: while I try to be as objective and comprehensive as possible here, I&#39;m obviously biased. Please submit corrections if I have unfairly disparaged your favorite package manager!)&lt;/p&gt; &#xA;&lt;p&gt;There are many package managers for Emacs, ranging from simple scripts to download files from EmacsWiki to full-featured package management solutions like &lt;code&gt;straight.el&lt;/code&gt;. Here are the most feature-rich alternatives to &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html&#34;&gt;&lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;: de facto standard, bundled with Emacs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quelpa/quelpa&#34;&gt;Quelpa&lt;/a&gt;: allows you to use external sources like GitHub with &lt;code&gt;package.el&lt;/code&gt;. Essentially a local &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt;: another &lt;code&gt;package.el&lt;/code&gt; wrapper. Specify your dependencies in a &lt;code&gt;Cask&lt;/code&gt; file; can be used for project management or an Emacs configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;: ridiculously OP in terms of how many different sources you can pull packages from (&lt;code&gt;package.el&lt;/code&gt;, every known VCS, distro package managers, &lt;code&gt;go get&lt;/code&gt;(!!)).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacscollective/borg&#34;&gt;Borg&lt;/a&gt;: assimilates packages as Git submodules into &lt;code&gt;.emacs.d&lt;/code&gt;, relying on &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Screw package managers! I&#39;ll just handle it all myself!&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;p&gt;Here is a summary of the main differences in philosophy between the package managers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;package.el&lt;/code&gt; if you want package management to be as easy as possible, and do not much care for installing packages from specific sources, keeping track of their versions, or doing local development on them.&lt;/li&gt; &#xA; &lt;li&gt;Use Quelpa if you like &lt;code&gt;package.el&lt;/code&gt; but really wish you could specify the sources of your packages.&lt;/li&gt; &#xA; &lt;li&gt;Use Cask if you like &lt;code&gt;package.el&lt;/code&gt; but wish it came with some project management tools, as well.&lt;/li&gt; &#xA; &lt;li&gt;Use el-get if you want to easily install packages from as many different sources as possible.&lt;/li&gt; &#xA; &lt;li&gt;Use Borg if you like a more lightweight approach to package management that leverages existing solutions, if contributing changes to packages upstream is important to you, and if using Git submodules isn&#39;t a deal-breaker.&lt;/li&gt; &#xA; &lt;li&gt;Use the manual approach if you need to contribute changes to a package that is versioned in something other than Git.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;straight.el&lt;/code&gt; if you like reproducibility in your Emacs configuration, you regularly contribute changes to packages upstream, or you are writing an Emacs configuration to be used by others.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And here is a brief list of the main reasons you might not want to use &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is largely unusable if you do not have Git installed, although it is still possible to use the package-building features if you manage your repositories manually (you also cannot use the magic bootstrap snippet, in that case). If you don&#39;t want to install Git, you&#39;ll have to use &lt;code&gt;package.el&lt;/code&gt; or take the manual approach.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is not built in to Emacs. If you want something that will work right out of the box, you&#39;re stuck with &lt;code&gt;package.el&lt;/code&gt; or the manual approach.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; takes a minute or two to update all your packages, since it does not rely on a centralized server. If you want quick update checking, you&#39;ll have to use &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide any user interface for package management. For that, you&#39;ll have to use &lt;code&gt;package.el&lt;/code&gt;, el-get, Cask, or Borg (which expects you to use &lt;a href=&#34;https://github.com/emacscollective/epkg&#34;&gt;&lt;code&gt;epkg&lt;/code&gt;&lt;/a&gt; for browsing packages).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not currently support using only stable versions of packages (i.e. tagged revisions), although this is a &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;planned feature&lt;/a&gt;. If this is important to you, you probably want to go with &lt;code&gt;package.el&lt;/code&gt; (with GNU ELPA and MELPA Stable), Cask, or Quelpa.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t like having to modify your init-file to do package management, then &lt;code&gt;straight.el&lt;/code&gt; is absolutely not for you. You want &lt;code&gt;package.el&lt;/code&gt;, Quelpa, el-get, or Borg.&lt;/li&gt; &#xA; &lt;li&gt;If you really want to contribute changes to packages that are not versioned in Git, then &lt;code&gt;straight.el&lt;/code&gt; will not help you. You&#39;ll have to manage the package&#39;s repository manually. Unfortunately, there is no existing package manager that supports both non-Git version-control systems and contributing changes upstream. You&#39;ll have to go with the manual approach.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide project management tools. It is a package manager. If you want project management tools, check out Cask.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is quite new and moving fast. Things might break. The other package managers can generally be ranked as follows, from most active to least active: el-get, Quelpa, Borg, Cask, &lt;code&gt;package.el&lt;/code&gt; (glacial).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; downloads pre-built packages from central servers using a special (undocumented?) HTTP protocol, while &lt;code&gt;straight.el&lt;/code&gt; clones Git (or other) repositories and builds packages locally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to install a package from any branch of any Git repository. &lt;code&gt;package.el&lt;/code&gt; only allows you to install a package from a &lt;code&gt;package.el&lt;/code&gt;-compliant central server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to check out any Git revision of any package. &lt;code&gt;package.el&lt;/code&gt; only allows you to install the latest version, and there is no way to downgrade.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports Emacsmirror, while &lt;code&gt;package.el&lt;/code&gt; does not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. &lt;code&gt;package.el&lt;/code&gt; loads every package you ever installed at startup, even if some of those packages are no longer referenced by your init-file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. &lt;code&gt;package.el&lt;/code&gt; cannot provide reproducibility for the set of packages installed, the central servers they were installed from, or the versions in use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally. While it is possible to make local changes to &lt;code&gt;package.el&lt;/code&gt; packages, these changes cannot be version-controlled and they will be silently overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operations on your package&#39;s Git repositories, including contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support for specifying both an upstream and a fork for a package. Contributing changes upstream with &lt;code&gt;package.el&lt;/code&gt; is impossible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. &lt;code&gt;package.el&lt;/code&gt; is unsuitable for minimal bug reproductions, since it automatically loads all of your packages on any package operation, even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. &lt;code&gt;package.el&lt;/code&gt; displays all messages, errors, and warnings that come from byte-compilation and autoload generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; considers modifying the user&#39;s init-file extremely uncouth. &lt;code&gt;package.el&lt;/code&gt; aggressively inserts (via Customize) auto-generated code setting &lt;code&gt;package-selected-packages&lt;/code&gt; into the init-file whenever a package is installed. Furthermore, &lt;code&gt;package.el&lt;/code&gt; has a history of impolite treatment of user configuration, which I think says some things about the design: until Emacs 27.1 (when &lt;a href=&#34;https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=24acb31c04b4048b85311d794e600ecd7ce60d3b&#34;&gt;my patch to fix this issue&lt;/a&gt; was adopted after around 300 emails&#39; worth of squabbling on emacs-devel), it also inserted a call to the &lt;code&gt;package-initialize&lt;/code&gt; function into the init-file if it was not already present, with the officially recommended workaround &#34;comment it out if you don&#39;t want it, but don&#39;t get rid of it&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. &lt;code&gt;package.el&lt;/code&gt; has no such concept.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is developed openly on GitHub, using a modern &lt;a href=&#34;https://github.com/raxod502/straight.el/issues&#34;&gt;issue tracker&lt;/a&gt; and continuous integration from &lt;a href=&#34;https://circleci.com/gh/raxod502/straight.el&#34;&gt;CircleCI &lt;/a&gt;. It welcomes contributions of any type. &lt;code&gt;straight.el&lt;/code&gt; is licensed under the permissive MIT license and does not require a copyright assignment. &lt;code&gt;straight.el&lt;/code&gt; is developed actively and has explicit support for installing development versions of itself, as well as for contributing upstream changes. &lt;code&gt;package.el&lt;/code&gt; is maintained as a part of Emacs core, meaning that the contribution process is poorly documented and discouraging. Releases of &lt;code&gt;package.el&lt;/code&gt; coincide with releases of Emacs, which are infrequent and inflexible. There is no issue tracker specifically for &lt;code&gt;package.el&lt;/code&gt;, only the Emacs bug tracker and the emacs-devel mailing list. Contributing to &lt;code&gt;package.el&lt;/code&gt; requires a poorly-documented, cumbersome copyright assignment process and is done by submitting patches to an antiquated mailing list, unsupported by modern code review tooling or continuous integration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require that you have Git installed, since the central server deals with where the packages originally came from. &lt;code&gt;straight.el&lt;/code&gt; cannot be used at all without Git.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; is built in to Emacs and does not require additional configuration to get started with. &lt;code&gt;straight.el&lt;/code&gt; requires the use of a 10-line bootstrap snippet in your init-file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; can perform bulk package updates more quickly since it relies on central servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; has a user interface for package management that also displays package metadata. &lt;code&gt;straight.el&lt;/code&gt; has no user interface for package management; any UI is provided by the user&#39;s &lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require you to touch your init-file to install packages, while &lt;code&gt;straight.el&lt;/code&gt; absolutely refuses to permanently install a package without an explicit reference to it in your init-file (although this may be considered an advantage, depending on your perspective).&lt;/li&gt; &#xA; &lt;li&gt;Using MELPA Stable, &lt;code&gt;package.el&lt;/code&gt; can install only stable versions of packages. By default, &lt;code&gt;package.el&lt;/code&gt; also installs only stable versions of packages from GNU ELPA. These modes of operation are unsupported by &lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;planned feature&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Additional notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; usually take approximately the same time to install packages, despite the fact that &lt;code&gt;straight.el&lt;/code&gt; is cloning entire Git repositories. This is because network latency and byte-compilation are the dominant factors.&lt;/li&gt; &#xA; &lt;li&gt;Some &lt;code&gt;package.el&lt;/code&gt; servers build packages from non-Git upstreams. &lt;code&gt;package.el&lt;/code&gt; can install these packages, while &lt;code&gt;straight.el&lt;/code&gt; cannot. However, since &lt;code&gt;package.el&lt;/code&gt; has no version-control support, this is more or less equivalent to installing those packages from the &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt;, which &lt;code&gt;straight.el&lt;/code&gt; can do by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to Quelpa&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quelpa allows for fetching packages from arbitrary sources and building them into a format that can be installed by &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; has a philosophy which is fundamentally incompatible with &lt;code&gt;package.el&lt;/code&gt;, and non-compatibility with &lt;code&gt;package.el&lt;/code&gt; is one of its design goals.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with MELPA, GNU ELPA, and Emacsmirror, while Quelpa only has support for MELPA. To use GNU ELPA, you must drop down to &lt;code&gt;package.el&lt;/code&gt;. &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt; is not supported by default, although it is easy to specify an Emacsmirror repository in a recipe. While Quelpa allows you to specify custom recipe folders, it does not have support for cloning these folders automatically from version control, nor for generating the recipes in any way other than copying them literally from files. &lt;code&gt;straight.el&lt;/code&gt; allows you full flexibility in this regard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git revisions of packages. This process is more manual in Quelpa, as it requires placing the commit hash into the recipe, which disables updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it also loads every package you ever installed at startup, even if those packages are no longer referenced by your init-file. Furthermore, there is an additional caching layer, so that deleting a package from the &lt;code&gt;package.el&lt;/code&gt; interface and removing it from your init-file still does not actually delete it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. Quelpa can theoretically provide some measure of reproducibility, but this requires significant manual effort since all packages are not associated with specific revisions by default, nor is the revision of MELPA saved anywhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally. While it is possible to make local changes to Quelpa packages, there are two places to do so: the built package, which is the default destination of &lt;code&gt;find-function&lt;/code&gt;, and the original repository. Changes to the former are not version-controlled and will be silently overwritten by &lt;code&gt;package.el&lt;/code&gt; operations, while changes to the latter will be silently overwritten by Quelpa operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream repository and a fork for the same package. Quelpa does not have such a concept.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you complete control over how your repositories are managed, and the default behavior is to draw all packages versioned in a single repository from a single copy of that repository. Quelpa is hardcoded to require a separate repository for each package, so that installing Magit requires three copies of the Magit repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; builds packages using symlinks, meaning that &lt;code&gt;find-function&lt;/code&gt; works as expected. Quelpa builds packages by copying, a feature inherited from MELPA. This means that &lt;code&gt;find-function&lt;/code&gt; brings you to the built package, instead of the actual repository, which is not version-controlled and will be overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operations on your package&#39;s Git repositories. Quelpa allows this, but all local changes will be silently overridden whenever Quelpa performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it is also unsuitable for minimal bug reproductions, since it automatically loads all of your packages on any package operation, even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and warnings that come from byte-compilation and autoload generation. It also displays additional messages while cloning Git repositories, downloading files, and building packages from their repositories into &lt;code&gt;package.el&lt;/code&gt; format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not modify your init-file. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits the behavior of aggressively inserting a call to &lt;code&gt;package-initialize&lt;/code&gt; into your init-file on any package management operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. Quelpa has no such concept.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of Quelpa&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quelpa supports all the version-control systems supported by MELPA, which is to say almost every commonly and uncommonly used VCS. &lt;code&gt;straight.el&lt;/code&gt; only supports Git, although it is designed to support other version-control backends.&lt;/li&gt; &#xA; &lt;li&gt;Quelpa allows for installing only stable versions of packages, from any source. This mode of operation is unsupported by &lt;code&gt;straight.el&lt;/code&gt;, although it is a &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;planned feature&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface for package management that also displays package metadata. &lt;code&gt;straight.el&lt;/code&gt; has no such interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Additional notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; and Quelpa both allow you to manage your package&#39;s local repositories manually, if you wish.&lt;/li&gt; &#xA; &lt;li&gt;In principle, &lt;code&gt;straight.el&lt;/code&gt; and Quelpa have identical package installation times, since they are performing the same operations. In practice, Quelpa is slightly slower since it builds packages by copying rather than symlinking, and it clones multiple copies of the same Git repository when multiple packages are built from it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; encourages you to keep a tight handle on your package versions by default. Quelpa encourages you to stick to the latest versions of your packages, and to upgrade them automatically.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to Cask&lt;/h3&gt; &#xA;&lt;p&gt;I have not used Cask extensively, so please feel especially free to offer corrections for this section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cask installs packages using the &lt;code&gt;package.el&lt;/code&gt; protocol, based on a &lt;code&gt;Cask&lt;/code&gt; file written in the Cask DSL. &lt;code&gt;straight.el&lt;/code&gt; eschews &lt;code&gt;package.el&lt;/code&gt; entirely, and clones packages from source based on how you invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file.&lt;/li&gt; &#xA; &lt;li&gt;Cask focuses more on being a build manager, like Maven or Leiningen, while &lt;code&gt;straight.el&lt;/code&gt; focuses &lt;em&gt;exclusively&lt;/em&gt; on being a package manager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with Emacsmirror, while Cask only supports &lt;code&gt;package.el&lt;/code&gt;-compliant repositories. However, it is easy to specify an Emacsmirror repository in a recipe. Cask does not support custom package sources. &lt;code&gt;straight.el&lt;/code&gt; supports MELPA, GNU ELPA, and Emacsmirror, and allows you to add any other sources you would like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git revisions of packages. This process is more manual in Cask, as it requires placing the commit hash into the recipe, which disables updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it loads every package you ever installed at startup, even if some of those packages are no longer referenced by your &lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration implicitly by detecting how you call &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file and making the appropriate changes immediately. Cask requires manual intervention (for example, issuing a &lt;code&gt;cask install&lt;/code&gt; command when you have updated your &lt;code&gt;Cask&lt;/code&gt; file). However, both &lt;code&gt;straight.el&lt;/code&gt; and Cask can be considered declarative package managers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. Cask can theoretically provide some measure of reproducibility, but this requires significant manual effort since all packages are not associated with specific revisions by default, nor is the revision of Cask saved anywhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally. While it is possible to make local changes to Cask packages, these will not be version-controlled and they will be silently overwritten or shadowed when Cask performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operations on your package&#39;s Git repositories, including contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support for specifying both an upstream and a fork for a package. Contributing changes upstream with Cask is impossible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Cask appears to be unsuitable for minimal bug reproductions, since there does not appear to be a straightforward way to load a single package, without loading all other packages configured in your &lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and warnings that come from byte-compilation and autoload generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. Cask has no such concept.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of Cask&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cask provides a useful toolbox of operations for project management, which are completely absent from &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it does not require that you have Git installed. (It does require Python, however.) &lt;code&gt;straight.el&lt;/code&gt; is mostly unusable without Git.&lt;/li&gt; &#xA; &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it can perform bulk package updates more quickly than &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface for package management that also displays package metadata.&lt;/li&gt; &#xA; &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, you can install packages without editing a file manually, although this rather defeats the entire purpose of using Cask instead of &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; absolutely refuses to permanently install a package without an explicit reference to it in your init-file (although this may be considered an advantage, depending on your perspective).&lt;/li&gt; &#xA; &lt;li&gt;Using MELPA Stable, Cask can install only stable versions of packages. By default, Cask also installs only stable versions of packages from GNU ELPA. These modes of operation are unsupported by &lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;planned feature&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Cask supports more version-control systems than &lt;code&gt;straight.el&lt;/code&gt; (which only supports Git).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to el-get&lt;/h3&gt; &#xA;&lt;p&gt;I have not used el-get extensively, so please feel especially free to offer corrections for this section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Both el-get and &lt;code&gt;straight.el&lt;/code&gt; implement their own package management abstractions instead of delegating to &lt;code&gt;package.el&lt;/code&gt;. However: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;el-get goes the route of adding as many package sources as possible (e.g. &lt;code&gt;package.el&lt;/code&gt;, many different version-control systems, various specific websites, and even system package managers) so that packages can be used very easily.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; only supports Git and in doing so is able to provide more advanced package management features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. el-get has additional metadata stored outside the init-file, although specifying all packages in your init-file is a supported mode of operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. el-get can theoretically provide some measure of reproducibility, but this requires significant manual effort since all packages are not associated with specific revisions by default, nor is the revision of el-get saved anywhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally, and conflicts during updates are presented to the user and resolved interactively. While it is possible to make local changes to el-get packages, the el-get manual warns that such changes may break the update mechanism.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream repository and a fork for the same package. el-get does not have such a concept.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operartions on your package&#39;s Git repositories. el-get allows this, but local changes will be overwritten when el-get performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful interactive workflows for performing bulk operations on your package&#39;s Git repositories. el-get only allows you to install, uninstall, and update packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. el-get reports its progress verbosely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. el-get has no such concept.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of el-get&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;el-get supports virtually all known version-control systems, as well as system package managers, EmacsWiki, arbitrary HTTP, and even &lt;code&gt;go get&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; supports only Git, although it does allow you to manage your local repositories manually if you would like.&lt;/li&gt; &#xA; &lt;li&gt;el-get has been around since 2010 and is on its fifth major version, whereas &lt;code&gt;straight.el&lt;/code&gt; was created in January 2017 and is only now approaching a 1.0 release. Clearly, el-get is more stable, although despite its recency &lt;code&gt;straight.el&lt;/code&gt; is already almost 50% of the size of el-get, by the line count. Both package managers are actively maintained.&lt;/li&gt; &#xA; &lt;li&gt;el-get has a recipe format which is several orders of magnitude more powerful than that of &lt;code&gt;straight.el&lt;/code&gt;, since it supports many more package sources that can be configured and since it allows for a more complex build process.&lt;/li&gt; &#xA; &lt;li&gt;el-get provides a number of features for running per-package initialization and setup code, including pulling that code from arbitrary sources. &lt;code&gt;straight.el&lt;/code&gt; does not support this and expects you to use a dedicated tool like &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; (with which integration is built in) for that purpose.&lt;/li&gt; &#xA; &lt;li&gt;el-get has a user interface for package management that also displays package metadata, similarly to &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; has no user interface for package management; any UI is provided by the user&#39;s &lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to Borg&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Borg and &lt;code&gt;straight.el&lt;/code&gt; are perhaps the two most similar package managers on this list. The difference is that Borg is very minimal and expects you to complement it with other tools such as &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacscollective/epkg&#34;&gt;epkg&lt;/a&gt;, &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/tarsius/auto-compile&#34;&gt;auto-compile&lt;/a&gt;. On the other hand, &lt;code&gt;straight.el&lt;/code&gt; aspires to be a one-stop package management solution, although it does not try to replace dedicated version-control packages (Magit) or dedicated package &lt;em&gt;configuration&lt;/em&gt; packages (&lt;code&gt;use-package&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Borg uses Git submodules, while &lt;code&gt;straight.el&lt;/code&gt; uses independently managed Git repositories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports MELPA, GNU ELPA, Emacsmirror, and custom recipe sources. Borg only supports Emacsmirror and custom recipe sources. However, as the Emacsmirror is a near-complete superset of both GNU ELPA and MELPA, this does not necessarily mean you have access to more packages: it just means you benefit from the recipe maintenance efforts of the MELPA team and the Emacsmirror team, rather than only the latter.&lt;/li&gt; &#xA; &lt;li&gt;Borg, even when combined with related tools, do not allow for the kind of massive interactive repository management provided by &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides an API designed for other version-control backends to be added in future. Borg is inextricably tied to Git.&lt;/li&gt; &#xA; &lt;li&gt;The interface for Git submodules has a number of sharp edges.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides dependency management. This is a manual process in Borg.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides mechanisms for updating your packages. This is a manual process in Borg.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is configured solely by how you use in your init-file. Configuring Borg requires customizing &lt;code&gt;~/.emacs.d/.gitmodules&lt;/code&gt;, which means (for example) that you cannot generate recipes dynamically. (However, the handling of configuration is &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/95#issuecomment-316379495&#34;&gt;planned&lt;/a&gt; to be improved in a future release.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. Borg has no such concept.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of Borg&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Borg does a heck of a lot less magic, so if you want a solution with simple implementation details, &lt;code&gt;straight.el&lt;/code&gt; may not be for you. (But see the developer manual and docstrings, first.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to the manual approach&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The manual approach is to download packages yourself and put them on your &lt;code&gt;load-path&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; is more or less what you get when you take the manual approach, think very hard about the best way to do everything, and then automate all of it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; figures out where to clone your packages from for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; byte-compiles your packages for you and generates their autoloads automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to manually recompile and regenerate autoloads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; keeps track of dependencies for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides tools to manage all your packages in bulk, which would otherwise be a long, tedious process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to get reproducibility for your configuration without needing to keep all of your packages under version control.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; links packages into a separate build directories. Running packages directly from their repositories has a number of problems, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;making it impossible to run only one package, if others are provided in the same repository.&lt;/li&gt; &#xA;   &lt;li&gt;making your working directory dirty when the package author forgot to add their build artifacts like &lt;code&gt;*.elc&lt;/code&gt; and autoload files to the &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;instantly losing compatibility with MELPA recipes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; offers you a single entry point to install only a single package in isolation, for a minimal bug reproduction. With the manual approach this would be more complicated, especially if the package has dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to think about package management, since I already did all the thinking to figure how best to design everything.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of the manual approach&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No dependencies.&lt;/li&gt; &#xA; &lt;li&gt;You learn a lot, if you don&#39;t give up first.&lt;/li&gt; &#xA; &lt;li&gt;You might end up writing a package manager (case in point).&lt;/li&gt; &#xA; &lt;li&gt;This is the only way to deal with packages that have non-Git upstreams which you need to contribute changes to. (However, you can always use the manual approach for one package and &lt;code&gt;straight.el&lt;/code&gt; for the rest. Or you can just eschew &lt;code&gt;straight.el&lt;/code&gt;&#39;s version-control support for that package, and use it only for building the package.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User manual&lt;/h2&gt; &#xA;&lt;p&gt;This section tells you everything you need to know about the user-facing features of &lt;code&gt;straight.el&lt;/code&gt;. For implementation details, see the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;developer manual&lt;/a&gt;. It may also be helpful to get some perspective on the overarching concepts of &lt;code&gt;straight.el&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#conceptual-overview&#34;&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In order to use &lt;code&gt;straight.el&lt;/code&gt;, you will need to somehow get it loaded into Emacs. (This is easy for &lt;code&gt;package.el&lt;/code&gt;, since &lt;code&gt;package.el&lt;/code&gt; is built in to Emacs. &lt;code&gt;straight.el&lt;/code&gt; must work a little harder.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; comes with a file to do just this, &lt;code&gt;bootstrap.el&lt;/code&gt;. All you need to do is load that file. You can do this with &lt;code&gt;M-x load-file&lt;/code&gt; or by a call to &lt;code&gt;load&lt;/code&gt; in your init-file. However, there is an obvious shortcoming: &lt;code&gt;bootstrap.el&lt;/code&gt; will only be available once &lt;code&gt;straight.el&lt;/code&gt; is already installed.&lt;/p&gt; &#xA;&lt;p&gt;You could just invoke &lt;code&gt;git clone&lt;/code&gt; from your init-file, if &lt;code&gt;straight.el&lt;/code&gt; is not installed, but then you would have to manually take care of selecting the correct branch, parsing your version lockfile to check out the right revision, and so on. Instead, you can just use this snippet, which uses a copious amount of magic to take care of all these details for you:&lt;/p&gt; &#xA;&lt;!-- longlines-start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defvar bootstrap-version)&#xA;(let ((bootstrap-file&#xA;       (expand-file-name &#34;straight/repos/straight.el/bootstrap.el&#34; user-emacs-directory))&#xA;      (bootstrap-version 5))&#xA;  (unless (file-exists-p bootstrap-file)&#xA;    (with-current-buffer&#xA;        (url-retrieve-synchronously&#xA;         &#34;https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el&#34;&#xA;         &#39;silent &#39;inhibit-cookies)&#xA;      (goto-char (point-max))&#xA;      (eval-print-last-sexp)))&#xA;  (load bootstrap-file nil &#39;nomessage))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- longlines-stop --&gt; &#xA;&lt;p&gt;Despite the reference to &lt;code&gt;develop&lt;/code&gt;, this snippet actually installs from the &lt;code&gt;master&lt;/code&gt; branch by default, just like every other package. Furthermore, the correct revision of &lt;code&gt;straight.el&lt;/code&gt; is checked out, if you have one specified in your lockfile. Even better, you can &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-the-recipe-for-straightel&#34;&gt;override the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;, just like for any other package.&lt;/p&gt; &#xA;&lt;h3&gt;Installing packages programmatically&lt;/h3&gt; &#xA;&lt;p&gt;The primary entry point to &lt;code&gt;straight.el&lt;/code&gt; is the &lt;code&gt;straight-use-package&lt;/code&gt; function. It can be invoked interactively (for installing a package temporarily) or programmatically (for installing a package permanently). This section covers the programmatic usage; see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&#34;&gt;later&lt;/a&gt; for interactive usage.&lt;/p&gt; &#xA;&lt;p&gt;Here is the basic usage of &lt;code&gt;straight-use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;el-patch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will ensure that the package &lt;code&gt;el-patch&lt;/code&gt; is installed and loaded. (Note that &lt;code&gt;straight-use-package&lt;/code&gt; takes a symbol, not a string, for the name of the package.) Precisely, this is what happens:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the local Git repository for &lt;code&gt;el-patch&lt;/code&gt; is not available, it is cloned, and the appropriate revision is checked out (if one is specified in your version lockfiles).&lt;/li&gt; &#xA; &lt;li&gt;If the local Git repository has been modified since the last time the package was built, it is rebuilt. This means: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are symlinked into a separate directory to isolate them from other, irrelevant files.&lt;/li&gt; &#xA;   &lt;li&gt;The main package file is checked for dependencies, which are installed recursively if necessary using &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are byte-compiled.&lt;/li&gt; &#xA;   &lt;li&gt;Autoloads are extracted from the &lt;code&gt;.el&lt;/code&gt; files and saved into a separate file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The package&#39;s directory is added to Emacs&#39; &lt;code&gt;load-path&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The package&#39;s autoloads are evaluated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Package authors should note that &lt;code&gt;straight.el&lt;/code&gt; checks for dependencies that are specified in the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html&#34;&gt;&lt;code&gt;package.el&lt;/code&gt; format&lt;/a&gt;. To spare you reading that documentation, this is either a &lt;code&gt;Package-Requires&lt;/code&gt; header in &lt;code&gt;PACKAGENAME.el&lt;/code&gt;, or an argument to a &lt;code&gt;define-package&lt;/code&gt; invocation in &lt;code&gt;PACKAGENAME-pkg.el&lt;/code&gt;. Despite the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel&#34;&gt;many shortcomings&lt;/a&gt; of &lt;code&gt;package.el&lt;/code&gt;, it has done a good job of creating a standardized format for dependency declarations.&lt;/p&gt; &#xA;&lt;p&gt;There is one exception to the above statement: not all entries specified in the &lt;code&gt;Package-Requires&lt;/code&gt; header necessarily correspond to packages. For example, specifying a minimum Emacs version for a package is done by depending on the &lt;code&gt;emacs&lt;/code&gt; pseudo-package. Such packages are simply ignored by &lt;code&gt;straight.el&lt;/code&gt;, using the variable &lt;code&gt;straight-built-in-pseudo-packages&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that loading a package does not entail invoking &lt;code&gt;require&lt;/code&gt; on any of its features. If you wish to actually load the files of the package, you need to do this separately. This is because most packages do not need to be loaded immediately, and are better served by the autoload system.&lt;/p&gt; &#xA;&lt;h4&gt;Installing with a custom recipe&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; can also take a list instead of a symbol. In that case, the first member of the list is a symbol giving the package name, and the remainder of the list is a &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html&#34;&gt;property list&lt;/a&gt; providing information about how to install and build the package. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;&#xA;            :fork (:host github&#xA;                   :repo &#34;your-name/el-patch&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then a recipe will be looked up by default (see the section on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&#34;&gt;recipe lookup&lt;/a&gt;). You can see the default recipe for a package by invoking &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&#34;&gt;&lt;code&gt;M-x straight-get-recipe&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; is non-nil, then you only need to specify the components of the recipe that you want to override. All other components will still be looked up in the default recipe. In the example above, we are only interested in changing the &lt;code&gt;:fork&lt;/code&gt; component. Therefore if &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; is set, the recipe could be simplifed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :fork (:repo &#34;your-name/el-patch&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or even simpler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :fork &#34;your-name/el-patch&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:files&lt;/code&gt; keyword and all version control keywords support inheritance.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the section on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;the recipe format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The full user-facing signature of &lt;code&gt;straight-use-package&lt;/code&gt; is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package PACKAGE-OR-RECIPE &amp;amp;optional NO-CLONE NO-BUILD)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As discussed &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&#34;&gt;previously&lt;/a&gt;, by default &lt;code&gt;straight-use-package&lt;/code&gt; will do three things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register the recipe provided with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone the package&#39;s local repository, if it is absent.&lt;/li&gt; &#xA; &lt;li&gt;Rebuild the package if necessary, and load it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By providing the optional arguments, you may cause processing to halt before all three of these tasks are completed. Specifically, providing &lt;code&gt;NO-CLONE&lt;/code&gt; causes processing to halt after registration but before cloning, and providing &lt;code&gt;NO-BUILD&lt;/code&gt; causes processing to halt after cloning (if necessary) but before building and loading.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; supports lazy-loading by means of a special value for &lt;code&gt;NO-CLONE&lt;/code&gt;, the symbol &lt;code&gt;lazy&lt;/code&gt;. If this symbol is passed, then processing will halt at the clone step, unless the package is already cloned. This means that the package is built and loaded if it is already installed, but otherwise installation is deferred until later. When you want to trigger the lazy installation, simply call &lt;code&gt;straight-use-package&lt;/code&gt; again, but without &lt;code&gt;NO-CLONE&lt;/code&gt;. (There is no need to pass the recipe again; see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&#34;&gt;recipe lookup&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;You can also pass functions for &lt;code&gt;NO-CLONE&lt;/code&gt; or &lt;code&gt;NO-BUILD&lt;/code&gt;, which will be called with the package name as a string; their return values will then be used instead.&lt;/p&gt; &#xA;&lt;p&gt;Note that if it makes no sense to build a package, then you should put &lt;code&gt;:build nil&lt;/code&gt; in its &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;recipe&lt;/a&gt;, rather than specifying &lt;code&gt;NO-BUILD&lt;/code&gt; every time you register it with &lt;code&gt;straight.el&lt;/code&gt;. (This is especially relevant when writing recipes for &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-recipe-repositories&#34;&gt;recipe repositories&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;h4&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For convenience, &lt;code&gt;straight.el&lt;/code&gt; provides some functions that wrap &lt;code&gt;straight-use-package&lt;/code&gt; with particular arguments, to cover all of the common cases. Each of these functions takes only a package name or recipe, and no additional arguments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-register-package&lt;/code&gt;: always stop after the registration step. This may be useful for specifying the recipe for an optional dependency (see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&#34;&gt;recipe lookup&lt;/a&gt;, but see also &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-recipes&#34;&gt;recipe overrides&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-use-package-no-build&lt;/code&gt;: always stop before the build step. This is used by &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&#34;&gt;&lt;code&gt;straight-freeze-versions&lt;/code&gt;&lt;/a&gt; to make sure packages are cloned, since building them is unnecessary for writing the lockfiles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-use-package-lazy&lt;/code&gt;: stop at the clone step if the package&#39;s local repository is not already cloned. This is used for lazy-loading.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Customizing when packages are built&lt;/h4&gt; &#xA;&lt;p&gt;By default, when &lt;code&gt;straight.el&lt;/code&gt; is bootstrapped during Emacs init, it uses a bulk &lt;code&gt;find(1)&lt;/code&gt; command to identify files that were changed since the last time a package depending on them was built. These packages are then rebuilt when they are requested via &lt;code&gt;straight-use-package&lt;/code&gt;. Normally, &lt;code&gt;straight.el&lt;/code&gt; will try to detect what sort of &lt;code&gt;find(1)&lt;/code&gt; program is installed, and issue the appropriate command. If it makes a mistake, then you can manually customize &lt;code&gt;straight-find-flavor&lt;/code&gt;. Alternately, you can install GNU find and customize the variable &lt;code&gt;straight-find-executable&lt;/code&gt; to point to it.&lt;/p&gt; &#xA;&lt;p&gt;For about 100 packages on an SSD, calling &lt;code&gt;find(1)&lt;/code&gt; to detect modifications takes about 500ms. You can save this time by customizing &lt;code&gt;straight-check-for-modifications&lt;/code&gt;. This is a list of symbols which determines how &lt;code&gt;straight.el&lt;/code&gt; detects package modifications. The default value is &lt;code&gt;(find-at-startup find-when-checking)&lt;/code&gt;, which means that &lt;code&gt;find(1)&lt;/code&gt; is used to detect modifications at startup, and also when you invoke &lt;code&gt;M-x straight-check-package&lt;/code&gt; or &lt;code&gt;M-x straight-check-all&lt;/code&gt;. If you prefer to avoid this performance hit, or do not have &lt;code&gt;find(1)&lt;/code&gt; installed, then you can remove these symbols from the list. In that case, you will probably want to add either &lt;code&gt;check-on-save&lt;/code&gt; or &lt;code&gt;watch-files&lt;/code&gt; to the list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;check-on-save&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to use &lt;code&gt;before-save-hook&lt;/code&gt; to detect package modifications as you make them (modifications made by the &lt;code&gt;straight.el&lt;/code&gt; repository management commands are also detected). This reduces init time, but modifications made outside of Emacs (or modifications that bypass &lt;code&gt;before-save-hook&lt;/code&gt;) are not detected. Pull requests extending the number of cases in which &lt;code&gt;straight.el&lt;/code&gt; is able to detect live modifications are welcome. Also, for the sake of efficiency, this form of modification checking is restricted to subdirectories of &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, so you must put your local repositories into that directory for it to work. (Pull requests to change this would be welcome.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;watch-files&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to automatically invoke a filesystem watcher to detect modifications as they are made, inside or outside of Emacs. For this setting to work, you must have &lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;code&gt;python3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/mattgreen/watchexec&#34;&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; installed on your &lt;code&gt;PATH&lt;/code&gt;. By default, the watcher persists after Emacs is closed. You can stop it manually by running &lt;code&gt;M-x straight-watcher-stop&lt;/code&gt;, and start it again by running &lt;code&gt;M-x straight-watcher-start&lt;/code&gt;. The watcher script is designed so that when one instance is started, all the others gracefully shut down, so you don&#39;t have to worry about accidentally ending up with more than one. There is nothing exciting in the process buffer for the watcher, but if you are interested in it then its name is given by &lt;code&gt;straight-watcher-process-buffer&lt;/code&gt;. (By default, the name has a leading space so that the buffer does not appear in the buffer list.)&lt;/p&gt; &#xA;&lt;p&gt;There is probably no good reason to use both &lt;code&gt;check-on-save&lt;/code&gt; and &lt;code&gt;watch-files&lt;/code&gt; at the same time. Your configuration can dynamically switch between which one is used depending on &lt;code&gt;(executable-find &#34;watchexec&#34;)&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to eschew automatic package rebuilding entirely, you can just set &lt;code&gt;straight-check-for-modifications&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. In that case, packages will only be rebuilt when metadata (e.g. the recipe or the Emacs version) changes, or when you manually invoke &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt; or &lt;code&gt;M-x straight-rebuild-all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Regardless of your preferred setting for &lt;code&gt;straight-check-for-modifications&lt;/code&gt;, you should set it before the &lt;code&gt;straight.el&lt;/code&gt; bootstrap snippet is run, since hooks relating to this variable are set during bootstrap.&lt;/p&gt; &#xA;&lt;p&gt;On Microsoft Windows, &lt;code&gt;find(1)&lt;/code&gt; is generally not available, so the default value of &lt;code&gt;straight-check-for-modifications&lt;/code&gt; is instead &lt;code&gt;(check-on-save)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Custom or manual modification detection&lt;/h5&gt; &#xA;&lt;p&gt;You can also use the low-level functions for modification detection directly.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;straight-register-repo-modification&lt;/code&gt; takes a string (e.g. &lt;code&gt;&#34;straight.el&#34;&lt;/code&gt;) corresponding to the name of a local repository, and marks all packages from that local repository to be rebuilt at next Emacs startup. This function silently ignores local repositories which contain slashes, a limitation which might be removed in future.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;straight-register-file-modification&lt;/code&gt; takes no arguments and checks if the file visited by the current buffer (if any) is contained by any local repository. If so, it delegates to &lt;code&gt;straight-register-repo-modification&lt;/code&gt;. The &lt;code&gt;check-on-save&lt;/code&gt; value for &lt;code&gt;straight-check-for-modifications&lt;/code&gt; just adds &lt;code&gt;straight-register-file-modification&lt;/code&gt; to &lt;code&gt;before-save-hook&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Summary of options for package modification detection&lt;/h5&gt; &#xA;&lt;h6&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/h6&gt; &#xA;&lt;p&gt;Save build timestamps and run &lt;code&gt;find(1)&lt;/code&gt; at startup to detect changes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most reliable, never misses changes&lt;/li&gt; &#xA; &lt;li&gt;Requires &lt;code&gt;find(1)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slows down startup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/h6&gt; &#xA;&lt;p&gt;Use &lt;code&gt;before-save-hook&lt;/code&gt; to detect changes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No external dependencies&lt;/li&gt; &#xA; &lt;li&gt;No startup delay&lt;/li&gt; &#xA; &lt;li&gt;No additional CPU or memory impact&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t catch changes made except via &lt;code&gt;save-file&lt;/code&gt; inside Emacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/h6&gt; &#xA;&lt;p&gt;Run filesystem watcher to detect changes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Python 3 and Watchexec&lt;/li&gt; &#xA; &lt;li&gt;No startup delay&lt;/li&gt; &#xA; &lt;li&gt;Takes a few seconds to build virtualenv the first time&lt;/li&gt; &#xA; &lt;li&gt;Memory and CPU impact of running filesystem watcher&lt;/li&gt; &#xA; &lt;li&gt;Only misses changes if you make them after booting the system but before starting Emacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Customizing how packages are built&lt;/h4&gt; &#xA;&lt;p&gt;By specifying &lt;code&gt;:build nil&lt;/code&gt; in a package&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;recipe&lt;/a&gt;, you may prevent the package from being built at all. This is usually useful for recipe repositories which do not bundle executable Lisp code. (Make sure to use &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-recipe-repositories&#34;&gt;&lt;code&gt;straight-use-recipes&lt;/code&gt;&lt;/a&gt; for registering recipe repositories.)&lt;/p&gt; &#xA;&lt;h5&gt;Autoload generation&lt;/h5&gt; &#xA;&lt;p&gt;By specifying &lt;code&gt;:build (:not autoloads)&lt;/code&gt; in a package&#39;s recipe, you may prevent any autoloads provided by the package from being generated and loaded into Emacs. This is mostly useful if the package provides a large number of autoloads, you know you need only a few of them, and you wish to optimize your startup time (although this is almost certainly premature optimization unless you &lt;em&gt;really&lt;/em&gt; know what you&#39;re doing). You can also customize the variable &lt;code&gt;straight-disable-autoloads&lt;/code&gt; to effect this change on all recipes which do not explicitly disable autoloads via the &lt;code&gt;:build&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;h5&gt;Byte compilation&lt;/h5&gt; &#xA;&lt;p&gt;By specifying &lt;code&gt;:build (:not compile)&lt;/code&gt; in a package&#39;s recipe, you may inhibit byte-compilation. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/357&#34;&gt;this issue&lt;/a&gt; for discussion of why this might be useful. You can also customize the variable &lt;code&gt;straight-disable-compile&lt;/code&gt; to effect this change on all recipes which do not explicitly disable byte-compilation via the &lt;code&gt;:build&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;h5&gt;Native compilation&lt;/h5&gt; &#xA;&lt;p&gt;Experimental support for native compilation of Emacs Lisp code is currently under development in the &lt;code&gt;feature/native-comp&lt;/code&gt; branch of the official Emacs repository (see &lt;a href=&#34;http://akrl.sdf.org/gccemacs.html&#34;&gt;gccemacs&lt;/a&gt;). When running on this version of Emacs, &lt;code&gt;straight.el&lt;/code&gt; will perform native compilation of packages.&lt;/p&gt; &#xA;&lt;p&gt;By specifying a &lt;code&gt;:build (:not native-compile)&lt;/code&gt; in a package&#39;s recipe, you may inhibit native compilation. You can also customize the variable &lt;code&gt;straight-disable-native-compile&lt;/code&gt; to effect this change on all recipes which do not explicitly disable native-compilation via the &lt;code&gt;:build&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;p&gt;Native compilation requires byte-compilation, so &lt;code&gt;:build (:not compile)&lt;/code&gt; and &lt;code&gt;straight-disable-compile&lt;/code&gt; will also disable native compilation.&lt;/p&gt; &#xA;&lt;h5&gt;Symbolic links&lt;/h5&gt; &#xA;&lt;p&gt;Usually, &lt;code&gt;straight.el&lt;/code&gt; uses symbolic links (&#34;symlinks&#34;) to make package files available from the build directory. This happens when &lt;code&gt;straight-use-symlinks&lt;/code&gt; is non-nil, the default. On Microsoft Windows, however, support for symlinks is not always available, so the default value of &lt;code&gt;straight-use-symlinks&lt;/code&gt; is nil on that platform. That causes copying to be used instead, and an advice is placed on &lt;code&gt;find-file&lt;/code&gt; to cause the copied files to act as symlinks if you try to edit them.&lt;/p&gt; &#xA;&lt;p&gt;If you want to activate symlink-support on MS Windows 7, 8, or 10, you should ensure the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-symlinks&lt;/code&gt; has to be set to non-nil manually.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your user-account needs to be assigned the right to create symbolic links. To do so, run &#34;secpol.msc&#34; and in &#34;Local Policies â User Rights Assignment&#34; assign the right to &#34;Create symbolic links&#34; to your user-account.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have User Account Control (UAC) enabled and your user-account belongs to the the &lt;em&gt;Administrators&lt;/em&gt; group you&#39;ll need to run Emacs in elevated mode to be able to create symlinks (see &lt;a href=&#34;https://community.perforce.com/s/article/3472&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://stackoverflow.com/a/29065060/3538165&#34;&gt;here&lt;/a&gt; and, for an official reference, section Access Token Changes &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb530410.aspx#vistauac_topic8&#34;&gt;in this document&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://blogs.windows.com/buildingapps/2016/12/02/symlinks-windows-10/&#34;&gt;Windows Creators Update&lt;/a&gt; supports symlink-creation without any special permission setup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Customizing how packages are made available&lt;/h4&gt; &#xA;&lt;p&gt;By setting the variable &lt;code&gt;straight-cache-autoloads&lt;/code&gt; to a non-nil value, you can cause &lt;code&gt;straight.el&lt;/code&gt; to cache the autoloads of all used packages in a single file on disk, and load them from there instead of from the individual package files if they are still up to date. This reduces the number of disk IO operations during startup from O(number of packages) to O(1), so it should improve performance. No other configuration should be necessary to make this work; however, you may wish to call &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&#34;&gt;&lt;code&gt;straight-prune-build&lt;/code&gt;&lt;/a&gt; occasionally, since otherwise this cache file may grow quite large over time.&lt;/p&gt; &#xA;&lt;h4&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;straight-use-package&lt;/code&gt; supports three hooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-post-clone-hook&lt;/code&gt;: The functions in this hook are run just after cloning a git repository. This allows users to automate custom configuration of Elisp Git repositories after they have been cloned. For example, the &lt;code&gt;user.email&lt;/code&gt; &lt;code&gt;git-config&lt;/code&gt; variable could be set on clone, to make upstream contributions more convenient for developers who use different email addresses for different repositories.&lt;/p&gt; &lt;p&gt;Each hook function is passed the following &lt;a href=&#34;https://www.emacswiki.org/emacs/KeywordArguments&#34;&gt;keyword arguments&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;:repo-dir&lt;/code&gt; - the local directory to which the repository was cloned&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:remote&lt;/code&gt; - the name of the remote from which the repository was cloned&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:url&lt;/code&gt; - the URL from which the repository was cloned&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:branch&lt;/code&gt; - the branch as specified by the recipe, if any, otherwise &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:depth&lt;/code&gt; - the clone depth as specified by the recipe or &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:commit&lt;/code&gt; - the specific commit which was requested via the lockfile, if any, otherwise &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Since keyword arguments are used, each function should be defined via &lt;code&gt;cl-defun&lt;/code&gt;, and &lt;code&gt;&amp;amp;key&lt;/code&gt; used at the front of the argument list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-package-prepare-functions&lt;/code&gt;: The functions in this hook are run just before a package would be built, even if the package does not actually need to be rebuilt. They are passed the name of the package being (maybe) built as a string, and should take and ignore any additional arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-package-pre-build-functions&lt;/code&gt;: The functions in this hook are run just before building a package (and only if the package needs to be built). They are passed the name of the package being built as a string, and should take and ignore any additional arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-package-post-build-functions&lt;/code&gt;: The functions in this hook are run just after building a package (and only if the package needs to be built). They are passed the name of the package being built as a string, and should take and ignore any additional arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The recipe format&lt;/h3&gt; &#xA;&lt;p&gt;The general format for a &lt;code&gt;straight.el&lt;/code&gt; recipe is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package-name :keyword value :keyword value ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you wish to pass a recipe to &lt;code&gt;straight-use-package&lt;/code&gt;, you will need to quote it. If you need to compute part of the recipe dynamically, use backquoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA;  `(el-patch :type git :repo ,(alist-get &#39;el-patch my-package-urls)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The supported keywords are &lt;em&gt;similar, but not identical&lt;/em&gt; to those used in MELPA recipes. There is a complete list below which you can compare with the &lt;a href=&#34;https://github.com/melpa/melpa#recipe-format&#34;&gt;MELPA documentation&lt;/a&gt;, but the main differences from the user&#39;s point of view are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We use &lt;code&gt;:host&lt;/code&gt; instead of &lt;code&gt;:fetcher&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We only support Git recipes by default, although the system is extensible to other VCs to be added in the future or in user configurations. Thus the supported &lt;code&gt;:host&lt;/code&gt; values are &lt;code&gt;nil&lt;/code&gt; (any Git repository), &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, and &lt;code&gt;bitbucket&lt;/code&gt; (Git only).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We support &lt;code&gt;:branch&lt;/code&gt;, but not &lt;code&gt;:commit&lt;/code&gt; or &lt;code&gt;:version-regexp&lt;/code&gt;. To lock a package to a specific commit, use a &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&#34;&gt;lockfile&lt;/a&gt;. See also &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/246&#34;&gt;#246&lt;/a&gt; for discussion of extensions to the recipe to support package pinning, which is a planned feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We support several additional keywords that affect how a package is built; see below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are consistency and feature improvements to edge cases of the &lt;code&gt;:files&lt;/code&gt; keyword as documented in &lt;code&gt;straight-expand-files-directive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:includes&lt;/code&gt; indicates a package is a superset of another package.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a comprehensive list of all keywords which have special meaning in a recipe (unknown keywords are ignored but preserved):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:local-repo&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is the name of the local repository that is used for the package. If a local repository by that name does not exist when you invoke &lt;code&gt;straight-use-package&lt;/code&gt;, one will be cloned according to the package&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control settings&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Multiple packages can use the same local repository. If so, then a change to the local repository will cause both packages to be rebuilt. Typically, if multiple packages are drawn from the same repository, both should specify a &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt; &lt;p&gt;If you do not provide &lt;code&gt;:local-repo&lt;/code&gt;, then it defaults to a value derived from the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control settings&lt;/a&gt;, or as a last resort the package name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is a list specifying which files in a package&#39;s local repository need to be symlinked into its build directory, and how to arrange the symlinks. For most packages, the default value (&lt;code&gt;straight-default-files-directive&lt;/code&gt;) will suffice, and you do not need to specify anything.&lt;/p&gt; &lt;p&gt;If you do need to override the &lt;code&gt;:files&lt;/code&gt; directive (this happens most commonly when you are taking a single package from a repository that holds multiple packages), it is almost always sufficient to just specify a list of globs or filenames. All matching files will be linked into the top level of the package&#39;s build directory.&lt;/p&gt; &lt;p&gt;In spite of this, the &lt;code&gt;:files&lt;/code&gt; directive supports an almost comically powerful DSL (with nested excludes and everything!) that allows you full flexibility on how the links are made; see the docstring of &lt;code&gt;straight-expand-files-directive&lt;/code&gt; for the full details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:flavor&lt;/code&gt;&lt;/p&gt; &lt;p&gt;If this is non-nil, then it changes the interpretation of the &lt;code&gt;:files&lt;/code&gt; directive for compatibility with an existing upstream recipe source. See the docstring of &lt;code&gt;straight-expand-files-directive&lt;/code&gt; for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:build&lt;/code&gt; This specifies the steps taken on the files symlinked within a package&#39;s straight/build/PACKAGE directory. It may be any of the following values:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nil, in which case nothing is done. This also prevents :pre/:post-build commands from running.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(example :build nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;t, runs the steps listed in &lt;code&gt;straight--build-default-steps&lt;/code&gt;. Note this ignores all &lt;code&gt;straight-disable-SYMBOL&lt;/code&gt; keywords.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(example :build t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A list of steps. Each step is a symbol which represents a function named: &lt;code&gt;straight--build-SYMBOL&lt;/code&gt;. The function is passed the recipe as its sole argument. Steps are exectuted in the order they are listed. e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(example :build (autoloads compile native-compile info))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A list which has &lt;code&gt;:not&lt;/code&gt; as its car and step symbols as its cdr. This eliminates the listed steps from the default steps. e.g. The following recipe will not be compiled or have its texinfo generated:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(example :build (:not compile info))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Steps may be disabled globally for recipes which do not explicilty declare their &lt;code&gt;:build&lt;/code&gt; via the defcustom variables named &lt;code&gt;straight--build-SYMBOL&lt;/code&gt;. e.g. The last example but for all recipes without a &lt;code&gt;:build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq straight-disable-compile t&#xA;      straight-disable-info t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the absence of a &lt;code&gt;:build&lt;/code&gt; keyword, &lt;code&gt;straight--build-default-steps&lt;/code&gt; are run.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:pre-build&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This specifies system commands and/or elisp to be evaluated before symlinking, and running a recipe&#39;s &lt;code&gt;:build&lt;/code&gt; steps.&lt;/p&gt; &lt;p&gt;Each command is either an elisp form to be evaluated or a list of strings to be executed in a shell context of the form:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(&#34;executable&#34; &#34;arg&#34;...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Commands are executed in the package&#39;s repository directory.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;:pre-build&lt;/code&gt; keyword&#39;s value may be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A single command&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A list of commands&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;nil, in which case no commands are executed.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;( example :type git :host github :repo &#34;user/example.el&#34;&#xA;    :pre-build (&#34;make&#34; &#34;all&#34;)))&#xA;&#xA;(straight-use-package&#xA; `( example :type git :host github :repo &#34;user/example.el&#34;&#xA;    :pre-build ,(pcase system-type&#xA;                  (`windows-nt &#39;(message &#34;This might take a while&#34;))&#xA;                  (_ &#39;((&#34;./configure&#34;) (&#34;make&#34;) (&#34;make&#34; &#34;install&#34;))))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:post-build&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This specifies system commands and/or elisp to be evaluated after the &lt;code&gt;:build&lt;/code&gt; steps are run.&lt;/p&gt; &lt;p&gt;Otherwise, it is identical to the &lt;code&gt;:pre-build&lt;/code&gt; keyword in terms of the values it accepts and how it is executed.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;( example :type git :host github :repo &#34;user/example.el&#34;&#xA;    :pre-build  ((&#34;./pre-build.sh&#34;) (message &#34;hi&#34;))&#xA;    :post-build ((&#34;./post-build.sh&#34;) (message &#34;bye&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:type&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This specifies the version-control backend to use for cloning and managing the package&#39;s local repository. It defaults to the value of &lt;code&gt;straight-default-vc&lt;/code&gt;, which defaults to &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The only traditional version-control backend currently supported is &lt;code&gt;git&lt;/code&gt;, although more backends may be added.&lt;/p&gt; &lt;p&gt;As a special case, however, you may specify the value &lt;code&gt;built-in&lt;/code&gt;, which results in all version-control operations on the package being ignored. This allows you to tell &lt;code&gt;straight.el&lt;/code&gt; that a package has already been provided (for example, because a version of it is shipped by Emacs) and does not have a local repository which needs to be cloned, updated, and so on. Here is how you can tell &lt;code&gt;straight.el&lt;/code&gt; that you would like to use the Emacs-provided copy of Org, rather than cloning it from the upstream repository if another package declares it as a dependency:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(org :type built-in))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:source&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Overrides &lt;code&gt;straight-recipe-repositories&lt;/code&gt; on a per-recipe basis. Its value may be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a symbol representing a recipe repository&lt;/li&gt; &#xA; &lt;li&gt;a list of such symbols The order of the symbols determines their precedence. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(package :source melpa))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will search only the melpa recipe repository for package&#39;s recipe. While:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(package :source (melpa gnu-elpa-mirror)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will search for package&#39;s recipe first in melpa. If it is not found there it will check gnu-elpa-mirror next.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;backend-specific keywords&lt;/p&gt; &lt;p&gt;Depending on the value of &lt;code&gt;:type&lt;/code&gt;, additional keywords (relevant to how the package&#39;s repository is cloned and managed) will be meaningful. See the next section.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;built-in&lt;/code&gt; pseudo-backend does not take any other keywords.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:includes&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Informs &lt;code&gt;straight.el&lt;/code&gt; that a package is a superset of another package. For example &lt;code&gt;org-contrib&lt;/code&gt; includes &lt;code&gt;ol-vm&lt;/code&gt;. The following will prevent &lt;code&gt;straight.el&lt;/code&gt; from attempting to install &lt;code&gt;ol-vm&lt;/code&gt; after &lt;code&gt;org-contrib&lt;/code&gt; has been installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(org-contrib :includes ol-vm))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Its value may also be a list of symbols indicating multiple packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(example :includes (foo bar)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:inherit&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Overrides &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; on a per-recipe basis. If its value is non-nil, inheritance is enabled for the recipe. Otherwise it is not.&lt;/p&gt; &#xA;&lt;h4&gt;Version-control backends&lt;/h4&gt; &#xA;&lt;p&gt;Defining a version-control backend consists of declaring a number of functions named as &lt;code&gt;straight-vc-BACKEND-METHOD&lt;/code&gt;, where &lt;code&gt;BACKEND&lt;/code&gt; is the name of the version-control backend being defined and &lt;code&gt;METHOD&lt;/code&gt; is a backend API method. The relevant methods are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: given a recipe and a commit object, clone the repository and attempt to check out the given commit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: given a recipe and a commit object, return whether the commit can be checked out offline, i.e., without fetching from the remote.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: given a recipe, &#34;normalize&#34; the repository (this generally means reverting it to a standard state, such as a clean working directory, but does not entail checking out any particular commit).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: given a recipe, fetch the latest version from its configured remote, if one is specified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: given a recipe, fetch the latest version from its configured upstream, if the package is forked.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: given a recipe, merge the latest version fetched from the configured remote, if any, to the local copy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: given a recipe, merge the latest version fetched from the configured upstream, if the package is forked, to the local copy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: given a recipe, push the current version of the repository to its configured remote, if one is specified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: given a recipe and a commit object, attempt to check out that commit in the repository for that recipe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: given a local repository name, return the commit object that is currently checked out, or nil if the local repository should not be included in a lockfile.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: given a recipe, return a good name for the local repository, or nil.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: return a list of keywords which are meaningful for this version-control backend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of these methods are highly interactive: they don&#39;t actually do anything without prompting you to confirm it, and very often they will offer you a number of different options to proceed (including starting a recursive edit and allowing you to do whatever you would like).&lt;/p&gt; &#xA;&lt;p&gt;Also, all of the methods in this section take &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;&lt;code&gt;straight.el&lt;/code&gt;-style recipes&lt;/a&gt;; see the section on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;defining VC backends&lt;/a&gt; in the developer manual for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Git backend&lt;/h4&gt; &#xA;&lt;p&gt;These are the keywords meaningful for the &lt;code&gt;git&lt;/code&gt; backend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt;: the clone URL for the Git repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:host&lt;/code&gt;: either nil or one of the symbols &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, &lt;code&gt;bitbucket&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If nil, then &lt;code&gt;:repo&lt;/code&gt; should be a string which is the full URL of the target repository. For example:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host nil :type git&#xA;  :repo &#34;http://myhost.tld/repo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If non-nil, then &lt;code&gt;:repo&lt;/code&gt; should be a string &#34;username/repo&#34;, and the URL is constructed automatically. For example:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git&#xA;  :repo &#34;username/repo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt;: the name of the branch used for primary development, as a string. If your version lockfiles do not specify a commit to check out when the repository is cloned, then this branch is checked out, if possible. This branch is also viewed as the &#34;primary&#34; branch for the purpose of normalization and interaction with the remote.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:remote&lt;/code&gt;: the name to use for the Git remote. If the package is forked, this name is used for the upstream remote.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;: if non-nil, then submodules are not cloned. This is particularly important for the Emacsmirror recipe repository, which contains every known Emacs package in existence as submodules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:fork&lt;/code&gt;: the settings for a fork, if desired. This causes the &lt;code&gt;fetch-from-remote&lt;/code&gt; method to operate on the fork; you can use the &lt;code&gt;fetch-from-upstream&lt;/code&gt; method to operate on the upstream instead.&lt;/p&gt; &lt;p&gt;Note: the following section assumes &lt;code&gt;straight-host-usernames&lt;/code&gt; has a value of:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;&#39;((github    . &#34;githubUser&#34;)&#xA;  (gitlab    . &#34;gitlabUser&#34;)&#xA;  (bitbucket . &#34;bitbucketUser&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Its value may be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;t&lt;/code&gt;: Look up the username in &lt;code&gt;straight-host-usernames&lt;/code&gt;. Inherit the repository name from the upstream repository. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;githubUser/repo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a string (optionally ending with &#34;/&#34;): Use the string as the username. Inherit repository name from the upstream repository. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork &#34;user&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;user/repo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a string starting with &#34;/&#34;: Look up the username in &lt;code&gt;straight-host-usernames&lt;/code&gt;. Use the string as the repository name. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork &#34;/renamed&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;githubUser/renamed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a string with both the recipe and repository specified: Use string as the &lt;code&gt;:repo&lt;/code&gt; value for the fork. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork &#34;user/renamed&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;user/renamed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a plist: The allowed keywords are &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;, &lt;code&gt;:branch&lt;/code&gt;, and &lt;code&gt;:remote&lt;/code&gt;. The same rules as above apply for the &lt;code&gt;:repo&lt;/code&gt; string. Likewise, if the &lt;code&gt;:host&lt;/code&gt; is overridden and the &lt;code&gt;:repo&lt;/code&gt; does not provide the username, it is looked up in &lt;code&gt;straight-host-usernames&lt;/code&gt;. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork (:host gitlab))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;gitlabUser/repo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork (:host gitlab :repo &#34;/renamed&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;gitlabUser/renamed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork (:host gitlab :repo &#34;user&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;user/repo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:depth&lt;/code&gt;: either the symbol &lt;code&gt;full&lt;/code&gt; or an integer. If &lt;code&gt;full&lt;/code&gt;, then the repository is cloned with its whole history. If an integer &lt;code&gt;N&lt;/code&gt;, then the repository is cloned with the option &lt;code&gt;--depth N&lt;/code&gt;. This works even when a commit is specified (e.g. by version lockfiles). The default value is &lt;code&gt;full&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:protocol&lt;/code&gt;: If non-nil, force this protocol to be used when interacting with the remote repository. Takes the same values as &lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This section tells you how the &lt;code&gt;git&lt;/code&gt; backend, specifically, implements the version-control backend API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: clones the repository, including submodules if &lt;code&gt;:nonrecursive&lt;/code&gt; is not provided. Checks out the commit specified in your revision lockfile, or the &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt; configuration, if given), or &lt;code&gt;origin/HEAD&lt;/code&gt;. If a &lt;code&gt;:fork&lt;/code&gt; is specified, also fetches from the upstream.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: checks if the commit SHA is among the revisions that are present locally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: verifies that remote URLs are set correctly, that no merge is in progress, that the worktree is clean, and that the primary &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt; configuration, if given) is checked out.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: checks that remote URLs are set correctly, then fetches from the primary remote (the fork, if the package is forked).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: checks that remote URLs are set correctly, then fetches from the upstream remote. If the package is not a fork, does nothing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: performs normalization, then merges from the primary remote (the fork, if the package is forked) into the primary local &lt;code&gt;:branch&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: performs normalization, then merges from the upstream remote into the primary local &lt;code&gt;:branch&lt;/code&gt;. If the package is not a fork, does not attempt to merge.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: performs normalization, pulls from the primary remote if necessary, and then pushes if necessary. This operation acts on the fork, if the package is forked.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: verifies that no merge is in progress and that the worktree is clean, then resets the worktree to the specified commit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: returns HEAD as a 40-character string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: if &lt;code&gt;:host&lt;/code&gt; is non-nil, then &lt;code&gt;:repo&lt;/code&gt; will be of the form &#34;username/repository&#34;, and &#34;repository&#34; is used. Otherwise, if the URL is of the form &lt;code&gt;.../&amp;lt;something&amp;gt;.git&lt;/code&gt;, then &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt; is used. Otherwise, nil is returned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: see the list of keywords above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can customize the following user options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;: the name to use for the primary remote, or the upstream remote if the package is forked. Defaults to &#34;origin&#34;. The &lt;code&gt;:remote&lt;/code&gt; keyword may be used to override the value of this variable on a per-repository basis.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-fork-name&lt;/code&gt;: the name to use for the fork remote, if the package is forked. Defaults to &#34;fork&#34;. The &lt;code&gt;:remote&lt;/code&gt; keyword may be used to override the value of this variable on a per-repository basis.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;: the default protocol to use for automatically generated URLs when &lt;code&gt;:host&lt;/code&gt; is non-nil. It can be either &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;ssh&lt;/code&gt;, and defaults to &lt;code&gt;https&lt;/code&gt; because this requires less work to set up.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-force-protocol&lt;/code&gt;: if this is non-nil, then HTTPS and SSH URLs are not treated as equivalent, so that bulk version-control operations will offer to re-set your remote URLs from HTTPS to SSH or vice versa, depending on the value of &lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;. This is nil by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-auto-fast-forward&lt;/code&gt;: if this is non-nil, pulling will quietly do fast-forward, to suppress asking for instructions on each package with updates, unless they&#39;re not trivial. Set to nil if you&#39;d prefer to inspect all changes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;: the default value for the &lt;code&gt;:depth&lt;/code&gt; keyword. It can be either the symbol &lt;code&gt;full&lt;/code&gt; or an integer, and defaults to &lt;code&gt;full&lt;/code&gt;. Setting this variable to a small integer will reduce the size of repositories. This variable affects all packages, even those whose versions are locked.&lt;/p&gt; &lt;p&gt;Please be careful with setting &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;, which may break some packages&#39; installing processes such as &lt;code&gt;elfeed&lt;/code&gt; that depend on &lt;code&gt;org&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; previously supported fork configuration in recipes using an &lt;code&gt;:upstream&lt;/code&gt; keyword rather than a &lt;code&gt;:fork&lt;/code&gt; keyword. For various reasons, this was more complex to handle, which is why the change was made. For backwards compatibility, the &lt;code&gt;:upstream&lt;/code&gt; keyword is still accepted, with the following behavior.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;straight.el&lt;/code&gt; processes a recipe which uses the &lt;code&gt;:upstream&lt;/code&gt; keyword, it moves the &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;, and &lt;code&gt;:branch&lt;/code&gt; keywords from that sub-plist to the top level, and moves those top-level keywords to a new &lt;code&gt;:fork&lt;/code&gt; sub-plist. Then it sets the top-level and &lt;code&gt;:fork&lt;/code&gt; sub-plist values of &lt;code&gt;:remote&lt;/code&gt; to the values of the deprecated variables &lt;code&gt;straight-vc-git-upstream-remote&lt;/code&gt; (defaults to &#34;upstream&#34;) and &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; (defaults to &#34;origin&#34;), respectively.&lt;/p&gt; &#xA;&lt;p&gt;For backwards compatibility, if &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; differs from its default value of &#34;origin&#34;, then its value is used in place of &lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Recipe lookup&lt;/h3&gt; &#xA;&lt;p&gt;If you only provide a symbol (package name) to &lt;code&gt;straight-use-package&lt;/code&gt;, then the recipe is looked up automatically. By default, &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt;, and &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt; are searched for recipes, in that order. This means that one or more of them may need to be cloned. Recipe repositories are actually just the same as ordinary packages, except that their recipes specify &lt;code&gt;:build nil&lt;/code&gt;, so they are not symlinked or added to the &lt;code&gt;load-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that dependencies always use the default recipes, since the only information &lt;code&gt;straight.el&lt;/code&gt; gets about a package&#39;s dependencies are their names.&lt;/p&gt; &#xA;&lt;p&gt;This leads to a few interesting questions regarding requesting a package multiple times. For example, you might need to load two features using &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; that are provided from the same package, or one of the packages you have installed is also requested as a dependency by another package. &lt;code&gt;straight.el&lt;/code&gt; uses a number of heuristics to try to make these interactions as intuitive and painless as possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time a package is registered with &lt;code&gt;straight.el&lt;/code&gt;, its recipe (either the recipe that you provided, or the one that was looked up from a recipe repository) is recorded. In future registration, if you just provide the package name to &lt;code&gt;straight-use-package&lt;/code&gt;, the existing recipe is reused.&lt;/p&gt; &lt;p&gt;Note, however: &lt;em&gt;if&lt;/em&gt; you want to use a custom recipe for a given package, you must load it &lt;em&gt;before&lt;/em&gt; all of its dependencies. Otherwise, the package will first be registered as a dependency, using the default recipe.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package has already been registered with &lt;code&gt;straight.el&lt;/code&gt;, and you attempt to load it again with an explicit recipe which is different from the one previously registered, the new recipe is used but a warning is signalled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you attempt to register a package which shares a &lt;code&gt;:local-repo&lt;/code&gt; (either by default, or due to explicit specification) with a previously registered package, and the two packages specify different values for their version-control keywords (see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control backends&lt;/a&gt;), then the new recipe is used but a warning is signalled. If the repository was already cloned, this means the second recipe will have no effect.&lt;/p&gt; &lt;p&gt;But if the second recipe was fetched automatically from a recipe repository, all of its version-control keywords will be silently overwritten with the ones from the first recipe, to avoid conflicts (although if there are conflicts in other parts of the recipe, a warning will still be displayed).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Updating recipe repositories&lt;/h4&gt; &#xA;&lt;p&gt;As mentioned in the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-recipes-come-from&#34;&gt;conceptual overview&lt;/a&gt;, recipe repositories are just regular packages, with some extra code to look up recipes in the relevant local repository.&lt;/p&gt; &#xA;&lt;p&gt;This means that updating a recipe repository may be done the same way as updating a regular package, i.e. with &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;. A convenience command with interactive completion for recipe repositories, &lt;code&gt;straight-pull-recipe-repositories&lt;/code&gt;, is provided as well. You should use one of these if you find that a package isn&#39;t listed by &lt;code&gt;M-x straight-use-package&lt;/code&gt;âperhaps it was added recently.&lt;/p&gt; &#xA;&lt;p&gt;Note that there is currently some potentially surprising behavior if you update all packages at once using &lt;code&gt;M-x straight-pull-all&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;, and this bulk update includes recipe repository updates: see &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/323&#34;&gt;#323&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customizing recipe repositories&lt;/h4&gt; &#xA;&lt;p&gt;The recipe repository system is designed to be extended. Firstly, you can control which recipe repositories are searched, and in what order of precedence, by customizing &lt;code&gt;straight-recipe-repositories&lt;/code&gt;. The default value is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-elpa melpa gnu-elpa-mirror emacsmirror)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;GNU ELPA&lt;/h5&gt; &#xA;&lt;p&gt;You can customize the following user options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-recipes-gnu-elpa-url&lt;/code&gt;: The Git URL to use for the &lt;code&gt;gnu-elpa&lt;/code&gt; recipe repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;: GNU ELPA uses a stupidly complex build system for no good reason, and it&#39;s unlikely to change any time soon. What this means for you is that you have to run the Elisp-powered Makefile of the GNU ELPA repository (which has a fatal bug last I checked, so you&#39;d have to patch it locally) &lt;em&gt;and&lt;/em&gt; have a full checkout of the Emacs source repository (more than 1GB) if you want all the packages to work correctly. To work around this problem, I maintain a &lt;a href=&#34;https://github.com/emacs-straight&#34;&gt;full mirror of GNU ELPA on GitHub&lt;/a&gt;. (The tooling used to maintain this mirror is located &lt;a href=&#34;https://github.com/raxod502/gnu-elpa-mirror&#34;&gt;here&lt;/a&gt;.) By default, &lt;code&gt;straight.el&lt;/code&gt; retrieves packages from this mirror instead of the source repository; this behavior is controlled by the value of &lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;. You must do any customization of this variable &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;straight.el&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;bootstrap&lt;/a&gt;. Note that setting the value of this user option to nil causes the default value of &lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-elpa melpa gnu-elpa emacsmirror)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Emacsmirror&lt;/h5&gt; &#xA;&lt;p&gt;You can customize the following user option:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-recipes-emacsmirror-use-mirror&lt;/code&gt;: Yes, there is also a mirror for Emacsmirror. This is because the &lt;a href=&#34;https://github.com/emacsmirror/epkgs&#34;&gt;epkgs&lt;/a&gt; repository contains a (frequently updated) SQLite database in it, which means the Git repository takes &lt;em&gt;forever&lt;/em&gt; to clone (see &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/356&#34;&gt;#356&lt;/a&gt;). My solution to this problem is to generate a new repository which contains the information that &lt;code&gt;straight.el&lt;/code&gt; needs but which is much smaller. By default, &lt;code&gt;straight.el&lt;/code&gt; uses the official &lt;a href=&#34;https://github.com/emacsmirror/epkgs&#34;&gt;epkgs&lt;/a&gt; repository to find packages on Emacsmirror, but you can tell it to use my mirror by configuring the value of this variable to non-nil. You must do any customization of this variable &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;straight.el&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;bootstrap&lt;/a&gt;. Note that setting the value of this user option to non-nil causes the default value of &lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-elpa melpa gnu-elpa-mirror emacsmirror-mirror)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Defining new recipe repositories&lt;/h5&gt; &#xA;&lt;p&gt;To define a new recipe repository called &lt;code&gt;NAME&lt;/code&gt;, you should do the following things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Define a function &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt;, which takes a package name as a symbol and returns a recipe for that package if it is available, else nil. This is used for recipe lookup. This function may assume that the local repository for the recipe repository has already been cloned, and that &lt;code&gt;default-directory&lt;/code&gt; has been set to that local repository. This is used for recipe lookup during the course of &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the returned recipe is a backquoted list, it will be evaluated during &lt;code&gt;straight--convert-recipe&lt;/code&gt;. This is useful for specifying dynamic elements within the recipe such as system-specific build commands. For example, if &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; returns:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;&#39;`( package :type git :repo &#34;host/repo&#34;&#xA;    :pre-build ,(pcase system-type&#xA;                  (`berkeley-unix &#39;(&#34;gmake&#34;))&#xA;                  (_ &#39;(&#34;make&#34;)))&#xA;    :files (:defaults))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recipe is converted to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package :type git :repo &#34;host/repo&#34;&#xA; :pre-build (&#34;make&#34;)&#xA; :files (:defaults))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;on a &lt;code&gt;gnu/linux&lt;/code&gt; system, and:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package :type git :repo &#34;host/repo&#34;&#xA;         :pre-build (&#34;gmake&#34;)&#xA;         :files (:defaults))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;on a &lt;code&gt;berkely-unix&lt;/code&gt; system.&lt;/p&gt; &#xA;&lt;p&gt;The recipe could be read from a file in the recipe repository as well. In this case, the quote is &lt;em&gt;not&lt;/em&gt; included in the recipe, as &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; would make use of &lt;code&gt;read&lt;/code&gt;, which will return the literal Lisp object. For example, considering the following retrieval function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun straight-recipes-example-retrieve (name)&#xA;  (with-temp-buffer&#xA;    (insert-file-literally &#34;./recipes/example.recipe&#34;)&#xA;    (read (buffer-string))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recipe from above could be stored in the file, &lt;code&gt;example.recipe&lt;/code&gt;, as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;`( package :type git :repo &#34;host/repo&#34;&#xA;   :pre-build ,(pcase system-type&#xA;                 (`berkeley-unix &#39;(&#34;gmake&#34;))&#xA;                 (_ &#39;(&#34;make&#34;)))&#xA;   :files (:defaults))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define a function &lt;code&gt;straight-recipes-NAME-list&lt;/code&gt;, which takes no arguments and returns a list of strings representing packages for which recipes are available. It is permissible to return some strings for which recipes are actually not available, for performance reasons. However, this is discouraged. (The &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt; backend uses this functionality, since all files in the &lt;code&gt;recipes&lt;/code&gt; directory are potentially recipes, but only the Git-based ones can actually be used.)&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Define a function &lt;code&gt;straight-recipes-NAME-version&lt;/code&gt; which returns a non-nil value indicating the current version of the logic in your &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; function. Each time you change the logic, this version value must be changed. If this function is defined, then &lt;code&gt;straight.el&lt;/code&gt; automatically and transparently caches calls to &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; persistently, using your version value (and its detection of modifications to the recipe repository) to decide when to invalidate the cache.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;straight-use-recipes&lt;/code&gt; with the recipe for your recipe repository. Make sure to include &lt;code&gt;:build nil&lt;/code&gt; in the recipe, unless you also want to use the recipe repository as an executable Emacs Lisp package. Alternatively, you can take the manual approach: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Call &lt;code&gt;straight-use-package-lazy&lt;/code&gt; with the recipe for your recipe repository.&lt;/li&gt; &#xA;   &lt;li&gt;Add the symbol for your recipe repository&#39;s name (the car of the recipe you provided, that is) to &lt;code&gt;straight-recipe-repositories&lt;/code&gt;, at the appropriate place.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Overriding recipes&lt;/h3&gt; &#xA;&lt;p&gt;You can always use &lt;code&gt;straight-register-package&lt;/code&gt; to specify a specific recipe for a package without cloning or building it, so that just in case that package is requested later (possibly as a dependency, or in somebody else&#39;s code) your recipe will be used instead of the default one. However, this does not help in the case that a specific recipe is passed to &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, it is obviously impossible to call &lt;code&gt;straight-register-package&lt;/code&gt; before &lt;code&gt;straight.el&lt;/code&gt; has been loaded, so you can&#39;t use it to specify a custom recipe for &lt;code&gt;straight.el&lt;/code&gt; itself.&lt;/p&gt; &#xA;&lt;p&gt;To remedy these difficulties, &lt;code&gt;straight.el&lt;/code&gt; provides a mechanism for specifically overriding the recipe for a particular package. You can use it by customizing &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, or by calling &lt;code&gt;straight-override-recipe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt; is an association list from &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-profile-system&#34;&gt;profile names&lt;/a&gt; to &lt;em&gt;override alists&lt;/em&gt;. If you don&#39;t care about the profile system, you can just use a single override specification, with the profile name nil. Each override alist is just a list of recipes. Because the car of a recipe is just the package name as a symbol, this list of recipes is also an alist whose keys are recipe names and whose values are the plists for those recipes.&lt;/p&gt; &#xA;&lt;p&gt;Even if an explicit recipe is supplied to &lt;code&gt;straight-use-package&lt;/code&gt;, the one given in &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will be used instead, if such a recipe is specified there.&lt;/p&gt; &#xA;&lt;p&gt;For convenience, you may add to &lt;code&gt;straight-recipe-overrides&lt;/code&gt; by passing a recipe to &lt;code&gt;straight-override-recipe&lt;/code&gt;. This will register it in the override alist for the current profile. Note that if you do this, you will probably want to explicitly set &lt;code&gt;straight-recipe-overrides&lt;/code&gt; to nil before bootstrapping &lt;code&gt;straight.el&lt;/code&gt;. This will make it so that if you remove a call to &lt;code&gt;straight-override-recipe&lt;/code&gt; from your init-file and then reload it, the entry will actually be removed from &lt;code&gt;straight-recipe-overrides&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;As was briefly mentioned earlier, you can actually override the recipe of &lt;code&gt;straight.el&lt;/code&gt; itself using &lt;code&gt;straight-recipe-overrides&lt;/code&gt;! How does this work? Well, it&#39;s basically black magic. If you want the details, go read the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;developer manual&lt;/a&gt;. All you need to know is that you can set &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, and it will magically work. The only caveat is that if you change the &lt;code&gt;:local-repo&lt;/code&gt; for &lt;code&gt;straight.el&lt;/code&gt;, then you will also need to adjust the value of &lt;code&gt;bootstrap-file&lt;/code&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;bootstrap snippet&lt;/a&gt; accordingly, since otherwise your init-file will not know where to find &lt;code&gt;straight.el&lt;/code&gt;. (You must use &lt;code&gt;straight-recipe-overrides&lt;/code&gt; instead of &lt;code&gt;straight-override-recipe&lt;/code&gt;, since the latter function definition hasn&#39;t been loaded yet before &lt;code&gt;straight.el&lt;/code&gt; is installed and bootstrapped.)&lt;/p&gt; &#xA;&lt;p&gt;Here is the default recipe used for &lt;code&gt;straight.el&lt;/code&gt;, if you don&#39;t override it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight :type git :host github&#xA;          :repo ,(format &#34;%s/straight.el&#34; straight-repository-user)&#xA;          :files (&#34;straight*.el&#34;)&#xA;          :branch ,straight-repository-branch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that even though the bootstrap snippet references the &lt;code&gt;develop&lt;/code&gt; branch of &lt;code&gt;straight.el&lt;/code&gt;, the default recipe installs from &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If all you want to do is change which branch you are installing &lt;code&gt;straight.el&lt;/code&gt; from, simply customize the variable &lt;code&gt;straight-repository-branch&lt;/code&gt;, which is provided for this purpose. (Although using &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will work just as well, at least until the recipe happens to be changed upstream and your init-file isn&#39;t updated.)&lt;/p&gt; &#xA;&lt;p&gt;Similarly, if all you want to do is switch to your own fork of &lt;code&gt;straight.el&lt;/code&gt; on GitHub, simply customize the variable &lt;code&gt;straight-repository-user&lt;/code&gt; to your GitHub username.&lt;/p&gt; &#xA;&lt;p&gt;There is one minor caveat to the above discussion. If your fork makes changes to the way in which recipes are interpreted, then those changes will not be effective during the interpretation of your own recipe for &lt;code&gt;straight.el&lt;/code&gt;. If you wish for them to be, then you will have to follow the same procedure that is followed in &lt;code&gt;straight.el&lt;/code&gt; itself for making changes to recipe interpretation. These details are outlined in the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;developer manual&lt;/a&gt;; see also &lt;code&gt;install.el&lt;/code&gt; for an explanation of this aspect of the bootstrap mechanism.&lt;/p&gt; &#xA;&lt;h3&gt;Interactive usage&lt;/h3&gt; &#xA;&lt;p&gt;The primary usage of &lt;code&gt;straight.el&lt;/code&gt; is expected to be in your init-file. For example, this is where you will need to put the bootstrap code as well as any packages that you always want to be installed. However, there are three important interactive uses of &lt;code&gt;straight.el&lt;/code&gt;: temporary installation of packages, various helpful utility functions, and &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;version control operations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install a package temporarily, run &lt;code&gt;M-x straight-use-package&lt;/code&gt;. All registered recipe repositories will be cloned, and you will be presented with a combined list of all recipes available from them. Simply select a package and it will be cloned, built, and loaded automatically. This does not affect future Emacs sessions.&lt;/p&gt; &#xA;&lt;p&gt;If you provide a prefix argument to &lt;code&gt;M-x straight-use-package&lt;/code&gt;, then you are presented with a list of registered recipe repositories. After you select one, you are shown a list of recipes specifically from that recipe repository. This is helpful if you do not want to clone all registered recipe repositories, or you have a particular recipe repository in mind.&lt;/p&gt; &#xA;&lt;p&gt;You can also call &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, which has the same interface as &lt;code&gt;M-x straight-use-package&lt;/code&gt;, except that instead of the package being cloned, built, and loaded, its recipe is copied to the kill ring. If you are writing a custom recipe, this may be helpful, because you may be able to reuse parts of the existing recipe, particularly the &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;Normally, packages are rebuilt automatically if needed, when Emacs restarts. If you for some reason want them to be rebuilt at another time, you can call &lt;code&gt;M-x straight-check-all&lt;/code&gt; to rebuild all packages that have been modified since their last build. Alternatively, use &lt;code&gt;M-x straight-rebuild-all&lt;/code&gt; to unconditionally rebuild all packages. Note that this will probably take a while. There are also &lt;code&gt;M-x straight-check-package&lt;/code&gt; and &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt;, which allow you to select a particular package to check or rebuild.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you may use &lt;code&gt;M-x straight-prune-build&lt;/code&gt; in order to tell &lt;code&gt;straight.el&lt;/code&gt; to forget about any packages which were not registered since the last time you loaded your init-file. This may improve performance, although only slightly, and will clean up stale entries in the &lt;code&gt;build&lt;/code&gt; directory. You can call this function in your init-file if you really wish your filesystem to be as clean as possible, although it&#39;s not particularly recommended as the performance implications are uninvestigated. If you do call it in your init-file, be sure to only call it on a fully successful init; otherwise, an error during init will result in some packages&#39; build information being discarded, and they will need to be rebuilt next time.&lt;/p&gt; &#xA;&lt;p&gt;If you have enabled &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-how-packages-are-made-available&#34;&gt;autoloads caching&lt;/a&gt;, it is advisable to call &lt;code&gt;straight-prune-build&lt;/code&gt; occasionally, since otherwise the build cache may grow quite large over time.&lt;/p&gt; &#xA;&lt;h4&gt;Version control operations&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a number of highly interactive workflows for managing your package&#39;s local repositories, using the configured &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control backends&lt;/a&gt;. They are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-normalize-package&lt;/code&gt;: normalize a package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-normalize-all&lt;/code&gt;: normalize all packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-fetch-package&lt;/code&gt;: fetch from a package&#39;s configured remote; with prefix argument, then for forks also fetch from the upstream&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt;: fetch from the configured remotes of a package and all of its dependencies (including the dependencies of its dependencies); with prefix argment, then for forks also fetch from the upstream&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-fetch-all&lt;/code&gt;: fetch from all packages&#39; configured remotes; with prefix argument, then for forks also fetch from the upstreams&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-merge-package&lt;/code&gt;: merge the latest version fetched from a package&#39;s configured remote into the local copy; with prefix argument, then for forks also merge from the upstream&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;: merge the latest versions fetched from the configured remotes of a package and all of its dependencies (including the dependencies of its dependencies); with prefix argment, then for forks also merge from the upstreams&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-merge-all&lt;/code&gt;: merge the latest versions fetched from each package&#39;s configured remote into its local copy; with prefix argument, then for forks also merge from the upstreams&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-pull-package-and-deps&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-pull-all&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-all&lt;/code&gt; and &lt;code&gt;M-x straight-merge-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-push-package&lt;/code&gt;: push a package to its remote, if necessary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-push-all&lt;/code&gt;: push all packages to their remotes, if necessary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the sections on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control backends&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&#34;&gt;Git backend&lt;/a&gt; in particular for more information about the meanings of these operations.&lt;/p&gt; &#xA;&lt;h3&gt;Lockfile management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration from two, and only two, sources: the contents of your init-file, and your version lockfiles (which are optional). Your init-file specifies the configuration of &lt;code&gt;straight.el&lt;/code&gt; (for example, the values of &lt;code&gt;straight-recipe-overrides&lt;/code&gt; and &lt;code&gt;straight-default-vc&lt;/code&gt;), the packages you want to use, and their recipes. Your version lockfiles specify the exact revisions of each package, recipe repository, and even &lt;code&gt;straight.el&lt;/code&gt; itself. Together, they lock down your Emacs configuration to a state of no uncertainty: perfect reproducibility.&lt;/p&gt; &#xA;&lt;p&gt;To write the current revisions of all your packages into version lockfiles, run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. This will first check that &lt;code&gt;straight.el&lt;/code&gt; has an up-to-date account of what packages are installed by your init-file, then ensure that all your local changes are pushed (remember, we are aiming for perfect reproducibility!). If you wish to bypass these checks, provide a prefix argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: reloading your init-file must have the effect of running all of the same &lt;code&gt;straight.el&lt;/code&gt;-related functions again. For example, if you bootstrap &lt;code&gt;straight.el&lt;/code&gt; in a sub-file that you only &lt;code&gt;require&lt;/code&gt; instead of &lt;code&gt;load&lt;/code&gt;, then the reloading functionality will not work correctly and you may receive the message &lt;code&gt;Caches are still outdated; something is seriously wrong&lt;/code&gt;. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/437&#34;&gt;#437&lt;/a&gt; for discussion.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Version lockfiles are written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. By default, there will be one, called &lt;code&gt;default.el&lt;/code&gt;. It is recommended that you keep your version lockfiles under version control with the rest of your Emacs configuration. If you symlink your init-file into &lt;code&gt;~/.emacs.d&lt;/code&gt; from somewhere else, you should also make sure to symlink your version lockfiles into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. On a new machine, do this &lt;em&gt;before&lt;/em&gt; launching Emacs: that way, &lt;code&gt;straight.el&lt;/code&gt; can make sure to check out the specified revisions of each package when cloning them for the first time.&lt;/p&gt; &#xA;&lt;p&gt;To install the versions of the packages specified in your version lockfiles, run &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;. Thawing will interactively check for local changes before checking out the relevant revisions, so don&#39;t worry about things getting overwritten.&lt;/p&gt; &#xA;&lt;h4&gt;The profile system&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; has support for writing multiple version lockfiles, instead of just one. Why? Consider a large Emacs configuration such as &lt;a href=&#34;https://github.com/raxod502/radian&#34;&gt;Radian&lt;/a&gt;, &lt;a href=&#34;http://spacemacs.org/&#34;&gt;Spacemacs&lt;/a&gt;, or &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Prelude&lt;/a&gt;, which is used by many different people. There are two parts to the configuration that is actually loaded: the &#34;default&#34; part, and the local customizations that each user has added. Generally, these configurations have a mechanism for making local customizations without forking the entire project.&lt;/p&gt; &#xA;&lt;p&gt;So Radian will have some set of packages that it requires, and my local customizations of Radian have some other set of packages that they require. In order for me to maintain Radian, I need to be able to separate Radian&#39;s packages (which go into a versions lockfile in the Radian repository) from my own local packages (which go into a versions lockfile in my own private local dotfiles repository). &lt;code&gt;straight.el&lt;/code&gt; provides this ability through the &lt;em&gt;profile system&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The idea is that whenever a package is registered, either directly or as a dependency, it is associated with a given profile. Any given package can be associated with multiple profiles.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, which profile the registered packages are associated with is determined by the value of &lt;code&gt;straight-current-profile&lt;/code&gt;, which defaults to nil. In Radian, for example, &lt;code&gt;straight-current-profile&lt;/code&gt; is bound to &lt;code&gt;radian&lt;/code&gt; while the Radian libraries are being loaded, and it is bound to &lt;code&gt;radian-local&lt;/code&gt; while the user&#39;s local customizations are being loaded. This results in Radian packages being associated with the &lt;code&gt;radian&lt;/code&gt; profile, and the user&#39;s local packages being associated with the &lt;code&gt;radian-local&lt;/code&gt; profile.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;, one or more version lockfiles are written, according to the value of &lt;code&gt;straight-profiles&lt;/code&gt;. This variable is an association list whose keys are symbols naming profiles and whose values are filenames for the corresponding version lockfiles to be written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. You should make sure that each potential value of &lt;code&gt;straight-current-profile&lt;/code&gt; has a corresponding entry in &lt;code&gt;straight-profiles&lt;/code&gt;, since otherwise some packages might not be written into your lockfiles.&lt;/p&gt; &#xA;&lt;p&gt;When customizing &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-recipes&#34;&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt;&lt;/a&gt;, note that if multiple profiles are set to override the same recipe, then the last one listed in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence. Similarly, when using &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;, if different lockfiles specify revisions for the same local repository, the last one in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence.&lt;/p&gt; &#xA;&lt;h3&gt;Packages and the init-file&lt;/h3&gt; &#xA;&lt;p&gt;Package managers like &lt;code&gt;package.el&lt;/code&gt; store mutable state outside your init-file, including the set of packages that are installed. &lt;code&gt;straight.el&lt;/code&gt; does not do this, so it has a rather different way of determining what packages are installed. To &lt;code&gt;straight.el&lt;/code&gt;, a package is part of your Emacs configuration if it is passed to &lt;code&gt;straight-use-package&lt;/code&gt; when your init-file is loaded.&lt;/p&gt; &#xA;&lt;p&gt;Note that this means packages installed interactively (using &lt;code&gt;M-x straight-use-package&lt;/code&gt;) are not considered part of your Emacs configuration, since the invocation of &lt;code&gt;straight-use-package&lt;/code&gt; does not happen in your init-file.&lt;/p&gt; &#xA;&lt;p&gt;This raises an interesting question: if you &lt;em&gt;add&lt;/em&gt; a package to your init-file, how can you convince &lt;code&gt;straight.el&lt;/code&gt; that it really is part of your init-file, and not just part of a temporary &lt;code&gt;straight-use-package&lt;/code&gt; form that you evaluated ad-hoc? The answer is simple: &lt;em&gt;reload your entire init-file&lt;/em&gt;. That way, &lt;code&gt;straight.el&lt;/code&gt; will see whether or not that package is registered during your init-file.&lt;/p&gt; &#xA;&lt;p&gt;One might ask how &lt;code&gt;straight.el&lt;/code&gt; determines that you have finished loading your init-file. The answer is simple: &lt;code&gt;post-command-hook&lt;/code&gt; is used to execute code only after the current interactive operation has finished. The implementation of this concept is part of the &lt;em&gt;transaction system&lt;/em&gt; of &lt;code&gt;straight.el&lt;/code&gt;, and it is also used to amortize certain performance costs when many calls to &lt;code&gt;straight-use-package&lt;/code&gt; are made sequentially. However, since the transaction system (at least in recent versions of &lt;code&gt;straight.el&lt;/code&gt;) operates transparently, its details are relegated to the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;developer manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/h3&gt; &#xA;&lt;h4&gt;... in other packages&lt;/h4&gt; &#xA;&lt;p&gt;One of the major reasons I wanted to write &lt;code&gt;straight.el&lt;/code&gt; was that existing package managers were not good for reproducing bugs. For instance, some of them would load all installed packages when the package manager was initialized! Obviously that is not acceptable for a &#34;minimal test case&#34;.&lt;/p&gt; &#xA;&lt;p&gt;On the contrary, bootstrapping &lt;code&gt;straight.el&lt;/code&gt; does not load anything except for &lt;code&gt;straight.el&lt;/code&gt; itself (the default recipe repositories are registered, but not cloned until needed). You should normally be loading &lt;code&gt;straight.el&lt;/code&gt; by means of the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;bootstrap snippet&lt;/a&gt;, but when you are in &lt;code&gt;emacs -Q&lt;/code&gt;, here is how you can initialize &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x load-file RET ~/.emacs.d/straight/repos/straight.el/bootstrap.el RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also do this from the command line, perhaps by creating an alias for it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ emacs -Q -l ~/.emacs.d/straight/repos/straight.el/bootstrap.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s say you are making a bug report for Projectile. To load just Projectile and all of its dependencies, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x straight-use-package RET projectile RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this will use the currently checked-out revisions of Projectile and all of its dependencies, so you should take note of those in order to make your bug report.&lt;/p&gt; &#xA;&lt;h4&gt;... in &lt;code&gt;straight.el&lt;/code&gt; itself&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a macro, &lt;code&gt;straight-bug-report&lt;/code&gt;, to test &lt;code&gt;straight.el&lt;/code&gt; in a clean environment. If possible, please use this when creating bug reports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-bug-report&lt;/code&gt; accepts the following keyword value pairs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:pre-bootstrap (Form)...&lt;/code&gt; Forms evaluated before bootstrapping &lt;code&gt;straight.el&lt;/code&gt; e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq straight-repository-branch &#34;develop&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Note this example is already in the default bootstrapping code.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:post-bootstrap (Form)...&lt;/code&gt; Forms evaluated in the testing environment after boostrapping. e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(example :type git :host github))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:interactive Boolean&lt;/code&gt; If nil, the subprocess will immediately exit after the test. Output will be printed to &lt;code&gt;straight-bug-report--process-buffer&lt;/code&gt; Otherwise, the subprocess will be interactive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:preserve Boolean&lt;/code&gt; If t, the test directory is left in the directory stored in the variable `temporary-file-directory&#39;. Otherwise, it is immediately removed after the test is run.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:executable String&lt;/code&gt; Indicate the Emacs executable to launch. Defaults to &lt;code&gt;&#34;emacs&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:raw Boolean&lt;/code&gt; If t, the raw process output is sent to &lt;code&gt;straight-bug-report--process-buffer&lt;/code&gt;. Otherwise, it is formatted as markdown for submitting as an issue.&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-bug-report&#xA;  :pre-bootstrap&#xA;  (message &#34;before bootstrap&#34;)&#xA;  (message &#34;multiple forms allowed&#34;)&#xA;  :post-bootstrap&#xA;  (message &#34;after bootstrap&#34;)&#xA;  (message &#34;multiple forms allowed&#34;)&#xA;  (straight-use-package &#39;(my-broken-package))&#xA;  (message &#34;bye&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will run your test in a clean environment and produce a buffer with information you can paste directly into the issue body.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/h3&gt; &#xA;&lt;p&gt;The workflow for developing a package using &lt;code&gt;straight.el&lt;/code&gt; is quite straightforward:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the package to your configuration as usual, via a call to &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;M-x find-function&lt;/code&gt; or a similar command to jump to the code you wish to edit.&lt;/li&gt; &#xA; &lt;li&gt;Edit the code.&lt;/li&gt; &#xA; &lt;li&gt;Either evaluate the edited code using &lt;code&gt;M-x eval-buffer&lt;/code&gt;, &lt;code&gt;M-x eval-defun&lt;/code&gt;, or a similar command, or just restart Emacs to pick up your changes.&lt;/li&gt; &#xA; &lt;li&gt;When you are satisfied with your changes, use &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; or just Git directly in order to commit and possibly push them. I suggest using &lt;a href=&#34;https://github.com/magit/forge&#34;&gt;Forge&lt;/a&gt; to create pull requests directly from Emacs, with Magit integration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integration with other packages&lt;/h3&gt; &#xA;&lt;h4&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; installs a new keyword &lt;code&gt;:straight&lt;/code&gt; for &lt;code&gt;use-package&lt;/code&gt; which may be used to install packages via &lt;code&gt;straight.el&lt;/code&gt;. The algorithm is extremely simple. This:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;macroexpands (essentially) to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;el-patch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight (:host github :repo &#34;raxod502/el-patch&#34;&#xA;             :branch &#34;develop&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :host github :repo &#34;raxod502/el-patch&#34;&#xA;            :branch &#34;develop&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the feature you are requiring with &lt;code&gt;use-package&lt;/code&gt; is different from the package name, you can provide a full recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package tex-site&#xA;  :straight (auctex :host github&#xA;                    :repo &#34;emacsmirror/auctex&#34;&#xA;                    :files (:defaults (:exclude &#34;*.el.in&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you may also provide just the package name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package tex-site&#xA;  :straight auctex)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t provide &lt;code&gt;:straight&lt;/code&gt;, then by default nothing happens. You may customize &lt;code&gt;straight-use-package-by-default&lt;/code&gt; to make it so that &lt;code&gt;:straight t&lt;/code&gt; is assumed unless you explicitly override it with &lt;code&gt;:straight nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Previously, &lt;code&gt;straight.el&lt;/code&gt; used a different syntax for its &lt;code&gt;use-package&lt;/code&gt; integration. For backwards compatibility, you can use this syntax instead by customizing &lt;code&gt;straight-use-package-version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can disable &lt;code&gt;use-package&lt;/code&gt; integration entirely by customizing &lt;code&gt;straight-enable-use-package-integration&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&#34;Integration&#34; with &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;package.el&lt;/code&gt; will automatically insert a call to &lt;code&gt;package-initialize&lt;/code&gt; into your init-file as soon as Emacs starts, which is ridiculous. It will also do this when you perform any package management operation. A separate system inserts some &lt;code&gt;custom&lt;/code&gt; forms into your init-file when you install a package. &lt;code&gt;straight.el&lt;/code&gt; disables all of these &#34;features&#34; by setting &lt;code&gt;package-enable-at-startup&lt;/code&gt; to nil and enabling some advices. You can override this behavior by customizing &lt;code&gt;straight-enable-package-integration&lt;/code&gt;, however.&lt;/p&gt; &#xA;&lt;p&gt;To help avoid you shooting yourself in the foot by using both &lt;code&gt;:ensure&lt;/code&gt; and &lt;code&gt;:straight&lt;/code&gt; at the same time in a &lt;code&gt;use-package&lt;/code&gt; form (which would cause the same package to be installed twice using two different package managers), &lt;code&gt;straight.el&lt;/code&gt; will helpfully disable &lt;code&gt;:ensure&lt;/code&gt; whenever you include &lt;code&gt;:straight&lt;/code&gt; in a &lt;code&gt;use-package&lt;/code&gt; form. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/425&#34;&gt;#425&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Integration with Flycheck&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flycheck.org/en/latest/&#34;&gt;Flycheck&lt;/a&gt; sometimes creates temporary files in order to perform syntax checking. This is a problem for &lt;code&gt;straight.el&lt;/code&gt; because creation of temporary files will cause &lt;code&gt;straight.el&lt;/code&gt; to think that you have modified a package when you actually have not. (You might ask why &lt;code&gt;straight.el&lt;/code&gt; cannot recognize temporary files and ignore them. The answer is that for eager modification checking, all we see is that the directory mtime for the repository has been updated, and there&#39;s no way to disambiguate between temporary file shenanigans versus if you, say, deleted a file.)&lt;/p&gt; &#xA;&lt;p&gt;To work around the problem, a user option &lt;code&gt;straight-fix-flycheck&lt;/code&gt; is provided, disabled by default (for now). You can enable it &lt;em&gt;before&lt;/em&gt; loading &lt;code&gt;straight.el&lt;/code&gt;, and it will work around the Flycheck problem in the following way. When you first visit a buffer, any Flycheck checker that involves creation of temporary files will be inhibited automatically, although other checkers will still run. (In practice this means no byte-compilation errors for Emacs Lisp, but you still get Checkdoc errors.) However, after you make a change to the buffer (by typing, etc.) then all checkers will be re-enabled. This means that &lt;code&gt;straight.el&lt;/code&gt; won&#39;t think the package was modified unless you actually modify the buffer of a file inside it, which I think is a reasonable compromise.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/508&#34;&gt;#508&lt;/a&gt; for discussion.&lt;/p&gt; &#xA;&lt;h4&gt;Integration with Hydra&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/abo-abo/hydra/wiki/straight.el&#34;&gt;the Hydra wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; explains what it is doing in the echo area, like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Looking for cider recipe â Cloning melpa...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your terminal does not support Unicode characters nicely, you can customize &lt;code&gt;straight-arrow&lt;/code&gt; to display something else for the arrow.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; reports process output the &lt;code&gt;*straight-process*&lt;/code&gt; buffer. You can customize the name of this buffer via the &lt;code&gt;straight-process-buffer&lt;/code&gt; user option. If you want to hide this buffer by default, consider adding a leading space to the name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can prevent &lt;code&gt;straight.el&lt;/code&gt; from making any modifications to the filesystem (though it may still read) by customizing the user option &lt;code&gt;straight-safe-mode&lt;/code&gt; to non-nil. This may be useful for running tasks automatically in batch mode, to avoid multiple concurrent Emacs processes all making changes to the filesystem. For an example of how this feature may be used to safely implement asynchronous byte-compilation of the init-file on successful startup, see &lt;a href=&#34;https://github.com/raxod502/radian&#34;&gt;Radian&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer manual&lt;/h2&gt; &#xA;&lt;p&gt;This section tells you about all the interesting implementation details and design decisions that power &lt;code&gt;straight.el&lt;/code&gt; behind the scenes. It assumes you have already read the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#user-manual&#34;&gt;user manual&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#conceptual-overview&#34;&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More to be written here in future. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/51&#34;&gt;#51&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Low-level functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The function &lt;code&gt;straight-chase-emulated-symlink&lt;/code&gt; is provided in order for external packages to correctly handle the emulated symlinks created by &lt;code&gt;straight.el&lt;/code&gt; when &lt;code&gt;straight-use-symlinks&lt;/code&gt; is nil. See, for example, &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/520&#34;&gt;#520&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Trivia&lt;/h2&gt; &#xA;&lt;p&gt;This section has random, (possibly) interesting tidbits about &lt;code&gt;straight.el&lt;/code&gt; that don&#39;t fit in the other sections.&lt;/p&gt; &#xA;&lt;h3&gt;Comments and docstrings&lt;/h3&gt; &#xA;&lt;p&gt;How did I get that statistic about the percentage of &lt;code&gt;straight.el&lt;/code&gt; that is comments and docstrings? Simple: by abusing the syntax highlighting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(let ((lines (make-hash-table :test #&#39;equal)))&#xA;  (goto-char (point-min))&#xA;  (while (&amp;lt; (point) (point-max))&#xA;    (when (memq (face-at-point)&#xA;                &#39;(font-lock-comment-face&#xA;                  font-lock-doc-face))&#xA;      (puthash (line-number-at-pos) t lines))&#xA;    (forward-char))&#xA;  (* (/ (float (length (hash-table-keys lines)))&#xA;        (line-number-at-pos))&#xA;     100))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you will have to scroll through the entire buffer first, since &lt;code&gt;font-lock-mode&lt;/code&gt; computes syntax highlighting lazily.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please do! Development takes place on the &lt;code&gt;develop&lt;/code&gt; branch. You can switch to that branch with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq straight-repository-branch &#34;develop&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and base your pull requests from it. If you have an outstanding pull request whose features you would like to use in your configuration, there is full support for defining &lt;code&gt;straight.el&lt;/code&gt; as coming from any branch in any fork:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq straight-repository-user &#34;my-github-username&#34;)&#xA;(setq straight-repository-branch &#34;feat/my-cool-feature&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional information, please see &lt;a href=&#34;https://github.com/raxod502/contributor-guide&#34;&gt;the contributor guide for my projects&lt;/a&gt;. Note that &lt;code&gt;straight.el&lt;/code&gt; has not yet had an initial release, so you don&#39;t have to worry about a changelog.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;My init time got slower&lt;/h3&gt; &#xA;&lt;p&gt;Your first step should be to customize the value of &lt;code&gt;straight-check-for-modifications&lt;/code&gt;. The best setting is &lt;code&gt;(watch-files find-when-checking)&lt;/code&gt;; this is not enabled by default because it is impolite to spawn persistent background processes without asking, and because you must install &lt;a href=&#34;https://www.python.org/&#34;&gt;Python 3&lt;/a&gt; and &lt;a href=&#34;https://github.com/mattgreen/watchexec&#34;&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; for it to work. If you can&#39;t stand the extra dependencies and background process, consider the setting &lt;code&gt;(check-on-save find-when-checking)&lt;/code&gt; instead, which is just as fast but won&#39;t catch package modifications unless they are made within Emacs via the &lt;code&gt;save-buffer&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Even with lazy modification detection, as described above, &lt;code&gt;straight.el&lt;/code&gt; is not quite as fast as &lt;code&gt;package.el&lt;/code&gt; (by a few percentage points). There are some planned changes which will make &lt;code&gt;straight.el&lt;/code&gt; just as fast as &lt;code&gt;package.el&lt;/code&gt;, if not faster. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/9&#34;&gt;#9&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&#34;Could not find package in recipe repositories&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Assuming that the package you&#39;re trying to install actually exists, you need to update your recipe repositories (most likely MELPA, possibly Emacsmirror). See the next FAQ entry. This is like running &lt;code&gt;package-refresh-contents&lt;/code&gt; under &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another possibility is that you are providing &lt;code&gt;straight.el&lt;/code&gt; with a feature name rather than a package name. Features are what you load with &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;load&lt;/code&gt;, or find in files. For example, &lt;code&gt;org-agenda&lt;/code&gt; and &lt;code&gt;org-capture&lt;/code&gt; are features. Packages, on the other hand, can provide one or more features. They are what are listed on MELPA et al. or by &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;. For example, &lt;code&gt;org&lt;/code&gt; and &lt;code&gt;org-contrib&lt;/code&gt; are packages.&lt;/p&gt; &#xA;&lt;p&gt;When you write &lt;code&gt;(use-package foo ...)&lt;/code&gt;, the &lt;code&gt;foo&lt;/code&gt; is a &lt;em&gt;feature&lt;/em&gt;, not a package. You can give a different package name &lt;code&gt;bar&lt;/code&gt; by saying &lt;code&gt;(use-package foo :straight bar)&lt;/code&gt;. And when you write &lt;code&gt;(straight-use-package &#39;bar)&lt;/code&gt;, the &lt;code&gt;bar&lt;/code&gt; is a &lt;em&gt;package&lt;/em&gt;, not a feature.&lt;/p&gt; &#xA;&lt;h3&gt;How do I update MELPA et al.?&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;, like for any other package. &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#updating-recipe-repositories&#34;&gt;Read more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;My &lt;code&gt;use-package&lt;/code&gt; form isn&#39;t working properly&lt;/h3&gt; &#xA;&lt;p&gt;There are a number of common problems you might be encountering. Check out the following list to see if there is an easy fix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you&#39;re not using &lt;code&gt;:ensure&lt;/code&gt; or &lt;code&gt;use-package-always-ensure&lt;/code&gt;. Those are for &lt;code&gt;package.el&lt;/code&gt; and using them with &lt;code&gt;straight.el&lt;/code&gt; will produce weird results (namely both &lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; will be invoked for the same package).&lt;/li&gt; &#xA; &lt;li&gt;Make sure you know &lt;em&gt;both&lt;/em&gt; the name of the feature and the name of the package. These are usually the same but not always (packages may provide more than one feature, ...). You give &lt;code&gt;use-package&lt;/code&gt; the name of a &lt;em&gt;feature&lt;/em&gt;, not a package (despite the name of the macro). With &lt;code&gt;straight-use-package-by-default&lt;/code&gt; or with &lt;code&gt;:straight t&lt;/code&gt;, the default is to try installing a package by the same name as the feature. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you don&#39;t actually need to install a package, then pass &lt;code&gt;:straight nil&lt;/code&gt; to override &lt;code&gt;straight-use-package-by-default&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If the package name is different from the feature name, then pass &lt;code&gt;:straight &amp;lt;package-name&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the package or your configurations aren&#39;t being loaded, you probably have something wrong with your usage of &lt;code&gt;:init&lt;/code&gt; and &lt;code&gt;:config&lt;/code&gt;. By default, the behavior of &lt;code&gt;use-package&lt;/code&gt; is unusably inconsistent. You must set either &lt;code&gt;use-package-always-defer&lt;/code&gt; (override with &lt;code&gt;:demand t&lt;/code&gt;) or &lt;code&gt;use-package-always-demand&lt;/code&gt; (override with &lt;code&gt;:defer t&lt;/code&gt;) to set a default for whether evaluating a &lt;code&gt;use-package&lt;/code&gt; form will load the package and your configurations. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you&#39;ve set a package to be deferred, you then need to make sure there&#39;s a way for it to get loaded when needed, for example by means of an autoload (either provided by the package, or set up automatically by &lt;code&gt;use-package&lt;/code&gt; via &lt;code&gt;:bind&lt;/code&gt;, or set up manually through &lt;code&gt;use-package&lt;/code&gt; via &lt;code&gt;:commands&lt;/code&gt;) or by an explicit &lt;code&gt;require&lt;/code&gt; in one of your custom commands.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I uninstall a package?&lt;/h3&gt; &#xA;&lt;p&gt;My first question is: do you really need to uninstall the package? Under &lt;code&gt;package.el&lt;/code&gt;, every package on disk gets loaded into Emacs, whether you asked for it or not. However, under &lt;code&gt;straight.el&lt;/code&gt;, only the packages you explicitly mention in your init-file get loaded into Emacs. So the &lt;em&gt;only&lt;/em&gt; problem with leaving a package on disk is that it takes up a little bit of disk space. (But the advantage is if you decide you want to use that package again later then you won&#39;t have to redownload it.)&lt;/p&gt; &#xA;&lt;p&gt;If you really want to uninstall a package, simply delete its local repository from &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;. To automate the process of deleting packages that aren&#39;t mentioned by your init-file, you can load the &lt;code&gt;straight-x&lt;/code&gt; library and try out the user-contributed function &lt;code&gt;straight-x-clean-unused-repos&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The wrong version of my package was loaded&lt;/h3&gt; &#xA;&lt;p&gt;To explain this problem, let us consider a concrete example. In &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/355&#34;&gt;this issue&lt;/a&gt;, a user found that the code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;company-lsp)&#xA;(straight-use-package &#39;eglot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;sometimes resulted in runtime errors because an old version of Flymake was being used.&lt;/p&gt; &#xA;&lt;p&gt;The root problem here is that you want the most recent version of Flymake to be installed by &lt;code&gt;straight.el&lt;/code&gt;, but Emacs also ships an older version, and that older version is getting loaded instead.&lt;/p&gt; &#xA;&lt;p&gt;The older version will be loaded if &lt;code&gt;(require &#39;flymake)&lt;/code&gt; (or similar) is invoked before &lt;code&gt;straight.el&lt;/code&gt; has made Flymake available (by means of &lt;code&gt;(straight-use-package &#39;flymake)&lt;/code&gt; or similar). But why would &lt;code&gt;straight.el&lt;/code&gt; not make Flymake available?&lt;/p&gt; &#xA;&lt;p&gt;The only way that &lt;code&gt;straight.el&lt;/code&gt; knows to make Flymake available is if either you manually invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file, or if one of the packages that you request in your init-file declares Flymake as a dependency. Now, any package that uses Flymake ought to declare it as a dependency. Thus, there should be no way for a package to load the Emacs-provided version of Flymake. However, sometimes package authors overlook this problem (it does not always cause an error, and sometimes package authors do not test exhaustively enough).&lt;/p&gt; &#xA;&lt;p&gt;In this case, the problem was that &lt;code&gt;company-lsp&lt;/code&gt; declared a dependency on &lt;code&gt;lsp-mode&lt;/code&gt;, and &lt;code&gt;lsp-mode&lt;/code&gt; used Flymake without declaring a dependency on &lt;code&gt;flymake&lt;/code&gt;. There are two ways to work around the problem:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Preferable) Fix &lt;code&gt;lsp-mode&lt;/code&gt; to declare a dependency on &lt;code&gt;flymake&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(Workaround) Manually invoke &lt;code&gt;(straight-use-package &#39;flymake)&lt;/code&gt; before &lt;code&gt;(straight-use-package &#39;company-lsp)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you test this yourself, you might find it difficult to reproduce the problem. That is because there is only an issue when Flymake is actually loaded, and this doesn&#39;t necessarily happen when invoking &lt;code&gt;(straight-use-package &#39;company-lsp)&lt;/code&gt; &lt;em&gt;unless&lt;/em&gt; &lt;code&gt;straight.el&lt;/code&gt; needs to rebuild the relevant packages (which includes byte-compilation, which sometimes means actually loading dependencies). Keep this in mind when testing.&lt;/p&gt; &#xA;&lt;p&gt;This problem commonly occurs with Org, since (1) Org is popular, (2) Emacs ships an obsolete version of Org, (3) many users want to use the up-to-date version, and (4) Org breaks backwards compatibility frequently. To solve it, simply make sure that you invoke &lt;code&gt;(straight-use-package &#39;org)&lt;/code&gt; before running any code that could load Org, including installing any package that lists it as a dependency.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/236&#34;&gt;this issue&lt;/a&gt; for discussion about ways of mitigating the bad UX of this situation.&lt;/p&gt; &#xA;&lt;h3&gt;I get &#34;could not read username/password&#34; errors&lt;/h3&gt; &#xA;&lt;p&gt;This is because &lt;code&gt;straight.el&lt;/code&gt; is not currently able to detect when SSH or Git asks for your username and/or password/passphrase and then pipe that prompt through to the minibuffer (&lt;a href=&#34;https://github.com/raxod502/straight.el/issues/334&#34;&gt;#334&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To work around the problem, set up &lt;a href=&#34;https://git-scm.com/docs/git-credential-cache&#34;&gt;git-credential-cache&lt;/a&gt; if you use HTTPS, and &lt;a href=&#34;https://www.ssh.com/ssh/agent&#34;&gt;ssh-agent&lt;/a&gt; if you use SSH. That way, you won&#39;t be prompted for your username/password. When setting up ssh-agent, be careful to make sure that the relevant environment variables get set in Emacs. This might be tricky since starting Emacs from the desktop (rather than from the command line) sometimes results in it not inheriting any environment variables from your shell.&lt;/p&gt; &#xA;&lt;h3&gt;How do I pin package versions or use only tagged releases?&lt;/h3&gt; &#xA;&lt;p&gt;This is a planned feature. In the meantime, contributors have proposed various workarounds. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/246&#34;&gt;#246&lt;/a&gt; and &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;#31&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-x.el&lt;/code&gt; now contains an experimental solution. In order to use it you will need to add similar snippets to your Emacs configuration.&lt;/p&gt; &#xA;&lt;p&gt;First you need to add a new profile to &lt;code&gt;straight-profiles&lt;/code&gt; which also needs to be the last profile in the list. This should be done before you bootstrap &lt;code&gt;straight.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Tell straight.el about the profiles we are going to be using.&#xA;(setq straight-profiles&#xA;      &#39;((nil . &#34;default.el&#34;)&#xA;        ;; Packages which are pinned to a specific commit.&#xA;        (pinned . &#34;pinned.el&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After straight&#39;s install procedure you will need to add &lt;code&gt;straight-x.el&lt;/code&gt; and load the required commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(autoload #&#39;straight-x-pull-all &#34;straight-x&#34;)&#xA;(autoload #&#39;straight-x-freeze-versions &#34;straight-x&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A variable called &lt;code&gt;straight-x-pinned-packages&lt;/code&gt; has been defined in &lt;code&gt;straight-x.el&lt;/code&gt; and will contain your list of pinned packages.&lt;/p&gt; &#xA;&lt;p&gt;From now on, you can pin a package to a specific commit like in the following example which will pin &lt;code&gt;org-mode&lt;/code&gt; to the 9.2.3 release version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(let ((straight-current-profile &#39;pinned))&#xA;  (straight-use-package &#39;org)&#xA;  (straight-use-package &#39;org-contrib)&#xA;  ;; Pin org-mode version.&#xA;  (add-to-list &#39;straight-x-pinned-packages&#xA;               &#39;(&#34;org&#34; . &#34;924308a150ab82014b69c46c04d1ab71e874a2e6&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you invoke &lt;code&gt;straight-x-freeze-versions&lt;/code&gt; it will first write the default lockfile and then pinned lockfile which takes precedence over the default one if packages are thawed. &lt;code&gt;straight-x-pull-all&lt;/code&gt; will first invoke &lt;code&gt;straight-pull-all&lt;/code&gt; and then restore all pinned packages.&lt;/p&gt; &#xA;&lt;p&gt;You might want to assign the following aliases for more convenience:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defalias &#39;straight-pull-all #&#39;straight-x-pull-all)&#xA;(defalias &#39;straight-freeze-versions #&#39;straight-x-freeze-versions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please keep in mind that this is only a temporary solution and experimental!&lt;/p&gt; &#xA;&lt;h3&gt;How can I use the built-in version of a package?&lt;/h3&gt; &#xA;&lt;p&gt;To tell &lt;code&gt;straight.el&lt;/code&gt; that you want to use the version of Org shipped with Emacs, rather than cloning the upstream repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(org :type built-in))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;:type&lt;/code&gt; is a keyword for &lt;code&gt;straight.el&lt;/code&gt;, not for &lt;code&gt;use-package&lt;/code&gt;. If you are using &lt;code&gt;use-package&lt;/code&gt;, then use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org :straight (:type built-in))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;Read more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;h3&gt;Jan 1, 2021&lt;/h3&gt; &#xA;&lt;p&gt;Breaking change: The previous behavior of the &lt;code&gt;:build&lt;/code&gt; keyword is now associated with the &lt;code&gt;:pre-build&lt;/code&gt; keyword. &lt;code&gt;:build&lt;/code&gt; is now used to specify build steps (generating autoloads and texinfo, byte/native compilation, etc). For more information on both of these keywords see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;the recipe format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following customization variable names have changed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-disable-byte-compilation&lt;/code&gt; is now &lt;code&gt;straight-disable-compile&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-disable-native-compilation&lt;/code&gt; is now &lt;code&gt;straight-disable-native-compile&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;April 19, 2020&lt;/h3&gt; &#xA;&lt;p&gt;Shallow clones are now compatible with lockfiles, so you can safely set &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; and get massive savings on network bandwidth and disk space.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jacktasia/dumb-jump</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/jacktasia/dumb-jump</id>
    <link href="https://github.com/jacktasia/dumb-jump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;an Emacs &#34;jump to definition&#34; package for 50+ languages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dumb-jump&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jacktasia/dumb-jump/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://coveralls.io/github/jacktasia/dumb-jump?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/jacktasia/dumb-jump/badge.svg?branch=master&amp;amp;service=github&amp;amp;x=1&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/dumb-jump&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/dumb-jump-badge.svg?x=6&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/dumb-jump&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/dumb-jump-badge.svg?x=1&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jacktasia/dumb-jump/master/media/dumb-jump-example-v2.gif?raw=true&#34; alt=&#34;Dumb Jump GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dumb Jump&lt;/strong&gt; is an Emacs &#34;jump to definition&#34; package with support for 50+ programming languages that favors &#34;just working&#34;. This means minimal -- and ideally zero -- configuration with absolutely no stored indexes (TAGS) or persistent background processes. Dumb Jump requires at least GNU Emacs &lt;code&gt;24.3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;How it works&lt;/h4&gt; &#xA;&lt;p&gt;Dumb Jump uses &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;The Silver Searcher&lt;/a&gt; &lt;code&gt;ag&lt;/code&gt;, &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; &lt;code&gt;rg&lt;/code&gt;, or &lt;code&gt;grep&lt;/code&gt; to find potential definitions of a function or variable under point. It uses a set of regular expressions based on the file extension, or &lt;code&gt;major-mode&lt;/code&gt;, of the current buffer. The matches are run through a shared set of heuristic methods to find the best candidate to jump to. If it can&#39;t decide it will present the user with a list in a pop-menu, helm, or ivy (see &lt;code&gt;dumb-jump-selector&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Success Rate&lt;/h4&gt; &#xA;&lt;p&gt;For the currently &lt;a href=&#34;https://raw.githubusercontent.com/jacktasia/dumb-jump/master/#supported-languages&#34;&gt;supported languages&lt;/a&gt; it seems to do a good job of finding what you want. If you find a case where it does not work as expected do not hesitate to &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues&#34;&gt;open an issue&lt;/a&gt;. It can be slow if it needs to use &lt;code&gt;grep&lt;/code&gt; and/or a project is large. Although it can be sped up by &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher#installing&#34;&gt;installing &lt;code&gt;ag&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/BurntSushi/ripgrep#installation&#34;&gt;installing &lt;code&gt;rg&lt;/code&gt;&lt;/a&gt; and/or creating a &lt;code&gt;.dumbjump&lt;/code&gt; file in your project&#39;s root directory with paths that should be excluded (&lt;a href=&#34;https://raw.githubusercontent.com/jacktasia/dumb-jump/master/#configuration&#34;&gt;see configuration&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Supported Languages&lt;/h2&gt; &#xA;&lt;p&gt;There is currently basic support for the following languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apex&lt;/li&gt; &#xA; &lt;li&gt;Bash&lt;/li&gt; &#xA; &lt;li&gt;C/C++&lt;/li&gt; &#xA; &lt;li&gt;C#&lt;/li&gt; &#xA; &lt;li&gt;Clojure&lt;/li&gt; &#xA; &lt;li&gt;CoffeeScript&lt;/li&gt; &#xA; &lt;li&gt;Common Lisp&lt;/li&gt; &#xA; &lt;li&gt;Coq&lt;/li&gt; &#xA; &lt;li&gt;Crystal&lt;/li&gt; &#xA; &lt;li&gt;Dart&lt;/li&gt; &#xA; &lt;li&gt;Elixir&lt;/li&gt; &#xA; &lt;li&gt;Emacs Lisp&lt;/li&gt; &#xA; &lt;li&gt;Erlang&lt;/li&gt; &#xA; &lt;li&gt;F#&lt;/li&gt; &#xA; &lt;li&gt;Faust&lt;/li&gt; &#xA; &lt;li&gt;Fennel&lt;/li&gt; &#xA; &lt;li&gt;Fortran&lt;/li&gt; &#xA; &lt;li&gt;Go&lt;/li&gt; &#xA; &lt;li&gt;Groovy&lt;/li&gt; &#xA; &lt;li&gt;Haskell&lt;/li&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA; &lt;li&gt;JavaScript&lt;/li&gt; &#xA; &lt;li&gt;Julia&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&lt;/li&gt; &#xA; &lt;li&gt;LaTeX&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;Matlab&lt;/li&gt; &#xA; &lt;li&gt;Nim&lt;/li&gt; &#xA; &lt;li&gt;Nix&lt;/li&gt; &#xA; &lt;li&gt;Objective-C&lt;/li&gt; &#xA; &lt;li&gt;OCaml&lt;/li&gt; &#xA; &lt;li&gt;OpenSCAD&lt;/li&gt; &#xA; &lt;li&gt;Org mode&lt;/li&gt; &#xA; &lt;li&gt;Pascal&lt;/li&gt; &#xA; &lt;li&gt;Perl&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Protocol Buffers&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;R&lt;/li&gt; &#xA; &lt;li&gt;Racket&lt;/li&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Sass&lt;/li&gt; &#xA; &lt;li&gt;Scala&lt;/li&gt; &#xA; &lt;li&gt;Scheme&lt;/li&gt; &#xA; &lt;li&gt;SML&lt;/li&gt; &#xA; &lt;li&gt;Solidity&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA; &lt;li&gt;SystemVerilog&lt;/li&gt; &#xA; &lt;li&gt;Tcl&lt;/li&gt; &#xA; &lt;li&gt;Terraform / HCL&lt;/li&gt; &#xA; &lt;li&gt;TypeScript&lt;/li&gt; &#xA; &lt;li&gt;Vala&lt;/li&gt; &#xA; &lt;li&gt;VHDL&lt;/li&gt; &#xA; &lt;li&gt;Zig&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have any issues with the existing languages, or you want support for another one, then please &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues&#34;&gt;open an issue&lt;/a&gt;. PRs are also welcome. If you&#39;d like to add a language these PRs for &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/pull/33&#34;&gt;lua&lt;/a&gt; and &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/pull/57&#34;&gt;rust&lt;/a&gt; are good examples.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install Dumb Jump is via &lt;code&gt;package.el&lt;/code&gt;. It&#39;s available on &lt;a href=&#34;http://melpa.org/#/dumb-jump&#34;&gt;MELPA&lt;/a&gt;: &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install dumb-jump&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Spacemacs&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using an up-to-date Spacemacs, then you already have Dumb Jump by default just make sure you install &lt;code&gt;ag&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt; (see below) to ensure you have the best experience.&lt;/p&gt; &#xA;&lt;h4&gt;Installing &lt;code&gt;ag&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Dumb Jump performs best with The Silver Searcher &lt;code&gt;ag&lt;/code&gt; (&lt;a href=&#34;https://github.com/ggreer/the_silver_searcher#installing&#34;&gt;ag install instructions&lt;/a&gt;) or ripgrep &lt;code&gt;rg&lt;/code&gt; (&lt;a href=&#34;https://github.com/BurntSushi/ripgrep#installation&#34;&gt;rg install instructions&lt;/a&gt;) installed on your system.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Basic&lt;/h4&gt; &#xA;&lt;p&gt;To enable the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&#34;&gt;xref&lt;/a&gt; backend, evaluate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;xref-backend-functions #&#39;dumb-jump-xref-activate)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or add it to your initialisation file. Using this, you can now use &lt;kbd&gt;M-.&lt;/kbd&gt; (or &lt;kbd&gt;gd&lt;/kbd&gt; when using Evil).&lt;/p&gt; &#xA;&lt;p&gt;Xref can be customized to use &lt;code&gt;completing-read&lt;/code&gt; to select a target. That way a completion framework of your choice (Icomplete, Helm, Ivy, ...) will be used instead of the default pop-up buffer. To do this, evaluate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq xref-show-definitions-function #&#39;xref-show-definitions-completing-read)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the function &lt;code&gt;xref-show-definitions-completing-read&lt;/code&gt; requires at least Xref 1.1.0. This can either be downloaded from ELPA or is bundled with Emacs 28.1 or newer.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h5&gt;Excluding project directories&lt;/h5&gt; &#xA;&lt;p&gt;Dumb Jump will automatically look for a project root. If it&#39;s not finding one then either put a &lt;code&gt;.dumbjump&lt;/code&gt; file in your project root and optionally add excluded directories to make it faster.&lt;/p&gt; &#xA;&lt;p&gt;Project root directory denoters: &lt;code&gt;.dumbjump&lt;/code&gt; &lt;code&gt;.projectile&lt;/code&gt; &lt;code&gt;.git&lt;/code&gt; &lt;code&gt;.hg&lt;/code&gt; &lt;code&gt;.fslckout&lt;/code&gt; &lt;code&gt;.bzr&lt;/code&gt; &lt;code&gt;_darcs&lt;/code&gt; &lt;code&gt;.svn&lt;/code&gt; &lt;code&gt;Makefile&lt;/code&gt; &lt;code&gt;PkgInfo&lt;/code&gt; &lt;code&gt;-pkg.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to stop a directory from registering as the project root (and have Dumb Jump keep looking) add an empty &lt;code&gt;.dumbjumpignore&lt;/code&gt; file in that directory.&lt;/p&gt; &#xA;&lt;h5&gt;Example &lt;code&gt;.dumbjump&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;-tests&#xA;-node_modules&#xA;-build&#xA;-images&#xA;+../some-lib/src&#xA;+/usr/lib/src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt; When adding paths outside of the project (using &lt;code&gt;+&lt;/code&gt;) ensure you use &lt;code&gt;dumb-jump-force-searcher&lt;/code&gt; of either &lt;code&gt;&#39;ag&lt;/code&gt; or &lt;code&gt;&#39;rg&lt;/code&gt; (see below). This is required because the default searcher (&lt;code&gt;git-grep&lt;/code&gt;) won&#39;t be able to search outside of the project root. This edge case will be fixed in a future release. That is, &lt;code&gt;git-grep&lt;/code&gt; will NOT be set as the default searcher if a &lt;code&gt;.dumbjump&lt;/code&gt; is present with a &lt;code&gt;+&lt;/code&gt; path outside of the repo.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;.emacs&lt;/code&gt; options&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-default-project &#34;~/code&#34;)&lt;/code&gt; to change default project if one is not found (defaults to &lt;code&gt;~&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-quiet t)&lt;/code&gt; if Dumb Jump is too chatty.&lt;/li&gt; &#xA; &lt;li&gt;To support more languages and/or definition types customize &lt;code&gt;dumb-jump-find-rules&lt;/code&gt; variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-force-searcher &#39;rg)&lt;/code&gt; to force the search program Dumb Jump should use. It will &lt;em&gt;always&lt;/em&gt; use this searcher. If not set (&lt;code&gt;nil&lt;/code&gt;) Dumb Jump will use &lt;code&gt;git-grep&lt;/code&gt; if it&#39;s a git project and if not will try searchers in the following order &lt;code&gt;ag&lt;/code&gt;, &lt;code&gt;rg&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt; (first installed wins). This is necessary if you want full control over the searcher Dumb Jump uses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-prefer-searcher &#39;rg)&lt;/code&gt; to let Dumb Jump know your searcher preference. If set this will still use &lt;code&gt;git-grep&lt;/code&gt; if it&#39;s a git project (because it&#39;s the fastest), but will you use whatever you set here in any other situation. If not set Dumb Jump will follow the same order as mentioned in the &lt;code&gt;dumb-jump-force-searcher&lt;/code&gt; description. At this time setting this value is only necessary if you prefer &lt;code&gt;rg&lt;/code&gt; but have &lt;code&gt;ag&lt;/code&gt; installed too.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-git-grep-search-args &#34;&#34;)&lt;/code&gt; to set additional command line arguments when using git-grep for searching (defaults to &lt;code&gt;&#34;&#34;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-ag-search-args &#34;&#34;)&lt;/code&gt; to set additional command line arguments when using ag for searching (defaults to &lt;code&gt;&#34;&#34;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-rg-search-args &#34;&#34;)&lt;/code&gt; to set additional command line arguments when using rg for searching (defaults to &lt;code&gt;&#34;--pcre2&#34;&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;If your project has multi-line method signatures &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues/129&#34;&gt;you should use &lt;code&gt;ag&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues/255&#34;&gt;&lt;code&gt;rg&lt;/code&gt; version &lt;code&gt;0.10.0&lt;/code&gt; or higher&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;p&gt;To learn more about how Dumb Jump picks a searcher see &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues/109&#34;&gt;this issue&lt;/a&gt; and this &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/pull/111&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Hydra for effieciency&lt;/h5&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Hydra&lt;/a&gt; installed, the following is an example hydra for easily using Dumb-Jump and not needing to remember the bindings or function names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(defhydra dumb-jump-hydra (:color blue :columns 3)&#xA;    &#34;Dumb Jump&#34;&#xA;    (&#34;j&#34; dumb-jump-go &#34;Go&#34;)&#xA;    (&#34;o&#34; dumb-jump-go-other-window &#34;Other window&#34;)&#xA;    (&#34;e&#34; dumb-jump-go-prefer-external &#34;Go external&#34;)&#xA;    (&#34;x&#34; dumb-jump-go-prefer-external-other-window &#34;Go external other window&#34;)&#xA;    (&#34;i&#34; dumb-jump-go-prompt &#34;Prompt&#34;)&#xA;    (&#34;l&#34; dumb-jump-quick-look &#34;Quick look&#34;)&#xA;    (&#34;b&#34; dumb-jump-back &#34;Back&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be explicitly bound or used inside another hydra (if you already use something like &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;Avy&lt;/a&gt;/&lt;a href=&#34;https://github.com/winterTTr/ace-jump-mode&#34;&gt;Ace&lt;/a&gt; or similar for general &#34;jumping&#34;).&lt;/p&gt; &#xA;&lt;h4&gt;Debugging a jump&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;set-variable dumb-jump-debug t&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;try to jump&lt;/li&gt; &#xA; &lt;li&gt;go to buffer &lt;code&gt;*Messages*&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More details &lt;a href=&#34;http://p.cweiske.de/506&#34;&gt;here&lt;/a&gt;. Thanks to @cweiske and @Glumanda99&lt;/p&gt; &#xA;&lt;h2&gt;Obsolete commands and options&lt;/h2&gt; &#xA;&lt;p&gt;Older versions of dumb jump didn&#39;t use xref, and instead had custom commands. These, while marked obsolete, can still be used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go&lt;/code&gt; (former) core functionality. Attempts to jump to the definition for the thing under point. This has been replaced in the new interface with &lt;code&gt;xref-find-definitions&lt;/code&gt; (&lt;kbd&gt;M-.&lt;/kbd&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-back&lt;/code&gt; jumps back to where you were when you jumped. These are chained so if you go down a rabbit hole you can get back out or where you want to be. This has been replaced with &lt;code&gt;xref-pop-marker-stack&lt;/code&gt; (&lt;kbd&gt;M-,&lt;/kbd&gt;), but is mostly equivalent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-quick-look&lt;/code&gt; like &lt;code&gt;dumb-jump-go&lt;/code&gt; but &lt;strong&gt;only&lt;/strong&gt; shows tooltip with &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, and &lt;code&gt;context&lt;/code&gt; it does not jump.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go-other-window&lt;/code&gt; exactly like &lt;code&gt;dumb-jump-go&lt;/code&gt; but uses &lt;code&gt;find-file-other-window&lt;/code&gt; instead of &lt;code&gt;find-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go-prefer-external&lt;/code&gt; like &lt;code&gt;dumb-jump-go&lt;/code&gt; but will prefer definitions not in the current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go-prefer-external-other-window&lt;/code&gt; expected combination of &lt;code&gt;dumb-jump-go-prefer-external&lt;/code&gt; and &lt;code&gt;dumb-jump-go-other-window&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go-prompt&lt;/code&gt; exactly like &lt;code&gt;dumb-jump-go&lt;/code&gt; but prompts user for function to jump to&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A few user options only have an effect when used with the legacy interface. These are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-after-jump-hook&lt;/code&gt; (use &lt;code&gt;xref-after-jump-hook&lt;/code&gt; instead)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-before-jump-hook&lt;/code&gt; (use &lt;code&gt;xref-after-return-hook&lt;/code&gt; instead)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-selector&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-aggressive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-use-visible-window&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-confirm-jump-to-modified-file&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minor mode &lt;code&gt;dumb-jump-mode&lt;/code&gt; binds a few of these commands by default.&lt;/p&gt; &#xA;&lt;p&gt;If you still use Emacs 24 or older, you won&#39;t have xref, and have to use the legacy interface instead. In that case, there will also be no &#34;obsolete&#34; warnings.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;I wanted &#34;jump to definition&#34; functionality to &#34;just work&#34; in emacs. I use IntelliJ for Java and this functionality is basically the only thing I miss when I switch back to emacs for work in other languages. There are certainly other packages that offer this type of functionality, but they all require significantly more configuration and are often limited to a particular language. An alternative may be worth setting up if you are in a specific project or language often (see &lt;a href=&#34;https://raw.githubusercontent.com/jacktasia/dumb-jump/master/#alternatives&#34;&gt;alternatives&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feedback is very welcome via GitHub issues. I will consider supporting other languages either via issue request or PR. If submitting a PR then please add tests as well.&lt;/p&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;Opening a PR will use CircleCI to run all the tests against all the supported emacs versions and search programs.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests locally&lt;/h3&gt; &#xA;&lt;p&gt;There are a lot of options for running the tests locally:&lt;/p&gt; &#xA;&lt;h4&gt;Basic/Classic&lt;/h4&gt; &#xA;&lt;p&gt;requires &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt; using your local emacs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/dumb-jump&#xA;cask&#xA;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Concurrent&lt;/h4&gt; &#xA;&lt;p&gt;requires golang and &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt; using your local emacs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/dumb-jump&#xA;cask&#xA;make test-concurrent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker (latest emacs)&lt;/h4&gt; &#xA;&lt;p&gt;only requires docker and runs tests against emacs 26.1&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/dumb-jump&#xA;cask&#xA;make test-in-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker (all supported emacs versions)&lt;/h4&gt; &#xA;&lt;p&gt;only requires docker and runs tests against all supported emacs versions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/dumb-jump&#xA;cask&#xA;make test-all-in-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of potential alternative packages for emacs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Tags-Tables.html&#34;&gt;Tags&lt;/a&gt; supports multiple languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/global/&#34;&gt;GNU Global&lt;/a&gt; supports multiple languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ternjs.net/&#34;&gt;Tern&lt;/a&gt; for JavaScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34;&gt;elpy&lt;/a&gt; for Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgutov/robe&#34;&gt;robe&lt;/a&gt; for Ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of these were sourced from this &lt;a href=&#34;http://emacs.stackexchange.com/questions/10125/can-emacs-support-go-to-declaration-of-function-in-an-entire-project&#34;&gt;emacs StackExchange answer&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gagbo/consult-lsp</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/gagbo/consult-lsp</id>
    <link href="https://github.com/gagbo/consult-lsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP-mode and consult.el helping each other&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Consult LSP-mode integration #+AUTHOR: Gerry Agbobada #+LANGUAGE: en&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;a href=&#34;https://melpa.org/#/consult-lsp&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/consult-lsp-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+HTML: &lt;a href=&#34;https://stable.melpa.org/#/consult-lsp&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/consult-lsp-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction Helm and Ivy users have extra commands that leverage lsp-mode extra information, let&#39;s try to mimic a few features of [[https://github.com/emacs-lsp/helm-lsp][helm-lsp]] and [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] in consult workflow (tested with selectrum and dogfed with vertico)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Screenshots&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They tend not to be updated as often as changes happen, sorry if there are slight differences in UI. Those shots are more about giving an idea of what&#39;s happening.&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-lsp-diagnostics [[https://github.com/gagbo/consult-lsp/blob/screenshots/media/consult-lsp-diagnostics.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-lsp-symbols [[https://github.com/gagbo/consult-lsp/blob/screenshots/media/consult-lsp-symbols.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-lsp-file-symbols [[https://github.com/gagbo/consult-lsp/blob/screenshots/media/consult-lsp-file-symbols.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;consult-lsp-diagnostics :: Select diagnostics from current workspace. Pass prefix argument to search all workspaces&lt;/li&gt; &#xA; &lt;li&gt;consult-lsp-symbols :: Select symbols from current workspace. Pass prefix argument to search all workspaces.&lt;/li&gt; &#xA; &lt;li&gt;consult-lsp-file-symbols :: Interactively select a symbol from the current file, in a manner similar to consult-line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is currently no plan to add an interface to list and/or act on code-actions, but contributions are welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration ** Customize Look and Feel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides 2 entry points per command in order to customize the appearance of candidates in the selection/completion interface. This is mostly for advanced users who are somewhat familiar with consult API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=*-transformer-function= :: Adapter function, responsible for transforming lsp data into a valid consult candidate. a valid &#34;consult candidate&#34; is more often than not a propertized string, with specific properties to enable extra features.&lt;/li&gt; &#xA; &lt;li&gt;=*-annotate-builder-function= :: Builder function, which returns a valid lambda for annotation/affixation support. This allows to add extra information to the candidates in the interface. The &lt;em&gt;returned&lt;/em&gt; lambda must take 1 argument and produce either a single string or a list of 3 elements (candidate prefix suffix), just as expected by either annotation-function or affixation-function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are encouraged to take a look at the default values if you wish to customize these, especially the &lt;code&gt;file-symbols&lt;/code&gt; one, which is probably the easiest ones to grok, and use marginalia.&lt;/p&gt; &#xA;&lt;p&gt;** Keys *** Categories for symbols =consult-lsp-symbols= and =consult-lsp-file-symbols= can have the set of &#34;narrow&#34; keys you like by customizing =consult-lsp-symbols-narrow=.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;cdrs&lt;/del&gt; of the alist must match the symbol types returned by LSP servers, AND have an &#34;Other&#34; key for everything that is not included.&lt;/p&gt; &#xA;&lt;p&gt;You can find categories by looking for the [[https://microsoft.github.io/language-server-protocol/specification.html#textDocument_documentSymbol][SymbolKind enum]] in the LSP specification.&lt;/p&gt; &#xA;&lt;p&gt;*** Bindings As you can do with helm-lsp,&lt;/p&gt; &#xA;&lt;p&gt;Use the following line to replace xref-find-apropos in lsp-mode controlled buffers:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key lsp-mode-map [remap xref-find-apropos] #&#39;consult-lsp-symbols) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kungsgeten/org-brain</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/Kungsgeten/org-brain</id>
    <link href="https://github.com/Kungsgeten/org-brain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Org-mode wiki + concept-mapping&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE:org-brain [[http://melpa.org/#/org-brain][file:http://melpa.org/packages/org-brain-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;=org-brain= implements a variant of [[https://en.wikipedia.org/wiki/Concept_map][concept mapping]] in Emacs, using [[http://orgmode.org/][org-mode]]. It is heavily inspired by a piece of software called [[http://thebrain.com/][The Brain]], and you can view an introduction to that program [[https://www.youtube.com/watch?v=GFqLUBKCFdA][here]]. They also provide [[https://www.thebrain.com/blog/][a blog]] with great ideas of how you can think when organizing your Brain.&lt;/p&gt; &#xA;&lt;p&gt;You can think of =org-brain= as a combination of a wiki and a mind map, where each wiki page / mind map node is an =org-mode= file which resides in your =org-brain-path=, or a headline with an ID property in one of those files. These are called /entries/. Entries can be linked together, and you can then view the network of links as a mind map, using =M-x org-brain-visualize=. Here&#39;s [[https://www.youtube.com/watch?v=3EGOwfWok5s&amp;amp;t=][a video introducing =org-brain=]].&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE PINNED: Index&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;             +-Python              Game development-+-Game design&#xA;             +-Programming books           |&#xA; Programming-+-Emacs                       |&#xA;       |                                   |&#xA;       +-----------------+-----------------+&#xA;                         |&#xA;                         V&#xA;                  Game programming &amp;lt;-&amp;gt; Computer games&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Game Maker Unity&lt;/p&gt; &#xA;&lt;p&gt;--- Resources ---------------------------------&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Game_programming&#34;&gt;https://en.wikipedia.org/wiki/Game_programming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Passing Through Ghosts in Pac-Man&lt;/li&gt; &#xA; &lt;li&gt;In-House Engine Development: Technical Tips&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;--- Text --------------------------------------&lt;/p&gt; &#xA;&lt;p&gt;Game programming is the art of programming computer games... #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;When visualizing an entry, you will see the entry&#39;s relationship to other entries. There are four different types of relationships in =org-brain=:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parents :: Entries above the visualized entry. If the visualized entry is a headline, then the parent headline in the =org-mode= file will be one of the parents. In the case of top level headlines, the file itself will be considered a parent. Additional parents can be added manually. In the example above, /Programming/ and /Game development/ are parents of the visualized /Game programming/ entry.&lt;/li&gt; &#xA; &lt;li&gt;Children :: Entries below the visualized entry. This will by default be subheadings of the visualized entry (or level one headlines, if the visualized entry is a file). You can add other children, residing elsewhere, manually. In the example above, /Game Maker/ and /Unity/ are the children of /Game programming/.&lt;/li&gt; &#xA; &lt;li&gt;Siblings :: These appear to the right of the parent entries. Siblings are the other children of the visualized entry&#39;s parents.&lt;/li&gt; &#xA; &lt;li&gt;Friends :: These appear to the right of the visualized entry. Friends provide a way of adding a hierarchy independent two-way relationship between two entries. Friends must be added manually. In the example above, /Computer games/ and /Game programming/ are friends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[http://blogarchive.thebrain.com/thought-relationships/][Here&#39;s an article]] describing how you can use the different relationships (The Brain&#39;s /jump thoughts/ are the equivalent of /friends/ in =org-brain=).&lt;/p&gt; &#xA;&lt;p&gt;Apart from the visualized entry&#39;s relationships, =org-brain-visualize= also show pinned entries, which are shown independently of the visualized entry; /Index/ is a pinned entry in the example above. =org-brain-visualize= also show a list of the entry&#39;s resources (links and attachments), and the text in the entry. The example above have three resources, and a short text. The resources and text is gathered from =org-mode= automatically.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also the option to visualize the entry as a tree, or similar to a mind map, where you can zoom in order to show grandparents and grandchildren.&lt;/p&gt; &#xA;&lt;p&gt;The relationship entries, pinned entries and resources are all links; they can be pressed/clicked to visualize other entries, visit resources etc.&lt;/p&gt; &#xA;&lt;p&gt;You can also annotate the connection between the visualized entry and one of the other entries. You can think of it as annotating the edge between two nodes in a graph. Annotations will show up in the mini-buffer when hovering over an annotated connection.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup and requirements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The easiest way is to get =org-brain= from MELPA. If you do not want to do that, clone this git repository or download =org-brain.el= and add it to your load-path. The example below is using [[https://github.com/jwiegley/use-package][use-package]] and assumes that you&#39;re using MELPA, but you could use =(require &#39;org-brain)= or add a =:load-path= to =use-package= instead. Most of the configuration below isn&#39;t necessary, but showcases some options.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package org-brain :ensure t :init (setq org-brain-path &#34;directory/path/where-i-want-org-brain&#34;) ;; For Evil users (with-eval-after-load &#39;evil (evil-set-initial-state &#39;org-brain-visualize-mode &#39;emacs)) :config (bind-key &#34;C-c b&#34; &#39;org-brain-prefix-map org-mode-map) (setq org-id-track-globally t) (setq org-id-locations-file &#34;~/.emacs.d/.org-id-locations&#34;) (add-hook &#39;before-save-hook #&#39;org-brain-ensure-ids-in-buffer) (push &#39;(&#34;b&#34; &#34;Brain&#34; plain (function org-brain-goto-end) &#34;* %i%?&#34; :empty-lines 1) org-capture-templates) (setq org-brain-visualize-default-choices &#39;all) (setq org-brain-title-max-length 12) (setq org-brain-include-file-entries nil org-brain-file-entries-use-title nil))&lt;/p&gt; &#xA;&lt;p&gt;;; Allows you to edit entries directly from org-brain-visualize (use-package polymode :config (add-hook &#39;org-brain-visualize-mode-hook #&#39;org-brain-polymode)) #+END_SRC&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;=org-brain= requires Emacs 25 and org-mode 9. These need to be part of your Emacs.&lt;/li&gt; &#xA; &lt;li&gt;Configure =org-brain-path= (defaults to =/brain= in your =org-directory=) to a directory where you want to put your =org-brain= files (which could be the location where you already keep your org files if you wish to transform your existing org files into =org-brain= files). You can set this with the example config presented above or through =M-x customize-group RET org-brain=.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re an [[https://github.com/emacs-evil/evil][evil]] user, you&#39;ll want to add =(evil-set-initial-state &#39;org-brain-visualize-mode &#39;emacs)= to your =org-brain= configuration.&lt;/li&gt; &#xA; &lt;li&gt;=org-brain= use =org-id= in order to speed things up. Because of this, the variable =org-id-track-globally= should be =t= (which it already is by default). You may want to modify =org-id-locations-file= too. If you add entries to =org-brain= directly from =org-mode= you must assign headlines an ID. A comfortable way to do this is with the command =org-brain-ensure-ids-in-buffer=. Even more comfortable is to add that to =before-save-hook=, so that it runs when saving.&lt;/li&gt; &#xA; &lt;li&gt;=org-brain-prefix-map= can be bound to a key to make =org-brain= commands more accessable if you edit entries from =org-mode=. See /Editing from org-mode/ under /Usage/ below.&lt;/li&gt; &#xA; &lt;li&gt;You might want to add information at the end of an entry, without visiting the file. A way to do this is to use a [[http://orgmode.org/manual/Capture.html][capture]] template, such as the one presented above.&lt;/li&gt; &#xA; &lt;li&gt;If you have a lot of entries, it might take some time to gather information about all entries when using =org-brain-visualize=. You could change the value of =org-brain-visualize-default-choices= (which is =&#39;all= by default) to only include files, or even just files in the direct root of =org-brain-path=.&lt;/li&gt; &#xA; &lt;li&gt;If you feel that =org-brain-visualize= is too cluttered, you may want to set =org-brain-show-resources= and/or =org-brain-show-text= to =nil=.&lt;/li&gt; &#xA; &lt;li&gt;If you have very long entry names, =org-brain-visualize= may take a lot of horizontal space. You can cap the shown length of entry titles, by setting =org-brain-title-max-length=.&lt;/li&gt; &#xA; &lt;li&gt;Some users find it confusing having both /headline/ entries and /file/ entries (see below). It may be preferable to only use headline entries, by setting =org-brain-include-file-entries= to =nil=. If doing this, you should probably also set =org-brain-file-entries-use-title= to =nil=. Another possibility is if you&#39;re only using file entries, in which case you can set =org-brain-scan-for-header-entries= to =nil=.&lt;/li&gt; &#xA; &lt;li&gt;=polymode= is a package (available on MELPA) which allows for several major-modes in the same buffer. If you have required the package you can use =M-x org-brain-polymode= inside =org-brain-visualize=, or (as in the example above) add =org-brain-polymode= to =org-brain-visualize-mode-hook=.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Category icons&lt;/p&gt; &#xA;&lt;p&gt;=org-brain= supports showing icons for your entries, depending on their [[https://orgmode.org/manual/Categories.html][category]]. Use the variable =org-agenda-category-icon-alist= to specify icons for categories.&lt;/p&gt; &#xA;&lt;p&gt;See example of using /all-the-icons/ for this below under /Other useful packages/.&lt;/p&gt; &#xA;&lt;p&gt;** Customizing the look of entry titles&lt;/p&gt; &#xA;&lt;p&gt;When visualizing you might want to see additional information about the entries. This can be done by customizing the following variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-brain-vis-title-prepend-functions=&lt;/li&gt; &#xA; &lt;li&gt;=org-brain-vis-title-append-functions=&lt;/li&gt; &#xA; &lt;li&gt;=org-brain-vis-current-title-prepend-functions=&lt;/li&gt; &#xA; &lt;li&gt;=org-brain-vis-current-title-append-functions=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of these variables should be a list of functions, which all takes an entry as the single parameter and returns a string. This string is the prepended or appended to the entry&#39;s title, according to the name of the function. The variables with the name =current= in them only applies the functions on the currently visualized entry (the focused one).&lt;/p&gt; &#xA;&lt;p&gt;Suitable functions to add to these lists might be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-brain-entry-icon= (included in =org-brain-vis-title-prepend-functions= by default)&lt;/li&gt; &#xA; &lt;li&gt;=org-brain-entry-todo-state=&lt;/li&gt; &#xA; &lt;li&gt;=org-brain-entry-tags-string=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Headline and file entries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two types of entries in =org-brain=: /headline/ entries and /file/ entries. For the most part these are used the same way, and the main difference between them is how their content is stored inside your =org-brain= directory. All .org-files inside the =org-brain-path= are considered as /file/ entries (the content typically being the text before the first headline in the file) and all headlines /with an ID property/ inside these files are considered as /headline/ entries.&lt;/p&gt; &#xA;&lt;p&gt;By default subdirectories inside =org-brain-path= are scanned recursively for files, so all subdirectories and their files are considered part of the brain. You can choose to only have the root of =org-brain-path= be scanned for files, by setting =org-brain-scan-directories-recursively= to =nil=.&lt;/p&gt; &#xA;&lt;p&gt;If you have a headline entry, which you want to convert to a file entry, use =M-x org-brain-headline-to-file=. Unfortunately there is currently no function to convert a file entry into a headline entry.&lt;/p&gt; &#xA;&lt;p&gt;** Limiting =org-brain= to headline entries&lt;/p&gt; &#xA;&lt;p&gt;Most of =org-mode= is tailored towards working with headlines, and because of this =org-brain= has some limitations regarding what&#39;s possible with /file entries/. The concept of both headline and file entries is confusing to some users.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to only use headline entries, you can set the variable =org-brain-include-file-entries= to =nil=. It then also makes sense to set =org-brain-file-entries-use-title= to =nil=.&lt;/p&gt; &#xA;&lt;p&gt;You may choose to exclude the file part of entry names when choosing among entries. =org-brain= passes two objects, the file and the headline, to the emacs [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html][format]] function. By setting =org-brain-headline-entry-name-format-string= to =&#34;%2$s&#34;=, =org-brain= will only show the headline title.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example which may be suitable for a setup without file entries:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq org-brain-include-file-entries nil) (setq org-brain-file-entries-use-title nil) (setq org-brain-headline-entry-name-format-string &#34;%2$s&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(setq my/default-org-brain-file &#34;brain&#34;) (setq org-brain-default-file-parent my/default-org-brain-file) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Limiting =org-brain= to file entries&lt;/p&gt; &#xA;&lt;p&gt;If you instead prefer to work with file entries, you can set =org-brain-scan-for-header-entries= to =nil=. It will still be possible to add headline entries, but they will be excluded from most searches when choosing among entries.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can create new entries by =M-x org-brain-visualize= and then typing the name of a non-existing entry. You can go back to the =&lt;em&gt;org-brain&lt;/em&gt;= buffer by =M-x org-brain-visualize-dwim=. It will switch to the =&lt;em&gt;org-brain&lt;/em&gt;= buffer. If there&#39;s no such buffer, or if already there, run =org-brain-visualize=. You could also use =M-x org-brain-add-entry= if you do not want to visualize the new entry. Also commands which add children, parents and friends, or links to entries, can create new entries in the same way. Se /General information/ below.&lt;/p&gt; &#xA;&lt;p&gt;If you find that =org-brain= is missing entries, or list entries which doesn&#39;t exist, try using =M-x org-brain-update-id-locations=, which syncs the =org-brain= entries with the =org-id= caching system.&lt;/p&gt; &#xA;&lt;p&gt;** =org-brain-visualize=&lt;/p&gt; &#xA;&lt;p&gt;The primary usage of =org-brain= is through =M-x org-brain-visualize= (which you might want to bind to a key). From there you can browse entries, add/remove relationships, open entries for editing etc. The following keybindings are available in =org-brain-visualize=:&lt;/p&gt; &#xA;&lt;p&gt;| Key | Command | Description | |-------------+------------------------------------+-----------------------------------------------------------------------------------| | m | =org-brain-visualize-mind-map= | Toggle between normal and mind-map visualization. | | j or TAB | =forward-button= | Goto next link | | k or S-TAB | =backward-button= | Goto previous link | | b | =org-brain-visualize-back= | Like the back button in a web browser. | | h or * | =org-brain-add-child-headline= * | Add a new child /headline/ to entry | | c | =org-brain-add-child= * | Add an existing entry, or a new /file/, as a child | | C | =org-brain-remove-child= * | Remove one the entry&#39;s child relations | | e | =org-brain-annotate-edge= | Annotate the connection between the visualized entry and the entry link at point. | | p | =org-brain-add-parent= * | Add an existing entry, or a new /file/, as a parent | | P | =org-brain-remove-parent= * | Remove one of the entry&#39;s parent relations | | f | =org-brain-add-friendship= * | Add an existing entry, or a new /file/, as a friend | | F | =org-brain-remove-friendship= * | Remove one of the entry&#39;s friend relations | | n | =org-brain-pin= * | Toggle if the entry is pinned or not | | N | =org-brain-add-nickname= | Add a nickname for the entry (you can have several names for the same entry) | | s | =org-brain-select-dwim= | Select an entry for batch processing. | | S | =org-brain-select-map= | Prefix key to do batch processing with selected entries. | | t | =org-brain-set-title= | Change the title of the entry. | | T | =org-brain-set-tags= | Change the tags of the entry. | | d | =org-brain-delete-entry= | Choose an entry to delete. | | l | =org-brain-visualize-add-resource= | Add a new resource link in entry | | r | =org-brain-open-resource= | Choose and open a resource from the entry. | | C-y | =org-brain-visualize-paste-resource= | Add a new resource link from clipboard | | a | =org-brain-visualize-attach= | Run =org-attach= on entry (headline entries only) | | A | =org-brain-archive= | Archive the entry (headline entries only) | | o | =org-brain-goto-current= | Open current entry for editing | | O | =org-brain-goto= | Choose and edit one of your =org-brain= entries | | v | =org-brain-visualize= | Choose and visualize a different entry | | V | =org-brain-visualize-follow= | Similar to =org-agenda-follow-mode=; view visualized entry in another window. | | w | =org-brain-visualize-random= | Visualize one of your entries at random. | | W | =org-brain-visualize-wander= | Visualize at random, in a set interval. =W= again to cancel. | | C-c C-x C-v | =org-toggle-inline-images= | Display org-mode images in the entry text. | | M | Move prefix | Move (refile) the current entry. | | M r | =org-brain-refile= | Move current entry to another entry (change local parent). | | M p | =org-brain-change-local-parent= | Choose among the entry&#39;s parents and make another of them the local parent. |&lt;/p&gt; &#xA;&lt;p&gt;The commands above marked with =*= can be run with the universal argument =C-u= in order to operate on the entry link at point instead of the visualized entry.&lt;/p&gt; &#xA;&lt;p&gt;You may use =org-store-link= inside of =org-brain-visualize= in order to store a link to the currently visualized =org-brain= entry.&lt;/p&gt; &#xA;&lt;p&gt;If the /universal argument/ =C-u= is used when running =org-brain-visualize-random= or =org-brain-visualize-wander=, the randomized targets are restricted to descendants (children, grandchildren, grand-grandchildren etc) of the currently visualized entry. Use for instance =C-u W= to wander among the descendants.&lt;/p&gt; &#xA;&lt;p&gt;The /universal argument/ =C-u= can also be used with =org-brain-open-resource=. This lets you choose not only resource from the visualized entry, but also from descendants (children, grand-children, etc) of that entry.&lt;/p&gt; &#xA;&lt;p&gt;If the /universal argument/ =C-u= is used when calling =org-brain-annotate-edge= then the annotation will be &#34;one-way&#34;. The default behaviour is otherwise to annotate the connection in both directions.&lt;/p&gt; &#xA;&lt;p&gt;When using the mind map visualization (toggle by pressing =m=), you can use the following keybindings in order to show or hide successive levels of hierarchy relative to the current entry.&lt;/p&gt; &#xA;&lt;p&gt;| Key | Command | Description | |-----+---------------------------------+--------------------------------------------------------------------------| | + | =org-brain-show-descendant-level= | Show one more level of entries to the right (children of children, etc.) | | - | =org-brain-hide-descendant-level= | Hide rightmost level of descendant entries | | z | =org-brain-show-ancestor-level= | Show one more level of entries to the left (parents of parents, etc.) | | Z | =org-brain-hide-ancestor-level= | Hide leftmost level of ancestor entries |&lt;/p&gt; &#xA;&lt;p&gt;If you want to select several entries and then remove/add them as children/parents/friends you can use the =s= key (=org-brain-select-dwim=) to select an entry. If the point is over a button link to an entry, that entry will be selected, otherwise it will select the currently visualized entry. If the entry is already selected, it will be unselected instead.&lt;/p&gt; &#xA;&lt;p&gt;Once you have selected all the entries you wish to use, you can use the =S= prefix key to do batch processing on the selected entries. The keybindings in this prefix keymap is identical to those in =org-brain-visualize=. You could for instance use =S c= to add all selected entries as children to the visualized entry, or =S P= to remove the parent relationship of the selected entries. When you&#39;re done and wish to clear the selection use =org-brain-clear-selected=, which is bound to =S s=.&lt;/p&gt; &#xA;&lt;p&gt;** Editing text from =org-brain-visualize-mode=&lt;/p&gt; &#xA;&lt;p&gt;If you have the =polymode= package installed you can edit your entries directly from =org-brain-visualize-mode=. Run =M-x org-brain-polymode= or add =org-brain-polymode= to =org-brain-visualize-mode-hook=. After editing you can use =C-x C-s= (bound to =org-brain-polymode-save=) to save your changes.&lt;/p&gt; &#xA;&lt;p&gt;** Editing from =org-mode=&lt;/p&gt; &#xA;&lt;p&gt;You can edit =org-brain= entries directly from =org-mode=. You can use the default =org-mode= outline structure to define parent/children relationships, but keep in mind that only entries with an =ID= property will be considered as entries to =org-brain=; use =M-x org-brain-get-id= to create an =ID= property to the current =org-mode= headline. Another alternative is to use =M-x org-brain-refile= which will create the ids for you. You can also create IDs for all headlines in the buffer with =M-x org-brain-ensure-ids-in-buffer=, and you might find it useful to add this to =before-save-hook=.&lt;/p&gt; &#xA;&lt;p&gt;Most of the commands available in =org-brain-visualize= can also be used in =org-mode= directly, in which case they will operate on the &#34;entry at point&#34;. In other words you can use =M-x org-brain-add-child= directly from =org-mode= in order to add a child to the =org-brain= entry at point. You may also want to use the commands =org-brain-goto-&#xA; &lt;relationsship&gt;&#xA;  = to navigate between entries.&#xA; &lt;/relationsship&gt;&lt;/p&gt; &#xA;&lt;p&gt;Most of the commands available in =org-brain-visualize-mode= is also bound to the prefix keymap =org-brain-prefix-map=. You can bind this to a key in =org-mode=, for instance =C-c b=, and you could then type =C-c b p= to add a parent to the current entry. Example config: =(define-key org-mode-map (kbd &#34;C-c b&#34;) &#39;org-brain-prefix-map)=.&lt;/p&gt; &#xA;&lt;p&gt;You may want to create a link to an =org-brain= entry in an =org-mode= file (not necessarily an =org-brain= file itself). =org-brain= provides several link types for this purpose. You can use =org-insert-link= (bound to =C-c C-l= in =org-mode= by default) to insert one of these links. They all have in common that they, when clicked, will open the =org-brain= entry for editing. When inserting a link like this, =org-brain= will run completion upon all your entries.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=brain:= :: The default kind of link. Just let&#39;s you visit another =org-brain= entry when clicked. If the variable =org-brain-backlink= is =t= a brain-link will also be created as a resource in the link target, linking back to where the link was created. If =org-brain-backlink= is set to a string, that string will be added as a prefix to the title of the backlink. &lt;em&gt;Example:&lt;/em&gt; You set =org-brain-backlink= to =&#34;&amp;lt;-- &#34;= and create a =brain:= link in =Rabbits= linking to =Carrots=. Now a resource with the description =&amp;lt;-- Rabbits= will be created in =Carrots=.&lt;/li&gt; &#xA; &lt;li&gt;=brain-child:= :: When inserted using =org-insert-link= this will make the linked entry a child to the current =org-brain= entry, upon completion. Keep in mind that this doesn&#39;t work if you type the link manually; only by completion through =org-insert-link=.&lt;/li&gt; &#xA; &lt;li&gt;=brain-parent:= :: Like =brain-child:= but makes the linked entry a parent of the current entry.&lt;/li&gt; &#xA; &lt;li&gt;=brain-friend:= :: Like =brain-child:= but adds the linked entry as a friend.&lt;/li&gt; &#xA; &lt;li&gt;=brainswitch= :: If you have multiple brains you may want a link which switches to a specific brain and one of its entries. The =brainswitch= link allows for this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The names of the relationship inserting links (=brain-child=, =brain-parent= and =brain-friend=) can be customized with the variables =org-brain-child-link-name=, =org-brain-parent-link-name=, and =org-brain-friend-link-name=. This customization should be done before loading =org-brain=. If you&#39;re using =use-package=, put the customization in the =:init= block.&lt;/p&gt; &#xA;&lt;p&gt;** Other commands&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re browsing a file and want to add the file -- or the current line in the file -- as a resource to an entry, you can use =M-x org-brain-add-file-as-resource= or =M-x org-brain-add-file-line-as-resource=. If any of these are run with /universal argument/ =C-u= then add the resources to current/last visualized entry.&lt;/p&gt; &#xA;&lt;p&gt;** General information&lt;/p&gt; &#xA;&lt;p&gt;If you try to add a child/parent/friend to an entry which doesn&#39;t exist, that entry will be created. The same is true for many other commands prompting for an entry, like =org-brain-visualize=. The name of a new entry can be written like this: =file::headline=. The =headline= will be created as a level one headline in =file=. If you create a new entry without the headline part, it will by default be created as a file entry. It is possible to change that though by setting the variable =org-brain-default-file-parent= to a default file. Let&#39;s say you set the variable to =&#34;brain&#34;= and then add the entry =Bananas= (a non-existent entry). That would be the same thing as writing =brain::Bananas=.&lt;/p&gt; &#xA;&lt;p&gt;When adding children, parents, or friends, multiple entries can be added at once by separating their titles with =org-brain-entry-separator= (which is =;= by default). For instance =M-x org-brain-add-parent RET music;artists= would add both =music= and =artists= as parents.&lt;/p&gt; &#xA;&lt;p&gt;Another available command is =M-x org-brain-agenda=, which can be used to run =org-agenda= on your =org-brain= files.&lt;/p&gt; &#xA;&lt;p&gt;** Slashes in file entry titles&lt;/p&gt; &#xA;&lt;p&gt;When giving a file entry a title, the title can not contain slashes (=/=) if =org-brain-file-entries-use-title= is =t=.&lt;/p&gt; &#xA;&lt;p&gt;** Renaming files in =org-brain=&lt;/p&gt; &#xA;&lt;p&gt;Headline entries use =org-id= to identify themselves, so the headlines can be manually renamed without worries. File entries, on the other hand, uses the filename as the identifier. This will cause problems if you try to manually rename files inside of =org-brain=.&lt;/p&gt; &#xA;&lt;p&gt;In order to rename a file, use =M-x org-brain-rename-file=.&lt;/p&gt; &#xA;&lt;p&gt;** Archiving entries&lt;/p&gt; &#xA;&lt;p&gt;=org-archive= has a problem in =org-brain=: relationships are maintained, even though the entry should really be removed from the brain. Because of this, please use =org-brain-archive= instead. This command removes relationships to the entry in the brain, before archiving it. The command also inserts handy links to the archived entry&#39;s relationships.&lt;/p&gt; &#xA;&lt;p&gt;** Special tags&lt;/p&gt; &#xA;&lt;p&gt;You might have a headline which you do not really want as an entry in =org-brain=. The most basic way to exclude such a headline is simply to not add an =ID= property to it. However, =org-brain= also provide two tags, which you can use to tag the headline:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:nobrain:= :: This tag excludes the headline, and its subheadings, from your =org-brain= entries. You can change the tag name by modifying =org-brain-exclude-tree-tag=.&lt;/li&gt; &#xA; &lt;li&gt;=:childless:= :: This tag does not exclude the headline, but it excludes the subheadings. You can change the tag name by modifying =org-brain-exclude-children-tag=. Works on file entries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following tags modifies the kind of information that is shown when an entry is visualized:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:notext:= :: Do not show the entry&#39;s text in =org-brain-visualize=. You can change the tag name by modifying =org-brain-exclude-text-tag=.&lt;/li&gt; &#xA; &lt;li&gt;=:resourceless:= :: Do not show the entry&#39;s resources in =org-brain-visualize=. You can change the tag name by modifying =org-brain-exclude-resources-tag=.&lt;/li&gt; &#xA; &lt;li&gt;=:showchildren:= :: By default local child entries aren&#39;t shown as text. By setting this tag the entry get the entire subtree as text. You can change the tag name by modifying =org-brain-show-children-tag=. Works on file entries.&lt;/li&gt; &#xA; &lt;li&gt;=:nosiblings:= :: You may have an entry with lots of children, and when you visualize one of these children you might not want to see the siblings from this parent. A good example would be if you have an =index= entry or similar. By tagging the parent with =nosiblings= the parent&#39;s children will not show siblings from that parent. You can change the tag name by modifying =org-brain-exclude-siblings-tag=.&lt;/li&gt; &#xA; &lt;li&gt;:nolocalparent: :: This is similar to =:nosiblings:= but the tagged parent will not be shown at all when one of its local children are visualized.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following tags modify the way how information is shown when an entry is visualized.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=:ownline:= :: Make each child of the tagged entry appear on its own line when the tagged entry is visualized. This only affects the tagged entry. It works akin to temporarily setting =org-brain-child-fill-column-sexp= to =0=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=:nosort:= :: Display each child of the tagged node in the order the children are listed in the file, rather than in the sorted order determined by =org-brain-visualize-sort-function=. This affects the order of the nodeâs children in both the child list (when the tagged node is being visited) and in the sibling list (when one of the tagged nodeâs children is being visited).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Having multiple brains&lt;/p&gt; &#xA;&lt;p&gt;You can have multiple brains simply by having more than one brain folder. In this way, each folder becomes a separate brain. You can switch between these using =M-x org-brain-switch-brain=. You can also use =brainswitch:= links in =org-mode= to switch brains.&lt;/p&gt; &#xA;&lt;p&gt;If you run =org-brain-visualize= from inside an org-file in /the root/ of an org-brain directory, =org-brain= will automatically switch to this brain.&lt;/p&gt; &#xA;&lt;p&gt;** Take note!&lt;/p&gt; &#xA;&lt;p&gt;=org-brain= creates and uses several headline properties in the =PROPERTIES= drawer of =org-mode= headlines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=BRAIN_PARENTS=&lt;/li&gt; &#xA; &lt;li&gt;=BRAIN_CHILDREN=&lt;/li&gt; &#xA; &lt;li&gt;=BRAIN_FRIENDS=&lt;/li&gt; &#xA; &lt;li&gt;=BRAIN_EDGE_$IDENTIFIER=&lt;/li&gt; &#xA; &lt;li&gt;=ID=&lt;/li&gt; &#xA; &lt;li&gt;=NICKNAMES=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These properties are also mirrored as file keywords at the top of file entries, for instance =#+BRAIN_CHILDREN: 00c0f06c-9bd4-4c31-aed0-15bb3361d9a2=.&lt;/p&gt; &#xA;&lt;p&gt;These properties/keywords are /not meant to be manipulated directly/! If you want to remove these properties, use the corresponding command instead (=org-brain-remove-child= or similar). There&#39;s currently command to remove =NICKNAMES= though, so at the moment that has to be done manually.&lt;/p&gt; &#xA;&lt;p&gt;You might also see that =org-brain= inserts a =RESOURCES= drawer. It is okay to modify this drawer manually.&lt;/p&gt; &#xA;&lt;p&gt;The names of the parents/children/friends properties, the prefix for edge properties and the =RESOURCES= drawer can customized by setting the variables =org-brain-parents-property-name=, =org-brain-children-property-name=, =org-brain-friends-property-name=, =org-brain-edge-property-prefix-name= and =org-brain-resources-drawer-name=, respectively. Of course, after doing any customization, the property/drawer names of existing brain files have to be adjusted manually.&lt;/p&gt; &#xA;&lt;p&gt;** =org-brain= is slow!&lt;/p&gt; &#xA;&lt;p&gt;If you feel that =org-brain= is slow while indexing your entries (for instance when running =M-x org-brain-visualize=) you can customize =org-brain-file-entries-use-title=, and set it to =nil=. This will display file names when indexing, instead of the file entry&#39;s title, which is faster.&lt;/p&gt; &#xA;&lt;p&gt;Should only the first call of =org-brain-visualize= be slow, an option may be to try persistent caching of the variable =org-brain-headline-cache=. Choose a [[https://www.emacswiki.org/emacs/SessionManagement][session management solution]] that works for you [[https://github.com/thierryvolpiatto/psession][(an option for helm users)]]. A simple and built-in method is to use the savehist package. To do so, you may add the following configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (savehist-mode 1) (setq savehist-additional-variables &#39;(org-brain-headline-cache)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAQ ** Wrong number of arguments: (0 . 0), 2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are probably using the version of =org-mode= that came with your Emacs install, which has a lower version than 9.2. Check the version of org you have installed with =M-x org-version=. See [[https://github.com/Kungsgeten/org-brain/issues/278][Github issue #278]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Export to other formats&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=org-brain= has no built-in functionality for exporting to other formats. I&#39;ve started experimenting with another package named [[https://github.com/Kungsgeten/org-brain-export][org-brain-export]] which might be merged into =org-brain= in the future. =org-brain-export= is in VERY early stages of development.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Helm and Ivy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use [[https://github.com/emacs-helm/helm][Helm]] or [[https://oremacs.com/swiper/][Ivy]] you can use the commands =helm-brain= or =counsel-brain= respectively. These allow for visualizing entries, and adding parents/children/friends to the entry at point. They also allow selecting multiple entries.&lt;/p&gt; &#xA;&lt;p&gt;These commands do not have any keybindings by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backwards compatibility breaking changes ** 0.7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As of version 0.7 /entry descriptions/ are deprecated. They made visualization slow, and it was quite a hassle to actually write them. The &#34;help echo&#34; text is now used for edge annotations instead.&lt;/p&gt; &#xA;&lt;p&gt;** 0.4&lt;/p&gt; &#xA;&lt;p&gt;/This is only relevant if you&#39;ve been using org-brain before version 0.4/&lt;/p&gt; &#xA;&lt;p&gt;As of version 0.4 (June 2017) =org-brain= has been rewritten, in order to increase performance and add more options. Because of this, older setups are considered obsolete. Prior to 0.4 only files were considered entries, but now also headlines with an =ID= property are included as entries. Prior to 0.4 =org-brain= was using the =brain:= link and =#+BRAIN_PINNED:= file keyword to connect files, which was slow due to the need of searching all files for links. In version 0.4 =org-brain= uses a combination of headline properties, file keywords, =org-id=, and a data file (=org-brain-data-file=).&lt;/p&gt; &#xA;&lt;p&gt;No data in old configurations should be lost, but you&#39;ll have to update the connections between entries. This can be done by using =M-x org-brain-create-relationships-from-links=, but please backup your =org-brain= directory first.&lt;/p&gt; &#xA;&lt;p&gt;It is still possible to add children to an entry by using the =brain-child:= link, but only if the link is inserted with =org-insert-link= (bound to =C-c C-l= in =org-mode= by default). Linking to specific headlines in a file, via =brain:filename::*Headline= is &lt;em&gt;deprecated&lt;/em&gt; and will no longer work, instead you can convert the headline to an entry and link directly to that.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Other useful packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s some missing functionality in =org-brain=, which you may find useful. However there are other packages which might improve your =org-brain= experience. Below are some suggestions (feel free to create an issue or send a pull request if you have more examples), all of them should be available on MELPA.&lt;/p&gt; &#xA;&lt;p&gt;** Chronological entries with =org-expiry=&lt;/p&gt; &#xA;&lt;p&gt;=org-brain= doesn&#39;t add any information on when entries are created, so it is hard get a list of your entries in chronological order. I&#39;ve managed to use =org-expiry= (part of =org-plus-contrib=) to add a =CREATED= property to all =org-brain= headline entries. Then we can use =org-agenda= to show the entries in chronological order.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ;; Setup org-expiry and define a org-agenda function to compare timestamps (require &#39;org-expiry) (setq org-expiry-inactive-timestamps t) (defun org-expiry-created-comp (a b) &#34;Compare `org-expiry-created-property-name&#39; properties of A and B.&#34; (let ((ta (ignore-errors (org-time-string-to-seconds (org-entry-get (get-text-property 0 &#39;org-marker a) org-expiry-created-property-name)))) (tb (ignore-errors (org-time-string-to-seconds (org-entry-get (get-text-property 0 &#39;org-marker b) org-expiry-created-property-name))))) (cond ((if ta (and tb (&amp;lt; ta tb)) tb) -1) ((if tb (and ta (&amp;lt; tb ta)) ta) +1))))&lt;/p&gt; &#xA;&lt;p&gt;;; Add CREATED property when adding a new org-brain headline entry (add-hook &#39;org-brain-new-entry-hook #&#39;org-expiry-insert-created)&lt;/p&gt; &#xA;&lt;p&gt;;; Finally add a function which lets us watch the entries chronologically (defun org-brain-timeline () &#34;List all org-brain headlines in chronological order.&#34; (interactive) (let ((org-agenda-files (org-brain-files)) (org-agenda-cmp-user-defined #&#39;org-expiry-created-comp) (org-agenda-sorting-strategy &#39;(user-defined-down))) (org-tags-view nil (format &#34;+%s&amp;gt;&#34;&#34;&#34; org-expiry-created-property-name)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Now we can use =org-brain-timeline= to view entries in chronological order (newest first).&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/rexim/org-cliplink][org-cliplink]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE A simple command that takes a URL from the clipboard and inserts an org-mode link with a title of a page found by the URL into the current buffer. #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a command which uses =org-cliplink= to add a link from the clipboard as an =org-brain= resource. It guesses the description from the URL title. Here I&#39;ve bound it to =L= in =org-brain-visualize=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defun org-brain-cliplink-resource () &#34;Add a URL from the clipboard as an org-brain resource. Suggest the URL title as a description for resource.&#34; (interactive) (let ((url (org-cliplink-clipboard-content))) (org-brain-add-resource url (org-cliplink-retrieve-title-synchronously url) t)))&lt;/p&gt; &#xA;&lt;p&gt;(define-key org-brain-visualize-mode-map (kbd &#34;L&#34;) #&#39;org-brain-cliplink-resource) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/noctuid/link-hint.el][link-hint]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE link-hint.el is inspired by the link hinting functionality in vim-like browsers and browser plugins such as pentadactyl. It provides commands for using avy to open or copy &#34;links.&#34; #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;After installing =link-hint= you could bind =link-hint-open-link= to a key, and use it in =org-brain-visualize-mode=. If you only want to use =link-hint= in =org-brain-visualize-mode=, you could add the following to your init-file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (define-key org-brain-visualize-mode-map (kbd &#34;C-l&#34;) #&#39;link-hint-open-link) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** [[http://www.gnuvola.org/software/aa2u/][ascii-art-to-unicode]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE Converts simple ASCII art line drawings in the region of the current buffer to Unicode. #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;=ascii-art-to-unicode= is useful if you want =org-brain-visualize-mode= to look a bit nicer. After installing, add the following to your init-file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defface aa2u-face &#39;((t . nil)) &#34;Face for aa2u box drawing characters&#34;) (advice-add #&#39;aa2u-1c :filter-return (lambda (str) (propertize str &#39;face &#39;aa2u-face))) (defun aa2u-org-brain-buffer () (let ((inhibit-read-only t)) (make-local-variable &#39;face-remapping-alist) (add-to-list &#39;face-remapping-alist &#39;(aa2u-face . org-brain-wires)) (ignore-errors (aa2u (point-min) (point-max))))) (with-eval-after-load &#39;org-brain (add-hook &#39;org-brain-after-visualize-hook #&#39;aa2u-org-brain-buffer)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE A utility package to collect various Icon Fonts and propertize them within Emacs. #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;After installing =all-the-icons= you could decorate the resources in =org-brain=, by using =org-brain-after-resource-button-functions=. Here&#39;s a small example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defun org-brain-insert-resource-icon (link) &#34;Insert an icon, based on content of org-mode LINK.&#34; (insert (format &#34;%s &#34; (cond ((string-prefix-p &#34;brain:&#34; link) (all-the-icons-fileicon &#34;brain&#34;)) ((string-prefix-p &#34;info:&#34; link) (all-the-icons-octicon &#34;info&#34;)) ((string-prefix-p &#34;help:&#34; link) (all-the-icons-material &#34;help&#34;)) ((string-prefix-p &#34;http&#34; link) (all-the-icons-icon-for-url link)) (t (all-the-icons-icon-for-file link))))))&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;org-brain-after-resource-button-functions #&#39;org-brain-insert-resource-icon)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;You could also use =all-the-icons= to add icons to entry [[https://orgmode.org/manual/Categories.html][categories]]. For instance if you have two categories named /computers/ and /books/ which you want icons for:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq org-agenda-category-icon-alist `((&#34;computers&#34; ,(list (all-the-icons-material &#34;computer&#34;)) nil nil :ascent center) (&#34;books&#34; ,(list (all-the-icons-faicon &#34;book&#34;)) nil nil :ascent center))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** [[http://jblevins.org/projects/deft/][deft]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE An Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity. #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;After installing =deft=, you can add the function below to your init-file.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defun org-brain-deft () &#34;Use &lt;code&gt;deft&#39; for files in &lt;/code&gt;org-brain-path&#39;.&#34; (interactive) (let ((deft-directory org-brain-path) (deft-recursive t) (deft-extensions &#39;(&#34;org&#34;))) (deft))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/alphapapa/helm-org-rifle][helm-org-rifle]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE It searches both headings and contents of entries in Org buffers, and it displays entries that match all search terms, whether the terms appear in the heading, the contents, or both. #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;After installing =helm-org-rifle=, you can add the function below to your init-file.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defun helm-org-rifle-brain () &#34;Rifle files in `org-brain-path&#39;.&#34; (interactive) (let ((helm-org-rifle-close-unopened-file-buffers nil)) (helm-org-rifle-directories (list org-brain-path))))&lt;/p&gt; &#xA;&lt;p&gt;(defun helm-org-rifle-open-in-brain (candidate) (-let (((buffer . pos) candidate)) (with-current-buffer buffer (goto-char pos) (org-brain-visualize-entry-at-pt))))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;helm-org-rifle-actions (cons &#34;Show entry in org-brain&#34; &#39;helm-org-rifle-open-in-brain) t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/weirdNox/org-noter][org-noter]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE Org-noter&#39;s purpose is to let you create notes that are kept in sync when you scroll through the [PDF etc] document #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;Thanks to [[https://github.com/rosetree][rosetree]] for providing this tip! After installing =org-noter=, add the following to your init-file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-hook &#39;org-noter-insert-heading-hook #&#39;org-id-get-create) (defun org-brain-open-org-noter (entry) &#34;Open `org-noter&#39; on the ENTRY. If run interactively, get ENTRY from context.&#34; (interactive (list (org-brain-entry-at-pt))) (org-with-point-at (org-brain-entry-marker entry) (org-noter))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;=org-brain-open-org-noter= will run =org-noter= on the current entry. This lets you save your PDF notes in =org-brain=, so you can link to them from other entries etc. It can be a good idea to add this command to =org-brain-visualize=, like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (define-key org-brain-visualize-mode-map (kbd &#34;\C-c n&#34;) &#39;org-brain-open-org-noter) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/scallywag/org-board][org-board]] #+BEGIN_QUOTE org-board is a bookmarking and web archival system for Emacs Org mode, building on ideas from Pinboard. It archives your bookmarks so that you can access them even when you&#39;re not online, or when the site hosting them goes down. #+END_QUOTE&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Similar packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Emacs Wiki has an article about [[https://www.emacswiki.org/emacs/WikiModes][wiki modes in Emacs]].&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/jethrokuan/org-roam][org-roam]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE Org-roam is a Roam replica built on top of the all-powerful Org-mode.&lt;/p&gt; &#xA;&lt;p&gt;Org-roam is a solution for effortless non-hierarchical note-taking with Org-mode. With Org-roam, notes flow naturally, making note-taking fun and easy. Org-roam should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.&lt;/p&gt; &#xA;&lt;p&gt;Org-roam aims to implement the core features of Roam, leveraging the mature ecosystem around Org-mode where possible. Eventually, we hope to further introduce features enabled by the Emacs ecosystem. #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/l3kn/org-zettelkasten][Org Zettelkasten]]&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote An opinionated setup for managing large collections of interlinked org files. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/caiorss/org-wiki][org-wiki]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE Org-wiki is a org-mode extension that provides tools to manage and build personal wiki or desktop wiki where each wiki page is a org-mode file. #+END_QUOTE&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jscheid/dtrt-indent</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/jscheid/dtrt-indent</id>
    <link href="https://github.com/jscheid/dtrt-indent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minor mode that guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dtrt-indent&lt;/h1&gt; &#xA;&lt;p&gt;An Emacs minor mode that guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;dtrt-indent.el&lt;/code&gt; for full documentation, including installation instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Related work&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nschum.de/src/emacs/guess-style/&#34;&gt;guess-style&lt;/a&gt; is similar to dtrt-indent, but only guesses offsets of 2, 4 and 8, and lacks support for major modes other than &lt;code&gt;cc-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tpope/vim-sleuth&#34;&gt;vim-sleuth&lt;/a&gt; provides similar functionality for Vim.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Fanael/highlight-quoted</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/Fanael/highlight-quoted</id>
    <link href="https://github.com/Fanael/highlight-quoted" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Highlight Lisp quotes and quoted symbols&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Highlight quoted minor mode for Emacs&lt;/h1&gt; &#xA;&lt;h2&gt;Activate it through a hook&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;emacs-lisp-mode-hook &#39;highlight-quoted-mode)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/terraform-mode</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/emacsorphanage/terraform-mode</id>
    <link href="https://github.com/emacsorphanage/terraform-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major mode of Terraform configuration file&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;terraform-mode.el &lt;img src=&#34;https://github.com/emacsorphanage/terraform-mode/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;a href=&#34;https://melpa.org/#/terraform-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/terraform-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/terraform-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/terraform-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Major mode of &lt;a href=&#34;http://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; configuration file&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/terraform-mode/master/image/terraform-mode.png&#34; alt=&#34;terraform-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;imenu(&lt;code&gt;helm-imenu&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/terraform-mode/master/image/terraform-mode-imenu.png&#34; alt=&#34;terraform-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;terraform-mode.el&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; by &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlighting&lt;/li&gt; &#xA; &lt;li&gt;Indentation&lt;/li&gt; &#xA; &lt;li&gt;imenu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize Variables&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;code&gt;terraform-indent-level&lt;/code&gt;(Default: &lt;code&gt;2&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Indentation size. You need to call &lt;code&gt;revert-buffer&lt;/code&gt; if you change this value outer of hook such as &lt;code&gt;eval-expression&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(terraform-indent-level 4))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/syohex/emacs-hcl-mode&#34;&gt;hcl-mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This major-mode inherits from hcl-mode. Most of syntax features, like highlighting, indentation are implemented in hcl-mode.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lastquestion/explain-pause-mode</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/lastquestion/explain-pause-mode</id>
    <link href="https://github.com/lastquestion/explain-pause-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;top, but for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;explain-pause-mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/projects/1&#34;&gt;See what&#39;s in development in the project board&lt;/a&gt; | &lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/issues&#34;&gt;Feature requests, bug reports, issues&lt;/a&gt; | &lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;v0.2&lt;/em&gt; is the current development release. See &lt;a href=&#34;https://raw.githubusercontent.com/lastquestion/explain-pause-mode/master/#vnext&#34;&gt;vNext&lt;/a&gt; for more details on what&#39;s coming next.&lt;/p&gt; &#xA;&lt;h3&gt;How to use&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;explain-pause-mode&lt;/code&gt; is very lightweight; you can leave it running all the time. Turn it on after requiring it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(explain-pause-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;explain-pause-top&lt;/code&gt; shows a &lt;code&gt;top&lt;/code&gt;-like view of the things Emacs has been doing:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/lastquestion/explain-pause-mode/master/top.gif&#34; height=&#34;338px&#34;&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;There are 2 ways right now to install. (&lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/issues/49&#34;&gt;Melpa coming soon&lt;/a&gt;!)&lt;/p&gt; &#xA;&lt;h4&gt;Straight.el&lt;/h4&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;, then you can use a normal receipe to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(straight-use-package&#xA; &#39;(explain-pause-mode :type git :host github :repo &#34;lastquestion/explain-pause-mode&#34;))&#xA;(explain-pause-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might be using &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt; with &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;, then you can install and enable at the same time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package explain-pause-mode&#xA;  :straight (explain-pause-mode :type git :host github :repo &#34;lastquestion/explain-pause-mode&#34;)&#xA;  :config&#xA;  (explain-pause-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From sources&lt;/h4&gt; &#xA;&lt;p&gt;If you are interested in contributing, you might want to directly install from sources. Just &lt;code&gt;git clone&lt;/code&gt; and then &lt;code&gt;make install&lt;/code&gt;. &lt;code&gt;make install&lt;/code&gt; will bytecompile and install the sources to a path you specify, which should be on your emacs load path. It is important to bytecompile and optimize &lt;code&gt;explain-pause-mode&lt;/code&gt; for normal use, as the package hooks into many operations that happen on every command or keypress.&lt;/p&gt; &#xA;&lt;h3&gt;vNext&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;v0.3&lt;/em&gt; major features roadmap:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/issues/27&#34;&gt;memory tracking and GC pauses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lastquestion/explain-pause-mode/issues/48&#34;&gt;show commands per buffer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contribute&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to take a look at the issues board, development is tracked openly on it and the the project board.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-typescript/typescript.el</title>
    <updated>2022-05-29T01:40:12Z</updated>
    <id>tag:github.com,2022-05-29:/emacs-typescript/typescript.el</id>
    <link href="https://github.com/emacs-typescript/typescript.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TypeScript-support for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;typescript.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/emacs-typescript/typescript.el/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Test&#34;&gt; &lt;a href=&#34;https://melpa.org/#/typescript-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/typescript-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/typescript-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/typescript-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript.el&lt;/code&gt; is a major-mode for editing &lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;Typescript&lt;/a&gt;-files in &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript.el&lt;/code&gt; is a self-contained, lightweight and minimalist major-mode focused on providing basic font-lock/syntax-highlighting and indentation for Typescript syntax, without any external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Output from &lt;code&gt;tsc&lt;/code&gt; and &lt;code&gt;tslint&lt;/code&gt; is also handled seamlessly through &lt;code&gt;compilation-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript.el&lt;/code&gt; can be installed from source directly using your favourite approach or framework, or from MELPA and MELPA Stable as a package.&lt;/p&gt; &#xA;&lt;p&gt;To install typescript.el simply type &lt;code&gt;M-x package-install&amp;lt;RET&amp;gt;typescript-mode&amp;lt;RET&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;To customize &lt;code&gt;typescript.el&lt;/code&gt; just type the following: &lt;code&gt;M-x customize-group&amp;lt;RET&amp;gt;typescript&amp;lt;RET&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can add any other customization you like to &lt;code&gt;typescript-mode-hook&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; file. &lt;code&gt;typescript.el&lt;/code&gt; also handles &lt;code&gt;prog-mode-hook&lt;/code&gt; on versions of Emacs which supports it.&lt;/p&gt; &#xA;&lt;h1&gt;Support for Compilation Mode&lt;/h1&gt; &#xA;&lt;p&gt;This mode automatically adds support for &lt;code&gt;compilation-mode&lt;/code&gt; so that if you run &lt;code&gt;M-x compile&amp;lt;ret&amp;gt;tsc&amp;lt;ret&amp;gt;&lt;/code&gt; the error messages are correctly parsed.&lt;/p&gt; &#xA;&lt;p&gt;However, the error messages produced by &lt;code&gt;tsc&lt;/code&gt; when its &lt;code&gt;pretty&lt;/code&gt; flag is turned on include ANSI color escapes, which by default &lt;code&gt;compilation-mode&lt;/code&gt; does not interpret. In order to get the escapes parsed, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;ansi-color)&#xA;(defun colorize-compilation-buffer ()&#xA;  (ansi-color-apply-on-region compilation-filter-start (point-max)))&#xA;(add-hook &#39;compilation-filter-hook &#39;colorize-compilation-buffer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you prefer, you can configure &lt;code&gt;tsc&lt;/code&gt; with the &lt;code&gt;pretty&lt;/code&gt; flag set to &lt;code&gt;false&lt;/code&gt;: &lt;code&gt;tsc --pretty false&lt;/code&gt;. However, doing this does more than just turning off the colors. It also causes &lt;code&gt;tsc&lt;/code&gt; to produce less elaborate error messages.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;To run the tests you can run &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer, you may run the tests via the provided &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t typescript-mode .&#xA;docker run --rm -v $(pwd):/typescript-mode typescript-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Other Typescript-packages of interest&lt;/h1&gt; &#xA;&lt;p&gt;While &lt;code&gt;typescript.el&lt;/code&gt; may &lt;em&gt;not&lt;/em&gt; provide a full kitchen-sink, the good news is that there&#39;s other packages which do!&lt;/p&gt; &#xA;&lt;p&gt;More advanced features can be provided by using these additional packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; - A standards-based code-completion and refactoring backend, based on the &lt;a href=&#34;https://langserver.org/&#34;&gt;Language Server Protocol (LSP)&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ananthakumaran/tide/&#34;&gt;tide&lt;/a&gt; - TypeScript Interactive Development Environment for Emacs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/josteink/ts-comint&#34;&gt;ts-comint&lt;/a&gt; - a Typescript REPL in Emacs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Initializing these with &lt;code&gt;typescript.el&lt;/code&gt; will then become a matter of creating your own &lt;code&gt;typescript-mode-hook&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>