<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-20T01:25:44Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>snosov1/toc-org</title>
    <updated>2024-02-20T01:25:44Z</updated>
    <id>tag:github.com,2024-02-20:/snosov1/toc-org</id>
    <link href="https://github.com/snosov1/toc-org" rel="alternate"></link>
    <summary type="html">&lt;p&gt;toc-org is an Emacs utility to have an up-to-date table of contents in the org files without exporting (useful primarily for readme files on GitHub)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://travis-ci.org/snosov1/toc-org][file:https://api.travis-ci.org/snosov1/toc-org.svg?branch=master]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=toc-org= helps you to have an up-to-date table of contents in org files without exporting (useful primarily for readme files on GitHub).&lt;/p&gt; &#xA;&lt;p&gt;It is similar to the [[https://github.com/ardumont/markdown-toc][markdown-toc]] package, but works for org files. Since recently, =toc-org=, actually, works in [[#markdown-support][markdown]], too!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Previous name of the package is =org-toc=. It was changed because of a name conflict with one of the org contrib modules.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :TOC:QUOTE: #+BEGIN_QUOTE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#about][About]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#via-packageel][via package.el]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#manual][Manual]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#use][Use]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#follow-links][Follow links]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#exclude-headings][Exclude headings]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#quote-table-of-contents][Quote table of contents]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#shortcut-for-toc-tag][Shortcut for TOC tag]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#markdown-support][Markdown support]]&lt;/li&gt; &#xA; &lt;li&gt;[[#different-href-styles][Different href styles]]&lt;/li&gt; &#xA; &lt;li&gt;[[#example][Example]] #+END_QUOTE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation ** via package.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://elpa.nongnu.org/nongnu/toc-org.html][https://elpa.nongnu.org/nongnu/toc-org.svg]] [[http://melpa.org/#/toc-org][file:http://melpa.org/packages/toc-org-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This is the simplest method if you have the package.el module (built-in since Emacs 24.1) you can simply use =M-x package-install= after setting up the [[http://melpa.org/#/getting-started][MELPA]] repository and then put the following snippet in your ~/.emacs file&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (if (require &#39;toc-org nil t) (progn (add-hook &#39;org-mode-hook &#39;toc-org-mode)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ;; enable in markdown, too&#xA;    (add-hook &#39;markdown-mode-hook &#39;toc-org-mode)&#xA;    (define-key markdown-mode-map (kbd &#34;\C-c\C-o&#34;) &#39;toc-org-markdown-follow-thing-at-point))&#xA;(warn &#34;toc-org not found&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Manual&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create folder ~/.emacs.d if you don&#39;t have it&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to it and clone toc-org there #+BEGIN_SRC sh git clone &lt;a href=&#34;https://github.com/snosov1/toc-org.git&#34;&gt;https://github.com/snosov1/toc-org.git&lt;/a&gt; #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put this in your ~/.emacs file #+BEGIN_SRC elisp (if (require &#39;toc-org nil t) (progn (add-hook &#39;org-mode-hook &#39;toc-org-mode)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;    ;; enable in markdown, too&#xA;    (add-hook &#39;markdown-mode-hook &#39;toc-org-mode)&#xA;    (define-key markdown-mode-map (kbd &#34;\C-c\C-o&#34;) &#39;toc-org-markdown-follow-thing-at-point))&#xA;(warn &#34;toc-org not found&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After the installation, every time you&#39;ll be saving an org file, the first headline with a =:TOC:= tag will be updated with the current table of contents.&lt;/p&gt; &#xA;&lt;p&gt;To add a TOC tag, you can use the command =org-set-tags-command= (=C-c C-q=).&lt;/p&gt; &#xA;&lt;p&gt;In addition to the simple :TOC: tag, you can also use the following tag formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;:TOC_2: - sets the max depth of the headlines in the table of contents to 2 (the default)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;:TOC_2_gh: - sets the max depth as in above and also uses the GitHub-style hrefs in the table of contents (this style is default). The other supported href style is &#39;org&#39;, which is the default org style.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use =@= as separator, instead of =_=.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to set the default values of max depth and hrefify function with =toc-org-max-depth= and =toc-org-hrefify-default= variables. But, note, that if you do this outside of the org file itself, then you can face conflicts if you work on the same file collaboratively with someone else, as your default configs can vary.&lt;/p&gt; &#xA;&lt;p&gt;** Follow links&lt;/p&gt; &#xA;&lt;p&gt;If you call =M-x org-open-at-point= (=C-c C-o=) when you&#39;re at a TOC entry, the point will jump to the corresponding heading.&lt;/p&gt; &#xA;&lt;p&gt;Notice, that this functionality exploits the =org-link-translation-function= variable. So, it won&#39;t work if you use this variable for other purposes (i.e. it is not nil).&lt;/p&gt; &#xA;&lt;p&gt;You can manually disable this functionality by setting =toc-org-enable-links-opening= to nil.&lt;/p&gt; &#xA;&lt;p&gt;** Exclude headings&lt;/p&gt; &#xA;&lt;p&gt;Headings tagged with =:noexport:= will be excluded from the TOC. If you want to preserve the heading, but strip its children (for changelog entries, for example), you can tag it =:noexport_1:= (by analogy, you can use =:noexport_2:=, =:noexport_3:=, etc. for children of deeper levels). Note, though, =:noexport:= has a similar meaning in =org-mode=, which I hope is a Good Thing (tm). However, =:noexport_1:= and friends won&#39;t be recognized by =org-mode= as anything special. Look at =org-export-exclude-tags= variable for more details.&lt;/p&gt; &#xA;&lt;p&gt;** Quote table of contents&lt;/p&gt; &#xA;&lt;p&gt;For presentation purposes, you might want to put the table of contents in a quote block (i.e. =#+BEGIN_QUOTE= / =#+END_QUOTE=). In that case, GitHub, for example, will add a vertical line to the left of the TOC that makes it distinct from the main text. To do this, just add a =:QUOTE:= tag to the TOC heading.&lt;/p&gt; &#xA;&lt;p&gt;** Shortcut for TOC tag&lt;/p&gt; &#xA;&lt;p&gt;In your emacs&#39; setup, you can bind a tag =:TOC:= to a binding =T=:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-to-list &#39;org-tag-alist &#39;(&#34;TOC&#34; . ?T)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Now =C-c C-q T RET= and you are done putting the =:TOC:= entry.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Markdown support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also enable the mode in Markdown files and get pretty much the same functionality. The package will&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Look for &#39;#&#39;s instead of &#39;*&#39;s as heading markers.&lt;/li&gt; &#xA; &lt;li&gt;Expect the =:TOC:= tag to appear as comment, like, =&#xA;  &lt;!-- :TOC: --&gt;=&lt;/li&gt; &#xA; &lt;li&gt;Format the links and the quote block according to Markdown syntax&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC markdown&lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;h1&gt;Table of Contents &#xA; &lt;!-- :TOC: --&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#via-packageel&#34;&gt;via package.el&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#use&#34;&gt;Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;via package.el&lt;/h2&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;h1&gt;Use&lt;/h1&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Different href styles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, only 2 href styles are supported: =gh= and =org=. You can easily define your own styles. If you use the tag =:TOC_2_STYLE:= (=STYLE= being a style name), then the package will look for a function named =toc-org-hrefify-STYLE=.&lt;/p&gt; &#xA;&lt;p&gt;It should accept a heading string and a hash table of previously generated hrefs. The table can be used to maintain href uniqueness (see =toc-org-hrefify-gh=, for example). Return value should be a href corresponding to that heading.&lt;/p&gt; &#xA;&lt;p&gt;E.g. for =org= style it makes links to be the same as their visible text:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defun toc-org-hrefify-org (str &amp;amp;optional hash) &#34;Given a heading, transform it into a href using the org-mode rules.&#34; (toc-org-format-visible-link str)) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Example #+BEGIN_SRC org&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;About&lt;/li&gt; &#xA;   &lt;li&gt;Table of Contents :TOC:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#about][About]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#installation][Installation]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#via-packageel][via package.el]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#manual][Manual]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#use][Use]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#example][Example]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Installation ** via package.el ** Manual&lt;/li&gt; &#xA;   &lt;li&gt;Use&lt;/li&gt; &#xA;   &lt;li&gt;Example #+END_SRC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>