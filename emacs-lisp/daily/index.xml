<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-02T01:32:52Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jkitchin/org-ref</title>
    <updated>2022-09-02T01:32:52Z</updated>
    <id>tag:github.com,2022-09-02:/jkitchin/org-ref</id>
    <link href="https://github.com/jkitchin/org-ref" rel="alternate"></link>
    <summary type="html">&lt;p&gt;org-mode modules for citations, cross-references, bibliographies in org-mode and useful bibtex tools to go with it.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;-&lt;em&gt;- org-edit-src-content-indentation: 0; -&lt;/em&gt;-&lt;/h1&gt; &#xA;&lt;p&gt;#+TITLE: org-ref: citations, cross-references, indexes, glossaries and bibtex utilities for org-mode&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://travis-ci.org/jkitchin/org-ref&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jkitchin/org-ref.svg?branch=master&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;#+BEGIN_html &lt;a href=&#34;https://github.com/jkitchin/org-ref/actions&#34;&gt;&lt;img src=&#34;https://github.com/jkitchin/org-ref/actions/workflows/test-org-ref.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/org-ref&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/org-ref-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://stable.melpa.org/#/org-ref&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;http://stable.melpa.org/packages/org-ref-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+END_html&lt;/p&gt; &#xA;&lt;p&gt;Overview of org-ref for export to PDF via LaTeX.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_html &lt;a href=&#34;https://www.youtube.com/watch?v=3u6eTSzHT6s&#34;&gt; &lt;img src=&#34;http://img.youtube.com/vi/3u6eTSzHT6s/0.jpg&#34;&gt; &lt;/a&gt; #+END_html&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About org-ref&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=org-ref= makes it easy to insert citations, cross-references, indexes and glossaries as hyper-functional links into org files. The links are fontified so you can tell them apart from other links, and each link is clickable to access functions like opening a pdf, notes or url associated with the link. Each link also can be exported to LaTeX to build a PDF. For citations, export to other formats is supported by [[https://github.com/andras-simonyi/citeproc-el][citeproc]] for high quality export to HTML, markdown, plain text, or stand-alone (i.e. independent of a bibtex file) LaTeX. For a full explanation of the features in org-ref see [[./org-ref.org]].&lt;/p&gt; &#xA;&lt;p&gt;** What about org-cite?&lt;/p&gt; &#xA;&lt;p&gt;A new syntax for citations was added in org-mode version 9.5. org-cite is designed to be very modular, with different processors for inserting, activating, following and exporting citations. It also uses a different cite/style type of syntax. It does not handle cross-references or provide any of the bibtex tools that are available in org-ref. The main advantages of org-cite include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It is built in to org-mode now&lt;/li&gt; &#xA; &lt;li&gt;It is highly modular, so you can configure it any way you want&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It is possible to use org-cite for citation support instead of the org-ref citation links. You can configure the &lt;del&gt;org-ref-insert-cite-function&lt;/del&gt; variable to use &lt;del&gt;org-cite-insert&lt;/del&gt;. This will then use your org-cite configured [[https://orgmode.org/manual/Citation-handling.html][processors]] to insert, follow, activate and export citations. You should avoid mixing org-ref citation links and org-cite citations. They are handled independently.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq org-ref-insert-cite-function (lambda () (org-cite-insert nil))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;You can still use the org-ref cross-reference links if you use org-cite citations. These packages should be able to co-exist without issue.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some annotated images of basic insertion of citations in org-mode. These are with the ivy backend.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_org: :width 800 [[./screenshots/introduction.png]]&lt;/p&gt; &#xA;&lt;p&gt;This what an inserted link looks like.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_org: :width 800 #+caption: Tooltip on an inserted link. [[./screenshots/cite-tooltip.png]]&lt;/p&gt; &#xA;&lt;p&gt;The links in org-ref are hyper-functional (that means they have more than one action associated with them). They do things when your cursor is on them, or you click on them, and when the mouse hovers over them.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a menu of actions you get when you click on a cite link.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_org: :width 800 #+caption: Menu of actions from clicking on a cite link. [[./screenshots/functional-cite-links.png]]&lt;/p&gt; &#xA;&lt;p&gt;Here is a cross-reference link.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_org: :width 800 #+caption: Functional cross-reference link. [[./screenshots/functional-links-2.png]]&lt;/p&gt; &#xA;&lt;p&gt;org-ref can analyze your org-file and tell you about it, for example if there are bad citations, multiply defined labels, bad reference links, missing bibliography files, etc... You can select each one and it will jump to the location to help you fix it.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_org: :width 800 #+caption: Screenshot from the org-ref analysis command. [[./screenshots/org-ref-analysis.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Package installation via Melpa&lt;/p&gt; &#xA;&lt;p&gt;org-ref has been added to Melpa. This is the recommended way to install org-ref as it should also install almost all the dependencies. It also should reflect what is in the master branch in the Github repo (&lt;a href=&#34;https://github.com/jkitchin/org-ref&#34;&gt;https://github.com/jkitchin/org-ref&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;&lt;a href=&#34;https://melpa.org/packages/&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&#34;) t) (package-initialize) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Then, you should be able to do M-x package-list-packages, find org-ref and install it, or with&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package org-ref) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Two exceptions to packages that are /not/ installed are helm, helm-bibtex, ivy and ivy-bibtex. You have to install those yourself. This change is to accommodate people who just can not stand having those packages installed if they do not use them.&lt;/p&gt; &#xA;&lt;p&gt;** Installation via github&lt;/p&gt; &#xA;&lt;p&gt;Make sure all the [[https://github.com/jkitchin/org-ref/blob/master/org-ref.el#L9][dependencies]] are installed. Then clone this repo, add it to your load-path.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh git clone &lt;a href=&#34;https://github.com/jkitchin/org-ref.git&#34;&gt;https://github.com/jkitchin/org-ref.git&lt;/a&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Add this to your .emacs file and see the [[*Configuration]] section.&lt;/p&gt; &#xA;&lt;p&gt;** Configuration&lt;/p&gt; &#xA;&lt;p&gt;Version 3 has eliminated all the =org-ref-*= variables, and instead uses analogous variables defined in =bibtex-completion=.&lt;/p&gt; &#xA;&lt;p&gt;There are some working configurations at &lt;a href=&#34;https://github.com/jkitchin/org-ref/tree/master/melpa&#34;&gt;https://github.com/jkitchin/org-ref/tree/master/melpa&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is how I have these variables set for myself.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq bibtex-completion-bibliography &#39;(&#34;&lt;del&gt;/Dropbox/emacs/bibliography/references.bib&#34; &#34;&lt;/del&gt;/Dropbox/emacs/bibliography/dei.bib&#34; &#34;&lt;del&gt;/Dropbox/emacs/bibliography/master.bib&#34; &#34;&lt;/del&gt;/Dropbox/emacs/bibliography/archive.bib&#34;) bibtex-completion-library-path &#39;(&#34;&lt;del&gt;/Dropbox/emacs/bibliography/bibtex-pdfs/&#34;) bibtex-completion-notes-path &#34;&lt;/del&gt;/Dropbox/emacs/bibliography/notes/&#34; bibtex-completion-notes-template-multiple-files &#34;* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&amp;amp;${=key=}]]\n&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bibtex-completion-additional-search-fields &#39;(keywords)&#xA;bibtex-completion-display-formats&#xA;&#39;((article       . &#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}&#34;)&#xA;  (inbook        . &#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}&#34;)&#xA;  (incollection  . &#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}&#34;)&#xA;  (inproceedings . &#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}&#34;)&#xA;  (t             . &#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}&#34;))&#xA;bibtex-completion-pdf-open-function&#xA;(lambda (fpath)&#xA;  (call-process &#34;open&#34; nil 0 nil fpath)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;I also find these settings helpful for automatically generating bibtex keys.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (require &#39;bibtex)&lt;/p&gt; &#xA;&lt;p&gt;(setq bibtex-autokey-year-length 4 bibtex-autokey-name-year-separator &#34;-&#34; bibtex-autokey-year-title-separator &#34;-&#34; bibtex-autokey-titleword-separator &#34;-&#34; bibtex-autokey-titlewords 2 bibtex-autokey-titlewords-stretch 1 bibtex-autokey-titleword-length 5)&lt;/p&gt; &#xA;&lt;p&gt;(define-key bibtex-mode-map (kbd &#34;H-b&#34;) &#39;org-ref-bibtex-hydra/body) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;After you set those options, you have these options to load org-ref.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer ivy-bibtex, you should use this. It requires =ivy-bibtex=, but this is not currently automatically installed by MELPA.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (require &#39;org-ref) (require &#39;org-ref-ivy) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;If you prefer helm, you can instead use this. This uses code from =helm-bibtex= for citation insertion. It requires helm-bibtex, but this is not currently automatically installed by MELPA.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (require &#39;org-ref) (require &#39;org-ref-helm) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;org-ref no longer binds keyboard shortcuts for you. You have some options here. To get the behavior of version 2, use this in your init file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (define-key org-mode-map (kbd &#34;C-c ]&#34;) &#39;org-ref-insert-link) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C-c ] :: insert a citation&lt;/li&gt; &#xA; &lt;li&gt;C-u C-c ] :: insert a cross-reference&lt;/li&gt; &#xA; &lt;li&gt;Cu C-u C-c ] :: insert a label&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (define-key org-mode-map (kbd &#34;C-c ]&#34;) &#39;org-ref-insert-link-hydra/body) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C-c ] [:: insert a citation&lt;/li&gt; &#xA; &lt;li&gt;C-c ] ] :: insert a cross-reference&lt;/li&gt; &#xA; &lt;li&gt;C-c ] \ :: insert a label&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can bind each insert command separately if you want after the library is loaded like this. Here I use the hyper key as a modifier, but you can choose anything you find convenient.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (define-key org-mode-map (kbd &#34;H-c&#34;) org-ref-insert-cite-function) (define-key org-mode-map (kbd &#34;H-r&#34;) org-ref-insert-ref-function) (define-key org-mode-map (kbd &#34;H-l&#34;) org-ref-insert-label-function) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;If you use some other completing-read backend like selectrum, or ido, then for a bare-bones library that uses vanilla completing-read, you can simply require &#39;org-ref. I don&#39;t find the vanilla completing-read setup that useful on its own as it doesn&#39;t do candidate narrowing or fuzzy matching without some external configuration. It is an option if you want it though.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (require &#39;org-ref) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;You can use any other library that inserts links you want. Some of these include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;citar (&lt;a href=&#34;https://github.com/bdarcus/citar#configuration&#34;&gt;https://github.com/bdarcus/citar#configuration&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ebib (&lt;a href=&#34;https://joostkremers.github.io/ebib/&#34;&gt;https://joostkremers.github.io/ebib/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You could even roll your own insert functions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** LaTeX/PDF export&lt;/p&gt; &#xA;&lt;p&gt;If you plan to build PDF files via LaTeX you need to make sure that org-latex-pdf-process is set to process the bibliography (using bibtex or biblatex). Here is one example of how to do that (see [[./org-ref.org::*LaTeX export]] for other alternatives).&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq org-latex-pdf-process (list &#34;latexmk -shell-escape -bibtex -f -pdf %f&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Go forth and citate.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some other useful libraries in org-ref&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note many of these have been renamed with an org-ref prefix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[./x2bib.el][x2bib]] :: Convert bibliography formats to and from bibtex. In most cases, it relies on the command line [[https://sourceforge.net/p/bibutils/home/Bibutils/][bibutils]] package (available in source form at the link; can be installed on a Mac using Homebrew with &lt;del&gt;brew install bibutils&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following libraries are not loaded by default. They may be useful in specialist cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[./doi-utils.el][doi-utils]] :: Download bibtex entries and PDFs from doi and crossref queries.&lt;/li&gt; &#xA; &lt;li&gt;[[./nist-webbook.el][nist-webbook]] :: Links to NIST Webbook resources&lt;/li&gt; &#xA; &lt;li&gt;[[./org-ref-arxiv.el][org-ref-arxiv]] :: arxiv links, add bibtex entries from arxiv.org.&lt;/li&gt; &#xA; &lt;li&gt;[[./org-ref-bibtex.el][org-ref-bibtex]] :: Utility functions for bibtex&lt;/li&gt; &#xA; &lt;li&gt;[[./org-ref-isbn.el][org-ref-isbn]] :: Add bibtex entries from a book ISBN&lt;/li&gt; &#xA; &lt;li&gt;[[./org-ref-pubmed.el][org-ref-pubmed]] :: pubmed links, add bibtex entries from PMID.&lt;/li&gt; &#xA; &lt;li&gt;[[./org-ref-scifinder.el][org-ref-scifinder]] :: one small function for searching SciFinder&lt;/li&gt; &#xA; &lt;li&gt;[[./org-ref-scopus.el][org-ref-scopus]] :: Scopus links and queries&lt;/li&gt; &#xA; &lt;li&gt;[[./org-ref-worldcat.el][org-ref-worldcat]] :: One small function for searching Worldcat&lt;/li&gt; &#xA; &lt;li&gt;[[./org-ref-wos.el][org-ref-wos]] :: WebOfKnowledge links and queries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following libraries are still included, but they have been unreliable and are no longer recommended for use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[./org-ref-pdf.el][org-ref-pdf]] :: Add drag-n-drop PDF to create bibtex entries (this code has not been reliable, and is no longer recommended for use)&lt;/li&gt; &#xA; &lt;li&gt;[[./org-ref-url-utils.el][org-ref-url-utils]] :: Add drag-n-drop urls to create bibtex entries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manual&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, see the [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][org-ref manual]], or preferably use &lt;del&gt;M-x org-ref-help&lt;/del&gt; in emacs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Errors and issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please report errors here: [[https://github.com/jkitchin/org-ref/issues][issues]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I would like to thank the [[https://github.com/jkitchin/org-ref/graphs/contributors][contributors]] to org-ref, and everyone who has filed an [[https://github.com/jkitchin/org-ref/issues][issue]], or asked about org-ref on the [[http://orgmode.org/community.html][org-mode Mailing list]].&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in making a contribution to org-ref, I encourage you to reach out to me to discuss the idea first. The issue handler is a great way to do that, so that others can offer opinions too.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsmirror/undo-fu-session</title>
    <updated>2022-09-02T01:32:52Z</updated>
    <id>tag:github.com,2022-09-02:/emacsmirror/undo-fu-session</id>
    <link href="https://github.com/emacsmirror/undo-fu-session" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Persistent undo, available between sessions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;############### Undo Fu Session ###############&lt;/p&gt; &#xA;&lt;p&gt;Save &amp;amp; recover undo steps between Emacs sessions.&lt;/p&gt; &#xA;&lt;p&gt;This package writes undo/redo information upon file save which is restored where possible when the file is loaded again.&lt;/p&gt; &#xA;&lt;p&gt;The following features are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Store full undo/redo history, allowing &lt;code&gt;undo-only&lt;/code&gt; to work as expected.&lt;/li&gt; &#xA; &lt;li&gt;Uses a minor-mode which can be enabled globally or buffer-local.&lt;/li&gt; &#xA; &lt;li&gt;Option to store compressed.&lt;/li&gt; &#xA; &lt;li&gt;Option to limit number of undo-session files stored &lt;em&gt;(avoid adding files indefinitely until the user manually removes them).&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fast early-exit on restore &lt;em&gt;(only decode undo data if buffer length &amp;amp; checksum match).&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available via &lt;code&gt;melpa &amp;lt;https://melpa.org/#/undo-fu-session&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;To have a stand-alone package that stores Emacs built-in undo information for re-use, without imposing any changes to undo functionality.&lt;/p&gt; &#xA;&lt;p&gt;While this package is intended for use with &lt;code&gt;undo-fu &amp;lt;https://codeberg.org/ideasman42/emacs-undo-fu&amp;gt;&lt;/code&gt;__, there are no inter-dependencies.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Typically this package is enabled globally, afterwards it runs automatically when saving &amp;amp; loading files.&lt;/p&gt; &#xA;&lt;h2&gt;Enable (Global)&lt;/h2&gt; &#xA;&lt;p&gt;Enabling globally is most straightforward, you can then disable storing undo information by mode and file-name.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;(global-undo-fu-session-mode)&lt;/p&gt; &#xA;&lt;h2&gt;Enable (Buffer)&lt;/h2&gt; &#xA;&lt;p&gt;If you want to isolate this functionality, you can enable this using a mode hook for e.g.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;;; Only use undo-fu-session for org mode. (add-hook &#39;org-mode-hook (lambda () (undo-fu-session-mode))&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;undo-fu-session-directory&lt;/code&gt; (&lt;code&gt;&#34;undo-fu-session&#34;&lt;/code&gt; in emacs user directory) The location of stored files. &lt;code&gt;undo-fu-session-linear&lt;/code&gt; (&lt;code&gt;nil&lt;/code&gt;) Write linear undo history, omitting branches which were themselves undone.&lt;/p&gt; &#xA;&lt;p&gt;Note that this only writes undo steps which would be used by &lt;code&gt;undo-only&lt;/code&gt;. &lt;code&gt;undo-fu-session-compression&lt;/code&gt; (&lt;code&gt;&#39;bz2&lt;/code&gt; &lt;code&gt;&#39;gz&lt;/code&gt; &lt;code&gt;&#39;xz&lt;/code&gt; &lt;code&gt;&#39;zst&lt;/code&gt; &lt;code&gt;nil&lt;/code&gt;) Compression setting for stored undo data.&lt;/p&gt; &#xA;&lt;p&gt;After changing, run &lt;code&gt;undo-fu-session-compression-update&lt;/code&gt; to convert existing files to the newly selected format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;undo-fu-session-incompatible-files&lt;/code&gt; (&lt;code&gt;&#39;()&lt;/code&gt;) List of regexps or functions for matching file names to ignore saving/recovering undo session. &lt;code&gt;undo-fu-session-incompatible-major-modes&lt;/code&gt; (&lt;code&gt;nil&lt;/code&gt;) List of major-modes in which saving undo session should not be performed. &lt;code&gt;undo-fu-session-file-limit&lt;/code&gt; (&lt;code&gt;nil&lt;/code&gt;) Number of files to store, nil to disable limiting entirely.&lt;/p&gt; &#xA;&lt;p&gt;Enforcing removes the oldest files.&lt;/p&gt; &#xA;&lt;h1&gt;Details&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Undo session information is stored in a directory, with a corresponding file for each undo session.&lt;/li&gt; &#xA; &lt;li&gt;Each file stores a length and checksum which is validated before restoring the undo-session.&lt;/li&gt; &#xA; &lt;li&gt;A mismatch with the file length or checksum will skip loading the undo session with a message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The package is available in melpa as &lt;code&gt;undo-fu-session&lt;/code&gt;, here is an example with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;(use-package undo-fu-session :config (setq undo-fu-session-incompatible-files &#39;(&#34;/COMMIT_EDITMSG\&#39;&#34; &#34;/git-rebase-todo\&#39;&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;(global-undo-fu-session-mode)&lt;/p&gt; &#xA;&lt;h2&gt;Undo Tree&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;undo-tree&lt;/code&gt; defines it&#39;s own undo data-structures and is not compatible with &lt;code&gt;undo-fu-session&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These packages cannot be used together.&lt;/p&gt; &#xA;&lt;h1&gt;Other Packages&lt;/h1&gt; &#xA;&lt;p&gt;As there are multiple packages which deal with undo, it&#39;s worth mentioning how this interacts with other packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Undo Fu &amp;lt;https://codeberg.org/ideasman42/emacs-undo-fu&amp;gt;&lt;/code&gt;__ This package is intended for use with undo-fu-session, as a convenience wrapper over Emacs built-in undo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Undohist &amp;lt;https://github.com/emacsorphanage/undohist&amp;gt;&lt;/code&gt;__ This package also stores undo data between sessions, however it doesn&#39;t store redo data making undo-only and redo-only operations fail to skip branches of undo history.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Vundo &amp;lt;https://github.com/casouri/vundo&amp;gt;&lt;/code&gt;__ This package supports navigating undo as a tree structure, and works with undo/redo history loaded by &lt;code&gt;undo-fu-session&lt;/code&gt; although there are no inter-dependencies as both packages operate on Emacs built-in undo.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kiwanami/emacs-ctable</title>
    <updated>2022-09-02T01:32:52Z</updated>
    <id>tag:github.com,2022-09-02:/kiwanami/emacs-ctable</id>
    <link href="https://github.com/kiwanami/emacs-ctable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Table Component for elisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Table Component for elisp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ctable.el&lt;/code&gt; is a table component for emacs lisp. Emacs lisp programs can display a nice table view from an abstract data model. The many emacs programs have the code for displaying table views, such as &lt;code&gt;dired&lt;/code&gt;, &lt;code&gt;list-process&lt;/code&gt;, &lt;code&gt;buffer-list&lt;/code&gt; and so on. So, ctable.el would provide functions and a table framework for the table views.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To use this program, locate this file to load-path directory, and add the following code to your program code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;ctable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;h2&gt;Hello World&lt;/h2&gt; &#xA;&lt;p&gt;Giving a list of the rows list to the function `ctbl:popup-table-buffer-easy&#39;, a simple table buffer is popped out.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ctbl:popup-table-buffer-easy &#xA; &#39;((1 2 3 4) (5 6 7 8) (9 10 11 12)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the result image. The header titles are generated automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/sample-1-1.png&#34; alt=&#34;sample-1-1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Giving two lists, the latter list is displayed at header titles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ctbl:popup-table-buffer-easy &#xA; &#39;((1 2 3 4) (5 6 7 8) (9 10 11 12))&#xA; &#39;(aaa bbb ccc ddd))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the result image.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/sample-1-2.png&#34; alt=&#34;sample-1-2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic Use&lt;/h2&gt; &#xA;&lt;p&gt;The objects of ctable are designed by the MVC pattern. Programmers can customize ctable objects to use rich table views in the applications easily.&lt;/p&gt; &#xA;&lt;p&gt;First, one defines the column model and data model for the user application. The former model defines how the column should be display, the latter one does the contents to display.&lt;/p&gt; &#xA;&lt;p&gt;Second, one chooses builds the view component with the models.&lt;/p&gt; &#xA;&lt;p&gt;Here is an illustration for the object relations in this basic case.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/normal_use.png&#34; alt=&#34;Object relations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample code for the model and view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(let* ((column-model ; column model&#xA;        (list (make-ctbl:cmodel&#xA;              :title &#34;A&#34; :sorter &#39;ctbl:sort-number-lessp&#xA;              :min-width 5 :align &#39;right)&#xA;              (make-ctbl:cmodel&#xA;               :title &#34;Title&#34; :align &#39;center&#xA;               :sorter (lambda (a b) (ctbl:sort-number-lessp (length a) (length b))))&#xA;              (make-ctbl:cmodel&#xA;               :title &#34;Comment&#34; :align &#39;left)))&#xA;       (data&#xA;        &#39;((1  &#34;Bon Tanaka&#34; &#34;8 Year Curry.&#34; &#39;a)&#xA;          (2  &#34;Bon Tanaka&#34; &#34;Nan-ban Curry.&#34; &#39;b)&#xA;          (3  &#34;Bon Tanaka&#34; &#34;Half Curry.&#34; &#39;c)&#xA;          (4  &#34;Bon Tanaka&#34; &#34;Katsu Curry.&#34; &#39;d)&#xA;          (5  &#34;Bon Tanaka&#34; &#34;Gyu-don.&#34; &#39;e)&#xA;          (6  &#34;CoCo Ichi&#34;  &#34;Beaf Curry.&#34; &#39;f)&#xA;          (7  &#34;CoCo Ichi&#34;  &#34;Poke Curry.&#34; &#39;g)&#xA;          (8  &#34;CoCo Ichi&#34;  &#34;Yasai Curry.&#34; &#39;h)&#xA;          (9  &#34;Berkley&#34;    &#34;Hamburger Curry.&#34; &#39;i)&#xA;          (10 &#34;Berkley&#34;    &#34;Lunch set.&#34; &#39;j)&#xA;          (11 &#34;Berkley&#34;    &#34;Coffee.&#34; k)))&#xA;       (model ; data model&#xA;          (make-ctbl:model&#xA;           :column-model column-model :data data))&#xA;       (component ; ctable component&#xA;        (ctbl:create-table-component-buffer&#xA;         :model model)))&#xA;  (pop-to-buffer (ctbl:cp-get-buffer component)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the result image.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/sample-2-1.png&#34; alt=&#34;sample-2-1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The models have further options and functions to customize the display and behavior, such as column width, text alignment, sorting and so on. (See Model section)&lt;/p&gt; &#xA;&lt;p&gt;The key-binding on the table can be customized by the keymap object in the usual way. Then, the user program implements the custom function which refers the focused cell. (See Key Bindings section)&lt;/p&gt; &#xA;&lt;p&gt;The ctable framework provides some hooks to notify the usual events: click, selection change and update view. (See Event Handling section)&lt;/p&gt; &#xA;&lt;p&gt;The appearance of the table can be customized, such as foreground and background color, tabular lines. (See Display Parameter section)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/objects.png&#34; alt=&#34;ctable components&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sample Codes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;samples/simple.el &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sample codes mentioned above.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;samples/large-table.el &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;large data and async-model samples.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;samples/direx-ctable.el &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;directory tree and table list in collaboration with direx.el&lt;/li&gt; &#xA;   &lt;li&gt;ref: &lt;a href=&#34;https://github.com/m2ym/direx-el&#34;&gt;https://github.com/m2ym/direx-el&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/direx-ctable.png&#34; alt=&#34;direx-ctable image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Advanced Topics&lt;/h1&gt; &#xA;&lt;h2&gt;Column Model&lt;/h2&gt; &#xA;&lt;p&gt;The struct &lt;code&gt;ctbl:cmodel&lt;/code&gt; is a data type defined by cl-defstruct. This model defines how to display the content along with the each column.&lt;/p&gt; &#xA;&lt;p&gt;Here is the details of the slot members of &lt;code&gt;ctbl:cmodel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;slot name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;[required]&lt;/strong&gt; column header title string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sorter&lt;/td&gt; &#xA;   &lt;td&gt;sorting function which transforms a cell value into sort value. It should return -1, 0 and 1. If nil, &lt;code&gt;ctbl:sort-string-lessp&lt;/code&gt; is used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;align&lt;/td&gt; &#xA;   &lt;td&gt;text alignment: &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;center&lt;/code&gt;. (default: &lt;code&gt;right&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;max-width&lt;/td&gt; &#xA;   &lt;td&gt;maximum width of the column. if &lt;code&gt;nil&lt;/code&gt;, no constraint. (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;min-width&lt;/td&gt; &#xA;   &lt;td&gt;minimum width of the column. if &lt;code&gt;nil&lt;/code&gt;, no constraint. (default: &lt;code&gt;nil&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;click-hooks&lt;/td&gt; &#xA;   &lt;td&gt;header click hook. a list of functions with two arguments the &lt;code&gt;ctbl:component&lt;/code&gt; object and the &lt;code&gt;ctbl:cmodel&lt;/code&gt; one. (default: &#39;(ctbl:cmodel-sort-action))&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Data Model&lt;/h2&gt; &#xA;&lt;p&gt;The struct &lt;code&gt;ctbl:model&lt;/code&gt; is a data type defined by cl-defstruct. This model defines contents to display with column models.&lt;/p&gt; &#xA;&lt;p&gt;Here is the details of the slot members of &lt;code&gt;ctbl:model&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;slot name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;[required]&lt;/strong&gt; Table data as a list of rows. A row contains a list of columns. Or, an instance of &lt;code&gt;ctbl:async-model&lt;/code&gt;. (See the async-model section for details.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;column-model&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;[required]&lt;/strong&gt; A list of column models.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sort-state&lt;/td&gt; &#xA;   &lt;td&gt;The current sort order as a list of column indexes. The index number of the first column is 1. If the index is negative, the sort order is reversed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;The keymap &lt;code&gt;ctbl:table-mode-map&lt;/code&gt; is used as a default keymap on the table. This keymap is a customization variable for the end users, so it should not be modified by applications.&lt;/p&gt; &#xA;&lt;p&gt;The component functions &lt;code&gt;ctbl:create-table-component-buffer&lt;/code&gt; and &lt;code&gt;ctbl:open-table-buffer&lt;/code&gt; receive a &lt;code&gt;custom-map&lt;/code&gt; argument to override the keymap on the table buffer. Because the functions connect the given keymap to the default keymap &lt;code&gt;ctbl:table-mode-map&lt;/code&gt; as parent, application program may define the overriding entries.&lt;/p&gt; &#xA;&lt;p&gt;The component function &lt;code&gt;ctbl:create-table-component-region&lt;/code&gt; receives a &lt;code&gt;keymap&lt;/code&gt; argument to define the keymap on the each characters in the table region.&lt;/p&gt; &#xA;&lt;p&gt;The ctable framework provides some hooks for the usual event cases. In such cases, the application should use the event handlers, instead of defining the keymap. See the next section.&lt;/p&gt; &#xA;&lt;h2&gt;Event Handling&lt;/h2&gt; &#xA;&lt;p&gt;The ctable provides some hooks for the particular events: clicking, selection changing and updating view. The application program can implement some actions without defining keymaps.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample code for the click action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ctbl:cp-add-click-hook &#xA; cp (lambda () (message &#34;CTable : Click Hook [%S]&#34; &#xA;        (ctbl:cp-get-selected-data-row cp))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where, &lt;code&gt;cp&lt;/code&gt; is an instance of &lt;code&gt;ctbl:component&lt;/code&gt;. The function &lt;code&gt;ctbl:cp-add-click-hook&lt;/code&gt; adds the given function as an event handler to the component instance. Here are event handler functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-add-click-hook&lt;/code&gt; : on click&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-add-selection-change-hook&lt;/code&gt; : on selection change&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-add-update-hook&lt;/code&gt; : on update view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The function &lt;code&gt;ctbl:cp-get-selected-data-row&lt;/code&gt; returns a row object which is defined by the model. Some component access functions are useful for the action handlers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-get-selected&lt;/code&gt; : returns a Cell-ID object which is currently selected, such as (1 . 2).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-get-selected-data-row&lt;/code&gt; : returns a row data which is currently selected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctbl:cp-get-selected-data-cell&lt;/code&gt; : return a cell data which is currently selected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Display Parameter&lt;/h2&gt; &#xA;&lt;p&gt;The ctable renders tabular form with many rendering parameters. The parameters are set at the slot members of the cl-defstruct &lt;code&gt;ctbl:param&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To customize the parameters, one should copy the default parameters like &lt;code&gt;(copy-ctbl:param ctbl:default-rendering-param)&lt;/code&gt; and set parameters with setter functions. Then, at the building ctable component instance, this parameter object is given by the &lt;code&gt;:param&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample code for parameter customize.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (let ((param (copy-ctbl:param ctbl:default-rendering-param)))&#xA;    (setf (ctbl:param-fixed-header param) t)&#xA;    (setf (ctbl:param-hline-colors param)&#xA;          &#39;((0 . &#34;#00000&#34;) (1 . &#34;#909090&#34;) (-1 . &#34;#ff0000&#34;) (t . &#34;#00ff00&#34;)))&#xA;    (setf (ctbl:param-draw-hlines param)&#xA;          (lambda (model row-index)&#xA;            (cond ((memq row-index &#39;(0 1 -1)) t)&#xA;                  (t (= 0 (% (1- row-index) 5))))))&#xA;    (setf (ctbl:param-bg-colors param)&#xA;          (lambda (model row-id col-id str)&#xA;            (cond ((string-match &#34;CoCo&#34; str) &#34;LightPink&#34;)&#xA;                  ((= 0 (% (1- row-index) 2)) &#34;Darkseagreen1&#34;)&#xA;                  (t nil))))&#xA;    ...&#xA;    (setq cp (ctbl:create-table-component-buffer&#xA;              :model model :param param))&#xA;    ...&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the details of the slot members of &lt;code&gt;ctbl:param&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;slot name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;display-header&lt;/td&gt; &#xA;   &lt;td&gt;if t, display the header row with column models.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fixed-header&lt;/td&gt; &#xA;   &lt;td&gt;if t, display the header row in the header-line area.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bg-colors&lt;/td&gt; &#xA;   &lt;td&gt;&#39;(((row-id . col-id) . colorstr) (t . default-color) ... ) or (lambda (model row-id col-id) colorstr or nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vline-colors&lt;/td&gt; &#xA;   &lt;td&gt;&#34;#RRGGBB&#34; or &#39;((0 . colorstr) (t . default-color)) or (lambda (model col-index) colorstr or nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hline-colors&lt;/td&gt; &#xA;   &lt;td&gt;&#34;#RRGGBB&#34; or &#39;((0 . colorstr) (t . default-color)) or (lambda (model row-index) colorstr or nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;draw-vlines&lt;/td&gt; &#xA;   &lt;td&gt;&#39;all or &#39;(0 1 2 .. -1) or (lambda (model col-index) t or nil )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;draw-hlines&lt;/td&gt; &#xA;   &lt;td&gt;&#39;all or &#39;(0 1 2 .. -1) or (lambda (model row-index) t or nil )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vertical-line&lt;/td&gt; &#xA;   &lt;td&gt;vertical line character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;horizontal-line&lt;/td&gt; &#xA;   &lt;td&gt;horizontal line character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-top-corner&lt;/td&gt; &#xA;   &lt;td&gt;corner character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-top-corner&lt;/td&gt; &#xA;   &lt;td&gt;corner character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-bottom-corner&lt;/td&gt; &#xA;   &lt;td&gt;corner character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-bottom-corner&lt;/td&gt; &#xA;   &lt;td&gt;corner character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;top-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bottom-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cross-junction&lt;/td&gt; &#xA;   &lt;td&gt;junction character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;View Components&lt;/h2&gt; &#xA;&lt;p&gt;Ctable has three destination components to display the tabular data.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Independent buffer&lt;/li&gt; &#xA; &lt;li&gt;Region in the other buffer&lt;/li&gt; &#xA; &lt;li&gt;Text output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Buffer&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;buffer&#39; destination displays the tabular view as ordinary Emacs applications do.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;ctbl:open-table-buffer&lt;/code&gt; makes a new ctable buffer and displays it by &lt;code&gt;switch-to-buffer&lt;/code&gt;. The major mode of the ctable buffer is &lt;code&gt;ctbl:table-mode&lt;/code&gt; and the keymap &lt;code&gt;ctbl:table-mode-map&lt;/code&gt; is bound.&lt;/p&gt; &#xA;&lt;p&gt;Using this destination with the &lt;code&gt;fixed-header&lt;/code&gt; parameter, the application can use the fixed column header.&lt;/p&gt; &#xA;&lt;p&gt;This destination is easy to use for applications and users, because the buffer is usual application boundary and users know how to use buffers.&lt;/p&gt; &#xA;&lt;h3&gt;Region&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;Region&#39; destination embeds the tabular view in the buffer which is managed by the other applications. This destination can give the other applications a nice tabular view.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s try a simple demonstration. Evaluate this code in your scratch buffer.&lt;/p&gt; &#xA;&lt;p&gt;Region destination example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Evaluate this code in the scratch buffer&#xA;(require &#39;ctable)&#xA;(ctbl:create-table-component-region&#xA;  :model (ctbl:make-model-from-list&#xA;           &#39;((1 2 3 4) (5 6 7 8) (9 10 11 12))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the tabular view will be embedded in the scratch buffer. You can navigate the ctable view in the buffer. Undoing for the some times, you can remove the ctable view.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/region-scratch.png&#34; alt=&#34;ctable in scratch buffer&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Because this destination never interacts anything out of the region and has its own key-binds as a text property, users can easily embed a tabular view in the other applications.&lt;/p&gt; &#xA;&lt;h3&gt;Text&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;text&#39; destination generates just a text which represent ctable view. The function &lt;code&gt;ctbl:get-table-text&lt;/code&gt; returns the text.&lt;/p&gt; &#xA;&lt;h3&gt;Column Width&lt;/h3&gt; &#xA;&lt;p&gt;TODO...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unlimited mode&lt;/li&gt; &#xA; &lt;li&gt;Limited mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;expand strategy&lt;/li&gt; &#xA;   &lt;li&gt;shrink strategy&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ctable Component&lt;/h2&gt; &#xA;&lt;p&gt;An instance of struct &lt;code&gt;ctbl:component&lt;/code&gt; manages all ctable states, such as models, view, event handlers and some internal status. If an application wants to interact a ctable component, the application should hold the instance and access the component through the following ctable component interface.&lt;/p&gt; &#xA;&lt;h3&gt;Getting ctbl:component Instance&lt;/h3&gt; &#xA;&lt;p&gt;To access ctable component, the application program should bring an instance of &lt;code&gt;ctbl:component&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The instance of the ctable component is stored at following places:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;buffer&lt;/code&gt; view: the buffer-local variable &lt;code&gt;ctbl:component&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region&lt;/code&gt; view: the text property &lt;code&gt;ctbl:component&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt; view: N/A&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Calling the utility function &lt;code&gt;ctbl:cp-get-component&lt;/code&gt;, one can obtain the ctable instance at the appropriate places. The stateless functions, such as simple event handler functions, can use this function to get the instance.&lt;/p&gt; &#xA;&lt;p&gt;The applications those have the state-full operations, however, should hold their own ctable instance for the safety object reference.&lt;/p&gt; &#xA;&lt;h3&gt;Access Internal Objects&lt;/h3&gt; &#xA;&lt;p&gt;The application can get some internal objects.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;model object : &lt;code&gt;ctbl:cp-get-model&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;parameter object : &lt;code&gt;ctbl:cp-get-param&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;buffer object : &lt;code&gt;ctbl:cp-get-buffer&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cursor Position&lt;/h3&gt; &#xA;&lt;p&gt;The application can get the current cursor position and modify the position.&lt;/p&gt; &#xA;&lt;p&gt;Here, &lt;em&gt;cell-id&lt;/em&gt; is an object that represents the physical cursor position. &lt;em&gt;cell-id&lt;/em&gt; is a cons pair which consists of positive integers: &lt;code&gt;(row . column)&lt;/code&gt;. The index number begins from zero. One can access the values with &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;getting cell-id : &lt;code&gt;ctbl:cp-get-selected&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;moving cursor to cell-id : &lt;code&gt;ctbl:cp-set-selected-cell&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the position which is indicated by &lt;em&gt;cell-id&lt;/em&gt; is not the same as the position of the model&#39;s row. Because the ctable component changes the row order with sorting by clicking header column, the rows order is not corresponding to the model&#39;s ones.&lt;/p&gt; &#xA;&lt;p&gt;If the application need to get the selected row&#39;s data, following functions are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;current row data : &lt;code&gt;ctbl:cp-get-selected-data-row&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;current cell data : &lt;code&gt;ctbl:cp-get-selected-data-cell&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modifying Model and Update Table View&lt;/h3&gt; &#xA;&lt;p&gt;The application can update the table contents.&lt;/p&gt; &#xA;&lt;p&gt;Creating a new model instance and setting it to the component with &lt;code&gt;ctbl:cp-set-model&lt;/code&gt;, the component replaces the model and refresh the buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;replace model instance and update view : &lt;code&gt;ctbl:cp-set-model&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Another way is updating model instance destructively and refresh the buffer with &lt;code&gt;ctbl:cp-update&lt;/code&gt;. If the modification of model data is little, this way is lightweight in the viewpoint of calculation and memory usage. However, such the destructive modification complicates the application logic.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;update view with current model state : &lt;code&gt;ctbl:cp-update&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Async-Model and Incremental Update&lt;/h2&gt; &#xA;&lt;p&gt;Ctable has incremental data interface which enables the application delay rendering or append subsequent data with the user action. This mechanism can avoid Emacs freezing during visualizing a large amount of data.&lt;/p&gt; &#xA;&lt;h3&gt;Case 1: Huge Data&lt;/h3&gt; &#xA;&lt;p&gt;When a model which consists of a large number of rows (more than ~1000) is given to the synchronous interface mentioned above, Emacs blocks UI response until rendering is completed. Because the text rendering on the buffer is the heaviest task in ctable, it is effective that the application displays a front part of data and delays the rendering of rest data. In the most cases, users are interesting in the such first page of the large data.&lt;/p&gt; &#xA;&lt;p&gt;Just wrapping data in async-model via &lt;code&gt;ctbl:async-model-wrapper&lt;/code&gt;, the application can use this interface.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (let* ((large-data ; large data : 4000 rows&#xA;          (loop with lim = 4000&#xA;                for i from 0 upto lim&#xA;                for d = (/ (random 1000) 1000.0)&#xA;                collect &#xA;                (list i d (exp (- (/ i 1.0 lim))) (exp (* (- (/ i 1.0 lim)) d)))))&#xA;         (async-model ; wrapping a large data in async-data-model&#xA;          (ctbl:async-model-wrapper large-data))&#xA;         (cp ; just build a component &#xA;          (ctbl:create-table-component-buffer&#xA;           :model&#xA;           (make-ctbl:model&#xA;            :column-model&#xA;            (list (make-ctbl:cmodel :title &#34;row&#34;)&#xA;                  (make-ctbl:cmodel :title &#34;delta&#34;)&#xA;                  (make-ctbl:cmodel :title &#34;exp&#34;)&#xA;                  (make-ctbl:cmodel :title &#34;exp-delta&#34;))&#xA;            :data async-model))))&#xA;    (pop-to-buffer (ctbl:cp-get-buffer cp)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is the result image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/async-wrapper.png&#34; alt=&#34;async data wrapper&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Case 2: Asynchronous Retrieving&lt;/h3&gt; &#xA;&lt;p&gt;In the case of retrieving large data asynchronously from an another process or remote servers, the application needs to append retrieved partial data without blocking UI response nor updating whole table view.&lt;/p&gt; &#xA;&lt;p&gt;Defining some functions in &lt;code&gt;ctbl:async-model&lt;/code&gt; struct, the application can control asynchronous data retrieving and updating table view.&lt;/p&gt; &#xA;&lt;p&gt;Here is a minimum sample code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun async-response (row-num len responsef errorf &amp;amp;rest a)&#xA;  (funcall responsef&#xA;           (loop for i from row-num below (+ row-num len)&#xA;                 collect&#xA;                 (list i (* i i) (* i i i) (sqrt i)))))&#xA; &#xA;(ctbl:open-table-buffer-easy&#xA; (make-ctbl:async-model :request &#39;async-response) ; defining async-model&#xA; &#39;(&#34;int&#34; &#34;square&#34; &#34;cube&#34; &#34;root&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this sample code, we defined just a &lt;code&gt;request&lt;/code&gt; function in &lt;code&gt;ctbl:async-model&lt;/code&gt;. The &lt;code&gt;request&lt;/code&gt; function should have 4 arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;row-num&lt;/code&gt; : an index number of the requested first row&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;len&lt;/code&gt; : a number of requested rows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;responsef&lt;/code&gt; : the continuation function to which the result rows should be passed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;errorf&lt;/code&gt; : the error continuation function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is the result image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-ctable/master/img/async-model-sample1.png&#34; alt=&#34;defining async model:1&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ctbl:async-model struct&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;slot name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;request&lt;/td&gt; &#xA;   &lt;td&gt;Data request function mentioned above.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;init-num&lt;/td&gt; &#xA;   &lt;td&gt;Initial row number. (Default 20)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;more-num&lt;/td&gt; &#xA;   &lt;td&gt;Increase row number. (Default 20)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;reset&lt;/td&gt; &#xA;   &lt;td&gt;Reset function which is called when user executes update command. (Can be nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cancel&lt;/td&gt; &#xA;   &lt;td&gt;Cancel function of data requesting. (Can be nil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For forward compatibility, these callback functions should have a `&amp;amp;rest&#39; keyword at the end of argument list.&lt;/p&gt; &#xA;&lt;p&gt;For more complete example, see the demo function &lt;code&gt;ctbl:async-demo&lt;/code&gt; at &lt;code&gt;samples/large-table.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sorting Async-Model&lt;/h3&gt; &#xA;&lt;p&gt;The ctable doesn&#39;t provide default sorting function &lt;code&gt;ctbl:cmodel-sort-action&lt;/code&gt; for the async-model data, because ctable can not receive whole rows of async-model.&lt;/p&gt; &#xA;&lt;p&gt;If sorting function is needed, the application program must implement it manually.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;(C) 2011-2021 SAKURAI Masashi All rights reserved. m.sakurai at kiwanami.net&lt;/p&gt;</summary>
  </entry>
</feed>