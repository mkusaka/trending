<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T01:40:03Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>craigjperry2/dotfiles</title>
    <updated>2022-07-03T01:40:03Z</updated>
    <id>tag:github.com,2022-07-03:/craigjperry2/dotfiles</id>
    <link href="https://github.com/craigjperry2/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;Previous version archived at &lt;a href=&#34;https://github.com/CraigJPerry/dotfiles&#34;&gt;https://github.com/CraigJPerry/dotfiles&lt;/a&gt; (I lost access to CraigJPerry a good while ago)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;My cross platform (Linux, MacOS, &lt;del&gt;Solaris&lt;/del&gt;, Windows, FreeBSD, &lt;del&gt;OpenBSD&lt;/del&gt;) user configuration files. &lt;em&gt;2021 Update: some more OS&#39;s join AIX &amp;amp; OpenVMS in succumbing to inevitable attrition&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Changes for 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim is still my vim of choice but my experiment with neovim + LSP is over, back to VSCode&lt;/li&gt; &#xA; &lt;li&gt;I revisited Intellij (primary IDE 2012-2020) after an 18 month hiatus and i&#39;ve decided to stay with VSCode for Go, Python &amp;amp; JS/TS&lt;/li&gt; &#xA; &lt;li&gt;VSCode takes on extended responsibilites now as my visual diff &amp;amp; merge tool - i test drove kdiff3, meld &amp;amp; beyond compare before settling on VSCode&lt;/li&gt; &#xA; &lt;li&gt;zsh is still my default shell (was bash 1999-2021) but i&#39;m not sure i exploit it much beyond p10k, the better parameter expansion and marginally better completion vs. bash&lt;/li&gt; &#xA; &lt;li&gt;I&#39;ve really settled into tmux now&lt;/li&gt; &#xA; &lt;li&gt;Emacs has been catching my eye of late, i&#39;ve been playing with spacemacs since starting with Common Lisp last year. I don&#39;t really want to go all-in on emacs though&lt;/li&gt; &#xA; &lt;li&gt;jq is getting more usage now, i&#39;ve been doing more JSON stuff and sqlite&#39;s json facilities are good but jq is easier usually&lt;/li&gt; &#xA; &lt;li&gt;Still experimenting with various rust tools, bat, exa, delta, dust, fd, hyperfine &amp;amp; ripgrep are all solid: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;cargo install bandwhich bat broot bottom git-delta deno du-dust exa fd-find gping grex hyperfine procs ripgrep sd tokei xh xsv ytop&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Changes for 2021&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vim is replaced with neovim&lt;/li&gt; &#xA; &lt;li&gt;I&#39;ve ditched bash, i&#39;m now a zsh kinda guy: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I prefer the completion facilities&lt;/li&gt; &#xA;   &lt;li&gt;I really like the glob extensions, i can replace find so no more tripping over differences between GNU find and BSD find&lt;/li&gt; &#xA;   &lt;li&gt;The zmv, zcalc stuff i&#39;m undecided on whether it&#39;s useful&lt;/li&gt; &#xA;   &lt;li&gt;The zftp and the zsh modules stuff i will not use - that&#39;s taking shell too far IMO, i&#39;d rather use a more ergonomic language like Python for more advanced scripting&lt;/li&gt; &#xA;   &lt;li&gt;The more ergonomic parameter expansion could be handy&lt;/li&gt; &#xA;   &lt;li&gt;The above is all lies to justify rocking a bling eye-candy powerline10k prompt&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;screen is gone, tmux won&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m more assertive about using vim keybindings everywhere so i don&#39;t need to learn new keybindings for every tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Philosophy&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Document everything, use long-hand options where possible. I want to be able to grok even the obscure bits months from now.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t be too opinionated, don&#39;t go remapping keys willy-nilly, it&#39;ll just cause pain when you have to use someone else&#39;s session.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Comes with (optional) &lt;a href=&#34;http://www.ansibleworks.com&#34;&gt;ansible playbook&lt;/a&gt; install.yml to automate the installation of dotfiles and associated setup tasks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[testing@r4 ~]$ git clone https://github.com/CraigJPerry/dotfiles.git .dotfiles&#xA;[testing@r4 ~]$ cd .dotfiles&#xA;[testing@r4 .dotfiles]$ ansible-playbook --connection=local --inventory-file=localhost, install.yml&#xA;&#xA;PLAY [localhost] **************************************************************&#xA;&#xA;GATHERING FACTS ***************************************************************&#xA;ok: [localhost]&#xA;&#xA;TASK: [INSTALL DOTFILES | Link New Dotfiles] **********************************&#xA;ok: [localhost] =&amp;gt; (item={&#39;dest&#39;: &#39;.bashrc&#39;, &#39;source&#39;: &#39;bashrc&#39;})&#xA;ok: [localhost] =&amp;gt; (item={&#39;dest&#39;: &#39;.bash_profile&#39;, &#39;source&#39;: &#39;bash_profile&#39;})&#xA;ok: [localhost] =&amp;gt; (item={&#39;dest&#39;: &#39;.bash_logout&#39;, &#39;source&#39;: &#39;bash_logout&#39;})&#xA;ok: [localhost] =&amp;gt; (item={&#39;dest&#39;: &#39;.gitconfig&#39;, &#39;source&#39;: &#39;gitconfig&#39;})&#xA;ok: [localhost] =&amp;gt; (item={&#39;dest&#39;: &#39;.vimrc&#39;, &#39;source&#39;: &#39;vimrc&#39;})&#xA;ok: [localhost] =&amp;gt; (item={&#39;dest&#39;: &#39;.conkyrc&#39;, &#39;source&#39;: &#39;conkyrc&#39;})&#xA;ok: [localhost] =&amp;gt; (item={&#39;dest&#39;: &#39;.config/autostart/conky.desktop&#39;, &#39;source&#39;: &#39;conky.desktop&#39;})&#xA;&#xA;TASK: [CONKY | Install Conky] *************************************************&#xA;ok: [localhost]&#xA;&#xA;TASK: [INSTALL VIM PLUGINS | Pre-requisite RPMs] ******************************&#xA;ok: [localhost] =&amp;gt; (item=vim-enhanced,python-pip)&#xA;&#xA;TASK: [INSTALL VIM PLUGINS | Pre-requisite Python Modules] ********************&#xA;ok: [localhost] =&amp;gt; (item=jedi)&#xA;ok: [localhost] =&amp;gt; (item=pylint)&#xA;ok: [localhost] =&amp;gt; (item=pep8)&#xA;&#xA;TASK: [INSTALL VIM PLUGINS | Vim Bundle Directory] ****************************&#xA;ok: [localhost]&#xA;&#xA;TASK: [INSTALL VIM PLUGINS | Vundle Plugin Manager] ***************************&#xA;ok: [localhost]&#xA;&#xA;TASK: [INSTALL VIM PLUGINS | Install Vundle Bundles] **************************&#xA;skipping: [localhost]&#xA;&#xA;TASK: [DIRS | Github] *********************************************************&#xA;ok: [localhost]&#xA;&#xA;TASK: [DIRS | Gists] **********************************************************&#xA;ok: [localhost]&#xA;&#xA;TASK: [DIRS | Local] **********************************************************&#xA;ok: [localhost]&#xA;&#xA;TASK: [SSH | Check Key] *******************************************************&#xA;ok: [localhost]&#xA;&#xA;TASK: [SSH | Make dir] ********************************************************&#xA;skipping: [localhost]&#xA;&#xA;TASK: [SSH | Generate Key] ****************************************************&#xA;skipping: [localhost]&#xA;&#xA;PLAY RECAP ********************************************************************&#xA;localhost                  : ok=11   changed=0    unreachable=0    failed=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could copy the files instead, but you&#39;ll have to do any other setup manually.&lt;/p&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shell: zsh&lt;/li&gt; &#xA; &lt;li&gt;Editor: neovim, VSCode (with VSCodeVim for now but considering the neovim plugin, i miss my :g command)&lt;/li&gt; &#xA; &lt;li&gt;File Manager: nnn &lt;em&gt;i recompile this with O_NERD=1&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal Multiplexer: tmux&lt;/li&gt; &#xA; &lt;li&gt;Keyboard Macros &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows: AHK&lt;/li&gt; &#xA;   &lt;li&gt;MacOS: Karabiner Elements + MacOS Keyboard Text shortcuts (which i discovered iCloud sync to iOS, natch!!)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Misc CLI Handy Tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GNU units: the ultimate conversion calculation tool&lt;/li&gt; &#xA;   &lt;li&gt;JSON &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;jq: I still use this as if its only feature were python -m json.tool, i should invest some time&lt;/li&gt; &#xA;     &lt;li&gt;gron: Make json grep-able&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;pipx: Don&#39;t manually manage virtualenvs for python tools &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;datasette: sqlite+web tool for data analysis&lt;/li&gt; &#xA;     &lt;li&gt;poetry: Python dependency management automation&lt;/li&gt; &#xA;     &lt;li&gt;httpie: Convenience for working with APIs&lt;/li&gt; &#xA;     &lt;li&gt;ansible: i still occasionally have nightmares about CFEngine3, the GitOps ideas are bringing iterative convergence back and i&#39;m &lt;em&gt;shook&lt;/em&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;lnav: logfile navigator, you don&#39;t regexp your way to the next minute/hour/error/whatever in a log, it has keybindings and teleports you instantly. The real killer feature is annotating logs with comments. Why did it take me so long to find this tool...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rust-lang/rust-mode</title>
    <updated>2022-07-03T01:40:03Z</updated>
    <id>tag:github.com,2022-07-03:/rust-lang/rust-mode</id>
    <link href="https://github.com/rust-lang/rust-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs configuration for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rust-mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.nongnu.org/nongnu/rust-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/rust-mode.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/rust-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/rust-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rust-lang/rust-mode/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/rust-lang/rust-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#rust-mode&#34;&gt;rust-mode&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#melpa&#34;&gt;Melpa&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#manual-installation&#34;&gt;Manual installation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#feature-guide&#34;&gt;Feature guide&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#indentation&#34;&gt;Indentation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#code-formatting&#34;&gt;Code formatting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#prettifying&#34;&gt;Prettifying&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#running--testing--compiling-code&#34;&gt;Running / testing / compiling code&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#clippy&#34;&gt;Clippy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#easy-insertion-of-dbg&#34;&gt;Easy insertion of dbg!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#more-commands&#34;&gt;More commands&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#highlighting-with-tree-sitter&#34;&gt;highlighting with tree-sitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#lsp&#34;&gt;LSP&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#auto-completion&#34;&gt;Auto-completion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#other-recommended-packages&#34;&gt;Other recommended packages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#flycheck&#34;&gt;flycheck&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#cargoel&#34;&gt;cargo.el&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#cargo-mode&#34;&gt;cargo-mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#rustic&#34;&gt;rustic&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#optional-features&#34;&gt;Optional features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#for-package-maintainers&#34;&gt;For package maintainers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-mode&lt;/code&gt; makes editing &lt;a href=&#34;http://rust-lang.org&#34;&gt;Rust&lt;/a&gt; code with Emacs enjoyable. It requires Emacs 25 or later, and is included in both &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt; and &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;This mode provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlighting (for Font Lock Mode)&lt;/li&gt; &#xA; &lt;li&gt;Indentation&lt;/li&gt; &#xA; &lt;li&gt;Integration with Cargo, clippy and rustfmt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This mode does &lt;em&gt;not&lt;/em&gt; provide autocompletion, or jumping to function / trait definitions. See &lt;a href=&#34;https://raw.githubusercontent.com/rust-lang/rust-mode/master/#auto-completion--code-navigation&#34;&gt;Auto-completion / code navigation&lt;/a&gt; below for tips on how to enable this.&lt;/p&gt; &#xA;&lt;p&gt;If you are missing features in rust-mode, please check out &lt;a href=&#34;https://github.com/brotzeit/rustic&#34;&gt;rustic&lt;/a&gt; before you open a feature request. It depends on rust-mode and provides additional features. This allows us to keep rust-mode light-weight for users that are happy with basic functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rust-syntax-propertize&lt;/code&gt; and &lt;code&gt;adaptive-wrap-prefix-mode&lt;/code&gt; can lead to severe lag when editing larger files (&lt;a href=&#34;https://github.com/brotzeit/rustic/issues/107&#34;&gt;https://github.com/brotzeit/rustic/issues/107&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Melpa&lt;/h3&gt; &#xA;&lt;p&gt;The package is available on MELPA. Add this to your init.el.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives&#xA;             &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;(package-refresh-contents)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can install &lt;code&gt;rust-mode&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install rust-mode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And put this in your config to load rust-mode automatically:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(require &#39;rust-mode)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;NonGNU ELPA&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; can be used out of the box in emacs28.&lt;/p&gt; &#xA;&lt;p&gt;For older versions you need to add something like the following to your init file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(with-eval-after-load &#39;package (add-to-list &#39;package-archives &#39;(&#34;nongnu&#34; . &#34;https://elpa.nongnu.org/nongnu/&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository locally, and add this to your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/rust-mode/&#34;)&#xA;(autoload &#39;rust-mode &#34;rust-mode&#34; nil t)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.rs\\&#39;&#34; . rust-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature guide&lt;/h2&gt; &#xA;&lt;h3&gt;Indentation&lt;/h3&gt; &#xA;&lt;p&gt;Commands like &lt;kbd&gt;TAB&lt;/kbd&gt; should indent correctly.&lt;/p&gt; &#xA;&lt;p&gt;The Rust style guide recommends spaces rather than tabs for indentation; to follow the recommendation add this to your init.el, which forces indentation to always use spaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;rust-mode-hook&#xA;          (lambda () (setq indent-tabs-mode nil)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since Emacs ≥ 24.4, &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Indent-Convenience.html&#34;&gt;&lt;code&gt;electric-indent-mode&lt;/code&gt;&lt;/a&gt; is turned on by default. If you do not like it, call &lt;code&gt;(electric-indent-mode 0)&lt;/code&gt; in &lt;code&gt;rust-mode-hook&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Code formatting&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;rust-format-buffer&lt;/code&gt; function will format your code with &lt;a href=&#34;https://github.com/rust-lang/rustfmt&#34;&gt;rustfmt&lt;/a&gt; if installed. By default, this is bound to &lt;kbd&gt;C-c C-f&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;rust-format-on-save&lt;/code&gt; enables automatic formatting on save. For example, add the following in your init.el to enable format on save:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq rust-format-on-save t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prettifying&lt;/h3&gt; &#xA;&lt;p&gt;You can toggle prettification of your code by running &lt;code&gt;M-x prettify-symbols-mode&lt;/code&gt;. If you&#39;d like to automatically enable this for all rust files, add the following to your init.el.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;rust-mode-hook&#xA;          (lambda () (prettify-symbols-mode)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add your own prettifications to &lt;code&gt;rust-prettify-symbols-alist&lt;/code&gt;. For example, to display &lt;code&gt;x.add(y)&lt;/code&gt; as &lt;code&gt;x∔(y)&lt;/code&gt;, simply add to your init file &lt;code&gt;(push &#39;(&#34;.add&#34; . ?∔) rust-prettify-symbols-alist)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running / testing / compiling code&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;rust-run&lt;/code&gt;, &lt;code&gt;rust-test&lt;/code&gt;, &lt;code&gt;rust-compile&lt;/code&gt; and &lt;code&gt;rust-check&lt;/code&gt; functions shell out to Cargo to run, test, build and check your code. Under the hood, these use the standard Emacs &lt;code&gt;compile&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;These are not bound by default. To bind these to keyboard shortcuts, you can use the following in your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key rust-mode-map (kbd &#34;C-c C-c&#34;) &#39;rust-run)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clippy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-run-clippy&lt;/code&gt; runs &lt;a href=&#34;https://github.com/rust-lang/rust-clippy&#34;&gt;Clippy&lt;/a&gt;, a linter.&lt;/p&gt; &#xA;&lt;h3&gt;Easy insertion of dbg!&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-dbg-wrap-or-unwrap&lt;/code&gt; either wraps or unwraps the current region in &lt;code&gt;dbg!&lt;/code&gt;. This can be useful for easily adding debug lines to your program.&lt;/p&gt; &#xA;&lt;p&gt;This is bound to &lt;kbd&gt;C-c C-d&lt;/kbd&gt; by default.&lt;/p&gt; &#xA;&lt;h3&gt;More commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rustic-toggle-mutability&lt;/code&gt; toggle mut for var defined at current line&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;highlighting with tree-sitter&lt;/h2&gt; &#xA;&lt;p&gt;You should take a look at &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter&#34;&gt;tree-sitter&lt;/a&gt;. When the dependencies are installed you can activate the feature with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package tree-sitter&#xA;  :config&#xA;  (require &#39;tree-sitter-langs)&#xA;  (global-tree-sitter-mode)&#xA;  (add-hook &#39;tree-sitter-after-on-hook #&#39;tree-sitter-hl-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LSP&lt;/h2&gt; &#xA;&lt;h3&gt;eglot&lt;/h3&gt; &#xA;&lt;p&gt;A lightweight lsp client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;rust-mode-hook &#39;eglot-ensure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;lsp-mode&lt;/h3&gt; &#xA;&lt;p&gt;Provides more features and you can enhance the functionality by using additional packages. You can find more information in the &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/installation/#vanilla-emacs&#34;&gt;lsp-mode wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;rust-mode-hook #&#39;lsp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Auto-completion&lt;/h2&gt; &#xA;&lt;p&gt;You can either use a lsp client or &lt;a href=&#34;https://github.com/racer-rust/racer&#34;&gt;racer&lt;/a&gt; with &lt;a href=&#34;https://github.com/racer-rust/emacs-racer#installation&#34;&gt;emacs-racer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other recommended packages&lt;/h2&gt; &#xA;&lt;h3&gt;flycheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; allows highlighting compile errors and Clippy lints inline.&lt;/p&gt; &#xA;&lt;h3&gt;cargo.el&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kwrooijen/cargo.el&#34;&gt;cargo.el&lt;/a&gt; provides a minor mode for integration with Cargo, Rust&#39;s package manager.&lt;/p&gt; &#xA;&lt;h3&gt;cargo-mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ayrat555/cargo-mode&#34;&gt;cargo-mode&lt;/a&gt; is an Emacs minor mode which allows to dynamically select a Cargo command. The reasons behind this package can be found in &lt;a href=&#34;https://www.badykov.com/emacs/2021/05/29/emacs-cargo-mode/&#34;&gt;the post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;rustic&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/brotzeit/rustic&#34;&gt;rustic&lt;/a&gt; is based on rust-mode, extending it with other features such as integration with LSP and with flycheck.&lt;/p&gt; &#xA;&lt;h2&gt;Optional features&lt;/h2&gt; &#xA;&lt;p&gt;The features of the following files can be disabled with &lt;code&gt;rust-load-optional-libraries&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rust-cargo.el&lt;/li&gt; &#xA; &lt;li&gt;rust-compile.el&lt;/li&gt; &#xA; &lt;li&gt;rust-playpen.el&lt;/li&gt; &#xA; &lt;li&gt;rust-rustfmt.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They are disabled by default when you use rustic as it has its own implementations for those features.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-cargo-default-arguments&lt;/code&gt; set additional cargo args used for check,compile,run,test&lt;/p&gt; &#xA;&lt;h2&gt;For package maintainers&lt;/h2&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run elisp tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome. We are also looking for additional maintainers.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nicferrier/emacs-lisp-editing-tools</title>
    <updated>2022-07-03T01:40:03Z</updated>
    <id>tag:github.com,2022-07-03:/nicferrier/emacs-lisp-editing-tools</id>
    <link href="https://github.com/nicferrier/emacs-lisp-editing-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;tools for lisp editing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Some lisp editing tools. I don&#39;t know where else to put them.&lt;/p&gt; &#xA;&lt;p&gt;They probably need renaming because they pollute the {{{lisp-}}} namespace in Emacs but for now... hey.&lt;/p&gt; &#xA;&lt;p&gt;=== lisp-lexbind-modeline ===&lt;/p&gt; &#xA;&lt;p&gt;Add LEX to the modeline.&lt;/p&gt; &#xA;&lt;p&gt;=== lisp-lexscratch &amp;amp;optional other-window ===&lt;/p&gt; &#xA;&lt;p&gt;Make a lexical scratch buffer.&lt;/p&gt; &#xA;&lt;p&gt;=== lisp-load-all filename ===&lt;/p&gt; &#xA;&lt;p&gt;Load all the files in a package.&lt;/p&gt; &#xA;&lt;p&gt;Takes a filename that specifies all the files in a package.&lt;/p&gt; &#xA;&lt;p&gt;=== lisp-package-time-now ===&lt;/p&gt; &#xA;&lt;p&gt;Produce the current time in a package friendly format.&lt;/p&gt; &#xA;&lt;p&gt;If called interactively it inserts at point.&lt;/p&gt; &#xA;&lt;p&gt;=== lisp-reinsert-as-pp ===&lt;/p&gt; &#xA;&lt;p&gt;Read sexp at point, delete it and pretty print it back in.&lt;/p&gt;</summary>
  </entry>
</feed>