<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:33:45Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yuya373/emacs-slack</title>
    <updated>2022-10-16T01:33:45Z</updated>
    <id>tag:github.com,2022-10-16:/yuya373/emacs-slack</id>
    <link href="https://github.com/yuya373/emacs-slack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;slack client for emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;a href=&#34;https://melpa.org/#/slack&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/slack-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/yuya373/emacs-slack&#34;&gt;&lt;img src=&#34;https://travis-ci.com/yuya373/emacs-slack.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/yuya373&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-Become a patron-052D49.svg?logo=patreon&amp;amp;labelColor=E85B46&amp;amp;logoColor=white&#34; alt=&#34;Become a patron&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuya373/emacs-slack/assets/assets/slack-logo.svg?sanitize=true&#34; width=&#34;300&#34; height=&#34;126/&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;Emacs Slack&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;GNU Emacs client for &lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;You can see some gifs on the &lt;a href=&#34;https://github.com/yuya373/emacs-slack/wiki/ScreenShots&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jwiegley/alert&#34;&gt;Alert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jorgenschaefer/circe&#34;&gt;circe&lt;/a&gt; (for the Linewise User Interface library).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iqbalansari/emacs-emojify&#34;&gt;Emojify&lt;/a&gt; (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacsmirror/oauth2/raw/master/oauth2.el&#34;&gt;Oauth2&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;do &lt;code&gt;package install&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tkf/emacs-request&#34;&gt;request&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ahyatt/emacs-websocket&#34;&gt;websocket&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yuya373/helm-slack&#34;&gt;helm-slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yuya373/emacs-slack/master/#how-to-get-token-and-cookie&#34;&gt;How to get token and cookie&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; I&#39;m using use-package and el-get and evil&#xA;&#xA;(el-get-bundle slack)&#xA;(el-get-bundle yuya373/helm-slack) ;; optional&#xA;(use-package helm-slack :after (slack)) ;; optional&#xA;(use-package slack&#xA;  :commands (slack-start)&#xA;  :init&#xA;  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil&#xA;  (setq slack-prefer-current-team t)&#xA;  :config&#xA;  (slack-register-team&#xA;   :name &#34;emacs-slack&#34;&#xA;   :default t&#xA;   :token &#34;xoxs-sssssssssss-88888888888-hhhhhhhhhhh-jjjjjjjjjj&#34;&#xA;   :subscribed-channels &#39;(test-rename rrrrr)&#xA;   :full-and-display-names t)&#xA;&#xA;  (slack-register-team&#xA;   :name &#34;test&#34;&#xA;   :token &#34;xoxs-yyyyyyyyyy-zzzzzzzzzzz-hhhhhhhhhhh-llllllllll&#34;&#xA;   :subscribed-channels &#39;(hoge fuga))&#xA;&#xA;  (evil-define-key &#39;normal slack-info-mode-map&#xA;    &#34;,u&#34; &#39;slack-room-update-messages)&#xA;  (evil-define-key &#39;normal slack-mode-map&#xA;    &#34;,c&#34; &#39;slack-buffer-kill&#xA;    &#34;,ra&#34; &#39;slack-message-add-reaction&#xA;    &#34;,rr&#34; &#39;slack-message-remove-reaction&#xA;    &#34;,rs&#34; &#39;slack-message-show-reaction-users&#xA;    &#34;,pl&#34; &#39;slack-room-pins-list&#xA;    &#34;,pa&#34; &#39;slack-message-pins-add&#xA;    &#34;,pr&#34; &#39;slack-message-pins-remove&#xA;    &#34;,mm&#34; &#39;slack-message-write-another-buffer&#xA;    &#34;,me&#34; &#39;slack-message-edit&#xA;    &#34;,md&#34; &#39;slack-message-delete&#xA;    &#34;,u&#34; &#39;slack-room-update-messages&#xA;    &#34;,2&#34; &#39;slack-message-embed-mention&#xA;    &#34;,3&#34; &#39;slack-message-embed-channel&#xA;    &#34;\C-n&#34; &#39;slack-buffer-goto-next-message&#xA;    &#34;\C-p&#34; &#39;slack-buffer-goto-prev-message)&#xA;   (evil-define-key &#39;normal slack-edit-message-mode-map&#xA;    &#34;,k&#34; &#39;slack-message-cancel-edit&#xA;    &#34;,s&#34; &#39;slack-message-send-from-buffer&#xA;    &#34;,2&#34; &#39;slack-message-embed-mention&#xA;    &#34;,3&#34; &#39;slack-message-embed-channel))&#xA;&#xA;(use-package alert&#xA;  :commands (alert)&#xA;  :init&#xA;  (setq alert-default-style &#39;notifier))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to get token and cookie&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using Chrome, open and sign into the slack customization page, e.g. &lt;a href=&#34;https://my.slack.com/customize&#34;&gt;https://my.slack.com/customize&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Right click anywhere on the page and choose &#34;inspect&#34; from the context menu. This will open the Chrome developer tools.&lt;/li&gt; &#xA; &lt;li&gt;Find the console (it&#39;s one of the tabs in the developer tools window)&lt;/li&gt; &#xA; &lt;li&gt;At the prompt (&#34;&amp;gt; &#34;) type the following: &lt;code&gt;window.prompt(&#34;your api token is: &#34;, TS.boot_data.api_token)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the displayed token elsewhere.&lt;/li&gt; &#xA; &lt;li&gt;If your token starts with &lt;code&gt;xoxc&lt;/code&gt; then keep following the other steps below, otherwise you are done and can close the window.&lt;/li&gt; &#xA; &lt;li&gt;Now switch to the Applications tab in the Chrome developer tools (or Storage tab in Firefox developer tools).&lt;/li&gt; &#xA; &lt;li&gt;Expand Cookies in the left-hand sidebar.&lt;/li&gt; &#xA; &lt;li&gt;Click the cookie entry named &lt;code&gt;d&lt;/code&gt; and copy its value. Note, use the default encoded version, so &lt;em&gt;don&#39;t click&lt;/em&gt; the Show URL decoded checkbox.&lt;/li&gt; &#xA; &lt;li&gt;Now you&#39;re done and can close the window.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For further explanation, see the documentation for the emojme project: &lt;a href=&#34;https://github.com/jackellenberger/emojme#slack-for-web&#34;&gt;(github.com/jackellenberger/emojme)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that it is only possible to obtain the cookie manually, not through client-side javascript, due to it being set as &lt;code&gt;HttpOnly&lt;/code&gt; and &lt;code&gt;Secure&lt;/code&gt;. See &lt;a href=&#34;https://owasp.org/www-community/HttpOnly#Browsers_Supporting_HttpOnly&#34;&gt;OWASP HttpOnly&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to secure your token&lt;/h2&gt; &#xA;&lt;p&gt;If someone steals your token they can use the token to impersonate you, reading and posting to Slack as if they were you. It&#39;s important to take reasonable precautions to secure your token.&lt;/p&gt; &#xA;&lt;p&gt;One way to do this is by using the Emacs &lt;code&gt;auth-source&lt;/code&gt; library. Read the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/auth/index.html&#34;&gt;auth-source documentation&lt;/a&gt; to learn how to use it to store login information for remote services.&lt;/p&gt; &#xA;&lt;p&gt;Then configure the &lt;code&gt;auth-sources&lt;/code&gt; variable to select a &#34;backend&#34; store. The default backend is &lt;code&gt;~/.authinfo&lt;/code&gt; file, which is simple but also un-encrypted. A more complex option is to encrypt that &lt;code&gt;.~/authinfo&lt;/code&gt; file with &lt;code&gt;gnupg&lt;/code&gt; and configure &lt;code&gt;auth-sources&lt;/code&gt; to use &lt;code&gt;~/.authinfo.gpg&lt;/code&gt; as the source for all passwords and secrets. Other backends exist beyond these; read the documentation for details.&lt;/p&gt; &#xA;&lt;p&gt;How to store your slack tokens in your &lt;code&gt;auth-source&lt;/code&gt; backend will vary depending which backend you chose. See documentation for details. The &#34;host&#34; and &#34;user&#34; fields can be whatever you like as long as they are unique; as a suggestion use &#34;myslackteam.slack.com&#34; for host, and use your email address for user. The &#34;secret&#34; or &#34;password&#34; field should contain the token you obtained earlier (&lt;a href=&#34;https://raw.githubusercontent.com/yuya373/emacs-slack/master/#how-to-get-token-and-cookie&#34;&gt;How to get token and cookie&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Do the same for the cookie, however for the &#34;user&#34; field append &lt;code&gt;^cookie&lt;/code&gt;, so if for the token you picked &lt;code&gt;user@email.com&lt;/code&gt; then for the cookie use &lt;code&gt;user@email.com^cookie&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then finally, in your Emacs init read the token from your &lt;code&gt;auth-source&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(slack-register-team&#xA; :name &#34;myslackteam&#34;&#xA; :token (auth-source-pick-first-password&#xA;         :host &#34;myslackteam.slack.com&#34;&#xA;         :user &#34;me@example.com&#34;)&#xA; :subscribed-channels &#39;((channel1 channel2)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your token starts with &lt;code&gt;xoxc&lt;/code&gt; you&#39;ll also need to manually obtain the cookie as described in &lt;a href=&#34;https://raw.githubusercontent.com/yuya373/emacs-slack/master/#how-to-get-token-and-cookie&#34;&gt;How to get token and cookie&lt;/a&gt; and make sure the &#34;user&#34; has &lt;code&gt;^cookie&lt;/code&gt; in it as described above in &lt;a href=&#34;https://raw.githubusercontent.com/yuya373/emacs-slack/master/#how-to-secure-your-token&#34;&gt;How to secure your token&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(slack-register-team&#xA; :name &#34;myslackteam&#34;&#xA; :token (auth-source-pick-first-password&#xA;         :host &#34;myslackteam.slack.com&#34;&#xA;         :user &#34;me@example.com&#34;)&#xA; :cookie (auth-source-pick-first-password&#xA;         :host &#34;myslackteam.slack.com&#34;&#xA;         :user &#34;me@example.com^cookie&#34;)&#xA; :subscribed-channels &#39;((channel1 channel2)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not specify &lt;code&gt;:cookie&lt;/code&gt; then you&#39;ll automatically be prompted for one if you are using an &lt;code&gt;xoxc&lt;/code&gt; token.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;I recommend to chat with slackbot for tutorial using &lt;code&gt;slack-im-select&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some terminology in the &lt;code&gt;slack-&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;im&lt;/code&gt;: An IM (instant message) is a direct message between you and exactly one other Slack user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;channel&lt;/code&gt;: A channel is a Slack channel which you are a member of&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;group&lt;/code&gt;. Any chat (direct message or channel) which isn&#39;t an IM is a group.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-register-team&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;set team configuration and create team.&lt;/li&gt; &#xA;   &lt;li&gt;:name and :token are required&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-change-current-team&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;change &lt;code&gt;slack-current-team&lt;/code&gt; var&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-start&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;do authorize and initialize&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-ws-close&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;turn off websocket connection&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-group-select&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;select group from list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-im-select&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;select direct message from list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-channel-select&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;select channel from list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-group-list-update&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;update group list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-im-list-update&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;update direct message list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-channel-list-update&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;update channel list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-message-embed-mention&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;use to mention to user&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-message-embed-channel&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;use to mention to channel&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;slack-file-upload&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;uploads a file&lt;/li&gt; &#xA;   &lt;li&gt;the command allows to choose many channels via select loop. In order to finish the loop input an empty string. For helm that&#39;s &lt;kbd&gt;C+RET&lt;/kbd&gt; or &lt;kbd&gt;M+TET&lt;/kbd&gt;. In case of Ivy it&#39;s &lt;kbd&gt;C+M+j&lt;/kbd&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notification&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jwiegley/alert&#34;&gt;alert&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>