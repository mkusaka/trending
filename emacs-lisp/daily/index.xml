<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:33:32Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cute-jumper/evil-embrace.el</title>
    <updated>2022-11-01T01:33:32Z</updated>
    <id>tag:github.com,2022-11-01:/cute-jumper/evil-embrace.el</id>
    <link href="https://github.com/cute-jumper/evil-embrace.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Evil integration of embrace.el&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: evil-embrace [[https://melpa.org/#/evil-embrace][file:https://melpa.org/packages/evil-embrace-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;Evil integration of [[https://github.com/cute-jumper/embrace.el][embrace.el]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Overview This package provides evil integration of [[https://github.com/cute-jumper/embrace.el][embrace.el]]. Since =evil-surround= provides a similar set of features as =embrace.el=, this package aims at adding the goodies of =embrace.el= to =evil-surround= and making =evil-surround= even better.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why =evil-surround= is good when there is a text object defined. But unfortunately, if you want to add custom surrouding pairs, =evil-surround= will not be able to delete/change the pairs if there are no evil text objects defined for these pairs. For example, if you want to make =\textbf{= and =}= as a surround pair in =LaTeX-mode=, you can&#39;t either change or delete the surround pair since there is no text object for =\textbf{= and =}=. However, using =embrace=, you can define whatever surrounding pairs you like, and adding, changing, and deleting will &lt;em&gt;always&lt;/em&gt; work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The idea of this package is that let =evil-surround= handle the keys that corresponds to existing text objects (i.e., =(=, =[=, etc.), which is what =evil-surround= is good at, and make =embrace= handles all the other keys of custom surrounding pairs so that you can also benefit from the extensibility that =embrace= offers.&lt;/p&gt; &#xA;&lt;p&gt;In a word, you can use the default =evil-surround=. But whenever you want to add a custom surrounding pair, use =embrace= instead. To see how to add a custom pair in =embrace=, look at the README of [[https://github.com/cute-jumper/embrace.el][embrace.el]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Usage To enable the =evil-surround= integration: : (evil-embrace-enable-evil-surround-integration)&lt;/p&gt; &lt;p&gt;And use =evil-embrace-disable-evil-surround-integration= to disable whenever you don&#39;t like it.&lt;/p&gt; &lt;p&gt;The keys that are processed by =evil-surround= are saved in the variable =evil-embrace-evil-surround-keys=. The default value is: : (?( ?[ ?{ ?) ?] ?} ?&#34; ?&#39; ?&amp;lt; ?&amp;gt; ?b ?B ?t)&lt;/p&gt; &lt;p&gt;Note that this variable is buffer-local. You should change it in the hook: : (add-hook &#39;LaTeX-mode-hook : (lambda () : (add-to-list &#39;evil-embrace-evil-surround-keys ?o)))&lt;/p&gt; &lt;p&gt;Only these keys saved in the variable are processed by =evil-surround=, and all the other keys will be processed by =embrace=.&lt;/p&gt; &lt;p&gt;If you find the help message popup annoying, use the following code to disable it: : (setq evil-embrace-show-help-p nil)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Screencasts Use the following settings: : (add-hook &#39;org-mode-hook &#39;embrace-org-mode-hook) : (evil-embrace-enable-evil-surround-integration)&lt;/p&gt; &lt;p&gt;In an org-mode file, we can change the surrounding pair in the following way (note that this whole process can&#39;t be achieved solely by =evil-surround=):&lt;/p&gt; &lt;p&gt;[[./screencasts/evil-embrace.gif]]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alphapapa/hammy.el</title>
    <updated>2022-11-01T01:33:32Z</updated>
    <id>tag:github.com,2022-11-01:/alphapapa/hammy.el</id>
    <link href="https://github.com/alphapapa/hammy.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Programmable, interactive interval timers (e.g. for working/resting)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;:PROPERTIES: :TOC: :include all :force (nothing) :ignore (nothing) :local (nothing) :END: #+TITLE: Hammy.el&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/alphapapa/hammy.el/master/images/mascot.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hammy provides programmable, interactive interval timers for Emacs. They can be used, e.g. to alternate between working and resting periods, to remind yourself to stretch your legs, etc. Timers, known as &#34;hammys&#34;, are easily defined by the user to behave as desired, and they can be integrated into other programs by calling Lisp functions in the hammys&#39; definitions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :PROPERTIES: :TOC: :include all :ignore this :END: :CONTENTS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#examples][Examples]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tips][Tips]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#changelog][Changelog]]&lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]] :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :ID: f9d7bc00-8bd4-4653-b69e-fdbb1663f5cd :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hammy is distributed on [[https://melpa.org/][MELPA]], so it can be installed with &lt;del&gt;M-x package-install RET hammy RET&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other than that, the recommended way to install it is to use [[https://github.com/quelpa/quelpa-use-package][quelpa-use-package]], like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (use-package hammy :quelpa (hammy :fetcher github :repo &#34;alphapapa/hammy.el&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :ID: fae3cf22-c6d7-4d60-95b7-f3d30941959f :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;First, define a hammy timer using the domain-specific language Hammy offers for this purpose. (The ones in the following examples are defined by default, so you can use them upon installation of the package.)&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s look at a classic example, the &#34;pomodoro timer.&#34; Here&#39;s how it&#39;s implemented in Hammy:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp ;; We name the timer with the Unicode TOMATO character, and propertize ;; it with a tomato-colored face. (hammy-define (propertize &#34;üçÖ&#34; &#39;face &#39;(:foreground &#34;tomato&#34;)) :documentation &#34;The classic pomodoro timer.&#34; :intervals (list (interval :name &#34;Work&#34; :duration &#34;25 minutes&#34; :before (do (announce &#34;Starting work time.&#34;) (notify &#34;Starting work time.&#34;)) :advance (do (announce &#34;Break time!&#34;) (notify &#34;Break time!&#34;))) (interval :name &#34;Break&#34; :duration (do (if (and (not (zerop cycles)) (zerop (mod cycles 3))) ;; If a multiple of three cycles have ;; elapsed, the fourth work period was ;; just completed, so take a longer break. &#34;30 minutes&#34; &#34;5 minutes&#34;)) :before (do (announce &#34;Starting break time.&#34;) (notify &#34;Starting break time.&#34;)) :advance (do (announce &#34;Break time is over!&#34;) (notify &#34;Break time is over!&#34;))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then you can use these commands, which will prompt you to choose a defined hammy:&lt;/p&gt; &#xA;&lt;p&gt;| &lt;del&gt;hammy-start&lt;/del&gt; | Start a hammy. | | &lt;del&gt;hammy-start-org-clock-in&lt;/del&gt; | Call &lt;del&gt;org-clock-in&lt;/del&gt;, then &lt;del&gt;hammy-start&lt;/del&gt;. (The Org task will then automatically be clocked out during the hammy&#39;s next interval (and when the hammy is stopped), and back in when the first interval resumes.) | | &lt;del&gt;hammy-next&lt;/del&gt; | Advance to the next interval of a hammy (when it&#39;s defined to not advance automatically). | | &lt;del&gt;hammy-toggle&lt;/del&gt; | Pause or unpause a hammy. | | &lt;del&gt;hammy-adjust&lt;/del&gt; | Adjust the durations of a hammy&#39;s intervals (which can be reset later). | | &lt;del&gt;hammy-reset&lt;/del&gt; | Reset a hammy (useful when a hammy is defined to behave differently the longer it runs). | | &lt;del&gt;hammy-stop&lt;/del&gt; | Stop a hammy. |&lt;/p&gt; &#xA;&lt;p&gt;You may also use these commands:&lt;/p&gt; &#xA;&lt;p&gt;| &lt;del&gt;hammy-mode&lt;/del&gt; | Show the current hammy in the mode-line. | | &lt;del&gt;hammy-view-log&lt;/del&gt; | Show the log buffer. |&lt;/p&gt; &#xA;&lt;p&gt;The mode-line looks like this (when no hammy is active, when one is active, and when one is &#34;overdue&#34;, waiting for the user to manually advance to the next interval):&lt;/p&gt; &#xA;&lt;p&gt;[[images/mode-line.png]]&lt;/p&gt; &#xA;&lt;p&gt;You can see the lighter prefix (&lt;del&gt;üêπ&lt;/del&gt;), the status (&lt;del&gt;:&lt;/del&gt;, or &lt;del&gt;!&lt;/del&gt; when overdue), the current hammy&#39;s name (&lt;del&gt;Move&lt;/del&gt;), the current interval&#39;s name (&lt;del&gt;üí∫&lt;/del&gt;), and the time elapsed (prefixed by &lt;del&gt;-&lt;/del&gt; when counting down, and &lt;del&gt;+&lt;/del&gt; when overdue and counting up).&lt;/p&gt; &#xA;&lt;p&gt;Of course, if you have something against hamsters, the lighter prefix can be customized, as well as various faces for parts of the mode line. See &lt;del&gt;M-x customize-group RET hammy RET&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Examples :PROPERTIES: :ID: 495c83de-90ea-41a9-a491-618758ddbbfa :END:&lt;/p&gt; &#xA;&lt;p&gt;These examples have more detailed comments to explain how a hammy is defined.&lt;/p&gt; &#xA;&lt;p&gt;This timer reminds you to stand up every so often (e.g. to prevent RSI):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (hammy-define &#34;Move&#34; :documentation &#34;Don&#39;t forget to stretch your legs.&#34; :intervals ;; A list of intervals, each defined with the &lt;code&gt;interval&#39; function. (list (interval ;; The name of the interval is a string, used when selecting ;; hammys and shown in the mode line. :name &#34;üí∫&#34; ;; The duration of the interval: a number of seconds, a string ;; passed to &lt;/code&gt;timer-duration&#39;, or a function which returns such. :duration &#34;45 minutes&#34; ;; Optionally, a face in which to show the ;; interval&#39;s name in the mode line. :face &#39;font-lock-type-face ;; A list of actions to take before starting the interval ;; (really, one or a list of functions to call with the hammy ;; as the argument). The &lt;code&gt;do&#39; macro expands to a lambda, ;; which the interval&#39;s &lt;/code&gt;before&#39; slot is set to. In its ;; body, we call two built-in helper functions. :before (do (announce &#34;Whew!&#34;) (notify &#34;Whew!&#34;)) ;; We want this interval to not automatically advance to the ;; next one; rather, we want the user to call the ;; &lt;code&gt;hammy-next&#39; command to indicate when the standing-up is ;; actually happening. So we provide a list of actions to ;; take when it&#39;s time to advance to the next interval. We ;; wrap the list in a call to the built-in &lt;/code&gt;remind&#39; function, ;; which causes the actions to be repeated every 10 minutes ;; until the user manually advances to the next interval. :advance (remind &#34;10 minutes&#34; ;; Every 10 minutes, while the hammy is waiting ;; to be advanced to the next interval, remind ;; the user by doing these things: (do (announce &#34;Time to stretch your legs!&#34;) (notify &#34;Time to stretch your legs!&#34;) (play-sound-file &#34;&lt;del&gt;/Misc/Sounds/mooove-it.wav&#34;)))) (interval :name &#34;ü§∏&#34; :duration &#34;5 minutes&#34; :face &#39;font-lock-builtin-face :before (do (announce &#34;Mooove it!&#34;) (notify &#34;Mooove it!&#34;)) ;; Again, the interval should not advance automatically ;; to the next--the user should indicate when he&#39;s ;; actually sat down again. (If we omitted the ;; `:advance&#39; slot, the interval would automatically ;; advance when it reached its duration.) :advance (do (announce &#34;Time for a sit-down...&#34;) (notify &#34;Time for a sit-down...&#34;) (play-sound-file &#34;&lt;/del&gt;/Misc/Sounds/relax.wav&#34;))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a more interesting example, a &#34;flywheel timer&#34; (so called because it helps to build momentum), which interleaves rest periods with gradually lengthening work periods.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (hammy-define &#34;Flywheel&#34; :documentation &#34;Get your momentum going!&#34; :intervals (list (interval :name &#34;Play&#34; :face &#39;font-lock-type-face ;; The play/rest interval will always be 5 minutes long. :duration &#34;5 minutes&#34; ;; Before starting the interval, announce and notify, to ;; show the user that the interval has begun. :before (do (announce &#34;Play time!&#34;) (notify &#34;Play time!&#34;)) ;; When the interval&#39;s time is up, remind the user every ;; 5 minutes to get back to work. :advance (remind &#34;5 minutes&#34; (do (announce &#34;Play time is over!&#34;) (notify &#34;Play time is over!&#34;) (play-sound-file &#34;~/Misc/Sounds/get-to-workin.wav&#34;)))) (interval :name &#34;Work&#34; :face &#39;font-lock-builtin-face ;; For the work interval, rather than the duration being ;; the same each time, it &#34;climbs&#34; from 5 minutes to 45 ;; minutes in 5-minute steps, and then descends back to 5 ;; minutes. For this, we use the built-in helper ;; function &lt;code&gt;climb&#39;, which returns a lambda function ;; that, when called at &#34;hammy time,&#34; returns the ;; appropriate duration each time this interval begins. :duration (climb &#34;5 minutes&#34; &#34;45 minutes&#34; :descend t :step &#34;5 minutes&#34;) :before (do (announce &#34;Work time!&#34;) (notify &#34;Work time!&#34;)) :advance (remind &#34;10 minutes&#34; (do (announce &#34;Work time is over!&#34;) (notify &#34;Work time is over!&#34;) (play-sound-file &#34;~/Misc/Sounds/relax.wav&#34;))))) ;; The &lt;/code&gt;complete-p&#39; predicate returns non-nil when a full session ;; has been completed (i.e. when at least one cycle has been ;; completed, the work interval is active and has reached its ;; duration, and its duration is 5 minutes, in which case the work ;; interval will have &#34;climbed&#34; to 45 minutes and back down).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Note that the `do&#39; macro expands to a lambda within the body of&#xA;;; which certain special forms are bound, including `hammy&#39;,&#xA;;; `cycles&#39;, `interval-name&#39;, and `current-duration&#39;, allowing&#xA;;; introspection at runtime.  The predicate is called at &#34;hammy&#xA;;; time&#34;, i.e. when the timer&#39;s code is run between intervals to&#xA;;; determine what to do next.&#xA;:complete-p (do (and (&amp;gt; cycles 1)&#xA;                     (equal interval-name &#34;Work&#34;)&#xA;                     ;; The built-in `duration&#39; function converts&#xA;                     ;; its argument to a number of seconds.&#xA;                     (equal current-duration (duration &#34;5 minutes&#34;))))&#xA;;; Then, when the hammy has completed all of its cycles, play this&#xA;;; sound to celebrate.&#xA;:after (do (play-sound-file &#34;~/Misc/Sounds/all-done.wav&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note the use of &lt;del&gt;:descend t&lt;/del&gt; in the arguments to the &lt;del&gt;climb&lt;/del&gt; function in the &lt;del&gt;Work&lt;/del&gt; interval&#39;s &lt;del&gt;:duration&lt;/del&gt; slot: because of that, it may also be known as a &#34;ladder timer&#34; or a &#34;hill-climb timer&#34;, because after the work interval reaches the maximum duration of 45 minutes, it begins decreasing until it reaches the minimum duration. In this way, the user &#34;spins up&#34;, gaining momentum to build endurance, and then &#34;spins down&#34; to finish the session. This kind of timer may be helpful when working on large projects that are difficult to get started on.&lt;/p&gt; &#xA;&lt;p&gt;Finally, an example of a &#34;third time&#34; timer, in which break periods are one-third as long as the last work interval:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (hammy-define &#34;‚Öì-time&#34; :documentation &#34;Breaks that are ‚Öì as long as the last work interval.&#34; :intervals (list (interval :name &#34;Work&#34; ;; It&#39;s intended that the user manually end this interval ;; when ready, but we specify a maximum of 90 minutes by ;; default. :duration &#34;90 minutes&#34; :before (do (announce &#34;Starting work time (advance to break when ready).&#34;) (notify &#34;Starting work time (advance to break when ready).&#34;)) :advance (remind &#34;10 minutes&#34; (do (let* ((current-duration (ts-human-format-duration (float-time (time-subtract (current-time) current-interval-start-time)))) (message (format &#34;You&#39;ve worked for %s!&#34; current-duration))) (announce message) (notify message) (when hammy-sound-end-work (play-sound-file hammy-sound-end-work)))))) (interval :name &#34;Break&#34; :duration (do (pcase-let* ((`(,_interval ,start ,end) (car history)) (work-seconds (float-time (time-subtract end start)))) (* work-seconds 0.33))) :before (do (let ((message (format &#34;Starting break for %s.&#34; (ts-human-format-duration current-duration)))) (announce message) (notify message))) :advance (remind &#34;5 minutes&#34; (do (announce &#34;Break time is over!&#34;) (notify &#34;Break time is over!&#34;) (when hammy-sound-end-break (play-sound-file hammy-sound-end-break))))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Tips :PROPERTIES: :TOC: :depth 0 :END:&lt;/p&gt; &#xA;&lt;p&gt;*** Show hammy-mode in tab-bar&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;del&gt;tab-bar-mode&lt;/del&gt;, rather than showing the Hammy status in each window&#39;s mode line, you might prefer to show it once, in the tab bar. This can easily be enabled like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (use-package tab-bar :config (setf mode-line-misc-info ;; When the tab-bar is active, don&#39;t show global-mode-string ;; in mode-line-misc-info, because we now show that in the ;; tab-bar using &lt;code&gt;tab-bar-format-align-right&#39; and ;; &lt;/code&gt;tab-bar-format-global&#39;. (remove &#39;(global-mode-string (&#34;&#34; global-mode-string)) mode-line-misc-info)) (unless (member &#39;tab-bar-format-global tab-bar-format) ;; Show `global-mode-string&#39; in the tab bar. (setf tab-bar-format (append tab-bar-format &#39;(tab-bar-format-align-right tab-bar-format-global))))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changelog :PROPERTIES: :TOC: :ignore (descendants) :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.2-pre&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Changes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Log &#34;Stopped&#34; when a hammy is stopped.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1&lt;/p&gt; &#xA;&lt;p&gt;First tagged version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAQ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;/Why are timers called hammys? Isn&#39;t that silly?/&lt;/p&gt; &#xA;&lt;p&gt;Probably, but is it sillier than calling them tomatoes? Besides, it helps to distinguish them from Emacs&#39;s timers, which are used in the implementation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License :PROPERTIES: :TOC: :ignore (this) :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPLv3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COMMENT Config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;before-save-hook: (org-make-toc)&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
</feed>