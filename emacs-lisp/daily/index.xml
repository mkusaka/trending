<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-26T01:36:02Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xenodium/org-block-capf</title>
    <updated>2023-01-26T01:36:02Z</updated>
    <id>tag:github.com,2023-01-26:/xenodium/org-block-capf</id>
    <link href="https://github.com/xenodium/org-block-capf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;üëâ [[https://github.com/sponsors/xenodium][Support my work via GitHub Sponsors]]&lt;/p&gt; &#xA;&lt;p&gt;tl;dr ‚Äú&amp;lt;‚Äù to trigger org block completion at point.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_html: :align center [[file:corfu.png]]\ Screenshot of =org-block-capf= completion in =corfu= with =corfu-popupinfo-mode= enabled for block preview.&lt;/p&gt; &#xA;&lt;p&gt;Like [[https://github.com/xenodium/company-org-block][company-org-block]], but for users of the built-in =completion-at-point= completion or its extensions like [[https://github.com/minad/corfu][corfu]], who want similar functionality without the [[https://company-mode.github.io/][company]] dependency. org-block-capf is still compatible with company via its =company-capf= backend.&lt;/p&gt; &#xA;&lt;p&gt;Check out [[https://github.com/xenodium/company-org-block][company-org-block]] to get a feel for the functionality and capabilities.&lt;/p&gt; &#xA;&lt;p&gt;To enable =org-block-capf=, add it to the =completion-at-point-functions= in org-mode, which you can do via:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :lexical no (require &#39;org-block-capf)&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;org-mode-hook #&#39;org-block-capf-add-to-completion-at-point-functions) #+end_src Then, completing the ‚Äú&amp;lt;‚Äù via =complete-symbol= / =completion-at-point= in org-mode should let you select an org block.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use =M-x org-block-capf= as an interactive command to complete ‚Äú&amp;lt;‚Äù, which doesn&#39;t require the above setup, as it uses itself as a completion-at-point-function.&lt;/p&gt; &#xA;&lt;p&gt;Many thanks to [[https://github.com/meliache][Michael Eliachevitch]] for contributing improvements.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>renzmann/treesit-auto</title>
    <updated>2023-01-26T01:36:02Z</updated>
    <id>tag:github.com,2023-01-26:/renzmann/treesit-auto</id>
    <link href="https://github.com/renzmann/treesit-auto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically pick between TreeSitter and default major modes in Emacs 29+&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: treesit-auto #+AUTHOR: Robb Enzmann&lt;/p&gt; &#xA;&lt;p&gt;Automatically pick between TreeSitter and default major modes in Emacs 29+.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package is not on ELPA/MELPA yet. To install it, you will need to copy =treesit-auto.el= to somewhere on your =load-path=, or use the new =package-vc-install=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src example M-x package-vc-install RET &lt;a href=&#34;https://github.com/renzmann/treesit-auto.git&#34;&gt;https://github.com/renzmann/treesit-auto.git&lt;/a&gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then, in your Emacs configuration file (=~/.emacs.d/init.el=),&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package treesit-auto :config (treesit-auto-apply-remap)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What this package does&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Emacs 29, while featuring =treesit.el= and a convenient =treesit-install-language-grammar=, [[https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html][will not feature an intelligent way to choose]] between a default mode, such as =python-mode=, and it&#39;s tree-sitter enhanced version, =python-ts-mode=, automatically. This package attempts to remedy that by applying these rules:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;1. If the grammar is installed, then switch to the appropriate tree-sitter mode:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this case, assuming we open a Python buffer, and the [[https://github.com/tree-sitter/tree-sitter-python][Python tree-sitter grammar]] is installed, then Emacs will use =python-ts-mode= instead of =python-mode=.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;2. If the grammar is NOT installed, and the user has specified a fallback:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package exposes a customizable variable =treesit-auto-fallback-alist= that lets you pick the fallback modes by name. For instance, if we apply this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;treesit-auto-fallback-alist &#39;(toml-ts-mode . conf-toml-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then, when the TOML grammar is missing, Emacs will use =conf-toml-mode=, instead of trying to fall back to =toml-mode=.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. If the grammar is NOT installed and the user has NOT specified a fallback mode AND an appropriately named base mode exists, switch to it&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the most general case. If, for example, the Go tree-sitter grammar is not installed, but we have installed [[https://github.com/dominikh/go-mode.el][go-mode]], then Emacs will use that instead of =go-ts-mode=, since they share the same =go-= prefix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have modified =treesit-language-source-alist= through =setq=, then it is recommended to put any configuration of this package AFTER that =setq=.&lt;/p&gt; &#xA;&lt;p&gt;Not all default major modes make sense to bump up to a similar tree-sitter mode. For example, when /I/ open a =.sh= file, my intent is nearly always to be using it with Bash. This is not the case for everyone, though, so by default this package will not replace =sh-mode= with =bash-ts-mode=. If you do want such a remap, simply include a line like this before calling =treesit-auto-apply-remap=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;treesit-auto-fallback-alist &#39;(bash-ts-mode . sh-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you want =treesit-auto-apply-remap= to re-run after installing a grammar with =treesit-install-language-grammar=, try advising the function with something like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add &#39;treesit-install-language-grammar :after (lambda (&amp;amp;rest _r) (treesit-auto-apply-remap))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Keep track of your hooks&lt;/p&gt; &#xA;&lt;p&gt;This package does not modify any of your major mode hooks. That is, if you have functions in =python-mode-hook=, but not in =python-ts-mode-hook=, then your hook from =python-mode= will not be applied, assuming =python-ts-mode= is what gets loaded. For major modes in which this is a concern, the current recommendation is to address this as part of your configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq python-ts-mode-hook python-mode-hook) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Full example&lt;/p&gt; &#xA;&lt;p&gt;This is how I configure =treesit-auto= for my own personal use.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package treesit-auto :demand t :config (add-to-list &#39;treesit-auto-fallback-alist &#39;(bash-ts-mode . sh-mode)) (treesit-auto-apply-remap) (advice-add &#39;treesit-install-language-grammar :after (lambda (&amp;amp;rest _r) (treesit-auto-apply-remap)))) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>steos/emacs.d</title>
    <updated>2023-01-26T01:36:02Z</updated>
    <id>tag:github.com,2023-01-26:/steos/emacs.d</id>
    <link href="https://github.com/steos/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;my shiny emacs.d&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>