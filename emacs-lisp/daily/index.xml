<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-08T01:35:27Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CarlQLange/chatgpt-arcana.el</title>
    <updated>2023-03-08T01:35:27Z</updated>
    <id>tag:github.com,2023-03-08:/CarlQLange/chatgpt-arcana.el</id>
    <link href="https://github.com/CarlQLange/chatgpt-arcana.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Put ChatGPT in your emacs. Yer a space wizard now, Harry.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT-Arcana&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;üîÆ ChatGPT-Arcana is an Emacs Lisp package that gives you arcane powers. Yer a space wizard now, Harry.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h4&gt;Create and edit code&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/859820/222489571-27901725-158e-4a2a-899a-36a3f4eea2c1.mp4&#34;&gt;https://user-images.githubusercontent.com/859820/222489571-27901725-158e-4a2a-899a-36a3f4eea2c1.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Write a doc about ffmpeg in org-mode&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/859820/222561453-031d271f-4fee-46f4-b63e-734729e01745.mp4&#34;&gt;https://user-images.githubusercontent.com/859820/222561453-031d271f-4fee-46f4-b63e-734729e01745.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Explain code in the selected region&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/859820/222563046-5928a98d-7498-4bce-9916-f5a7d24acc81.mp4&#34;&gt;https://user-images.githubusercontent.com/859820/222563046-5928a98d-7498-4bce-9916-f5a7d24acc81.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Have a lovely chat&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/859820/222718608-b767a663-86f9-4c56-acbe-192e1e91fe26.mp4&#34;&gt;https://user-images.githubusercontent.com/859820/222718608-b767a663-86f9-4c56-acbe-192e1e91fe26.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are various interactive functions available. Some of them even work.&lt;/p&gt; &#xA;&lt;p&gt;This package, for now, provides the following functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat with GPT in Emacs with &lt;code&gt;chatgpt-arcana-chat-start-chat&lt;/code&gt; (this is the best part of this package).&lt;/li&gt; &#xA; &lt;li&gt;Generate text content based on prompt and optionally selected region using &lt;code&gt;chatgpt-arcana-query&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace selected text region with generated text content using &lt;code&gt;chatgpt-arcana-replace-region&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Insert generated text at the current cursor position with informative context lines using &lt;code&gt;chatgpt-arcana-insert-at-point-with-context&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Insert generated text at, after or before selected text region using &lt;code&gt;chatgpt-arcana-insert-after-region&lt;/code&gt; and &lt;code&gt;chatgpt-arcana-insert-before-region&lt;/code&gt; and &lt;code&gt;chatgpt-arcana-insert-at-point&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat buffer auto-naming (modify prompt with custom var &lt;code&gt;chatgpt-arcana-generated-buffer-name-prompt&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Chat session autosave and automatic file naming (disable with custom var&lt;code&gt;chatgpt-arcana-chat-autosave-enabled&lt;/code&gt;, modify save directory with &lt;code&gt;chatgpt-arcana-chat-autosave-directory&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;ChatGPT-Arcana isn‚Äôt on melpa or elpa. You can use use-package to install from github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package chatgpt-arcana&#xA;  :straight (:host github :repo &#34;CarlQLange/ChatGPT-Arcana.el&#34; :files (&#34;*.el&#34;))&#xA;  :init (setq chatgpt-arcana-api-key &#34;your-api-key-here&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;My own config adds a few extra parts that don&#39;t need to be part of the package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package chatgpt-arcana&#xA;  :straight (:host github :repo &#34;CarlQLange/ChatGPT-Arcana.el&#34; :files (&#34;*.el&#34;))&#xA;  :init (setq chatgpt-arcana-api-key &#34;your-api-key-here&#34;)&#xA;  :config &#xA;  (use-package all-the-icons&#xA;    :config&#xA;    (add-to-list &#39;all-the-icons-mode-icon-alist&#xA;                 &#39;(chatgpt-arcana-chat-mode all-the-icons-octicon &#34;comment-discussion&#34; :height 1.0 :v-adjust -0.1 :face all-the-icons-purple)))&#xA;&#xA;  (use-package pretty-hydra&#xA;    :config&#xA;    (eval `(pretty-hydra-define chatgpt-arcana-hydra (:color blue :quit-key &#34;q&#34; :title &#34;ChatGPT Arcana&#34;)&#xA;             (&#34;Query&#34;&#xA;              ((&#34;a&#34; chatgpt-arcana-query &#34;Query&#34;)&#xA;               (&#34;r&#34; chatgpt-arcana-replace-region &#34;Replace region&#34;))&#xA;              &#34;Insert&#34;&#xA;              ((&#34;i&#34; chatgpt-arcana-insert-at-point-with-context &#34;At point with context&#34;)&#xA;               (&#34;I&#34; chatgpt-arcana-insert-at-point &#34;At point&#34;)&#xA;               (&#34;j&#34; chatgpt-arcana-insert-after-region &#34;Before region&#34;)&#xA;               (&#34;J&#34; chatgpt-arcana-insert-before-region &#34;After region&#34;))&#xA;              &#34;Chat&#34;&#xA;              ((&#34;c&#34; chatgpt-arcana-start-chat &#34;Start chat&#34;))&#xA;              &#34;Shortcuts&#34;&#xA;              (,@(chatgpt-arcana-generate-prompt-shortcuts))))))&#xA;&#xA;  (map! :leader&#xA;        :prefix (&#34;[&#34; . &#34;ChatGPT&#34;)&#xA;        :desc &#34;Start chat&#34; :g &#34;c&#34; #&#39;chatgpt-arcana-start-chat&#xA;        :desc &#34;Start chat&#34; :g &#34;[&#34; #&#39;chatgpt-arcana-start-chat&#xA;        :desc &#34;Open Hydra&#34; :g &#34;h&#34; #&#39;chatgpt-arcana-hydra/body))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You are going to want to add a keymap of your own, that&#39;s for sure :)&lt;/p&gt; &#xA;&lt;p&gt;I have to stress at this point that this package is very new, and I only wrote it to scratch an itch. Sorry if it turns you into a chicken or something.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;You will need to have an API key from OpenAI‚Äôs GPT-3 language model to use this package, and set it as &lt;code&gt;chatgpt-arcana-api-key&lt;/code&gt;. You can sign up for an API key on the OpenAI website. Depending on how much you use the package, the API cost may vary.&lt;/p&gt; &#xA;&lt;p&gt;I strongly recommend setting a low usage limit on your account to stop runaway spending. The default model is quite cheap but it costs nothing to be prudent.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;I have done exactly zero work in terms of compatibility. It works on my machine, sometimes. Maybe it&#39;ll even work on yours. Also, even though ChatGPT is pretty much the largest computing leap since the iPhone, it has its own limitations. Particularly, I&#39;ve noticed it&#39;s pretty terrible at writing org-mode - I guess due to a lack of source data. Hence, the &lt;code&gt;chatgpt-arcana-chat-mode&lt;/code&gt; is based on Markdown.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This package was developed by Carl Lange with judicious help from ChatGPT.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This package is licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GNU General Public License v3.0&lt;/a&gt;. &lt;em&gt;Important note&lt;/em&gt;: code generated by ChatGPT probably has a massive license headache attached to it and may result in RMS eating your dog.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>superdupermart/dotemacs</title>
    <updated>2023-03-08T01:35:27Z</updated>
    <id>tag:github.com,2023-03-08:/superdupermart/dotemacs</id>
    <link href="https://github.com/superdupermart/dotemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ïù¥Îß•Ïä§ ÏÑ§Ï†ï ÌååÏùº&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Read me.&lt;/p&gt;</summary>
  </entry>
</feed>