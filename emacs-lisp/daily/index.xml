<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-24T01:39:54Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacscollective/epkg</title>
    <updated>2022-07-24T01:39:54Z</updated>
    <id>tag:github.com,2022-07-24:/emacscollective/epkg</id>
    <link href="https://github.com/emacscollective/epkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Browse the Emacsmirror package database&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Browse the Emacsmirror package database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides access to a local copy of the [[https://emacsmirror.net][Emacsmirror]] package database. It provides low-level functions for querying the database and a &lt;del&gt;package.el&lt;/del&gt;-like user interface for browsing the available packages.&lt;/p&gt; &#xA;&lt;p&gt;The Emacsmirror is a growing collection of Emacs Lisp packages. All mirrored packages are available as Git repositories. In most cases this is done by mirroring the upstream Git repository, but if upstream uses something else, then the mirror nevertheless makes the package available as a Git repository.&lt;/p&gt; &#xA;&lt;p&gt;One primary purpose of the Emacsmirror is to provide a comprehensive list of available Emacs packages, including packages which have gone out of fashion (but might later prove to be useful still).&lt;/p&gt; &#xA;&lt;p&gt;For more information see the [[https://emacsmirror.net/manual/epkg][manual]] and the [[https://emacsmirror.net][Emacsmirror]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spotify/dockerfile-mode</title>
    <updated>2022-07-24T01:39:54Z</updated>
    <id>tag:github.com,2022-07-24:/spotify/dockerfile-mode</id>
    <link href="https://github.com/spotify/dockerfile-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An emacs mode for handling Dockerfiles&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dockerfile-mode&lt;/h1&gt; &#xA;&lt;p&gt;Known to work with Emacs 24 and later&lt;/p&gt; &#xA;&lt;p&gt;If you just want to use it, you can get it via MELPA.&lt;/p&gt; &#xA;&lt;p&gt;A Dockerfile mode for emacs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;/your/path/to/dockerfile-mode/&#34;)&#xA;(require &#39;dockerfile-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;Dockerfile\\&#39;&#34; . dockerfile-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adds syntax highlighting as well as the ability to build the image directly using &lt;code&gt;C-c C-b&lt;/code&gt; from the buffer (&lt;code&gt;C-c M-b&lt;/code&gt; to bypass docker build cache).&lt;/p&gt; &#xA;&lt;p&gt;You can specify the image name in the file itself by adding a line like this at the top of your Dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;## -*- dockerfile-image-name: &#34;your-image-name-here&#34; -*-&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t, you&#39;ll be prompted for an image name each time you build. You may want to add the following to your emacs config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(put &#39;dockerfile-image-name &#39;safe-local-variable #&#39;stringp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change the binary to use with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq dockerfile-mode-command &#34;docker&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>magit/transient</title>
    <updated>2022-07-24T01:39:54Z</updated>
    <id>tag:github.com,2022-07-24:/magit/transient</id>
    <link href="https://github.com/magit/transient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transient commands&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Transient commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Taking inspiration from prefix keys and prefix arguments, Transient implements a similar abstraction involving a prefix command, infix arguments and suffix commands. We could call this abstraction a &#34;transient command&#34;, but because it always involves at least two commands (a prefix and a suffix) we prefer to call it just a &#34;transient&#34;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote Transient keymaps are a feature provided by Emacs. Transients as implemented by this package involve the use of transient keymaps.&lt;/p&gt; &#xA;&lt;p&gt;Emacs provides a feature that it calls &#34;prefix commands&#34;. When we talk about &#34;prefix commands&#34; in Transient&#39;s documentation, then we mean our own kind of &#34;prefix commands&#34;, unless specified otherwise. To avoid ambiguity we sometimes use the terms &#34;transient prefix command&#34; for our kind and &#34;regular prefix command&#34; for Emacs&#39; kind. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;When the user calls a transient prefix command, then a transient (temporary) keymap is activated, which binds the transient&#39;s infix and suffix commands, and functions that control the transient state are added to &lt;del&gt;pre-command-hook&lt;/del&gt; and &lt;del&gt;post-command-hook&lt;/del&gt;. The available suffix and infix commands and their state are shown in a popup buffer until the transient is exited by invoking a suffix command.&lt;/p&gt; &#xA;&lt;p&gt;Calling an infix command causes its value to be changed. How that is done depends on the type of the infix command. The simplest case is an infix command that represents a command-line argument that does not take a value. Invoking such an infix command causes the switch to be toggled on or off. More complex infix commands may read a value from the user, using the minibuffer.&lt;/p&gt; &#xA;&lt;p&gt;Calling a suffix command usually causes the transient to be exited; the transient keymaps and hook functions are removed, the popup buffer no longer shows information about the (no longer bound) suffix commands, the values of some public global variables are set, while some internal global variables are unset, and finally the command is actually called. Suffix commands can also be configured to not exit the transient.&lt;/p&gt; &#xA;&lt;p&gt;A suffix command can, but does not have to, use the infix arguments in much the same way it can choose to use or ignore the prefix arguments. For a suffix command that was invoked from a transient the variable &lt;del&gt;transient-current-suffixes&lt;/del&gt; and the function &lt;del&gt;transient-args&lt;/del&gt; serve about the same purpose as the variables &lt;del&gt;prefix-arg&lt;/del&gt; and &lt;del&gt;current-prefix-arg&lt;/del&gt; do for any command that was called after the prefix arguments have been set using a command such as &lt;del&gt;universal-argument&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[[http://readme.emacsair.me/transient.png]]&lt;/p&gt;</summary>
  </entry>
</feed>