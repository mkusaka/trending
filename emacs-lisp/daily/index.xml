<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T01:34:31Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>namilus/denote-menu</title>
    <updated>2023-01-15T01:34:31Z</updated>
    <id>tag:github.com,2023-01-15:/namilus/denote-menu</id>
    <link href="https://github.com/namilus/denote-menu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;View and filter Denote files in a tabulated list&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: denote-menu #+author: Mohamed Suliman&lt;br&gt; #+email: &lt;a href=&#34;mailto:sulimanm@tcd.ie&#34;&gt;sulimanm@tcd.ie&lt;/a&gt; #+language: en #+options: &#39;:t toc:nil author:t email:t num:t #+macro: stable-version 1.0.0 #+macro: release-date 2022-12-16&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview =denote-menu= provides an interface for viewing your denote files that goes beyond using the standard =dired= emacs command to view your =denote-directory=. Using dired is a fine method for viewing your denote files (among other things), however denote&#39;s file naming scheme tends to clutters the buffer with hyphens and underscores. This package aims to declutter your view of your files by making it easy to view the 3 main components of denote files, that is their timestamp, title, and keywords. Derived from the builtin =tabulated-list-mode=, the =&lt;em&gt;Denote&lt;/em&gt;= buffer that is created with the =list-denotes= command is visually similar to that created by commands like =list-packages= and =list-processes=, and provides methods to filter the denote files that are shown, as well as exporting to dired with the denote files that are currently shown for them to be operated upon further. In this way, =denote-menu= adheres to the core tenants of the denote package itself.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is /predictable/ as it makes use of existing emacs functionality to display files in a tabulated way similar to the package menu. It is /composable/, integrating well with other emacs packages (denote, in this case) and builtin functionality, opting to not reinvent the wheel as to how the data is displayed. The scope of this package is narrow: displaying and filtering denote files in a visually appealing and intuitive manner. =denote-menu= is also /flexible/ and /hackable/, providing a simple API to create your own filters, and integrates well with dired by providing the =denote-menu-export-to-dired= command, which allows for further action on denote files beyond just viewing and filtering them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation =denote-menu= is not yet on any of the package archives. To install, simply clone this repository and add the following to your emacs configuration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;load-path &#34;~/path/to/cloned/denote-menu/&#34;) (require &#39;denote-menu) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This package requires Denote =v1.2.0= or above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Assuming that you have =denote-directory= set to a directory that has denote files, simply run =M-x list-denotes= to open the =&lt;em&gt;Denote&lt;/em&gt;= buffer. You will be presented with a tabulated list of your denote files whose filenames match the =denote-menu-initial-regex= regular expression. By default this is set to match all denote files in the =denote-directory=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The tabulated list includes 3 columns, one for the timestamp, title, and keywords of each denote file. The timestamp column includes a button that when followed will open the corresponding denote file using =find-file=.&lt;/p&gt; &#xA;&lt;p&gt;** Filtering by regular expression To filter the denote files shown by a regular expression, run =M-x denote-menu-filter=. This will prompt for a regular expression and will update the buffer to list only those denote files whose filenames match. Running =denote-menu-filter= again will further filter down the list. This is akin to running =% m= inside a =dired= buffer. ** Filtering by keyword To filter the denote files shown to those that are tagged with specific keywords, run =M-x denote-menu-filter-by-keyword=. This command will prompt for a list of comma separated keywords (with completion) and filter the list to those denote files that are tagged with at least one of the inputted keywords. ** Defining your own filters There are two ways to define your own filters:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Write an interactive function that sets =denote-menu-current-regex= to be a regular expression that matches your desired set of denote files, and then calls =denote-menu-update-entries=. For example, if I would like to a filter that filters out those denote files that were not tagged with the &#34;biblio&#34; keyword, I would add the following to my emacs configuration: #+begin_src emacs-lisp (defun my/denote-menu-filter-biblio-only () (interactive) (setq denote-menu-current-regex &#34;_biblio&#34;) (denote-menu-update-entries)) #+end_src&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write an interactive function that sets =tabulated-list-entries= to a be a function that maps each desired denote file path to an entry using =denote-menu--path-to-entry= function, and calls =revert-buffer=. For example, if the variable =my-matching-denote-paths= contains a list of file paths of the desired denote files, then your filter function would look something like the following: #+begin_src emacs-lisp (defun my/denote-menu-filter-custom () (interactive) (let ((my-matching-denote-paths &#39;(&#34;/home/namilus/zettelkasten/20220719T135304--this-is-my-first-note__meta.org&#34;))) (setq tabulated-list-entries (lambda () (mapcar #&#39;denote-menu--path-to-entry my-matching-denote-paths))) (revert-buffer))) #+end_src ** Clearing filters To clear the filters and revert back to the =denote-menu-initial-regex=, run =M-x denote-menu-clear-filters=. ** Exporting to =dired= Adhering to the tenets of predictability and composability, =denote-menu= provides the command =denote-menu-export-to-dired= to allow further action on these files that is permitted in dired e.g copying, moving, compressing, etc. We do not reinvent the wheel here but instead defer to what already exists.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When in the =&lt;em&gt;Denote&lt;/em&gt;= buffer running =M-x denote-menu-export-to-dired= will open a =dired= buffer in the same window with those denote files that were displayed in the =&lt;em&gt;Denote&lt;/em&gt;= buffer already marked.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sample configuration The user options for =denote-menu= are:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=denote-menu-date-column-width= :: A number value for the width of the date column. Defaults to 17.&lt;/li&gt; &#xA; &lt;li&gt;=denote-menu-title-column-width= :: A number value for the width of the title column. Defaults to 85.&lt;/li&gt; &#xA; &lt;li&gt;=denote-menu-keywords-column-width= :: A number value for the width of the keywords column. Defaults to 30. This value is irrelevant as it is the final column and will take up the remaining width of the buffer.&lt;/li&gt; &#xA; &lt;li&gt;=denote-menu-initial-regex= :: A string that is the regular expression that is used to initially populate the =&lt;em&gt;Denote&lt;/em&gt;= buffer with matching entries. This could allow for potential workflows such as having a dedicated buffer to display your journal denote files (e.g those tagged with the &#34;journal&#34; keyword), etc. Defaults to the =.= regular expression.&lt;/li&gt; &#xA; &lt;li&gt;=denote-menu-action= :: A function that takes as argument the current denote file path and performs an action on it. Defaults to =(lambda (path) (find-file path))=. This function is then called whenever the button in the timestamp column is followed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A sample user configuration is given below that sets appropriate keybindings for the commands described in the previous section:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;load-path &#34;~/projects/denote-menu/&#34;) (require &#39;denote-menu)&lt;/p&gt; &#xA;&lt;p&gt;(global-set-key (kbd &#34;C-c z&#34;) #&#39;list-denotes)&lt;/p&gt; &#xA;&lt;p&gt;(define-key denote-menu-mode-map (kbd &#34;c&#34;) #&#39;denote-menu-clear-filters) (define-key denote-menu-mode-map (kbd &#34;/ r&#34;) #&#39;denote-menu-filter) (define-key denote-menu-mode-map (kbd &#34;/ k&#34;) #&#39;denote-menu-filter-by-keyword) (define-key denote-menu-mode-map (kbd &#34;e&#34;) #&#39;denote-menu-export-to-dired) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>benjwrdill/dotfiles</title>
    <updated>2023-01-15T01:34:31Z</updated>
    <id>tag:github.com,2023-01-15:/benjwrdill/dotfiles</id>
    <link href="https://github.com/benjwrdill/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;My dotfiles. The beginnings of a portable environment for my frequent comings and goings between thevarious computers in my life, not to mention the frequent reinstalls that I make.&lt;/p&gt; &#xA;&lt;p&gt;Basic instructions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After stabilizing the new OS, install and activate git.&lt;/li&gt; &#xA; &lt;li&gt;Clone into this repo.&lt;/li&gt; &#xA; &lt;li&gt;Symlink (ln -s) .vimrc, .tmux.conf, and .zshrc to ~/&lt;/li&gt; &#xA; &lt;li&gt;Install vim, tmux, and zsh.&lt;/li&gt; &#xA; &lt;li&gt;Vim requires powerline, pathogen, and jellybeans to function without throwing an error.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;vimfiles repo is on the todo list, coming soon hopefully.&lt;/p&gt;</summary>
  </entry>
</feed>