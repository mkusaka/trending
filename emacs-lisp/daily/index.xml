<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-26T01:35:38Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nicferrier/emacs-kv</title>
    <updated>2022-08-26T01:35:38Z</updated>
    <id>tag:github.com,2022-08-26:/nicferrier/emacs-kv</id>
    <link href="https://github.com/nicferrier/emacs-kv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Key/Value collection type functions: for alists, hashtables and plists. Useful stuff.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;A collection of tools for dealing with key/value data structures such as plists, alists and hash-tables.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;filter-keys alist &amp;amp;rest keys ===&lt;/p&gt; &#xA;&lt;p&gt;Return the //alist// filtered to the //keys// list.&lt;/p&gt; &#xA;&lt;p&gt;Only pairs where the car is a [[member]] of //keys// will be returned.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;hash alist &amp;amp;rest hash-table-args ===&lt;/p&gt; &#xA;&lt;p&gt;Convert //alist// to a HASH.&lt;/p&gt; &#xA;&lt;p&gt;//hash-table-args// are passed to the hash-table creation.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;keys alist ===&lt;/p&gt; &#xA;&lt;p&gt;Get just the keys from the alist.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;plist alist ===&lt;/p&gt; &#xA;&lt;p&gt;Convert an alist to a plist.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;values alist ===&lt;/p&gt; &#xA;&lt;p&gt;Get just the values from the alist.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-keys-&amp;gt;* alist fn ===&lt;/p&gt; &#xA;&lt;p&gt;Convert the keys of //alist// through //fn//.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-keys-&amp;gt;symbols alist ===&lt;/p&gt; &#xA;&lt;p&gt;Convert the keys of //alist// into symbols.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-sort alist pred ===&lt;/p&gt; &#xA;&lt;p&gt;Sort //alist// (by key) with //pred//.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-sort-by-value alist pred ===&lt;/p&gt; &#xA;&lt;p&gt;Sort //alist// by value with //pred//.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist2-&amp;gt;alist alist2 car-key cdr-key &amp;amp;optional proper ===&lt;/p&gt; &#xA;&lt;p&gt;Reduce the //alist2// (a list of alists) to a single alist.&lt;/p&gt; &#xA;&lt;p&gt;//car-key// is the key of each alist to use as the resulting key and //cdr-key// is the key of each alist to user as the resulting cdr.&lt;/p&gt; &#xA;&lt;p&gt;If //proper// is [[t]] then the alist is a list of proper lists, not cons cells.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist2-&amp;gt;filter-keys alist2 &amp;amp;rest keys ===&lt;/p&gt; &#xA;&lt;p&gt;Return the //alist2// (a list of alists) filtered to the //keys//.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist2-&amp;gt;plist alist2 ===&lt;/p&gt; &#xA;&lt;p&gt;Convert a list of alists too a list of plists.&lt;/p&gt; &#xA;&lt;p&gt;=== kvcmp a b ===&lt;/p&gt; &#xA;&lt;p&gt;Do a comparison of the two values using printable syntax.&lt;/p&gt; &#xA;&lt;p&gt;Use this as the function to pass to [[sort]].&lt;/p&gt; &#xA;&lt;p&gt;=== kvdotassoc expr table ===&lt;/p&gt; &#xA;&lt;p&gt;Dotted expression handling with [[assoc]].&lt;/p&gt; &#xA;&lt;p&gt;=== kvdotassoc-fn expr table func ===&lt;/p&gt; &#xA;&lt;p&gt;Use the dotted //expr// to access deeply nested data in //table//.&lt;/p&gt; &#xA;&lt;p&gt;//expr// is a dot separated expression, either a symbol or a string. For example:&lt;/p&gt; &#xA;&lt;p&gt;{{{ &#34;a.b.c&#34; }}}&lt;/p&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;p&gt;{{{ &#39;a.b.c }}}&lt;/p&gt; &#xA;&lt;p&gt;If the //expr// is a symbol then the keys of the alist are also expected to be symbols.&lt;/p&gt; &#xA;&lt;p&gt;//table// is expected to be an alist currently.&lt;/p&gt; &#xA;&lt;p&gt;//func// is some sort of [[assoc]] like function.&lt;/p&gt; &#xA;&lt;p&gt;=== kvdotassq expr table ===&lt;/p&gt; &#xA;&lt;p&gt;Dotted expression handling with [[assq]].&lt;/p&gt; &#xA;&lt;p&gt;=== kvhash-&amp;gt;alist hash ===&lt;/p&gt; &#xA;&lt;p&gt;Convert //hash// to an ALIST.&lt;/p&gt; &#xA;&lt;p&gt;=== kvmap-bind args sexp seq ===&lt;/p&gt; &#xA;&lt;p&gt;A hybrid of [[destructuring-bind]] and [[mapcar]] //args// shall be of the form used with [[destructuring-bind]]&lt;/p&gt; &#xA;&lt;p&gt;Unlike most other mapping forms this is a macro intended to be used for structural transformations, so the expected usage will be that //args// describes the structure of the items in //seq//, and //sexp// will describe the structure desired.&lt;/p&gt; &#xA;&lt;p&gt;=== kvplist-&amp;gt;alist plist ===&lt;/p&gt; &#xA;&lt;p&gt;Convert //plist// to an alist.&lt;/p&gt; &#xA;&lt;p&gt;The keys are expected to be :prefixed and the colons are removed. The keys in the resulting alist are symbols.&lt;/p&gt; &#xA;&lt;p&gt;=== kvplist-&amp;gt;filter-keys plist &amp;amp;rest keys ===&lt;/p&gt; &#xA;&lt;p&gt;Filter the plist to just those matching //keys//.&lt;/p&gt; &#xA;&lt;p&gt;//keys// must actually be :-less symbols.&lt;/p&gt; &#xA;&lt;p&gt;[[kvalist-&amp;gt;filter-keys]] is actually used to do this work.&lt;/p&gt; &#xA;&lt;p&gt;=== kvplist-&amp;gt;merge &amp;amp;rest plists ===&lt;/p&gt; &#xA;&lt;p&gt;Merge the 2nd and subsequent plists into the first, clobbering values set by lists to the left.&lt;/p&gt; &#xA;&lt;p&gt;=== kvplist2-&amp;gt;filter-keys plist2 &amp;amp;rest keys ===&lt;/p&gt; &#xA;&lt;p&gt;Return the //plist2// (a list of plists) filtered to the //keys//.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rougier/org-bib-mode</title>
    <updated>2022-08-26T01:35:38Z</updated>
    <id>tag:github.com,2022-08-26:/rougier/org-bib-mode</id>
    <link href="https://github.com/rougier/org-bib-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs minor mode for literate &amp; annotated bibliography&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;Literate &amp;amp; annotated bibliography&lt;/em&gt; â€” Nicolas P. Rougier&lt;/p&gt; &#xA;&lt;p&gt;[[./bibliography.png]]&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt; This literate and annotated bibliography is an adaptation of the idea [[http://cachestocaches.com/2020/3/org-mode-annotated-bibliography/][Managing my Annotated Bibliography with Emacs&#39; Org Mode]] by [[http://gjstein.com/][Gregory J Stein]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The core idea behind literate bibliography is to have a single structured file where each entry corresponds to a reference. Information concerning an entry is stored as properties and two subsections allow to enter abstract and notes. To ease the manipulation, org-bib-mode provides a sidebar menu that displays the list of bibliograpic entries and provide tools to ease navigation. Under the hood, the org-bib-mode is the union of two modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/rougier/pdf-drop-mode][pdf-drop-mode]] that allow to drag and drop a file in order to add it to the bibliography using its doi that is searched automatically.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rougier/org-imenu/][org-imenu]] that allow to easily nagivate among entries and allowing various operations such as filtering entries, moving entries, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;org-bib mode is meant to be simple and robust (it is simple but not yet robust). If you need somethign more elaborated, have a look at the amazing [[https://github.com/jkitchin/org-ref][org-ref]] mode by John Kitchin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;org-bib mode depends on [[https://github.com/rougier/pdf-drop-mode][pdf-drop-mode]] and [[https://github.com/rougier/org-imenu/][org-imenu]] that needs to be installed. For example using [[https://github.com/radian-software/straight.el][straight.el]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(straight-use-package &#39;(org-imenu :type git :host github :repo &#34;rougier/org-imenu&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(straight-use-package &#39;(pdf-drop-mode :type git :host github :repo &#34;rougier/pdf-drop-mode&#34;))&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minimal document structure is a document with a single level headline that is used to store new entries. It is configurable via the [[help:org-bib-unsorted-header][org-bib-unsorted-header]] variable (default is &#34;Unsorted&#34;).&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example #+LIBRARY-PATH: ~/Documents #+LIBRARY-FILE: ~/Documents/my-bibliography.bib&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unsorted #+end_example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You need to ensure [[help:pdf-drop-exitftool-path][pdf-drop-exiftool-path]] and [[help:org-drop-pdttotext-path][pdf-drop-pdftotext-path]] points to relevant binaries (these are needed to extract information from PDF metadata (exiftool) or PDF content (pdftotext)). Last step is to tell org-bib where to store PDFs. This is done via the =#+LIBRARY-PATH= keyword that you can set at the top of your org-file. If you don&#39;t, the current directory will be used. PDF will be copied and renamed automatically if you set the corresponding options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| Key | Description | Key | Description | |----------+------------------------+------------+----------------------------| | =i= | Show org entry | =v i= | Set view mode to org entry | | =a= | Show abstract | =v a= | Set view mode to abstract | | =n= | Show notes | =v n= | Set view mode to notes | | &lt;del&gt;=&lt;/del&gt; | Show preview | =v p= | Set view mode to preview | | =b= | Show bibtex | =v b= | Set view mode to bibtex | | =u= | Show URL | =v u= | Set view mode to URL | | =p= | Show PDF | =v p= | Set view mode to PDF | | | | =v &#xA; &lt;return&gt;&#xA;  = | Exit view mode | | =e= | Export to bib file | =f= | Filter entries | | =t= | Tag entry | =m= | Move entry (refile) | | =?= | Mark entry unread | =!= | Mark entry read | | =M-&#xA;  &lt;down&gt;&#xA;   = | Move entry down | =M-&#xA;   &lt;up&gt;&#xA;    = | Move entry up | | =&#xA;    &lt;tab&gt;&#xA;     = | Toggle current section | =S-&#xA;     &lt;tab&gt;&#xA;      = | Toggle all sections | | =S-&#xA;      &lt;left&gt;&#xA;       = | Next page (PDF view) | =S-&#xA;       &lt;right&gt;&#xA;        = | Prev page (PDF view) |&#xA;       &lt;/right&gt;&#xA;      &lt;/left&gt;&#xA;     &lt;/tab&gt;&#xA;    &lt;/tab&gt;&#xA;   &lt;/up&gt;&#xA;  &lt;/down&gt;&#xA; &lt;/return&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Adding an entry&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The simplest way to add a new entry is to drag and drop a PDF file onto the org buffer. The PDF will be parsed to try to identify a DOI and the corresponding bibtex item will be collected from the crossref.org server. The new entry will then be created below the &lt;em&gt;Unsorted&lt;/em&gt; header (whose name is configurable) and the file will be renamed and copied to the library folder.&lt;/p&gt; &#xA;&lt;p&gt;If this procedure fails for some reason, you can also enter a new entry manually or using the [[help:org-bib-new-from-pdf][org-bib-from-pdf, ]][[help:org-bib-new-from-doi][org-bib-from-doi]] or [[help:org-bib-new-from-bibtex][org-bib-from-bibtex]] helper functions. In the latter case, no file will be automatically associated but you can later add a file into the library folder and rename it to &#34;year - title.pdf&#34; (replacing year and title with the actual year and title from the entry).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit an entry&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An entry is made of a properties block with two sub headlines (Abstract and Notes). You can edit any properties and add or remove them. But be careful to not remove bibliographic properties or else, the conversion to bibtex may fail because of some missing fields that are required.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Export the bibliography&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To export the library to a bib file, you can use the [[help:org-bib-export][org-bib-export]] command (that is bound to the =e= key on the sidebar). The export filename will be deduced from the org filename unless a =#+LIBRARY-FILE:= is defined at the top of the org file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filter view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can filter the sidebar view (=f=) usin any kind of filtes. Here are some example searches (note the absence of spaces):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Articles published in 1984: YEAR=1984&lt;/li&gt; &#xA; &lt;li&gt;Articles published between 2000 &amp;amp; 2010: YEAR&amp;gt;1999+YEAR&amp;lt;2011&lt;/li&gt; &#xA; &lt;li&gt;Journal articles: TYPE={article}&lt;/li&gt; &#xA; &lt;li&gt;Papers by Knuth: AUTHOR={Knuth}&lt;/li&gt; &#xA; &lt;li&gt;Article published in a journal: JOURNAL={The Computer Journal}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also [[https://orgmode.org/worg/org-tutorials/advanced-searching.html][Advanced searching]] from the org [[https://orgmode.org/][website]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fxxkscript/emacs.d</title>
    <updated>2022-08-26T01:35:38Z</updated>
    <id>tag:github.com,2022-08-26:/fxxkscript/emacs.d</id>
    <link href="https://github.com/fxxkscript/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;emacs config&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>