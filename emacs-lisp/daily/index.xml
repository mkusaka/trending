<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-16T01:31:13Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lorniu/ox-spectacle</title>
    <updated>2022-12-16T01:31:13Z</updated>
    <id>tag:github.com,2022-12-16:/lorniu/ox-spectacle</id>
    <link href="https://github.com/lorniu/ox-spectacle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spectacle.js backend for Org Export Engine.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/GPL-3.0&#34;&gt;&lt;img src=&#34;http://img.shields.io/:license-gpl3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL-3.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/ox-spectacle&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/ox-spectacle-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lorniu/ox-spectacle/master/README-zh.md&#34;&gt;ðŸ¤Ÿ &lt;strong&gt;ç‚¹å‡»æŸ¥çœ‹ã€Šä¸­æ–‡ç‰ˆæ–‡æ¡£ã€‹&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been looking for solutions to create slideshows other than &lt;code&gt;PowerPoint&lt;/code&gt; or &lt;code&gt;Keynote&lt;/code&gt;. I tried &lt;code&gt;reveal.js&lt;/code&gt;, &lt;code&gt;impress.js&lt;/code&gt;, &lt;code&gt;beamer&lt;/code&gt;, &lt;code&gt;org-present&lt;/code&gt; and others, but but none of them satisfies me.&lt;/p&gt; &#xA;&lt;p&gt;Then I found &lt;a href=&#34;https://formidable.com/open-source/spectacle/&#34;&gt;Spectacle.js&lt;/a&gt;, a library creating slideshows based on &lt;code&gt;React.js&lt;/code&gt;. Create a slideshow using React.js? It&#39;s hard to Imagine, but it does work perfect.&lt;/p&gt; &#xA;&lt;p&gt;However, since it is based on React, it is a bit hard to get started. Even for those who are skilled in React, writing a lot of React code for the slides can be a torturous task.&lt;/p&gt; &#xA;&lt;p&gt;Then I create this &lt;code&gt;ox-spectacle.el&lt;/code&gt;, a spectacle.js backend for org export engine. With this, maybe you&#39;ll own the &lt;strong&gt;Easiest way to create the Most Beautiful and Most Powerful Slides&lt;/strong&gt;. At least, it&#39;s another solution for you to create slideshows :)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;Spectacle.js&lt;/code&gt; is the best tool to create slides with html5, and this &lt;code&gt;ox-spectacle.el&lt;/code&gt; is the best way to create slides with Spectacle.js.&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;Org Mode&lt;/code&gt; + &lt;code&gt;Spectacle.js&lt;/code&gt; = The final Solution&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;First, install this package with Melpa or other way.&lt;/p&gt; &#xA;&lt;p&gt;Then, load &lt;code&gt;ox-spectacle&lt;/code&gt; when necessary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;  (require &#39;ox-spectacle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create an org file and put your ideas there. For example, a presentation with two slides:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+TITLE: Demo Slides&#xA;&#xA;* The First Slide&#xA;&#xA;   This is the first slide.&#xA;&#xA;   #+ATTR_HTML: :width 200 :style {{ margin: &#34;2em&#34; }}&#xA;   [[https://formidable.com/open-source/spectacle/svg/formidable-logo-white.svg]]&#xA;&#xA;   #+ATTR_HTML: :margin {2} :width {900} :showLineNumbers {true}&#xA;   #+begin_src html&#xA;     &amp;lt;Slide&amp;gt;&#xA;       &amp;lt;Text&amp;gt;This is the first slide.&amp;lt;/Text&amp;gt;&#xA;       &amp;lt;Image width=&#34;200&#34;&#xA;              style={{ margin: &#34;2em&#34; }}&#xA;              src=&#34;https://.../formidable-logo-white.svg&#34; /&amp;gt;&#xA;     &amp;lt;/Slide&amp;gt;&#xA;   #+end_src&#xA;&#xA;* The Second Slide&#xA;&#xA;   #+ATTR_HTML: :type Heading :fontFamily serif&#xA;   List And Appear&#xA;&#xA;   - Once, there was a river&#xA;   - Full of water&#xA;     1. &amp;lt;A&amp;gt; I Lost my shoes there&#xA;     2. &amp;lt;A&amp;gt; &amp;lt;span style={{color: &#34;red&#34;}}&amp;gt;But I washed my hair&amp;lt;/span&amp;gt;&#xA;        + &amp;lt;A&amp;gt; and feet ..&#xA;   - This is the story&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export and open it with &lt;code&gt;C-c C-e s o&lt;/code&gt;, and the &lt;strong&gt;amazing&lt;/strong&gt; presentation is in front of you. Enjoy it.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;You can find the files under &lt;code&gt;examples&lt;/code&gt; fold.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Org File&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Click to View&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Slides in &#39;Get Started&#39; section&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lorniu/ox-spectacle/master/examples/first_en.org&#34;&gt;first_en.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://lorniu.github.io/spectacle/first_en.html&#34;&gt;first_en.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Slides in &lt;a href=&#34;https://github.com/FormidableLabs/spectacle/tree/main/examples/js&#34;&gt;Spectacle Official Example&lt;/a&gt;, rewritten with Org/Ox-Spectacle&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lorniu/ox-spectacle/master/examples/official.org&#34;&gt;official.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://lorniu.github.io/spectacle/official.html&#34;&gt;official.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A continually updated slideshow (&lt;strong&gt;recommanded&lt;/strong&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lorniu/ox-spectacle/master/examples/scratch.org&#34;&gt;scratch.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://lorniu.github.io/spectacle/scratch.html&#34;&gt;scratch.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Prep Knowledge&lt;/h2&gt; &#xA;&lt;p&gt;You should learn a bit html, &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; and &lt;a href=&#34;https://formidable.com/open-source/spectacle/docs/&#34;&gt;Spectacle.js&lt;/a&gt; before &lt;code&gt;ox-spectacle&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A presentation written with &lt;code&gt;spectacle.js&lt;/code&gt; is like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Deck theme=.. template=.. backgroundImage=.. style=..&amp;gt;&#xA;  &amp;lt;Slide&amp;gt;&#xA;     &amp;lt;Box|FlexBox|Grid...&amp;gt;&#xA;        &amp;lt;Heading|Text|Image|Link...&amp;gt;props and content&amp;lt;/Heading|Text|Image|Link&amp;gt;&#xA;     &amp;lt;/Box|FlexBox|Grid...&amp;gt;&#xA;  &amp;lt;/Slide&amp;gt;&#xA;  &amp;lt;Slide&amp;gt;&amp;lt;/Slide&amp;gt;&#xA;  &amp;lt;Slide&amp;gt;&amp;lt;/Slide&amp;gt;&#xA;&amp;lt;/Deck&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Brief summary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The topmost node is &lt;code&gt;Deck&lt;/code&gt;, which represents the presentation. It contains a number of &lt;code&gt;Slide&lt;/code&gt; or &lt;code&gt;SlideLayout.Xxx&lt;/code&gt;, each representing a slide page&lt;/li&gt; &#xA; &lt;li&gt;Spectacle provides many components to build the slide page, like &lt;code&gt;Heading/Text/Link/Image/Table/CodePane/Appear&lt;/code&gt; for contents and &lt;code&gt;Box/FlexBox/Grid&lt;/code&gt; as containers&lt;/li&gt; &#xA; &lt;li&gt;Each component can be passed in a number of &lt;code&gt;props&lt;/code&gt;, which may be css styles or other properties customized by the component. The props must follow the &lt;code&gt;ReactJS&lt;/code&gt; syntax rules. It&#39;s written like &lt;code&gt;backgroundColor=&#34;red&#34;&lt;/code&gt; or &lt;code&gt;fontSize={22}&lt;/code&gt; or &lt;code&gt;style={{ color: &#34;red&#34;, fontSize: 22 }}&lt;/code&gt;. &lt;code&gt;{}&lt;/code&gt; encloses a valid JavaScript code or data&lt;/li&gt; &#xA; &lt;li&gt;For example, you can pass props &lt;code&gt;theme/template/transition/backgroundImage&lt;/code&gt; to &lt;code&gt;Deck&lt;/code&gt; to set slideshow theme color and so on. Passing props to &lt;code&gt;Slide&lt;/code&gt; or other components will only affect that component&lt;/li&gt; &#xA; &lt;li&gt;Everything behind is &lt;code&gt;html/css/js&lt;/code&gt;, so you can create and use your own components as you wish&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Syntax Rules of ox-spectacle&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Now is a brief overview of the syntax rules of ox-spectacle. For more details, please view the example files or read the source code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Basic Rules&lt;/h3&gt; &#xA;&lt;p&gt;The top-level headline is rendered by default as &lt;code&gt;&amp;lt;Slide&amp;gt;&lt;/code&gt;, it can be set using &lt;code&gt;PROPERTY DRAWER&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;:layout&lt;/code&gt; to replace the rendered component with &lt;code&gt;&amp;lt;SlideLayout&amp;gt;&lt;/code&gt;. For example &lt;code&gt;:layout: Center&lt;/code&gt; will render the current headline as &lt;code&gt;&amp;lt;SlideLayout.Center&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;:layout: top&lt;/code&gt; is setted on a headline, then its children will be rendered as &lt;code&gt;Slide&lt;/code&gt; instead!&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;:props:&lt;/code&gt; to pass in props to the component. For example &lt;code&gt;:props: backgroundImage=&#34;url(...)&#34; backgroundOpacity={0.5}&lt;/code&gt; will set a translucent background for the current slide&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other headlines is rendered by default as &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt;, it can be set using &lt;code&gt;PROPERTY DRAWER&lt;/code&gt; too:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;:type:&lt;/code&gt; to replace the rendered component. For example &lt;code&gt;:type: FlexBox&lt;/code&gt; will render the contents as &lt;code&gt;&amp;lt;FlexBox&amp;gt;contents&amp;lt;/FlexBox&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;:props:&lt;/code&gt; to pass in props to the component as well&lt;/li&gt; &#xA; &lt;li&gt;If the title of the headline is a component declaration like &lt;code&gt;&amp;lt;Grid props...&amp;gt;&lt;/code&gt;, the declarated component will be the rendered component instead&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The plain paragraph of text is rendered as &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It can be set with &lt;code&gt;#+ATTR_HTML:&lt;/code&gt; above. For example &lt;code&gt;#+ATTR_HTML: :color &#34;red&#34; :margin {5}&lt;/code&gt;. The value should follow the &lt;code&gt;ReactJS&lt;/code&gt; syntax rules too. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;:type:&lt;/code&gt; to change the target component. For example, &lt;code&gt;:type Heading&lt;/code&gt; will render the paragraph to &lt;code&gt;&amp;lt;Heading&amp;gt;text&amp;lt;/Heading&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Pass in props to the component the same way. For example, &lt;code&gt;#+ATTR_HTML: :type p :class &#34;abc&#34; :style {{ marginTop: 2 }}&lt;/code&gt; will render text to &lt;code&gt;&amp;lt;p class=&#34;abc&#34; style=...&amp;gt;text&amp;lt;/p&amp;gt;&lt;/code&gt; style&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the paragraph is component notation like &lt;code&gt;&amp;lt;Component props...&amp;gt;&lt;/code&gt;, then will be no any conversion. Therefore, native Spectacle code can be freely written&lt;/li&gt; &#xA; &lt;li&gt;You can activate some extra code highlighting and completion (&lt;code&gt;capf&lt;/code&gt;) by &lt;code&gt;M-x ox-spectacle-minor-mode&lt;/code&gt; to get a better code experience in writting native Spectacle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All in all, for the same slide, there are many ways of writing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;* Slide1, Spectacle Syntax&#xA;&#xA;  &amp;lt;FlexBox margin={2}&amp;gt;&#xA;    &amp;lt;Heading color=&#34;blue&#34;&amp;gt;Hello&amp;lt;/Heading&amp;gt;&#xA;    &amp;lt;Appear&amp;gt;&#xA;      &amp;lt;Text color=&#34;yellow&#34;&amp;gt;World&amp;lt;/Text&amp;gt;&#xA;    &amp;lt;/Appear&amp;gt;&#xA;  &amp;lt;/FlexBox&amp;gt;&#xA;&#xA;--------------------------------&#xA;* Slide2, Normal Org Syntax&#xA;** This is a flexbox&#xA;  :PROPERTIES:&#xA;  :type: FlexBox&#xA;  :props: margin={2}&#xA;  :END:&#xA;&#xA;  #+ATTR_HTML: :type Heading :color blue&#xA;  Hello&#xA;&#xA;*** This is a stepper&#xA;   :PROPERTIES:&#xA;   :type: Appear&#xA;   :END:&#xA;&#xA;    #+ATTR_HTML: :color yellow&#xA;    World&#xA;&#xA;--------------------------------&#xA;* Slide3, Mix Both Styles&#xA;** &amp;lt;FlexBox margin={2}&amp;gt;&#xA;&#xA;   #+ATTR_HTML: :type Heading :color blue&#xA;   Hello&#xA;&#xA;*** &amp;lt;Appear&amp;gt;&#xA;&#xA;    #+ATTR_HTML: :color yellow&#xA;    World&#xA;&#xA;--------------------------------&#xA;* Slide4ï¼ŒCenter with SlideLayout and set background&#xA;  :PROPERTIES:&#xA;  :layout: Center&#xA;  :props: backgroundImage=&#34;url(xxx.png)&#34; backgroundOpacity={0.5}&#xA;  :END:&#xA;&#xA;** &amp;lt;FlexBox margin={2}&amp;gt;&#xA;&#xA;   #+ATTR_HTML: :type Heading :color blue&#xA;   Hello&#xA;&#xA;*** &amp;lt;Appear&amp;gt;&#xA;&#xA;    #+ATTR_HTML: :color yellow&#xA;    World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are pros and cons to different writing styles for different scenes. Write whatever you want for free. Just understand the rules and use them wisely.&lt;/p&gt; &#xA;&lt;p&gt;You can use the native Spectacle style to add images/tables/lists/code/etc, but recommended to use the Org syntax, which can greatly improve the simplicity of the code. Pass props to the component behind with &lt;code&gt;#+ATTR_HTML:&lt;/code&gt; as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;image (&amp;lt;Image&amp;gt;):&#xA;&#xA;  [[file:xxx.png]]&#xA;&#xA;  #+ATTR_HTML: :width 200px&#xA;  [[file:xxx.png]]&#xA;&#xA;table (&amp;lt;Table&amp;gt;):&#xA;&#xA;  | name | price |&#xA;  |------+-------|&#xA;  | aaa  |   222 |&#xA;  | bbb  |   333 |&#xA;&#xA;list (&amp;lt;OrderedList/UnorderedList&amp;gt;):&#xA;&#xA;  - aaa&#xA;    1. 111&#xA;    2. 222&#xA;  - bbb&#xA;  - ccc&#xA;&#xA;code (&amp;lt;CodePane&amp;gt;):&#xA;&#xA;  #+ATTR_HTML: :marginBottom {2}&#xA;  #+begin_src js&#xA;    const aaa = (e) =&amp;gt; {&#xA;        console.log(e);&#xA;    }&#xA;  #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Container Components&lt;/h3&gt; &#xA;&lt;p&gt;The main container components are &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;FlexBox&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Grid&amp;gt;&lt;/code&gt;. They correspond to &lt;code&gt;display=block/flex/grid&lt;/code&gt; in html. Especially flexbox and grid are newer in html standard, they are very flexible and powerful, and can help you layout pages easily.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The props of these components are basically the same as the corresponding css properties. You&#39;d better learn them by yourself.&lt;/p&gt; &#xA;&lt;h3&gt;Stepper on list/image/code/table&lt;/h3&gt; &#xA;&lt;p&gt;Spectacle makes the step-by-step display with component &lt;code&gt;&amp;lt;Appear&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Stepper&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;Appear priority={1}&amp;gt; First Appear &amp;lt;/Appear&amp;gt;&#xA;&#xA;  &amp;lt;Appear priority={2}&amp;gt; Second Appear &amp;lt;/Appear&amp;gt;&#xA;&#xA;  &amp;lt;!-- Stepper is for more complex control --&amp;gt;&#xA;  &amp;lt;Stepper tagName=&#34;p&#34; values={[&#39;foo&#39;, &#39;bar&#39;]}&amp;gt;&#xA;    {(value, step, isActive) =&amp;gt;&#xA;      isActive&#xA;        ? &#39;The first stepper is not active. Step:&#39; + step + &#39; Value:&#39; + value :&#xA;        &#39;The first stepper is active. Step:&#39; + step + &#39; Value:&#39; + value&#xA;    }&#xA;  &amp;lt;/Stepper&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Appear is used relatively frequently, so some simplified syntax is provided.&lt;/p&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;:type A/NUM&lt;/code&gt; with &lt;code&gt;#+ATTR_HTML:&lt;/code&gt; to image/code/table to make it Appear by step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;  Use `:type A` to make sure the Image is around with Appear:&#xA;&#xA;    #+ATTR_HTML: :type A&#xA;    [[file:ssss.png]]&#xA;&#xA;  That is:&#xA;&#xA;    &amp;lt;Appear&amp;gt;[[file:ssss.png]]&amp;lt;/Appear&amp;gt;&#xA;&#xA;  Can pass props to Appear, for example, pass `priority={3}` to Appear:&#xA;&#xA;    #+ATTR_HTML: :type A priority={3} :margin {2} :border &#34;1px solid red&#34;&#xA;    [[file:ssss.png]]&#xA;&#xA;  Use `:type NUM` to make a Appear with priority as NUM:&#xA;&#xA;    #+ATTR_HTML: :type 2 activeStyle={color: &#34;red&#34;}&#xA;    [[file:ssss.png]]&#xA;&#xA;  The same `:type` syntax can also be used on code block and table:&#xA;&#xA;    #+ATTR_HTML: :type A&#xA;    #+begin_src js&#xA;      const aaa = 3&#xA;    #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The step-by-step display of list item use the same syntax. You can pass the Appear props use &lt;code&gt;&amp;lt;A props&amp;gt;&lt;/code&gt; format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;- item that normal display&#xA;- &amp;lt;A&amp;gt; if &amp;lt;A&amp;gt; ahead the item, then display this by step&#xA;- &amp;lt;2&amp;gt; if &amp;lt;NUM&amp;gt; ahead the item, display by step with priority of NUM&#xA;- &amp;lt;1&amp;gt; this has a higher priority than the item above&#xA;- &amp;lt;A activeStyle={{ color: &#34;red&#34; }}&amp;gt; pass in props to Appear this way&#xA;- &amp;lt;color=&#34;red&#34; fontSize=&#34;1px&#34;&amp;gt; without the prefix A or NUM, the props will pass to ListItem&#xA;- &amp;lt;A color=&#34;red&#34; inactiveStyle={{color: &#34;red&#34;}}&amp;gt; priority/activeStyle/alwaysVisible.. will pass to Appear, and others to ListItem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Proper use of these syntaxes can greatly simplify the code.&lt;/p&gt; &#xA;&lt;h3&gt;Special &lt;code&gt;&amp;lt;config&amp;gt;&lt;/code&gt; headline&lt;/h3&gt; &#xA;&lt;p&gt;The top-most headline titled with &lt;code&gt;* &amp;lt;config&amp;gt;&lt;/code&gt; is only used for configuration. It will not be exported.&lt;/p&gt; &#xA;&lt;p&gt;The rules are simple. Under the &lt;code&gt;* &amp;lt;config&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Headline titled as &lt;code&gt;** &amp;lt;template&amp;gt; xxx&lt;/code&gt; will generate and assign to &lt;code&gt;xxx&lt;/code&gt; as a template&lt;/li&gt; &#xA; &lt;li&gt;Contents in all &lt;code&gt;js/javascript&lt;/code&gt; code blocks will be inserted into &lt;strong&gt;script&lt;/strong&gt; section of the final html&lt;/li&gt; &#xA; &lt;li&gt;Contents in all &lt;code&gt;css&lt;/code&gt; code blocks will be inserted into &lt;strong&gt;style&lt;/strong&gt; section of the final html&lt;/li&gt; &#xA; &lt;li&gt;Contents in all &lt;code&gt;html&lt;/code&gt; code blocks will be inserted into &lt;strong&gt;head&lt;/strong&gt; section of the final html&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In addition, any code block out of &lt;code&gt;&amp;lt;config&amp;gt;&lt;/code&gt; marked with &lt;code&gt;#+ATTR_HTML: :type config&lt;/code&gt; will not be exported and follow the last 3 rules above too.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Demo 1: define templates &lt;code&gt;tp1&lt;/code&gt; and &lt;code&gt;tp2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;&#xA;* &amp;lt;config&amp;gt;&#xA;** &amp;lt;template&amp;gt; tp1&#xA;&#xA;  &amp;lt;Text position=&#34;absolute&#34; top={0} right={0}&amp;gt;Spectacle&amp;lt;/Text&amp;gt;&#xA;&#xA;** &amp;lt;template&amp;gt; tp2&#xA;&#xA;  &amp;lt;Box margin=&#34;-15px&#34; backgroundOpacity={0.5} &amp;gt;&#xA;    &amp;lt;Text color=&#34;white&#34; fontSize={10}&amp;gt;WELCOME&amp;lt;/Text&amp;gt;&#xA;  &amp;lt;/Box&amp;gt;&#xA;&#xA;  &amp;lt;FlexBox justifyContent=&#39;space-between&#39; position=&#39;absolute&#39; bottom={0} width={1}&amp;gt;&#xA;    &amp;lt;Box padding=&#39;0 1em&#39;&amp;gt;&#xA;    &amp;lt;/Box&amp;gt;&#xA;    &amp;lt;FlexBox padding=&#39;0.5em&#39; backgroundColor=&#39;red&#39;&amp;gt;&#xA;      &amp;lt;Progress size={5} /&amp;gt;&#xA;      &amp;lt;Text fontSize={6}&amp;gt;${slideNumber + &#39;/&#39; + numberOfSlides}&amp;lt;/{Text&amp;gt;&#xA;    &amp;lt;/FlexBox&amp;gt;&#xA;  &amp;lt;/FlexBox&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Demo 2: define themes &lt;code&gt;theme1&lt;/code&gt;, &lt;code&gt;theme2&lt;/code&gt; and &lt;code&gt;theme3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;* &amp;lt;config&amp;gt;&#xA;** code blocks can be anywhere other than under &amp;lt;template&amp;gt;&#xA;&#xA;  #+begin_src js&#xA;    const theme1 = {&#xA;        fonts: {&#xA;            header: &#39;&#34;Open Sans Condensed&#34;, Helvetica, Arial, sans-serif&#39;,&#xA;            text: &#39;&#34;Open Sans Condensed&#34;, Helvetica, Arial, sans-serif&#39;&#xA;        }&#xA;    };&#xA;&#xA;    const theme2 = defaultTheme;&#xA;  #+end_src&#xA;&#xA;** as many as you wish&#xA;&#xA;  #+begin_src js&#xA;    const theme3 = { ...defaultTheme, ... }&#xA;  #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Demo 3: define transitions &lt;code&gt;ts1&lt;/code&gt; and &lt;code&gt;ts2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;* &amp;lt;config&amp;gt;&#xA;&#xA;  #+begin_src js&#xA;    const ts1 = fadeTransition; // slideTransition, defaultTransition&#xA;    const ts2 = {&#xA;        from: {&#xA;            transform: &#39;scale(0.5) rotate(45deg)&#39;,&#xA;            opacity: 0&#xA;        },&#xA;        enter: {&#xA;            transform: &#39;scale(1) rotate(0)&#39;,&#xA;            opacity: 1&#xA;        },&#xA;        leave: {&#xA;            transform: &#39;scale(0.2) rotate(315deg)&#39;,&#xA;            opacity: 0&#xA;        }&#xA;    };&#xA;  #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Demo 4: import external scripts or styles?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;* &amp;lt;config&amp;gt;&#xA;&#xA;  #+begin_src html&#xA;    &amp;lt;script src=&#34;jquery.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;    &amp;lt;style rel=&#34;stylesheet&#34; href=&#34;bootstrap.css&#34;&amp;gt;&#xA;  #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Demo 5: define your own component&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;* &amp;lt;config&amp;gt;&#xA;&#xA;  Notice, here you should follow the syntax of react-htm:&#xA;&#xA;      https://github.com/developit/htm&#xA;&#xA;  The components you create or import should be regist before use:&#xA;&#xA;      #+EXTERN_COMPONENTS: MyDeck&#xA;&#xA;  Component definition:&#xA;&#xA;  #+begin_src js&#xA;    const MyDeck = (props) =&amp;gt; {&#xA;        html`&amp;lt;div class=&#34;my-deck-wrapper&#34;&amp;gt;$&amp;lt;{Deck} ...${props}&amp;gt;&amp;lt;/${Deck}&amp;gt;&amp;lt;/div&amp;gt;`;&#xA;    }&#xA;  #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Demo 6: add some global styles&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;* &amp;lt;config&amp;gt;&#xA;&#xA;  #+begin_src css&#xA;    .my-deck-wrapper { zoom: 0.7 }&#xA;    image:hover { opacity: 0.6 }&#xA;    @keyframes bigger { from { width: 100px } to { width: 150px }}&#xA;  #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration Options&lt;/h2&gt; &#xA;&lt;p&gt;All global configuration options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;#+THEME/TEMPLATE/TRANSITION&lt;/code&gt; options passed to Deck node to set global theme and so on&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#+DECK_OPTS&lt;/code&gt; options passed to Deck node as extra props&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#+SLIDE_OPTS&lt;/code&gt; change the default &lt;code&gt;&amp;lt;Slide&amp;gt;&lt;/code&gt; used for headline render&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#+TEXT_OPTS&lt;/code&gt; change the default &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; used for plain text paragraph render&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#+EXTRA_SCRIPTS&lt;/code&gt; the other script refs used by the slides&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#+EXTERN_COMPONENTS&lt;/code&gt; declare user/third-party components before use them&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#+EXPORT_LEVEL&lt;/code&gt; Set export policy. Defaults 0 for normal export. If 1 then embed all scripts into the exported html. If 2 embed all images into the exported html. If &amp;gt;=3 embedded all scripts and images into the exported html, that is, all-in-one/self-contained.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;#+TITLE: DEMO&#xA;&#xA;#+THEME: theme1&#xA;#+TEMPLATE: tp1&#xA;#+TRANSITION: ts1&#xA;&#xA;#+DECK_OPTS: MyDeck expertMode={true} overviewMode={false}&#xA;#+DECK_OPTS: useAnimations={true} autoPlay={false} autoPlayInterval={2000}&#xA;#+DECK_OPTS: onSlideClick={(e,s) =&amp;gt; console.log(&#39;current slide: &#39; + s)}&#xA;#+DECK_OPTS: backdropStyle={{border: &#34;0px solid skyblue&#34;}}&#xA;&#xA;#+SLIDE_OPTS: backgroundColor=&#34;white&#34;&#xA;#+TEXT_OPTS: Text color=&#34;grey&#34; fontSize={30}&#xA;# #+TEXT_OPTS: p&#xA;&#xA;#+EXTRA_SCRIPTS: https://unpkg.com/recharts/umd/Recharts.js&#xA;#+EXTERN_COMPONENTS: MyDeck MyLink Recharts&#xA;&#xA;#+EXPORT_LEVEL: 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set separate config &lt;code&gt;theme/template/transition&lt;/code&gt; for some slides or components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;* Slide with their own theme/template/transition&#xA; :PROPERTIES:&#xA; :props: theme={theme2} template={tp2} transition={ts2}&#xA; :END:&#xA;&#xA;  #+ATTR_HTML: :theme={theme3}&#xA;  #+begin_src sh&#xA;    ls&#xA;  #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://formidable.com/open-source/spectacle/&#34;&gt;formidable&lt;/a&gt; for the excellent work, spectacle.js is great. Thanks emacs and org-mode. Thanks you all.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-eask/cli</title>
    <updated>2022-12-16T01:31:13Z</updated>
    <id>tag:github.com,2022-12-16:/emacs-eask/cli</id>
    <link href="https://github.com/emacs-eask/cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line tool for building and testing Emacs Lisp packages&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-eask/cli/master/#&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/emacs-eask/cli/master/docs/static/logo.png&#34; width=&#34;20%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Eask&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Command-line tool for building and testing Emacs Lisp packages&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-green.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/software/emacs/download.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Emacs-26.1+-7F5AB6.svg?logo=gnu%20emacs&amp;amp;logoColor=white&#34; alt=&#34;Emacs Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-eask/cli/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/emacs-eask/cli.svg?logo=github&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eask is a command-line tool that helps you build, lint, and test Emacs Lisp packages. It creates a clean environment to sandbox your elisp code without influencing your personal configuration. Eask aims to be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consistent&lt;/strong&gt; enough to sandbox across all systems&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;General&lt;/strong&gt; enough to have Emacsers often used commands (byte-compile, checkdoc, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robust&lt;/strong&gt; enough to provide useful results even in the presence of user errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency-free&lt;/strong&gt; so that the tool can be run on any platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ðŸ”— Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-eask.github.io/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-eask.github.io/Getting-Started/Install-Eask/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-eask.github.io/Getting-Started/Commands-and-options/&#34;&gt;Command-line interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-eask.github.io/Examples/Real-project-examples/&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ðŸ§ª Testing&lt;/h2&gt; &#xA;&lt;h6&gt;Documentation&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Keep the documentation page up to date&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/docs.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/docs.yml/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Development&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compile source and check redefined&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/compile.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/compile.yml/badge.svg?sanitize=true&#34; alt=&#34;Compile&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compatibility check for each Emacs version&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/compat.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/compat.yml/badge.svg?sanitize=true&#34; alt=&#34;Compat&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Build executables&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Commands&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test commands in global (config) mode&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/global.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/global.yml/badge.svg?sanitize=true&#34; alt=&#34;Global&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test commands in development (package) mode&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/local.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/local.yml/badge.svg?sanitize=true&#34; alt=&#34;Local&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test to install packages&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/install.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/install.yml/badge.svg?sanitize=true&#34; alt=&#34;Install&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test execute commands&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/exec.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/exec.yml/badge.svg?sanitize=true&#34; alt=&#34;Exec&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test emacs commands&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/emacs.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/emacs.yml/badge.svg?sanitize=true&#34; alt=&#34;Emacs&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test to search packages&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/search.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/search.yml/badge.svg?sanitize=true&#34; alt=&#34;Search&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test to upgrade and check outdated packages&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/outdated_upgrade.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/outdated_upgrade.yml/badge.svg?sanitize=true&#34; alt=&#34;Outdated_Upgrade&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Eask&lt;/code&gt;-file checker&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/checker.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/checker.yml/badge.svg?sanitize=true&#34; alt=&#34;Checker&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Options&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test option switches&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/options.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/options.yml/badge.svg?sanitize=true&#34; alt=&#34;Options&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Test&lt;/h6&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test &lt;code&gt;ert&lt;/code&gt; command&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/test_ert.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/test_ert.yml/badge.svg?sanitize=true&#34; alt=&#34;Test ert&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test &lt;code&gt;ert-runner&lt;/code&gt; command&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/test_ert-runner.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/test_ert-runner.yml/badge.svg?sanitize=true&#34; alt=&#34;Test ert-runner&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test &lt;code&gt;buttercup&lt;/code&gt; command&lt;/td&gt; &#xA;   &lt;td&gt;âœ”&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/emacs-eask/cli/actions/workflows/test_buttercup.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-eask/cli/actions/workflows/test_buttercup.yml/badge.svg?sanitize=true&#34; alt=&#34;Test buttercup&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>emacsattic/nose</title>
    <updated>2022-12-16T01:31:13Z</updated>
    <id>tag:github.com,2022-12-16:/emacsattic/nose</id>
    <link href="https://github.com/emacsattic/nose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>