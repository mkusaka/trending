<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T01:40:40Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacscollective/borg</title>
    <updated>2022-06-26T01:40:40Z</updated>
    <id>tag:github.com,2022-06-26:/emacscollective/borg</id>
    <link href="https://github.com/emacscollective/borg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Assimilate Emacs packages as Git submodules&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Assimilate Emacs packages as Git submodules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Borg is a bare-bones package manager for Emacs packages. It provides only a few essential features and should be combined with other tools such as [[https://github.com/magit/magit][Magit]], [[https://github.com/emacscollective/epkg][epkg]], [[https://github.com/jwiegley/use-package][use-package]], and [[https://github.com/tarsius/auto-compile][auto-compile]].&lt;/p&gt; &#xA;&lt;p&gt;Borg assimilates packages into the =&lt;del&gt;/.emacs.d= repository as Git submodules. An assimilated package is called a drone and a borg-based =&lt;/del&gt;/.emacs.d= repository is called a collective.&lt;/p&gt; &#xA;&lt;p&gt;/For more information see the [[https://emacsair.me/2016/05/17/assimilate-emacs-packages-as-git-submodules][announcement]] and the [[https://emacsmirror.net/manual/borg][manual]]./&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elixir-editors/emacs-elixir</title>
    <updated>2022-06-26T01:40:40Z</updated>
    <id>tag:github.com,2022-06-26:/elixir-editors/emacs-elixir</id>
    <link href="https://github.com/elixir-editors/emacs-elixir" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs major mode for Elixir&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elixir-editors/emacs-elixir/actions&#34;&gt;&lt;img src=&#34;https://github.com/elixir-editors/emacs-elixir/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/elixir-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/elixir-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/elixir-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/elixir-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Elixir Mode&lt;/h1&gt; &#xA;&lt;p&gt;Provides font-locking, indentation and navigation support for the &lt;a href=&#34;http://elixir-lang.org/&#34;&gt;Elixir programming language.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#via-packageel&#34;&gt;Via package.el&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#via-el-get&#34;&gt;Via el-get&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#interactive-commands&#34;&gt;Interactive Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#keymapping&#34;&gt;Keymapping&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#elixir-tooling-integration&#34;&gt;Elixir Tooling Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#elixir-format&#34;&gt;Elixir Format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#history&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Via package.el&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;package.el&lt;/code&gt; is the built-in package manager in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;elixir-mode&lt;/code&gt; is available on the two major community maintained repositories - &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA STABLE&lt;/a&gt; and &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;elixir-mode&lt;/code&gt; with the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-install [RET] elixir-mode [RET]&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;or by adding this bit of Emacs Lisp code to your Emacs initialization file (&lt;code&gt;.emacs&lt;/code&gt; or &lt;code&gt;init.el&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(unless (package-installed-p &#39;elixir-mode)&#xA;  (package-install &#39;elixir-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the installation doesn&#39;t work try refreshing the package list:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-refresh-contents [RET]&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that MELPA packages are built automatically from the &lt;code&gt;master&lt;/code&gt; branch, meaning bugs might creep in there from time to time. Never-the-less, installing from MELPA is the recommended way of obtaining &lt;code&gt;Elixir-Mode&lt;/code&gt;, as the &lt;code&gt;master&lt;/code&gt; branch is normally quite stable and &#34;stable&#34; (tagged) builds are released somewhat infrequently.&lt;/p&gt; &#xA;&lt;p&gt;With the most recent builds of Emacs, you can pin &lt;code&gt;Elixir-Mode&lt;/code&gt; to always use MELPA Stable by adding this to your Emacs initialization:&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;Elixir-Mode&lt;/code&gt; manually by placing &lt;code&gt;Elixir-Mode&lt;/code&gt; on your &lt;code&gt;load-path&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; ing it. Many people favour the folder &lt;code&gt;~/.emacs.d/vendor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/vendor&#34;)&#xA;(require &#39;elixir-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Interactive Commands&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command (For the &lt;code&gt;M-x&lt;/code&gt; prompt.)&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixir-mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switches to elixir-mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixir-mode-open-github&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the GitHub page for Elixir.&lt;/td&gt; &#xA;  &lt;/tr&gt;  &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixir-mode-open-elixir-home&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go to Elixir README in the browser.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixir-mode-open-docs-master&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the Elixir documentation for the master.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixir-mode-open-docs-stable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the Elixir documentation for the latest stable release.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixir-mode-show-version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print version info for elixir-mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Any file that matches the glob &lt;code&gt;*.ex[s]&lt;/code&gt; or &lt;code&gt;*.elixir&lt;/code&gt; is automatically opened in elixir-mode, but you can change this functionality easily.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Highlights *.elixir2 as well&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.elixir2\\&#39;&#34; . elixir-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keymapping&lt;/h3&gt; &#xA;&lt;p&gt;Keymaps can be added to the &lt;code&gt;elixir-mode-map&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h3&gt;Pairing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Fuco1/smartparens&#34;&gt;Smartparens&lt;/a&gt; has direct support for Elixir.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you want to use &lt;code&gt;ruby-end-mode&lt;/code&gt;, you can add the following to your &lt;code&gt;elixir-mode-hook&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;elixir-mode-hook&#xA;             (defun auto-activate-ruby-end-mode-for-elixir-mode ()&#xA;               (set (make-variable-buffer-local &#39;ruby-end-expand-keywords-before-re)&#xA;                    &#34;\\(?:^\\|\\s-+\\)\\(?:do\\)&#34;)&#xA;               (set (make-variable-buffer-local &#39;ruby-end-check-statement-modifiers) nil)&#xA;               (ruby-end-mode +1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;This package is tested only with a single version of OTP and 3 versions of Elixir. Please, always report versions (Emacs, Elixir and Erlang/OTP) when raising issues.&lt;/p&gt; &#xA;&lt;h2&gt;Elixir Tooling Integration&lt;/h2&gt; &#xA;&lt;p&gt;If you looking for elixir tooling integration for Emacs, check: &lt;a href=&#34;https://github.com/tonini/alchemist.el&#34;&gt;alchemist.el&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;http://web-mode.org&#34;&gt;web-mode.el&lt;/a&gt; to edit elixir templates (eex files).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ayrat555/mix.el&#34;&gt;mix.el&lt;/a&gt; provides a minor mode for integration with Mix, a build tool that ships with Elixir.&lt;/p&gt; &#xA;&lt;h2&gt;Elixir Format&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;M-x elixir-format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add elixir-mode hook to run elixir format on file save&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Create a buffer-local hook to run elixir-format on save, only when we enable elixir-mode.&#xA;(add-hook &#39;elixir-mode-hook&#xA;          (lambda () (add-hook &#39;before-save-hook &#39;elixir-format nil t)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a &lt;code&gt;.formatter.exs&lt;/code&gt; you can either set &lt;code&gt;elixir-format-arguments&lt;/code&gt; globally to a path like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq elixir-format-arguments (list &#34;--dot-formatter&#34; &#34;/path/to/.formatter.exs&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you set &lt;code&gt;elixir-format-arguments&lt;/code&gt; in a hook like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;elixir-format-hook (lambda ()&#xA;                                 (if (projectile-project-p)&#xA;                                      (setq elixir-format-arguments&#xA;                                            (list &#34;--dot-formatter&#34;&#xA;                                                  (concat (locate-dominating-file buffer-file-name &#34;.formatter.exs&#34;) &#34;.formatter.exs&#34;)))&#xA;                                   (setq elixir-format-arguments nil))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example we use &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt; to determine if we are in a project and then set &lt;code&gt;elixir-format-arguments&lt;/code&gt; accordingly. Please note that this code snippet may cause unhappiness if there is no &lt;code&gt;.formatter.exs&lt;/code&gt; file available.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This mode is based on the &lt;a href=&#34;https://github.com/secondplanet/elixir-mode&#34;&gt;Emacs mode by secondplanet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/elixir-editors/emacs-elixir/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for guidelines on how to contribute to this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2011-2017 Samuel Tonini, Matt DeBoard, Andreas Fuchs, secondplanet and &lt;a href=&#34;https://github.com/elixir-editors/emacs-elixir/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the GNU General Public License, version 3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dryman/toml-mode.el</title>
    <updated>2022-06-26T01:40:40Z</updated>
    <id>tag:github.com,2022-06-26:/dryman/toml-mode.el</id>
    <link href="https://github.com/dryman/toml-mode.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Mojor mode for editing TOML files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;toml-mode v0.1.3 (beta)&lt;/h1&gt; &#xA;&lt;p&gt;Emacs syntax hilighting for &lt;a href=&#34;https://github.com/mojombo/toml&#34;&gt;TOML&lt;/a&gt;. This is my first Emacs syntax hilighting plugin; as a result, it may be buggy.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALL&lt;/h2&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;http://marmalade-repo.org&#34;&gt;marmalade&lt;/a&gt; or &lt;a href=&#34;http://melpa.milkbox.net&#34;&gt;melpa&lt;/a&gt; and emacs24 installed, simply type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install toml-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your .emacs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;toml-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have marmalade installed, add these to your .emacs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#xA;    &#39;(&#34;marmalade&#34; . &#34;http://marmalade-repo.org/packages/&#34;))&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x eval-buffer&lt;/code&gt; to evaluate it, and then do &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; to load in the package listing.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2013 by Felix Chern&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the &lt;a href=&#34;http://www.gnu.org/licenses/gpl.html&#34;&gt;GNU General Public License&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs; see the file COPYING. If not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.&lt;/p&gt;</summary>
  </entry>
</feed>