<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-22T01:40:27Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nicwins/emacs</title>
    <updated>2022-07-22T01:40:27Z</updated>
    <id>tag:github.com,2022-07-22:/nicwins/emacs</id>
    <link href="https://github.com/nicwins/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My Emacs Settings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;My Emacs Configs&lt;/h1&gt; &#xA;&lt;p&gt;Emacs init, and some other dotfiles.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>arnested/php-extras</title>
    <updated>2022-07-22T01:40:27Z</updated>
    <id>tag:github.com,2022-07-22:/arnested/php-extras</id>
    <link href="https://github.com/arnested/php-extras" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extra features for Emacs `php-mode&#39;.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHP Extras&lt;/h1&gt; &#xA;&lt;p&gt;A small collection of extra features for Emacs &lt;code&gt;php-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;php-extras-insert-previous-variable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php-extras-eldoc-documentation-function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Auto complete source for PHP functions based on &lt;code&gt;php-extras-eldoc-documentation-function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Company completion back-end for PHP functions based on &lt;code&gt;php-extras-eldoc-documentation-function&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;php-extras-insert-previous-variable&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When variable names get too long or you have to juggle a lot of nested arrays it gets cumbersome to repeat the same variables over and over again while programming.&lt;/p&gt; &#xA;&lt;p&gt;In example you have the code below and want to debug what value you actually parsed to &lt;code&gt;some_function()&lt;/code&gt;. You have point at &lt;code&gt;^&lt;/code&gt; and now all you have to write is repeat the variable...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;some_function($my_array[&#39;some_level&#39;][0][&#39;another_level&#39;][7]);&#xA;print_r(^);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;php-extras&lt;/code&gt; and you just hit &lt;kbd&gt;C-c C-$&lt;/kbd&gt; and it will insert the previous variable (including array indexes).&lt;/p&gt; &#xA;&lt;p&gt;If you prefix the command (i.e. &lt;kbd&gt;C-u 3 C-c C-$&lt;/kbd&gt;) it will search back 3 variables and with negative prefix arguments it will search forward.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;php-extras-eldoc-documentation-function&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;eldoc-mode&lt;/code&gt; is a nice minor mode that ships with Emacs. It will display a function tip in the mini buffer showing the function and its arguments for the function at point. That is if you provide a function to look up the function definition.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;php-extras&lt;/code&gt; provides such a function for looking up all the core PHP functions.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;php-extras-generate-eldoc&lt;/code&gt; will download the &lt;a href=&#34;http://doc.php.net/downloads/json/php_manual_en.json&#34;&gt;PHP function list&lt;/a&gt; and extract the function definitions (slow) and store them in a hash table on disk for you.&lt;/p&gt; &#xA;&lt;p&gt;If you install &lt;code&gt;php-extras&lt;/code&gt; as an ELPA package from &lt;a href=&#34;http://marmalade-repo.org/packages/php-extras&#34;&gt;Marmalade&lt;/a&gt; the hash table is already generated for you.&lt;/p&gt; &#xA;&lt;h2&gt;Auto complete source for PHP functions based&lt;/h2&gt; &#xA;&lt;p&gt;The PHP functions extracted for &lt;code&gt;php-extras-eldoc-documentation-function&lt;/code&gt; is also setup as a source for &lt;a href=&#34;http://cx4a.org/software/auto-complete&#34;&gt;auto-complete&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cx4a.org/software/auto-complete&#34;&gt;auto-complete&lt;/a&gt; already comes with a dictionary of PHP functions and will auto complete on them using the &lt;code&gt;ac-source-dictionary&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The source we provide with &lt;code&gt;php-extras&lt;/code&gt; will hopefully be more up to date.&lt;/p&gt; &#xA;&lt;h2&gt;Company completion back-end for PHP functions based&lt;/h2&gt; &#xA;&lt;p&gt;Users of &lt;a href=&#34;http://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt; will also get in-buffer completion based on the extracted PHP functions.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install &lt;code&gt;php-extras&lt;/code&gt; is probably to install it via the ELPA archive at &lt;a href=&#34;http://marmalade-repo.org/packages/php-extras&#34;&gt;Marmalade&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ELPA (package.el) is part of Emacs 24. For Emacs 23 see &lt;a href=&#34;http://marmalade-repo.org&#34;&gt;Marmalade&lt;/a&gt; for installation instructions.&lt;/p&gt; &#xA;&lt;p&gt;The version number of the ELPA package will have the date appended when the package was build and hence the date the documentation got extracted from &lt;a href=&#34;http://php.net&#34;&gt;php.net&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;I really recommend that you install this package via ELPA as described above.&lt;/p&gt; &#xA;&lt;p&gt;If you insist on installing it manually try to follow this recipe:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Place the folder with the files somewhere on your disk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add this to your &lt;code&gt;.emacs&lt;/code&gt; / &lt;code&gt;.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;load-path &#34;/somewhere/on/your/disk/php-extras&#34;)&#xA;(eval-after-load &#39;php-mode&#xA;  (require &#39;php-extras))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Either restart your Emacs or evaluate the &lt;code&gt;add-to-list&lt;/code&gt; expression.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate the hash table containing the PHP functions:&lt;/p&gt; &lt;p&gt;&lt;kbd&gt;M-x load-library RET php-extras-gen-eldoc RET&lt;/kbd&gt;&lt;/p&gt; &lt;p&gt;&lt;kbd&gt;M-x php-extras-generate-eldoc RET&lt;/kbd&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development of PHP Extras&lt;/h2&gt; &#xA;&lt;p&gt;PHP Extras is developed at &lt;a href=&#34;https://github.com/arnested/php-extras&#34;&gt;GitHub&lt;/a&gt;. Feature requests, ideas, bug reports, and pull request are more than welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>syl20bnr/nose.el</title>
    <updated>2022-07-22T01:40:27Z</updated>
    <id>tag:github.com,2022-07-22:/syl20bnr/nose.el</id>
    <link href="https://github.com/syl20bnr/nose.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This gives a bunch of functions that handle running nosetests on a particular buffer or part of a buffer. Fork from https://bitbucket.org/durin42/nosemacs/overview&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nose.el&lt;/h1&gt; &#xA;&lt;p&gt;This gives a bunch of functions that handle running nosetests on a particular buffer or part of a buffer.&lt;/p&gt; &#xA;&lt;p&gt;This is a fork from the &lt;a href=&#34;https://bitbucket.org/durin42/nosemacs/overview&#34;&gt;bitbucket repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s different ?&lt;/h2&gt; &#xA;&lt;p&gt;This fork:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;brings Windows compatibility.&lt;/li&gt; &#xA; &lt;li&gt;calls python with an inline script to launch nose.&lt;/li&gt; &#xA; &lt;li&gt;can launch test suites (require to install the nose fixes via &lt;code&gt;easy_install nose-fixes&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;is compatible with virtualenv&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need to add the directory containing &lt;code&gt;nose.el&lt;/code&gt; to your &lt;code&gt;load-path&lt;/code&gt;, and then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;nose)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;By default, the root of a project is found by looking for any of the files &lt;code&gt;setup.cfg&lt;/code&gt;, &lt;code&gt;.hg&lt;/code&gt;, &lt;code&gt;.git&lt;/code&gt; and &lt;code&gt;.projectile&lt;/code&gt;. You can add files to check for to the file list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;nose-project-root-files &#34;something&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can change the project root test to detect in some other way whether a directory is the project root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq nose-project-root-test (lambda (dirname) (equal dirname &#34;foo&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want dots as output, rather than the verbose output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(defvar nose-use-verbose nil) ; default is t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Probably also want some key bindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;python-mode-hook&#xA;          (lambda ()&#xA;            (local-set-key &#34;\C-ca&#34; &#39;nosetests-all)&#xA;            (local-set-key &#34;\C-cm&#34; &#39;nosetests-module)&#xA;            (local-set-key &#34;\C-cs&#34; &#39;nosetests-suite)&#xA;            (local-set-key &#34;\C-c.&#34; &#39;nosetests-one)&#xA;            (local-set-key &#34;\C-cpa&#34; &#39;nosetests-pdb-all)&#xA;            (local-set-key &#34;\C-cpm&#34; &#39;nosetests-pdb-module)&#xA;            (local-set-key &#34;\C-cps&#34; &#39;nosetests-pdb-suite)&#xA;            (local-set-key &#34;\C-cp.&#34; &#39;nosetests-pdb-one)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;To be able to launch a test suite, your suite must define a function with the name &lt;code&gt;load_tests&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For instance (typical example to make &lt;code&gt;PyDev&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;nose.el&lt;/code&gt; happy):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import unittest&#xA;&#xA;ALL_TESTS = unittest.TestSuite([my_suites_go_here]) &#xA;&#xA;def load_tests(loader=None, tests=None, pattern=None):&#xA;    return ALL_TESTS&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    unittest.TextTestRunner(verbosity=2).run(ALL_TESTS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;To the original authors of nose.el: &lt;code&gt;Jason Pellerin&lt;/code&gt; and &lt;code&gt;Augie Fackler&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>