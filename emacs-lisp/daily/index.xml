<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-24T01:36:22Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mmontone/emacs-inspector</title>
    <updated>2022-08-24T01:36:22Z</updated>
    <id>tag:github.com,2022-08-24:/mmontone/emacs-inspector</id>
    <link href="https://github.com/mmontone/emacs-inspector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Inspection tool for Emacs Lisp objects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EMACS-INSPECTOR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/inspector.svg?sanitize=true&#34; alt=&#34;elpa-badge&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Inspector tool for Emacs Lisp objects.&lt;/p&gt; &#xA;&lt;p&gt;Similar to inspectors available for Smalltalk and Common Lisp, but for Emacs Lisp.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mmontone/emacs-inspector/master/emacs-inspector.png&#34; alt=&#34;emacs-inspector.png&#34; title=&#34;Emacs Inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This package is available from ELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install RET inspector RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Invocation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspect-expression&lt;/code&gt; to evaluate an elisp expression and inspect the result.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspect-last-sexp&lt;/code&gt; to evaluate last sexp in current buffer and inspect the result.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inside the inspector&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-pop&lt;/code&gt; bound to letter &lt;code&gt;l&lt;/code&gt;, to navigate to previous object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-quit&lt;/code&gt; bound to letter &lt;code&gt;q&lt;/code&gt;, to exit the inspector.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, &lt;code&gt;M-x forward-button&lt;/code&gt; and &lt;code&gt;M-x backward-button&lt;/code&gt; are conveniently bound to &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt;. They can be used for fast navigation across the buttons that the inspector displays.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can use &lt;code&gt;M-x eval-expression&lt;/code&gt; bound to letter &lt;code&gt;e&lt;/code&gt;, to evaluate an elisp expression using the object currently being inspected (it is bound to &lt;code&gt;*&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;From the Emacs debugger&lt;/h3&gt; &#xA;&lt;p&gt;When on an Emacs debugging backtrace, press letter &lt;code&gt;i&lt;/code&gt; to inspect the pointed frame and its local variables.&lt;/p&gt; &#xA;&lt;p&gt;When on edebug-mode, use &lt;code&gt;C-c C-i&lt;/code&gt; for inspecting expressions in the debugger.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-php/php-auto-yasnippets</title>
    <updated>2022-08-24T01:36:22Z</updated>
    <id>tag:github.com,2022-08-24:/emacs-php/php-auto-yasnippets</id>
    <link href="https://github.com/emacs-php/php-auto-yasnippets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dynamically Generated YASnippets for PHP Code in GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Automatic YASnippets for PHP in Emacs&lt;/h1&gt; &#xA;&lt;p&gt;The php-auto-yasnippets package for &lt;a href=&#34;http://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; will automatically create ‘snippets’ for &lt;a href=&#34;http://php.net/&#34;&gt;standard PHP functions&lt;/a&gt;. It defines these snippets using the &lt;a href=&#34;https://github.com/capitaomorte/yasnippet&#34;&gt;YASnippet package&lt;/a&gt;, with optional support for &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;auto-complete&lt;/a&gt;. For example, if you type the PHP function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;implode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and press &lt;code&gt;C-c C-y&lt;/code&gt; then php-auto-yasnippets will expand that into&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;implode($glue, $pieces)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with the cursor ready to overwrite &lt;code&gt;$glue&lt;/code&gt; with the string you want to use. Pressing Tab will skip over to &lt;code&gt;$pieces&lt;/code&gt; to do the same. This way you can be sure you not only have the correct number of arguments, but also that you have them in the correct order. PHP comes with a large standard library and functions that sound similar sometimes require arguments in contrasting orders. This package will help you avoid having to remember those corner cases.&lt;/p&gt; &#xA;&lt;p&gt;If a function has any optional parameters then php-auto-yasnippets will wrap them in square braces. This is the same convention the PHP manual uses to indicate optional parameters. For example, php-auto-yasnippets will expand &lt;code&gt;filter_input&lt;/code&gt; into this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;filter_input($type, $variable_name, [$filter], [$options])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not need the optional parameters you can delete them by pressing &lt;code&gt;C-d&lt;/code&gt; when you Tab over to them.&lt;/p&gt; &#xA;&lt;p&gt;You can use the prefix command to expand method names. When you use the prefix, u.g. &lt;code&gt;C-u C-c C-y&lt;/code&gt;, the package will ask you for the name of the class which implements that method. This information is necessary in order to generate the correct snippet.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 5.3 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/capitaomorte/yasnippet&#34;&gt;YASnippet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ejmr/php-mode&#34;&gt;php-mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use php-auto-yasnippets you need to do three things. First, place the package in your load-path (&lt;code&gt;C-h v load-path&lt;/code&gt; for help) and load it from your Emacs configuration file by adding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;php-auto-yasnippets)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Second, make sure the variable &lt;code&gt;php-auto-yasnippet-php-program&lt;/code&gt; points to the program &lt;code&gt;Create-PHP-YASnippet.php&lt;/code&gt;. That PHP program should have come with this package; if you do not have it then you can get it from the &lt;a href=&#34;https://github.com/ejmr/php-auto-yasnippets&#34;&gt;project website&lt;/a&gt;. By default php-auto-yasnippets will search for the PHP program in the same directory as the Elisp code, i.e. the &lt;code&gt;php-auto-yasnippets.el&lt;/code&gt;. If you want to put the PHP program in another place then use &lt;code&gt;setq&lt;/code&gt; in your configuration file to set the variable to the proper path, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;php-auto-yasnippets)&#xA;(setq php-auto-yasnippet-php-program &#34;~/path/to/Create-PHP-YASnippet.php&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, bind the function &lt;code&gt;yas/create-php-snippet&lt;/code&gt; to a key of your choice. You &lt;em&gt;must&lt;/em&gt; do this because php-auto-yasnippets defines no key-bindings. And since the package requires php-mode, and is most useful when writing PHP code, you may want to use a key-binding that only works when using php-mode. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-key php-mode-map (kbd &#34;C-c C-y&#34;) &#39;yas/create-php-snippet)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now if you type the name of a PHP function and press &lt;code&gt;C-c C-y&lt;/code&gt; it will expand into a snippet containing all of the parameters, their names, any default values, et cetera.&lt;/p&gt; &#xA;&lt;h2&gt;auto-complete&lt;/h2&gt; &#xA;&lt;p&gt;With auto-complete support activated, it&#39;s even simpler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;imp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;followed by &lt;code&gt;Tab&lt;/code&gt;, then &lt;code&gt;Return&lt;/code&gt; (to choose the first completion) expands the snippet to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;implode($glue, $pieces)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, install and configure &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;auto-complete&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(payas/ac-setup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your php-auto-yasnippets setup, and you should be good to go.&lt;/p&gt; &#xA;&lt;p&gt;Note that auto-completion does not support user-defined functions or classes (it relies on auto-complete&#39;s php-mode dictionary of functions).&lt;/p&gt; &#xA;&lt;h2&gt;Loading User Code&lt;/h2&gt; &#xA;&lt;p&gt;This package can also generate snippets for user-defined functions and methods.&lt;/p&gt; &#xA;&lt;p&gt;You can tell a buffer what files to load for function and class definitions by setting &lt;code&gt;php-auto-yasnippet-required-files&lt;/code&gt; to a list of required paths.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;http://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;, you might put something like this in &lt;code&gt;~/project/.dir-locals.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(php-mode . ((php-auto-yasnippet-required-files (list &#34;~/project/vendor/autoload.php&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can generate snippets for any classes Composer autoloads, in any PHP file in the project.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://glynnforrest.com&#34;&gt;Glynn Forrest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://yasuyk.github.io/&#34;&gt;Yasuyuki Oka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;Steve Purcell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.nateeag.com/&#34;&gt;Nate Eagleson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amcorreia&#34;&gt;Alessandro Madruga Correia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bystrano&#34;&gt;Michel Bystranowski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarTango&#34;&gt;Martin Tang&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;This package uses &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/copyleft/gpl.html&#34;&gt;GNU General Public License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2013, 2014, 2015, 2016, 2017 Eric James Michael Ritz&lt;/p&gt;</summary>
  </entry>
</feed>