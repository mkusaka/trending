<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:33:37Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>commercial-emacs/commercial-emacs</title>
    <updated>2022-10-09T01:33:37Z</updated>
    <id>tag:github.com,2022-10-09:/commercial-emacs/commercial-emacs</id>
    <link href="https://github.com/commercial-emacs/commercial-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#34;Evil will always triumph, because good is dumb.&#34; -- Spaceballs (1987)&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;Talking never moves anything in Emacs, never did, never will.&lt;/p&gt; &#xA; &lt;p&gt;— &lt;cite&gt;2021 Maintainer of GNU Emacs, who then proceeded to keep talking.&lt;/cite&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Frequently Anticipated Questions&lt;/h2&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;p&gt;This is the oft ideated, never sublimated &#34;forge&#34; repository for emacs. As it is hosted on a site using &lt;a href=&#34;https://www.gnu.org/philosophy/categories.en.html&#34;&gt;non-free&lt;/a&gt; software, the work herein is not the official GNU Emacs source, and does not entreat the FSF to enforce its license.&lt;/p&gt; &#xA;&lt;h3&gt;How to build?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/commercial-emacs/commercial-emacs.git&#xA;cd commercial-emacs&#xA;./autogen.sh&#xA;./configure --prefix=$HOME/.local&#xA;make -j4&#xA;src/emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How often are you merging commits from GNU?&lt;/h3&gt; &#xA;&lt;p&gt;Roughly every hour.&lt;/p&gt; &#xA;&lt;h3&gt;How has the code diverged thus far?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Performant long lines without narrowing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commercial-emacs/commercial-emacs/master/#tree-sitter&#34;&gt;Tree-sitter font highlighting&lt;/a&gt;. &lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commercial-emacs/commercial-emacs/master/#f1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gnus is rewritten to be non-blocking.&lt;/li&gt; &#xA; &lt;li&gt;Process management is rewritten.&lt;/li&gt; &#xA; &lt;li&gt;Tree-sitter replacement of ersatz PPSS syntactic parser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commercial-emacs/commercial-emacs/master/#moving-collector&#34;&gt;Moving garbage collector rudiments&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;tree-sitter&#34;&gt;&lt;/a&gt;How can I try tree-sitter highlighting?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Rust library:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 --branch v0.20.8alpha1 \&#xA;  https://github.com/commercial-emacs/tree-sitter.git&#xA;make -C tree-sitter install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Upon success the user is instructed to update &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; in his shell rc file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start a new shell and build emacs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./autogen.sh&#xA;./configure --prefix=$HOME/.local --with-tree-sitter&#xA;make -j4&#xA;ldd src/emacs | grep -q tree-sitter || echo not found&#xA;make test/src/tree-sitter-tests&#xA;src/emacs -Q --eval \&#xA;  &#34;(custom-set-variables &#39;(font-lock-support-mode &#39;tree-sitter-lock-mode))&#34; \&#xA;  --visit src/xdisp.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;moving-collector&#34;&gt;&lt;/a&gt;What is a moving garbage collector?&lt;/h3&gt; &#xA;&lt;p&gt;Moving collectors relocate Lisp values in memory, in contrast to the GNU Emacs collector, which upon allocating say a cons cell, will let it remain at its birth address in perpetuity.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs&#39;s non-moving collector has been unfairly maligned as antiquated, generally by undergraduates who just implemented a toy moving collector for their PL class. They might be surprised to know that the Boehm paper on which Emacs&#39;s collector is based was published twenty years &lt;em&gt;after&lt;/em&gt; Cheney&#39;s paper on moving collection.&lt;/p&gt; &#xA;&lt;p&gt;But one thing moving collectors can do that non-moving ones can&#39;t is &lt;em&gt;generational&lt;/em&gt; sequestration, that is, keeping the youngest cohort of Lisp values separated from older ones. This allows fast, intermediary cycles which only scan the &#34;nursery&#34; generation (the rationale being old objects are very likely to still be referenced). A non-moving collector must traverse the full set on each cycle since its allocations are interleaved. This is why Emacs bros are as eager to raise collection thresholds as motherboard jockeys are to overclock their BIOS.&lt;/p&gt; &#xA;&lt;h3&gt;Isn&#39;t this xemacs all over again?&lt;/h3&gt; &#xA;&lt;p&gt;Ah, but if it could reach those heights. If by some miracle it did, the choices for the FSF are the same as before: enlist RMS to embark on a coding frenzy that achieves feature parity, grant myself commit rights, or continue not noticing me. If my history of user acquisition is any indication, the last outcome is most likely.&lt;/p&gt; &#xA;&lt;p&gt;&lt;b id=&#34;f1&#34;&gt;[1]&lt;/b&gt; By Yuan Fu and oldosfan. &lt;a href=&#34;https://raw.githubusercontent.com/commercial-emacs/commercial-emacs/master/#a1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>davazp/graphql-mode</title>
    <updated>2022-10-09T01:33:37Z</updated>
    <id>tag:github.com,2022-10-09:/davazp/graphql-mode</id>
    <link href="https://github.com/davazp/graphql-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs mode for GraphQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;graphql-mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/graphql-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/graphql-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;graphql-mode&lt;/code&gt; is an emacs mode to edit GraphQL schema and queries.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;graphql-mode&lt;/code&gt; can be installed from MELPA repository at &lt;a href=&#34;http://melpa.org/&#34;&gt;http://melpa.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once the installation is completed, any file with a &lt;em&gt;.graphql&lt;/em&gt; extension will be loaded with this mode.&lt;/p&gt; &#xA;&lt;p&gt;You can optionally install &lt;code&gt;json-mode&lt;/code&gt;, and it will be enabled in the buffer that contains the response from a GraphQL service.&lt;/p&gt; &#xA;&lt;h2&gt;Querying Endpoints&lt;/h2&gt; &#xA;&lt;p&gt;To send a query to a server, you will first need the &lt;a href=&#34;https://github.com/tkf/emacs-request&#34;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; package. Then use &lt;code&gt;graphql-send-query&lt;/code&gt; (&lt;code&gt;C-c C-c&lt;/code&gt;) to send a query.&lt;/p&gt; &#xA;&lt;p&gt;If you have a &lt;a href=&#34;https://github.com/jimkyndemeyer/graphql-config-examples&#34;&gt;&lt;code&gt;.graphqlconfig&lt;/code&gt;&lt;/a&gt; file, you can select an endpoint configuration with &lt;code&gt;graphql-select-endpoint&lt;/code&gt; (&lt;code&gt;C-c C-l&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To send additional headers for a request, &lt;code&gt;graphql-extra-headers&lt;/code&gt; must be set. It is automatically set by &lt;code&gt;graphql-select-endpoint&lt;/code&gt;, or you can edit its value using JSON with &lt;code&gt;graphql-edit-headers&lt;/code&gt; (&lt;code&gt;C-c e h&lt;/code&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flycheck/flycheck</title>
    <updated>2022-10-09T01:33:37Z</updated>
    <id>tag:github.com,2022-10-09:/flycheck/flycheck</id>
    <link href="https://github.com/flycheck/flycheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;On the fly syntax checking for GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.flycheck.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flycheck/flycheck/master/doc/_static/logo.png&#34; alt=&#34;Flycheck&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flycheck/flycheck/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/flycheck/flycheck.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/flycheck/flycheck&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/flycheck/flycheck.svg?sanitize=true&#34; alt=&#34;Join the chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/flycheck&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/flycheck-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/flycheck&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/flycheck-badge.svg?sanitize=true&#34; alt=&#34;MELPA stable version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/flycheck/flycheck&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/flycheck/flycheck/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flycheck.org&#34;&gt;https://www.flycheck.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Modern on-the-fly syntax checking extension for GNU Emacs. &lt;a href=&#34;https://www.flycheck.org/en/latest/#try-out&#34;&gt;Try it&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flycheck/flycheck/master/doc/images/flycheck-annotated.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more gentle introduction read the &lt;a href=&#34;https://www.flycheck.org/en/latest/user/installation.html&#34;&gt;Installation&lt;/a&gt; instructions and go through &lt;a href=&#34;https://www.flycheck.org/en/latest/user/quickstart.html&#34;&gt;Quickstart&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;Please ask questions about Flycheck on &lt;a href=&#34;https://emacs.stackexchange.com/questions/tagged/flycheck&#34;&gt;Stack Exchange&lt;/a&gt; or in our &lt;a href=&#34;https://gitter.im/flycheck/flycheck&#34;&gt;Gitter chat&lt;/a&gt;, and report bugs to our &lt;a href=&#34;https://github.com/flycheck/flycheck/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We welcome all kinds of contributions, whether you write patches, open pull requests, write documentation, help others with Flycheck issues, or just tell other people about your experiences with Flycheck. Please take a look at our &lt;a href=&#34;https://www.flycheck.org/en/latest/contributor/contributing.html&#34;&gt;Contributor’s Guide&lt;/a&gt; for help and guidance about contributing to Flycheck.&lt;/p&gt; &#xA;&lt;p&gt;We strive to create a safe, friendly and welcoming environment in the Flycheck community and have a &lt;a href=&#34;https://www.flycheck.org/en/latest/community/conduct.html&#34;&gt;Code of Conduct&lt;/a&gt; that defines acceptable and welcome behaviour as well as sanctions for violations. All contributors and all participants are expected to follow it, on Github, Gitter, Emacs.SX or any other place that’s part of Flycheck’s broader community.&lt;/p&gt; &#xA;&lt;p&gt;Flycheck is free software: you can redistribute it and/or modify it under the terms of the &lt;a href=&#34;https://github.com/flycheck/flycheck/raw/master/COPYING&#34;&gt;GNU General Public License&lt;/a&gt; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;Flycheck is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the &lt;a href=&#34;https://github.com/flycheck/flycheck/raw/master/COPYING&#34;&gt;GNU General Public License&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
</feed>