<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-24T01:33:50Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-lsp/lsp-java</title>
    <updated>2022-10-24T01:33:50Z</updated>
    <id>tag:github.com,2022-10-24:/emacs-lsp/lsp-java</id>
    <link href="https://github.com/emacs-lsp/lsp-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lsp-mode ❤️ java&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/lsp-java&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lsp-java-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/lsp-java&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/lsp-java-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-lsp/lsp-java/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacs-lsp/lsp-java/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/emacs-lsp/lsp-mode?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/emacs-lsp/lsp-mode.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/emacs-lsp/lsp-mode&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;lsp-java&lt;/h1&gt; &#xA;&lt;p&gt;Emacs Java IDE using &lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;LSP java mode supports the following JDT Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As you type reporting of parsing and compilation errors (via &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt;/&lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Code completion - using &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;company-capf&lt;/a&gt; or builtin &lt;code&gt;complete-at-point&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Javadoc hovers - using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code actions - using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code outline - using builtin &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&#34;&gt;imenu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code navigation - using builtin &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&#34;&gt;xref&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code lens (references/implementations) - using builtin &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&#34;&gt;xref&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Highlights&lt;/li&gt; &#xA; &lt;li&gt;Code formatting&lt;/li&gt; &#xA; &lt;li&gt;Maven pom.xml project support&lt;/li&gt; &#xA; &lt;li&gt;Limited Gradle support&lt;/li&gt; &#xA; &lt;li&gt;Visual debugger - &lt;a href=&#34;https://github.com/yyoncho/dap-mode/&#34;&gt;dap-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Test runner - &lt;a href=&#34;https://github.com/yyoncho/dap-mode/&#34;&gt;dap-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Project explorer integration - &lt;a href=&#34;https://github.com/Alexander-Miller/treemacs&#34;&gt;treemacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Here it is a demo from EmacsConf2019 &lt;a href=&#34;https://www.youtube.com/watch?v=Bbjxn9yVNJ8&#34;&gt;https://www.youtube.com/watch?v=Bbjxn9yVNJ8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Here is a tutorial that covers setup and use &lt;a href=&#34;https://xpressrazor.wordpress.com/2020/11/04/java-programming-in-emacs/&#34;&gt;https://xpressrazor.wordpress.com/2020/11/04/java-programming-in-emacs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-java/master/images/demo.png&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Spacemacs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-java&#34;&gt;lsp-java&lt;/a&gt; is included in spacemacs (for now only on the dev branch). If you are using the development version of spacemacs you can simply add &lt;code&gt;(java :variables java-backend &#39;lsp)&lt;/code&gt; to &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install via melpa&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way to install LSP Java is via &lt;code&gt;package.el&lt;/code&gt; - the built-in package manager in Emacs. LSP Java is available on the two major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt; &lt;code&gt;lsp-java&lt;/code&gt; &lt;kbd&gt;[RET]&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then add the following lines to your &lt;code&gt;.emacs&lt;/code&gt; and open a file from the any of the specified projects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;lsp-java)&#xA;(add-hook &#39;java-mode-hook #&#39;lsp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-java&#34;&gt;lsp-java&lt;/a&gt; will automatically detect when the server is missing and it will download &lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt; before the first startup. The server installation will be in &lt;code&gt;lsp-java-server-install-dir&lt;/code&gt;. It will detect whether &lt;a href=&#34;https://github.com/yyoncho/dap-mode/&#34;&gt;dap-mode&lt;/a&gt; is present and it will download the required server side plugins/components. If you want to update the server you can run &lt;code&gt;lsp-java-update-server&lt;/code&gt;. To run specific version of &lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt; use &lt;code&gt;lsp-java-server-install-dir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick start&lt;/h3&gt; &#xA;&lt;p&gt;Minimal configuration with &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;company-capf&lt;/a&gt; and &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; and &lt;a href=&#34;https://github.com/yyoncho/dap-mode/&#34;&gt;dap-mode&lt;/a&gt;. Set &lt;code&gt;lsp-java-workspace-dir&lt;/code&gt; in case you have existing Java projects. Now you can explore the methods under &lt;code&gt;lsp-java-*&lt;/code&gt;, &lt;code&gt;dap-java-*&lt;/code&gt;, &lt;code&gt;dap-*&lt;/code&gt;, and &lt;code&gt;lsp-*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(condition-case nil&#xA;    (require &#39;use-package)&#xA;  (file-error&#xA;   (require &#39;package)&#xA;   (add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;http://melpa.org/packages/&#34;))&#xA;   (package-initialize)&#xA;   (package-refresh-contents)&#xA;   (package-install &#39;use-package)&#xA;   (setq use-package-always-ensure t)&#xA;   (require &#39;use-package)))&#xA;&#xA;(use-package projectile)&#xA;(use-package flycheck)&#xA;(use-package yasnippet :config (yas-global-mode))&#xA;(use-package lsp-mode :hook ((lsp-mode . lsp-enable-which-key-integration)))&#xA;(use-package hydra)&#xA;(use-package company)&#xA;(use-package lsp-ui)&#xA;(use-package which-key :config (which-key-mode))&#xA;(use-package lsp-java :config (add-hook &#39;java-mode-hook &#39;lsp))&#xA;(use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))&#xA;(use-package dap-java :ensure nil)&#xA;(use-package helm-lsp)&#xA;(use-package helm&#xA;  :config (helm-mode))&#xA;(use-package lsp-treemacs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported commands&lt;/h2&gt; &#xA;&lt;h3&gt;LSP Mode commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-execute-code-action&lt;/code&gt; - Execute code action.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-rename&lt;/code&gt; - Rename symbol at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-describe-thing-at-point&lt;/code&gt; - Display help for the thing at point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-goto-type-definition&lt;/code&gt; - Go to type definition&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-goto-implementation&lt;/code&gt; - Go to implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-restart-workspace&lt;/code&gt; - Restart project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-format-buffer&lt;/code&gt; - Format current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-symbol-highlight&lt;/code&gt; - Highlight all relevant references to the symbol under point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-workspace-folders-add&lt;/code&gt; - Add workspace folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-workspace-folders-remove&lt;/code&gt; - Remove workspace folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-workspace-folders-switch&lt;/code&gt; - Switch workspace folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LSP Java commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-organize-imports&lt;/code&gt; - Organize imports&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-build-project&lt;/code&gt; - Perform partial or full build for the projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-update-project-configuration&lt;/code&gt; - Update project configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-actionable-notifications&lt;/code&gt; - Resolve actionable notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-update-user-settings&lt;/code&gt; - Update user settings (Check the options in the table bellow.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-update-server&lt;/code&gt; - Update server instalation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-generate-to-string&lt;/code&gt; - Generate &lt;code&gt;toString&lt;/code&gt; method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-generate-equals-and-hash-code&lt;/code&gt; - Generate &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-generate-overrides&lt;/code&gt; - Generate method &lt;code&gt;overrides&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-generate-getters-and-setters&lt;/code&gt; - Generate getters and setters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-type-hierarchy&lt;/code&gt; - Open type hierarchy. Use prefix arg to specify the type of the hierarchy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Refactoring&lt;/h4&gt; &#xA;&lt;p&gt;LSP Java provides rich set of refactorings via &lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt; code actions and some of them are bound to Emacs commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-extract-to-constant&lt;/code&gt; - Extract constant refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-add-unimplemented-methods&lt;/code&gt; - Extract constant refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-create-parameter&lt;/code&gt; - Create parameter refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-create-field&lt;/code&gt; - Create field refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-create-local&lt;/code&gt; - Create local refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-extract-method&lt;/code&gt; - Extract method refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-add-import&lt;/code&gt; - Add missing import&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Testing support&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-jt-browser&lt;/code&gt; - Browse tests and run/debug them. ** Use &lt;code&gt;x&lt;/code&gt; to run the test(s) under point; &lt;code&gt;d&lt;/code&gt; to debug the tests under point. &lt;code&gt;R&lt;/code&gt; to refresh. ** Support for GUI operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-jt-report-open&lt;/code&gt; - open test report&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-jt-lens-mode&lt;/code&gt; - test lenses mode(requires &lt;code&gt;lsp-lens-mode&lt;/code&gt; to be enabled.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Dependency viewer&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-dependency-list&lt;/code&gt; - View java dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;STS4 Integration (experimental)&lt;/h4&gt; &#xA;&lt;p&gt;LSP java has integration with &lt;a href=&#34;https://github.com/spring-projects/sts4/&#34;&gt;STS4&lt;/a&gt; providing the following functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Spring boot support (Experimental)&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the integration with &lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt; &lt;a href=&#34;http://github.com/emacs-lsp/lsp-java&#34;&gt;lsp-java&lt;/a&gt; provides integration with &lt;a href=&#34;https://github.com/spring-projects/sts4/&#34;&gt;STS4&lt;/a&gt; which covers Spring Boot &lt;code&gt;application.properties&lt;/code&gt;, &lt;code&gt;application.yml&lt;/code&gt; and &lt;code&gt;.java&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h2&gt;Usage:&lt;/h2&gt; &#xA;&lt;p&gt;Make sure that you have configured &lt;code&gt;JAVA_HOME&lt;/code&gt;. &lt;code&gt;lsp-java&lt;/code&gt; will automatically download the &lt;a href=&#34;https://github.com/spring-projects/sts4/&#34;&gt;STS4&lt;/a&gt; when you call &lt;code&gt;lsp-java-update-server&lt;/code&gt;. In order to enable &lt;a href=&#34;https://github.com/spring-projects/sts4/&#34;&gt;STS4&lt;/a&gt; integration add the following lines to your config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;lsp-java-boot)&#xA;&#xA;;; to enable the lenses&#xA;(add-hook &#39;lsp-mode-hook #&#39;lsp-lens-mode)&#xA;(add-hook &#39;java-mode-hook #&#39;lsp-java-boot-lens-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functionality for &lt;code&gt;.java&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Navigating the source code - Go to symbol in file/workspace&lt;/h3&gt; &#xA;&lt;p&gt;Easy navigation to Spring-specific elements of your source code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-java/master/images/java-navigation.png&#34; alt=&#34;Go to Symbol in workspace&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Commands&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp-workspace-symbol&lt;/code&gt; - (works better usign &lt;a href=&#34;https://github.com/yyoncho/helm-lsp&#34;&gt;helm-lsp&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@/&lt;/code&gt; shows all defined request mappings (mapped path, request method, source location)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@+&lt;/code&gt; shows all defined beans (bean name, bean type, source location)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@&amp;gt;&lt;/code&gt; shows all functions (prototype implementation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@&lt;/code&gt; shows all Spring annotations in the code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick-access for running apps&lt;/h3&gt; &#xA;&lt;p&gt;Easy navigation to the provided request mappings of running apps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-java/master/images/running-apps.png&#34; alt=&#34;accessing running apps quickly&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Commands&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp-workspace-symbol&lt;/code&gt; - (works better usign &lt;a href=&#34;https://github.com/yyoncho/helm-lsp&#34;&gt;helm-lsp&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;//&lt;/code&gt; shows all request mappings of all running Spring Boot apps and opens a browser for the selected endpoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Live application information hovers&lt;/h3&gt; &#xA;&lt;p&gt;STS4 automatically detects JVM processes for running boot applications on your local machine.&lt;/p&gt; &#xA;&lt;p&gt;For some types of information, STS 4 may also show a &#39;quick summary&#39; as a codelens.&lt;/p&gt; &#xA;&lt;p&gt;If there are multiple instances of the app running on your machine, the live data from all those instances will show up in the hover information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;java-mode-hook #&#39;lsp-java-boot-lens-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-java/master/images/live-hovers.png&#34; alt=&#34;live data from running apps as hover on source code&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@Profile&lt;/code&gt;: shows information about the active profiles on the running apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Bean&lt;/code&gt;, &lt;code&gt;@Autowired&lt;/code&gt;: shows detailed information about the beans and their wiring from the live app&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@ContidionalOn...&lt;/code&gt;: shows information about the conditions and their evaluation at runtime&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code templates&lt;/h3&gt; &#xA;&lt;p&gt;Write Spring code with templates, available via regular code completion.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@GetMapping&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@PostMapping&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@PutMapping&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Smart code completions&lt;/h3&gt; &#xA;&lt;p&gt;Additional code completions for Spring-specific annotations&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-java/master/images/validation-completion.png&#34; alt=&#34;Smart code completion for boot properties&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Functionality for &lt;code&gt;.properties&lt;/code&gt; and &lt;code&gt;.yml&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This extension analyzes your project&#39;s classpath and parses and indexes any &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html&#34;&gt;Spring Boot Properties Metadata&lt;/a&gt; it finds. Both Maven and Gradle projects are supported.&lt;/p&gt; &#xA;&lt;p&gt;The data in the index is used to provide validation, code completions and information hovers while editing Spring Boot Properties in either &lt;code&gt;.properties&lt;/code&gt; or &lt;code&gt;.yml&lt;/code&gt; format.&lt;/p&gt; &#xA;&lt;h3&gt;Validation and code completion in properties file&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-java/master/images/validation-completion.png&#34; alt=&#34;application-properties-validation&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Validation and code completion in yaml file&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-java/master/images/yaml-completion-and-help.png&#34; alt=&#34;application-properties-validation&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Spring Initializr&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp-java&lt;/code&gt; provides a frontend for &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt; which simplifies the creation of Spring Boot projects directly from Emacs via &lt;code&gt;lsp-java-spring-initializr&lt;/code&gt;. &lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-java/master/images/boot.png&#34; alt=&#34;Create Spring boot project&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported settings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-server-install-dir&lt;/code&gt; - &#34;Install directory for eclipse.jdt.ls-server. The slash is expected at the end.&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-jdt-download-url&lt;/code&gt; - JDT JS download url. Use &lt;a href=&#34;http://download.eclipse.org/che/che-ls-jdt/snapshots/che-jdt-language-server-latest.tar.gz&#34;&gt;http://download.eclipse.org/che/che-ls-jdt/snapshots/che-jdt-language-server-latest.tar.gz&lt;/a&gt; if you want to use Eclipse Che JDT LS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-java-path&lt;/code&gt; - Path of the java executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-progress-string&lt;/code&gt; - Java progress status as reported by the language server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-workspace-dir&lt;/code&gt; - LSP java workspace directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-workspace-cache-dir&lt;/code&gt; - LSP java workspace cache directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-themes-directory&lt;/code&gt; - Directory containing themes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-theme&lt;/code&gt; - Theme to use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-pop-buffer-function&lt;/code&gt; - The function which will be used for showing the helper windows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-vmargs&lt;/code&gt; - Specifies extra VM arguments used to launch the Java Language Server. Eg. use &lt;code&gt;-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication&lt;/code&gt; to bypass class verification,increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-9-args&lt;/code&gt; - Specifies arguments specific to java 9 and later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-errors-incomplete-classpath-severity&lt;/code&gt; - Specifies the severity of the message when the classpath is incomplete for a Java file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-configuration-check-project-settings-exclusions&lt;/code&gt; - Checks if the extension-generated project settings files (.project, .classpath, .factorypath, .settings/) should be excluded from the file explorer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-configuration-update-build-configuration&lt;/code&gt; - Specifies how modifications on build files update the Java classpath/configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-trace-server&lt;/code&gt; - Traces the communication between VS Code and the Java language server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-import-gradle-enabled&lt;/code&gt; - Enable/disable the Gradle importer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-import-maven-enabled&lt;/code&gt; - Enable/disable the Maven importer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-maven-download-sources&lt;/code&gt; - Enable/disable eager download of Maven source artifacts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-references-code-lens-enabled&lt;/code&gt; - Enable/disable the references code lens.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-signature-help-enabled&lt;/code&gt; - Enable/disable the signature help.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-implementations-code-lens-enabled&lt;/code&gt; - Enable/disable the implementations code lens.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-configuration-maven-user-settings&lt;/code&gt; - Path to Maven&#39;s settings.xml&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-format-enabled&lt;/code&gt; - Enable/disable default Java formatter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-save-actions-organize-imports &lt;/code&gt; - Enable/disable auto organize imports on save action&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-import-exclusions&lt;/code&gt; - Configure glob patterns for excluding folders&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-content-provider-preferred&lt;/code&gt; - Preferred content provider (a 3rd party decompiler id, usually). We support &lt;a href=&#34;https://github.com/dgileadi/vscode-java-decompiler&#34;&gt;https://github.com/dgileadi/vscode-java-decompiler&lt;/a&gt;. To enable it, add: &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq lsp-java-content-provider-preferred &#34;fernflower&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-autobuild-enabled&lt;/code&gt; - Enable/disable the &#39;auto build&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-max-concurrent-builds&lt;/code&gt; - Max simultaneous project builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-completion-enabled&lt;/code&gt; - Enable/disable code completion support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-completion-overwrite&lt;/code&gt; - When set to true, code completion overwrites the current text. When set to false, code is simply added instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-completion-guess-method-arguments&lt;/code&gt; - When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-completion-favorite-static-members&lt;/code&gt; - Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-completion-import-order&lt;/code&gt; - Defines the sorting order of import statements. A package or type name prefix (e.g. &#39;org.eclipse&#39;) is a valid entry. An import is always added to the most specific group.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-folding-range-enabled&lt;/code&gt; - Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indentation-based&lt;/code&gt; - [Experimental] Enable/disable progress reports from background processes on the server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-progress-reports-enabled&lt;/code&gt; - [Experimental] Enable/disable progress reports from background processes on the server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-format-settings-url&lt;/code&gt; - Specifies the url or file path to the &lt;a href=&#34;https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings&#34;&gt;Eclipse formatter xml settings&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-format-settings-profile&lt;/code&gt; - Optional formatter profile name from the Eclipse formatter settings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-format-comments-enabled&lt;/code&gt; - Includes the comments during code formatting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-format-on-type-enabled&lt;/code&gt; - Enable/disable automatic block formatting when typing &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-bundles&lt;/code&gt; - List of bundles that will be loaded in the JDT server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-code-generation-hash-code-equals-use-java7objects&lt;/code&gt; - Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-code-generation-hash-code-equals-use-instanceof&lt;/code&gt; - Use &#39;instanceof&#39; to compare types when generating the hashCode and equals methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-code-generation-use-blocks&lt;/code&gt; - Use blocks in &#39;if&#39; statements when generating the methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-code-generation-generate-comments&lt;/code&gt; - Generate method comments when generating the methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-code-generation-to-string-template&lt;/code&gt; - The template for generating the toString method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-code-generation-to-string-code-style&lt;/code&gt; - The code style for generating the toString method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-code-generation-to-string-skip-null-values&lt;/code&gt; - Skip null values when generating the toString method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-code-generation-to-string-list-array-contents&lt;/code&gt; - List contents of arrays instead of using native toString().&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-code-generation-to-string-limit-elements&lt;/code&gt; - Limit number of items in arrays/collections/maps to list, if 0 then list all.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-java-inhibit-message&lt;/code&gt; - If non-nil, inhibit java messages echo via `inhibit-message&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; : Flycheck, documentation and code actions support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;company-capf&lt;/a&gt; : Company backend support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alexander-Miller/treemacs&#34;&gt;treemacs&lt;/a&gt; : Project viewer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-treemacs&#34;&gt;lsp-treemacs&lt;/a&gt; : &lt;code&gt;lsp-mode&lt;/code&gt; GUI controls implemented using treemacs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LSP Java is showing to many debug messages, how to stop that? Add the following configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq lsp-inhibit-message t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; does not display all of the actions on the current point(e. g &#34;Extract constant&#34;)? LSP UI by default sends current line bounds for action region which breaks forces JDT server to return only &#34;Extract method action.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq lsp-ui-sideline-update-mode &#39;point)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LSP Java does not provide completion, go to definition for some of the files?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When particular file is not part of imported project &lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt; could not calculate the current classpath.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How do I change the version of java used by LSP?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have a look at &lt;code&gt;~/.emacs.d/workspace/.metadata/.plugins/org.eclipse.jdt.launching/libraryInfos.xml&lt;/code&gt;. If you updated your local java path and want LSP to use the new version, try removing the &lt;code&gt;~/.emacs.d/workspace/&lt;/code&gt; directory and relaunch LSP. Also see &lt;a href=&#34;https://github.com/emacs-lsp/lsp-java/issues/114&#34;&gt;#114&lt;/a&gt;. If you have multiple java JDK versions installed and want to change the version of java used by LSP, also need to set &lt;code&gt;lsp-java-configuration-runtimes&lt;/code&gt;. An example for setting &lt;code&gt;lsp-java-configuration-runtimes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq lsp-java-configuration-runtimes &#39;[(:name &#34;JavaSE-1.8&#34;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;:path &#34;/home/kyoncho/jdk1.8.0_201.jdk/&#34;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(:name &#34;JavaSE-11&#34;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;:path &#34;/home/kyoncho/jdk-11.0.1.jdk/&#34;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;:default t)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How do I change JVM args passed to JDT server? LSP slowness could be caused by slow JDT server, especially on large JAVA projects. Bump up the heap size maybe a good idea.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; current VSCode defaults&#xA;(setq lsp-java-vmargs &#39;(&#34;-XX:+UseParallelGC&#34; &#34;-XX:GCTimeRatio=4&#34; &#34;-XX:AdaptiveSizePolicyWeight=90&#34; &#34;-Dsun.zip.disableMemoryMapping=true&#34; &#34;-Xmx2G&#34; &#34;-Xms100m&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>