<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-04T01:32:33Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>agzam/browser-hist.el</title>
    <updated>2022-12-04T01:32:33Z</updated>
    <id>tag:github.com,2022-12-04:/agzam/browser-hist.el</id>
    <link href="https://github.com/agzam/browser-hist.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Search through browser history, in Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Search through the Browser history, in Emacs&lt;/p&gt; &#xA;&lt;p&gt;** Description Browsers usually keep their history in a sqlite database, and it&#39;s trivial to extract it. This package allows you to search through your browser history by URL and the Page Title.&lt;/p&gt; &#xA;&lt;p&gt;** How to use it *** 1. Install the package using your favorite package manager. *** 2. Set the mandatory variables&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=browser-hist-db-paths= is an association list with paths to browser DBs. &lt;em&gt;It needs to be set!&lt;/em&gt; The package currently doesn&#39;t have a way for discovering these paths, so this step has to be done manually.&lt;/p&gt; &lt;p&gt;example: #+begin_src elisp (setq browser-hist-db-paths &#39;((chrome . &#34;$HOME/Library/Application Support/Google/Chrome/Default/History&#34;) (brave . &#34;$HOME/Library/Application Support/BraveSoftware/Brave-Browser/Default/History&#34;) (firefox . &#34;$HOME/Library/Application Support/Firefox/Profiles/rmgcr4hw.default-release/places.sqlite&#34;))) #+end_src&lt;/p&gt; &lt;p&gt;You may ignore the browsers you don&#39;t use; right now the package works only with a single browser. Retrieving data for multiple browsers will be added at some point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=browser-hist-default-browser= - set this var, the package doesn&#39;t know yet how to resolve the default browser automatically&lt;/p&gt; &lt;p&gt;example: #+begin_src elisp (setq browser-hist-default-browser &#39;chrome) #+end_src&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** 3. Try it There&#39;s only one command =browser-hist-search=, try it and see if it works.&lt;/p&gt; &#xA;&lt;p&gt;** Status: experimental I just created it, and it has many rough edges. It&#39;s been tested only on a Mac with Chrome, Brave and Firefox. ** FAQ *** What&#39;s the point? Why even have this if you can do it in the browser?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s convenient and a bit faster to bind the command to a key.&lt;/li&gt; &#xA; &lt;li&gt;And then, using an [[https://github.com/oantolin/embark][Embark]] Action you can open the link in EWW, in XWidget, or any other browser (not necessarily the history origin one).&lt;/li&gt; &#xA; &lt;li&gt;You can also narrow the search and export the results into a separate buffer using Embark Collect.&lt;/li&gt; &#xA; &lt;li&gt;It opens some other possibilities like sending a link to a browser but forcing it to find the tab (if there&#39;s an open one already, e.g., why open another GMail tab?) /I&#39;ll share an example of how this could be done using Applescript/. Or maybe open the link in a private tab of a chosen browser.&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m also hoping at some point to collect data from multiple browsers. *** How come when I type, it highlights within URLs, but not titles see: &lt;a href=&#34;https://github.com/agzam/browser-hist.el/issues/7&#34;&gt;https://github.com/agzam/browser-hist.el/issues/7&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>andorsk/d2-mode</title>
    <updated>2022-12-04T01:32:33Z</updated>
    <id>tag:github.com,2022-12-04:/andorsk/d2-mode</id>
    <link href="https://github.com/andorsk/d2-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;emacs major mode for d2 graphs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;d2-mode&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/terrastruct/d2&#34;&gt;d2&lt;/a&gt; extension for Emacs. This was heavily inspired of &lt;a href=&#34;https://github.com/abrochard/mermaid-mode&#34;&gt;Mermaid Mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; Alpha.&lt;/p&gt; &#xA;&lt;p&gt;It works you can use this to render d2 in both your browser and in an emacs buffer. See &lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#bugs--issues&#34;&gt;Bugs &amp;amp; Issues&lt;/a&gt; for known issues.&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img height=&#34;500px&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/8604639/204498003-08bd0e05-0e0b-4d60-8d94-1ed95a4a7cd3.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;img height=&#34;500px&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/tutorial.gif&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#d2-mode&#34;&gt;d2-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#why-d2&#34;&gt;Why D2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#d2-binary-location&#34;&gt;&lt;code&gt;d2&lt;/code&gt; binary location&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#output-format&#34;&gt;Output format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#temp-directory&#34;&gt;Temp directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#key-bindings&#34;&gt;Key bindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#bonus&#34;&gt;Bonus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#bugs--issues&#34;&gt;Bugs &amp;amp; Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andorsk/d2-mode/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Why D2&lt;/h2&gt; &#xA;&lt;p&gt;Text to graph diagrams are awesome. I used Mermaid.js all the time and it was fantastic, but there were a few things it couldn&#39;t do so I wanted to expand my options.&lt;/p&gt; &#xA;&lt;p&gt;Some things that I&#39;ve noticed d2 has some interesting support in:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;More themes&lt;/li&gt; &#xA; &lt;li&gt;Code Blocks&lt;/li&gt; &#xA; &lt;li&gt;More visual customization&lt;/li&gt; &#xA; &lt;li&gt;More graph support&lt;/li&gt; &#xA; &lt;li&gt;Autoformat&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://d2lang.com/tour/intro/&#34;&gt;d2 here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Load the d2-mode.el file ( Melpa not available yet )&lt;/li&gt; &#xA; &lt;li&gt;Install d2 binary from the d2 project if you plan to compile graphs in Emacs&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C-c C-c - compile current file to an image&#xA;C-c C-f - compile given file to an image&#xA;C-c C-b - compile current buffer to an image&#xA;C-c C-r - compile current region to an image&#xA;C-c C-o - open in the live editor&#xA;C-c C-d - open the official doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: All compile commands will open the output in a buffer to view the resulting image.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;d2&lt;/code&gt; binary location&lt;/h3&gt; &#xA;&lt;p&gt;You can specify the location of &lt;code&gt;d2&lt;/code&gt; with the variable &lt;code&gt;d2-location&lt;/code&gt;, the default assumes you have the binary in your &lt;code&gt;PATH&lt;/code&gt; (and for that you probably want/need to install &lt;a href=&#34;https://github.com/andorsk/d2-mode&#34;&gt;&lt;code&gt;d2&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Output format&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;d2&lt;/code&gt; will compile to svg format. You can change that by setting the variable &lt;code&gt;d2-output-format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Temp directory&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;d2-tmp-dir&lt;/code&gt; points to &lt;code&gt;\tmp\&lt;/code&gt;. Feel free to set it to a more appropriate location that works for you (e.g. on windows).&lt;/p&gt; &#xA;&lt;h3&gt;Key bindings&lt;/h3&gt; &#xA;&lt;p&gt;To customize the key bindings put this into your &lt;code&gt;init.el&lt;/code&gt; ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defvar d2-mode-map&#xA;  (let ((map (make-sparse-keymap)))&#xA;    (define-key map (kbd &#34;C-c C-c&#34;) &#39;d2-compile)&#xA;    (define-key map (kbd &#34;C-c C-f&#34;) &#39;d2-compile-file)&#xA;    (define-key map (kbd &#34;C-c C-b&#34;) &#39;d2-compile-buffer)&#xA;    (define-key map (kbd &#34;C-c C-r&#34;) &#39;d2-compile-region)&#xA;    (define-key map (kbd &#34;C-c C-h&#34;) &#39;d2-compile-file-and-browse)&#xA;    (define-key map (kbd &#34;C-c C-j&#34;) &#39;d2-compile-buffer-and-browse)&#xA;    (define-key map (kbd &#34;C-c C-k&#34;) &#39;d2-compile-region-and-browse)&#xA;    (define-key map (kbd &#34;C-c C-o&#34;) &#39;d2-open-browser)&#xA;    (define-key map (kbd &#34;C-x C-o&#34;) &#39;d2-view-current-svg)&#xA;    (define-key map (kbd &#34;C-c C-d&#34;) &#39;d2-open-doc)&#xA;    map))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bonus&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;code&gt;snippets&lt;/code&gt; folder for yas snippets. Start making d2 graphs today!&lt;/p&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Even better syntax highlighting and formatting&lt;/li&gt; &#xA; &lt;li&gt;Watch mode support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bugs &amp;amp; Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SVG&#39;s have issues rending in emacs sometimes. See &lt;a href=&#34;https://github.com/andorsk/d2-mode/issues/13&#34;&gt;#13&lt;/a&gt; and &lt;a href=&#34;https://github.com/andorsk/d2-mode/issues/8&#34;&gt;#8&lt;/a&gt; for more details. You can use the &lt;code&gt;*browse&lt;/code&gt; commands to render it directly in your browser instead!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feel free to open an issue and or contribute to this repo over a PR!&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;We thank anyone that decides to contribute to this repository and encourage contributions.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/andorsk/d2-mode/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=andorsk/d2-mode&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Also thank you to @suliveevil for bringing up issues.&lt;/p&gt;</summary>
  </entry>
</feed>