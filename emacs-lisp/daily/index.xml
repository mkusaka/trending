<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-20T01:38:28Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>magit/orgit</title>
    <updated>2022-06-20T01:38:28Z</updated>
    <id>tag:github.com,2022-06-20:/magit/orgit</id>
    <link href="https://github.com/magit/orgit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Support for Org links to Magit buffers&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Link to Magit buffers from Org documents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package defines several Org link types, which can be used to link to certain Magit buffers. Use the command &lt;del&gt;org-store-link&lt;/del&gt; while such a buffer is current to store a link. Later you can insert it into an Org buffer using the command &lt;del&gt;org-insert-link&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Format&lt;/p&gt; &#xA;&lt;p&gt;The three link types defined here take these forms:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src text orgit:/path/to/repo/ links to a magit-status buffer orgit-log:/path/to/repo/::REV links to a magit-log buffer orgit-rev:/path/to/repo/::ARGS links to a magit-revision buffer #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Before &lt;del&gt;v1.3.0&lt;/del&gt; only the first revision was stored in &lt;del&gt;orgit-log&lt;/del&gt; links, and all other revisions were discarded. All other arguments were also discarded and Magit&#39;s usual mechanism for determining the switches and options was used instead.&lt;/p&gt; &#xA;&lt;p&gt;For backward compatibility, and because it is the common case and looks best, ARGS by default has the form &lt;del&gt;REV&lt;/del&gt; as before. However if linking to a log buffer that shows the log for multiple revisions, then &lt;del&gt;(&#34;REV&#34;...)&lt;/del&gt; is used instead. If &lt;del&gt;orgit-log-save-arguments&lt;/del&gt; is non-nil, then &lt;del&gt;((&#34;REV&#34;...) (&#34;ARG&#34;...) [(&#34;FILE&#34;...)])&lt;/del&gt; is always used, which allows restoring the buffer most faithfully.&lt;/p&gt; &#xA;&lt;p&gt;** Export&lt;/p&gt; &#xA;&lt;p&gt;When an Org file containing such links is exported, then the url of the remote configured with &lt;del&gt;orgit-remote&lt;/del&gt; is used to generate a web url according to &lt;del&gt;orgit-export-alist&lt;/del&gt;. That webpage should present approximately the same information as the Magit buffer would.&lt;/p&gt; &#xA;&lt;p&gt;Both the remote to be considered the public remote, as well as the actual web urls can be defined in individual repositories using Git variables.&lt;/p&gt; &#xA;&lt;p&gt;To use a remote different from &lt;del&gt;orgit-remote&lt;/del&gt; but still use &lt;del&gt;orgit-export-alist&lt;/del&gt; to generate the web urls, use:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src text git config orgit.remote REMOTE-NAME #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To explicitly define the web urls, use something like:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src text git config orgit.status &lt;a href=&#34;http://example.com/repo/overview&#34;&gt;http://example.com/repo/overview&lt;/a&gt; git config orgit.log &lt;a href=&#34;http://example.com/repo/history/%r&#34;&gt;http://example.com/repo/history/%r&lt;/a&gt; git config orgit.rev &lt;a href=&#34;http://example.com/repo/revision/%r&#34;&gt;http://example.com/repo/revision/%r&lt;/a&gt; #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/git-gutter</title>
    <updated>2022-06-20T01:38:28Z</updated>
    <id>tag:github.com,2022-06-20:/emacsorphanage/git-gutter</id>
    <link href="https://github.com/emacsorphanage/git-gutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs port of GitGutter which is Sublime Text Plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-gutter.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/git-gutter&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/git-gutter-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/git-gutter&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/git-gutter-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacsorphanage/git-gutter/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacsorphanage/git-gutter/workflows/ci-checks/badge.svg?sanitize=true&#34; alt=&#34;gh actions badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter.el&lt;/code&gt; is an Emacs port of the Sublime Text plugin &lt;a href=&#34;https://github.com/jisaacks/GitGutter&#34;&gt;GitGutter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asynchronous updating&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter/master/#live-updating&#34;&gt;Live updating&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter/master/#backends&#34;&gt;Support multiple VCS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support Tramp&lt;/li&gt; &#xA; &lt;li&gt;Work without &lt;code&gt;vc-mode&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter/master/image/git-gutter1.png&#34; alt=&#34;Screenshot of git-gutter.el&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 25.1 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;(1.7.0 or higher)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;git-gutter.el vs &lt;a href=&#34;https://github.com/syohex/emacs-git-gutter-fringe&#34;&gt;git-gutter-fringe.el&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;git-gutter.el&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;git-gutter-fringe.el&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Work in tty frame&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OK&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;unsupported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Work with linum-mode&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OK(experimental)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Show on right side&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;unsupporeted&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;OK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;configurable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;more configurable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;less configurable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;git-gutter.el&lt;/code&gt; from &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; with package.el (&lt;code&gt;M-x package-install git-gutter&lt;/code&gt;), with &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, or with another package manager of your choice&lt;/p&gt; &#xA;&lt;h2&gt;Global Minor Mode and Minor Mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter.el&lt;/code&gt; provides a global minor-mode(&lt;code&gt;global-git-gutter-mode&lt;/code&gt;) and minor-mode(&lt;code&gt;git-gutter-mode&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you want to use &lt;code&gt;git-gutter&lt;/code&gt; for files in git repository. You add following s-exp in your configuration file(&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; or &lt;code&gt;~/.emacs&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(global-git-gutter-mode +1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other case, you want to use &lt;code&gt;git-gutter&lt;/code&gt; for some files, you can use &lt;code&gt;git-gutter-mode&lt;/code&gt;. Following example of enabling &lt;code&gt;git-gutter&lt;/code&gt; for some mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;ruby-mode-hook &#39;git-gutter-mode)&#xA;(add-hook &#39;python-mode-hook &#39;git-gutter-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter.el&lt;/code&gt; provides following commands. &lt;strong&gt;Obsoleted interfaces will be removed when 1.0 released.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:next-hunk&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Jump to next hunk&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:previous-hunk&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Jump to previous hunk&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:end-of-hunk&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Move to end of current hunk&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:mark-hunk&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Mark current hunk.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:set-start-revision&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Set the start revision from which git-gutter performs the diffs.&lt;/p&gt; &#xA;&lt;p&gt;You can also set the variable &lt;code&gt;git-gutter:start-revision&lt;/code&gt; as a directory-local variable.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:popup-hunk&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Popup current diff hunk(alias &lt;code&gt;git-gutter:popup-diff&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter:next-hunk&lt;/code&gt; and &lt;code&gt;git-gutter:previous-hunk&lt;/code&gt; update content of buffer popuped by &lt;code&gt;git-gutter:popup-diff&lt;/code&gt; to current hunk.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:stage-hunk&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Stage current hunk. You can use this command like &lt;code&gt;git add -p&lt;/code&gt;. This command is supported only for &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:revert-hunk&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Revert current hunk&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Show changes from last commit or Update change information. Please execute this command if diff information is not be updated.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:linum-setup&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Setup for working with &lt;code&gt;linum-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;git-gutter:update-all-windows&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Update git-gutter information of buffers in all visible window.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;git-gutter)&#xA;&#xA;;; If you enable global minor mode&#xA;(global-git-gutter-mode t)&#xA;&#xA;;; If you would like to use git-gutter.el and linum-mode&#xA;(git-gutter:linum-setup)&#xA;&#xA;;; If you enable git-gutter-mode for some modes&#xA;(add-hook &#39;ruby-mode-hook &#39;git-gutter-mode)&#xA;&#xA;(global-set-key (kbd &#34;C-x C-g&#34;) &#39;git-gutter)&#xA;(global-set-key (kbd &#34;C-x v =&#34;) &#39;git-gutter:popup-hunk)&#xA;&#xA;;; Jump to next/previous hunk&#xA;(global-set-key (kbd &#34;C-x p&#34;) &#39;git-gutter:previous-hunk)&#xA;(global-set-key (kbd &#34;C-x n&#34;) &#39;git-gutter:next-hunk)&#xA;&#xA;;; Stage current hunk&#xA;(global-set-key (kbd &#34;C-x v s&#34;) &#39;git-gutter:stage-hunk)&#xA;&#xA;;; Revert current hunk&#xA;(global-set-key (kbd &#34;C-x v r&#34;) &#39;git-gutter:revert-hunk)&#xA;&#xA;;; Mark current hunk&#xA;(global-set-key (kbd &#34;C-x v SPC&#34;) #&#39;git-gutter:mark-hunk)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Directory-local variables&lt;/h2&gt; &#xA;&lt;h3&gt;Set starting revision for diffs&lt;/h3&gt; &#xA;&lt;p&gt;Using directory-local variables, you can set the start revision for diffs for any file in the current directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; .dir-locals.el&#xA;((prog-mode . ((git-gutter:start-revision . &#34;my-branch&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;h3&gt;Live updating&lt;/h3&gt; &#xA;&lt;p&gt;If you set &lt;code&gt;git-gutter:update-interval&lt;/code&gt; seconds larger than 0, &lt;code&gt;git-gutter&lt;/code&gt; updates diff information in real-time by idle timer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(git-gutter:update-interval 2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can stop timer by &lt;code&gt;git-gutter:cancel-update-timer&lt;/code&gt; and starts by &lt;code&gt;git-gutter:start-update-timer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Look and feel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter/master/image/git-gutter-multichar.png&#34; alt=&#34;Screenshot of multiple characters in gutter&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change the signs and those faces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(git-gutter:modified-sign &#34;  &#34;) ;; two space&#xA; &#39;(git-gutter:added-sign &#34;++&#34;)    ;; multiple character is OK&#xA; &#39;(git-gutter:deleted-sign &#34;--&#34;))&#xA;&#xA;(set-face-background &#39;git-gutter:modified &#34;purple&#34;) ;; background color&#xA;(set-face-foreground &#39;git-gutter:added &#34;green&#34;)&#xA;(set-face-foreground &#39;git-gutter:deleted &#34;red&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change minor-mode name in mode-line to set &lt;code&gt;git-gutter:lighter&lt;/code&gt;. Default is &#34; GitGutter&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; first character should be a space&#xA;(custom-set-variables&#xA; &#39;(git-gutter:lighter &#34; GG&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using full width characters&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter/master/image/git-gutter-fullwidth.png&#34; alt=&#34;Screenshot of using full-width character as diff sign&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emacs has &lt;code&gt;char-width&lt;/code&gt; function which returns character width. &lt;code&gt;git-gutter.el&lt;/code&gt; uses it for calculating character length of the signs. But &lt;code&gt;char-width&lt;/code&gt; does not work for some full-width characters. So you should explicitly specify window width, if you use full-width character.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(git-gutter:window-width 2)&#xA; &#39;(git-gutter:modified-sign &#34;☁&#34;)&#xA; &#39;(git-gutter:added-sign &#34;☀&#34;)&#xA; &#39;(git-gutter:deleted-sign &#34;☂&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Backends&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter.el&lt;/code&gt; supports following version control systems&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;(1.7.0 or higher)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;Mercurial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;(1.8 or higher)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bazaar.canonical.com/en/&#34;&gt;Bazaar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can set backends which &lt;code&gt;git-gutter.el&lt;/code&gt; will be used. Default value of &lt;code&gt;git-gutter:handled-backends&lt;/code&gt; is &lt;code&gt;&#39;(git)&lt;/code&gt;. If you want to use &lt;code&gt;git-gutter.el&lt;/code&gt; for other VCS, please change value of &lt;code&gt;git-gutter:handled-backends&lt;/code&gt; as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Use for &#39;Git&#39;(`git`), &#39;Mercurial&#39;(`hg`), &#39;Bazaar&#39;(`bzr`), and &#39;Subversion&#39;(`svn`) projects&#xA;(custom-set-variables&#xA; &#39;(git-gutter:handled-backends &#39;(git hg bzr svn)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updates hooks&lt;/h3&gt; &#xA;&lt;p&gt;diff information is updated at hooks in &lt;code&gt;git-gutter:update-hooks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;git-gutter:update-hooks &#39;focus-in-hook)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updates commands&lt;/h3&gt; &#xA;&lt;p&gt;diff information is updated after command in &lt;code&gt;git-gutter:update-commands&lt;/code&gt; executed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;git-gutter:update-commands &#39;other-window)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disabled modes&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;global-git-gutter-mode&lt;/code&gt;, you may want some modes to disable &lt;code&gt;git-gutter-mode&lt;/code&gt;. You can make it by setting &lt;code&gt;git-gutter:disabled-modes&lt;/code&gt; to &lt;code&gt;non-nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; inactivate git-gutter-mode in asm-mode and image-mode&#xA;(custom-set-variables&#xA; &#39;(git-gutter:disabled-modes &#39;(asm-mode image-mode)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Show signs at gutter by visual lines&lt;/h3&gt; &#xA;&lt;p&gt;Emacs folds long line if &lt;code&gt;truncate-lines&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. If &lt;code&gt;git-gutter:visual-line&lt;/code&gt; is non-nil, &lt;code&gt;git-gutter&lt;/code&gt; puts sign by visual lines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(git-gutter:visual-line t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default bahavior is that signs are put by logical lines. value of &lt;code&gt;git-gutter:visual-line&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Show Unchanged Information&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter/master/image/git-gutter-unchanged.png&#34; alt=&#34;Screenshot of highlighting unchanged lines&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter.el&lt;/code&gt; can view unchanged information by setting &lt;code&gt;git-gutter:unchanged-sign&lt;/code&gt;. Like following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(git-gutter:unchanged-sign &#34; &#34;))&#xA;(set-face-background &#39;git-gutter:unchanged &#34;yellow&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default value of &lt;code&gt;git-gutter:unchanged-sign&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Show a separator column&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter/master/image/git-gutter-separator.png&#34; alt=&#34;Screenshot of showing separator between buffer and gutter&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter.el&lt;/code&gt; can display an additional separator character at the right of the changed signs. This is mostly useful when running emacs in a console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(git-gutter:separator-sign &#34;|&#34;))&#xA;(set-face-foreground &#39;git-gutter:separator &#34;yellow&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default value of &lt;code&gt;git-gutter:separator-sign&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please set &lt;code&gt;git-gutter:always-show-separator&lt;/code&gt; to non-nil, if you want to show separator always.&lt;/p&gt; &#xA;&lt;h3&gt;Hide gutter if there are no changes&lt;/h3&gt; &#xA;&lt;p&gt;Hide gutter when there are no changes if &lt;code&gt;git-gutter:hide-gutter&lt;/code&gt; is non-nil. (Default is nil)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(git-gutter:hide-gutter t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pass option to &#39;git diff&#39; command&lt;/h3&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;git diff&lt;/code&gt; option to set &lt;code&gt;git-gutter:diff-option&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; ignore all spaces&#xA;(custom-set-variables&#xA; &#39;(git-gutter:diff-option &#34;-w&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t ask whether commit/revert or not&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter.el&lt;/code&gt; always asks you whether commit/revert or not. If you don&#39;t want, please set &lt;code&gt;git-gutter:ask-p&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Don&#39;t ask me!!&#xA;(custom-set-variables&#xA; &#39;(git-gutter:ask-p nil))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Log/Message Level&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Don&#39;t need log/message.&#xA;(custom-set-variables&#xA; &#39;(git-gutter:verbosity 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default value is 4(&lt;code&gt;0&lt;/code&gt; is lowest, &lt;code&gt;4&lt;/code&gt; is highest).&lt;/p&gt; &#xA;&lt;h3&gt;Run hook&lt;/h3&gt; &#xA;&lt;p&gt;Run hook &lt;code&gt;git-gutter-mode-on-hook&lt;/code&gt; when &lt;code&gt;git-gutter-mode&lt;/code&gt; is turn on, and run hook &lt;code&gt;git-gutter-mode-off-hook&lt;/code&gt; when &lt;code&gt;git-gutter-mode&lt;/code&gt; is turn off.&lt;/p&gt; &#xA;&lt;h2&gt;Statistic&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter.el&lt;/code&gt; provides some statistic API. This is useful for knowing how much code you changed etc. To display them in mode-line is also useful.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;(git-gutter:buffer-hunks)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Count unstaged hunks in current buffer.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;(git-gutter:all-hunks)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Count unstaged hunks in all buffers&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;(git-gutter:statistic)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return statistic unstaged hunks in current buffer. Return value is dot-list. First element is total added lines, second element is total deleted lines.&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jisaacks/GitGutter&#34;&gt;GitGutter&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;GitGutter is Sublime Text plugin.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;vim-gitgutter&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Vim version of GitGutter&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/dgutov/diff-hl&#34;&gt;diff-hl&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;diff-hl&lt;/code&gt; is similar tool based on &lt;code&gt;vc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/nonsequitur/git-gutter-plus&#34;&gt;git-gutter-plus&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Fork of &lt;code&gt;git-gutter.el&lt;/code&gt;. Some features which are not provided &lt;code&gt;git-gutter.el&lt;/code&gt; provides. However git-gutter-plus updates diff information synchronously.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/pkg-info</title>
    <updated>2022-06-20T01:38:28Z</updated>
    <id>tag:github.com,2022-06-20:/emacsorphanage/pkg-info</id>
    <link href="https://github.com/emacsorphanage/pkg-info" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provide information about Emacs packages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pkg-info.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lunaryorn/pkg-info.el/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?dummy&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/lunaryorn/pkg-info.el&#34;&gt;&lt;img src=&#34;https://travis-ci.org/lunaryorn/pkg-info.el.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provide information about Emacs packages.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; with &lt;kbd&gt;M-x package-install RET pkg-info&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;a href=&#34;http://cask.github.io/&#34;&gt;&lt;code&gt;Cask&lt;/code&gt;&lt;/a&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(source melpa)&#xA;&#xA;(depends-on &#34;pkg-info&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This library is compatible with GNU Emacs 24.1 and newer. It will probably work with Emacs 23 as well, if package.el is installed, but it is not tested on Emacs 23 anymore.&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;This library defines the following functions for use in your Emacs extensions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-library-original-version&lt;/code&gt; extracts the &lt;em&gt;original version&lt;/em&gt; from the header of a library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-library-version&lt;/code&gt; extracts the &lt;em&gt;version&lt;/em&gt; from the header of a library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-defining-library-version&lt;/code&gt; extracts the &lt;em&gt;version&lt;/em&gt; from the header of a library defining a function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-defining-library-original-version&lt;/code&gt; extracts the &lt;em&gt;original version&lt;/em&gt; from the header of a library defining a function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-package-version&lt;/code&gt; gets the &lt;em&gt;version&lt;/em&gt; of an installed package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-format-version&lt;/code&gt; formats a &lt;em&gt;version&lt;/em&gt; as human readable string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-get-melpa-recipe&lt;/code&gt; gets the MELPA recipe for a package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-wiki-package-p&lt;/code&gt; determines whether a package was build from EmacsWiki on MELPA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these functions are interactive commands as well.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;version&lt;/em&gt; is the version from the Library Headers, i.e. either from the &lt;code&gt;Version&lt;/code&gt; or from the &lt;code&gt;Package-Version&lt;/code&gt; headers. An &lt;em&gt;original version&lt;/em&gt; is the version from the &lt;code&gt;X-Original-Version&lt;/code&gt; header added by MELPA_ to preserve upstream versions.&lt;/p&gt; &#xA;&lt;p&gt;Versions are represented as version lists, as returned by &lt;code&gt;version-to-list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;pkg-info.el is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;pkg-info.el is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/lunaryorn/pkg-info.el/raw/master/COPYING&#34;&gt;&lt;code&gt;COPYING&lt;/code&gt;&lt;/a&gt; for the complete text of the license.&lt;/p&gt;</summary>
  </entry>
</feed>