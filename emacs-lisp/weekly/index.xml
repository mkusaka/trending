<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-12T01:50:58Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>superdupermart/dotemacs</title>
    <updated>2023-03-12T01:50:58Z</updated>
    <id>tag:github.com,2023-03-12:/superdupermart/dotemacs</id>
    <link href="https://github.com/superdupermart/dotemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;이맥스 설정 파일&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Read me.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Fuco1/dired-hacks</title>
    <updated>2023-03-12T01:50:58Z</updated>
    <id>tag:github.com,2023-03-12:/Fuco1/dired-hacks</id>
    <link href="https://github.com/Fuco1/dired-hacks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of useful dired additions&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-hacks--&#34;&gt;dired-hacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#contribute&#34;&gt;Contribute!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#packages&#34;&gt;Packages&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-hacks-utils&#34;&gt;dired-hacks-utils&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-filter&#34;&gt;dired-filter&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#stack-operations&#34;&gt;Stack operations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#built-in-filters&#34;&gt;Built-in filters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#saved-filters&#34;&gt;Saved filters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#filter-groups&#34;&gt;Filter groups&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#other-features&#34;&gt;Other features&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-avfs&#34;&gt;dired-avfs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-open&#34;&gt;dired-open&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-rainbow&#34;&gt;dired-rainbow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-subtree&#34;&gt;dired-subtree&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#interactive-functions&#34;&gt;Interactive functions&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-ranger&#34;&gt;dired-ranger&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#multi-stage-copypasting-of-files&#34;&gt;Multi-stage copy/pasting of files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#bookmarks&#34;&gt;Bookmarks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-narrow&#34;&gt;dired-narrow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-list&#34;&gt;dired-list&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/dired-hacks/master/#dired-collapse&#34;&gt;dired-collapse&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;dired-hacks &lt;a href=&#34;https://travis-ci.org/Fuco1/dired-hacks&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Fuco1/dired-hacks.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=A5PMGVKCQBT88&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&#34; alt=&#34;Paypal logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/user?u=3282358&amp;amp;ty=h&#34;&gt;&lt;img src=&#34;https://c5.patreon.com/external/logo/logomarkOrange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Collection of useful dired additions. I don&#39;t want this to become another &lt;code&gt;dired+&lt;/code&gt;, so I&#39;m splitting all the functionality into separate mutually independent packages. All shared functionality and helpers will be extracted into a single package &lt;code&gt;dired-hacks-utils&lt;/code&gt;, so that will be the only dependence.&lt;/p&gt; &#xA;&lt;p&gt;In addition, all the packages require &lt;a href=&#34;https://github.com/magnars/dash.el&#34;&gt;dash.el&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please note that only the packages that are listed in this readme are &#34;finished&#34; (means in package repositories, with usable UI etc.). All the other files are work-in-progress packages you could probably use, but it would be a bit more painful.&lt;/p&gt; &#xA;&lt;h1&gt;Contribute!&lt;/h1&gt; &#xA;&lt;p&gt;If you want to support this project, you can do it in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contribute code. Since this collection comes from my own config, it mostly contains stuff I use or find useful. If you have an idea that is not yet implemented and will benefit this project, feel free to implement it and submit a pull request. If you have any concerns whether your contribution will be accepted, ask beforehand. You can email the author or &lt;a href=&#34;https://github.com/Fuco1/dired-hacks/issues/new&#34;&gt;start an issue&lt;/a&gt; on the tracker.&lt;/li&gt; &#xA; &lt;li&gt;Contribute ideas. Even if you can&#39;t code Emacs Lisp, you can still contribute valuable ideas for other programmers to implement. Simply &lt;a href=&#34;https://github.com/Fuco1/dired-hacks/issues/new&#34;&gt;start new issue&lt;/a&gt; on the tracker and submit your suggestion.&lt;/li&gt; &#xA; &lt;li&gt;You can make a financial donation through &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=A5PMGVKCQBT88&#34;&gt;PayPal&lt;/a&gt; or &lt;a href=&#34;https://www.patreon.com/user?u=3282358&amp;amp;ty=h&#34;&gt;Patreon&lt;/a&gt;. If you like dired-hacks and can spare a modest amount on a donation, feel free to do so. These donations are expressions of your gratitude and are used for my personal &#34;rewards&#34; (books, games, music etc.). You can also gift me a game on &lt;a href=&#34;http://steamcommunity.com/profiles/76561198265034071/wishlist&#34;&gt;Steam&lt;/a&gt; or buy something on &lt;a href=&#34;http://www.amazon.com/gp/registry/wishlist/2I8DOQH8OZEUR&#34;&gt;Amazon&lt;/a&gt;. Regardless of the donations, dired-hacks will always be free both as in beer and as in speech.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Packages&lt;/h1&gt; &#xA;&lt;h2&gt;dired-hacks-utils&lt;/h2&gt; &#xA;&lt;p&gt;Set of utility functions used in all the &lt;code&gt;dired-hacks&lt;/code&gt; packages.&lt;/p&gt; &#xA;&lt;p&gt;This package also provides these interactive functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-hacks-next-file&lt;/code&gt; - go to next file, skipping empty and non-file lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-hacks-previous-file&lt;/code&gt; - go to previous file, skipping empty and non-file lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-utils-format-information-line-mode&lt;/code&gt; - Format the information (summary) line file sizes to be human readable (e.g. 1GB instead of 1048576).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;dired-filter&lt;/h2&gt; &#xA;&lt;p&gt;The filtering system is designed after ibuffer: every dired buffer has associated &#34;filter stack&#34; where user can push filters (predicates). These filters are by default logically &#34;anded&#34;, meaning, only the files satsifying all the predicates are shown.&lt;/p&gt; &#xA;&lt;p&gt;Some filters take additional input from the user such as part of name, regexp or extension, other filters only use a predefined predicate such as &#34;show only directories&#34; or &#34;omit dot files&#34;.&lt;/p&gt; &#xA;&lt;p&gt;In addition, there are two &#34;metafilters&#34;, the &lt;code&gt;or&lt;/code&gt; filter and the &lt;code&gt;not&lt;/code&gt; filter. These take other filters as arguments and change their logical interpretation. The &lt;code&gt;or&lt;/code&gt; filter takes the two filters on top of the stack, pops them and pushes a filter that matches files satisfying one or the other (or both) filters. The &lt;code&gt;not&lt;/code&gt; filter pops the top filter and pushes its logical negation.&lt;/p&gt; &#xA;&lt;p&gt;To enable or disable the filters, toggle minor mode &lt;code&gt;dired-filter-mode&lt;/code&gt;. Toggling this mode preserves the filter stack, so you can use it to quickly hide/unhide files filtered by the current filter setup.&lt;/p&gt; &#xA;&lt;p&gt;All the provided interactive functions are available from &lt;code&gt;dired-filter-map&lt;/code&gt;. You can customize &lt;code&gt;dired-filter-prefix&lt;/code&gt; to set a prefix for this map or bind it manually to a prefix of your choice using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(define-key dired-mode-map (kbd &#34;some-key&#34;) dired-filter-map)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The bindings follow a convention where the filters are mapped on lower-case letters or punctuation, operators are mapped on symbols (such as !, |, * etc.) and group commands are mapped on upper-case letters. The exception to this is &lt;code&gt;p&lt;/code&gt; which is bound to &lt;code&gt;dired-filter-pop&lt;/code&gt;, which is a very common operation and warrants a quick binding.&lt;/p&gt; &#xA;&lt;p&gt;In addition to filtering, you can also use the same predicates to only mark files without removing the rest. All the filtering functions of the form &lt;code&gt;dired-filter-by-*&lt;/code&gt; have their marking counterpart &lt;code&gt;dired-filter-mark-by-*&lt;/code&gt;. These are available from &lt;code&gt;dired-filter-mark-map&lt;/code&gt;. You can customize &lt;code&gt;dired-filter-mark-prefix&lt;/code&gt; a prefix for this map or bind it manually to a prefix of your choice using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(define-key dired-mode-map (kbd &#34;some-key&#34;) dired-filter-mark-map)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The marking operations are not placed on stack, instead, the marks are immediately updated by &#34;OR&#34;-ing them together. To remove marks that would otherwise be selected by a filter, use prefix argument (usually bound to &lt;code&gt;C-u&lt;/code&gt;). To logically negate the meaning of the filter, you can call the function with a double prefix argument (usually &lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;C-u&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;You can use saved filters to mark files by calling &lt;code&gt;dired-filter-mark-by-saved-filters&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stack operations&lt;/h3&gt; &#xA;&lt;p&gt;To remove the filter from the stack, use &lt;code&gt;dired-filter-pop&lt;/code&gt; or &lt;code&gt;dired-filter-pop-all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To break a metafilter apart, you can use &lt;code&gt;dired-filter-decompose&lt;/code&gt; to decompose the parts of the metafilter and push them back to the stack.&lt;/p&gt; &#xA;&lt;p&gt;You can transpose the filters on the top of the stack using &lt;code&gt;dired-filter-transpose&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Built-in filters&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a list of built-in filters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-regexp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-extension&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-dot-files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-omit&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-garbage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-predicate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-directory&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-symlink&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-executable&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can see their documentation by calling M-x &lt;code&gt;describe-function&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Specifically, &lt;code&gt;dired-filter-by-omit&lt;/code&gt; removes the files that would be removed by &lt;code&gt;dired-omit-mode&lt;/code&gt;, so you should not need to use both---in fact it is discouraged, as it would make the read-in slower.&lt;/p&gt; &#xA;&lt;p&gt;When called with negative prefix argument, some filters can read multiple values. The resulting predicate is often much faster than having the filter repeated with single argument. Read the documentation to learn more about the calling conventions. Currently, these filters support reading multiple arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-filter-by-extension&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To define your own filters, you can use the macro &lt;code&gt;dired-filter-define&lt;/code&gt;. If you define some interesting filter, please consider contributing it to the upstream.&lt;/p&gt; &#xA;&lt;h3&gt;Saved filters&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the built-in filters and your own custom filters, this package provides an option to save complex compound filters for later use. When you set up a filter stack you would like to save, call &lt;code&gt;dired-filter-save-filters&lt;/code&gt;. You will be prompted for a name under which this stack will be saved.&lt;/p&gt; &#xA;&lt;p&gt;The saved filter will be added to &lt;code&gt;dired-filter-saved-filters&lt;/code&gt; variable, which you can also customize via the customize interface or manually add entries with &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;add-to-list&lt;/code&gt;. If you use customize, calling &lt;code&gt;dired-filter-save-filters&lt;/code&gt; will automatically save the new value into your customize file.&lt;/p&gt; &#xA;&lt;p&gt;You can delete saved filters with &lt;code&gt;dired-filter-delete-saved-filters&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use a saved filter, you can use either &lt;code&gt;dired-filter-add-saved-filters&lt;/code&gt; or &lt;code&gt;dired-filter-load-saved-filters&lt;/code&gt;. The first pushes the saved filter on top of the currently active stack, the second clears current filter stack before loading the saved filter configuration.&lt;/p&gt; &#xA;&lt;p&gt;An example use is to create filters for &#34;logical groups&#34; of files, such as media files, image files or files used when programming in certain environment (for example, show files with .h and .c extensions). Saved filters save you the time of setting up the filters each time you want this specific view.&lt;/p&gt; &#xA;&lt;p&gt;As a concrete example of above, author uses a saved filter &#34;media&#34; with value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(extension &#34;ogg&#34; &#34;flv&#34; &#34;mpg&#34; &#34;avi&#34; &#34;mp4&#34; &#34;mp3&#34;)&#xA;;; show all files matching any of these extensions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filter groups&lt;/h3&gt; &#xA;&lt;p&gt;Furthermore, instead of only filtering the dired buffer by removing lines you are not interested in, you can also group lines together by filters. That is, lines (files, directories...) satisfying a filter will be moved together under a common drawer. This mechanism works in analogy with ibuffer filter groups.&lt;/p&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;dired-filter-group-saved-groups&lt;/code&gt; contains definitions of filter groups. You can create and save multiple filter groups (views) and switch between them by setting the &lt;code&gt;dired-filter-group&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;To enable or disable the filter groups toggle minor mode &lt;code&gt;dired-filter-group-mode&lt;/code&gt;. Toggling this mode preserves the active filter group so you can use it to quickly group and ungroup the files.&lt;/p&gt; &#xA;&lt;p&gt;Here is a screenshot with an active filter group. Notice that regular filtering works also with filter groups.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/qtiDX1c.png&#34; alt=&#34;Filter group&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Placing the point on the drawer header and hitting &lt;code&gt;RET&lt;/code&gt; folds it. Hitting &lt;code&gt;RET&lt;/code&gt; again expands it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/TDUsEKq.png&#34; alt=&#34;Folding&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;dired-filter-group-saved-groups&lt;/code&gt; used in the above screenshot is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;((&#34;default&#34;&#xA;  (&#34;PDF&#34;&#xA;   (extension . &#34;pdf&#34;))&#xA;  (&#34;LaTeX&#34;&#xA;   (extension &#34;tex&#34; &#34;bib&#34;))&#xA;  (&#34;Org&#34;&#xA;   (extension . &#34;org&#34;))&#xA;  (&#34;Archives&#34;&#xA;   (extension &#34;zip&#34; &#34;rar&#34; &#34;gz&#34; &#34;bz2&#34; &#34;tar&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can of course be more imaginative and use filtering based on other criteria than just extensions ;)&lt;/p&gt; &#xA;&lt;h3&gt;Other features&lt;/h3&gt; &#xA;&lt;p&gt;You can clone the currently visible dired buffer by calling &lt;code&gt;dired-filter-clone-filtered-buffer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;dired-avfs&lt;/h2&gt; &#xA;&lt;p&gt;Adds &lt;a href=&#34;http://avf.sourceforge.net/&#34;&gt;avfs&lt;/a&gt; support for seamless archive browsing. This extension therefore depends on the presence of &lt;code&gt;avfsd&lt;/code&gt; on your system. In debian-derived distributions you can usually do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt-get install avfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;avfs&lt;/code&gt; is probably also available for Mac OS. You&#39;re out of luck on Windows, sorry.&lt;/p&gt; &#xA;&lt;p&gt;Once the daemon is installed, run it with &lt;code&gt;mountavfs&lt;/code&gt; and everything &#34;Should Just Work™&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;dired-open&lt;/h2&gt; &#xA;&lt;p&gt;While emacs already has the &lt;code&gt;auto-mode-alist&lt;/code&gt;, this is often insufficient. Many times, you want to open media files, pdfs or other documents with an external application. There&#39;s remedy for that too, namely &lt;code&gt;dired-guess-shell-alist-user&lt;/code&gt;, but that is still not as convenient as just hitting enter.&lt;/p&gt; &#xA;&lt;p&gt;This package adds a mechanism to add &#34;hooks&#34; to &lt;code&gt;dired-find-file&lt;/code&gt; that will run before emacs tries its own mechanisms to open the file, thus enabling you to launch other application or code and suspend the default behaviour.&lt;/p&gt; &#xA;&lt;p&gt;By default, two additional methods are enabled, &lt;code&gt;dired-open-by-extension&lt;/code&gt; and &lt;code&gt;dired-open-subdir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This package also provides other convenient hooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-open-xdg&lt;/code&gt; - try to open the file using &lt;code&gt;xdg-open&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-open-guess-shell-alist&lt;/code&gt; - try to open the file by launching applications from &lt;code&gt;dired-guess-shell-alist-user&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-open-call-function-by-extension&lt;/code&gt; - call an elisp function based on extension.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are not used by default.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the list of functions to try by customizing &lt;code&gt;dired-open-functions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To fall back to the default &lt;code&gt;dired-find-file&lt;/code&gt;, you can provide the prefix argument (usually &lt;code&gt;C-u&lt;/code&gt;) to the &lt;code&gt;dired-open-file&lt;/code&gt; function. This is useful for example when you configure html files to be opened in browser and you want to edit the file instead of view it.&lt;/p&gt; &#xA;&lt;p&gt;Note also that this package can handle calls when point is not on a line representing a file---an example hook is provided to open a subdirectory under point if point is on the subdir line, see &lt;code&gt;dired-open-subdir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you write your own handler, make sure they do &lt;em&gt;not&lt;/em&gt; throw errors but instead return nil if they can&#39;t proceed. Please, don&#39;t forget to submit interesting handlers!&lt;/p&gt; &#xA;&lt;h2&gt;dired-rainbow&lt;/h2&gt; &#xA;&lt;p&gt;This package adds more customizable highlighting for files in dired listings. The group &lt;code&gt;dired-faces&lt;/code&gt; provides only nine faces and isn&#39;t very fine-grained.&lt;/p&gt; &#xA;&lt;p&gt;The definitions are added by several macros, currently available are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-rainbow-define&lt;/code&gt; - add face by file extension&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-rainbow-define-chmod&lt;/code&gt; - add face by file permissions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can display their documentation by calling (substituting the desired macro name):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x describe-function RET dired-rainbow-define RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are some example uses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(defconst my-dired-media-files-extensions&#xA;  &#39;(&#34;mp3&#34; &#34;mp4&#34; &#34;MP3&#34; &#34;MP4&#34; &#34;avi&#34; &#34;mpg&#34; &#34;flv&#34; &#34;ogg&#34;)&#xA;  &#34;Media files.&#34;)&#xA;&#xA;(dired-rainbow-define html &#34;#4e9a06&#34; (&#34;htm&#34; &#34;html&#34; &#34;xhtml&#34;))&#xA;(dired-rainbow-define media &#34;#ce5c00&#34; my-dired-media-files-extensions)&#xA;&#xA;; boring regexp due to lack of imagination&#xA;(dired-rainbow-define log (:inherit default&#xA;                           :italic t) &#34;.*\\.log&#34;)&#xA;&#xA;; highlight executable files, but not directories&#xA;(dired-rainbow-define-chmod executable-unix &#34;Green&#34; &#34;-[rw-]+x.*&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Putting it all together, the following is a basic setup (essentially a pseudo-port of &lt;a href=&#34;https://github.com/trapd00r/LS_COLORS&#34;&gt;LS_COLORS&lt;/a&gt; obtained by inspecting a terminal and approximating colors with &lt;a href=&#34;https://tailwindcss.com/docs/colors/&#34;&gt;Tailwind CSS&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(use-package dired-rainbow&#xA;  :config&#xA;  (progn&#xA;    (dired-rainbow-define-chmod directory &#34;#6cb2eb&#34; &#34;d.*&#34;)&#xA;    (dired-rainbow-define html &#34;#eb5286&#34; (&#34;css&#34; &#34;less&#34; &#34;sass&#34; &#34;scss&#34; &#34;htm&#34; &#34;html&#34; &#34;jhtm&#34; &#34;mht&#34; &#34;eml&#34; &#34;mustache&#34; &#34;xhtml&#34;))&#xA;    (dired-rainbow-define xml &#34;#f2d024&#34; (&#34;xml&#34; &#34;xsd&#34; &#34;xsl&#34; &#34;xslt&#34; &#34;wsdl&#34; &#34;bib&#34; &#34;json&#34; &#34;msg&#34; &#34;pgn&#34; &#34;rss&#34; &#34;yaml&#34; &#34;yml&#34; &#34;rdata&#34;))&#xA;    (dired-rainbow-define document &#34;#9561e2&#34; (&#34;docm&#34; &#34;doc&#34; &#34;docx&#34; &#34;odb&#34; &#34;odt&#34; &#34;pdb&#34; &#34;pdf&#34; &#34;ps&#34; &#34;rtf&#34; &#34;djvu&#34; &#34;epub&#34; &#34;odp&#34; &#34;ppt&#34; &#34;pptx&#34;))&#xA;    (dired-rainbow-define markdown &#34;#ffed4a&#34; (&#34;org&#34; &#34;etx&#34; &#34;info&#34; &#34;markdown&#34; &#34;md&#34; &#34;mkd&#34; &#34;nfo&#34; &#34;pod&#34; &#34;rst&#34; &#34;tex&#34; &#34;textfile&#34; &#34;txt&#34;))&#xA;    (dired-rainbow-define database &#34;#6574cd&#34; (&#34;xlsx&#34; &#34;xls&#34; &#34;csv&#34; &#34;accdb&#34; &#34;db&#34; &#34;mdb&#34; &#34;sqlite&#34; &#34;nc&#34;))&#xA;    (dired-rainbow-define media &#34;#de751f&#34; (&#34;mp3&#34; &#34;mp4&#34; &#34;MP3&#34; &#34;MP4&#34; &#34;avi&#34; &#34;mpeg&#34; &#34;mpg&#34; &#34;flv&#34; &#34;ogg&#34; &#34;mov&#34; &#34;mid&#34; &#34;midi&#34; &#34;wav&#34; &#34;aiff&#34; &#34;flac&#34;))&#xA;    (dired-rainbow-define image &#34;#f66d9b&#34; (&#34;tiff&#34; &#34;tif&#34; &#34;cdr&#34; &#34;gif&#34; &#34;ico&#34; &#34;jpeg&#34; &#34;jpg&#34; &#34;png&#34; &#34;psd&#34; &#34;eps&#34; &#34;svg&#34;))&#xA;    (dired-rainbow-define log &#34;#c17d11&#34; (&#34;log&#34;))&#xA;    (dired-rainbow-define shell &#34;#f6993f&#34; (&#34;awk&#34; &#34;bash&#34; &#34;bat&#34; &#34;sed&#34; &#34;sh&#34; &#34;zsh&#34; &#34;vim&#34;))&#xA;    (dired-rainbow-define interpreted &#34;#38c172&#34; (&#34;py&#34; &#34;ipynb&#34; &#34;rb&#34; &#34;pl&#34; &#34;t&#34; &#34;msql&#34; &#34;mysql&#34; &#34;pgsql&#34; &#34;sql&#34; &#34;r&#34; &#34;clj&#34; &#34;cljs&#34; &#34;scala&#34; &#34;js&#34;))&#xA;    (dired-rainbow-define compiled &#34;#4dc0b5&#34; (&#34;asm&#34; &#34;cl&#34; &#34;lisp&#34; &#34;el&#34; &#34;c&#34; &#34;h&#34; &#34;c++&#34; &#34;h++&#34; &#34;hpp&#34; &#34;hxx&#34; &#34;m&#34; &#34;cc&#34; &#34;cs&#34; &#34;cp&#34; &#34;cpp&#34; &#34;go&#34; &#34;f&#34; &#34;for&#34; &#34;ftn&#34; &#34;f90&#34; &#34;f95&#34; &#34;f03&#34; &#34;f08&#34; &#34;s&#34; &#34;rs&#34; &#34;hi&#34; &#34;hs&#34; &#34;pyc&#34; &#34;.java&#34;))&#xA;    (dired-rainbow-define executable &#34;#8cc4ff&#34; (&#34;exe&#34; &#34;msi&#34;))&#xA;    (dired-rainbow-define compressed &#34;#51d88a&#34; (&#34;7z&#34; &#34;zip&#34; &#34;bz2&#34; &#34;tgz&#34; &#34;txz&#34; &#34;gz&#34; &#34;xz&#34; &#34;z&#34; &#34;Z&#34; &#34;jar&#34; &#34;war&#34; &#34;ear&#34; &#34;rar&#34; &#34;sar&#34; &#34;xpi&#34; &#34;apk&#34; &#34;xz&#34; &#34;tar&#34;))&#xA;    (dired-rainbow-define packaged &#34;#faad63&#34; (&#34;deb&#34; &#34;rpm&#34; &#34;apk&#34; &#34;jad&#34; &#34;jar&#34; &#34;cab&#34; &#34;pak&#34; &#34;pk3&#34; &#34;vdf&#34; &#34;vpk&#34; &#34;bsp&#34;))&#xA;    (dired-rainbow-define encrypted &#34;#ffed4a&#34; (&#34;gpg&#34; &#34;pgp&#34; &#34;asc&#34; &#34;bfe&#34; &#34;enc&#34; &#34;signature&#34; &#34;sig&#34; &#34;p12&#34; &#34;pem&#34;))&#xA;    (dired-rainbow-define fonts &#34;#6cb2eb&#34; (&#34;afm&#34; &#34;fon&#34; &#34;fnt&#34; &#34;pfb&#34; &#34;pfm&#34; &#34;ttf&#34; &#34;otf&#34;))&#xA;    (dired-rainbow-define partition &#34;#e3342f&#34; (&#34;dmg&#34; &#34;iso&#34; &#34;bin&#34; &#34;nrg&#34; &#34;qcow&#34; &#34;toast&#34; &#34;vcd&#34; &#34;vmdk&#34; &#34;bak&#34;))&#xA;    (dired-rainbow-define vc &#34;#0074d9&#34; (&#34;git&#34; &#34;gitignore&#34; &#34;gitattributes&#34; &#34;gitmodules&#34;))&#xA;    (dired-rainbow-define-chmod executable-unix &#34;#38c172&#34; &#34;-.*x.*&#34;)&#xA;    )) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: the &lt;a href=&#34;https://jonasjacek.github.io/colors/&#34;&gt;256 color cheat sheet&lt;/a&gt; includes conversion from the Xterm colors used by LS_COLORS to the HEX codes used by &lt;code&gt;dired-rainbow&lt;/code&gt;. Using that conversion an enterprising individual with a grasp of &lt;code&gt;sed&lt;/code&gt;/&lt;code&gt;awk&lt;/code&gt; could put together a &lt;em&gt;real&lt;/em&gt; port of &lt;a href=&#34;https://github.com/trapd00r/LS_COLORS&#34;&gt;LS_COLORS&lt;/a&gt; to &lt;code&gt;dired-rainbow&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Related packages&lt;/h3&gt; &#xA;&lt;p&gt;There is a related package called &lt;a href=&#34;https://github.com/purcell/diredfl/&#34;&gt;diredfl&lt;/a&gt; which extracts the extra fontification rules from Dired+ and packages them in a modern Emacsy way. They enhance things like the date face, permissions face and similar. Check it out!&lt;/p&gt; &#xA;&lt;h2&gt;dired-subtree&lt;/h2&gt; &#xA;&lt;p&gt;The basic command to work with subdirectories in dired is &lt;code&gt;i&lt;/code&gt;, which inserts the subdirectory as a separate listing in the active dired buffer.&lt;/p&gt; &#xA;&lt;p&gt;This package defines function &lt;code&gt;dired-subtree-insert&lt;/code&gt; which instead inserts the subdirectory directly below its line in the original listing, and indent the listing of subdirectory to resemble a tree-like structure (somewhat similar to &lt;code&gt;tree(1)&lt;/code&gt; except the pretty graphics). The tree display is somewhat more intuitive than the default &#34;flat&#34; subdirectory manipulation provided by &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are several presentation options and faces you can customize to change the way subtrees are displayed.&lt;/p&gt; &#xA;&lt;p&gt;You can further remove the unwanted lines from the subtree by using &lt;code&gt;k&lt;/code&gt; command or some of the built-in &#34;focusing&#34; functions, such as &lt;code&gt;dired-subtree-only-*&lt;/code&gt; (see list below).&lt;/p&gt; &#xA;&lt;p&gt;If you have the package &lt;code&gt;dired-filter&lt;/code&gt;, you can additionally filter the subtrees with global or local filters.&lt;/p&gt; &#xA;&lt;p&gt;A demo of basic functionality is available on youtube: &lt;a href=&#34;https://www.youtube.com/watch?v=z26b8HKFsNE&#34;&gt;https://www.youtube.com/watch?v=z26b8HKFsNE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interactive functions&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a list of available interactive functions. You can read more about each one by using the built-in documentation facilities of emacs. It is adviced to place bindings for these into a convenient prefix key map, for example &lt;code&gt;C-,&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-insert&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-remove&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-toggle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-cycle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-revert&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-narrow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-up&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-down&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-next-sibling&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-previous-sibling&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-beginning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-end&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-mark-subtree&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-unmark-subtree&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-only-this-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-subtree-only-this-directory&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have package &lt;code&gt;dired-filter&lt;/code&gt;, additional command &lt;code&gt;dired-subtree-apply-filter&lt;/code&gt; is available.&lt;/p&gt; &#xA;&lt;h2&gt;dired-ranger&lt;/h2&gt; &#xA;&lt;p&gt;This package implements useful features present in the &lt;a href=&#34;http://ranger.github.io/&#34;&gt;ranger&lt;/a&gt; file manager which are missing in dired.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-stage copy/pasting of files&lt;/h3&gt; &#xA;&lt;p&gt;A feature present in most orthodox file managers is a &#34;two-stage&#34; copy/paste process. Roughly, the user first selects some files, &#34;copies&#34; them into a clipboard and then pastes them to the target location. This workflow is missing in dired.&lt;/p&gt; &#xA;&lt;p&gt;In dired, user first marks the files, then issues the &lt;code&gt;dired-do-copy&lt;/code&gt; command which prompts for the destination. The files are then copied there. The &lt;code&gt;dired-dwim-target&lt;/code&gt; option makes this a bit friendlier---if two dired windows are opened, the other one is automatically the default target.&lt;/p&gt; &#xA;&lt;p&gt;With the multi-stage operations, you can gather files from &lt;em&gt;multiple&lt;/em&gt; dired buffers into a single &#34;clipboard&#34;, then copy or move all of them to the target location. Another huge advantage is that if the target dired buffer is already opened, switching to it via ido or ibuffer is often faster than selecting the path.&lt;/p&gt; &#xA;&lt;p&gt;Call &lt;code&gt;dired-ranger-copy&lt;/code&gt; to add marked files (or the file under point if no files are marked) to the &#34;clipboard&#34;. With non-nil prefix argument, add the marked files to the current clipboard.&lt;/p&gt; &#xA;&lt;p&gt;Past clipboards are stored in &lt;code&gt;dired-ranger-copy-ring&lt;/code&gt; so you can repeat the past pastes.&lt;/p&gt; &#xA;&lt;p&gt;Call &lt;code&gt;dired-ranger-paste&lt;/code&gt; or &lt;code&gt;dired-ranger-move&lt;/code&gt; to copy or move the files in the current clipboard to the current dired buffer. With raw prefix argument (usually C-u), the clipboard is not cleared, so you can repeat the copy operation in another dired buffer.&lt;/p&gt; &#xA;&lt;h3&gt;Bookmarks&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;dired-ranger-bookmark&lt;/code&gt; to bookmark current dired buffer. You can later quickly revisit it by calling &lt;code&gt;dired-ranger-bookmark-visit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A bookmark name is any single character, letter, digit or a symbol.&lt;/p&gt; &#xA;&lt;p&gt;A special bookmark with name &lt;code&gt;dired-ranger-bookmark-LRU&lt;/code&gt; represents the least recently used dired buffer. Its default value is `. If you bind &lt;code&gt;dired-ranger-bookmark-visit&lt;/code&gt; to the same keybinding, hitting `` will instantly bring you to the previously used dired buffer. This can be used to toggle between two dired buffers in a very fast way.&lt;/p&gt; &#xA;&lt;p&gt;These bookmarks are not persistent. If you want persistent bookmarks use the bookmarks provided by emacs, see (info &#34;(emacs) Bookmarks&#34;).&lt;/p&gt; &#xA;&lt;h2&gt;dired-narrow&lt;/h2&gt; &#xA;&lt;p&gt;This package provides live filtering of files in dired buffers. In general, after calling the respective narrowing function you type a filter string into the minibuffer. After each change the changes automatically reflect in the buffer. Typing C-g will cancel the narrowing and restore the original view, typing RET will exit the live filtering mode and leave the dired buffer in the narrowed state. To bring it back to the original view, you can call &lt;code&gt;revert-buffer&lt;/code&gt; (usually bound to &lt;kbd&gt;g&lt;/kbd&gt;).&lt;/p&gt; &#xA;&lt;p&gt;During the filtering process, several special functions are available. You can customize the binding by changing &lt;code&gt;dired-narrow-map&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-narrow-next-file&lt;/code&gt; (&lt;kbd&gt;&amp;lt;down&amp;gt;&lt;/kbd&gt; or &lt;kbd&gt;C-n&lt;/kbd&gt;) - move the point to the next file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-narrow-previous-file&lt;/code&gt; (&lt;kbd&gt;&amp;lt;up&amp;gt;&lt;/kbd&gt; or &lt;kbd&gt;C-p&lt;/kbd&gt;) - move the point to the previous file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-narrow-enter-directory&lt;/code&gt; (&lt;kbd&gt;&amp;lt;right&amp;gt;&lt;/kbd&gt; or &lt;kbd&gt;C-j&lt;/kbd&gt;) - descend into the directory under point and immediately go back to narrowing mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can customize what happens after exiting the live filtering mode by customizing &lt;code&gt;dired-narrow-exit-action&lt;/code&gt;. &lt;code&gt;dired-narrow-exit-action&lt;/code&gt; may be executed automatically, when there is only one file left while narrowing. In order to enable this feature, add &lt;code&gt;(setq dired-narrow-exit-when-1-left t)&lt;/code&gt; to your config. It makes sense when you use find-file as your exit action, e.g. &lt;code&gt;(setq dired-narrow-exit-action &#39;dired-narrow-find-file)&lt;/code&gt;. A chosen file will be quickly highlighted before executing &lt;code&gt;dired-narrow-exit-action&lt;/code&gt;. This behavior is controlled by variables &lt;code&gt;dired-narrow-enable-blinking&lt;/code&gt;, &lt;code&gt;dired-narrow-blink-time&lt;/code&gt; and by a face &lt;code&gt;dired-narrow-blink&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These narrowing functions are provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-narrow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-narrow-regexp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-narrow-fuzzy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also create your own narrowing functions quite easily. To define new narrowing function, use &lt;code&gt;dired-narrow--internal&lt;/code&gt; and pass it an apropriate filter. The filter should take one argument which is the filter string from the minibuffer. It is then called at each line that describes a file with point at the beginning of the file name. If the filter returns nil, the file is removed from the view. As an inspiration, look at the built-in functions mentioned above.&lt;/p&gt; &#xA;&lt;h2&gt;dired-list&lt;/h2&gt; &#xA;&lt;p&gt;Produce a file listing with a shell incantation and make a dired out of it!&lt;/p&gt; &#xA;&lt;p&gt;This package provides one principal function, &lt;code&gt;dired-list&lt;/code&gt; which can be used to produce dired buffers from shell programs outputing text roughly in the format of &lt;code&gt;la -ls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For most standard output formats the default filter and sentinel should work, but you can also provide your own if the situation requires it.&lt;/p&gt; &#xA;&lt;p&gt;Most of the time you can pipe a zero-delimited list of files to &lt;code&gt;ls&lt;/code&gt; through &lt;code&gt;xargs(1)&lt;/code&gt; using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;| xargs -I &#39;{}&#39; -0 ls -l &#39;{}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which creates a compatible listing. For more information read the documentation of &lt;code&gt;dired-list&lt;/code&gt;, for example by invoking&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C-h f dired-list RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in emacs.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the generic interface this package implements common listings (patches and extensions welcome!), these are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-list-mpc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-list-git-ls-files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-list-hg-locate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-list-locate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-list-find-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-list-find-name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dired-list-grep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;dired-collapse&lt;/h2&gt; &#xA;&lt;p&gt;Often times we find ourselves in a situation where a single file or directory is nested in a chain of nested directories with no other content. This is sometimes due to various mandatory layouts demanded by packaging tools or tools generating these deeply-nested &#34;unique&#34; paths to disambiguate architectures or versions (but we often use only one anyway). If the user wants to access these directories they have to quite needlessly drill-down through varying number of &#34;uninteresting&#34; directories to get to the content.&lt;/p&gt; &#xA;&lt;p&gt;This minor mode is in main inspired by how GitHub renders these paths: if there is a chain of directories where each one only has one child, they are concatenated together and shown on the first level in this collapsed form. When the user clicks this collapsed directory they are immediately brought to the deepest directory with some actual content.&lt;/p&gt; &#xA;&lt;p&gt;To enable or disable this functionality use &lt;code&gt;dired-collapse-mode&lt;/code&gt; to toggle it for the current dired buffer.&lt;/p&gt; &#xA;&lt;p&gt;If the deepest directory contains only a single file this file is displayed instead of the last directory. This way we can get directly to the file itself. This is often helpful with config files which are stored in their own directories, for example in &lt;code&gt;~/.config/foo/config&lt;/code&gt; and similar situations.&lt;/p&gt; &#xA;&lt;p&gt;The files or directories re-inserted in this manner will also have updated permissions, file sizes and modification dates so they truly correspond to the properties of the file being shown.&lt;/p&gt; &#xA;&lt;p&gt;The path to the deepest file is dimmed with the &lt;code&gt;shadow&lt;/code&gt; face so that it does not distract but at the same time is still available for inspection.&lt;/p&gt; &#xA;&lt;p&gt;The mode is integrated with &lt;code&gt;dired-rainbow&lt;/code&gt; so the nested files are properly colored according to user&#39;s rules.&lt;/p&gt; &#xA;&lt;p&gt;The directory without collapsed path might look something like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/Xje5Nmo.png&#34; alt=&#34;before&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After collapsing:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/mm6gFbX.png&#34; alt=&#34;after&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>practicalli/spacemacs-config</title>
    <updated>2023-03-12T01:50:58Z</updated>
    <id>tag:github.com,2023-03-12:/practicalli/spacemacs-config</id>
    <link href="https://github.com/practicalli/spacemacs-config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;rich Clojure &amp; LSP config for Spacemacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Practicalli Spacemacs configuration&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;██████╗ ██████╗  █████╗  ██████╗████████╗██╗ ██████╗ █████╗ ██╗     ██╗     ██╗&#xA;██╔══██╗██╔══██╗██╔══██╗██╔════╝╚══██╔══╝██║██╔════╝██╔══██╗██║     ██║     ██║&#xA;██████╔╝██████╔╝███████║██║        ██║   ██║██║     ███████║██║     ██║     ██║&#xA;██╔═══╝ ██╔══██╗██╔══██║██║        ██║   ██║██║     ██╔══██║██║     ██║     ██║&#xA;██║     ██║  ██║██║  ██║╚██████╗   ██║   ██║╚██████╗██║  ██║███████╗███████╗██║&#xA;╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;User configuration to support the &lt;a href=&#34;https://practical.li/spacemacs&#34;&gt;Practicalli Spacemacs book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;recommended layers for use for enhanced Clojure development experience&lt;/li&gt; &#xA; &lt;li&gt;numerous tweaks for general &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/&#34;&gt;Spacemacs&lt;/a&gt; usage&lt;/li&gt; &#xA; &lt;li&gt;snippets (code and configuration templates) for clojure and markdown languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://practical.li/spacemacs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/practicalli/graphic-design/live/book-covers/practicalli-spacemacs-book-banner.png&#34; alt=&#34;Spacemacs Practicalli - Interactive Clojure development with Emacs and CIDER&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://practical.li/spacemacs/install-spacemacs/&#34;&gt;Practicalli Spacemacs - install spacemacs&lt;/a&gt; details installation and pre-install requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback &amp;amp; Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://practical.li/spacemacs/introduction/contributing/&#34;&gt;contributing guide for all Practicalli books and configurations&lt;/a&gt;. Thank you.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Design&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;dotspacemacs/user-config&lt;/code&gt; section includes additional configuration and is defined across several files to make it easier to manage updates to the configuration over time and avoid merging changes with your own customisation.&lt;/p&gt; &#xA;&lt;p&gt;Loaded configuration files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clojure-config.el&lt;/code&gt; - clojure-mode options, evil-cleverparents enable, portal tap&amp;gt; on nrepl &amp;amp; keybindings, custom elisp functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;theme-config.el&lt;/code&gt; - theme and mode-line configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org-config.el&lt;/code&gt; - notes and task faces and workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version-control-config.el&lt;/code&gt; - git, Magit and Forge configuration (predominantly forge config)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;user-config.el&lt;/code&gt; - general config tweaks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;eshell-config.el&lt;/code&gt; defines a custom prompt for eshell, although this configuration file is not loaded. Practicalli now uses vterm to use the operating system shell in a terminal popup window.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;load-file&lt;/code&gt; function includes the code from each file during startup. Comment the &lt;code&gt;load-file&lt;/code&gt; expression if that configuration is not required, or add your own configuration files to easily extend the Practicalli configuration without having to merge changes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.spacemacs.d/init.el&lt;/code&gt; is main Spacemacs configuration file (although a $HOME/.spacemacs) file will supersede this configuration and should therefore be removed.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;Discuss this guide &lt;a href=&#34;https://clojurians.slack.com/messages/practicalli&#34;&gt;on #practicalli channel of the Clojurians Slack community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://practical.li/blog/posts/cloure-community-getting-help/&#34;&gt;Clojurians community - Getting Help&lt;/a&gt; shows other ways to get help with Clojure.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor Practicalli&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/practicalli-john/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/practicalli/graphic-design/live/buttons/practicalli-github-sponsors-button.png&#34; alt=&#34;Sponsor practicalli-john&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The majority of my work is focused on the &lt;a href=&#34;https://practical.li/&#34;&gt;Practicalli series of books and videos&lt;/a&gt; and an advisory role with several communities&lt;/p&gt; &#xA;&lt;p&gt;Thank you to &lt;a href=&#34;https://www.cognitect.com/&#34;&gt;Cognitect&lt;/a&gt;, &lt;a href=&#34;https://nubank.com.br/&#34;&gt;Nubank&lt;/a&gt; and a wide range of other &lt;a href=&#34;https://github.com/sponsors/practicalli-john#sponsors&#34;&gt;sponsors&lt;/a&gt; for your continued support&lt;/p&gt; &#xA;&lt;p&gt;Thank you&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://practical.li/&#34;&gt;practical.li&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>