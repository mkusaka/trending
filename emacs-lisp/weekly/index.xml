<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-14T01:54:31Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>purcell/exec-path-from-shell</title>
    <updated>2023-05-14T01:54:31Z</updated>
    <id>tag:github.com,2023-05-14:/purcell/exec-path-from-shell</id>
    <link href="https://github.com/purcell/exec-path-from-shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make Emacs use the $PATH set up by the user&#39;s shell&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/exec-path-from-shell&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/exec-path-from-shell-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/exec-path-from-shell&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/exec-path-from-shell-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/exec-path-from-shell/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/exec-path-from-shell/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;exec-path-from-shell&lt;/h1&gt; &#xA;&lt;p&gt;A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user&#39;s shell.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Ever find that a command works in your shell, but not in Emacs?&lt;/p&gt; &#xA;&lt;p&gt;This happens a lot on OS X, where an Emacs instance launched as a GUI app inherits a default minimal set of environment variables that are probably not the ones you see in a terminal window. Similarly, if you start Emacs as a daemon from &lt;code&gt;systemd&lt;/code&gt; or &lt;code&gt;launchd&lt;/code&gt;, it will run with a default set of environment variables.&lt;/p&gt; &#xA;&lt;p&gt;This library solves this problem by copying important environment variables from the user&#39;s shell: it works by asking your shell to print out the variables of interest, then copying them into the Emacs environment.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;If the path printed by evaluating &lt;code&gt;(getenv &#34;SHELL&#34;)&lt;/code&gt; in Emacs points at &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, this should work fine.&lt;/p&gt; &#xA;&lt;p&gt;At a minimum, this package assumes that your shell is at least UNIX-y: if &lt;code&gt;(getenv &#34;SHELL&#34;)&lt;/code&gt; evaluates to something like &lt;code&gt;&#34;.../cmdproxy.exe&#34;&lt;/code&gt;, this package probably isn&#39;t for you.&lt;/p&gt; &#xA;&lt;p&gt;Further, if you use a non-POSIX-standard shell such as &lt;code&gt;tcsh&lt;/code&gt; or &lt;code&gt;fish&lt;/code&gt;, your shell will be asked to execute &lt;code&gt;sh&lt;/code&gt; as a subshell in order to print out the variables in a format which can be reliably parsed. &lt;code&gt;sh&lt;/code&gt; must be a POSIX-compliant shell in this case.&lt;/p&gt; &#xA;&lt;p&gt;Note that shell variables which have not been exported as environment variables (e.g. using the &#34;export&#34; keyword) may not be visible to `exec-path-from-shell&#39;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installable packages are available via MELPA: do &lt;code&gt;M-x package-install RET exec-path-from-shell RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;a href=&#34;https://github.com/purcell/exec-path-from-shell/tags&#34;&gt;download&lt;/a&gt; the latest release or clone the repository, and install &lt;code&gt;exec-path-from-shell.el&lt;/code&gt; with &lt;code&gt;M-x package-install-file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;init.el&lt;/code&gt; (after calling &lt;code&gt;package-initialize&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(when (memq window-system &#39;(mac ns x))&#xA;  (exec-path-from-shell-initialize))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets &lt;code&gt;$MANPATH&lt;/code&gt;, &lt;code&gt;$PATH&lt;/code&gt; and &lt;code&gt;exec-path&lt;/code&gt; from your shell, but only when executed in a GUI frame on OS X and Linux.&lt;/p&gt; &#xA;&lt;p&gt;If you launch Emacs as a daemon from &lt;code&gt;systemd&lt;/code&gt; or similar, you might like to use the following snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(when (daemonp)&#xA;  (exec-path-from-shell-initialize))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can copy values of other environment variables by customizing &lt;code&gt;exec-path-from-shell-variables&lt;/code&gt; before invoking &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt;, or by calling &lt;code&gt;exec-path-from-shell-copy-env&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(exec-path-from-shell-copy-env &#34;PYTHONPATH&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function may also be called interactively.&lt;/p&gt; &#xA;&lt;p&gt;The author uses the following configuration snippet before calling &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(dolist (var &#39;(&#34;SSH_AUTH_SOCK&#34; &#34;SSH_AGENT_PID&#34; &#34;GPG_AGENT_INFO&#34; &#34;LANG&#34; &#34;LC_CTYPE&#34; &#34;NIX_SSL_CERT_FILE&#34; &#34;NIX_PATH&#34;))&#xA;  (add-to-list &#39;exec-path-from-shell-variables var))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up your shell startup files correctly&lt;/h3&gt; &#xA;&lt;p&gt;Note that your shell will inherit Emacs&#39;s environment variables when it is run by &lt;code&gt;exec-path-from-shell&lt;/code&gt; -- to avoid surprises your config files should therefore set the environment variables to their exact desired final values, i.e. don&#39;t do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=/usr/local/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but instead do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=/usr/local/bin:/usr/bin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To be safe, &lt;code&gt;exec-path-from-shell&lt;/code&gt; starts an interactive (and login) shell by default, but this can be much slower than necessary. Interactive shells often have fancy features enabled that are only helpful when one interacts directly with the shell, and this can frequently cause startup time to exceed 750ms. This can be avoided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow best practice by setting your environment variables so that they are available to both interactive and non-interactive shells. In practical terms, for most people this means setting them in &lt;code&gt;~/.profile&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zshenv&lt;/code&gt; instead of &lt;code&gt;~/.bashrc&lt;/code&gt; and &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Once a non-interactive shell sets your environment variables correctly, adjust &lt;code&gt;exec-path-from-shell-arguments&lt;/code&gt; appropriately (often to &lt;code&gt;nil&lt;/code&gt;) before calling &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt; so that it will start a non-interactive shell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more about how popular shells load start-up files, read &lt;a href=&#34;https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html&#34;&gt;this helpful article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Making &lt;code&gt;exec-path-from-shell&lt;/code&gt; faster&lt;/h2&gt; &#xA;&lt;p&gt;If evaluation takes more than &lt;code&gt;exec-path-from-shell-warn-duration-millis&lt;/code&gt; (500ms by default) then &lt;code&gt;exec-path-from-shell&lt;/code&gt; will print a warning.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-interactive shells start up faster. Follow the steps in the section above so that you can run your shell without &lt;code&gt;-i&lt;/code&gt; and still get the right environment variable settings. When &lt;code&gt;&#34;-i&#34;&lt;/code&gt; is then removed from &lt;code&gt;exec-path-from-shell-arguments&lt;/code&gt;, this package becomes more efficient.&lt;/li&gt; &#xA; &lt;li&gt;Invoking the shell has a non-trivial overhead in any case. Don&#39;t call &lt;code&gt;exec-path-from-shell-copy-env&lt;/code&gt; repeatedly, since each invocation starts a shell. Instead, set &lt;code&gt;exec-path-from-shell-variables&lt;/code&gt; to the full list of vars you want, and call &lt;code&gt;exec-path-from-shell-initialize&lt;/code&gt; once.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Further help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-h f exec-path-from-shell-initialize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-h f exec-path-from-shell-copy-env&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;üíù Support this project and my other Open Source work via Patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;üíº LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;‚úç sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;üê¶ @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/pkg-info</title>
    <updated>2023-05-14T01:54:31Z</updated>
    <id>tag:github.com,2023-05-14:/emacsorphanage/pkg-info</id>
    <link href="https://github.com/emacsorphanage/pkg-info" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provide information about Emacs packages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pkg-info.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lunaryorn/pkg-info.el/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?dummy&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/lunaryorn/pkg-info.el&#34;&gt;&lt;img src=&#34;https://travis-ci.org/lunaryorn/pkg-info.el.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provide information about Emacs packages.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; with &lt;kbd&gt;M-x package-install RET pkg-info&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;a href=&#34;http://cask.github.io/&#34;&gt;&lt;code&gt;Cask&lt;/code&gt;&lt;/a&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(source melpa)&#xA;&#xA;(depends-on &#34;pkg-info&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This library is compatible with GNU Emacs 24.1 and newer. It will probably work with Emacs 23 as well, if package.el is installed, but it is not tested on Emacs 23 anymore.&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;This library defines the following functions for use in your Emacs extensions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-library-original-version&lt;/code&gt; extracts the &lt;em&gt;original version&lt;/em&gt; from the header of a library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-library-version&lt;/code&gt; extracts the &lt;em&gt;version&lt;/em&gt; from the header of a library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-defining-library-version&lt;/code&gt; extracts the &lt;em&gt;version&lt;/em&gt; from the header of a library defining a function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-defining-library-original-version&lt;/code&gt; extracts the &lt;em&gt;original version&lt;/em&gt; from the header of a library defining a function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-package-version&lt;/code&gt; gets the &lt;em&gt;version&lt;/em&gt; of an installed package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-format-version&lt;/code&gt; formats a &lt;em&gt;version&lt;/em&gt; as human readable string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-get-melpa-recipe&lt;/code&gt; gets the MELPA recipe for a package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-info-wiki-package-p&lt;/code&gt; determines whether a package was build from EmacsWiki on MELPA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these functions are interactive commands as well.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;version&lt;/em&gt; is the version from the Library Headers, i.e. either from the &lt;code&gt;Version&lt;/code&gt; or from the &lt;code&gt;Package-Version&lt;/code&gt; headers. An &lt;em&gt;original version&lt;/em&gt; is the version from the &lt;code&gt;X-Original-Version&lt;/code&gt; header added by MELPA_ to preserve upstream versions.&lt;/p&gt; &#xA;&lt;p&gt;Versions are represented as version lists, as returned by &lt;code&gt;version-to-list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;pkg-info.el is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;pkg-info.el is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/lunaryorn/pkg-info.el/raw/master/COPYING&#34;&gt;&lt;code&gt;COPYING&lt;/code&gt;&lt;/a&gt; for the complete text of the license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cask/epl</title>
    <updated>2023-05-14T01:54:31Z</updated>
    <id>tag:github.com,2023-05-14:/cask/epl</id>
    <link href="https://github.com/cask/epl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Package Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EPL ‚Äî Emacs Package Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cask/epl/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?dummy&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/cask/epl&#34;&gt;&lt;img src=&#34;https://travis-ci.org/cask/epl.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;EPL provides a convenient high-level API for various package.el versions, and aims to overcome its most striking idiocies.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install from &lt;a href=&#34;http://melpa.milkbox.net/#/epl&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;http://marmalade-repo/packages/epl&#34;&gt;Marmalade&lt;/a&gt;. The former is strongly recommended.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;a href=&#34;http://cask.github.io/&#34;&gt;&lt;code&gt;Cask&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(source gnu)&#xA;(source melpa)&#xA;&#xA;(depends-on &#34;epl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;EPL supports GNU Emacs 24 with the built-in &lt;code&gt;package.el&lt;/code&gt; library. EPL should also work on GNU Emacs 23 with the &lt;a href=&#34;https://github.com/technomancy/package.el&#34;&gt;3rd party &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;, but this combination is not regularly tested anymore. Other versions of Emacs, and other flavors of Emacs (e.g. XEmacs, Aquamacs, etc.) are &lt;em&gt;not&lt;/em&gt; supported.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the commentary of &lt;code&gt;epl.el&lt;/code&gt; for a list of functions, and to the docstrings of these functions for usage instructions.&lt;/p&gt; &#xA;&lt;p&gt;We may add a list of all functions to this README, but this is not exactly easy. Pull requests welcome.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;EPL is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;EPL is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/cask/epl/raw/master/COPYING&#34;&gt;&lt;code&gt;COPYING&lt;/code&gt;&lt;/a&gt; for the complete text of the license.&lt;/p&gt;</summary>
  </entry>
</feed>