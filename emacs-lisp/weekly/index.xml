<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-25T01:39:16Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lizqwerscott/mcp.el</title>
    <updated>2025-05-25T01:39:16Z</updated>
    <id>tag:github.com,2025-05-25:/lizqwerscott/mcp.el</id>
    <link href="https://github.com/lizqwerscott/mcp.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Mcp client inside Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: MCP.el - Model Context Protocol for Emacs&lt;/p&gt; &#xA;&lt;p&gt;[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPLv3-blue.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This is an Emacs client for interfacing with [[https://modelcontextprotocol.io/introduction][MCP]], supporting connections to MCP servers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Structured communication with MCP servers&lt;/li&gt; &#xA; &lt;li&gt;Support for filesystem and generic MCP servers&lt;/li&gt; &#xA; &lt;li&gt;Extensible tool and prompt system&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous and synchronous operations&lt;/li&gt; &#xA; &lt;li&gt;Resource management capabilities&lt;/li&gt; &#xA; &lt;li&gt;Intuitive interface for managing server lifecycle (start/stop/restart)&lt;/li&gt; &#xA; &lt;li&gt;Integration with popular Emacs packages (e.g., gptel, llm)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Emacs 30 or higher version&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your configuration file ~/.emacs: #+begin_src elisp (add-to-list &#39;load-path &#34;&amp;lt;path-to-mcp.el&amp;gt;&#34;) (require &#39;mcp-hub) #+end_src&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage ** Mcp hub *** Configuring MCP Servers #+begin_src elisp (setq mcp-hub-servers &#39;((&#34;filesystem&#34; . (:command &#34;npx&#34; :args (&#34;-y&#34; &#34;@modelcontextprotocol/server-filesystem&#34; &#34;/home/lizqwer/MyProject/&#34;))) (&#34;fetch&#34; . (:command &#34;uvx&#34; :args (&#34;mcp-server-fetch&#34;))) (&#34;qdrant&#34; . (:url &#34;&lt;a href=&#34;http://localhost:8000/sse&#34;&gt;http://localhost:8000/sse&lt;/a&gt;&#34;)) (&#34;graphlit&#34; . ( :command &#34;npx&#34; :args (&#34;-y&#34; &#34;graphlit-mcp-server&#34;) :env ( :GRAPHLIT_ORGANIZATION_ID &#34;your-organization-id&#34; :GRAPHLIT_ENVIRONMENT_ID &#34;your-environment-id&#34; :GRAPHLIT_JWT_SECRET &#34;your-jwt-secret&#34;))))) #+end_src You can use =mcp-hub-start-all-server= to start all MCP servers, such as launching all MCP servers after starting Emacs. #+begin_src elisp (add-hook &#39;after-init-hook #&#39;mcp-hub-start-all-server) #+end_src *** Managing MCP Servers Use =mcp-hub= to launch the server management interface, which will automatically start all configured MCP servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/user-attachments/assets/31877c0b-d71a-491d-9830-2afed8d6218a&#34; alt=&#34;mcp-hub&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** Keymap | key | function | description | |-----+----------------------------+-----------------------------------------| | l | mcp-hub-view-log | View server logs | | s | mcp-hub-start-server | Start server under cursor | | k | mcp-hub-close-server | Stop server under cursor | | r | mcp-hub-restart-server | Restart server under cursor | | S | mcp-hub-start-all-server | Start all configured servers | | R | mcp-hub-restart-all-server | Restart all configured servers | | K | mcp-hub-close-all-server | Stop all running servers | *** use with [[https://github.com/karthink/gptel][gptel]] For =gptel= integration, See the [[https://github.com/karthink/gptel?tab=readme-ov-file#model-context-protocol-mcp-integration][gptel mcp]] for details. ** Example [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] server. *** Establish the connection first. #+begin_src elisp (mcp-connect-server &#34;filesystem&#34; :command &#34;npx&#34; :args &#39;(&#34;-y&#34; &#34;@modelcontextprotocol/server-filesystem&#34; &#34;~/Downloads/&#34;) :initial-callback #&#39;(lambda (connection) (message &#34;%s connection&#34; (jsonrpc-name connection))) :tools-callback #&#39;(lambda (connection tools) (message &#34;%s tools: %s&#34; (jsonrpc-name connection) tools)) :prompts-callback #&#39;(lambda (connection prompts) (message &#34;%s prompts: %s&#34; (jsonrpc-name connection) prompts)) :resources-callback #&#39;(lambda (connection resources) (message &#34;%s resources: %s&#34; (jsonrpc-name connection) resources))) #+end_src *** Define the use of tools. The current text is being tested using the [[https://github.com/karthink/gptel/issues/514][gptel tool]] branch.Use =mcp-make-text-tool= to create standard tool call data ([[https://github.com/ahyatt/llm/discussions/124][Discussions]]).It is recommended to create tools within the tools-callback or wait for the mcp connect server to complete. #+begin_src elisp (mcp-make-text-tool &#34;filesystem&#34; &#34;write_file&#34;) #+end_src This will generate a data structure where the function is an auto-generated synchronous or asynchronous lambda function for accessing the MCP server. #+begin_src elisp (list :function #&#39;(lambda (&amp;amp;rest args) ;; Synchronous or asynchronous access to the MCP server&#39;s Lambda function. ) :name &#34;write_file&#34; :async nil :description &#34;Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.&#34; :args ((:type &#34;string&#34; :name &#34;path&#34; :description &#34;path&#34;) (:type &#34;string&#34; :name &#34;content&#34; :description &#34;content&#34;)) :category &#34;files&#34;) #+end_src *** Disconnect from the server. #+begin_src elisp (mcp-stop-server &#34;filesystem&#34;) #+end_src *** Manual function call **** Synchronize #+begin_src elisp (let ((connection (gethash &#34;filesystem&#34; mcp-server-connections))) (mcp-call-tool connection &#34;write_file&#34; &#39;(:path &#34;filename or file path&#34; :content &#34;the file content&#34;))) #+end_src **** Asynchronous #+begin_src elisp (let ((connection (gethash &#34;filesystem&#34; mcp-server-connections))) (mcp-async-call-tool connection &#34;write_file&#34; &#39;(:path &#34;filename or file path&#34; :content &#34;the file content&#34;) #&#39;(lambda (res) ;; handle res (mcp--parse-tool-call-result res)) #&#39;(lambda (code message) ;; handle error (format &#34;call %s tool error with %s: %s&#34; tool-name code message)))) #+end_src *** Manual get prompt Since the [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] lacks prompts, the [[https://github.com/modelcontextprotocol/servers/tree/main/src/everything][everything]] server is used for demonstration. **** Synchronize #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-get-prompt connection &#34;complex_prompt&#34; &#39;(:temperature &#34;1.0&#34;))) #+end_src **** Asynchronous #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-async-get-prompt connection &#34;complex_prompt&#34; &#39;(:temperature &#34;1.0&#34;) #&#39;(lambda (res) (message &#34;prompt: %s&#34; res)) #&#39;(lambda (code message) (message &#34;error call: %s, %s&#34; code message)))) #+end_src *** Manual get resources Since the [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] lacks resources, the [[https://github.com/modelcontextprotocol/servers/tree/main/src/everything][everything]] server is used for demonstration. **** Synchronize #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-read-resource connection &#34;test://static/resource/1&#34;)) #+end_src **** Asynchronous #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-async-read-resource connection &#34;test://static/resource/1&#34; #&#39;(lambda (resource) (message &#34;res: %s&#34; resource)))) #+end_src *** Get resource templates Since the [[https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem][filesystem]] lacks resources, the [[https://github.com/modelcontextprotocol/servers/tree/main/src/everything][everything]] server is used for demonstration. #+begin_src elisp (let ((connection (gethash &#34;everything&#34; mcp-server-connections))) (mcp-async-list-resource-templates connection #&#39;(lambda (connection templates) (message &#34;%s&#34; templates)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Roadmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP SSE based MCP server connections&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; mcp marketplace (browser and auto install mcp server)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Simplified integration with other Emacs AI clients&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Expanded documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Full MCP protocol client implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License This project is licensed under the GNU General Public License v3.0 - see the [[file:LICENSE][LICENSE]] file for details.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>casouri/vundo</title>
    <updated>2025-05-25T01:39:16Z</updated>
    <id>tag:github.com,2025-05-25:/casouri/vundo</id>
    <link href="https://github.com/casouri/vundo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visualize the undo tree.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Vundo is now available on ELPA!&lt;/p&gt; &#xA;&lt;p&gt;Vundo (visual undo) displays the undo history as a tree and lets you move in the tree to go back to previous buffer states. To use vundo, type M-x vundo RET in the buffer you want to undo. An undo tree buffer should pop up. To move around, type:&lt;/p&gt; &#xA;&lt;p&gt;f to go forward b to go backward&lt;/p&gt; &#xA;&lt;p&gt;n to go to the node below when at a branch point p to go to the node above&lt;/p&gt; &#xA;&lt;p&gt;a to go back to the last branching point w to go forward to the next branching point e to go forward to the end/tip of the branch l to go to the last saved node r to go to the next saved node&lt;/p&gt; &#xA;&lt;p&gt;m to mark the current node for diff u to unmark the marked node d to show a diff between the marked (or parent) and current nodes&lt;/p&gt; &#xA;&lt;p&gt;q to quit, you can also type C-g&lt;/p&gt; &#xA;&lt;p&gt;C-c C-s (or whatever binding you used for save-buffer) to save the buffer at the current undo state&lt;/p&gt; &#xA;&lt;p&gt;n/p may need some more explanation. In the following tree, n/p can move between A and B because they share a parent (thus at a branching point), but not C and D. To make it clear, branches you can switch between are highlighted with bold face.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     A  C&#xA;──○━━○──○──○──○&#xA;  ┃  ↕︎&#xA;  ┗━━○──○──○&#xA;     B  D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, you need to press RET to “commit” your change and return to the buffer. If instead you quit with q or C-g, the changes made by vundo are rolled back. You can set ‘vundo-roll-back-on-quit’ to nil to disable rolling back.&lt;/p&gt; &#xA;&lt;p&gt;You might see some green nodes in the tree, those are the buffer states that have been saved to disk; the last saved node is emphasized in bold. You can type &#34;l&#34; to jump to the last saved node.&lt;/p&gt; &#xA;&lt;p&gt;Note: vundo.el requires Emacs 28.&lt;/p&gt; &#xA;&lt;h1&gt;Customizable faces&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vundo-default&lt;/li&gt; &#xA; &lt;li&gt;vundo-node&lt;/li&gt; &#xA; &lt;li&gt;vundo-stem&lt;/li&gt; &#xA; &lt;li&gt;vundo-highlight&lt;/li&gt; &#xA; &lt;li&gt;vundo-saved&lt;/li&gt; &#xA; &lt;li&gt;vundo-last-saved&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to use prettier Unicode characters to draw the tree like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;○──○──○&#xA;│  └──●&#xA;├──○&#xA;└──○&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;set vundo-glyph-alist by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq vundo-glyph-alist vundo-unicode-symbols)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your default font needs to contain these Unicode characters, otherwise they look terrible and don’t align. You can find a font that covers these characters (eg, Symbola, Unifont), and set ‘vundo-default’ face to use that font:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(set-face-attribute &#39;vundo-default nil :family &#34;Symbola&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Diff&lt;/h1&gt; &#xA;&lt;p&gt;Vundo uses Emacs&#39; facilities to provide diffs among arbitrary undo states: just (m)ark and (d)iff. By default, vundo&#39;s diff window is buried when vundo quits; see `vundo-diff-quit&#39; for other options.&lt;/p&gt; &#xA;&lt;p&gt;Terminal users may encounter unwanted control characters in the diff output. Emacs colors diff buffers itself, so this can be remedied by instructing diff not to print color codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq diff-switches &#34;-u --color=never&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Popup mode&lt;/h1&gt; &#xA;&lt;p&gt;If you enable vundo-popup-mode, the vundo window is displayed in the background automatically when you invoke undo/redo commands. This popup window is automatically killed after a timeout (default to 3s). You can switch to the vundo buffer by simply moving point into it before it’s killed.&lt;/p&gt; &#xA;&lt;h1&gt;Comparing to undo-tree&lt;/h1&gt; &#xA;&lt;p&gt;Vundo doesn’t need to be turned on all the time nor replace the undo commands like undo-tree does. Vundo displays the tree horizontally, whereas undo-tree displays a tree vertically. Diff is provided on-demand between any nodes.&lt;/p&gt; &#xA;&lt;h1&gt;Tests&lt;/h1&gt; &#xA;&lt;p&gt;You can run tests by loading test/vundo-test.el and M-x ert RET t RET to run those tests interactively, or use the following batch command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; emacs --batch \&#xA;       -l vundo.el \&#xA;       -l test/vundo-test.el \&#xA;       -f ert-run-tests-batch-and-exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Changelog (full changelog in NEWS.txt)&lt;/h1&gt; &#xA;&lt;p&gt;&amp;lt;2025-03-14 Fri&amp;gt;: Version 2.4.0: New vundo-popup-mode.&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;2023-02-16 Fri&amp;gt;: Version 2.3.0: navigate among all saved nodes. Automatically bury the vundo-diff window when vundo quits.&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;2023-12-17 Sun&amp;gt;: Version 2.2.0: vundo-diff introduced, supporting on-demand diff to parent or any marked node. Improved tree draw speed.&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;2022-04-04 Mon&amp;gt;: Version 1.0.0&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;2022-03-29 Tue&amp;gt;: vundo--mode and vundo--mode-map are now vundo-mode and vundo-mode-map. A new custom option vundo-compact-display is added.&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;2022-03-23 Wed&amp;gt;: UI now defaults to ASCII mode. ASCII mode also draws differently now, it now draws&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;o--o--o     instead of      o--o--o&#xA;|  `--x                     |  +--*&#xA;|--o                        |--o&#xA;`--o                        +--o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;lt;2021-11-26 Fri&amp;gt;: Variable vundo-translate-alist changed to vundo-glyph-alist and has different value now.&lt;/p&gt;</summary>
  </entry>
</feed>