<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T02:07:33Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>manateelazycat/lsp-bridge</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/manateelazycat/lsp-bridge</id>
    <link href="https://github.com/manateelazycat/lsp-bridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fastest LSP client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;lsp-bridge&lt;/h1&gt; &#xA;&lt;p&gt;Lsp-bridge&#39;s goal is to become the fastest LSP client in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Lsp-bridge uses python&#39;s threading technology to build caches that bridge Emacs and LSP server. Lsp-bridge will provide smooth completion experience without compromise to slow down emacs&#39; performance.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/screenshot.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Python dependencies: &lt;a href=&#34;https://github.com/tkf/python-epc&#34;&gt;python-epc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Elisp dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;orderless&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt; (need execute command &lt;code&gt;all-the-icons-install-fonts&lt;/code&gt; to install all-the-icons fonts)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tumashu/posframe&#34;&gt;posframe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrblevin/markdown-mode&#34;&gt;markdown-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;yasnippet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Clone or download this repository (path of the folder is the &lt;code&gt;&amp;lt;path-to-lsp-bridge&amp;gt;&lt;/code&gt; used below).&lt;/li&gt; &#xA; &lt;li&gt;Add following code in your ~/.emacs:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-lsp-bridge&amp;gt;&#34;)&#xA;&#xA;(require &#39;yasnippet)&#xA;(require &#39;lsp-bridge)&#xA;(require &#39;lsp-bridge-icon)        ;; show icons for completion items, optional&#xA;(require &#39;lsp-bridge-jdtls)       ;; provide Java third-party library jump and -data directory support, optional&#xA;(yas-global-mode 1)&#xA;&#xA;(require &#39;corfu)&#xA;(require &#39;corfu-info)&#xA;(require &#39;corfu-history)&#xA;(require &#39;lsp-bridge-orderless)   ;; make lsp-bridge support fuzzy match, optional&#xA;(corfu-history-mode t)&#xA;(global-lsp-bridge-mode)&#xA;(when (&amp;gt; (frame-pixel-width) 3000) (custom-set-faces &#39;(corfu-default ((t (:height 1.3))))))  ;; adjust default font height when running in HiDPI screen.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lsp-bridge-find-def: jump to the definition&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-find-def-other-window: jump to the definition in other-window&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-find-impl: jump to the implementation&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-find-impl-other-window: jump to the implementation in other-window&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-return-from-def: return to the location before calling &lt;code&gt;lsp-bridge-find-def&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-find-references: traverse across code references (forked from color-rg.el)&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-lookup-documentation: lookup documentation of symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-popup-documentation-scroll-up: scroll up popup document.&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-popup-documentation-scroll-down: scroll down popup document.&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-rename: rename symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-jump-to-next-diagnostic: Jump to the next diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-jump-to-prev-diagnostic: Jump to the previous diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-show-signature-help-in-minibuffer: show signature help in minibuffer manually (move cursor to parameters area will show signature help automatically)&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-insert-common-prefix: insert common prefix of candidates&lt;/li&gt; &#xA; &lt;li&gt;lsp-bridge-restart-process: restart lsp-bridge process (only used for development)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize lsp-bridge keymap&lt;/h2&gt; &#xA;&lt;p&gt;customize keymap for lsp-bridge commands.&lt;/p&gt; &#xA;&lt;p&gt;eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defvar lsp-bridge-mode-map&#xA;    (let ((keymap (make-sparse-keymap)))&#xA;    (define-key keymap (kbd &#34;C-j&#34;) &#39;lsp-bridge-popup-documentation-scroll-up)&#xA;    (define-key keymap (kbd &#34;C-k&#34;) &#39;lsp-bridge-popup-documentation-scroll-down)&#xA;    keymap))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize language server configuration&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration of for each language server is stored at &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/tree/master/langserver&#34;&gt;lsp-bridge/langserver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Anyway you can customize server configuration with the following priority:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-get-lang-server-by-project&lt;/code&gt;: write your own function to get server configuration based on project-path and file-path, this function is nil by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-extension-list&lt;/code&gt;: load server configuration based on file extension, such as, we launch &lt;code&gt;volar&lt;/code&gt; server instead &lt;code&gt;javascript&lt;/code&gt; server when open *.vue file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-mode-list&lt;/code&gt;: load server configuration based on major-mode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add support for new language?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create configuration file under lsp-bridge/langserver, such as &lt;code&gt;pyright.json&lt;/code&gt; for pyright (windows user please uses &lt;code&gt;pyright_windows.json&lt;/code&gt;, macOS user please uses &lt;code&gt;pyright_darwin.json&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(mode . server_name)&lt;/code&gt; in &lt;code&gt;lsp-bridge-lang-server-list&lt;/code&gt;, such as &lt;code&gt;(python-mode . &#34;pyright&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add new mode-hook to &lt;code&gt;lsp-bridge-default-mode-hooks&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Welcome to send PR to help us improve support for LSP servers, thanks for your contribution!&lt;/p&gt; &#xA;&lt;h2&gt;Supported language servers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Index&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;LSP Server&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clangd/clangd&#34;&gt;clangd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c, c++&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;pip install pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixirLS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that the &lt;code&gt;elixir-ls&lt;/code&gt; release directory is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;make sure gopls in PATH, please do &lt;code&gt;ln -s ~/go/bin/gopls ~/.local/bin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;hls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server&#34;&gt;dart-analysis-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scala&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/typescript&#34;&gt;typescript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;typescript, javascript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/ocaml/ocaml-lsp&#34;&gt;ocamllsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ocaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang-ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;erlang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/latex-lsp/texlab&#34;&gt;texlab&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;latex&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that &lt;code&gt;org.eclipse.jdt.ls.product/target/repository/bin&lt;/code&gt; is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clojure-lsp/clojure-lsp&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;clojure&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/bash-lsp/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/johnsoncodehk/volar&#34;&gt;volar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;vue&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server&#34;&gt;sumneko&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure &lt;code&gt;bin&lt;/code&gt; under sumneko installation is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/chemzqm/wxml-languageserver&#34;&gt;wxml-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;wxml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-html-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;html&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-css-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;css&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;TODO:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Show signature help with eldoc&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Code action&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inline Value&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; JavaSctipt different code blocks use different language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support completionItem/resolve to implement auto-import for volar&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cache candidate document at Python side, only fetch document information when switch candidate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features that won&#39;t be supported&lt;/h3&gt; &#xA;&lt;p&gt;The goal of lsp-bridge is to become the fastest LSP client in Emacs, not a complete implementation of LSP protocol.&lt;/p&gt; &#xA;&lt;p&gt;Emacs can do better for the following tasks, we will not reinvent the wheel in lsp-bridge:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Code formatting: each LSP server has its own formatting specification, we can gain finer control using Emacs&#39; builtin formatting tool.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting: &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;Tree-sitter&lt;/a&gt; is a wonderful incremental parsing library for syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;Xref: Xref&#39;s mechanism is simultaneously. lsp-bridge is completely asynchronous, recommended to use wrap function to uniformly key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Join development&lt;/h2&gt; &#xA;&lt;p&gt;The following is the framework of lsp-bridge:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/framework.png&#34;&gt; &#xA;&lt;p&gt;The following is the directory structure of the lsp-bridge project:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elisp main logic part that provides custom options and elisp functions for python sub-process calls like code jumping, renaming, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-epc.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Communicating with lsp-bridge python sub-process, which mainly implements elisp IPC to connect to python EPC for data serialization, sending, receiving, and deserialization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-ref.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Framework of code referencing, providing references viewing, batch renames, regex filtering of reference results, etc. The core code is forked from color-rg.el&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-orderless.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fuzzy search for completion items, i.e. for long candidate you do not need to type the word in correct order to get the correct item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-icon.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rendering the completion menu icons, which is used to distinguish different types of completion options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-jdtls.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provide java language third-party library jumping function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python main logic part that provides event loop, message scheduling and status management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/fileaction.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tracking the status of each file, processing LSP response messages, calling Emacs elisp function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/lspserver.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LSP message processing module, mainly to analyze, send and receive LSP messages, and ensure that the sequence of LSP requests conforms with the LSP protocol specification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/utils.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Utility functions of convenience for each module call&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/mergedeep.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON information merger is mainly used to send custom options to LSP server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/hanlder/&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The implementation of sending and receiving LSP message, where &lt;strong&gt;init&lt;/strong&gt;.py is a base class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;langserver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The configurations of the LSP servers, each server corresponding to a JSON file that defines the name of the server, language ID, starting command, options, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/&#34;&gt;LSP Specification&lt;/a&gt; and &lt;a href=&#34;https://manateelazycat.github.io/emacs/2022/05/12/lsp-bridge.html&#34;&gt;The Design of lsp-bridge&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;Then turn on option &lt;code&gt;lsp-bridge-enable-log&lt;/code&gt; and happy hacking! ;)&lt;/p&gt; &#xA;&lt;h2&gt;Report bug&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;emacs -q&lt;/code&gt; and load a minimal setup with only lsp-bridge to verify that the bug is reproducible. If &lt;code&gt;emacs -q&lt;/code&gt; works fine, probably something is wrong with your Emacs config.&lt;/p&gt; &#xA;&lt;p&gt;If the problem still exists, please report it &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/issues/new&#34;&gt;here&lt;/a&gt; with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content, it contains many clues that can help us locate the problem faster.&lt;/p&gt; &#xA;&lt;p&gt;If you get a segfault error, please use the following way to collect crash information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install gdb and turn on option &lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the command &lt;code&gt;lsp-bridge-stop-process&lt;/code&gt; to stop the current process&lt;/li&gt; &#xA; &lt;li&gt;Restart lsp-bridge, send issue with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content when next crash&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributor&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=manateelazycat/lsp-bridge&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>dgutov/diff-hl</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/dgutov/diff-hl</id>
    <link href="https://github.com/dgutov/diff-hl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package for highlighting uncommitted changes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;diff-hl-mode&lt;/code&gt; highlights uncommitted changes on the left side of the window (area also known as the &#34;gutter&#34;), allows you to jump between and revert them selectively.&lt;/p&gt; &#xA;&lt;p&gt;In buffers controlled by Git, you can also stage and unstage the changes.&lt;/p&gt; &#xA;&lt;p&gt;For the usage instructions and the list of commands, see the Commentary section inside the file.&lt;/p&gt; &#xA;&lt;p&gt;Tested with Git, Mercurial, Bazaar and SVN. May work with other VC backends, too.&lt;/p&gt; &#xA;&lt;p&gt;The package also contains auxiliary modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-dired-mode&lt;/code&gt; provides similar functionality in Dired.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-margin-mode&lt;/code&gt; changes the highlighting function to use the margin instead of the fringe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-amend-mode&lt;/code&gt; sets the reference revision to the one before recent one. Also, you could use &lt;code&gt;diff-hl-set-reference-rev&lt;/code&gt; to set it to any revision, see its docstring for details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-flydiff-mode&lt;/code&gt; implements highlighting changes on the fly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-show-hunk-mouse-mode&lt;/code&gt; makes fringe and margin react to mouse clicks to show the curresponding hunk. That&#39;s the alternative to using &lt;code&gt;diff-hl-show-hunk&lt;/code&gt; and friends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Put this into your init script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(global-diff-hl-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must also ensure that VC is enabled (e.g. &lt;code&gt;vc-handled-backends&lt;/code&gt; is not nil).&lt;/p&gt; &#xA;&lt;p&gt;Check out the Commentary section in each file for more detailed usage instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;h2&gt;diff-hl-mode&lt;/h2&gt; &#xA;&lt;p&gt;Top window: a buffer in this minor mode, bottom window: the corresponding diff.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgutov/diff-hl/master/screenshot.png&#34; alt=&#34;screenie&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;diff-hl-dired-mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgutov/diff-hl/master/screenshot-dired.png&#34; alt=&#34;screenie&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;diff-hl-margin-mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgutov/diff-hl/master/screenshot-margin.png&#34; alt=&#34;screenie&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Emacs 25.1+.&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;By default &lt;code&gt;diff-hl-mode&lt;/code&gt; uses the corresponding VC diff command, so it&#39;s only accurate when the buffer is in saved state. Check out &lt;code&gt;diff-hl-flydiff-mode&lt;/code&gt;, it aims to handle unsaved buffers as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use an &lt;a href=&#34;http://stackoverflow.com/questions/32365271/whats-the-difference-between-git-diff-patience-and-git-diff-histogram&#34;&gt;alternative diff algorithm&lt;/a&gt; with Git, add a corresponding argument to &lt;code&gt;vc-git-diff-switches&lt;/code&gt;, e.g. &lt;code&gt;(setq vc-git-diff-switches &#39;(&#34;--histogram&#34;))&lt;/code&gt;. Using the &lt;code&gt;diff.algorithm&lt;/code&gt; option doesn&#39;t work &lt;a href=&#34;http://article.gmane.org/gmane.comp.version-control.git/294622&#34;&gt;because&lt;/a&gt; &lt;code&gt;vc-git-diff&lt;/code&gt; calls &lt;code&gt;git diff-index&lt;/code&gt;. &lt;code&gt;diff-hl-flydiff-mode&lt;/code&gt; does not support alternative algorithms, because it uses the external &lt;code&gt;diff&lt;/code&gt; program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We conflict with other modes when they put indicators on the fringe, such as &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt;. This is rarely a significant problem, since if you&#39;re using such a mode, you&#39;d usually want to fix all errors and warnings before continuing, and then the conflicting indicators go away.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s no fringe when Emacs is running in the console, but the navigation and revert commands still work. Consider turning &lt;code&gt;diff-hl-margin-mode&lt;/code&gt; on, to show the indicators in the margin instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Frame-local and buffer-local values of &lt;code&gt;line-spacing&lt;/code&gt; are not supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fringe width up to 16 works best (because we can&#39;t define a bitmap with width above that number).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/syohex/emacs-git-gutter&#34;&gt;emacs-git-gutter&lt;/a&gt; shows indicators in the margin by default, allows you to customize how the indicators look more easily, and has a &#34;stage hunk&#34; command.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Integration&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re using some package other than &lt;code&gt;vc&lt;/code&gt; to commit changes, it might not run &lt;code&gt;vc-checkin-hook&lt;/code&gt; after commits. In that case, you&#39;ll need to either add &lt;code&gt;diff-hl-update&lt;/code&gt; to the hook it does run, or advise some function that&#39;s called in the buffer after its state has changed.&lt;/p&gt; &#xA;&lt;h2&gt;psvn&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(advice-add &#39;svn-status-update-modeline :after #&#39;diff-hl-update)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Magit&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using a version before 2.4.0, it defines &lt;code&gt;magit-revert-buffer-hook&lt;/code&gt; (or &lt;code&gt;magit-not-reverted-hook&lt;/code&gt;), which we use.&lt;/p&gt; &#xA;&lt;p&gt;When using Magit 2.4 or newer, add this to your init script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;magit-pre-refresh-hook &#39;diff-hl-magit-pre-refresh)&#xA;(add-hook &#39;magit-post-refresh-hook &#39;diff-hl-magit-post-refresh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tramp&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;diff-hl&lt;/code&gt; should just work with Tramp. But slow or high latency connections can cause performance problems. If you experience such issues, customize &lt;code&gt;diff-hl-disable-on-remote&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;. This will change the behavior of both &lt;code&gt;turn-on-diff-hl-mode&lt;/code&gt; and &lt;code&gt;global-diff-hl-mode&lt;/code&gt; (whichever you prefer to use).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sshaw/git-link</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/sshaw/git-link</id>
    <link href="https://github.com/sshaw/git-link" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package to get the GitHub/Bitbucket/GitLab/... URL for a buffer location&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-link&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/git-link&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/git-link-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/sshaw/git-link&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sshaw/git-link.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Interactive Emacs functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link&lt;/code&gt; returns the URL for the current buffer&#39;s file location at the current line number or active region.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit&lt;/code&gt; returns the URL for the commit at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-homepage&lt;/code&gt; returns the URL for the repository&#39;s homepage.&lt;/p&gt; &#xA;&lt;p&gt;URLs are added to the kill ring.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Functions can be called interactively (&lt;code&gt;M-x git-link&lt;/code&gt;) or via a key binding of your choice. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(global-set-key (kbd &#34;C-c g l&#34;) &#39;git-link)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a prefix argument prompt for the remote&#39;s name. Defaults to &lt;code&gt;&#34;origin&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With a prefix argument of &lt;code&gt;-&lt;/code&gt;, generate a link without line numbers.&lt;/p&gt; &#xA;&lt;p&gt;Works with Dired, Magit, VC revisions, and Tramp too.&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Global setting are elisp variables. They can be set directly or via &lt;code&gt;M-x customize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Local settings are managed via the repository&#39;s git configuration. They can be set via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --local --add setting value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Local settings have precedence over global settings.&lt;/p&gt; &#xA;&lt;h4&gt;Global&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to, defaults to the current branch.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-open-in-browser&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; also open link in browser via &lt;code&gt;browse-url&lt;/code&gt;, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-commit&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; use the latest commit&#39;s hash in the link instead of the branch name, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-single-line-number&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If &lt;code&gt;nil&lt;/code&gt; line numbers are only added when the selection contains more than 1 line, defaults to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;git-link&lt;/code&gt; will exclude line numbers when invoked with the &lt;code&gt;-&lt;/code&gt; prefix argument.&lt;/p&gt; &#xA;&lt;h4&gt;Local&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Services&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/devops/&#34;&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/codecommit/&#34;&gt;AWS CodeCommit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bitbucket.com&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/&#34;&gt;Codeberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/Cgit&#34;&gt;cgit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com&#34;&gt;GitLab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gitorious.org&#34;&gt;Gitorious&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.savannah.gnu.org/cgit&#34;&gt;Savannah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcegraph.com&#34;&gt;Sourcegraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Git Timemachine&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://gitlab.com/pidu/git-timemachine&#34;&gt;&lt;code&gt;git-timemachine-mode&lt;/code&gt;&lt;/a&gt; is active &lt;code&gt;git-link&lt;/code&gt; generates a URL for the version of the file being visited.&lt;/p&gt; &#xA;&lt;h3&gt;Sourcegraph&lt;/h3&gt; &#xA;&lt;p&gt;To link to files on a Sourcegraph server add a git remote pointing to the repository&#39;s Sourcegraph page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git remote add sourcegraph https://sourcegraph.com/github.com/sshaw/copy-as-format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Links can be generated by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#usage&#34;&gt;specifying &lt;code&gt;sourcegraph&lt;/code&gt; as your remote&lt;/a&gt; when calling the desired link function or by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#settings&#34;&gt;setting &lt;code&gt;sourcegraph&lt;/code&gt; as the default remote&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that the remote can be named anything but its URL&#39;s host must match what&#39;s in the associated link function&#39;s alist. This defaults to &lt;code&gt;&#34;sourcegraph&#34;&lt;/code&gt; but can be changed. See &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#building-links-and-adding-services&#34;&gt;Building Links and Adding Services&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;URLs with ports or an http scheme will not work. It&#39;s a trivial fix so if it&#39;s a problem for you please open an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Building Links and Adding Services&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-remote-alist&lt;/code&gt; is an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. The FUNCTION creates URLs for file on remote host names that match the REGEXP. To add (or modify) how URLs are created for a given host, add appropriate elements to this list.&lt;/p&gt; &#xA;&lt;p&gt;As an example, one of the default elements in this alist is &lt;code&gt;(&#34;gitlab&#34; git-link-gitlab)&lt;/code&gt;. So the &lt;code&gt;git-link-gitlab&lt;/code&gt; function will be used to create URLs to files in remotes that match the &lt;em&gt;regexp&lt;/em&gt; &lt;code&gt;&#34;gitlab&#34;&lt;/code&gt;. That would cover common Gitlab host URLs like &lt;em&gt;&#34;gitlab.com&#34;&lt;/em&gt;, &lt;em&gt;&#34;gitlab.example.com&#34;&lt;/em&gt; and &lt;em&gt;&#34;gitlab.example.org&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit-remote-alist&lt;/code&gt; is also an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. Here, the FUNCTION creates URLs to the commit pages, for remote hosts matching REGEXP.&lt;/p&gt; &#xA;&lt;p&gt;If you use a self-hosted version of one of the supported services, but your remote URL does match with the defaults, you can configure these link function alists. For example, for a GitHub Enterprise instance at &lt;code&gt;gh.example.com&lt;/code&gt;, you could add the following to your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(eval-after-load &#39;git-link&#xA; &#39;(progn&#xA;   (add-to-list &#39;git-link-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-github))&#xA;   (add-to-list &#39;git-link-commit-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-commit-github))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME FILENAME BRANCH COMMIT START END&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FILENAME&lt;/code&gt; source file, relative to &lt;code&gt;DIRNAME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BRANCH&lt;/code&gt; active branch, may be &lt;code&gt;nil&lt;/code&gt; if the repo&#39;s in &#34;detached HEAD&#34; state&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the latest commit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;START&lt;/code&gt; starting line number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;END&lt;/code&gt; ending line number, &lt;code&gt;nil&lt;/code&gt; unless region is active&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link-commit&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME COMMIT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the commit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;See Also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/copy-as-format&#34;&gt;copy-as-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/output-as-format&#34;&gt;output-as-format&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More tests!&lt;/li&gt; &#xA; &lt;li&gt;Consolidate &lt;code&gt;git-link-*-alist&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git-link-grep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/borg</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/emacscollective/borg</id>
    <link href="https://github.com/emacscollective/borg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Assimilate Emacs packages as Git submodules&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Assimilate Emacs packages as Git submodules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Borg is a bare-bones package manager for Emacs packages. It provides only a few essential features and should be combined with other tools such as [[https://github.com/magit/magit][Magit]], [[https://github.com/emacscollective/epkg][epkg]], [[https://github.com/jwiegley/use-package][use-package]], and [[https://github.com/tarsius/auto-compile][auto-compile]].&lt;/p&gt; &#xA;&lt;p&gt;Borg assimilates packages into the =&lt;del&gt;/.emacs.d= repository as Git submodules. An assimilated package is called a drone and a borg-based =&lt;/del&gt;/.emacs.d= repository is called a collective.&lt;/p&gt; &#xA;&lt;p&gt;/For more information see the [[https://emacsair.me/2016/05/17/assimilate-emacs-packages-as-git-submodules][announcement]] and the [[https://emacsmirror.net/manual/borg][manual]]./&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oantolin/embark</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/oantolin/embark</id>
    <link href="https://github.com/oantolin/embark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Mini-Buffer Actions Rooted in Keymaps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Embark: Emacs Mini-Buffer Actions Rooted in Keymaps #+OPTIONS: d:nil #+EXPORT_FILE_NAME: embark.texi #+TEXINFO_DIR_CATEGORY: Emacs misc features #+TEXINFO_DIR_TITLE: Embark: (embark). #+TEXINFO_DIR_DESC: Emacs Mini-Buffer Actions Rooted in Keymaps&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;http://elpa.gnu.org/packages/embark.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/embark.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/embark.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/embark.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/embark&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/embark-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/embark&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/embark-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Embark makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session (in a way familiar to Helm or Counsel users) and in normal buffers. Bind the command =embark-act= to a key and it acts like prefix-key for a keymap of /actions/ (commands) relevant to the /target/ around point. With point on an URL in a buffer you can open the URL in a browser or eww or download the file it points to. If while switching buffers you spot an old one, you can kill it right there and continue to select another. Embark comes preconfigured with over a hundred actions for common types of targets such as files, buffers, identifiers, s-expressions, sentences; and it is easy to add more actions and more target types. Embark can also collect all the candidates in a minibuffer to an occur-like buffer or export them to a buffer in a major-mode specific to the type of candidates, such as dired for a set of files, ibuffer for a set of buffers, or customize for a set of variables.&lt;/p&gt; &#xA;&lt;p&gt;** Acting on targets&lt;/p&gt; &#xA;&lt;p&gt;You can think of =embark-act= as a keyboard-based version of a right-click contextual menu. The =embark-act= command (which you should bind to a convenient key), acts as a prefix for a keymap offering you relevant /actions/ to use on a /target/ determined by the context:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the minibuffer, the target is the current top completion candidate.&lt;/li&gt; &#xA; &lt;li&gt;In the =&lt;em&gt;Completions&lt;/em&gt;= buffer the target is the completion at point.&lt;/li&gt; &#xA; &lt;li&gt;In a regular buffer, the target is the region if active, or else the file, symbol, URL, s-expression or defun at point.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Multiple targets can be present at the same location and you can cycle between them by repeating the =embark-act= key binding. The type of actions offered depend on the type of the target. Here is a sample of a few of the actions offered in the default configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For files you get offered actions like deleting, copying, renaming, visiting in another window, running a shell command on the file, etc.&lt;/li&gt; &#xA; &lt;li&gt;For buffers the actions include switching to or killing the buffer.&lt;/li&gt; &#xA; &lt;li&gt;For package names the actions include installing, removing or visiting the homepage.&lt;/li&gt; &#xA; &lt;li&gt;For Emacs Lisp symbols the actions include finding the definition, looking up documentation, evaluating (which for a variable immediately shows the value, but for a function lets you pass it some arguments first). There are some actions specific to variables, such as setting the value directly or though the customize system, and some actions specific to commands, such as binding it to a key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default when you use =embark-act= if you don&#39;t immediately select an action, after a short delay Embark will pop up a buffer showing a list of actions and their corresponding key bindings. If you are using =embark-act= outside the minibuffer, Embark will also highlight the current target. These behaviors are configurable via the variable =embark-indicators=. Instead of selecting an action via its key binding, you can select it by name with completion by typing =C-h= after =embark-act=.&lt;/p&gt; &#xA;&lt;p&gt;Everything is easily configurable: determining the current target, classifying it, and deciding which actions are offered for each type in the classification. The above introduction just mentions part of the default configuration.&lt;/p&gt; &#xA;&lt;p&gt;Configuring which actions are offered for a type is particularly easy and requires no programming: the variable =embark-keymap-alist= associates target types with variables containing keymaps, and those keymaps containing bindings for the actions. (To examine the available categories and their associated keymaps, you can use =C-h v embark-keymap-alist= or customize that variable.) For example, in the default configuration the type =file= is associated with the symbol =embark-file-map=. That symbol names a keymap with single-letter key bindings for common Emacs file commands, for instance =c= is bound to =copy-file=. This means that if you are in the minibuffer after running a command that prompts for a file, such as =find-file= or =rename-file=, you can copy a file by running =embark-act= and then pressing =c=.&lt;/p&gt; &#xA;&lt;p&gt;These action keymaps are very convenient but not strictly necessary when using =embark-act=: you can use any command that reads from the minibuffer as an action and the target of the action will be inserted at the first minibuffer prompt. After running =embark-act= all of your key bindings and even =execute-extended-command= can be used to run a command. For example, if you want to replace all occurrences of the symbol at point, just use =M-%= as the action, there is no need to bind =query-replace= in one of Embark&#39;s keymaps. Also, those action keymaps are normal Emacs keymaps and you should feel free to bind in them whatever commands you find useful as actions and want to be available through convenient bindings.&lt;/p&gt; &#xA;&lt;p&gt;The actions in =embark-general-map= are available no matter what type of completion you are in the middle of. By default this includes bindings to save the current candidate in the kill ring and to insert the current candidate in the previously selected buffer (the buffer that was current when you executed a command that opened up the minibuffer).&lt;/p&gt; &#xA;&lt;p&gt;Emacs&#39;s minibuffer completion system includes metadata indicating the /category/ of what is being completed. For example, =find-file=&#39;s metadata indicates a category of =file= and =switch-to-buffer=&#39;s metadata indicates a category of =buffer=. Embark has the related notion of the /type/ of a target for actions, and by default when category metadata is present it is taken to be the type of minibuffer completion candidates when used as targets. Emacs commands often do not set useful category metadata so the [[https://github.com/minad/marginalia][Marginalia]] package, which supplies this missing metadata, is highly recommended for use with Embark.&lt;/p&gt; &#xA;&lt;p&gt;Embark&#39;s default configuration has actions for the following target types: files, buffers, symbols, packages, URLs, bookmarks, and as a somewhat special case, actions for when the region is active. You can read about the [[https://github.com/oantolin/embark/wiki/Default-Actions][default actions and their key bindings]] on the GitHub project wiki.&lt;/p&gt; &#xA;&lt;p&gt;** The default action on a target&lt;/p&gt; &#xA;&lt;p&gt;Embark has a notion of default action for a target:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the target is a minibuffer completion candidate, then the default action is whatever command opened the minibuffer in the first place. For example if you run =kill-buffer=, then the default action will be to kill buffers.&lt;/li&gt; &#xA; &lt;li&gt;If the target comes from a regular buffer (i.e., not a minibuffer), then the default action is whatever is bound to =RET= in the keymap of actions for that type of target. For example, in Embark&#39;s default configuration for a URL found at point the default action is =browse-url=, because =RET= is bound to =browse-url= in the =embark-url-map= keymap.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run the default action you can press =RET= after running =embark-act=. Note that if there are several different targets at a given location, each has its own default action, so first cycle to the target you want and then press =RET= to run the corresponding default action.&lt;/p&gt; &#xA;&lt;p&gt;There is also =embark-dwim= which runs the default action for the first target found. It&#39;s pretty handy in non-minibuffer buffers: with Embark&#39;s default configuration it will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the file at point.&lt;/li&gt; &#xA; &lt;li&gt;Open the URL at point in a web browser (using the =browse-url= command).&lt;/li&gt; &#xA; &lt;li&gt;Compose a new email to the email address at point.&lt;/li&gt; &#xA; &lt;li&gt;In an Emacs Lisp buffer, if point is on an opening parenthesis or right after a closing one, it will evaluate the corresponding expression.&lt;/li&gt; &#xA; &lt;li&gt;Go to the definition of an Emacs Lisp function, variable or macro at point.&lt;/li&gt; &#xA; &lt;li&gt;Find the file corresponding to an Emacs Lisp library at point.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Working with sets of possible targets&lt;/p&gt; &#xA;&lt;p&gt;Besides acting individually on targets, Embark lets you work collectively on a set of target /candidates/. For example, while you are in the minibuffer the candidates are simply the possible completions of your input. Embark provides three main commands to work on candidate sets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The =embark-act-all= command runs the same action on each of the current candidates. It is just like using =embark-act= on each candidate in turn. (Because you can easily act on many more candidates than you meant to, by default Embark asks you to confirm uses of =embark-act-all=; you can turn this off by setting the user option =embark-confirm-act-all= to =nil=.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The =embark-collect= command produces a buffer listing all the current candidates, for you to peruse and run actions on at your leisure. The candidates are displayed as a list showing additional annotations.&lt;/p&gt; &lt;p&gt;The Embark Collect buffer is &#34;dired-like&#34;: you can mark and unmark candidates with =m= and =u=, you can unmark all marked candidates with =U= or toggle the marks with =t=. In an Embark Collect buffer =embark-act-all= is bound to =A= and will act on all currently marked candidates if there any, and will act on all candidates if none are marked.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The =embark-export= command tries to open a buffer in an appropriate major mode for the set of candidates. If the candidates are files export produces a Dired buffer; if they are buffers, you get an Ibuffer buffer; and if they are packages you get a buffer in package menu mode.&lt;/p&gt; &lt;p&gt;If you use the grepping commands from the [[https://github.com/minad/consult/][Consult]] package, =consult-grep=, =consult-git-grep= or =consult-ripgrep=, then you&#39;ll probably want to install and load the =embark-consult= package, which adds support for exporting a list of grep results to an honest grep-mode buffer, on which you can even use [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] if you wish.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When in doubt choosing between exporting and collecting, a good rule of thumb is to always prefer =embark-export= since when an exporter to a special major mode is available for a given type of target, it will be more featureful than an Embark collect buffer, and if no such exporter is configured the =embark-export= command falls back to the generic =embark-collect=.&lt;/p&gt; &#xA;&lt;p&gt;These commands are always available as &#34;actions&#34; (although they do not act on just the current target but on all candidates) for =embark-act= and are bound to =A=, =S= (for &#34;snapshot&#34;), and =E=, respectively, in =embark-general-map=. This means that you do not have to bind your own key bindings for these (although you can, of course!), just a key binding for =embark-act=.&lt;/p&gt; &#xA;&lt;p&gt;Reverting an Embark Collect or Embark Export buffer has slightly unusual behavior if the buffer was obtained by running =embark-collect= or =embark-export= from within a minibuffer completion session. In that case reverting just restarts the completion session, that is, the command that opened the minibuffer is run again and the minibuffer contents restored. You can then interact normally with the command, perhaps editing the minibuffer contents, and, if you wish, you can rerun =embark-collect= or =embark-export= to get an updated buffer.&lt;/p&gt; &#xA;&lt;p&gt;*** =embark-live= a live-updating variant of =embark-collect=&lt;/p&gt; &#xA;&lt;p&gt;Finally, there is also an =embark-live= variant of the =embark-collect= command which automatically updates the collection after each change in the source buffer. Users of a completion UI that automatically updates and displays the candidate list (such as Vertico, Icomplete, Selectrum, Fido-mode, or MCT) will probably not want to use =embark-live= from the minibuffer as they will then have two live updating displays of the completion candidates!&lt;/p&gt; &#xA;&lt;p&gt;A more likely use of =embark-live= is to be called from a regular buffer to display a sort of live updating &#34;table of contents&#34; for the buffer. This depends on having appropriate candidate collectors configured in =embark-candidate-collectors=. There are not many in Embark&#39;s default configuration, but you can try this experiment: open a dired buffer in a directory that has very many files, mark a few, and run =embark-live=. You&#39;ll get an Embark Collect buffer containing only the marked files, which updates as you mark or unmark files in dired. To make =embark-live= genuinely useful other candidate collectors are required. The =embark-consult= package (documented near the end of this manual) contains a few: one for imenu items and one for outline headings as used by =outline-minor-mode=. Those collectors really do give =embark-live= a table-of-contents feel.&lt;/p&gt; &#xA;&lt;p&gt;** Switching to a different command without losing what you&#39;ve typed&lt;/p&gt; &#xA;&lt;p&gt;Embark also has the =embark-become= command which is useful for when you run a command, start typing at the minibuffer and realize you meant a different command. The most common case for me is that I run =switch-to-buffer=, start typing a buffer name and realize I haven&#39;t opened the file I had in mind yet! I&#39;ll use this situation as a running example to illustrate =embark-become=. When this happens I can, of course, press =C-g= and then run =find-file= and open the file, but this requires retyping the portion of the file name you already typed. This process can be streamlined with =embark-become=: while still in the =switch-to-buffer= you can run =embark-become= and effectively make the =switch-to-buffer= command become =find-file= for this run.&lt;/p&gt; &#xA;&lt;p&gt;You can bind =embark-become= to a key in =minibuffer-local-map=, but it is also available as an action under the letter =B= (uppercase), so you don&#39;t need a binding if you already have one for =embark-act=. So, assuming I have =embark-act= bound to, say, =C-.=, once I realize I haven&#39;t open the file I can type =C-. B C-x C-f= to have =switch-to-buffer= become =find-file= without losing what I have already typed in the minibuffer.&lt;/p&gt; &#xA;&lt;p&gt;But for even more convenience, =embark-become= offers shorter key bindings for commands you are likely to want the current command to become. When you use =embark-become= it looks for the current command in all keymaps named in the list =embark-become-keymaps= and then activates all keymaps that contain it. For example, the default value of =embark-become-keymaps= contains a keymap =embark-become-file+buffer-map= with bindings for several commands related to files and buffers, in particular, it binds =switch-to-buffer= to =b= and =find-file= to =f=. So when I accidentally try to switch to a buffer for a file I haven&#39;t opened yet, =embark-become= finds that the command I ran, =switch-to-buffer=, is in the keymap =embark-become-file+buffer-map=, so it activates that keymap (and any others that also contain a binding for =switch-to-buffer=). The end result is that I can type =C-. B f= to switch to =find-file=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick start&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The easiest way to install Embark is from GNU ELPA, just run =M-x package-install RET embark RET=. (It is also available on MELPA.) It is highly recommended to also install [[https://github.com/minad/marginalia][Marginalia]] (also available on GNU ELPA), so that Embark can offer you preconfigured actions in more contexts. For =use-package= users, the following is a very reasonable starting configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package marginalia :ensure t :config (marginalia-mode))&lt;/p&gt; &#xA;&lt;p&gt;(use-package embark :ensure t&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:bind&#xA;((&#34;C-.&#34; . embark-act)         ;; pick some comfortable binding&#xA; (&#34;C-;&#34; . embark-dwim)        ;; good alternative: M-.&#xA; (&#34;C-h B&#34; . embark-bindings)) ;; alternative for `describe-bindings&#39;&#xA;&#xA;:init&#xA;&#xA;;; Optionally replace the key help with a completing-read interface&#xA;(setq prefix-help-command #&#39;embark-prefix-help-command)&#xA;&#xA;:config&#xA;&#xA;;; Hide the mode line of the Embark live/completions buffers&#xA;(add-to-list &#39;display-buffer-alist&#xA;             &#39;(&#34;\\`\\*Embark Collect \\(Live\\|Completions\\)\\*&#34;&#xA;               nil&#xA;               (window-parameters (mode-line-format . none)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;;; Consult users will also want the embark-consult package. (use-package embark-consult :ensure t :after (embark consult) :demand t ; only necessary if you have the hook below ;; if you want to have consult previews as you move around an ;; auto-updating embark collect buffer :hook (embark-collect-mode . consult-preview-at-point-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;About the suggested key bindings for =embark-act= and =embark-dwim=:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Those key bindings are unlikely to work in the terminal, but terminal users are probably well aware of this and will know to select different bindings.&lt;/li&gt; &#xA; &lt;li&gt;The suggested =C-.= binding is used by default in (at least some installations of) GNOME to input emojis, and Emacs doesn&#39;t even get a chance to respond to the binding. You can select a different key binding for =embark-act= or use =ibus-setup= to change the shortcut for emoji insertion (Emacs uses =C-x 8 e e=, in case you want to set the same one system-wide).&lt;/li&gt; &#xA; &lt;li&gt;The suggested alternative of =M-.= for =embark-dwim= is bound by default to =xref-find-definitions=. That is a very useful command but overwriting it with =embark-dwim= is sensible since in Embark&#39;s default configuration, =embark-dwim= will also find the definition of the identifier at point. (Note that =xref-find-definitions= with a prefix argument prompts you for an identifier, =embark-dwim= does not cover this case).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other Embark commands such as =embark-act-all=, =embark-become=, =embark-collect=, and =embark-export= can be run through =embark-act= as actions bound to =A=, =B=, =S= (for &#34;snapshot&#34;), and =E= respectively, and thus don&#39;t really need a dedicated key binding, but feel free to bind them directly if you so wish. If you do choose to bind them directly, you&#39;ll probably want to bind them in =minibuffer-local-map=, since they are most useful in the minibuffer (in fact, =embark-become= only works in the minibuffer).&lt;/p&gt; &#xA;&lt;p&gt;The command =embark-dwim= executes the default action at point. Another good keybinding for =embark-dwim= is =M-.= since =embark-dwim= acts like =xref-find-definitions= on the symbol at point. =C-.= can be seen as a right-click context menu at point and =M-.= acts like left-click. The keybindings are mnemonic, both act at the point (=.=).&lt;/p&gt; &#xA;&lt;p&gt;Embark needs to know what your minibuffer completion system considers to be the list of candidates and which one is the current candidate. Embark works out of the box if you use Emacs&#39;s default tab completion, the built-in =icomplete-mode= or =fido-mode=, or the third-party packages [[https://github.com/minad/vertico][Vertico]], [[https://github.com/raxod502/selectrum/][Selectrum]] or [[https://github.com/abo-abo/swiper][Ivy]].&lt;/p&gt; &#xA;&lt;p&gt;If you are a [[https://emacs-helm.github.io/helm/][Helm]] or [[https://github.com/abo-abo/swiper][Ivy]] user you are unlikely to want Embark since those packages include comprehensive functionality for acting on minibuffer completion candidates. (Embark does come with Ivy integration despite this.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advanced configuration ** Showing information about available targets and actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, if you run =embark-act= and do not immediately select an action, after a short delay Embark will pop up a buffer called =&lt;em&gt;Embark Actions&lt;/em&gt;= containing a list of available actions with their key bindings. You can scroll that buffer with the mouse of with the usual commands =scroll-other-window= and =scroll-other-window-down= (bound by default to =C-M-v= and =C-M-S-v=).&lt;/p&gt; &#xA;&lt;p&gt;That functionality is provided by the =embark-mixed-indicator=, but Embark has other indicators that can provide information about the target and its type, what other targets you can cycle to, and which actions have key bindings in the action map for the current type of target. Any number of indicators can be active at once and the user option =embark-indicators= should be set to a list of the desired indicators.&lt;/p&gt; &#xA;&lt;p&gt;Embark comes with the following indicators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark-minimal-indicator=: shows a messages in the echo area or minibuffer prompt showing the current target and the types of all targets starting with the current one; this one is on by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark-highlight-indicator=: highlights the target at point; also on by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark-verbose-indicator=: displays a table of actions and their key bindings in a buffer; this is not on by default, in favor of the mixed indicator described next.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark-mixed-indicator=: starts out by behaving as the minimal indicator but after a short delay acts as the verbose indicator; this is on by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark-isearch-highlight-indicator=: this only does something when the current target is the symbol at point, in which case it lazily highlights all occurrences of that symbol in the current buffer, like isearch; also on by default.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Users of the popular [[https://github.com/justbur/emacs-which-key][which-key]] package may prefer to use the =embark-which-key-indicator= from the [[https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt][Embark wiki]]. Just copy its definition from the wiki into your configuration and customize the =embark-indicators= user option to exclude the mixed and verbose indicators and to include =embark-which-key-indicator=.&lt;/p&gt; &#xA;&lt;p&gt;** Selecting commands via completions instead of key bindings&lt;/p&gt; &#xA;&lt;p&gt;As an alternative to reading the list of actions in the verbose or mixed indicators (see the previous section for a description of these), you can press the =embark-help-key=, which is =C-h= by default (but you may prefer =?= to free up =C-h= for use as a prefix) after running =embark-act=. Pressing the help key will prompt you for the name of an action with completion (but feel free to enter a command that is not among the offered candidates!), and will also remind you of the key bindings. You can press =embark-keymap-prompter-key=, which is =@= by default, at the prompt and then one of the key bindings to enter the name of the corresponding action.&lt;/p&gt; &#xA;&lt;p&gt;You may think that with the =&lt;em&gt;Embark Actions&lt;/em&gt;= buffer popping up to remind you of the key bindings you&#39;d never want to use completion to select an action by name, but personally I find that typing a small portion of the action name to narrow down the list of candidates feels significantly faster than visually scanning the entire list of actions.&lt;/p&gt; &#xA;&lt;p&gt;If you find you prefer entering actions that way, you can configure embark to always prompt you for actions by setting the variable =embark-prompter= to =embark-completing-read-prompter=.&lt;/p&gt; &#xA;&lt;p&gt;** Quitting the minibuffer after an action&lt;/p&gt; &#xA;&lt;p&gt;By default, if you call =embark-act= from the minibuffer it quits the minibuffer after performing the action. You can change this by setting the user option =embark-quit-after-action= to =nil=. Having =embark-act= /not/ quit the minibuffer can be useful to turn commands into little &#34;thing managers&#34;. For example, you can use =find-file= as a little file manager or =describe-package= as a little package manager: you can run those commands, perform a series of actions, and then quit the command.&lt;/p&gt; &#xA;&lt;p&gt;If you want to control the quitting behavior in a fine-grained manner depending on the action, you can set =embark-quit-after-action= to an alist, associating commands to either =t= for quitting or =nil= for not quitting. When using an alist, you can use the special key =t= to specify the default behavior. For example, to specify that by default actions should not quit the minibuffer but that using =kill-buffer= as an action should quit, you can use the following configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq embark-quit-after-action &#39;((kill-buffer . t) (t . nil))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The variable =embark-quit-after-action= only specifies a default, that is, it only controls whether or not =embark-act= quits the minibuffer when you call it without a prefix argument, and you can select the opposite behavior to what the variable says by calling =embark-act= with =C-u=. Also note that both the variable =embark-quit-after-action= and =C-u= have no effect when you call =embark-act= outside the minibuffer.&lt;/p&gt; &#xA;&lt;p&gt;If you find yourself using the quitting and non-quitting variants of =embark-act= about equally often, independently of the action, you may prefer to simply have separate commands for them instead of a single command that you call with =C-u= half the time. You could, for example, keep the default exiting behavior of =embark-act= and define a non-quitting version as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun embark-act-noquit () &#34;Run action but don&#39;t quit the minibuffer afterwards.&#34; (interactive) (let ((embark-quit-after-action nil)) (embark-act))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Running some setup after injecting the target&lt;/p&gt; &#xA;&lt;p&gt;You can customize what happens after the target is inserted at the minibuffer prompt of an action. There are =embark-target-injection-hooks=, that are run by default after injecting the target into the minibuffer. The variable =embark-target-injection-hooks= is an alist associating commands to their setup hooks. There are two special keys: if no setup hook is specified for a given action, the hook associated to =t= is run; and the hook associated to =:always= is run regardless of the action. (This variable used to have the less explicit name of =embark-setup-action-hooks=, so please update your configuration.)&lt;/p&gt; &#xA;&lt;p&gt;For example, consider using =shell-command= as an action during file completion. It would be useful to insert a space before the target file name and to leave the point at the beginning, so you can immediately type the shell command to run on that file. That&#39;s why in Embark&#39;s default configuration there is an entry in =embark-target-injection-hooks= associating =shell-command= to a hook that includes =embark--shell-prep=, a simple helper function that quotes all the spaces in the file name, inserts an extra space at the beginning of the line and leaves point to the left of it.&lt;/p&gt; &#xA;&lt;p&gt;Now, the preparation that =embark--shell-prep= does would be useless if Embark did what it normally does after it inserts the target of the action at the minibuffer prompt, which is to &#34;press =RET=&#34; for you, accepting the target as is; if Embark did that for =shell-command= you wouldn&#39;t get a chance to type in the command to execute! That is why in Embark&#39;s default configuration the entry for =shell-command= in =embark-target-injection-hooks= also contains the function =embark--allow-edit=.&lt;/p&gt; &#xA;&lt;p&gt;Embark used to have a dedicated variable =embark-allow-edit-actions= to which you could add commands for which Embark should forgo pressing =RET= for you after inserting the target. Since its effect can also be achieved via the general =embark-target-injection-hooks= mechanism, that variable has been removed to simply Embark. Be sure to update your configuration; if you had something like:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;embark-allow-edit-actions &#39;my-command) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;you should replace it with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (push &#39;embark--allow-edit (alist-get &#39;my-command embark-target-injection-hooks)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Also note that while you could abuse =embark--allow-edit= so that you have to confirm &#34;dangerous&#34; actions such as =delete-file=, it is better to implement confirmation by adding the =embark--confirm= function to the appropriate entry of a different hook alist, namely, =embark-pre-action-hooks=.&lt;/p&gt; &#xA;&lt;p&gt;Besides =embark--allow-edit=, Embark comes with another function that is of general utility in action setup hooks: =embark--ignore-target=. Use it for commands that do prompt you in the minibuffer but for which inserting the target would be inappropriate. This is not a common situation but does occasionally arise. For example it is used by default for =shell-command-on-region=: that command is used as an action for region targets, and it prompts you for a shell command; you typically do /not/ want the target, that is the contents of the region, to be entered at that prompt!&lt;/p&gt; &#xA;&lt;p&gt;** Running hooks before or after an action&lt;/p&gt; &#xA;&lt;p&gt;Embark has two variables, =embark-pre-action-hooks= and =embark-post-action-hooks=, which are alists associating commands to hooks that should run before or after the command is used as an action. As with, =embark-target-injection-hooks=, there are two special keys for the alists: =t= designates the default hook to run when no specific hook is specified for a command; and the hook associated to =:always= runs regardless.&lt;/p&gt; &#xA;&lt;p&gt;The default values of those variables are fairly extensive, adding creature comforts to make running actions a smooth experience. Embark comes with several functions intended to be added to these hooks, and used in the default values of =embark-pre-action-hooks= and =embark-post-action-hooks=.&lt;/p&gt; &#xA;&lt;p&gt;For pre-action hooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark--confirm= :: Prompt the user for confirmation before executing the action. This is used be default for commands deemed &#34;dangerous&#34;, or, more accurately, hard to undo, such as =delete-file= and =kill-buffer=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark--mark-target= :: Mark the target as an active region. Most targets at point outside the minibuffer report which region of the buffer they correspond to (this is the information used by =embark-highlight-indicator= to know what portion of the buffer to highlight); this function marks that region. It is useful as a pre action hook for commands that expect a region to be marked, for example, it is used by default for =indent-region= so that it works on s-expression targets, or for =fill-region= so that it works on paragraph targets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark--unmark-target= :: Unmark the active region. Use this for commands you want to act on the region contents but without the region being active. The default configuration uses this function as a pre-action hook for =occur= and =query-replace=, for example, so that you can use them as actions with region targets to search the whole buffer for the text contained in the region. Without this pre-action hook using =occur= as an action for a region target would be pointless: it would search for the the region contents /in the region/, (typically, due to the details of regexps) finding only one match!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark--beginning-of-target= :: Move to the beginning of the target (for targets that report bounds). This is used by default for backward motion commands such as =backward-sexp=, so that they don&#39;t accidentally leave you on the current target.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark--end-of-target= :: Move to the end of the target. This is used similarly to the previous function, but also for commands that act on the last s-expression like =eval-last-sexp=. This allow you to act on an s-expression from anywhere inside it and still use =eval-last-sexp= as an action.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark--narrow-to-target= :: Narrow buffer to current target. Use this as a pre-action hook to localize the effect of actions that don&#39;t already work on just the region. In the default configuration it is used for =repunctuate-sentences=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark--xref-push-markers= :: Push the current location on the xref marker stack. Use this for commands that take you somewhere and for which you&#39;d like to be able to come back to where you were using =xref-pop-marker-stack=. This is used by default for =find-library=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=embark--cd= :: Run the action with =default-directory= set to the directory associated to the current target. The target should be of type =file=, =buffer=, =bookmark= or =library=, and the associated directory is what you&#39;d expect in each case.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For post-action hooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=embark--restart= :: Restart the command currently prompting in the minibuffer, so that the list of completion candidates is updated. This is useful as a post action hook for commands that delete or rename a completion candidate; for example the default value of =embark-post-action-hooks= uses it for =delete-file=, =kill-buffer=, =rename-file=, =rename-buffer=, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Creating your own keymaps&lt;/p&gt; &#xA;&lt;p&gt;All internal keymaps are defined with a helper macro =embark-define-keymap= that you can use to define your own keymaps, whether they are for new categories in =embark-keymap-alist= or for any other purpose! For example a simple version of the file action keymap could be defined as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (embark-define-keymap embark-file-map &#34;Example keymap with a few file actions&#34; (&#34;d&#34; delete-file) (&#34;r&#34; rename-file) (&#34;c&#34; copy-file)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Remember also that these action keymaps are perfectly normal Emacs keymaps, and do not need to be created with this helper macro. You can use the built-in =define-key=, or your favorite external package such as =bind-key= or =general.el= to manage them.&lt;/p&gt; &#xA;&lt;p&gt;** Defining actions for new categories of targets&lt;/p&gt; &#xA;&lt;p&gt;It is easy to configure Embark to provide actions for new types of targets, either in the minibuffer or outside it. I present below two very detailed examples of how to do this. At several points I&#39;ll explain more than one way to proceed, typically with the easiest option first. I include the alternative options since there will be similar situations where the easiest option is not available.&lt;/p&gt; &#xA;&lt;p&gt;*** New minibuffer target example - tab-bar tabs&lt;/p&gt; &#xA;&lt;p&gt;As an example, take the new [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Tab-Bars.html][tab bars]] from Emacs 27. I&#39;ll explain how to configure Embark to offer tab-specific actions when you use the tab-bar-mode commands that mention tabs by name. The configuration explained here is now built-in to Embark (and Marginalia), but it&#39;s still a good self-contained example. In order to setup up tab actions you would need to: (1) make sure Embark knows those commands deal with tabs, (2) define a keymap for tab actions and configure Embark so it knows that&#39;s the keymap you want.&lt;/p&gt; &#xA;&lt;p&gt;**** Telling Embark about commands that prompt for tabs by name&lt;/p&gt; &#xA;&lt;p&gt;For step (1), it would be great if the =tab-bar-mode= commands reported the completion category =tab= when asking you for a tab with completion. (All built-in Emacs commands that prompt for file names, for example, do have metadata indicating that they want a =file=.) They do not, unfortunately, and I will describe a couple of ways to deal with this.&lt;/p&gt; &#xA;&lt;p&gt;Maybe the easiest thing is to configure [[https://github.com/minad/marginalia][Marginalia]] to enhance those commands. All of the =tab-bar-*-tab-by-name= commands have the words &#34;tab by name&#34; in the minibuffer prompt, so you can use:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;marginalia-prompt-categories &#39;(&#34;tab by name&#34; . tab)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it! But in case you are ever in a situation where you don&#39;t already have commands that prompt for the targets you want, I&#39;ll describe how writing your own command with appropriate =category= metadata looks:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-select-tab-by-name (tab) (interactive (list (let ((tab-list (or (mapcar (lambda (tab) (cdr (assq &#39;name tab))) (tab-bar-tabs)) (user-error &#34;No tabs found&#34;)))) (completing-read &#34;Tabs: &#34; (lambda (string predicate action) (if (eq action &#39;metadata) &#39;(metadata (category . tab)) (complete-with-action action tab-list string predicate))))))) (tab-bar-select-tab-by-name tab)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As you can see, the built-in support for setting the category meta-datum is not very easy to use or pretty to look at. To help with this I recommend the =consult--read= function from the excellent [[https://github.com/minad/consult/][Consult]] package. With that function we can rewrite the command as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-select-tab-by-name (tab) (interactive (list (let ((tab-list (or (mapcar (lambda (tab) (cdr (assq &#39;name tab))) (tab-bar-tabs)) (user-error &#34;No tabs found&#34;)))) (consult--read tab-list :prompt &#34;Tabs: &#34; :category &#39;tab)))) (tab-bar-select-tab-by-name tab)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Much nicer! No matter how you define the =my-select-tab-by-name= command, the first approach with Marginalia and prompt detection has the following advantages: you get the =tab= category for all the =tab-bar-*-bar-by-name= commands at once, also, you enhance built-in commands, instead of defining new ones.&lt;/p&gt; &#xA;&lt;p&gt;**** Defining and configuring a keymap for tab actions&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say we want to offer select, rename and close actions for tabs (in addition to Embark general actions, such as saving the tab name to the kill-ring, which you get for free). Then this will do:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (embark-define-keymap embark-tab-actions &#34;Keymap for actions for tab-bar tabs (when mentioned by name).&#34; (&#34;s&#34; tab-bar-select-tab-by-name) (&#34;r&#34; tab-bar-rename-tab-by-name) (&#34;k&#34; tab-bar-close-tab-by-name))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;embark-keymap-alist &#39;(tab . embark-tab-actions)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;What if after using this for a while you feel closing the tab without confirmation is dangerous? You have a couple of options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You can keep using the =tab-bar-close-tab-by-name= command, but have Embark ask you for confirmation: #+begin_src emacs-lisp (push #&#39;embark--confirm (alist-get &#39;tab-bar-close-tab-by-name embark-pre-action-hooks)) #+end_src&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can write your own command that prompts for confirmation and use that instead of =tab-bar-close-tab-by-name= in the above keymap: #+begin_src emacs-lisp (defun my-confirm-close-tab-by-name (tab) (interactive &#34;sTab to close: &#34;) (when (y-or-n-p (format &#34;Close tab &#39;%s&#39;? &#34; tab)) (tab-bar-close-tab-by-name tab))) #+end_src&lt;/p&gt; &lt;p&gt;Notice that this is a command you can also use directly from =M-x= independently of Embark. Using it from =M-x= leaves something to be desired, though, since you don&#39;t get completion for the tab names. You can fix this if you wish as described in the previous section.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** New target example in regular buffers - short Wikipedia links&lt;/p&gt; &#xA;&lt;p&gt;Say you want to teach Embark to treat text of the form =wikipedia:Garry_Kasparov= in any regular buffer as a link to Wikipedia, with actions to open the Wikipedia page in eww or an external browser or to save the URL of the page in the kill-ring. We can take advantage of the actions that Embark has preconfigured for URLs, so all we need to do is teach Embark that =wikipedia:Garry_Kasparov= stands for the URL =&lt;a href=&#34;https://en.wikipedia.org/wiki/Garry_Kasparov=&#34;&gt;https://en.wikipedia.org/wiki/Garry_Kasparov=&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can be as fancy as you want with the recognized syntax. Here, to keep the example simple, I&#39;ll assume the link matches the regexp =wikipedia:[[:alnum:]_]+=. We will write a function that looks for a match surrounding point, and returns an improper list of the form =&#39;(url actual-url-of-the-page beg . end)= where =beg= and =end= are the buffer positions where the target starts and ends, and are used by Embark to highlight the target (if you have =embark-highlight-indicator= included in the list =embark-indicators=).&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-short-wikipedia-link () &#34;Target a link at point of the form wikipedia:Page_Name.&#34; (save-excursion (let* ((beg (progn (skip-chars-backward &#34;[:alnum:]&lt;em&gt;:&#34;) (point))) (end (progn (skip-chars-forward &#34;[:alnum:]&lt;/em&gt;:&#34;) (point))) (str (buffer-substring-no-properties beg end))) (save-match-data (when (string-match &#34;wikipedia:\([[:alnum:]_]+\)&#34; str) `(url (format &#34;&lt;a href=&#34;https://en.wikipedia.org/wiki/%s&#34;&gt;https://en.wikipedia.org/wiki/%s&lt;/a&gt;&#34; (match-string 1 str)) ,beg . ,end))))))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;embark-target-finders &#39;my-short-wikipedia-link) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;How does Embark call the actions?&lt;/p&gt; &lt;p&gt;Embark actions are normal Emacs commands, that is, functions with an interactive specification. In order to execute an action, Embark calls the command with =call-interactively=, so the command reads user input exactly as if run directly by the user. For example the command may open a minibuffer and read a string (=read-from-minibuffer=) or open a completion interface (=completing-read=). If this happens, Embark takes the target string and inserts it automatically into the minibuffer, simulating user input this way. After inserting the string, Embark exits the minibuffer, submitting the input. (The immediate minibuffer exit can be disabled for specific actions in order to allow editing the input; this is done by adding the =embark--allow-edit= function to the appropriate entry of =embark-target-injection-hooks=). Embark inserts the target string at the first minibuffer opened by the action command, and if the command happens to prompt the user for input more than once, the user still interacts with the second and further prompts in the normal fashion. Note that if a command does not prompt the user for input in the minibuffer, Embark still allows you to use it as an action, but of course, never inserts the target anywhere. (There are plenty of examples in the default configuration of commands that do not prompt the user bound to keys in the action maps, most of the region actions, for instance.)&lt;/p&gt; &lt;p&gt;This is how Embark manages to reuse normal commands as actions. The mechanism allows you to use as Embark actions commands that were not written with Embark in mind (and indeed almost all actions that are bound by default in Embark&#39;s action keymaps are standard Emacs commands). It also allows you to write new custom actions in such a way that they are useful even without Embark.&lt;/p&gt; &lt;p&gt;Staring from version 28.1, Emacs has a variable =y-or-n-p-use-read-key=, which when set to =t= causes =y-or-n-p= to use =read-key= instead of =read-from-minibuffer=. Setting =y-or-n-p-use-read-key= to =t= is recommended for Embark users because it keeps Embark from attempting to insert the target at a =y-or-n-p= prompt, which would almost never be sensible. Also consider this as a warning to structure your own action commands so that if they use =y-or-n-p=, they do so only after the prompting for the target.&lt;/p&gt; &lt;p&gt;Here is a simple example illustrating the various ways of reading input from the user mentioned above. Bind the following commands to the =embark-symbol-map= to be used as actions, then put the point on some symbol and run them with =embark-act=:&lt;/p&gt; &lt;p&gt;#+begin_src emacs-lisp (defun example-action-command1 () (interactive) (message &#34;The input was `%s&#39;.&#34; (read-from-minibuffer &#34;Input: &#34;)))&lt;/p&gt; &lt;p&gt;(defun example-action-command2 (arg input1 input2) (interactive &#34;P\nsInput 1: \nsInput 2: &#34;) (message &#34;The first input %swas &lt;code&gt;%s&#39;, and the second was &lt;/code&gt;%s&#39;.&#34; (if arg &#34;truly &#34; &#34;&#34;) input1 input2))&lt;/p&gt; &lt;p&gt;(defun example-action-command3 () (interactive) (message &#34;Your selection was `%s&#39;.&#34; (completing-read &#34;Select: &#34; &#39;(&#34;E&#34; &#34;M&#34; &#34;B&#34; &#34;A&#34; &#34;R&#34; &#34;K&#34;))))&lt;/p&gt; &lt;p&gt;(defun example-action-command4 () (interactive) (message &#34;I don&#39;t prompt you for input and thus ignore the target!&#34;))&lt;/p&gt; &lt;p&gt;(define-key embark-symbol-map &#34;X1&#34; #&#39;example-action-command1) (define-key embark-symbol-map &#34;X2&#34; #&#39;example-action-command2) (define-key embark-symbol-map &#34;X3&#34; #&#39;example-action-command3) (define-key embark-symbol-map &#34;X4&#34; #&#39;example-action-command4) #+end_src&lt;/p&gt; &lt;p&gt;Also note that if you are using the key bindings to call actions, you can pass prefix arguments to actions in the normal way. For example, you can use =C-u X2= with the above demonstration actions to make the message printed by =example-action-command2= more emphatic. This ability to pass prefix arguments to actions is useful for some actions in the default configuration, such as =embark-shell-command-on-buffer=.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Non-interactive functions as actions&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, Embark does support one other type of action: a non-interactive function of a single argument. The target is passed as argument to the function. For example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun example-action-function (target) (message &#34;The target was `%s&#39;.&#34; target))&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(define-key embark-symbol-map &#34;X4&#34; #&#39;example-action-function)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that normally binding non-interactive functions in a keymap is useless, since when attempting to run them using the key binding you get an error message similar to &#34;Wrong type argument: commandp, example-action-function&#34;. In general it is more flexible to write any new Embark actions as commands, that is, as interactive functions, because that way you can also run them directly, without Embark. But there are a couple of reasons to use non-interactive functions as actions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You may already have the function lying around, and it is convenient to simply reuse it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For command actions the targets can only be simple string, with no text properties. For certain advanced uses you may want the action to receive a string /with/ some text properties, or even a non-string target.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embark, Marginalia and Consult&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Embark cooperates well with the [[https://github.com/minad/marginalia][Marginalia]] and [[https://github.com/minad/consult][Consult]] packages. Neither of those packages is a dependency of Embark, but both are highly recommended companions to Embark, for opposite reasons: Marginalia greatly enhances Embark&#39;s usefulness, while Embark can help enhance Consult.&lt;/p&gt; &#xA;&lt;p&gt;In the remainder of this section I&#39;ll explain what exactly Marginalia does for Embark, and what Embark can do for Consult.&lt;/p&gt; &#xA;&lt;p&gt;** Marginalia&lt;/p&gt; &#xA;&lt;p&gt;Embark comes with actions for symbols (commands, functions, variables with actions such as finding the definition, looking up the documentation, evaluating, etc.) in the =embark-symbol-map= keymap, and for packages (actions like install, delete, browse url, etc.) in the =embark-package-keymap=.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately Embark does not automatically offers you these keymaps when relevant, because many built-in Emacs commands don&#39;t report accurate category metadata. For example, a command like =describe-package=, which reads a package name from the minibuffer, does not have metadata indicating this fact.&lt;/p&gt; &#xA;&lt;p&gt;In an earlier Embark version, there were functions to supply this missing metadata, but they have been moved to Marginalia, which augments many Emacs command to report accurate category metadata. Simply activating =marginalia-mode= allows Embark to offer you the package and symbol actions when appropriate again. Candidate annotations in the Embark collect buffer are also provided by the Marginalia package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you install Marginalia and activate =marginalia-mode=, Embark Collect buffers will use the Marginalia annotations automatically.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t install Marginalia, you will see only the annotations that come with Emacs (such as key bindings in =M-x=, or the unicode characters in =C-x 8 RET=).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Consult&lt;/p&gt; &#xA;&lt;p&gt;The excellent Consult package provides many commands that use minibuffer completion, via the =completing-read= function; plenty of its commands can be considered enhanced versions of built-in Emacs commands, and some are completely new functionality. One common enhancement provided in all commands for which it makes sense is preview functionality, for example =consult-buffer= will show you a quick preview of a buffer before you actually switch to it.&lt;/p&gt; &#xA;&lt;p&gt;If you use both Consult and Embark you should absolutely install the =embark-consult= package which provides integration between the two. It provides exporters for several Consult commands and also tweaks the behavior of many Consult commands when used as actions with =embark-act= in subtle ways that you may not even notice, but make for a smoother experience.&lt;/p&gt; &#xA;&lt;p&gt;The =embark-consult= package provides the following exporters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use =embark-export= from =consult-line=, =consult-outline=, or =consult-mark= to obtain an =occur-mode= buffer. As with the built-in =occur= command you use that buffer to jump to a match and after that, you can then use =next-error= and =previous-error= to navigate to other matches. You can also press =e= to activate =occur-edit-mode= and edit the matches in place!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can export from any of the Consult asynchronous search commands, =consult-grep=, =consult-git-grep=, or =consult-ripgrep= to get a =grep-mode= buffer. Here too you can use =next-error= and =previous-error= to navigate among matches, and, if you install the [[http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el ][wgrep]] package, you can use it to edit the matches in place.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In both cases, pressing =g= to revert the exported buffer will rerun the Consult command you had exported from and re-enter the input you had typed. You can then proceed to re-export if that&#39;s what you want, but you can also edit the input changing the search terms or simply cancel if you see you are done with that search.&lt;/p&gt; &#xA;&lt;p&gt;The =embark-consult= also contains some candidates collectors that allow you to run =embark-live= to get a live-updating table of contents for your buffer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=embark-consult-outline-candidates= produces the outline headings of the current buffer, using =consult-outline=.&lt;/li&gt; &#xA; &lt;li&gt;=embark-consult-imenu-candidates= produces the imenu items of the current buffer, using =consult-imenu=.&lt;/li&gt; &#xA; &lt;li&gt;=embark-consult-imenu-or-outline-candidates= is a simple combination of the two previous functions: it produces imenu items in buffers deriving from =prog-mode= and otherwise outline headings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The way to configure =embark-live= (or =embark-collect= and =embark-export= for that matter) to use one of these function is to add it at the end of the =embark-candidate-collectors= list. The =embark-consult= package by default adds the last one, which seems to be the most sensible default.&lt;/p&gt; &#xA;&lt;p&gt;Besides those exporters and candidate collectors, the =embark-consult= package provides many subtle tweaks and small integrations between Embark and Consult. For example, if you run =embark-collect= from any of the the =consult-yank= family of commands, you&#39;ll see the Embark Collect buffers has full multi-line kill-ring entries with zebra stripes, so you can easily tell where they start and end.&lt;/p&gt; &#xA;&lt;p&gt;Some examples of little tweaks provided by =embark-consult= to the behavior of Consult commands when used as Embark actions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The asynchronous search commands will start in the directory associated to the Embark target if that target is a file, buffer, bookmark or Emacs Lisp library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For all other target types, a Consult search command (asynchronous or not) will search for the text of the target but leave the minibuffer open so you can interact with the Consult command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=consult-imenu= will search for the target and take you directly to the location if it matches a unique imenu entry, otherwise it will leave the minibuffer open so you can navigate among the matches.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to learn more about how others have used Embark here are some links to read:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://karthinks.com/software/fifteen-ways-to-use-embark/][Fifteen ways to use Embark]], a blog post by Karthik Chikmagalur.&lt;/li&gt; &#xA; &lt;li&gt;[[https://protesilaos.com/dotemacs/][Protesilaos Stavrou&#39;s dotemacs]], look for the section called &#34;Extended minibuffer actions and more (embark.el and prot-embark.el)&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And some videos to watch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://protesilaos.com/codelog/2021-01-09-emacs-embark-extras/][Embark and my extras]] by Protesilaos Stavrou.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/qpoQiiinCtY][Embark -- Key features and tweaks]] by Raoul Comninos on the Emacs-Elements YouTube channel.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/WsxXr1ncukY][Livestreamed: Adding an Embark context action to send a stream message]] by Sacha Chua.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/qk2Is_sC8Lk][System Crafters Live! - The Many Uses of Embark]] by David Wilson.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/5ffb2at2d7w][Using Emacs Episode 80 - Vertico, Marginalia, Consult and Embark]] by Mike Zamansky.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributions to Embark are very welcome. There is a [[https://github.com/oantolin/embark/issues/95][wish list]] for actions, target finders, candidate collectors and exporters. For other ideas you have for Embark, feel free to open an issue on the [[https://github.com/oantolin/embark/issues][issue tracker]]. Any neat configuration tricks you find might be a good fit for the [[https://github.com/oantolin/embark/wiki][wiki]].&lt;/p&gt; &#xA;&lt;p&gt;Code contributions are very welcome too, but since Embark is now on GNU ELPA, copyright assignment to the FSF is required before you can contribute code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While I, Omar Antolín Camarena, have written most of the Embark code and remain very stubborn about some of the design decisions, Embark has received substantial help from a number of other people which this document has neglected to mention for far too long. In particular, Daniel Mendler has been absolutely invaluable, implementing several important features, and providing a lot of useful advice.&lt;/p&gt; &#xA;&lt;p&gt;Code contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad][Daniel Mendler]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/][José Antonio Ortega Ruiz]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat][Itai Y. Efrat]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/a13][a13]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jakanakaevangeli][jakanakaevangeli]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mihakam][mihakam]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/leungbk][Brian Leung]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink][Karthik Chikmagalur]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/roshanshariff][Roshan Shariff]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/condy0919][condy0919]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/DamienCassou][Damien Cassou]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/JimDBh][JimDBh]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advice and useful discussions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad][Daniel Mendler]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/protesilaos/][Protesilaos Stavrou]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/hmelman/][Howard Melman]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/astoff][Augusto Stoffel]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bdarcus][Bruce d&#39;Arcus]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][JD Smith]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink][Karthik Chikmagalur]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jakanakaevangeli][jakanakaevangeli]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat][Itai Y. Efrat]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale][Mohsin Kaleem]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>minad/marginalia</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/minad/marginalia</id>
    <link href="https://github.com/minad/marginalia" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📜 marginalia.el - Marginalia in the minibuffer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: marginalia.el - Marginalia in the minibuffer #+author: Omar Antolín Camarena, Daniel Mendler #+language: en #+export_file_name: marginalia.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Marginalia: (marginalia). #+texinfo_dir_desc: Marginalia in the minibuffer&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/marginalia.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/marginalia.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/marginalia.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/marginalia.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/marginalia&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/marginalia-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/marginalia&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/marginalia-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/4/4f/Marginalia_%285095211566%29.jpg&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package provides =marginalia-mode= which adds marginalia to the minibuffer completions. [[https://en.wikipedia.org/wiki/Marginalia][Marginalia]] are marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates. Marginalia can only add annotations to be displayed with the completion candidates. It cannot modify the appearance of the candidates themselves, which are shown as supplied by the original commands.&lt;/p&gt; &#xA;&lt;p&gt;The annotations are added based on the completion category. For example =find-file= reports the =file= category and =M-x= reports the =command= category. You can cycle between more or less detailed annotators or even disable the annotator with command =marginalia-cycle=.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/minad/marginalia/raw/screenshots/marginalia-mode.png?raw=true&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use Marginalia together with either the [[https://github.com/minad/vertico][Vertico]], [[https://github.com/protesilaos/mct][Mct]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][Icomplete]] or the [[https://github.com/raxod502/selectrum][Selectrum]] completion system. Furthermore Marginalia can be combined with [[https://github.com/oantolin/embark][Embark]] for action support and [[https://github.com/minad/consult][Consult]], which provides many useful commands.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable richer annotations using the Marginalia package (use-package marginalia ;; Either bind &lt;code&gt;marginalia-cycle&lt;/code&gt; globally or only in the minibuffer :bind ((&#34;M-A&#34; . marginalia-cycle) :map minibuffer-local-map (&#34;M-A&#34; . marginalia-cycle))&lt;/p&gt; &#xA;&lt;p&gt;;; The :init configuration is always executed (Not lazy!) :init&lt;/p&gt; &#xA;&lt;p&gt;;; Must be in the :init section of use-package such that the mode gets ;; enabled right away. Note that this forces loading the package. (marginalia-mode)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Information shown by the annotators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In general, to learn more about what different annotations mean, a good starting point is to look at &lt;del&gt;marginalia-annotator-registry&lt;/del&gt;, and follow up to the annotation function of the category you are interested in.&lt;/p&gt; &#xA;&lt;p&gt;For example the annotations for elisp symbols include their symbol class - v for variable, f for function, c for command, etc. For more information on what the different classifications mean, see the docstring of &lt;del&gt;marginalia--symbol-class&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adding custom annotators or classifiers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT NOTICE FOR PACKAGE AUTHORS&lt;/em&gt;: The intention of the Marginalia package is to give the user means to overwrite completion categories and to add custom annotators for existing commands in their user configuration. Marginalia is a user facing package and is not intended to be used as a library. Therefore Marginalia does not expose library functions as part of its public API. If you add your own completion commands to your package we recommend to specify an =annotation-function= or an =affixation-function=, avoiding the Marginalia dependency this way. The =annotation-function= is documented in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]]. There is an exception to our recommendation: If you want to implement annotations for an existing package =hypothetical.el=, which does not have annotations and where annotations cannot be added, then the creation of a =marginalia-hypothetical.el= package is a good idea, since Marginalia provides the facilities to enhance existing commands from the outside. If you have questions feel free to ask on the Marginalia issue tracker!&lt;/p&gt; &#xA;&lt;p&gt;Commands that support minibuffer completion use a completion table of all the available candidates. Candidates are associated with a &lt;em&gt;category&lt;/em&gt; such as =command=, =file=, =face=, or =variable= depending on what the candidates are. Based on the category of the candidates, Marginalia selects an &lt;em&gt;annotator&lt;/em&gt; to generate annotations for display for each candidate.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, not all commands (including Emacs&#39; builtin ones) specify the category of their candidates. To compensate for this shortcoming, Marginalia hooks into the emacs completion framework and runs the &lt;em&gt;classifiers&lt;/em&gt; listed in the variable =marginalia-classifiers=, which use the command&#39;s prompt or other properties of the candidates to specify the completion category.&lt;/p&gt; &#xA;&lt;p&gt;For example, the =marginalia-classify-by-prompt= classifier checks the minibuffer prompt against regexps listed in the =marginalia-prompt-categories= alist to determine a category. The following is already included but would be a way to assign the category =face= to all candidates from commands with prompts that include the word &#34;face&#34;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;marginalia-prompt-categories &#39;(&#34;\&amp;lt;face\&amp;gt;&#34; . face)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =marginalia-classify-by-command-name= classifier uses the alist =marginalia-command-categories= to specify the completion category based on the command name. This is particularily useful if the prompt classifier yields a false positive.&lt;/p&gt; &#xA;&lt;p&gt;Completion categories are also important for [[https://github.com/oantolin/embark][Embark]], which associates actions based on the completion category and benefits from Marginalia&#39;s classifiers.&lt;/p&gt; &#xA;&lt;p&gt;Once the category of the candidates is known, Marginalia looks in the =marginalia-annotator-registry= to find the associated annotator to use. An annotator is a function that takes a completion candidate string as an argument and returns an annotation string to be displayed after the candidate in the minibuffer. More than one annotator can be assigned to each each category, displaying more, less or different information. Use the =marginalia-cycle= command to cycle between the annotations of different annotators defined for the current category.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of a basic face annotator:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-face-annotator (cand) (when-let (sym (intern-soft cand)) (concat (propertize &#34; &#34; &#39;display &#39;(space :align-to center)) (propertize &#34;The quick brown fox jumps over the lazy dog&#34; &#39;face sym)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Look at Marginalia&#39;s various annotators for examples of formating annotations. In particular, the helper function =marginalia--fields= can be used to format information into columns.&lt;/p&gt; &#xA;&lt;p&gt;After defining a new annotator, associate it with a category in the annotator registry as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;marginalia-annotator-registry &#39;(face my-face-annotator marginalia-annotate-face builtin none)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This makes the =my-face-annotator= the first of four annotators for the face category. The others are the annotator provided by Marginalia (=marginalia-annotate-face=), the =builtin= annotator as defined by Emacs and the =none= annotator, which disables the annotations. With this setting, after invoking =M-x describe-face RET= you can cycle between all of these annotators using =marginalia-cycle=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disabling annotators, builtin or lightweight annotators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Marginalia activates rich annotators by default. Depending on your preference you may want to use the builtin annotators or even no annotators by default and only activate the annotators on demand by invoking &lt;del&gt;marginalia-cycle&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to use the builtin annotators by default, you can use the following command. Replace =builtin= by =none= to disable annotators by default.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun marginalia-use-builtin () (interactive) (mapc (lambda (x) (setcdr x (cons &#39;builtin (remq &#39;builtin (cdr x))))) marginalia-annotator-registry)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If a completion category supports two annotators, you can toggle between those using this command.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun marginalia-toggle () (interactive) (mapc (lambda (x) (setcdr x (append (reverse (remq &#39;none (remq &#39;builtin (cdr x)))) &#39;(builtin none)))) marginalia-annotator-registry)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;After cycling the annotators you may want to automatically save the configuration. This can be achieved using an advice which calls &lt;del&gt;customize-save-variable&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add #&#39;marginalia-cycle :after (lambda () (let ((inhibit-message t)) (customize-save-variable &#39;marginalia-annotator-registry marginalia-annotator-registry)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In order to disable an annotator permanently, the &lt;del&gt;marginalia-annotator-registry&lt;/del&gt; can be modified. For example if you prefer to never see file annotations, you can delete all file annotators from the registry.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq marginalia-annotator-registry (assq-delete-all &#39;file marginalia-annotator-registry)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/marginalia.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/dap-mode</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/emacs-lsp/dap-mode</id>
    <link href="https://github.com/emacs-lsp/dap-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs ❤️ Debug Adapter Protocol&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://melpa.org/#/dap-mode][file:https://melpa.org/packages/dap-mode-badge.svg]] [[https://stable.melpa.org/#/dap-mode][file:https://stable.melpa.org/packages/dap-mode-badge.svg]] [[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]] [[https://github.com/emacs-lsp/dap-mode/actions][file:https://github.com/emacs-lsp/dap-mode/workflows/CI/badge.svg]] [[https://discord.gg/swuxy5AAgT][file:https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dap-mode ** Table of Contents :TOC_4_gh:noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#dap-mode][dap-mode]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#summary][Summary]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#project-status][Project status]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#features][Features]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#configuration][Configuration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#gallery][Gallery]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#extending-dap-with-new-debug-servers][Extending DAP with new Debug servers]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#links][Links]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#acknowledgments][Acknowledgments]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Summary Emacs client/library for [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]] is a wire protocol for communication between client and Debug Server. It&#39;s similar to the [[https://github.com/Microsoft/language-server-protocol][LSP]] but provides integration with debug server. *** Project status The API considered unstable until 1.0 release is out. It is tested against Java, Python, Ruby, Elixir and LLDB (C/C++/Objective-C/Swift). ** Usage The main entry points are &lt;del&gt;dap-debug&lt;/del&gt; and &lt;del&gt;dap-debug-edit-template&lt;/del&gt;. The first one asks for a registered debug template and starts the configuration using the default values for that particular configuration. The latter creates a debug template which could be customized before running. &lt;del&gt;dap-debug-edit-template&lt;/del&gt; will prepare a template declaration inside a temporary buffer. You should execute this code using &lt;del&gt;C-M-x&lt;/del&gt; for the changes to apply. You should also copy this code into your Emacs configuration if you wish to make it persistent.&lt;/p&gt; &#xA;&lt;p&gt;dap-mode also provides a [[https://github.com/abo-abo/hydra][hydra]] with &lt;del&gt;dap-hydra&lt;/del&gt;. You can automatically trigger the hydra when the program hits a breakpoint by using the following code.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (add-hook &#39;dap-stopped-hook (lambda (arg) (call-interactively #&#39;dap-hydra))) #+END_SRC ** [[https://emacs-lsp.github.io/dap-mode/page/features/][Features]] ** [[https://emacs-lsp.github.io/dap-mode/page/configuration/][Configuration]] ** [[https://emacs-lsp.github.io/dap-mode/page/gallery][Gallery]] ** [[https://emacs-lsp.github.io/dap-mode/page/adding-debug-server][Extending DAP with new Debug servers]] ** Links&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/emacs-lsp/lsp-java][LSP Java]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/][Debug Adapter Protocol Server Implementations]] ** Acknowledgments&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/danielmartin][Daniel Martin]] - LLDB integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/kiennq][Kien Nguyen]] - NodeJS debugger, Edge debuggers, automatic extension installation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Ladicle][Aya Igarashi]] - Go debugger integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/nbfalcon][Nikita Bloshchanevich]] - launch.json support (+ variable expansion), debugpy support, (with some groundwork by yyoncho) runInTerminal support, various bug fixes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>magnars/dash.el</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/magnars/dash.el</id>
    <link href="https://github.com/magnars/dash.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern list library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/magnars/dash.el/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/magnars/dash.el/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/dash.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/dash.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/devel/dash.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/dash.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/dash&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/dash-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/dash&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/dash-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/rainbow-dash.png&#34;&gt; dash.el&lt;/h1&gt; &#xA;&lt;p&gt;A modern list API for Emacs. No &lt;a href=&#34;https://gnu.org/software/emacs/manual/html_node/cl/&#34;&gt;&lt;code&gt;&#39;cl&lt;/code&gt;&lt;/a&gt; required.&lt;/p&gt; &#xA;&lt;p&gt;See the end of the file for license conditions.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#change-log&#34;&gt;Change log&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#upcoming-breaking-change&#34;&gt;Upcoming breaking change!&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/NEWS.md&#34;&gt;&lt;code&gt;NEWS.md&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Upcoming breaking change!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For backward compatibility reasons, &lt;code&gt;-zip&lt;/code&gt; when called with two lists returns a list of cons cells, rather than a list of proper lists. This is a clunky API, and may be changed in a future release to always return a list of proper lists, as &lt;code&gt;-zip-lists&lt;/code&gt; currently does.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;N.B.:&lt;/strong&gt; Do not rely on the current behavior of &lt;code&gt;-zip&lt;/code&gt; for two lists. Instead, use &lt;code&gt;-zip-pair&lt;/code&gt; for a list of cons cells, and &lt;code&gt;-zip-lists&lt;/code&gt; for a list of proper lists.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Dash is available on &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt;, &lt;a href=&#34;https://elpa.gnu.org/devel/&#34;&gt;GNU-devel ELPA&lt;/a&gt;, and &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;, and can be installed with the standard command &lt;code&gt;package-install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET dash RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html&#34;&gt;&lt;code&gt;(info &#34;(emacs) Package Installation&#34;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can just dump &lt;code&gt;dash.el&lt;/code&gt; in your &lt;code&gt;load-path&lt;/code&gt; somewhere. See &lt;a href=&#34;https://gnu.org/software/emacs/manual/html_node/emacs/Lisp-Libraries.html&#34;&gt;&lt;code&gt;(info &#34;(emacs) Lisp Libraries&#34;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using in a package&lt;/h3&gt; &#xA;&lt;p&gt;Add something like this to the library&#39;s headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Package-Requires: ((dash &#34;2.19.1&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html&#34;&gt;&lt;code&gt;(info &#34;(elisp) Library Headers&#34;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Fontification of special variables&lt;/h3&gt; &#xA;&lt;p&gt;Font lock of special Dash variables (&lt;code&gt;it&lt;/code&gt;, &lt;code&gt;acc&lt;/code&gt;, etc.) in Emacs Lisp buffers can optionally be enabled with the autoloaded minor mode &lt;code&gt;dash-fontify-mode&lt;/code&gt;. In older Emacs versions which do not dynamically detect macros, the minor mode also fontifies Dash macro calls.&lt;/p&gt; &#xA;&lt;p&gt;To automatically enable the minor mode in all Emacs Lisp buffers, just call its autoloaded global counterpart &lt;code&gt;global-dash-fontify-mode&lt;/code&gt;, either interactively or from your &lt;code&gt;user-init-file&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(global-dash-fontify-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Info symbol lookup&lt;/h3&gt; &#xA;&lt;p&gt;While editing Elisp files, you can use &lt;code&gt;C-h S&lt;/code&gt; (&lt;code&gt;info-lookup-symbol&lt;/code&gt;) to look up Elisp symbols in the relevant Info manuals (see &lt;a href=&#34;https://gnu.org/software/emacs/manual/html_node/emacs/Info-Lookup.html&#34;&gt;&lt;code&gt;(emacs) Info Lookup&lt;/code&gt;&lt;/a&gt;). To enable the same for Dash symbols, use the command &lt;code&gt;dash-register-info-lookup&lt;/code&gt;. It can be called directly when needed, or automatically from your &lt;code&gt;user-init-file&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(with-eval-after-load &#39;info-look&#xA;  (dash-register-info-lookup))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;All functions and constructs in the library use a dash (&lt;code&gt;-&lt;/code&gt;) prefix.&lt;/p&gt; &#xA;&lt;p&gt;The library also provides anaphoric macro versions of functions where that makes sense. The names of these macros are prefixed with two dashes (&lt;code&gt;--&lt;/code&gt;) instead of one.&lt;/p&gt; &#xA;&lt;p&gt;While &lt;code&gt;-map&lt;/code&gt; applies a function to each element of a list, its anaphoric counterpart &lt;code&gt;--map&lt;/code&gt; evaluates a form with the local variable &lt;code&gt;it&lt;/code&gt; temporarily bound to the current list element instead. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-map (lambda (n) (* n n)) &#39;(1 2 3 4)) ; Normal version.&#xA;(--map (* it it) &#39;(1 2 3 4))           ; Anaphoric version.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The normal version can of course also be written as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(defun my-square (n)&#xA;  &#34;Return N multiplied by itself.&#34;&#xA;  (* n n))&#xA;&#xA;(-map #&#39;my-square &#39;(1 2 3 4))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This demonstrates the utility of both versions.&lt;/p&gt; &#xA;&lt;h3&gt;Maps&lt;/h3&gt; &#xA;&lt;p&gt;Functions in this category take a transforming function, which is then applied sequentially to each or selected elements of the input list. The results are collected in order and returned as a new list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-fn-list&#34;&gt;&lt;code&gt;-map&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-when-pred-rep-list&#34;&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-first-pred-rep-list&#34;&gt;&lt;code&gt;-map-first&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-last-pred-rep-list&#34;&gt;&lt;code&gt;-map-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-indexed-fn-list&#34;&gt;&lt;code&gt;-map-indexed&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-annotate-fn-list&#34;&gt;&lt;code&gt;-annotate&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-pred-fun-list&#34;&gt;&lt;code&gt;-splice&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred fun list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-list-pred-new-list-list&#34;&gt;&lt;code&gt;-splice-list&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred new-list list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-mapcat-fn-list&#34;&gt;&lt;code&gt;-mapcat&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-copy-list&#34;&gt;&lt;code&gt;-copy&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sublist selection&lt;/h3&gt; &#xA;&lt;p&gt;Functions returning a sublist of the original list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-filter-pred-list&#34;&gt;&lt;code&gt;-filter&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-pred-list&#34;&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-first-pred-list&#34;&gt;&lt;code&gt;-remove-first&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-last-pred-list&#34;&gt;&lt;code&gt;-remove-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-item-item-list&#34;&gt;&lt;code&gt;-remove-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-non-nil-list&#34;&gt;&lt;code&gt;-non-nil&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-slice-list-from-optional-to-step&#34;&gt;&lt;code&gt;-slice&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list from &amp;amp;optional to step)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-n-list&#34;&gt;&lt;code&gt;-take&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-last-n-list&#34;&gt;&lt;code&gt;-take-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-n-list&#34;&gt;&lt;code&gt;-drop&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-last-n-list&#34;&gt;&lt;code&gt;-drop-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-while-pred-list&#34;&gt;&lt;code&gt;-take-while&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-while-pred-list&#34;&gt;&lt;code&gt;-drop-while&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-by-indices-indices-list&#34;&gt;&lt;code&gt;-select-by-indices&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(indices list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-columns-columns-table&#34;&gt;&lt;code&gt;-select-columns&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(columns table)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-column-column-table&#34;&gt;&lt;code&gt;-select-column&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(column table)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;List to list&lt;/h3&gt; &#xA;&lt;p&gt;Functions returning a modified copy of the input list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-keep-fn-list&#34;&gt;&lt;code&gt;-keep&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-concat-rest-sequences&#34;&gt;&lt;code&gt;-concat&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest sequences)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-l&#34;&gt;&lt;code&gt;-flatten&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(l)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-n-num-list&#34;&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(num list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-old-new-list&#34;&gt;&lt;code&gt;-replace&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(old new list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-first-old-new-list&#34;&gt;&lt;code&gt;-replace-first&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(old new list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-last-old-new-list&#34;&gt;&lt;code&gt;-replace-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(old new list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-insert-at-n-x-list&#34;&gt;&lt;code&gt;-insert-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n x list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-at-n-x-list&#34;&gt;&lt;code&gt;-replace-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n x list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-update-at-n-func-list&#34;&gt;&lt;code&gt;-update-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n func list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-at-n-list&#34;&gt;&lt;code&gt;-remove-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-at-indices-indices-list&#34;&gt;&lt;code&gt;-remove-at-indices&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(indices list)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reductions&lt;/h3&gt; &#xA;&lt;p&gt;Functions reducing lists to a single value (which may also be a list).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-from-fn-init-list&#34;&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&#34;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&#34;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&#34;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-from-fn-init-list&#34;&gt;&lt;code&gt;-reductions-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-from-fn-init-list&#34;&gt;&lt;code&gt;-reductions-r-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&#34;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-fn-list&#34;&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-count-pred-list&#34;&gt;&lt;code&gt;-count&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-sum-list&#34;&gt;&lt;code&gt;-sum&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-running-sum-list&#34;&gt;&lt;code&gt;-running-sum&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-product-list&#34;&gt;&lt;code&gt;-product&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-running-product-list&#34;&gt;&lt;code&gt;-running-product&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-inits-list&#34;&gt;&lt;code&gt;-inits&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tails-list&#34;&gt;&lt;code&gt;-tails&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-common-prefix-rest-lists&#34;&gt;&lt;code&gt;-common-prefix&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-common-suffix-rest-lists&#34;&gt;&lt;code&gt;-common-suffix&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-min-list&#34;&gt;&lt;code&gt;-min&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-min-by-comparator-list&#34;&gt;&lt;code&gt;-min-by&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-max-list&#34;&gt;&lt;code&gt;-max&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-max-by-comparator-list&#34;&gt;&lt;code&gt;-max-by&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unfolding&lt;/h3&gt; &#xA;&lt;p&gt;Operations dual to reductions, building lists from a seed value rather than consuming a list to produce a single value.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-iterate-fun-init-n&#34;&gt;&lt;code&gt;-iterate&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fun init n)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-unfold-fun-seed&#34;&gt;&lt;code&gt;-unfold&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fun seed)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Predicates&lt;/h3&gt; &#xA;&lt;p&gt;Reductions of one or more lists to a boolean value.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-some-pred-list&#34;&gt;&lt;code&gt;-some&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-every-pred-list&#34;&gt;&lt;code&gt;-every&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-any-pred-list&#34;&gt;&lt;code&gt;-any?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-all-pred-list&#34;&gt;&lt;code&gt;-all?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-none-pred-list&#34;&gt;&lt;code&gt;-none?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-only-some-pred-list&#34;&gt;&lt;code&gt;-only-some?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-contains-list-element&#34;&gt;&lt;code&gt;-contains?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list element)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-same-items-list-list2&#34;&gt;&lt;code&gt;-same-items?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list list2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-is-prefix-prefix-list&#34;&gt;&lt;code&gt;-is-prefix?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(prefix list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-is-suffix-suffix-list&#34;&gt;&lt;code&gt;-is-suffix?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(suffix list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-is-infix-infix-list&#34;&gt;&lt;code&gt;-is-infix?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(infix list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-cons-pair-obj&#34;&gt;&lt;code&gt;-cons-pair?&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(obj)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Partitioning&lt;/h3&gt; &#xA;&lt;p&gt;Functions partitioning the input list into a list of lists.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-at-n-list&#34;&gt;&lt;code&gt;-split-at&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-with-pred-list&#34;&gt;&lt;code&gt;-split-with&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-on-item-list&#34;&gt;&lt;code&gt;-split-on&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-when-fn-list&#34;&gt;&lt;code&gt;-split-when&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-separate-pred-list&#34;&gt;&lt;code&gt;-separate&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-n-list&#34;&gt;&lt;code&gt;-partition&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-all-n-list&#34;&gt;&lt;code&gt;-partition-all&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-in-steps-n-step-list&#34;&gt;&lt;code&gt;-partition-in-steps&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n step list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-all-in-steps-n-step-list&#34;&gt;&lt;code&gt;-partition-all-in-steps&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n step list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-by-fn-list&#34;&gt;&lt;code&gt;-partition-by&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-by-header-fn-list&#34;&gt;&lt;code&gt;-partition-by-header&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-after-pred-pred-list&#34;&gt;&lt;code&gt;-partition-after-pred&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-before-pred-pred-list&#34;&gt;&lt;code&gt;-partition-before-pred&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-before-item-item-list&#34;&gt;&lt;code&gt;-partition-before-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-after-item-item-list&#34;&gt;&lt;code&gt;-partition-after-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(item list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-group-by-fn-list&#34;&gt;&lt;code&gt;-group-by&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Indexing&lt;/h3&gt; &#xA;&lt;p&gt;Functions retrieving or sorting based on list indices and related predicates.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-elem-index-elem-list&#34;&gt;&lt;code&gt;-elem-index&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(elem list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-elem-indices-elem-list&#34;&gt;&lt;code&gt;-elem-indices&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(elem list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-index-pred-list&#34;&gt;&lt;code&gt;-find-index&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-last-index-pred-list&#34;&gt;&lt;code&gt;-find-last-index&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-find-indices-pred-list&#34;&gt;&lt;code&gt;-find-indices&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-grade-up-comparator-list&#34;&gt;&lt;code&gt;-grade-up&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-grade-down-comparator-list&#34;&gt;&lt;code&gt;-grade-down&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Set operations&lt;/h3&gt; &#xA;&lt;p&gt;Operations pretending lists are sets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-union-list-list2&#34;&gt;&lt;code&gt;-union&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list list2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-difference-list-list2&#34;&gt;&lt;code&gt;-difference&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list list2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-intersection-list-list2&#34;&gt;&lt;code&gt;-intersection&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list list2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-powerset-list&#34;&gt;&lt;code&gt;-powerset&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-permutations-list&#34;&gt;&lt;code&gt;-permutations&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-distinct-list&#34;&gt;&lt;code&gt;-distinct&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other list operations&lt;/h3&gt; &#xA;&lt;p&gt;Other list functions not fit to be classified elsewhere.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-rotate-n-list&#34;&gt;&lt;code&gt;-rotate&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-repeat-n-x&#34;&gt;&lt;code&gt;-repeat&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n x)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-cons-rest-args&#34;&gt;&lt;code&gt;-cons*&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-snoc-list-elem-rest-elements&#34;&gt;&lt;code&gt;-snoc&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list elem &amp;amp;rest elements)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-interpose-sep-list&#34;&gt;&lt;code&gt;-interpose&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(sep list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-interleave-rest-lists&#34;&gt;&lt;code&gt;-interleave&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-iota-count-optional-start-step&#34;&gt;&lt;code&gt;-iota&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(count &amp;amp;optional start step)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-with-fn-list1-list2&#34;&gt;&lt;code&gt;-zip-with&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list1 list2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-rest-lists&#34;&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-rest-lists&#34;&gt;&lt;code&gt;-zip-lists&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-fill-fill-value-rest-lists&#34;&gt;&lt;code&gt;-zip-fill&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-unzip-lists&#34;&gt;&lt;code&gt;-unzip&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-cycle-list&#34;&gt;&lt;code&gt;-cycle&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-pad-fill-value-rest-lists&#34;&gt;&lt;code&gt;-pad&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-table-fn-rest-lists&#34;&gt;&lt;code&gt;-table&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-table-flat-fn-rest-lists&#34;&gt;&lt;code&gt;-table-flat&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-first-pred-list&#34;&gt;&lt;code&gt;-first&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-pred-list&#34;&gt;&lt;code&gt;-last&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-first-item-list&#34;&gt;&lt;code&gt;-first-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-second-item-list&#34;&gt;&lt;code&gt;-second-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-third-item-list&#34;&gt;&lt;code&gt;-third-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-fourth-item-list&#34;&gt;&lt;code&gt;-fourth-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-fifth-item-list&#34;&gt;&lt;code&gt;-fifth-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-item-list&#34;&gt;&lt;code&gt;-last-item&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-butlast-list&#34;&gt;&lt;code&gt;-butlast&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-sort-comparator-list&#34;&gt;&lt;code&gt;-sort&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-list-arg&#34;&gt;&lt;code&gt;-list&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(arg)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-fix-fn-list&#34;&gt;&lt;code&gt;-fix&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn list)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tree operations&lt;/h3&gt; &#xA;&lt;p&gt;Functions pretending lists are trees.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-seq-branch-children-tree&#34;&gt;&lt;code&gt;-tree-seq&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(branch children tree)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-map-fn-tree&#34;&gt;&lt;code&gt;-tree-map&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-map-nodes-pred-fun-tree&#34;&gt;&lt;code&gt;-tree-map-nodes&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred fun tree)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-reduce-fn-tree&#34;&gt;&lt;code&gt;-tree-reduce&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-reduce-from-fn-init-value-tree&#34;&gt;&lt;code&gt;-tree-reduce-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn init-value tree)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-mapreduce-fn-folder-tree&#34;&gt;&lt;code&gt;-tree-mapreduce&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn folder tree)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-mapreduce-from-fn-folder-init-value-tree&#34;&gt;&lt;code&gt;-tree-mapreduce-from&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn folder init-value tree)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-clone-list&#34;&gt;&lt;code&gt;-clone&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Threading macros&lt;/h3&gt; &#xA;&lt;p&gt;Macros that conditionally combine sequential forms for brevity or readability.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&#34;&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&#34;&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#---x-rest-forms&#34;&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-as--value-variable-rest-forms&#34;&gt;&lt;code&gt;-as-&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(value variable &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-some--x-optional-form-rest-more&#34;&gt;&lt;code&gt;-some-&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-some--x-optional-form-rest-more&#34;&gt;&lt;code&gt;-some-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-some---expr-rest-forms&#34;&gt;&lt;code&gt;-some--&amp;gt;&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(expr &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-doto-init-rest-forms&#34;&gt;&lt;code&gt;-doto&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(init &amp;amp;rest forms)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Binding&lt;/h3&gt; &#xA;&lt;p&gt;Macros that combine &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;let*&lt;/code&gt; with destructuring and flow control.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-when-let-var-val-rest-body&#34;&gt;&lt;code&gt;-when-let&lt;/code&gt;&lt;/a&gt; &lt;code&gt;((var val) &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-when-let-vars-vals-rest-body&#34;&gt;&lt;code&gt;-when-let*&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(vars-vals &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-if-let-var-val-then-rest-else&#34;&gt;&lt;code&gt;-if-let&lt;/code&gt;&lt;/a&gt; &lt;code&gt;((var val) then &amp;amp;rest else)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-if-let-vars-vals-then-rest-else&#34;&gt;&lt;code&gt;-if-let*&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(vars-vals then &amp;amp;rest else)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let*&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-lambda-match-form-rest-body&#34;&gt;&lt;code&gt;-lambda&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(match-form &amp;amp;rest body)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-setq-match-form-val&#34;&gt;&lt;code&gt;-setq&lt;/code&gt;&lt;/a&gt; &lt;code&gt;([match-form val] ...)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Side effects&lt;/h3&gt; &#xA;&lt;p&gt;Functions iterating over lists for side effect only.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-list-fn&#34;&gt;&lt;code&gt;-each&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list fn)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-while-list-pred-fn&#34;&gt;&lt;code&gt;-each-while&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-indexed-list-fn&#34;&gt;&lt;code&gt;-each-indexed&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list fn)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-r-list-fn&#34;&gt;&lt;code&gt;-each-r&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list fn)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-r-while-list-pred-fn&#34;&gt;&lt;code&gt;-each-r-while&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-dotimes-num-fn&#34;&gt;&lt;code&gt;-dotimes&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(num fn)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Destructive operations&lt;/h3&gt; &#xA;&lt;p&gt;Macros that modify variables holding lists.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#cons-car-cdr&#34;&gt;&lt;code&gt;!cons&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(car cdr)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#cdr-list&#34;&gt;&lt;code&gt;!cdr&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(list)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Function combinators&lt;/h3&gt; &#xA;&lt;p&gt;Functions that manipulate and compose other functions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partial-fun-rest-args&#34;&gt;&lt;code&gt;-partial&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fun &amp;amp;rest args)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-rpartial-fn-rest-args&#34;&gt;&lt;code&gt;-rpartial&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn &amp;amp;rest args)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-juxt-rest-fns&#34;&gt;&lt;code&gt;-juxt&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-compose-rest-fns&#34;&gt;&lt;code&gt;-compose&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-applify-fn&#34;&gt;&lt;code&gt;-applify&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-on-op-trans&#34;&gt;&lt;code&gt;-on&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(op trans)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-flip-fn&#34;&gt;&lt;code&gt;-flip&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-rotate-args-n-fn&#34;&gt;&lt;code&gt;-rotate-args&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(n fn)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-const-c&#34;&gt;&lt;code&gt;-const&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(c)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-cut-rest-params&#34;&gt;&lt;code&gt;-cut&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest params)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-not-pred&#34;&gt;&lt;code&gt;-not&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(pred)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-orfn-rest-preds&#34;&gt;&lt;code&gt;-orfn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-andfn-rest-preds&#34;&gt;&lt;code&gt;-andfn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-iteratefn-fn-n&#34;&gt;&lt;code&gt;-iteratefn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn n)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-fixfn-fn-optional-equal-test-halt-test&#34;&gt;&lt;code&gt;-fixfn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(fn &amp;amp;optional equal-test halt-test)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-prodfn-rest-fns&#34;&gt;&lt;code&gt;-prodfn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maps&lt;/h2&gt; &#xA;&lt;p&gt;Functions in this category take a transforming function, which is then applied sequentially to each or selected elements of the input list. The results are collected in order and returned as a new list.&lt;/p&gt; &#xA;&lt;h4&gt;-map &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt; and return the list of results.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--map&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-map (lambda (num) (* num num)) &#39;(1 2 3 4)) ;; =&amp;gt; (1 4 9 16)&#xA;(-map #&#39;1+ &#39;(1 2 3 4)) ;; =&amp;gt; (2 3 4 5)&#xA;(--map (* it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 4 9 16)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-map-when &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;pred&lt;/code&gt; to conditionally apply &lt;code&gt;rep&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;. Return a copy of &lt;code&gt;list&lt;/code&gt; where the items for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; are unchanged, and the rest are mapped through the &lt;code&gt;rep&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-replace-where&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-update-at-n-func-list&#34;&gt;&lt;code&gt;-update-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-map-when &#39;even? &#39;square &#39;(1 2 3 4)) ;; =&amp;gt; (1 4 3 16)&#xA;(--map-when (&amp;gt; it 2) (* it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 9 16)&#xA;(--map-when (= it 2) 17 &#39;(1 2 3 4)) ;; =&amp;gt; (1 17 3 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-map-first &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;pred&lt;/code&gt; to determine the first item in &lt;code&gt;list&lt;/code&gt; to call &lt;code&gt;rep&lt;/code&gt; on. Return a copy of &lt;code&gt;list&lt;/code&gt; where the first item for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt; is replaced with the result of calling &lt;code&gt;rep&lt;/code&gt; on that item.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-when-pred-rep-list&#34;&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-first-old-new-list&#34;&gt;&lt;code&gt;-replace-first&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-map-first &#39;even? &#39;square &#39;(1 2 3 4)) ;; =&amp;gt; (1 4 3 4)&#xA;(--map-first (&amp;gt; it 2) (* it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 9 4)&#xA;(--map-first (= it 2) 17 &#39;(1 2 3 2)) ;; =&amp;gt; (1 17 3 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-map-last &lt;code&gt;(pred rep list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;pred&lt;/code&gt; to determine the last item in &lt;code&gt;list&lt;/code&gt; to call &lt;code&gt;rep&lt;/code&gt; on. Return a copy of &lt;code&gt;list&lt;/code&gt; where the last item for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt; is replaced with the result of calling &lt;code&gt;rep&lt;/code&gt; on that item.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-when-pred-rep-list&#34;&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-last-old-new-list&#34;&gt;&lt;code&gt;-replace-last&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-map-last &#39;even? &#39;square &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 3 16)&#xA;(--map-last (&amp;gt; it 2) (* it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 3 16)&#xA;(--map-last (= it 2) 17 &#39;(1 2 3 2)) ;; =&amp;gt; (1 2 3 17)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-map-indexed &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each index and item in &lt;code&gt;list&lt;/code&gt; and return the list of results. This is like &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-fn-list&#34;&gt;&lt;code&gt;-map&lt;/code&gt;&lt;/a&gt;, but &lt;code&gt;fn&lt;/code&gt; takes two arguments: the index of the current element within &lt;code&gt;list&lt;/code&gt;, and the element itself.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--map-indexed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a side-effecting variant, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-indexed-list-fn&#34;&gt;&lt;code&gt;-each-indexed&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-map-indexed (lambda (index item) (- item index)) &#39;(1 2 3 4)) ;; =&amp;gt; (1 1 1 1)&#xA;(--map-indexed (- it it-index) &#39;(1 2 3 4)) ;; =&amp;gt; (1 1 1 1)&#xA;(-map-indexed #&#39;* &#39;(1 2 3 4)) ;; =&amp;gt; (0 2 6 12)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-annotate &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list of cons cells where each cell is &lt;code&gt;fn&lt;/code&gt; applied to each element of &lt;code&gt;list&lt;/code&gt; paired with the unmodified element of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-annotate &#39;1+ &#39;(1 2 3)) ;; =&amp;gt; ((2 . 1) (3 . 2) (4 . 3))&#xA;(-annotate &#39;length &#39;((&#34;h&#34; &#34;e&#34; &#34;l&#34; &#34;l&#34; &#34;o&#34;) (&#34;hello&#34; &#34;world&#34;))) ;; =&amp;gt; ((5 &#34;h&#34; &#34;e&#34; &#34;l&#34; &#34;l&#34; &#34;o&#34;) (2 &#34;hello&#34; &#34;world&#34;))&#xA;(--annotate (&amp;lt; 1 it) &#39;(0 1 2 3)) ;; =&amp;gt; ((nil . 0) (nil . 1) (t . 2) (t . 3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-splice &lt;code&gt;(pred fun list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Splice lists generated by &lt;code&gt;fun&lt;/code&gt; in place of items satisfying &lt;code&gt;pred&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Call &lt;code&gt;pred&lt;/code&gt; on each element of &lt;code&gt;list&lt;/code&gt;. Whenever the result of &lt;code&gt;pred&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, leave that &lt;code&gt;it&lt;/code&gt; as-is. Otherwise, call &lt;code&gt;fun&lt;/code&gt; on the same &lt;code&gt;it&lt;/code&gt; that satisfied &lt;code&gt;pred&lt;/code&gt;. The result should be a (possibly empty) list of items to splice in place of &lt;code&gt;it&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This can be useful as an alternative to the &lt;code&gt;,@&lt;/code&gt; construct in a ``&#39; structure, in case you need to splice several lists at marked positions (for example with keywords).&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--splice&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-list-pred-new-list-list&#34;&gt;&lt;code&gt;-splice-list&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-insert-at-n-x-list&#34;&gt;&lt;code&gt;-insert-at&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-splice #&#39;numberp (lambda (n) (list n n)) &#39;(a 1 b 2)) ;; =&amp;gt; (a 1 1 b 2 2)&#xA;(--splice t (list it it) &#39;(1 2 3 4)) ;; =&amp;gt; (1 1 2 2 3 3 4 4)&#xA;(--splice (eq it :magic) &#39;((magical) (code)) &#39;((foo) :magic (bar))) ;; =&amp;gt; ((foo) (magical) (code) (bar))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-splice-list &lt;code&gt;(pred new-list list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Splice &lt;code&gt;new-list&lt;/code&gt; in place of elements matching &lt;code&gt;pred&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-pred-fun-list&#34;&gt;&lt;code&gt;-splice&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-insert-at-n-x-list&#34;&gt;&lt;code&gt;-insert-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-splice-list &#39;keywordp &#39;(a b c) &#39;(1 :foo 2)) ;; =&amp;gt; (1 a b c 2)&#xA;(-splice-list &#39;keywordp nil &#39;(1 :foo 2)) ;; =&amp;gt; (1 2)&#xA;(--splice-list (keywordp it) &#39;(a b c) &#39;(1 :foo 2)) ;; =&amp;gt; (1 a b c 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-mapcat &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the concatenation of the result of mapping &lt;code&gt;fn&lt;/code&gt; over &lt;code&gt;list&lt;/code&gt;. Thus function &lt;code&gt;fn&lt;/code&gt; should return a list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-mapcat &#39;list &#39;(1 2 3)) ;; =&amp;gt; (1 2 3)&#xA;(-mapcat (lambda (item) (list 0 item)) &#39;(1 2 3)) ;; =&amp;gt; (0 1 0 2 0 3)&#xA;(--mapcat (list 0 it) &#39;(1 2 3)) ;; =&amp;gt; (0 1 0 2 0 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-copy &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Create a shallow copy of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-copy &#39;(1 2 3)) ;; =&amp;gt; (1 2 3)&#xA;(let ((a &#39;(1 2 3))) (eq a (-copy a))) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sublist selection&lt;/h2&gt; &#xA;&lt;p&gt;Functions returning a sublist of the original list.&lt;/p&gt; &#xA;&lt;h4&gt;-filter &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list of the items in &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-select&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--filter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For similar operations, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-keep-fn-list&#34;&gt;&lt;code&gt;-keep&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-pred-list&#34;&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-filter (lambda (num) (= 0 (% num 2))) &#39;(1 2 3 4)) ;; =&amp;gt; (2 4)&#xA;(-filter #&#39;natnump &#39;(-2 -1 0 1 2)) ;; =&amp;gt; (0 1 2)&#xA;(--filter (= 0 (% it 2)) &#39;(1 2 3 4)) ;; =&amp;gt; (2 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-remove &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list of the items in &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-reject&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--remove&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For similar operations, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-keep-fn-list&#34;&gt;&lt;code&gt;-keep&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-filter-pred-list&#34;&gt;&lt;code&gt;-filter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-remove (lambda (num) (= 0 (% num 2))) &#39;(1 2 3 4)) ;; =&amp;gt; (1 3)&#xA;(-remove #&#39;natnump &#39;(-2 -1 0 1 2)) ;; =&amp;gt; (-2 -1)&#xA;(--remove (= 0 (% it 2)) &#39;(1 2 3 4)) ;; =&amp;gt; (1 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-remove-first &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Remove the first item from &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. This is a non-destructive operation, but only the front of &lt;code&gt;list&lt;/code&gt; leading up to the removed item is a copy; the rest is &lt;code&gt;list&lt;/code&gt;&#39;s original tail. If no item is removed, then the result is a complete copy.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-reject-first&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--remove-first&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-first-pred-rep-list&#34;&gt;&lt;code&gt;-map-first&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-item-item-list&#34;&gt;&lt;code&gt;-remove-item&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-last-pred-list&#34;&gt;&lt;code&gt;-remove-last&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-remove-first #&#39;natnump &#39;(-2 -1 0 1 2)) ;; =&amp;gt; (-2 -1 1 2)&#xA;(-remove-first #&#39;stringp &#39;(1 2 &#34;first&#34; &#34;second&#34;)) ;; =&amp;gt; (1 2 &#34;second&#34;)&#xA;(--remove-first (&amp;gt; it 3) &#39;(1 2 3 4 5 6)) ;; =&amp;gt; (1 2 3 5 6)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-remove-last &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Remove the last item from &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. The result is a copy of &lt;code&gt;list&lt;/code&gt; regardless of whether an element is removed.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-reject-last&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--remove-last&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-last-pred-rep-list&#34;&gt;&lt;code&gt;-map-last&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-item-item-list&#34;&gt;&lt;code&gt;-remove-item&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-first-pred-list&#34;&gt;&lt;code&gt;-remove-first&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-remove-last #&#39;natnump &#39;(1 3 5 4 7 8 10 -11)) ;; =&amp;gt; (1 3 5 4 7 8 -11)&#xA;(-remove-last #&#39;stringp &#39;(1 2 &#34;last&#34; &#34;second&#34;)) ;; =&amp;gt; (1 2 &#34;last&#34;)&#xA;(--remove-last (&amp;gt; it 3) &#39;(1 2 3 4 5 6 7 8 9 10)) ;; =&amp;gt; (1 2 3 4 5 6 7 8 9)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-remove-item &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a copy of &lt;code&gt;list&lt;/code&gt; with all occurrences of &lt;code&gt;item&lt;/code&gt; removed. The comparison is done with &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-remove-item 3 &#39;(1 2 3 2 3 4 5 3)) ;; =&amp;gt; (1 2 2 4 5)&#xA;(-remove-item &#39;foo &#39;(foo bar baz foo)) ;; =&amp;gt; (bar baz)&#xA;(-remove-item &#34;bob&#34; &#39;(&#34;alice&#34; &#34;bob&#34; &#34;eve&#34; &#34;bob&#34;)) ;; =&amp;gt; (&#34;alice&#34; &#34;eve&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-non-nil &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a copy of &lt;code&gt;list&lt;/code&gt; with all &lt;code&gt;nil&lt;/code&gt; items removed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-non-nil &#39;(nil 1 nil 2 nil nil 3 4 nil 5 nil)) ;; =&amp;gt; (1 2 3 4 5)&#xA;(-non-nil &#39;((nil))) ;; =&amp;gt; ((nil))&#xA;(-non-nil ()) ;; =&amp;gt; ()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-slice &lt;code&gt;(list from &amp;amp;optional to step)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return copy of &lt;code&gt;list&lt;/code&gt;, starting from index &lt;code&gt;from&lt;/code&gt; to index &lt;code&gt;to&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;from&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; may be negative. These values are then interpreted modulo the length of the list.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;step&lt;/code&gt; is a number, only each &lt;code&gt;step&lt;/code&gt;th item in the resulting section is returned. Defaults to 1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-slice &#39;(1 2 3 4 5) 1) ;; =&amp;gt; (2 3 4 5)&#xA;(-slice &#39;(1 2 3 4 5) 0 3) ;; =&amp;gt; (1 2 3)&#xA;(-slice &#39;(1 2 3 4 5 6 7 8 9) 1 -1 2) ;; =&amp;gt; (2 4 6 8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-take &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a copy of the first &lt;code&gt;n&lt;/code&gt; items in &lt;code&gt;list&lt;/code&gt;. Return a copy of &lt;code&gt;list&lt;/code&gt; if it contains &lt;code&gt;n&lt;/code&gt; items or fewer. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is zero or less.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-last-n-list&#34;&gt;&lt;code&gt;-take-last&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-take 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3)&#xA;(-take 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3 4 5)&#xA;(-take 0 &#39;(1 2 3 4 5)) ;; =&amp;gt; ()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-take-last &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a copy of the last &lt;code&gt;n&lt;/code&gt; items of &lt;code&gt;list&lt;/code&gt; in order. Return a copy of &lt;code&gt;list&lt;/code&gt; if it contains &lt;code&gt;n&lt;/code&gt; items or fewer. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is zero or less.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-n-list&#34;&gt;&lt;code&gt;-take&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-take-last 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; (3 4 5)&#xA;(-take-last 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3 4 5)&#xA;(-take-last 1 &#39;(1 2 3 4 5)) ;; =&amp;gt; (5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-drop &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the tail (not a copy) of &lt;code&gt;list&lt;/code&gt; without the first &lt;code&gt;n&lt;/code&gt; items. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; contains &lt;code&gt;n&lt;/code&gt; items or fewer. Return &lt;code&gt;list&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is zero or less.&lt;/p&gt; &#xA;&lt;p&gt;For another variant, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-last-n-list&#34;&gt;&lt;code&gt;-drop-last&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-drop 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; (4 5)&#xA;(-drop 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; ()&#xA;(-drop 0 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3 4 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-drop-last &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a copy of &lt;code&gt;list&lt;/code&gt; without its last &lt;code&gt;n&lt;/code&gt; items. Return a copy of &lt;code&gt;list&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is zero or less. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; contains &lt;code&gt;n&lt;/code&gt; items or fewer.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-n-list&#34;&gt;&lt;code&gt;-drop&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-drop-last 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2)&#xA;(-drop-last 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; ()&#xA;(-drop-last 0 &#39;(1 2 3 4 5)) ;; =&amp;gt; (1 2 3 4 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-take-while &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Take successive items from &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. &lt;code&gt;pred&lt;/code&gt; is a function of one argument. Return a new list of the successive elements from the start of &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--take-while&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For another variant, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-while-pred-list&#34;&gt;&lt;code&gt;-drop-while&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-take-while #&#39;even? &#39;(1 2 3 4)) ;; =&amp;gt; ()&#xA;(-take-while #&#39;even? &#39;(2 4 5 6)) ;; =&amp;gt; (2 4)&#xA;(--take-while (&amp;lt; it 4) &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (1 2 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-drop-while &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Drop successive items from &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. &lt;code&gt;pred&lt;/code&gt; is a function of one argument. Return the tail (not a copy) of &lt;code&gt;list&lt;/code&gt; starting from its first element for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--drop-while&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For another variant, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-while-pred-list&#34;&gt;&lt;code&gt;-take-while&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-drop-while #&#39;even? &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 3 4)&#xA;(-drop-while #&#39;even? &#39;(2 4 5 6)) ;; =&amp;gt; (5 6)&#xA;(--drop-while (&amp;lt; it 4) &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (4 3 2 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-select-by-indices &lt;code&gt;(indices list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list whose elements are elements from &lt;code&gt;list&lt;/code&gt; selected as &lt;code&gt;(nth i list)&lt;/code&gt; for all i from &lt;code&gt;indices&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-select-by-indices &#39;(4 10 2 3 6) &#39;(&#34;v&#34; &#34;e&#34; &#34;l&#34; &#34;o&#34; &#34;c&#34; &#34;i&#34; &#34;r&#34; &#34;a&#34; &#34;p&#34; &#34;t&#34; &#34;o&#34; &#34;r&#34;)) ;; =&amp;gt; (&#34;c&#34; &#34;o&#34; &#34;l&#34; &#34;o&#34; &#34;r&#34;)&#xA;(-select-by-indices &#39;(2 1 0) &#39;(&#34;a&#34; &#34;b&#34; &#34;c&#34;)) ;; =&amp;gt; (&#34;c&#34; &#34;b&#34; &#34;a&#34;)&#xA;(-select-by-indices &#39;(0 1 2 0 1 3 3 1) &#39;(&#34;f&#34; &#34;a&#34; &#34;r&#34; &#34;l&#34;)) ;; =&amp;gt; (&#34;f&#34; &#34;a&#34; &#34;r&#34; &#34;f&#34; &#34;a&#34; &#34;l&#34; &#34;l&#34; &#34;a&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-select-columns &lt;code&gt;(columns table)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Select &lt;code&gt;columns&lt;/code&gt; from &lt;code&gt;table&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;table&lt;/code&gt; is a list of lists where each element represents one row. It is assumed each row has the same length.&lt;/p&gt; &#xA;&lt;p&gt;Each row is transformed such that only the specified &lt;code&gt;columns&lt;/code&gt; are selected.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-column-column-table&#34;&gt;&lt;code&gt;-select-column&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-by-indices-indices-list&#34;&gt;&lt;code&gt;-select-by-indices&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-select-columns &#39;(0 2) &#39;((1 2 3) (a b c) (:a :b :c))) ;; =&amp;gt; ((1 3) (a c) (:a :c))&#xA;(-select-columns &#39;(1) &#39;((1 2 3) (a b c) (:a :b :c))) ;; =&amp;gt; ((2) (b) (:b))&#xA;(-select-columns nil &#39;((1 2 3) (a b c) (:a :b :c))) ;; =&amp;gt; (nil nil nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-select-column &lt;code&gt;(column table)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Select &lt;code&gt;column&lt;/code&gt; from &lt;code&gt;table&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;table&lt;/code&gt; is a list of lists where each element represents one row. It is assumed each row has the same length.&lt;/p&gt; &#xA;&lt;p&gt;The single selected column is returned as a list.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-columns-columns-table&#34;&gt;&lt;code&gt;-select-columns&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-select-by-indices-indices-list&#34;&gt;&lt;code&gt;-select-by-indices&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-select-column 1 &#39;((1 2 3) (a b c) (:a :b :c))) ;; =&amp;gt; (2 b :b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List to list&lt;/h2&gt; &#xA;&lt;p&gt;Functions returning a modified copy of the input list.&lt;/p&gt; &#xA;&lt;h4&gt;-keep &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list of the non-&lt;code&gt;nil&lt;/code&gt; results of applying &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;. Like &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-filter-pred-list&#34;&gt;&lt;code&gt;-filter&lt;/code&gt;&lt;/a&gt;, but returns the non-&lt;code&gt;nil&lt;/code&gt; results of &lt;code&gt;fn&lt;/code&gt; instead of the corresponding elements of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--keep&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-keep #&#39;cdr &#39;((1 2 3) (4 5) (6))) ;; =&amp;gt; ((2 3) (5))&#xA;(-keep (lambda (n) (and (&amp;gt; n 3) (* 10 n))) &#39;(1 2 3 4 5 6)) ;; =&amp;gt; (40 50 60)&#xA;(--keep (and (&amp;gt; it 3) (* 10 it)) &#39;(1 2 3 4 5 6)) ;; =&amp;gt; (40 50 60)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-concat &lt;code&gt;(&amp;amp;rest sequences)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Concatenate all the arguments and make the result a list. The result is a list whose elements are the elements of all the arguments. Each argument may be a list, vector or string. The last argument is not copied, just used as the tail of the new list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-concat &#39;(1)) ;; =&amp;gt; (1)&#xA;(-concat &#39;(1) &#39;(2)) ;; =&amp;gt; (1 2)&#xA;(-concat &#39;(1) &#39;(2 3) &#39;(4)) ;; =&amp;gt; (1 2 3 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-flatten &lt;code&gt;(l)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Take a nested list &lt;code&gt;l&lt;/code&gt; and return its contents as a single, flat list.&lt;/p&gt; &#xA;&lt;p&gt;Note that because &lt;code&gt;nil&lt;/code&gt; represents a list of zero elements (an empty list), any mention of &lt;code&gt;nil&lt;/code&gt; in &lt;code&gt;l&lt;/code&gt; will disappear after flattening. If you need to preserve nils, consider &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-n-num-list&#34;&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt; or map them to some unique symbol and then map them back.&lt;/p&gt; &#xA;&lt;p&gt;Conses of two atoms are considered &#34;terminals&#34;, that is, they aren&#39;t flattened further.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-n-num-list&#34;&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-flatten &#39;((1))) ;; =&amp;gt; (1)&#xA;(-flatten &#39;((1 (2 3) (((4 (5))))))) ;; =&amp;gt; (1 2 3 4 5)&#xA;(-flatten &#39;(1 2 (3 . 4))) ;; =&amp;gt; (1 2 (3 . 4))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-flatten-n &lt;code&gt;(num list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Flatten &lt;code&gt;num&lt;/code&gt; levels of a nested &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-l&#34;&gt;&lt;code&gt;-flatten&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-flatten-n 1 &#39;((1 2) ((3 4) ((5 6))))) ;; =&amp;gt; (1 2 (3 4) ((5 6)))&#xA;(-flatten-n 2 &#39;((1 2) ((3 4) ((5 6))))) ;; =&amp;gt; (1 2 3 4 (5 6))&#xA;(-flatten-n 3 &#39;((1 2) ((3 4) ((5 6))))) ;; =&amp;gt; (1 2 3 4 5 6)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-replace &lt;code&gt;(old new list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Replace all &lt;code&gt;old&lt;/code&gt; items in &lt;code&gt;list&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Elements are compared using &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-at-n-x-list&#34;&gt;&lt;code&gt;-replace-at&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-replace 1 &#34;1&#34; &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (&#34;1&#34; 2 3 4 3 2 &#34;1&#34;)&#xA;(-replace &#34;foo&#34; &#34;bar&#34; &#39;(&#34;a&#34; &#34;nice&#34; &#34;foo&#34; &#34;sentence&#34; &#34;about&#34; &#34;foo&#34;)) ;; =&amp;gt; (&#34;a&#34; &#34;nice&#34; &#34;bar&#34; &#34;sentence&#34; &#34;about&#34; &#34;bar&#34;)&#xA;(-replace 1 2 nil) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-replace-first &lt;code&gt;(old new list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Replace the first occurrence of &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Elements are compared using &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-first-pred-rep-list&#34;&gt;&lt;code&gt;-map-first&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-replace-first 1 &#34;1&#34; &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (&#34;1&#34; 2 3 4 3 2 1)&#xA;(-replace-first &#34;foo&#34; &#34;bar&#34; &#39;(&#34;a&#34; &#34;nice&#34; &#34;foo&#34; &#34;sentence&#34; &#34;about&#34; &#34;foo&#34;)) ;; =&amp;gt; (&#34;a&#34; &#34;nice&#34; &#34;bar&#34; &#34;sentence&#34; &#34;about&#34; &#34;foo&#34;)&#xA;(-replace-first 1 2 nil) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-replace-last &lt;code&gt;(old new list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Replace the last occurrence of &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Elements are compared using &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-last-pred-rep-list&#34;&gt;&lt;code&gt;-map-last&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-replace-last 1 &#34;1&#34; &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; (1 2 3 4 3 2 &#34;1&#34;)&#xA;(-replace-last &#34;foo&#34; &#34;bar&#34; &#39;(&#34;a&#34; &#34;nice&#34; &#34;foo&#34; &#34;sentence&#34; &#34;about&#34; &#34;foo&#34;)) ;; =&amp;gt; (&#34;a&#34; &#34;nice&#34; &#34;foo&#34; &#34;sentence&#34; &#34;about&#34; &#34;bar&#34;)&#xA;(-replace-last 1 2 nil) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-insert-at &lt;code&gt;(n x list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list with &lt;code&gt;x&lt;/code&gt; inserted into &lt;code&gt;list&lt;/code&gt; at position &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-pred-fun-list&#34;&gt;&lt;code&gt;-splice&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-splice-list-pred-new-list-list&#34;&gt;&lt;code&gt;-splice-list&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-insert-at 1 &#39;x &#39;(a b c)) ;; =&amp;gt; (a x b c)&#xA;(-insert-at 12 &#39;x &#39;(a b c)) ;; =&amp;gt; (a b c x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-replace-at &lt;code&gt;(n x list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list with element at &lt;code&gt;n&lt;/code&gt;th position in &lt;code&gt;list&lt;/code&gt; replaced with &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-replace-old-new-list&#34;&gt;&lt;code&gt;-replace&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-replace-at 0 9 &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (9 1 2 3 4 5)&#xA;(-replace-at 1 9 &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (0 9 2 3 4 5)&#xA;(-replace-at 4 9 &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (0 1 2 3 9 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-update-at &lt;code&gt;(n func list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;func&lt;/code&gt; to update the &lt;code&gt;n&lt;/code&gt;th element of &lt;code&gt;list&lt;/code&gt;. Return a copy of &lt;code&gt;list&lt;/code&gt; where the &lt;code&gt;n&lt;/code&gt;th element is replaced with the result of calling &lt;code&gt;func&lt;/code&gt; on it.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-when-pred-rep-list&#34;&gt;&lt;code&gt;-map-when&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-update-at 0 (lambda (x) (+ x 9)) &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (9 1 2 3 4 5)&#xA;(-update-at 1 (lambda (x) (+ x 8)) &#39;(0 1 2 3 4 5)) ;; =&amp;gt; (0 9 2 3 4 5)&#xA;(--update-at 2 (length it) &#39;(&#34;foo&#34; &#34;bar&#34; &#34;baz&#34; &#34;quux&#34;)) ;; =&amp;gt; (&#34;foo&#34; &#34;bar&#34; 3 &#34;quux&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-remove-at &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list with element at &lt;code&gt;n&lt;/code&gt;th position in &lt;code&gt;list&lt;/code&gt; removed.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-at-indices-indices-list&#34;&gt;&lt;code&gt;-remove-at-indices&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-pred-list&#34;&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-remove-at 0 &#39;(&#34;0&#34; &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)) ;; =&amp;gt; (&#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)&#xA;(-remove-at 1 &#39;(&#34;0&#34; &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)) ;; =&amp;gt; (&#34;0&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)&#xA;(-remove-at 2 &#39;(&#34;0&#34; &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)) ;; =&amp;gt; (&#34;0&#34; &#34;1&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-remove-at-indices &lt;code&gt;(indices list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list whose elements are elements from &lt;code&gt;list&lt;/code&gt; without elements selected as &lt;code&gt;(nth i list)&lt;/code&gt; for all i from &lt;code&gt;indices&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-at-n-list&#34;&gt;&lt;code&gt;-remove-at&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-remove-pred-list&#34;&gt;&lt;code&gt;-remove&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-remove-at-indices &#39;(0) &#39;(&#34;0&#34; &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)) ;; =&amp;gt; (&#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)&#xA;(-remove-at-indices &#39;(0 2 4) &#39;(&#34;0&#34; &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)) ;; =&amp;gt; (&#34;1&#34; &#34;3&#34; &#34;5&#34;)&#xA;(-remove-at-indices &#39;(0 5) &#39;(&#34;0&#34; &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34;)) ;; =&amp;gt; (&#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reductions&lt;/h2&gt; &#xA;&lt;p&gt;Functions reducing lists to a single value (which may also be a list).&lt;/p&gt; &#xA;&lt;h4&gt;-reduce-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Reduce the function &lt;code&gt;fn&lt;/code&gt; across &lt;code&gt;list&lt;/code&gt;, starting with &lt;code&gt;init&lt;/code&gt;. Return the result of applying &lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;init&lt;/code&gt; and the first element of &lt;code&gt;list&lt;/code&gt;, then applying &lt;code&gt;fn&lt;/code&gt; to that result and the second element, etc. If &lt;code&gt;list&lt;/code&gt; is empty, return &lt;code&gt;init&lt;/code&gt; without calling &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reduce-from&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other folds, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&#34;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&#34;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-reduce-from #&#39;- 10 &#39;(1 2 3)) ;; =&amp;gt; 4&#xA;(-reduce-from #&#39;list 10 &#39;(1 2 3)) ;; =&amp;gt; (((10 1) 2) 3)&#xA;(--reduce-from (concat acc &#34; &#34; it) &#34;START&#34; &#39;(&#34;a&#34; &#34;b&#34; &#34;c&#34;)) ;; =&amp;gt; &#34;START a b c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-reduce-r-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Reduce the function &lt;code&gt;fn&lt;/code&gt; across &lt;code&gt;list&lt;/code&gt; in reverse, starting with &lt;code&gt;init&lt;/code&gt;. Return the result of applying &lt;code&gt;fn&lt;/code&gt; to the last element of &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;init&lt;/code&gt;, then applying &lt;code&gt;fn&lt;/code&gt; to the second-to-last element and the previous result of &lt;code&gt;fn&lt;/code&gt;, etc. That is, the first argument of &lt;code&gt;fn&lt;/code&gt; is the current element, and its second argument the accumulated value. If &lt;code&gt;list&lt;/code&gt; is empty, return &lt;code&gt;init&lt;/code&gt; without calling &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function is like &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-from-fn-init-list&#34;&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; but the operation associates from the right rather than left. In other words, it starts from the end of &lt;code&gt;list&lt;/code&gt; and flips the arguments to &lt;code&gt;fn&lt;/code&gt;. Conceptually, it is like replacing the conses in &lt;code&gt;list&lt;/code&gt; with applications of &lt;code&gt;fn&lt;/code&gt;, and its last link with &lt;code&gt;init&lt;/code&gt;, and evaluating the resulting expression.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reduce-r-from&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other folds, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&#34;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&#34;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-reduce-r-from #&#39;- 10 &#39;(1 2 3)) ;; =&amp;gt; -8&#xA;(-reduce-r-from #&#39;list 10 &#39;(1 2 3)) ;; =&amp;gt; (1 (2 (3 10)))&#xA;(--reduce-r-from (concat it &#34; &#34; acc) &#34;END&#34; &#39;(&#34;a&#34; &#34;b&#34; &#34;c&#34;)) ;; =&amp;gt; &#34;a b c END&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-reduce &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Reduce the function &lt;code&gt;fn&lt;/code&gt; across &lt;code&gt;list&lt;/code&gt;. Return the result of applying &lt;code&gt;fn&lt;/code&gt; to the first two elements of &lt;code&gt;list&lt;/code&gt;, then applying &lt;code&gt;fn&lt;/code&gt; to that result and the third element, etc. If &lt;code&gt;list&lt;/code&gt; contains a single element, return it without calling &lt;code&gt;fn&lt;/code&gt;. If &lt;code&gt;list&lt;/code&gt; is empty, return the result of calling &lt;code&gt;fn&lt;/code&gt; with no arguments.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reduce&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other folds, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-from-fn-init-list&#34;&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&#34;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-reduce #&#39;- &#39;(1 2 3 4)) ;; =&amp;gt; -8&#xA;(-reduce #&#39;list &#39;(1 2 3 4)) ;; =&amp;gt; (((1 2) 3) 4)&#xA;(--reduce (format &#34;%s-%d&#34; acc it) &#39;(1 2 3)) ;; =&amp;gt; &#34;1-2-3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-reduce-r &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Reduce the function &lt;code&gt;fn&lt;/code&gt; across &lt;code&gt;list&lt;/code&gt; in reverse. Return the result of applying &lt;code&gt;fn&lt;/code&gt; to the last two elements of &lt;code&gt;list&lt;/code&gt;, then applying &lt;code&gt;fn&lt;/code&gt; to the third-to-last element and the previous result of &lt;code&gt;fn&lt;/code&gt;, etc. That is, the first argument of &lt;code&gt;fn&lt;/code&gt; is the current element, and its second argument the accumulated value. If &lt;code&gt;list&lt;/code&gt; contains a single element, return it without calling &lt;code&gt;fn&lt;/code&gt;. If &lt;code&gt;list&lt;/code&gt; is empty, return the result of calling &lt;code&gt;fn&lt;/code&gt; with no arguments.&lt;/p&gt; &#xA;&lt;p&gt;This function is like &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&#34;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; but the operation associates from the right rather than left. In other words, it starts from the end of &lt;code&gt;list&lt;/code&gt; and flips the arguments to &lt;code&gt;fn&lt;/code&gt;. Conceptually, it is like replacing the conses in &lt;code&gt;list&lt;/code&gt; with applications of &lt;code&gt;fn&lt;/code&gt;, ignoring its last link, and evaluating the resulting expression.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reduce-r&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other folds, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&#34;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&#34;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-reduce-r #&#39;- &#39;(1 2 3 4)) ;; =&amp;gt; -2&#xA;(-reduce-r #&#39;list &#39;(1 2 3 4)) ;; =&amp;gt; (1 (2 (3 4)))&#xA;(--reduce-r (format &#34;%s-%d&#34; acc it) &#39;(1 2 3)) ;; =&amp;gt; &#34;3-2-1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-reductions-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list of &lt;code&gt;fn&lt;/code&gt;&#39;s intermediate reductions across &lt;code&gt;list&lt;/code&gt;. That is, a list of the intermediate values of the accumulator when &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-from-fn-init-list&#34;&gt;&lt;code&gt;-reduce-from&lt;/code&gt;&lt;/a&gt; (which see) is called with the same arguments.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reductions-from&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other folds, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&#34;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-fn-list&#34;&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-reductions-from #&#39;max 0 &#39;(2 1 4 3)) ;; =&amp;gt; (0 2 2 4 4)&#xA;(-reductions-from #&#39;* 1 &#39;(1 2 3 4)) ;; =&amp;gt; (1 1 2 6 24)&#xA;(--reductions-from (format &#34;(FN %s %d)&#34; acc it) &#34;INIT&#34; &#39;(1 2 3)) ;; =&amp;gt; (&#34;INIT&#34; &#34;(FN INIT 1)&#34; &#34;(FN (FN INIT 1) 2)&#34; &#34;(FN (FN (FN INIT 1) 2) 3)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-reductions-r-from &lt;code&gt;(fn init list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list of &lt;code&gt;fn&lt;/code&gt;&#39;s intermediate reductions across reversed &lt;code&gt;list&lt;/code&gt;. That is, a list of the intermediate values of the accumulator when &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&#34;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt; (which see) is called with the same arguments.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reductions-r-from&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other folds, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&#34;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-fn-list&#34;&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-reductions-r-from #&#39;max 0 &#39;(2 1 4 3)) ;; =&amp;gt; (4 4 4 3 0)&#xA;(-reductions-r-from #&#39;* 1 &#39;(1 2 3 4)) ;; =&amp;gt; (24 24 12 4 1)&#xA;(--reductions-r-from (format &#34;(FN %d %s)&#34; it acc) &#34;INIT&#34; &#39;(1 2 3)) ;; =&amp;gt; (&#34;(FN 1 (FN 2 (FN 3 INIT)))&#34; &#34;(FN 2 (FN 3 INIT))&#34; &#34;(FN 3 INIT)&#34; &#34;INIT&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-reductions &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list of &lt;code&gt;fn&lt;/code&gt;&#39;s intermediate reductions across &lt;code&gt;list&lt;/code&gt;. That is, a list of the intermediate values of the accumulator when &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-fn-list&#34;&gt;&lt;code&gt;-reduce&lt;/code&gt;&lt;/a&gt; (which see) is called with the same arguments.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reductions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other folds, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&#34;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-fn-list&#34;&gt;&lt;code&gt;-reductions-r&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-reductions #&#39;+ &#39;(1 2 3 4)) ;; =&amp;gt; (1 3 6 10)&#xA;(-reductions #&#39;* &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 6 24)&#xA;(--reductions (format &#34;(FN %s %d)&#34; acc it) &#39;(1 2 3)) ;; =&amp;gt; (1 &#34;(FN 1 2)&#34; &#34;(FN (FN 1 2) 3)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-reductions-r &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list of &lt;code&gt;fn&lt;/code&gt;&#39;s intermediate reductions across reversed &lt;code&gt;list&lt;/code&gt;. That is, a list of the intermediate values of the accumulator when &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&#34;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; (which see) is called with the same arguments.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--reductions-r&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other folds, see also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-r-from-fn-init-list&#34;&gt;&lt;code&gt;-reductions-r-from&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reductions-fn-list&#34;&gt;&lt;code&gt;-reductions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-reductions-r #&#39;+ &#39;(1 2 3 4)) ;; =&amp;gt; (10 9 7 4)&#xA;(-reductions-r #&#39;* &#39;(1 2 3 4)) ;; =&amp;gt; (24 24 12 4)&#xA;(--reductions-r (format &#34;(FN %d %s)&#34; it acc) &#39;(1 2 3)) ;; =&amp;gt; (&#34;(FN 1 (FN 2 3))&#34; &#34;(FN 2 3)&#34; 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-count &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Counts the number of items in &lt;code&gt;list&lt;/code&gt; where (&lt;code&gt;pred&lt;/code&gt; item) is non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-count &#39;even? &#39;(1 2 3 4 5)) ;; =&amp;gt; 2&#xA;(--count (&amp;lt; it 4) &#39;(1 2 3 4)) ;; =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-sum &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the sum of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-sum ()) ;; =&amp;gt; 0&#xA;(-sum &#39;(1)) ;; =&amp;gt; 1&#xA;(-sum &#39;(1 2 3 4)) ;; =&amp;gt; 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-running-sum &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list with running sums of items in &lt;code&gt;list&lt;/code&gt;. &lt;code&gt;list&lt;/code&gt; must be non-empty.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-running-sum &#39;(1 2 3 4)) ;; =&amp;gt; (1 3 6 10)&#xA;(-running-sum &#39;(1)) ;; =&amp;gt; (1)&#xA;(-running-sum ()) ;; Wrong type argument: consp, nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-product &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the product of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-product ()) ;; =&amp;gt; 1&#xA;(-product &#39;(1)) ;; =&amp;gt; 1&#xA;(-product &#39;(1 2 3 4)) ;; =&amp;gt; 24&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-running-product &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list with running products of items in &lt;code&gt;list&lt;/code&gt;. &lt;code&gt;list&lt;/code&gt; must be non-empty.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-running-product &#39;(1 2 3 4)) ;; =&amp;gt; (1 2 6 24)&#xA;(-running-product &#39;(1)) ;; =&amp;gt; (1)&#xA;(-running-product ()) ;; Wrong type argument: consp, nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-inits &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return all prefixes of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-inits &#39;(1 2 3 4)) ;; =&amp;gt; (nil (1) (1 2) (1 2 3) (1 2 3 4))&#xA;(-inits nil) ;; =&amp;gt; (nil)&#xA;(-inits &#39;(1)) ;; =&amp;gt; (nil (1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-tails &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return all suffixes of &lt;code&gt;list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-tails &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3 4) (2 3 4) (3 4) (4) nil)&#xA;(-tails nil) ;; =&amp;gt; (nil)&#xA;(-tails &#39;(1)) ;; =&amp;gt; ((1) nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-common-prefix &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the longest common prefix of &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-common-prefix &#39;(1)) ;; =&amp;gt; (1)&#xA;(-common-prefix &#39;(1 2) &#39;(3 4) &#39;(1 2)) ;; =&amp;gt; ()&#xA;(-common-prefix &#39;(1 2) &#39;(1 2 3) &#39;(1 2 3 4)) ;; =&amp;gt; (1 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-common-suffix &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the longest common suffix of &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-common-suffix &#39;(1)) ;; =&amp;gt; (1)&#xA;(-common-suffix &#39;(1 2) &#39;(3 4) &#39;(1 2)) ;; =&amp;gt; ()&#xA;(-common-suffix &#39;(1 2 3 4) &#39;(2 3 4) &#39;(3 4)) ;; =&amp;gt; (3 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-min &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the smallest value from &lt;code&gt;list&lt;/code&gt; of numbers or markers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-min &#39;(0)) ;; =&amp;gt; 0&#xA;(-min &#39;(3 2 1)) ;; =&amp;gt; 1&#xA;(-min &#39;(1 2 3)) ;; =&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-min-by &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Take a comparison function &lt;code&gt;comparator&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return the least element of the list by the comparison function.&lt;/p&gt; &#xA;&lt;p&gt;See also combinator &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-on-op-trans&#34;&gt;&lt;code&gt;-on&lt;/code&gt;&lt;/a&gt; which can transform the values before comparing them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-min-by &#39;&amp;gt; &#39;(4 3 6 1)) ;; =&amp;gt; 1&#xA;(--min-by (&amp;gt; (car it) (car other)) &#39;((1 2 3) (2) (3 2))) ;; =&amp;gt; (1 2 3)&#xA;(--min-by (&amp;gt; (length it) (length other)) &#39;((1 2 3) (2) (3 2))) ;; =&amp;gt; (2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-max &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the largest value from &lt;code&gt;list&lt;/code&gt; of numbers or markers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-max &#39;(0)) ;; =&amp;gt; 0&#xA;(-max &#39;(3 2 1)) ;; =&amp;gt; 3&#xA;(-max &#39;(1 2 3)) ;; =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-max-by &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Take a comparison function &lt;code&gt;comparator&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return the greatest element of the list by the comparison function.&lt;/p&gt; &#xA;&lt;p&gt;See also combinator &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-on-op-trans&#34;&gt;&lt;code&gt;-on&lt;/code&gt;&lt;/a&gt; which can transform the values before comparing them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-max-by &#39;&amp;gt; &#39;(4 3 6 1)) ;; =&amp;gt; 6&#xA;(--max-by (&amp;gt; (car it) (car other)) &#39;((1 2 3) (2) (3 2))) ;; =&amp;gt; (3 2)&#xA;(--max-by (&amp;gt; (length it) (length other)) &#39;((1 2 3) (2) (3 2))) ;; =&amp;gt; (1 2 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unfolding&lt;/h2&gt; &#xA;&lt;p&gt;Operations dual to reductions, building lists from a seed value rather than consuming a list to produce a single value.&lt;/p&gt; &#xA;&lt;h4&gt;-iterate &lt;code&gt;(fun init n)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list of iterated applications of &lt;code&gt;fun&lt;/code&gt; to &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This means a list of the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(`init` (`fun` `init`) (`fun` (`fun` `init`)) ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt; is the length of the returned list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-iterate #&#39;1+ 1 10) ;; =&amp;gt; (1 2 3 4 5 6 7 8 9 10)&#xA;(-iterate (lambda (x) (+ x x)) 2 5) ;; =&amp;gt; (2 4 8 16 32)&#xA;(--iterate (* it it) 2 5) ;; =&amp;gt; (2 4 16 256 65536)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-unfold &lt;code&gt;(fun seed)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Build a list from &lt;code&gt;seed&lt;/code&gt; using &lt;code&gt;fun&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is &#34;dual&#34; operation to &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&#34;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt;: while -reduce-r consumes a list to produce a single value, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-unfold-fun-seed&#34;&gt;&lt;code&gt;-unfold&lt;/code&gt;&lt;/a&gt; takes a seed value and builds a (potentially infinite!) list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fun&lt;/code&gt; should return &lt;code&gt;nil&lt;/code&gt; to stop the generating process, or a cons (&lt;code&gt;a&lt;/code&gt; . &lt;code&gt;b&lt;/code&gt;), where &lt;code&gt;a&lt;/code&gt; will be prepended to the result and &lt;code&gt;b&lt;/code&gt; is the new seed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-unfold (lambda (x) (unless (= x 0) (cons x (1- x)))) 10) ;; =&amp;gt; (10 9 8 7 6 5 4 3 2 1)&#xA;(--unfold (when it (cons it (cdr it))) &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3 4) (2 3 4) (3 4) (4))&#xA;(--unfold (when it (cons it (butlast it))) &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3 4) (1 2 3) (1 2) (1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Predicates&lt;/h2&gt; &#xA;&lt;p&gt;Reductions of one or more lists to a boolean value.&lt;/p&gt; &#xA;&lt;h4&gt;-some &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return (&lt;code&gt;pred&lt;/code&gt; x) for the first &lt;code&gt;list&lt;/code&gt; item where (&lt;code&gt;pred&lt;/code&gt; x) is non-&lt;code&gt;nil&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-any&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--some&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-some #&#39;stringp &#39;(1 &#34;2&#34; 3)) ;; =&amp;gt; t&#xA;(--some (string-match-p &#34;x&#34; it) &#39;(&#34;foo&#34; &#34;axe&#34; &#34;xor&#34;)) ;; =&amp;gt; 1&#xA;(--some (= it-index 3) &#39;(0 1 2)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-every &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt; for all items in &lt;code&gt;list&lt;/code&gt;. If so, return the last such result of &lt;code&gt;pred&lt;/code&gt;. Otherwise, once an item is reached for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, return &lt;code&gt;nil&lt;/code&gt; without calling &lt;code&gt;pred&lt;/code&gt; on any further &lt;code&gt;list&lt;/code&gt; elements.&lt;/p&gt; &#xA;&lt;p&gt;This function is like &lt;code&gt;-every-p&lt;/code&gt;, but on success returns the last non-&lt;code&gt;nil&lt;/code&gt; result of &lt;code&gt;pred&lt;/code&gt; instead of just &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--every&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-every #&#39;numberp &#39;(1 2 3)) ;; =&amp;gt; t&#xA;(--every (string-match-p &#34;x&#34; it) &#39;(&#34;axe&#34; &#34;xor&#34;)) ;; =&amp;gt; 0&#xA;(--every (= it it-index) &#39;(0 1 3)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-any? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return &lt;code&gt;t&lt;/code&gt; if (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;) is non-&lt;code&gt;nil&lt;/code&gt; for any &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-any-p&lt;/code&gt;, &lt;code&gt;-some?&lt;/code&gt;, &lt;code&gt;-some-p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-any? #&#39;numberp &#39;(nil 0 t)) ;; =&amp;gt; t&#xA;(-any? #&#39;numberp &#39;(nil t t)) ;; =&amp;gt; nil&#xA;(-any? #&#39;null &#39;(1 3 5)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-all? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return &lt;code&gt;t&lt;/code&gt; if (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;) is non-&lt;code&gt;nil&lt;/code&gt; for all &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;. In the latter case, stop after the first &lt;code&gt;x&lt;/code&gt; for which (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;) is &lt;code&gt;nil&lt;/code&gt;, without calling &lt;code&gt;pred&lt;/code&gt; on any subsequent elements of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The similar function &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-every-pred-list&#34;&gt;&lt;code&gt;-every&lt;/code&gt;&lt;/a&gt; is more widely useful, since it returns the last non-&lt;code&gt;nil&lt;/code&gt; result of &lt;code&gt;pred&lt;/code&gt; instead of just &lt;code&gt;t&lt;/code&gt; on success.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-all-p&lt;/code&gt;, &lt;code&gt;-every-p&lt;/code&gt;, &lt;code&gt;-every?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--all?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-all? #&#39;numberp &#39;(1 2 3)) ;; =&amp;gt; t&#xA;(-all? #&#39;numberp &#39;(2 t 6)) ;; =&amp;gt; nil&#xA;(--all? (= 0 (% it 2)) &#39;(2 4 6)) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-none? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return &lt;code&gt;t&lt;/code&gt; if (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;) is &lt;code&gt;nil&lt;/code&gt; for all &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-none-p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-none? &#39;even? &#39;(1 2 3)) ;; =&amp;gt; nil&#xA;(-none? &#39;even? &#39;(1 3 5)) ;; =&amp;gt; t&#xA;(--none? (= 0 (% it 2)) &#39;(1 2 3)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-only-some? &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return &lt;code&gt;t&lt;/code&gt; if different &lt;code&gt;list&lt;/code&gt; items both satisfy and do not satisfy &lt;code&gt;pred&lt;/code&gt;. That is, if &lt;code&gt;pred&lt;/code&gt; returns both &lt;code&gt;nil&lt;/code&gt; for at least one item, and non-&lt;code&gt;nil&lt;/code&gt; for at least one other item in &lt;code&gt;list&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt; if all items satisfy the predicate or none of them do.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-only-some-p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-only-some? &#39;even? &#39;(1 2 3)) ;; =&amp;gt; t&#xA;(-only-some? &#39;even? &#39;(1 3 5)) ;; =&amp;gt; nil&#xA;(-only-some? &#39;even? &#39;(2 4 6)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-contains? &lt;code&gt;(list element)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; contains &lt;code&gt;element&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that&#39;s non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-contains-p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-contains? &#39;(1 2 3) 1) ;; =&amp;gt; t&#xA;(-contains? &#39;(1 2 3) 2) ;; =&amp;gt; t&#xA;(-contains? &#39;(1 2 3) 4) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-same-items? &lt;code&gt;(list list2)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return true if &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt; has the same items.&lt;/p&gt; &#xA;&lt;p&gt;The order of the elements in the lists does not matter.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-same-items-p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-same-items? &#39;(1 2 3) &#39;(1 2 3)) ;; =&amp;gt; t&#xA;(-same-items? &#39;(1 2 3) &#39;(3 2 1)) ;; =&amp;gt; t&#xA;(-same-items? &#39;(1 2 3) &#39;(1 2 3 4)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-is-prefix? &lt;code&gt;(prefix list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;prefix&lt;/code&gt; is a prefix of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-is-prefix-p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-is-prefix? &#39;(1 2 3) &#39;(1 2 3 4 5)) ;; =&amp;gt; t&#xA;(-is-prefix? &#39;(1 2 3 4 5) &#39;(1 2 3)) ;; =&amp;gt; nil&#xA;(-is-prefix? &#39;(1 3) &#39;(1 2 3 4 5)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-is-suffix? &lt;code&gt;(suffix list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;suffix&lt;/code&gt; is a suffix of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-is-suffix-p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-is-suffix? &#39;(3 4 5) &#39;(1 2 3 4 5)) ;; =&amp;gt; t&#xA;(-is-suffix? &#39;(1 2 3 4 5) &#39;(3 4 5)) ;; =&amp;gt; nil&#xA;(-is-suffix? &#39;(3 5) &#39;(1 2 3 4 5)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-is-infix? &lt;code&gt;(infix list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;infix&lt;/code&gt; is infix of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This operation runs in O(n^2) time&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-is-infix-p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-is-infix? &#39;(1 2 3) &#39;(1 2 3 4 5)) ;; =&amp;gt; t&#xA;(-is-infix? &#39;(2 3 4) &#39;(1 2 3 4 5)) ;; =&amp;gt; t&#xA;(-is-infix? &#39;(3 4 5) &#39;(1 2 3 4 5)) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-cons-pair? &lt;code&gt;(obj)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; is a true cons pair. That is, a cons (&lt;code&gt;a&lt;/code&gt; . &lt;code&gt;b&lt;/code&gt;) where &lt;code&gt;b&lt;/code&gt; is not a list.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-cons-pair-p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-cons-pair? &#39;(1 . 2)) ;; =&amp;gt; t&#xA;(-cons-pair? &#39;(1 2)) ;; =&amp;gt; nil&#xA;(-cons-pair? &#39;(1)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Partitioning&lt;/h2&gt; &#xA;&lt;p&gt;Functions partitioning the input list into a list of lists.&lt;/p&gt; &#xA;&lt;h4&gt;-split-at &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Split &lt;code&gt;list&lt;/code&gt; into two sublists after the &lt;code&gt;n&lt;/code&gt;th element. The result is a list of two elements (&lt;code&gt;take&lt;/code&gt; &lt;code&gt;drop&lt;/code&gt;) where &lt;code&gt;take&lt;/code&gt; is a new list of the first &lt;code&gt;n&lt;/code&gt; elements of &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;drop&lt;/code&gt; is the remaining elements of &lt;code&gt;list&lt;/code&gt; (not a copy). &lt;code&gt;take&lt;/code&gt; and &lt;code&gt;drop&lt;/code&gt; are like the results of &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-take-n-list&#34;&gt;&lt;code&gt;-take&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-drop-n-list&#34;&gt;&lt;code&gt;-drop&lt;/code&gt;&lt;/a&gt;, respectively, but the split is done in a single list traversal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-split-at 3 &#39;(1 2 3 4 5)) ;; =&amp;gt; ((1 2 3) (4 5))&#xA;(-split-at 17 &#39;(1 2 3 4 5)) ;; =&amp;gt; ((1 2 3 4 5) nil)&#xA;(-split-at 0 &#39;(1 2 3 4 5)) ;; =&amp;gt; (nil (1 2 3 4 5))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-split-with &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Split &lt;code&gt;list&lt;/code&gt; into a prefix satisfying &lt;code&gt;pred&lt;/code&gt;, and the rest. The first sublist is the prefix of &lt;code&gt;list&lt;/code&gt; with successive elements satisfying &lt;code&gt;pred&lt;/code&gt;, and the second sublist is the remaining elements that do not. The result is like performing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;((-take-while `pred` `list`) (-drop-while `pred` `list`))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but in no more than a single pass through &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-split-with &#39;even? &#39;(1 2 3 4)) ;; =&amp;gt; (nil (1 2 3 4))&#xA;(-split-with &#39;even? &#39;(2 4 5 6)) ;; =&amp;gt; ((2 4) (5 6))&#xA;(--split-with (&amp;lt; it 4) &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; ((1 2 3) (4 3 2 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-split-on &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Split the &lt;code&gt;list&lt;/code&gt; each time &lt;code&gt;item&lt;/code&gt; is found.&lt;/p&gt; &#xA;&lt;p&gt;Unlike &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-by-fn-list&#34;&gt;&lt;code&gt;-partition-by&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;item&lt;/code&gt; is discarded from the results. Empty lists are also removed from the result.&lt;/p&gt; &#xA;&lt;p&gt;Comparison is done by &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-split-when-fn-list&#34;&gt;&lt;code&gt;-split-when&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-split-on &#39;| &#39;(Nil | Leaf a | Node [Tree a])) ;; =&amp;gt; ((Nil) (Leaf a) (Node [Tree a]))&#xA;(-split-on :endgroup &#39;(&#34;a&#34; &#34;b&#34; :endgroup &#34;c&#34; :endgroup &#34;d&#34; &#34;e&#34;)) ;; =&amp;gt; ((&#34;a&#34; &#34;b&#34;) (&#34;c&#34;) (&#34;d&#34; &#34;e&#34;))&#xA;(-split-on :endgroup &#39;(&#34;a&#34; &#34;b&#34; :endgroup :endgroup &#34;d&#34; &#34;e&#34;)) ;; =&amp;gt; ((&#34;a&#34; &#34;b&#34;) (&#34;d&#34; &#34;e&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-split-when &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Split the &lt;code&gt;list&lt;/code&gt; on each element where &lt;code&gt;fn&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-by-fn-list&#34;&gt;&lt;code&gt;-partition-by&lt;/code&gt;&lt;/a&gt;, the &#34;matched&#34; element is discarded from the results. Empty lists are also removed from the result.&lt;/p&gt; &#xA;&lt;p&gt;This function can be thought of as a generalization of &lt;code&gt;split-string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-split-when &#39;even? &#39;(1 2 3 4 5 6)) ;; =&amp;gt; ((1) (3) (5))&#xA;(-split-when &#39;even? &#39;(1 2 3 4 6 8 9)) ;; =&amp;gt; ((1) (3) (9))&#xA;(--split-when (memq it &#39;(&amp;amp;optional &amp;amp;rest)) &#39;(a b &amp;amp;optional c d &amp;amp;rest args)) ;; =&amp;gt; ((a b) (c d) (args))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-separate &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Split &lt;code&gt;list&lt;/code&gt; into two sublists based on whether items satisfy &lt;code&gt;pred&lt;/code&gt;. The result is like performing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;((-filter `pred` `list`) (-remove `pred` `list`))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but in a single pass through &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-separate (lambda (num) (= 0 (% num 2))) &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((2 4 6) (1 3 5 7))&#xA;(--separate (&amp;lt; it 5) &#39;(3 7 5 9 3 2 1 4 6)) ;; =&amp;gt; ((3 3 2 1 4) (7 5 9 6))&#xA;(-separate &#39;cdr &#39;((1 2) (1) (1 2 3) (4))) ;; =&amp;gt; (((1 2) (1 2 3)) ((1) (4)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list with the items in &lt;code&gt;list&lt;/code&gt; grouped into &lt;code&gt;n&lt;/code&gt;-sized sublists. If there are not enough items to make the last group &lt;code&gt;n&lt;/code&gt;-sized, those items are discarded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-partition 2 &#39;(1 2 3 4 5 6)) ;; =&amp;gt; ((1 2) (3 4) (5 6))&#xA;(-partition 2 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((1 2) (3 4) (5 6))&#xA;(-partition 3 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((1 2 3) (4 5 6))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition-all &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list with the items in &lt;code&gt;list&lt;/code&gt; grouped into &lt;code&gt;n&lt;/code&gt;-sized sublists. The last group may contain less than &lt;code&gt;n&lt;/code&gt; items.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-partition-all 2 &#39;(1 2 3 4 5 6)) ;; =&amp;gt; ((1 2) (3 4) (5 6))&#xA;(-partition-all 2 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((1 2) (3 4) (5 6) (7))&#xA;(-partition-all 3 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; ((1 2 3) (4 5 6) (7))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition-in-steps &lt;code&gt;(n step list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Partition &lt;code&gt;list&lt;/code&gt; into sublists of length &lt;code&gt;n&lt;/code&gt; that are &lt;code&gt;step&lt;/code&gt; items apart. Like &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partition-all-in-steps-n-step-list&#34;&gt;&lt;code&gt;-partition-all-in-steps&lt;/code&gt;&lt;/a&gt;, but if there are not enough items to make the last group &lt;code&gt;n&lt;/code&gt;-sized, those items are discarded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-partition-in-steps 2 1 &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2) (2 3) (3 4))&#xA;(-partition-in-steps 3 2 &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3))&#xA;(-partition-in-steps 3 2 &#39;(1 2 3 4 5)) ;; =&amp;gt; ((1 2 3) (3 4 5))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition-all-in-steps &lt;code&gt;(n step list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Partition &lt;code&gt;list&lt;/code&gt; into sublists of length &lt;code&gt;n&lt;/code&gt; that are &lt;code&gt;step&lt;/code&gt; items apart. Adjacent groups may overlap if &lt;code&gt;n&lt;/code&gt; exceeds the &lt;code&gt;step&lt;/code&gt; stride. Trailing groups may contain less than &lt;code&gt;n&lt;/code&gt; items.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-partition-all-in-steps 2 1 &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2) (2 3) (3 4) (4))&#xA;(-partition-all-in-steps 3 2 &#39;(1 2 3 4)) ;; =&amp;gt; ((1 2 3) (3 4))&#xA;(-partition-all-in-steps 3 2 &#39;(1 2 3 4 5)) ;; =&amp;gt; ((1 2 3) (3 4 5) (5))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition-by &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;, splitting it each time &lt;code&gt;fn&lt;/code&gt; returns a new value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-partition-by &#39;even? ()) ;; =&amp;gt; ()&#xA;(-partition-by &#39;even? &#39;(1 1 2 2 2 3 4 6 8)) ;; =&amp;gt; ((1 1) (2 2 2) (3) (4 6 8))&#xA;(--partition-by (&amp;lt; it 3) &#39;(1 2 3 4 3 2 1)) ;; =&amp;gt; ((1 2) (3 4 3) (2 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition-by-header &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to the first item in &lt;code&gt;list&lt;/code&gt;. That is the header value. Apply &lt;code&gt;fn&lt;/code&gt; to each item in &lt;code&gt;list&lt;/code&gt;, splitting it each time &lt;code&gt;fn&lt;/code&gt; returns the header value, but only after seeing at least one other value (the body).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(--partition-by-header (= it 1) &#39;(1 2 3 1 2 1 2 3 4)) ;; =&amp;gt; ((1 2 3) (1 2) (1 2 3 4))&#xA;(--partition-by-header (&amp;gt; it 0) &#39;(1 2 0 1 0 1 2 3 0)) ;; =&amp;gt; ((1 2 0) (1 0) (1 2 3 0))&#xA;(-partition-by-header &#39;even? &#39;(2 1 1 1 4 1 3 5 6 6 1)) ;; =&amp;gt; ((2 1 1 1) (4 1 3 5) (6 6 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition-after-pred &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Partition &lt;code&gt;list&lt;/code&gt; after each element for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--partition-after-pred&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-partition-after-pred #&#39;booleanp ()) ;; =&amp;gt; ()&#xA;(-partition-after-pred #&#39;booleanp &#39;(t t)) ;; =&amp;gt; ((t) (t))&#xA;(-partition-after-pred #&#39;booleanp &#39;(0 0 t t 0 t)) ;; =&amp;gt; ((0 0 t) (t) (0 t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition-before-pred &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Partition directly before each time &lt;code&gt;pred&lt;/code&gt; is true on an element of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-partition-before-pred #&#39;booleanp ()) ;; =&amp;gt; ()&#xA;(-partition-before-pred #&#39;booleanp &#39;(0 t)) ;; =&amp;gt; ((0) (t))&#xA;(-partition-before-pred #&#39;booleanp &#39;(0 0 t 0 t t)) ;; =&amp;gt; ((0 0) (t 0) (t) (t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition-before-item &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Partition directly before each time &lt;code&gt;item&lt;/code&gt; appears in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-partition-before-item 3 ()) ;; =&amp;gt; ()&#xA;(-partition-before-item 3 &#39;(1)) ;; =&amp;gt; ((1))&#xA;(-partition-before-item 3 &#39;(3)) ;; =&amp;gt; ((3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-partition-after-item &lt;code&gt;(item list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Partition directly after each time &lt;code&gt;item&lt;/code&gt; appears in &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-partition-after-item 3 ()) ;; =&amp;gt; ()&#xA;(-partition-after-item 3 &#39;(1)) ;; =&amp;gt; ((1))&#xA;(-partition-after-item 3 &#39;(3)) ;; =&amp;gt; ((3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-group-by &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Separate &lt;code&gt;list&lt;/code&gt; into an alist whose keys are &lt;code&gt;fn&lt;/code&gt; applied to the elements of &lt;code&gt;list&lt;/code&gt;. Keys are compared by &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-group-by &#39;even? ()) ;; =&amp;gt; ()&#xA;(-group-by &#39;even? &#39;(1 1 2 2 2 3 4 6 8)) ;; =&amp;gt; ((nil 1 1 3) (t 2 2 2 4 6 8))&#xA;(--group-by (car (split-string it &#34;/&#34;)) &#39;(&#34;a/b&#34; &#34;c/d&#34; &#34;a/e&#34;)) ;; =&amp;gt; ((&#34;a&#34; &#34;a/b&#34; &#34;a/e&#34;) (&#34;c&#34; &#34;c/d&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Indexing&lt;/h2&gt; &#xA;&lt;p&gt;Functions retrieving or sorting based on list indices and related predicates.&lt;/p&gt; &#xA;&lt;h4&gt;-elem-index &lt;code&gt;(elem list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the index of the first element in the given &lt;code&gt;list&lt;/code&gt; which is equal to the query element &lt;code&gt;elem&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; if there is no such element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-elem-index 2 &#39;(6 7 8 2 3 4)) ;; =&amp;gt; 3&#xA;(-elem-index &#34;bar&#34; &#39;(&#34;foo&#34; &#34;bar&#34; &#34;baz&#34;)) ;; =&amp;gt; 1&#xA;(-elem-index &#39;(1 2) &#39;((3) (5 6) (1 2) nil)) ;; =&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-elem-indices &lt;code&gt;(elem list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the indices of all elements in &lt;code&gt;list&lt;/code&gt; equal to the query element &lt;code&gt;elem&lt;/code&gt;, in ascending order.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-elem-indices 2 &#39;(6 7 8 2 3 4 2 1)) ;; =&amp;gt; (3 6)&#xA;(-elem-indices &#34;bar&#34; &#39;(&#34;foo&#34; &#34;bar&#34; &#34;baz&#34;)) ;; =&amp;gt; (1)&#xA;(-elem-indices &#39;(1 2) &#39;((3) (1 2) (5 6) (1 2) nil)) ;; =&amp;gt; (1 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-find-index &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Take a predicate &lt;code&gt;pred&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return the index of the first element in the list satisfying the predicate, or &lt;code&gt;nil&lt;/code&gt; if there is no such element.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-first-pred-list&#34;&gt;&lt;code&gt;-first&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-find-index &#39;even? &#39;(2 4 1 6 3 3 5 8)) ;; =&amp;gt; 0&#xA;(--find-index (&amp;lt; 5 it) &#39;(2 4 1 6 3 3 5 8)) ;; =&amp;gt; 3&#xA;(-find-index (-partial &#39;string-lessp &#34;baz&#34;) &#39;(&#34;bar&#34; &#34;foo&#34; &#34;baz&#34;)) ;; =&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-find-last-index &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Take a predicate &lt;code&gt;pred&lt;/code&gt; and a &lt;code&gt;list&lt;/code&gt; and return the index of the last element in the list satisfying the predicate, or &lt;code&gt;nil&lt;/code&gt; if there is no such element.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-pred-list&#34;&gt;&lt;code&gt;-last&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-find-last-index &#39;even? &#39;(2 4 1 6 3 3 5 8)) ;; =&amp;gt; 7&#xA;(--find-last-index (&amp;lt; 5 it) &#39;(2 7 1 6 3 8 5 2)) ;; =&amp;gt; 5&#xA;(-find-last-index (-partial &#39;string-lessp &#34;baz&#34;) &#39;(&#34;q&#34; &#34;foo&#34; &#34;baz&#34;)) ;; =&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-find-indices &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the indices of all elements in &lt;code&gt;list&lt;/code&gt; satisfying the predicate &lt;code&gt;pred&lt;/code&gt;, in ascending order.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-find-indices &#39;even? &#39;(2 4 1 6 3 3 5 8)) ;; =&amp;gt; (0 1 3 7)&#xA;(--find-indices (&amp;lt; 5 it) &#39;(2 4 1 6 3 3 5 8)) ;; =&amp;gt; (3 7)&#xA;(-find-indices (-partial &#39;string-lessp &#34;baz&#34;) &#39;(&#34;bar&#34; &#34;foo&#34; &#34;baz&#34;)) ;; =&amp;gt; (1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-grade-up &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Grade elements of &lt;code&gt;list&lt;/code&gt; using &lt;code&gt;comparator&lt;/code&gt; relation. This yields a permutation vector such that applying this permutation to &lt;code&gt;list&lt;/code&gt; sorts it in ascending order.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-grade-up #&#39;&amp;lt; &#39;(3 1 4 2 1 3 3)) ;; =&amp;gt; (1 4 3 0 5 6 2)&#xA;(let ((l &#39;(3 1 4 2 1 3 3))) (-select-by-indices (-grade-up #&#39;&amp;lt; l) l)) ;; =&amp;gt; (1 1 2 3 3 3 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-grade-down &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Grade elements of &lt;code&gt;list&lt;/code&gt; using &lt;code&gt;comparator&lt;/code&gt; relation. This yields a permutation vector such that applying this permutation to &lt;code&gt;list&lt;/code&gt; sorts it in descending order.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-grade-down #&#39;&amp;lt; &#39;(3 1 4 2 1 3 3)) ;; =&amp;gt; (2 0 5 6 3 1 4)&#xA;(let ((l &#39;(3 1 4 2 1 3 3))) (-select-by-indices (-grade-down #&#39;&amp;lt; l) l)) ;; =&amp;gt; (4 3 3 3 2 1 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set operations&lt;/h2&gt; &#xA;&lt;p&gt;Operations pretending lists are sets.&lt;/p&gt; &#xA;&lt;h4&gt;-union &lt;code&gt;(list list2)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list of all elements appearing in either &lt;code&gt;list1&lt;/code&gt; or &lt;code&gt;list2&lt;/code&gt;. Equality is defined by the value of &lt;code&gt;-compare-fn&lt;/code&gt; if non-&lt;code&gt;nil&lt;/code&gt;; otherwise &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-union &#39;(1 2 3) &#39;(3 4 5)) ;; =&amp;gt; (1 2 3 4 5)&#xA;(-union &#39;(1 2 3 4) ()) ;; =&amp;gt; (1 2 3 4)&#xA;(-union &#39;(1 1 2 2) &#39;(3 2 1)) ;; =&amp;gt; (1 1 2 2 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-difference &lt;code&gt;(list list2)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list with only the members of &lt;code&gt;list&lt;/code&gt; that are not in &lt;code&gt;list2&lt;/code&gt;. The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that&#39;s non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-difference () ()) ;; =&amp;gt; ()&#xA;(-difference &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; (1 2 3)&#xA;(-difference &#39;(1 2 3 4) &#39;(3 4 5 6)) ;; =&amp;gt; (1 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-intersection &lt;code&gt;(list list2)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list of the elements appearing in both &lt;code&gt;list1&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt;. Equality is defined by the value of &lt;code&gt;-compare-fn&lt;/code&gt; if non-&lt;code&gt;nil&lt;/code&gt;; otherwise &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-intersection () ()) ;; =&amp;gt; ()&#xA;(-intersection &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; ()&#xA;(-intersection &#39;(1 2 3 4) &#39;(3 4 5 6)) ;; =&amp;gt; (3 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-powerset &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the power set of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-powerset ()) ;; =&amp;gt; (nil)&#xA;(-powerset &#39;(x y z)) ;; =&amp;gt; ((x y z) (x y) (x z) (x) (y z) (y) (z) nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-permutations &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the permutations of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-permutations ()) ;; =&amp;gt; (nil)&#xA;(-permutations &#39;(1 2)) ;; =&amp;gt; ((1 2) (2 1))&#xA;(-permutations &#39;(a b c)) ;; =&amp;gt; ((a b c) (a c b) (b a c) (b c a) (c a b) (c b a))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-distinct &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list with all duplicates removed. The test for equality is done with &lt;code&gt;equal&lt;/code&gt;, or with &lt;code&gt;-compare-fn&lt;/code&gt; if that&#39;s non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-uniq&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-distinct ()) ;; =&amp;gt; ()&#xA;(-distinct &#39;(1 2 2 4)) ;; =&amp;gt; (1 2 4)&#xA;(-distinct &#39;(t t t)) ;; =&amp;gt; (t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other list operations&lt;/h2&gt; &#xA;&lt;p&gt;Other list functions not fit to be classified elsewhere.&lt;/p&gt; &#xA;&lt;h4&gt;-rotate &lt;code&gt;(n list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Rotate &lt;code&gt;list&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; places to the right (left if &lt;code&gt;n&lt;/code&gt; is negative). The time complexity is O(n).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-rotate 3 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; (5 6 7 1 2 3 4)&#xA;(-rotate -3 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; (4 5 6 7 1 2 3)&#xA;(-rotate 16 &#39;(1 2 3 4 5 6 7)) ;; =&amp;gt; (6 7 1 2 3 4 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-repeat &lt;code&gt;(n x)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list of length &lt;code&gt;n&lt;/code&gt; with each element being &lt;code&gt;x&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is less than 1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-repeat 3 :a) ;; =&amp;gt; (:a :a :a)&#xA;(-repeat 1 :a) ;; =&amp;gt; (:a)&#xA;(-repeat 0 :a) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-cons* &lt;code&gt;(&amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Make a new list from the elements of &lt;code&gt;args&lt;/code&gt;. The last 2 elements of &lt;code&gt;args&lt;/code&gt; are used as the final cons of the result, so if the final element of &lt;code&gt;args&lt;/code&gt; is not a list, the result is a dotted list. With no &lt;code&gt;args&lt;/code&gt;, return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-cons* 1 2) ;; =&amp;gt; (1 . 2)&#xA;(-cons* 1 2 3) ;; =&amp;gt; (1 2 . 3)&#xA;(-cons* 1) ;; =&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-snoc &lt;code&gt;(list elem &amp;amp;rest elements)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Append &lt;code&gt;elem&lt;/code&gt; to the end of the list.&lt;/p&gt; &#xA;&lt;p&gt;This is like &lt;code&gt;cons&lt;/code&gt;, but operates on the end of list.&lt;/p&gt; &#xA;&lt;p&gt;If any &lt;code&gt;elements&lt;/code&gt; are given, append them to the list as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-snoc &#39;(1 2 3) 4) ;; =&amp;gt; (1 2 3 4)&#xA;(-snoc &#39;(1 2 3) 4 5 6) ;; =&amp;gt; (1 2 3 4 5 6)&#xA;(-snoc &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; (1 2 3 (4 5 6))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-interpose &lt;code&gt;(sep list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list of all elements in &lt;code&gt;list&lt;/code&gt; separated by &lt;code&gt;sep&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-interpose &#34;-&#34; ()) ;; =&amp;gt; ()&#xA;(-interpose &#34;-&#34; &#39;(&#34;a&#34;)) ;; =&amp;gt; (&#34;a&#34;)&#xA;(-interpose &#34;-&#34; &#39;(&#34;a&#34; &#34;b&#34; &#34;c&#34;)) ;; =&amp;gt; (&#34;a&#34; &#34;-&#34; &#34;b&#34; &#34;-&#34; &#34;c&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-interleave &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a new list of the first item in each list, then the second etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-interleave &#39;(1 2) &#39;(&#34;a&#34; &#34;b&#34;)) ;; =&amp;gt; (1 &#34;a&#34; 2 &#34;b&#34;)&#xA;(-interleave &#39;(1 2) &#39;(&#34;a&#34; &#34;b&#34;) &#39;(&#34;A&#34; &#34;B&#34;)) ;; =&amp;gt; (1 &#34;a&#34; &#34;A&#34; 2 &#34;b&#34; &#34;B&#34;)&#xA;(-interleave &#39;(1 2 3) &#39;(&#34;a&#34; &#34;b&#34;)) ;; =&amp;gt; (1 &#34;a&#34; 2 &#34;b&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-iota &lt;code&gt;(count &amp;amp;optional start step)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list containing &lt;code&gt;count&lt;/code&gt; numbers. Starts from &lt;code&gt;start&lt;/code&gt; and adds &lt;code&gt;step&lt;/code&gt; each time. The default &lt;code&gt;start&lt;/code&gt; is zero, the default &lt;code&gt;step&lt;/code&gt; is 1. This function takes its name from the corresponding primitive in the &lt;code&gt;apl&lt;/code&gt; language.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-iota 6) ;; =&amp;gt; (0 1 2 3 4 5)&#xA;(-iota 4 2.5 -2) ;; =&amp;gt; (2.5 0.5 -1.5 -3.5)&#xA;(-iota -1) ;; Wrong type argument: natnump, -1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-zip-with &lt;code&gt;(fn list1 list2)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Zip the two lists &lt;code&gt;list1&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt; using a function &lt;code&gt;fn&lt;/code&gt;. This function is applied pairwise taking as first argument element of &lt;code&gt;list1&lt;/code&gt; and as second argument element of &lt;code&gt;list2&lt;/code&gt; at corresponding position.&lt;/p&gt; &#xA;&lt;p&gt;The anaphoric form &lt;code&gt;--zip-with&lt;/code&gt; binds the elements from &lt;code&gt;list1&lt;/code&gt; as symbol &lt;code&gt;it&lt;/code&gt;, and the elements from &lt;code&gt;list2&lt;/code&gt; as symbol &lt;code&gt;other&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-zip-with &#39;+ &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; (5 7 9)&#xA;(-zip-with &#39;cons &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; ((1 . 4) (2 . 5) (3 . 6))&#xA;(--zip-with (concat it &#34; and &#34; other) &#39;(&#34;Batman&#34; &#34;Jekyll&#34;) &#39;(&#34;Robin&#34; &#34;Hyde&#34;)) ;; =&amp;gt; (&#34;Batman and Robin&#34; &#34;Jekyll and Hyde&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-zip &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Zip &lt;code&gt;lists&lt;/code&gt; together. Group the head of each list, followed by the second elements of each list, and so on. The lengths of the returned groupings are equal to the length of the shortest input list.&lt;/p&gt; &#xA;&lt;p&gt;If two lists are provided as arguments, return the groupings as a list of cons cells. Otherwise, return the groupings as a list of lists.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-rest-lists&#34;&gt;&lt;code&gt;-zip-lists&lt;/code&gt;&lt;/a&gt; if you need the return value to always be a list of lists.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-zip-pair&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-lists-rest-lists&#34;&gt;&lt;code&gt;-zip-lists&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-zip &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; ((1 . 4) (2 . 5) (3 . 6))&#xA;(-zip &#39;(1 2 3) &#39;(4 5 6 7)) ;; =&amp;gt; ((1 . 4) (2 . 5) (3 . 6))&#xA;(-zip &#39;(1 2) &#39;(3 4 5) &#39;(6)) ;; =&amp;gt; ((1 3 6))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-zip-lists &lt;code&gt;(&amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Zip &lt;code&gt;lists&lt;/code&gt; together. Group the head of each list, followed by the second elements of each list, and so on. The lengths of the returned groupings are equal to the length of the shortest input list.&lt;/p&gt; &#xA;&lt;p&gt;The return value is always list of lists, which is a difference from &lt;code&gt;-zip-pair&lt;/code&gt; which returns a cons-cell in case two input lists are provided.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-rest-lists&#34;&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-zip-lists &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; ((1 4) (2 5) (3 6))&#xA;(-zip-lists &#39;(1 2 3) &#39;(4 5 6 7)) ;; =&amp;gt; ((1 4) (2 5) (3 6))&#xA;(-zip-lists &#39;(1 2) &#39;(3 4 5) &#39;(6)) ;; =&amp;gt; ((1 3 6))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-zip-fill &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Zip &lt;code&gt;lists&lt;/code&gt;, with &lt;code&gt;fill-value&lt;/code&gt; padded onto the shorter lists. The lengths of the returned groupings are equal to the length of the longest input list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-zip-fill 0 &#39;(1 2 3 4 5) &#39;(6 7 8 9)) ;; =&amp;gt; ((1 . 6) (2 . 7) (3 . 8) (4 . 9) (5 . 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-unzip &lt;code&gt;(lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Unzip &lt;code&gt;lists&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This works just like &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-rest-lists&#34;&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt; but takes a list of lists instead of a variable number of arguments, such that&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(-unzip (-zip `l1` `l2` `l3` ...))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is identity (given that the lists are the same length).&lt;/p&gt; &#xA;&lt;p&gt;Note in particular that calling this on a list of two lists will return a list of cons-cells such that the above identity works.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-zip-rest-lists&#34;&gt;&lt;code&gt;-zip&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-unzip (-zip &#39;(1 2 3) &#39;(a b c) &#39;(&#34;e&#34; &#34;f&#34; &#34;g&#34;))) ;; =&amp;gt; ((1 2 3) (a b c) (&#34;e&#34; &#34;f&#34; &#34;g&#34;))&#xA;(-unzip &#39;((1 2) (3 4) (5 6) (7 8) (9 10))) ;; =&amp;gt; ((1 3 5 7 9) (2 4 6 8 10))&#xA;(-unzip &#39;((1 2) (3 4))) ;; =&amp;gt; ((1 . 3) (2 . 4))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-cycle &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return an infinite circular copy of &lt;code&gt;list&lt;/code&gt;. The returned list cycles through the elements of &lt;code&gt;list&lt;/code&gt; and repeats from the beginning.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-take 5 (-cycle &#39;(1 2 3))) ;; =&amp;gt; (1 2 3 1 2)&#xA;(-take 7 (-cycle &#39;(1 &#34;and&#34; 3))) ;; =&amp;gt; (1 &#34;and&#34; 3 1 &#34;and&#34; 3 1)&#xA;(-zip (-cycle &#39;(1 2 3)) &#39;(1 2)) ;; =&amp;gt; ((1 . 1) (2 . 2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-pad &lt;code&gt;(fill-value &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Appends &lt;code&gt;fill-value&lt;/code&gt; to the end of each list in &lt;code&gt;lists&lt;/code&gt; such that they will all have the same length.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-pad 0 ()) ;; =&amp;gt; (nil)&#xA;(-pad 0 &#39;(1)) ;; =&amp;gt; ((1))&#xA;(-pad 0 &#39;(1 2 3) &#39;(4 5)) ;; =&amp;gt; ((1 2 3) (4 5 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-table &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Compute outer product of &lt;code&gt;lists&lt;/code&gt; using function &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;fn&lt;/code&gt; should have the same arity as the number of supplied lists.&lt;/p&gt; &#xA;&lt;p&gt;The outer product is computed by applying fn to all possible combinations created by taking one element from each list in order. The dimension of the result is (length lists).&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-table-flat-fn-rest-lists&#34;&gt;&lt;code&gt;-table-flat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-table &#39;* &#39;(1 2 3) &#39;(1 2 3)) ;; =&amp;gt; ((1 2 3) (2 4 6) (3 6 9))&#xA;(-table (lambda (a b) (-sum (-zip-with &#39;* a b))) &#39;((1 2) (3 4)) &#39;((1 3) (2 4))) ;; =&amp;gt; ((7 15) (10 22))&#xA;(apply &#39;-table &#39;list (-repeat 3 &#39;(1 2))) ;; =&amp;gt; ((((1 1 1) (2 1 1)) ((1 2 1) (2 2 1))) (((1 1 2) (2 1 2)) ((1 2 2) (2 2 2))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-table-flat &lt;code&gt;(fn &amp;amp;rest lists)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Compute flat outer product of &lt;code&gt;lists&lt;/code&gt; using function &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;fn&lt;/code&gt; should have the same arity as the number of supplied lists.&lt;/p&gt; &#xA;&lt;p&gt;The outer product is computed by applying fn to all possible combinations created by taking one element from each list in order. The results are flattened, ignoring the tensor structure of the result. This is equivalent to calling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(-flatten-n (1- (length lists)) (apply &#39;-table fn lists))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but the implementation here is much more efficient.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-flatten-n-num-list&#34;&gt;&lt;code&gt;-flatten-n&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-table-fn-rest-lists&#34;&gt;&lt;code&gt;-table&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-table-flat &#39;list &#39;(1 2 3) &#39;(a b c)) ;; =&amp;gt; ((1 a) (2 a) (3 a) (1 b) (2 b) (3 b) (1 c) (2 c) (3 c))&#xA;(-table-flat &#39;* &#39;(1 2 3) &#39;(1 2 3)) ;; =&amp;gt; (1 2 3 2 4 6 3 6 9)&#xA;(apply &#39;-table-flat &#39;list (-repeat 3 &#39;(1 2))) ;; =&amp;gt; ((1 1 1) (2 1 1) (1 2 1) (2 2 1) (1 1 2) (2 1 2) (1 2 2) (2 2 2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-first &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the first item in &lt;code&gt;list&lt;/code&gt; for which &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt; if no such element is found. To get the first item in the list no questions asked, use &lt;code&gt;car&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;-find&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--first&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-first #&#39;natnump &#39;(-1 0 1)) ;; =&amp;gt; 0&#xA;(-first #&#39;null &#39;(1 2 3)) ;; =&amp;gt; nil&#xA;(--first (&amp;gt; it 2) &#39;(1 2 3)) ;; =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-last &lt;code&gt;(pred list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the last x in &lt;code&gt;list&lt;/code&gt; where (&lt;code&gt;pred&lt;/code&gt; x) is non-&lt;code&gt;nil&lt;/code&gt;, else &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-last &#39;even? &#39;(1 2 3 4 5 6 3 3 3)) ;; =&amp;gt; 6&#xA;(-last &#39;even? &#39;(1 3 7 5 9)) ;; =&amp;gt; nil&#xA;(--last (&amp;gt; (length it) 3) &#39;(&#34;a&#34; &#34;looong&#34; &#34;word&#34; &#34;and&#34; &#34;short&#34; &#34;one&#34;)) ;; =&amp;gt; &#34;short&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-first-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the first item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; on an empty list.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-second-item-list&#34;&gt;&lt;code&gt;-second-item&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-item-list&#34;&gt;&lt;code&gt;-last-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-first-item &#39;(1 2 3)) ;; =&amp;gt; 1&#xA;(-first-item nil) ;; =&amp;gt; nil&#xA;(let ((list (list 1 2 3))) (setf (-first-item list) 5) list) ;; =&amp;gt; (5 2 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-second-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the second item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-third-item-list&#34;&gt;&lt;code&gt;-third-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-second-item &#39;(1 2 3)) ;; =&amp;gt; 2&#xA;(-second-item nil) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-third-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the third item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-fourth-item-list&#34;&gt;&lt;code&gt;-fourth-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-third-item &#39;(1 2 3)) ;; =&amp;gt; 3&#xA;(-third-item nil) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-fourth-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the fourth item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-fifth-item-list&#34;&gt;&lt;code&gt;-fifth-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-fourth-item &#39;(1 2 3 4)) ;; =&amp;gt; 4&#xA;(-fourth-item nil) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-fifth-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the fifth item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is too short.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-last-item-list&#34;&gt;&lt;code&gt;-last-item&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-fifth-item &#39;(1 2 3 4 5)) ;; =&amp;gt; 5&#xA;(-fifth-item nil) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-last-item &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the last item of &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; on an empty list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-last-item &#39;(1 2 3)) ;; =&amp;gt; 3&#xA;(-last-item nil) ;; =&amp;gt; nil&#xA;(let ((list (list 1 2 3))) (setf (-last-item list) 5) list) ;; =&amp;gt; (1 2 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-butlast &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a list of all items in list except for the last.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-butlast &#39;(1 2 3)) ;; =&amp;gt; (1 2)&#xA;(-butlast &#39;(1 2)) ;; =&amp;gt; (1)&#xA;(-butlast &#39;(1)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-sort &lt;code&gt;(comparator list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sort &lt;code&gt;list&lt;/code&gt;, stably, comparing elements using &lt;code&gt;comparator&lt;/code&gt;. Return the sorted list. &lt;code&gt;list&lt;/code&gt; is &lt;code&gt;not&lt;/code&gt; modified by side effects. &lt;code&gt;comparator&lt;/code&gt; is called with two elements of &lt;code&gt;list&lt;/code&gt;, and should return non-&lt;code&gt;nil&lt;/code&gt; if the first element should sort before the second.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-sort &#39;&amp;lt; &#39;(3 1 2)) ;; =&amp;gt; (1 2 3)&#xA;(-sort &#39;&amp;gt; &#39;(3 1 2)) ;; =&amp;gt; (3 2 1)&#xA;(--sort (&amp;lt; it other) &#39;(3 1 2)) ;; =&amp;gt; (1 2 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-list &lt;code&gt;(arg)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Ensure &lt;code&gt;arg&lt;/code&gt; is a list. If &lt;code&gt;arg&lt;/code&gt; is already a list, return it as is (not a copy). Otherwise, return a new list with &lt;code&gt;arg&lt;/code&gt; as its only element.&lt;/p&gt; &#xA;&lt;p&gt;Another supported calling convention is (-list &amp;amp;rest &lt;code&gt;args&lt;/code&gt;). In this case, if &lt;code&gt;arg&lt;/code&gt; is not a list, a new list with all of &lt;code&gt;args&lt;/code&gt; as elements is returned. This use is supported for backward compatibility and is otherwise deprecated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-list 1) ;; =&amp;gt; (1)&#xA;(-list ()) ;; =&amp;gt; ()&#xA;(-list &#39;(1 2 3)) ;; =&amp;gt; (1 2 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-fix &lt;code&gt;(fn list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Compute the (least) fixpoint of &lt;code&gt;fn&lt;/code&gt; with initial input &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is called at least once, results are compared with &lt;code&gt;equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-fix (lambda (l) (-non-nil (--mapcat (-split-at (/ (length it) 2) it) l))) &#39;((1 2 3))) ;; =&amp;gt; ((1) (2) (3))&#xA;(let ((l &#39;((starwars scifi) (jedi starwars warrior)))) (--fix (-uniq (--mapcat (cons it (cdr (assq it l))) it)) &#39;(jedi book))) ;; =&amp;gt; (jedi starwars warrior scifi book)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tree operations&lt;/h2&gt; &#xA;&lt;p&gt;Functions pretending lists are trees.&lt;/p&gt; &#xA;&lt;h4&gt;-tree-seq &lt;code&gt;(branch children tree)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a sequence of the nodes in &lt;code&gt;tree&lt;/code&gt;, in depth-first search order.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;branch&lt;/code&gt; is a predicate of one argument that returns non-&lt;code&gt;nil&lt;/code&gt; if the passed argument is a branch, that is, a node that can have children.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;children&lt;/code&gt; is a function of one argument that returns the children of the passed branch node.&lt;/p&gt; &#xA;&lt;p&gt;Non-branch nodes are simply copied.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-tree-seq &#39;listp &#39;identity &#39;(1 (2 3) 4 (5 (6 7)))) ;; =&amp;gt; ((1 (2 3) 4 (5 (6 7))) 1 (2 3) 2 3 4 (5 (6 7)) 5 (6 7) 6 7)&#xA;(-tree-seq &#39;listp &#39;reverse &#39;(1 (2 3) 4 (5 (6 7)))) ;; =&amp;gt; ((1 (2 3) 4 (5 (6 7))) (5 (6 7)) (6 7) 7 6 5 4 (2 3) 3 2 1)&#xA;(--tree-seq (vectorp it) (append it nil) [1 [2 3] 4 [5 [6 7]]]) ;; =&amp;gt; ([1 [2 3] 4 [5 [6 7]]] 1 [2 3] 2 3 4 [5 [6 7]] 5 [6 7] 6 7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-tree-map &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each element of &lt;code&gt;tree&lt;/code&gt; while preserving the tree structure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-tree-map &#39;1+ &#39;(1 (2 3) (4 (5 6) 7))) ;; =&amp;gt; (2 (3 4) (5 (6 7) 8))&#xA;(-tree-map &#39;(lambda (x) (cons x (expt 2 x))) &#39;(1 (2 3) 4)) ;; =&amp;gt; ((1 . 2) ((2 . 4) (3 . 8)) (4 . 16))&#xA;(--tree-map (length it) &#39;(&#34;&amp;lt;body&amp;gt;&#34; (&#34;&amp;lt;p&amp;gt;&#34; &#34;text&#34; &#34;&amp;lt;/p&amp;gt;&#34;) &#34;&amp;lt;/body&amp;gt;&#34;)) ;; =&amp;gt; (6 (3 4 4) 7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-tree-map-nodes &lt;code&gt;(pred fun tree)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Call &lt;code&gt;fun&lt;/code&gt; on each node of &lt;code&gt;tree&lt;/code&gt; that satisfies &lt;code&gt;pred&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, continue descending down this node. If &lt;code&gt;pred&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt;, apply &lt;code&gt;fun&lt;/code&gt; to this node and do not descend further.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-tree-map-nodes &#39;vectorp (lambda (x) (-sum (append x nil))) &#39;(1 [2 3] 4 (5 [6 7] 8))) ;; =&amp;gt; (1 5 4 (5 13 8))&#xA;(-tree-map-nodes &#39;keywordp (lambda (x) (symbol-name x)) &#39;(1 :foo 4 ((5 6 :bar) :baz 8))) ;; =&amp;gt; (1 &#34;:foo&#34; 4 ((5 6 &#34;:bar&#34;) &#34;:baz&#34; 8))&#xA;(--tree-map-nodes (eq (car-safe it) &#39;add-mode) (-concat it (list :mode &#39;emacs-lisp-mode)) &#39;(with-mode emacs-lisp-mode (foo bar) (add-mode a b) (baz (add-mode c d)))) ;; =&amp;gt; (with-mode emacs-lisp-mode (foo bar) (add-mode a b :mode emacs-lisp-mode) (baz (add-mode c d :mode emacs-lisp-mode)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-tree-reduce &lt;code&gt;(fn tree)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;fn&lt;/code&gt; to reduce elements of list &lt;code&gt;tree&lt;/code&gt;. If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply the reduction recursively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is first applied to first element of the list and second element, then on this result and third element from the list etc.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-fn-list&#34;&gt;&lt;code&gt;-reduce-r&lt;/code&gt;&lt;/a&gt; for how exactly are lists of zero or one element handled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-tree-reduce &#39;+ &#39;(1 (2 3) (4 5))) ;; =&amp;gt; 15&#xA;(-tree-reduce &#39;concat &#39;(&#34;strings&#34; (&#34; on&#34; &#34; various&#34;) ((&#34; levels&#34;)))) ;; =&amp;gt; &#34;strings on various levels&#34;&#xA;(--tree-reduce (cond ((stringp it) (concat it &#34; &#34; acc)) (t (let ((sn (symbol-name it))) (concat &#34;&amp;lt;&#34; sn &#34;&amp;gt;&#34; acc &#34;&amp;lt;/&#34; sn &#34;&amp;gt;&#34;)))) &#39;(body (p &#34;some words&#34;) (div &#34;more&#34; (b &#34;bold&#34;) &#34;words&#34;))) ;; =&amp;gt; &#34;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;some words&amp;lt;/p&amp;gt; &amp;lt;div&amp;gt;more &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; words&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-tree-reduce-from &lt;code&gt;(fn init-value tree)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;fn&lt;/code&gt; to reduce elements of list &lt;code&gt;tree&lt;/code&gt;. If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply the reduction recursively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is first applied to &lt;code&gt;init-value&lt;/code&gt; and first element of the list, then on this result and second element from the list etc.&lt;/p&gt; &#xA;&lt;p&gt;The initial value is ignored on cons pairs as they always contain two elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-tree-reduce-from &#39;+ 1 &#39;(1 (1 1) ((1)))) ;; =&amp;gt; 8&#xA;(--tree-reduce-from (-concat acc (list it)) nil &#39;(1 (2 3 (4 5)) (6 7))) ;; =&amp;gt; ((7 6) ((5 4) 3 2) 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-tree-mapreduce &lt;code&gt;(fn folder tree)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each element of &lt;code&gt;tree&lt;/code&gt;, and make a list of the results. If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply &lt;code&gt;fn&lt;/code&gt; recursively to elements of these nested lists.&lt;/p&gt; &#xA;&lt;p&gt;Then reduce the resulting lists using &lt;code&gt;folder&lt;/code&gt; and initial value &lt;code&gt;init-value&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&#34;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is the same as calling &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-reduce-fn-tree&#34;&gt;&lt;code&gt;-tree-reduce&lt;/code&gt;&lt;/a&gt; after &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-map-fn-tree&#34;&gt;&lt;code&gt;-tree-map&lt;/code&gt;&lt;/a&gt; but is twice as fast as it only traverse the structure once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-tree-mapreduce &#39;list &#39;append &#39;(1 (2 (3 4) (5 6)) (7 (8 9)))) ;; =&amp;gt; (1 2 3 4 5 6 7 8 9)&#xA;(--tree-mapreduce 1 (+ it acc) &#39;(1 (2 (4 9) (2 1)) (7 (4 3)))) ;; =&amp;gt; 9&#xA;(--tree-mapreduce 0 (max acc (1+ it)) &#39;(1 (2 (4 9) (2 1)) (7 (4 3)))) ;; =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-tree-mapreduce-from &lt;code&gt;(fn folder init-value tree)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Apply &lt;code&gt;fn&lt;/code&gt; to each element of &lt;code&gt;tree&lt;/code&gt;, and make a list of the results. If elements of &lt;code&gt;tree&lt;/code&gt; are lists themselves, apply &lt;code&gt;fn&lt;/code&gt; recursively to elements of these nested lists.&lt;/p&gt; &#xA;&lt;p&gt;Then reduce the resulting lists using &lt;code&gt;folder&lt;/code&gt; and initial value &lt;code&gt;init-value&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-reduce-r-from-fn-init-list&#34;&gt;&lt;code&gt;-reduce-r-from&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is the same as calling &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-reduce-from-fn-init-value-tree&#34;&gt;&lt;code&gt;-tree-reduce-from&lt;/code&gt;&lt;/a&gt; after &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-tree-map-fn-tree&#34;&gt;&lt;code&gt;-tree-map&lt;/code&gt;&lt;/a&gt; but is twice as fast as it only traverse the structure once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-tree-mapreduce-from &#39;identity &#39;* 1 &#39;(1 (2 (3 4) (5 6)) (7 (8 9)))) ;; =&amp;gt; 362880&#xA;(--tree-mapreduce-from (+ it it) (cons it acc) nil &#39;(1 (2 (4 9) (2 1)) (7 (4 3)))) ;; =&amp;gt; (2 (4 (8 18) (4 2)) (14 (8 6)))&#xA;(concat &#34;{&#34; (--tree-mapreduce-from (cond ((-cons-pair? it) (concat (symbol-name (car it)) &#34; -&amp;gt; &#34; (symbol-name (cdr it)))) (t (concat (symbol-name it) &#34; : {&#34;))) (concat it (unless (or (equal acc &#34;}&#34;) (equal (substring it (1- (length it))) &#34;{&#34;)) &#34;, &#34;) acc) &#34;}&#34; &#39;((elisp-mode (foo (bar . booze)) (baz . qux)) (c-mode (foo . bla) (bum . bam))))) ;; =&amp;gt; &#34;{elisp-mode : {foo : {bar -&amp;gt; booze}, baz -&amp;gt; qux}, c-mode : {foo -&amp;gt; bla, bum -&amp;gt; bam}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-clone &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Create a deep copy of &lt;code&gt;list&lt;/code&gt;. The new list has the same elements and structure but all cons are replaced with new ones. This is useful when you need to clone a structure such as plist or alist.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let* ((a &#39;(1 2 3)) (b (-clone a))) (nreverse a) b) ;; =&amp;gt; (1 2 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Threading macros&lt;/h2&gt; &#xA;&lt;p&gt;Macros that conditionally combine sequential forms for brevity or readability.&lt;/p&gt; &#xA;&lt;h4&gt;-&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Thread the expr through the forms. Insert &lt;code&gt;x&lt;/code&gt; as the second item in the first form, making a list of it if it is not a list already. If there are more forms, insert the first form as the second item in second form, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-&amp;gt; &#39;(2 3 5)) ;; =&amp;gt; (2 3 5)&#xA;(-&amp;gt; &#39;(2 3 5) (append &#39;(8 13))) ;; =&amp;gt; (2 3 5 8 13)&#xA;(-&amp;gt; &#39;(2 3 5) (append &#39;(8 13)) (-slice 1 -1)) ;; =&amp;gt; (3 5 8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-&amp;gt;&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Thread the expr through the forms. Insert &lt;code&gt;x&lt;/code&gt; as the last item in the first form, making a list of it if it is not a list already. If there are more forms, insert the first form as the last item in second form, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-&amp;gt;&amp;gt; &#39;(1 2 3) (-map &#39;square)) ;; =&amp;gt; (1 4 9)&#xA;(-&amp;gt;&amp;gt; &#39;(1 2 3) (-map &#39;square) (-remove &#39;even?)) ;; =&amp;gt; (1 9)&#xA;(-&amp;gt;&amp;gt; &#39;(1 2 3) (-map &#39;square) (-reduce &#39;+)) ;; =&amp;gt; 14&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;--&amp;gt; &lt;code&gt;(x &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Starting with the value of &lt;code&gt;x&lt;/code&gt;, thread each expression through &lt;code&gt;forms&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Insert &lt;code&gt;x&lt;/code&gt; at the position signified by the symbol &lt;code&gt;it&lt;/code&gt; in the first form. If there are more forms, insert the first form at the position signified by &lt;code&gt;it&lt;/code&gt; in in second form, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(--&amp;gt; &#34;def&#34; (concat &#34;abc&#34; it &#34;ghi&#34;)) ;; =&amp;gt; &#34;abcdefghi&#34;&#xA;(--&amp;gt; &#34;def&#34; (concat &#34;abc&#34; it &#34;ghi&#34;) (upcase it)) ;; =&amp;gt; &#34;ABCDEFGHI&#34;&#xA;(--&amp;gt; &#34;def&#34; (concat &#34;abc&#34; it &#34;ghi&#34;) upcase) ;; =&amp;gt; &#34;ABCDEFGHI&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-as-&amp;gt; &lt;code&gt;(value variable &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Starting with &lt;code&gt;value&lt;/code&gt;, thread &lt;code&gt;variable&lt;/code&gt; through &lt;code&gt;forms&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the first form, bind &lt;code&gt;variable&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. In the second form, bind &lt;code&gt;variable&lt;/code&gt; to the result of the first form, and so forth.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-as-&amp;gt; 3 my-var (1+ my-var) (list my-var) (mapcar (lambda (ele) (* 2 ele)) my-var)) ;; =&amp;gt; (8)&#xA;(-as-&amp;gt; 3 my-var 1+) ;; =&amp;gt; 4&#xA;(-as-&amp;gt; 3 my-var) ;; =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-some-&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When expr is non-&lt;code&gt;nil&lt;/code&gt;, thread it through the first form (via &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&#34;&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt;), and when that result is non-&lt;code&gt;nil&lt;/code&gt;, through the next form, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-some-&amp;gt; &#39;(2 3 5)) ;; =&amp;gt; (2 3 5)&#xA;(-some-&amp;gt; 5 square) ;; =&amp;gt; 25&#xA;(-some-&amp;gt; 5 even? square) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-some-&amp;gt;&amp;gt; &lt;code&gt;(x &amp;amp;optional form &amp;amp;rest more)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When expr is non-&lt;code&gt;nil&lt;/code&gt;, thread it through the first form (via &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&#34;&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;), and when that result is non-&lt;code&gt;nil&lt;/code&gt;, through the next form, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-some-&amp;gt;&amp;gt; &#39;(1 2 3) (-map &#39;square)) ;; =&amp;gt; (1 4 9)&#xA;(-some-&amp;gt;&amp;gt; &#39;(1 3 5) (-last &#39;even?) (+ 100)) ;; =&amp;gt; nil&#xA;(-some-&amp;gt;&amp;gt; &#39;(2 4 6) (-last &#39;even?) (+ 100)) ;; =&amp;gt; 106&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-some--&amp;gt; &lt;code&gt;(expr &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Thread &lt;code&gt;expr&lt;/code&gt; through &lt;code&gt;forms&lt;/code&gt; via &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#---x-rest-forms&#34;&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt;&lt;/a&gt;, while the result is non-&lt;code&gt;nil&lt;/code&gt;. When &lt;code&gt;expr&lt;/code&gt; evaluates to non-&lt;code&gt;nil&lt;/code&gt;, thread the result through the first of &lt;code&gt;forms&lt;/code&gt;, and when that result is non-&lt;code&gt;nil&lt;/code&gt;, thread it through the next form, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-some--&amp;gt; &#34;def&#34; (concat &#34;abc&#34; it &#34;ghi&#34;)) ;; =&amp;gt; &#34;abcdefghi&#34;&#xA;(-some--&amp;gt; nil (concat &#34;abc&#34; it &#34;ghi&#34;)) ;; =&amp;gt; nil&#xA;(-some--&amp;gt; &#39;(0 1) (-remove #&#39;natnump it) (append it it) (-map #&#39;1+ it)) ;; =&amp;gt; ()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-doto &lt;code&gt;(init &amp;amp;rest forms)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Evaluate &lt;code&gt;init&lt;/code&gt; and pass it as argument to &lt;code&gt;forms&lt;/code&gt; with &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&#34;&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;result&lt;/code&gt; of evaluating &lt;code&gt;init&lt;/code&gt; is threaded through each of &lt;code&gt;forms&lt;/code&gt; individually using &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#--x-optional-form-rest-more&#34;&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/a&gt;, which see. The return value is &lt;code&gt;result&lt;/code&gt;, which &lt;code&gt;forms&lt;/code&gt; may have modified by side effect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-doto (list 1 2 3) pop pop) ;; =&amp;gt; (3)&#xA;(-doto (cons 1 2) (setcar 3) (setcdr 4)) ;; =&amp;gt; (3 . 4)&#xA;(gethash &#39;k (--doto (make-hash-table) (puthash &#39;k &#39;v it))) ;; =&amp;gt; v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Binding&lt;/h2&gt; &#xA;&lt;p&gt;Macros that combine &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;let*&lt;/code&gt; with destructuring and flow control.&lt;/p&gt; &#xA;&lt;h4&gt;-when-let &lt;code&gt;((var val) &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If &lt;code&gt;val&lt;/code&gt; evaluates to non-&lt;code&gt;nil&lt;/code&gt;, bind it to &lt;code&gt;var&lt;/code&gt; and execute body.&lt;/p&gt; &#xA;&lt;p&gt;Note: binding is done according to &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-when-let (match-index (string-match &#34;d&#34; &#34;abcd&#34;)) (+ match-index 2)) ;; =&amp;gt; 5&#xA;(-when-let ((&amp;amp;plist :foo foo) (list :foo &#34;foo&#34;)) foo) ;; =&amp;gt; &#34;foo&#34;&#xA;(-when-let ((&amp;amp;plist :foo foo) (list :bar &#34;bar&#34;)) foo) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-when-let* &lt;code&gt;(vars-vals &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If all &lt;code&gt;vals&lt;/code&gt; evaluate to true, bind them to their corresponding &lt;code&gt;vars&lt;/code&gt; and execute body. &lt;code&gt;vars-vals&lt;/code&gt; should be a list of (&lt;code&gt;var&lt;/code&gt; &lt;code&gt;val&lt;/code&gt;) pairs.&lt;/p&gt; &#xA;&lt;p&gt;Note: binding is done according to &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let*&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;vals&lt;/code&gt; are evaluated sequentially, and evaluation stops after the first &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;val&lt;/code&gt; is encountered.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-when-let* ((x 5) (y 3) (z (+ y 4))) (+ x y z)) ;; =&amp;gt; 15&#xA;(-when-let* ((x 5) (y nil) (z 7)) (+ x y z)) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-if-let &lt;code&gt;((var val) then &amp;amp;rest else)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If &lt;code&gt;val&lt;/code&gt; evaluates to non-&lt;code&gt;nil&lt;/code&gt;, bind it to &lt;code&gt;var&lt;/code&gt; and do &lt;code&gt;then&lt;/code&gt;, otherwise do &lt;code&gt;else&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: binding is done according to &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-if-let (match-index (string-match &#34;d&#34; &#34;abc&#34;)) (+ match-index 3) 7) ;; =&amp;gt; 7&#xA;(--if-let (even? 4) it nil) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-if-let* &lt;code&gt;(vars-vals then &amp;amp;rest else)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If all &lt;code&gt;vals&lt;/code&gt; evaluate to true, bind them to their corresponding &lt;code&gt;vars&lt;/code&gt; and do &lt;code&gt;then&lt;/code&gt;, otherwise do &lt;code&gt;else&lt;/code&gt;. &lt;code&gt;vars-vals&lt;/code&gt; should be a list of (&lt;code&gt;var&lt;/code&gt; &lt;code&gt;val&lt;/code&gt;) pairs.&lt;/p&gt; &#xA;&lt;p&gt;Note: binding is done according to &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let*&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;vals&lt;/code&gt; are evaluated sequentially, and evaluation stops after the first &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;val&lt;/code&gt; is encountered.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-if-let* ((x 5) (y 3) (z 7)) (+ x y z) &#34;foo&#34;) ;; =&amp;gt; 15&#xA;(-if-let* ((x 5) (y nil) (z 7)) (+ x y z) &#34;foo&#34;) ;; =&amp;gt; &#34;foo&#34;&#xA;(-if-let* (((_ _ x) &#39;(nil nil 7))) x) ;; =&amp;gt; 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-let &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Bind variables according to &lt;code&gt;varlist&lt;/code&gt; then eval &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;varlist&lt;/code&gt; is a list of lists of the form (&lt;code&gt;pattern&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;). Each &lt;code&gt;pattern&lt;/code&gt; is matched against the &lt;code&gt;source&lt;/code&gt; &#34;structurally&#34;. &lt;code&gt;source&lt;/code&gt; is only evaluated once for each &lt;code&gt;pattern&lt;/code&gt;. Each &lt;code&gt;pattern&lt;/code&gt; is matched recursively, and can therefore contain sub-patterns which are matched against corresponding sub-expressions of &lt;code&gt;source&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All the SOURCEs are evalled before any symbols are bound (i.e. &#34;in parallel&#34;).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;varlist&lt;/code&gt; only contains one (&lt;code&gt;pattern&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;) element, you can optionally specify it using a vector and discarding the outer-most parens. Thus&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(-let ((`pattern` `source`)) ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(-let [`pattern` `source`] ...).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; uses a convention of not binding places (symbols) starting with _ whenever it&#39;s possible. You can use this to skip over entries you don&#39;t care about. However, this is not &lt;em&gt;always&lt;/em&gt; possible (as a result of implementation) and these symbols might get bound to undefined values.&lt;/p&gt; &#xA;&lt;p&gt;Following is the overview of supported patterns. Remember that patterns can be matched recursively, so every a, b, aK in the following can be a matching construct and not necessarily a symbol/variable.&lt;/p&gt; &#xA;&lt;p&gt;Symbol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a - bind the `source` to `a`.  This is just like regular `let`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Conses and lists:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(a) - bind `car` of cons/list to `a`&#xA;&#xA;(a . b) - bind car of cons to `a` and `cdr` to `b`&#xA;&#xA;(a b) - bind car of list to `a` and `cadr` to `b`&#xA;&#xA;(a1 a2 a3 ...) - bind 0th car of list to `a1`, 1st to `a2`, 2nd to `a3`...&#xA;&#xA;(a1 a2 a3 ... aN . rest) - as above, but bind the `n`th cdr to `rest`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vectors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[a] - bind 0th element of a non-list sequence to `a` (works with&#xA;      vectors, strings, bit arrays...)&#xA;&#xA;[a1 a2 a3 ...] - bind 0th element of non-list sequence to `a0`, 1st to&#xA;                 `a1`, 2nd to `a2`, ...&#xA;                 If the `pattern` is shorter than `source`, the values at&#xA;                 places not in `pattern` are ignored.&#xA;                 If the `pattern` is longer than `source`, an `error` is&#xA;                 thrown.&#xA;&#xA;[a1 a2 a3 ... &amp;amp;rest rest] - as above, but bind the rest of&#xA;                            the sequence to `rest`.  This is&#xA;                            conceptually the same as improper list&#xA;                            matching (a1 a2 ... aN . rest)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Key/value stores:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(&amp;amp;plist key0 a0 ... keyN aN) - bind value mapped by keyK in the&#xA;                               `source` plist to aK.  If the&#xA;                               value is not found, aK is `nil`.&#xA;                               Uses `plist-get` to fetch values.&#xA;&#xA;(&amp;amp;alist key0 a0 ... keyN aN) - bind value mapped by keyK in the&#xA;                               `source` alist to aK.  If the&#xA;                               value is not found, aK is `nil`.&#xA;                               Uses `assoc` to fetch values.&#xA;&#xA;(&amp;amp;hash key0 a0 ... keyN aN) - bind value mapped by keyK in the&#xA;                              `source` hash table to aK.  If the&#xA;                              value is not found, aK is `nil`.&#xA;                              Uses `gethash` to fetch values.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further, special keyword &amp;amp;keys supports &#34;inline&#34; matching of plist-like key-value pairs, similarly to &amp;amp;keys keyword of &lt;code&gt;cl-defun&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(a1 a2 ... aN &amp;amp;keys key1 b1 ... keyN bK)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This binds &lt;code&gt;n&lt;/code&gt; values from the list to a1 ... aN, then interprets the cdr as a plist (see key/value matching above).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;a&lt;/code&gt; shorthand notation for kv-destructuring exists which allows the patterns be optionally left out and derived from the key name in the following fashion:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a key :foo is converted into &lt;code&gt;foo&lt;/code&gt; pattern,&lt;/li&gt; &#xA; &lt;li&gt;a key &#39;bar is converted into &lt;code&gt;bar&lt;/code&gt; pattern,&lt;/li&gt; &#xA; &lt;li&gt;a key &#34;baz&#34; is converted into &lt;code&gt;baz&lt;/code&gt; pattern.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That is, the entire value under the key is bound to the derived variable without any further destructuring.&lt;/p&gt; &#xA;&lt;p&gt;This is possible only when the form following the key is not a valid pattern (i.e. not a symbol, a cons cell or a vector). Otherwise the matching proceeds as usual and in case of an invalid spec fails with an error.&lt;/p&gt; &#xA;&lt;p&gt;Thus the patterns are normalized as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ;; derive all the missing patterns&#xA; (&amp;amp;plist :foo &#39;bar &#34;baz&#34;) =&amp;gt; (&amp;amp;plist :foo foo &#39;bar bar &#34;baz&#34; baz)&#xA;&#xA; ;; we can specify some but not others&#xA; (&amp;amp;plist :foo &#39;bar explicit-bar) =&amp;gt; (&amp;amp;plist :foo foo &#39;bar explicit-bar)&#xA;&#xA; ;; nothing happens, we store :foo in x&#xA; (&amp;amp;plist :foo x) =&amp;gt; (&amp;amp;plist :foo x)&#xA;&#xA; ;; nothing happens, we match recursively&#xA; (&amp;amp;plist :foo (a b c)) =&amp;gt; (&amp;amp;plist :foo (a b c))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can name the source using the syntax &lt;code&gt;symbol&lt;/code&gt; &amp;amp;as &lt;code&gt;pattern&lt;/code&gt;. This syntax works with lists (proper or improper), vectors and all types of maps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(list &amp;amp;as a b c) (list 1 2 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;binds &lt;code&gt;a&lt;/code&gt; to 1, &lt;code&gt;b&lt;/code&gt; to 2, &lt;code&gt;c&lt;/code&gt; to 3 and &lt;code&gt;list&lt;/code&gt; to (1 2 3).&lt;/p&gt; &#xA;&lt;p&gt;Similarly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(bounds &amp;amp;as beg . end) (cons 1 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;binds &lt;code&gt;beg&lt;/code&gt; to 1, &lt;code&gt;end&lt;/code&gt; to 2 and &lt;code&gt;bounds&lt;/code&gt; to (1 . 2).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(items &amp;amp;as first . rest) (list 1 2 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;binds &lt;code&gt;first&lt;/code&gt; to 1, &lt;code&gt;rest&lt;/code&gt; to (2 3) and &lt;code&gt;items&lt;/code&gt; to (1 2 3)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[vect &amp;amp;as _ b c] [1 2 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;binds &lt;code&gt;b&lt;/code&gt; to 2, &lt;code&gt;c&lt;/code&gt; to 3 and &lt;code&gt;vect&lt;/code&gt; to [1 2 3] (_ avoids binding as usual).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(plist &amp;amp;as &amp;amp;plist :b b) (list :a 1 :b 2 :c 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;binds &lt;code&gt;b&lt;/code&gt; to 2 and &lt;code&gt;plist&lt;/code&gt; to (:a 1 :b 2 :c 3). Same for &amp;amp;alist and &amp;amp;hash.&lt;/p&gt; &#xA;&lt;p&gt;This is especially useful when we want to capture the result of a computation and destructure at the same time. Consider the form (function-returning-complex-structure) returning a list of two vectors with two items each. We want to capture this entire result and pass it to another computation, but at the same time we want to get the second item from each vector. We can achieve it with pattern&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(result &amp;amp;as [_ a] [_ b]) (function-returning-complex-structure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Clojure programmers may know this feature as the &#34;:as binding&#34;. The difference is that we put the &amp;amp;as at the front because we need to support improper list binding.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-let (([a (b c) d] [1 (2 3) 4])) (list a b c d)) ;; =&amp;gt; (1 2 3 4)&#xA;(-let [(a b c . d) (list 1 2 3 4 5 6)] (list a b c d)) ;; =&amp;gt; (1 2 3 (4 5 6))&#xA;(-let [(&amp;amp;plist :foo foo :bar bar) (list :baz 3 :foo 1 :qux 4 :bar 2)] (list foo bar)) ;; =&amp;gt; (1 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-let* &lt;code&gt;(varlist &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Bind variables according to &lt;code&gt;varlist&lt;/code&gt; then eval &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;varlist&lt;/code&gt; is a list of lists of the form (&lt;code&gt;pattern&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;). Each &lt;code&gt;pattern&lt;/code&gt; is matched against the &lt;code&gt;source&lt;/code&gt; structurally. &lt;code&gt;source&lt;/code&gt; is only evaluated once for each &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;source&lt;/code&gt; can refer to the symbols already bound by this &lt;code&gt;varlist&lt;/code&gt;. This is useful if you want to destructure &lt;code&gt;source&lt;/code&gt; recursively but also want to name the intermediate structures.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; for the list of all possible patterns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-let* (((a . b) (cons 1 2)) ((c . d) (cons 3 4))) (list a b c d)) ;; =&amp;gt; (1 2 3 4)&#xA;(-let* (((a . b) (cons 1 (cons 2 3))) ((c . d) b)) (list a b c d)) ;; =&amp;gt; (1 (2 . 3) 2 3)&#xA;(-let* (((&amp;amp;alist &#34;foo&#34; foo &#34;bar&#34; bar) (list (cons &#34;foo&#34; 1) (cons &#34;bar&#34; (list &#39;a &#39;b &#39;c)))) ((a b c) bar)) (list foo a b c bar)) ;; =&amp;gt; (1 a b c (a b c))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-lambda &lt;code&gt;(match-form &amp;amp;rest body)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a lambda which destructures its input as &lt;code&gt;match-form&lt;/code&gt; and executes &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that you have to enclose the &lt;code&gt;match-form&lt;/code&gt; in a pair of parens, such that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(-lambda (x) body)&#xA;(-lambda (x y ...) body)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;has the usual semantics of &lt;code&gt;lambda&lt;/code&gt;. Furthermore, these get translated into normal &lt;code&gt;lambda&lt;/code&gt;, so there is no performance penalty.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt; for a description of the destructuring mechanism.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-map (-lambda ((x y)) (+ x y)) &#39;((1 2) (3 4) (5 6))) ;; =&amp;gt; (3 7 11)&#xA;(-map (-lambda ([x y]) (+ x y)) &#39;([1 2] [3 4] [5 6])) ;; =&amp;gt; (3 7 11)&#xA;(funcall (-lambda ((_ . a) (_ . b)) (-concat a b)) &#39;(1 2 3) &#39;(4 5 6)) ;; =&amp;gt; (2 3 5 6)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-setq &lt;code&gt;([match-form val] ...)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Bind each &lt;code&gt;match-form&lt;/code&gt; to the value of its &lt;code&gt;val&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;match-form&lt;/code&gt; destructuring is done according to the rules of &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-let-varlist-rest-body&#34;&gt;&lt;code&gt;-let&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This macro allows you to bind multiple variables by destructuring the value, so for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(-setq (a b) x&#xA;       (&amp;amp;plist :c c) plist)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;expands roughly speaking to the following code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq a (car x)&#xA;      b (cadr x)&#xA;      c (plist-get plist :c))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Care is taken to only evaluate each &lt;code&gt;val&lt;/code&gt; once so that in case of multiple assignments it does not cause unexpected side effects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let (a) (-setq a 1) a) ;; =&amp;gt; 1&#xA;(let (a b) (-setq (a b) (list 1 2)) (list a b)) ;; =&amp;gt; (1 2)&#xA;(let (c) (-setq (&amp;amp;plist :c c) (list :c &#34;c&#34;)) c) ;; =&amp;gt; &#34;c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Side effects&lt;/h2&gt; &#xA;&lt;p&gt;Functions iterating over lists for side effect only.&lt;/p&gt; &#xA;&lt;h4&gt;-each &lt;code&gt;(list fn)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each element of &lt;code&gt;list&lt;/code&gt;. Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; &#xA;&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--each&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For access to the current element&#39;s index in &lt;code&gt;list&lt;/code&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-each-indexed-list-fn&#34;&gt;&lt;code&gt;-each-indexed&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let (l) (-each &#39;(1 2 3) (lambda (x) (push x l))) l) ;; =&amp;gt; (3 2 1)&#xA;(let (l) (--each &#39;(1 2 3) (push it l)) l) ;; =&amp;gt; (3 2 1)&#xA;(-each &#39;(1 2 3) #&#39;identity) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-each-while &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each &lt;code&gt;item&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, while (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;item&lt;/code&gt;) is non-&lt;code&gt;nil&lt;/code&gt;. Once an &lt;code&gt;item&lt;/code&gt; is reached for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt; is no longer called. Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; &#xA;&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--each-while&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let (l) (-each-while &#39;(2 4 5 6) #&#39;even? (lambda (x) (push x l))) l) ;; =&amp;gt; (4 2)&#xA;(let (l) (--each-while &#39;(1 2 3 4) (&amp;lt; it 3) (push it l)) l) ;; =&amp;gt; (2 1)&#xA;(let ((s 0)) (--each-while &#39;(1 3 4 5) (&amp;lt; it 5) (setq s (+ s it))) s) ;; =&amp;gt; 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-each-indexed &lt;code&gt;(list fn)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each index and element of &lt;code&gt;list&lt;/code&gt;. For each &lt;code&gt;item&lt;/code&gt; at &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, call (funcall &lt;code&gt;fn&lt;/code&gt; &lt;code&gt;index&lt;/code&gt; &lt;code&gt;item&lt;/code&gt;). Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-map-indexed-fn-list&#34;&gt;&lt;code&gt;-map-indexed&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let (l) (-each-indexed &#39;(a b c) (lambda (i x) (push (list x i) l))) l) ;; =&amp;gt; ((c 2) (b 1) (a 0))&#xA;(let (l) (--each-indexed &#39;(a b c) (push (list it it-index) l)) l) ;; =&amp;gt; ((c 2) (b 1) (a 0))&#xA;(let (l) (--each-indexed () (push it l)) l) ;; =&amp;gt; ()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-each-r &lt;code&gt;(list fn)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each element of &lt;code&gt;list&lt;/code&gt; in reversed order. Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; &#xA;&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--each-r&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let (l) (-each-r &#39;(1 2 3) (lambda (x) (push x l))) l) ;; =&amp;gt; (1 2 3)&#xA;(let (l) (--each-r &#39;(1 2 3) (push it l)) l) ;; =&amp;gt; (1 2 3)&#xA;(-each-r &#39;(1 2 3) #&#39;identity) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-each-r-while &lt;code&gt;(list pred fn)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; on each &lt;code&gt;item&lt;/code&gt; in reversed &lt;code&gt;list&lt;/code&gt;, while (&lt;code&gt;pred&lt;/code&gt; &lt;code&gt;item&lt;/code&gt;) is non-&lt;code&gt;nil&lt;/code&gt;. Once an &lt;code&gt;item&lt;/code&gt; is reached for which &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt; is no longer called. Return &lt;code&gt;nil&lt;/code&gt;; this function is intended for side effects.&lt;/p&gt; &#xA;&lt;p&gt;Its anaphoric counterpart is &lt;code&gt;--each-r-while&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let (l) (-each-r-while &#39;(2 4 5 6) #&#39;even? (lambda (x) (push x l))) l) ;; =&amp;gt; (6)&#xA;(let (l) (--each-r-while &#39;(1 2 3 4) (&amp;gt;= it 3) (push it l)) l) ;; =&amp;gt; (3 4)&#xA;(let ((s 0)) (--each-r-while &#39;(1 2 3 5) (&amp;gt; it 1) (setq s (+ s it))) s) ;; =&amp;gt; 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-dotimes &lt;code&gt;(num fn)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Call &lt;code&gt;fn&lt;/code&gt; &lt;code&gt;num&lt;/code&gt; times, presumably for side effects. &lt;code&gt;fn&lt;/code&gt; is called with a single argument on successive integers running from 0, inclusive, to &lt;code&gt;num&lt;/code&gt;, exclusive. &lt;code&gt;fn&lt;/code&gt; is not called if &lt;code&gt;num&lt;/code&gt; is less than 1.&lt;/p&gt; &#xA;&lt;p&gt;This function&#39;s anaphoric counterpart is &lt;code&gt;--dotimes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let (s) (-dotimes 3 (lambda (n) (push n s))) s) ;; =&amp;gt; (2 1 0)&#xA;(let (s) (-dotimes 0 (lambda (n) (push n s))) s) ;; =&amp;gt; ()&#xA;(let (s) (--dotimes 5 (push it s)) s) ;; =&amp;gt; (4 3 2 1 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Destructive operations&lt;/h2&gt; &#xA;&lt;p&gt;Macros that modify variables holding lists.&lt;/p&gt; &#xA;&lt;h4&gt;!cons &lt;code&gt;(car cdr)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Destructive: Set &lt;code&gt;cdr&lt;/code&gt; to the cons of &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let (l) (!cons 5 l) l) ;; =&amp;gt; (5)&#xA;(let ((l &#39;(3))) (!cons 5 l) l) ;; =&amp;gt; (5 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;!cdr &lt;code&gt;(list)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Destructive: Set &lt;code&gt;list&lt;/code&gt; to the cdr of &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(let ((l &#39;(3))) (!cdr l) l) ;; =&amp;gt; ()&#xA;(let ((l &#39;(3 5))) (!cdr l) l) ;; =&amp;gt; (5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Function combinators&lt;/h2&gt; &#xA;&lt;p&gt;Functions that manipulate and compose other functions.&lt;/p&gt; &#xA;&lt;h4&gt;-partial &lt;code&gt;(fun &amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that is a partial application of &lt;code&gt;fun&lt;/code&gt; to &lt;code&gt;args&lt;/code&gt;. &lt;code&gt;args&lt;/code&gt; is a list of the first &lt;code&gt;n&lt;/code&gt; arguments to pass to &lt;code&gt;fun&lt;/code&gt;. The result is a new function which does the same as &lt;code&gt;fun&lt;/code&gt;, except that the first &lt;code&gt;n&lt;/code&gt; arguments are fixed at the values with which this function was called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-partial #&#39;+ 5)) ;; =&amp;gt; 5&#xA;(funcall (-partial #&#39;- 5) 3) ;; =&amp;gt; 2&#xA;(funcall (-partial #&#39;+ 5 2) 3) ;; =&amp;gt; 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-rpartial &lt;code&gt;(fn &amp;amp;rest args)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that is a partial application of &lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;args&lt;/code&gt;. &lt;code&gt;args&lt;/code&gt; is a list of the last &lt;code&gt;n&lt;/code&gt; arguments to pass to &lt;code&gt;fn&lt;/code&gt;. The result is a new function which does the same as &lt;code&gt;fn&lt;/code&gt;, except that the last &lt;code&gt;n&lt;/code&gt; arguments are fixed at the values with which this function was called. This is like &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-partial-fun-rest-args&#34;&gt;&lt;code&gt;-partial&lt;/code&gt;&lt;/a&gt;, except the arguments are fixed starting from the right rather than the left.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-rpartial #&#39;- 5)) ;; =&amp;gt; -5&#xA;(funcall (-rpartial #&#39;- 5) 8) ;; =&amp;gt; 3&#xA;(funcall (-rpartial #&#39;- 5 2) 10) ;; =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-juxt &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that is the juxtaposition of &lt;code&gt;fns&lt;/code&gt;. The returned function takes a variable number of &lt;code&gt;args&lt;/code&gt;, applies each of &lt;code&gt;fns&lt;/code&gt; in turn to &lt;code&gt;args&lt;/code&gt;, and returns the list of results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-juxt) 1 2) ;; =&amp;gt; ()&#xA;(funcall (-juxt #&#39;+ #&#39;- #&#39;* #&#39;/) 7 5) ;; =&amp;gt; (12 2 35 1)&#xA;(mapcar (-juxt #&#39;number-to-string #&#39;1+) &#39;(1 2)) ;; =&amp;gt; ((&#34;1&#34; 2) (&#34;2&#34; 3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-compose &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Compose &lt;code&gt;fns&lt;/code&gt; into a single composite function. Return a function that takes a variable number of &lt;code&gt;args&lt;/code&gt;, applies the last function in &lt;code&gt;fns&lt;/code&gt; to &lt;code&gt;args&lt;/code&gt;, and returns the result of calling each remaining function on the result of the previous function, right-to-left. If no &lt;code&gt;fns&lt;/code&gt; are given, return a variadic &lt;code&gt;identity&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-compose #&#39;- #&#39;1+ #&#39;+) 1 2 3) ;; =&amp;gt; -7&#xA;(funcall (-compose #&#39;identity #&#39;1+) 3) ;; =&amp;gt; 4&#xA;(mapcar (-compose #&#39;not #&#39;stringp) &#39;(nil &#34;&#34;)) ;; =&amp;gt; (t nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-applify &lt;code&gt;(fn)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that applies &lt;code&gt;fn&lt;/code&gt; to a single list of args. This changes the arity of &lt;code&gt;fn&lt;/code&gt; from taking &lt;code&gt;n&lt;/code&gt; distinct arguments to taking 1 argument which is a list of &lt;code&gt;n&lt;/code&gt; arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-applify #&#39;+) nil) ;; =&amp;gt; 0&#xA;(mapcar (-applify #&#39;+) &#39;((1 1 1) (1 2 3) (5 5 5))) ;; =&amp;gt; (3 6 15)&#xA;(funcall (-applify #&#39;&amp;lt;) &#39;(3 6)) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-on &lt;code&gt;(op trans)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that calls &lt;code&gt;trans&lt;/code&gt; on each arg and &lt;code&gt;op&lt;/code&gt; on the results. The returned function takes a variable number of arguments, calls the function &lt;code&gt;trans&lt;/code&gt; on each one in turn, and then passes those results as the list of arguments to &lt;code&gt;op&lt;/code&gt;, in the same order.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following pairs of expressions are morally equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(funcall (-on #&#39;+ #&#39;1+) 1 2 3) = (+ (1+ 1) (1+ 2) (1+ 3))&#xA;(funcall (-on #&#39;+ #&#39;1+))       = (+)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-sort (-on #&#39;&amp;lt; #&#39;length) &#39;((1 2 3) (1) (1 2))) ;; =&amp;gt; ((1) (1 2) (1 2 3))&#xA;(funcall (-on #&#39;min #&#39;string-to-number) &#34;22&#34; &#34;2&#34; &#34;1&#34; &#34;12&#34;) ;; =&amp;gt; 1&#xA;(-min-by (-on #&#39;&amp;gt; #&#39;length) &#39;((1 2 3) (4) (1 2))) ;; =&amp;gt; (4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-flip &lt;code&gt;(fn)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that calls &lt;code&gt;fn&lt;/code&gt; with its arguments reversed. The returned function takes the same number of arguments as &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following two expressions are morally equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(funcall (-flip #&#39;-) 1 2) = (- 2 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-rotate-args-n-fn&#34;&gt;&lt;code&gt;-rotate-args&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-sort (-flip #&#39;&amp;lt;) &#39;(4 3 6 1)) ;; =&amp;gt; (6 4 3 1)&#xA;(funcall (-flip #&#39;-) 3 2 1 10) ;; =&amp;gt; 4&#xA;(funcall (-flip #&#39;1+) 1) ;; =&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-rotate-args &lt;code&gt;(n fn)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that calls &lt;code&gt;fn&lt;/code&gt; with args rotated &lt;code&gt;n&lt;/code&gt; places to the right. The returned function takes the same number of arguments as &lt;code&gt;fn&lt;/code&gt;, rotates the list of arguments &lt;code&gt;n&lt;/code&gt; places to the right (left if &lt;code&gt;n&lt;/code&gt; is negative) just like &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-rotate-n-list&#34;&gt;&lt;code&gt;-rotate&lt;/code&gt;&lt;/a&gt;, and applies &lt;code&gt;fn&lt;/code&gt; to the result.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-flip-fn&#34;&gt;&lt;code&gt;-flip&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-rotate-args -1 #&#39;list) 1 2 3 4) ;; =&amp;gt; (2 3 4 1)&#xA;(funcall (-rotate-args 1 #&#39;-) 1 10 100) ;; =&amp;gt; 89&#xA;(funcall (-rotate-args 2 #&#39;list) 3 4 5 1 2) ;; =&amp;gt; (1 2 3 4 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-const &lt;code&gt;(c)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that returns &lt;code&gt;c&lt;/code&gt; ignoring any additional arguments.&lt;/p&gt; &#xA;&lt;p&gt;In types: a -&amp;gt; b -&amp;gt; a&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-const 2) 1 3 &#34;foo&#34;) ;; =&amp;gt; 2&#xA;(mapcar (-const 1) &#39;(&#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34;)) ;; =&amp;gt; (1 1 1 1)&#xA;(-sum (mapcar (-const 1) &#39;(&#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34;))) ;; =&amp;gt; 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-cut &lt;code&gt;(&amp;amp;rest params)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Take n-ary function and n arguments and specialize some of them. Arguments denoted by &amp;lt;&amp;gt; will be left unspecialized.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;srfi-26&lt;/code&gt; for detailed description.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-cut list 1 &amp;lt;&amp;gt; 3 &amp;lt;&amp;gt; 5) 2 4) ;; =&amp;gt; (1 2 3 4 5)&#xA;(-map (-cut funcall &amp;lt;&amp;gt; 5) `(1+ 1- ,(lambda (x) (/ 1.0 x)))) ;; =&amp;gt; (6 4 0.2)&#xA;(-map (-cut &amp;lt;&amp;gt; 1 2 3) &#39;(list vector string)) ;; =&amp;gt; ((1 2 3) [1 2 3] &#34;\1\2\3&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-not &lt;code&gt;(pred)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a predicate that negates the result of &lt;code&gt;pred&lt;/code&gt;. The returned predicate passes its arguments to &lt;code&gt;pred&lt;/code&gt;. If &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, the result is non-&lt;code&gt;nil&lt;/code&gt;; otherwise the result is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-andfn-rest-preds&#34;&gt;&lt;code&gt;-andfn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-orfn-rest-preds&#34;&gt;&lt;code&gt;-orfn&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-not #&#39;numberp) &#34;5&#34;) ;; =&amp;gt; t&#xA;(-sort (-not #&#39;&amp;lt;) &#39;(5 2 1 0 6)) ;; =&amp;gt; (6 5 2 1 0)&#xA;(-filter (-not (-partial #&#39;&amp;lt; 4)) &#39;(1 2 3 4 5 6 7 8)) ;; =&amp;gt; (1 2 3 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-orfn &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a predicate that returns the first non-&lt;code&gt;nil&lt;/code&gt; result of &lt;code&gt;preds&lt;/code&gt;. The returned predicate takes a variable number of arguments, passes them to each predicate in &lt;code&gt;preds&lt;/code&gt; in turn until one of them returns non-&lt;code&gt;nil&lt;/code&gt;, and returns that non-&lt;code&gt;nil&lt;/code&gt; result without calling the remaining &lt;code&gt;preds&lt;/code&gt;. If all &lt;code&gt;preds&lt;/code&gt; return &lt;code&gt;nil&lt;/code&gt;, or if no &lt;code&gt;preds&lt;/code&gt; are given, the returned predicate returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-andfn-rest-preds&#34;&gt;&lt;code&gt;-andfn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-not-pred&#34;&gt;&lt;code&gt;-not&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-filter (-orfn #&#39;natnump #&#39;booleanp) &#39;(1 nil &#34;a&#34; -4 b c t)) ;; =&amp;gt; (1 nil t)&#xA;(funcall (-orfn #&#39;symbolp (-cut string-match-p &#34;x&#34; &amp;lt;&amp;gt;)) &#34;axe&#34;) ;; =&amp;gt; 1&#xA;(funcall (-orfn #&#39;= #&#39;+) 1 1) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-andfn &lt;code&gt;(&amp;amp;rest preds)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a predicate that returns non-&lt;code&gt;nil&lt;/code&gt; if all &lt;code&gt;preds&lt;/code&gt; do so. The returned predicate &lt;code&gt;p&lt;/code&gt; takes a variable number of arguments and passes them to each predicate in &lt;code&gt;preds&lt;/code&gt; in turn. If any one of &lt;code&gt;preds&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; also returns &lt;code&gt;nil&lt;/code&gt; without calling the remaining &lt;code&gt;preds&lt;/code&gt;. If all &lt;code&gt;preds&lt;/code&gt; return non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; returns the last such value. If no &lt;code&gt;preds&lt;/code&gt; are given, &lt;code&gt;p&lt;/code&gt; always returns non-&lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-orfn-rest-preds&#34;&gt;&lt;code&gt;-orfn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-not-pred&#34;&gt;&lt;code&gt;-not&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(-filter (-andfn #&#39;numberp (-cut &amp;lt; &amp;lt;&amp;gt; 5)) &#39;(a 1 b 6 c 2)) ;; =&amp;gt; (1 2)&#xA;(mapcar (-andfn #&#39;numberp #&#39;1+) &#39;(a 1 b 6)) ;; =&amp;gt; (nil 2 nil 7)&#xA;(funcall (-andfn #&#39;= #&#39;+) 1 1) ;; =&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-iteratefn &lt;code&gt;(fn n)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function &lt;code&gt;fn&lt;/code&gt; composed &lt;code&gt;n&lt;/code&gt; times with itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; is a unary function. If you need to use a function of higher arity, use &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#-applify-fn&#34;&gt;&lt;code&gt;-applify&lt;/code&gt;&lt;/a&gt; first to turn it into a unary function.&lt;/p&gt; &#xA;&lt;p&gt;With n = 0, this acts as identity function.&lt;/p&gt; &#xA;&lt;p&gt;In types: (a -&amp;gt; a) -&amp;gt; Int -&amp;gt; a -&amp;gt; a.&lt;/p&gt; &#xA;&lt;p&gt;This function satisfies the following law:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(funcall (-iteratefn fn n) init) = (-last-item (-iterate fn init (1+ n))).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-iteratefn (lambda (x) (* x x)) 3) 2) ;; =&amp;gt; 256&#xA;(funcall (-iteratefn &#39;1+ 3) 1) ;; =&amp;gt; 4&#xA;(funcall (-iteratefn &#39;cdr 3) &#39;(1 2 3 4 5)) ;; =&amp;gt; (4 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-fixfn &lt;code&gt;(fn &amp;amp;optional equal-test halt-test)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that computes the (least) fixpoint of &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; must be a unary function. The returned lambda takes a single argument, &lt;code&gt;x&lt;/code&gt;, the initial value for the fixpoint iteration. The iteration halts when either of the following conditions is satisfied:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Iteration converges to the fixpoint, with equality being tested using &lt;code&gt;equal-test&lt;/code&gt;. If &lt;code&gt;equal-test&lt;/code&gt; is not specified, &lt;code&gt;equal&lt;/code&gt; is used. For functions over the floating point numbers, it may be necessary to provide an appropriate approximate comparison test.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;halt-test&lt;/code&gt; returns a non-&lt;code&gt;nil&lt;/code&gt; value. &lt;code&gt;halt-test&lt;/code&gt; defaults to a simple counter that returns &lt;code&gt;t&lt;/code&gt; after &lt;code&gt;-fixfn-max-iterations&lt;/code&gt;, to guard against infinite iteration. Otherwise, &lt;code&gt;halt-test&lt;/code&gt; must be a function that accepts a single argument, the current value of &lt;code&gt;x&lt;/code&gt;, and returns non-&lt;code&gt;nil&lt;/code&gt; as long as iteration should continue. In this way, a more sophisticated convergence test may be supplied by the caller.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The return value of the lambda is either the fixpoint or, if iteration halted before converging, a cons with car &lt;code&gt;halted&lt;/code&gt; and cdr the final output from &lt;code&gt;halt-test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In types: (a -&amp;gt; a) -&amp;gt; a -&amp;gt; a.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-fixfn #&#39;cos #&#39;approx=) 0.7) ;; ~&amp;gt; 0.7390851332151607&#xA;(funcall (-fixfn (lambda (x) (expt (+ x 10) 0.25))) 2.0) ;; =&amp;gt; 1.8555845286409378&#xA;(funcall (-fixfn #&#39;sin #&#39;approx=) 0.1) ;; =&amp;gt; (halted . t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;-prodfn &lt;code&gt;(&amp;amp;rest fns)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return a function that applies each of &lt;code&gt;fns&lt;/code&gt; to each of a list of arguments.&lt;/p&gt; &#xA;&lt;p&gt;Takes a list of &lt;code&gt;n&lt;/code&gt; functions and returns a function that takes a list of length &lt;code&gt;n&lt;/code&gt;, applying &lt;code&gt;i&lt;/code&gt;th function to &lt;code&gt;i&lt;/code&gt;th element of the input list. Returns a list of length &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In types (for &lt;code&gt;n&lt;/code&gt;=2): ((a -&amp;gt; b), (c -&amp;gt; d)) -&amp;gt; (a, c) -&amp;gt; (b, d)&lt;/p&gt; &#xA;&lt;p&gt;This function satisfies the following laws:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  (-compose (-prodfn f g ...)&#xA;            (-prodfn f&#39; g&#39; ...))&#xA;= (-prodfn (-compose f f&#39;)&#xA;           (-compose g g&#39;)&#xA;           ...)&#xA;&#xA;  (-prodfn f g ...)&#xA;= (-juxt (-compose f (-partial #&#39;nth 0))&#xA;         (-compose g (-partial #&#39;nth 1))&#xA;         ...)&#xA;&#xA;  (-compose (-prodfn f g ...)&#xA;            (-juxt f&#39; g&#39; ...))&#xA;= (-juxt (-compose f f&#39;)&#xA;         (-compose g g&#39;)&#xA;         ...)&#xA;&#xA;  (-compose (-partial #&#39;nth n)&#xA;            (-prod f1 f2 ...))&#xA;= (-compose fn (-partial #&#39;nth n))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(funcall (-prodfn &#39;1+ &#39;1- &#39;number-to-string) &#39;(1 2 3)) ;; =&amp;gt; (2 1 &#34;3&#34;)&#xA;(-map (-prodfn &#39;1+ &#39;1-) &#39;((1 2) (3 4) (5 6) (7 8))) ;; =&amp;gt; ((2 1) (4 3) (6 5) (8 7))&#xA;(apply &#39;+ (funcall (-prodfn &#39;length &#39;string-to-number) &#39;((1 2 3) &#34;15&#34;))) ;; =&amp;gt; 18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Yes, please do. Pure functions in the list manipulation realm only, please. There&#39;s a suite of examples/tests in &lt;code&gt;dev/examples.el&lt;/code&gt;, so remember to add tests for your additions, or I might break them later.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find the repo at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/magnars/dash.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regenerate the docs with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I highly recommend that you install these as a pre-commit hook, so that the tests are always running and the docs are always in sync:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp dev/pre-commit.sh .git/hooks/pre-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Oh, and don&#39;t edit &lt;code&gt;README.md&lt;/code&gt; or &lt;code&gt;dash.texi&lt;/code&gt; directly; they are auto-generated. Change &lt;code&gt;readme-template.md&lt;/code&gt; or &lt;code&gt;dash-template.texi&lt;/code&gt; instead, respectively.&lt;/p&gt; &#xA;&lt;p&gt;To ensure that &lt;code&gt;dash.el&lt;/code&gt; can be distributed with GNU ELPA or Emacs, we require that all contributors assign copyright to the Free Software Foundation. For more on this, see &lt;a href=&#34;https://gnu.org/software/emacs/manual/html_node/emacs/Copyright-Assignment.html&#34;&gt;&lt;code&gt;(info &#34;(emacs) Copyright Assignment&#34;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fuco1&#34;&gt;Matus Goljer&lt;/a&gt; contributed lots of features and functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tkf&#34;&gt;Takafumi Arakaki&lt;/a&gt; contributed &lt;code&gt;-group-by&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tali713&#34;&gt;tali713&lt;/a&gt; is the author of &lt;code&gt;-applify&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vemv&#34;&gt;Víctor M. Valenzuela&lt;/a&gt; contributed &lt;code&gt;-repeat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicferrier&#34;&gt;Nic Ferrier&lt;/a&gt; contributed &lt;code&gt;-cons*&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Wilfred&#34;&gt;Wilfred Hughes&lt;/a&gt; contributed &lt;code&gt;-slice&lt;/code&gt;, &lt;code&gt;-first-item&lt;/code&gt;, and &lt;code&gt;-last-item&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shosti&#34;&gt;Emanuel Evans&lt;/a&gt; contributed &lt;code&gt;-if-let&lt;/code&gt;, &lt;code&gt;-when-let&lt;/code&gt;, and &lt;code&gt;-insert-at&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rejeep&#34;&gt;Johan Andersson&lt;/a&gt; contributed &lt;code&gt;-sum&lt;/code&gt;, &lt;code&gt;-product&lt;/code&gt;, and &lt;code&gt;-same-items?&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kurisuwhyte&#34;&gt;Christina Whyte&lt;/a&gt; contributed &lt;code&gt;-compose&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/steventlamb&#34;&gt;Steve Lamb&lt;/a&gt; contributed &lt;code&gt;-cycle&lt;/code&gt;, &lt;code&gt;-pad&lt;/code&gt;, &lt;code&gt;-annotate&lt;/code&gt;, &lt;code&gt;-zip-fill&lt;/code&gt;, and a variadic version of &lt;code&gt;-zip&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fbergroth&#34;&gt;Fredrik Bergroth&lt;/a&gt; made the &lt;code&gt;-if-let&lt;/code&gt; family use &lt;code&gt;-let&lt;/code&gt; destructuring and improved the script for generating documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/holomorph&#34;&gt;Mark Oteiza&lt;/a&gt; contributed &lt;code&gt;-iota&lt;/code&gt; and the script to create an Info manual.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wasamasa&#34;&gt;Vasilij Schneidermann&lt;/a&gt; contributed &lt;code&gt;-some&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/occidens&#34;&gt;William West&lt;/a&gt; made &lt;code&gt;-fixfn&lt;/code&gt; more robust at handling floats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camsaul&#34;&gt;Cam Saul&lt;/a&gt; contributed &lt;code&gt;-some-&amp;gt;&lt;/code&gt;, &lt;code&gt;-some-&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;-some--&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/basil-conto&#34;&gt;Basil L. Contovounesios&lt;/a&gt; contributed &lt;code&gt;-common-prefix&lt;/code&gt;, &lt;code&gt;-common-suffix&lt;/code&gt;, and various other improvements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/doublep&#34;&gt;Paul Pogonyshev&lt;/a&gt; contributed &lt;code&gt;-each-r&lt;/code&gt; and &lt;code&gt;-each-r-while&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;p&gt;New contributors are very welcome. See the &lt;a href=&#34;https://raw.githubusercontent.com/magnars/dash.el/master/#contribute&#34;&gt;&lt;code&gt;Contribute&lt;/code&gt;&lt;/a&gt; section above.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2012-2021 Free Software Foundation, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Author: Magnar Sveen &lt;a href=&#34;mailto:magnars@gmail.com&#34;&gt;magnars@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alezost/bui.el</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/alezost/bui.el</id>
    <link href="https://github.com/alezost/bui.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Buffer interface library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[http://www.gnu.org/licenses/gpl-3.0.txt][file:https://img.shields.io/badge/license-GPL_3-orange.svg]] [[http://melpa.org/#/bui][file:http://melpa.org/packages/bui-badge.svg]] [[http://stable.melpa.org/#/bui][file:http://stable.melpa.org/packages/bui-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=BUI= (=Buffer User Interface=) is an Emacs library that can be used to make user interfaces to display some kind of entries (like packages, buffers, functions, etc.).&lt;/p&gt; &#xA;&lt;p&gt;The intention of BUI is to be a high-level library which is convenient to be used both by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;package makers&lt;/em&gt;, as there is no need to bother about implementing routine details and usual features (like buffer history, filtering displayed entries, etc.);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;users&lt;/em&gt;, as it provides familiar and intuitive interfaces with usual keys (for moving by lines, marking, sorting, switching between buttons); and what is also important, the defined interfaces are highly configurable through various generated variables. A summary of available key bindings can be displayed by pressing =h=.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BUI provides means to display entries in 2 types of buffers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=list=: it is based on =tabulated-list-mode=, thus it looks similar to a list of Emacs packages (=M-x list-packages=);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=info=: it can be used to display more verbose info, like various buttons, text and other stuff related to the displayed entry (or entries).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In short, you define how a =list= / =info= interface looks like (using =bui-define-interface= macro), and then you can make some user commands that will display entries (using =bui-get-display-entries= and similar functions).&lt;/p&gt; &#xA;&lt;p&gt;For example, you can make a =list= interface to display buffers (similar to what =M-x list-buffers= do), like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (require &#39;bui)&lt;/p&gt; &#xA;&lt;p&gt;(defun buffers-buffer-&amp;gt;entry (buffer) (with-current-buffer buffer `((id . ,buffer) (name . ,(buffer-name)) (mode . ,major-mode) (size . ,(buffer-size)) (file-name . ,buffer-file-name))))&lt;/p&gt; &#xA;&lt;p&gt;(defun buffers-get-entries () (mapcar &#39;buffers-buffer-&amp;gt;entry (buffer-list)))&lt;/p&gt; &#xA;&lt;p&gt;(bui-define-interface buffers list :buffer-name &#34;&lt;em&gt;Buffers&lt;/em&gt;&#34; :get-entries-function &#39;buffers-get-entries :format &#39;((name nil 30 t) (mode nil 25 t) (size nil 8 bui-list-sort-numerically-2 :right-align t) (file-name bui-list-get-file-name 30 t)) :sort-key &#39;(name))&lt;/p&gt; &#xA;&lt;p&gt;(defun buffers () &#34;Display a list of buffers.&#34; (interactive) (bui-get-display-entries &#39;buffers &#39;list)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This is a simplified example just to demonstrate how =bui.el= can be used. For full example see [[file:examples/buffers.el]]. You can see how it looks like on the following screenshot. =M-x buffers= displays a list of buffers, then 2 buffers are marked (with =m= key) and &#34;described&#34; in =info= buffer (with =i= key).&lt;/p&gt; &#xA;&lt;p&gt;[[http://i.imgur.com/3dlBu2Y.png]]&lt;/p&gt; &#xA;&lt;p&gt;=bui-define-interface= macro takes the following arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ENTRY-TYPE: an arbitrary symbol to denote the entry type.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;BUFFER-TYPE: =list= or =info= symbol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keyword arguments: used to define various interface parameters and to set default values of user variables (like titles, buffer name, etc.). The main keywords that should be specified are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;=:get-entries-function=: this function should return a list of entries to display. Each entry is a usual association list with one required =id= key (it is used to fill =tabulated-list-entries= variable).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;=:format=: it specifies how the data is displayed; see docstrings of the generated =ENTRY-TYPE-BUFFER-TYPE-format= variables for details (in the current example: =buffers-list-format= and =buffers-info-format=).&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For real-world examples you may look at [[https://github.com/alezost/aurel][aurel]] or [[https://github.com/alezost/guix.el][guix]] packages.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>minad/consult</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/minad/consult</id>
    <link href="https://github.com/minad/consult" rel="alternate"></link>
    <summary type="html">&lt;p&gt;consult.el - Consulting completing-read&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: consult.el - Consulting completing-read #+author: Daniel Mendler #+language: en #+export_file_name: consult.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Consult: (consult). #+texinfo_dir_desc: Useful commands built on completing-read.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/consult.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/consult.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/consult.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/consult.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/consult&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/consult-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/consult&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/consult-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction :properties: :description: Why Consult? &lt;span&gt;🔚&lt;/span&gt; #+cindex: introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult provides practical commands based on the Emacs completion function [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][completing-read]]. Completion allows you to quickly select an item from a list of candidates. Consult offers in particular an advanced buffer switching command =consult-buffer= to switch between buffers and recently opened files. Furthermore Consult provides multiple search commands, an asynchronous =consult-grep= and =consult-ripgrep=, and the line-based search command =consult-line=. Some of the Consult commands are enhanced versions of built-in Emacs commands. For example the command =consult-imenu= presents a flat list of the Imenu with [[#live-previews][live preview]], [[#narrowing-and-grouping][grouping and narrowing]]. Please take a look at the [[#available-commands][full list of commands]].&lt;/p&gt; &#xA;&lt;p&gt;Consult is fully compatible with completion systems based on the standard Emacs =completing-read= API, notably the default completion system, [[https://github.com/minad/vertico][Vertico]], [[https://github.com/protesilaos/mct][Mct]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][Icomplete]] and [[https://github.com/raxod502/selectrum][Selectrum]].&lt;/p&gt; &#xA;&lt;p&gt;This package keeps the completion system specifics to a minimum. The ability of the Consult commands to work well with arbitrary completion systems is one of the main advantages of the package. Consult fits well into existing setups and it helps you to create a full completion environment out of small and independent components. Note that, if you use [[https://github.com/abo-abo/swiper#ivy][Ivy]] or [[https://github.com/emacs-helm/helm][Helm]], you probably don&#39;t need Consult, since both packages bring their own Consult-like functionality.&lt;/p&gt; &#xA;&lt;p&gt;You can combine the complementary packages [[https://github.com/minad/marginalia/][Marginalia]], [[https://github.com/oantolin/embark/][Embark]] and [[https://github.com/oantolin/orderless][Orderless]] with Consult. Marginalia enriches the completion display with annotations, e.g., documentation strings or file information. The versatile Embark package provides local actions, comparable to a context menu. These actions operate on the selected candidate in the minibuffer or at point in normal buffers. For example, when selecting from a list of files, Embark offers an action to delete the file. Additionally Embark offers a facility to collect completion candidates in a collect buffer. The section [[#embark-integration][Embark integration]] documents in greater detail how Consult and Embark work together.&lt;/p&gt; &#xA;&lt;p&gt;** Screenshots :noexport:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-grep [[https://github.com/minad/consult/blob/screenshots/consult-grep.gif?raw=true]] Fig. 1: Command =consult-git-grep=&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-imenu [[https://github.com/minad/consult/blob/screenshots/consult-imenu.png?raw=true]] Fig. 2: Command =consult-imenu=&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-line [[https://github.com/minad/consult/blob/screenshots/consult-line.png?raw=true]] Fig. 3: Command =consult-line=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available commands :properties: :custom_id: available-commands :description: Navigation, search, editing commands and more &lt;span&gt;🔚&lt;/span&gt; #+cindex: commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most Consult commands follow the meaningful naming scheme =consult-&#xA; &lt;thing&gt;&#xA;  =. Many commands implement a little known but convenient Emacs feature called &#34;future history&#34;, which guesses what input the user wants. At a command prompt type =M-n= and typically Consult will insert the symbol or thing at point into the input.&#xA; &lt;/thing&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP:&lt;/em&gt; If you have [[https://github.com/minad/marginalia][Marginalia]] annotators activated, type =M-x ^consult= to see all Consult commands with their abbreviated description. Alternatively, type =C-h a ^consult= to get an overview of all Consult variables and functions with their descriptions.&lt;/p&gt; &#xA;&lt;p&gt;** Virtual Buffers :properties: :description: Buffers, bookmarks and recent files &lt;span&gt;🔚&lt;/span&gt; #+cindex: virtual buffers&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-buffer #+findex: consult-buffer-other-window #+findex: consult-buffer-other-frame #+findex: consult-project-buffer #+findex: consult-recent-file #+findex: consult-bookmark&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-buffer= (=-other-window=, =-other-frame=): Enhanced version of =switch-to-buffer= with support for virtual buffers. Supports live preview of buffers and narrowing to the virtual buffer types. You can type =f SPC= in order to narrow to recent files. Press =SPC= to show ephemeral buffers. Supported narrowing keys: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;b Buffers&lt;/li&gt; &#xA;   &lt;li&gt;SPC Hidden buffers&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Modified buffers&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;f Files (Requires =recentf-mode=)&lt;/li&gt; &#xA;   &lt;li&gt;m Bookmarks&lt;/li&gt; &#xA;   &lt;li&gt;p Project&lt;/li&gt; &#xA;   &lt;li&gt;Custom [[#multiple-sources][other sources]] configured in =consult-buffer-sources=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=consult-project-buffer=: Variant of =consult-buffer= restricted to buffers and recent files of the current project. You can add custom sources to =consult-project-buffer-sources=. The command may prompt you for a project if you invoke it from outside a project.&lt;/li&gt; &#xA; &lt;li&gt;=consult-bookmark=: Select or create bookmark. To select bookmarks you might use the =consult-buffer= as an alternative, which can include a bookmark virtual buffer source. Note that =consult-bookmark= supports preview of bookmarks and narrowing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-recent-file=: Select from recent files with preview. You might prefer the powerful =consult-buffer= instead, which can include recent files as a virtual buffer source. The =recentf-mode= enables tracking of recent files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Editing :properties: :description: Commands useful for editing &lt;span&gt;🔚&lt;/span&gt; #+cindex: editing&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-yank-pop #+findex: consult-yank-from-kill-ring #+findex: consult-yank-replace #+findex: consult-kmacro&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-yank-from-kill-ring=: Enhanced version of =yank= to select an item from the =kill-ring=. The selected text previewed as overlay in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-yank-pop=: Enhanced version of =yank-pop= with DWIM-behavior, which either replaces the last =yank= by cycling through the =kill-ring=, or if there has not been a last =yank= consults the =kill-ring=. The selected text previewed as overlay in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-yank-replace=: Like =consult-yank-pop=, but always replaces the last =yank= with an item from the =kill-ring=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-kmacro=: Select macro from the macro ring and execute it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Register :properties: :description: Searching through registers and fast access &lt;span&gt;🔚&lt;/span&gt; #+cindex: register&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-register #+findex: consult-register-load #+findex: consult-register-store #+findex: consult-register-format #+findex: consult-register-window&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-register=: Select from list of registers. The command supports narrowing to register types and preview of marker positions. This command is useful to search the register contents. For quick access use the commands =consult-register-load=, =consult-register-store= or the built-in Emacs register commands.&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-format=: Set =register-preview-function= to this function for an enhanced register formatting. See the [[#use-package-example][example configuration]].&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-window=: Replace =register-preview= with this function for a better register window. See the [[#use-package-example][example configuration]].&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-load=: Utility command to quickly load a register. The command either jumps to the register value or inserts it.&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-store=: Improved UI to store registers depending on the current context with an action menu. With an active region, store/append/prepend the contents, optionally deleting the region when a prefix argument is given. With a numeric prefix argument, store/add the number. Otherwise store point, frameset, window or kmacro. Usage examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=M-&#39; x=: If no region is active, store point in register =x=. If a region is active, store the region in register =x=.&lt;/li&gt; &#xA;   &lt;li&gt;=M-&#39; M-w x=: Store window configuration in register =x=.&lt;/li&gt; &#xA;   &lt;li&gt;=C-u 100 M-&#39; x=: Store number in register =x=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Navigation :properties: :description: Mark rings, outlines and imenu &lt;span&gt;🔚&lt;/span&gt; #+cindex: navigation&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-goto-line #+findex: consult-mark #+findex: consult-global-mark #+findex: consult-outline #+findex: consult-imenu #+findex: consult-imenu-multi&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-goto-line=: Jump to line number enhanced with live preview. This is a drop-in replacement for =goto-line=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-mark=: Jump to a marker in the =mark-ring=. Supports live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-global-mark=: Jump to a marker in the =global-mark-ring=. Supports live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-outline=: Jump to a heading of the outline. Supports narrowing to a heading level, live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-imenu=: Jump to imenu item in the current buffer. Supports live preview, recursive editing and narrowing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-imenu-multi=: Jump to imenu item in project buffers, with the same major mode as the current buffer. Supports live preview, recursive editing and narrowing. This feature has been inspired by [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Search :properties: :description: Line search, grep and file search &lt;span&gt;🔚&lt;/span&gt; #+cindex: search&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-line #+findex: consult-line-multi #+findex: consult-multi-occur #+findex: consult-keep-lines #+findex: consult-focus-lines&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-line=: Enter search string and select from matching lines. Supports live preview and recursive editing. The symbol at point and the recent Isearch string are added to the &#34;future history&#34; and can be accessed by pressing =M-n=. When =consult-line= is bound to the =isearch-mode-map= and is invoked during a running Isearch, it will use the current Isearch string.&lt;/li&gt; &#xA; &lt;li&gt;=consult-line-multi=: Search across multiple buffers. By default search across project buffers. If invoked with a prefix argument search across all buffers. Behaves like =consult-line=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-multi-occur=: Replacement for =multi-occur= which uses =completing-read-multiple=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-keep-lines=: Replacement for =keep/flush-lines= which uses the current completion style for filtering the buffer. The function updates the buffer while typing. In particular =consult-keep-lines= can narrow down an exported Embark collect buffer further, relying on the same completion filtering as &lt;del&gt;completing-read&lt;/del&gt;. If the input begins with the negation operator, i.e., &lt;del&gt;! SPC&lt;/del&gt;, the filter matches the complement. If a region is active, the region restricts the filtering.&lt;/li&gt; &#xA; &lt;li&gt;=consult-focus-lines=: Temporarily hide lines by filtering them using the current completion style. Call with =C-u= prefix argument in order to show the hidden lines again. If the input begins with the negation operator, i.e., &lt;del&gt;! SPC&lt;/del&gt;, the filter matches the complement. In contrast to =consult-keep-lines= this function does not edit the buffer. If a region is active, the region restricts the filtering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Grep and Find :properties: :description: Searching through the filesystem &lt;span&gt;🔚&lt;/span&gt; #+cindex: grep #+cindex: find #+cindex: locate&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-grep #+findex: consult-ripgrep #+findex: consult-git-grep #+findex: consult-find #+findex: consult-locate&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-grep=, =consult-ripgrep=, =consult-git-grep=: Search for regular expression in files. Consult invokes Grep asynchronously, while you enter the search term. After at least =consult-async-min-input= characters, the search gets started. Consult splits the input string into two parts, if the first character is a punctuation character, like =#=. For example =#regexps#filter-string=, is split at the second =#=. The string =regexps= is passed to Grep. Note that Consult transforms Emacs regular expressions to expressions understand by the search program. Always use Emacs regular expressions at the prompt. If you enter multiple regular expressions separated by space only lines matching all regular expressions are shown. In order to match space literally, escape the space with a backslash. The =filter-string= is passed to the /fast/ Emacs filtering to further narrow down the list of matches. This is particularly useful if you are using an advanced completion style like orderless. =consult-grep= supports preview. If the =consult-project-function= returns non-nil, =consult-grep= searches the current project directory. Otherwise the =default-directory= is searched. If =consult-grep= is invoked with prefix argument =C-u M-s g=, you can specify the directory manually.&lt;/li&gt; &#xA; &lt;li&gt;=consult-find=, =consult-locate=: Find file by matching the path against a regexp. Like for =consult-grep,= either the project root or the current directory is the root directory for the search. The input string is treated similarly to =consult-grep=, where the first part is passed to find, and the second part is used for Emacs filtering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Compilation :properties: :description: Jumping to references and compilation errors &lt;span&gt;🔚&lt;/span&gt; #+cindex: compilation errors&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-compile-error #+findex: consult-flymake #+findex: consult-xref&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-compile-error=: Jump to a compilation error. Supports live preview narrowing and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-flymake=: Jump to flymake diagnostic. Supports live preview and recursive editing. The command supports narrowing. Press =e SPC=, =w SPC=, =n SPC= to only show errors, warnings and notes respectively.&lt;/li&gt; &#xA; &lt;li&gt;=consult-xref=: Integration with xref. This function can be set as =xref-show-xrefs-function= and =xref-show-definitions-function=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Histories :properties: :description: Navigating histories &lt;span&gt;🔚&lt;/span&gt; #+cindex: history&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-complex-command #+findex: consult-history #+findex: consult-isearch-history&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-complex-command=: Select a command from the =command-history=. This command is a =completing-read= version of =repeat-complex-command= and is also a replacement for the =command-history= command from chistory.el.&lt;/li&gt; &#xA; &lt;li&gt;=consult-history=: Insert a string from the current buffer history, for example the Eshell or Comint history. You can also invoke this command from the minibuffer. In that case =consult-history= uses the history stored in the =minibuffer-history-variable=. If you prefer =completion-at-point=, take a look at =cape-history= from the [[https://github.com/minad/cape][Cape]] package.&lt;/li&gt; &#xA; &lt;li&gt;=consult-isearch-history=: During an Isearch session, this command picks a search string from history and continues the search with the newly selected string. Outside of Isearch, the command allows you to pick a string from the history and starts a new Isearch. =consult-isearch-history= acts as a drop-in replacement for =isearch-edit-string=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Modes :properties: :description: Toggling minor modes and executing commands &lt;span&gt;🔚&lt;/span&gt; #+cindex: minor mode #+cindex: major mode&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-minor-mode-menu #+findex: consult-mode-command&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-minor-mode-menu=: Enable/disable minor mode. Supports narrowing to on/off/local/global modes by pressing =i/o/l/g SPC= respectively.&lt;/li&gt; &#xA; &lt;li&gt;=consult-mode-command=: Run a command from the currently active minor or major modes. Supports narrowing to local-minor/global-minor/major mode via the keys =l/g/m=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Org Mode :properties: :description: Org-specific commands &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-org-heading #+findex: consult-org-agenda&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-org-heading=: Similar to =consult-outline=, for Org buffers. Supports narrowing by heading level, priority and TODO state, as well as live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-org-agenda=: Jump to an agenda heading. Supports narrowing by heading level, priority and TODO state, as well as live preview and recursive editing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Miscellaneous :properties: :description: Various other useful commands &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-apropos #+findex: consult-file-externally #+findex: consult-completion-in-region #+findex: consult-theme #+findex: consult-man #+findex: consult-preview-at-point #+findex: consult-preview-at-point-mode&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-apropos=: Replacement for =apropos= with completion. As a better alternative, you can run =embark-export= from commands like =M-x= or =describe-symbol=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-man=: Find Unix man page, via Unix =apropos= or =man -k=. =consult-man= opens the selected man page using the Emacs =man= command.&lt;/li&gt; &#xA; &lt;li&gt;=consult-file-externally=: Select a file and open it externally, e.g.&amp;nbsp;using =xdg-open= on Linux.&lt;/li&gt; &#xA; &lt;li&gt;=consult-theme=: Select a theme and disable all currently enabled themes. Supports live preview of the theme while scrolling through the candidates.&lt;/li&gt; &#xA; &lt;li&gt;=consult-preview-at-point= and =consult-preview-at-point-mode=: Command and minor mode which previews the candidate at point in the =&lt;em&gt;Completions&lt;/em&gt;= buffer. This mode is relevant if you use [[https://git.sr.ht/~protesilaos/mct][Mct]] or the default =&lt;em&gt;Completions&lt;/em&gt;= UI.&lt;/li&gt; &#xA; &lt;li&gt;=consult-completion-in-region=: In case you don&#39;t use [[https://github.com/minad/corfu][Corfu]] as your in-buffer completion UI, this function can be set as =completion-in-region-function=. Then your minibuffer completion UI (e.g., Vertico or Icomplete) will be used for =completion-at-point=. Note that Selectrum provides its own variant of =consult-completion-in-region=. If you use Mct, you may want to try =mct-region-mode= instead. #+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src Instead of =consult-completion-in-region=, you may prefer to see the completions directly in the buffer as a small popup. In that case, I recommend either the [[https://github.com/minad/corfu][Corfu]] or the [[https://github.com/company-mode/company-mode][Company]] package. There is a technical limitation of =consult-completion-in-region= in combination with Lsp-mode or Eglot. The Lsp server relies on the input at point, in order to generate refined candidate strings. Since the completion is transferred from the original buffer to the minibuffer, the server does not receive the updated input. LSP completion works with Corfu or Company though, which perform the completion directly in the original buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Special features :properties: :description: Enhancements over built-in `completing-read&#39; &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult enhances =completing-read= with live previews of candidates, additional narrowing capabilities to candidate groups and asynchronously generated candidate lists. The internal =consult--read= function, which is used by most Consult commands, is a thin wrapper around =completing-read= and provides the special functionality. In order to support multiple candidate sources there exists the high-level function =consult--multi=. The architecture of Consult allows it to work with different completion systems in the backend, while still offering advanced features.&lt;/p&gt; &#xA;&lt;p&gt;** Live previews :properties: :description: Preview the currently selected candidate :custom_id: live-previews &lt;span&gt;🔚&lt;/span&gt; #+cindex: preview&lt;/p&gt; &#xA;&lt;p&gt;Some Consult commands support live previews. For example when you scroll through the items of =consult-line=, the buffer will scroll to the corresponding position. It is possible to jump back and forth between the minibuffer and the buffer to perform recursive editing while the search is ongoing.&lt;/p&gt; &#xA;&lt;p&gt;Consult enables previews by default. You can disable them by adjusting the =consult-preview-key= variable. Furthermore it is possible to specify keybindings which trigger the preview manually as shown in the [[#use-package-example][example configuration]]. The default setting of =consult-preview-key= is =any= which means that Consult triggers the preview /immediately/ on any key press when the selected candidate changes. You can configure each command individually with its own =:preview-key=. The following settings are possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic and immediate =&#39;any=&lt;/li&gt; &#xA; &lt;li&gt;Automatic and delayed =(list :debounce 0.5 &#39;any)=&lt;/li&gt; &#xA; &lt;li&gt;Manual and immediate =(kbd &#34;M-.&#34;)=&lt;/li&gt; &#xA; &lt;li&gt;Manual and delayed =(list :debounce 0.5 (kbd &#34;M-.&#34;))=&lt;/li&gt; &#xA; &lt;li&gt;Disabled =nil=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A safe recommendation is to leave automatic immediate previews enabled in general and disable the automatic preview only for commands, where the preview may be expensive due to file loading.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-recent-file consult-xref consult--source-bookmark consult--source-recent-file consult--source-project-recent-file ;; :preview-key &#39;(:debounce 0.2 any) ;; Option 1: Delay preview :preview-key (kbd &#34;M-.&#34;)) ;; Option 2: Manual preview #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In this case one may wonder what the difference is between using an Embark action on the current candidate in comparison to a manually triggered preview. The main difference is that the files opened by manual preview are closed again after the completion session. Furthermore during preview some functionality is disabled to improve the performance, see for example the customization variables =consult-preview-allowed-hooks= and =consult-preview-variables=. Files larger than =consult-preview-raw-size= are previewed literally without syntax highlighting and without changing the major mode. Delaying the preview is also useful for =consult-theme=, since the theme preview is slow. The delay results in a smoother UI experience.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Preview on any key press, but delay 0.5s (consult-customize consult-theme :preview-key &#39;(:debounce 0.5 any)) ;; Preview immediately on M-., on up/down after 0.5s, on any other key after 1s (consult-customize consult-theme :preview-key (list (kbd &#34;M-.&#34;) :debounce 0.5 (kbd &#34;&#xA; &lt;up&gt;&#xA;  &#34;) (kbd &#34;&#xA;  &lt;down&gt;&#xA;   &#34;) :debounce 1 &#39;any)) #+end_src&#xA;  &lt;/down&gt;&#xA; &lt;/up&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Narrowing and grouping :properties: :description: Restricting the completion to a candidate group :custom_id: narrowing-and-grouping &lt;span&gt;🔚&lt;/span&gt; #+cindex: narrowing&lt;/p&gt; &#xA;&lt;p&gt;Consult has special support for candidate groups. If the completion UI supports the grouping functionality, the UI separates the groups with thin lines and shows group titles. Grouping is useful if the list of candidates consists of candidates of multiple types or candidates from [[#multiple-sources][multiple sources]], like the =consult-buffer= command, which shows both buffers and recently opened files. Note that you can disable the group titles by setting the =:group= property of the corresponding command to nil using the =consult-customize= macro.&lt;/p&gt; &#xA;&lt;p&gt;By entering a narrowing prefix or by pressing a narrowing key it is possible to restrict the completion candidates to a certain candidate group. When you use the =consult-buffer= command, you can enter the prefix =b SPC= to restrict list of candidates to buffers only. If you press =DEL= afterwards, the full candidate list will be shown again. Furthermore a narrowing prefix key and a widening key can be configured which can be pressed to achieve the same effect, see the configuration variables =consult-narrow-key= and =consult-widen-key=.&lt;/p&gt; &#xA;&lt;p&gt;After pressing =consult-narrow-key=, the possible narrowing keys can be shown by pressing =C-h=. When pressing =C-h= after some prefix key, the =prefix-help-command= is invoked, which shows the keybinding help window by default. As a more compact alternative, there is the =consult-narrow-help= command which can be bound to a key, for example =?= or =C-h= in the =consult-narrow-map=, as shown in the [[#use-package-example][example configuration]]. If [[https://github.com/justbur/emacs-which-key][which-key]] is installed, the narrowing keys are automatically shown in the which-key window after pressing the =consult-narrow-key=.&lt;/p&gt; &#xA;&lt;p&gt;** Asynchronous search :properties: :description: Filtering asynchronously generated candidate lists &lt;span&gt;🔚&lt;/span&gt; #+cindex: asynchronous search&lt;/p&gt; &#xA;&lt;p&gt;Consult has support for asynchronous generation of candidate lists. This feature is used for search commands like =consult-grep=, where the list of matches is generated dynamically while the user is typing a regular expression. The grep process is executed in the background. When modifying the regular expression, the background process is terminated and a new process is started with the modified regular expression.&lt;/p&gt; &#xA;&lt;p&gt;The matches, which have been found, can then be narrowed using the installed Emacs completion-style. This can be powerful if you are using for example the =orderless= completion style.&lt;/p&gt; &#xA;&lt;p&gt;This two-level filtering is possible by splitting the input string. Part of the input string is treated as input to grep and part of the input is used for filtering. There are multiple splitting styles available, configured in &lt;del&gt;consult-async-split-styles-alist&lt;/del&gt;: =nil=, =comma=, =semicolon= and =perl=. The default splitting style is configured with the variable &lt;del&gt;consult-async-split-style&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the =comma= and =semicolon= splitting styles, the first word before the comma or semicolon is passed to grep, the remaining string is used for filtering. The =nil= splitting style does not perform any splitting, the whole input is passed to grep.&lt;/p&gt; &#xA;&lt;p&gt;The =perl= splitting style splits the input string at a punctuation character, using a similar syntax as Perl regular expressions.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=#defun=: Search for &#34;defun&#34; using grep.&lt;/li&gt; &#xA; &lt;li&gt;=#consult embark=: Search for both &#34;consult&#34; and &#34;embark&#34; using grep in any order.&lt;/li&gt; &#xA; &lt;li&gt;=#first.*second=: Search for &#34;first&#34; followed by &#34;second&#34; using grep.&lt;/li&gt; &#xA; &lt;li&gt;=#(consult|embark)=: Search for &#34;consult&#34; or &#34;embark&#34; using grep. Note the usage of Emacs-style regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=#defun#consult=: Search for &#34;defun&#34; using grep, filter with the word &#34;consult&#34;.&lt;/li&gt; &#xA; &lt;li&gt;=/defun/consult=: It is also possible to use other punctuation characters.&lt;/li&gt; &#xA; &lt;li&gt;=#to#=: Force searching for &#34;to&#34; using grep, since the grep pattern must be longer than =consult-async-min-input= characters by default.&lt;/li&gt; &#xA; &lt;li&gt;=#defun -- --invert-match#=: Pass argument =--invert-match= to grep.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Asynchronous processes like =find= and =grep= create an error log buffer =_&lt;em&gt;consult-async&lt;/em&gt;= (note the leading space), which is useful for troubleshooting. The prompt has a small indicator showing the process status:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:= the usual prompt colon, before input is provided.&lt;/li&gt; &#xA; &lt;li&gt;=*= with warning face, the process is running.&lt;/li&gt; &#xA; &lt;li&gt;=:= with success face, success, process exited with an error code of zero.&lt;/li&gt; &#xA; &lt;li&gt;=!= with error face, failure, process exited with a nonzero error code.&lt;/li&gt; &#xA; &lt;li&gt;=;= with error face, interrupted, for example if more input is provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Multiple sources :properties: :description: Combining candidates from different sources :custom_id: multiple-sources &lt;span&gt;🔚&lt;/span&gt; #+cindex: multiple sources&lt;/p&gt; &#xA;&lt;p&gt;Multiple synchronous candidate sources can be combined. This feature is used by the =consult-buffer= command to present buffer-like candidates in a single menu for quick access. By default =consult-buffer= includes buffers, bookmarks, recent files and project-specific buffers and files. It is possible to configure the list of sources via the =consult-buffer-sources= variable. Arbitrary custom sources can be defined.&lt;/p&gt; &#xA;&lt;p&gt;As an example, the bookmark source is defined as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar consult--source-bookmark `(:name &#34;Bookmark&#34; :narrow ?m :category bookmark :face consult-bookmark :history bookmark-history :items ,#&#39;bookmark-all-names :action ,#&#39;consult--bookmark-action)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Required source fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:category= Completion category.&lt;/li&gt; &#xA; &lt;li&gt;=:items= List of strings to select from or function returning list of strings. A list of cons cells is not supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional source fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:name= Name of the source, used for narrowing, group titles and annotations.&lt;/li&gt; &#xA; &lt;li&gt;=:narrow= Narrowing character or =(character . string)= pair.&lt;/li&gt; &#xA; &lt;li&gt;=:preview-key= Preview key or keys which trigger preview.&lt;/li&gt; &#xA; &lt;li&gt;=:enabled= Function which must return t if the source is enabled.&lt;/li&gt; &#xA; &lt;li&gt;=:hidden= When t candidates of this source are hidden by default.&lt;/li&gt; &#xA; &lt;li&gt;=:face= Face used for highlighting the candidates.&lt;/li&gt; &#xA; &lt;li&gt;=:annotate= Annotation function called for each candidate, returns string.&lt;/li&gt; &#xA; &lt;li&gt;=:history= Name of history variable to add selected candidate.&lt;/li&gt; &#xA; &lt;li&gt;=:default= Must be t if the first item of the source is the default value.&lt;/li&gt; &#xA; &lt;li&gt;=:action= Function called with the selected candidate.&lt;/li&gt; &#xA; &lt;li&gt;=:new= Function called with new candidate name, only if =:require-match= is nil.&lt;/li&gt; &#xA; &lt;li&gt;=:state= State constructor for the source, must return the state function.&lt;/li&gt; &#xA; &lt;li&gt;Other source fields can be added specifically to the use case.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The =:state= and =:action= fields of the sources deserve a longer explanation. The =:action= function takes a single argument and is only called after selection with the selected candidate, if the selection has not been aborted. This functionality is provided for convenience and easy definition of sources. The =:state= field is more general. The =:state= function is a constructor function without arguments, which can perform some setup necessary for the preview. It must return a closure which takes an ACTION and a CANDIDATE argument. See the docstring of =consult--with-preview= for more details about the ACTION argument.&lt;/p&gt; &#xA;&lt;p&gt;By default, =consult-buffer= previews buffers, bookmarks and files. Loading recent files, bookmarks or views can result in expensive operations. However it is possible to configure a manual preview as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult--source-bookmark consult--source-recent-file consult--source-project-recent-file :preview-key (kbd &#34;M-.&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Sources can be added directly to the =consult-buffer-source= list for convenience. For example views can be added to the list of virtual buffers from a library like &lt;a href=&#34;https://github.com/minad/bookmark-view/&#34;&gt;https://github.com/minad/bookmark-view/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure new bookmark-view source (add-to-list &#39;consult-buffer-sources (list :name &#34;View&#34; :narrow ?v :category &#39;bookmark :face &#39;font-lock-keyword-face :history &#39;bookmark-view-history :action #&#39;consult--bookmark-action :items #&#39;bookmark-view-names) &#39;append)&lt;/p&gt; &#xA;&lt;p&gt;;; Modify bookmark source, such that views are hidden (setq consult--source-bookmark (plist-put consult--source-bookmark :items (lambda () (bookmark-maybe-load-default-file) (mapcar #&#39;car (seq-remove (lambda (x) (eq #&#39;bookmark-view-handler (alist-get &#39;handler (cdr x)))) bookmark-alist))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Another useful source lists all Org buffers and lets you create new ones. One can create similar sources for other major modes, e.g., for Eshell.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar org-source (list :name &#34;Org Buffer&#34; :category &#39;buffer :narrow ?o :face &#39;consult-buffer :history &#39;buffer-name-history :state #&#39;consult--buffer-state :new (lambda (name) (with-current-buffer (get-buffer-create name) (insert &#34;#+title: &#34; name &#34;\n\n&#34;) (org-mode) (consult--buffer-action (current-buffer)))) :items (lambda () (mapcar #&#39;buffer-name (seq-filter (lambda (x) (eq (buffer-local-value &#39;major-mode x) &#39;org-mode)) (buffer-list))))))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;consult-buffer-sources &#39;org-source &#39;append) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the documentation of =consult-buffer= and of the internal =consult--multi= API. The =consult--multi= function can be used to create new multi-source commands, but is part of the internal API as of now, since some details may still change.&lt;/p&gt; &#xA;&lt;p&gt;** Embark integration :properties: :description: Actions, Grep/Occur-buffer export :custom_id: embark-integration &lt;span&gt;🔚&lt;/span&gt; #+cindex: embark&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Install the =embark-consult= package from MELPA, which provides Consult-specific Embark actions and the Occur buffer export.&lt;/p&gt; &#xA;&lt;p&gt;Embark is a versatile package which offers context dependent actions, comparable to a context menu. See the [[https://github.com/oantolin/embark][Embark manual]] for an extensive description of its capabilities.&lt;/p&gt; &#xA;&lt;p&gt;Actions are commands which can operate on the currently selected candidate (or target in Embark terminology). When completing files, for example the =delete-file= command is offered. With Embark you can execute arbitrary commands on the currently selected candidate via =M-x=.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore Embark provides the =embark-collect= command, which collects candidates and presents them in an Embark collect buffer, where further actions can be applied to them. A related feature is the =embark-export= command, which exports candidate lists to a buffer of a special type. For example in the case of file completion, a Dired buffer is opened.&lt;/p&gt; &#xA;&lt;p&gt;In the context of Consult, particularly exciting is the possibility to export the matching lines from =consult-line=, =consult-outline=, =consult-mark= and =consult-global-mark=. The matching lines are exported to an Occur buffer where they can be edited via the =occur-edit-mode= (press key =e=). Similarly, Embark supports exporting the matches found by =consult-grep=, =consult-ripgrep= and =consult-git-grep= to a Grep buffer, where the matches across files can be edited, if the [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] package is installed. These three workflows are symmetric.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-line= -&amp;gt; =embark-export= to =occur-mode= buffer -&amp;gt; =occur-edit-mode= for editing of matches in buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-grep= -&amp;gt; =embark-export= to =grep-mode= buffer -&amp;gt; =wgrep= for editing of all matches.&lt;/li&gt; &#xA; &lt;li&gt;=consult-find= -&amp;gt; =embark-export= to =dired-mode= buffer -&amp;gt; =wdired-change-to-wdired-mode= for editing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration :properties: :description: Example configuration and customization variables &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult can be installed from [[http://elpa.gnu.org/packages/consult.html][ELPA]] or [[https://melpa.org/#/consult][MELPA]] via the Emacs built-in package manager. Alternatively it can be directly installed from the development repository via other non-standard package managers.&lt;/p&gt; &#xA;&lt;p&gt;There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where additional configuration examples can be contributed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT:&lt;/em&gt; It is strongly recommended that you enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]] in your configuration. Consult relies on lambdas and lexical closures. For this reason many Consult-related snippets require lexical binding.&lt;/p&gt; &#xA;&lt;p&gt;** Use-package example :properties: :description: Configuration example based on use-package :custom_id: use-package-example &lt;span&gt;🔚&lt;/span&gt; #+cindex: use-package&lt;/p&gt; &#xA;&lt;p&gt;The Consult package only provides commands and does not add any keybindings or modes. Therefore the package is non-intrusive but requires a little setup effort. In order to use the Consult commands, it is advised to add keybindings for commands which are accessed often. Rarely used commands can be invoked via =M-x=. Feel free to only bind the commands you consider useful to your workflow. The configuration shown here relies on the =use-package= macro, which is a convenient tool to manage package configurations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where you can contribute additional configuration examples.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Example configuration for Consult (use-package consult ;; Replace bindings. Lazily loaded due by `use-package&#39;. :bind (;; C-c bindings (mode-specific-map) (&#34;C-c h&#34; . consult-history) (&#34;C-c m&#34; . consult-mode-command) (&#34;C-c k&#34; . consult-kmacro) ;; C-x bindings (ctl-x-map) (&#34;C-x M-:&#34; . consult-complex-command) ;; orig. repeat-complex-command (&#34;C-x b&#34; . consult-buffer) ;; orig. switch-to-buffer (&#34;C-x 4 b&#34; . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window (&#34;C-x 5 b&#34; . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame (&#34;C-x r b&#34; . consult-bookmark) ;; orig. bookmark-jump (&#34;C-x p b&#34; . consult-project-buffer) ;; orig. project-switch-to-buffer ;; Custom M-# bindings for fast register access (&#34;M-#&#34; . consult-register-load) (&#34;M-&#39;&#34; . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated) (&#34;C-M-#&#34; . consult-register) ;; Other custom bindings (&#34;M-y&#34; . consult-yank-pop) ;; orig. yank-pop (&#34;&#xA; &lt;help&gt;&#xA;   a&#34; . consult-apropos) ;; orig. apropos-command ;; M-g bindings (goto-map) (&#34;M-g e&#34; . consult-compile-error) (&#34;M-g f&#34; . consult-flymake) ;; Alternative: consult-flycheck (&#34;M-g g&#34; . consult-goto-line) ;; orig. goto-line (&#34;M-g M-g&#34; . consult-goto-line) ;; orig. goto-line (&#34;M-g o&#34; . consult-outline) ;; Alternative: consult-org-heading (&#34;M-g m&#34; . consult-mark) (&#34;M-g k&#34; . consult-global-mark) (&#34;M-g i&#34; . consult-imenu) (&#34;M-g I&#34; . consult-imenu-multi) ;; M-s bindings (search-map) (&#34;M-s d&#34; . consult-find) (&#34;M-s D&#34; . consult-locate) (&#34;M-s g&#34; . consult-grep) (&#34;M-s G&#34; . consult-git-grep) (&#34;M-s r&#34; . consult-ripgrep) (&#34;M-s l&#34; . consult-line) (&#34;M-s L&#34; . consult-line-multi) (&#34;M-s m&#34; . consult-multi-occur) (&#34;M-s k&#34; . consult-keep-lines) (&#34;M-s u&#34; . consult-focus-lines) ;; Isearch integration (&#34;M-s e&#34; . consult-isearch-history) :map isearch-mode-map (&#34;M-e&#34; . consult-isearch-history) ;; orig. isearch-edit-string (&#34;M-s e&#34; . consult-isearch-history) ;; orig. isearch-edit-string (&#34;M-s l&#34; . consult-line) ;; needed by consult-line to detect isearch (&#34;M-s L&#34; . consult-line-multi) ;; needed by consult-line to detect isearch ;; Minibuffer history :map minibuffer-local-map (&#34;M-s&#34; . consult-history) ;; orig. next-matching-history-element (&#34;M-r&#34; . consult-history)) ;; orig. previous-matching-history-element&#xA; &lt;/help&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Enable automatic preview at point in the *Completions* buffer. This is&#xA;;; relevant when you use the default completion UI.&#xA;:hook (completion-list-mode . consult-preview-at-point-mode)&#xA;&#xA;;; The :init configuration is always executed (Not lazy)&#xA;:init&#xA;&#xA;;; Optionally configure the register formatting. This improves the register&#xA;;; preview for `consult-register&#39;, `consult-register-load&#39;,&#xA;;; `consult-register-store&#39; and the Emacs built-ins.&#xA;(setq register-preview-delay 0.5&#xA;      register-preview-function #&#39;consult-register-format)&#xA;&#xA;;; Optionally tweak the register preview window.&#xA;;; This adds thin lines, sorting and hides the mode line of the window.&#xA;(advice-add #&#39;register-preview :override #&#39;consult-register-window)&#xA;&#xA;;; Use Consult to select xref locations with preview&#xA;(setq xref-show-xrefs-function #&#39;consult-xref&#xA;      xref-show-definitions-function #&#39;consult-xref)&#xA;&#xA;;; Configure other variables and modes in the :config section,&#xA;;; after lazily loading the package.&#xA;:config&#xA;&#xA;;; Optionally configure preview. The default value&#xA;;; is &#39;any, such that any key triggers the preview.&#xA;;; (setq consult-preview-key &#39;any)&#xA;;; (setq consult-preview-key (kbd &#34;M-.&#34;))&#xA;;; (setq consult-preview-key (list (kbd &#34;&amp;lt;S-down&amp;gt;&#34;) (kbd &#34;&amp;lt;S-up&amp;gt;&#34;)))&#xA;;; For some commands and buffer sources it is useful to configure the&#xA;;; :preview-key on a per-command basis using the `consult-customize&#39; macro.&#xA;(consult-customize&#xA; consult-theme&#xA; :preview-key &#39;(:debounce 0.2 any)&#xA; consult-ripgrep consult-git-grep consult-grep&#xA; consult-bookmark consult-recent-file consult-xref&#xA; consult--source-bookmark consult--source-recent-file&#xA; consult--source-project-recent-file&#xA; :preview-key (kbd &#34;M-.&#34;))&#xA;&#xA;;; Optionally configure the narrowing key.&#xA;;; Both &amp;lt; and C-+ work reasonably well.&#xA;(setq consult-narrow-key &#34;&amp;lt;&#34;) ;; (kbd &#34;C-+&#34;)&#xA;&#xA;;; Optionally make narrowing help available in the minibuffer.&#xA;;; You may want to use `embark-prefix-help-command&#39; or which-key instead.&#xA;;; (define-key consult-narrow-map (vconcat consult-narrow-key &#34;?&#34;) #&#39;consult-narrow-help)&#xA;&#xA;;; By default `consult-project-function&#39; uses `project-root&#39; from project.el.&#xA;;; Optionally configure a different project root function.&#xA;;; There are multiple reasonable alternatives to chose from.&#xA;;;;; 1. project.el (the default)&#xA;;; (setq consult-project-function #&#39;consult--default-project--function)&#xA;;;;; 2. projectile.el (projectile-project-root)&#xA;;; (autoload &#39;projectile-project-root &#34;projectile&#34;)&#xA;;; (setq consult-project-function (lambda (_) (projectile-project-root)))&#xA;;;;; 3. vc.el (vc-root-dir)&#xA;;; (setq consult-project-function (lambda (_) (vc-root-dir)))&#xA;;;;; 4. locate-dominating-file&#xA;;; (setq consult-project-function (lambda (_) (locate-dominating-file &#34;.&#34; &#34;.git&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Custom variables :properties: :description: Short description of all customization settings &lt;span&gt;🔚&lt;/span&gt; #+cindex: customization&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP:&lt;/em&gt; If you have [[https://github.com/minad/marginalia][Marginalia]] installed, type =M-x customize-variable RET ^consult= to see all Consult-specific customizable variables with their current values and abbreviated description. Alternatively, type =C-h a ^consult= to get an overview of all Consult variables and functions with their descriptions.&lt;/p&gt; &#xA;&lt;p&gt;| Variable | Description | |----------------------------------+-------------------------------------------------------| | consult-after-jump-hook | Functions to call after jumping to a location | | consult-async-input-debounce | Input debounce for asynchronous commands | | consult-async-input-throttle | Input throttle for asynchronous commands | | consult-async-min-input | Minimum numbers of letters needed for async process | | consult-async-refresh-delay | Refresh delay for asynchronous commands | | consult-async-split-style | Splitting style used for async commands | | consult-async-split-styles-alist | Available splitting styles used for async commands | | consult-bookmark-narrow | Narrowing configuration for =consult-bookmark= | | consult-buffer-filter | Filter for =consult-buffer= | | consult-buffer-sources | List of virtual buffer sources | | consult-find-args | Command line arguments for find | | consult-fontify-max-size | Buffers larger than this limit are not fontified | | consult-fontify-preserve | Preserve fontification for line-based commands. | | consult-git-grep-args | Command line arguments for git-grep | | consult-goto-line-numbers | Show line numbers for =consult-goto-line= | | consult-grep-max-columns | Maximal number of columns of the matching lines | | consult-grep-args | Command line arguments for grep | | consult-imenu-config | Mode-specific configuration for =consult-imenu= | | consult-line-numbers-widen | Show absolute line numbers when narrowing is active. | | consult-line-point-placement | Placement of the point used by =consult-line= | | consult-line-start-from-top | Start the =consult-line= search from the top | | consult-locate-args | Command line arguments for locate | | consult-man-args | Command line arguments for man | | consult-mode-command-filter | Filter for =consult-mode-command= | | consult-mode-histories | Mode-specific history variables | | consult-narrow-key | Narrowing prefix key during completion | | consult-preview-key | Keys which triggers preview | | consult-preview-allowed-hooks | List of =find-file= hooks to enable during preview | | consult-preview-max-count | Maximum number of files to keep open during preview | | consult-preview-max-size | Files larger than this size are not previewed | | consult-preview-raw-size | Files larger than this size are previewed in raw form | | consult-preview-variables | Alist of variables to bind during preview | | consult-project-buffer-sources | List of virtual project buffer sources | | consult-project-function | Function which returns current project root | | consult-register-prefix | Prefix string for register keys during completion | | consult-ripgrep-args | Command line arguments for ripgrep | | consult-themes | List of themes to be presented for selection | | consult-widen-key | Widening key during completion |&lt;/p&gt; &#xA;&lt;p&gt;** Fine-tuning of individual commands :properties: :alt_title: Fine-tuning :description: Fine-grained configuration for special requirements &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Consult supports fine-grained customization of individual commands. This configuration feature exists for experienced users with special requirements. There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where we collect further configuration examples.&lt;/p&gt; &#xA;&lt;p&gt;Commands and buffer sources allow flexible, individual customization by using the =consult-customize= macro. You can override any option passed to the internal =consult--read= API. The [[https://github.com/minad/consult/wiki][Consult wiki]] already contains a numerous useful configuration examples. Note that since =consult--read= is part of the internal API, options could be removed, replaced or renamed in future versions of the package.&lt;/p&gt; &#xA;&lt;p&gt;Useful options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:prompt= set the prompt string&lt;/li&gt; &#xA; &lt;li&gt;=:preview-key= set the preview key, default is =consult-preview-key=&lt;/li&gt; &#xA; &lt;li&gt;=:initial= set the initial input&lt;/li&gt; &#xA; &lt;li&gt;=:default= set the default value&lt;/li&gt; &#xA; &lt;li&gt;=:history= set the history variable symbol&lt;/li&gt; &#xA; &lt;li&gt;=:add-history= add items to the future history, for example symbol at point&lt;/li&gt; &#xA; &lt;li&gt;=:sort= enable or disable sorting&lt;/li&gt; &#xA; &lt;li&gt;=:group= set to nil to disable candidate grouping and titles.&lt;/li&gt; &#xA; &lt;li&gt;=:inherit-input-method= set to non-nil to inherit the input method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize ;; Disable preview for &lt;code&gt;consult-theme&#39; completely. consult-theme :preview-key nil ;; Set preview for &lt;/code&gt;consult-buffer&#39; to key &lt;code&gt;M-.&#39; consult-buffer :preview-key (kbd &#34;M-.&#34;) ;; For &lt;/code&gt;consult-line&#39; change the prompt and specify multiple preview ;; keybindings. Note that you should bind &#xA; &lt;s-up&gt;&#xA;   and &#xA;  &lt;s-down&gt;&#xA;    in the ;; &#xA;   &lt;code&gt;minibuffer-local-completion-map&#39; or &lt;/code&gt;vertico-map&#39; to the commands which ;; select the previous or next candidate. consult-line :prompt &#34;Search: &#34; :preview-key (list (kbd &#34;&#xA;   &lt;s-down&gt;&#xA;    &#34;) (kbd &#34;&#xA;    &lt;s-up&gt;&#xA;     &#34;))) #+end_src&#xA;    &lt;/s-up&gt;&#xA;   &lt;/s-down&gt;&#xA;  &lt;/s-down&gt;&#xA; &lt;/s-up&gt;&lt;/p&gt; &#xA;&lt;p&gt;The configuration values are evaluated at runtime, just before the completion session is started. Therefore you can use for example =thing-at-point= to adjust the initial input or the future hitory.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult-line :add-history (seq-some #&#39;thing-at-point &#39;(region symbol)))&lt;/p&gt; &#xA;&lt;p&gt;(defalias &#39;consult-line-thing-at-point &#39;consult-line)&lt;/p&gt; &#xA;&lt;p&gt;(consult-customize consult-line-thing-at-point :initial (thing-at-point &#39;symbol)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Generally it is possible to modify commands for your individual needs by the following techniques:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use =consult-customize= in order to change the command or source settings.&lt;/li&gt; &#xA; &lt;li&gt;Create your own wrapper function which passes modified arguments to the Consult functions.&lt;/li&gt; &#xA; &lt;li&gt;Create your own buffer [[#multiple-sources][multi sources]] for =consult-buffer=.&lt;/li&gt; &#xA; &lt;li&gt;Create advices to modify some internal behavior.&lt;/li&gt; &#xA; &lt;li&gt;Write or propose a patch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recommended packages :properties: :description: Related packages recommended for installation &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I use and recommend this combination of packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;consult: This package&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico][vertico]]: Fast and minimal vertical completion system&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][marginalia]]: Annotations for the completion candidates&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][embark and embark-consult]]: Action commands, which can act on the completion candidates&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][orderless]]: Completion style which offers flexible candidate filtering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There exist many other fine completion UIs beside Vertico, which are supported by Consult. Give them a try and find out which interaction model fits best for you!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The builtin completion UI, which pops up the =&lt;em&gt;Completions&lt;/em&gt;= buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][mct by Protesilaos Stavrou]]: Minibuffer and Completions in Tandem, which builds on the default completion UI.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/raxod502/selectrum][selectrum by Radon Rosborough]]: Alternative vertical completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/icomplete-vertical][icomplete-vertical by Omar Antolín Camarena]]: Vertical completion system based on Icomplete. Icomplete-vertical is only needed for Emacs 27, built-in on Emacs 28.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can integrated Consult with special programs or with other packages in the wider Emacs ecosystem. You may want to install some of theses packages depending on your preferences and requirements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/yadex205/consult-ag][consult-ag]]: Support for the [[https://github.com/ggreer/the_silver_searcher][Silver Searcher]] in the style of =consult-grep=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-company][consult-company]]: Completion at point using the [[https://github.com/company-mode/company-mode][Company]] backends.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink/consult-dir][consult-dir]]: Directory jumper using Consult multi sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-eglot][consult-eglot]]: Integration with Eglot (LSP client).&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult-flycheck][consult-flycheck]]: Additional Flycheck integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]]: Additional Flyspell integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rcj/consult-ls-git][consult-ls-git]]: List files from git via Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/gagbo/consult-lsp][consult-lsp]]: Integration with Lsp-mode (LSP client).&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/consult-notmuch][consult-notmuch]]: Access the [[https://notmuchmail.org/][Notmuch]] email system using Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jgru/consult-org-roam][consult-org-roam]]: Integration with [[https://github.com/org-roam/org-roam][Org-roam]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler/consult-project-extra/][consult-project-extra]]: Additional project.el extras and buffer sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon/consult-projectile/][consult-projectile]]: Additional [[https://github.com/bbatsov/projectile][Projectile]] integration and buffer sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/consult-recoll][consult-recoll]]: Access the [[https://www.lesbonscomptes.com/recoll/][Recoll]] desktop full-text search using Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/espotify][consult-spotify]]: Access the Spotify API and control your local music player.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-yasnippet][consult-yasnippet]]: Integration with Yasnippet.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/affe][affe]]: Asynchronous Fuzzy Finder for Emacs based on Consult.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not directly related to Consult, but maybe still of interest are the following packages. These packages should work well with Consult, follow a similar spirit or offer functionality based on &lt;del&gt;completing-read&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu][corfu]]: Completion systems for =completion-at-point= using small popups (Alternative to [[https://github.com/company-mode/company-mode][Company]]).&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/cape][cape]]: Completion At Point Extensions, which can be used with =consult-completion-in-region= and [[https://github.com/minad/corfu][Corfu]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/bookmark-view][bookmark-view]]: Store window configuration as bookmarks, possible integration with =consult-buffer=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bdarcus/citar][citar]]: Versatile package for citation insertion and bibliography management.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/astoff/devdocs.el][devdocs]]: Emacs viewer for [[https://devdocs.io/][DevDocs]] with a convenient completion interface.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/d12frosted/flyspell-correct][flyspell-correct]]: Apply spelling corrections by selecting via =completing-read=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]: Editing of grep buffers, use together with =consult-grep= via =embark-export=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]: Icons for the completion UI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that all packages are independent and can be exchanged with alternative components, since there exist no hard dependencies. Furthermore it is possible to get started with only default completion and Consult and add more components later to the mix. For example you can omit Marginalia if you don&#39;t need annotations. I highly recommend the Embark package, but in order to familarize yourself with the other components, you can first start without it - or you could use with Embark right away and add the other components later on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug reports :properties: :description: How to create reproducible bug reports &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you find a bug or suspect that there is a problem with Consult, please carry out the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Update all the relevant packages to the newest version&lt;/em&gt;. This includes Consult, Vertico or other completion UIs, Marginalia, Embark and Orderless.&lt;/li&gt; &#xA; &lt;li&gt;Either use the default completion UI or ensure that exactly one of =vertico-mode=, =mct-mode=, =selectrum-mode=, or =icomplete-mode= is enabled. The unsupported modes =ivy-mode=, =helm-mode= and =ido-ubiquitous-mode= must be disabled.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the =completion-styles= variable is properly configured. Try to set =completion-styles= to a list including =substring= or =orderless=.&lt;/li&gt; &#xA; &lt;li&gt;Try to reproduce the issue by starting a bare bone Emacs instance with =emacs -Q= on the command line. Execute the following minimal code snippets in the scratch buffer. This way we can exclude side effects due to configuration settings. If other packages are relevant to reproduce the issue, include them in the minimal configuration snippet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Minimal setup with Vertico for =emacs -Q=: #+begin_src emacs-lisp (package-initialize) (require &#39;consult) (require &#39;vertico) (vertico-mode) (setq completion-styles &#39;(substring basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Minimal setup with the default completion system for =emacs -Q=: #+begin_src emacs-lisp (package-initialize) (require &#39;consult) (setq completion-styles &#39;(substring basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Please provide the necessary important information with your bug report:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The minimal configuration snippet used to reproduce the issue.&lt;/li&gt; &#xA; &lt;li&gt;Your completion UI (Default completion, Vertico, Mct, Selectrum or Icomplete).&lt;/li&gt; &#xA; &lt;li&gt;A stack trace in case the bug triggers an exception.&lt;/li&gt; &#xA; &lt;li&gt;Your Emacs version, since bugs may be fixed or introduced in newer versions.&lt;/li&gt; &#xA; &lt;li&gt;Your operating system, since Emacs behavior varies between Linux, Mac and Windows.&lt;/li&gt; &#xA; &lt;li&gt;The package manager, e.g., straight.el or package.el, used to install the Emacs packages, in order to exclude update issues. Did you install Consult as part of the Doom or Spacemacs Emacs distributions?&lt;/li&gt; &#xA; &lt;li&gt;Do you use Evil or other packages which apply deep changes? Consult does not provide Evil integration out of the box, but there is some support in [[https://github.com/emacs-evil/evil-collection][evil-collection]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When evaluating Consult-related code snippets you should enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]]. Consult often relies on lambdas and lexical closures.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions :properties: :description: Feature requests and pull requests &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult is a community effort, please participate in the discussions. Contributions are welcome, but you may want to discuss potential contributions first. Since this package is part of [[http://elpa.gnu.org/packages/consult.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;p&gt;If you have a proposal, take a look at the [[https://github.com/consult/issues][Consult issue tracker]] and the [[https://github.com/minad/consult/issues/6][Consult wishlist]]. There have been many prior feature discussions. Please search through the issue tracker, maybe your issue or feature request has already been discussed. You can contribute to the [[https://github.com/minad/consult/wiki][Consult wiki]], in case you want to share small configuration or command snippets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgments :properties: :description: Contributors and Sources of Inspiration &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You probably guessed from the name that this package took inspiration from [[https://github.com/abo-abo/swiper#counsel][Counsel]] by Oleh Krehel. Some of the Consult commands originated in the Counsel package or the [[https://github.com/raxod502/selectrum/wiki/Useful-Commands][Selectrum wiki]]. The commands have been rewritten and greatly enhanced in comparison to the original versions.&lt;/p&gt; &#xA;&lt;p&gt;Code contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/][Omar Antolín Camarena]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/s-kostyaev/][Sergey Kostyaev]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/okamsn/][okamsn]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tomfitzhenry/][Tom Fitzhenry]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jakanakaevangeli][jakanakaevangeli]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://hg.serna.eu][Iñigo Serna]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/aspiers/][Adam Spiers]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/omar-polo][Omar Polo]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/astoff][Augusto Stoffel]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/noctuid][Fox Kiester]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tecosaur][Tecosaur]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohamed-abdelnour][Mohamed Abdelnour]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/thisirs][Sylvain Rousseau]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][J.D. Smith]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advice and useful discussions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/][Omar Antolín Camarena]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://protesilaos.com][Protesilaos Stavrou]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/purcell/][Steve Purcell]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/alphapapa/][Adam Porter]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/manuel-uberti/][Manuel Uberti]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tomfitzhenry/][Tom Fitzhenry]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/hmelman/][Howard Melman]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/monnier/][Stefan Monnier]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/dgutov/][Dmitry Gutov]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat][Itai Y. Efrat]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bdarcus][Bruce d&#39;Arcus]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][J.D. Smith]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler][Enrique Kessler Martínez]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Authors of supplementary =consult-*= packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/][Jose A Ortega Ruiz]] ([[https://codeberg.org/jao/consult-notmuch][consult-notmuch]], [[https://codeberg.org/jao/consult-recoll][consult-recoll]], [[https://codeberg.org/jao/espotify][consult-spotify]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/gagbo/][Gerry Agbobada]] ([[https://github.com/gagbo/consult-lsp][consult-lsp]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink][Karthik Chikmagalur]] ([[https://github.com/karthink/consult-dir][consult-dir]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale][Mohsin Kaleem]] ([[https://github.com/mohkale/consult-company][consult-company]], [[https://github.com/mohkale/consult-eglot][consult-eglot]], [[https://github.com/mohkale/consult-yasnippet][consult-yasnippet]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon][Marco Pawłowski]] ([[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]], [[https://gitlab.com/OlMon/consult-projectile][consult-projectile]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler][Enrique Kessler Martínez]] ([[https://github.com/Qkessler/consult-project-extra][consult-project-extra]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jgru][Jan Gru]] ([[https://github.com/jgru/consult-org-roam][consult-org-roam]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/yadex205][Kanon Kakuno]] ([[https://github.com/yadex205/consult-ag][consult-ag]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rcj][Robin Joy]] ([[https://github.com/rcj/consult-ls-git][consult-ls-git]])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html: &amp;lt;!--&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Indices :properties: :description: Indices of concepts and functions &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Function index :properties: :description: List of all Consult commands :index: fn &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Concept index :properties: :description: List of all Consult-specific concepts :index: cp &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+html: --&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>org-roam/org-roam</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/org-roam/org-roam</id>
    <link href="https://github.com/org-roam/org-roam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rudimentary Roam replica with Org-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Org-roam &lt;a href=&#34;https://github.com/org-roam/org-roam/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/org-roam/org-roam&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/org-roam&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/org-roam-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;img src=&#34;https://www.orgroam.com/img/logo.svg?sanitize=true&#34; align=&#34;right&#34; alt=&#34;Org-roam Logo&#34; width=&#34;240&#34;&gt; &#xA;&lt;p&gt;Org-roam is a plain-text knowledge management system. It brings some of &lt;a href=&#34;https://www.roamresearch.com/&#34;&gt;Roam&#39;s&lt;/a&gt; more powerful features into the &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org-mode&lt;/a&gt; ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Private and Secure&lt;/strong&gt;: Edit your personal wiki completely offline, entirely in your control. Encrypt your notes with GPG. Take lasting notes in plain-text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Networked Thought&lt;/strong&gt;: Connect notes and thoughts together with ease using backlinks. Discover surprising and previously unseen connections in your notes with the built-in graph visualization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible and Powerful&lt;/strong&gt;: Leverage Emacs&#39; fantastic text-editing interface, and the mature Emacs and Org-mode ecosystem of packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and Open Source&lt;/strong&gt;: Org-roam is licensed under the GNU General Public License version 3 or later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://www.orgroam.com/img/screenshot.png&#34; alt=&#34;Org-roam Screenshot&#34; width=&#34;738&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.orgroam.com/manual.html&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.orgroam.com/manual.html#FAQ&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/org-roam/org-roam/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Down below you will find basic installation instructions for how to quickly install &lt;code&gt;org-roam&lt;/code&gt; using various environments for various purposes. For more detailed information, please read the &lt;a href=&#34;https://www.orgroam.com/manual.html&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;You can install &lt;code&gt;org-roam&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt; using &lt;code&gt;package.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;M-x package-install RET org-roam RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;Installation from MELPA or MELPA Stable using &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight t&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you need to install the package directly from the source repository, instead of from MELPA, the next sample shows how to do so:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight (:host github :repo &#34;org-roam/org-roam&#34;&#xA;             :files (:defaults &#34;extensions/*&#34;))&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you plan to use your own local fork for the development and contribution, the next sample will get you there:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight (:local-repo &#34;/path/to/org-roam-fork&#34;&#xA;             :files (:defaults &#34;extensions/*&#34;)&#xA;             :build (:not compile))&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Using Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;Doom&#39;s &lt;code&gt;:lang org&lt;/code&gt; module comes with support for &lt;code&gt;org-roam&lt;/code&gt;, but it&#39;s not enabled by default. To activate it pass &lt;code&gt;+roam2&lt;/code&gt; flag to &lt;code&gt;org&lt;/code&gt; module in your &lt;code&gt;$DOOMDIR/init.el&lt;/code&gt; (e.g. &lt;code&gt;(org +roam2)&lt;/code&gt;), save the file and run &lt;code&gt;doom sync -u&lt;/code&gt; in your shell.&lt;/p&gt; &#xA; &lt;p&gt;To provide better stability, Doom pins the package to a specific commit. If you need to unpin it &lt;em&gt;(not recommended doing that, request Doom to bump the package instead)&lt;/em&gt; use the next in your &lt;code&gt;packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(unpin! org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If for some reasons you want to use a different recipe for &lt;code&gt;org-roam&lt;/code&gt;, you can use the next form in your &lt;code&gt;packages.el&lt;/code&gt; to install the package from a recipe repository (e.g. MELPA):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can pass &lt;code&gt;:pin &#34;commit hash&#34;&lt;/code&gt; to pin the package to a specific commit.&lt;/p&gt; &#xA; &lt;p&gt;With the next sample you can install the package directly from the source repository:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam&#xA;  :recipe (:host github :repo &#34;org-roam/org-roam&#34;&#xA;           :files (:defaults &#34;extensions/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And if you plan to use your own local fork for the development or contribution, the next sample will get you there:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam&#xA;  :recipe (:local-repo &#34;/path/to/org-roam-fork&#34;&#xA;           :files (:defaults &#34;extensions/*&#34;)&#xA;           :build (:not compile)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Without a package manager&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;To install the package without using a package manager you have the next two options:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install the package by cloning it with &lt;code&gt;git&lt;/code&gt; from the source repository.&lt;/li&gt; &#xA;  &lt;li&gt;Or install the package by downloading the latest &lt;a href=&#34;https://github.com/org-roam/org-roam/releases&#34;&gt;release version&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;In both of the cases you will need to ensure that you have all the required dependencies. These include:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;dash&lt;/li&gt; &#xA;  &lt;li&gt;f&lt;/li&gt; &#xA;  &lt;li&gt;s&lt;/li&gt; &#xA;  &lt;li&gt;org (9.4 is the minimal required version!)&lt;/li&gt; &#xA;  &lt;li&gt;emacsql&lt;/li&gt; &#xA;  &lt;li&gt;emacsql-sqlite&lt;/li&gt; &#xA;  &lt;li&gt;magit-section&lt;/li&gt; &#xA;  &lt;li&gt;filenotify-recursive&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;After installing the package, you will need to properly setup &lt;code&gt;load-path&lt;/code&gt; to the package:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/org-roam/&#34;)&#xA;(add-to-list &#39;load-path &#34;/path/to-org-roam/extensions/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After which you should be able to resolve &lt;code&gt;(require &#39;org-roam)&lt;/code&gt; call without any problems.&lt;/p&gt; &#xA; &lt;p&gt;Org-roam also comes with &lt;code&gt;.texi&lt;/code&gt; files to integrate with Emacs&#39; built-in Info system. Read the manual to find more details for how to install them manually.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a very basic sample for configuration of &lt;code&gt;org-roam&lt;/code&gt; using &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :ensure t&#xA;  :custom&#xA;  (org-roam-directory (file-truename &#34;/path/to/org-files/&#34;))&#xA;  :bind ((&#34;C-c n l&#34; . org-roam-buffer-toggle)&#xA;         (&#34;C-c n f&#34; . org-roam-node-find)&#xA;         (&#34;C-c n g&#34; . org-roam-graph)&#xA;         (&#34;C-c n i&#34; . org-roam-node-insert)&#xA;         (&#34;C-c n c&#34; . org-roam-capture)&#xA;         ;; Dailies&#xA;         (&#34;C-c n j&#34; . org-roam-dailies-capture-today))&#xA;  :config&#xA;  ;; If you&#39;re using a vertical completion framework, you might want a more informative completion interface&#xA;  (setq org-roam-node-display-template (concat &#34;${title:*} &#34; (propertize &#34;${tags:10}&#34; &#39;face &#39;org-tag)))&#xA;  (org-roam-db-autosync-mode)&#xA;  ;; If using org-roam-protocol&#xA;  (require &#39;org-roam-protocol))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;file-truename&lt;/code&gt; function is only necessary when you use symbolic link to &lt;code&gt;org-roam-directory&lt;/code&gt;. Org-roam won&#39;t automatically resolve symbolic link to the directory.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/daviwil&#34;&gt;David Wilson&lt;/a&gt; of &lt;a href=&#34;https://www.youtube.com/c/SystemCrafters&#34;&gt;System Crafters&lt;/a&gt; has produced an introductory video that covers the basic commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=AyhPmypHDEw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/AyhPmypHDEw/0.jpg&#34; alt=&#34;Getting Started with Org Roam - Build a Second Brain in Emacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;Before creating a new topic/issue, please be mindful of our time and ensure that it has not already been addressed on &lt;a href=&#34;https://github.com/org-roam/org-roam/issues&#34;&gt;GitHub&lt;/a&gt; or on &lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are new to Emacs and have problem setting up Org-roam, please ask your question on &lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack, channel #how-do-i&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For quick questions, please ask them on &lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack, channel #troubleshooting&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If something is not working as it should, or if you would like to suggest a new feature, please &lt;a href=&#34;https://github.com/org-roam/org-roam/issues&#34;&gt;create a new issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you have questions about your workflow with the slip-box method, please find a relevant topic on &lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;, or create a new one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Knowledge Bases using Org-roam&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://braindump.jethro.dev/&#34;&gt;Jethro Kuan&lt;/a&gt; (&lt;a href=&#34;https://github.com/jethrokuan/braindump/tree/master/org&#34;&gt;Source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alexeyshmalko.com/&#34;&gt;Alexey Shmalko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sidhartharya.github.io/braindump/index.html&#34;&gt;Sidharth Arya&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs and suggest new feature use the issue tracker. If you have some code which you would like to be merged, then open a pull request. Please also see &lt;a href=&#34;https://raw.githubusercontent.com/org-roam/org-roam/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Jethro Kuan and contributors. Distributed under the GNU General Public License, Version 3.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-evil/evil-collection</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/emacs-evil/evil-collection</id>
    <link href="https://github.com/emacs-evil/evil-collection" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A set of keybindings for evil-mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Evil Collection #+STARTUP: noindent&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/emacs-evil/evil-collection/actions][file:https://github.com/emacs-evil/evil-collection/workflows/build/badge.svg?branch=master]] [[https://melpa.org/#/evil-collection][file:https://melpa.org/packages/evil-collection-badge.svg]] [[https://stable.melpa.org/#/evil-collection][file:https://stable.melpa.org/packages/evil-collection-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This is a collection of [[https://github.com/emacs-evil/evil][Evil]] bindings for /the parts of Emacs/ that Evil does not cover properly by default, such as &lt;del&gt;help-mode&lt;/del&gt;, &lt;del&gt;M-x calendar&lt;/del&gt;, Eshell and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Warning:&lt;/em&gt; Expect some default bindings to change in the future.&lt;/p&gt; &#xA;&lt;p&gt;** Preliminaries&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;del&gt;evil-overriding-maps&lt;/del&gt; is assumed as &lt;del&gt;nil&lt;/del&gt; to reduce redundant &lt;del&gt;w/W/l/f/t&lt;/del&gt; etc evil bindings. See [[https://github.com/emacs-evil/evil-collection/pull/501][Fixup Info-mode]] for example.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Goals&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Reduce context switching: As soon as &#34;moving around&#34; gets hardwired to &lt;del&gt;&#xA;    &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;, it becomes frustratingly inefficient not to have it everywhere.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Community work: setting up bindings is tremendous work and joining force can only save hours for all of Evil users out there. While not everyone may agree on the chosen bindings, it helps to have something to start with rather than nothing at all. In the end, users are free to override a subset of the proposed bindings to best fit their needs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Consistency: Having all bindings defined in one place allows for enforcing consistency across special modes and coordinating the community work to define a reference implementation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Get the package, either from MELPA:&lt;/p&gt; &lt;p&gt;: M-x package-install RET evil-collection RET&lt;/p&gt; &lt;p&gt;Or clone / download this repository and modify your &lt;del&gt;load-path&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (add-to-list &#39;load-path (expand-file-name &#34;/path/to/evil-collection/&#34; user-emacs-directory))&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Register the bindings, either all at once with&lt;/p&gt; &lt;p&gt;: (evil-collection-init)&lt;/p&gt; &lt;p&gt;or mode-by-mode, for instance:&lt;/p&gt; &lt;p&gt;: (with-eval-after-load &#39;calendar (evil-collection-calendar-setup))&lt;/p&gt; &lt;p&gt;or by providing an argument to &lt;del&gt;evil-collection-init&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (evil-collection-init &#39;calendar)&lt;/p&gt; &lt;p&gt;a list can also be provided to &lt;del&gt;evil-collection-init&lt;/del&gt;:&lt;/p&gt; &lt;p&gt;: (evil-collection-init &#39;(calendar dired calc ediff))&lt;/p&gt; &lt;p&gt;The list of supported modes is configured by &lt;del&gt;evil-collection-mode-list&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection&lt;/del&gt; assumes &lt;del&gt;evil-want-keybinding&lt;/del&gt; is set to &lt;del&gt;nil&lt;/del&gt; and &lt;del&gt;evil-want-integration&lt;/del&gt; is set to &lt;del&gt;t&lt;/del&gt; before loading &lt;del&gt;evil&lt;/del&gt; and &lt;del&gt;evil-collection&lt;/del&gt;. Note some other packages may load evil (e.g. evil-leader) so bear that in mind when determining when to set the variables.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/emacs-evil/evil-collection/issues/60&#34;&gt;https://github.com/emacs-evil/evil-collection/issues/60&lt;/a&gt; and &lt;a href=&#34;https://github.com/emacs-evil/evil/pull/1087&#34;&gt;https://github.com/emacs-evil/evil/pull/1087&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (setq evil-want-integration t) ;; This is optional since it&#39;s already set to t by default. (setq evil-want-keybinding nil) (require &#39;evil) (when (require &#39;evil-collection nil t) (evil-collection-init)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s another full TLDR &lt;del&gt;use-package&lt;/del&gt; example.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package evil :ensure t :init (setq evil-want-integration t) ;; This is optional since it&#39;s already set to t by default. (setq evil-want-keybinding nil) :config (evil-mode 1))&lt;/p&gt; &#xA;&lt;p&gt;(use-package evil-collection :after evil :ensure t :config (evil-collection-init)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If you don&#39;t like surprises but still want to use &lt;del&gt;evil-collection-init&lt;/del&gt;, setting &lt;del&gt;evil-collection-mode-list&lt;/del&gt; to nil and adding each mode manually might be a better option.&lt;/p&gt; &#xA;&lt;p&gt;** Configuration&lt;/p&gt; &#xA;&lt;p&gt;Modify &lt;del&gt;evil-collection-mode-list&lt;/del&gt; to disable or add any modes that should be evilified by &lt;del&gt;evil-collection&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;| Variable | Default | Description | |--------------------------------------------+---------+-------------------------------------------------------------------| | evil-collection-calendar-want-org-bindings | nil | Set up Org functions in calendar keymap. | | evil-collection-outline-bind-tab-p | nil | Enable &#xA; &lt;tab&gt;&#xA;  -based bindings in Outline mode. | | evil-collection-term-sync-state-and-mode-p | t | Synchronize insert/normal state with char/line-mode in term-mode. | | evil-collection-setup-minibuffer | nil | Set up Vim style bindings in the minibuffer. | | evil-collection-setup-debugger-keys | t | Set up debugger keys for certain modes. | | evil-collection-want-unimpaired-p | t | Set up unimpaired bindings globally. | | evil-collection-want-find-usages-bindings | t | Bind -find references-, etc to various modes. |&#xA; &lt;/tab&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to enable Evil in the minibuffer, you&#39;ll have to turn it on explicitly by customizing &lt;del&gt;evil-collection-setup-minibuffer&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;. Some minibuffer-related packages such as Helm rely on this option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;use-package&lt;/del&gt; example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package evil-collection :custom (evil-collection-setup-minibuffer t) :init (evil-collection-init)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Guidelines&lt;/p&gt; &#xA;&lt;p&gt;The following rules serve as guiding principles to define the set of standard Evil bindings for various modes. Since special modes are by definition structurally incomparable, those rules cannot be expected to be applied universally.&lt;/p&gt; &#xA;&lt;p&gt;The rules are more-or-less sorted by priority.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t bind anything to &lt;del&gt;:&lt;/del&gt; nor &lt;del&gt;&#xA;    &lt;escape&gt;&lt;/escape&gt;&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the movement keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;h&lt;/del&gt;, &lt;del&gt;j&lt;/del&gt;, &lt;del&gt;k&lt;/del&gt;, &lt;del&gt;l&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;w&lt;/del&gt;, &lt;del&gt;W&lt;/del&gt;, &lt;del&gt;b&lt;/del&gt;, &lt;del&gt;B&lt;/del&gt;, &lt;del&gt;e&lt;/del&gt;, &lt;del&gt;E&lt;/del&gt;, &lt;del&gt;ge&lt;/del&gt;, &lt;del&gt;gE&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;f&lt;/del&gt;, &lt;del&gt;F&lt;/del&gt;, &lt;del&gt;t&lt;/del&gt;, &lt;del&gt;T&lt;/del&gt;, &lt;del&gt;;&lt;/del&gt;, =,=&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;gg&lt;/del&gt;, &lt;del&gt;G&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;|&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;%&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;+&lt;/del&gt;, &lt;del&gt;-&lt;/del&gt;, &lt;del&gt;0&lt;/del&gt;, &lt;del&gt;^&lt;/del&gt;, &lt;del&gt;$&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-i&lt;/del&gt;, &lt;del&gt;C-o&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the yanking and register keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;y&lt;/del&gt;, &lt;del&gt;Y&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;=&#34;=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the search keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;/&lt;/del&gt;, &lt;del&gt;?&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;#&lt;/del&gt;, &lt;del&gt;*&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the mark keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;m&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;=&#39;=, =~=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep the windowing keys when possible and sensible.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;H&lt;/del&gt;, &lt;del&gt;L&lt;/del&gt;, &lt;del&gt;M&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-e&lt;/del&gt;, &lt;del&gt;C-y&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-f&lt;/del&gt;, &lt;del&gt;C-b&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-d&lt;/del&gt;, &lt;del&gt;C-u&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;C-w&lt;/del&gt;-prefixed bindings.&lt;/li&gt; &#xA;   &lt;li&gt;Some &lt;del&gt;z&lt;/del&gt;-prefixed bindings (see below).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The following keys are free when insert state does not make sense in the current mode:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;a&lt;/del&gt;, &lt;del&gt;A&lt;/del&gt;, &lt;del&gt;i&lt;/del&gt;, &lt;del&gt;I&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;c&lt;/del&gt;, &lt;del&gt;C&lt;/del&gt;, &lt;del&gt;r&lt;/del&gt;, &lt;del&gt;R&lt;/del&gt;, &lt;del&gt;s&lt;/del&gt;, &lt;del&gt;S&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;d&lt;/del&gt;, &lt;del&gt;D&lt;/del&gt;, &lt;del&gt;x&lt;/del&gt;, &lt;del&gt;X&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;o&lt;/del&gt;, &lt;del&gt;O&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;p&lt;/del&gt;, &lt;del&gt;P&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;=&lt;/del&gt;, &lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;J&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;=~=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Any of those keys can be set to be a prefix key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prefix keys: &lt;del&gt;g&lt;/del&gt; and &lt;del&gt;z&lt;/del&gt; are the ubiquitous prefix keys.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;g&lt;/del&gt; generally stands for &#34;go&#34; and is best used for movements.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;z&lt;/del&gt; is used for scrolling, folding, spell-checking and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Macro and action keys&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;@&lt;/del&gt;, &lt;del&gt;q&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;.&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure terminal compatibility without sacrificing GUI key bindings.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tab key &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Tab key is recognized as &lt;del&gt;&#xA;       &lt;tab&gt;&lt;/tab&gt;&lt;/del&gt; in GUI and &lt;del&gt;TAB&lt;/del&gt; in terminal. &lt;del&gt;TAB&lt;/del&gt; equals &lt;del&gt;C-i&lt;/del&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;C-i&lt;/del&gt; is bound to jumping forward for vim compatibility. If Shift+Tab is not relevant, just bind &lt;del&gt;g TAB&lt;/del&gt; to the function that Tab is bound to. If Shift+Tab is relevant, bind &lt;del&gt;g]&lt;/del&gt; and &lt;del&gt;g TAB&lt;/del&gt; to the function that Tab is bound to, and bind &lt;del&gt;g[&lt;/del&gt; to the function that Shift+Tab is bound to for terminal compatibility.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Enter key &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Enter key is recognized as &lt;del&gt;&#xA;       &lt;return&gt;&lt;/return&gt;&lt;/del&gt; in GUI and &lt;del&gt;RET&lt;/del&gt; in terminal. &lt;del&gt;RET&lt;/del&gt; equals &lt;del&gt;Ctrl+m&lt;/del&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Bind only &lt;del&gt;RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt;. Or, bind &lt;del&gt;RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; to the same functions &lt;del&gt;&#xA;       &lt;return&gt;&lt;/return&gt;&lt;/del&gt; and &lt;del&gt;&#xA;       &lt;m-return&gt;&lt;/m-return&gt;&lt;/del&gt; are bound to.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;del&gt;S-RET&lt;/del&gt; is impossible on terminal. Bind &lt;del&gt;&#xA;       &lt;s-return&gt;&lt;/s-return&gt;&lt;/del&gt; and a vacant key to the same function for terminal compatibility.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Rationale&lt;/p&gt; &#xA;&lt;p&gt;Many special modes share the same set of similar actions. Those actions should share the same bindings across all modes whenever feasible.&lt;/p&gt; &#xA;&lt;p&gt;*** Motion (&lt;del&gt;[&lt;/del&gt;, &lt;del&gt;]&lt;/del&gt;, &lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;, &lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;, &lt;del&gt;gj&lt;/del&gt;, &lt;del&gt;gk&lt;/del&gt;, &lt;del&gt;C-j&lt;/del&gt;, &lt;del&gt;C-k&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;: Use &lt;del&gt;[-&lt;/del&gt; and &lt;del&gt;]-&lt;/del&gt; prefixed keys for navigation between sections.&lt;/p&gt; &lt;p&gt;If the mode makes no difference between the end of a section and the beginning of the next, use &lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gj&lt;/del&gt; and &lt;del&gt;gk&lt;/del&gt;: synonym for &lt;del&gt;[&lt;/del&gt; and &lt;del&gt;]&lt;/del&gt;. That&#39;s what [[evilmagit][evil-magit]] does.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Question:&lt;/em&gt; Should &lt;del&gt;gj&lt;/del&gt; / &lt;del&gt;gk&lt;/del&gt; rather be synonyms for &lt;del&gt;C-j&lt;/del&gt; / &lt;del&gt;C-k&lt;/del&gt;? They cannot emulate the behaviour of &lt;del&gt;[]&lt;/del&gt; or &lt;del&gt;][&lt;/del&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-j&lt;/del&gt;, &lt;del&gt;C-k&lt;/del&gt;: If there is granularity, i.e. subsections, use &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; to browse them. This reflects [[evilmagit][evil-magit]] and [[evilmu4e][evil-mu4e]] default bindings.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;{&lt;/del&gt;, &lt;del&gt;}&lt;/del&gt;: If there is no paragraph structure, &lt;del&gt;{&lt;/del&gt; and &lt;del&gt;}&lt;/del&gt; can be used for sub-sectioning.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;(&lt;/del&gt;, &lt;del&gt;)&lt;/del&gt;: If there is no sentence structure, &lt;del&gt;(&lt;/del&gt; and &lt;del&gt;)&lt;/del&gt; can be used for sub-sectioning.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;HJKL&lt;/del&gt;: &lt;del&gt;hjkl&lt;/del&gt; can be used for atomic movements, but &lt;del&gt;HJKL&lt;/del&gt; can usually not be used because &lt;del&gt;H&lt;/del&gt;, &lt;del&gt;K&lt;/del&gt; and &lt;del&gt;L&lt;/del&gt; are all universal (&lt;del&gt;J&lt;/del&gt; is &lt;del&gt;evil-join&lt;/del&gt; and usually does not make sense in special modes).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-h&lt;/del&gt; should not be remapped: Since we have &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; for vertical motion, it would make sense to use &lt;del&gt;C-h&lt;/del&gt; and &lt;del&gt;C-l&lt;/del&gt; for horizontal motion. There are some shortcomings though:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;In Vim, &lt;del&gt;C-h&lt;/del&gt; works as backspace, but Evil does not follow that behaviour.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;In Emacs, it is a prefix key for all help-related commands, and so is &lt;del&gt;&#xA;        &lt;f1&gt;&lt;/f1&gt;&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Most importantly, &lt;del&gt;C-h&lt;/del&gt; is too widespread and ubiquitous to be replaced. So we don&#39;t.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;C-l&lt;/del&gt;: As a consequence of the former point, &lt;del&gt;C-l&lt;/del&gt; is available.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;M-&#xA;      &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;: Those keys are usually free in Evil but still bound to their Emacs default (e.g. &lt;del&gt;M-l&lt;/del&gt; is &lt;del&gt;downcase-word&lt;/del&gt;). Besides, if &lt;del&gt;C-j&lt;/del&gt; and &lt;del&gt;C-k&lt;/del&gt; are already used, having &lt;del&gt;M-j&lt;/del&gt; and &lt;del&gt;M-k&lt;/del&gt; might add up to the confusion.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Quitting (&lt;del&gt;q&lt;/del&gt;, &lt;del&gt;ZQ&lt;/del&gt;, &lt;del&gt;ZZ&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;In Vim, &lt;del&gt;q&lt;/del&gt; is for recording macros. Vim quits with &lt;del&gt;ZZ&lt;/del&gt; or &lt;del&gt;ZQ&lt;/del&gt;. In most Emacs special modes, it stands for quitting while macros are recorded/played with &lt;del&gt;&#xA;  &lt;f3&gt;&lt;/f3&gt;&lt;/del&gt; and &lt;del&gt;&#xA;  &lt;f4&gt;&lt;/f4&gt;&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A good rule of thumb would be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Always bind &lt;del&gt;q&lt;/del&gt;, &lt;del&gt;ZZ&lt;/del&gt; and &lt;del&gt;ZQ&lt;/del&gt; to the mode specific quitting functions. If there is none,&lt;/li&gt; &#xA; &lt;li&gt;Bind &lt;del&gt;q&lt;/del&gt; and &lt;del&gt;ZZ&lt;/del&gt; to &lt;del&gt;quit-window&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bind &lt;del&gt;ZQ&lt;/del&gt; to &lt;del&gt;evil-quit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;If macros don&#39;t make sense in current mode, then &lt;del&gt;@&lt;/del&gt; is available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Refreshing / Reverting (&lt;del&gt;gr&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gr&lt;/del&gt; is used for refreshing in [[evilmagit][evil-magit]], [[evilmu4e][evil-mu4e]], and some Spacemacs configurations (org-agenda and neotree among others).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;C-l&lt;/del&gt; is traditionally used to refresh the terminal screen. Since there does not seem to be any existing use of it, we leave the binding free for other uses.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Marking&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;m&lt;/del&gt; defaults to &lt;del&gt;evil-set-marker&lt;/del&gt; which might not be very useful in special modes. =&#39;= can still be used as it can jump to other buffers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;m&lt;/del&gt;: Mark or toggle mark, depending on what the mode offers. In visual mode, always mark. With a numeric argument, toggle mark on that many following lines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;u&lt;/del&gt;: Unmark current selection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;U&lt;/del&gt;: Unmark all.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=&lt;del&gt;=: Toggle all marks. This mirrors the &#34;invert-char&#34; Vim command bound to =&lt;/del&gt;= by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;M&lt;/del&gt;: Mark all, if available. Otherwise use =U~=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;*&lt;/del&gt;: Mark-prefix or mark all if current mode has no prefix. &lt;del&gt;*&lt;/del&gt; is traditionally a wildcard.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;%&lt;/del&gt;: Mark regexp.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;x&lt;/del&gt;: Execute action on marks. This mirrors Dired&#39;s binding of &lt;del&gt;x&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If &lt;del&gt;*&lt;/del&gt; is used for marking, then &lt;del&gt;#&lt;/del&gt; is free.&lt;/p&gt; &#xA;&lt;p&gt;Also note that Emacs inconsistently uses &lt;del&gt;u&lt;/del&gt; and &lt;del&gt;U&lt;/del&gt; to unmark.&lt;/p&gt; &#xA;&lt;p&gt;*** Selecting / Filtering / Narrowing / Searching&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;s&lt;/del&gt; and &lt;del&gt;S&lt;/del&gt; seem to be used in some places like [[mu4e][mu4e]].&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;s&lt;/del&gt;: [s]elect/[s]earch/filter candidates according to a pattern.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;S&lt;/del&gt;: Remove filter and select all.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;=&lt;/del&gt; is usually free and its significance is obvious. It&#39;s taken for zooming though.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;|&lt;/del&gt; is not free but the pipe symbolic is very tantalizing.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Sorting&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;o&lt;/del&gt;: Change the sort [o]rder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;O&lt;/del&gt;: Sort in reverse order.&lt;/p&gt; &lt;p&gt;There is no real consensus around which key to bind to sorting. What others do by default:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;package-menu&lt;/del&gt; uses &lt;del&gt;S&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;M-x proced&lt;/del&gt; and Dired use &lt;del&gt;s&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;del&gt;profiler&lt;/del&gt; uses &lt;del&gt;A&lt;/del&gt; and &lt;del&gt;D&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[[mu4e][mu4e]] uses &lt;del&gt;O&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[[http://www.nongnu.org/ranger/][ranger]] uses &lt;del&gt;o&lt;/del&gt;, inspired from [[http://mutt.org][Mutt]].&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Go to definition (&lt;del&gt;gd&lt;/del&gt;, &lt;del&gt;gD&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;gd&lt;/del&gt;: [g]o to [d]efinition. This is mostly for programming modes. If there&#39;s a corresponding &#39;pop&#39; action, use &lt;del&gt;C-t&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Go to references, etc (&lt;del&gt;gr&lt;/del&gt;, &lt;del&gt;gA&lt;/del&gt;) When &lt;del&gt;evil-collection-want-find-usages-bindings&lt;/del&gt; is set to t:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gr&lt;/del&gt;: [g] to [r]eferences. This binding is also used for refresh/reverting modes in non programming modes but is usually empty for programming modes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;gA&lt;/del&gt;: [g]o to [A]ssignments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Additional bindings: There may be additional binds under this category. Please file a Pull Request if so.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Go to current entity&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;.&lt;/del&gt;: go to current entity (day for calendar, playing track for [[EMMS][EMMS]]). Bind only if more relevant than &lt;del&gt;evil-repeat&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Open thing at point (&lt;del&gt;RET&lt;/del&gt;, &lt;del&gt;S-RET&lt;/del&gt;, &lt;del&gt;M-RET&lt;/del&gt;, &lt;del&gt;go&lt;/del&gt;, &lt;del&gt;gO&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;RET&lt;/del&gt;, &lt;del&gt;S-RET&lt;/del&gt;, &lt;del&gt;M-RET&lt;/del&gt;: Open thing at point in current window, open in other window and display in other window respectively. The latter is like the former with the focus remaining on the current window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;go&lt;/del&gt;, &lt;del&gt;gO&lt;/del&gt;: When available, same as &lt;del&gt;S-RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; respectively. This is useful in terminals where &lt;del&gt;S-RET&lt;/del&gt; and &lt;del&gt;M-RET&lt;/del&gt; might not work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Emacs-style jumping (&lt;del&gt;J&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;J&lt;/del&gt;: [[mu4e][mu4e]] has &lt;del&gt;j&lt;/del&gt; and [[evil-mu4e][evil-mu4e]] uses &lt;del&gt;J&lt;/del&gt;, so we use &lt;del&gt;J&lt;/del&gt; too.&lt;/p&gt; &lt;p&gt;Some special modes like [[mu4e][mu4e]] and ibuffer offer to &#34;jump&#34; to a different buffer. This sometimes depends on the thing at point.&lt;/p&gt; &lt;p&gt;This is not related to Evil jumps like &lt;del&gt;C-i&lt;/del&gt; and &lt;del&gt;C-o&lt;/del&gt;, nor to &#34;go to definition&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Browse URL (&lt;del&gt;gx&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;gx&lt;/del&gt;: go to URL. This is a default Vim binding.&lt;/p&gt; &#xA;&lt;p&gt;*** Help (&lt;del&gt;?&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;g?&lt;/del&gt; : is the standard key for help related commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;?&lt;/del&gt; in places where backward search is not very useful.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** History browsing (&lt;del&gt;C-n&lt;/del&gt;, &lt;del&gt;C-p&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;C-n&lt;/del&gt; and &lt;del&gt;C-p&lt;/del&gt; are standard bindings to browse the history elements.&lt;/p&gt; &#xA;&lt;p&gt;*** Bookmarking&lt;/p&gt; &#xA;&lt;p&gt;?&lt;/p&gt; &#xA;&lt;p&gt;*** REPL (&lt;del&gt;gz&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;If the mode has a Go To REPL-type command, set it to &lt;del&gt;gz&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Zooming (&lt;del&gt;+&lt;/del&gt;, &lt;del&gt;-&lt;/del&gt;, &lt;del&gt;=&lt;/del&gt;, &lt;del&gt;0&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; have obvious meanings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;0&lt;/del&gt; has a somewhat intuitive meaning, plus it is next to &lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; on QWERTY.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;=&lt;/del&gt; is useful as a synonym for &lt;del&gt;+&lt;/del&gt; because it is the unshifted key of &lt;del&gt;+&lt;/del&gt; on QWERTY.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Debugging&lt;/p&gt; &#xA;&lt;p&gt;When debugging is on, debugger keys takes the most precedence.&lt;/p&gt; &#xA;&lt;p&gt;These keys will be set when there&#39;s an available command for them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;n&lt;/del&gt; : Step Over&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;i&lt;/del&gt; : Step Into&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;o&lt;/del&gt; : Step Out&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;c&lt;/del&gt; : Continue/Resume Execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;L&lt;/del&gt; : Locals&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;t&lt;/del&gt; : Tracing&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;q&lt;/del&gt; : Quit Debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;H&lt;/del&gt; : Continue until Point&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;e&lt;/del&gt; : Evaluate Expression&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;b&lt;/del&gt; : Set Breakpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;u&lt;/del&gt; : Unset Breakpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&amp;gt;&lt;/del&gt; : Navigate to Next Frame&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&amp;lt;&lt;/del&gt; : Navigate to Previous Frame&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;g?&lt;/del&gt; : Help&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;J&lt;/del&gt; : Jump to debugger location&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;R&lt;/del&gt; : Restart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For debugging outside of debugger being on (e.g. setting initial breakpoints), we use similar keys to [[https://github.com/realgud/realgud][realgud]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;f5&lt;/del&gt; Start/Continue/Resume Execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;S-f5&lt;/del&gt; Continue Execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Mouse-1&lt;/del&gt; Toggle Breakpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;f9&lt;/del&gt; Toggle Breakpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;f10&lt;/del&gt; Step Over&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;f11&lt;/del&gt; Step Into&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;S-f11&lt;/del&gt; Step Out&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Editable Buffers&lt;/p&gt; &#xA;&lt;p&gt;For buffers where insert-state doesn&#39;t make sense but buffer can be edited, (e.g. wdired or wgrep), pressing &lt;del&gt;i&lt;/del&gt; will change into editable state.&lt;/p&gt; &#xA;&lt;p&gt;When this editable state is turned on,&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;ZQ&lt;/del&gt; will abort and clear any changes. &lt;del&gt;ZZ&lt;/del&gt; will finish and save any changes. &lt;del&gt;ESC&lt;/del&gt; will exit editable state.&lt;/p&gt; &#xA;&lt;p&gt;*** :q/:wq/etc&lt;/p&gt; &#xA;&lt;p&gt;Modes with commands that can be bound to :q/:wq/etc will have those keys remapped.&lt;/p&gt; &#xA;&lt;p&gt;** Key Translation&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection-translate-key&lt;/del&gt; allows binding a key to the definition of another key in the same keymap (comparable to how Vim&#39;s keybindings work). Its arguments are the &lt;del&gt;states&lt;/del&gt; and &lt;del&gt;keymaps&lt;/del&gt; to bind/look up the key(s) in followed optionally by keyword arguments (currently only &lt;del&gt;:destructive&lt;/del&gt;) and key/replacement pairs. &lt;del&gt;states&lt;/del&gt; should be nil for non-evil keymaps, and both &lt;del&gt;states&lt;/del&gt; and &lt;del&gt;keymaps&lt;/del&gt; can be a single symbol or a list of symbols.&lt;/p&gt; &#xA;&lt;p&gt;This function can be useful for making key swaps/cycles en masse. For example, someone who uses an alternate keyboard layout may want to retain the &lt;del&gt;hjkl&lt;/del&gt; positions for directional movement in dired, the calendar, etc.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example for Colemak of making swaps in a single keymap:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (evil-collection-translate-key nil &#39;evil-motion-state-map ;; colemak hnei is qwerty hjkl &#34;n&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;i&#34; &#34;l&#34; ;; add back nei &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;n&#34; &#34;l&#34; &#34;i&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of using &lt;del&gt;evil-collection-setup-hook&lt;/del&gt; to cycle the keys for all modes in &lt;del&gt;evil-collection-mode-list&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-hjkl-rotation (_mode mode-keymaps &amp;amp;rest _rest) (evil-collection-translate-key &#39;normal mode-keymaps &#34;n&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;i&#34; &#34;l&#34; &#34;j&#34; &#34;e&#34; &#34;k&#34; &#34;n&#34; &#34;l&#34; &#34;i&#34;))&lt;/p&gt; &#xA;&lt;p&gt;;; called after evil-collection makes its keybindings (add-hook &#39;evil-collection-setup-hook #&#39;my-hjkl-rotation)&lt;/p&gt; &#xA;&lt;p&gt;(evil-collection-init) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;A more common use case of &lt;del&gt;evil-collection-translate-key&lt;/del&gt; would be for keeping the functionality of some keys that users may bind globally. For example, &lt;del&gt;SPC&lt;/del&gt;, &lt;del&gt;[&lt;/del&gt;, and &lt;del&gt;]&lt;/del&gt; are bound in some modes. If you use these keys as global prefix keys that you never want to be overridden, you&#39;ll want to give them higher priority than other evil keybindings (e.g. those made by &lt;del&gt;(evil-define-key &#39;normal some-map ...)&lt;/del&gt;). To do this, you can create an &#34;intercept&#34; map and bind your prefix keys in it instead of in &lt;del&gt;evil-normal-state-map&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar my-intercept-mode-map (make-sparse-keymap) &#34;High precedence keymap.&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(define-minor-mode my-intercept-mode &#34;Global minor mode for higher precedence evil keybindings.&#34; :global t)&lt;/p&gt; &#xA;&lt;p&gt;(my-intercept-mode)&lt;/p&gt; &#xA;&lt;p&gt;(dolist (state &#39;(normal visual insert)) (evil-make-intercept-map ;; NOTE: This requires an evil version from 2018-03-20 or later (evil-get-auxiliary-keymap my-intercept-mode-map state t t) state))&lt;/p&gt; &#xA;&lt;p&gt;(evil-define-key &#39;normal my-intercept-mode-map (kbd &#34;SPC f&#34;) &#39;find-file) ;; ... #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can then define replacement keys:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-prefix-translations (_mode mode-keymaps &amp;amp;rest _rest) (evil-collection-translate-key &#39;normal mode-keymaps &#34;C-SPC&#34; &#34;SPC&#34; ;; these need to be unbound first; this needs to be in same statement &#34;[&#34; nil &#34;]&#34; nil &#34;[[&#34; &#34;[&#34; &#34;]]&#34; &#34;]&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;evil-collection-setup-hook #&#39;my-prefix-translations)&lt;/p&gt; &#xA;&lt;p&gt;(evil-collection-init) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;By default, the first invocation of &lt;del&gt;evil-collection-translate-key&lt;/del&gt; will make a backup of the keymap. Each subsequent invocation will look up keys in the backup instead of the original. This means that a call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt; will always have the same behavior even if evaluated multiple times. When &lt;del&gt;:destructive t&lt;/del&gt; is specified, keys are looked up in the keymap as it is currently. This means that a call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt; that swapped two keys would continue to swap/unswap them with each call. Therefore when &lt;del&gt;:destructive t&lt;/del&gt; is used, all cycles/swaps must be done within a single call to &lt;del&gt;evil-collection-translate-key&lt;/del&gt;. To make a comparison to Vim keybindings, &lt;del&gt;:destructive t&lt;/del&gt; is comparable to Vim&#39;s &lt;del&gt;map&lt;/del&gt;, and &lt;del&gt;:destructive nil&lt;/del&gt; is comparable to Vim&#39;s &lt;del&gt;noremap&lt;/del&gt; (where the &#34;original&#34; keybindings are those that existed in the keymap when &lt;del&gt;evil-collection-translate-key&lt;/del&gt; was first called). You&#39;ll almost always want to use the default behavior (especially in your init file). The limitation of &lt;del&gt;:destructive nil&lt;/del&gt; is that you can&#39;t translate a key to another key that was defined after the first &lt;del&gt;evil-collection-translate-key&lt;/del&gt;, so &lt;del&gt;:destructive t&lt;/del&gt; may be useful for interactive experimentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection-swap-key&lt;/del&gt; is also provided as a wrapper around &lt;del&gt;evil-collection-translate-key&lt;/del&gt; that allows swapping keys:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (evil-collection-swap-key nil &#39;evil-motion-state-map &#34;;&#34; &#34;:&#34;) ;; is equivalent to (evil-collection-translate-key nil &#39;evil-motion-state-map &#34;;&#34; &#34;:&#34; &#34;:&#34; &#34;;&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In some cases, keys are bound through &lt;code&gt;evil-define-minor-mode-key&lt;/code&gt; and may need to be translated using &lt;del&gt;evil-collection-translate-minor-mode-key&lt;/del&gt; and/or &lt;del&gt;evil-collection-swap-minor-mode-key&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (evil-collection-swap-minor-mode-key &#39;(normal motion) &#39;(evil-snipe-local-mode evil-snipe-override-local-mode) &#34;k&#34; &#34;s&#34; ;; Set this to t to make this swap the keys everytime ;; this expression is evaluated. :destructive nil)&lt;/p&gt; &#xA;&lt;p&gt;(evil-collection-translate-minor-mode-key &#39;(normal motion) &#39;(evil-snipe-local-mode evil-snipe-override-local-mode) &#34;k&#34; &#34;s&#34; &#34;s&#34; &#34;k&#34; ;; Set this to t to make this swap the keys everytime ;; this expression is evaluated. :destructive nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Third-party packages&lt;/p&gt; &#xA;&lt;p&gt;Third-party packages are provided by several parties:&lt;/p&gt; &#xA;&lt;p&gt;| Major mode | Evil bindings | |------------+--------------------------| | ledger | [[https://github.com/atheriel/evil-ledger][evil-ledger]] | | lispy | [[https://github.com/noctuid/lispyville][lispyville]] or [[https://github.com/sp3ctum/evil-lispy][evil-lispy]] | | org | [[https://github.com/GuiltyDolphin/org-evil][org-evil]] or [[https://github.com/Somelauw/evil-org-mode][evil-org]] | | markdown | [[https://github.com/Somelauw/evil-markdown][evil-markdown]] |&lt;/p&gt; &#xA;&lt;p&gt;Also &lt;del&gt;evil-collection&lt;/del&gt; has minimal support (&lt;del&gt;TAB&lt;/del&gt;, &lt;del&gt;S-TAB&lt;/del&gt; and sentence/paragraph forwarding) for &lt;del&gt;markdown&lt;/del&gt; and &lt;del&gt;org&lt;/del&gt; if you prefer less packages installed.&lt;/p&gt; &#xA;&lt;p&gt;Should you know any suitable package not mentioned in this list, let us know and file an issue.&lt;/p&gt; &#xA;&lt;p&gt;Other references:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/syl20bnr/spacemacs/blob/master/doc/CONVENTIONS.org#key-bindings-conventions][Spacemacs]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/evil][Doom Emacs]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** FAQ&lt;/p&gt; &#xA;&lt;p&gt;*** Making SPC work similarly to [[https://github.com/syl20bnr/spacemacs][spacemacs]].&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;evil-collection&lt;/del&gt; binds over SPC in many packages. To use SPC as a leader key with the [[https://github.com/noctuid/general.el][general]] library:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (use-package general :ensure t :init (setq general-override-states &#39;(insert emacs hybrid normal visual motion operator replace)) :config (general-define-key :states &#39;(normal visual motion) :keymaps &#39;override &#34;SPC&#34; &#39;hydra-space/body)) ;; Replace &#39;hydra-space/body with your leader function. #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See [[https://github.com/noctuid/evil-guide][noctuid&#39;s evil guide]] for other approaches.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unintialized mode maps in &lt;del&gt;evil-collection-setup-hook&lt;/del&gt;. &lt;del&gt;evil-collection-setup-hook&lt;/del&gt; is ran with a list of keymaps passed into it. Some misconfigured modes may not have yet initialized their keymap at this time so the value of the variable may be nil. In that case, an alternative is to use a mode-hook to do any custom settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (add-hook &#39;evil-collection-setup-hook (lambda (_mode keymaps) (add-hook &#39;ediff-mode-hook (lambda () (... keymaps ...))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;View [[https://github.com/emacs-evil/evil-collection/issues/196][196]] for more info.&lt;/p&gt; &#xA;&lt;p&gt;*** Modes left behind&lt;/p&gt; &#xA;&lt;p&gt;Some modes might still remain unsupported by this package. Should you be missing your &lt;del&gt;&#xA;  &lt;hjkl&gt;&lt;/hjkl&gt;&lt;/del&gt;, please feel free to do a pull request.&lt;/p&gt; &#xA;&lt;p&gt;*** Writing a new binding&lt;/p&gt; &#xA;&lt;p&gt;This [[template][yasnippet template]] can be used to bootstrap a new binding.&lt;/p&gt; &#xA;&lt;p&gt;For example, if we were to want to add &lt;del&gt;evil-collection&lt;/del&gt; support to &lt;del&gt;eldoc&lt;/del&gt;. (e.g.) There is a package that contains:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (provide &#39;eldoc) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Create a directory named eldoc under [[modes-directory][modes/]]. Create a file named evil-collection-eldoc.el under the newly created eldoc directory. Then use the above template as an example or, using [[yasnippet][yasnippet]], &lt;del&gt;yas-expand&lt;/del&gt; the above template which will result in something like below:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes ;;; evil-collection-eldoc.el --- Bindings for `eldoc&#39;. -&lt;em&gt;- lexical-binding: t -&lt;/em&gt;-&lt;/p&gt; &#xA;&lt;p&gt;;; Copyright (C) 2022 James Nguyen&lt;/p&gt; &#xA;&lt;p&gt;;; Author: James Nguyen &lt;a href=&#34;mailto:james@jojojames.com&#34;&gt;james@jojojames.com&lt;/a&gt; ;; Maintainer: James Nguyen &lt;a href=&#34;mailto:james@jojojames.com&#34;&gt;james@jojojames.com&lt;/a&gt; ;; URL: &lt;a href=&#34;https://github.com/emacs-evil/evil-collection&#34;&gt;https://github.com/emacs-evil/evil-collection&lt;/a&gt; ;; Version: 0.0.2 ;; Package-Requires: ((emacs &#34;27.1&#34;)) ;; Keywords: evil, emacs, convenience, tools&lt;/p&gt; &#xA;&lt;p&gt;;; This program is free software; you can redistribute it and/or modify ;; it under the terms of the GNU General Public License as published by ;; the Free Software Foundation, either version 3 of the License, or ;; (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;;; This program is distributed in the hope that it will be useful, ;; but WITHOUT ANY WARRANTY; without even the implied warranty of ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ;; GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;;; You should have received a copy of the GNU General Public License ;; along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;;;; Commentary: ;;; Bindings for eldoc.&lt;/p&gt; &#xA;&lt;p&gt;;;; Code: (require &#39;evil-collection) (require &#39;eldoc nil t)&lt;/p&gt; &#xA;&lt;p&gt;(defvar eldoc-mode-map) (defconst evil-collection-eldoc-maps &#39;(eldoc-mode-map))&lt;/p&gt; &#xA;&lt;p&gt;(defun evil-collection-eldoc-setup () &#34;Set up `evil&#39; bindings for eldoc.&#34; (evil-collection-define-key &#39;normal &#39;eldoc-mode-map ))&lt;/p&gt; &#xA;&lt;p&gt;(provide &#39;evil-collection-eldoc) ;;; evil-collection-eldoc.el ends here #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Finally, add &lt;del&gt;eldoc&lt;/del&gt; to &lt;del&gt;evil-collection--supported-modes&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (defvar evil-collection--supported-modes &lt;code&gt;( ;; ... eldoc ;; ... ) &#34;List of modes supported by evil-collection. Elements are either target mode symbols or lists which &lt;/code&gt;car&#39; is the mode symbol and `cdr&#39; the packages to register.&#34;) #+end_src ** Submitting Issues&lt;/p&gt; &#xA;&lt;p&gt;When reproducing issues, you can use this emacs -Q recipe.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (setq user-emacs-directory &#34;~/.emacs.1.d&#34;) (setq package-user-dir (format &#34;%selpa/%s/&#34; user-emacs-directory emacs-major-version))&lt;/p&gt; &#xA;&lt;p&gt;(setq package-enable-at-startup nil package-archives &#39;((&#34;melpa&#34; . &#34;&lt;a href=&#34;https://melpa.org/packages/&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&#34;) (&#34;gnu&#34; . &#34;&lt;a href=&#34;http://elpa.gnu.org/packages/&#34;&gt;http://elpa.gnu.org/packages/&lt;/a&gt;&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;(require &#39;package) (package-initialize) (unless (package-installed-p &#39;use-package) (package-refresh-contents) (package-install &#39;use-package)) (require &#39;use-package) (setq use-package-always-ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package evil :ensure t :init (setq evil-want-keybinding nil) :config (evil-mode 1))&lt;/p&gt; &#xA;&lt;p&gt;(use-package evil-collection :after evil :ensure t :config (evil-collection-init)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Contributing&lt;/p&gt; &#xA;&lt;p&gt;We welcome any additional modes that are not already supported.&lt;/p&gt; &#xA;&lt;p&gt;All bindings in &lt;del&gt;evil-collection&lt;/del&gt; are open to change so if there&#39;s a better or more consistent binding, please [[https://github.com/emacs-evil/evil-collection/issues][open an issue]] or [[https://github.com/emacs-evil/evil-collection/pulls][submit a pull request]].&lt;/p&gt; &#xA;&lt;p&gt;Follow [[https://github.com/bbatsov/emacs-lisp-style-guide/][The Emacs Lisp Style Guide]] for coding conventions.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/erlang/otp/wiki/writing-good-commit-messages][Erlang/OTP]] has a good read for helpful commit messages.&lt;/p&gt; &#xA;&lt;p&gt;#+LINK: EMMS &lt;a href=&#34;https://www.gnu.org/software/emms/&#34;&gt;https://www.gnu.org/software/emms/&lt;/a&gt; #+LINK: evilmagit &lt;a href=&#34;https://github.com/emacs-evil/evil-magit&#34;&gt;https://github.com/emacs-evil/evil-magit&lt;/a&gt; #+LINK: evilmu4e &lt;a href=&#34;https://github.com/JorisE/evil-mu4e&#34;&gt;https://github.com/JorisE/evil-mu4e&lt;/a&gt; #+LINK: mu4e &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e.html&#34;&gt;https://www.djcbsoftware.nl/code/mu/mu4e.html&lt;/a&gt; #+LINK: yasnippet &lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;https://github.com/joaotavora/yasnippet&lt;/a&gt; #+LINK: template &lt;a href=&#34;https://github.com/emacs-evil/evil-collection/raw/master/yasnippet_evil-collection&#34;&gt;https://github.com/emacs-evil/evil-collection/blob/master/yasnippet_evil-collection&lt;/a&gt; #+LINK: modes-directory &lt;a href=&#34;https://github.com/emacs-evil/evil-collection/tree/master/modes&#34;&gt;https://github.com/emacs-evil/evil-collection/tree/master/modes&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/lsp-pyright</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/emacs-lsp/lsp-pyright</id>
    <link href="https://github.com/emacs-lsp/lsp-pyright" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lsp-mode ❤️ pyright&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp-pyright&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-pyright/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacs-lsp/lsp-pyright/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-pyright/master/License&#34;&gt;&lt;img src=&#34;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/lsp-pyright&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lsp-pyright-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/emacs-lsp/lsp-mode?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/emacs-lsp/lsp-mode.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/emacs-lsp/lsp-mode&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;lsp-mode client leveraging &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;Pyright language server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package lsp-pyright&#xA;  :ensure t&#xA;  :hook (python-mode . (lambda ()&#xA;                          (require &#39;lsp-pyright)&#xA;                          (lsp))))  ; or lsp-deferred&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp-pyright&lt;/code&gt; supports the following configuration. Each configuration is described in detail in &lt;a href=&#34;https://github.com/microsoft/pyright/raw/master/docs/settings.md&#34;&gt;Pyright Settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pyright.disableLanguageServices&lt;/code&gt; via &lt;code&gt;lsp-pyright-disable-language-services&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pyright.disableOrganizeImports&lt;/code&gt; via &lt;code&gt;lsp-pyright-disable-organize-imports&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.autoImportCompletions&lt;/code&gt; via &lt;code&gt;lsp-pyright-auto-import-completions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.useLibraryCodeForTypes&lt;/code&gt; via &lt;code&gt;lsp-pyright-use-library-code-for-types&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.typeshedPaths&lt;/code&gt; via &lt;code&gt;lsp-pyright-typeshed-paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.diagnosticMode&lt;/code&gt; via &lt;code&gt;lsp-pyright-diagnostic-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.typeCheckingMode&lt;/code&gt; via &lt;code&gt;lsp-pyright-typechecking-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.logLevel&lt;/code&gt; via &lt;code&gt;lsp-pyright-log-level&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.autoSearchPaths&lt;/code&gt; via &lt;code&gt;lsp-pyright-auto-search-paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.extraPaths&lt;/code&gt; via &lt;code&gt;lsp-pyright-extra-paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.venvPath&lt;/code&gt; via &lt;code&gt;lsp-pyright-venv-path&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Projects can be further configured using &lt;code&gt;pyrightconfig.json&lt;/code&gt; file. For further details please see &lt;a href=&#34;https://github.com/microsoft/pyright/raw/master/docs/configuration.md&#34;&gt;Pyright Configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage notes&lt;/h3&gt; &#xA;&lt;p&gt;Pyright includes a recent copy of the Python stdlib type stubs. To add type stubs for additional libraries, customize &lt;code&gt;lsp-pyright-stub-path&lt;/code&gt;, or place the appropriate type stubs in &lt;code&gt;typings&lt;/code&gt; subdirectory of your project (this is the default stub path). Note that without stubs but with &lt;code&gt;lsp-pyright-use-library-code-for-types&lt;/code&gt; non-nil, you may see type checking errors, particularly for complex libraries such as Pandas.&lt;/p&gt; &#xA;&lt;p&gt;Example setup to get typechecking working properly for Pandas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/microsoft/python-type-stubs $HOME/src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;  (setq lsp-pyright-use-library-code-for-types t) ;; set this to nil if getting too many false positive type errors&#xA;  (setq lsp-pyright-stub-path (concat (getenv &#34;HOME&#34;) &#34;/src/python-type-stubs&#34;)) ;; example&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>emacs-mirror/emacs</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/emacs-mirror/emacs</id>
    <link href="https://github.com/emacs-mirror/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2022 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; &#xA;&lt;p&gt;This directory tree holds version 29.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; &#xA;&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; &#xA;&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; &#xA;&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&#34;mailto:bug-gnu-emacs@gnu.org&#34;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; &#xA;&lt;p&gt;See the &#34;Bugs&#34; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&#34;https://savannah.gnu.org/mail/?group=emacs&#34;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&#34;https://lists.gnu.org/&#34;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; &#xA;&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; &#xA;&lt;p&gt;There are several subdirectories:&lt;/p&gt; &#xA;&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script.&lt;/p&gt; &#xA;&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; &#xA;&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; &#xA;&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; &#xA;&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-straight/vertico</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/emacs-straight/vertico</id>
    <link href="https://github.com/emacs-straight/vertico" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the vertico package from GNU ELPA, current as of 2022-05-30&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: vertico.el - VERTical Interactive COmpletion #+author: Daniel Mendler #+language: en #+export_file_name: vertico.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Vertico: (vertico). #+texinfo_dir_desc: VERTical Interactive COmpletion.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/vertico.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/vertico.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Vertigomovie_restoration.jpg/800px-Vertigomovie_restoration.jpg&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The main focus of Vertico is to provide a UI which behaves /correctly/ under all circumstances. By reusing the built-in facilities system, Vertico achieves /full compatibility/ with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extensible and modular. Additional enhancements are available as [[#extensions][extensions]] or [[#complementary-packages][complementary packages]]. The code base is small and maintainable. The main &lt;del&gt;vertico.el&lt;/del&gt; package is only about 600 lines of code without white space and comments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertical display with arrow key navigation. See the [[#extensions][extensions]] for additional display modes.&lt;/li&gt; &#xA; &lt;li&gt;Prompt shows the current candidate index and the total number of candidates.&lt;/li&gt; &#xA; &lt;li&gt;The current candidate is inserted with =TAB= and selected with =RET=.&lt;/li&gt; &#xA; &lt;li&gt;Non-existing candidates can be submitted with =M-RET= or by moving the point to the prompt.&lt;/li&gt; &#xA; &lt;li&gt;Configurable sorting by history position, length and alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;Long candidates with newlines are formatted to take up less space.&lt;/li&gt; &#xA; &lt;li&gt;Deferred completion style highlighting for performance.&lt;/li&gt; &#xA; &lt;li&gt;Annotations are displayed next to the candidates (&lt;del&gt;annotation-&lt;/del&gt; and &lt;del&gt;affixation-function&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Support for candidate grouping and group cycling commands (&lt;del&gt;group-function&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-mx.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico defines its own local keymap in the minibuffer which is derived from &lt;del&gt;minibuffer-local-map&lt;/del&gt;. The keymap keeps most of the &lt;del&gt;fundamental-mode&lt;/del&gt; keybindings intact and remaps and binds only a handful of commands. Note in particular the binding of =TAB= to &lt;del&gt;vertico-insert&lt;/del&gt; and the bindings of &lt;del&gt;vertico-exit/exit-input&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;beginning-of-buffer&lt;/del&gt;, &lt;del&gt;minibuffer-beginning-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-first&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;end-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-last&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-down-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-down&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-up-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-up&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;next-line&lt;/del&gt;, &lt;del&gt;next-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;previous-line&lt;/del&gt;, &lt;del&gt;previous-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;forward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;backward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;exit-minibuffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-exit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;kill-ring-save&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-save&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-RET= -&amp;gt; &lt;del&gt;vertico-exit-input&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=TAB= -&amp;gt; &lt;del&gt;vertico-insert&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is available from [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]]. You can install it directly via &lt;del&gt;package-install&lt;/del&gt;. After installation, you can activate the global minor mode with =M-x vertico-mode=. In order to configure Vertico and other packages in your init.el, you may want to take advantage of &lt;del&gt;use-package&lt;/del&gt;. Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico (use-package vertico :init (vertico-mode)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Different scroll margin&#xA;;; (setq vertico-scroll-margin 0)&#xA;&#xA;;; Show more candidates&#xA;;; (setq vertico-count 20)&#xA;&#xA;;; Grow and shrink the Vertico minibuffer&#xA;;; (setq vertico-resize t)&#xA;&#xA;;; Optionally enable cycling for `vertico-next&#39; and `vertico-previous&#39;.&#xA;;; (setq vertico-cycle t)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;;; Persist history over Emacs restarts. Vertico sorts by history position. (use-package savehist :init (savehist-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; A few more useful configurations... (use-package emacs :init ;; Add prompt indicator to &lt;code&gt;completing-read-multiple&#39;. ;; We display [CRM&amp;lt;separator&amp;gt;], e.g., [CRM,] if the separator is a comma. (defun crm-indicator (args) (cons (format &#34;[CRM%s] %s&#34; (replace-regexp-in-string &#34;\\&lt;/code&gt;\[.&lt;em&gt;?]\&lt;/em&gt;\|\[.&lt;em&gt;?]\&lt;/em&gt;\&#39;&#34; &#34;&#34; crm-separator) (car args)) (cdr args))) (advice-add #&#39;completing-read-multiple :filter-args #&#39;crm-indicator)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Do not allow the cursor in the minibuffer prompt&#xA;(setq minibuffer-prompt-properties&#xA;      &#39;(read-only t cursor-intangible t face minibuffer-prompt))&#xA;(add-hook &#39;minibuffer-setup-hook #&#39;cursor-intangible-mode)&#xA;&#xA;;; Emacs 28: Hide commands in M-x which do not work in the current mode.&#xA;;; Vertico commands are hidden in normal buffers.&#xA;;; (setq read-extended-command-predicate&#xA;;;       #&#39;command-completion-default-include-p)&#xA;&#xA;;; Enable recursive minibuffers&#xA;(setq enable-recursive-minibuffers t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;I recommend to give Orderless completion a try, which is different from the prefix TAB completion used by the basic default completion system or in shells.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Optionally use the `orderless&#39; completion style. (use-package orderless :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers &#39;(+orderless-dispatch) ;; orderless-component-separator #&#39;orderless-escapable-split-on-space) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles partial-completion))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. See =+orderless-dispatch= in the [[https://github.com/minad/consult/wiki][Consult wiki]] for an advanced Orderless style dispatcher. Additionally enable =partial-completion= for file path expansion. =partial-completion= is important for file wildcard support. Multiple files can be opened at once with =find-file= if you enter a wildcard. You may also give the =initials= completion style a try.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[https://github.com/minad/vertico/wiki][Vertico Wiki]] for additional configuration tips. For more general documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want to create your own completion commands, you can find documentation about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Completion styles and TAB completion&lt;/p&gt; &#xA;&lt;p&gt;The bindings of the &lt;del&gt;minibuffer-local-completion-map&lt;/del&gt; are not available in Vertico by default. This means that TAB works differently from what you may expect from the default Emacs completion system.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to have the default completion commands a key press away you can add new bindings or even replace the Vertico bindings. Then the default completion commands behave as usual. For example you can use =M-TAB= to cycle between candidates if you have set &lt;del&gt;completion-cycle-threshold&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;?&#34; #&#39;minibuffer-completion-help) (define-key vertico-map (kbd &#34;M-RET&#34;) #&#39;minibuffer-force-complete-and-exit) (define-key vertico-map (kbd &#34;M-TAB&#34;) #&#39;minibuffer-complete) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;orderless&lt;/del&gt; completion style does not support completion of a common prefix substring, as you may be familiar with from shells or the basic default completion system. The reason is that the Orderless input string is usually not a prefix. In order to support completing prefixes you may want to combine &lt;del&gt;orderless&lt;/del&gt; with &lt;del&gt;substring&lt;/del&gt; in your =completion-styles= configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(substring orderless basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can experiment with the built-in completion-styles, e.g., adding =partial-completion= or =flex=. The =partial-completion= style is important to add if you want to open multiple files at once with &lt;del&gt;find-file&lt;/del&gt; using wildcards. In order to open multiple files at once, you have to move to the prompt and then press =RET=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic substring partial-completion flex)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Because Vertico is fully compatible with Emacs default completion system, further customization of completion behavior can be achieved by setting the designated Emacs variables. For example, one may wish to disable case-sensitivity for file and buffer matching when built-in completion styles are used instead of &lt;del&gt;orderless&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq read-file-name-completion-ignore-case t read-buffer-completion-ignore-case t completion-ignore-case t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completion-at-point and completion-in-region&lt;/p&gt; &#xA;&lt;p&gt;The =completion-at-point= command is usually bound to =M-TAB= or =TAB=. In case you want to use Vertico for completion-at-point/completion-in-region, you can use the function &lt;del&gt;consult-completion-in-region&lt;/del&gt; provided by the Consult package.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =completion-in-region-function= setting also affects TAB completion in the minibuffer when =M-:= (&lt;del&gt;eval-expression&lt;/del&gt;) is used.&lt;/p&gt; &#xA;&lt;p&gt;You may also want to look into my [[https://github.com/minad/corfu][Corfu]] package, which provides a minimal completion system for =completion-in-region= in a child frame popup. Corfu is also a narrowly focused package and developed in the same spirit as Vertico.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensions :properties: :custom_id: extensions &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We maintain small extension packages to Vertico in this repository in the subdirectory [[https://github.com/minad/vertico/tree/main/extensions][extensions/]]. The extensions are installed together with Vertico if you pull the package from ELPA. The extensions are inactive by default and can be enabled manually if desired. Furthermore it is possible to install all of the files separately, both &lt;del&gt;vertico.el&lt;/del&gt; and the &lt;del&gt;vertico-*.el&lt;/del&gt; extensions. Currently the following extensions come with the Vertico ELPA package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-buffer.el][vertico-buffer]]: =vertico-buffer-mode= to display Vertico in a separate buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-directory.el][vertico-directory]]: Commands for Ido-like directory navigation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-flat.el][vertico-flat]]: =vertico-flat-mode= to enable a flat, horizontal display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-grid.el][vertico-grid]]: =vertico-grid-mode= to enable a grid display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-indexed.el][vertico-indexed]]: =vertico-indexed-mode= to select indexed candidates with prefix arguments.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-mouse.el][vertico-mouse]]: =vertico-mouse-mode= to support for scrolling and candidate selection.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-multiform.el][vertico-multiform]]: Configure Vertico modes per command or completion category.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-quick.el][vertico-quick]]: Commands to select using Avy-style quick keys.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-repeat.el][vertico-repeat]]: The command =vertico-repeat= repeats the last completion session.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-reverse.el][vertico-reverse]]: =vertico-reverse-mode= to reverse the display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-unobtrusive.el][vertico-unobtrusive]]: =vertico-unobtrusive-mode= displays only the topmost candidate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the Commentary of those files for configuration details. With these extensions it is possible to adapt Vertico such that it matches your preference or behaves similar to other familiar UIs. For example, the combination =vertico-flat= plus =vertico-directory= resembles Ido in look and feel. For an interface similar to Helm, the extension =vertico-buffer= allows you to configure freely where the completion buffer opens, instead of growing the minibuffer. Furthermore =vertico-buffer= will adjust the number of displayed candidates according to the buffer height.&lt;/p&gt; &#xA;&lt;p&gt;Configuration example for =vertico-directory=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure directory extension. (use-package vertico-directory :after vertico :ensure nil ;; More convenient directory navigation commands :bind (:map vertico-map (&#34;RET&#34; . vertico-directory-enter) (&#34;DEL&#34; . vertico-directory-delete-char) (&#34;M-DEL&#34; . vertico-directory-delete-word)) ;; Tidy shadowed file names :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Configure Vertico per command or completion category&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-ripgrep.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;Vertico offers the =vertico-multiform-mode= which allows you to configure Vertico per command or per completion category. The =vertico-buffer-mode= enables a Helm-like buffer display, which takes more space but also displays more candidates. This verbose display mode is useful for commands like &lt;del&gt;consult-imenu&lt;/del&gt; or &lt;del&gt;consult-outline&lt;/del&gt; since the buffer display allows you to get a better overview over the entire current buffer. But for other commands you want to keep using the default Vertico display. &lt;del&gt;vertico-multiform-mode&lt;/del&gt; solves this configuration problem!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico-multiform (vertico-multiform-mode)&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per command. ;; Use a buffer with indices for imenu ;; and a flat (Ido-like) menu for M-x. (setq vertico-multiform-commands &#39;((consult-imenu buffer indexed) (execute-extended-command unobtrusive)))&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per completion category. ;; Use the grid display for files and a buffer ;; for the consult-grep commands. (setq vertico-multiform-categories &#39;((file grid) (consult-grep buffer))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Temporary toggling between the different display modes is possible. Bind the following commands:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;\M-V&#34; #&#39;vertico-multiform-vertical) (define-key vertico-map &#34;\M-G&#34; #&#39;vertico-multiform-grid) (define-key vertico-map &#34;\M-F&#34; #&#39;vertico-multiform-flat) (define-key vertico-map &#34;\M-R&#34; #&#39;vertico-multiform-reverse) (define-key vertico-map &#34;\M-U&#34; #&#39;vertico-multiform-unobtrusive) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can use your own functions or even lambdas to configure the completion behavior per command or per completion category. The function must have the calling convention of a mode, i.e., it takes a single argument, which is either 1 to turn on the mode and -1 to turn off the mode.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure &lt;code&gt;consult-outline&#39; as a scaled down TOC in a separate buffer (setq vertico-multiform-commands &lt;/code&gt;((consult-outline buffer ,(lambda (_) (text-scale-set -1))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Furthermore you can tune buffer-local settings per command or category.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Change the default sorting function. ;; See &lt;code&gt;vertico-sort-function&#39; and &lt;/code&gt;vertico-sort-override-function&#39;. (setq vertico-multiform-commands &#39;((describe-symbol (vertico-sort-function . vertico-sort-alpha))))&lt;/p&gt; &#xA;&lt;p&gt;(setq vertico-multiform-categories &#39;((symbol (vertico-sort-function . vertico-sort-alpha)) (file (vertico-sort-function . sort-directories-first))))&lt;/p&gt; &#xA;&lt;p&gt;;; Sort directories before files (defun sort-directories-first (files) (setq files (vertico-sort-history-length-alpha files)) (nconc (seq-filter (lambda (x) (string-suffix-p &#34;/&#34; x)) files) (seq-remove (lambda (x) (string-suffix-p &#34;/&#34; x)) files))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Combining these features allows us to fine-tune the completion display even more by adjusting the &lt;del&gt;vertico-buffer-display-action&lt;/del&gt;. We can for example reuse the current window for commands of the &lt;del&gt;consult-grep&lt;/del&gt; category (&lt;del&gt;consult-grep&lt;/del&gt;, &lt;del&gt;consult-git-grep&lt;/del&gt; and &lt;del&gt;consult-ripgrep&lt;/del&gt;). Note that this configuration is incompatible with Consult preview, since the previewed buffer is usually shown in exactly this window. Nevertheless this snippet demonstrates the flexibility of the configuration system.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure the buffer display and the buffer display action (setq vertico-multiform-categories &#39;((consult-grep buffer (vertico-buffer-display-action . (display-buffer-same-window)))))&lt;/p&gt; &#xA;&lt;p&gt;;; Disable preview for consult-grep commands (consult-customize consult-ripgrep consult-git-grep consult-grep :preview-key nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As another example, the following code uses &lt;del&gt;vertico-flat&lt;/del&gt; and &lt;del&gt;vertico-cycle&lt;/del&gt; to emulate &lt;del&gt;(ido-mode &#39;buffer)&lt;/del&gt;, i.e., Ido when it is enabled only for completion of buffer names. &lt;del&gt;vertico-cycle&lt;/del&gt; set to &lt;del&gt;t&lt;/del&gt; is necessary here to prevent completion candidates from disappearing when they scroll off-screen to the left.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq vertico-multiform-categories &#39;((buffer flat (vertico-cycle . t)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complementary packages :properties: :custom_id: complementary-packages &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico integrates well with complementary packages, which enrich the completion UI. These packages are fully supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][Marginalia]]: Rich annotations in the minibuffer&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult][Consult]]: Useful search and navigation commands&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][Embark]]: Minibuffer actions and context menu&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][Orderless]]: Advanced completion style&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to get accustomed with the package ecosystem, I recommed the following quick start approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start with plain Emacs (&lt;del&gt;emacs -Q&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Install and enable Vertico to get incremental minibuffer completion.&lt;/li&gt; &#xA; &lt;li&gt;Install Orderless and/or configure the built-in completion styles for more flexible minibuffer filtering.&lt;/li&gt; &#xA; &lt;li&gt;Install Marginalia if you like rich minibuffer annotations.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark and add two keybindings for &lt;del&gt;embark-dwim&lt;/del&gt; and &lt;del&gt;embark-act&lt;/del&gt;. I am using the mnemonic keybindings =M-.= and =C-.= since these commands allow you to act on the object at point or in the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Install Consult if you want additional featureful completion commands, e.g., the buffer switcher &lt;del&gt;consult-buffer&lt;/del&gt; with preview or the line-based search &lt;del&gt;consult-line&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark-Consult and Wgrep for export from =consult-line= to =occur-mode= buffers and from =consult-grep= to editable =grep-mode= buffers.&lt;/li&gt; &#xA; &lt;li&gt;Fine tune Vertico with [[#extensions][extensions]].&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The ecosystem is modular. You don&#39;t have to use all of these components. Use only the ones you like and the ones which fit well into your setup. The steps 1. to 4. introduce no new commands over plain Emacs. Step 5. introduces the new commands &lt;del&gt;embark-act&lt;/del&gt; and &lt;del&gt;embark-dwim&lt;/del&gt;. In step 6. you get the Consult commands, some offer new functionality not present in Emacs already (e.g., &lt;del&gt;consult-line&lt;/del&gt;) and some are substitutes (e.g., &lt;del&gt;consult-buffer&lt;/del&gt; for &lt;del&gt;switch-to-buffer&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Child frames and Popups&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An often requested feature is the ability to display the completions in a child frame popup. Personally I am critical of using child frames for minibuffer completion. From my experience it introduces more problems than it solves. Most importantly child frames hide the content of the underlying buffer. Furthermore child frames do not play well together with changing windows and entering recursive minibuffer sessions. On top, child frames can feel slow and sometimes flicker. A better alternative is the &lt;del&gt;vertico-buffer&lt;/del&gt; display which can even be configured individually per command using &lt;del&gt;vertico-multiform&lt;/del&gt;. On the plus side of child frames, the completion display appears at the center of the screen, where your eyes are focused. Please give the following packages a try and judge for yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/muffinmad/emacs-mini-frame][mini-frame]]: Display the entire minibuffer in a child frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/mini-popup][mini-popup]]: Slightly simpler alternative to mini-frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tumashu/vertico-posframe][vertico-posframe]]: Display only the Vertico minibuffer in a child frame using the posframe library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many alternative completion UIs, each UI with its own advantages and disadvantages.&lt;/p&gt; &#xA;&lt;p&gt;Vertico aims to be 100% compliant with all Emacs commands and achieves that with a minimal code base, relying purely on &lt;del&gt;completing-read&lt;/del&gt; while avoiding to invent its own APIs. Inventing a custom API as Helm or Ivy is explicitly avoided in order to increase flexibility and package reuse. Due to its small code base and reuse of the Emacs built-in facilities, bugs and compatibility issues are less likely to occur in comparison to completion UIs or full completion systems, which reimplement a lot of functionality.&lt;/p&gt; &#xA;&lt;p&gt;Since Vertico only provides the UI, you may want to combine it with some of the complementary packages, to give a full-featured completion experience similar to Helm or Ivy. Overall the packages in the spirit of Vertico have a different style than Helm or Ivy. The idea is to have smaller independent components, which one can add and understand step by step. Each component focuses on its niche and tries to be as non-intrusive as possible. Vertico targets users interested in crafting their Emacs precisely to their liking - completion plays an integral part in how the users interacts with Emacs.&lt;/p&gt; &#xA;&lt;p&gt;There are other interactive completion UIs, which follow a similar philosophy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][Mct]]: Minibuffer and Completions in Tandem. Mct reuses the default &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer and enhances it with automatic updates and additional keybindings, to select a candidate and move between minibuffer and completions buffer. Mct can be configured to open only when requested. Furthermore since Mct uses a fully functional buffer you can reuse all your familar buffer commands inside the completions buffer. The main distinction to Vertico&#39;s approach is that &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer displays all matching candidates. This has the advantage that you can interact freely with the candidates and jump around with Isearch or Avy. On the other hand it necessarily causes a slowdown in comparison to Vertico, which only displays a subset of candidates. Mct supports completion in region via its &lt;del&gt;mct-region-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/icomplete-vertical][Icomplete-vertical]]: This package enhances the Emacs builtin Icomplete with a vertical display. In contrast to Vertico, Icomplete rotates the candidates such that the current candidate always appears at the top. From my perspective, candidate rotation feels a bit less intuitive than the UI of Vertico or Selectrum. Note that Emacs 28 offers a built-in &lt;del&gt;icomplete-vertical-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/raxod502/selectrum][Selectrum]]: Selectrum is the predecessor of Vertico, since it directly inspired Vertico. Selectrum has a similar UI and interaction model as Vertico. Vertico offers additional features and is more flexible than Selectrum thanks to its [[#extensions][extensions]]. Unfortunately Selectrum is not fully compatible with every Emacs completion command and dynamic completion tables ([[https://github.com/raxod502/selectrum/issues/481][Issue #481]]), since it uses its own filtering infrastructure, which deviates from the standard Emacs completion facilities. The filtering infrastructure also leads to a larger and more complex code base.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to learn more about Vertico and minibuffer completion, check out the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/hlissner/doom-emacs/tree/develop/modules/completion/vertico][Doom Emacs Vertico Module]]: Vertico is Doom&#39;s default completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=w9hHMDyF9V4][Emacs Minibuffer Completions]] (2022-02-12) by Greg Yut.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=hPwDbx--Waw][Vertico Extensions for Emacs]] (2022-01-08) by Karthik Chikmagalur.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/5ffb2at2d7w][Using Emacs Episode 80 - Vertico, Marginalia, Consult and Embark]] (2021-10-26) by Mike Zamansky.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=UtqE-lR2HCA][System Crafters Live! - Replacing Ivy and Counsel with Vertico and Consult]] (2021-05-21) by David Wilson.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=J0OaRy85MOo][Streamline Your Emacs Completions with Vertico]] (2021-05-17) by David Wilson.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Problematic completion commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is robust in most scenarios. However some completion commands make certain assumptions about the completion styles and the completion UI. Some of these assumptions may not hold in Vertico or other UIs and require minor workarounds.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-refile&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-refile&lt;/del&gt; uses &lt;del&gt;org-olpath-completing-read&lt;/del&gt; to complete the outline path in steps, when &lt;del&gt;org-refile-use-outline-path&lt;/del&gt; is non-nil.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately the implementation of this Org completion table assumes that the &lt;del&gt;basic&lt;/del&gt; completion style is used. The table is incompatible with completion styles like &lt;del&gt;substring&lt;/del&gt;, &lt;del&gt;flex&lt;/del&gt; or &lt;del&gt;orderless&lt;/del&gt;. In order to fix the issue at the root, the completion table should make use of completion boundaries similar to the built-in file completion table. In your user configuration you can prioritize &lt;del&gt;basic&lt;/del&gt; before &lt;del&gt;orderless&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 1: Use the basic completion style (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps t) (advice-add #&#39;org-olpath-completing-read :around (lambda (&amp;amp;rest args) (minibuffer-with-setup-hook (lambda () (setq-local completion-styles &#39;(basic))) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you may want to disable the outline path completion in steps. The completion on the full path can be quicker since the input string matches directly against substrings of the full path, which is useful with Orderless. However the list of possible completions becomes much more cluttered.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 2: Complete full paths (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-agenda-filter&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;del&gt;org-refile&lt;/del&gt;, the &lt;del&gt;org-agenda-filter&lt;/del&gt; completion function (&lt;del&gt;org-agenda-filter-completion-function&lt;/del&gt;) does not make use of completion boundaries. Unfortunately =TAB= completion (&lt;del&gt;minibuffer-complete&lt;/del&gt;) does not work for this reason. This affects Vertico and also the Emacs default completion system. For example if you enter &lt;del&gt;+tag&amp;lt;0 TAB&lt;/del&gt; the input is replaced with &lt;del&gt;0:10&lt;/del&gt; which is not correct. With preserved completion boundaries, the expected result would be &lt;del&gt;+tag&amp;lt;0:10&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;tmm-menubar&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The text menu bar works well with Vertico but always shows a =&lt;em&gt;Completions&lt;/em&gt;= buffer, which is unwanted if you use the Vertico UI. This completion buffer can be disabled with an advice. If you disabled the standard GUI menu bar and prefer the Vertico interface you may also overwrite the default F10 keybinding.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (global-set-key [f10] #&#39;tmm-menubar) (advice-add #&#39;tmm-add-prompt :after #&#39;minibuffer-hide-completions) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;ffap-menu&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;ffap-menu&lt;/del&gt; shows the =&lt;em&gt;Completions&lt;/em&gt;= buffer by default like &lt;del&gt;tmm-menubar&lt;/del&gt;, which is unnecessary with Vertico. This completion buffer can be disabled as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add #&#39;ffap-menu-ask :around (lambda (&amp;amp;rest args) (cl-letf (((symbol-function #&#39;minibuffer-completion-help) #&#39;ignore)) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;completion-table-dynamic&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dynamic completion tables (&lt;del&gt;completion-table-dynamic&lt;/del&gt;, &lt;del&gt;completion-table-in-turn&lt;/del&gt;, etc.) should work well with Vertico. However the requirement is that the =basic= completion style is enabled. The =basic= style performs prefix filtering by passing the input to the completion table (or the dynamic completion table function). The =basic= completion style must not necessarily be configured with highest priority, it can also come after other completion styles like =orderless=, =substring= or =flex=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic)) ;; (setq completion-styles &#39;(orderless basic)) (completing-read &#34;Dynamic: &#34; (completion-table-dynamic (lambda (str) (list (concat str &#34;1&#34;) (concat str &#34;2&#34;) (concat str &#34;3&#34;))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Submitting the empty string&lt;/p&gt; &#xA;&lt;p&gt;The commands &lt;del&gt;multi-occur&lt;/del&gt;, &lt;del&gt;auto-insert&lt;/del&gt;, &lt;del&gt;bbdb-create&lt;/del&gt; read multiple arguments from the minibuffer with &lt;del&gt;completing-read&lt;/del&gt;, one at a time, until you submit an empty string. You should type =M-RET= (&lt;del&gt;vertico-exit-input&lt;/del&gt;) to finish the loop. Directly pressing =RET= (&lt;del&gt;vertico-exit&lt;/del&gt;) does not work since the first candidate is preselected.&lt;/p&gt; &#xA;&lt;p&gt;The underlying issue is that &lt;del&gt;completing-read&lt;/del&gt; always allows you to exit with the empty string, which is called the /null completion/, even if the &lt;del&gt;REQUIRE-MATCH&lt;/del&gt; argument is non-nil. Try the following two calls to &lt;del&gt;completing-read&lt;/del&gt; with =C-x C-e=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match) (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match nil nil &#34;&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In both cases the empty string can be submitted. In the first case no explicit default value is specified and Vertico preselects the &lt;em&gt;first&lt;/em&gt; candidate. In order to exit with the empty string, press =M-RET=. In the second case the explicit default value &#34;&#34; is specified and Vertico preselects the prompt, such that exiting with the empty string is possible by pressing =RET= only.&lt;/p&gt; &#xA;&lt;p&gt;** Tramp hostname completion&lt;/p&gt; &#xA;&lt;p&gt;In combination with Orderless, hostnames are not made available for completion after entering =/ssh:=. In order to avoid this problem, the =basic= completion style should be specified for the file completion category, such that =basic= is tried before =orderless=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic partial-completion)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For users who are familiar with the =completion-style= machinery: You may also define a custom completion style which sets in only for remote files!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun basic-remote-try-completion (string table pred point) (and (vertico--remote-p string) (completion-basic-try-completion string table pred point))) (defun basic-remote-all-completions (string table pred point) (and (vertico--remote-p string) (completion-basic-all-completions string table pred point))) (add-to-list &#39;completion-styles-alist &#39;(basic-remote basic-remote-try-completion basic-remote-all-completions nil)) (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic-remote partial-completion)))) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/emacs.d</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/purcell/emacs.d</id>
    <link href="https://github.com/purcell/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs configuration bundle with batteries included&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/purcell/emacs.d/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/emacs.d/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;A reasonable Emacs config&lt;/h1&gt; &#xA;&lt;p&gt;This is my emacs configuration tree, continually used and tweaked since 2000, and it may be a good starting point for other Emacs users, especially web developers. These days it&#39;s somewhat geared towards OS X, but it is known to also work on Linux and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Emacs itself comes with support for many programming languages. This config adds improved defaults and extended support for the following, listed in the approximate order of how much I use them, from most to least:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Haskell / Purescript / Elm / OCaml&lt;/li&gt; &#xA; &lt;li&gt;Ruby / Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;CSS / LESS / SASS / SCSS&lt;/li&gt; &#xA; &lt;li&gt;Javascript / Typescript / Coffeescript&lt;/li&gt; &#xA; &lt;li&gt;HTML / HAML / Markdown / Textile / ERB&lt;/li&gt; &#xA; &lt;li&gt;Common Lisp (with Slime)&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Clojure (with Cider and nRepl)&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Erlang&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In particular, there&#39;s a nice config for &lt;em&gt;autocompletion&lt;/em&gt; with &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company&lt;/a&gt;, and &lt;code&gt;flymake&lt;/code&gt; (re-using backends from &lt;a href=&#34;http://www.flycheck.org&#34;&gt;flycheck&lt;/a&gt;) is used to immediately highlight syntax errors in Ruby, Python, Javascript, Haskell and a number of other languages.&lt;/p&gt; &#xA;&lt;p&gt;LSP support is provided using &lt;code&gt;eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Emacs versions&lt;/h2&gt; &#xA;&lt;p&gt;The config should run on Emacs 25.1 or greater and is designed to degrade smoothly - see the CI build - but note that much newer versions are required for an increasing number of key packages, so to get full functionality you should use the latest Emacs version available to you.&lt;/p&gt; &#xA;&lt;p&gt;Some Windows users might need to follow &lt;a href=&#34;http://xn--9dbdkw.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html&#34;&gt;these instructions&lt;/a&gt; to get TLS (ie. SSL) support included in their Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Other requirements&lt;/h2&gt; &#xA;&lt;p&gt;To make the most of the programming language-specific support in this config, further programs will likely be required, particularly those that &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; uses to provide on-the-fly syntax checking.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install, clone this repo to &lt;code&gt;~/.emacs.d&lt;/code&gt;, i.e. ensure that the &lt;code&gt;init.el&lt;/code&gt; contained in this repo ends up at &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/purcell/emacs.d.git ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon starting up Emacs for the first time, further third-party packages will be automatically downloaded and installed. If you encounter any errors at that stage, try restarting Emacs, and possibly running &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; before doing so.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;Update the config with &lt;code&gt;git pull&lt;/code&gt;. You&#39;ll probably also want/need to update the third-party packages regularly too, because that&#39;s what I do, and the config assumes it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-list-packages&lt;/kbd&gt;, then &lt;kbd&gt;U&lt;/kbd&gt; followed by &lt;kbd&gt;x&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should usually restart Emacs after pulling changes or updating packages so that they can take effect. Emacs should usually restore your working buffers when you restart due to this configuration&#39;s use of the &lt;code&gt;desktop&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; packages.&lt;/p&gt; &#xA;&lt;h2&gt;Changing themes and adding your own customization&lt;/h2&gt; &#xA;&lt;p&gt;To add your own customization, use &lt;kbd&gt;M-x customize&lt;/kbd&gt;, &lt;kbd&gt;M-x customize-themes&lt;/kbd&gt; etc. and/or create a file &lt;code&gt;~/.emacs.d/lisp/init-local.el&lt;/code&gt; which looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;... your code here ...&#xA;&#xA;(provide &#39;init-local)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need initialisation code which executes earlier in the startup process, you can also create an &lt;code&gt;~/.emacs.d/lisp/init-preload-local.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to customize things more extensively, you should probably just fork the repo and hack away at the config to make it your own! Remember to regularly merge in changes from this repo, so that your config remains compatible with the latest package and Emacs versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that I cannot provide support for customised versions of this configuration.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support / issues&lt;/h2&gt; &#xA;&lt;p&gt;If you hit any problems, please first ensure that you are using the latest version of this code, and that you have updated your packages to the most recent available versions (see &#34;Updates&#34; above). If you still experience problems, go ahead and &lt;a href=&#34;https://github.com/purcell/emacs.d&#34;&gt;file an issue on the github project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;-Steve Purcell&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;💝 Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;💼 LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;✍ sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;🐦 @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haskell/haskell-mode</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/haskell/haskell-mode</id>
    <link href="https://github.com/haskell/haskell-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs mode for Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://rawgithub.com/haskell/haskell-mode/master/images/haskell-mode.svg?sanitize=true&#34; width=&#34;35&#34; height=&#34;35&#34;&gt; Haskell Mode for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;This is an Emacs mode for editing, developing and debugging Haskell programs. &lt;a href=&#34;http://haskell.github.io/haskell-mode/&#34;&gt;Home page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/haskell/haskell-mode&#34;&gt;&lt;img src=&#34;https://travis-ci.org/haskell/haskell-mode.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/actions&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License GPL3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/HaskellMode&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/HaskellMode.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I just want to thank everybody involved in one way or another with the Haskell Emacs tooling. It is one of the best language experiences I had in Emacs. -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/2xjum3/haskellmode_february_2015_developments/cp0qa9a&#34;&gt;cocreature, 2015-03-01&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;ve been using it for a long time and love it. Great work on haskell-mode! Keep up the good work! -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/316hcm/month_in_haskell_mode_march_2015/cpyutph&#34;&gt;LukeHoersten, 2015-04-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This sounds wonderful. Does anything similar exist for Vim? -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/3bsa0f/month_in_haskell_mode_june_2015/cspdbb6&#34;&gt;earldouglas, 2015-07-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Users manual: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;latest version&lt;/a&gt;, older versions: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.12/&#34;&gt;13.12&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.14/&#34;&gt;13.14&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.16/&#34;&gt;13.16&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.18/&#34;&gt;13.18&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.20/&#34;&gt;13.20&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have this in your &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;init file&lt;/a&gt; (usually &lt;code&gt;~/.emacs&lt;/code&gt;). If you already have &lt;code&gt;custom-set-variables&lt;/code&gt;, merge its contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(custom-set-variables&#xA; ;; custom-set-variables was added by Custom.&#xA; ;; If you edit it by hand, you could mess it up, so be careful.&#xA; ;; Your init file should contain only one such instance.&#xA; ;; If there is more than one, they won&#39;t work right.&#xA; &#39;(package-archives&#xA;   (quote&#xA;    ((&#34;gnu&#34; . &#34;https://elpa.gnu.org/packages/&#34;)&#xA;     (&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;)))))&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run emacs, and evaluate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-refresh-contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then follow by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET haskell-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Voilà! &lt;code&gt;haskell-mode&lt;/code&gt; is installed! You should be able to edit Haskell source code in color now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Haskell-mode&lt;/code&gt; has much much more to offer but the above should get you going!&lt;/p&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;For setup instructions, please consult the integrated &lt;code&gt;haskell-mode&lt;/code&gt; Info manual which can be accessed after installation via &lt;code&gt;M-x info-display-manual [RET] haskell-mode&lt;/code&gt;. Alternatively, you can also direct your browser to the &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;the online haskell-mode manual&lt;/a&gt; for setup and user guide.&lt;/p&gt; &#xA;&lt;h2&gt;Installation - more information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; supports GNU Emacs version 25.1 or later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is available from &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; (releases) and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; (git snapshots). The latter will generally be considerably more up-to-date, and is recommended for most users.&lt;/p&gt; &#xA;&lt;p&gt;Other means of obtaining &lt;code&gt;haskell-mode&lt;/code&gt; include &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt; and &lt;a href=&#34;https://packages.debian.org/search?keywords=haskell-mode&#34;&gt;Debian package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation from git repository&lt;/h2&gt; &#xA;&lt;p&gt;Running &lt;code&gt;haskell-mode&lt;/code&gt; directly from sources is easy but requires a little preparation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/haskell/haskell-mode.git&lt;/code&gt; into a suitable directory, e.g. &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt; where &lt;code&gt;~&lt;/code&gt; stands for your home directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Assuming you have unpacked the various haskell-mode modules (&lt;code&gt;haskell-mode.el&lt;/code&gt; and the rest) in the directory &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt;, you need to generate various files, the autoloads file (&lt;code&gt;haskell-mode-autoloads.el&lt;/code&gt;) is one among them. Invoke:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make EMACS=/path/to/your/emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then adding the following command to your &lt;code&gt;.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-to-list &#39;load-path &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;(require &#39;haskell-mode-autoloads)&#xA;(add-to-list &#39;Info-default-directory-list &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation from git repository on macOS&lt;/h3&gt; &#xA;&lt;p&gt;There are a couple of things to note if you want to install directly from git on macOS systems, as of version 10.13 High Sierra:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The version of makeinfo that is installed by default in /usr/bin is quite old and will cause the above make command to exit with an error. Installing the texinfo package using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; will fix this. Be sure to follow the post-install instructions to add its bin directory to your shell&#39;s PATH variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are running an Emacs distribution packaged as a macOS application. such as the one available at &lt;a href=&#34;https://emacsformacosx.com/&#34;&gt;https://emacsformacosx.com/&lt;/a&gt;, you&#39;ll need to add its executable to your PATH before the system&#39;s default Emacs version. That project&#39;s &lt;a href=&#34;https://emacsformacosx.com/tips&#34;&gt;Tips and Tricks&lt;/a&gt; page has detailed instructions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you followed the above you are just a couple of steps away from contributing to &lt;code&gt;haskell-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is actively seeking contributions from users of &lt;code&gt;haskell-mode&lt;/code&gt;. For more information have a look at &lt;a href=&#34;https://github.com/haskell/haskell-mode/wiki/Contributing&#34;&gt;the wiki page on contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>syl20bnr/spacemacs</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/syl20bnr/spacemacs</id>
    <link href="https://github.com/syl20bnr/spacemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it&#39;s Emacs *and* Vim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;top&#34; id=&#34;fork-destination-box&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://develop.spacemacs.org&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&#34; alt=&#34;Made with Spacemacs&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://github.com/syl20bnr/spacemacs/raw/655e2886d88f79f4da01d607d29342e7447cad65/assets/gplv3.png&#34; alt=&#34;GPLv3 Software&#34; align=&#34;right&#34; width=&#34;70&#34; height=&#34;28&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.twitter.com/spacemacs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/tXSoThF.png&#34; alt=&#34;Twitter&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/title2.png&#34; alt=&#34;Spacemacs&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#core-pillars&#34;&gt;philosophy&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#who-can-benefit-from-this&#34;&gt;for whom?&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#screenshots&#34;&gt;screenshots&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION.html&#34;&gt;documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&#34;&gt;contribute&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#achievements&#34;&gt;achievements&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join Chat.svg&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/p4MddFu6Ag&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml&#34;&gt;&lt;img src=&#34;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml/badge.svg?branch=develop&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paypal-Donate-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shop.spreadshirt.com/spacemacs-shop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Shop-T--Shirts-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.slant.co/topics/12/~what-are-the-best-programming-text-editors&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slant-Recommend-ff69b4.svg?sanitize=true&#34; alt=&#34;Recommend it&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick Install&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This assumes you don&#39;t have an existing Emacs setup and want to run Spacemacs as your config. If you do have one, look at the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;full installation instructions&lt;/a&gt; for other options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %appdata%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $env:appdata/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#getting-help&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#emacs&#34;&gt;Emacs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#linux-distros&#34;&gt;Linux distros&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#macos&#34;&gt;macOS&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-emacs&#34;&gt;Install emacs&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-emacs-plus&#34;&gt;Using emacs-plus&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-emacs-mac&#34;&gt;Using emacs-mac&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-cask&#34;&gt;Using cask&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#other-ways&#34;&gt;Other ways&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-source-code-pro-font&#34;&gt;Install Source Code Pro font&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs&#34;&gt;Install Spacemacs&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#windows&#34;&gt;Windows&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs-in-windows&#34;&gt;Install Spacemacs in Windows&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#default-installation&#34;&gt;Default installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#alternative-installations&#34;&gt;Alternative installations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#modify-home-environment-variable&#34;&gt;Modify HOME environment variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#modify-spacemacs-start-directory-variable&#34;&gt;Modify spacemacs-start-directory variable&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#spacemacs-logo&#34;&gt;Spacemacs logo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#update&#34;&gt;Update&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#rolling-update-on-develop&#34;&gt;Rolling update (on develop)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#automatic-update-on-master-branch&#34;&gt;Automatic update (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#manual-update-on-master-branch&#34;&gt;Manual update (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#revert-to-a-specific-version-on-master-branch&#34;&gt;Revert to a specific version (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#quotes&#34;&gt;Quotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#contributions&#34;&gt;Contributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#communities&#34;&gt;Communities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#spacemacs-everywhere&#34;&gt;Spacemacs Everywhere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#supporting-spacemacs&#34;&gt;Supporting Spacemacs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is a new way of experiencing Emacs -- it&#39;s a sophisticated and polished set-up, focused on ergonomics, mnemonics and consistency.&lt;/p&gt; &#xA;&lt;p&gt;Just clone and launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer&#39;s &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to try.&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Being able to quickly switch between input styles, makes Spacemacs a great tool for pair-programming.&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs is currently in beta, and any contributions are very welcome.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/spacemacs-python.png&#34; alt=&#34;spacemacs_python&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access the Spacemacs documentation with &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you&#39;ll love the distraction free UI and its functional mode-line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing the &lt;kbd&gt;space bar&lt;/kbd&gt; or &lt;kbd&gt;alt-m&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like &lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the project commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely organised in configuration layers following a set of &lt;a href=&#34;https://develop.spacemacs.org/doc/CONVENTIONS&#34;&gt;conventions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Comprehensive documentation is available for each layer by pressing &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also check the &lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION&#34;&gt;general documentation&lt;/a&gt;, &lt;a href=&#34;https://develop.spacemacs.org/doc/QUICK_START&#34;&gt;quick start guide&lt;/a&gt; and the &lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Help&lt;/h1&gt; &#xA;&lt;p&gt;If you need help, ask your question in the &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt; and a member of the community will help you out.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer IRC, connect to the &lt;a href=&#34;https://irc.gitter.im/&#34;&gt;Gitter Chat IRC server&lt;/a&gt; and join the &lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;Last but not least there are a lot of high class tutorials available on YouTube:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jack of Some&#39;s Spacemacs related channel &lt;a href=&#34;https://www.youtube.com/watch?v=r-BHx7VNX5s&amp;amp;list=PLd_Oyt6lAQ8Rxb0HUnGbRrn6R4Cdt2yoI&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GDQuest&#39;s Game Design oriented tutorials to Spacemacs &lt;a href=&#34;https://www.youtube.com/watch?v=hCNOB5jjtmc&amp;amp;list=PLhqJJNjsQ7KFkMVBunWWzFD8SlH714qm4&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Practicalli&#39;s Clojure tutorials based on Spacemacs &lt;a href=&#34;https://www.youtube.com/watch?v=ZKuQDrQLAnc&amp;amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eivind Fonn&#39;s classic Spacemacs ABC &lt;a href=&#34;https://www.youtube.com/watch?v=ZFV5EqpZ6_s&amp;amp;list=PLrJ2YN5y27KLhd3yNs2dR8_inqtEiEweE&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is an extension of a popular text editor called Emacs. Thus you need to first install base Emacs and then download the Spacemacs extension files with Git.&lt;/p&gt; &#xA;&lt;h2&gt;Emacs&lt;/h2&gt; &#xA;&lt;p&gt;Spacemacs requires Emacs 27.1 or above. The development version of Emacs is not &lt;em&gt;officially&lt;/em&gt; supported, but it should nevertheless be expected to work.&lt;/p&gt; &#xA;&lt;p&gt;Some modes require third-party tools that you&#39;ll have to install via your favorite package manager.&lt;/p&gt; &#xA;&lt;h3&gt;Linux distros&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;emacs&lt;/code&gt; package with your linux distributions package manager.&lt;/p&gt; &#xA;&lt;p&gt;Do not install the &lt;code&gt;xemacs&lt;/code&gt; package. It&#39;s not supported by Spacemacs. XEmacs is an old fork of Emacs. The X in its name is unrelated to X11.&lt;/p&gt; &#xA;&lt;p&gt;Emacs has graphical support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some linux distributions support only emacs versions older than 27.1. In this case you should &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html&#34;&gt;built from source&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;h4&gt;Install emacs&lt;/h4&gt; &#xA;&lt;h5&gt;Using emacs-plus&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap d12frosted/emacs-plus&#xA;&#xA;# to install Emacs 27&#xA;brew install emacs-plus@27 --with-spacemacs-icon&#xA;# or to install Emacs 28&#xA;brew install emacs-plus@28 --with-spacemacs-icon&#xA;&#xA;brew link emacs-plus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using emacs-mac&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap railwaycat/emacsmacport&#xA;brew install emacs-mac&#xA;brew link emacs-mac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using cask&lt;/h5&gt; &#xA;&lt;p&gt;Homebrew now recommends to use the cask version with the following message: &#34;Please try the Cask for a better-supported Cocoa version&#34;. To install the cask version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install --cask emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs a pre-built package from &lt;a href=&#34;https://emacsformacosx.com/&#34;&gt;https://emacsformacosx.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Other ways&lt;/h5&gt; &#xA;&lt;p&gt;If you&#39;re not comfortable with the ways mentioned above, then &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsForMacOS#toc12&#34;&gt;EmacsWiki&lt;/a&gt; lists down a few ways to install Emacs for macOS.&lt;/p&gt; &#xA;&lt;h4&gt;Install Source Code Pro font&lt;/h4&gt; &#xA;&lt;p&gt;Once Emacs is installed, run the following commands in the terminal to install the default Source Code Pro font:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap homebrew/cask-fonts&#xA;brew install --cask font-source-code-pro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install Spacemacs&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; After completing the Spacemacs &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;install process&lt;/a&gt;, then it&#39;s also recommended to add the &lt;a href=&#34;https://develop.spacemacs.org/layers/+os/osx/README.html&#34;&gt;osx layer&lt;/a&gt; to your &lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#dotfile-configuration&#34;&gt;dotfile&lt;/a&gt;. Installation instructions are available in the documentation for the &lt;a href=&#34;https://develop.spacemacs.org/layers/+os/osx/README.html&#34;&gt;osx layer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the installed version of GnuTLS securely installing emacs packages may fail. In this case it is possible to install using &lt;code&gt;emacs --insecure&lt;/code&gt;. However be aware that this means your packages will be transferred using http, use at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;You might also have some issues when doing some search on your projects, you probably want to install GNU &lt;a href=&#34;https://formulae.brew.sh/formula/ripgrep&#34;&gt;ripgrep&lt;/a&gt; through homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Download the official 64-bit (x86_64) stable builds from the &lt;a href=&#34;https://ftp.gnu.org/gnu/emacs/windows/&#34;&gt;GNU FTP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also need &lt;code&gt;gzip&lt;/code&gt; and put it in your path, to download it go to the &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/gzip.htm&#34;&gt;GNUWin32 project page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Install Spacemacs in Windows&lt;/h4&gt; &#xA;&lt;p&gt;By default Emacs looks for the &lt;code&gt;.emacs.d&lt;/code&gt; directory in: &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone Spacemacs to the Roaming directory:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %appdata%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows PowerShell prompt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $env:appdata/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or if a &lt;code&gt;HOME&lt;/code&gt; environment variable has been configured, that points to your user directory: &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Clone Spacemacs to the &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; directory:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %homepath%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows PowerShell prompt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $home/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If the following error occurs after starting Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Fix it by changing the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;from Properties select the Tab “Security”,&lt;/li&gt; &#xA;   &lt;li&gt;select the button “Advanced”,&lt;/li&gt; &#xA;   &lt;li&gt;select the Tab “Owner”&lt;/li&gt; &#xA;   &lt;li&gt;change the owner to your account name&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Source: &lt;a href=&#34;https://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For efficient searches we recommend installing &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Depending on the installed version of GnuTLS securely installing emacs packages may fail. In this case it is possible to install using &lt;code&gt;emacs --insecure&lt;/code&gt;. However be aware that this means your packages will be transferred using http, use at your own risk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The period (dot) before a file or folder name, means that it&#39;s hidden. To show hidden files and folders:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press the Windows key&lt;/li&gt; &#xA;   &lt;li&gt;Type &lt;code&gt;file explorer options&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select the &lt;code&gt;View&lt;/code&gt; tab at the top&lt;/li&gt; &#xA;   &lt;li&gt;Check &lt;code&gt;Show hidden files, folders and drives&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;Default installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have an existing Emacs configuration, back it up first by running the following code in your terminal:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~&#xA;mv .emacs.d .emacs.d.bak&#xA;mv .emacs .emacs.bak&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t forget to backup and &lt;em&gt;remove&lt;/em&gt; the &lt;code&gt;~/.emacs&lt;/code&gt; file. Otherwise Spacemacs &lt;strong&gt;WILL NOT&lt;/strong&gt; be able to load. Because that file prevents Emacs from loading the proper initialization file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository with &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note: Windows users&lt;/strong&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs-in-windows&#34;&gt;Windows section&lt;/a&gt; for the correct clone path.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or in case you have a limited internet connection or speed,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Install the default fonts&lt;/p&gt; &lt;p&gt;It&#39;s recommended to install &lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro&#34;&gt;Source Code Pro&lt;/a&gt; by Adobe, as the default font. It ensures that, for example the symbols on the modeline (bottom bar) looks correct. It&#39;s also recommended to use a &#34;Fallback font&#34;. These depend on the system:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GNU/Linux: &lt;em&gt;NanumGothic&lt;/em&gt; (package named &lt;em&gt;fonts-nanum&lt;/em&gt; on Debian, for example)&lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;em&gt;Arial Unicode MS&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;em&gt;MS Gothic&lt;/em&gt; or &lt;em&gt;Lucida Sans Unicode&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If the modeline doesn&#39;t look similar to the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&#34;&gt;picture at the top of this page&lt;/a&gt;, then make sure you have the correct fallback font installed.&lt;/p&gt; &lt;p&gt;If you&#39;re running in a terminal then you&#39;ll also need to change the terminals font settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch Emacs. Spacemacs will automatically install the packages it requires.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch Emacs, and answer the questions in the Dotfile wizard installer. If you are new to Emacs and Spacemacs, then it&#39;s fine to just accept the default choices. It&#39;s easy to try the other choices later, without having to reinstall Spacemacs. They can be changed in the dotfile &lt;code&gt;~/.spacemacs&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After answering the questions, then Spacemacs starts downloading and installing the packages it requires. When the packages have been installed. Restart Emacs to complete the installation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; If you are behind a firewall or similar and you get an error regarding package downloads then you may try to disable the HTTPS protocol by starting Emacs with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;emacs --insecure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but this should be a last resort because of the security implications.&lt;/p&gt; &#xA;&lt;p&gt;You can set the &lt;code&gt;dotspacemacs-elpa-https&lt;/code&gt; variable to &lt;code&gt;nil&lt;/code&gt; in your dotfile &lt;code&gt;~/.spacemacs&lt;/code&gt; but this has the same security implications as the insecure flag. You may also want to clear out your &lt;code&gt;.emacs.d/elpa&lt;/code&gt; directory before doing this, so that any corrupted packages you may have downloaded will be re-installed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;error: Package &#39;package-build-&#39; is unavailable&lt;/code&gt; may occur due to heavy network taffic. You can fix it by setting the &lt;code&gt;dotspacemacs-elpa-timeout&lt;/code&gt; variable to &lt;code&gt;70&lt;/code&gt; in your dotfile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Warning (bytecomp)&lt;/code&gt; and other compilation warnings are perfectly normal. If you&#39;re curious, you can find out why these occur &lt;a href=&#34;https://github.com/quelpa/quelpa/issues/90#issuecomment-137982713&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the mode-line turns red then be sure to consult the &lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternative installations&lt;/h2&gt; &#xA;&lt;p&gt;There are currently, two supported, alternative locations, for a Spacemacs configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Modify HOME environment variable&lt;/h3&gt; &#xA;&lt;p&gt;This solution is ideal for quickly trying Spacemacs without compromising your existing configuration. Clone Spacemacs outside the Emacs dotdirectory &lt;code&gt;~/.emacs.d&lt;/code&gt; and modify the HOME environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir ~/spacemacs&#xA;git clone https://github.com/syl20bnr/spacemacs.git ~/spacemacs/.emacs.d&#xA;HOME=~/spacemacs emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using the Fish shell, then you&#39;ll need to modify the last command to: &lt;code&gt;env HOME=$HOME/spacemacs emacs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Modify spacemacs-start-directory variable&lt;/h3&gt; &#xA;&lt;p&gt;This solution is better suited to &#34;embed&#34; Spacemacs into your own configuration. If you&#39;ve cloned Spacemacs into &lt;code&gt;~/.emacs.d/spacemacs/&lt;/code&gt;, then drop the following lines in the &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq spacemacs-start-directory &#34;~/.emacs.d/spacemacs/&#34;)&#xA;(load-file (concat spacemacs-start-directory &#34;init.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Spacemacs logo&lt;/h2&gt; &#xA;&lt;p&gt;For Linux users, create &lt;code&gt;spacemacs.desktop&lt;/code&gt; in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; using &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/etc/emacs.desktop&#34;&gt;this&lt;/a&gt; as a reference. Change the &lt;code&gt;Name&lt;/code&gt; parameter to &lt;code&gt;Name=Spacemacs&lt;/code&gt; and the &lt;code&gt;Icon&lt;/code&gt; parameter to &lt;code&gt;Icon=/PATH/TO/EMACSD/core/banners/img/spacemacs.png&lt;/code&gt; where &lt;code&gt;PATH/TO/EMACSD&lt;/code&gt; is the path to your &lt;code&gt;.emacs.d&lt;/code&gt; directory, usually &lt;code&gt;~/.emacs.d&lt;/code&gt; or &lt;code&gt;~/.config/emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For macOS users, you need to &lt;a href=&#34;https://github.com/nashamri/spacemacs-logo&#34;&gt;download the .icns version of the logo&lt;/a&gt;, then &lt;a href=&#34;https://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/&#34;&gt;change the logo on the Dock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Update&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs supports two different update schemes, the default is a rolling update scheme based on the latest version of packages available. This version can be found on the &lt;code&gt;develop&lt;/code&gt; branch and is updated by a simple git pull.&lt;/p&gt; &#xA;&lt;p&gt;The second depreciated one is a fixed version scheme which is based on a stable set of packages. This version can be found on the &lt;code&gt;master&lt;/code&gt; branch and will show a notification when a new version is available. Be warned this has not been updated in a long time now so packages will be very old.&lt;/p&gt; &#xA;&lt;h2&gt;Rolling update (on develop)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull --rebase&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Automatic update (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;When a new version is available then a little arrow appears in the mode-line.&lt;/p&gt; &#xA;&lt;p&gt;Its color depends on the number of versions that have been released since your last update. Green means that you have a recent version, orange and red means that you have an older version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/powerline-update.png&#34; alt=&#34;powerline_update&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click on the arrow to update Spacemacs to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Manual update (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;Remove the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; angle brackets when you&#39;re typing the lines below into your shell. And replace the text: &#34;tag version which you are updating to&#34; with a tagged version. This page lists the &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/tags&#34;&gt;latest tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git fetch&#xA;git reset --hard &amp;lt;tag version which you are updating to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Revert to a specific version (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;To revert to a specific version, just checkout the corresponding branch. For instance to revert to version &lt;code&gt;0.200&lt;/code&gt;, type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git checkout origin/release-0.200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;After updating Spacemacs (either manually or automatically), then you also should check if any updates are available for your packages. On the Spacemacs Home Buffer &lt;kbd&gt;SPC b h&lt;/kbd&gt;, click (press &lt;kbd&gt;RET&lt;/kbd&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; button.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quotes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6&#34;&gt;Quote&lt;/a&gt; by &lt;a href=&#34;https://github.com/ashnur&#34;&gt;ashnur&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis&#xA;on the deck as a freerider.»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb&#34;&gt;Quote&lt;/a&gt; by &lt;a href=&#34;https://github.com/deuill&#34;&gt;deuill&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT&#xA;&#xA; That is all»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to date and to propose great and useful configurations for all the things!&lt;/p&gt; &#xA;&lt;p&gt;Before contributing be sure to consult the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;https://develop.spacemacs.org/doc/CONVENTIONS&#34;&gt;conventions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Communities&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs.stackexchange.com/questions/tagged/spacemacs&#34;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/spacemacs&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Spacemacs Everywhere&lt;/h1&gt; &#xA;&lt;p&gt;Once you&#39;ve learned the Spacemacs key bindings, you can use them in other IDEs/tools, thanks to the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcoIeni/intellimacs&#34;&gt;Intellimacs&lt;/a&gt; - Spacemacs&#39; like key bindings for IntelliJ platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcoIeni/spaceclipse&#34;&gt;Spaceclipse&lt;/a&gt; - Spacemacs’ like key bindings for Eclipse&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpaceVim/SpaceVim&#34;&gt;SpaceVim&lt;/a&gt; - A community-driven modular vim distribution&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VSpaceCode/VSpaceCode&#34;&gt;VSpaceCode&lt;/a&gt; - Spacemacs’ like key bindings for Visual Studio Code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the initialization and core files&lt;/li&gt; &#xA; &lt;li&gt;all the layer files&lt;/li&gt; &#xA; &lt;li&gt;the documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the packages shipped in this repository, you can refer to the files header.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nashamri/spacemacs-logo&#34;&gt;Spacemacs logo&lt;/a&gt; by &lt;a href=&#34;https://github.com/nashamri&#34;&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Supporting Spacemacs&lt;/h1&gt; &#xA;&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt; &#xA;&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs and more in the &lt;a href=&#34;https://shop.spreadshirt.com/spacemacs-shop&#34;&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to show your support financially, then you can contribute to &lt;a href=&#34;https://salt.bountysource.com/teams/spacemacs&#34;&gt;Bountysource&lt;/a&gt;, or buy a drink for the maintainer by clicking on the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#top&#34;&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you used spacemacs in a project, and you want to show that fact, you can use the spacemacs badge: &lt;a href=&#34;https://develop.spacemacs.org&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&#34; alt=&#34;Built with Spacemacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Markdown:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](https://develop.spacemacs.org)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For HTML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&#34;https://develop.spacemacs.org&#34;&amp;gt;&amp;lt;img alt=&#34;Built with Spacemacs&#34; src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg&#34; /&amp;gt;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Org-mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;[[https://develop.spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nelhage/elisp</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/nelhage/elisp</id>
    <link href="https://github.com/nelhage/elisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nelhage&#39;s emacs configuration&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>doomemacs/doomemacs</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/doomemacs/doomemacs</id>
    <link href="https://github.com/doomemacs/doomemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Doom Emacs&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt; • &lt;a href=&#34;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&#34;&gt;Screenshots&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&#34; alt=&#34;Made with Doom Emacs&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Supports-Emacs_27.1--28.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Supports Emacs 27.1 - 28.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/doomemacs/doomemacs/master?style=flat-square&#34; alt=&#34;Latest commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square&#34; alt=&#34;Build status: master&#34;&gt; &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.doomemacs.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&#34; alt=&#34;Discourse server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&#34; alt=&#34;Doom Emacs Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&#34;&gt;Getting help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;a href=&#34;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Doom is a configuration framework for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; &#xA;&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; &#xA; &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; &#xA; &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; &#xA; &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; &#xA; &lt;li&gt;A declarative &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; &#xA; &lt;li&gt;Optional vim emulation powered by &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&#34;&gt;more&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; &#xA; &lt;li&gt;A Spacemacs-esque &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&#34;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; &#xA; &lt;li&gt;A rule-based &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&#34;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; &#xA; &lt;li&gt;Per-file indentation style detection and &lt;a href=&#34;http://editorconfig.org/&#34;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; &#xA; &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;ivy&lt;/a&gt; or &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; &#xA; &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; &#xA; &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git 2.23+&lt;/li&gt; &#xA; &lt;li&gt;Emacs 27.1+ (&lt;em&gt;27.2 is recommended&lt;/em&gt;, or &lt;a href=&#34;https://www.emacswiki.org/emacs/GccEmacs&#34;&gt;native-comp&lt;/a&gt;. &lt;strong&gt;29+ is not supported&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; &#xA; &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Doom is comprised of &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d&#xA;~/.emacs.d/bin/doom install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&#34;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.emacs.d/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom build&lt;/code&gt; to recompile all installed packages (use this if you up/downgrade Emacs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/6&#34;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/5&#34;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/7&#34;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting help&lt;/h1&gt; &#xA;&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Our documentation&lt;/a&gt; covers many use cases. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&#34;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&#34;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&#34;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&#34;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&#34;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; &#xA;   &lt;li&gt;Your issue may be documented in the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues&#34;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&#34; alt=&#34;Donate on liberapay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&#34;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t hesitate to &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues/new&#34;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;liberapay&lt;/a&gt; or &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/epkg</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/emacscollective/epkg</id>
    <link href="https://github.com/emacscollective/epkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Browse the Emacsmirror package database&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Browse the Emacsmirror package database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides access to a local copy of the [[https://emacsmirror.net][Emacsmirror]] package database. It provides low-level functions for querying the database and a &lt;del&gt;package.el&lt;/del&gt;-like user interface for browsing the available packages.&lt;/p&gt; &#xA;&lt;p&gt;The Emacsmirror is a growing collection of Emacs Lisp packages. All mirrored packages are available as Git repositories. In most cases this is done by mirroring the upstream Git repository, but if upstream uses something else, then the mirror nevertheless makes the package available as a Git repository.&lt;/p&gt; &#xA;&lt;p&gt;One primary purpose of the Emacsmirror is to provide a comprehensive list of available Emacs packages, including packages which have gone out of fashion (but might later prove to be useful still).&lt;/p&gt; &#xA;&lt;p&gt;For more information see the [[https://emacsmirror.net/manual/epkg][manual]] and the [[https://emacsmirror.net][Emacsmirror]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cmugang/dotemacs</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/cmugang/dotemacs</id>
    <link href="https://github.com/cmugang/dotemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;이맥스 설정 파일&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Read me.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>atgreen/emacs</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/atgreen/emacs</id>
    <link href="https://github.com/atgreen/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My emacs config&lt;/p&gt;&lt;hr&gt;&lt;p&gt;;; ========================================================================= ;; Anthony Green&#39;s GNU Emacs configuration file. ;; ;; Copyright (C) 2009 Anthony Green &lt;a href=&#34;mailto:green@moxielogic.com&#34;&gt;green@moxielogic.com&lt;/a&gt; ;; ;; This file is free software: you can redistribute it and/or modify ;; it under the terms of the GNU General Public License as published ;; by the Free Software Foundation, either version 3 of the License, ;; or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;;; This file is distributed in the hope that it will be useful, but ;; WITHOUT ANY WARRANTY; without even the implied warranty of ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU ;; General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;;; You should have received a copy of the GNU General Public License ;; along with this file. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;. ;; =========================================================================&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rmloveland/zoom-to-point</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/rmloveland/zoom-to-point</id>
    <link href="https://github.com/rmloveland/zoom-to-point" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs functions that zoom in on the text at point.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Exposes a command, &lt;code&gt;zoom-toggle&#39;, which will increase or decrease the size of the text at point, and a variable, &lt;/code&gt;&lt;em&gt;default-zoom-level&lt;/em&gt;&#39;, which determines the change in size.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>e2r0r/joy-emacs</title>
    <updated>2022-05-30T02:07:33Z</updated>
    <id>tag:github.com,2022-05-30:/e2r0r/joy-emacs</id>
    <link href="https://github.com/e2r0r/joy-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;enjoy with emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#title README&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;mailto:breeze.guangfeng@googlemail.com&#34;&gt;breeze.guangfeng@googlemail.com&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;my .emacs and site-lisp backup here&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add .emacs for console&lt;/li&gt; &#xA; &lt;li&gt;fix .emacs with classic theme supporting&lt;/li&gt; &#xA; &lt;li&gt;add SML-Mode&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>