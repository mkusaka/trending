<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-29T01:51:39Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-lsp/lsp-ui</title>
    <updated>2023-10-29T01:51:39Z</updated>
    <id>tag:github.com,2023-10-29:/emacs-lsp/lsp-ui</id>
    <link href="https://github.com/emacs-lsp/lsp-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UI integrations for lsp-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp-ui&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/lsp-ui&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lsp-ui-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/lsp-ui&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/lsp-ui-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/swuxy5AAgT&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacs-lsp/lsp-ui/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/#lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/#lsp-ui-sideline&#34;&gt;lsp-ui-sideline:&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/#lsp-ui-peek&#34;&gt;lsp-ui-peek:&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/#lsp-ui-doc&#34;&gt;lsp-ui-doc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/#lsp-ui-imenu&#34;&gt;lsp-ui-imenu&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;This package contains all the higher level UI modules of &lt;code&gt;lsp-mode&lt;/code&gt;, like flycheck support and code lenses.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;lsp-mode&lt;/code&gt; automatically activates &lt;code&gt;lsp-ui&lt;/code&gt; unless &lt;code&gt;lsp-auto-configure&lt;/code&gt; is set to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You only have to put &lt;code&gt;(use-package lsp-ui)&lt;/code&gt; in your config and the package will work out of the box. (&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Or use the builtin package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install [RET] lsp-ui [RET]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;lsp-ui-sideline:&lt;/h2&gt; &#xA;&lt;p&gt;Show informations of the symbols on the current line. It also show flycheck diagnostics and LSP code actions &lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/images/lsp-line.gif&#34; alt=&#34;lsp-line&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-sideline-show-diagnostics&lt;/code&gt; show diagnostics messages in sideline&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-sideline-show-hover&lt;/code&gt; show hover messages in sideline&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-sideline-show-code-actions&lt;/code&gt; show code actions in sideline&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-sideline-update-mode&lt;/code&gt; When set to &#39;line&#39; the information will be updated when user changes current line otherwise the information will be updated when user changes current point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-sideline-delay&lt;/code&gt; seconds to wait before showing sideline&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;lsp-ui-peek:&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://code.visualstudio.com/docs/editor/editingevolved#_peek&#34;&gt;peek&lt;/a&gt; feature &lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/images/lsp-xref.gif&#34; alt=&#34;lsp-xref&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may remap &lt;code&gt;xref-find-{definitions,references}&lt;/code&gt; (bound to &lt;kbd&gt;M-.&lt;/kbd&gt; &lt;kbd&gt;M-?&lt;/kbd&gt; by default):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key lsp-ui-mode-map [remap xref-find-definitions] #&#39;lsp-ui-peek-find-definitions)&#xA;(define-key lsp-ui-mode-map [remap xref-find-references] #&#39;lsp-ui-peek-find-references)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a window-local jump list dedicated to cross references:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(lsp-ui-peek-jump-backward)&#xA;(lsp-ui-peek-jump-forward)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other cross references:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(lsp-ui-peek-find-workspace-symbol &#34;pattern 0&#34;)&#xA;;; If the server supports custom cross references&#xA;(lsp-ui-peek-find-custom &#39;base &#34;$cquery/base&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-peek-enable&lt;/code&gt; enable ‘lsp-ui-peek’&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-peek-show-directory&lt;/code&gt; show the directory of files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;lsp-ui-doc&lt;/h2&gt; &#xA;&lt;p&gt;Show object documentation at point in a child frame. &lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/images/lsp-ui-doc.gif&#34; alt=&#34;lsp-ui-doc&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Show documentation in a WebKit widget &lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/images/lsp-ui-doc-webkit.png&#34; alt=&#34;lsp-ui-doc-webkit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Focus into lsp-ui-doc-frame &lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/images/lsp-ui-doc-focus-frame.gif&#34; alt=&#34;lsp-ui-doc-focus-frame&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-doc-enable&lt;/code&gt; enable lsp-ui-doc&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-doc-position&lt;/code&gt; Where to display the doc&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-doc-delay&lt;/code&gt; Number of seconds before showing the doc&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-doc-show-with-cursor&lt;/code&gt; When non-nil, move the cursor over a symbol to show the doc&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-doc-show-with-mouse&lt;/code&gt; When non-nil, move the mouse pointer over a symbol to show the doc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;lsp-ui-imenu&lt;/h2&gt; &#xA;&lt;p&gt;Show imenu entries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-ui/master/images/lsp-ui-imenu.png&#34; alt=&#34;lsp-ui-doc&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-imenu-kind-position&lt;/code&gt; place to show entries kind&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-imenu-buffer-position&lt;/code&gt; place to show the buffer window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-imenu-window-width&lt;/code&gt; set window width&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-imenu-window-fix-width&lt;/code&gt; when non-nil, the window will not be resizable (eg. unaffected by &lt;code&gt;balance-windows&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-imenu--custom-mode-line-format&lt;/code&gt; mode line format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-imenu-auto-refresh&lt;/code&gt; auto refresh when necessary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-ui-imenu-refresh-delay&lt;/code&gt; delay to refresh imenu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any kind of help is appreciated. If you want to help us maintaining this package, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ui/issues/332&#34;&gt;leave a note&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thierryvolpiatto/wfnames</title>
    <updated>2023-10-29T01:51:39Z</updated>
    <id>tag:github.com,2023-10-29:/thierryvolpiatto/wfnames</id>
    <link href="https://github.com/thierryvolpiatto/wfnames" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Edit filenames like Wdired&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Wfnames&lt;/p&gt; &#xA;&lt;p&gt;Allows editing filenames.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Allows editing lists of absolute files, this allows editing the directory parts as well.&lt;/p&gt; &#xA;&lt;p&gt;Modified lines are highlighted, maybe in a different color when about to overwrite an existing file.&lt;/p&gt; &#xA;&lt;p&gt;File completion is provided.&lt;/p&gt; &#xA;&lt;p&gt;Not tighted to a directory, allows editing files from various directories.&lt;/p&gt; &#xA;&lt;p&gt;Do not provide edition of permissions and will not.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Motivation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Wdired must be patched to allow editing a list of absolute filenames in Emacs versions before Emacs-29. Also Wdired depends on a default directory which is not relevant and prone to errors when editing absolute filenames that come from various directories. Using this package in Helm allows getting rid of Wdired advices (that have been merged in Emacs-29+).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package have no user interface, but you can easily use it with [[https://github.com/emacs-helm/helm][Helm]] package by customizing =helm-ff-edit-marked-files-fn= variable. If you are not using [[https://github.com/emacs-helm/helm][Helm]] you will have to define yourself a function that call =wfnames-setup-buffer= with a list of files as argument.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once in the Wfnames buffer, edit your filenames and hit =C-c C-c= to save your changes. You have completion on filenames and directories with =TAB= but if you are using [[https://github.com/victorhge/iedit][Iedit]] package and it is in action use =M-TAB=.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>svaante/dape</title>
    <updated>2023-10-29T01:51:39Z</updated>
    <id>tag:github.com,2023-10-29:/svaante/dape</id>
    <link href="https://github.com/svaante/dape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debug Adapter Protocol for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Dape - Debug Adapter Protocol for Emacs #+author: Daniel Pettersson #+property: header-args :results silent #+language: en&lt;/p&gt; &#xA;&lt;p&gt;Dape is an debug adapter client for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;del&gt;dape-configs&lt;/del&gt; to set up your debug adapter configurations. To initiate debugging sessions, use the command &lt;del&gt;dape&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For complete functionality, activate &lt;del&gt;eldoc-mode&lt;/del&gt; in your source buffers and enable &lt;del&gt;repeat-mode&lt;/del&gt; for ergonomics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Log breakpoints&lt;/li&gt; &#xA; &lt;li&gt;Conditional breakpoints&lt;/li&gt; &#xA; &lt;li&gt;Variable explorer&lt;/li&gt; &#xA; &lt;li&gt;Variable watch&lt;/li&gt; &#xA; &lt;li&gt;Variable hover with &lt;del&gt;eldoc&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;REPL&lt;/li&gt; &#xA; &lt;li&gt;Memory viewer with &lt;del&gt;hexl&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;compile&lt;/del&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;Debug adapter configuration ergonomics&lt;/li&gt; &#xA; &lt;li&gt;No dependencies&lt;/li&gt; &#xA; &lt;li&gt;Inline variable hints (experimental)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://raw.githubusercontent.com/svaante/dape/resources/screenshot.png]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://raw.githubusercontent.com/svaante/dape/resources/screenshot_inline.png]]&lt;/p&gt; &#xA;&lt;p&gt;Screenshots taken with [[https://github.com/protesilaos/ef-themes][ef-trio-dark]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration Currently =Dape= does not come with any debug adapter configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package dape ;; Currently only on github :straight (dape :type git :host github :repo &#34;svaante/dape&#34;) :config ;; Add inline variable hints, this feature is highly experimental ;; (setq dape-inline-variables t)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; To remove info buffer on startup&#xA;;; (remove-hook &#39;dape-on-start-hooks &#39;dape-info)&#xA;&#xA;;; To remove repl buffer on startup&#xA;;; (remove-hook &#39;dape-on-start-hooks &#39;dape-repl)&#xA;&#xA;;; By default dape uses gdb keybinding prefix&#xA;;; (setq dape-key-prefix &#34;\C-x\C-a&#34;)&#xA;&#xA;;; Kill compile buffer on build success&#xA;;; (add-hook &#39;dape-compile-compile-hooks &#39;kill-buffer)&#xA;&#xA;;; Projectile users&#xA;;; (setq dape-cwd-fn &#39;projectile-project-root)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Differences with dap-mode [[https://github.com/emacs-lsp/dap-mode][dap-mode]] is the most popular alternative and is of course much more mature and probably more feature rich (have not used &lt;del&gt;dap-mode&lt;/del&gt; extensively).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dape has no dependencies outside of packages included in emacs, and tries to use get as much out of them possible.&lt;/p&gt; &#xA;&lt;p&gt;Dape takes a slightly different approach to configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dape does not support &lt;del&gt;launch.json&lt;/del&gt; files, if per project configuration is needed use &lt;del&gt;dir-locals&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Tries to simplify configuration, by having just a plist.&lt;/li&gt; &#xA; &lt;li&gt;Dape tries to improve config ergonomics in &lt;del&gt;dape&lt;/del&gt; completing-read by using options to change/add plist entries in an already existing config, example: &lt;del&gt;adapter-config :program ＂/home/user/b.out＂ compile ＂gcc -g -o b.out main.c＂&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;No magic, no special variables. Instead, functions and variables are resolved before starting a new session.&lt;/li&gt; &#xA; &lt;li&gt;No batteries included. Many, suffer from a significant drawback: they&#39;re tightly coupled with the vscode extension they&#39;re bundled with. This tight coupling results in launch/attach requests being specific to each adapter, devoid of reasonable defaults as they are stored within the extension itself, leading to an ever-changing and unstable API. Consequently, attempting to include default configurations for each adapter seems like a losing proposition.&lt;/li&gt; &#xA; &lt;li&gt;Tries to be envision to how debug adapter configuration would be implemented in emacs if vscode never existed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported debug adapters In theory all debug adapters should be compatible with =Dape=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Javascript - vscode-js-debug To install &lt;del&gt;vscode-js-debug&lt;/del&gt; pull down the [[https://github.com/microsoft/vscode-js-debug][repo]]. #+begin_src sh npm install npx gulp dapDebugServer #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Example launch configuration for &lt;del&gt;node&lt;/del&gt;. #+begin_src emacs-lisp (add-to-list &#39;dape-configs `(vscode-js-node modes (js-mode js-ts-mode) host &#34;localhost&#34; port 8123 command &#34;node&#34; command-cwd &#34;path/to/vscode-js-debug/dist/&#34; command-args (&#34;src/dapDebugServer.js&#34; &#34;8123&#34;) :type &#34;pwa-node&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-find-file-buffer-default :outputCapture &#34;console&#34; :sourceMapRenames t :pauseForSourceMap nil :enableContentValidation t :autoAttachChildProcesses t :console &#34;internalConsole&#34; :killBehavior &#34;forceful&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For more information see [[https://github.com/microsoft/vscode-js-debug/blob/main/OPTIONS.md][OPTIONS.md]].&lt;/p&gt; &#xA;&lt;p&gt;** Go - delve See [[https://github.com/go-delve/delve/tree/master/Documentation/installation][delve installation]].&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;dape-configs `(delve modes (go-mode go-ts-mode) command &#34;dlv&#34; command-args (&#34;dap&#34; &#34;--listen&#34; &#34;127.0.0.1:55878&#34;) command-cwd dape-cwd-fn host &#34;127.0.0.1&#34; port 55878 :type &#34;debug&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-cwd-fn)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For more information see [[https://github.com/go-delve/delve/blob/master/Documentation/usage/dlv_dap.md][documentation]].&lt;/p&gt; &#xA;&lt;p&gt;** C, C++ and Rust Download latest [[https://github.com/vadimcn/codelldb/releases][release]] and unpack &lt;del&gt;vsix&lt;/del&gt; file with your favorite unzipper.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;dape-configs &#39;(codelldb modes (c-mode c-ts-mode c++-mode c++-ts-mode ;; Uncomment the following if you use rust-mode ;; rust-mode rust-ts-mode ) ;; Replace vadimcn.vscode-lldb with the vsix directory you just extracted command &#34;path/to/vadimcn.vscode-lldb/adapter/codelldb&#34; host &#34;localhost&#34; port 5818 command-args (&#34;--port&#34; &#34;5818&#34;) :type &#34;lldb&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-find-file)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See [[https://github.com/vadimcn/codelldb/blob/v1.10.0/MANUAL.md][manual]] for more information.&lt;/p&gt; &#xA;&lt;p&gt;** C and C++ - cppdbg Download latest [[https://github.com/microsoft/vscode-cpptools/releases][release]] and unpack &lt;del&gt;vsix&lt;/del&gt; file with your favorite unzipper. Then &lt;del&gt;chmod +x debugAdapters/bin/OpenDebugAD7&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Replace ms-vscode.cpptools with the vsix directory you just extracted (setq dape-cppdbg-command &#34;path/to/ms-vscode.cpptools/debugAdapters/bin/OpenDebugAD7&#34;) (add-to-list &#39;dape-configs `(cppdbg modes (c-mode c-ts-mode c++-mode c++-ts-mode) command-cwd ,(file-name-directory dape-cppdbg-command) command dape-cppdbg-command :type &#34;cppdbg&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-find-file :MIMode ,(cond ((executable-find &#34;gdb&#34;) &#34;gdb&#34;) ((executable-find &#34;lldb&#34;) &#34;lldb&#34;)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See [[https://code.visualstudio.com/docs/cpp/launch-json-reference][options]].&lt;/p&gt; &#xA;&lt;p&gt;** Python - debugpy Install debugpy with pip &lt;del&gt;pip install debugpy&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;dape-configs `(debugpy modes (python-ts-mode python-mode) command &#34;python3&#34; command-args (&#34;-m&#34; &#34;debugpy.adapter&#34;) :type &#34;executable&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-find-file-buffer-default)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See [[https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings][options]].&lt;/p&gt; &#xA;&lt;p&gt;** Godot Configure debug adapter port under &#34;Editor&#34; -&amp;gt; &#34;Editor Settings&#34; -&amp;gt; &#34;Debug Adapter&#34;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;dape-configs &#39;(godot-launch modes (gdscript-mode) host &#34;127.0.0.1&#34; port 6006 :type &#34;server&#34; :request &#34;launch&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Other untested adapters If you find a working configuration for any other debug adapter please submit a PR.&lt;/p&gt; &#xA;&lt;p&gt;See [[https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/][microsofts list]] for other adapters, your mileage will vary.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Roadmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More options for indicator placement&lt;/li&gt; &#xA; &lt;li&gt;Improving completion in REPL&lt;/li&gt; &#xA; &lt;li&gt;Usage of &#34;setVariable&#34; inside of &lt;del&gt;&lt;em&gt;dape-info&lt;/em&gt;&lt;/del&gt; buffer&lt;/li&gt; &#xA; &lt;li&gt;Improve memory reader with auto reload and write functionality&lt;/li&gt; &#xA; &lt;li&gt;Individual thread controls&lt;/li&gt; &#xA; &lt;li&gt;Variable values displayed in source buffer, this seams to require integration with lsp-mode and eglot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bugs and issues Before reporting any issues take a look at &lt;del&gt;&lt;em&gt;dape-debug&lt;/em&gt;&lt;/del&gt; buffer with all debug messages enabled. &lt;del&gt;(setq dape--debug-on &#39;(io info error std-server))&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>