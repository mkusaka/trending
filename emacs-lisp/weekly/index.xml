<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:50:15Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>json-emacs/json-mode</title>
    <updated>2023-11-26T01:50:15Z</updated>
    <id>tag:github.com,2023-11-26:/json-emacs/json-mode</id>
    <link href="https://github.com/json-emacs/json-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major mode for editing JSON files with emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;json-mode.el&lt;/h1&gt; &#xA;&lt;p&gt;Major mode for editing JSON files.&lt;/p&gt; &#xA;&lt;p&gt;Extends the builtin js-mode to add better syntax highlighting for JSON and some nice editing keybindings.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install json-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to have the &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA repository&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable repository&lt;/a&gt; enabled in emacs for this to work.&lt;/p&gt; &#xA;&lt;h2&gt;Default Keybindings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-f&lt;/code&gt;: format the region/buffer with &lt;code&gt;json-pretty-print&lt;/code&gt; (&lt;a href=&#34;https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/json.el&#34;&gt;https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/json.el&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: display a path to the object at point with &lt;code&gt;json-snatcher&lt;/code&gt; (&lt;a href=&#34;https://github.com/Sterlingg/json-snatcher&#34;&gt;https://github.com/Sterlingg/json-snatcher&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c P&lt;/code&gt;: copy a path to the object at point to the kill ring with &lt;code&gt;json-snatcher&lt;/code&gt; (&lt;a href=&#34;https://github.com/Sterlingg/json-snatcher&#34;&gt;https://github.com/Sterlingg/json-snatcher&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-t&lt;/code&gt;: Toggle between &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-k&lt;/code&gt;: Replace the sexp at point with &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-i&lt;/code&gt;: Increment the number at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-d&lt;/code&gt;: Decrement the number at point&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Indent Width&lt;/h2&gt; &#xA;&lt;p&gt;Customize &lt;code&gt;js-indent-level&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>piisalie/dotfiles</title>
    <updated>2023-11-26T01:50:15Z</updated>
    <id>tag:github.com,2023-11-26:/piisalie/dotfiles</id>
    <link href="https://github.com/piisalie/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Some files that do configurish things.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>emacs-ng/emacs-ng</title>
    <updated>2023-11-26T01:50:15Z</updated>
    <id>tag:github.com,2023-11-26:/emacs-ng/emacs-ng</id>
    <link href="https://github.com/emacs-ng/emacs-ng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new approach to Emacs - Including TypeScript, Threading, Async I/O, and WebRender.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-ng/emacs-ng/master/images/logo.png&#34; width=&#34;120&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/emacsng&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/emacs-ng/emacs-ng.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-ng/emacs-ng/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/emacs-ng/emacs-ng/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/emacsng/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/emacsng?label=Join%20r%2Femacsng&amp;amp;style=social&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;emacs-ng&lt;/h1&gt; &#xA;&lt;p&gt;A new approach to Emacs&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng&#34;&gt;&lt;strong&gt;homepage&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/js/using-deno&#34;&gt;&lt;strong&gt;Deno/Javascript&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/webrender/&#34;&gt;&lt;strong&gt;webrender&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/ng-module/&#34;&gt;&lt;strong&gt;ng-module&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/handbook/getting-started&#34;&gt;&lt;strong&gt;handbook&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/faq/&#34;&gt;&lt;strong&gt;faq&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;emacs-ng is based off of the &lt;code&gt;master&lt;/code&gt; branch of emacs, and regularly merges using Github Actions(Runs at 00:00, only on Saturday).&lt;/p&gt; &#xA;&lt;p&gt;The last merged commit is &lt;code&gt;eef32d13da5&lt;/code&gt; (09 27 2023).&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this fork is to explore new development approaches. To accomplish this, we aim to maintain an inclusive and innovative environment. The project is not about replacing elisp with a more popular language like Javascript. We just want to make emacs more approachable for people who don&#39;t like lisp as much as we do.&lt;/p&gt; &#xA;&lt;p&gt;Contributions are welcome from anyone and we are always happy to invite new people to the project. We are open towards interesting ideas to make emacs better.&lt;/p&gt; &#xA;&lt;h2&gt;Why Emacs-ng&lt;/h2&gt; &#xA;&lt;p&gt;This project should be considered an additive native layer over emacs, bringing features like Deno&#39;s Javascript and Async I/O environment, Mozilla&#39;s Webrender, and other features in development. emacs-ng&#39;s approach is to utilize multiple new development approaches and tools to bring Emacs to the next level. It is maintained by a team that loves Emacs and everything it stands for - being totally introspectable, with a fully customizable and free development environment. We want Emacs to be a editor 40+ years from now that has the flexibility and design to keep up with progressive technology.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Emacs combined with the rust ecosystem brings a lot of possibilities. If you have any idea for a new feature, just open an issue before starting work so we can give you some feedback.&lt;/p&gt; &#xA;&lt;p&gt;We try to maintain a list of &#34;new contributor&#34; friendly issues tagged with &#34;good first issue&#34;. You should also take a look at our &lt;a href=&#34;https://emacs-ng.github.io/emacs-ng/handbook/getting-started/&#34;&gt;handbook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Webrender&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/servo/webrender&#34;&gt;WebRender&lt;/a&gt; is a GPU-based 2D rendering engine written in Rust from Mozilla. Firefox, the research web browser Servo, and other GUI frameworks draw with it. emacs-ng use it as a new experimental graphic backend to leverage GPU hardware.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic modules&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; &lt;strong&gt;This feature is currently unmaintained&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Allow dynamic modules to access &lt;em&gt;more of Emacs&#39;s internals&lt;/em&gt;. Dynamic modules can be written to take advantage of these extra functionalities when they are available, while at the same time being &lt;em&gt;fully compatible&lt;/em&gt; with vanilla Emacs.&lt;/p&gt; &#xA;&lt;h3&gt;Deno/Javascript&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;strong&gt;This feature is currently outdated and been disabled. However there is&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/emacs-ng/emacs-ng/pull/463&#34;&gt;this&lt;/a&gt; to bring it back.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;One of emacs-ng&#39;s primary features is integrating the &lt;a href=&#34;https://deno.land/&#34;&gt;Deno Runtime&lt;/a&gt;, which allows execution of JavaScript and Typescript within Emacs. The details of that feature are listed below, however many users would ask themselves &lt;strong&gt;WHY JAVASCRIPT?&lt;/strong&gt; JavaScript is an extremely dynamic language that allows for a user to inspect and control their scripting environment. The key to note is that bringing in Deno isn&#39;t JUST JavaScript - it&#39;s an ecosystem of powerful tools and approaches that Emacs just doesn&#39;t have currently.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TypeScript offers an extremely flexible typing system, that allows to user to have compile time control of their scripting, with the flexibility of types &#34;getting out of the way&#34; when not needed.&lt;/li&gt; &#xA; &lt;li&gt;Deno uses Google&#39;s v8 JavaScript engine, which features an extremely powerful JIT and world-class garbage collector.&lt;/li&gt; &#xA; &lt;li&gt;Usage of modern Async I/O utilizing Rust&#39;s Tokio library.&lt;/li&gt; &#xA; &lt;li&gt;Emacs-ng has WebWorker support, meaning that multiple JavaScript engines can be running in parallel within the editor. The only restriction is that only the &#39;main&#39; JS Engine can directly call lisp functions.&lt;/li&gt; &#xA; &lt;li&gt;Emacs-ng also has WebAssembly support - compile your C module as WebAsm and distribute it to the world. Don&#39;t worry about packaging shared libraries or changing module interfaces, everything can be handled and customized by you the user, at the scripting layer. No need to be dependent on native implementation details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Performance&lt;/h4&gt; &#xA;&lt;p&gt;v8&#39;s world-class JIT offers the potential for large performance gains. Async I/O from Deno, WebWorkers, and WebAsm, gives you the tools to make Emacs a smoother and faster experience without having to install additional tools to launch as background processes or worry about shared library versions.&lt;/p&gt;</summary>
  </entry>
</feed>