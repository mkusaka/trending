<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:53:58Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Exafunction/codeium.el</title>
    <updated>2023-02-26T01:53:58Z</updated>
    <id>tag:github.com,2023-02-26:/Exafunction/codeium.el</id>
    <link href="https://github.com/Exafunction/codeium.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free, ultrafast Copilot alternative for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; alt=&#34;Codeium&#34; src=&#34;https://raw.githubusercontent.com/Exafunction/codeium.el/main/codeium.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/3XFf78nAx5&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1027685395649015980?label=community&amp;amp;color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=codeiumdev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style--blue?style=social&amp;amp;logo=twitter&amp;amp;label=Follow%20%40codeiumdev&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/Exafunction/codeium.vim&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Codeium.codeium&#34;&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/i/Codeium.codeium?label=Visual%20Studio&amp;amp;logo=visualstudio&#34; alt=&#34;Visual Studio&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/20540-codeium/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/d/20540?label=JetBrains&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open-vsx.org/extension/Codeium/codeium&#34;&gt;&lt;img src=&#34;https://img.shields.io/open-vsx/dt/Codeium/codeium?label=Open%20VSX&#34; alt=&#34;Open VSX&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/codeium/hobjkcpmjhlegmobgonaagepfckjkceh&#34;&gt;&lt;img src=&#34;https://img.shields.io/chrome-web-store/users/hobjkcpmjhlegmobgonaagepfckjkceh?label=Google%20Chrome&amp;amp;logo=googlechrome&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Google Chrome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;codeium.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Free, ultrafast, extensible AI code completion tool for Emacs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Codeium autocompletes your code with AI in all major IDEs. We &lt;a href=&#34;https://www.codeium.com/blog/codeium-copilot-alternative-in-emacs&#34;&gt;launched&lt;/a&gt; this implementation of the Codeium plugin for Emacs to bring this modern coding superpower to more developers. Check out our &lt;a href=&#34;https://www.codeium.com/playground&#34;&gt;playground&lt;/a&gt; if you want to quickly try out Codeium online.&lt;/p&gt; &#xA;&lt;p&gt;codeium.el provides a &lt;code&gt;completion-at-point-functions&lt;/code&gt; backend. It is designed to be use with a front-end, such as &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt;, &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;, or the built-in &lt;code&gt;completion-at-point&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;codeium.el is an open source client and (mostly) written by &lt;a href=&#34;https://github.com/Alan-Chen99&#34;&gt;Alan Chen&lt;/a&gt;. It uses a proprietary language server binary, currently downloaded (automatically, with confirmation) from &lt;a href=&#34;https://github.com/Exafunction/codeium/releases/&#34;&gt;here&lt;/a&gt;. Use &lt;code&gt;M-x codeium-diagnose&lt;/code&gt; to see apis/fields that would be sent to the local language server, and the command used to run the local language server. Customize &lt;code&gt;codeium-api-enabled&lt;/code&gt;, &lt;code&gt;codeium-fields-regexps&lt;/code&gt; and &lt;code&gt;codeium-command&lt;/code&gt; to change them.&lt;/p&gt; &#xA;&lt;p&gt;Contributions are welcome! Feel free to submit pull requests and issues related to the package.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7545794/219270660-f14ddb8c-7087-4d97-9a15-b043467a2c00.gif&#34; alt=&#34;Emacs Demo - Final&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;üöÄ Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install a text-completion frontend of your choice. (We recommend &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;Exafunction/codeium.el&lt;/code&gt; using your emacs package manager of choice, or manually. See &lt;a href=&#34;https://raw.githubusercontent.com/Exafunction/codeium.el/main/#-installation-options&#34;&gt;Installation Options&lt;/a&gt; below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;M-x codeium-install&lt;/code&gt; to set up the package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;codeium-completion-at-point&lt;/code&gt; to your &lt;code&gt;completion-at-point-functions&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start seeing suggestions!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can see all customization options via &lt;code&gt;M-x customize&lt;/code&gt;. (better documentation coming soon!)&lt;/p&gt; &#xA;&lt;p&gt;Here is an example configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; we recommend using use-package to organize your init.el&#xA;(use-package codeium&#xA;    ;; if you use straight&#xA;    ;; :straight &#39;(:type git :host github :repo &#34;Exafunction/codeium.el&#34;)&#xA;    ;; otherwise, make sure that the codeium.el file is on load-path&#xA;    &#xA;    :init&#xA;    ;; use globally&#xA;    (add-to-list &#39;completion-at-point-functions #&#39;codeium-completion-at-point)&#xA;    ;; or on a hook&#xA;    ;; (add-hook &#39;python-mode-hook&#xA;    ;;     (lambda ()&#xA;    ;;         (setq-local completion-at-point-functions &#39;(codeium-completion-at-point))))&#xA;&#xA;    ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):&#xA;    ;; (add-hook &#39;python-mode-hook&#xA;    ;;     (lambda ()&#xA;    ;;         (setq-local completion-at-point-functions&#xA;    ;;             (list (cape-super-capf #&#39;codeium-completion-at-point #&#39;lsp-completion-at-point)))))&#xA;    ;; an async company-backend is coming soon!&#xA;&#xA;    ;; codeium-completion-at-point is autoloaded, but you can&#xA;    ;; optionally set a timer, which might speed up things as the&#xA;    ;; codeium local language server takes ~0.2s to start up&#xA;    ;; (add-hook &#39;emacs-startup-hook&#xA;    ;;  (lambda () (run-with-timer 0.1 nil #&#39;codeium-init)))&#xA;&#xA;    ;; :defer t ;; lazy loading, if you want&#xA;    :config&#xA;    (setq use-dialog-box nil) ;; do not use popup boxes&#xA;&#xA;    ;; if you don&#39;t want to use customize to save the api-key&#xA;    ;; (setq codeium/metadata/api_key &#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;)&#xA;&#xA;    ;; get codeium status in the modeline&#xA;    (setq codeium-mode-line-enable&#xA;        (lambda (api) (not (memq api &#39;(CancelRequest Heartbeat AcceptCompletion)))))&#xA;    (add-to-list &#39;mode-line-format &#39;(:eval (car-safe codeium-mode-line)) t)&#xA;    ;; alternatively for a more extensive mode-line&#xA;    ;; (add-to-list &#39;mode-line-format &#39;(-50 &#34;&#34; codeium-mode-line) t)&#xA;&#xA;    ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server&#xA;    (setq codeium-api-enabled&#xA;        (lambda (api)&#xA;            (memq api &#39;(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))&#xA;    ;; you can also set a config for a single buffer like this:&#xA;    ;; (add-hook &#39;python-mode-hook&#xA;    ;;     (lambda ()&#xA;    ;;         (setq-local codeium/editor_options/tab_size 4)))&#xA;&#xA;    ;; You can overwrite all the codeium configs!&#xA;    ;; for example, we recommend limiting the string sent to codeium for better performance&#xA;    (defun my-codeium/document/text ()&#xA;        (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))&#xA;    ;; if you change the text, you should also change the cursor_offset&#xA;    ;; warning: this is measured by UTF-8 encoded bytes&#xA;    (defun my-codeium/document/cursor_offset ()&#xA;        (codeium-utf8-byte-length&#xA;            (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))&#xA;    (setq codeium/document/text &#39;my-codeium/document/text)&#xA;    (setq codeium/document/cursor_offset &#39;my-codeium/document/cursor_offset))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example configuration for company-mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package company&#xA;    :defer 0.1&#xA;    :config&#xA;    (global-company-mode t)&#xA;    (setq-default&#xA;        company-idle-delay 0.05&#xA;        company-require-match nil&#xA;        company-minimum-prefix-length 0&#xA;        &#xA;        ;; get only preview&#xA;        company-frontends &#39;(company-preview-frontend)&#xA;        ;; also get a drop down&#xA;        ;; company-frontends &#39;(company-pseudo-tooltip-frontend company-preview-frontend)&#xA;        ))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also access codeium.el from elisp; here is a snippet that returns the full response of a &lt;code&gt;GetCompletions&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(cl-letf*&#xA;    (&#xA;        ;; making a new codeium-state (thus a new local language server process)&#xA;        ;; takes ~0.2 seconds; avoid when possible&#xA;        (state (codeium-state-make :name &#34;example&#34;))&#xA;        ((codeium-config &#39;codeium/document/text state) &#34;def fibi(n):&#34;)&#xA;        ((codeium-config &#39;codeium/document/cursor_offset state) 12)&#xA;        ((codeium-config &#39;codeium-api-enabled state) (lambda (api) (eq api &#39;GetCompletions))))&#xA;    (unwind-protect&#xA;        (progn&#xA;            (codeium-init state)&#xA;            ;; make async requests using codeium-request&#xA;            (cdr (codeium-request-synchronously &#39;GetCompletions state nil)))&#xA;        ;; cleans up temp files, kill process. Scheduled async requests on this state will be dropped.&#xA;        (codeium-reset state)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, among other things, you get probabilities for each token! We would love to see a PR or your own package that uses those!&lt;/p&gt; &#xA;&lt;h2&gt;üíæ Installation Options&lt;/h2&gt; &#xA;&lt;h3&gt;‚û°Ô∏è straight.el&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(straight-use-package &#39;(codeium :type git :host github :repo &#34;Exafunction/codeium.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üí™ Manual&lt;/h3&gt; &#xA;&lt;p&gt;Run the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 https://github.com/Exafunction/codeium.el ~/.emacs.d/codeium.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/codeium.el&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Do you have a working installation for another Emacs environment (Spacemacs, Doom Emacs)? Submit a PR so we can share it with others!&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pashky/restclient.el</title>
    <updated>2023-02-26T01:53:58Z</updated>
    <id>tag:github.com,2023-02-26:/pashky/restclient.el</id>
    <link href="https://github.com/pashky/restclient.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP REST client tool for emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;restclient.el&lt;/h1&gt; &#xA;&lt;p&gt;This is a tool to manually explore and test HTTP REST webservices. Runs queries from a plain-text query sheet, displays results as a pretty-printed XML, JSON and even images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/QtCID.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;You can easily install &lt;code&gt;restclient&lt;/code&gt; using &lt;code&gt;package.el&lt;/code&gt; from &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, deploy &lt;code&gt;restclient.el&lt;/code&gt; into your site-lisp as usual, then add &lt;code&gt;(require &#39;restclient)&lt;/code&gt; to your Emacs start-up file.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, you can prepare a text file with queries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;restclient-mode&lt;/code&gt; is a major mode which does a bit of highlighting and supports a few additional keypresses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-c&lt;/code&gt;: runs the query under the cursor, tries to pretty-print the response (if possible)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-r&lt;/code&gt;: same, but doesn&#39;t do anything with the response, just shows the buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-v&lt;/code&gt;: same as &lt;code&gt;C-c C-c&lt;/code&gt;, but doesn&#39;t switch focus to other window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: jump to the previous query&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-n&lt;/code&gt;: jump to the next query&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-.&lt;/code&gt;: mark the query under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-u&lt;/code&gt;: copy query under the cursor as a curl command&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-g&lt;/code&gt;: start a &lt;a href=&#34;https://emacs-helm.github.io/helm/&#34;&gt;helm&lt;/a&gt; session with sources for variables and requests (if helm is available, of course)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c n n&lt;/code&gt;: narrow to region of current request (including headers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TAB&lt;/code&gt;: hide/show current request body, only if&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-a&lt;/code&gt;: show all collapsed regions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-i&lt;/code&gt;: show information on resclient variables at point&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The last two functions are implemented as &lt;code&gt;restclient-outline-mode&lt;/code&gt; minor mode, which is activated by default via hook for major mode. Remove this hook using &lt;code&gt;(remove-hook &#39;restclient-mode-hook &#39;restclient-outline-mode)&lt;/code&gt; if you don&#39;t wish to have this behaviour, or it clashes with any other binding for &lt;code&gt;TAB&lt;/code&gt; like autocomplete.&lt;/p&gt; &#xA;&lt;p&gt;Query file example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# -*- restclient -*-&#xA;#&#xA;# Gets  all Github APIs, formats JSON, shows response status and headers underneath.&#xA;# Also sends a User-Agent header, because the Github API requires this.&#xA;#&#xA;GET https://api.github.com&#xA;User-Agent: Emacs Restclient&#xA;&#xA;#&#xA;# XML is supported - highlight, pretty-print&#xA;#&#xA;GET http://www.redmine.org/issues.xml?limit=10&#xA;&#xA;#&#xA;# It can even show an image!&#xA;#&#xA;GET http://upload.wikimedia.org/wikipedia/commons/6/63/Wikipedia-logo.png&#xA;#&#xA;# A bit of json GET, you can pass headers too&#xA;#&#xA;GET http://jira.atlassian.com/rest/api/latest/issue/JRA-9&#xA;User-Agent: Emacs24&#xA;Accept-Encoding: compress, gzip&#xA;&#xA;#&#xA;# Post works too, entity just goes after an empty line. Same is for PUT.&#xA;#&#xA;POST https://jira.atlassian.com/rest/api/2/search&#xA;Content-Type: application/json&#xA;&#xA;{&#xA;        &#34;jql&#34;: &#34;project = HCPUB&#34;,&#xA;        &#34;startAt&#34;: 0,&#xA;        &#34;maxResults&#34;: 15,&#xA;        &#34;fields&#34;: [&#xA;                &#34;summary&#34;,&#xA;                &#34;status&#34;,&#xA;                &#34;assignee&#34;&#xA;        ]&#xA;}&#xA;#&#xA;# And delete, will return not-found error...&#xA;#&#xA;DELETE https://jira.atlassian.com/rest/api/2/version/20&#xA;&#xA;# Set a variable to the value of your ip address using a jq expression&#xA;GET http://httpbin.org/ip&#xA;-&amp;gt; jq-set-var :my-ip .origin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lines starting with &lt;code&gt;#&lt;/code&gt; are considered comments AND also act as separators.&lt;/p&gt; &#xA;&lt;p&gt;HTTPS and image display requires additional dll&#39;s on windows (libtls, libpng, libjpeg etc), which are not in the emacs distribution.&lt;/p&gt; &#xA;&lt;p&gt;More examples can be found in the &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h1&gt;In-buffer variables&lt;/h1&gt; &#xA;&lt;p&gt;You declare a variable like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar = the value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar := (some (artbitrary &#39;elisp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In second form, the value of variable is evaluated as Emacs Lisp form immediately. Evaluation of variables is done from top to bottom. Only one one-line form for each variable is allowed, so use &lt;code&gt;(progn ...)&lt;/code&gt; and some virtual line wrap mode if you need more. There&#39;s no way to reference earlier declared &lt;em&gt;restclient&lt;/em&gt; variables, but you can always use &lt;code&gt;setq&lt;/code&gt; to save state.&lt;/p&gt; &#xA;&lt;p&gt;Variables can be multiline too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar = &amp;lt;&amp;lt;&#xA;Authorization: :my-auth&#xA;Content-Type: application/json&#xA;User-Agent: SomeApp/1.0&#xA;#&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar := &amp;lt;&amp;lt;&#xA;(some-long-elisp&#xA;    (code spanning many lines)&#xA;#&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; is used to mark a start of multiline value, the actual value is starting on the next line then. The end of such variable value is the same comment marker &lt;code&gt;#&lt;/code&gt; and last end of line doesn&#39;t count, same is for request bodies.&lt;/p&gt; &#xA;&lt;p&gt;After the var is declared, you can use it in the URL, the header values and the body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Some generic vars&#xA;&#xA;:my-auth = 319854857345898457457&#xA;:my-headers = &amp;lt;&amp;lt;&#xA;Authorization: :my-auth&#xA;Content-Type: application/json&#xA;User-Agent: SomeApp/1.0&#xA;#&#xA;&#xA;# Update a user&#39;s name&#xA;&#xA;:user-id = 7&#xA;:the-name := (format &#34;%s %s %d&#34; &#39;Neo (md5 &#34;The Chosen&#34;) (+ 100 1))&#xA;&#xA;PUT http://localhost:4000/users/:user-id/&#xA;:my-headers&#xA;&#xA;{ &#34;name&#34;: &#34;:the-name&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Varaibles can also be set based on the body of a response using the per-request hooks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# set a variable :my-ip to the value of your ip address using elisp evaluated in the result buffer&#xA;GET http://httpbin.org/ip&#xA;-&amp;gt; run-hook (restclient-set-var &#34;:my-ip&#34; (cdr (assq &#39;origin (json-read))))&#xA;&#xA;# same thing with jq if it&#39;s installed&#xA;GET http://httpbin.org/ip &#xA;-&amp;gt; jq-set-var :my-ip .origin&#xA;&#xA;# set a variable :my-var using a more complex jq expression (requires jq-mode)&#xA;GET https://httpbin.org/json&#xA;-&amp;gt; jq-set-var :my-var .slideshow.slides[0].title&#xA;&#xA;# hooks come before the body on POST&#xA;POST http://httpbin.org/post&#xA;-&amp;gt; jq-set-var :test .json.test&#xA;&#xA;{&#34;test&#34;: &#34;foo&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;File uploads&lt;/h1&gt; &#xA;&lt;p&gt;Restclient now allows to specify file path to use as a body, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://httpbin.org/post&#xA;Content-type: text/plain&#xA;&#xA;&amp;lt; /etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caveats:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiline variables can be used in headers or body. In URL too, but it doesn&#39;t make sense unless it was long elisp expression evaluating to simple value.&lt;/li&gt; &#xA; &lt;li&gt;Yet same variable cannot contain both headers and body, it must be split into two and separated by empty line as usual.&lt;/li&gt; &#xA; &lt;li&gt;Variables now can reference each other, substitution happens in several passes and stops when there&#39;s no more variables. Please avoid circular references. There&#39;s customizable safeguard of maximum 10 passes to prevent hanging in this case, but it will slow things down.&lt;/li&gt; &#xA; &lt;li&gt;Variable declaration only considered above request line.&lt;/li&gt; &#xA; &lt;li&gt;Be careful of what you put in that elisp. No security checks are done, so it can format your hardrive. If there&#39;s a parsing or evaluation error, it will tell you in the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Elisp variables can evaluate to values containing other variable references, this will be substituted too. But you cannot substitute parts of elisp expressions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;There are several variables available to customize &lt;code&gt;restclient&lt;/code&gt; to your liking. Also, all font lock faces are now customizable in &lt;code&gt;resclient-faces&lt;/code&gt; group too.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-log-request&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: t&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Determines whether restclient logs to the *Messages* buffer.&lt;/p&gt; &#xA;&lt;p&gt;If non-nil, restclient requests will be logged. If nil, they will not be.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-same-buffer-response&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: t&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Re-use same buffer for responses or create a new one each time.&lt;/p&gt; &#xA;&lt;p&gt;If non-nil, re-use the buffer named by &lt;code&gt;rest-client-buffer-response-name&lt;/code&gt; for all requests.&lt;/p&gt; &#xA;&lt;p&gt;If nil, generate a buffer name based on the request type and url, and increment it for subsequent requests.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;GET http://example.org&lt;/code&gt; would produce the following buffer names on 3 subsequent calls:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;*HTTP GET http://example.org*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*HTTP GET http://example.org*&amp;lt;2&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*HTTP GET http://example.org*&amp;lt;3&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;restclient-same-buffer-response-name&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: *HTTP Response*&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Name for response buffer to be used when &lt;code&gt;restclient-same-buffer-response&lt;/code&gt; is true.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-inhibit-cookies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: nil&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inhibit restclient from sending cookies implicitly.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-response-size-threshold&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: 100000&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Size of the response buffer restclient can display without huge performance dropdown. If response buffer will be more than that, only bare major mode will be used to display it. Set to &lt;code&gt;nil&lt;/code&gt; to disable threshold completely.&lt;/p&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comment lines &lt;code&gt;#&lt;/code&gt; act as end of entity. Yes, that means you can&#39;t post shell script or anything with hashes as PUT/POST entity. I&#39;m fine with this right now, but may use more unique separator in future.&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m not sure if it handles different encodings, I suspect it won&#39;t play well with anything non-ascii. I&#39;m yet to figure it out.&lt;/li&gt; &#xA; &lt;li&gt;Variable usages are not highlighted&lt;/li&gt; &#xA; &lt;li&gt;If your Emacs is older than 26.1, some GET requests to &lt;code&gt;localhost&lt;/code&gt; might fail because of that &lt;a href=&#34;http://debbugs.gnu.org/cgi/bugreport.cgi?bug=17976&#34;&gt;bug&lt;/a&gt; in Emacs/url.el. As a workaround you can use &lt;code&gt;127.0.0.1&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;History&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;01/Aug/2016&lt;/em&gt; Added ability to narrow to region&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;06/Apr/2016&lt;/em&gt; Helm sources for variables and requests added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;06/Apr/2016&lt;/em&gt; File uploads! See upstairs for syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;06/Apr/2016&lt;/em&gt; Added customizable faces for all syntax highlighting, so it can be used in themes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;05/Apr/2016&lt;/em&gt; Added ability to declare multi-line variables (e.g. set of headers repeated for each request) and substitute variable values recursively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;25/Mar/2015&lt;/em&gt; Chop last newline from request body. If you really need to send one, just add one more, otherwise url-encoded POSTs will fail.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;15/Jun/2013&lt;/em&gt; Added support for variables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Related 3rd party packages&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iquiw/company-restclient&#34;&gt;company-restclient&lt;/a&gt;: It provides auto-completion for HTTP methods and headers in restclient-mode. Completion source is given by know-your-http-well.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alf/ob-restclient.el&#34;&gt;ob-restclient&lt;/a&gt;: An extension to restclient.el for emacs that provides org-babel support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bounceme/restclient.vim&#34;&gt;restclient.vim&lt;/a&gt;: Brings the restclient to vim! Responses display in vim&#39;s internal pager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Public domain, do whatever you want.&lt;/p&gt; &#xA;&lt;h1&gt;Author&lt;/h1&gt; &#xA;&lt;p&gt;Pavel Kurnosov &lt;a href=&#34;mailto:pashky@gmail.com&#34;&gt;pashky@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joshcho/ChatGPT.el</title>
    <updated>2023-02-26T01:53:58Z</updated>
    <id>tag:github.com,2023-02-26:/joshcho/ChatGPT.el</id>
    <link href="https://github.com/joshcho/ChatGPT.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT in Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: ChatGPT.el&lt;/p&gt; &#xA;&lt;p&gt;[[https://chat.openai.com/chat][ChatGPT]] in Emacs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=4oUrm4CnIjo][Basic Demo]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=1LMlt5Cv4fY][Queue Demo]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** News&lt;/p&gt; &#xA;&lt;p&gt;OpenAI is releasing its ChatGPT API soon. Sign up [[https://share.hsforms.com/1u4goaXwDRKC9-x9IvKno0A4sk30][here]]. ChatGPT.el will support the official API once released. Browser-based API will remain supported.&lt;/p&gt; &#xA;&lt;p&gt;** Installation *** Dependency #+begin_src shell pip install epc pip install git+&lt;a href=&#34;https://github.com/mmabrouk/chatgpt-wrapper&#34;&gt;https://github.com/mmabrouk/chatgpt-wrapper&lt;/a&gt; chatgpt install #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will prompt you to log in with your browser.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If you encounter any problems, please submit an issue or see [[https://github.com/mmabrouk/chatgpt-wrapper][chatgpt-wrapper]].&lt;/p&gt; &#xA;&lt;p&gt;*** [[https://github.com/radian-software/straight.el][Straight]] #+begin_src emacs-lisp (use-package chatgpt :straight (:host github :repo &#34;joshcho/ChatGPT.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;)) :init (require &#39;python) (setq chatgpt-repo-path &#34;~/.emacs.d/straight/repos/ChatGPT.el/&#34;) :bind (&#34;C-c q&#34; . chatgpt-query)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** [[https://github.com/quelpa/quelpa][Quelpa]] #+begin_src emacs-lisp (require &#39;quelpa-use-package) (use-package chatgpt :quelpa ((chatgpt :fetcher git :url &#34;&lt;a href=&#34;https://github.com/joshcho/ChatGPT.el.git&#34;&gt;https://github.com/joshcho/ChatGPT.el.git&lt;/a&gt;&#34;) :upgrade t) :init (require &#39;python) (setq chatgpt-repo-path (expand-file-name &#34;chatgpt/&#34; quelpa-build-dir)) :bind (&#34;C-c q&#34; . chatgpt-query)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** [[https://www.spacemacs.org/][Spacemacs]]&lt;/p&gt; &#xA;&lt;p&gt;In &lt;del&gt;dotspacemacs/user-config&lt;/del&gt; function, #+begin_src emacs-lisp (require &#39;python) (setq chatgpt-repo-path (expand-file-name &#34;chatgpt/&#34; quelpa-build-dir)) (global-set-key (kbd &#34;C-c q&#34;) #&#39;chatgpt-query) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In &lt;del&gt;dotspacemacs/layers&lt;/del&gt; function for &lt;del&gt;setq-default&lt;/del&gt;, #+begin_src emacs-lisp dotspacemacs-additional-packages &#39;( (chatgpt :location (recipe :fetcher github :repo &#34;joshcho/ChatGPT.el&#34;)) ;; other additional packages... ) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Assumes Quelpa installation.&lt;/p&gt; &#xA;&lt;p&gt;*** [[https://github.com/doomemacs/doomemacs][Doom Emacs]]&lt;/p&gt; &#xA;&lt;p&gt;In &lt;del&gt;packages.el&lt;/del&gt; , #+begin_src emacs-lisp (package! chatgpt :recipe (:host github :repo &#34;joshcho/ChatGPT.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In &lt;del&gt;config.el&lt;/del&gt; , #+begin_src emacs-lisp (use-package! chatgpt :defer t :config (unless (boundp &#39;python-interpreter) (defvaralias &#39;python-interpreter &#39;python-shell-interpreter)) (setq chatgpt-repo-path (expand-file-name &#34;straight/repos/ChatGPT.el/&#34; doom-local-dir)) (set-popup-rule! (regexp-quote &#34;&lt;em&gt;ChatGPT&lt;/em&gt;&#34;) :side &#39;bottom :size .5 :ttl nil :quit t :modeline nil) :bind (&#34;C-c q&#34; . chatgpt-query)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press &lt;del&gt;C-c q&lt;/del&gt; to query ChatGPT.&lt;/li&gt; &#xA; &lt;li&gt;Select region, then &lt;del&gt;C-c q&lt;/del&gt; will prompt you to select a type: doc, bug, understand, or improve. Select a type to query ChatGPT with that prompt.&lt;/li&gt; &#xA; &lt;li&gt;Try making queries in quick succession.&lt;/li&gt; &#xA; &lt;li&gt;If your login is expired, try #+begin_src sh pkill ms-playwright/firefox &amp;amp;&amp;amp; chatgpt install #+end_src in the shell.&lt;/li&gt; &#xA; &lt;li&gt;To reset your conversation, try M-x chatgpt-reset.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Troubleshooting&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For most scenarios, the reliable method is &lt;del&gt;pkill ms-playwright/firefox &amp;amp;&amp;amp; chatgpt install&lt;/del&gt; to reauthenticate yourself.&lt;/li&gt; &#xA; &lt;li&gt;Also try M-x chatgpt-reset.&lt;/li&gt; &#xA; &lt;li&gt;If for some reason the ellipses keep blinking, try M-x chatgpt-stop.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have python installed, and &lt;del&gt;python-interpreter&lt;/del&gt; is set (most likely set it to &#34;python&#34; or &#34;python3&#34;).&lt;/li&gt; &#xA; &lt;li&gt;If none of these methods work, please submit an [[https://github.com/joshcho/ChatGPT.el/issues/new][issue]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Customization Customize &lt;del&gt;chatgpt-query-format-string-map&lt;/del&gt; for your own types.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq chatgpt-query-format-string-map &#39;( ;; ChatGPT.el defaults (&#34;doc&#34; . &#34;Please write the documentation for the following function.\n\n%s&#34;) (&#34;bug&#34; . &#34;There is a bug in the following function, please help me fix it.\n\n%s&#34;) (&#34;understand&#34; . &#34;What does the following function do?\n\n%s&#34;) (&#34;improve&#34; . &#34;Please improve the following code.\n\n%s&#34;) ;; your new prompt (&#34;my-custom-type&#34; . &#34;My custom prompt.\n\n%s&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Misc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t use &#34;custom&#34; as a type. It&#39;s reserved for custom prepend string through minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Check out [[https://github.com/semiosis/pen.el][Pen.el]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>