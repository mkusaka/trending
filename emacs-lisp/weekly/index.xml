<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-28T01:50:17Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>minad/tempel</title>
    <updated>2024-01-28T01:50:17Z</updated>
    <id>tag:github.com,2024-01-28:/minad/tempel</id>
    <link href="https://github.com/minad/tempel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üèõÔ∏è TempEl - Simple templates for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: TempEl - Simple templates for Emacs #+author: Daniel Mendler #+language: en #+export_file_name: tempel.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Tempel: (tempel). #+texinfo_dir_desc: Simple templates for Emacs&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/packages/tempel.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/tempel.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/devel/tempel.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/tempel.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/tempel&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/tempel-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/tempel&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/tempel-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Temple_of_Hephaestus_%28Southwest%29%2C_Athens_-_20070711b.jpg/1920px-Temple_of_Hephaestus_%28Southwest%29%2C_Athens_-_20070711b.jpg&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tempel is a tiny template package for Emacs, which uses the syntax of the Emacs Tempo library. Tempo is an ancient temple of the church of Emacs. It is 27 years old, but still in good shape since it successfully resisted change over the decades. However it may look a bit dusty here and there. Therefore we present Tempel, a new implementation of Tempo with inline expansion and integration with recent Emacs facilities. Tempel takes advantage of the standard =completion-at-point-functions= mechanism which is used by Emacs for in-buffer completion.&lt;/p&gt; &#xA;&lt;p&gt;#+toc: headlines 8&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Template expansion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tempel comes with three commands for template expansion:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;tempel-complete&lt;/del&gt; completes a template name at point in the buffer and subsequently expands the template. If called non-interactively the function behaves like a Capf and can be added to &lt;del&gt;completion-at-point-functions&lt;/del&gt;. The Capf returns a list of templates names which are presented by the completion UI for selection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;tempel-expand&lt;/del&gt; expands an exactly matching template name at point in the buffer. If called non-interactively the function behaves like a Capf and can be added to &lt;del&gt;completion-at-point-functions&lt;/del&gt;. This Capf returns only the single exactly matching template name, such that no selection in the completion UI is possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;tempel-insert&lt;/del&gt; selects a template by name via &lt;del&gt;completing-read&lt;/del&gt; and insert it into the current buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the commands &lt;del&gt;tempel-complete&lt;/del&gt; and &lt;del&gt;tempel-expand&lt;/del&gt;, you may want to give my [[https://github.com/minad/corfu][Corfu]] completion at point popup UI a try. After inserting the template you can move between the visible template fields with the keys &lt;del&gt;M-{&lt;/del&gt;, &lt;del&gt;M-}&lt;/del&gt; or &lt;del&gt;C-up/down&lt;/del&gt; which are normally bound to &lt;del&gt;forward/backward-paragraph&lt;/del&gt;. Tempel temporarily remaps these commands to &lt;del&gt;tempel-next/previous&lt;/del&gt;. As soon as you move before (behind) the first (last) field, the fields are finalized. The key bindings are defined in the &lt;del&gt;tempel-map&lt;/del&gt; keymap. I recommend that you inspect the &lt;del&gt;tempel-map&lt;/del&gt; and look at the provided key bindings. You can customize the key bindings there.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;table&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/minad/tempel/raw/screenshots/rst.gif?raw=true&#34; align=&#34;left&#34;&gt;&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/minad/tempel/raw/screenshots/latex.gif?raw=true&#34; align=&#34;left&#34;&gt;&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/minad/tempel/raw/screenshots/elisp.gif?raw=true&#34; align=&#34;left&#34;&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The package is available on GNU ELPA and MELPA and can be installed with =package-install=. The following example configuration relies on =use-package=. For some ready-made templates check out the package [[https://github.com/Crandel/tempel-collection][tempel-collection]]. The collection is not comprehensive yet, but will certainly grow thanks to contributions.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure Tempel (use-package tempel ;; Require trigger prefix before template name when completing. ;; :custom ;; (tempel-trigger-prefix &#34;&amp;lt;&#34;)&lt;/p&gt; &#xA;&lt;p&gt;:bind ((&#34;M-+&#34; . tempel-complete) ;; Alternative tempel-expand (&#34;M-*&#34; . tempel-insert))&lt;/p&gt; &#xA;&lt;p&gt;:init&lt;/p&gt; &#xA;&lt;p&gt;;; Setup completion at point (defun tempel-setup-capf () ;; Add the Tempel Capf to &lt;code&gt;completion-at-point-functions&#39;. ;; &lt;/code&gt;tempel-expand&#39; only triggers on exact matches. Alternatively use ;; &lt;code&gt;tempel-complete&#39; if you want to see all matches, but then you ;; should also configure &lt;/code&gt;tempel-trigger-prefix&#39;, such that Tempel ;; does not trigger too often when you don&#39;t expect it. NOTE: We add ;; `tempel-expand&#39; &lt;em&gt;before&lt;/em&gt; the main programming mode Capf, such ;; that it will be tried first. (setq-local completion-at-point-functions (cons #&#39;tempel-expand completion-at-point-functions)))&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;conf-mode-hook &#39;tempel-setup-capf) (add-hook &#39;prog-mode-hook &#39;tempel-setup-capf) (add-hook &#39;text-mode-hook &#39;tempel-setup-capf)&lt;/p&gt; &#xA;&lt;p&gt;;; Optionally make the Tempel templates available to Abbrev, ;; either locally or globally. `expand-abbrev&#39; is bound to C-x &#39;. ;; (add-hook &#39;prog-mode-hook #&#39;tempel-abbrev-mode) ;; (global-tempel-abbrev-mode) )&lt;/p&gt; &#xA;&lt;p&gt;;; Optional: Add tempel-collection. ;; The package is young and doesn&#39;t have comprehensive coverage. (use-package tempel-collection)&lt;/p&gt; &#xA;&lt;p&gt;;; Optional: Use the Corfu completion UI (use-package corfu :init (global-corfu-mode)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Template file format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The templates are defined in a Lisp data file configured by &lt;del&gt;tempel-path&lt;/del&gt;. Lisp data files are files containing Lisp s-expressions (see &lt;del&gt;lisp-data-mode&lt;/del&gt;). By default the file =~/.config/emacs/templates= is used. The templates are grouped by major mode with an optional &lt;del&gt;:when&lt;/del&gt; condition. Each template is a list in the concise form of the Emacs Tempo syntax. The first element of each list is the name of the template. I recommend to use avoid special letters for the template names, since special letters may carry meaning during completion filtering and as such make it harder to select the desired template. Thus the name =lett= is better than =let*=. Behind the name, the Tempo syntax elements follow.&lt;/p&gt; &#xA;&lt;p&gt;In addition, each template may specify a =:pre= and/or =:post= key with a FORM that is evaluated before the template is expanded or after it is finalized, respectively. The =:post= form is evaluated in the lexical scope of the template, which means that it can access the template&#39;s named fields.&lt;/p&gt; &#xA;&lt;p&gt;The following examples are written on a single line, but this is is of course not a requirement. Strings can even contain line breaks, which can be useful if you want to write complex templates.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; ~/.config/emacs/templates&lt;/p&gt; &#xA;&lt;p&gt;fundamental-mode ;; Available everywhere&lt;/p&gt; &#xA;&lt;p&gt;(today (format-time-string &#34;%Y-%m-%d&#34;))&lt;/p&gt; &#xA;&lt;p&gt;prog-mode&lt;/p&gt; &#xA;&lt;p&gt;(fixme (if (derived-mode-p &#39;emacs-lisp-mode) &#34;;; &#34; comment-start) &#34;FIXME &#34;) (todo (if (derived-mode-p &#39;emacs-lisp-mode) &#34;;; &#34; comment-start) &#34;TODO &#34;) (bug (if (derived-mode-p &#39;emacs-lisp-mode) &#34;;; &#34; comment-start) &#34;BUG &#34;) (hack (if (derived-mode-p &#39;emacs-lisp-mode) &#34;;; &#34; comment-start) &#34;HACK &#34;)&lt;/p&gt; &#xA;&lt;p&gt;latex-mode&lt;/p&gt; &#xA;&lt;p&gt;(abstract &#34;\begin{abstract}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{abstract}&#34;) (align &#34;\begin{align}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{align}&#34;) (alignn &#34;\begin{align*}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{align*}&#34;) (gather &#34;\begin{gather}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{gather}&#34;) (gatherr &#34;\begin{gather*}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{gather*}&#34;) (appendix &#34;\begin{appendix}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{appendix}&#34;) (begin &#34;\begin{&#34; (s env) &#34;}&#34; r&amp;gt; n&amp;gt; &#34;\end{&#34; (s env) &#34;}&#34;) (center &#34;\begin{center}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{center}&#34;) (displaymath &#34;\begin{displaymath}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{displaymath}&#34;) (document &#34;\begin{document}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{document}&#34;) (enumerate &#34;\begin{enumerate}\n\item &#34; r&amp;gt; n&amp;gt; &#34;\end{enumerate}&#34;) (equation &#34;\begin{equation}&#34; r&amp;gt; n&amp;gt; &#34;\end{equation}&#34;) (flushleft &#34;\begin{flushleft}&#34; r&amp;gt; n&amp;gt; &#34;\end{flushleft}&#34;) (flushright &#34;\begin{flushright}&#34; r&amp;gt; n&amp;gt; &#34;\end{flushright}&#34;) (frac &#34;\frac{&#34; p &#34;}{&#34; q &#34;}&#34;) (fussypar &#34;\begin{fussypar}&#34; r&amp;gt; n&amp;gt; &#34;\end{fussypar}&#34;) (itemize &#34;\begin{itemize}\n\item &#34; r&amp;gt; n&amp;gt; &#34;\end{itemize}&#34;) (letter &#34;\begin{letter}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{letter}&#34;) (math &#34;\begin{math}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{math}&#34;) (minipage &#34;\begin{minipage}[t]{0.5\linewidth}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{minipage}&#34;) (quotation &#34;\begin{quotation}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{quotation}&#34;) (quote &#34;\begin{quote}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{quote}&#34;) (sloppypar &#34;\begin{sloppypar}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{sloppypar}&#34;) (theindex &#34;\begin{theindex}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{theindex}&#34;) (trivlist &#34;\begin{trivlist}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{trivlist}&#34;) (verbatim &#34;\begin{verbatim}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{verbatim}&#34;) (verbatimm &#34;\begin{verbatim*}\n&#34; r&amp;gt; n&amp;gt; &#34;\end{verbatim*}&#34;)&lt;/p&gt; &#xA;&lt;p&gt;texinfo-mode&lt;/p&gt; &#xA;&lt;p&gt;(defmac &#34;@defmac &#34; p n&amp;gt; r&amp;gt; &#34;@end defmac&#34;) (defun &#34;@defun &#34; p n&amp;gt; r&amp;gt; &#34;@end defun&#34;) (defvar &#34;@defvar &#34; p n&amp;gt; r&amp;gt; &#34;@end defvar&#34;) (example &#34;@example &#34; p n&amp;gt; r&amp;gt; &#34;@end example&#34;) (lisp &#34;@lisp &#34; p n&amp;gt; r&amp;gt; &#34;@end lisp&#34;) (bullet &#34;@itemize @bullet{}&#34; n&amp;gt; r&amp;gt; &#34;@end itemize&#34;) (code &#34;@code{&#34; p &#34;}&#34;) (var &#34;@var{&#34; p &#34;}&#34;)&lt;/p&gt; &#xA;&lt;p&gt;lisp-mode emacs-lisp-mode ;; Specify multiple modes&lt;/p&gt; &#xA;&lt;p&gt;(lambda &#34;(lambda (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;)&lt;/p&gt; &#xA;&lt;p&gt;emacs-lisp-mode&lt;/p&gt; &#xA;&lt;p&gt;(autoload &#34;;;;###autoload&#34;) (pt &#34;(point)&#34;) (var &#34;(defvar &#34; p &#34;\n &#34;&#34; p &#34;&#34;)&#34;) (local &#34;(defvar-local &#34; p &#34;\n &#34;&#34; p &#34;&#34;)&#34;) (const &#34;(defconst &#34; p &#34;\n &#34;&#34; p &#34;&#34;)&#34;) (custom &#34;(defcustom &#34; p &#34;\n &#34;&#34; p &#34;&#34;&#34; n&amp;gt; &#34;:type &#39;&#34; p &#34;)&#34;) (face &#34;(defface &#34; p &#34; &#39;((t :inherit &#34; p &#34;))\n &#34;&#34; p &#34;&#34;)&#34;) (group &#34;(defgroup &#34; p &#34; nil\n &#34;&#34; p &#34;&#34;&#34; n&amp;gt; &#34;:group &#39;&#34; p n&amp;gt; &#34;:prefix &#34;&#34; p &#34;-&#34;)&#34;) (macro &#34;(defmacro &#34; p &#34; (&#34; p &#34;)\n &#34;&#34; p &#34;&#34;&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (alias &#34;(defalias &#39;&#34; p &#34; &#39;&#34; p &#34;)&#34;) (fun &#34;(defun &#34; p &#34; (&#34; p &#34;)\n &#34;&#34; p &#34;&#34;&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (iflet &#34;(if-let (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (whenlet &#34;(when-let (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (whilelet &#34;(while-let (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (andlet &#34;(and-let* (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (cond &#34;(cond&#34; n &#34;(&#34; q &#34;))&#34; &amp;gt;) (pcase &#34;(pcase &#34; (p &#34;scrutinee&#34;) n &#34;(&#34; q &#34;))&#34; &amp;gt;) (let &#34;(let (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (lett &#34;(let* (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (pcaselet &#34;(pcase-let (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (pcaselett &#34;(pcase-let* (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (rec &#34;(letrec (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (dotimes &#34;(dotimes (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (dolist &#34;(dolist (&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (loop &#34;(cl-loop for &#34; p &#34; in &#34; p &#34; do&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (command &#34;(defun &#34; p &#34; (&#34; p &#34;)\n &#34;&#34; p &#34;&#34;&#34; n&amp;gt; &#34;(interactive&#34; p &#34;)&#34; n&amp;gt; r&amp;gt; &#34;)&#34;) (advice &#34;(defun &#34; (p &#34;adv&#34; name) &#34; (&amp;amp;rest app)&#34; n&amp;gt; p n&amp;gt; &#34;(apply app))&#34; n&amp;gt; &#34;(advice-add #&#39;&#34; (p &#34;fun&#34;) &#34; &#34; (p &#34;:around&#34;) &#34; #&#39;&#34; (s name) &#34;)&#34;) (header &#34;;;; &#34; (file-name-nondirectory (or (buffer-file-name) (buffer-name))) &#34; -- &#34; p &#34; -&lt;em&gt;- lexical-binding: t -&lt;/em&gt;-&#34; n &#34;;;; Commentary:&#34; n &#34;;;; Code:&#34; n n) (provide &#34;(provide &#39;&#34; (file-name-base (or (buffer-file-name) (buffer-name))) &#34;)&#34; n &#34;;;; &#34; (file-name-nondirectory (or (buffer-file-name) (buffer-name))) &#34; ends here&#34; n)&lt;/p&gt; &#xA;&lt;p&gt;eshell-mode&lt;/p&gt; &#xA;&lt;p&gt;(for &#34;for &#34; (p &#34;i&#34;) &#34; in &#34; p &#34; { &#34; q &#34; }&#34;) (while &#34;while { &#34; p &#34; } { &#34; q &#34; }&#34;) (until &#34;until { &#34; p &#34; } { &#34; q &#34; }&#34;) (if &#34;if { &#34; p &#34; } { &#34; q &#34; }&#34;) (ife &#34;if { &#34; p &#34; } { &#34; p &#34; } { &#34; q &#34; }&#34;) (unl &#34;unless { &#34; p &#34; } { &#34; q &#34; }&#34;) (unle &#34;unless { &#34; p &#34; } { &#34; p &#34; } { &#34; q &#34; }&#34;)&lt;/p&gt; &#xA;&lt;p&gt;text-mode&lt;/p&gt; &#xA;&lt;p&gt;(box &#34;‚îå‚îÄ&#34; (make-string (length str) ?‚îÄ) &#34;‚îÄ‚îê&#34; n &#34;‚îÇ &#34; (s str) &#34; ‚îÇ&#34; n &#34;‚îî‚îÄ&#34; (make-string (length str) ?‚îÄ) &#34;‚îÄ‚îò&#34; n) (abox &#34;+-&#34; (make-string (length str) ?-) &#34;-+&#34; n &#34;| &#34; (s str) &#34; |&#34; n &#34;+-&#34; (make-string (length str) ?-) &#34;-+&#34; n) (cut &#34;--8&amp;lt;---------------cut here---------------start-------------&amp;gt;8---&#34; n r n &#34;--8&amp;lt;---------------cut here---------------end---------------&amp;gt;8---&#34; n) (rot13 (p &#34;plain text&#34; text) n &#34;----&#34; n (rot13 text)) (calc (p &#34;taylor(sin(x),x=0,3)&#34; formula) n &#34;----&#34; n (format &#34;%s&#34; (calc-eval formula)))&lt;/p&gt; &#xA;&lt;p&gt;rst-mode&lt;/p&gt; &#xA;&lt;p&gt;(title (make-string (length title) ?=) n (p &#34;Title: &#34; title) n (make-string (length title) ?=) n)&lt;/p&gt; &#xA;&lt;p&gt;java-mode&lt;/p&gt; &#xA;&lt;p&gt;(class &#34;public class &#34; (p (file-name-base (or (buffer-file-name) (buffer-name)))) &#34; {&#34; n&amp;gt; r&amp;gt; n &#34;}&#34;)&lt;/p&gt; &#xA;&lt;p&gt;c-mode :when (re-search-backward &#34;^\S-*$&#34; (line-beginning-position) &#39;noerror)&lt;/p&gt; &#xA;&lt;p&gt;(inc &#34;#include &amp;lt;&#34; (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) &#34;.h&#34;)) &#34;&amp;gt;&#34;) (incc &#34;#include &#34;&#34; (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) &#34;.h&#34;)) &#34;&#34;&#34;)&lt;/p&gt; &#xA;&lt;p&gt;org-mode&lt;/p&gt; &#xA;&lt;p&gt;(caption &#34;#+caption: &#34;) (drawer &#34;:&#34; p &#34;:&#34; n r &#34;&lt;span&gt;üîö&lt;/span&gt;&#34;) (begin &#34;#+begin_&#34; (s name) n&amp;gt; r&amp;gt; n &#34;#+end_&#34; name) (quote &#34;#+begin_quote&#34; n&amp;gt; r&amp;gt; n &#34;#+end_quote&#34;) (sidenote &#34;#+begin_sidenote&#34; n&amp;gt; r&amp;gt; n &#34;#+end_sidenote&#34;) (marginnote &#34;#+begin_marginnote&#34; n&amp;gt; r&amp;gt; n &#34;#+end_marginnote&#34;) (example &#34;#+begin_example&#34; n&amp;gt; r&amp;gt; n &#34;#+end_example&#34;) (center &#34;#+begin_center&#34; n&amp;gt; r&amp;gt; n &#34;#+end_center&#34;) (ascii &#34;#+begin_export ascii&#34; n&amp;gt; r&amp;gt; n &#34;#+end_export&#34;) (html &#34;#+begin_export html&#34; n&amp;gt; r&amp;gt; n &#34;#+end_export&#34;) (latex &#34;#+begin_export latex&#34; n&amp;gt; r&amp;gt; n &#34;#+end_export&#34;) (comment &#34;#+begin_comment&#34; n&amp;gt; r&amp;gt; n &#34;#+end_comment&#34;) (verse &#34;#+begin_verse&#34; n&amp;gt; r&amp;gt; n &#34;#+end_verse&#34;) (src &#34;#+begin_src &#34; q n r n &#34;#+end_src&#34;) (gnuplot &#34;#+begin_src gnuplot :var data=&#34; (p &#34;table&#34;) &#34; :file &#34; (p &#34;plot.png&#34;) n r n &#34;#+end_src&#34; :post (org-edit-src-code)) (elisp &#34;#+begin_src emacs-lisp&#34; n r n &#34;#+end_src&#34; :post (org-edit-src-code)) (inlsrc &#34;src_&#34; p &#34;{&#34; q &#34;}&#34;) (title &#34;#+title: &#34; p n &#34;#+author: Daniel Mendler&#34; n &#34;#+language: en&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; Local Variables: ;; mode: lisp-data ;; outline-regexp: &#34;[a-z]&#34; ;; End: #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Template syntax&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the Tempo syntax elements are fully supported. The syntax elements are described in detail in the docstring of &lt;del&gt;tempo-define-template&lt;/del&gt; in tempo.el. We document the important ones here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;string&#34; Inserts a string literal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;p&lt;/del&gt; Inserts an unnamed placeholder field.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;n&lt;/del&gt; Inserts a newline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&amp;gt;&lt;/del&gt; Indents with &lt;del&gt;indent-according-to-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;r&lt;/del&gt; Inserts the current region. If no region is active, quits the containing template when jumped to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;r&amp;gt;&lt;/del&gt; Acts like &lt;del&gt;r&lt;/del&gt;, but indent region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;n&amp;gt;&lt;/del&gt; Inserts a newline and indents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&amp;amp;&lt;/del&gt; Insert newline unless there is only whitespace between line start and point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;%&lt;/del&gt; Insert newline unless there is only whitespace between point and line end.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;o&lt;/del&gt; Like &lt;del&gt;%&lt;/del&gt; but leaves the point before newline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(s NAME)&lt;/del&gt; Inserts a named field.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(p PROMPT &#xA;   &lt;name&gt; &#xA;    &lt;noinsert&gt;&#xA;     )&#xA;    &lt;/noinsert&gt;&#xA;   &lt;/name&gt;&lt;/del&gt; Insert an optionally named field with a prompt. The &lt;del&gt;PROMPT&lt;/del&gt; is displayed directly in the buffer as default value. If &lt;del&gt;NOINSERT&lt;/del&gt; is non-nil, no field is inserted. Then the minibuffer is used for prompting and the value is bound to &lt;del&gt;NAME&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(r PROMPT &#xA;   &lt;name&gt; &#xA;    &lt;noinsert&gt;&#xA;     )&#xA;    &lt;/noinsert&gt;&#xA;   &lt;/name&gt;&lt;/del&gt; Insert region or act like &lt;del&gt;(p ...)&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(r&amp;gt; PROMPT &#xA;   &lt;name&gt; &#xA;    &lt;noinsert&gt;&#xA;     )&#xA;    &lt;/noinsert&gt;&#xA;   &lt;/name&gt;&lt;/del&gt; Act like &lt;del&gt;(r ...)&lt;/del&gt;, but indent region.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Furthermore Tempel supports syntax extensions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;(p FORM &#xA;   &lt;name&gt; &#xA;    &lt;noinsert&gt;&#xA;     )&#xA;    &lt;/noinsert&gt;&#xA;   &lt;/name&gt;&lt;/del&gt; Like &lt;del&gt;p&lt;/del&gt; described above, but &lt;del&gt;FORM&lt;/del&gt; is evaluated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(FORM ...)&lt;/del&gt; Other Lisp forms are evaluated. Named fields are lexically bound.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;q&lt;/del&gt; Quits the containing template when jumped to.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use caution with templates which execute arbitrary code!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Defining custom elements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tempel supports custom user elements via the configuration variable =tempel-user-elements=. As a demonstration we add the element =(i template)= to include templates by name in another template.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun tempel-include (elt) (when (eq (car-safe elt) &#39;i) (if-let (template (alist-get (cadr elt) (tempel--templates))) (cons &#39;l template) (message &#34;Template %s not found&#34; (cadr elt)) nil))) (add-to-list &#39;tempel-user-elements #&#39;tempel-include) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The following example templates uses the newly defined include element.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (header &#34;;;; &#34; (or (buffer-file-name) (buffer-name)) &#34; -- &#34; p &#34; -&lt;em&gt;- lexical-binding: t -&lt;/em&gt;-&#34; n n) (provide &#34;(provide &#39;&#34; (file-name-base (or (buffer-file-name) (buffer-name))) &#34;)&#34; n &#34;;;; &#34; (file-name-nondirectory (or (buffer-file-name) (buffer-name))) &#34; ends here&#34; n) (package (i header) r n n (i provide)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adding template sources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tempel offers a flexible mechanism for providing the templates, which are applicable to the current context. The variable &lt;del&gt;tempel-template-sources&lt;/del&gt; specifies a list of sources or a single source. A source can either be a function, which should return a list of applicable templates, or the symbol of a variable, which holds a list of templates, which apply to the current context. By default, Tempel configures only the source &lt;del&gt;tempel-path-templates&lt;/del&gt;. You may want to add global or local template variables to your user configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar my-global-templates &#39;((example &#34;Global example template&#34;)) &#34;My global templates.&#34;) (defvar-local my-local-templates nil &#34;Buffer-local templates.&#34;) (add-to-list &#39;tempel-template-sources &#39;my-global-templates) (add-to-list &#39;tempel-template-sources &#39;my-local-templates) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hooking into the Abbrev mechanism&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tempel can hook into Abbrev by enabling the &lt;del&gt;tempel-abbrev-mode&lt;/del&gt; in a buffer or by enabling the &lt;del&gt;global-tempel-abbrev-mode&lt;/del&gt;. Then the Tempel templates will be available via &lt;del&gt;expand-abbrev&lt;/del&gt; which is usually bound to &lt;del&gt;C-x &#39;&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binding important templates to a key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Important templates can be bound to a key with the small utility macro &lt;del&gt;tempel-key&lt;/del&gt; which accepts three arguments, a key, a template or name and optionally a map.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (tempel-key &#34;C-c t f&#34; fun emacs-lisp-mode-map) (tempel-key &#34;C-c t d&#34; (format-time-string &#34;%Y-%m-%d&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Internally &lt;del&gt;tempel-key&lt;/del&gt; uses &lt;del&gt;tempel-insert&lt;/del&gt; to trigger the insertion. Depending on the style of your user configuration you may want to write your own helper macros, which allow you to conveniently bind templates via [[https://github.com/jwiegley/use-package][use-package]], [[https://github.com/noctuid/general][general]] or similar keybinding packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are plenty of alternative packages which provide abbreviation or snippet expansion. Try Tempel if you like small and simple packages. With Tempel you write your templates in Lisp syntax, which from my perspective fits well to the hackable nature of Emacs. Tempel took inspiration from the [[https://nschum.de/src/emacs/tempo-snippets/][Tempo-Snippets]] package by Nikolaj Schumacher ([[https://github.com/nschum/tempo-snippets.el][GitHub link]]).&lt;/p&gt; &#xA;&lt;p&gt;List of alternatives (built-in or separate packages):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;abbrev.el: Abbreviation expansion, builtin&lt;/li&gt; &#xA; &lt;li&gt;expand.el: Abbreviation expansion, builtin&lt;/li&gt; &#xA; &lt;li&gt;skeleton.el: Lisp syntax for templates, builtin&lt;/li&gt; &#xA; &lt;li&gt;tempo.el: Lisp syntax for templates, builtin&lt;/li&gt; &#xA; &lt;li&gt;srecode.el: CEDET template manager and code generator, builtin&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/ymarco/auto-activating-snippets][aas.el]]: Auto activating snippets&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/cdominik/cdlatex][cdlatex.el]]: Fast LaTeX insertion&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tecosaur/LaTeX-auto-activating-snippets][laas.el]]: Latex auto activating snippets&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jiahaowork/muban.el][muban.el]]: Lightweight template expansion&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/placeholder][placeholder.el]]: Treat buffers as templates&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/xFA25E/tempo-abbrev][tempo-abbrev.el]]: Abbrev integration for Tempo&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/pkazmier/snippet.el][snippet.el]]: Original snippet mode, with inline expansion&lt;/li&gt; &#xA; &lt;li&gt;[[https://nschum.de/src/emacs/tempo-snippets/][tempo-snippets.el]]: Interface like snippet.el for Tempo&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/joaotavora/yasnippet][yasnippet.el]]: Template system inspired by Textmate snippets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[https://elpa.gnu.org/packages/tempel.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joaotavora/snippet</title>
    <updated>2024-01-28T01:50:17Z</updated>
    <id>tag:github.com,2024-01-28:/joaotavora/snippet</id>
    <link href="https://github.com/joaotavora/snippet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A rewrite of Yasnippet&#39;s engine (incomplete, but many parts done)&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>ledyba/.emacs.d</title>
    <updated>2024-01-28T01:50:17Z</updated>
    <id>tag:github.com,2024-01-28:/ledyba/.emacs.d</id>
    <link href="https://github.com/ledyba/.emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.emacs.d„Åß„Åô„ÄÇ&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>