<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:09:56Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>syl20bnr/spacemacs</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/syl20bnr/spacemacs</id>
    <link href="https://github.com/syl20bnr/spacemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it&#39;s Emacs *and* Vim!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;top&#34; id=&#34;fork-destination-box&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://develop.spacemacs.org&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&#34; alt=&#34;Made with Spacemacs&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://github.com/syl20bnr/spacemacs/raw/655e2886d88f79f4da01d607d29342e7447cad65/assets/gplv3.png&#34; alt=&#34;GPLv3 Software&#34; align=&#34;right&#34; width=&#34;70&#34; height=&#34;28&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.twitter.com/spacemacs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/tXSoThF.png&#34; alt=&#34;Twitter&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/title2.png&#34; alt=&#34;Spacemacs&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#core-pillars&#34;&gt;philosophy&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#who-can-benefit-from-this&#34;&gt;for whom?&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#screenshots&#34;&gt;screenshots&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION.html&#34;&gt;documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&#34;&gt;contribute&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#achievements&#34;&gt;achievements&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join Chat.svg&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/p4MddFu6Ag&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml&#34;&gt;&lt;img src=&#34;https://github.com/syl20bnr/spacemacs/actions/workflows/elisp_test.yml/badge.svg?branch=develop&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ESFVNPKP4Y742&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paypal-Donate-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://shop.spreadshirt.com/spacemacs-shop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Shop-T--Shirts-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.slant.co/topics/12/~what-are-the-best-programming-text-editors&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slant-Recommend-ff69b4.svg?sanitize=true&#34; alt=&#34;Recommend it&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick Install&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This assumes you don&#39;t have an existing Emacs setup and want to run Spacemacs as your config. If you do have one, look at the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;full installation instructions&lt;/a&gt; for other options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %appdata%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows PowerShell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $env:appdata/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#getting-help&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#emacs&#34;&gt;Emacs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#linux-distros&#34;&gt;Linux distros&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#macos&#34;&gt;macOS&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-emacs&#34;&gt;Install emacs&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-emacs-plus&#34;&gt;Using emacs-plus&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-emacs-mac&#34;&gt;Using emacs-mac&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#using-cask&#34;&gt;Using cask&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#other-ways&#34;&gt;Other ways&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-source-code-pro-font&#34;&gt;Install Source Code Pro font&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs&#34;&gt;Install Spacemacs&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#windows&#34;&gt;Windows&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs-in-windows&#34;&gt;Install Spacemacs in Windows&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#default-installation&#34;&gt;Default installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#alternative-installations&#34;&gt;Alternative installations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#modify-home-environment-variable&#34;&gt;Modify HOME environment variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#modify-spacemacs-start-directory-variable&#34;&gt;Modify spacemacs-start-directory variable&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#spacemacs-logo&#34;&gt;Spacemacs logo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#update&#34;&gt;Update&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#rolling-update-on-develop&#34;&gt;Rolling update (on develop)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#automatic-update-on-master-branch&#34;&gt;Automatic update (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#manual-update-on-master-branch&#34;&gt;Manual update (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#revert-to-a-specific-version-on-master-branch&#34;&gt;Revert to a specific version (on master branch)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#quotes&#34;&gt;Quotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#contributions&#34;&gt;Contributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#communities&#34;&gt;Communities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#spacemacs-everywhere&#34;&gt;Spacemacs Everywhere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#supporting-spacemacs&#34;&gt;Supporting Spacemacs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is a new way of experiencing Emacs -- it&#39;s a sophisticated and polished set-up, focused on ergonomics, mnemonics and consistency.&lt;/p&gt; &#xA;&lt;p&gt;Just clone and launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer&#39;s &lt;code&gt;[?]&lt;/code&gt; button for some great first key bindings to try.&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Being able to quickly switch between input styles, makes Spacemacs a great tool for pair-programming.&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs is currently in beta, and any contributions are very welcome.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/spacemacs-python.png&#34; alt=&#34;spacemacs_python&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Great documentation:&lt;/strong&gt; access the Spacemacs documentation with &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Beautiful GUI:&lt;/strong&gt; you&#39;ll love the distraction free UI and its functional mode-line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Excellent ergonomics:&lt;/strong&gt; all the key bindings are accessible by pressing the &lt;kbd&gt;space bar&lt;/kbd&gt; or &lt;kbd&gt;alt-m&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mnemonic key bindings:&lt;/strong&gt; commands have mnemonic prefixes like &lt;kbd&gt;SPC b&lt;/kbd&gt; for all the buffer commands or &lt;kbd&gt;SPC p&lt;/kbd&gt; for the project commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Batteries included:&lt;/strong&gt; discover hundreds of ready-to-use packages nicely organised in configuration layers following a set of &lt;a href=&#34;https://develop.spacemacs.org/doc/CONVENTIONS&#34;&gt;conventions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Comprehensive documentation is available for each layer by pressing &lt;kbd&gt;SPC h SPC&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also check the &lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION&#34;&gt;general documentation&lt;/a&gt;, &lt;a href=&#34;https://develop.spacemacs.org/doc/QUICK_START&#34;&gt;quick start guide&lt;/a&gt; and the &lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Help&lt;/h1&gt; &#xA;&lt;p&gt;If you need help, ask your question in the &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt; and a member of the community will help you out.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer IRC, connect to the &lt;a href=&#34;https://irc.gitter.im/&#34;&gt;Gitter Chat IRC server&lt;/a&gt; and join the &lt;code&gt;#syl20bnr/spacemacs&lt;/code&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;Last but not least there are a lot of high class tutorials available on YouTube:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jack of Some&#39;s Spacemacs related channel &lt;a href=&#34;https://www.youtube.com/watch?v=r-BHx7VNX5s&amp;amp;list=PLd_Oyt6lAQ8Rxb0HUnGbRrn6R4Cdt2yoI&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GDQuest&#39;s Game Design oriented tutorials to Spacemacs &lt;a href=&#34;https://www.youtube.com/watch?v=hCNOB5jjtmc&amp;amp;list=PLhqJJNjsQ7KFkMVBunWWzFD8SlH714qm4&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Practicalli&#39;s Clojure tutorials based on Spacemacs &lt;a href=&#34;https://www.youtube.com/watch?v=ZKuQDrQLAnc&amp;amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eivind Fonn&#39;s classic Spacemacs ABC &lt;a href=&#34;https://www.youtube.com/watch?v=ZFV5EqpZ6_s&amp;amp;list=PLrJ2YN5y27KLhd3yNs2dR8_inqtEiEweE&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is an extension of a popular text editor called Emacs. Thus you need to first install base Emacs and then download the Spacemacs extension files with Git.&lt;/p&gt; &#xA;&lt;h2&gt;Emacs&lt;/h2&gt; &#xA;&lt;p&gt;Spacemacs requires Emacs 27.1 or above. The development version of Emacs is not &lt;em&gt;officially&lt;/em&gt; supported, but it should nevertheless be expected to work.&lt;/p&gt; &#xA;&lt;p&gt;Some modes require third-party tools that you&#39;ll have to install via your favorite package manager.&lt;/p&gt; &#xA;&lt;h3&gt;Linux distros&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;emacs&lt;/code&gt; package with your linux distributions package manager.&lt;/p&gt; &#xA;&lt;p&gt;Do not install the &lt;code&gt;xemacs&lt;/code&gt; package. It&#39;s not supported by Spacemacs. XEmacs is an old fork of Emacs. The X in its name is unrelated to X11.&lt;/p&gt; &#xA;&lt;p&gt;Emacs has graphical support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some linux distributions support only emacs versions older than 27.1. In this case you should &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html&#34;&gt;built from source&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;h4&gt;Install emacs&lt;/h4&gt; &#xA;&lt;h5&gt;Using emacs-plus&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap d12frosted/emacs-plus&#xA;&#xA;# to install Emacs 27&#xA;brew install emacs-plus@27 --with-spacemacs-icon&#xA;# or to install Emacs 28&#xA;brew install emacs-plus@28 --with-spacemacs-icon&#xA;&#xA;brew link emacs-plus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using emacs-mac&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap railwaycat/emacsmacport&#xA;brew install emacs-mac&#xA;brew link emacs-mac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using cask&lt;/h5&gt; &#xA;&lt;p&gt;Homebrew now recommends to use the cask version with the following message: &#34;Please try the Cask for a better-supported Cocoa version&#34;. To install the cask version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install --cask emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs a pre-built package from &lt;a href=&#34;https://emacsformacosx.com/&#34;&gt;https://emacsformacosx.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Other ways&lt;/h5&gt; &#xA;&lt;p&gt;If you&#39;re not comfortable with the ways mentioned above, then &lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsForMacOS#toc12&#34;&gt;EmacsWiki&lt;/a&gt; lists down a few ways to install Emacs for macOS.&lt;/p&gt; &#xA;&lt;h4&gt;Install Source Code Pro font&lt;/h4&gt; &#xA;&lt;p&gt;Once Emacs is installed, run the following commands in the terminal to install the default Source Code Pro font:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap homebrew/cask-fonts&#xA;brew install --cask font-source-code-pro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install Spacemacs&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; After completing the Spacemacs &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install&#34;&gt;install process&lt;/a&gt;, then it&#39;s also recommended to add the &lt;a href=&#34;https://develop.spacemacs.org/layers/+os/osx/README.html&#34;&gt;osx layer&lt;/a&gt; to your &lt;a href=&#34;https://develop.spacemacs.org/doc/DOCUMENTATION#dotfile-configuration&#34;&gt;dotfile&lt;/a&gt;. Installation instructions are available in the documentation for the &lt;a href=&#34;https://develop.spacemacs.org/layers/+os/osx/README.html&#34;&gt;osx layer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the installed version of GnuTLS securely installing emacs packages may fail. In this case it is possible to install using &lt;code&gt;emacs --insecure&lt;/code&gt;. However be aware that this means your packages will be transferred using http, use at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;You might also have some issues when doing some search on your projects, you probably want to install GNU &lt;a href=&#34;https://formulae.brew.sh/formula/ripgrep&#34;&gt;ripgrep&lt;/a&gt; through homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Download the official 64-bit (x86_64) stable builds from the &lt;a href=&#34;https://ftp.gnu.org/gnu/emacs/windows/&#34;&gt;GNU FTP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also need &lt;code&gt;gzip&lt;/code&gt; and put it in your path, to download it go to the &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/gzip.htm&#34;&gt;GNUWin32 project page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Install Spacemacs in Windows&lt;/h4&gt; &#xA;&lt;p&gt;By default Emacs looks for the &lt;code&gt;.emacs.d&lt;/code&gt; directory in: &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Roaming&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone Spacemacs to the Roaming directory:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %appdata%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows PowerShell prompt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $env:appdata/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or if a &lt;code&gt;HOME&lt;/code&gt; environment variable has been configured, that points to your user directory: &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Clone Spacemacs to the &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; directory:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows Command Prompt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/syl20bnr/spacemacs %homepath%/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Windows PowerShell prompt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs $home/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If the following error occurs after starting Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The directory ~/.emacs.d/server is unsafe&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Fix it by changing the owner of the directory &lt;code&gt;~/.emacs.d/server&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;from Properties select the Tab “Security”,&lt;/li&gt; &#xA;   &lt;li&gt;select the button “Advanced”,&lt;/li&gt; &#xA;   &lt;li&gt;select the Tab “Owner”&lt;/li&gt; &#xA;   &lt;li&gt;change the owner to your account name&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Source: &lt;a href=&#34;https://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For efficient searches we recommend installing &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Depending on the installed version of GnuTLS securely installing emacs packages may fail. In this case it is possible to install using &lt;code&gt;emacs --insecure&lt;/code&gt;. However be aware that this means your packages will be transferred using http, use at your own risk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The period (dot) before a file or folder name, means that it&#39;s hidden. To show hidden files and folders:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press the Windows key&lt;/li&gt; &#xA;   &lt;li&gt;Type &lt;code&gt;file explorer options&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select the &lt;code&gt;View&lt;/code&gt; tab at the top&lt;/li&gt; &#xA;   &lt;li&gt;Check &lt;code&gt;Show hidden files, folders and drives&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;Default installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have an existing Emacs configuration, back it up first by running the following code in your terminal:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~&#xA;mv .emacs.d .emacs.d.bak&#xA;mv .emacs .emacs.bak&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t forget to backup and &lt;em&gt;remove&lt;/em&gt; the &lt;code&gt;~/.emacs&lt;/code&gt; file. Otherwise Spacemacs &lt;strong&gt;WILL NOT&lt;/strong&gt; be able to load. Because that file prevents Emacs from loading the proper initialization file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository with &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note: Windows users&lt;/strong&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#install-spacemacs-in-windows&#34;&gt;Windows section&lt;/a&gt; for the correct clone path.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or in case you have a limited internet connection or speed,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 https://github.com/syl20bnr/spacemacs ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Install the default fonts&lt;/p&gt; &lt;p&gt;It&#39;s recommended to install &lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro&#34;&gt;Source Code Pro&lt;/a&gt; by Adobe, as the default font. It ensures that, for example the symbols on the modeline (bottom bar) looks correct. It&#39;s also recommended to use a &#34;Fallback font&#34;. These depend on the system:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GNU/Linux: &lt;em&gt;NanumGothic&lt;/em&gt; (package named &lt;em&gt;fonts-nanum&lt;/em&gt; on Debian, for example)&lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;em&gt;Arial Unicode MS&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;em&gt;MS Gothic&lt;/em&gt; or &lt;em&gt;Lucida Sans Unicode&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If the modeline doesn&#39;t look similar to the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#introduction&#34;&gt;picture at the top of this page&lt;/a&gt;, then make sure you have the correct fallback font installed.&lt;/p&gt; &lt;p&gt;If you&#39;re running in a terminal then you&#39;ll also need to change the terminals font settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch Emacs. Spacemacs will automatically install the packages it requires.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch Emacs, and answer the questions in the Dotfile wizard installer. If you are new to Emacs and Spacemacs, then it&#39;s fine to just accept the default choices. It&#39;s easy to try the other choices later, without having to reinstall Spacemacs. They can be changed in the dotfile &lt;code&gt;~/.spacemacs&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After answering the questions, then Spacemacs starts downloading and installing the packages it requires. When the packages have been installed. Restart Emacs to complete the installation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; If you are behind a firewall or similar and you get an error regarding package downloads then you may try to disable the HTTPS protocol by starting Emacs with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;emacs --insecure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but this should be a last resort because of the security implications.&lt;/p&gt; &#xA;&lt;p&gt;You can set the &lt;code&gt;dotspacemacs-elpa-https&lt;/code&gt; variable to &lt;code&gt;nil&lt;/code&gt; in your dotfile &lt;code&gt;~/.spacemacs&lt;/code&gt; but this has the same security implications as the insecure flag. You may also want to clear out your &lt;code&gt;.emacs.d/elpa&lt;/code&gt; directory before doing this, so that any corrupted packages you may have downloaded will be re-installed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;error: Package &#39;package-build-&#39; is unavailable&lt;/code&gt; may occur due to heavy network taffic. You can fix it by setting the &lt;code&gt;dotspacemacs-elpa-timeout&lt;/code&gt; variable to &lt;code&gt;70&lt;/code&gt; in your dotfile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Warning (bytecomp)&lt;/code&gt; and other compilation warnings are perfectly normal. If you&#39;re curious, you can find out why these occur &lt;a href=&#34;https://github.com/quelpa/quelpa/issues/90#issuecomment-137982713&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the mode-line turns red then be sure to consult the &lt;a href=&#34;https://develop.spacemacs.org/doc/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternative installations&lt;/h2&gt; &#xA;&lt;p&gt;There are currently, two supported, alternative locations, for a Spacemacs configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Modify HOME environment variable&lt;/h3&gt; &#xA;&lt;p&gt;This solution is ideal for quickly trying Spacemacs without compromising your existing configuration. Clone Spacemacs outside the Emacs dotdirectory &lt;code&gt;~/.emacs.d&lt;/code&gt; and modify the HOME environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir ~/spacemacs&#xA;git clone https://github.com/syl20bnr/spacemacs.git ~/spacemacs/.emacs.d&#xA;HOME=~/spacemacs emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using the Fish shell, then you&#39;ll need to modify the last command to: &lt;code&gt;env HOME=$HOME/spacemacs emacs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Modify spacemacs-start-directory variable&lt;/h3&gt; &#xA;&lt;p&gt;This solution is better suited to &#34;embed&#34; Spacemacs into your own configuration. If you&#39;ve cloned Spacemacs into &lt;code&gt;~/.emacs.d/spacemacs/&lt;/code&gt;, then drop the following lines in the &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq spacemacs-start-directory &#34;~/.emacs.d/spacemacs/&#34;)&#xA;(load-file (concat spacemacs-start-directory &#34;init.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Spacemacs logo&lt;/h2&gt; &#xA;&lt;p&gt;For Linux users, create &lt;code&gt;spacemacs.desktop&lt;/code&gt; in &lt;code&gt;~/.local/share/applications/&lt;/code&gt; using &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/etc/emacs.desktop&#34;&gt;this&lt;/a&gt; as a reference. Change the &lt;code&gt;Name&lt;/code&gt; parameter to &lt;code&gt;Name=Spacemacs&lt;/code&gt; and the &lt;code&gt;Icon&lt;/code&gt; parameter to &lt;code&gt;Icon=/PATH/TO/EMACSD/core/banners/img/spacemacs.png&lt;/code&gt; where &lt;code&gt;PATH/TO/EMACSD&lt;/code&gt; is the path to your &lt;code&gt;.emacs.d&lt;/code&gt; directory, usually &lt;code&gt;~/.emacs.d&lt;/code&gt; or &lt;code&gt;~/.config/emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For macOS users, you need to &lt;a href=&#34;https://github.com/nashamri/spacemacs-logo&#34;&gt;download the .icns version of the logo&lt;/a&gt;, then &lt;a href=&#34;https://www.idownloadblog.com/2014/07/16/how-to-change-app-icon-mac/&#34;&gt;change the logo on the Dock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Update&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs supports two different update schemes, the default is a rolling update scheme based on the latest version of packages available. This version can be found on the &lt;code&gt;develop&lt;/code&gt; branch and is updated by a simple git pull.&lt;/p&gt; &#xA;&lt;p&gt;The second depreciated one is a fixed version scheme which is based on a stable set of packages. This version can be found on the &lt;code&gt;master&lt;/code&gt; branch and will show a notification when a new version is available. Be warned this has not been updated in a long time now so packages will be very old.&lt;/p&gt; &#xA;&lt;h2&gt;Rolling update (on develop)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Close Emacs and update the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull --rebase&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart Emacs to complete the upgrade.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Automatic update (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;When a new version is available then a little arrow appears in the mode-line.&lt;/p&gt; &#xA;&lt;p&gt;Its color depends on the number of versions that have been released since your last update. Green means that you have a recent version, orange and red means that you have an older version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/doc/img/powerline-update.png&#34; alt=&#34;powerline_update&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click on the arrow to update Spacemacs to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Manual update (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;Remove the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; angle brackets when you&#39;re typing the lines below into your shell. And replace the text: &#34;tag version which you are updating to&#34; with a tagged version. This page lists the &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/tags&#34;&gt;latest tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git fetch&#xA;git reset --hard &amp;lt;tag version which you are updating to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Revert to a specific version (on master branch)&lt;/h2&gt; &#xA;&lt;p&gt;To revert to a specific version, just checkout the corresponding branch. For instance to revert to version &lt;code&gt;0.200&lt;/code&gt;, type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git checkout origin/release-0.200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;After updating Spacemacs (either manually or automatically), then you also should check if any updates are available for your packages. On the Spacemacs Home Buffer &lt;kbd&gt;SPC b h&lt;/kbd&gt;, click (press &lt;kbd&gt;RET&lt;/kbd&gt;) on the &lt;code&gt;[Update Packages]&lt;/code&gt; button.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quotes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?at=568e627a0cdaaa62045a7df6&#34;&gt;Quote&lt;/a&gt; by &lt;a href=&#34;https://github.com/ashnur&#34;&gt;ashnur&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;«I feel that spacemacs is an aircraft carrier and I am playing table tennis&#xA;on the deck as a freerider.»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs?at=5768456c6577f032450cfedb&#34;&gt;Quote&lt;/a&gt; by &lt;a href=&#34;https://github.com/deuill&#34;&gt;deuill&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;«I LOVE SPACEMACS AND MAGIT&#xA;&#xA; That is all»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Spacemacs is a community-driven project, it needs &lt;em&gt;you&lt;/em&gt; to keep it up to date and to propose great and useful configurations for all the things!&lt;/p&gt; &#xA;&lt;p&gt;Before contributing be sure to consult the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/CONTRIBUTING.org&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;https://develop.spacemacs.org/doc/CONVENTIONS&#34;&gt;conventions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Communities&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs.stackexchange.com/questions/tagged/spacemacs&#34;&gt;Stack Exchange&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/spacemacs&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Spacemacs Everywhere&lt;/h1&gt; &#xA;&lt;p&gt;Once you&#39;ve learned the Spacemacs key bindings, you can use them in other IDEs/tools, thanks to the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcoIeni/intellimacs&#34;&gt;Intellimacs&lt;/a&gt; - Spacemacs&#39; like key bindings for IntelliJ platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcoIeni/spaceclipse&#34;&gt;Spaceclipse&lt;/a&gt; - Spacemacs’ like key bindings for Eclipse&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpaceVim/SpaceVim&#34;&gt;SpaceVim&lt;/a&gt; - A community-driven modular vim distribution&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VSpaceCode/VSpaceCode&#34;&gt;VSpaceCode&lt;/a&gt; - Spacemacs’ like key bindings for Visual Studio Code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The license is GPLv3 for all parts specific to Spacemacs, this includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the initialization and core files&lt;/li&gt; &#xA; &lt;li&gt;all the layer files&lt;/li&gt; &#xA; &lt;li&gt;the documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the packages shipped in this repository, you can refer to the files header.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nashamri/spacemacs-logo&#34;&gt;Spacemacs logo&lt;/a&gt; by &lt;a href=&#34;https://github.com/nashamri&#34;&gt;Nasser Alshammari&lt;/a&gt; released under a &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Supporting Spacemacs&lt;/h1&gt; &#xA;&lt;p&gt;The best way to support Spacemacs is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&#34;https://gitter.im/syl20bnr/spacemacs&#34;&gt;Gitter Chat&lt;/a&gt; or sending pull requests.&lt;/p&gt; &#xA;&lt;p&gt;You can show your love for the project by getting cool Spacemacs t-shirts, mugs and more in the &lt;a href=&#34;https://shop.spreadshirt.com/spacemacs-shop&#34;&gt;Spacemacs Shop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to show your support financially, then you can contribute to &lt;a href=&#34;https://salt.bountysource.com/teams/spacemacs&#34;&gt;Bountysource&lt;/a&gt;, or buy a drink for the maintainer by clicking on the &lt;a href=&#34;https://raw.githubusercontent.com/syl20bnr/spacemacs/develop/#top&#34;&gt;Paypal badge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you used spacemacs in a project, and you want to show that fact, you can use the spacemacs badge: &lt;a href=&#34;https://develop.spacemacs.org&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg?sanitize=true&#34; alt=&#34;Built with Spacemacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Markdown:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Built with Spacemacs](https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg)](https://develop.spacemacs.org)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For HTML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&#34;https://develop.spacemacs.org&#34;&amp;gt;&amp;lt;img alt=&#34;Built with Spacemacs&#34; src=&#34;https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg&#34; /&amp;gt;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Org-mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;[[https://develop.spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>minad/cape</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/minad/cape</id>
    <link href="https://github.com/minad/cape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦸cape.el - Completion At Point Extensions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: cape.el - Let your completions fly! #+author: Daniel Mendler #+language: en #+export_file_name: cape.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Cape: (cape). #+texinfo_dir_desc: Completion At Point Extensions&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/cape.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/cape.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/cape.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/cape.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/cape&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/cape-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/cape&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/cape-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cape provides a bunch of Completion At Point Extensions which can be used in combination with my [[https://github.com/minad/corfu][Corfu]] completion UI or the default completion UI. The completion backends used by &lt;del&gt;completion-at-point&lt;/del&gt; are so called &lt;del&gt;completion-at-point-functions&lt;/del&gt; (Capfs). In principle, the Capfs provided by Cape can also be used by [[https://github.com/company-mode/company-mode][Company]].&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/minad/cape/raw/logo/cape.png?raw=true&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can register the &lt;del&gt;cape-*&lt;/del&gt; functions in the &lt;del&gt;completion-at-point-functions&lt;/del&gt; list. This makes the backends available for completion, which is usually invoked by pressing &lt;del&gt;TAB&lt;/del&gt; or &lt;del&gt;M-TAB&lt;/del&gt;. The functions can also be invoked interactively to trigger the respective completion at point. You can bind them directly to a key in your user configuration. Notable commands/capfs are &lt;del&gt;cape-line&lt;/del&gt; for completion of a line from the current buffer and &lt;del&gt;cape-file&lt;/del&gt; for completion of a file name. The command &lt;del&gt;cape-symbol&lt;/del&gt; is particularily useful for documentation of Elisp packages or configurations, since it completes elisp symbols anywhere.&lt;/p&gt; &#xA;&lt;p&gt;On the more experimental side, Cape has the super power to transform Company backends into Capfs and merge multiple Capfs into a Super-Capf! These transformers allow you to still take advantage of Company backends even if you are not using Company as frontend.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available Capfs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-dabbrev&lt;/del&gt;: Complete word from current buffers&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-file&lt;/del&gt;: Complete file name&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-history&lt;/del&gt;: Complete from Eshell, Comint or minibuffer history&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-keyword&lt;/del&gt;: Complete programming language keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-symbol&lt;/del&gt;: Complete Elisp symbol&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-abbrev&lt;/del&gt;: Complete abbreviation (&lt;del&gt;add-global-abbrev&lt;/del&gt;, &lt;del&gt;add-mode-abbrev&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-ispell&lt;/del&gt;: Complete word from Ispell dictionary&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-dict&lt;/del&gt;: Complete word from dictionary file&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-line&lt;/del&gt;: Complete entire line from current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-tex&lt;/del&gt;: Complete unicode char from TeX command, e.g. &lt;del&gt;\hbar&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-sgml&lt;/del&gt;: Complete unicode char from Sgml entity, e.g., &lt;del&gt;&amp;amp;alpha&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-rfc1345&lt;/del&gt;: Complete unicode char using RFC 1345 mnemonics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cape is available on GNU ELPA and MELPA. You can install the package with &lt;del&gt;package-install&lt;/del&gt;. In the long term some of the Capfs provided by this package could be upstreamed into Emacs itself.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable Corfu completion UI ;; See the Corfu README for more configuration tips. (use-package corfu :init (global-corfu-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; Add extensions (use-package cape ;; Bind dedicated completion commands ;; Alternative prefix keys: C-c p, M-p, M-+, ... :bind ((&#34;C-c p p&#34; . completion-at-point) ;; capf (&#34;C-c p t&#34; . complete-tag) ;; etags (&#34;C-c p d&#34; . cape-dabbrev) ;; or dabbrev-completion (&#34;C-c p h&#34; . cape-history) (&#34;C-c p f&#34; . cape-file) (&#34;C-c p k&#34; . cape-keyword) (&#34;C-c p s&#34; . cape-symbol) (&#34;C-c p a&#34; . cape-abbrev) (&#34;C-c p i&#34; . cape-ispell) (&#34;C-c p l&#34; . cape-line) (&#34;C-c p w&#34; . cape-dict) (&#34;C-c p \&#34; . cape-tex) (&#34;C-c p _&#34; . cape-tex) (&#34;C-c p ^&#34; . cape-tex) (&#34;C-c p &amp;amp;&#34; . cape-sgml) (&#34;C-c p r&#34; . cape-rfc1345)) :init ;; Add &lt;code&gt;completion-at-point-functions&#39;, used by &lt;/code&gt;completion-at-point&#39;. (add-to-list &#39;completion-at-point-functions #&#39;cape-file) (add-to-list &#39;completion-at-point-functions #&#39;cape-dabbrev) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-history) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-keyword) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-tex) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-sgml) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-rfc1345) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-abbrev) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-ispell) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-dict) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-symbol) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-line) ) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Experimental features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Company adapter&lt;/p&gt; &#xA;&lt;p&gt;/Wrap your Company backend in a Cape and turn it into a Capf!/&lt;/p&gt; &#xA;&lt;p&gt;Cape provides an adapter for Company backends &lt;del&gt;cape-company-to-capf&lt;/del&gt;. The adapter transforms Company backends to Capfs which are understood by the built-in Emacs completion mechanism. The function is approximately the inverse of the &lt;del&gt;company-capf&lt;/del&gt; backend from Company. The adapter is still experimental and may have certain edge cases. The adapter can be used as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use Company backends as Capfs. (setq-local completion-at-point-functions (mapcar #&#39;cape-company-to-capf (list #&#39;company-files #&#39;company-ispell #&#39;company-dabbrev))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that the adapter does not require Company to be installed. Backends implementing the Company specification do not necessarily have to depend on Company, however in practice most backends do. The following shows a small example completion backend, which can be used with both &lt;del&gt;completion-at-point&lt;/del&gt; (Corfu, default completion) and Company.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar emojis &#39;((&#34;:-D&#34; . &#34;😀&#34;) (&#34;;-)&#34; . &#34;😉&#34;) (&#34;:-/&#34; . &#34;😕&#34;) (&#34;:-(&#34; . &#34;🙁&#34;) (&#34;:-*&#34; . &#34;😙&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;(defun emoji-backend (action &amp;amp;optional arg &amp;amp;rest _) (pcase action (&#39;prefix (and (memq (char-before) &#39;(?: ?;)) (cons (string (char-before)) t))) (&#39;candidates (all-completions arg emojis)) (&#39;annotation (concat &#34; &#34; (cdr (assoc arg emojis)))) (&#39;post-completion (let ((str (buffer-substring (- (point) 3) (point)))) (delete-region (- (point) 3) (point)) (insert (cdr (assoc str emojis)))))))&lt;/p&gt; &#xA;&lt;p&gt;;; Register emoji backend with `completion-at-point&#39; (setq completion-at-point-functions (list (cape-company-to-capf #&#39;emoji-backend)))&lt;/p&gt; &#xA;&lt;p&gt;;; Register emoji backend with Company. (setq company-backends &#39;(emoji-backend)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;It is possible to merge/group multiple Company backends and use them as a single Capf using the &lt;del&gt;company--multi-backend-adapter&lt;/del&gt; function from Company. The adapter transforms multiple Company backends into a single Company backend, which can then be used as a Capf via &lt;del&gt;cape-company-to-capf&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;company) ;; Use the company-dabbrev and company-elisp backends together. (setq completion-at-point-functions (list (cape-company-to-capf (apply-partially #&#39;company--multi-backend-adapter &#39;(company-dabbrev company-elisp))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Super-Capf - Merging multiple Capfs&lt;/p&gt; &#xA;&lt;p&gt;/Throw multiple Capfs under the Cape and get a Super-Capf!/&lt;/p&gt; &#xA;&lt;p&gt;Cape supports merging multiple Capfs using the function &lt;del&gt;cape-super-capf&lt;/del&gt;. This feature is experimental and should only be used in special scenarios. &lt;em&gt;Don&#39;t use cape-super-capf if you are not 100% sure that you need it!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;del&gt;cape-super-capf&lt;/del&gt; is not needed if you want to use multiple Capfs which are tried one by one, e.g., it is perfectly possible to use &lt;del&gt;cape-file&lt;/del&gt; together with the lsp-mode Capf or other programming mode Capfs by adding &lt;del&gt;cape-file&lt;/del&gt; to the &lt;del&gt;completion-at-point-functions&lt;/del&gt; list. The file completion will be available in comments and string literals. &lt;del&gt;cape-super-capf&lt;/del&gt; is only needed if you want to combine multiple Capfs, such that the candidates from multiple sources appear /together/ in the completion list at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Completion table merging works only for tables which are sufficiently well-behaved and tables which do not define completion boundaries. &lt;del&gt;cape-super-capf&lt;/del&gt; has the same restrictions as &lt;del&gt;completion-table-merge&lt;/del&gt; and &lt;del&gt;completion-table-in-turn&lt;/del&gt;. As a simple rule of thumb, &lt;del&gt;cape-super-capf&lt;/del&gt; works only well for static completion functions like &lt;del&gt;cape-dabbrev&lt;/del&gt;, &lt;del&gt;cape-keyword&lt;/del&gt;, &lt;del&gt;cape-ispell&lt;/del&gt;, etc., but not for complex multi-step completions like &lt;del&gt;cape-file&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Merge the dabbrev, dict and keyword capfs, display candidates together. (setq-local completion-at-point-functions (list (cape-super-capf #&#39;cape-dabbrev #&#39;cape-dict #&#39;cape-keyword))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See also the aforementioned &lt;del&gt;company--multi-backend-adapter&lt;/del&gt; from Company, which allows you to merge multiple Company backends.&lt;/p&gt; &#xA;&lt;p&gt;** Capf-Buster - Cache busting&lt;/p&gt; &#xA;&lt;p&gt;/The Capf-Buster ensures that you always get a fresh set of candidates!/&lt;/p&gt; &#xA;&lt;p&gt;If a Capf caches the candidates for too long we can use a cache busting Capf-transformer. For example the Capf merging function &lt;del&gt;cape-super-capf&lt;/del&gt; creates a Capf, which caches the candidates for the whole lifetime of the Capf. Therefore you may want to combine a merged Capf with a cache buster under some circumstances. It is noteworthy that the &lt;del&gt;company-capf&lt;/del&gt; backend from Company refreshes the completion table frequently. With the &lt;del&gt;cape-capf-buster&lt;/del&gt; we can achieve a similarly refreshing strategy.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq-local completion-at-point-functions (list (cape-capf-buster #&#39;some-caching-capf))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Other Capf transformers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-interactive-capf&lt;/del&gt;: Create a Capf which can be called interactively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-accept-all&lt;/del&gt;, &lt;del&gt;cape-capf-accept-all&lt;/del&gt;: Create a Capf which accepts every input as valid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-silent&lt;/del&gt;, &lt;del&gt;cape-capf-silent&lt;/del&gt;: Wrap a chatty Capf and silence it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-purify&lt;/del&gt;, &lt;del&gt;cape-capf-purify&lt;/del&gt;: Purify a broken Capf and ensure that it does not modify the buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-noninterruptible&lt;/del&gt;, &lt;del&gt;cape-capf-noninterruptible:&lt;/del&gt; Protect a Capf which does not like to be interrupted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-case-fold&lt;/del&gt;, &lt;del&gt;cape-capf-case-fold&lt;/del&gt;: Create a Capf which is case insensitive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-properties&lt;/del&gt;, &lt;del&gt;cape-capf-properties&lt;/del&gt;: Add completion properties to a Capf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-predicate&lt;/del&gt;, &lt;del&gt;cape-capf-predicate&lt;/del&gt;: Add candidate predicate to a Capf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-prefix-length&lt;/del&gt;, &lt;del&gt;cape-capf-prefix-length&lt;/del&gt;: Enforce a minimal prefix length.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/cape.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magit/ghub</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/magit/ghub</id>
    <link href="https://github.com/magit/ghub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Client libraries for the APIs of various Git forges&lt;/p&gt;&lt;hr&gt;&lt;p&gt;** Ghub — Client libraries for the APIs of various Git forges&lt;/p&gt; &#xA;&lt;p&gt;Ghub provides basic support for using the APIs of various Git forges from Emacs packages. Originally it only supported the Github REST API, but now it also supports the Github GraphQL API as well as the REST APIs of Gitlab, Gitea, Gogs and Bitbucket.&lt;/p&gt; &#xA;&lt;p&gt;Ghub abstracts access to API resources using only a handful of basic functions such as &lt;del&gt;ghub-get&lt;/del&gt;. These are convenience wrappers around &lt;del&gt;ghub-request&lt;/del&gt;. Additional forge-specific wrappers like &lt;del&gt;glab-put&lt;/del&gt;, &lt;del&gt;gtea-put&lt;/del&gt;, &lt;del&gt;gogs-post&lt;/del&gt; and &lt;del&gt;buck-delete&lt;/del&gt; are also available. Ghub does not provide any resource-specific functions, with the exception of &lt;del&gt;FORGE-repository-id&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When accessing Github, then Ghub handles the creation and storage of access tokens using a setup wizard to make it easier for users to get started. The tokens for other forges have to be created manually.&lt;/p&gt; &#xA;&lt;p&gt;Ghub is intentionally limited to only provide these two essential features — basic request functions and guided setup — to avoid being too opinionated, which would hinder wide adoption. It is assumed that wide adoption would make life easier for users and maintainers alike, because then all packages that talk to forge APIs could be configured the same way.&lt;/p&gt; &#xA;&lt;p&gt;Please consult the [[https://magit.vc/manual/ghub][manual]] for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redguardtoo/emacs.d</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/redguardtoo/emacs.d</id>
    <link href="https://github.com/redguardtoo/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and robust Emacs setup.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;A fast and robust Emacs setup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/redguardtoo/emacs.d/actions/workflows/test.yml][https://github.com/redguardtoo/emacs.d/actions/workflows/test.yml/badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast&lt;/li&gt; &#xA; &lt;li&gt;Robust. Packages could be installed without network&lt;/li&gt; &#xA; &lt;li&gt;Support Windows. Find&amp;amp;Grep needs only minimum setup on Windows&lt;/li&gt; &#xA; &lt;li&gt;Tested with Emacs 26.3, 27.2, 28.1 on Linux/Windows10/Cygwin/macOS/WSL(Windows Subsystem for Linux)&lt;/li&gt; &#xA; &lt;li&gt;Vanilla key bindings and directory layout is respected&lt;/li&gt; &#xA; &lt;li&gt;Works in [[https://packages.debian.org/emacs-nox][emacs-nox]] and [[http://www.putty.org/][PuTTY]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:demo.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Content :noexport:TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#a-fast-and-robust-emacs-setup][A fast and robust Emacs setup]]&lt;/li&gt; &#xA; &lt;li&gt;[[#checklist][Checklist]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#install-in-normal-way][Install in normal way]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#install-stable-version-optional][Install stable version (OPTIONAL)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#install-everything-in-one-step-optional][Install everything in one step (OPTIONAL)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#third-party-programs-optional][Third party programs (OPTIONAL)]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#tutorial-optional][Tutorial (OPTIONAL)]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#tutorial][Tutorial]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-mode-tutorial][Evil-mode tutorial]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#methodology][Methodology]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#quick-start][Quick start]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#better-runtime-performance][Better runtime performance]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#key-bindings][Key bindings]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#computers-with-smaller-memory][Computers with smaller memory]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#vim-vs-emacs][Vim vs Emacs]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#backup-packages][Backup packages]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#hardcore-debug-technique][Hardcore debug technique]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#spell-check-code][Spell check code]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#lock-packages][Lock packages]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#how-to-install-new-packages][How to install new packages?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#git-blame-current-line][Git blame current line]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#saveload-windows-layout][Save/Load windows layout]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#use-this-configuration-as-merge-tool-for-git][Use this configuration as merge tool for Git]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#default-terminal-shell][Default terminal shell]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#override-default-setup][Override default setup]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#code-navigation][Code navigation]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#code-auto-completion][Code auto-completion]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#color-theme][Color theme]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#true-colors-in-terminal-emacs][True colors in terminal Emacs]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#grepreplace-text-in-project][Grep/Replace text in project]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#hydraswipercounselivy][Hydra/Swiper/Counsel/Ivy]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#set-auto-mode-alist][Set &#34;auto-mode-alist&#34;]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#git-gutter][git-gutter]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#setup-fonts-in-gui-emacs][Setup fonts in GUI Emacs]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#synchronize-setup-with-git][Synchronize setup with Git]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#indentation][Indentation]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#editing-lisp][Editing Lisp]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#use-smart-mode-line-or-powerline][Use smart-mode-line or powerline?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#key-bindings-dont-work][Key bindings don&#39;t work?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#org-mode][Org-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#macos-user][macOS user?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#customize-global-variables][Customize global variables]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#opensave-files-with-counselivy][Open/Save files with Counsel/Ivy]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#windows][Windows]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#yasnippet][Yasnippet]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#non-english-users][Non-English users]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#behind-corporate-firewall][Behind corporate firewall]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#network-is-blocked][Network is blocked]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#email][Email]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#cannot-download-packages][Cannot download packages?]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#use-packages-on-gnu-elpa][Use packages on GNU ELPA]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#use-flycheck-to-syntax-check-code][Use flycheck to syntax check code]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#disable-vim-key-bindings][Disable Vim key bindings]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-setup][Evil setup]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#chinese-input-method-editor][Chinese Input Method Editor]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#install-multiple-versions-of-emacs][Install multiple versions of Emacs]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#change-time-locale][Change Time Locale]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#directory-structure][Directory structure]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#run-the-unit-test-before-git-commit][Run the unit test before git commit]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#python-environment][Python environment]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#set-up-lsp-mode][Set up lsp-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#enable-typewriter-sounds-when-typing][Enable typewriter sounds when typing]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#pdf-tools][pdf-tools]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#support-legacy-emacs-versions][Support legacy Emacs versions]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#emacs-25][Emacs 25]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#emacs-244-and-245][Emacs 24.4 and 24.5]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#emacs-243][Emacs 24.3]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#emacs-23][Emacs 23]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#tips][Tips]]&lt;/li&gt; &#xA; &lt;li&gt;[[#report-bug][Report bug]]&lt;/li&gt; &#xA; &lt;li&gt;[[#license][License]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checklist&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 26.1 or higher version is required&lt;/li&gt; &#xA; &lt;li&gt;Please read FAQ to disable [[http://www.vim.org][Vim]] key bindings&lt;/li&gt; &#xA; &lt;li&gt;Please read section &#34;Key bindings&#34; to learn key bindings&lt;/li&gt; &#xA; &lt;li&gt;Windows users had better download the version with dependencies bundled. For example, download &#34;emacs-26.3-x86_64.zip&#34; instead of &#34;emacs-26.2-x86_64-no-deps.zip&#34;&lt;/li&gt; &#xA; &lt;li&gt;Unstable packages from [[http://melpa.org][MELPA]] are &lt;em&gt;invisible&lt;/em&gt; but stable packages from [[https://stable.melpa.org][MELPA Stable]] are visible. Please modify variable =melpa-include-packages= in =lisp/init-elpa.el= to install unstable packages&lt;/li&gt; &#xA; &lt;li&gt;Other issues are covered in FAQ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation Please remove =&lt;del&gt;/.emacs= first. =&lt;/del&gt;= means [[https://en.wikipedia.org/wiki/Home_directory][Home directory]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most users need follow the section &#34;Install in normal way&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Section &#34;Install stable version&#34; is useful &lt;em&gt;if and only if&lt;/em&gt;,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You don&#39;t have network access&lt;/li&gt; &#xA; &lt;li&gt;You have never used any command line program&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Install in normal way There are two ways to install this setup (I recommend the first way):&lt;/p&gt; &#xA;&lt;p&gt;First way is to download [[https://github.com/redguardtoo/emacs.d/archive/master.zip][latest setup]] and extract its content into =~/.emacs.d=, OR run command =cd ~; git clone &lt;a href=&#34;https://github.com/redguardtoo/emacs.d.git&#34;&gt;https://github.com/redguardtoo/emacs.d.git&lt;/a&gt; .emacs.d= in shell.&lt;/p&gt; &#xA;&lt;p&gt;Second way is to use [[https://github.com/redguardtoo/emacs.d/archive/stable.zip][stable setup]], or run command =cd ~; git clone &lt;a href=&#34;https://github.com/redguardtoo/emacs.d.git&#34;&gt;https://github.com/redguardtoo/emacs.d.git&lt;/a&gt; .emacs.d; cd .emacs.d; git reset --hard stable= in shell.&lt;/p&gt; &#xA;&lt;p&gt;By default, packages are installed automatically during Emacs startup.&lt;/p&gt; &#xA;&lt;p&gt;Someone reported that package repository [[http://melpa.org]] is not responsive in China.&lt;/p&gt; &#xA;&lt;p&gt;No worries. You could answer &#34;YES&#34; to the question &#34;Switch to faster package repositories in China temporarily?&#34; after firing Emacs. Please note after startup you could change variable =package-archives= in =init-elpa.el= to permanently switch to Chinese repositories. ** Install stable version (OPTIONAL)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download [[https://github.com/redguardtoo/emacs.d/archive/stable.zip]]&lt;/li&gt; &#xA; &lt;li&gt;Extract its content into empty directory =~/.emacs.d=&lt;/li&gt; &#xA; &lt;li&gt;Download [[https://github.com/redguardtoo/myelpa/archive/stable.zip]]&lt;/li&gt; &#xA; &lt;li&gt;Extract the zip somewhere, say =~/projs/myelpa=&lt;/li&gt; &#xA; &lt;li&gt;Make sure a file named =archive-contents= exists in =~/projs/myelpa=&lt;/li&gt; &#xA; &lt;li&gt;Uncomment the line containing &#34;myelpa&#34; in =lisp/init-elpa.el=. Path =~/myelpa/= could be modified.&lt;/li&gt; &#xA; &lt;li&gt;Start Emacs now!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you are using local package repository =~/myelpa=.&lt;/p&gt; &#xA;&lt;p&gt;You can switch to online repositories like &lt;a href=&#34;http://elpa.gnu.org&#34;&gt;http://elpa.gnu.org&lt;/a&gt; or &lt;a href=&#34;http://melpa.org&#34;&gt;http://melpa.org&lt;/a&gt; by modifying =lisp/init-elpa.el=. ** Install everything in one step (OPTIONAL) Download content of [[https://github.com/redguardtoo/my-emacs.d-snapshot]] into =~/.emacs.d=. That&#39;s it.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not recommended for daily usage because the third party packages are not optimized for latest Emacs. ** Third party programs (OPTIONAL) *** Install Most command line programs can be installed through =default package manager=.&lt;/p&gt; &#xA;&lt;p&gt;=Default package manager= could be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/transcode-open/apt-cyg][apt-cyg]] at Cygwin&lt;/li&gt; &#xA; &lt;li&gt;package manager of [[https://www.msys2.org/docs/package-management/][MSYS2]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mxcl/homebrew][homebrew]] at macOS&lt;/li&gt; &#xA; &lt;li&gt;any package manager at Linux (=apt= on Debian/Ubuntu, =yum= on Redhat, =pacman= on Arch, =emerge= on Gentoo ...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some package managers allow you to install the program for current user. For example, python package manager =pip= has the option &#34;[[https://packaging.python.org/tutorials/installing-packages/][--user]]&#34;. *** List of programs These programs are &lt;em&gt;OPTIONAL&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please ignore error message related to command line programs. For example, if =aspell= and =hunspell= are not installed, you can ignore all the flyspell error messages. **** fortune-zh or fortune Show ancient Chinese poem or quotes from random sources. Please note you can&#39;t install =fortune-zh= through [[https://brew.sh/][homebrew]] on macOS.&lt;/p&gt; &#xA;&lt;p&gt;But there is a simple workaround:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install fortune&lt;/li&gt; &#xA; &lt;li&gt;Download =fortune-zh= code from [[https://github.com/debiancn/fortune-zh]]&lt;/li&gt; &#xA; &lt;li&gt;Extract code and run =make= in its folder&lt;/li&gt; &#xA; &lt;li&gt;copy data files and the script named =fortune-zh= into corresponding folders which =fortune= is using. You may need edit the file =fortune-zh= before copying **** w3m (web browser)&lt;/li&gt; &#xA; &lt;li&gt;Required by =emacs-w3m=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can insert =(setq mm-text-html-renderer &#39;w3m)= in =~/.gnus.el= to force HTML mail be rendered by =w3m= instead of the default HTML rendering engine =shr=.&lt;/p&gt; &#xA;&lt;p&gt;=shr= supports colored text while =w3m= not.&lt;/p&gt; &#xA;&lt;p&gt;But my =w3m= based utilities can open video/audio/image with the help of =w3m=. **** aspell or hunspell&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Required by =flyspell= **** xmlstarlet or xml&lt;/li&gt; &#xA; &lt;li&gt;Required by =lazyflymake= for HTML syntax check. **** identify from [[http://www.imagemagick.org/][ImageMagick]]&lt;/li&gt; &#xA; &lt;li&gt;Required by =org-mode= to export org file to odt contain images **** zip and unzip&lt;/li&gt; &#xA; &lt;li&gt;Required by =org-mode= to export org file to odt file **** xsel or xclip&lt;/li&gt; &#xA; &lt;li&gt;Required by my clipboard command =copy-to-x-clipboard= and =paste-from-x-clipboard= under Linux **** [[http://www.cmake.org][CMake]]&lt;/li&gt; &#xA; &lt;li&gt;Required by =cpputils-cmake=&lt;/li&gt; &#xA; &lt;li&gt;Please use [[http://www.cmake.org/Wiki/CMake_FAQ][out-of-source build tree]] when using CMake **** [[http://clang.llvm.org][Clang]]&lt;/li&gt; &#xA; &lt;li&gt;Required by =cpputils-cmake=, =company-clang= from [[https://github.com/company-mode/company-mode][company-mode]]&lt;/li&gt; &#xA; &lt;li&gt;If you use =cpputils-cmake= and =cmake=, =cpputils-cmake= will do all the setup for you. You need not read next item! But please spend &lt;em&gt;a few minutes to learn the basics of cmake&lt;/em&gt;! There is a one minute step-by-step-guide in [[https://github.com/redguardtoo/cpputils-cmake][README of cpputils-cmake]] to teach you how to use cmake.&lt;/li&gt; &#xA; &lt;li&gt;If you use =company-clang=, add =(setq company-clang-arguments &#39;(&#34;-I/example1/dir&#34; &#34;-I/example2/dir&#34;))= into =init.el= **** Pandoc&lt;/li&gt; &#xA; &lt;li&gt;Required by =markdown-preview= from =markdown-mode= **** [[https://ctags.io/][Universal Ctags (recommended)]] or [[http://ctags.sourceforge.net][Exuberant CTags]]&lt;/li&gt; &#xA; &lt;li&gt;It creates tags file for code navigation and code completion&lt;/li&gt; &#xA; &lt;li&gt;Required by many tags related packages (=xref=, =counsel-etags=, =company-ctags= from =company-mode=, etc)&lt;/li&gt; &#xA; &lt;li&gt;See [[http://blog.binchen.org/?p=1057][How to use ctags in Emacs effectively]] **** [[http://www.gnu.org/software/global][GNU Global]]&lt;/li&gt; &#xA; &lt;li&gt;Required by [[https://github.com/syohex/emacs-counsel-gtags][counsel-gtags]] and =company-gtags= from =company-mode=&lt;/li&gt; &#xA; &lt;li&gt;It creates index files for code navigation and auto-completion&lt;/li&gt; &#xA; &lt;li&gt;Please read [[https://www.gnu.org/software/global/manual/global.html][GNU Global manual]] about environment variables =GTAGSLIBPATH= and =MAKEOBJDIRPREFIX= **** LibreOffice&lt;/li&gt; &#xA; &lt;li&gt;Only its executable =soffice= is used for converting odt file into doc/pdf&lt;/li&gt; &#xA; &lt;li&gt;Conversion happens automatically when exporting org-mode to odt&lt;/li&gt; &#xA; &lt;li&gt;The conversion command is defined in variable =org-export-odt-convert-processes= **** js-beautify&lt;/li&gt; &#xA; &lt;li&gt;Beautify javascript code&lt;/li&gt; &#xA; &lt;li&gt;Install [[http://pip.readthedocs.org/en/stable/installing/][pip]] through OS package manager, then =pip install jsbeautifier= **** sdcv (console version of StarDict)&lt;/li&gt; &#xA; &lt;li&gt;Required by =sdcv.e=&lt;/li&gt; &#xA; &lt;li&gt;Run =curl &lt;a href=&#34;http://pkgs.fedoraproject.org/repo/pkgs/stardict-dic/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2/f164dcb24b1084e1cfa2b1cb63d590e6/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2&#34;&gt;http://pkgs.fedoraproject.org/repo/pkgs/stardict-dic/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2/f164dcb24b1084e1cfa2b1cb63d590e6/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2&lt;/a&gt; | tar jx -C ~/.stardict/dic= to install dictionary **** [[https://github.com/BurntSushi/ripgrep][ripgrep]]&lt;/li&gt; &#xA; &lt;li&gt;Optionally used by =M-x counsel-etags-grep= to search text in files&lt;/li&gt; &#xA; &lt;li&gt;Run =curl &lt;a href=&#34;https://sh.rustup.rs&#34;&gt;https://sh.rustup.rs&lt;/a&gt; -sSf | sh= in shell to install [[https://www.rust-lang.org/][Rust]] then =cargo install ripgrep=&lt;/li&gt; &#xA; &lt;li&gt;Tweak environment variable =PATH= so Emacs can find ripgrep **** [[http://www.sbcl.org/][sbcl]]&lt;/li&gt; &#xA; &lt;li&gt;Required by [[https://common-lisp.net/project/slime/][SLIME: The Superior Lisp Interaction Mode for Emacs]] **** ffmpeg&lt;/li&gt; &#xA; &lt;li&gt;Some dired commands use ffmpeg to process video/audio **** LanguageTool Grammar, Style and Spell Checker&lt;/li&gt; &#xA; &lt;li&gt;Download from [[https://languagetool.org/download/LanguageTool-stable.zip]].&lt;/li&gt; &#xA; &lt;li&gt;Used by [[https://github.com/mhayashi1120/Emacs-langtool][Langtool]]. Check its README for usage. My setup is just one liner =(setq langtool-language-tool-jar &#34;/path/to/languagetool-commandline.jar&#34;)=&lt;/li&gt; &#xA; &lt;li&gt;Read the head of =site-lisp/langtool/langtool.el= for more customization because I patched it and added more features **** [[https://github.com/koalaman/shellcheck][shellcheck]]&lt;/li&gt; &#xA; &lt;li&gt;Check syntax of shell script&lt;/li&gt; &#xA; &lt;li&gt;Required by =lazyflymake= **** [[https://mkvtoolnix.download/][mkvtoolnix]]&lt;/li&gt; &#xA; &lt;li&gt;Used by hydra in dired buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tutorial (OPTIONAL) Knowledge of Linux/Unix is required. At least you need know the meanings of &#34;environment variable&#34;, &#34;shell&#34;, &#34;stdin&#34;, &#34;stdout&#34;, &#34;man&#34;, &#34;info&#34;. ** Tutorial Please read this tutorial at least for once. *** Step 1, learn basics At minimum you need know how Emacs interacts with other command line programs,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What is [[https://en.wikipedia.org/wiki/Environment_variable][Environment Variable]]&lt;/li&gt; &#xA; &lt;li&gt;What is [[https://en.wikipedia.org/wiki/Pipeline_(Unix)][Pipeline (Unix)]], [[https://en.wikipedia.org/wiki/Standard_streams][Standard Streams]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Step 2, read official tutorial Press =C-h t= in Emacs (&#34;C&#34; means Ctrl key, &#34;M&#34; means Alt key) to read bundled tutorial.&lt;/p&gt; &#xA;&lt;p&gt;At minimum, you need learn:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to move cursor&lt;/li&gt; &#xA; &lt;li&gt;=C-h v= to describe variable&lt;/li&gt; &#xA; &lt;li&gt;=C-h f= to describe function&lt;/li&gt; &#xA; &lt;li&gt;=C-h k= to describe command key binding *** Step 3, know org-mode basics [[http://orgmode.org/][Org-mode]] is for notes-keeping and planning.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please watch [[https://www.youtube.com/watch?v=oJTwQvgfgMM][Carsten Dominik&#39;s talk]]. It&#39;s really simple. The only hot key to remember is =Tab=. *** Step 4, start from a real world problem You can visit [[http://www.emacswiki.org/emacs/][EmacsWiki]] for the solution. Newbies can ask for help at [[http://www.reddit.com/r/emacs/]]. *** Step 5 (optional), improve your shell/cli skills You could read free books/guides at [[https://tldp.org/][The Linux Documentation Project]]. ** Evil-mode tutorial Required for vim user,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Must read [[http://superuser.com/questions/246487/how-to-use-vimtutor][vimtutor]].&lt;/li&gt; &#xA; &lt;li&gt;Optionally read [[https://evil.readthedocs.io/en/latest/index.html]] ** Methodology See [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide][Master Emacs in One Year]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Original configuration from Emacs or third party packages are respected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Quick start On Windows, you need install Cygwin which provides command line programs to Emacs. Cygwin could be installed on any hard drive but it&#39;s highly recommended don&#39;t change it relative path to the root driver.&lt;/p&gt; &#xA;&lt;p&gt;Install Ctags (Universal Ctags is better. Exuberant Ctags is fine). On Windows, you could install Ctags through Cygwin.&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x counsel-etags-find-tag-at-point= from =counsel-etags= to navigate code. It uses tags files created by ctags. Tags file will be automatically created/update when you start using =counsel-etags=.&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x counsel-etags-grep= to search text (grep) in project. Project root is automatically detected.&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x find-file-in-project-by-selected= from =find-file-in-project= to find file in project. Project root is automatically detected. You can also add one line setup in =.emacs= like =(setq ffip-project-root &#34;~/proj1/&#34;)=.&lt;/p&gt; &#xA;&lt;p&gt;Code auto-completion works out of box by using tags file created by Ctags. You need run =counsel-etags= at least once to fire up Ctags. =company-ctags= from =company-mode= provides the candidates for auto completion. No manual setup is required.&lt;/p&gt; &#xA;&lt;p&gt;Please [[https://en.wikipedia.org/wiki/Grep][grep]] in the directory =&lt;del&gt;/.emacs.d/lisp= if you have any further questions on setup. ** Better runtime performance *** Why opening file is slow Insert below code into =&lt;/del&gt;/.custom.el=, replace &#34;/home/user1/your-file-path&#34; with the file you want to open, #+begin_src elisp (defun profile-open-file () (interactive) (profiler-start &#39;cpu) (find-file &#34;/home/user1/your-file-path&#34;) (profiler-report) (profiler-stop)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x profile-open-file= and read the report. ** Key bindings Don&#39;t memorize any key binding. Try =M-x any-command-in-emacs= and hint for its key binding is displayed.&lt;/p&gt; &#xA;&lt;p&gt;Most key bindings are defined in =lisp/init-evil.el=, a few key in =lisp/init-hydra.el= which uses [[https://github.com/abo-abo/hydra][Hydra]].&lt;/p&gt; &#xA;&lt;p&gt;Press =C-c C-y= anywhere to bring up default hydra menu.&lt;/p&gt; &#xA;&lt;p&gt;The tutorials I recommended have enough information about commands.&lt;/p&gt; &#xA;&lt;p&gt;Besides, &#34;[[http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html][How to be extremely efficient in Emacs]]&#34; lists my frequently used commands.&lt;/p&gt; &#xA;&lt;p&gt;Press =kj= to escape from =evil-insert-state= and everything else in Emacs. It&#39;s much more efficient than =ESC= in Vim or =C-g= in Emacs. Search =evil-escape= in =init-evil.el= for details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAQ ** Computers with smaller memory Make sure you have this line in =early-init.el= (Emacs 27.1+) or at the beginning of =init.el= (Emacs 26), #+begin_src elisp (setq my-computer-has-smaller-memory-p t) #+end_src ** Vim vs Emacs I prefer default hotkeys&amp;amp;commands from EVIL and Emacs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But sometimes a mixed style could be better for my personal workflow. See the function =my-optimize-evil= in =init-evil.el=.&lt;/p&gt; &#xA;&lt;p&gt;You can insert =(my-optimize-evil)= into =~/.custom.el= to enable it. ** Backup packages Run =M-x elpamr-create-mirror-for-installed= create a local repository from installed packages. See [[https://github.com/redguardtoo/elpa-mirror]] for more details. ** Hardcore debug technique This Emacs configuration is fast and robust.&lt;/p&gt; &#xA;&lt;p&gt;So most tricky problems come from extra third party packages you installed.&lt;/p&gt; &#xA;&lt;p&gt;Try [[https://en.wikipedia.org/wiki/Strace][Strace]] if you can&#39;t resolve the issue by grepping the Emacs Lisp code.&lt;/p&gt; &#xA;&lt;p&gt;Debug network request sent by Emacs, #+begin_src sh strace -f -e trace=network -s 10000 -o ~/emacs-err.txt /usr/bin/emacs -nw #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Debug system API call sent by Emacs, #+begin_src sh strace -o ~/emacs-err.txt /usr/bin/emacs -nw #+end_src ** Spell check code This configuration uses [[https://github.com/redguardtoo/wucuo][wucuo]] which is alternative of =flyspell-mode= and =flyspell-prog-mode=.&lt;/p&gt; &#xA;&lt;p&gt;Wucuo is fast, reliable, and powerful. It&#39;s better than any spell checking solutions of other text and IDE.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer your own spell check solution, insert below code to disable wucuo first, #+begin_src elisp (setq my-disable-wucuo t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For further knowledge on spell checking, you could read [[http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html][my article]] and code in =init-spelling.el=. ** Lock packages Some packages are so important to my workflow that they are locked.&lt;/p&gt; &#xA;&lt;p&gt;Those packages are placed at =site-lisp/=.&lt;/p&gt; &#xA;&lt;p&gt;They will not be upgraded by package system.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure same package is not installed through elpa. Please check the content of directory &#34;elpa/&#34; in =.emacs.d= root. ** How to install new packages? I only use two package repositories,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://stable.melpa.org]] (holding stable packages)&lt;/li&gt; &#xA; &lt;li&gt;[[https://melpa.org]] (holding latest but unstable packages)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a package named =MY-PKG= exists in the stable repository, you only need one line setup, #+begin_src elisp (require-package &#39;MY-PKG) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This line could be placed in =lisp/init-elpa.el= or =~/.custom.el=.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;d better place everything related to =MY-PKG= into =~/.custom.el= so the main stream change won&#39;t impact your own configuration.&lt;/p&gt; &#xA;&lt;p&gt;If the package does not exist in the stable repository, modify =melpa-include-packages= in =lisp/init-elpa.el= first.&lt;/p&gt; &#xA;&lt;p&gt;I encourage you to read =init-elpa.el= to understand how packages are managed if you are good at Emacs Lisp, ** Git blame current line Run =vc-msg-show=.&lt;/p&gt; &#xA;&lt;p&gt;If you select a region inside current line, the &lt;em&gt;correct commit which submits the selected snippet&lt;/em&gt; is displayed instead of the latest commit touch the whole line. ** Save/Load windows layout =SPC s s= or =M-x wg-create-workgrou= to save windows layout. =SPC l l= or =M-x wg-open-workgroup= to load windows layout.&lt;/p&gt; &#xA;&lt;p&gt;** Use this configuration as merge tool for Git This configuration might be the most efficient and most powerful merge tool for VCS. Insert below configuration into =~/.gitconfig=, #+begin_src javascript [mergetool.ediff]&lt;/p&gt; &#xA;&lt;h1&gt;use git mergetool ediff to resolve conflicts&lt;/h1&gt; &#xA;&lt;p&gt;cmd = emacs -nw -Q --eval &#34;(setq startup-now t)&#34; -l &#34;~/.emacs.d/init.el&#34; --eval &#34;(progn (setq ediff-quit-hook &#39;kill-emacs) (if (file-readable-p \&#34;$BASE\&#34;) (ediff-merge-files-with-ancestor \&#34;$LOCAL\&#34; \&#34;$REMOTE\&#34; \&#34;$BASE\&#34; nil \&#34;$MERGED\&#34;) (ediff-merge-files \&#34;$LOCAL\&#34; \&#34;$REMOTE\&#34; nil \&#34;$MERGED\&#34;)))&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then run =git mergetool -t ediff= to resolve conflicts.&lt;/p&gt; &#xA;&lt;p&gt;Here is [[https://gist.github.com/redguardtoo/d4ecd51f785bd117a6a0][my ~/.gitconfig]]. You can use [[https://github.com/redguardtoo/test-git-mergetool]] to practice. ** Default terminal shell Run =M-x shell=. If you use Zsh instead of Bash, please modify =init-term-mode.el=.&lt;/p&gt; &#xA;&lt;p&gt;You can customize =my-term-program= whose default value is =/bin/bash=. It&#39;s used by =ansi-term=. ** Override default setup Place your setup in =~/.custom.el= which is loaded after other &#34;*.el&#34;.&lt;/p&gt; &#xA;&lt;p&gt;So you can use any functions defined in my emacs configuration.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample to override keybindings defined in =lisp/init-evil.el=, #+begin_src elisp (with-eval-after-load &#39;evil (my-space-leader-def &#34;ss&#34; &#39;pwd &#34;ll&#34; &#39;pwd &#34;pp&#34; &#39;pwd)) #+end_src ** Code navigation It&#39;s usable out of box if Ctags is installed.&lt;/p&gt; &#xA;&lt;p&gt;To navigate, =M-x counsel-etags-find-tag-at-point=.&lt;/p&gt; &#xA;&lt;p&gt;To enable code auto-completion, =M-x counsel-etags-scan-code= at least once.&lt;/p&gt; &#xA;&lt;p&gt;Optionally, you can add =(add-hook &#39;after-save-hook &#39;counsel-etags-virtual-update-tags)= into your =.emacs= to automatically update tags file.&lt;/p&gt; &#xA;&lt;p&gt;No further setup is required. ** Code auto-completion I assume you are using [[https://github.com/company-mode/company-mode][company-mode]]. In this setup, users can press digit key to select the candidate from =company-mode=. To disabled this feature, =(setq my-company-select-by-number-p nil)=. Please see =my-company-zero-key-for-filter= for more tips.&lt;/p&gt; &#xA;&lt;p&gt;*** C++ auto-completion doesn&#39;t work? There are many ways to scan the C++ source files. =company-clang= from =company-mode= and =Clang= is good at handling C++.&lt;/p&gt; &#xA;&lt;p&gt;If you use clang to parse the C++ code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure code is syntax correct&lt;/li&gt; &#xA; &lt;li&gt;assign reasonable value into =company-clang-arguments=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is sample setup: #+begin_src elisp (setq company-clang-arguments &#39;(&#34;-I/home/myname/projs/test-cmake&#34; &#34;-I/home/myname/projs/test-cmake/inc&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In &#34;friendly&#34; Visual C++, [[http://www.codeproject.com/Tips/588022/Using-Additional-Include-Directories][similar setup]] is required.&lt;/p&gt; &#xA;&lt;p&gt;You can use other backends instead of =clang=. For example, you can use =company-gtags= and [[https://www.gnu.org/software/global/][GNU Global]] instead. See [[http://blog.binchen.org/posts/emacs-as-c-ide-easy-way.html][Emacs as C++ IDE, easy way]] for details.&lt;/p&gt; &#xA;&lt;p&gt;*** Auto-completion for other languages It&#39;s similar to C++ setup. Since GNU Global supports many popular languages, you can use =company-gtags=.&lt;/p&gt; &#xA;&lt;p&gt;For languages GNU Global doesn&#39;t support, you can fall back to =company-ctags= and [[https://en.wikipedia.org/wiki/Ctags][Ctags]]. Ctags configuration file is =~/.ctags=.&lt;/p&gt; &#xA;&lt;p&gt;You can also complete line by =M-x eacl-complete-line= and complete multi-lines statement by =M-x eacl-complete-multiline=. ** Color theme *** Auto load classic color theme Add below code to =~/.custom.el= to load a random classic dark color theme during startup, #+begin_src elisp (setq my-enable-startup-color-theme-p t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you prefer using your own color theme, you don&#39;t need above line.&lt;/p&gt; &#xA;&lt;p&gt;*** Preview color theme Check [[https://emacsthemes.com/]].&lt;/p&gt; &#xA;&lt;p&gt;Write down the name of color theme (for example, molokai).&lt;/p&gt; &#xA;&lt;p&gt;*** Setup color theme manually (recommended) You can =M-x counsel-load-theme= to switch themes.&lt;/p&gt; &#xA;&lt;p&gt;Or you can insert below code into end of =~/.custom.el= or =init.el=, #+begin_src elisp ;; Please note the color theme&#39;s name is &#34;molokai&#34; (load-theme &#39;molokai t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also run =M-x random-color-theme= to load random color theme. *** Use color theme in terminal Use 256 colors is just one CLI without any extra setup, #+BEGIN_SRC sh TERM=xterm-256color emacs -nw #+END_SRC ** True colors in terminal Emacs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Emacs 26&lt;/li&gt; &#xA; &lt;li&gt;Install [[https://gist.github.com/XVilka/8346728][terminals supporting true color]]. I suggest [[https://mintty.github.io/][mintty]] on Windows, [[https://gnometerminator.blogspot.com/p/introduction.html][terminator]] on Linux, [[https://www.iterm2.com/][iTerm2]] on macOS&lt;/li&gt; &#xA; &lt;li&gt;[[http://www.gnu.org/software/emacs/manual/html_node/efaq/Colors-on-a-TTY.html][Set up and start Emacs]] ** Grep/Replace text in project Many third party plugins bundled in this setup have already provided enough features. For example, if you use =git=, =counsel-git-grep= from package [[https://github.com/abo-abo/swiper][counsel/ivy]] works out of the box.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A generic grep program =counsel-etags-grep= is also provided. Since =counsel-etags-grep= is based on =counsel/ivy=, it also supports a magic called &#34;multi-editing via Ivy&#34;. You could read [[https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/][Nuclear weapon multi-editing via Ivy and Ag]] to get the idea.&lt;/p&gt; &#xA;&lt;p&gt;Multi-edit workflow is optimized. After =M-x counsel-etags-grep= or pressing =,qq=, press =C-c C-o C-x C-q= to enable =wgrep-mode=. You can edit text (for example, delete lines) in =wgrep-mode= directly.&lt;/p&gt; &#xA;&lt;p&gt;You can exclude multiple keywords using =!keyword1 keyword2= in =ivy=. ** Hydra/Swiper/Counsel/Ivy I love all the packages from [[https://github.com/abo-abo][Oleh Krehel (AKA abo-abo)]]. Every article from his [[https://oremacs.com/][blog]] is worth reading ten times.&lt;/p&gt; &#xA;&lt;p&gt;You can input =:pinyin1 pinyin2 !pinyin3 pinyin4= in ivy UI to search by Chinese Pinyin. The key point is to make sure the first character of input is &#34;:&#34;. ** Set &#34;auto-mode-alist&#34; The =auto-mode-alist= associates major modes with files.&lt;/p&gt; &#xA;&lt;p&gt;For example, associate =rjsx-mode= file with extension &#34;*.jsx&#34;, #+begin_src elisp (push (&#34;\.jsx\&#39;&#34; . rsjx-mode) auto-mode-alist) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or you can use function =my-add-auto-mode= provided by this configuration, #+begin_src elisp (my-add-auto-mode &#39;rjsx-mode &#34;\.jsx\&#39;&#34;) #+end_src ** git-gutter I use modified version of =git-gutter= for now until my pull request is merged into official repository.&lt;/p&gt; &#xA;&lt;p&gt;You can set =git-gutter:exp-to-create-diff= to make git gutter support other VCS (Perforce, for example), #+begin_src elisp (setq git-gutter:exp-to-create-diff (shell-command-to-string (format &#34;p4 diff -du -db %s&#34; (file-relative-name buffer-file-name)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Please note =git-gutter= assumes the cli program [[https://www.gnu.org/software/diffutils/][diff]] is added into environment variable PATH. You might need install it through MSYS2 or Cygwin on Windows. ** Setup fonts in GUI Emacs Non-Chinese can use [[https://github.com/rolandwalker/unicode-fonts][unicode-fonts]].&lt;/p&gt; &#xA;&lt;p&gt;Chinese can use [[https://github.com/tumashu/cnfonts][cnfonts]].&lt;/p&gt; &#xA;&lt;p&gt;They are not included in this setup. You need install them manually. ** Synchronize setup with Git Synchronize from my stable setup: #+begin_src bash git pull &lt;a href=&#34;https://redguardtoo@github.com/redguardtoo/emacs.d.git&#34;&gt;https://redguardtoo@github.com/redguardtoo/emacs.d.git&lt;/a&gt; stable #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or latest setup: #+begin_src bash git pull &lt;a href=&#34;https://redguardtoo@github.com/redguardtoo/emacs.d.git&#34;&gt;https://redguardtoo@github.com/redguardtoo/emacs.d.git&lt;/a&gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can revert commit: #+begin_src bash&lt;/p&gt; &#xA;&lt;h1&gt;always start from the latest related commit&lt;/h1&gt; &#xA;&lt;p&gt;git revert commit-2014-12-01 git revert commit-2014-11-01 #+end_src ** Indentation Learn [[http://www.emacswiki.org/emacs/IndentationBasics][basics]]. Then use [[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][my solution]]. ** Editing Lisp Please note [[http://emacswiki.org/emacs/ParEdit][paredit-mode]] is enabled when editing Lisp. Search &#34;paredit cheat sheet&#34; to learn its key bindings. ** Use [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]] or [[https://github.com/milkypostman/powerline][powerline]]? Comment out =(require &#39;init-modeline)= in =init.el= at first. ** Key bindings don&#39;t work? Other desktop applications may intercept the key bindings. For example, [[https://github.com/redguardtoo/emacs.d/issues/320][it&#39;s reported QQ on windows 8 can intercept &#34;M-x&#34;]]. ** Org-mode Press =M-x org-version=, then read online manual to set up.&lt;/p&gt; &#xA;&lt;p&gt;For example, =org-capture= requires [[http://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture][manual setup]].&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x org-open-at-point= to open link under cursor. Http link will be opened by =emacs-w3m=. =C-u M-x org-open-at-point= uses the external browser specified by =browse-url-generic-program= whose value could be =/usr/bin/firefox=. ** macOS user? Please replace legacy Emacs 22 and ctags with the new versions.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way is change [[https://en.wikipedia.org/wiki/PATH_(variable)][Environment variable PATH]]. ** Customize global variables Some variables are set by this configuration so you can&#39;t =M-x customize= to modify them.&lt;/p&gt; &#xA;&lt;p&gt;Here are the steps to set these variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find the variable description by =M-x customize=. For example, if the description of a variable is &#34;Company Clang Insert Arguments&#34;, then the variable name is =company-clang-insert-argument=&lt;/li&gt; &#xA; &lt;li&gt;Find the variable =company-clang-insert-argument= in =lisp/init-company.el= and change its value&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BTW, please &lt;em&gt;read my code comment&lt;/em&gt; first before changing my code. ** Open/Save files with Counsel/Ivy Keep pressing =C-M-j= to ignore candidates and open/save files using current input.&lt;/p&gt; &#xA;&lt;p&gt;You can also press =M-o= to apply other action on selected file. See [[https://oremacs.com/2015/07/23/ivy-multiaction/]] for details. ** Windows I strongly suggest [[http://www.cygwin.com/][Cygwin]] Emacs.&lt;/p&gt; &#xA;&lt;p&gt;If you use Windows Emacs, you need help Emacs to find third party command line programs from Cygwin. So you&#39;d better add =C:\Cygwin64\bin= to environment variable =PATH=.&lt;/p&gt; &#xA;&lt;p&gt;Most command line programs are originally developed for macOS and Linux. They can only handle UTF-8 encoded text. When grepping text or searching file, the Windows Emacs need run the command line programs in Command Prompt which only uses UTF-16 encoded text. So you might need [[https://stackoverflow.com/questions/57131654/using-utf-8-encoding-chcp-65001-in-command-prompt-windows-powershell-window?noredirect=1&amp;amp;lq=1][Using UTF-8 Encoding (CHCP 65001) in Command Prompt / Windows Powershell (Windows 10)]] if Emacs need pass Non-ASCII text to external command line programs.&lt;/p&gt; &#xA;&lt;p&gt;Below Emacs commands do not require external command line programs, so they works out of box on Windows,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x swiper&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x ffip-lisp-find-file-in-project&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x find-lisp-find-dired&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x find-by-pinyin-dired&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x find-by-pinyin-in-project-dired&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can set environment variables in PowerShell, like, #+begin_src sh setx var_name &#34;var_value&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Environment variable =HOME= points to the directory =C:\Users&amp;lt;username&amp;gt;= on Windows by default. You need copy the folder =.emacs.d= into that directory. Or you can change the value of =HOME=.&lt;/p&gt; &#xA;&lt;p&gt;I use below cli to set the variable =HOME= to &#34;c:\cygwin\home\cb&#34;, #+begin_src sh setx HOME &#34;c:\cygwin\home\cb&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Yasnippet&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instead of =M-x yas-expand= or pressing =TAB= key, you can press =M-j= instead.&lt;/li&gt; &#xA; &lt;li&gt;Yasnippet works out of box. But you can =M-x my-yas-reload-all= to force Yasnippet compile all the snippets. If you run =my-yas-reload-all= once, you always need run it when new snippets is added. The purpose of =my-yas-reload-all= is to make Emacs start up faster.&lt;/li&gt; &#xA; &lt;li&gt;You can add your snippets into =snippets/=.&lt;/li&gt; &#xA; &lt;li&gt;Run =grep -rns --exclude=&#39;.yas*&#39; &#39;key:&#39; *= in =snippets/= to see my own snippets ** Non-English users Locale must be &lt;em&gt;UTF-8 compatible&lt;/em&gt;. For example, as I type =locale= in shell, I got the output =zh_CN.UTF-8=. ** Behind corporate firewall Run below command in shell: #+begin_src bash http_proxy=&lt;a href=&#34;http://yourname:passwd@proxy.company.com:8080&#34;&gt;http://yourname:passwd@proxy.company.com:8080&lt;/a&gt; emacs -nw #+end_src ** Network is blocked Try [[https://github.com/XX-net/XX-Net]]. Run command =http_proxy=&lt;a href=&#34;http://127.0.0.1:8087&#34;&gt;http://127.0.0.1:8087&lt;/a&gt; emacs -nw= in shell after starting XX-Net. ** Email If you use Gnus for email, check =init-gnus.el= and read [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org][my Gnus tutorial]]. ** Cannot download packages? Some package cannot be downloaded automatically because of network problem.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run =M-x package-refresh-content=, restart Emacs, reinstall package. ** Use packages on [[https://elpa.gnu.org/][GNU ELPA]] By default, packages from GNU ELPA are NOT available. Search the line &#34;uncomment below line if you need use GNU ELPA&#34; in =init-elpa.el= if you want to access GNU ELPA.&lt;/p&gt; &#xA;&lt;p&gt;For example, [[https://github.com/flycheck/flycheck][flycheck]] requires packages from GNU ELPA. ** Use flycheck to syntax check code If you prefer =flycheck= instead the default syntax check solution =lazyflymake= built into this configuration.&lt;/p&gt; &#xA;&lt;p&gt;Install and set up =flycheck= and insert below code to disable =lazyflymake=, #+begin_src elisp (setq my-disable-lazyflymake t) #+end_src ** Disable Vim key bindings By default EVIL (Vim emulation in Emacs) is used. Comment out line containing =(require &#39;init-evil)= in init.el to unload it. ** Evil setup It&#39;s defined in =lisp/init-evil.el=. Press =C-z= to switch between Emacs and Vim key bindings.&lt;/p&gt; &#xA;&lt;p&gt;You could visit [[https://github.com/emacs-evil/evil/][its website]] to download its free ebook there.&lt;/p&gt; &#xA;&lt;p&gt;You can set =my-initial-evil-state-setup= to customize the initial evil state per major mode, #+begin_src elisp ;; &lt;code&gt;diff-mode&#39; uses Emacs original key bindings (push &#39;(diff-mode . emacs) my-initial-evil-state-setup) ;; &lt;/code&gt;ivy-occur-grep-mode&#39; initial state is evil normal state. Vim key bindings are used. (push &#39;(ivy-occur-grep-mode . normal) my-initial-evil-state-setup) #+end_src ** Chinese Input Method Editor Please note pyim is already built into this setup. You need not install it through ELPA.&lt;/p&gt; &#xA;&lt;p&gt;Run =M-x toggle-input-method= to toggle input method [[https://github.com/tumashu/pyim][pyim]]. *** Use Pinyin The default dictionary for pinyin might not be big enough. So you need install bigger dictionaries.&lt;/p&gt; &#xA;&lt;p&gt;Dictionaries with &#34;.pyim&#34; extension under the directory =~/.eim/= are automatically loaded.&lt;/p&gt; &#xA;&lt;p&gt;Please run =curl -L &lt;a href=&#34;https://raw.githubusercontent.com/redguardtoo/pyim-tsinghua-dict/master/pyim-tsinghua-dict.pyim&#34;&gt;https://raw.githubusercontent.com/redguardtoo/pyim-tsinghua-dict/master/pyim-tsinghua-dict.pyim&lt;/a&gt; &amp;gt; ~/.eim/pyim-tsinghua-dict.pyim= to install extra dictionaries.&lt;/p&gt; &#xA;&lt;p&gt;The default pinyin scheme is =quanpin= but you can insert below code into =&lt;del&gt;/.custom.el= to switch to a different pinyin scheme, #+begin_src elisp (with-eval-after-load &#39;pyim (setq pyim-default-scheme &#39;xiaohe-shuangpin)) #+end_src *** Use Wubi Dictionary for wubi is already installed. Please insert below code into =&lt;/del&gt;/.custom.el= to enable wubi dictionary and use wubi scheme, #+begin_src elisp (setq my-pyim-enable-wubi-dict t) (with-eval-after-load &#39;pyim (setq pyim-default-scheme &#39;wubi)) #+end_src ** Install multiple versions of Emacs Run below commands to install Emacs 26.3 into the directory =~/myemacs/26.3=: #+begin_src bash mkdir -p ~/tmp; curl &lt;a href=&#34;http://ftp.gnu.org/gnu/emacs/emacs-26.3.tar.gz&#34;&gt;http://ftp.gnu.org/gnu/emacs/emacs-26.3.tar.gz&lt;/a&gt; | tar xvz -C ~/tmp/emacs-26.3 cd &lt;del&gt;/tmp/emacs-26.3; mkdir -p &lt;del&gt;/myemacs/26.3; rm -rf &lt;del&gt;/myemacs/26.3/*; ./configure --prefix=&lt;/del&gt;/myemacs/26.3 --without-x --without-dbus --without-sound &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install #+end_src ** Change Time Locale Insert below code into =&lt;/del&gt;/.emacs= or =&lt;/del&gt;/.custom.el=, #+begin_src elisp ;; Use en_US locale to format time. ;; if not set, the OS locale is used. (setq system-time-locale &#34;C&#34;) #+end_src ** Directory structure =init.el= is the main file. It includes other =*.el= files.&lt;/p&gt; &#xA;&lt;p&gt;=lisp/init-elpa.el= defines what packages will be installed from [[http://melpa.org][MELPA]].&lt;/p&gt; &#xA;&lt;p&gt;Packages are installed into the directory =elpa/=.&lt;/p&gt; &#xA;&lt;p&gt;I also manually download and extract some packages into =site-lisp/=. Packages in =site-lisp/= are &lt;em&gt;not visible&lt;/em&gt; to the package manager.&lt;/p&gt; &#xA;&lt;p&gt;My own snippets is at =snippets/=.&lt;/p&gt; &#xA;&lt;p&gt;The git hooks is placed in =githooks= directory.&lt;/p&gt; &#xA;&lt;p&gt;Other directories don&#39;t matter. ** Run the unit test before git commit On macOS/Linux/Cygwin, run =make githooks= to install hooks into =.git/hooks=.&lt;/p&gt; &#xA;&lt;p&gt;Then unit test is run automatically before =git commit=. ** Python environment We use [[https://github.com/jorgenschaefer/elpy][Elpy (Emacs Python Development Environment)]]. See its official documentation on its usage.&lt;/p&gt; &#xA;&lt;p&gt;The flag =elpy-disable-backend-error-display= is set to =nil= so you can easily report any error to its developers.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t use Elpy, please set this flag to =t=.&lt;/p&gt; &#xA;&lt;p&gt;To enable the virtual environment created by Elpy as its official guide has suggested, you can add below code into =&lt;del&gt;/.custom.el=, #+begin_src elisp (with-eval-after-load &#39;elpy (let* ((venv-dir &#34;&lt;/del&gt;/.emacs.d/elpy/rpc-venv&#34;)) (when (and (file-exists-p venv-dir) (executable-find pyvenv-virtualenvwrapper-python)) (pyvenv-activate venv-dir)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;After activating the virtual environment created by Elpy, you could also backup its required packages, #+begin_src sh source ~/.emacs.d/elpy/rpc-venv/bin/activate &amp;amp;&amp;amp; pip freeze &amp;gt; elpy-requirements.txt &amp;amp;&amp;amp; deactivate #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then restore the packages, #+begin_src sh source ~/.emacs.d/elpy/rpc-venv/bin/activate &amp;amp;&amp;amp; pip install -r elpy-requirements.txt &amp;amp;&amp;amp; deactivate #+end_src&lt;/p&gt; &#xA;&lt;p&gt;My =elpy-requirements.txt= (Python 3.9.1), #+begin_example appdirs==1.4.4 autopep8==1.5.4 black==20.8b1 click==7.1.2 flake8==3.8.4 jedi==0.18.0 mccabe==0.6.1 mypy-extensions==0.4.3 parso==0.8.1 pathspec==0.8.1 pycodestyle==2.6.0 pyflakes==2.2.0 regex==2020.11.13 rope==0.18.0 toml==0.10.2 typed-ast==1.4.1 typing-extensions==3.7.4.3 yapf==0.30.0 #+end_example&lt;/p&gt; &#xA;&lt;p&gt;After above setup, you can run =M-x elpy-config= to double check elpy status.&lt;/p&gt; &#xA;&lt;p&gt;You might want to modify =include-system-site-packages= in =&lt;del&gt;/.emacs.d/elpy/rpc-venv/pyvenv.cfg= ** Set up [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] You could insert below code into =&lt;/del&gt;/.custom.el=, #+begin_src elisp (with-eval-after-load &#39;lsp-mode ;; enable log only for debug (setq lsp-log-io nil) ;; use &lt;code&gt;evil-matchit&#39; instead (setq lsp-enable-folding nil) ;; no real time syntax check (setq lsp-diagnostic-package :none) ;; handle yasnippet by myself (setq lsp-enable-snippet nil) ;; turn off for better performance (setq lsp-enable-symbol-highlighting nil) ;; use find-fine-in-project instead (setq lsp-enable-links nil) ;; auto restart lsp (setq lsp-restart &#39;auto-restart) ;; don&#39;t watch 3rd party javascript libraries (push &#34;[/\\\\][^/\\\\]*\\.\\(json\\|html\\|jade\\)$&#34; lsp-file-watch-ignored) ;; don&#39;t ping LSP language server too frequently (defvar lsp-on-touch-time 0) (defun my-lsp-on-change-hack (orig-fun &amp;amp;rest args) ;; do NOT run &lt;/code&gt;lsp-on-change&#39; too frequently (when (&amp;gt; (- (float-time (current-time)) lsp-on-touch-time) 120) ;; 2 mins (setq lsp-on-touch-time (float-time (current-time))) (apply orig-fun args))) (advice-add &#39;lsp-on-change :around #&#39;my-lsp-on-change-hack)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then run =M-x lsp= to start lsp client and server. Check [[https://github.com/emacs-lsp/lsp-mode]] on how to install lsp server. ** Enable typewriter sounds when typing Run =M-x my-toggle-typewriter=. Please check bundled =typewriter-mode.el= for further setup. ** pdf-tools Check its official documentation.&lt;/p&gt; &#xA;&lt;p&gt;Here is my setup in =~/.custom.el=, #+begin_src elisp ;; @see &lt;a href=&#34;https://github.com/vedang/pdf-tools/&#34;&gt;https://github.com/vedang/pdf-tools/&lt;/a&gt; ;; Don&#39;t bother Windows (when (and (display-graphic-p) (or &lt;em&gt;linux&lt;/em&gt; &lt;em&gt;is-a-mac&lt;/em&gt;)) (my-run-with-idle-timer 2 (lambda () (when &lt;em&gt;is-a-mac&lt;/em&gt; (setenv &#34;PKG_CONFIG_PATH&#34; &#34;/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig&#34;)) (pdf-loader-install)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support legacy Emacs versions ** Emacs 25 Version 3.2 is the last version to support =Emacs 25=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please use [[https://github.com/redguardtoo/emacs.d/archive/3.1.zip]] and [[https://github.com/redguardtoo/myelpa/archive/3.1.zip]]. ** Emacs 24.4 and 24.5 Version 2.9 is the last version to support =Emacs 24.4+=&lt;/p&gt; &#xA;&lt;p&gt;Please use [[https://github.com/redguardtoo/emacs.d/archive/2.9.zip]] and [[https://github.com/redguardtoo/myelpa/archive/2.9.zip]]. ** Emacs 24.3 Version 2.6 is the last version to support =Emacs 24.3=.&lt;/p&gt; &#xA;&lt;p&gt;Download [[https://github.com/redguardtoo/emacs.d/archive/2.6.zip]] and [[https://github.com/redguardtoo/myelpa/archive/2.6.zip]] and you are good to go. ** Emacs 23 Version 1.2 of this setup is the last version to support Emacs v23.&lt;/p&gt; &#xA;&lt;p&gt;Here are the steps to use that setup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download [[https://github.com/redguardtoo/emacs.d/archive/1.2.zip]]&lt;/li&gt; &#xA; &lt;li&gt;Download [[https://github.com/redguardtoo/myelpa/archive/1.2.zip]]&lt;/li&gt; &#xA; &lt;li&gt;Follow the section =Install stable version in easiest way= but skip the download steps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tips&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Never turn off any bundled mode if it&#39;s on by default. Future version of Emacs may assume it&#39;s on. Tweak its flag in mode hook instead!&lt;/li&gt; &#xA; &lt;li&gt;Git skills are &lt;em&gt;extremely useful&lt;/em&gt;. Please read the chapters &#34;Git Basics&#34;, &#34;Git Branching&#34;, &#34;Git Tools&#34; from [[https://git-scm.com/book/en/][Pro Git]]&lt;/li&gt; &#xA; &lt;li&gt;You can run =optimize-emacs-startup= to compile &#34;*.el&#34; under =lisp/=&lt;/li&gt; &#xA; &lt;li&gt;Many advanced features in this configuration is only enabled in my personal =&lt;del&gt;/.custom.el=. Grep =defvar my-.*= in =&lt;/del&gt;/.emacs.d/lisp/= to find them. You can start from =init-company.el= and =init-spelling.el=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report bug Please check [[http://www.emacswiki.org/emacs/][EmacsWiki]] and my FAQ first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you still can&#39;t resolve the issue,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Restart Emacs with option =--debug-init= in shell&lt;/li&gt; &#xA; &lt;li&gt;Run =M-x toggle-debug-on-error= in Emacs&lt;/li&gt; &#xA; &lt;li&gt;Reproduce the issue and send me the error message&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The full command line to start Emacs is =emacs -nw --debug-init=.&lt;/p&gt; &#xA;&lt;p&gt;If you use [[https://emacsformacosx.com][Emacs for Mac OS X]], the command line is =/Application/Emacs.app/Contents/MacOS/Emacs -nw --debug-init=.&lt;/p&gt; &#xA;&lt;p&gt;Send error messages to the original developer if it&#39;s third party package&#39;s problem.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;em&gt;you are sure&lt;/em&gt; it&#39;s this my bug, file report at [[https://github.com/redguardtoo/emacs.d]]. Don&#39;t email me!&lt;/p&gt; &#xA;&lt;p&gt;Bug report need include &lt;em&gt;environment details&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License This program is free software: you can redistribute it and/or modify it under the terms of the [[file:LICENSE][GNU General Public License]] as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the [[file:LICENSE][GNU General Public License]] for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magit/magit</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/magit/magit</id>
    <link href="https://github.com/magit/magit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;It&#39;s Magit! A Git porcelain inside Emacs.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://magit.vc/assets/magit-168x200px.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;A Git Porcelain inside Emacs&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://magit.vc&#34;&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://magit.vc/manual&#34;&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://magit.vc/manual/magit/FAQ.html&#34;&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/magit/magit/wiki&#34;&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/magit_emacs&#34;&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;justify&#34;&gt; Magit is an interface to the version control system &lt;a href=&#34;https://git-scm.com&#34;&gt;Git&lt;/a&gt;, implemented as an &lt;a href=&#34;https://www.gnu.org/software/emacs&#34;&gt;Emacs&lt;/a&gt; package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Keeping its users &#xA; &lt;a href=&#34;https://magit.vc/quotes&#34;&gt;this excited&lt;/a&gt; is &#xA; &lt;a href=&#34;https://magit.vc/stats/magit/authors.html#cumulated_added_lines_of_code_per_author&#34;&gt; a lot of work &lt;/a&gt;. If Magit makes you &#xA; &lt;br&gt; more productive too, then &#xA; &lt;b&gt;please consider making a donation&lt;/b&gt;. &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;em&gt;Thank you! — Jonas Bernoulli&lt;/em&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/sponsors/tarsius&#34;&gt; &lt;img title=&#34;Donate using Github Sponsors&#34; alt=&#34;Donate using Github Sponsors&#34; src=&#34;https://magit.vc/assets/github-sponsors-50px.png&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/#iban&#34;&gt; &lt;img title=&#34;Donate using IBAN&#34; alt=&#34;Donate using IBAN&#34; src=&#34;https://magit.vc/assets/iban-50px.png&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/#zelle&#34;&gt; &lt;img title=&#34;Donate using Zelle (USA bank transfer)&#34; alt=&#34;Donate using Zelle (USA bank transfer)&#34; src=&#34;https://magit.vc/assets/zelle-50px.png&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://www.paypal.me/JonasBernoulli/20&#34;&gt; &lt;img title=&#34;Donate using PayPal&#34; alt=&#34;Donate using PayPal&#34; src=&#34;https://magit.vc/assets/paypal.png&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Some alternative donation methods are &#xA; &lt;a href=&#34;https://magit.vc/donate&#34;&gt;available&lt;/a&gt;. &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;If you are new to Magit, then either one of the following two articles should help understanding how it differs from other Git clients.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://emacsair.me/2017/09/01/magit-walk-through&#34;&gt;Visual Magit walk-through&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you are completely new to Magit, then this article is a good visual introduction.&lt;/p&gt; &#xA;&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing some key, but that&#39;s not obvious from just seeing how Magit looks. The screenshots and accompanying text of this article explain how to perform a variety of actions on Magit&#39;s output.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://emacsair.me/2017/09/01/the-magical-git-interface&#34;&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Magit differs significantly from other Git interfaces, and its advantages are not immediately obvious simply from looking at a few screenshots as presented in the preceding article.&lt;/p&gt; &#xA;&lt;p&gt;This article discusses Magit&#39;s properties in somewhat more abstract terms.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Support and Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Magit has many users and very few maintainers, so we kindly ask to read the appropriate guidelines before getting in contact. — Thanks!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🆘 &lt;a href=&#34;https://github.com/magit/magit/discussions/4630&#34;&gt;How to ask for help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🪳 &lt;a href=&#34;https://github.com/magit/magit/wiki/How-to-report-a-bug&#34;&gt;How to report a bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💡 &lt;a href=&#34;https://github.com/magit/magit/discussions/4631&#34;&gt;How to suggest a feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🏗️ &lt;a href=&#34;https://github.com/magit/magit/wiki/Pull-request-guidelines&#34;&gt;Pull request guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ℹ️ &lt;a href=&#34;https://magit.vc/manual/magit/FAQ.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ℹ️ &lt;a href=&#34;https://magit.vc/manual/magit&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TL;DR We now use discussions for feature requests (not issues) and prefer if you ask the community for support instead of the overworked maintainers.&lt;/p&gt; &#xA;&lt;p&gt;Please also consider to contribute by supporting other users or by making a &lt;a href=&#34;https://magit.vc/donate&#34;&gt;monetary donation&lt;/a&gt;. — Thanks!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Acknowledgments&lt;/h3&gt; &#xA;&lt;p&gt;Magit was started by &lt;a href=&#34;https://github.com/mvollmer&#34;&gt;Marius Vollmer&lt;/a&gt;, and is now maintained by &lt;a href=&#34;https://emacsair.me&#34;&gt;Jonas Bernoulli&lt;/a&gt; and &lt;a href=&#34;https://kyleam.com&#34;&gt;Kyle Meyer&lt;/a&gt;. Former maintainers are &lt;a href=&#34;http://dudebout.com&#34;&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href=&#34;https://github.com/npostavs&#34;&gt;Noam Postavsky&lt;/a&gt;, &lt;a href=&#34;https://github.com/pjweisberg&#34;&gt;Peter J. Weisberg&lt;/a&gt;, &lt;a href=&#34;https://github.com/philjackson&#34;&gt;Phil Jackson&lt;/a&gt;, &lt;a href=&#34;https://github.com/vanicat&#34;&gt;Rémi Vanicat&lt;/a&gt; and &lt;a href=&#34;http://www.hodique.info&#34;&gt;Yann Hodique&lt;/a&gt;. Many more people have &lt;a href=&#34;https://magit.vc/stats/magit/authors.html&#34;&gt;contributed code&lt;/a&gt;, suggested features or made monetary contributions.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xkcd.com/859&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%28-%20%20%20-red.svg?sanitize=true&#34; alt=&#34;Paren Xkcb&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_v3-green.svg?sanitize=true&#34; alt=&#34;GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/magit/magit/actions&#34;&gt;&lt;img src=&#34;https://github.com/magit/magit/workflows/test/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/magit.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/magit.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/magit&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/magit-badge.svg?sanitize=true&#34; alt=&#34;Melpa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/magit&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/magit-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://magit.vc/manual/magit&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/eierlegende-Wollmilchsau-green.svg?sanitize=true&#34; alt=&#34;Eierlegende Wollmilchsau&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Browser_wars&#34;&gt;&lt;img src=&#34;https://magit.vc/assets/netscape-20px.png&#34; alt=&#34;Netscape&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joaotavora/eglot</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/joaotavora/eglot</id>
    <link href="https://github.com/joaotavora/eglot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A client for Language Server Protocol servers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/joaotavora/eglot/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/joaotavora/eglot/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/eglot.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/eglot.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/eglot&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/eglot-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;M-x Eglot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;E&lt;/em&gt;macs Poly&lt;em&gt;glot&lt;/em&gt;: an Emacs &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;LSP&lt;/a&gt; client that stays out of your way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📽 Scroll down this README for some &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#animated_gifs&#34;&gt;pretty gifs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📚 Read about &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#connecting&#34;&gt;servers&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#commands&#34;&gt;commands and keybindings&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#customization&#34;&gt;customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📣 Read the &lt;a href=&#34;https://github.com/joaotavora/eglot/raw/master/NEWS.md&#34;&gt;NEWS&lt;/a&gt; file&lt;/li&gt; &#xA; &lt;li&gt;🏆 Folks over at Google &lt;a href=&#34;https://opensource.googleblog.com/2020/10/announcing-latest-google-open-source.html&#34;&gt;seem to like it&lt;/a&gt;. Thanks!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;em&gt;1-2-3&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Install from &lt;a href=&#34;https://elpa.gnu.org/packages/eglot.html&#34;&gt;GNU ELPA&lt;/a&gt; or &lt;a href=&#34;https://melpa.org/#/eglot&#34;&gt;MELPA&lt;/a&gt;. Just type &lt;code&gt;M-x package-install RET eglot RET&lt;/code&gt; into Emacs 26.1+.&lt;/p&gt; &#xA;&lt;p&gt;Now find some source file, any source file, and type &lt;code&gt;M-x eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;That&#39;s it&lt;/em&gt;. If you&#39;re lucky, this guesses the LSP program to start for the language you&#39;re using. Otherwise, it prompts you to enter one.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;1-2-3-pitfall!&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;By design, Eglot doesn&#39;t depend on anything but Emacs. But there &lt;em&gt;are&lt;/em&gt; ELPA dependencies to newer versions of so-called &#34;core packages&#34; developed &lt;em&gt;in the Emacs mainline&lt;/em&gt;. So unless you&#39;re using a bleeding-edge Emacs, where loading &lt;code&gt;eglot.el&lt;/code&gt; is all you&#39;d need to do, make sure your package system pulls in and loads the newest &lt;code&gt;project.el&lt;/code&gt;, &lt;code&gt;xref.el&lt;/code&gt;, &lt;code&gt;eldoc.el&lt;/code&gt;, etc... In case of trouble &lt;code&gt;M-x find-library&lt;/code&gt; can help you tell if that happened.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;connecting&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Connecting to a server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt; can guess and work out-of-the-box with these servers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ada&#39;s &lt;a href=&#34;https://github.com/AdaCore/ada_language_server&#34;&gt;ada_language_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bash&#39;s &lt;a href=&#34;https://github.com/mads-hartmann/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C/C++&#39;s &lt;a href=&#34;https://clang.llvm.org/extra/clangd.html&#34;&gt;clangd&lt;/a&gt; or &lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;ccls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C#&#39;s &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn&#34;&gt;omnisharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clojure&#39;s &lt;a href=&#34;https://clojure-lsp.io&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CMake&#39;s &lt;a href=&#34;https://github.com/regen100/cmake-language-server&#34;&gt;cmake-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CSS&#39;s &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;css-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dart&#39;s &lt;a href=&#34;https://github.com/dart-lang/sdk/raw/master/pkg/analysis_server/tool/lsp_spec/README.md&#34;&gt;analysis_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dockerfile&#39;s &lt;a href=&#34;https://github.com/rcjsuen/dockerfile-language-server-nodejs&#34;&gt;docker-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elixir&#39;s &lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixir-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elm&#39;s &lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erlang&#39;s &lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang_ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fortran&#39;s &lt;a href=&#34;https://github.com/hansec/fortran-language-server&#34;&gt;fortls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Futhark&#39;s &lt;a href=&#34;https://futhark-lang.org&#34;&gt;futhark lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go&#39;s &lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Godot Engine&#39;s &lt;a href=&#34;https://godotengine.org&#34;&gt;built-in LSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTML &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;html-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haskell&#39;s &lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;haskell-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON&#39;s &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-json-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java&#39;s &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Javascript&#39;s &lt;a href=&#34;https://github.com/theia-ide/typescript-language-server&#34;&gt;TS &amp;amp; JS Language Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&#39;s &lt;a href=&#34;https://github.com/fwcd/KotlinLanguageServer&#34;&gt;kotlin-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lua&#39;s &lt;a href=&#34;https://github.com/Alloyed/lua-lsp&#34;&gt;lua-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mint&#39;s &lt;a href=&#34;https://www.mint-lang.com/&#34;&gt;mint-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nix&#39;s &lt;a href=&#34;https://github.com/nix-community/rnix-lsp&#34;&gt;rnix-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ocaml&#39;s &lt;a href=&#34;https://github.com/ocaml/ocaml-lsp/&#34;&gt;ocaml-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP&#39;s &lt;a href=&#34;https://github.com/felixfbecker/php-language-server&#34;&gt;php-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PureScript&#39;s &lt;a href=&#34;https://github.com/nwolverson/purescript-language-server&#34;&gt;purescript-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python&#39;s &lt;a href=&#34;https://github.com/python-lsp/python-lsp-server&#34;&gt;pylsp&lt;/a&gt;, &lt;a href=&#34;https://github.com/palantir/python-language-server&#34;&gt;pyls&lt;/a&gt; or &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;R&#39;s &lt;a href=&#34;https://cran.r-project.org/package=languageserver&#34;&gt;languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Racket&#39;s &lt;a href=&#34;https://github.com/jeapostrophe/racket-langserver&#34;&gt;racket-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby&#39;s &lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust&#39;s &lt;a href=&#34;https://github.com/rust-analyzer/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scala&#39;s &lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TeX/LaTeX&#39;s &lt;a href=&#34;https://github.com/astoff/digestif&#34;&gt;Digestif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VimScript&#39;s &lt;a href=&#34;https://github.com/iamcco/vim-language-server&#34;&gt;vim-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YAML&#39;s &lt;a href=&#34;https://github.com/redhat-developer/yaml-language-server&#34;&gt;yaml-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zig&#39;s &lt;a href=&#34;https://github.com/zigtools/zls&#34;&gt;zls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;ll add to this list as I test more servers. In the meantime you can customize &lt;code&gt;eglot-server-programs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs &#39;(foo-mode . (&#34;foo-language-server&#34; &#34;--args&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let me know how well it works and we can add it to the list.&lt;/p&gt; &#xA;&lt;p&gt;To skip the guess and always be prompted use &lt;code&gt;C-u M-x eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting automatically&lt;/h2&gt; &#xA;&lt;p&gt;You can also do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (add-hook &#39;foo-mode-hook &#39;eglot-ensure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;, to attempt to start an eglot session automatically every time a &lt;code&gt;foo-mode&lt;/code&gt; buffer is visited.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting via TCP&lt;/h2&gt; &#xA;&lt;p&gt;The examples above use a &#34;pipe&#34; to talk to the server, which works fine on Linux and OSX but in some cases &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Subprocess-hang.html&#34;&gt;&lt;em&gt;may not work on Windows&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To circumvent this limitation, or if the server doesn&#39;t like pipes, you can use &lt;code&gt;C-u M-x eglot&lt;/code&gt; and give it &lt;code&gt;server:port&lt;/code&gt; pattern to connect to a previously started TCP server serving LSP information.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to start it manually every time, you can configure Eglot to start it and immediately connect to it. Ruby&#39;s &lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt; server already works this way out-of-the-box.&lt;/p&gt; &#xA;&lt;p&gt;For another example, suppose you also wanted start Python&#39;s &lt;code&gt;pyls&lt;/code&gt; this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs&#xA;             `(python-mode . (&#34;pyls&#34; &#34;-v&#34; &#34;--tcp&#34; &#34;--host&#34;&#xA;                              &#34;localhost&#34; &#34;--port&#34; :autoport)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see that the element associated with &lt;code&gt;python-mode&lt;/code&gt; is now a more complicated invocation of the &lt;code&gt;pyls&lt;/code&gt; program, which requests that it be started as a server. Notice the &lt;code&gt;:autoport&lt;/code&gt; symbol in there: it is replaced dynamically by a local port believed to be vacant, so that the ensuing TCP connection finds a listening server.&lt;/p&gt; &#xA;&lt;h2&gt;Per-project server configuration&lt;/h2&gt; &#xA;&lt;p&gt;Most servers can guess good defaults and will operate nicely out-of-the-box, but some need to be configured specially via LSP interfaces. Additionally, in some situations, you may also want a particular server to operate differently across different projects.&lt;/p&gt; &#xA;&lt;p&gt;Per-project settings are realized with Emacs&#39;s &lt;em&gt;directory variables&lt;/em&gt; and the Elisp variable &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;. To make a particular Python project always enable Pyls&#39;s snippet support, put a file named &lt;code&gt;.dir-locals.el&lt;/code&gt; in the project&#39;s root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((python-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . ((:pyls . (:plugins (:jedi_completion (:include_params t)))))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells Emacs that any &lt;code&gt;python-mode&lt;/code&gt; buffers in that directory should have a particular buffer-local value of &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;. That variable&#39;s value should be &lt;em&gt;association list&lt;/em&gt; of &lt;em&gt;parameter sections&lt;/em&gt; which are presumably understood by the server. In this example, we associate section &lt;code&gt;pyls&lt;/code&gt; with the parameters object &lt;code&gt;(:plugins (:jedi_completion (:include_params t)))&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now, supposing that you also had some Go code in the very same project, you can configure the Gopls server in the same file. Adding a section for &lt;code&gt;go-mode&lt;/code&gt;, the file&#39;s contents become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((python-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . ((:pyls . (:plugins (:jedi_completion (:include_params t))))))))&#xA; (go-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . ((:gopls . (:usePlaceholders t)))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you can&#39;t afford an actual &lt;code&gt;.dir-locals.el&lt;/code&gt; file, or if managing these files becomes cumbersome, the Emacs manual teaches you programmatic ways to leverage per-directory local variables.&lt;/p&gt; &#xA;&lt;h2&gt;Handling quirky servers&lt;/h2&gt; &#xA;&lt;p&gt;Some servers need even more special hand-holding to operate correctly. If your server has some quirk or non-conformity, it&#39;s possible to extend Eglot via Elisp to adapt to it. Here&#39;s an example on how to get &lt;a href=&#34;https://github.com/cquery-project/cquery&#34;&gt;cquery&lt;/a&gt; working:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs &#39;((c++ mode c-mode) . (eglot-cquery &#34;cquery&#34;)))&#xA;&#xA;(defclass eglot-cquery (eglot-lsp-server) ()&#xA;  :documentation &#34;A custom class for cquery&#39;s C/C++ langserver.&#34;)&#xA;&#xA;(cl-defmethod eglot-initialization-options ((server eglot-cquery))&#xA;  &#34;Passes through required cquery initialization options&#34;&#xA;  (let* ((root (car (project-roots (eglot--project server))))&#xA;         (cache (expand-file-name &#34;.cquery_cached_index/&#34; root)))&#xA;    (list :cacheDirectory (file-name-as-directory cache)&#xA;          :progressReportFrequencyMs -1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, some servers require the language identifier strings they are sent by &lt;code&gt;eglot&lt;/code&gt; to match the exact strings used by VSCode. &lt;code&gt;eglot&lt;/code&gt; usually guesses these identifiers from the major mode name (e.g. &lt;code&gt;elm-mode&lt;/code&gt; → &lt;code&gt;&#34;elm&#34;&lt;/code&gt;), but the mapping can be overridden using the &lt;code&gt;:LANGUAGE-ID&lt;/code&gt; element in the syntax of &lt;code&gt;eglot-server-programs&lt;/code&gt; if necessary.&lt;/p&gt; &#xA;&lt;h2&gt;TRAMP support&lt;/h2&gt; &#xA;&lt;p&gt;Should just work. Try &lt;code&gt;M-x eglot&lt;/code&gt; in a buffer visiting a remote file on a server where you&#39;ve also installed the language server. Only supported on Emacs 27.1 or later.&lt;/p&gt; &#xA;&lt;p&gt;Emacs 27 users may find some language servers &lt;a href=&#34;https://github.com/joaotavora/eglot/issues/662&#34;&gt;fail to start up over TRAMP&lt;/a&gt;. If you experience this issue, update TRAMP to 2.5.0.4 or later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;reporting bugs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Reporting bugs&lt;/h1&gt; &#xA;&lt;p&gt;Having trouble connecting to a server? Expected to have a certain capability supported by it (e.g. completion) but nothing happens? Or do you get spurious and annoying errors in an otherwise smooth operation? We may have help, so open a &lt;a href=&#34;https://github.com/joaotavora/eglot/issues&#34;&gt;new issue&lt;/a&gt; and try to be as precise and objective about the problem as you can:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Include the invaluable &lt;strong&gt;events transcript&lt;/strong&gt;. You can display that buffer with &lt;code&gt;M-x eglot-events-buffer&lt;/code&gt;. It contains the JSONRPC messages exchanged between client and server, as well as the messages the server prints to stderr.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If Emacs errored (you saw -- and possibly heard -- an error message), make sure you repeat the process using &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; so you &lt;strong&gt;get a backtrace&lt;/strong&gt; of the error that you should also attach to the bug report.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try to replicate the problem with &lt;strong&gt;as clean an Emacs run as possible&lt;/strong&gt;. This means an empty &lt;code&gt;.emacs&lt;/code&gt; init file or close to it (just loading &lt;code&gt;eglot.el&lt;/code&gt;, &lt;code&gt;company.el&lt;/code&gt; and &lt;code&gt;yasnippet.el&lt;/code&gt; for example, and you don&#39;t even need &lt;code&gt;use-package.el&lt;/code&gt; to do that).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Some more notes: it is often the case the you will have to report the problem to the LSP server&#39;s developers, too, though it&#39;s understandable that you report it Eglot first, since it is the user-facing frontend first. If the problem is indeed on Eglot&#39;s side, we &lt;em&gt;do&lt;/em&gt; want to fix it, but because Eglot&#39;s developers have limited resources and no way to test all the possible server combinations, you&#39;ll sometimes have to do most of the testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;commands&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Commands and keybindings&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s a summary of available commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt;, as described above;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-reconnect&lt;/code&gt; reconnects to current server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-shutdown&lt;/code&gt; says bye-bye to server of your choice;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-shutdown-all&lt;/code&gt; says bye-bye to every server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-rename&lt;/code&gt; ask the server to rename the symbol at point;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-format&lt;/code&gt; asks the server to format buffer or the active region;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-code-actions&lt;/code&gt; asks the server for any &#34;code actions&#34; at point. Can also be invoked by &lt;code&gt;mouse-1&lt;/code&gt;-clicking some diagnostics. Also &lt;code&gt;M-x eglot-code-action-&amp;lt;TAB&amp;gt;&lt;/code&gt; for shortcuts to specific actions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eldoc&lt;/code&gt; asks the Eldoc system for help at point (this command isn&#39;t specific to Eglot, by the way, it works in other contexts).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-events-buffer&lt;/code&gt; jumps to the events buffer for debugging communication with the server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-stderr-buffer&lt;/code&gt; if the LSP server is printing useful debug information in stderr, jumps to a buffer with these contents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-signal-didChangeConfiguration&lt;/code&gt; updates the LSP server configuration according to the value of the variable &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;, which you may be set in a &lt;code&gt;.dir-locals&lt;/code&gt; file, for example.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are &lt;em&gt;no keybindings&lt;/em&gt; specific to Eglot, but you can bind stuff in &lt;code&gt;eglot-mode-map&lt;/code&gt;, which is active as long as Eglot is managing a file in your project. The commands don&#39;t need to be Eglot-specific, either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-key eglot-mode-map (kbd &#34;C-c r&#34;) &#39;eglot-rename)&#xA;(define-key eglot-mode-map (kbd &#34;C-c o&#34;) &#39;eglot-code-action-organize-imports)&#xA;(define-key eglot-mode-map (kbd &#34;C-c h&#34;) &#39;eldoc)&#xA;(define-key eglot-mode-map (kbd &#34;&amp;lt;f6&amp;gt;&#34;) &#39;xref-find-definitions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;customization&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s a quick summary of the customization options. In Eglot&#39;s customization group (&lt;code&gt;M-x customize-group&lt;/code&gt;) there is more documentation on what these do.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-autoreconnect&lt;/code&gt;: Control ability to reconnect automatically to the LSP server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-connect-timeout&lt;/code&gt;: Number of seconds before timing out LSP connection attempts;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-sync-connect&lt;/code&gt;: Control blocking of LSP connection attempts;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-events-buffer-size&lt;/code&gt;: Control the size of the Eglot events buffer;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-ignored-server-capabilities&lt;/code&gt;: LSP server capabilities that Eglot could use, but won&#39;t;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-confirm-server-initiated-edits&lt;/code&gt;: If non-nil, ask for confirmation before allowing server to edit the source buffer&#39;s text;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a couple more variables that you can customize via Emacs lisp:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-server-programs&lt;/code&gt;: as described &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#connecting&#34;&gt;above&lt;/a&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-strict-mode&lt;/code&gt;: Set to &lt;code&gt;nil&lt;/code&gt; by default, meaning Eglot is generally lenient about non-conforming servers. Set this to &lt;code&gt;(disallow-non-standard-keys enforce-required-keys)&lt;/code&gt; when debugging servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-server-initialized-hook&lt;/code&gt;: Hook run after server is successfully initialized;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-managed-mode-hook&lt;/code&gt;: Hook run after Eglot started or stopped managing a buffer. Use &lt;code&gt;eglot-managed-p&lt;/code&gt; to tell if current buffer is still being managed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-stay-out-of&lt;/code&gt;: List of Emacs features that Eglot shouldn&#39;t automatically try to manage on users&#39; behalf. Useful when you need non-LSP Flymake or Company backends. See docstring for examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-extend-to-xref&lt;/code&gt;: If non-nil and &lt;code&gt;xref-find-definitions&lt;/code&gt; lands you in a file outside your project -- like a system-installed library or header file -- transiently consider it managed by the same LSP server. That file is still outside your project (i.e. &lt;code&gt;project-find-file&lt;/code&gt; won&#39;t find it).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How does Eglot work?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt; starts a server via a shell-command guessed from &lt;code&gt;eglot-server-programs&lt;/code&gt;, using the current major-mode (for whatever language you&#39;re programming in) as a hint.&lt;/p&gt; &#xA;&lt;p&gt;If the connection is successful, you see an &lt;code&gt;[eglot:&amp;lt;server&amp;gt;]&lt;/code&gt; indicator pop up in your mode-line. More importantly, this means current &lt;em&gt;and future&lt;/em&gt; file buffers of that major mode &lt;em&gt;inside your current project&lt;/em&gt; automatically become &#34;managed&#34; by the LSP server, This means that information about these file&#39;s contents is exchanged periodically to provide enhanced coding assistance. Eglot works primarily with Emacs&#39; built-in libraries and &lt;em&gt;not&lt;/em&gt; with third-party replacements for those facilities.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;definitions can be found via &lt;code&gt;xref-find-definitions&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;on-the-fly diagnostics for the buffer or project are given by &lt;code&gt;flymake-mode&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;function signature hints are given by &lt;code&gt;eldoc-mode&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;completion can be summoned with &lt;code&gt;completion-at-point&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;projects are discovered via &lt;code&gt;project.el&lt;/code&gt;&#39;s API;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some extra features are provided if certain libraries are installed and enabled, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;completion dropdowns via &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;snippet completions via &lt;a href=&#34;https://elpa.gnu.org/packages/yasnippet.html&#34;&gt;yasnippet&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;marked-up documentation via &lt;a href=&#34;https://github.com/defunkt/markdown-mode&#34;&gt;markdown&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Eglot doesn&#39;t &lt;em&gt;require&lt;/em&gt; these libraries to work effectively, but will use them automatically if they are found to be active.&lt;/p&gt; &#xA;&lt;p&gt;To &#34;unmanage&#34; a project&#39;s buffers, shutdown the server with &lt;code&gt;M-x eglot-shutdown&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;animated_gifs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;Obligatory animated gif section&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Completion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-completions.gif&#34; alt=&#34;eglot-completions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The animation shows &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company-mode&lt;/a&gt; presenting the completion candidates to the user, but Eglot works with the built-in &lt;code&gt;completion-at-point&lt;/code&gt; function as well, which is usually bound to &lt;code&gt;C-M-i&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Snippet completion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-snippets-on-completion.gif&#34; alt=&#34;eglot-snippets-on-completion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot provides template based completion if the server supports snippet completion and &lt;a href=&#34;https://elpa.gnu.org/packages/yasnippet.html&#34;&gt;yasnippet&lt;/a&gt; is enabled &lt;em&gt;before&lt;/em&gt; Eglot connects to the server. The animation shows &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company-mode&lt;/a&gt;, but &lt;code&gt;completion-at-point&lt;/code&gt; also works with snippets.&lt;/p&gt; &#xA;&lt;h2&gt;Diagnostics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-diagnostics.gif&#34; alt=&#34;eglot-diagnostics&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot relays the diagnostics information received from the LSP server to Emacs&#39;s &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;Flymake&lt;/a&gt;, which annotates/underlines the problematic parts of the buffer. The information is shared with the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt; system, meaning that the commands &lt;code&gt;eldoc&lt;/code&gt; and &lt;code&gt;eldoc-doc-buffer&lt;/code&gt; (the latter bound to &lt;code&gt;C-h-.&lt;/code&gt; for convenience) show diagnostics along with other documentation under point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;Flymake&lt;/a&gt; provides other convenient ways to view and manage diagnostic errors. These are described in its &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When Eglot manages a buffer, it disables pre-existing Flymake backends. See variable &lt;code&gt;eglot-stay-out-of&lt;/code&gt; to change that.&lt;/p&gt; &#xA;&lt;h2&gt;Code Actions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-code-actions.gif&#34; alt=&#34;eglot-code-actions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The LSP server may provide code actions, for example, to fix a diagnostic error or to suggest refactoring edits. The commands are frequently associating with Flymake diagnostic annotations, so that left-clicking them shows a menu. Additionally, the command &lt;code&gt;eglot-code-actions&lt;/code&gt; asks the server for any code spanning a given region.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes, these code actions are initiated by the server. See &lt;code&gt;eglot-confirm-server-initiated-edits&lt;/code&gt; to control that behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Hover on symbol /function signature&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-hover-on-symbol.gif&#34; alt=&#34;eglot-hover-on-symbol&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here, too, the LSP server&#39;s view of a given symbol or function signature is relayed to the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt; system. The commands &lt;code&gt;eldoc&lt;/code&gt; and &lt;code&gt;eldoc-doc-buffer&lt;/code&gt; commands access that information.&lt;/p&gt; &#xA;&lt;p&gt;There are customization variables to help adjust &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt;&#39;s liberal use of the lower &#34;echo area&#34;, among other options. If you still find the solicitous nature of this LSP feature too distracting, you can use &lt;code&gt;eglot-ignored-server-capabilities&lt;/code&gt; to turn it off.&lt;/p&gt; &#xA;&lt;h2&gt;Rename&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-rename.gif&#34; alt=&#34;eglot-rename&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;M-x eglot-rename RET&lt;/code&gt; to rename the symbol at point.&lt;/p&gt; &#xA;&lt;h2&gt;Find definition&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-xref-find-definition.gif&#34; alt=&#34;eglot-xref-find-definition&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To jump to the definition of a symbol, use the built-in &lt;code&gt;xref-find-definitions&lt;/code&gt; command, which is bound to &lt;code&gt;M-.&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Find references&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-xref-find-references.gif&#34; alt=&#34;eglot-xref-find-references&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot here relies on Emacs&#39; built-in functionality as well. &lt;code&gt;xref-find-references&lt;/code&gt; is bound to &lt;code&gt;M-?&lt;/code&gt;. Additionally, Eglot provides the following similar commands: &lt;code&gt;eglot-find-declaration&lt;/code&gt;, &lt;code&gt;eglot-find-implementation&lt;/code&gt;, &lt;code&gt;eglot-find-typeDefinition&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Historical differences to lsp-mode.el&lt;/h1&gt; &#xA;&lt;p&gt;Around May 2018, I wrote a comparison of Eglot to &lt;code&gt;lsp-mode.el&lt;/code&gt;, and was discussed with its then-maintainer. That mode has since been refactored/rewritten and now &lt;a href=&#34;https://github.com/joaotavora/eglot/issues/180&#34;&gt;purports to support&lt;/a&gt; a lot of features that differentiated Eglot from it. It may now be very different or very similar to Eglot, or even sing with the birds in the trees, so &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;go check it out&lt;/a&gt;. That said, here&#39;s the original comparison, which I will not be updating any more.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Eglot is considerably less code and hassle than lsp-mode.el. In most cases, there&#39;s nothing to configure. It&#39;s a minimalist approach focused on user experience and performance.&lt;/p&gt; &#xA;&lt;p&gt;User-visible differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The single most visible difference is the friendly entry point &lt;code&gt;M-x eglot&lt;/code&gt;, not &lt;code&gt;M-x eglot-&amp;lt;language&amp;gt;&lt;/code&gt;. Also, there are no &lt;code&gt;eglot-&amp;lt;language&amp;gt;&lt;/code&gt; extra packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s no &#34;whitelisting&#34; or &#34;blacklisting&#34; directories to languages. &lt;code&gt;M-x eglot&lt;/code&gt; starts servers to handle file of a major mode inside a specific project, using Emacs&#39;s built-in &lt;code&gt;project.el&lt;/code&gt; library to discover projects. Then it automatically detects current and future opened files under that project and syncs with server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy way to quit/restart a server, just middle/right click on the connection name;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pretty interactive mode-line section for live tracking of server communication;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Automatically restarts frequently crashing servers;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slow-to-start servers start asynchronously in the background;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Server-initiated edits are confirmed with the user;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diagnostics work out-of-the-box (no &lt;code&gt;flycheck.el&lt;/code&gt; needed);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Smoother/more responsive (read below).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Under the hood:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Message parser is much simpler.&lt;/li&gt; &#xA; &lt;li&gt;Defers signature requests like &lt;code&gt;textDocument/hover&lt;/code&gt; until server is ready.&lt;/li&gt; &#xA; &lt;li&gt;Sends &lt;code&gt;textDocument/didChange&lt;/code&gt; for groups of edits, not one per each tiny change.&lt;/li&gt; &#xA; &lt;li&gt;Easier to read and maintain elisp. Yeah I know, &lt;em&gt;very subjective&lt;/em&gt;, so judge for yourself.&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t &lt;em&gt;require&lt;/em&gt; anything other than Emacs, but will automatically upgrade to work with stuff outside Emacs, like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;markdown-mode&lt;/code&gt;, if you happen to have these installed.&lt;/li&gt; &#xA; &lt;li&gt;Has automated tests that check against actual LSP servers.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Copyright Assignment&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Eglot&lt;/code&gt; is subject to the same &lt;a href=&#34;https://www.fsf.org/licensing/contributor-faq&#34;&gt;copyright assignment&lt;/a&gt; policy as &lt;code&gt;GNU Emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;https://www.gnu.org/prep/maintain/html_node/Legally-Significant.html#Legally-Significant&#34;&gt;legally significant&lt;/a&gt; contributions can only be merged after the author has completed their paperwork. Please ask for the request form, and we&#39;ll send it to you.&lt;/p&gt; &#xA;&lt;!-- Language servers --&gt; &#xA;&lt;!-- Other references --&gt;</summary>
  </entry>
  <entry>
    <title>daviwil/emacs-from-scratch</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/daviwil/emacs-from-scratch</id>
    <link href="https://github.com/daviwil/emacs-from-scratch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An example of a fully custom Emacs configuration developed live on YouTube!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Emacs From Scratch&lt;/p&gt; &#xA;&lt;p&gt;This is an example of a fully custom Emacs configuration that you can use as inspiration when building your own!&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re developing this configuration live on YouTube, subscribe to [[https://www.youtube.com/c/SystemCrafters?sub_confirmation=1][System Crafters]] (make sure to click the bell!) so that you&#39;re notified of future streams.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re enjoying the videos and benefitting from the examples in this repo, please &lt;em&gt;consider [[https://github.com/sponsors/daviwil][becoming a sponsor]]&lt;/em&gt; to support the development of future content!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to Use This Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo is meant to be a companion to the Emacs From Scratch video series, serving as an example of a custom configuration build on top of vanilla Emacs. I give instructions below for how to set it up to try it out, but it isn&#39;t meant to be used as your main configuration! My goal here is to provide a working configuration that you can take inspiration from (and copy from directly).&lt;/p&gt; &#xA;&lt;p&gt;Just keep in mind that this repo isn&#39;t set up to be used directly as your own configuration! Copy the code to your own dotfiles repository and have fun :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Episodes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo now contains configuration from multiple series on the channel!&lt;/p&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch]]&lt;/p&gt; &#xA;&lt;p&gt;Here is a list of all the episode videos with links to the configuration we built for each one:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=74zOY-vgkyw][Live-Coding a Custom Emacs Configuration from Scratch]] ([[https://github.com/daviwil/emacs-from-scratch/tree/c0266ff684f670ecc5e41615c0282912e6615214][Code]], [[file:show-notes/Emacs-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=IspAZtNTslY][Adding Helpful UI Improvements]] ([[https://github.com/daviwil/emacs-from-scratch/tree/43c0401355c7971cb4491690ee4b8449505a5d58][Code]], [[file:show-notes/Emacs-02.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=xaZMwNELaJY][Key Bindings and Evil]] ([[https://github.com/daviwil/emacs-from-scratch/tree/29e542c79632853d85124019e47506cc0571cd05][Code]], [[file:show-notes/Emacs-03.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/INTu30BHZGk][Projectile and Magit]] ([[https://github.com/daviwil/emacs-from-scratch/tree/500370fa06889dad313e60473d73090fcfbe106d][Code]], [[file:show-notes/Emacs-04.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=VcgjTEa0kU4][Org Mode Basics]] ([[https://github.com/daviwil/emacs-from-scratch/tree/1a13fcf0dd6afb41fce71bf93c5571931999fed8][Code]], [[file:show-notes/Emacs-05.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/PNE-mgkZ6HM][Organizing Your Life with Org Mode]] ([[https://github.com/daviwil/emacs-from-scratch/tree/c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4][Code]], [[file:show-notes/Emacs-06.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/kkqVTDbfYp4][Configure Everything with Org Babel]] ([[https://github.com/daviwil/emacs-from-scratch/tree/9388cf6ecd9b44c430867a5c3dad5f050fdc0ee1][Code]], [[file:show-notes/Emacs-07.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/E-NAM9U5JYE][Build Your Own IDE with lsp-mode]] ([[https://github.com/daviwil/emacs-from-scratch/tree/6d078217a41134cc667f969430d150c50d03f448][Code]], [[file:show-notes/Emacs-08.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/wa_wZIuT9Vw][Learn to Love the Terminal Modes]] ([[https://github.com/daviwil/emacs-from-scratch/tree/bbfbc77b3afab0c14149e07d0ab08d275d4ba575][Code]], [[file:show-notes/Emacs-09.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/PMWwM8QJAtU][Effortless File Management with Dired]] ([[https://github.com/daviwil/emacs-from-scratch/blob/8c302a79bf5700f6ef0279a3daeeb4123ae8bd59/Emacs.org#dired][Code]], [[file:show-notes/Emacs-10.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/dtjq68F2dXw][Keeping Your Emacs Packages Up to Date]] ([[https://github.com/daviwil/emacs-from-scratch/blob/4e921ccbe603d5fdd9c7f16c2418ac7322c8ab71/Emacs.org#automatic-package-updates][Code]], [[file:show-notes/Emacs-Scratch-11.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/9i_9hse_Y08][How to Cut Emacs Start Up Time in Half!]] (Code, [[file:show-notes/Emacs-Scratch-12.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPZvSdewHG8uApD7THlLLCV][Emacs Essentials]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/48JlgiBpw_I][The Absolute Beginner&#39;s Guide to Emacs]] ([[file:show-notes/Emacs-Beginners-01.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/watch?v=RQK_DaaX34Q&amp;amp;list=PLEoMzSkcN8oPQtn7FQEF3D7sroZbXuPZ7][Learning Emacs Lisp]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/RQK_DaaX34Q][Introduction to Emacs Lisp]] ([[file:show-notes/Emacs-Lisp-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/XXpgzyeYh_4][Types, Conditionals, and Loops]] ([[file:show-notes/Emacs-Lisp-02.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/EqgkAUHw0Yc][Defining Functions and Commands]] ([[file:show-notes/Emacs-Lisp-03.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/tq4kTNL1VD8][Defining Variables and Scopes]] ([[file:show-notes/Emacs-Lisp-04.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/J7d2LmivyyM][Reading and Writing Buffers in Practice]] ([[file:show-notes/Emacs-Lisp-05.org][Notes]], [[https://github.com/daviwil/dotcrafter.el/blob/8d507eda31e08a789c38a5d729866eb4cda6abaf/dotcrafter.el][Code]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oNPbEMYEtswOVTvq7CVddCS][Emacs Desktop Environment]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=f7xB2fFk1tQ][Getting Started with EXWM]] ([[https://github.com/daviwil/emacs-from-scratch/blob/219c060e1bd695948c7691955a12a5dcaf3a9530/Emacs.org#window-management][Code]], [[file:show-notes/Emacs-Desktop-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/9gfKrrTtyOk][Improving the EXWM Experience]] ([[https://github.com/daviwil/emacs-from-scratch/blob/2805904966dbd5810ee735e25c4b427014761be5/Desktop.org][Code]], [[file:show-notes/Emacs-Desktop-02.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/HGGU5Zvljj8][Optimizing Window Placement in EXWM]] ([[https://github.com/daviwil/emacs-from-scratch/blob/39f63fe133cd4c41e13bbd1551c6517162851411/Desktop.org#exwm-configuration][Code]], [[file:show-notes/Emacs-Desktop-03.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/eF5NfVN411Q][Using Multiple Monitors in EXWM]] ([[https://github.com/daviwil/emacs-from-scratch/blob/5ebd390119a48cac6258843c7d5e570f4591fdd4/Desktop.org#exwm-configuration][Code]], [[file:show-notes/Emacs-Desktop-04.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/usCfMstCZ7E][The Perfect Panel: Integrating Polybar with Emacs]] ([[https://github.com/daviwil/emacs-from-scratch/blob/75f1d4e08512c49ea073c26058df6d4cca3a0d6b/Desktop.org#panel-with-polybar][Code]], [[file:show-notes/Emacs-Desktop-05.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/GX_LGfuojcE][Enabling Desktop Notifications with Dunst]] ([[https://github.com/daviwil/emacs-from-scratch/blob/b927109521b4b8a7e701709dabbdd9c1ea2fc27c/Desktop.org#desktop-notifications-with-dunst][Code]], [[file:show-notes/Emacs-Desktop-06.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN][Emacs IDE]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/0bilcQVSlbM][How to Debug Your Code with dap-mode]] ([[https://github.com/daviwil/emacs-from-scratch/blob/210e517353abf4ed669bc40d4c7daf0fabc10a5c/Emacs.org#debugging-with-dap-mode][Code]], [[file:show-notes/Emacs-IDE-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/jPXIP46BnNA][Python Development Configuration]] ([[https://github.com/daviwil/emacs-from-scratch/blob/dd9320769f3041ac1edca139496f14abe147d010/Emacs.org#python][Code]], [[file:show-notes/Emacs-IDE-02.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/watch?v=wKTKmE1wLyw&amp;amp;list=PLEoMzSkcN8oMHJ6Xil1YdnYtlWd5hHZql][Emacs Tips]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/gbdE7oZEdtA][How to Create and Manage Multiple Windows]] ([[file:show-notes/Emacs-Tips-05.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/C7ZlNRbWdVI][Organize Your Windows with the Tab Bar in Emacs 27]] ([[file:show-notes/Emacs-Tips-06.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/_qXZNfRcNnw][Dynamic Tiling Windows in Emacs with Edwina]] ([[file:show-notes/Emacs-Tips-07.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/ZjCRxAMPdNc][Unlock the Power of the Daemon with emacsclient]] ([[file:show-notes/Emacs-Tips-08.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/T9kygXveEz0][Give Emacs Psychic Completion Powers with prescient.el]] ([[file:show-notes/Emacs-Tips-Prescient.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/XZjyJG-sFZI][Teach Emacs to Keep Your Folders Clean]] ([[https://github.com/daviwil/emacs-from-scratch/blob/a57d99ba80276926a2b68521f9a9d23dc173a628/Emacs.org][Code]], [[file:show-notes/Emacs-Tips-Cleaning.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/nZ_T7Q49B8Y][Managing Encrypted Passwords with Emacs]] ([[file:show-notes/Emacs-Tips-Pass.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/-H2nU0rsUMY][Hey Emacs, Don&#39;t Move My Windows!]] ([[file:show-notes/Emacs-Tips-DisplayBuffer-1.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/watch?v=yZRyEhi4y44&amp;amp;list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ][Emacs Mail]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/yZRyEhi4y44][Streamline Your E-mail Management with mu4e]] ([[file:show-notes/Emacs-Mail-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/olXpfaSnf0o][Managing Multiple Email Accounts with mu4e and mbsync]] ([[file:show-notes/Emacs-Mail-02.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/WiyqU7gmKsk][Compose and Send Email with Emacs]] ([[file:show-notes/Emacs-Mail-03.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/aml36yZ-ANc][Enhance Your Emails with Org Mode]] ([[file:show-notes/Emacs-Mail-04.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/dSZu4jwvaSs][Craft an Email Workflow with Org Mode]] ([[file:show-notes/Emacs-Mail-05.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Instructions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT:&lt;/em&gt; Be sure to read the commentary in [[file:Emacs.org][Emacs.org]] in case anything unexpected happens when you load this configuration. Feel free to [[https://github.com/daviwil/runemacs/issues][file an issue]] to discuss any questions or problems you have so we can discuss it in a future stream!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Linux and macOS&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Linux, Emacs can be found in every major Linux distribution&#39;s package manager. On macOS you can install Emacs using [[https://brew.sh/][Homebrew]] via =brew install emacs=.&lt;/p&gt; &#xA;&lt;p&gt;You can easily get started with this configuration on Linux and macOS by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to a folder on your system: =git clone &lt;a href=&#34;https://github.com/daviwil/emacs-from-scratch=&#34;&gt;https://github.com/daviwil/emacs-from-scratch=&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Back up any existing Emacs configuration you may already have in your home directory in the =.emacs.d= folder (you could try moving it to =.emacs.d-old=)&lt;/li&gt; &#xA; &lt;li&gt;Rename the directory for the clone of this repo to =~/.emacs.d=.&lt;/li&gt; &#xA; &lt;li&gt;Start Emacs!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Windows&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can download the latest Emacs version (27.1 at the time of this writing) for Windows by heading to the [[https://ftp.gnu.org/gnu/emacs/windows/emacs-27/][GNU FTP site]]. Downloading and running the [[https://ftp.gnu.org/gnu/emacs/windows/emacs-27/emacs-27.1-x86_64-installer.exe][installer package]] will likely be the easiest way to get started. You can also [[https://chocolatey.org/packages/Emacs][install Emacs via Chocolatey]] if you prefer a more automated approach.&lt;/p&gt; &#xA;&lt;p&gt;The location where the Emacs configuration folder lives may vary based on your version of Windows. If you have trouble getting this to work, check the [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html#Location-of-init-file][official FAQ]] on the topic. If you still can&#39;t get it to work, feel free to file an issue and I can help investigate.&lt;/p&gt; &#xA;&lt;p&gt;For most modern Windows versions (Windows 7+), these steps should work:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to a folder on your system: =git clone &lt;a href=&#34;https://github.com/daviwil/emacs-from-scratch=&#34;&gt;https://github.com/daviwil/emacs-from-scratch=&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Back up any existing Emacs configuration you may already have in your home directory (likely =C:\Users\yourusername=) in the =.emacs.d= folder (you could try moving it to =.emacs.d-old=)&lt;/li&gt; &#xA; &lt;li&gt;Rename the directory for the clone of this repo to =C:\Users\yourusername.emacs.d=.&lt;/li&gt; &#xA; &lt;li&gt;Start Emacs!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Installing the Fira Code Font&lt;/p&gt; &#xA;&lt;p&gt;This configuration uses the [[https://github.com/tonsky/FiraCode][Fira Code]] font by [[https://github.com/tonsky][@tonsky]] and installation instructions can be found on [[https://github.com/tonsky/FiraCode/wiki/Installing][this wiki page]].&lt;/p&gt; &#xA;&lt;p&gt;However, since this is meant to be /your/ configuration, feel free to choose your own font!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recommendations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some general recommendations on Emacs usage that you might find helpful:&lt;/p&gt; &#xA;&lt;p&gt;** Replace CapsLock with CTRL&lt;/p&gt; &#xA;&lt;p&gt;Most people don&#39;t use the CapsLock key (unless you like YELLING ON THE INTERNET) so you can use this simple fix to replace it with the CTRL to make your Emacs life easier. Doing this will prevent you from having to bend your pinky down all day long to hit all those fabled Emacs keybindings, allowing you to keep your hands on the home row of the keyboard.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to do it across all 3 major operating systems:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Linux X11&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are [[https://askubuntu.com/questions/33774/how-do-i-remap-the-caps-lock-and-ctrl-keys][many ways]] to accomplish this in Linux, but the easiest (and most repeatable) I&#39;ve found is to use [[https://wiki.archlinux.org/index.php/Xmodmap][xmodmap]]. First, create a file named =.Xmodmap= in your home folder and populate it like so:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src&lt;/p&gt; &#xA;&lt;p&gt;clear lock clear control keycode 66 = Control_L add control = Control_L add Lock = Control_R&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;This replaces CapsLock with control and also replaces the Ctrl key on the right side with CapsLock just in case you ever need to use it. Most login systems (GDM, KDM, etc) will load this file when you log in so you might not need to do anything extra for it to take effect, just log out and log back in again. If that doesn&#39;t seem to work, you can add this line to one of your startup files (=.xinitrc=, =.profile=, window manager configuration, etc):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh&lt;/p&gt; &#xA;&lt;p&gt;xmodmap ~/.Xmodmap&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Linux sway&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In your =~/.config/sway/config= file add this stanza and reload the config (usually $mod-Shift-c) or =swaymsg reload=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src input * { xkb_options caps:ctrl_modifier } #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Windows&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Approach #1: Change the binding in the Windows registry&lt;/p&gt; &#xA;&lt;p&gt;On Windows you can use a simple registry file to tweak the CapsLock mapping. Save the following text to a file called =CapsLockHack.reg=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src&lt;/p&gt; &#xA;&lt;p&gt;REGEDIT4 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout] &#34;Scancode Map&#34;=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Now double-click on this file in Windows Explorer and allow Windows to apply it to your registry settings. After you log out of your current session and log back in the new key mapping should be in effect. Note that this change will affect &lt;em&gt;all&lt;/em&gt; users on your system.&lt;/p&gt; &#xA;&lt;p&gt;Approach #2: Use Microsoft&#39;s PowerToys&lt;/p&gt; &#xA;&lt;p&gt;You can use PowerToys&#39; Keyboard Manager to easily remap the keys. Download the tool from their [[https://github.com/microsoft/PowerToys/releases][github]] page and install it. Then open the powertoys settings (you sould find it in the taskbar), go to keyboard manager, enable it if it isn&#39;t already enabled and remap your keys. Once finished you should see something like:&lt;/p&gt; &#xA;&lt;p&gt;=Caps Lock= ➞ =Ctrl (Left)=&lt;/p&gt; &#xA;&lt;p&gt;=Ctrl (left)= ➞ =Caps Lock=&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;macOS&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thankfully Apple saw fit to make this a first-class option in macOS. You can follow the [[https://support.apple.com/guide/mac-help/change-the-behavior-of-the-modifier-keys-mchlp1011/mac][official documentation]] for your version of macOS to find the Modifier Keys settings and then switch Caps Lock to Control on that page.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Alexander-Miller/treemacs</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/Alexander-Miller/treemacs</id>
    <link href="https://github.com/Alexander-Miller/treemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;-&lt;em&gt;- fill-column: 120 org-list-indent-offset: 1 toc-org-max-depth: 2 -&lt;/em&gt;-&lt;/h1&gt; &#xA;&lt;p&gt;#+STARTUP: noinlineimages&lt;/p&gt; &#xA;&lt;p&gt;[[https://gitter.im/treemacs/community][file:https://badges.gitter.im/Alexander-Miller/treemacs.png]] [[https://melpa.org/#/treemacs][file:https://melpa.org/packages/treemacs-badge.svg]] [[https://stable.melpa.org/#/treemacs][file:https://stable.melpa.org/packages/treemacs-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Treemacs - a tree layout file explorer for Emacs :noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:screenshots/screenshot.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Content :TOC:noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#quick-feature-overview][Quick Feature Overview]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#fancy-gifs][Fancy Gifs!]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#quick-start][Quick Start]]&lt;/li&gt; &#xA; &lt;li&gt;[[#detailed-feature-list][Detailed Feature List]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#projects-and-workspaces][Projects and Workspaces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#conveniently-editing-your-projects-and-workspaces][Conveniently Editing Your Projects and Workspaces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#navigation-without-projects-and-workspaces][Navigation without Projects and Workspaces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#frame-locality][Frame Locality]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#mouse-interface][Mouse Interface]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#follow-mode][Follow-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tag-follow-mode][Tag-follow-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#fringe-indicator-mode][Fringe-indicator-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#git-mode][Git-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#filewatch-mode][Filewatch-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#file-management][File Management]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#indent-guide-mode][Indent-guide-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#session-persistence][Session Persistence]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#terminal-compatibility][Terminal Compatibility]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tag-view][Tag View]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#current-directory-awareness][Current-Directory Awareness]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tramp-support][Tramp Support]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#org-support][Org Support]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#theme-support][Theme Support]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#additional-packages][Additional Packages]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#treemacs-as-a-framework][Treemacs as a Framework]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#configuration][Configuration]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#variables][Variables]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#faces][Faces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-compatibility][Evil compatibility]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#customizing-themes-and-icons][Customizing Themes and Icons]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#keymap][Keymap]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#unbound-functions][Unbound functions]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#default-keymaps][Default keymaps]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#compatibility][Compatibility]]&lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]]&lt;/li&gt; &#xA; &lt;li&gt;[[#contributing][Contributing]]&lt;/li&gt; &#xA; &lt;li&gt;[[#working-with-the-code-base][Working With The Code Base]]&lt;/li&gt; &#xA; &lt;li&gt;[[#dependencies][Dependencies]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quick Feature Overview Treemacs is a file and project explorer similar to NeoTree or vim&#39;s NerdTree, but largely inspired by the Project Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick navigation and exploration, while also possessing &lt;em&gt;basic&lt;/em&gt; file management utilities. Specifically a quick feature overview looks as follows:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Project management :: Treemacs lets you view multiple file trees - projects - at once and quickly add or remove them, and groups projects in workspaces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy navigation :: quickly move between projects or use shortcuts to jump to parent or neighbouring nodes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Versatile file access :: decide exactly how and where a file will be opened, including using &lt;del&gt;ace-window&lt;/del&gt; to choose a window or launching an external application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Understanding of frames :: every frame will receive its own treemacs buffer that will live and die with that frame.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finding of files and tags :: Treemacs can follow along and keep in focus the currently selected file or even the tag at point, either manually or automatically using either &lt;del&gt;treemacs-follow-mode&lt;/del&gt; or &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Git Integration :: Treemacs can use different faces for files and directories based on their git status. The git process is run asynchronously, minimizing its performance impact.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/deb0ch/emacs-winum][Winum]] &amp;amp; [[https://github.com/abo-abo/ace-window][ace-window]] compatibility :: The presence of treemacs will not interfere with winum&#39;s and ace-window&#39;s usual layouts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/bbatsov/projectile][Projectile/project.el]] integration :: the &lt;del&gt;treemacs-projectile&lt;/del&gt; package lets you quickly add your projectile projects to the treemacs workspace. &lt;del&gt;project.el&lt;/del&gt; compatibility is built-in.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple mouse interface :: Left clicks will work the same as you&#39;re used to from with graphical applications&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Session persistence :: Treemacs automatically saves and restores your workspaces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dashing good looks :: Treemacs uses (optionally resizable) png images in HD 22x22 resolution for its icons (quantity is, of course, another matter). When run in a terminal a simple fallback is used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tag view :: Treemacs can display files&#39; tags. All file types that Emacs can generate a (semantic) imenu index for are supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visual feedback :: When it would otherwise be difficult to see the message in the minibuffer success/failure is indicated with pulse.el.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Theming support :: Treemacs supports using multiple icon themes that can be changed at will.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ease of use :: Treemacs offers many configuration options, but comes with a set of (what hopefully should be) sane defaults. Installation aside there are two obligatory pieces of setup: 1) Choosing convenient keybindings to run treemacs and 2) If you use evil: requiring &lt;del&gt;treemacs-evil&lt;/del&gt; to integrate treemacs with evil and enable j/k navigation. More on both below. You can also summon helpful hydras with &lt;del&gt;?&lt;/del&gt; and &lt;del&gt;C-?&lt;/del&gt; that will remind you of treemacs&#39; many keybindings and features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bookmark integration :: Running &lt;del&gt;bookmark-set&lt;/del&gt; on a Treemacs item will store a bookmark to Treemacs buffer for that item.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Fancy Gifs!&lt;/p&gt; &#xA;&lt;p&gt;(The font used in the gifs is Fantasque Sans Mono)&lt;/p&gt; &#xA;&lt;p&gt;Various ways to open files: [[file:screenshots/open-files.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Workspace administration with org-mode: [[file:screenshots/workspace-edit.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Automatic reaction to changes in the file system: [[file:screenshots/filewatch.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Automatic reaction to changes in git: [[file:screenshots/git.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Full-featured mouse interface: [[file:screenshots/mouse-interface.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Including moving and opening files via mouse drag: [[file:screenshots/mouse-drag.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Resizable icons: [[file:screenshots/icon-resize.gif]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quick Start If you don&#39;t care about reading the full readme here&#39;s a list of some bare bones basics to get you started:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;First of all: press &lt;del&gt;?&lt;/del&gt; to summon the helpful hydra: [[file:screenshots/hydra.png]]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use evil don&#39;t forget to also install &lt;del&gt;treemacs-evil&lt;/del&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use projectile you can install &lt;del&gt;treemacs-projectile&lt;/del&gt; to allow quickly add your projectile projects to treemacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Treemacs doesn&#39;t bind any global keys, you need to use whatever fits you best. A full install setup can be found [[#installation][below]]. Otherwise just add a keybind for &lt;del&gt;treemacs&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For navigation use n/p (j/k when evil), M-n/M-p to move to same-height neighbour, u to go to parent, and C-j/C-k to move between projects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s half a dozen different ways to open nodes, all bound under o as prefix. Pick your favourite.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TAB and RET are particularly configurable. See &lt;del&gt;treemacs-TAB/RET-actions-config&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Projects administration is bound under the &lt;del&gt;C-c C-p&lt;/del&gt; prefix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Detailed Feature List ** Projects and Workspaces If you&#39;ve previously used a different explorer like NeoTree or NerdTree - or an earlier version of treemacs for that matter - you are probably used to a display system wherein you see exactly a single file tree whose exact root you can arbitrarily change. This system makes it difficult to work on and switch between multiple projects. Treemacs used to (and still does) remedy that limitation by making every treemacs buffer unique to its frame, but it has now been redesigned to be able to display multiple file trees - projects - at once.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In treemacs a workspace is simply a (named) collection of projects, while a project mostly consists of 2 things: its location in the file system and its name. This is the info that you need to provide when you want to add a new project to your workspace. Just like projects you can add, remove, rename and switch between workspaces at any time.&lt;/p&gt; &#xA;&lt;p&gt;This design approach has various advantages and disadvantages. It is now no longer possible to &#34;free roam&#34; in the file system with treemacs, i.e. you can no longer arbitrarily switch the single file tree&#39;s root to the directory at point or the current root&#39;s parent. Another restriction is that the same part of the file system may not appear more than once as part of the workspace. For example it is not possible to have both /Documents and /Documents/ProjectX as projects in the same workspace, since internally treemacs heavily relies on every node having a unique natural key in its absolute path. Nonetheless the pros certainly outweigh the cons, as a multiroot setup allows to work on multiple projects with any combination concern/buffer separating frameworks, be it persp/perspective, eyebrowse, tab-bar-mode, or project.el/projectile. It also opens the potential for concurrent display not only of the file system, but e.g. the currently open buffers.&lt;/p&gt; &#xA;&lt;p&gt;*** Workspace Selection When a workspace is first needed, treemacs will select a workspace in the following manner:&lt;/p&gt; &#xA;&lt;p&gt;If the current buffer is editing a file then treemacs will try to find the first workspace with a project containing that file. If that fails treemacs will resort to using the /fallback workspace/ which is defined as simply the /first/ element in the list of all workspace.&lt;/p&gt; &#xA;&lt;p&gt;The order of workspaces is the same that you see when calling &lt;del&gt;treemacs-edit-workspaces&lt;/del&gt; (see next chapter). You can interactively set the fallback workspace by calling &lt;del&gt;treemacs-set-fallback-workspace&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This selection will happen when treemacs is first started (with a command like &lt;del&gt;treemacs-select-window&lt;/del&gt;) or when a function that requires the current workspace to be known is used (like adding or removing a project). *** Disabling projects It is possible to disable a project so it won&#39;t appear in treemacs, but still remains a part of your workspace, keeping it visible when you go edit your workspace layout. To do so simply start the project&#39;s name with &#34;COMMENT&#34;:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/disable-project.png]]&lt;/p&gt; &#xA;&lt;p&gt;** Conveniently Editing Your Projects and Workspaces There are two ways to edit your projects and workspaces: call up single add/remove/rename/switch commands under either the &lt;del&gt;C-c C-p&lt;/del&gt; or &lt;del&gt;C-c C-w&lt;/del&gt; prefix, or call &lt;del&gt;treemacs-edit-workspaces&lt;/del&gt; and edit your entire layout in the form of a single org-mode buffer.&lt;/p&gt; &#xA;&lt;p&gt;The used org-format is quite simple: level 1 headlines are names of workspaces, level 2 headlines are names of projects in a workspace, and every project&#39;s path is given as a description list, starting with a &lt;del&gt;-&lt;/del&gt; (and an optional leading space). Empty lines and lines starting with &lt;del&gt;#&lt;/del&gt; are ignored, and everything else leads to an error.&lt;/p&gt; &#xA;&lt;p&gt;You needn&#39;t worry about making mistakes either. If there&#39;s something wrong when you call &lt;del&gt;treemacs-finish-edit&lt;/del&gt; (C-c C-c) then treemacs will point you at the incorrect line and tell you what&#39;s missing:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/workspace-edit.png]]&lt;/p&gt; &#xA;&lt;p&gt;(Note that the list with the path property allows an indentation of 0 or 1 spaces only. The much greater visible indentation is caused by &lt;del&gt;org-indent-mode&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;** Navigation without Projects and Workspaces&lt;/p&gt; &#xA;&lt;p&gt;If a strict workspace and project structure, as described above, is too stringent for your use-case there are multiple other ways to use treemacs in a more &#34;free-form&#34; style:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use &lt;del&gt;treemacs-display-current-project-exclusively&lt;/del&gt; to display only the current project (removing all other projects from the workspace).&lt;/li&gt; &#xA; &lt;li&gt;You can enable &lt;del&gt;treemacs-project-follow-mode&lt;/del&gt; to make treemacs automatically switch to the project for the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;As long as there is exactly /a single project/ in your workspace you can also use &lt;del&gt;M-H&lt;/del&gt; and &lt;del&gt;M-L&lt;/del&gt; (or &lt;del&gt;treemacs-root-up&lt;/del&gt; and &lt;del&gt;treemacs-root-down&lt;/del&gt;) to to arbitrarily change the project&#39;s root and freely navigate through your your file system, similar to dired. &lt;del&gt;M-H&lt;/del&gt; will navigate one level upward in the file system, &lt;del&gt;M-L&lt;/del&gt; will move into the directory at point.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Frame Locality Treemacs buffers have a limited scope they are visible in: the frames they are created in. A treemacs buffer, once created, lives alongside and inside its frame, and is also destroyed with that frame. Calling &lt;del&gt;treemacs&lt;/del&gt; while inside a new frame will create a new buffer for it, regardless how many other treemacs buffers already exist. While there can be multiple unique treemacs buffer they will all still show the same workspace and the same projects.&lt;/p&gt; &#xA;&lt;p&gt;A treemacs buffer that does not belong to a frame may still be made visible by manually selecting in the buffer list. This would break various assumptions in treemacs&#39; code base and effectively falls under undefined behaviour - a bad idea all around.&lt;/p&gt; &#xA;&lt;p&gt;** Mouse Interface Treemacs handles left clicks in much the same way as modern graphical applications do: a single click sets the focus, a double click expands or collapses a directory or tag section node and visits a file/moves to a tag for a file/tag node.&lt;/p&gt; &#xA;&lt;p&gt;Additionally tag sections can be expanded or collapsed by a single click on the file/tag section icon.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to expand/collpase nodes with a single mouse click you can also use &lt;del&gt;treemacs-single-click-expand-action&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (with-eval-after-load &#39;treemacs (define-key treemacs-mode-map [mouse-1] #&#39;treemacs-single-click-expand-action)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;A right click popup-menu is also available:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/right-click.png]]&lt;/p&gt; &#xA;&lt;p&gt;You can move and open files by dragging them with the mouse.&lt;/p&gt; &#xA;&lt;p&gt;** Follow-mode &lt;del&gt;treemacs-follow-mode&lt;/del&gt; is a global minor mode which allows the treemacs view to always move its focus to the currently selected file. This mode runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called is determined by &lt;del&gt;treemacs-tag-follow-delay&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Tag-follow-mode &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; is a global minor mode which extends and effectively replaces &lt;del&gt;treemacs-follow-mode&lt;/del&gt;. When activated it follows not just the current file, but also the current tag. This works alongside treemacs&#39; integration with imenu, so all file types providing an imenu implementation are compatible.&lt;/p&gt; &#xA;&lt;p&gt;This mode, like follow-mode, runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called is determined by &lt;del&gt;treemacs-tag-follow-delay&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that in order to move to a tag in treemacs the treemacs buffer&#39;s window needs to be temporarily selected, which will reset &lt;del&gt;blink-cursor-mode&lt;/del&gt;&#39;s timer if it is enabled. This will result in the cursor blinking seemingly pausing for a short time and giving the appearance of the tag follow action lasting much longer than it really does.&lt;/p&gt; &#xA;&lt;p&gt;** Fringe-indicator-mode &lt;del&gt;treemacs-fringe-indicator-mode&lt;/del&gt; is a global minor mode that displays a little icon in the fringe that moves with the cursor. It can make the selected line more visible if &lt;del&gt;hl-line-mode&lt;/del&gt; doesn&#39;t stand out with your theme.&lt;/p&gt; &#xA;&lt;p&gt;The indicator can either be permanently visible, or be only shown when the treemacs window is selected by calling it either with the &lt;del&gt;always&lt;/del&gt; or &lt;del&gt;only-when-focused&lt;/del&gt; argument. ** Git-mode &lt;del&gt;treemacs-git-mode&lt;/del&gt; is a global minor mode which enables treemacs to check for files&#39; and directories&#39; git status information and highlight them accordingly (see also the &lt;del&gt;treemacs-git-...&lt;/del&gt; faces). The mode is available in 3 variants: &lt;del&gt;simple&lt;/del&gt;, &lt;del&gt;extended&lt;/del&gt; and &lt;del&gt;deferred&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The simple variant starts a git status process and parses its output in elisp. The parsing is kept quick and simple, so some info is missed: this version includes git status information only for files, but not directories.&lt;/li&gt; &#xA; &lt;li&gt;The extended variant highlights both files and directories. This greatly increases the complexity and length of the parsing process, and is therefore done in an asynchronous python process for the sake of performance. The extended variant requires python3 to work.&lt;/li&gt; &#xA; &lt;li&gt;The deferred variant is the same as extended, except the tasks of rendering nodes and highlighting them are separated. The former happens immediately, the latter after &lt;del&gt;treemacs-deferred-git-apply-delay&lt;/del&gt; seconds of idle time. This may be faster (if not in truth then at least in appereance) as the git process is given a much greater amount of time to finish. The downside is that the effect of nodes changing their colors may be somewhat jarring, though this effect is largely mitigated due to the use of a caching layer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When called interactively &lt;del&gt;treemacs-git-mode&lt;/del&gt; will ask for the variant to use. In lisp code an appropriate symbol can be directly passed to the minor mode function:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-git-mode &#39;deferred) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;All versions use an asynchronous git process and are optimized to not do more work than necessary, so their performance cost should, for the most part, be the constant amount of time it takes to fork a subprocess. For repositories where this is not the case &lt;del&gt;treemacs-max-git-entries&lt;/del&gt; (default value 5000) will limit the number of git status entries treemacs will process before ignoring the rest.&lt;/p&gt; &#xA;&lt;p&gt;** Filewatch-mode &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt; is a global minor mode which enables treemacs to watch the files it is displaying for changes and automatically refresh itself when it detects a change in the file system that it decides is relevant.&lt;/p&gt; &#xA;&lt;p&gt;A change event is relevant for treemacs if a new file has been created or deleted or a file has been changed and &lt;del&gt;treemacs-git-mode&lt;/del&gt; is enabled. Events caused by files that are ignored as per &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt; are likewise counted as not relevant.&lt;/p&gt; &#xA;&lt;p&gt;The refresh is not called immediately after an event was received, treemacs instead waits &lt;del&gt;treemacs-file-event-delay&lt;/del&gt; ms to see if any more files have changed to avoid having to refresh multiple times over a short period of time. Treemacs will not refresh the entire view to make the detected changes visible, but will instead only make updates to the directories where the change(s) happened. Using this mode is therefore by far not as expensive as a full refresh on every change and save.&lt;/p&gt; &#xA;&lt;p&gt;The mode only applies to directories opened &lt;em&gt;after&lt;/em&gt; this mode has been activated. This means that to enable file watching in an already existing treemacs buffer it needs to be killed and rebuilt. Turning off this mode is, on the other hand, instantaneous - it will immediately turn off all existing file watch processes and outstanding refresh actions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Known limitations&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Staging and committing changes does not produce any file change events of its own, if you use &lt;del&gt;treemacs-git-mode&lt;/del&gt; you still need to do a manual refresh to see your files&#39; faces go from &#39;changed&#39; and &#39;untracked&#39; to &#39;unchanged&#39; after a commit. The &lt;del&gt;treemacs-magit&lt;/del&gt; package provides the necessary hooks to fill this gap.&lt;/li&gt; &#xA; &lt;li&gt;Filewatch-mode may not be able to track file modifications on MacOS, making git-mode miss potential changes, see also [[https://github.com/Alexander-Miller/treemacs/issues/152#issuecomment-941093929][this comment]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** File Management Treemacs is no dired, but it supports the basic file management facilities of creating, deleting, moving, copying and renaming files.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to mark multiple files to act on them. &lt;del&gt;M-m&lt;/del&gt; will summon a hydra for bulk file actions. &lt;em&gt;NOTE:&lt;/em&gt; The bulk action implementation is using treemacs&#39; (yet to be documented) annotation api, which is set up to provide /permanent/ annotations like colouring based on flycheck&#39;s error/warning/info output. This means that marking files will likewise be permanent, even if you collapse the directories containing those files and they are no longer visible. ** Indent-guide-mode&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;treemacs-indent-guide-mode&lt;/del&gt; is a simple visual helper based on the the options provided by the &lt;del&gt;treemacs-indentation&lt;/del&gt; and &lt;del&gt;treemacs-indentation-string&lt;/del&gt; settings. Its appearance is dictated by &lt;del&gt;treemacs-indent-guide-style&lt;/del&gt;, the options are either &lt;del&gt;line&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/indent-guide-line.png]]&lt;/p&gt; &#xA;&lt;p&gt;or &lt;del&gt;block&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/indent-guide-block.png]]&lt;/p&gt; &#xA;&lt;p&gt;** Session Persistence Treemacs&#39; sessions - your workspace and the projects it contains - are saved when Emacs shuts down and restored when treemacs is first loaded. This persistence process is fully automatic and independant, and should therefore be fully compatible with &lt;del&gt;desktop-save-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The persisted state is saved under &lt;del&gt;user-emacs-directory/.cache/treemacs-persist&lt;/del&gt; by default. The exact file location is saved in the variable &lt;del&gt;treemacs-persist-file&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If something goes wrong when loading the file the erroneous state will be saved in &lt;del&gt;treemacs-last-error-persist-file&lt;/del&gt; for debugging.&lt;/p&gt; &#xA;&lt;p&gt;** Terminal Compatibility When run in a terminal treemacs will fall back to a much simpler rendering system, foregoing its usual png icons and using simple &lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; characters instead. The exact characters used are [[#custom-icons][highly customizable]].&lt;/p&gt; &#xA;&lt;p&gt;** Tag View Treemacs is able to display not only the file system, but also tags found in individual files. The tags list is sourced using emacs&#39; builtin imenu functionality, so all file types that emacs can generate an imenu index for are supported.&lt;/p&gt; &#xA;&lt;p&gt;Imenu caches its result, so to avoid stale tag lists setting &lt;del&gt;imenu-auto-rescan&lt;/del&gt; to t is recommended. Tags generated with the help of &lt;del&gt;semantic-mode&lt;/del&gt; are likewise supported.&lt;/p&gt; &#xA;&lt;p&gt;*** ggtags&lt;/p&gt; &#xA;&lt;p&gt;Treemacs can show the tags produced by ggtags if you switch a buffer&#39;s imenu index function to use ggtags:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq-local imenu-create-index-function #&#39;ggtags-build-imenu-index) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Current-Directory Awareness Treemacs always sets the &lt;del&gt;default-directory&lt;/del&gt; variable based on the (nearest) path at the current node, falling back to your home directory when there is no node or path at point. That means that various commands like &lt;del&gt;find-file&lt;/del&gt;, &lt;del&gt;ediff&lt;/del&gt; &lt;del&gt;magit-status&lt;/del&gt; or &lt;del&gt;helm-projectile-ag&lt;/del&gt; will correctly act based on the current directory or project context. ** Tramp Support Treemacs supports projects on remote directories, e.g. &lt;del&gt;/scp:remote-server:path/to/directory&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However tramp support has some restrictions: &lt;del&gt;treemacs-use-collapsed-directories&lt;/del&gt; has no effect on remote directories. ** Org Support Treemacs supports storing links to its file nodes by means of &lt;del&gt;org-store-link&lt;/del&gt;. ** Theme Support Using a different treemacs theme works the same way as using a different Emacs theme: just call &lt;del&gt;treemacs-load-theme&lt;/del&gt;, either programmatically or interactively. In the former case you need to supply the name of the theme as a string, like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-load-theme &#34;Default&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Do keep in mind that by default treemacs&#39; theme support is all theory: the standard installation includes only the default theme; this feature is meant to easily allow &lt;em&gt;others&lt;/em&gt; to extend, create and distribute themes for treemacs.&lt;/p&gt; &#xA;&lt;p&gt;A detailed explanation on modifying themes and icons can be found in the [[#customizing-themes-and-icons][Configuration]] section. ** Additional Packages Next to treemacs itself you can optionally install:&lt;/p&gt; &#xA;&lt;p&gt;*** treemacs-evil Must be installed and loaded if you use evil. The keybindings and the cursor will not be setup properly otherwise. It&#39;ll also enable navigation with j/k instead of n/p. *** treemacs-projectile Allows to quickly add your projectile projects to the treemacs workspace. *** treemacs-magit A small utility package to fill the small gaps left by using filewatch-mode and git-mode in conjunction with magit: it will inform treemacs about (un)staging of files and commits happening in magit. *** treemacs-icons-dired Allows you to use treemacs icons in dired buffers with &lt;del&gt;treemacs-icons-dired-mode&lt;/del&gt;: [[file:screenshots/dired-icons.png]] *** treemacs-persp/treemacs-perspective Integration with persp-mode or perspective.el that allows treemacs buffers to be unique inside the active perspective instead of the default frame-based buffer scope. *** treemacs-tab-bar Integration with tab-bar-mode that allows treemacs buffers to be unique inside the active tab instead of the default frame-based buffer scope. *** treemacs-all-the-icons Provides a theme using [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]. ** Treemacs as a Framework Treemacs can be extended to display arbitrary nodes as well as be used as a general rendering backend for any tree-like structures. [[file:Extensions.org][See here]] for an extended tutorial and demonstration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation Treemacs is included in Spacemacs (for now only on the dev branch). If you are using the development version of Spacemacs you can simply add treemacs to &lt;del&gt;dotspacemacs-configuration-layers&lt;/del&gt; to replace the default NeoTree. Check &lt;del&gt;SPC h SPC treemacs&lt;/del&gt; for details. Otherwise you will need to add treemacs to &lt;del&gt;dotspacemacs-additional-packages&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Treemacs is also available on MELPA. If you just want to quickly start using it grab the &lt;del&gt;use-package&lt;/del&gt; example below, and customize it as needed (remove &lt;del&gt;treemacs-evil&lt;/del&gt; if you don&#39;t use it, customize the keybindings to you taste, etc).&lt;/p&gt; &#xA;&lt;p&gt;Either way keep in mind that treemacs has /no default keybindings/ for its globally callable initialization functions. Each user is supposed to select keybindings for functions like &lt;del&gt;treemacs-find-file&lt;/del&gt; based on whatever they find convenient.&lt;/p&gt; &#xA;&lt;p&gt;You can find an exhaustive overview of all functions, their keybindings and functions you need to bind yourself [[#keymap][below]].&lt;/p&gt; &#xA;&lt;p&gt;The following &lt;del&gt;use-package&lt;/del&gt; snippet includes a list of /all/ of treemacs&#39; configuration options in their default setting. Setting them, or activating the minor modes yourself is not necessary, they are only listed here to encourage discoverability.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package treemacs :ensure t :defer t :init (with-eval-after-load &#39;winum (define-key winum-keymap (kbd &#34;M-0&#34;) #&#39;treemacs-select-window)) :config (progn (setq treemacs-collapse-dirs (if treemacs-python-executable 3 0) treemacs-deferred-git-apply-delay 0.5 treemacs-directory-name-transformer #&#39;identity treemacs-display-in-side-window t treemacs-eldoc-display &#39;simple treemacs-file-event-delay 5000 treemacs-file-extension-regex treemacs-last-period-regex-value treemacs-file-follow-delay 0.2 treemacs-file-name-transformer #&#39;identity treemacs-follow-after-init t treemacs-expand-after-init t treemacs-find-workspace-method &#39;find-for-file-or-pick-first treemacs-git-command-pipe &#34;&#34; treemacs-goto-tag-strategy &#39;refetch-index treemacs-header-scroll-indicators &#39;(nil . &#34;^^^^^^&#34;)&#39; treemacs-hide-dot-git-directory t treemacs-indentation 2 treemacs-indentation-string &#34; &#34; treemacs-is-never-other-window nil treemacs-max-git-entries 5000 treemacs-missing-project-action &#39;ask treemacs-move-forward-on-expand nil treemacs-no-png-images nil treemacs-no-delete-other-windows t treemacs-project-follow-cleanup nil treemacs-persist-file (expand-file-name &#34;.cache/treemacs-persist&#34; user-emacs-directory) treemacs-position &#39;left treemacs-read-string-input &#39;from-child-frame treemacs-recenter-distance 0.1 treemacs-recenter-after-file-follow nil treemacs-recenter-after-tag-follow nil treemacs-recenter-after-project-jump &#39;always treemacs-recenter-after-project-expand &#39;on-distance treemacs-litter-directories &#39;(&#34;/node_modules&#34; &#34;/.venv&#34; &#34;/.cask&#34;) treemacs-show-cursor nil treemacs-show-hidden-files t treemacs-silent-filewatch nil treemacs-silent-refresh nil treemacs-sorting &#39;alphabetic-asc treemacs-select-when-already-in-treemacs &#39;move-back treemacs-space-between-root-nodes t treemacs-tag-follow-cleanup t treemacs-tag-follow-delay 1.5 treemacs-text-scale nil treemacs-user-mode-line-format nil treemacs-user-header-line-format nil treemacs-wide-toggle-width 70 treemacs-width 35 treemacs-width-increment 1 treemacs-width-is-initially-locked t treemacs-workspace-switch-cleanup nil)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ;; The default width and height of the icons is 22 pixels. If you are&#xA;  ;; using a Hi-DPI display, uncomment this to double the icon size.&#xA;  ;;(treemacs-resize-icons 44)&#xA;&#xA;  (treemacs-follow-mode t)&#xA;  (treemacs-filewatch-mode t)&#xA;  (treemacs-fringe-indicator-mode &#39;always)&#xA;&#xA;  (pcase (cons (not (null (executable-find &#34;git&#34;)))&#xA;               (not (null treemacs-python-executable)))&#xA;    (`(t . t)&#xA;     (treemacs-git-mode &#39;deferred))&#xA;    (`(t . _)&#xA;     (treemacs-git-mode &#39;simple)))&#xA;&#xA;  (treemacs-hide-gitignored-files-mode nil))&#xA;:bind&#xA;(:map global-map&#xA;      (&#34;M-0&#34;       . treemacs-select-window)&#xA;      (&#34;C-x t 1&#34;   . treemacs-delete-other-windows)&#xA;      (&#34;C-x t t&#34;   . treemacs)&#xA;      (&#34;C-x t d&#34;   . treemacs-select-directory)&#xA;      (&#34;C-x t B&#34;   . treemacs-bookmark)&#xA;      (&#34;C-x t C-t&#34; . treemacs-find-file)&#xA;      (&#34;C-x t M-t&#34; . treemacs-find-tag)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(use-package treemacs-evil :after (treemacs evil) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-projectile :after (treemacs projectile) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-icons-dired :hook (dired-mode . treemacs-icons-dired-enable-once) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-magit :after (treemacs magit) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode :after (treemacs persp-mode) ;;or perspective vs. persp-mode :ensure t :config (treemacs-set-scope-type &#39;Perspectives))&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode :after (treemacs) :ensure t :config (treemacs-set-scope-type &#39;Tabs)) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration ** Variables Treemacs offers the following configuration options (&lt;del&gt;describe-variable&lt;/del&gt; will usually offers more details):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| Variable | Default | Description | |------------------------------------------+--------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | treemacs-indentation | 2 | The number of times each level is indented in the file tree. If specified as &#39;(INTEGER px), indentation will be a single INTEGER pixels wide space. | | treemacs-indentation-string | &#34; &#34; | The string that is used to create indentation when &lt;del&gt;treemacs-indentation&lt;/del&gt; is not specified as pixels. | | treemacs-width | 35 | Width of the treemacs window. | | treemacs-wide-toggle-width | 70 | Width of the treemacs window when using &lt;del&gt;treemacs-extra-wide-toggle&lt;/del&gt;. | | treemacs-width-increment | 1 | When resizing, this value is added or substracted from the window width. | | treemacs-show-hidden-files | t | Dotfiles will be shown if this is set to t and be hidden otherwise. | | treemacs-follow-after-init | t | When non-nil follow the currently selected file after initializing the treemacs buffer, regardless of &lt;del&gt;treemacs-follow-mode&lt;/del&gt; setting. | | treemacs-expand-after-init | t | When non-nil expand the first project after treemacs is first initialsed. | | treemacs-sorting | alphabetic-asc | Indicates how treemacs will sort its files and directories. (Files will always be shown after directories.) | | treemacs-ignored-file-predicates | (treemacs--std-ignore-file-predicate) | List of predicates to test for files and directories ignored by Emacs. Ignored files will &lt;em&gt;never&lt;/em&gt; be shown in the treemacs buffer. | | treemacs-pre-file-insert-predicates | nil | List of predicates to test for files and directories not to be rendered. Unlike &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt; these predicates apply when files&#39; git status information is available. | | treemacs-file-event-delay | 5000 | How long (in milliseconds) to collect file events before refreshing. See also &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;. | | treemacs-goto-tag-strategy | refetch-index | Indicates how to move to a tag when its buffer is dead. | | treemacs-default-visit-action | treemacs-visit-node-no-split | Default action for opening a node (e.g. file, directory, tag). &lt;del&gt;treemacs-visit-file-default&lt;/del&gt; action in &lt;del&gt;treemacs-*-actions-config&lt;/del&gt; calls this function. | | treemacs-RET-actions-config | Prefers visiting nodes over closing/opening | Alist defining the behaviour of &lt;del&gt;treemacs-RET-action&lt;/del&gt;. | | treemacs-TAB-actions-config | Prefers closing/opening nodes over visiting | Alist defining the behaviour of &lt;del&gt;treemacs-TAB-action&lt;/del&gt;. | | treemacs-doubleclick-actions-config | Closes/opens tags and visits files | Alist defining the behaviour of &lt;del&gt;treemacs-doubleclick-action&lt;/del&gt;. | | treemacs-collapse-dirs | 0 | Collapse this many directories into one, when possible. A directory is collapsible when its content consists of nothing but another directory. | | treemacs-silent-refresh | nil | When non-nil a completed refresh will not be announced with a log message. This applies both to manual refreshing as well as automatic (due to &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;). | | treemacs-silent-filewatch | nil | When non-nil a refresh due to &lt;del&gt;filewatch-mode&lt;/del&gt; will cause no log message. | | treemacs-is-never-other-window | nil | Prevents treemacs from being selected with &lt;del&gt;other-window&lt;/del&gt;. | | treemacs-position | left | Position of treemacs buffer. Valid values are &lt;del&gt;left&lt;/del&gt;, &lt;del&gt;right&lt;/del&gt;. | | treemacs-tag-follow-delay | 1.5 | Delay in seconds of inactivity for &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; to trigger. | | treemacs-tag-follow-cleanup | t | When non-nil &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; will keep only the current file&#39;s tags visible. | | treemacs-project-follow-cleanup | nil | When non-nil &lt;del&gt;treemacs-follow-mode&lt;/del&gt; will keep only the current project expanded and all others closed. | | treemacs-no-png-images | nil | When non-nil treemacs will use TUI string icons even when running in a GUI. | | treemacs-python-executable | (treemacs--find-python3) | Python 3 binary used by treemacs. | | treemacs-recenter-after-file-follow | nil | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when &lt;del&gt;treemacs-follow-mode&lt;/del&gt; moves to a new file. | | treemacs-recenter-after-tag-follow | nil | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; moves to a new tag. | | treemacs-recenter-after-project-jump | &#39;always | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when navigating between projects. | | treemacs-recenter-after-project-expand | &#39;on-distance | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when expanding a project node. | | treemacs-recenter-distance | 0.1 | Minimum distance from window top/bottom (0.1 = 10%) before treemacs calls &lt;del&gt;recenter&lt;/del&gt; in tag/file-follow-mode. | | treemacs-pulse-on-success | t | When non-nil treemacs will pulse the current line as a success indicator, e.g. when creating a file. | | treemacs-pulse-on-failure | t | When non-nil treemacs will pulse the current line as a failure indicator, e.g. when failing to find a file&#39;s tags. | | treemacs-elisp-imenu-expression | [too large to list] | The imenu expression treemacs uses in elisp buffers. | | treemacs-persist-file | ~/.emacs.d/.cache/treemacs-persist | Path to the file treemacs uses to persist its state. | | treemacs-last-error-persist-file | ~/.emacs.d/.cache/treemacs-persist-at-last-error | Path to the file treemacs uses to persist its state. | | treemacs-space-between-root-nodes | t | When non-nil treemacs will separate root nodes with an empty line. | | treemacs-wrap-around | t | When non-nil treemacs will wrap around at the buffer edges when moving between lines. | | treemacs--fringe-indicator-bitmap | [vertical bar] | The fringe bitmap used by the fringe-indicator minor mode. | | treemacs-deferred-git-apply-delay | 0.5 | Seconds of idle time for git highlighting to apply when using the deferred &lt;del&gt;treemacs-git-mode&lt;/del&gt;. | | treemacs-file-follow-delay | 0.2 | Delay in seconds of idle time for treemacs to follow the selected window. | | treemacs-display-in-side-window | t | When non-nil treemacs will use a dedicated [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Side-Windows.html][side-window]]. | | treemacs-max-git-entries | 5000 | Maximum number of git status entries treemacs will process. Anything above that number will be ignored. | | treemacs-missing-project-action | ask | When a persisted project is missing from filesystem, &lt;del&gt;ask&lt;/del&gt; will prompt for action, &lt;del&gt;keep&lt;/del&gt; will keep the project in the project list, and &lt;del&gt;remove&lt;/del&gt; will remove it from it without prompt. | | treemacs-show-cursor | nil | When non-nil the cursor will stay visible in the treemacs buffer. | | treemacs-git-command-pipe | &#34;&#34; | Text to be appended to treemacs&#39; git command. Useful for filtering with something like grep. | | treemacs-no-delete-other-windows | t | Prevents the treemacs window from being deleted by commands like &lt;del&gt;delete-other-windows&lt;/del&gt; and &lt;del&gt;magit-status&lt;/del&gt;. | | treemacs-eldoc-display | &#39;simple | Enables eldoc display of the file path at point. Requires &lt;del&gt;eldoc-mode&lt;/del&gt;. | | treemacs-bookmark-title-template | &#34;Treemacs - ${project}: ${label}&#34; | When using &lt;del&gt;bookmark-set&lt;/del&gt; in Treemacs, the default template for a bookmark label. The following patterns are available: &#34;${project}&#34;, &#34;${label}&#34;, &#34;${label:N}&#34;, ${label-path}&#34;, &#34;${label-path:N}&#34;, &#34;${file-path}&#34;, &#34;${file-path:N}&#34;. | | treemacs-file-extension-regex | Text after last period | Determines how treemacs detects a file extension. Can be set to use text after first or last period. | | treemacs-directory-name-transformer | identity | Transformer function that is applied to directory names before rendering for any sort of cosmetic effect. | | treemacs-file-name-transformer | identity | Transformer function that is applied to file names before rendering for any sort of cosmetic effect. | | treemacs-user-mode-line-format | nil | When non-nil treemacs will use it as a mode line format (otherwise format provided by &lt;del&gt;spaceline&lt;/del&gt;, &lt;del&gt;moody-mode-line&lt;/del&gt; and &lt;del&gt;doom-modeline&lt;/del&gt; will be used or, finally, &#34;Treemacs&#34; text will be displayed) | | treemacs-user-header-line-format | nil | When non-nil treemacs will use it as a header line format | | treemacs-move-forward-on-expand | nil | When non-nil treemacs will move to the first child of an expanded node. | | treemacs-workspace-switch-cleanup | nil | Indicates which, if any, buffers should be deleted on a workspace switch. Valid values are &lt;del&gt;nil&lt;/del&gt;, &lt;del&gt;files&lt;/del&gt;, &lt;del&gt;all&lt;/del&gt;. | | treemacs-read-string-input | &#39;from-child-frame | Indicates whether simple string input like project names should be read from a child frame or the minibuffer. | | treemacs-expand-added-projects | t | Indicates whether newly added projects should be expanded. | | treemacs-imenu-scope | &#39;everything | Determines which items treemacs&#39; imenu function will collect. | | treemacs-window-background-color | nil | Background color for the treemacs window. | | treemacs-litter-directories | (&#34;/node_modules&#34; &#34;/.venv&#34; &#34;/.cask&#34;) | List of directories affected by &lt;del&gt;treemacs-cleanup-litter&lt;/del&gt;. | | treemacs-width-is-initially-locked | t | Indicates whether the treemacs windows starts with a locked width or not. | | treemacs-select-when-already-in-treemacs | &#39;move-back | Indicates how &lt;del&gt;treemacs-select-window&lt;/del&gt; behaves when treemacs is already selected. | | treemacs-text-scale | nil | Scaling for text in treemacs, used via &lt;del&gt;text-scale-increase&lt;/del&gt;. | | treemacs-indent-guide-style | line | Appearance option for &lt;del&gt;treemacs-indent-guide&lt;/del&gt;, either a thin line or a thick block. | | treemacs-find-workspace-method | &#39;find-for-file-or-pick-first | Determines how treemacs selects the workspace when it first starts. | | treemacs-header-scroll-indicators | &#39;(nil . &#34;^^^^^^&#34;) | Indicators used for &lt;del&gt;treemacs-indicate-top-scroll-mode&lt;/del&gt;. | | treemacs-hide-dot-git-directory | t | Indicates whether &lt;del&gt;.git&lt;/del&gt; directories should always be hidden. |&lt;/p&gt; &#xA;&lt;p&gt;** Faces Treemacs defines and uses the following faces: | Face | Based on | Description | |----------------------------------------+--------------------------------------------------+------------------------------------------------------------------------------| | treemacs-directory-face | font-lock-function-name-face | Face used for directories. | | treemacs-directory-collapsed-face | treemacs-directory-face | Face used for collapsed part of directories. | | treemacs-file-face | default | Face used for files. | | treemacs-root-face | font-lock-constant-face | Face used for project roots. | | treemacs-root-unreadable-face | treemacs-root-face | Face used for local unreadable project roots. | | treemacs-root-remote-face | font-lock-function-name-face, treemacs-root-face | Face used for readable remote (Tramp) project roots. | | treemacs-root-remote-unreadable-face | treemacs-root-unreadable-face | Face used for unreadable remote (Tramp) project roots. | | treemacs-root-remote-disconnected-face | warning, treemacs-root-face | Face used for disconnected remote (Tramp) project roots. | | treemacs-tags-face | font-lock-builtin-face | Face used for tags. | | treemacs-help-title-face | font-lock-constant-face | Face used for the title of the helpful hydra. | | treemacs-help-column-face | font-lock-keyword-face | Face used for the column headers of the helpful hydra. | | treemacs-git-*-face | various font lock faces | Faces used by treemacs for various git states. | | treemacs-term-node-face | font-lock-string-face | Face for directory node symbols used by treemacs when it runs in a terminal. | | treemacs-on-success-pulse-face | :fg #111111 :bg #669966 | Pulse face used when pulsing on a successful action. | | treemacs-on-failure-puse-face | :fg #111111 :bg #ab3737 | Pulse face used when pulsing on a failed action. | | treemacs-marked-file-face | :fg #f0c674 :bg #ab3737 | Face for files marked for bulk file management. |&lt;/p&gt; &#xA;&lt;p&gt;** Evil compatibility To make treemacs get along with evil-mode you need to install and load &lt;del&gt;treemacs-evil&lt;/del&gt;. It does not define any functions or offer any configuration options, making sure it is loaded is sufficient.&lt;/p&gt; &#xA;&lt;p&gt;** Customizing Themes and Icons *** Creating and Modifying Themes Creating and modifying themes and icons is all done in a single step using dedicated macros.&lt;/p&gt; &#xA;&lt;p&gt;To create a theme use &lt;del&gt;treemacs-create-theme&lt;/del&gt;. It requires the name of the theme and accepts 3 optional keyword arguments: the directory the theme&#39;s icons are stored in (if it&#39;s using png icons), the name of the theme it&#39;s extending and the config, a final form that&#39;s responsible for creating all the theme&#39;s icons. A config will typically consist of nothing but calls to &lt;del&gt;treemacs-create-icon&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-create-theme &#34;Default&#34; :icon-directory (treemacs-join-path treemacs-dir &#34;icons/default&#34;) :config (progn (treemacs-create-icon :file &#34;root-open.png&#34; :fallback &#34;&#34; :extensions (root-open)) (treemacs-create-icon :file &#34;root-closed.png&#34; :fallback &#34;&#34; :extensions (root-closed)) (treemacs-create-icon :file &#34;emacs.png&#34; :fallback &#34;🗏 &#34; :extensions (&#34;el&#34; &#34;elc&#34;)) (treemacs-create-icon :file &#34;readme.png&#34; :fallback &#34;🗏 &#34; :extensions (&#34;readme.md&#34;)) (treemacs-create-icon :icon (all-the-icons-icon-for-file &#34;yaml&#34;) :extensions (&#34;yml&#34; &#34;yaml&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;:file&lt;/del&gt; argument is relative to the icon directory of the theme being created. When not using image icons the &lt;del&gt;:icon-directory&lt;/del&gt; argument can be omitted and the &lt;del&gt;:file&lt;/del&gt; argument can be switched for &lt;del&gt;:icon&lt;/del&gt; to supply the icon string directly. The TUI fallback is also optional, &#34; &#34; is used by default. Finally the list of extensions determines which file extensions the icon should be used for.&lt;/p&gt; &#xA;&lt;p&gt;For treemacs an extension is either the entire file name or the text after the last period (unless &lt;del&gt;treemacs-file-extension-regex&lt;/del&gt; is customized). This means it can match normal file names like &#34;init.el&#34;, extensionless file names like &#34;Makefile&#34;. Because the full name is checked first it is possible to give special files their own icon, for example &#34;Readme.md&#34; can use a different icon than normal markdown files.&lt;/p&gt; &#xA;&lt;p&gt;Instead of a string extension a symbol can also be used. In this case treemacs will also create a variable for that icon named &lt;del&gt;treemacs-icon-$symbol&lt;/del&gt;. Treemacs uses several such icon variables and any new theme should define their own versions (it it&#39;s not extending the default theme). The following icons are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;root-open&lt;/li&gt; &#xA; &lt;li&gt;root-closed&lt;/li&gt; &#xA; &lt;li&gt;dir-closed&lt;/li&gt; &#xA; &lt;li&gt;dir-open&lt;/li&gt; &#xA; &lt;li&gt;fallback&lt;/li&gt; &#xA; &lt;li&gt;tag-open&lt;/li&gt; &#xA; &lt;li&gt;tag-closed&lt;/li&gt; &#xA; &lt;li&gt;tag-leaf&lt;/li&gt; &#xA; &lt;li&gt;error&lt;/li&gt; &#xA; &lt;li&gt;info&lt;/li&gt; &#xA; &lt;li&gt;warning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Analogous to creating a new theme &lt;del&gt;treemacs-modify-theme&lt;/del&gt; can be used to change, or add to, an existing theme:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-modify-theme &#34;Default&#34; :icon-directory &#34;/other/icons/dir&#34; :config (progn (treemacs-create-icon :icon &#34;+&#34; :extensions (dir-closed)) (treemacs-create-icon :icon &#34;-&#34; :extensions (dir-open)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Finally keep in mind that treemacs&#39; icons are all buffer-local values, and will most likely not be defined when trying to access their values directly. When you need to programmatically access some of treemacs&#39; icons you should use &lt;del&gt;treemacs-get-icon-value&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-get-icon-value &#39;root-closed nil &#34;Default&#34;) (treemacs-get-icon-value &#34;org&#34; t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Custom Icons&lt;/p&gt; &#xA;&lt;p&gt;Treemacs also offers a quick and straighforward way to add a (gui) icon to the currently active theme, without caring for its name or declaring icon directories:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defvar treemacs-custom-html-icon (all-the-icons-icon-for-file &#34;name.html&#34;)) (treemacs-define-custom-icon treemacs-custom-html-icon &#34;html&#34; &#34;htm&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Important&lt;/em&gt;: There is a restriction that all icons must must be exactly 2 characters long. That&#39;s including the space that will separate an icon from the filename.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create an icon based on an image you can use &lt;del&gt;treemacs-define-custom-image-icon&lt;/del&gt; instead:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-define-custom-image-icon &#34;/path/to/icon.png&#34; &#34;htm&#34; &#34;html&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;**** Icons according to &lt;del&gt;auto-mode-alist&lt;/del&gt; For some file extensions, like &#34;.cc&#34; or &#34;.hh&#34;, it is not immediately obvious which major mode will open these files, and thus which icon they should be assigned. Treemacs offers the option that automate this decision based on &lt;del&gt;auto-mode-alist&lt;/del&gt;. You can use the function &lt;del&gt;treemacs-map-icons-with-auto-mode-alist&lt;/del&gt; to change the assigned icons for a list of file extensions based on the major mode the icons are mapped to in &lt;del&gt;auto-mode-alist&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;treemacs-map-icons-with-auto-mode-alist&lt;/del&gt; takes 2 arguments: first a list of file extensions, then an alist that decides which icon should be used for which mapped major mode. For example the code to decide the icons for &#34;.hh&#34; and &#34;.cc&#34; files with &lt;del&gt;auto-mode-alist&lt;/del&gt; would look like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-map-icons-with-auto-mode-alist &#39;(&#34;.cc&#34; &#34;.hh&#34;) `((c-mode . ,(treemacs-get-icon-value &#34;c&#34;)) (c++-mode . ,(treemacs-get-icon-value &#34;cpp&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;**** GUI vs TUI It is possible to force treemacs to use the simple TUI icons in GUI mode by setting &lt;del&gt;treemacs-no-png-images&lt;/del&gt; to t.&lt;/p&gt; &#xA;&lt;p&gt;**** Resizing Icons If your emacs has been compiled with Imagemagick support, or you&#39;re using Emacs &amp;gt;= 27.1, you can arbitrarily change the size of treemacs&#39; icons by (interactively or programmatically) calling &lt;del&gt;treemacs-resize-icons&lt;/del&gt;. *** all-the-icons indent issues Depending on your font you may experience the problem of treemacs&#39; icons seemingly jumping around left and right when they are expanded and collapsed when using the all-the-icons theme. The straighforward solution is to use a different font. You may also try a workaround of using a different font that applies onyl to the TAB characters used to align treemacs&#39; all-the-icons-based icons. To do that do not load &lt;del&gt;treemacs-all-the-icons&lt;/del&gt; with &lt;del&gt;require&lt;/del&gt;. Instead use the following alternative provided by treemacs itself:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (treemacs-load-all-the-icons-with-workaround-font &#34;Hermit&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The Hermit font used here is just an example - you will need to pick a font that is available on your system and does not suffer from the tab width issue.&lt;/p&gt; &#xA;&lt;p&gt;This line will load &lt;del&gt;treemacs-all-the-icons&lt;/del&gt; (&lt;em&gt;it must not have been loaded previously&lt;/em&gt;) and enable the all-the-icons theme. The given font argument will be used as the font for the alignment tabs used for the icons, hopefully alleviating the indentation problem. In addition &lt;del&gt;treemacs-indentation&lt;/del&gt; and &lt;del&gt;treemacs-indentation-string&lt;/del&gt; will be set to 1 and a (font-changed) TAB character respectively, so customizing them is (probably) not possible.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keymap ** Unbound functions These functions are not bound to any keys by default. It&#39;s left up to users to find the most convenient key binds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| Action | Description | |----------------------------------------------+----------------------------------------------------------------------------| | treemacs | Show/Hide/Initialize treemacs. | | treemacs-bookmark | Find a bookmark in treemacs. | | treemacs-find-file | Find and focus the current file in treemacs. | | treemacs-find-tag | Find and focus the current tag in treemacs. | | treemacs-select-window | Select the treemacs window if it is visible. Call &lt;del&gt;treemacs&lt;/del&gt; if it is not. | | treemacs-select-directory | Select a single directory | | treemacs-delete-other-windows | Same as &lt;del&gt;delete-other-windows&lt;/del&gt;, but will not delete the treemacs window. | | treemacs-show-changelog | Opens a buffer showing the changelog. | | treemacs-load-theme | Load a different icon theme. | | treemacs-icon-catalogue | Showcases all themes and their icons. | | treemacs-narrow-to-current-file | Close everything except the view on the current file. | |----------------------------------------------+----------------------------------------------------------------------------| | treemacs-projectile | Add a project from projectile to treemacs. | | treemacs-add-and-display-current-project | Add current project to treemacs and open it. | | treemacs-display-current-project-exclusively | Add current project to treemacs and open it, deleting all others. | | treemacs-select-scope-type | Select the scope of treemacs buffers in which they are unique |&lt;/p&gt; &#xA;&lt;p&gt;** Default keymaps&lt;/p&gt; &#xA;&lt;p&gt;Treemacs&#39; keybindings are distributed to several keymaps, based on common keybindings:&lt;/p&gt; &#xA;&lt;p&gt;*** Project Keybinds (Prefix &lt;del&gt;C-c C-p&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-------------------+----------------------------------------+--------------------------------------------------------| | C-c C-p a | treemacs-add-project-to-workspace | Select a new project to add to the treemacs workspace. | | C-c C-p p | treemacs-projectile | Select a projectile project to add to the workspace. | | C-c C-p d | treemacs-remove-project-from-workspace | Remove project at point from the workspace. | | C-c C-p r | treemacs-rename-project | Rename project at point. | | C-c C-p c c | treemacs-collapse-project | Collapse project at point. | | C-c C-p c o/S-TAB | treemacs-collapse-all-projects | Collapse all projects. | | C-c C-p c o | treemacs-collapse-all-projects | Collapse all projects except the project at point. |&lt;/p&gt; &#xA;&lt;p&gt;*** Workspaces Keybinds (Prefix &lt;del&gt;C-c C-w&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-----------+---------------------------------+----------------------------------------| | C-c C-w r | treemacs-rename-workspace | Rename a workspace. | | C-c C-w a | treemacs-create-workspace | Create a new workspace. | | C-c C-w d | treemacs-remove-workspace | Delete a workspace. | | C-c C-w s | treemacs-switch-workspace | Switch the current workspace. | | C-c C-w e | treemacs-edit-workspaces | Edit workspace layout via org-mode. | | C-c C-w n | treemacs-next-workspace | Switch to the next workspace. | | C-c C-w f | treemacs-set-fallback-workspace | Select the default fallback workspace. |&lt;/p&gt; &#xA;&lt;p&gt;*** Node Visit Keybinds (Prefix &lt;del&gt;o&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |--------+--------------------------------------------------+----------------------------------------------------------------------------------------------------------------| | ov | treemacs-visit-node-vertical-split | Open current file or tag by vertically splitting &lt;del&gt;next-window&lt;/del&gt;. | | oh | treemacs-visit-node-horizontal-split | Open current file or tag by horizontally splitting &lt;del&gt;next-window&lt;/del&gt;. | | oo/RET | treemacs-visit-node-no-split | Open current file or tag, performing no split and using &lt;del&gt;next-window&lt;/del&gt; directly. | | oc | treemacs-visit-node-close-treemacs | Open current file or tag, performing no split and using &lt;del&gt;next-window&lt;/del&gt; directly, and close treemacs. | | oaa | treemacs-visit-node-ace | Open current file or tag, using ace-window to decide which window to open the file in. | | oah | treemacs-visit-node-ace-horizontal-split | Open current file or tag by horizontally splitting a window selected by ace-window. | | oav | treemacs-visit-node-ace-vertical-split | Open current file or tag by vertically splitting a window selected by ace-window. | | or | treemacs-visit-node-in-most-recently-used-window | Open current file or tag in the most recently used window. | | ox | treemacs-visit-node-in-external-application | Open current file according to its mime type in an external application. Linux, Windows and Mac are supported. |&lt;/p&gt; &#xA;&lt;p&gt;*** Toggle Keybinds (Prefix &lt;del&gt;t&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-----+-------------------------------------+----------------------------------------------------------------------------------------| | th | treemacs-toggle-show-dotfiles | Toggle the hiding and displaying of dotfiles. | | ti | treemacs-hide-gitignored-files-mode | Toggle the hiding and displaying of gitignored files. | | tw | treemacs-toggle-fixed-width | Toggle whether the treemacs window should have a fixed width. See also treemacs-width. | | tf | treemacs-follow-mode | Toggle &lt;del&gt;treemacs-follow-mode&lt;/del&gt;. | | ta | treemacs-filewatch-mode | Toggle &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;. | | tv | treemacs-fringe-indicator-mode | Toggle &lt;del&gt;treemacs-fringe-indicator-mode&lt;/del&gt;. |&lt;/p&gt; &#xA;&lt;p&gt;*** Copy Keybinds (Prefix &lt;del&gt;y&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-----+--------------------------------------+-------------------------------------------------------------------| | ya | treemacs-copy-absolute-path-at-point | Copy the absolute path of the node at point. | | yr | treemacs-copy-relative-path-at-point | Copy the path of the node at point relative to the project root. | | yp | treemacs-copy-project-path-at-point | Copy the absolute path of the project root for the node at point. | | yf | treemacs-copy-file | Copy the file at point. |&lt;/p&gt; &#xA;&lt;p&gt;*** General Keybinds&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |----------+---------------------------------------------+--------------------------------------------------------------------------------------------------------| | ? | treemacs-common-helpful-hydra | Summon a helpful hydra to show you treemacs&#39; most commonly used keybinds. | | C-? | treemacs-advanced-helpful-hydra | Summon a helpful hydra to show you treemacs&#39; rarely used, advanced keybinds. | | j/n | treemacs-next-line | Go to the next line. | | k/p | treemacs-previous-line | Go to the previous line. | | M-J/N | treemacs-next-line-other-window | Go to the next line in &lt;del&gt;next-window&lt;/del&gt;. | | M-K/P | treemacs-previous-line-other-window | Go to the previous line in &lt;del&gt;next-window&lt;/del&gt;.. | | &#xA; &lt;pgup&gt;&#xA;   | treemacs-next-page-other-window | Go to the next page in &#xA;  &lt;del&gt;next-window&lt;/del&gt;. | | &#xA;  &lt;pgdn&gt;&#xA;    | treemacs-previous-page-other-window | Go to the previous page in &#xA;   &lt;del&gt;next-window&lt;/del&gt;.. | | M-j/M-n | treemacs-next-neighbour | Go to the next same-level neighbour of the current node. | | M-k/M-p | treemacs-previous-neighbour | Go to the previous same-level neighbour of the current node. | | u | treemacs-goto-parent-node | Go to parent of node at point, if possible. | | &#xA;   &lt;m-up&gt;&#xA;     | treemacs-move-project-up | Switch positions of project at point and the one above it. | | &#xA;    &lt;m-down&gt;&#xA;      | treemacs-move-project-down | Switch positions of project at point and the one below it. | | w | treemacs-set-width | Set a new value for the width of the treemacs window. | | &amp;lt; | treemacs-decrement-width | Decrease the width of the treemacs window. | | &amp;gt; | treemacs-increment-width | Increase the width of the treemacs window. | | RET | treemacs-RET-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-RET-actions-config&lt;/del&gt; for the current node. | | TAB | treemacs-TAB-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-TAB-actions-config&lt;/del&gt; for the current node. | | g/r/gr | treemacs-refresh | Refresh the project at point. | | d | treemacs-delete-file | Delete node at point. | | R | treemacs-rename-file | Rename node at point. | | cf | treemacs-create-file | Create a file. | | cd | treemacs-create-dir | Create a directory. | | q | treemacs-quit | Hide the treemacs window. | | Q | treemacs-kill-buffer | Delete the treemacs buffer. | | P | treemacs-peek-mode | Peek at the files at point without fully opening them. | | ya | treemacs-copy-absolute-path-at-point | Copy the absolute path of the node at point. | | yr | treemacs-copy-relative-path-at-point | Copy the path of the node at point relative to the project root. | | yp | treemacs-copy-project-path-at-point | Copy the absolute path of the project root for the node at point. | | yf | treemacs-copy-file | Copy the file at point. | | m | treemacs-move-file | Move the file at point. | | s | treemacs-resort | Set a new value for &#xA;     &lt;del&gt;treemacs-sorting&lt;/del&gt;. | | b | treemacs-add-bookmark | Bookmark the currently selected files&#39;s, dir&#39;s or tag&#39;s location. | | h/M-h | treemacs-COLLAPSE-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-COLLAPSE-actions-config&lt;/del&gt; for the current node. | | l/M-l | treemacs-RET-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-RET-actions-config&lt;/del&gt; for the current node. | | M-H | treemacs-root-up | Move treemacs&#39; root one level upward. Only works with a single project in the workspace. | | M-L | treemacs-root-down | Move treemacs&#39; root into the directory at point. Only works with a single project in the workspace. | | H | treemacs-collapse-parent-node | Collapse the parent of the node at point. | | ! | treemacs-run-shell-command-for-current-node | Run an asynchronous shell command on the current node, replacing &#34;$path&#34; with its path. | | M-! | treemacs-run-shell-command-in-project-root | Run an asynchronous shell command in the root of the current project, replacing &#34;$path&#34; with its path. | | C | treemacs-cleanup-litter | Close all directories matching any of &#xA;     &lt;del&gt;treemacs-litter-directories&lt;/del&gt;. | | = | treemacs-fit-window-width | Adjust the width of the treemacs window to that of the longsest line. | | W | treemacs-extra-wide-toggle | Toggle between normal and extra wide display for the treemacs window. |&#xA;    &lt;/m-down&gt;&#xA;   &lt;/m-up&gt;&#xA;  &lt;/pgdn&gt;&#xA; &lt;/pgup&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatibility The correctness of treemacs&#39; display behaviour is, to a large degree, ensured through window properties and reacting to changes in the window configuration. The packages most likely to cause trouble for treemacs are therefore those that interfere with Emacs&#39; buffer spawning and window splitting behaviour. Treemacs is included in Spacemacs and I am a Spacemacs user, therefore treemacs guarantees first-class support &amp;amp; compatibility for window-managing packages used in Spacemacs, namely [[https://github.com/Bad-ptr/persp-mode.el][persp]]/[[https://github.com/nex3/perspective-el][perspective]], [[https://github.com/wasamasa/eyebrowse][eyebrowse]], [[https://github.com/m2ym/popwin-el][popwin]] and [[https://github.com/bmag/emacs-purpose][window-purpose]], as well as [[https://github.com/wasamasa/shackle][shackle]]. For everything else there may be issues and, depending on the complexity of the problem, I may decide it is not worth fixing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Aside from this there are the following known incompatibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Any package invoking &lt;del&gt;font-lock-ensure&lt;/del&gt; in the treemacs buffer. This will reset the faces of treemacs&#39; buttons (once) and is a known [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28599][emacs bug]].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A possible cause of this issue using an old version of swiper.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rainbow mode activated in treemacs will likewise produce this behaviour. Make sure not to include rainbow-mode as part of &lt;del&gt;special-mode-hook&lt;/del&gt;, since this is the mode &lt;del&gt;treemacs-mode&lt;/del&gt; is derived from.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FAQ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;I don&#39;t need multiple projects, can treemacs just always show me the current project I&#39;m in?&lt;/p&gt; &lt;p&gt;Yes, see the section about [[#navigation-without-projects-and-workspaces][Navigation without Projects and Workspace]].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I hide files I don&#39;t want to see?&lt;/p&gt; &lt;p&gt;You need to define a predicate function and add it to &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt;. This function accepts two arguments, a file&#39;s name and its absolute path, and must return non-nil when treemacs should hide that file.&lt;/p&gt; &lt;p&gt;For example the code to ignore files eiter called &#34;foo&#34; or located in &#34;/x/y/z/&#34; would look like this:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (with-eval-after-load &#39;treemacs&lt;/p&gt; &lt;pre&gt;&lt;code&gt; (defun treemacs-ignore-example (filename absolute-path)&#xA;   (or (string-equal filename &#34;foo&#34;)&#xA;       (string-prefix-p &#34;/x/y/z/&#34; absolute-path)))&#xA;&#xA; (add-to-list &#39;treemacs-ignored-file-predicates #&#39;treemacs-ignore-example))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I keep treemacs from showing files that are ignored by git?&lt;/p&gt; &lt;p&gt;You can use &lt;del&gt;treemacs-hide-gitignored-files-mode&lt;/del&gt; (bound to &lt;del&gt;ti&lt;/del&gt;) to switch between hiding and displaying of gitignored files. Git-mode /must/ be enabled for this feature to work.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why am I seeing no file icons and only +/- for directories?&lt;/p&gt; &lt;p&gt;Treemacs will permanently fall back on its simple TUI icons if it detects that the emacs instance it is run in cannot create images. You can test this by evaluating &lt;del&gt;(create-image &#34;&#34; &#39;png)&lt;/del&gt;. If this code returns an error like &#34;Invalid image type ´png´&#34; your emacs does not support images.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I get treemacs to stop telling me when it&#39;s been refreshed, especially with filewatch-mode?&lt;/p&gt; &lt;p&gt;See &lt;del&gt;treemacs-silent-refresh&lt;/del&gt; and &lt;del&gt;treemacs-silent-filewatch&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ENOSPC / No space left on device / no file descriptor left&lt;/p&gt; &lt;p&gt;You may run into this error when you use filewatch-mode. The solution is to increase the number of allowed user watches, as described [[https://stackoverflow.com/questions/16748737/grunt-watch-error-waiting-fatal-error-watch-enospc][here for Linux]] and [[https://wilsonmar.github.io/maximum-limits/][here for Mac]].&lt;/p&gt; &lt;p&gt;You will also want to see what&#39;s responsible for setting all those file watches in the first place, since treemacs only watches the expanded directories it is displaying and so won&#39;t produce more than a couple dozen watches at best.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why is treemacs warning me about not being able to find some background colors and falling back to something else?&lt;/p&gt; &lt;p&gt;Treemacs needs those colors to make sure that background colors of its icons correctly align with hl-line-mode. Png images&#39; backgrounds are not highlighted by hl-line-mode by default, treemacs is manually correcting this every time hl-line&#39;s overlay is moved. To make that correction work it needs to know two colors: the current theme&#39;s &lt;del&gt;default&lt;/del&gt; background, and its &lt;del&gt;hl-line&lt;/del&gt; background color. If treemacs cannot find hl-lines&#39;s background color it falls back to the default background color. If it cannot even find the default background it will fall back to #2d2d31. The warnings serve to inform you of that fallback.&lt;/p&gt; &lt;p&gt;If your theme does not define a required color you can set it yourself before treemacs loads like this:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (set-face-attribute &#39;hl-line nil :background &#34;#333333&#34;) #+END_SRC&lt;/p&gt; &lt;p&gt;If you just want to disable the warnings you can do so by defining the variable &lt;del&gt;treemacs-no-load-time-warnings&lt;/del&gt;. Its exact value is irrelevant, all that matters is that it exists at all. Since the warnings are issues when treemacs is first being loaded the variable must be defined &lt;em&gt;before&lt;/em&gt; treemacs is initialized. This is best achieved by adding the line &lt;del&gt;(defvar treemacs-no-load-time-warnings t)&lt;/del&gt; to treemacs&#39; use-package &lt;del&gt;:init&lt;/del&gt; block.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can I expand &lt;em&gt;everything&lt;/em&gt; under a node?&lt;/p&gt; &lt;p&gt;Yes, you just need to expand it with a [[https://www.emacswiki.org/emacs/PrefixArgument][prefix argument]]. Closing nodes with a prefix argument works as well. In this case treemacs will forget about the nodes opened below the one that was closed and not reopen them automatically.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Broken display of CJK characters&lt;/p&gt; &lt;p&gt;If you are seeing raw bytes like &lt;del&gt;\316&lt;/del&gt; instead of proper CJK characters like [[https://github.com/Alexander-Miller/treemacs/issues/863][in this issue]] you have to set the proper language environment, e.g.:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (set-language-environment &#39;Chinese-GB18030) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributing Contributions are very much welcome, but should fit the general scope and style of treemacs. The following is a list of guidelines that should be met (exceptions confirm the rule):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There should be one commit per feature.&lt;/li&gt; &#xA; &lt;li&gt;Commit messages should start with a note in brackets that roughly describes the area the commit relates to, for example &lt;del&gt;[Icons]&lt;/del&gt; if you add an icon.&lt;/li&gt; &#xA; &lt;li&gt;Code must be in the right place (what with the codebase being split in many small files). If there is no right place it probably goes into treemacs-core-utils.el which is where all the general implementation details go.&lt;/li&gt; &#xA; &lt;li&gt;New features must be documented in the readme (for example mentioning new config options in the [[#variables][Config Table]]).&lt;/li&gt; &#xA; &lt;li&gt;There must not be any compiler warnings.&lt;/li&gt; &#xA; &lt;li&gt;The test suite must pass.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Treemacs uses cask to setup a local testing environment and a Makefile that simplifies compiling and testing the codebase. First run &lt;del&gt;cask install&lt;/del&gt; to locally pull treemacs&#39; dependencies. Then you can use the following Makefile targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make prepare :: Downloads and updates Cask&#39;s dependencies. Is a dependency of the &lt;del&gt;test&lt;/del&gt; and &lt;del&gt;compile&lt;/del&gt; targets.&lt;/li&gt; &#xA; &lt;li&gt;make compile :: Compiles the code base (and treats compiler warnings as errors).&lt;/li&gt; &#xA; &lt;li&gt;make clean :: Removes the generated .elc files.&lt;/li&gt; &#xA; &lt;li&gt;make lint :: Runs first &lt;del&gt;compile&lt;/del&gt; then &lt;del&gt;clean&lt;/del&gt;, even if the former fails.&lt;/li&gt; &#xA; &lt;li&gt;make test :: Runs the testsuite, once in a graphical environment and once in the terminal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally if you want to just add an icon you can take [[https://github.com/Alexander-Miller/treemacs/commit/94df3e36af865dab2c76b549b1a61f418e3bf5be][this commit]] as an example (though the icons have since been moved into their own module in &lt;del&gt;treemacs-icons.el&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Working With The Code Base&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to delve into the treemacs&#39; code base, check out [[https://github.com/Alexander-Miller/treemacs/wiki][the wiki]] for some general pointers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;emacs &amp;gt;= 26.1 (&amp;gt;= 27.1 for tab-bar)&lt;/li&gt; &#xA; &lt;li&gt;s&lt;/li&gt; &#xA; &lt;li&gt;dash&lt;/li&gt; &#xA; &lt;li&gt;cl-lib&lt;/li&gt; &#xA; &lt;li&gt;ace-window&lt;/li&gt; &#xA; &lt;li&gt;pfuture&lt;/li&gt; &#xA; &lt;li&gt;ht&lt;/li&gt; &#xA; &lt;li&gt;cfrs&lt;/li&gt; &#xA; &lt;li&gt;hydra&lt;/li&gt; &#xA; &lt;li&gt;(optionally) evil&lt;/li&gt; &#xA; &lt;li&gt;(optionally) projectile&lt;/li&gt; &#xA; &lt;li&gt;(optionally) winum&lt;/li&gt; &#xA; &lt;li&gt;(optionally) magit&lt;/li&gt; &#xA; &lt;li&gt;(optionally) perspective/persp&lt;/li&gt; &#xA; &lt;li&gt;(optionally) all-the-icons&lt;/li&gt; &#xA; &lt;li&gt;(optionally) python(3)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>radian-software/straight.el</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/radian-software/straight.el</id>
    <link href="https://github.com/radian-software/straight.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍀 Next-generation, purely functional package manager for the Emacs hacker.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;straight.el&lt;/strong&gt;: next-generation, purely functional package manager for the &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt; hacker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please check out the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#faq&#34;&gt;FAQ&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#news&#34;&gt;news&lt;/a&gt; :)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/raxod502/straight.el&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/raxod502/straight.el/tree/develop.svg?style=svg&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/raxod502/straight.el&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/raxod502/straight.el.svg?sanitize=true&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- longlines-start --&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#guiding-principles&#34;&gt;Guiding principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#install-packages&#34;&gt;Install packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#but-what-about-my-fork-of-obscure-el-package&#34;&gt;But what about my fork of (obscure .el package)?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package&#34;&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#edit-packages-locally&#34;&gt;Edit packages locally&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#automatic-repository-management&#34;&gt;Automatic repository management&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#configuration-reproducibility&#34;&gt;Configuration reproducibility&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#conceptual-overview&#34;&gt;Conceptual overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#tldr&#34;&gt;TL;DR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-is-a-package&#34;&gt;What is a package?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-packages-come-from&#34;&gt;Where do packages come from?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-does-this-look-like-on-disk&#34;&gt;What does this look like on disk?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-repositories-come-from&#34;&gt;Where do repositories come from?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-does-it-mean-to-load-a-package&#34;&gt;What does it mean to load a package?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-recipes-come-from&#34;&gt;Where do recipes come from?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-happens-when-i-call-straight-use-package&#34;&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-does-it-mean-to-register-a-package&#34;&gt;What does it mean to register a package?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-does-straightel-know-when-to-rebuild-packages&#34;&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-does-straightel-know-what-packages-are-installed&#34;&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-other-package-managers&#34;&gt;Comparison to other package managers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#tldr-1&#34;&gt;TL;DR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-packageel&#34;&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-packageel&#34;&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#additional-notes&#34;&gt;Additional notes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-quelpa&#34;&gt;Comparison to Quelpa&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-1&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-quelpa&#34;&gt;Advantages of Quelpa&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#additional-notes-1&#34;&gt;Additional notes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-cask&#34;&gt;Comparison to Cask&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-2&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-cask&#34;&gt;Advantages of Cask&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-el-get&#34;&gt;Comparison to el-get&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-3&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-el-get&#34;&gt;Advantages of el-get&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-borg&#34;&gt;Comparison to Borg&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-4&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-borg&#34;&gt;Advantages of Borg&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comparison-to-the-manual-approach&#34;&gt;Comparison to the manual approach&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel-5&#34;&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-the-manual-approach&#34;&gt;Advantages of the manual approach&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#user-manual&#34;&gt;User manual&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#bootstrapping-straightel&#34;&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&#34;&gt;Installing packages programmatically&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-with-a-custom-recipe&#34;&gt;Installing with a custom recipe&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#additional-arguments-to-straight-use-package&#34;&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#variants-of-straight-use-package&#34;&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-when-packages-are-built&#34;&gt;Customizing when packages are built&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#custom-or-manual-modification-detection&#34;&gt;Custom or manual modification detection&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#summary-of-options-for-package-modification-detection&#34;&gt;Summary of options for package modification detection&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#find-at-startup&#34;&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#check-on-save&#34;&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#watch-files&#34;&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-how-packages-are-built&#34;&gt;Customizing how packages are built&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#autoload-generation&#34;&gt;Autoload generation&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#byte-compilation&#34;&gt;Byte compilation&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#native-compilation&#34;&gt;Native compilation&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#symbolic-links&#34;&gt;Symbolic links&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-how-packages-are-made-available&#34;&gt;Customizing how packages are made available&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#hooks-run-by-straight-use-package&#34;&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;The recipe format&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;Version-control backends&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&#34;&gt;Git backend&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#deprecated-upstream-keyword&#34;&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&#34;&gt;Recipe lookup&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#updating-recipe-repositories&#34;&gt;Updating recipe repositories&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-recipe-repositories&#34;&gt;Customizing recipe repositories&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#gnu-elpa&#34;&gt;GNU ELPA&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#emacsmirror&#34;&gt;Emacsmirror&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#defining-new-recipe-repositories&#34;&gt;Defining new recipe repositories&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-recipes&#34;&gt;Overriding recipes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-the-recipe-for-straightel&#34;&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&#34;&gt;Interactive usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;Version control operations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&#34;&gt;Lockfile management&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-profile-system&#34;&gt;The profile system&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#packages-and-the-init-file&#34;&gt;Packages and the init-file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#using-straightel-to-reproduce-bugs&#34;&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#-in-other-packages&#34;&gt;... in other packages&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#-in-straightel-itself&#34;&gt;... in &lt;code&gt;straight.el&lt;/code&gt; itself&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#using-straightel-to-develop-packages&#34;&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-other-packages&#34;&gt;Integration with other packages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package-1&#34;&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-packageel&#34;&gt;&#34;Integration&#34; with &lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-flycheck&#34;&gt;Integration with Flycheck&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-hydra&#34;&gt;Integration with Hydra&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;Developer manual&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#low-level-functions&#34;&gt;Low-level functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#trivia&#34;&gt;Trivia&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comments-and-docstrings&#34;&gt;Comments and docstrings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#my-init-time-got-slower&#34;&gt;My init time got slower&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#could-not-find-package-in-recipe-repositories&#34;&gt;&#34;Could not find package in recipe repositories&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-do-i-update-melpa-et-al&#34;&gt;How do I update MELPA et al.?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#my-use-package-form-isnt-working-properly&#34;&gt;My &lt;code&gt;use-package&lt;/code&gt; form isn&#39;t working properly&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-do-i-uninstall-a-package&#34;&gt;How do I uninstall a package?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-wrong-version-of-my-package-was-loaded&#34;&gt;The wrong version of my package was loaded&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#i-get-could-not-read-usernamepassword-errors&#34;&gt;I get &#34;could not read username/password&#34; errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-do-i-pin-package-versions-or-use-only-tagged-releases&#34;&gt;How do I pin package versions or use only tagged releases?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#how-can-i-use-the-built-in-version-of-a-package&#34;&gt;How can I use the built-in version of a package?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#news&#34;&gt;News&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#jan-1-2021&#34;&gt;Jan 1, 2021&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#april-19-2020&#34;&gt;April 19, 2020&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;!-- longlines-stop --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Emacs packages listed on &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt;, or &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt;, or provide your own recipes.&lt;/li&gt; &#xA; &lt;li&gt;Packages are cloned as Git (or other) repositories, not as opaque tarballs.&lt;/li&gt; &#xA; &lt;li&gt;Make changes to a package simply by editing its source code, no additional steps required. Contribute upstream just by pushing your changes.&lt;/li&gt; &#xA; &lt;li&gt;Powerful interactive workflows (with popups à la Magit) for performing bulk maintenance on the Git repositories for your packages.&lt;/li&gt; &#xA; &lt;li&gt;Save and load version lockfiles that ensure 100% reproducibility for your Emacs configuration. Package state is defined entirely by your init-file and (optional) lockfile, with no extra persistent data floating around.&lt;/li&gt; &#xA; &lt;li&gt;Specify package descriptions using a powerful format based on &lt;a href=&#34;https://github.com/melpa/melpa#recipe-format&#34;&gt;MELPA recipes&lt;/a&gt; (with a familiar but improved syntax).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; integration.&lt;/li&gt; &#xA; &lt;li&gt;Modular: you can install your packages manually and straight.el will load them for you. Or you can also have straight.el install your packages, while you provide the recipes explicitly. Or straight.el can also fetch recipes, if you want. Bulk repository management and package updates are also optional.&lt;/li&gt; &#xA; &lt;li&gt;Extensible APIs to add new recipe sources and version-control backends.&lt;/li&gt; &#xA; &lt;li&gt;The cleanest source code you&#39;ve ever seen. &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#comments-and-docstrings&#34;&gt;45%&lt;/a&gt; of &lt;code&gt;straight.el&lt;/code&gt; is comments and docstrings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;straight.el&lt;/code&gt; is a replacement for &lt;code&gt;package.el&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;use-package&lt;/code&gt;. &lt;code&gt;use-package&lt;/code&gt; can be used with either &lt;code&gt;package.el&lt;/code&gt; or &lt;code&gt;straight.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Guiding principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Init-file and version lockfiles as the sole source of truth. No persistent state kept elsewhere.&lt;/li&gt; &#xA; &lt;li&gt;100% reproducible package management, accounting for changes in packages, recipe repositories, configuration, and the package manager itself.&lt;/li&gt; &#xA; &lt;li&gt;No support whatsoever for &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Edit packages by editing their code, no extra steps required. Allow for manual version control operations.&lt;/li&gt; &#xA; &lt;li&gt;Compatibility with MELPA, GNU ELPA, and Emacsmirror.&lt;/li&gt; &#xA; &lt;li&gt;Trivial to quickly try out a package without permanently installing it.&lt;/li&gt; &#xA; &lt;li&gt;Good for reproducing an issue with &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note: &lt;code&gt;straight.el&lt;/code&gt; supports a minimum version of Emacs 25.1, and works on macOS, Windows, and most flavors of Linux. You must install &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; in order to use &lt;code&gt;straight.el&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;First, place the following bootstrap code in your init-file:&lt;/p&gt; &#xA;&lt;!-- longlines-start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defvar bootstrap-version)&#xA;(let ((bootstrap-file&#xA;       (expand-file-name &#34;straight/repos/straight.el/bootstrap.el&#34; user-emacs-directory))&#xA;      (bootstrap-version 5))&#xA;  (unless (file-exists-p bootstrap-file)&#xA;    (with-current-buffer&#xA;        (url-retrieve-synchronously&#xA;         &#34;https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el&#34;&#xA;         &#39;silent &#39;inhibit-cookies)&#xA;      (goto-char (point-max))&#xA;      (eval-print-last-sexp)))&#xA;  (load bootstrap-file nil &#39;nomessage))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- longlines-stop --&gt; &#xA;&lt;p&gt;Here are some variables you may be interested in (some of them must be set &lt;strong&gt;before&lt;/strong&gt; the bootstrap code runs, if they might affect how &lt;code&gt;straight.el&lt;/code&gt; itself is loaded):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-the-recipe-for-straightel&#34;&gt;&lt;code&gt;straight-repository-branch&lt;/code&gt;&lt;/a&gt; -- to get the latest version of &lt;code&gt;straight.el&lt;/code&gt; from the &lt;code&gt;develop&lt;/code&gt; branch, rather than the default &lt;code&gt;master&lt;/code&gt; which is updated less frequently but which is ostensibly more stable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-when-packages-are-built&#34;&gt;&lt;code&gt;straight-check-for-modifications&lt;/code&gt;&lt;/a&gt; -- to configure an alternate way for &lt;code&gt;straight.el&lt;/code&gt; to check for modifications made to package source code, rather than the default (which is 100% reliable, but has a minor cost to startup time).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package-1&#34;&gt;&lt;code&gt;straight-use-package-by-default&lt;/code&gt;&lt;/a&gt; -- if you use &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, then this makes each &lt;code&gt;use-package&lt;/code&gt; form also invoke &lt;code&gt;straight.el&lt;/code&gt; to install the package, unless otherwise specified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&#34;&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;&lt;/a&gt; -- by default, &lt;code&gt;straight.el&lt;/code&gt; clones over HTTPS. If you need packages from private Git repositories in your configuration, then you might want to use SSH instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-base-dir&lt;/code&gt; -- by default, straight&#39;s main directory, containing it&#39;s build files and package repos, is located in &lt;code&gt;user-emacs-directory&lt;/code&gt;. You can change the location of straight&#39;s base directory via this variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-build-dir&lt;/code&gt; -- by default, the directory in which packages are built is located at &lt;code&gt;straight-base-dir&lt;/code&gt;/build. Changing this variable will change the name of that directory and the name of the build cache file (unless &lt;code&gt;straight-build-cache-fixed-name&lt;/code&gt; is non-nil).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You should remove any code that relates to &lt;code&gt;package.el&lt;/code&gt;; for example, references to &lt;code&gt;package-initialize&lt;/code&gt;, &lt;code&gt;package-archives&lt;/code&gt;, and (if you&#39;re using &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;) &lt;code&gt;:ensure&lt;/code&gt; or &lt;code&gt;use-package-always-ensure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users of Emacs versions &amp;gt;= 27 will want to add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq package-enable-at-startup nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to their &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html&#34;&gt;early init-file&lt;/a&gt; to prevent package.el loading packages prior to their init-file loading.&lt;/p&gt; &#xA;&lt;p&gt;While it is technically possible to use both &lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; at the same time, there is no real reason to, and it might result in oddities like packages getting loaded more than once.&lt;/p&gt; &#xA;&lt;h4&gt;Debugging&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sometimes, in a corporate environment, &lt;code&gt;url-retrieve-synchronously&lt;/code&gt; may not work and &lt;code&gt;straight.el&lt;/code&gt; will be unable to download the installation script mentioned in the bootstrap snippet. In this case, you may simply clone this repository into &lt;code&gt;~/.emacs.d/straight/repos/straight.el&lt;/code&gt; and check out your desired revision/branch. The installation script is just a more convenient way of doing that automatically when necessary (and looking up the correct revision of &lt;code&gt;straight.el&lt;/code&gt; in your lockfile, if any).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On macOS, you may receive an error:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Could not create connection to raw.githubusercontent.com:443&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is likely because you are using an ancient version of Emacs which has a broken TLS configuration. Upgrade with &lt;code&gt;brew upgrade emacs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install packages&lt;/h3&gt; &#xA;&lt;p&gt;Out of the box, you can install any package listed on &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt;, or &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt;, which is to say any package in existence. (Although MELPA is used as a package listing, packages are installed by cloning their Git repositories rather than by downloading tarballs like &lt;code&gt;package.el&lt;/code&gt; does.) To install a package temporarily (until you restart Emacs), run &lt;code&gt;M-x straight-use-package&lt;/code&gt; and select the package you want. To install a package permanently, place a call to &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;el-patch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that installing a package will activate all of its autoloads, but it will not actually &lt;code&gt;require&lt;/code&gt; the features provided by the package. This means that you might need to use &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;autoload&lt;/code&gt; for some antiquated packages that do not properly declare their autoloads.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&#34;&gt;the package lifecycle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;But what about my fork of (obscure .el package)?&lt;/h3&gt; &#xA;&lt;p&gt;Instead of passing just a package name to &lt;code&gt;straight-use-package&lt;/code&gt;, you can pass a list (&#34;recipe&#34;). You can see the default recipe for any given package by running &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;. For example, the recipe for &lt;code&gt;el-patch&lt;/code&gt; is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, if you have forked &lt;code&gt;el-patch&lt;/code&gt; and you want to use your fork instead of the upstream, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :type git :host github :repo &#34;your-name/el-patch&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In fact, &lt;code&gt;straight.el&lt;/code&gt; has explicit support for using a forked package, since this is so common:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;&#xA;            :fork (:host github&#xA;                   :repo &#34;your-name/el-patch&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above, &lt;code&gt;:type git&lt;/code&gt; may be omitted if you leave &lt;code&gt;straight-default-vc&lt;/code&gt; at its default value of &lt;code&gt;git&lt;/code&gt;. Parts of the &lt;code&gt;:fork&lt;/code&gt; keyword may be omitted as well. One common case is when your fork is on the same host and has the same name as the upstream repository. In this case, assuming &lt;code&gt;straight-host-usernames&lt;/code&gt; is set, specifying a fork is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;&#xA;            :fork t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;straight.el&lt;/code&gt; doesn&#39;t do any Git operations during startup unless it needs to clone a package from scratch. This is for performance. You can explicitly request for &lt;code&gt;straight.el&lt;/code&gt; to fix up the Git configuration after you change a package recipe, e.g. to add a fork. See &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#automatic-repository-management&#34;&gt;Automatic repository management&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;the recipe format&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&#34;&gt;the Git backend&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; is a macro that provides convenient syntactic sugar for many common tasks related to installing and configuring Emacs packages. Of course, it does not actually install the packages, but instead defers to a package manager, like &lt;code&gt;straight.el&lt;/code&gt; (which comes with &lt;code&gt;use-package&lt;/code&gt; integration by default).&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;code&gt;use-package&lt;/code&gt;, first install it with &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;use-package)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now &lt;code&gt;use-package&lt;/code&gt; will use &lt;code&gt;straight.el&lt;/code&gt; to automatically install missing packages if you provide &lt;code&gt;:straight t&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can still provide a custom recipe for the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight (el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;&#xA;                      :fork (:host github&#xA;                             :repo &#34;your-name/el-patch&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:straight&lt;/code&gt; keyword accepts backquoted forms. This makes it possible to dynamically compute part of the recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight `(el-patch :type git&#xA;                       :repo ,(alist-get &#39;el-patch my-package-urls)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specifying &lt;code&gt;:straight t&lt;/code&gt; is unnecessary if you set &lt;code&gt;straight-use-package-by-default&lt;/code&gt; to a non-nil value. (Note that the variable &lt;code&gt;use-package-always-ensure&lt;/code&gt; is associated with &lt;code&gt;package.el&lt;/code&gt;, and you should not use it with &lt;code&gt;straight.el&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#integration-with-use-package-1&#34;&gt;&lt;code&gt;straight.el&lt;/code&gt;&#39;s &lt;code&gt;use-package&lt;/code&gt; integration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Edit packages locally&lt;/h3&gt; &#xA;&lt;p&gt;One of the biggest strengths of &lt;code&gt;straight.el&lt;/code&gt; is that editing packages locally is trivial. You literally just edit the files (&lt;code&gt;find-function&lt;/code&gt; and friends all work as you would expect). Packages will be automatically rebuilt if necessary when Emacs next starts up.&lt;/p&gt; &#xA;&lt;p&gt;You can even commit your changes and push or pull to various remotes using Git. You have complete control over your packages&#39; Git repositories.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&#34;&gt;the package lifecycle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic repository management&lt;/h3&gt; &#xA;&lt;p&gt;While being able to make arbitrary changes to your packages is very powerful, it can also get tiring to keep track of the all those changes. For this reason, &lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful interactive workflows to perform bulk operations on your packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To restore each package to its canonical state (a clean working directory with the main branch checked out, and the remotes set correctly), run &lt;code&gt;M-x straight-normalize-package&lt;/code&gt; or &lt;code&gt;M-x straight-normalize-all&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To fetch from each package&#39;s configured remote, run &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-fetch-all&lt;/code&gt;; to also fetch from the upstream for forked packages, supply a prefix argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To merge changes from each package&#39;s configured remote, run &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;; to also merge from the upstream for forked packages, supply a prefix argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To push all local changes to each package&#39;s configured remote, run &lt;code&gt;M-x straight-push-package&lt;/code&gt; or &lt;code&gt;M-x straight-push-all&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these commands are highly interactive and ask you before making any changes. At any point, you can stop and perform manual operations with Magit or other tools in a recursive edit.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;bulk repository management&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration reproducibility&lt;/h3&gt; &#xA;&lt;p&gt;To save the currently checked out revisions of all of your packages, run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. The resulting file (&lt;code&gt;~/.emacs.d/straight/versions/default.el&lt;/code&gt;), together with your init-file, perfectly define your package configuration. Keep your version lockfile checked into version control; when you install your Emacs configuration on another machine, the versions of packages specified in your lockfile will automatically be checked out after the packages are installed. You can manually revert all packages to the revisions specified in the lockfile by running &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the documentation on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&#34;&gt;version lockfiles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Conceptual overview&lt;/h2&gt; &#xA;&lt;p&gt;This section describes, at a high level, how the different mechanisms in &lt;code&gt;straight.el&lt;/code&gt; play together. This illustrates how &lt;code&gt;straight.el&lt;/code&gt; manages to accomplish all of its &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#guiding-principles&#34;&gt;guiding principles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; operates by cloning Git repositories and then symlinking files into Emacs&#39; load path. The collection of symlinked files constitutes the package, which is defined by its recipe. The recipe also describes which local repository to link the files from, and how to clone that repository, if it is absent.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, the recipe you provide is registered with &lt;code&gt;straight.el&lt;/code&gt; for future reference. Then the package&#39;s repository is cloned if it is absent, the package is rebuilt if its files have changed since the last build (as determined by &lt;code&gt;find(1)&lt;/code&gt;), and its autoloads are evaluated.&lt;/p&gt; &#xA;&lt;p&gt;You can also provide only a package name, in which case the recipe will be looked up in one of several configurable recipe repositories, which are just packages themselves (albeit with the build step disabled).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines which packages are installed solely by how and when &lt;code&gt;straight-use-package&lt;/code&gt; is invoked in your init-file.&lt;/p&gt; &#xA;&lt;h3&gt;What is a package?&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;em&gt;package&lt;/em&gt; is a collection of Emacs Lisp (and possibly other) files. The most common case is just a single &lt;code&gt;.el&lt;/code&gt; file, but some packages have many &lt;code&gt;.el&lt;/code&gt; files, and some even have a directory structure.&lt;/p&gt; &#xA;&lt;p&gt;Note that a package is defined only as a collection of files. It doesn&#39;t necessarily correspond to a Git repository, or an entry on MELPA, or anything like that. Frequently there is a relationship between all of these concepts, but that relationship does not always have to be direct or one-to-one.&lt;/p&gt; &#xA;&lt;p&gt;A package also has a name, which must be unique. This is the name that is used for the folder holding the package&#39;s files. It is frequently the same as the name of a Git repository, or an entry on MELPA, but again this does not have to be the case.&lt;/p&gt; &#xA;&lt;h3&gt;Where do packages come from?&lt;/h3&gt; &#xA;&lt;p&gt;If you really wanted all of your packages to be unambiguously defined, you could just copy and paste all of their files into version control. But that would defeat the purpose of using a package manager like &lt;code&gt;straight.el&lt;/code&gt;. In &lt;code&gt;straight.el&lt;/code&gt;, packages are defined by two sources of information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;em&gt;local repository&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;a &lt;em&gt;build recipe&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The local repository is just a directory containing some files. Of course, it also has a name, which may or may not be the same as the package&#39;s name. Frequently, the local repository is also a Git repository, but this is not necessary.&lt;/p&gt; &#xA;&lt;p&gt;The build recipe is not a literal data structure. It is a concept that represents a certain subset of the package&#39;s recipe. Specifically, the &lt;code&gt;:files&lt;/code&gt;, &lt;code&gt;:local-repo&lt;/code&gt;, and &lt;code&gt;:build&lt;/code&gt; keywords.&lt;/p&gt; &#xA;&lt;p&gt;To transform this &lt;em&gt;information&lt;/em&gt; into an actual package that Emacs can load, &lt;code&gt;straight.el&lt;/code&gt; &lt;em&gt;builds&lt;/em&gt; the package. This means that some symbolic links are created in the package&#39;s directory that point back into the local repository&#39;s directory. Exactly how these symlinks are created is determined by the &lt;code&gt;:files&lt;/code&gt; directive, and which local repository the symlinks point to is determined by the &lt;code&gt;:local-repo&lt;/code&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;After the symlinks are created, the resulting files are byte-compiled, and their autoloads are generated and written into a file in the package&#39;s directory.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;:build nil&lt;/code&gt; is specified, however, this entire process is skipped. This mechanism is used for recipe repositories.&lt;/p&gt; &#xA;&lt;h3&gt;What does this look like on disk?&lt;/h3&gt; &#xA;&lt;p&gt;The local repositories are kept in &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, and the built packages are kept in &lt;code&gt;~/.emacs.d/straight/build&lt;/code&gt;. If you have initialized &lt;code&gt;straight.el&lt;/code&gt; and loaded package &lt;code&gt;el-patch&lt;/code&gt;, then your &lt;code&gt;~/.emacs.d/straight&lt;/code&gt; directory will look roughly like this (some irrelevant details have been omitted for pedagogical purposes):&lt;/p&gt; &#xA;&lt;!-- longlines-start --&gt; &#xA;&lt;pre&gt;&lt;code&gt;straight&#xA;├── build&#xA;│   ├── el-patch&#xA;│   │   ├── el-patch-autoloads.el&#xA;│   │   ├── el-patch.el -&amp;gt; ~/.emacs.d/straight/repos/el-patch/el-patch.el&#xA;│   │   └── el-patch.elc&#xA;│   └── straight&#xA;│       ├── straight-autoloads.el&#xA;│       ├── straight.el -&amp;gt; ~/.emacs.d/straight/repos/straight.el/straight.el&#xA;│       └── straight.elc&#xA;└── repos&#xA;    ├── el-patch&#xA;    │   ├── CHANGELOG.md&#xA;    │   ├── LICENSE.md&#xA;    │   ├── README.md&#xA;    │   └── el-patch.el&#xA;    └── straight.el&#xA;        ├── LICENSE.md&#xA;        ├── Makefile&#xA;        ├── README.md&#xA;        ├── bootstrap.el&#xA;        ├── install.el&#xA;        └── straight.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- longlines-stop --&gt; &#xA;&lt;p&gt;As you can see, the package names are &lt;code&gt;el-patch&lt;/code&gt; and &lt;code&gt;straight&lt;/code&gt;. While &lt;code&gt;el-patch&lt;/code&gt; is built from a local repository of the same name, &lt;code&gt;straight&lt;/code&gt; is built from a local repository by the name &lt;code&gt;straight.el&lt;/code&gt;. Also note that only &lt;code&gt;.el&lt;/code&gt; files are symlinked, since only they are relevant to Emacs.&lt;/p&gt; &#xA;&lt;h3&gt;Where do repositories come from?&lt;/h3&gt; &#xA;&lt;p&gt;Local repositories provide a way to define packages without specifying the contents of all of their files explicitly. But that&#39;s not helpful without a higher-level way to define local repositories without specifying the contents of all of &lt;em&gt;their&lt;/em&gt; files. In &lt;code&gt;straight.el&lt;/code&gt;, local repositories are defined by two sources of information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;em&gt;fetch recipe&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;the &lt;em&gt;version lockfiles&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The fetch recipe is, like the build recipe, a concept representing a certain subset of the package&#39;s overall recipe. The situation is more interesting here because &lt;code&gt;straight.el&lt;/code&gt; supports multiple version-control backends. The version-control backend specified by the fetch recipe is determined by the &lt;code&gt;:type&lt;/code&gt; directive (which defaults to &lt;code&gt;straight-default-vc&lt;/code&gt;). Each version-control backend then accepts some set of additional directives. For example, the &lt;code&gt;git&lt;/code&gt; backend accepts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:repo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:branch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:fork&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:protocol&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a local repository is not present, then its fetch recipe describes how to obtain it. This is done using the &lt;code&gt;straight-vc-clone&lt;/code&gt; function, which delegates to one of the backend implementations of the &lt;code&gt;clone&lt;/code&gt; operation, according to &lt;code&gt;:type&lt;/code&gt;. (The option &lt;code&gt;:type built-in&lt;/code&gt; is a special case that results in all version-control operations for the package being ignored.)&lt;/p&gt; &#xA;&lt;p&gt;However, even with a particular repository source specified, there is still the question of which version of the repository to use. This is where the version lockfiles come in. When a local repository is cloned, the version lockfiles are searched to see if there is a particular commit specified for that local repository&#39;s name. If so, that commit is checked out. (For the &lt;code&gt;git&lt;/code&gt; backend, commits are 40-character strings representing SHA-1 hashes, but the representation of a commit identifier could be different across different backends.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;straight-freeze-versions&lt;/code&gt; and &lt;code&gt;straight-thaw-versions&lt;/code&gt; methods also use backend-delegating methods; in this case, they are &lt;code&gt;straight-vc-get-commit&lt;/code&gt; and &lt;code&gt;straight-vc-check-out-commit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The fetch recipe and version lockfiles, together with the configuration options for &lt;code&gt;straight.el&lt;/code&gt;, precisely define the state of a local repository. Of course, you may make any changes you want to the local repository. But this information defines a &#34;canonical&#34; state that you may revert to at any time.&lt;/p&gt; &#xA;&lt;p&gt;When this information is combined with the build recipe, &lt;code&gt;straight.el&lt;/code&gt; is able to construct canonical, universal versions of your Emacs packages that will be the same everywhere and forever.&lt;/p&gt; &#xA;&lt;p&gt;Note that you do not have to provide fetch recipes or version lockfiles. You may manage your local repositories manually, if you wish, although this has obvious disadvantages in terms of repeatability and maintainability.&lt;/p&gt; &#xA;&lt;h3&gt;What does it mean to load a package?&lt;/h3&gt; &#xA;&lt;p&gt;A prerequisite to loading a package is making sure the package has been built. After that is done, loading the package means adding its directory to the load path and evaluating its autoloads file.&lt;/p&gt; &#xA;&lt;p&gt;Adding the directory to the load path means that you can use &lt;code&gt;require&lt;/code&gt; to load the package&#39;s files. Note that &lt;code&gt;straight.el&lt;/code&gt; does not do this for you, since loading packages immediately is usually not necessary and it immensely slows down Emacs startup.&lt;/p&gt; &#xA;&lt;p&gt;Evaluating the autoloads file means that calling the functions that are defined in the autoloads file will automatically &lt;code&gt;require&lt;/code&gt; the files that define those functions. All modern packages define their functions in autoloads and are designed to be loaded on-demand when those functions are called. Antiquated packages may need you to explicitly define autoloads, or to just &lt;code&gt;require&lt;/code&gt; the package right away.&lt;/p&gt; &#xA;&lt;h3&gt;Where do recipes come from?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; does not require an actual recipe. You can just give it a package name, and it will look up the recipe. This is done using &lt;em&gt;recipe repositories&lt;/em&gt;. Recipe repositories are set up as a swappable backend system, much like the version-control backend system.&lt;/p&gt; &#xA;&lt;p&gt;A recipe repository consists of four parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a fetch recipe for the local repository (this will typically include &lt;code&gt;:build nil&lt;/code&gt;, since recipe repositories usually do not need to be built)&lt;/li&gt; &#xA; &lt;li&gt;a function that, provided the local repository is already available, returns a list of all packages that have recipes in the recipe repository&lt;/li&gt; &#xA; &lt;li&gt;a function that, given a package name, returns the recipe for that package, or nil if the recipe repository does not provide a recipe for the package&lt;/li&gt; &#xA; &lt;li&gt;an entry in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; indicating that the recipe provided actually corresponds to a recipe repository (otherwise it would just be a regular package)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that recipe repositories are implemented as regular packages! This means that all the usual package management operations work on them as well. It also means that you use &lt;code&gt;straight-use-package&lt;/code&gt; to register them (although typically you will provide arguments to &lt;code&gt;straight-use-package&lt;/code&gt; so that the recipe repository is only registered, and not cloned until it is needed; see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#what-happens-when-i-call-straight-use-package&#34;&gt;the section on &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then each recipe repository in &lt;code&gt;straight-recipe-repositories&lt;/code&gt; is checked for a recipe for that package. Once one is found, it is used. Otherwise, an error is signaled (unless the package is built-in to Emacs, according to &lt;code&gt;package.el&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;straight.el&lt;/code&gt; uses its own recipe format which is similar, but not identical, to the one used by MELPA (see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;the section on the recipe format&lt;/a&gt; for information on the differences). The recipe repository backends abstract over the formatting differences in different recipe sources to translate recipes into the uniform format used by &lt;code&gt;straight.el&lt;/code&gt;. When you run &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, the translated recipe is what is returned.&lt;/p&gt; &#xA;&lt;h3&gt;What happens when I call &lt;code&gt;straight-use-package&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;There are three actions that &lt;code&gt;straight-use-package&lt;/code&gt; can take:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register a package&#39;s recipe with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone a package&#39;s local repository, if it is missing.&lt;/li&gt; &#xA; &lt;li&gt;Build a package, if it has been changed since the last time it was built, and load it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These actions must be performed in order. Depending on the arguments you pass to &lt;code&gt;straight-use-package&lt;/code&gt;, one, two, or all three may be performed.&lt;/p&gt; &#xA;&lt;p&gt;The normal case is to do all three. The fetch recipe is only required if the local repository is actually missing, but the build recipe is always required.&lt;/p&gt; &#xA;&lt;p&gt;Deferred installation can be accomplished by telling &lt;code&gt;straight-use-package&lt;/code&gt; to stop if the local repository is not already available. The deferred installation can be triggered by invoking &lt;code&gt;straight-use-package&lt;/code&gt; again, but telling it to go ahead and clone the repository (this is the default behavior). Because &lt;code&gt;straight-use-package&lt;/code&gt; already registered the package&#39;s recipe the first time, you don&#39;t have to provide it again.&lt;/p&gt; &#xA;&lt;p&gt;In some extraordinary circumstances (such as when &lt;code&gt;straight.el&lt;/code&gt; is bootstrapping its own installation), it may be desirable to clone a package&#39;s local repository if it is missing, but to stop before building and loading the package. This can also be done by &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What does it mean to register a package?&lt;/h3&gt; &#xA;&lt;p&gt;Package registration is the first action taken by &lt;code&gt;straight-use-package&lt;/code&gt;, before building and cloning. First, if only a package name was provided to &lt;code&gt;straight-use-package&lt;/code&gt;, a recipe is obtained from the configured recipe repositories. Next, the resulting recipe is recorded in various caches.&lt;/p&gt; &#xA;&lt;p&gt;This is important, since it allows for several things to happen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if you later want to perform another operation on the package using &lt;code&gt;straight.el&lt;/code&gt;, you do not need to provide the recipe again&lt;/li&gt; &#xA; &lt;li&gt;if you use a custom recipe for Package A, and Package B requires Package A as a dependency, your custom recipe is remembered and re-used when Package A is used as a dependency, to avoid conflicts.&lt;/li&gt; &#xA; &lt;li&gt;when multiple packages are built from the same local repository, and you have specified a custom fetch recipe for one of those packages, &lt;code&gt;straight.el&lt;/code&gt; can intelligently merge that fetch recipe into the automatically retrieved recipes of dependencies, in order to avoid conflicts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; knows which packages you have installed, if you want to perform interactive operations on them.&lt;/li&gt; &#xA; &lt;li&gt;if you accidentally provide two different recipes for the same package, &lt;code&gt;straight.el&lt;/code&gt; can issue a helpful warning, since this may lead to surprising behavior.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know when to rebuild packages?&lt;/h3&gt; &#xA;&lt;p&gt;When you request for &lt;code&gt;straight.el&lt;/code&gt; to load a package (using &lt;code&gt;straight-use-package&lt;/code&gt;), it first checks if the package needs to be rebuilt. This means that some of the files in its local repository have been modified since the last time the package was built. &lt;code&gt;straight.el&lt;/code&gt; uses an optimized &lt;code&gt;find(1)&lt;/code&gt; command to check for package modifications, and it uses some caching mechanisms to perform bulk &lt;code&gt;find(1)&lt;/code&gt; operations on multiple packages, to speed up these checks (although it never performs optimizations that may result in erroneous behavior).&lt;/p&gt; &#xA;&lt;p&gt;This check occurs during Emacs init, when your init-file makes calls to &lt;code&gt;straight-use-package&lt;/code&gt;. You may notice a significant delay on the first &lt;code&gt;straight-use-package&lt;/code&gt; call, because this is when &lt;code&gt;straight.el&lt;/code&gt; performs a bulk &lt;code&gt;find(1)&lt;/code&gt; call and caches the results for later usage (this speeds up init considerably). The total delay is likely to be on the order of 100ms for a double-digit number of packages.&lt;/p&gt; &#xA;&lt;p&gt;The rebuild detection system is what allows for you to make changes to packages whenever you would like, without performing any additional operations.&lt;/p&gt; &#xA;&lt;p&gt;(Packages are also rebuilt when their recipes change, of course.)&lt;/p&gt; &#xA;&lt;h3&gt;How does &lt;code&gt;straight.el&lt;/code&gt; know what packages are installed?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; does not require you to declare a central list of packages anywhere, like Cask does. Instead, it determines what packages are to be loaded implicitly, by your invocations of &lt;code&gt;straight-use-package&lt;/code&gt; during Emacs initialization. Furthermore, &lt;code&gt;straight.el&lt;/code&gt; allows you to install packages after initialization using &lt;code&gt;M-x straight-use-package&lt;/code&gt; (or even by evaluating &lt;code&gt;straight-use-package&lt;/code&gt; forms). However, &lt;code&gt;straight.el&lt;/code&gt; still provides advanced features such as bulk package management and version locking. This creates some interesting challenges which other package managers do not have to deal with.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; solves these problems using a concept called &lt;em&gt;transactions&lt;/em&gt;. The operation of the transaction system is mostly transparent to the user, at least in recent versions of &lt;code&gt;straight.el&lt;/code&gt;. Basically, it provides a way for &lt;code&gt;straight.el&lt;/code&gt; to keep track of what happens within a single user operation (e.g. evaluate a buffer of &lt;code&gt;straight-use-package&lt;/code&gt; calls, or load the init-file).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; uses the transaction system to keep track of what packages you request in your init-file. If you invoke &lt;code&gt;straight-use-package&lt;/code&gt; interactively, then this invalidates that information, since you have now requested a package that is not in your init-file. For this reason, if you have invoked &lt;code&gt;straight-use-package&lt;/code&gt; interactively, running &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt; will prompt you to first reload your init-file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: reloading your init-file must have the effect of running all of the same &lt;code&gt;straight.el&lt;/code&gt;-related functions again. For example, if you bootstrap &lt;code&gt;straight.el&lt;/code&gt; in a sub-file that you only &lt;code&gt;require&lt;/code&gt; instead of &lt;code&gt;load&lt;/code&gt;, then the reloading functionality will not work correctly and you may receive the message &lt;code&gt;Caches are still outdated; something is seriously wrong&lt;/code&gt;. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/437&#34;&gt;#437&lt;/a&gt; for discussion.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comparison to other package managers&lt;/h2&gt; &#xA;&lt;p&gt;(Disclaimer: while I try to be as objective and comprehensive as possible here, I&#39;m obviously biased. Please submit corrections if I have unfairly disparaged your favorite package manager!)&lt;/p&gt; &#xA;&lt;p&gt;There are many package managers for Emacs, ranging from simple scripts to download files from EmacsWiki to full-featured package management solutions like &lt;code&gt;straight.el&lt;/code&gt;. Here are the most feature-rich alternatives to &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html&#34;&gt;&lt;code&gt;package.el&lt;/code&gt;&lt;/a&gt;: de facto standard, bundled with Emacs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quelpa/quelpa&#34;&gt;Quelpa&lt;/a&gt;: allows you to use external sources like GitHub with &lt;code&gt;package.el&lt;/code&gt;. Essentially a local &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt;: another &lt;code&gt;package.el&lt;/code&gt; wrapper. Specify your dependencies in a &lt;code&gt;Cask&lt;/code&gt; file; can be used for project management or an Emacs configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;: ridiculously OP in terms of how many different sources you can pull packages from (&lt;code&gt;package.el&lt;/code&gt;, every known VCS, distro package managers, &lt;code&gt;go get&lt;/code&gt;(!!)).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacscollective/borg&#34;&gt;Borg&lt;/a&gt;: assimilates packages as Git submodules into &lt;code&gt;.emacs.d&lt;/code&gt;, relying on &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Screw package managers! I&#39;ll just handle it all myself!&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;p&gt;Here is a summary of the main differences in philosophy between the package managers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;package.el&lt;/code&gt; if you want package management to be as easy as possible, and do not much care for installing packages from specific sources, keeping track of their versions, or doing local development on them.&lt;/li&gt; &#xA; &lt;li&gt;Use Quelpa if you like &lt;code&gt;package.el&lt;/code&gt; but really wish you could specify the sources of your packages.&lt;/li&gt; &#xA; &lt;li&gt;Use Cask if you like &lt;code&gt;package.el&lt;/code&gt; but wish it came with some project management tools, as well.&lt;/li&gt; &#xA; &lt;li&gt;Use el-get if you want to easily install packages from as many different sources as possible.&lt;/li&gt; &#xA; &lt;li&gt;Use Borg if you like a more lightweight approach to package management that leverages existing solutions, if contributing changes to packages upstream is important to you, and if using Git submodules isn&#39;t a deal-breaker.&lt;/li&gt; &#xA; &lt;li&gt;Use the manual approach if you need to contribute changes to a package that is versioned in something other than Git.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;straight.el&lt;/code&gt; if you like reproducibility in your Emacs configuration, you regularly contribute changes to packages upstream, or you are writing an Emacs configuration to be used by others.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And here is a brief list of the main reasons you might not want to use &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is largely unusable if you do not have Git installed, although it is still possible to use the package-building features if you manage your repositories manually (you also cannot use the magic bootstrap snippet, in that case). If you don&#39;t want to install Git, you&#39;ll have to use &lt;code&gt;package.el&lt;/code&gt; or take the manual approach.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is not built in to Emacs. If you want something that will work right out of the box, you&#39;re stuck with &lt;code&gt;package.el&lt;/code&gt; or the manual approach.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; takes a minute or two to update all your packages, since it does not rely on a centralized server. If you want quick update checking, you&#39;ll have to use &lt;code&gt;package.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide any user interface for package management. For that, you&#39;ll have to use &lt;code&gt;package.el&lt;/code&gt;, el-get, Cask, or Borg (which expects you to use &lt;a href=&#34;https://github.com/emacscollective/epkg&#34;&gt;&lt;code&gt;epkg&lt;/code&gt;&lt;/a&gt; for browsing packages).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not currently support using only stable versions of packages (i.e. tagged revisions), although this is a &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;planned feature&lt;/a&gt;. If this is important to you, you probably want to go with &lt;code&gt;package.el&lt;/code&gt; (with GNU ELPA and MELPA Stable), Cask, or Quelpa.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t like having to modify your init-file to do package management, then &lt;code&gt;straight.el&lt;/code&gt; is absolutely not for you. You want &lt;code&gt;package.el&lt;/code&gt;, Quelpa, el-get, or Borg.&lt;/li&gt; &#xA; &lt;li&gt;If you really want to contribute changes to packages that are not versioned in Git, then &lt;code&gt;straight.el&lt;/code&gt; will not help you. You&#39;ll have to manage the package&#39;s repository manually. Unfortunately, there is no existing package manager that supports both non-Git version-control systems and contributing changes upstream. You&#39;ll have to go with the manual approach.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not provide project management tools. It is a package manager. If you want project management tools, check out Cask.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is quite new and moving fast. Things might break. The other package managers can generally be ranked as follows, from most active to least active: el-get, Quelpa, Borg, Cask, &lt;code&gt;package.el&lt;/code&gt; (glacial).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; downloads pre-built packages from central servers using a special (undocumented?) HTTP protocol, while &lt;code&gt;straight.el&lt;/code&gt; clones Git (or other) repositories and builds packages locally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to install a package from any branch of any Git repository. &lt;code&gt;package.el&lt;/code&gt; only allows you to install a package from a &lt;code&gt;package.el&lt;/code&gt;-compliant central server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to check out any Git revision of any package. &lt;code&gt;package.el&lt;/code&gt; only allows you to install the latest version, and there is no way to downgrade.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports Emacsmirror, while &lt;code&gt;package.el&lt;/code&gt; does not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. &lt;code&gt;package.el&lt;/code&gt; loads every package you ever installed at startup, even if some of those packages are no longer referenced by your init-file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. &lt;code&gt;package.el&lt;/code&gt; cannot provide reproducibility for the set of packages installed, the central servers they were installed from, or the versions in use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally. While it is possible to make local changes to &lt;code&gt;package.el&lt;/code&gt; packages, these changes cannot be version-controlled and they will be silently overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operations on your package&#39;s Git repositories, including contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support for specifying both an upstream and a fork for a package. Contributing changes upstream with &lt;code&gt;package.el&lt;/code&gt; is impossible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. &lt;code&gt;package.el&lt;/code&gt; is unsuitable for minimal bug reproductions, since it automatically loads all of your packages on any package operation, even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. &lt;code&gt;package.el&lt;/code&gt; displays all messages, errors, and warnings that come from byte-compilation and autoload generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; considers modifying the user&#39;s init-file extremely uncouth. &lt;code&gt;package.el&lt;/code&gt; aggressively inserts (via Customize) auto-generated code setting &lt;code&gt;package-selected-packages&lt;/code&gt; into the init-file whenever a package is installed. Furthermore, &lt;code&gt;package.el&lt;/code&gt; has a history of impolite treatment of user configuration, which I think says some things about the design: until Emacs 27.1 (when &lt;a href=&#34;https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=24acb31c04b4048b85311d794e600ecd7ce60d3b&#34;&gt;my patch to fix this issue&lt;/a&gt; was adopted after around 300 emails&#39; worth of squabbling on emacs-devel), it also inserted a call to the &lt;code&gt;package-initialize&lt;/code&gt; function into the init-file if it was not already present, with the officially recommended workaround &#34;comment it out if you don&#39;t want it, but don&#39;t get rid of it&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. &lt;code&gt;package.el&lt;/code&gt; has no such concept.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is developed openly on GitHub, using a modern &lt;a href=&#34;https://github.com/raxod502/straight.el/issues&#34;&gt;issue tracker&lt;/a&gt; and continuous integration from &lt;a href=&#34;https://circleci.com/gh/raxod502/straight.el&#34;&gt;CircleCI &lt;/a&gt;. It welcomes contributions of any type. &lt;code&gt;straight.el&lt;/code&gt; is licensed under the permissive MIT license and does not require a copyright assignment. &lt;code&gt;straight.el&lt;/code&gt; is developed actively and has explicit support for installing development versions of itself, as well as for contributing upstream changes. &lt;code&gt;package.el&lt;/code&gt; is maintained as a part of Emacs core, meaning that the contribution process is poorly documented and discouraging. Releases of &lt;code&gt;package.el&lt;/code&gt; coincide with releases of Emacs, which are infrequent and inflexible. There is no issue tracker specifically for &lt;code&gt;package.el&lt;/code&gt;, only the Emacs bug tracker and the emacs-devel mailing list. Contributing to &lt;code&gt;package.el&lt;/code&gt; requires a poorly-documented, cumbersome copyright assignment process and is done by submitting patches to an antiquated mailing list, unsupported by modern code review tooling or continuous integration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require that you have Git installed, since the central server deals with where the packages originally came from. &lt;code&gt;straight.el&lt;/code&gt; cannot be used at all without Git.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; is built in to Emacs and does not require additional configuration to get started with. &lt;code&gt;straight.el&lt;/code&gt; requires the use of a 10-line bootstrap snippet in your init-file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; can perform bulk package updates more quickly since it relies on central servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; has a user interface for package management that also displays package metadata. &lt;code&gt;straight.el&lt;/code&gt; has no user interface for package management; any UI is provided by the user&#39;s &lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; does not require you to touch your init-file to install packages, while &lt;code&gt;straight.el&lt;/code&gt; absolutely refuses to permanently install a package without an explicit reference to it in your init-file (although this may be considered an advantage, depending on your perspective).&lt;/li&gt; &#xA; &lt;li&gt;Using MELPA Stable, &lt;code&gt;package.el&lt;/code&gt; can install only stable versions of packages. By default, &lt;code&gt;package.el&lt;/code&gt; also installs only stable versions of packages from GNU ELPA. These modes of operation are unsupported by &lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;planned feature&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Additional notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; usually take approximately the same time to install packages, despite the fact that &lt;code&gt;straight.el&lt;/code&gt; is cloning entire Git repositories. This is because network latency and byte-compilation are the dominant factors.&lt;/li&gt; &#xA; &lt;li&gt;Some &lt;code&gt;package.el&lt;/code&gt; servers build packages from non-Git upstreams. &lt;code&gt;package.el&lt;/code&gt; can install these packages, while &lt;code&gt;straight.el&lt;/code&gt; cannot. However, since &lt;code&gt;package.el&lt;/code&gt; has no version-control support, this is more or less equivalent to installing those packages from the &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt;, which &lt;code&gt;straight.el&lt;/code&gt; can do by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to Quelpa&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quelpa allows for fetching packages from arbitrary sources and building them into a format that can be installed by &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; has a philosophy which is fundamentally incompatible with &lt;code&gt;package.el&lt;/code&gt;, and non-compatibility with &lt;code&gt;package.el&lt;/code&gt; is one of its design goals.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with MELPA, GNU ELPA, and Emacsmirror, while Quelpa only has support for MELPA. To use GNU ELPA, you must drop down to &lt;code&gt;package.el&lt;/code&gt;. &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt; is not supported by default, although it is easy to specify an Emacsmirror repository in a recipe. While Quelpa allows you to specify custom recipe folders, it does not have support for cloning these folders automatically from version control, nor for generating the recipes in any way other than copying them literally from files. &lt;code&gt;straight.el&lt;/code&gt; allows you full flexibility in this regard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git revisions of packages. This process is more manual in Quelpa, as it requires placing the commit hash into the recipe, which disables updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it also loads every package you ever installed at startup, even if those packages are no longer referenced by your init-file. Furthermore, there is an additional caching layer, so that deleting a package from the &lt;code&gt;package.el&lt;/code&gt; interface and removing it from your init-file still does not actually delete it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. Quelpa can theoretically provide some measure of reproducibility, but this requires significant manual effort since all packages are not associated with specific revisions by default, nor is the revision of MELPA saved anywhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally. While it is possible to make local changes to Quelpa packages, there are two places to do so: the built package, which is the default destination of &lt;code&gt;find-function&lt;/code&gt;, and the original repository. Changes to the former are not version-controlled and will be silently overwritten by &lt;code&gt;package.el&lt;/code&gt; operations, while changes to the latter will be silently overwritten by Quelpa operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream repository and a fork for the same package. Quelpa does not have such a concept.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you complete control over how your repositories are managed, and the default behavior is to draw all packages versioned in a single repository from a single copy of that repository. Quelpa is hardcoded to require a separate repository for each package, so that installing Magit requires three copies of the Magit repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; builds packages using symlinks, meaning that &lt;code&gt;find-function&lt;/code&gt; works as expected. Quelpa builds packages by copying, a feature inherited from MELPA. This means that &lt;code&gt;find-function&lt;/code&gt; brings you to the built package, instead of the actual repository, which is not version-controlled and will be overwritten whenever &lt;code&gt;package.el&lt;/code&gt; performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operations on your package&#39;s Git repositories. Quelpa allows this, but all local changes will be silently overridden whenever Quelpa performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it is also unsuitable for minimal bug reproductions, since it automatically loads all of your packages on any package operation, even in &lt;code&gt;emacs -Q&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and warnings that come from byte-compilation and autoload generation. It also displays additional messages while cloning Git repositories, downloading files, and building packages from their repositories into &lt;code&gt;package.el&lt;/code&gt; format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; does not modify your init-file. Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits the behavior of aggressively inserting a call to &lt;code&gt;package-initialize&lt;/code&gt; into your init-file on any package management operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. Quelpa has no such concept.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of Quelpa&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quelpa supports all the version-control systems supported by MELPA, which is to say almost every commonly and uncommonly used VCS. &lt;code&gt;straight.el&lt;/code&gt; only supports Git, although it is designed to support other version-control backends.&lt;/li&gt; &#xA; &lt;li&gt;Quelpa allows for installing only stable versions of packages, from any source. This mode of operation is unsupported by &lt;code&gt;straight.el&lt;/code&gt;, although it is a &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;planned feature&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Since Quelpa is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface for package management that also displays package metadata. &lt;code&gt;straight.el&lt;/code&gt; has no such interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Additional notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; and Quelpa both allow you to manage your package&#39;s local repositories manually, if you wish.&lt;/li&gt; &#xA; &lt;li&gt;In principle, &lt;code&gt;straight.el&lt;/code&gt; and Quelpa have identical package installation times, since they are performing the same operations. In practice, Quelpa is slightly slower since it builds packages by copying rather than symlinking, and it clones multiple copies of the same Git repository when multiple packages are built from it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; encourages you to keep a tight handle on your package versions by default. Quelpa encourages you to stick to the latest versions of your packages, and to upgrade them automatically.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to Cask&lt;/h3&gt; &#xA;&lt;p&gt;I have not used Cask extensively, so please feel especially free to offer corrections for this section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cask installs packages using the &lt;code&gt;package.el&lt;/code&gt; protocol, based on a &lt;code&gt;Cask&lt;/code&gt; file written in the Cask DSL. &lt;code&gt;straight.el&lt;/code&gt; eschews &lt;code&gt;package.el&lt;/code&gt; entirely, and clones packages from source based on how you invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file.&lt;/li&gt; &#xA; &lt;li&gt;Cask focuses more on being a build manager, like Maven or Leiningen, while &lt;code&gt;straight.el&lt;/code&gt; focuses &lt;em&gt;exclusively&lt;/em&gt; on being a package manager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has out-of-the-box compatibility with Emacsmirror, while Cask only supports &lt;code&gt;package.el&lt;/code&gt;-compliant repositories. However, it is easy to specify an Emacsmirror repository in a recipe. Cask does not support custom package sources. &lt;code&gt;straight.el&lt;/code&gt; supports MELPA, GNU ELPA, and Emacsmirror, and allows you to add any other sources you would like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has integrated support for selecting particular Git revisions of packages. This process is more manual in Cask, as it requires placing the commit hash into the recipe, which disables updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it loads every package you ever installed at startup, even if some of those packages are no longer referenced by your &lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration implicitly by detecting how you call &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file and making the appropriate changes immediately. Cask requires manual intervention (for example, issuing a &lt;code&gt;cask install&lt;/code&gt; command when you have updated your &lt;code&gt;Cask&lt;/code&gt; file). However, both &lt;code&gt;straight.el&lt;/code&gt; and Cask can be considered declarative package managers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. Cask can theoretically provide some measure of reproducibility, but this requires significant manual effort since all packages are not associated with specific revisions by default, nor is the revision of Cask saved anywhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally. While it is possible to make local changes to Cask packages, these will not be version-controlled and they will be silently overwritten or shadowed when Cask performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operations on your package&#39;s Git repositories, including contributing changes upstream. &lt;code&gt;straight.el&lt;/code&gt; has explicit support for specifying both an upstream and a fork for a package. Contributing changes upstream with Cask is impossible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is designed with &lt;code&gt;emacs -Q&lt;/code&gt; bug reports in mind. Cask appears to be unsuitable for minimal bug reproductions, since there does not appear to be a straightforward way to load a single package, without loading all other packages configured in your &lt;code&gt;Cask&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it displays all messages, errors, and warnings that come from byte-compilation and autoload generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. Cask has no such concept.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of Cask&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cask provides a useful toolbox of operations for project management, which are completely absent from &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it does not require that you have Git installed. (It does require Python, however.) &lt;code&gt;straight.el&lt;/code&gt; is mostly unusable without Git.&lt;/li&gt; &#xA; &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it can perform bulk package updates more quickly than &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, it inherits a user interface for package management that also displays package metadata.&lt;/li&gt; &#xA; &lt;li&gt;Since Cask is based on &lt;code&gt;package.el&lt;/code&gt;, you can install packages without editing a file manually, although this rather defeats the entire purpose of using Cask instead of &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; absolutely refuses to permanently install a package without an explicit reference to it in your init-file (although this may be considered an advantage, depending on your perspective).&lt;/li&gt; &#xA; &lt;li&gt;Using MELPA Stable, Cask can install only stable versions of packages. By default, Cask also installs only stable versions of packages from GNU ELPA. These modes of operation are unsupported by &lt;code&gt;straight.el&lt;/code&gt; at this time, although this is a &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;planned feature&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Cask supports more version-control systems than &lt;code&gt;straight.el&lt;/code&gt; (which only supports Git).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to el-get&lt;/h3&gt; &#xA;&lt;p&gt;I have not used el-get extensively, so please feel especially free to offer corrections for this section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Both el-get and &lt;code&gt;straight.el&lt;/code&gt; implement their own package management abstractions instead of delegating to &lt;code&gt;package.el&lt;/code&gt;. However: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;el-get goes the route of adding as many package sources as possible (e.g. &lt;code&gt;package.el&lt;/code&gt;, many different version-control systems, various specific websites, and even system package managers) so that packages can be used very easily.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; only supports Git and in doing so is able to provide more advanced package management features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; uses your init-file as the sole source of truth for package operations. el-get has additional metadata stored outside the init-file, although specifying all packages in your init-file is a supported mode of operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports 100% reproducibility for your Emacs packages with version lockfiles. el-get can theoretically provide some measure of reproducibility, but this requires significant manual effort since all packages are not associated with specific revisions by default, nor is the revision of el-get saved anywhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to make arbitrary changes to your packages locally, and conflicts during updates are presented to the user and resolved interactively. While it is possible to make local changes to el-get packages, the el-get manual warns that such changes may break the update mechanism.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has explicit support for configuring both an upstream repository and a fork for the same package. el-get does not have such a concept.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to perform arbitrary version-control operartions on your package&#39;s Git repositories. el-get allows this, but local changes will be overwritten when el-get performs an update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a suite of powerful interactive workflows for performing bulk operations on your package&#39;s Git repositories. el-get only allows you to install, uninstall, and update packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; operates quietly when all is going well. el-get reports its progress verbosely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. el-get has no such concept.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of el-get&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;el-get supports virtually all known version-control systems, as well as system package managers, EmacsWiki, arbitrary HTTP, and even &lt;code&gt;go get&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; supports only Git, although it does allow you to manage your local repositories manually if you would like.&lt;/li&gt; &#xA; &lt;li&gt;el-get has been around since 2010 and is on its fifth major version, whereas &lt;code&gt;straight.el&lt;/code&gt; was created in January 2017 and is only now approaching a 1.0 release. Clearly, el-get is more stable, although despite its recency &lt;code&gt;straight.el&lt;/code&gt; is already almost 50% of the size of el-get, by the line count. Both package managers are actively maintained.&lt;/li&gt; &#xA; &lt;li&gt;el-get has a recipe format which is several orders of magnitude more powerful than that of &lt;code&gt;straight.el&lt;/code&gt;, since it supports many more package sources that can be configured and since it allows for a more complex build process.&lt;/li&gt; &#xA; &lt;li&gt;el-get provides a number of features for running per-package initialization and setup code, including pulling that code from arbitrary sources. &lt;code&gt;straight.el&lt;/code&gt; does not support this and expects you to use a dedicated tool like &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; (with which integration is built in) for that purpose.&lt;/li&gt; &#xA; &lt;li&gt;el-get has a user interface for package management that also displays package metadata, similarly to &lt;code&gt;package.el&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; has no user interface for package management; any UI is provided by the user&#39;s &lt;code&gt;completing-read&lt;/code&gt; framework.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to Borg&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Borg and &lt;code&gt;straight.el&lt;/code&gt; are perhaps the two most similar package managers on this list. The difference is that Borg is very minimal and expects you to complement it with other tools such as &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacscollective/epkg&#34;&gt;epkg&lt;/a&gt;, &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/tarsius/auto-compile&#34;&gt;auto-compile&lt;/a&gt;. On the other hand, &lt;code&gt;straight.el&lt;/code&gt; aspires to be a one-stop package management solution, although it does not try to replace dedicated version-control packages (Magit) or dedicated package &lt;em&gt;configuration&lt;/em&gt; packages (&lt;code&gt;use-package&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Borg uses Git submodules, while &lt;code&gt;straight.el&lt;/code&gt; uses independently managed Git repositories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; supports MELPA, GNU ELPA, Emacsmirror, and custom recipe sources. Borg only supports Emacsmirror and custom recipe sources. However, as the Emacsmirror is a near-complete superset of both GNU ELPA and MELPA, this does not necessarily mean you have access to more packages: it just means you benefit from the recipe maintenance efforts of the MELPA team and the Emacsmirror team, rather than only the latter.&lt;/li&gt; &#xA; &lt;li&gt;Borg, even when combined with related tools, do not allow for the kind of massive interactive repository management provided by &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides an API designed for other version-control backends to be added in future. Borg is inextricably tied to Git.&lt;/li&gt; &#xA; &lt;li&gt;The interface for Git submodules has a number of sharp edges.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides dependency management. This is a manual process in Borg.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides mechanisms for updating your packages. This is a manual process in Borg.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; is configured solely by how you use in your init-file. Configuring Borg requires customizing &lt;code&gt;~/.emacs.d/.gitmodules&lt;/code&gt;, which means (for example) that you cannot generate recipes dynamically. (However, the handling of configuration is &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/95#issuecomment-316379495&#34;&gt;planned&lt;/a&gt; to be improved in a future release.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; has a profile system that allows users of someone else&#39;s Emacs configuration to manage an additional subset of packages, or to override upstream package configuration, without forking the upstream. Borg has no such concept.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of Borg&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Borg does a heck of a lot less magic, so if you want a solution with simple implementation details, &lt;code&gt;straight.el&lt;/code&gt; may not be for you. (But see the developer manual and docstrings, first.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison to the manual approach&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The manual approach is to download packages yourself and put them on your &lt;code&gt;load-path&lt;/code&gt;. &lt;code&gt;straight.el&lt;/code&gt; is more or less what you get when you take the manual approach, think very hard about the best way to do everything, and then automate all of it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; figures out where to clone your packages from for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; byte-compiles your packages for you and generates their autoloads automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to manually recompile and regenerate autoloads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; keeps track of dependencies for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; provides tools to manage all your packages in bulk, which would otherwise be a long, tedious process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; allows you to get reproducibility for your configuration without needing to keep all of your packages under version control.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; links packages into a separate build directories. Running packages directly from their repositories has a number of problems, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;making it impossible to run only one package, if others are provided in the same repository.&lt;/li&gt; &#xA;   &lt;li&gt;making your working directory dirty when the package author forgot to add their build artifacts like &lt;code&gt;*.elc&lt;/code&gt; and autoload files to the &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;instantly losing compatibility with MELPA recipes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; offers you a single entry point to install only a single package in isolation, for a minimal bug reproduction. With the manual approach this would be more complicated, especially if the package has dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight.el&lt;/code&gt; frees you from needing to think about package management, since I already did all the thinking to figure how best to design everything.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advantages of the manual approach&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No dependencies.&lt;/li&gt; &#xA; &lt;li&gt;You learn a lot, if you don&#39;t give up first.&lt;/li&gt; &#xA; &lt;li&gt;You might end up writing a package manager (case in point).&lt;/li&gt; &#xA; &lt;li&gt;This is the only way to deal with packages that have non-Git upstreams which you need to contribute changes to. (However, you can always use the manual approach for one package and &lt;code&gt;straight.el&lt;/code&gt; for the rest. Or you can just eschew &lt;code&gt;straight.el&lt;/code&gt;&#39;s version-control support for that package, and use it only for building the package.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User manual&lt;/h2&gt; &#xA;&lt;p&gt;This section tells you everything you need to know about the user-facing features of &lt;code&gt;straight.el&lt;/code&gt;. For implementation details, see the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;developer manual&lt;/a&gt;. It may also be helpful to get some perspective on the overarching concepts of &lt;code&gt;straight.el&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#conceptual-overview&#34;&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bootstrapping &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In order to use &lt;code&gt;straight.el&lt;/code&gt;, you will need to somehow get it loaded into Emacs. (This is easy for &lt;code&gt;package.el&lt;/code&gt;, since &lt;code&gt;package.el&lt;/code&gt; is built in to Emacs. &lt;code&gt;straight.el&lt;/code&gt; must work a little harder.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; comes with a file to do just this, &lt;code&gt;bootstrap.el&lt;/code&gt;. All you need to do is load that file. You can do this with &lt;code&gt;M-x load-file&lt;/code&gt; or by a call to &lt;code&gt;load&lt;/code&gt; in your init-file. However, there is an obvious shortcoming: &lt;code&gt;bootstrap.el&lt;/code&gt; will only be available once &lt;code&gt;straight.el&lt;/code&gt; is already installed.&lt;/p&gt; &#xA;&lt;p&gt;You could just invoke &lt;code&gt;git clone&lt;/code&gt; from your init-file, if &lt;code&gt;straight.el&lt;/code&gt; is not installed, but then you would have to manually take care of selecting the correct branch, parsing your version lockfile to check out the right revision, and so on. Instead, you can just use this snippet, which uses a copious amount of magic to take care of all these details for you:&lt;/p&gt; &#xA;&lt;!-- longlines-start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defvar bootstrap-version)&#xA;(let ((bootstrap-file&#xA;       (expand-file-name &#34;straight/repos/straight.el/bootstrap.el&#34; user-emacs-directory))&#xA;      (bootstrap-version 5))&#xA;  (unless (file-exists-p bootstrap-file)&#xA;    (with-current-buffer&#xA;        (url-retrieve-synchronously&#xA;         &#34;https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el&#34;&#xA;         &#39;silent &#39;inhibit-cookies)&#xA;      (goto-char (point-max))&#xA;      (eval-print-last-sexp)))&#xA;  (load bootstrap-file nil &#39;nomessage))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- longlines-stop --&gt; &#xA;&lt;p&gt;Despite the reference to &lt;code&gt;develop&lt;/code&gt;, this snippet actually installs from the &lt;code&gt;master&lt;/code&gt; branch by default, just like every other package. Furthermore, the correct revision of &lt;code&gt;straight.el&lt;/code&gt; is checked out, if you have one specified in your lockfile. Even better, you can &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-the-recipe-for-straightel&#34;&gt;override the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;, just like for any other package.&lt;/p&gt; &#xA;&lt;h3&gt;Installing packages programmatically&lt;/h3&gt; &#xA;&lt;p&gt;The primary entry point to &lt;code&gt;straight.el&lt;/code&gt; is the &lt;code&gt;straight-use-package&lt;/code&gt; function. It can be invoked interactively (for installing a package temporarily) or programmatically (for installing a package permanently). This section covers the programmatic usage; see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&#34;&gt;later&lt;/a&gt; for interactive usage.&lt;/p&gt; &#xA;&lt;p&gt;Here is the basic usage of &lt;code&gt;straight-use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;el-patch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will ensure that the package &lt;code&gt;el-patch&lt;/code&gt; is installed and loaded. (Note that &lt;code&gt;straight-use-package&lt;/code&gt; takes a symbol, not a string, for the name of the package.) Precisely, this is what happens:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the local Git repository for &lt;code&gt;el-patch&lt;/code&gt; is not available, it is cloned, and the appropriate revision is checked out (if one is specified in your version lockfiles).&lt;/li&gt; &#xA; &lt;li&gt;If the local Git repository has been modified since the last time the package was built, it is rebuilt. This means: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are symlinked into a separate directory to isolate them from other, irrelevant files.&lt;/li&gt; &#xA;   &lt;li&gt;The main package file is checked for dependencies, which are installed recursively if necessary using &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;.el&lt;/code&gt; files are byte-compiled.&lt;/li&gt; &#xA;   &lt;li&gt;Autoloads are extracted from the &lt;code&gt;.el&lt;/code&gt; files and saved into a separate file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The package&#39;s directory is added to Emacs&#39; &lt;code&gt;load-path&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The package&#39;s autoloads are evaluated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Package authors should note that &lt;code&gt;straight.el&lt;/code&gt; checks for dependencies that are specified in the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html&#34;&gt;&lt;code&gt;package.el&lt;/code&gt; format&lt;/a&gt;. To spare you reading that documentation, this is either a &lt;code&gt;Package-Requires&lt;/code&gt; header in &lt;code&gt;PACKAGENAME.el&lt;/code&gt;, or an argument to a &lt;code&gt;define-package&lt;/code&gt; invocation in &lt;code&gt;PACKAGENAME-pkg.el&lt;/code&gt;. Despite the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#advantages-of-straightel&#34;&gt;many shortcomings&lt;/a&gt; of &lt;code&gt;package.el&lt;/code&gt;, it has done a good job of creating a standardized format for dependency declarations.&lt;/p&gt; &#xA;&lt;p&gt;There is one exception to the above statement: not all entries specified in the &lt;code&gt;Package-Requires&lt;/code&gt; header necessarily correspond to packages. For example, specifying a minimum Emacs version for a package is done by depending on the &lt;code&gt;emacs&lt;/code&gt; pseudo-package. Such packages are simply ignored by &lt;code&gt;straight.el&lt;/code&gt;, using the variable &lt;code&gt;straight-built-in-pseudo-packages&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that loading a package does not entail invoking &lt;code&gt;require&lt;/code&gt; on any of its features. If you wish to actually load the files of the package, you need to do this separately. This is because most packages do not need to be loaded immediately, and are better served by the autoload system.&lt;/p&gt; &#xA;&lt;h4&gt;Installing with a custom recipe&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-use-package&lt;/code&gt; can also take a list instead of a symbol. In that case, the first member of the list is a symbol giving the package name, and the remainder of the list is a &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html&#34;&gt;property list&lt;/a&gt; providing information about how to install and build the package. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :type git :host github :repo &#34;raxod502/el-patch&#34;&#xA;            :fork (:host github&#xA;                   :repo &#34;your-name/el-patch&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you give &lt;code&gt;straight-use-package&lt;/code&gt; just a package name, then a recipe will be looked up by default (see the section on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&#34;&gt;recipe lookup&lt;/a&gt;). You can see the default recipe for a package by invoking &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&#34;&gt;&lt;code&gt;M-x straight-get-recipe&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; is non-nil, then you only need to specify the components of the recipe that you want to override. All other components will still be looked up in the default recipe. In the example above, we are only interested in changing the &lt;code&gt;:fork&lt;/code&gt; component. Therefore if &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; is set, the recipe could be simplifed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :fork (:repo &#34;your-name/el-patch&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or even simpler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :fork &#34;your-name/el-patch&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:files&lt;/code&gt; keyword and all version control keywords support inheritance.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, see the section on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;the recipe format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Additional arguments to &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The full user-facing signature of &lt;code&gt;straight-use-package&lt;/code&gt; is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package PACKAGE-OR-RECIPE &amp;amp;optional NO-CLONE NO-BUILD)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As discussed &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#installing-packages-programmatically&#34;&gt;previously&lt;/a&gt;, by default &lt;code&gt;straight-use-package&lt;/code&gt; will do three things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register the recipe provided with &lt;code&gt;straight.el&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone the package&#39;s local repository, if it is absent.&lt;/li&gt; &#xA; &lt;li&gt;Rebuild the package if necessary, and load it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By providing the optional arguments, you may cause processing to halt before all three of these tasks are completed. Specifically, providing &lt;code&gt;NO-CLONE&lt;/code&gt; causes processing to halt after registration but before cloning, and providing &lt;code&gt;NO-BUILD&lt;/code&gt; causes processing to halt after cloning (if necessary) but before building and loading.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; supports lazy-loading by means of a special value for &lt;code&gt;NO-CLONE&lt;/code&gt;, the symbol &lt;code&gt;lazy&lt;/code&gt;. If this symbol is passed, then processing will halt at the clone step, unless the package is already cloned. This means that the package is built and loaded if it is already installed, but otherwise installation is deferred until later. When you want to trigger the lazy installation, simply call &lt;code&gt;straight-use-package&lt;/code&gt; again, but without &lt;code&gt;NO-CLONE&lt;/code&gt;. (There is no need to pass the recipe again; see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&#34;&gt;recipe lookup&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;You can also pass functions for &lt;code&gt;NO-CLONE&lt;/code&gt; or &lt;code&gt;NO-BUILD&lt;/code&gt;, which will be called with the package name as a string; their return values will then be used instead.&lt;/p&gt; &#xA;&lt;p&gt;Note that if it makes no sense to build a package, then you should put &lt;code&gt;:build nil&lt;/code&gt; in its &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;recipe&lt;/a&gt;, rather than specifying &lt;code&gt;NO-BUILD&lt;/code&gt; every time you register it with &lt;code&gt;straight.el&lt;/code&gt;. (This is especially relevant when writing recipes for &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-recipe-repositories&#34;&gt;recipe repositories&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;h4&gt;Variants of &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For convenience, &lt;code&gt;straight.el&lt;/code&gt; provides some functions that wrap &lt;code&gt;straight-use-package&lt;/code&gt; with particular arguments, to cover all of the common cases. Each of these functions takes only a package name or recipe, and no additional arguments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-register-package&lt;/code&gt;: always stop after the registration step. This may be useful for specifying the recipe for an optional dependency (see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#recipe-lookup&#34;&gt;recipe lookup&lt;/a&gt;, but see also &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-recipes&#34;&gt;recipe overrides&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-use-package-no-build&lt;/code&gt;: always stop before the build step. This is used by &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&#34;&gt;&lt;code&gt;straight-freeze-versions&lt;/code&gt;&lt;/a&gt; to make sure packages are cloned, since building them is unnecessary for writing the lockfiles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-use-package-lazy&lt;/code&gt;: stop at the clone step if the package&#39;s local repository is not already cloned. This is used for lazy-loading.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Customizing when packages are built&lt;/h4&gt; &#xA;&lt;p&gt;By default, when &lt;code&gt;straight.el&lt;/code&gt; is bootstrapped during Emacs init, it uses a bulk &lt;code&gt;find(1)&lt;/code&gt; command to identify files that were changed since the last time a package depending on them was built. These packages are then rebuilt when they are requested via &lt;code&gt;straight-use-package&lt;/code&gt;. Normally, &lt;code&gt;straight.el&lt;/code&gt; will try to detect what sort of &lt;code&gt;find(1)&lt;/code&gt; program is installed, and issue the appropriate command. If it makes a mistake, then you can manually customize &lt;code&gt;straight-find-flavor&lt;/code&gt;. Alternately, you can install GNU find and customize the variable &lt;code&gt;straight-find-executable&lt;/code&gt; to point to it.&lt;/p&gt; &#xA;&lt;p&gt;For about 100 packages on an SSD, calling &lt;code&gt;find(1)&lt;/code&gt; to detect modifications takes about 500ms. You can save this time by customizing &lt;code&gt;straight-check-for-modifications&lt;/code&gt;. This is a list of symbols which determines how &lt;code&gt;straight.el&lt;/code&gt; detects package modifications. The default value is &lt;code&gt;(find-at-startup find-when-checking)&lt;/code&gt;, which means that &lt;code&gt;find(1)&lt;/code&gt; is used to detect modifications at startup, and also when you invoke &lt;code&gt;M-x straight-check-package&lt;/code&gt; or &lt;code&gt;M-x straight-check-all&lt;/code&gt;. If you prefer to avoid this performance hit, or do not have &lt;code&gt;find(1)&lt;/code&gt; installed, then you can remove these symbols from the list. In that case, you will probably want to add either &lt;code&gt;check-on-save&lt;/code&gt; or &lt;code&gt;watch-files&lt;/code&gt; to the list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;check-on-save&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to use &lt;code&gt;before-save-hook&lt;/code&gt; to detect package modifications as you make them (modifications made by the &lt;code&gt;straight.el&lt;/code&gt; repository management commands are also detected). This reduces init time, but modifications made outside of Emacs (or modifications that bypass &lt;code&gt;before-save-hook&lt;/code&gt;) are not detected. Pull requests extending the number of cases in which &lt;code&gt;straight.el&lt;/code&gt; is able to detect live modifications are welcome. Also, for the sake of efficiency, this form of modification checking is restricted to subdirectories of &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;, so you must put your local repositories into that directory for it to work. (Pull requests to change this would be welcome.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;watch-files&lt;/code&gt; causes &lt;code&gt;straight.el&lt;/code&gt; to automatically invoke a filesystem watcher to detect modifications as they are made, inside or outside of Emacs. For this setting to work, you must have &lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;code&gt;python3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/mattgreen/watchexec&#34;&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; installed on your &lt;code&gt;PATH&lt;/code&gt;. By default, the watcher persists after Emacs is closed. You can stop it manually by running &lt;code&gt;M-x straight-watcher-stop&lt;/code&gt;, and start it again by running &lt;code&gt;M-x straight-watcher-start&lt;/code&gt;. The watcher script is designed so that when one instance is started, all the others gracefully shut down, so you don&#39;t have to worry about accidentally ending up with more than one. There is nothing exciting in the process buffer for the watcher, but if you are interested in it then its name is given by &lt;code&gt;straight-watcher-process-buffer&lt;/code&gt;. (By default, the name has a leading space so that the buffer does not appear in the buffer list.)&lt;/p&gt; &#xA;&lt;p&gt;There is probably no good reason to use both &lt;code&gt;check-on-save&lt;/code&gt; and &lt;code&gt;watch-files&lt;/code&gt; at the same time. Your configuration can dynamically switch between which one is used depending on &lt;code&gt;(executable-find &#34;watchexec&#34;)&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to eschew automatic package rebuilding entirely, you can just set &lt;code&gt;straight-check-for-modifications&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. In that case, packages will only be rebuilt when metadata (e.g. the recipe or the Emacs version) changes, or when you manually invoke &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt; or &lt;code&gt;M-x straight-rebuild-all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Regardless of your preferred setting for &lt;code&gt;straight-check-for-modifications&lt;/code&gt;, you should set it before the &lt;code&gt;straight.el&lt;/code&gt; bootstrap snippet is run, since hooks relating to this variable are set during bootstrap.&lt;/p&gt; &#xA;&lt;p&gt;On Microsoft Windows, &lt;code&gt;find(1)&lt;/code&gt; is generally not available, so the default value of &lt;code&gt;straight-check-for-modifications&lt;/code&gt; is instead &lt;code&gt;(check-on-save)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Custom or manual modification detection&lt;/h5&gt; &#xA;&lt;p&gt;You can also use the low-level functions for modification detection directly.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;straight-register-repo-modification&lt;/code&gt; takes a string (e.g. &lt;code&gt;&#34;straight.el&#34;&lt;/code&gt;) corresponding to the name of a local repository, and marks all packages from that local repository to be rebuilt at next Emacs startup. This function silently ignores local repositories which contain slashes, a limitation which might be removed in future.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;straight-register-file-modification&lt;/code&gt; takes no arguments and checks if the file visited by the current buffer (if any) is contained by any local repository. If so, it delegates to &lt;code&gt;straight-register-repo-modification&lt;/code&gt;. The &lt;code&gt;check-on-save&lt;/code&gt; value for &lt;code&gt;straight-check-for-modifications&lt;/code&gt; just adds &lt;code&gt;straight-register-file-modification&lt;/code&gt; to &lt;code&gt;before-save-hook&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Summary of options for package modification detection&lt;/h5&gt; &#xA;&lt;h6&gt;&lt;code&gt;find-at-startup&lt;/code&gt;&lt;/h6&gt; &#xA;&lt;p&gt;Save build timestamps and run &lt;code&gt;find(1)&lt;/code&gt; at startup to detect changes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most reliable, never misses changes&lt;/li&gt; &#xA; &lt;li&gt;Requires &lt;code&gt;find(1)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slows down startup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;&lt;code&gt;check-on-save&lt;/code&gt;&lt;/h6&gt; &#xA;&lt;p&gt;Use &lt;code&gt;before-save-hook&lt;/code&gt; to detect changes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No external dependencies&lt;/li&gt; &#xA; &lt;li&gt;No startup delay&lt;/li&gt; &#xA; &lt;li&gt;No additional CPU or memory impact&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t catch changes made except via &lt;code&gt;save-file&lt;/code&gt; inside Emacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;&lt;code&gt;watch-files&lt;/code&gt;&lt;/h6&gt; &#xA;&lt;p&gt;Run filesystem watcher to detect changes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Python 3 and Watchexec&lt;/li&gt; &#xA; &lt;li&gt;No startup delay&lt;/li&gt; &#xA; &lt;li&gt;Takes a few seconds to build virtualenv the first time&lt;/li&gt; &#xA; &lt;li&gt;Memory and CPU impact of running filesystem watcher&lt;/li&gt; &#xA; &lt;li&gt;Only misses changes if you make them after booting the system but before starting Emacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Customizing how packages are built&lt;/h4&gt; &#xA;&lt;p&gt;By specifying &lt;code&gt;:build nil&lt;/code&gt; in a package&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;recipe&lt;/a&gt;, you may prevent the package from being built at all. This is usually useful for recipe repositories which do not bundle executable Lisp code. (Make sure to use &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-recipe-repositories&#34;&gt;&lt;code&gt;straight-use-recipes&lt;/code&gt;&lt;/a&gt; for registering recipe repositories.)&lt;/p&gt; &#xA;&lt;h5&gt;Autoload generation&lt;/h5&gt; &#xA;&lt;p&gt;By specifying &lt;code&gt;:build (:not autoloads)&lt;/code&gt; in a package&#39;s recipe, you may prevent any autoloads provided by the package from being generated and loaded into Emacs. This is mostly useful if the package provides a large number of autoloads, you know you need only a few of them, and you wish to optimize your startup time (although this is almost certainly premature optimization unless you &lt;em&gt;really&lt;/em&gt; know what you&#39;re doing). You can also customize the variable &lt;code&gt;straight-disable-autoloads&lt;/code&gt; to effect this change on all recipes which do not explicitly disable autoloads via the &lt;code&gt;:build&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;h5&gt;Byte compilation&lt;/h5&gt; &#xA;&lt;p&gt;By specifying &lt;code&gt;:build (:not compile)&lt;/code&gt; in a package&#39;s recipe, you may inhibit byte-compilation. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/357&#34;&gt;this issue&lt;/a&gt; for discussion of why this might be useful. You can also customize the variable &lt;code&gt;straight-disable-compile&lt;/code&gt; to effect this change on all recipes which do not explicitly disable byte-compilation via the &lt;code&gt;:build&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;h5&gt;Native compilation&lt;/h5&gt; &#xA;&lt;p&gt;Experimental support for native compilation of Emacs Lisp code is currently under development in the &lt;code&gt;feature/native-comp&lt;/code&gt; branch of the official Emacs repository (see &lt;a href=&#34;http://akrl.sdf.org/gccemacs.html&#34;&gt;gccemacs&lt;/a&gt;). When running on this version of Emacs, &lt;code&gt;straight.el&lt;/code&gt; will perform native compilation of packages.&lt;/p&gt; &#xA;&lt;p&gt;By specifying a &lt;code&gt;:build (:not native-compile)&lt;/code&gt; in a package&#39;s recipe, you may inhibit native compilation. You can also customize the variable &lt;code&gt;straight-disable-native-compile&lt;/code&gt; to effect this change on all recipes which do not explicitly disable native-compilation via the &lt;code&gt;:build&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;p&gt;Native compilation requires byte-compilation, so &lt;code&gt;:build (:not compile)&lt;/code&gt; and &lt;code&gt;straight-disable-compile&lt;/code&gt; will also disable native compilation.&lt;/p&gt; &#xA;&lt;h5&gt;Symbolic links&lt;/h5&gt; &#xA;&lt;p&gt;Usually, &lt;code&gt;straight.el&lt;/code&gt; uses symbolic links (&#34;symlinks&#34;) to make package files available from the build directory. This happens when &lt;code&gt;straight-use-symlinks&lt;/code&gt; is non-nil, the default. On Microsoft Windows, however, support for symlinks is not always available, so the default value of &lt;code&gt;straight-use-symlinks&lt;/code&gt; is nil on that platform. That causes copying to be used instead, and an advice is placed on &lt;code&gt;find-file&lt;/code&gt; to cause the copied files to act as symlinks if you try to edit them.&lt;/p&gt; &#xA;&lt;p&gt;If you want to activate symlink-support on MS Windows 7, 8, or 10, you should ensure the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-symlinks&lt;/code&gt; has to be set to non-nil manually.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your user-account needs to be assigned the right to create symbolic links. To do so, run &#34;secpol.msc&#34; and in &#34;Local Policies → User Rights Assignment&#34; assign the right to &#34;Create symbolic links&#34; to your user-account.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have User Account Control (UAC) enabled and your user-account belongs to the the &lt;em&gt;Administrators&lt;/em&gt; group you&#39;ll need to run Emacs in elevated mode to be able to create symlinks (see &lt;a href=&#34;https://community.perforce.com/s/article/3472&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://stackoverflow.com/a/29065060/3538165&#34;&gt;here&lt;/a&gt; and, for an official reference, section Access Token Changes &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb530410.aspx#vistauac_topic8&#34;&gt;in this document&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://blogs.windows.com/buildingapps/2016/12/02/symlinks-windows-10/&#34;&gt;Windows Creators Update&lt;/a&gt; supports symlink-creation without any special permission setup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Customizing how packages are made available&lt;/h4&gt; &#xA;&lt;p&gt;By setting the variable &lt;code&gt;straight-cache-autoloads&lt;/code&gt; to a non-nil value, you can cause &lt;code&gt;straight.el&lt;/code&gt; to cache the autoloads of all used packages in a single file on disk, and load them from there instead of from the individual package files if they are still up to date. This reduces the number of disk IO operations during startup from O(number of packages) to O(1), so it should improve performance. No other configuration should be necessary to make this work; however, you may wish to call &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#interactive-usage&#34;&gt;&lt;code&gt;straight-prune-build&lt;/code&gt;&lt;/a&gt; occasionally, since otherwise this cache file may grow quite large over time.&lt;/p&gt; &#xA;&lt;h4&gt;Hooks run by &lt;code&gt;straight-use-package&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;straight-use-package&lt;/code&gt; supports three hooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-post-clone-hook&lt;/code&gt;: The functions in this hook are run just after cloning a git repository. This allows users to automate custom configuration of Elisp Git repositories after they have been cloned. For example, the &lt;code&gt;user.email&lt;/code&gt; &lt;code&gt;git-config&lt;/code&gt; variable could be set on clone, to make upstream contributions more convenient for developers who use different email addresses for different repositories.&lt;/p&gt; &lt;p&gt;Each hook function is passed the following &lt;a href=&#34;https://www.emacswiki.org/emacs/KeywordArguments&#34;&gt;keyword arguments&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;:repo-dir&lt;/code&gt; - the local directory to which the repository was cloned&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:remote&lt;/code&gt; - the name of the remote from which the repository was cloned&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:url&lt;/code&gt; - the URL from which the repository was cloned&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:branch&lt;/code&gt; - the branch as specified by the recipe, if any, otherwise &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:depth&lt;/code&gt; - the clone depth as specified by the recipe or &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:commit&lt;/code&gt; - the specific commit which was requested via the lockfile, if any, otherwise &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Since keyword arguments are used, each function should be defined via &lt;code&gt;cl-defun&lt;/code&gt;, and &lt;code&gt;&amp;amp;key&lt;/code&gt; used at the front of the argument list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-package-prepare-functions&lt;/code&gt;: The functions in this hook are run just before a package would be built, even if the package does not actually need to be rebuilt. They are passed the name of the package being (maybe) built as a string, and should take and ignore any additional arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-package-pre-build-functions&lt;/code&gt;: The functions in this hook are run just before building a package (and only if the package needs to be built). They are passed the name of the package being built as a string, and should take and ignore any additional arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-use-package-post-build-functions&lt;/code&gt;: The functions in this hook are run just after building a package (and only if the package needs to be built). They are passed the name of the package being built as a string, and should take and ignore any additional arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The recipe format&lt;/h3&gt; &#xA;&lt;p&gt;The general format for a &lt;code&gt;straight.el&lt;/code&gt; recipe is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package-name :keyword value :keyword value ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you wish to pass a recipe to &lt;code&gt;straight-use-package&lt;/code&gt;, you will need to quote it. If you need to compute part of the recipe dynamically, use backquoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA;  `(el-patch :type git :repo ,(alist-get &#39;el-patch my-package-urls)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The supported keywords are &lt;em&gt;similar, but not identical&lt;/em&gt; to those used in MELPA recipes. There is a complete list below which you can compare with the &lt;a href=&#34;https://github.com/melpa/melpa#recipe-format&#34;&gt;MELPA documentation&lt;/a&gt;, but the main differences from the user&#39;s point of view are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We use &lt;code&gt;:host&lt;/code&gt; instead of &lt;code&gt;:fetcher&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We only support Git recipes by default, although the system is extensible to other VCs to be added in the future or in user configurations. Thus the supported &lt;code&gt;:host&lt;/code&gt; values are &lt;code&gt;nil&lt;/code&gt; (any Git repository), &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, and &lt;code&gt;bitbucket&lt;/code&gt; (Git only).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We support &lt;code&gt;:branch&lt;/code&gt;, but not &lt;code&gt;:commit&lt;/code&gt; or &lt;code&gt;:version-regexp&lt;/code&gt;. To lock a package to a specific commit, use a &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#lockfile-management&#34;&gt;lockfile&lt;/a&gt;. See also &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/246&#34;&gt;#246&lt;/a&gt; for discussion of extensions to the recipe to support package pinning, which is a planned feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We support several additional keywords that affect how a package is built; see below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are consistency and feature improvements to edge cases of the &lt;code&gt;:files&lt;/code&gt; keyword as documented in &lt;code&gt;straight-expand-files-directive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:includes&lt;/code&gt; indicates a package is a superset of another package.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a comprehensive list of all keywords which have special meaning in a recipe (unknown keywords are ignored but preserved):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:local-repo&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is the name of the local repository that is used for the package. If a local repository by that name does not exist when you invoke &lt;code&gt;straight-use-package&lt;/code&gt;, one will be cloned according to the package&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control settings&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Multiple packages can use the same local repository. If so, then a change to the local repository will cause both packages to be rebuilt. Typically, if multiple packages are drawn from the same repository, both should specify a &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt; &lt;p&gt;If you do not provide &lt;code&gt;:local-repo&lt;/code&gt;, then it defaults to a value derived from the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control settings&lt;/a&gt;, or as a last resort the package name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is a list specifying which files in a package&#39;s local repository need to be symlinked into its build directory, and how to arrange the symlinks. For most packages, the default value (&lt;code&gt;straight-default-files-directive&lt;/code&gt;) will suffice, and you do not need to specify anything.&lt;/p&gt; &lt;p&gt;If you do need to override the &lt;code&gt;:files&lt;/code&gt; directive (this happens most commonly when you are taking a single package from a repository that holds multiple packages), it is almost always sufficient to just specify a list of globs or filenames. All matching files will be linked into the top level of the package&#39;s build directory.&lt;/p&gt; &lt;p&gt;In spite of this, the &lt;code&gt;:files&lt;/code&gt; directive supports an almost comically powerful DSL (with nested excludes and everything!) that allows you full flexibility on how the links are made; see the docstring of &lt;code&gt;straight-expand-files-directive&lt;/code&gt; for the full details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:flavor&lt;/code&gt;&lt;/p&gt; &lt;p&gt;If this is non-nil, then it changes the interpretation of the &lt;code&gt;:files&lt;/code&gt; directive for compatibility with an existing upstream recipe source. See the docstring of &lt;code&gt;straight-expand-files-directive&lt;/code&gt; for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:build&lt;/code&gt; This specifies the steps taken on the files symlinked within a package&#39;s straight/build/PACKAGE directory. It may be any of the following values:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;nil, in which case nothing is done. This also prevents :pre/:post-build commands from running.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(example :build nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;t, runs the steps listed in &lt;code&gt;straight--build-default-steps&lt;/code&gt;. Note this ignores all &lt;code&gt;straight-disable-SYMBOL&lt;/code&gt; keywords.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(example :build t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A list of steps. Each step is a symbol which represents a function named: &lt;code&gt;straight--build-SYMBOL&lt;/code&gt;. The function is passed the recipe as its sole argument. Steps are exectuted in the order they are listed. e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(example :build (autoloads compile native-compile info))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A list which has &lt;code&gt;:not&lt;/code&gt; as its car and step symbols as its cdr. This eliminates the listed steps from the default steps. e.g. The following recipe will not be compiled or have its texinfo generated:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(example :build (:not compile info))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Steps may be disabled globally for recipes which do not explicilty declare their &lt;code&gt;:build&lt;/code&gt; via the defcustom variables named &lt;code&gt;straight--build-SYMBOL&lt;/code&gt;. e.g. The last example but for all recipes without a &lt;code&gt;:build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq straight-disable-compile t&#xA;      straight-disable-info t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the absence of a &lt;code&gt;:build&lt;/code&gt; keyword, &lt;code&gt;straight--build-default-steps&lt;/code&gt; are run.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:pre-build&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This specifies system commands and/or elisp to be evaluated before symlinking, and running a recipe&#39;s &lt;code&gt;:build&lt;/code&gt; steps.&lt;/p&gt; &lt;p&gt;Each command is either an elisp form to be evaluated or a list of strings to be executed in a shell context of the form:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(&#34;executable&#34; &#34;arg&#34;...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Commands are executed in the package&#39;s repository directory.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;:pre-build&lt;/code&gt; keyword&#39;s value may be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A single command&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A list of commands&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;nil, in which case no commands are executed.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;( example :type git :host github :repo &#34;user/example.el&#34;&#xA;    :pre-build (&#34;make&#34; &#34;all&#34;)))&#xA;&#xA;(straight-use-package&#xA; `( example :type git :host github :repo &#34;user/example.el&#34;&#xA;    :pre-build ,(pcase system-type&#xA;                  (`windows-nt &#39;(message &#34;This might take a while&#34;))&#xA;                  (_ &#39;((&#34;./configure&#34;) (&#34;make&#34;) (&#34;make&#34; &#34;install&#34;))))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:post-build&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This specifies system commands and/or elisp to be evaluated after the &lt;code&gt;:build&lt;/code&gt; steps are run.&lt;/p&gt; &lt;p&gt;Otherwise, it is identical to the &lt;code&gt;:pre-build&lt;/code&gt; keyword in terms of the values it accepts and how it is executed.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;( example :type git :host github :repo &#34;user/example.el&#34;&#xA;    :pre-build  ((&#34;./pre-build.sh&#34;) (message &#34;hi&#34;))&#xA;    :post-build ((&#34;./post-build.sh&#34;) (message &#34;bye&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:type&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This specifies the version-control backend to use for cloning and managing the package&#39;s local repository. It defaults to the value of &lt;code&gt;straight-default-vc&lt;/code&gt;, which defaults to &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The only traditional version-control backend currently supported is &lt;code&gt;git&lt;/code&gt;, although more backends may be added.&lt;/p&gt; &lt;p&gt;As a special case, however, you may specify the value &lt;code&gt;built-in&lt;/code&gt;, which results in all version-control operations on the package being ignored. This allows you to tell &lt;code&gt;straight.el&lt;/code&gt; that a package has already been provided (for example, because a version of it is shipped by Emacs) and does not have a local repository which needs to be cloned, updated, and so on. Here is how you can tell &lt;code&gt;straight.el&lt;/code&gt; that you would like to use the Emacs-provided copy of Org, rather than cloning it from the upstream repository if another package declares it as a dependency:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(org :type built-in))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:source&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Overrides &lt;code&gt;straight-recipe-repositories&lt;/code&gt; on a per-recipe basis. Its value may be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a symbol representing a recipe repository&lt;/li&gt; &#xA; &lt;li&gt;a list of such symbols The order of the symbols determines their precedence. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(package :source melpa))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will search only the melpa recipe repository for package&#39;s recipe. While:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(package :source (melpa gnu-elpa-mirror)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will search for package&#39;s recipe first in melpa. If it is not found there it will check gnu-elpa-mirror next.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;backend-specific keywords&lt;/p&gt; &lt;p&gt;Depending on the value of &lt;code&gt;:type&lt;/code&gt;, additional keywords (relevant to how the package&#39;s repository is cloned and managed) will be meaningful. See the next section.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;built-in&lt;/code&gt; pseudo-backend does not take any other keywords.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:includes&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Informs &lt;code&gt;straight.el&lt;/code&gt; that a package is a superset of another package. For example &lt;code&gt;org-contrib&lt;/code&gt; includes &lt;code&gt;ol-vm&lt;/code&gt;. The following will prevent &lt;code&gt;straight.el&lt;/code&gt; from attempting to install &lt;code&gt;ol-vm&lt;/code&gt; after &lt;code&gt;org-contrib&lt;/code&gt; has been installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(org-contrib :includes ol-vm))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Its value may also be a list of symbols indicating multiple packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(example :includes (foo bar)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:inherit&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Overrides &lt;code&gt;straight-allow-recipe-inheritance&lt;/code&gt; on a per-recipe basis. If its value is non-nil, inheritance is enabled for the recipe. Otherwise it is not.&lt;/p&gt; &#xA;&lt;h4&gt;Version-control backends&lt;/h4&gt; &#xA;&lt;p&gt;Defining a version-control backend consists of declaring a number of functions named as &lt;code&gt;straight-vc-BACKEND-METHOD&lt;/code&gt;, where &lt;code&gt;BACKEND&lt;/code&gt; is the name of the version-control backend being defined and &lt;code&gt;METHOD&lt;/code&gt; is a backend API method. The relevant methods are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: given a recipe and a commit object, clone the repository and attempt to check out the given commit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: given a recipe and a commit object, return whether the commit can be checked out offline, i.e., without fetching from the remote.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: given a recipe, &#34;normalize&#34; the repository (this generally means reverting it to a standard state, such as a clean working directory, but does not entail checking out any particular commit).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: given a recipe, fetch the latest version from its configured remote, if one is specified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: given a recipe, fetch the latest version from its configured upstream, if the package is forked.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: given a recipe, merge the latest version fetched from the configured remote, if any, to the local copy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: given a recipe, merge the latest version fetched from the configured upstream, if the package is forked, to the local copy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: given a recipe, push the current version of the repository to its configured remote, if one is specified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: given a recipe and a commit object, attempt to check out that commit in the repository for that recipe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: given a local repository name, return the commit object that is currently checked out, or nil if the local repository should not be included in a lockfile.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: given a recipe, return a good name for the local repository, or nil.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: return a list of keywords which are meaningful for this version-control backend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of these methods are highly interactive: they don&#39;t actually do anything without prompting you to confirm it, and very often they will offer you a number of different options to proceed (including starting a recursive edit and allowing you to do whatever you would like).&lt;/p&gt; &#xA;&lt;p&gt;Also, all of the methods in this section take &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;&lt;code&gt;straight.el&lt;/code&gt;-style recipes&lt;/a&gt;; see the section on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;defining VC backends&lt;/a&gt; in the developer manual for more details.&lt;/p&gt; &#xA;&lt;h4&gt;Git backend&lt;/h4&gt; &#xA;&lt;p&gt;These are the keywords meaningful for the &lt;code&gt;git&lt;/code&gt; backend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt;: the clone URL for the Git repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:host&lt;/code&gt;: either nil or one of the symbols &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, &lt;code&gt;bitbucket&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If nil, then &lt;code&gt;:repo&lt;/code&gt; should be a string which is the full URL of the target repository. For example:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host nil :type git&#xA;  :repo &#34;http://myhost.tld/repo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If non-nil, then &lt;code&gt;:repo&lt;/code&gt; should be a string &#34;username/repo&#34;, and the URL is constructed automatically. For example:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git&#xA;  :repo &#34;username/repo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt;: the name of the branch used for primary development, as a string. If your version lockfiles do not specify a commit to check out when the repository is cloned, then this branch is checked out, if possible. This branch is also viewed as the &#34;primary&#34; branch for the purpose of normalization and interaction with the remote.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:remote&lt;/code&gt;: the name to use for the Git remote. If the package is forked, this name is used for the upstream remote.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:nonrecursive&lt;/code&gt;: if non-nil, then submodules are not cloned. This is particularly important for the Emacsmirror recipe repository, which contains every known Emacs package in existence as submodules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:fork&lt;/code&gt;: the settings for a fork, if desired. This causes the &lt;code&gt;fetch-from-remote&lt;/code&gt; method to operate on the fork; you can use the &lt;code&gt;fetch-from-upstream&lt;/code&gt; method to operate on the upstream instead.&lt;/p&gt; &lt;p&gt;Note: the following section assumes &lt;code&gt;straight-host-usernames&lt;/code&gt; has a value of:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;&#39;((github    . &#34;githubUser&#34;)&#xA;  (gitlab    . &#34;gitlabUser&#34;)&#xA;  (bitbucket . &#34;bitbucketUser&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Its value may be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;t&lt;/code&gt;: Look up the username in &lt;code&gt;straight-host-usernames&lt;/code&gt;. Inherit the repository name from the upstream repository. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;githubUser/repo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a string (optionally ending with &#34;/&#34;): Use the string as the username. Inherit repository name from the upstream repository. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork &#34;user&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;user/repo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a string starting with &#34;/&#34;: Look up the username in &lt;code&gt;straight-host-usernames&lt;/code&gt;. Use the string as the repository name. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork &#34;/renamed&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;githubUser/renamed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a string with both the recipe and repository specified: Use string as the &lt;code&gt;:repo&lt;/code&gt; value for the fork. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork &#34;user/renamed&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;user/renamed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a plist: The allowed keywords are &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;, &lt;code&gt;:branch&lt;/code&gt;, and &lt;code&gt;:remote&lt;/code&gt;. The same rules as above apply for the &lt;code&gt;:repo&lt;/code&gt; string. Likewise, if the &lt;code&gt;:host&lt;/code&gt; is overridden and the &lt;code&gt;:repo&lt;/code&gt; does not provide the username, it is looked up in &lt;code&gt;straight-host-usernames&lt;/code&gt;. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork (:host gitlab))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;gitlabUser/repo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork (:host gitlab :repo &#34;/renamed&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;gitlabUser/renamed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;( :package &#34;package&#34; :host github :type git :repo &#34;upstream/repo&#34;&#xA;  :fork (:host gitlab :repo &#34;user&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;computes the fork&#39;s &lt;code&gt;:repo&lt;/code&gt; value as &lt;code&gt;user/repo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:depth&lt;/code&gt;: either the symbol &lt;code&gt;full&lt;/code&gt; or an integer. If &lt;code&gt;full&lt;/code&gt;, then the repository is cloned with its whole history. If an integer &lt;code&gt;N&lt;/code&gt;, then the repository is cloned with the option &lt;code&gt;--depth N&lt;/code&gt;. This works even when a commit is specified (e.g. by version lockfiles). The default value is &lt;code&gt;full&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:protocol&lt;/code&gt;: If non-nil, force this protocol to be used when interacting with the remote repository. Takes the same values as &lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This section tells you how the &lt;code&gt;git&lt;/code&gt; backend, specifically, implements the version-control backend API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clone&lt;/code&gt;: clones the repository, including submodules if &lt;code&gt;:nonrecursive&lt;/code&gt; is not provided. Checks out the commit specified in your revision lockfile, or the &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt; configuration, if given), or &lt;code&gt;origin/HEAD&lt;/code&gt;. If a &lt;code&gt;:fork&lt;/code&gt; is specified, also fetches from the upstream.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commit-present-p&lt;/code&gt;: checks if the commit SHA is among the revisions that are present locally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: verifies that remote URLs are set correctly, that no merge is in progress, that the worktree is clean, and that the primary &lt;code&gt;:branch&lt;/code&gt; (from the &lt;code&gt;:fork&lt;/code&gt; configuration, if given) is checked out.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch-from-remote&lt;/code&gt;: checks that remote URLs are set correctly, then fetches from the primary remote (the fork, if the package is forked).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch-from-upstream&lt;/code&gt;: checks that remote URLs are set correctly, then fetches from the upstream remote. If the package is not a fork, does nothing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge-from-remote&lt;/code&gt;: performs normalization, then merges from the primary remote (the fork, if the package is forked) into the primary local &lt;code&gt;:branch&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge-from-upstream&lt;/code&gt;: performs normalization, then merges from the upstream remote into the primary local &lt;code&gt;:branch&lt;/code&gt;. If the package is not a fork, does not attempt to merge.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;push-to-remote&lt;/code&gt;: performs normalization, pulls from the primary remote if necessary, and then pushes if necessary. This operation acts on the fork, if the package is forked.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;check-out-commit&lt;/code&gt;: verifies that no merge is in progress and that the worktree is clean, then resets the worktree to the specified commit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get-commit&lt;/code&gt;: returns HEAD as a 40-character string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;local-repo-name&lt;/code&gt;: if &lt;code&gt;:host&lt;/code&gt; is non-nil, then &lt;code&gt;:repo&lt;/code&gt; will be of the form &#34;username/repository&#34;, and &#34;repository&#34; is used. Otherwise, if the URL is of the form &lt;code&gt;.../&amp;lt;something&amp;gt;.git&lt;/code&gt;, then &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt; is used. Otherwise, nil is returned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: see the list of keywords above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can customize the following user options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;: the name to use for the primary remote, or the upstream remote if the package is forked. Defaults to &#34;origin&#34;. The &lt;code&gt;:remote&lt;/code&gt; keyword may be used to override the value of this variable on a per-repository basis.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-fork-name&lt;/code&gt;: the name to use for the fork remote, if the package is forked. Defaults to &#34;fork&#34;. The &lt;code&gt;:remote&lt;/code&gt; keyword may be used to override the value of this variable on a per-repository basis.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;: the default protocol to use for automatically generated URLs when &lt;code&gt;:host&lt;/code&gt; is non-nil. It can be either &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;ssh&lt;/code&gt;, and defaults to &lt;code&gt;https&lt;/code&gt; because this requires less work to set up.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-force-protocol&lt;/code&gt;: if this is non-nil, then HTTPS and SSH URLs are not treated as equivalent, so that bulk version-control operations will offer to re-set your remote URLs from HTTPS to SSH or vice versa, depending on the value of &lt;code&gt;straight-vc-git-default-protocol&lt;/code&gt;. This is nil by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-auto-fast-forward&lt;/code&gt;: if this is non-nil, pulling will quietly do fast-forward, to suppress asking for instructions on each package with updates, unless they&#39;re not trivial. Set to nil if you&#39;d prefer to inspect all changes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;: the default value for the &lt;code&gt;:depth&lt;/code&gt; keyword. It can be either the symbol &lt;code&gt;full&lt;/code&gt; or an integer, and defaults to &lt;code&gt;full&lt;/code&gt;. Setting this variable to a small integer will reduce the size of repositories. This variable affects all packages, even those whose versions are locked.&lt;/p&gt; &lt;p&gt;Please be careful with setting &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt;, which may break some packages&#39; installing processes such as &lt;code&gt;elfeed&lt;/code&gt; that depend on &lt;code&gt;org&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Deprecated &lt;code&gt;:upstream&lt;/code&gt; keyword&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; previously supported fork configuration in recipes using an &lt;code&gt;:upstream&lt;/code&gt; keyword rather than a &lt;code&gt;:fork&lt;/code&gt; keyword. For various reasons, this was more complex to handle, which is why the change was made. For backwards compatibility, the &lt;code&gt;:upstream&lt;/code&gt; keyword is still accepted, with the following behavior.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;straight.el&lt;/code&gt; processes a recipe which uses the &lt;code&gt;:upstream&lt;/code&gt; keyword, it moves the &lt;code&gt;:repo&lt;/code&gt;, &lt;code&gt;:host&lt;/code&gt;, and &lt;code&gt;:branch&lt;/code&gt; keywords from that sub-plist to the top level, and moves those top-level keywords to a new &lt;code&gt;:fork&lt;/code&gt; sub-plist. Then it sets the top-level and &lt;code&gt;:fork&lt;/code&gt; sub-plist values of &lt;code&gt;:remote&lt;/code&gt; to the values of the deprecated variables &lt;code&gt;straight-vc-git-upstream-remote&lt;/code&gt; (defaults to &#34;upstream&#34;) and &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; (defaults to &#34;origin&#34;), respectively.&lt;/p&gt; &#xA;&lt;p&gt;For backwards compatibility, if &lt;code&gt;straight-vc-git-primary-remote&lt;/code&gt; differs from its default value of &#34;origin&#34;, then its value is used in place of &lt;code&gt;straight-vc-git-default-remote-name&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Recipe lookup&lt;/h3&gt; &#xA;&lt;p&gt;If you only provide a symbol (package name) to &lt;code&gt;straight-use-package&lt;/code&gt;, then the recipe is looked up automatically. By default, &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt;, and &lt;a href=&#34;https://emacsmirror.net/&#34;&gt;Emacsmirror&lt;/a&gt; are searched for recipes, in that order. This means that one or more of them may need to be cloned. Recipe repositories are actually just the same as ordinary packages, except that their recipes specify &lt;code&gt;:build nil&lt;/code&gt;, so they are not symlinked or added to the &lt;code&gt;load-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that dependencies always use the default recipes, since the only information &lt;code&gt;straight.el&lt;/code&gt; gets about a package&#39;s dependencies are their names.&lt;/p&gt; &#xA;&lt;p&gt;This leads to a few interesting questions regarding requesting a package multiple times. For example, you might need to load two features using &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; that are provided from the same package, or one of the packages you have installed is also requested as a dependency by another package. &lt;code&gt;straight.el&lt;/code&gt; uses a number of heuristics to try to make these interactions as intuitive and painless as possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time a package is registered with &lt;code&gt;straight.el&lt;/code&gt;, its recipe (either the recipe that you provided, or the one that was looked up from a recipe repository) is recorded. In future registration, if you just provide the package name to &lt;code&gt;straight-use-package&lt;/code&gt;, the existing recipe is reused.&lt;/p&gt; &lt;p&gt;Note, however: &lt;em&gt;if&lt;/em&gt; you want to use a custom recipe for a given package, you must load it &lt;em&gt;before&lt;/em&gt; all of its dependencies. Otherwise, the package will first be registered as a dependency, using the default recipe.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package has already been registered with &lt;code&gt;straight.el&lt;/code&gt;, and you attempt to load it again with an explicit recipe which is different from the one previously registered, the new recipe is used but a warning is signalled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you attempt to register a package which shares a &lt;code&gt;:local-repo&lt;/code&gt; (either by default, or due to explicit specification) with a previously registered package, and the two packages specify different values for their version-control keywords (see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control backends&lt;/a&gt;), then the new recipe is used but a warning is signalled. If the repository was already cloned, this means the second recipe will have no effect.&lt;/p&gt; &lt;p&gt;But if the second recipe was fetched automatically from a recipe repository, all of its version-control keywords will be silently overwritten with the ones from the first recipe, to avoid conflicts (although if there are conflicts in other parts of the recipe, a warning will still be displayed).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Updating recipe repositories&lt;/h4&gt; &#xA;&lt;p&gt;As mentioned in the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#where-do-recipes-come-from&#34;&gt;conceptual overview&lt;/a&gt;, recipe repositories are just regular packages, with some extra code to look up recipes in the relevant local repository.&lt;/p&gt; &#xA;&lt;p&gt;This means that updating a recipe repository may be done the same way as updating a regular package, i.e. with &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;. A convenience command with interactive completion for recipe repositories, &lt;code&gt;straight-pull-recipe-repositories&lt;/code&gt;, is provided as well. You should use one of these if you find that a package isn&#39;t listed by &lt;code&gt;M-x straight-use-package&lt;/code&gt;—perhaps it was added recently.&lt;/p&gt; &#xA;&lt;p&gt;Note that there is currently some potentially surprising behavior if you update all packages at once using &lt;code&gt;M-x straight-pull-all&lt;/code&gt; or &lt;code&gt;M-x straight-merge-all&lt;/code&gt;, and this bulk update includes recipe repository updates: see &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/323&#34;&gt;#323&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customizing recipe repositories&lt;/h4&gt; &#xA;&lt;p&gt;The recipe repository system is designed to be extended. Firstly, you can control which recipe repositories are searched, and in what order of precedence, by customizing &lt;code&gt;straight-recipe-repositories&lt;/code&gt;. The default value is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-elpa melpa gnu-elpa-mirror emacsmirror)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;GNU ELPA&lt;/h5&gt; &#xA;&lt;p&gt;You can customize the following user options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-recipes-gnu-elpa-url&lt;/code&gt;: The Git URL to use for the &lt;code&gt;gnu-elpa&lt;/code&gt; recipe repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;: GNU ELPA uses a stupidly complex build system for no good reason, and it&#39;s unlikely to change any time soon. What this means for you is that you have to run the Elisp-powered Makefile of the GNU ELPA repository (which has a fatal bug last I checked, so you&#39;d have to patch it locally) &lt;em&gt;and&lt;/em&gt; have a full checkout of the Emacs source repository (more than 1GB) if you want all the packages to work correctly. To work around this problem, I maintain a &lt;a href=&#34;https://github.com/emacs-straight&#34;&gt;full mirror of GNU ELPA on GitHub&lt;/a&gt;. (The tooling used to maintain this mirror is located &lt;a href=&#34;https://github.com/raxod502/gnu-elpa-mirror&#34;&gt;here&lt;/a&gt;.) By default, &lt;code&gt;straight.el&lt;/code&gt; retrieves packages from this mirror instead of the source repository; this behavior is controlled by the value of &lt;code&gt;straight-recipes-gnu-elpa-use-mirror&lt;/code&gt;. You must do any customization of this variable &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;straight.el&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;bootstrap&lt;/a&gt;. Note that setting the value of this user option to nil causes the default value of &lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-elpa melpa gnu-elpa emacsmirror)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Emacsmirror&lt;/h5&gt; &#xA;&lt;p&gt;You can customize the following user option:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;straight-recipes-emacsmirror-use-mirror&lt;/code&gt;: Yes, there is also a mirror for Emacsmirror. This is because the &lt;a href=&#34;https://github.com/emacsmirror/epkgs&#34;&gt;epkgs&lt;/a&gt; repository contains a (frequently updated) SQLite database in it, which means the Git repository takes &lt;em&gt;forever&lt;/em&gt; to clone (see &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/356&#34;&gt;#356&lt;/a&gt;). My solution to this problem is to generate a new repository which contains the information that &lt;code&gt;straight.el&lt;/code&gt; needs but which is much smaller. By default, &lt;code&gt;straight.el&lt;/code&gt; uses the official &lt;a href=&#34;https://github.com/emacsmirror/epkgs&#34;&gt;epkgs&lt;/a&gt; repository to find packages on Emacsmirror, but you can tell it to use my mirror by configuring the value of this variable to non-nil. You must do any customization of this variable &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;straight.el&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;bootstrap&lt;/a&gt;. Note that setting the value of this user option to non-nil causes the default value of &lt;code&gt;straight-recipe-repositories&lt;/code&gt; to shift to:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(org-elpa melpa gnu-elpa-mirror emacsmirror-mirror)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Defining new recipe repositories&lt;/h5&gt; &#xA;&lt;p&gt;To define a new recipe repository called &lt;code&gt;NAME&lt;/code&gt;, you should do the following things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Define a function &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt;, which takes a package name as a symbol and returns a recipe for that package if it is available, else nil. This is used for recipe lookup. This function may assume that the local repository for the recipe repository has already been cloned, and that &lt;code&gt;default-directory&lt;/code&gt; has been set to that local repository. This is used for recipe lookup during the course of &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the returned recipe is a backquoted list, it will be evaluated during &lt;code&gt;straight--convert-recipe&lt;/code&gt;. This is useful for specifying dynamic elements within the recipe such as system-specific build commands. For example, if &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; returns:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;&#39;`( package :type git :repo &#34;host/repo&#34;&#xA;    :pre-build ,(pcase system-type&#xA;                  (`berkeley-unix &#39;(&#34;gmake&#34;))&#xA;                  (_ &#39;(&#34;make&#34;)))&#xA;    :files (:defaults))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recipe is converted to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package :type git :repo &#34;host/repo&#34;&#xA; :pre-build (&#34;make&#34;)&#xA; :files (:defaults))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;on a &lt;code&gt;gnu/linux&lt;/code&gt; system, and:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package :type git :repo &#34;host/repo&#34;&#xA;         :pre-build (&#34;gmake&#34;)&#xA;         :files (:defaults))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;on a &lt;code&gt;berkely-unix&lt;/code&gt; system.&lt;/p&gt; &#xA;&lt;p&gt;The recipe could be read from a file in the recipe repository as well. In this case, the quote is &lt;em&gt;not&lt;/em&gt; included in the recipe, as &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; would make use of &lt;code&gt;read&lt;/code&gt;, which will return the literal Lisp object. For example, considering the following retrieval function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun straight-recipes-example-retrieve (name)&#xA;  (with-temp-buffer&#xA;    (insert-file-literally &#34;./recipes/example.recipe&#34;)&#xA;    (read (buffer-string))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recipe from above could be stored in the file, &lt;code&gt;example.recipe&lt;/code&gt;, as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;`( package :type git :repo &#34;host/repo&#34;&#xA;   :pre-build ,(pcase system-type&#xA;                 (`berkeley-unix &#39;(&#34;gmake&#34;))&#xA;                 (_ &#39;(&#34;make&#34;)))&#xA;   :files (:defaults))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define a function &lt;code&gt;straight-recipes-NAME-list&lt;/code&gt;, which takes no arguments and returns a list of strings representing packages for which recipes are available. It is permissible to return some strings for which recipes are actually not available, for performance reasons. However, this is discouraged. (The &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt; backend uses this functionality, since all files in the &lt;code&gt;recipes&lt;/code&gt; directory are potentially recipes, but only the Git-based ones can actually be used.)&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Define a function &lt;code&gt;straight-recipes-NAME-version&lt;/code&gt; which returns a non-nil value indicating the current version of the logic in your &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; function. Each time you change the logic, this version value must be changed. If this function is defined, then &lt;code&gt;straight.el&lt;/code&gt; automatically and transparently caches calls to &lt;code&gt;straight-recipes-NAME-retrieve&lt;/code&gt; persistently, using your version value (and its detection of modifications to the recipe repository) to decide when to invalidate the cache.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;straight-use-recipes&lt;/code&gt; with the recipe for your recipe repository. Make sure to include &lt;code&gt;:build nil&lt;/code&gt; in the recipe, unless you also want to use the recipe repository as an executable Emacs Lisp package. Alternatively, you can take the manual approach: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Call &lt;code&gt;straight-use-package-lazy&lt;/code&gt; with the recipe for your recipe repository.&lt;/li&gt; &#xA;   &lt;li&gt;Add the symbol for your recipe repository&#39;s name (the car of the recipe you provided, that is) to &lt;code&gt;straight-recipe-repositories&lt;/code&gt;, at the appropriate place.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Overriding recipes&lt;/h3&gt; &#xA;&lt;p&gt;You can always use &lt;code&gt;straight-register-package&lt;/code&gt; to specify a specific recipe for a package without cloning or building it, so that just in case that package is requested later (possibly as a dependency, or in somebody else&#39;s code) your recipe will be used instead of the default one. However, this does not help in the case that a specific recipe is passed to &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, it is obviously impossible to call &lt;code&gt;straight-register-package&lt;/code&gt; before &lt;code&gt;straight.el&lt;/code&gt; has been loaded, so you can&#39;t use it to specify a custom recipe for &lt;code&gt;straight.el&lt;/code&gt; itself.&lt;/p&gt; &#xA;&lt;p&gt;To remedy these difficulties, &lt;code&gt;straight.el&lt;/code&gt; provides a mechanism for specifically overriding the recipe for a particular package. You can use it by customizing &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, or by calling &lt;code&gt;straight-override-recipe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt; is an association list from &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-profile-system&#34;&gt;profile names&lt;/a&gt; to &lt;em&gt;override alists&lt;/em&gt;. If you don&#39;t care about the profile system, you can just use a single override specification, with the profile name nil. Each override alist is just a list of recipes. Because the car of a recipe is just the package name as a symbol, this list of recipes is also an alist whose keys are recipe names and whose values are the plists for those recipes.&lt;/p&gt; &#xA;&lt;p&gt;Even if an explicit recipe is supplied to &lt;code&gt;straight-use-package&lt;/code&gt;, the one given in &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will be used instead, if such a recipe is specified there.&lt;/p&gt; &#xA;&lt;p&gt;For convenience, you may add to &lt;code&gt;straight-recipe-overrides&lt;/code&gt; by passing a recipe to &lt;code&gt;straight-override-recipe&lt;/code&gt;. This will register it in the override alist for the current profile. Note that if you do this, you will probably want to explicitly set &lt;code&gt;straight-recipe-overrides&lt;/code&gt; to nil before bootstrapping &lt;code&gt;straight.el&lt;/code&gt;. This will make it so that if you remove a call to &lt;code&gt;straight-override-recipe&lt;/code&gt; from your init-file and then reload it, the entry will actually be removed from &lt;code&gt;straight-recipe-overrides&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Overriding the recipe for &lt;code&gt;straight.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;As was briefly mentioned earlier, you can actually override the recipe of &lt;code&gt;straight.el&lt;/code&gt; itself using &lt;code&gt;straight-recipe-overrides&lt;/code&gt;! How does this work? Well, it&#39;s basically black magic. If you want the details, go read the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;developer manual&lt;/a&gt;. All you need to know is that you can set &lt;code&gt;straight-recipe-overrides&lt;/code&gt;, and it will magically work. The only caveat is that if you change the &lt;code&gt;:local-repo&lt;/code&gt; for &lt;code&gt;straight.el&lt;/code&gt;, then you will also need to adjust the value of &lt;code&gt;bootstrap-file&lt;/code&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;bootstrap snippet&lt;/a&gt; accordingly, since otherwise your init-file will not know where to find &lt;code&gt;straight.el&lt;/code&gt;. (You must use &lt;code&gt;straight-recipe-overrides&lt;/code&gt; instead of &lt;code&gt;straight-override-recipe&lt;/code&gt;, since the latter function definition hasn&#39;t been loaded yet before &lt;code&gt;straight.el&lt;/code&gt; is installed and bootstrapped.)&lt;/p&gt; &#xA;&lt;p&gt;Here is the default recipe used for &lt;code&gt;straight.el&lt;/code&gt;, if you don&#39;t override it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight :type git :host github&#xA;          :repo ,(format &#34;%s/straight.el&#34; straight-repository-user)&#xA;          :files (&#34;straight*.el&#34;)&#xA;          :branch ,straight-repository-branch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that even though the bootstrap snippet references the &lt;code&gt;develop&lt;/code&gt; branch of &lt;code&gt;straight.el&lt;/code&gt;, the default recipe installs from &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If all you want to do is change which branch you are installing &lt;code&gt;straight.el&lt;/code&gt; from, simply customize the variable &lt;code&gt;straight-repository-branch&lt;/code&gt;, which is provided for this purpose. (Although using &lt;code&gt;straight-recipe-overrides&lt;/code&gt; will work just as well, at least until the recipe happens to be changed upstream and your init-file isn&#39;t updated.)&lt;/p&gt; &#xA;&lt;p&gt;Similarly, if all you want to do is switch to your own fork of &lt;code&gt;straight.el&lt;/code&gt; on GitHub, simply customize the variable &lt;code&gt;straight-repository-user&lt;/code&gt; to your GitHub username.&lt;/p&gt; &#xA;&lt;p&gt;There is one minor caveat to the above discussion. If your fork makes changes to the way in which recipes are interpreted, then those changes will not be effective during the interpretation of your own recipe for &lt;code&gt;straight.el&lt;/code&gt;. If you wish for them to be, then you will have to follow the same procedure that is followed in &lt;code&gt;straight.el&lt;/code&gt; itself for making changes to recipe interpretation. These details are outlined in the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;developer manual&lt;/a&gt;; see also &lt;code&gt;install.el&lt;/code&gt; for an explanation of this aspect of the bootstrap mechanism.&lt;/p&gt; &#xA;&lt;h3&gt;Interactive usage&lt;/h3&gt; &#xA;&lt;p&gt;The primary usage of &lt;code&gt;straight.el&lt;/code&gt; is expected to be in your init-file. For example, this is where you will need to put the bootstrap code as well as any packages that you always want to be installed. However, there are three important interactive uses of &lt;code&gt;straight.el&lt;/code&gt;: temporary installation of packages, various helpful utility functions, and &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;version control operations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install a package temporarily, run &lt;code&gt;M-x straight-use-package&lt;/code&gt;. All registered recipe repositories will be cloned, and you will be presented with a combined list of all recipes available from them. Simply select a package and it will be cloned, built, and loaded automatically. This does not affect future Emacs sessions.&lt;/p&gt; &#xA;&lt;p&gt;If you provide a prefix argument to &lt;code&gt;M-x straight-use-package&lt;/code&gt;, then you are presented with a list of registered recipe repositories. After you select one, you are shown a list of recipes specifically from that recipe repository. This is helpful if you do not want to clone all registered recipe repositories, or you have a particular recipe repository in mind.&lt;/p&gt; &#xA;&lt;p&gt;You can also call &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;, which has the same interface as &lt;code&gt;M-x straight-use-package&lt;/code&gt;, except that instead of the package being cloned, built, and loaded, its recipe is copied to the kill ring. If you are writing a custom recipe, this may be helpful, because you may be able to reuse parts of the existing recipe, particularly the &lt;code&gt;:files&lt;/code&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;Normally, packages are rebuilt automatically if needed, when Emacs restarts. If you for some reason want them to be rebuilt at another time, you can call &lt;code&gt;M-x straight-check-all&lt;/code&gt; to rebuild all packages that have been modified since their last build. Alternatively, use &lt;code&gt;M-x straight-rebuild-all&lt;/code&gt; to unconditionally rebuild all packages. Note that this will probably take a while. There are also &lt;code&gt;M-x straight-check-package&lt;/code&gt; and &lt;code&gt;M-x straight-rebuild-package&lt;/code&gt;, which allow you to select a particular package to check or rebuild.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you may use &lt;code&gt;M-x straight-prune-build&lt;/code&gt; in order to tell &lt;code&gt;straight.el&lt;/code&gt; to forget about any packages which were not registered since the last time you loaded your init-file. This may improve performance, although only slightly, and will clean up stale entries in the &lt;code&gt;build&lt;/code&gt; directory. You can call this function in your init-file if you really wish your filesystem to be as clean as possible, although it&#39;s not particularly recommended as the performance implications are uninvestigated. If you do call it in your init-file, be sure to only call it on a fully successful init; otherwise, an error during init will result in some packages&#39; build information being discarded, and they will need to be rebuilt next time.&lt;/p&gt; &#xA;&lt;p&gt;If you have enabled &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#customizing-how-packages-are-made-available&#34;&gt;autoloads caching&lt;/a&gt;, it is advisable to call &lt;code&gt;straight-prune-build&lt;/code&gt; occasionally, since otherwise the build cache may grow quite large over time.&lt;/p&gt; &#xA;&lt;h4&gt;Version control operations&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a number of highly interactive workflows for managing your package&#39;s local repositories, using the configured &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control backends&lt;/a&gt;. They are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-normalize-package&lt;/code&gt;: normalize a package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-normalize-all&lt;/code&gt;: normalize all packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-fetch-package&lt;/code&gt;: fetch from a package&#39;s configured remote; with prefix argument, then for forks also fetch from the upstream&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt;: fetch from the configured remotes of a package and all of its dependencies (including the dependencies of its dependencies); with prefix argment, then for forks also fetch from the upstream&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-fetch-all&lt;/code&gt;: fetch from all packages&#39; configured remotes; with prefix argument, then for forks also fetch from the upstreams&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-merge-package&lt;/code&gt;: merge the latest version fetched from a package&#39;s configured remote into the local copy; with prefix argument, then for forks also merge from the upstream&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;: merge the latest versions fetched from the configured remotes of a package and all of its dependencies (including the dependencies of its dependencies); with prefix argment, then for forks also merge from the upstreams&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-merge-all&lt;/code&gt;: merge the latest versions fetched from each package&#39;s configured remote into its local copy; with prefix argument, then for forks also merge from the upstreams&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-pull-package-and-deps&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-package-and-deps&lt;/code&gt; and &lt;code&gt;M-x straight-merge-package-and-deps&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-pull-all&lt;/code&gt;: combination of &lt;code&gt;M-x straight-fetch-all&lt;/code&gt; and &lt;code&gt;M-x straight-merge-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-push-package&lt;/code&gt;: push a package to its remote, if necessary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x straight-push-all&lt;/code&gt;: push all packages to their remotes, if necessary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the sections on &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-backends&#34;&gt;version-control backends&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#git-backend&#34;&gt;Git backend&lt;/a&gt; in particular for more information about the meanings of these operations.&lt;/p&gt; &#xA;&lt;h3&gt;Lockfile management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; determines your package management configuration from two, and only two, sources: the contents of your init-file, and your version lockfiles (which are optional). Your init-file specifies the configuration of &lt;code&gt;straight.el&lt;/code&gt; (for example, the values of &lt;code&gt;straight-recipe-overrides&lt;/code&gt; and &lt;code&gt;straight-default-vc&lt;/code&gt;), the packages you want to use, and their recipes. Your version lockfiles specify the exact revisions of each package, recipe repository, and even &lt;code&gt;straight.el&lt;/code&gt; itself. Together, they lock down your Emacs configuration to a state of no uncertainty: perfect reproducibility.&lt;/p&gt; &#xA;&lt;p&gt;To write the current revisions of all your packages into version lockfiles, run &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;. This will first check that &lt;code&gt;straight.el&lt;/code&gt; has an up-to-date account of what packages are installed by your init-file, then ensure that all your local changes are pushed (remember, we are aiming for perfect reproducibility!). If you wish to bypass these checks, provide a prefix argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: reloading your init-file must have the effect of running all of the same &lt;code&gt;straight.el&lt;/code&gt;-related functions again. For example, if you bootstrap &lt;code&gt;straight.el&lt;/code&gt; in a sub-file that you only &lt;code&gt;require&lt;/code&gt; instead of &lt;code&gt;load&lt;/code&gt;, then the reloading functionality will not work correctly and you may receive the message &lt;code&gt;Caches are still outdated; something is seriously wrong&lt;/code&gt;. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/437&#34;&gt;#437&lt;/a&gt; for discussion.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Version lockfiles are written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. By default, there will be one, called &lt;code&gt;default.el&lt;/code&gt;. It is recommended that you keep your version lockfiles under version control with the rest of your Emacs configuration. If you symlink your init-file into &lt;code&gt;~/.emacs.d&lt;/code&gt; from somewhere else, you should also make sure to symlink your version lockfiles into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. On a new machine, do this &lt;em&gt;before&lt;/em&gt; launching Emacs: that way, &lt;code&gt;straight.el&lt;/code&gt; can make sure to check out the specified revisions of each package when cloning them for the first time.&lt;/p&gt; &#xA;&lt;p&gt;To install the versions of the packages specified in your version lockfiles, run &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;. Thawing will interactively check for local changes before checking out the relevant revisions, so don&#39;t worry about things getting overwritten.&lt;/p&gt; &#xA;&lt;h4&gt;The profile system&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; has support for writing multiple version lockfiles, instead of just one. Why? Consider a large Emacs configuration such as &lt;a href=&#34;https://github.com/raxod502/radian&#34;&gt;Radian&lt;/a&gt;, &lt;a href=&#34;http://spacemacs.org/&#34;&gt;Spacemacs&lt;/a&gt;, or &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Prelude&lt;/a&gt;, which is used by many different people. There are two parts to the configuration that is actually loaded: the &#34;default&#34; part, and the local customizations that each user has added. Generally, these configurations have a mechanism for making local customizations without forking the entire project.&lt;/p&gt; &#xA;&lt;p&gt;So Radian will have some set of packages that it requires, and my local customizations of Radian have some other set of packages that they require. In order for me to maintain Radian, I need to be able to separate Radian&#39;s packages (which go into a versions lockfile in the Radian repository) from my own local packages (which go into a versions lockfile in my own private local dotfiles repository). &lt;code&gt;straight.el&lt;/code&gt; provides this ability through the &lt;em&gt;profile system&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The idea is that whenever a package is registered, either directly or as a dependency, it is associated with a given profile. Any given package can be associated with multiple profiles.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;straight-use-package&lt;/code&gt;, which profile the registered packages are associated with is determined by the value of &lt;code&gt;straight-current-profile&lt;/code&gt;, which defaults to nil. In Radian, for example, &lt;code&gt;straight-current-profile&lt;/code&gt; is bound to &lt;code&gt;radian&lt;/code&gt; while the Radian libraries are being loaded, and it is bound to &lt;code&gt;radian-local&lt;/code&gt; while the user&#39;s local customizations are being loaded. This results in Radian packages being associated with the &lt;code&gt;radian&lt;/code&gt; profile, and the user&#39;s local packages being associated with the &lt;code&gt;radian-local&lt;/code&gt; profile.&lt;/p&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;M-x straight-freeze-versions&lt;/code&gt;, one or more version lockfiles are written, according to the value of &lt;code&gt;straight-profiles&lt;/code&gt;. This variable is an association list whose keys are symbols naming profiles and whose values are filenames for the corresponding version lockfiles to be written into &lt;code&gt;~/.emacs.d/straight/versions&lt;/code&gt;. You should make sure that each potential value of &lt;code&gt;straight-current-profile&lt;/code&gt; has a corresponding entry in &lt;code&gt;straight-profiles&lt;/code&gt;, since otherwise some packages might not be written into your lockfiles.&lt;/p&gt; &#xA;&lt;p&gt;When customizing &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#overriding-recipes&#34;&gt;&lt;code&gt;straight-recipe-overrides&lt;/code&gt;&lt;/a&gt;, note that if multiple profiles are set to override the same recipe, then the last one listed in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence. Similarly, when using &lt;code&gt;M-x straight-thaw-versions&lt;/code&gt;, if different lockfiles specify revisions for the same local repository, the last one in &lt;code&gt;straight-profiles&lt;/code&gt; will take precedence.&lt;/p&gt; &#xA;&lt;h3&gt;Packages and the init-file&lt;/h3&gt; &#xA;&lt;p&gt;Package managers like &lt;code&gt;package.el&lt;/code&gt; store mutable state outside your init-file, including the set of packages that are installed. &lt;code&gt;straight.el&lt;/code&gt; does not do this, so it has a rather different way of determining what packages are installed. To &lt;code&gt;straight.el&lt;/code&gt;, a package is part of your Emacs configuration if it is passed to &lt;code&gt;straight-use-package&lt;/code&gt; when your init-file is loaded.&lt;/p&gt; &#xA;&lt;p&gt;Note that this means packages installed interactively (using &lt;code&gt;M-x straight-use-package&lt;/code&gt;) are not considered part of your Emacs configuration, since the invocation of &lt;code&gt;straight-use-package&lt;/code&gt; does not happen in your init-file.&lt;/p&gt; &#xA;&lt;p&gt;This raises an interesting question: if you &lt;em&gt;add&lt;/em&gt; a package to your init-file, how can you convince &lt;code&gt;straight.el&lt;/code&gt; that it really is part of your init-file, and not just part of a temporary &lt;code&gt;straight-use-package&lt;/code&gt; form that you evaluated ad-hoc? The answer is simple: &lt;em&gt;reload your entire init-file&lt;/em&gt;. That way, &lt;code&gt;straight.el&lt;/code&gt; will see whether or not that package is registered during your init-file.&lt;/p&gt; &#xA;&lt;p&gt;One might ask how &lt;code&gt;straight.el&lt;/code&gt; determines that you have finished loading your init-file. The answer is simple: &lt;code&gt;post-command-hook&lt;/code&gt; is used to execute code only after the current interactive operation has finished. The implementation of this concept is part of the &lt;em&gt;transaction system&lt;/em&gt; of &lt;code&gt;straight.el&lt;/code&gt;, and it is also used to amortize certain performance costs when many calls to &lt;code&gt;straight-use-package&lt;/code&gt; are made sequentially. However, since the transaction system (at least in recent versions of &lt;code&gt;straight.el&lt;/code&gt;) operates transparently, its details are relegated to the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#developer-manual&#34;&gt;developer manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to reproduce bugs&lt;/h3&gt; &#xA;&lt;h4&gt;... in other packages&lt;/h4&gt; &#xA;&lt;p&gt;One of the major reasons I wanted to write &lt;code&gt;straight.el&lt;/code&gt; was that existing package managers were not good for reproducing bugs. For instance, some of them would load all installed packages when the package manager was initialized! Obviously that is not acceptable for a &#34;minimal test case&#34;.&lt;/p&gt; &#xA;&lt;p&gt;On the contrary, bootstrapping &lt;code&gt;straight.el&lt;/code&gt; does not load anything except for &lt;code&gt;straight.el&lt;/code&gt; itself (the default recipe repositories are registered, but not cloned until needed). You should normally be loading &lt;code&gt;straight.el&lt;/code&gt; by means of the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#getting-started&#34;&gt;bootstrap snippet&lt;/a&gt;, but when you are in &lt;code&gt;emacs -Q&lt;/code&gt;, here is how you can initialize &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x load-file RET ~/.emacs.d/straight/repos/straight.el/bootstrap.el RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also do this from the command line, perhaps by creating an alias for it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ emacs -Q -l ~/.emacs.d/straight/repos/straight.el/bootstrap.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s say you are making a bug report for Projectile. To load just Projectile and all of its dependencies, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x straight-use-package RET projectile RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this will use the currently checked-out revisions of Projectile and all of its dependencies, so you should take note of those in order to make your bug report.&lt;/p&gt; &#xA;&lt;h4&gt;... in &lt;code&gt;straight.el&lt;/code&gt; itself&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;straight.el&lt;/code&gt; provides a macro, &lt;code&gt;straight-bug-report&lt;/code&gt;, to test &lt;code&gt;straight.el&lt;/code&gt; in a clean environment. If possible, please use this when creating bug reports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-bug-report&lt;/code&gt; accepts the following keyword value pairs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:pre-bootstrap (Form)...&lt;/code&gt; Forms evaluated before bootstrapping &lt;code&gt;straight.el&lt;/code&gt; e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq straight-repository-branch &#34;develop&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Note this example is already in the default bootstrapping code.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:post-bootstrap (Form)...&lt;/code&gt; Forms evaluated in the testing environment after boostrapping. e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(example :type git :host github))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:interactive Boolean&lt;/code&gt; If nil, the subprocess will immediately exit after the test. Output will be printed to &lt;code&gt;straight-bug-report--process-buffer&lt;/code&gt; Otherwise, the subprocess will be interactive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:preserve Boolean&lt;/code&gt; If t, the test directory is left in the directory stored in the variable `temporary-file-directory&#39;. Otherwise, it is immediately removed after the test is run.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:executable String&lt;/code&gt; Indicate the Emacs executable to launch. Defaults to &lt;code&gt;&#34;emacs&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:raw Boolean&lt;/code&gt; If t, the raw process output is sent to &lt;code&gt;straight-bug-report--process-buffer&lt;/code&gt;. Otherwise, it is formatted as markdown for submitting as an issue.&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-bug-report&#xA;  :pre-bootstrap&#xA;  (message &#34;before bootstrap&#34;)&#xA;  (message &#34;multiple forms allowed&#34;)&#xA;  :post-bootstrap&#xA;  (message &#34;after bootstrap&#34;)&#xA;  (message &#34;multiple forms allowed&#34;)&#xA;  (straight-use-package &#39;(my-broken-package))&#xA;  (message &#34;bye&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will run your test in a clean environment and produce a buffer with information you can paste directly into the issue body.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt; to develop packages&lt;/h3&gt; &#xA;&lt;p&gt;The workflow for developing a package using &lt;code&gt;straight.el&lt;/code&gt; is quite straightforward:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the package to your configuration as usual, via a call to &lt;code&gt;straight-use-package&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;M-x find-function&lt;/code&gt; or a similar command to jump to the code you wish to edit.&lt;/li&gt; &#xA; &lt;li&gt;Edit the code.&lt;/li&gt; &#xA; &lt;li&gt;Either evaluate the edited code using &lt;code&gt;M-x eval-buffer&lt;/code&gt;, &lt;code&gt;M-x eval-defun&lt;/code&gt;, or a similar command, or just restart Emacs to pick up your changes.&lt;/li&gt; &#xA; &lt;li&gt;When you are satisfied with your changes, use &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; or just Git directly in order to commit and possibly push them. I suggest using &lt;a href=&#34;https://github.com/magit/forge&#34;&gt;Forge&lt;/a&gt; to create pull requests directly from Emacs, with Magit integration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integration with other packages&lt;/h3&gt; &#xA;&lt;h4&gt;Integration with &lt;code&gt;use-package&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; installs a new keyword &lt;code&gt;:straight&lt;/code&gt; for &lt;code&gt;use-package&lt;/code&gt; which may be used to install packages via &lt;code&gt;straight.el&lt;/code&gt;. The algorithm is extremely simple. This:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;macroexpands (essentially) to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;el-patch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package el-patch&#xA;  :straight (:host github :repo &#34;raxod502/el-patch&#34;&#xA;             :branch &#34;develop&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA; &#39;(el-patch :host github :repo &#34;raxod502/el-patch&#34;&#xA;            :branch &#34;develop&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the feature you are requiring with &lt;code&gt;use-package&lt;/code&gt; is different from the package name, you can provide a full recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package tex-site&#xA;  :straight (auctex :host github&#xA;                    :repo &#34;emacsmirror/auctex&#34;&#xA;                    :files (:defaults (:exclude &#34;*.el.in&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you may also provide just the package name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package tex-site&#xA;  :straight auctex)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t provide &lt;code&gt;:straight&lt;/code&gt;, then by default nothing happens. You may customize &lt;code&gt;straight-use-package-by-default&lt;/code&gt; to make it so that &lt;code&gt;:straight t&lt;/code&gt; is assumed unless you explicitly override it with &lt;code&gt;:straight nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Previously, &lt;code&gt;straight.el&lt;/code&gt; used a different syntax for its &lt;code&gt;use-package&lt;/code&gt; integration. For backwards compatibility, you can use this syntax instead by customizing &lt;code&gt;straight-use-package-version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can disable &lt;code&gt;use-package&lt;/code&gt; integration entirely by customizing &lt;code&gt;straight-enable-use-package-integration&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&#34;Integration&#34; with &lt;code&gt;package.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;package.el&lt;/code&gt; will automatically insert a call to &lt;code&gt;package-initialize&lt;/code&gt; into your init-file as soon as Emacs starts, which is ridiculous. It will also do this when you perform any package management operation. A separate system inserts some &lt;code&gt;custom&lt;/code&gt; forms into your init-file when you install a package. &lt;code&gt;straight.el&lt;/code&gt; disables all of these &#34;features&#34; by setting &lt;code&gt;package-enable-at-startup&lt;/code&gt; to nil and enabling some advices. You can override this behavior by customizing &lt;code&gt;straight-enable-package-integration&lt;/code&gt;, however.&lt;/p&gt; &#xA;&lt;p&gt;To help avoid you shooting yourself in the foot by using both &lt;code&gt;:ensure&lt;/code&gt; and &lt;code&gt;:straight&lt;/code&gt; at the same time in a &lt;code&gt;use-package&lt;/code&gt; form (which would cause the same package to be installed twice using two different package managers), &lt;code&gt;straight.el&lt;/code&gt; will helpfully disable &lt;code&gt;:ensure&lt;/code&gt; whenever you include &lt;code&gt;:straight&lt;/code&gt; in a &lt;code&gt;use-package&lt;/code&gt; form. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/425&#34;&gt;#425&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Integration with Flycheck&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flycheck.org/en/latest/&#34;&gt;Flycheck&lt;/a&gt; sometimes creates temporary files in order to perform syntax checking. This is a problem for &lt;code&gt;straight.el&lt;/code&gt; because creation of temporary files will cause &lt;code&gt;straight.el&lt;/code&gt; to think that you have modified a package when you actually have not. (You might ask why &lt;code&gt;straight.el&lt;/code&gt; cannot recognize temporary files and ignore them. The answer is that for eager modification checking, all we see is that the directory mtime for the repository has been updated, and there&#39;s no way to disambiguate between temporary file shenanigans versus if you, say, deleted a file.)&lt;/p&gt; &#xA;&lt;p&gt;To work around the problem, a user option &lt;code&gt;straight-fix-flycheck&lt;/code&gt; is provided, disabled by default (for now). You can enable it &lt;em&gt;before&lt;/em&gt; loading &lt;code&gt;straight.el&lt;/code&gt;, and it will work around the Flycheck problem in the following way. When you first visit a buffer, any Flycheck checker that involves creation of temporary files will be inhibited automatically, although other checkers will still run. (In practice this means no byte-compilation errors for Emacs Lisp, but you still get Checkdoc errors.) However, after you make a change to the buffer (by typing, etc.) then all checkers will be re-enabled. This means that &lt;code&gt;straight.el&lt;/code&gt; won&#39;t think the package was modified unless you actually modify the buffer of a file inside it, which I think is a reasonable compromise.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/508&#34;&gt;#508&lt;/a&gt; for discussion.&lt;/p&gt; &#xA;&lt;h4&gt;Integration with Hydra&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/abo-abo/hydra/wiki/straight.el&#34;&gt;the Hydra wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; explains what it is doing in the echo area, like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Looking for cider recipe → Cloning melpa...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your terminal does not support Unicode characters nicely, you can customize &lt;code&gt;straight-arrow&lt;/code&gt; to display something else for the arrow.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;straight.el&lt;/code&gt; reports process output the &lt;code&gt;*straight-process*&lt;/code&gt; buffer. You can customize the name of this buffer via the &lt;code&gt;straight-process-buffer&lt;/code&gt; user option. If you want to hide this buffer by default, consider adding a leading space to the name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can prevent &lt;code&gt;straight.el&lt;/code&gt; from making any modifications to the filesystem (though it may still read) by customizing the user option &lt;code&gt;straight-safe-mode&lt;/code&gt; to non-nil. This may be useful for running tasks automatically in batch mode, to avoid multiple concurrent Emacs processes all making changes to the filesystem. For an example of how this feature may be used to safely implement asynchronous byte-compilation of the init-file on successful startup, see &lt;a href=&#34;https://github.com/raxod502/radian&#34;&gt;Radian&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer manual&lt;/h2&gt; &#xA;&lt;p&gt;This section tells you about all the interesting implementation details and design decisions that power &lt;code&gt;straight.el&lt;/code&gt; behind the scenes. It assumes you have already read the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#user-manual&#34;&gt;user manual&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#conceptual-overview&#34;&gt;conceptual overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More to be written here in future. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/51&#34;&gt;#51&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Low-level functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The function &lt;code&gt;straight-chase-emulated-symlink&lt;/code&gt; is provided in order for external packages to correctly handle the emulated symlinks created by &lt;code&gt;straight.el&lt;/code&gt; when &lt;code&gt;straight-use-symlinks&lt;/code&gt; is nil. See, for example, &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/520&#34;&gt;#520&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Trivia&lt;/h2&gt; &#xA;&lt;p&gt;This section has random, (possibly) interesting tidbits about &lt;code&gt;straight.el&lt;/code&gt; that don&#39;t fit in the other sections.&lt;/p&gt; &#xA;&lt;h3&gt;Comments and docstrings&lt;/h3&gt; &#xA;&lt;p&gt;How did I get that statistic about the percentage of &lt;code&gt;straight.el&lt;/code&gt; that is comments and docstrings? Simple: by abusing the syntax highlighting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(let ((lines (make-hash-table :test #&#39;equal)))&#xA;  (goto-char (point-min))&#xA;  (while (&amp;lt; (point) (point-max))&#xA;    (when (memq (face-at-point)&#xA;                &#39;(font-lock-comment-face&#xA;                  font-lock-doc-face))&#xA;      (puthash (line-number-at-pos) t lines))&#xA;    (forward-char))&#xA;  (* (/ (float (length (hash-table-keys lines)))&#xA;        (line-number-at-pos))&#xA;     100))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you will have to scroll through the entire buffer first, since &lt;code&gt;font-lock-mode&lt;/code&gt; computes syntax highlighting lazily.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please do! Development takes place on the &lt;code&gt;develop&lt;/code&gt; branch. You can switch to that branch with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq straight-repository-branch &#34;develop&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and base your pull requests from it. If you have an outstanding pull request whose features you would like to use in your configuration, there is full support for defining &lt;code&gt;straight.el&lt;/code&gt; as coming from any branch in any fork:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq straight-repository-user &#34;my-github-username&#34;)&#xA;(setq straight-repository-branch &#34;feat/my-cool-feature&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional information, please see &lt;a href=&#34;https://github.com/raxod502/contributor-guide&#34;&gt;the contributor guide for my projects&lt;/a&gt;. Note that &lt;code&gt;straight.el&lt;/code&gt; has not yet had an initial release, so you don&#39;t have to worry about a changelog.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;My init time got slower&lt;/h3&gt; &#xA;&lt;p&gt;Your first step should be to customize the value of &lt;code&gt;straight-check-for-modifications&lt;/code&gt;. The best setting is &lt;code&gt;(watch-files find-when-checking)&lt;/code&gt;; this is not enabled by default because it is impolite to spawn persistent background processes without asking, and because you must install &lt;a href=&#34;https://www.python.org/&#34;&gt;Python 3&lt;/a&gt; and &lt;a href=&#34;https://github.com/mattgreen/watchexec&#34;&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; for it to work. If you can&#39;t stand the extra dependencies and background process, consider the setting &lt;code&gt;(check-on-save find-when-checking)&lt;/code&gt; instead, which is just as fast but won&#39;t catch package modifications unless they are made within Emacs via the &lt;code&gt;save-buffer&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Even with lazy modification detection, as described above, &lt;code&gt;straight.el&lt;/code&gt; is not quite as fast as &lt;code&gt;package.el&lt;/code&gt; (by a few percentage points). There are some planned changes which will make &lt;code&gt;straight.el&lt;/code&gt; just as fast as &lt;code&gt;package.el&lt;/code&gt;, if not faster. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/9&#34;&gt;#9&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&#34;Could not find package in recipe repositories&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Assuming that the package you&#39;re trying to install actually exists, you need to update your recipe repositories (most likely MELPA, possibly Emacsmirror). See the next FAQ entry. This is like running &lt;code&gt;package-refresh-contents&lt;/code&gt; under &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another possibility is that you are providing &lt;code&gt;straight.el&lt;/code&gt; with a feature name rather than a package name. Features are what you load with &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;load&lt;/code&gt;, or find in files. For example, &lt;code&gt;org-agenda&lt;/code&gt; and &lt;code&gt;org-capture&lt;/code&gt; are features. Packages, on the other hand, can provide one or more features. They are what are listed on MELPA et al. or by &lt;code&gt;M-x straight-get-recipe&lt;/code&gt;. For example, &lt;code&gt;org&lt;/code&gt; and &lt;code&gt;org-contrib&lt;/code&gt; are packages.&lt;/p&gt; &#xA;&lt;p&gt;When you write &lt;code&gt;(use-package foo ...)&lt;/code&gt;, the &lt;code&gt;foo&lt;/code&gt; is a &lt;em&gt;feature&lt;/em&gt;, not a package. You can give a different package name &lt;code&gt;bar&lt;/code&gt; by saying &lt;code&gt;(use-package foo :straight bar)&lt;/code&gt;. And when you write &lt;code&gt;(straight-use-package &#39;bar)&lt;/code&gt;, the &lt;code&gt;bar&lt;/code&gt; is a &lt;em&gt;package&lt;/em&gt;, not a feature.&lt;/p&gt; &#xA;&lt;h3&gt;How do I update MELPA et al.?&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#version-control-operations&#34;&gt;&lt;code&gt;M-x straight-pull-package&lt;/code&gt;&lt;/a&gt;, like for any other package. &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#updating-recipe-repositories&#34;&gt;Read more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;My &lt;code&gt;use-package&lt;/code&gt; form isn&#39;t working properly&lt;/h3&gt; &#xA;&lt;p&gt;There are a number of common problems you might be encountering. Check out the following list to see if there is an easy fix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you&#39;re not using &lt;code&gt;:ensure&lt;/code&gt; or &lt;code&gt;use-package-always-ensure&lt;/code&gt;. Those are for &lt;code&gt;package.el&lt;/code&gt; and using them with &lt;code&gt;straight.el&lt;/code&gt; will produce weird results (namely both &lt;code&gt;package.el&lt;/code&gt; and &lt;code&gt;straight.el&lt;/code&gt; will be invoked for the same package).&lt;/li&gt; &#xA; &lt;li&gt;Make sure you know &lt;em&gt;both&lt;/em&gt; the name of the feature and the name of the package. These are usually the same but not always (packages may provide more than one feature, ...). You give &lt;code&gt;use-package&lt;/code&gt; the name of a &lt;em&gt;feature&lt;/em&gt;, not a package (despite the name of the macro). With &lt;code&gt;straight-use-package-by-default&lt;/code&gt; or with &lt;code&gt;:straight t&lt;/code&gt;, the default is to try installing a package by the same name as the feature. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you don&#39;t actually need to install a package, then pass &lt;code&gt;:straight nil&lt;/code&gt; to override &lt;code&gt;straight-use-package-by-default&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If the package name is different from the feature name, then pass &lt;code&gt;:straight &amp;lt;package-name&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If the package or your configurations aren&#39;t being loaded, you probably have something wrong with your usage of &lt;code&gt;:init&lt;/code&gt; and &lt;code&gt;:config&lt;/code&gt;. By default, the behavior of &lt;code&gt;use-package&lt;/code&gt; is unusably inconsistent. You must set either &lt;code&gt;use-package-always-defer&lt;/code&gt; (override with &lt;code&gt;:demand t&lt;/code&gt;) or &lt;code&gt;use-package-always-demand&lt;/code&gt; (override with &lt;code&gt;:defer t&lt;/code&gt;) to set a default for whether evaluating a &lt;code&gt;use-package&lt;/code&gt; form will load the package and your configurations. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you&#39;ve set a package to be deferred, you then need to make sure there&#39;s a way for it to get loaded when needed, for example by means of an autoload (either provided by the package, or set up automatically by &lt;code&gt;use-package&lt;/code&gt; via &lt;code&gt;:bind&lt;/code&gt;, or set up manually through &lt;code&gt;use-package&lt;/code&gt; via &lt;code&gt;:commands&lt;/code&gt;) or by an explicit &lt;code&gt;require&lt;/code&gt; in one of your custom commands.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I uninstall a package?&lt;/h3&gt; &#xA;&lt;p&gt;My first question is: do you really need to uninstall the package? Under &lt;code&gt;package.el&lt;/code&gt;, every package on disk gets loaded into Emacs, whether you asked for it or not. However, under &lt;code&gt;straight.el&lt;/code&gt;, only the packages you explicitly mention in your init-file get loaded into Emacs. So the &lt;em&gt;only&lt;/em&gt; problem with leaving a package on disk is that it takes up a little bit of disk space. (But the advantage is if you decide you want to use that package again later then you won&#39;t have to redownload it.)&lt;/p&gt; &#xA;&lt;p&gt;If you really want to uninstall a package, simply delete its local repository from &lt;code&gt;~/.emacs.d/straight/repos&lt;/code&gt;. To automate the process of deleting packages that aren&#39;t mentioned by your init-file, you can load the &lt;code&gt;straight-x&lt;/code&gt; library and try out the user-contributed function &lt;code&gt;straight-x-clean-unused-repos&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The wrong version of my package was loaded&lt;/h3&gt; &#xA;&lt;p&gt;To explain this problem, let us consider a concrete example. In &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/355&#34;&gt;this issue&lt;/a&gt;, a user found that the code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;company-lsp)&#xA;(straight-use-package &#39;eglot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;sometimes resulted in runtime errors because an old version of Flymake was being used.&lt;/p&gt; &#xA;&lt;p&gt;The root problem here is that you want the most recent version of Flymake to be installed by &lt;code&gt;straight.el&lt;/code&gt;, but Emacs also ships an older version, and that older version is getting loaded instead.&lt;/p&gt; &#xA;&lt;p&gt;The older version will be loaded if &lt;code&gt;(require &#39;flymake)&lt;/code&gt; (or similar) is invoked before &lt;code&gt;straight.el&lt;/code&gt; has made Flymake available (by means of &lt;code&gt;(straight-use-package &#39;flymake)&lt;/code&gt; or similar). But why would &lt;code&gt;straight.el&lt;/code&gt; not make Flymake available?&lt;/p&gt; &#xA;&lt;p&gt;The only way that &lt;code&gt;straight.el&lt;/code&gt; knows to make Flymake available is if either you manually invoke &lt;code&gt;straight-use-package&lt;/code&gt; in your init-file, or if one of the packages that you request in your init-file declares Flymake as a dependency. Now, any package that uses Flymake ought to declare it as a dependency. Thus, there should be no way for a package to load the Emacs-provided version of Flymake. However, sometimes package authors overlook this problem (it does not always cause an error, and sometimes package authors do not test exhaustively enough).&lt;/p&gt; &#xA;&lt;p&gt;In this case, the problem was that &lt;code&gt;company-lsp&lt;/code&gt; declared a dependency on &lt;code&gt;lsp-mode&lt;/code&gt;, and &lt;code&gt;lsp-mode&lt;/code&gt; used Flymake without declaring a dependency on &lt;code&gt;flymake&lt;/code&gt;. There are two ways to work around the problem:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Preferable) Fix &lt;code&gt;lsp-mode&lt;/code&gt; to declare a dependency on &lt;code&gt;flymake&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(Workaround) Manually invoke &lt;code&gt;(straight-use-package &#39;flymake)&lt;/code&gt; before &lt;code&gt;(straight-use-package &#39;company-lsp)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you test this yourself, you might find it difficult to reproduce the problem. That is because there is only an issue when Flymake is actually loaded, and this doesn&#39;t necessarily happen when invoking &lt;code&gt;(straight-use-package &#39;company-lsp)&lt;/code&gt; &lt;em&gt;unless&lt;/em&gt; &lt;code&gt;straight.el&lt;/code&gt; needs to rebuild the relevant packages (which includes byte-compilation, which sometimes means actually loading dependencies). Keep this in mind when testing.&lt;/p&gt; &#xA;&lt;p&gt;This problem commonly occurs with Org, since (1) Org is popular, (2) Emacs ships an obsolete version of Org, (3) many users want to use the up-to-date version, and (4) Org breaks backwards compatibility frequently. To solve it, simply make sure that you invoke &lt;code&gt;(straight-use-package &#39;org)&lt;/code&gt; before running any code that could load Org, including installing any package that lists it as a dependency.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/236&#34;&gt;this issue&lt;/a&gt; for discussion about ways of mitigating the bad UX of this situation.&lt;/p&gt; &#xA;&lt;h3&gt;I get &#34;could not read username/password&#34; errors&lt;/h3&gt; &#xA;&lt;p&gt;This is because &lt;code&gt;straight.el&lt;/code&gt; is not currently able to detect when SSH or Git asks for your username and/or password/passphrase and then pipe that prompt through to the minibuffer (&lt;a href=&#34;https://github.com/raxod502/straight.el/issues/334&#34;&gt;#334&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To work around the problem, set up &lt;a href=&#34;https://git-scm.com/docs/git-credential-cache&#34;&gt;git-credential-cache&lt;/a&gt; if you use HTTPS, and &lt;a href=&#34;https://www.ssh.com/ssh/agent&#34;&gt;ssh-agent&lt;/a&gt; if you use SSH. That way, you won&#39;t be prompted for your username/password. When setting up ssh-agent, be careful to make sure that the relevant environment variables get set in Emacs. This might be tricky since starting Emacs from the desktop (rather than from the command line) sometimes results in it not inheriting any environment variables from your shell.&lt;/p&gt; &#xA;&lt;h3&gt;How do I pin package versions or use only tagged releases?&lt;/h3&gt; &#xA;&lt;p&gt;This is a planned feature. In the meantime, contributors have proposed various workarounds. See &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/246&#34;&gt;#246&lt;/a&gt; and &lt;a href=&#34;https://github.com/raxod502/straight.el/issues/31&#34;&gt;#31&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;straight-x.el&lt;/code&gt; now contains an experimental solution. In order to use it you will need to add similar snippets to your Emacs configuration.&lt;/p&gt; &#xA;&lt;p&gt;First you need to add a new profile to &lt;code&gt;straight-profiles&lt;/code&gt; which also needs to be the last profile in the list. This should be done before you bootstrap &lt;code&gt;straight.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Tell straight.el about the profiles we are going to be using.&#xA;(setq straight-profiles&#xA;      &#39;((nil . &#34;default.el&#34;)&#xA;        ;; Packages which are pinned to a specific commit.&#xA;        (pinned . &#34;pinned.el&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After straight&#39;s install procedure you will need to add &lt;code&gt;straight-x.el&lt;/code&gt; and load the required commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(autoload #&#39;straight-x-pull-all &#34;straight-x&#34;)&#xA;(autoload #&#39;straight-x-freeze-versions &#34;straight-x&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A variable called &lt;code&gt;straight-x-pinned-packages&lt;/code&gt; has been defined in &lt;code&gt;straight-x.el&lt;/code&gt; and will contain your list of pinned packages.&lt;/p&gt; &#xA;&lt;p&gt;From now on, you can pin a package to a specific commit like in the following example which will pin &lt;code&gt;org-mode&lt;/code&gt; to the 9.2.3 release version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(let ((straight-current-profile &#39;pinned))&#xA;  (straight-use-package &#39;org)&#xA;  (straight-use-package &#39;org-contrib)&#xA;  ;; Pin org-mode version.&#xA;  (add-to-list &#39;straight-x-pinned-packages&#xA;               &#39;(&#34;org&#34; . &#34;924308a150ab82014b69c46c04d1ab71e874a2e6&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you invoke &lt;code&gt;straight-x-freeze-versions&lt;/code&gt; it will first write the default lockfile and then pinned lockfile which takes precedence over the default one if packages are thawed. &lt;code&gt;straight-x-pull-all&lt;/code&gt; will first invoke &lt;code&gt;straight-pull-all&lt;/code&gt; and then restore all pinned packages.&lt;/p&gt; &#xA;&lt;p&gt;You might want to assign the following aliases for more convenience:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defalias &#39;straight-pull-all #&#39;straight-x-pull-all)&#xA;(defalias &#39;straight-freeze-versions #&#39;straight-x-freeze-versions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please keep in mind that this is only a temporary solution and experimental!&lt;/p&gt; &#xA;&lt;h3&gt;How can I use the built-in version of a package?&lt;/h3&gt; &#xA;&lt;p&gt;To tell &lt;code&gt;straight.el&lt;/code&gt; that you want to use the version of Org shipped with Emacs, rather than cloning the upstream repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;(org :type built-in))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;:type&lt;/code&gt; is a keyword for &lt;code&gt;straight.el&lt;/code&gt;, not for &lt;code&gt;use-package&lt;/code&gt;. If you are using &lt;code&gt;use-package&lt;/code&gt;, then use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org :straight (:type built-in))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;Read more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;h3&gt;Jan 1, 2021&lt;/h3&gt; &#xA;&lt;p&gt;Breaking change: The previous behavior of the &lt;code&gt;:build&lt;/code&gt; keyword is now associated with the &lt;code&gt;:pre-build&lt;/code&gt; keyword. &lt;code&gt;:build&lt;/code&gt; is now used to specify build steps (generating autoloads and texinfo, byte/native compilation, etc). For more information on both of these keywords see &lt;a href=&#34;https://raw.githubusercontent.com/radian-software/straight.el/master/#the-recipe-format&#34;&gt;the recipe format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following customization variable names have changed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-disable-byte-compilation&lt;/code&gt; is now &lt;code&gt;straight-disable-compile&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;straight-disable-native-compilation&lt;/code&gt; is now &lt;code&gt;straight-disable-native-compile&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;April 19, 2020&lt;/h3&gt; &#xA;&lt;p&gt;Shallow clones are now compatible with lockfiles, so you can safely set &lt;code&gt;straight-vc-git-default-clone-depth&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; and get massive savings on network bandwidth and disk space.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsmirror/compat</title>
    <updated>2022-06-02T02:09:56Z</updated>
    <id>tag:github.com,2022-06-02:/emacsmirror/compat</id>
    <link href="https://github.com/emacsmirror/compat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compatibility Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;COMPATibility Library for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;Find here the source for compat.el, a forwards-compatibility library for (GNU) Emacs Lisp, versions 24.3 and newer.&lt;/p&gt; &#xA;&lt;p&gt;The intended audience of this library aren&#39;t day-to-day users, but package developers that wish to make use of newer functionality, not provided in older versions of Emacs, without breaking compatibility for users bound to specific Emacs releases.&lt;/p&gt; &#xA;&lt;p&gt;Version 24.3 is chosen as the oldest version, because this is the newest version on CentOS 7. It is intended to preserve compatibility for at least as the Centos 7 reaches &lt;a href=&#34;https://wiki.centos.org/About/Product&#34;&gt;EOL&lt;/a&gt;, 2024.&lt;/p&gt; &#xA;&lt;p&gt;If you are developing a package with compat.el in mind, consider loading &lt;code&gt;compat-help&lt;/code&gt; (on your system, not in a package) to get relevant notes inserted into the help buffers of functions that are implemented or advised in compat.el.&lt;/p&gt; &#xA;&lt;p&gt;Note that compat.el provides a few prefixed function, ie. functions with a &lt;code&gt;compat-&lt;/code&gt; prefix. These are used to provide extended functionality for commands that are already defined (&lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;assoc&lt;/code&gt;, ...). It might be possible to transform these into advised functions later on, so that the modified functionality is accessible without a prefix. Feedback on this point is appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;compat.el shouldn&#39;t be installed directly, but downloaded from &lt;a href=&#34;http://elpa.gnu.org/packages/compat.html&#34;&gt;GNU ELPA&lt;/a&gt;. If necessary, this can be done using M-x package-install-file in the current working directory.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The intended use-case for this library is for package developers to add as a dependency in the header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Package-Requires: ((emacs &#34;24.3&#34;) (compat &#34;28.1.1.1&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and later on a&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;compat)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will load all non-prefixed definitions (functions and macros with a leading &lt;code&gt;compat-&lt;/code&gt;). To load these, an additional&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;compat-XY) ; e.g. 26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will be necessary, to load compatibility code for Emacs version XY.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to subscribe to the &lt;a href=&#34;https://lists.sr.ht/~pkal/compat-announce&#34;&gt;compat-announce&lt;/a&gt; mailing list to be notified when new versions are released or relevant changes are made.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;As compat.el is distribed as part of GNU ELPA, and therefore requires a &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Copyright-Assignment.html&#34;&gt;copyright assignment&lt;/a&gt; to the FSF, for all non-trivial code contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Source code&lt;/h2&gt; &#xA;&lt;p&gt;Compat is developed on &lt;a href=&#34;https://sr.ht/~pkal/compat&#34;&gt;SourceHut&lt;/a&gt;. A restricted &lt;a href=&#34;https://github.com/phikal/compat.el&#34;&gt;GitHub&lt;/a&gt; mirror is also provided.&lt;/p&gt; &#xA;&lt;h2&gt;Bug and patches&lt;/h2&gt; &#xA;&lt;p&gt;Patches and comments can be sent to the &lt;a href=&#34;https://lists.sr.ht/~pkal/compat-devel&#34;&gt;development mailing list&lt;/a&gt;. Bug reports and issues should be directed to the &lt;a href=&#34;https://todo.sr.ht/~pkal/compat&#34;&gt;issue tracker&lt;/a&gt; (also accessible via &lt;a href=&#34;mailto:~pkal/compat@todo.sr.ht&#34;&gt;Email&lt;/a&gt;). &lt;a href=&#34;https://github.com/phikal/compat.el&#34;&gt;GitHub&lt;/a&gt; can also be used to submit patches (&#34;Pull Request&#34;). These may include issues in the compatibility code, missing definitions or performance issues.&lt;/p&gt; &#xA;&lt;p&gt;When contributing, make sure to provide test and use the existing tests defined in compat-test.el. These can be easily executed using the bundled Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Distribution&lt;/h2&gt; &#xA;&lt;p&gt;compat.el and all other files in this directory are distributed under the GPL, Version 3 (like Emacs itself).&lt;/p&gt;</summary>
  </entry>
</feed>