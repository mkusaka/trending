<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T02:08:13Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Malabarba/beacon</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/Malabarba/beacon</id>
    <link href="https://github.com/Malabarba/beacon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light that follows your cursor around so you don&#39;t lose it!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Beacon --- Never lose your cursor again&lt;/p&gt; &#xA;&lt;p&gt;This is a global minor-mode. Turn it on everywhere with: #+BEGIN_SRC emacs-lisp (beacon-mode 1) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;[[file:example-beacon.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Whenever the window scrolls a light will shine on top of your cursor so you know where it is.&lt;/p&gt; &#xA;&lt;p&gt;That‚Äôs it.&lt;/p&gt; &#xA;&lt;p&gt;** Customizations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The appearance of the beacon is configured by &lt;del&gt;beacon-size&lt;/del&gt; and &lt;del&gt;beacon-color&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The duration is configured by &lt;del&gt;beacon-blink-duration&lt;/del&gt; and &lt;del&gt;beacon-blink-delay&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To customize /when/ the beacon should blink at all, configure &lt;del&gt;beacon-blink-when-window-scrolls&lt;/del&gt;, &lt;del&gt;beacon-blink-when-window-changes&lt;/del&gt;, and &lt;del&gt;beacon-blink-when-point-moves&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To prevent the beacon from blinking only on specific situations configure &lt;del&gt;beacon-dont-blink-major-modes&lt;/del&gt;, &lt;del&gt;beacon-dont-blink-predicates&lt;/del&gt;, or &lt;del&gt;beacon-dont-blink-commands&lt;/del&gt;. You can also disable it only in specific buffers by doing &lt;del&gt;(setq-local beacon-mode nil)&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Beacon can also push the mark for you whenever point moves a long distance. For this, configure &lt;del&gt;beacon-push-mark&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/tsdh][Tassilo Horn]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you‚Äôd like to help too, just open a PR.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/emacs.d</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/purcell/emacs.d</id>
    <link href="https://github.com/purcell/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs configuration bundle with batteries included&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/purcell/emacs.d/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/emacs.d/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;A reasonable Emacs config&lt;/h1&gt; &#xA;&lt;p&gt;This is my emacs configuration tree, continually used and tweaked since 2000, and it may be a good starting point for other Emacs users, especially web developers. These days it&#39;s somewhat geared towards OS X, but it is known to also work on Linux and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Emacs itself comes with support for many programming languages. This config adds improved defaults and extended support for the following, listed in the approximate order of how much I use them, from most to least:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Haskell / Purescript / Elm / OCaml&lt;/li&gt; &#xA; &lt;li&gt;Ruby / Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;CSS / LESS / SASS / SCSS&lt;/li&gt; &#xA; &lt;li&gt;Javascript / Typescript / Coffeescript&lt;/li&gt; &#xA; &lt;li&gt;HTML / HAML / Markdown / Textile / ERB&lt;/li&gt; &#xA; &lt;li&gt;Common Lisp (with Slime)&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Clojure (with Cider and nRepl)&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Erlang&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In particular, there&#39;s a nice config for &lt;em&gt;autocompletion&lt;/em&gt; with &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company&lt;/a&gt;, and &lt;code&gt;flymake&lt;/code&gt; (re-using backends from &lt;a href=&#34;http://www.flycheck.org&#34;&gt;flycheck&lt;/a&gt;) is used to immediately highlight syntax errors in Ruby, Python, Javascript, Haskell and a number of other languages.&lt;/p&gt; &#xA;&lt;p&gt;LSP support is provided using &lt;code&gt;eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Emacs versions&lt;/h2&gt; &#xA;&lt;p&gt;The config should run on Emacs 25.1 or greater and is designed to degrade smoothly - see the CI build - but note that much newer versions are required for an increasing number of key packages, so to get full functionality you should use the latest Emacs version available to you.&lt;/p&gt; &#xA;&lt;p&gt;Some Windows users might need to follow &lt;a href=&#34;http://xn--9dbdkw.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html&#34;&gt;these instructions&lt;/a&gt; to get TLS (ie. SSL) support included in their Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Other requirements&lt;/h2&gt; &#xA;&lt;p&gt;To make the most of the programming language-specific support in this config, further programs will likely be required, particularly those that &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; uses to provide on-the-fly syntax checking.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install, clone this repo to &lt;code&gt;~/.emacs.d&lt;/code&gt;, i.e. ensure that the &lt;code&gt;init.el&lt;/code&gt; contained in this repo ends up at &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/purcell/emacs.d.git ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon starting up Emacs for the first time, further third-party packages will be automatically downloaded and installed. If you encounter any errors at that stage, try restarting Emacs, and possibly running &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; before doing so.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;Update the config with &lt;code&gt;git pull&lt;/code&gt;. You&#39;ll probably also want/need to update the third-party packages regularly too, because that&#39;s what I do, and the config assumes it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-list-packages&lt;/kbd&gt;, then &lt;kbd&gt;U&lt;/kbd&gt; followed by &lt;kbd&gt;x&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should usually restart Emacs after pulling changes or updating packages so that they can take effect. Emacs should usually restore your working buffers when you restart due to this configuration&#39;s use of the &lt;code&gt;desktop&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; packages.&lt;/p&gt; &#xA;&lt;h2&gt;Changing themes and adding your own customization&lt;/h2&gt; &#xA;&lt;p&gt;To add your own customization, use &lt;kbd&gt;M-x customize&lt;/kbd&gt;, &lt;kbd&gt;M-x customize-themes&lt;/kbd&gt; etc. and/or create a file &lt;code&gt;~/.emacs.d/lisp/init-local.el&lt;/code&gt; which looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;... your code here ...&#xA;&#xA;(provide &#39;init-local)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need initialisation code which executes earlier in the startup process, you can also create an &lt;code&gt;~/.emacs.d/lisp/init-preload-local.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to customize things more extensively, you should probably just fork the repo and hack away at the config to make it your own! Remember to regularly merge in changes from this repo, so that your config remains compatible with the latest package and Emacs versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that I cannot provide support for customised versions of this configuration.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support / issues&lt;/h2&gt; &#xA;&lt;p&gt;If you hit any problems, please first ensure that you are using the latest version of this code, and that you have updated your packages to the most recent available versions (see &#34;Updates&#34; above). If you still experience problems, go ahead and &lt;a href=&#34;https://github.com/purcell/emacs.d&#34;&gt;file an issue on the github project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;-Steve Purcell&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;üíù Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;üíº LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;‚úç sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;üê¶ @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/lsp-bridge</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/manateelazycat/lsp-bridge</id>
    <link href="https://github.com/manateelazycat/lsp-bridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fastest LSP client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/README.zh-CN.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;lsp-bridge&lt;/h1&gt; &#xA;&lt;p&gt;Lsp-bridge&#39;s goal is to become the fastest LSP client in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Lsp-bridge uses python&#39;s threading technology to build caches that bridge Emacs and LSP server. Lsp-bridge will provide smooth completion experience without compromise to slow down emacs&#39; performance.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/screenshot.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Python dependencies: &lt;a href=&#34;https://github.com/tkf/python-epc&#34;&gt;python-epc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Elisp dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/galeo/corfu-doc&#34;&gt;corfu-doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;orderless&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt; (need execute command &lt;code&gt;all-the-icons-install-fonts&lt;/code&gt; to install all-the-icons fonts)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tumashu/posframe&#34;&gt;posframe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrblevin/markdown-mode&#34;&gt;markdown-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;yasnippet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Clone or download this repository (path of the folder is the &lt;code&gt;&amp;lt;path-to-lsp-bridge&amp;gt;&lt;/code&gt; used below).&lt;/li&gt; &#xA; &lt;li&gt;Add following code in your ~/.emacs:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-lsp-bridge&amp;gt;&#34;)&#xA;&#xA;(require &#39;yasnippet)&#xA;(require &#39;lsp-bridge)&#xA;(require &#39;lsp-bridge-icon)        ;; show icons for completion items, optional&#xA;(require &#39;lsp-bridge-jdtls)       ;; provide Java third-party library jump and -data directory support, optional&#xA;(yas-global-mode 1)&#xA;&#xA;(require &#39;corfu-history)&#xA;(require &#39;lsp-bridge-orderless)   ;; make lsp-bridge support fuzzy match, optional&#xA;(corfu-history-mode t)&#xA;(global-lsp-bridge-mode)&#xA;(when (&amp;gt; (frame-pixel-width) 3000) (custom-set-faces &#39;(corfu-default ((t (:height 1.3))))))  ;; adjust default font height when running in HiDPI screen.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-def&lt;/code&gt;: jump to the definition&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-def-other-window&lt;/code&gt;: jump to the definition in other-window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-impl&lt;/code&gt;: jump to the implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-impl-other-window&lt;/code&gt;: jump to the implementation in other-window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-return-from-def&lt;/code&gt;: return to the location before calling &lt;code&gt;lsp-bridge-find-def&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-references&lt;/code&gt;: traverse across code references (forked from color-rg.el)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lookup-documentation&lt;/code&gt;: lookup documentation of symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-popup-documentation-scroll-up&lt;/code&gt;: scroll up popup document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-popup-documentation-scroll-down&lt;/code&gt;: scroll down popup document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-rename&lt;/code&gt;: rename symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-jump-to-next-diagnostic&lt;/code&gt;: Jump to the next diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-jump-to-prev-diagnostic&lt;/code&gt;: Jump to the previous diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-show-signature-help-in-minibuffer&lt;/code&gt;: show signature help in minibuffer manually (move cursor to parameters area will show signature help automatically)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-insert-common-prefix&lt;/code&gt;: insert common prefix of candidates&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-restart-process&lt;/code&gt;: restart lsp-bridge process (only used for development)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-popup-predicates&lt;/code&gt;: the predicate function for completion menu, completion menu popup after all the functions pass&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-stop-commands&lt;/code&gt;: completion menu will not popup if these commands are executed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-hide-characters&lt;/code&gt;: completion menu will not popup when cursor after those characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-diagnostics-fetch-idle&lt;/code&gt;: diagnostic delay, start pulling diagnostic information 1 second after stopping typing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-auto-import&lt;/code&gt;: automatic insert import code, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-diagnostics&lt;/code&gt;: code diagnostic, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-candidate-doc-preview&lt;/code&gt;: preview of the candidate document, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-signature-help&lt;/code&gt;: show function parameter in minibufer, disable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-org-babel-lang-list&lt;/code&gt;: list of language to support org-mode code block completion&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-disable-backup&lt;/code&gt;: forbidden version manage of emacs, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-log&lt;/code&gt;: enable the LSP message log, disable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;: enable program debugging, disable by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize language server configuration&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration of for each language server is stored at &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/tree/master/langserver&#34;&gt;lsp-bridge/langserver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Anyway you can customize server configuration with the following priority:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-get-lang-server-by-project&lt;/code&gt;: write your own function to get server configuration based on project-path and file-path, this function is nil by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-extension-list&lt;/code&gt;: load server configuration based on file extension, such as, we launch &lt;code&gt;volar&lt;/code&gt; server instead &lt;code&gt;javascript&lt;/code&gt; server when open *.vue file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-mode-list&lt;/code&gt;: load server configuration based on major-mode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add support for new language?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create configuration file under lsp-bridge/langserver, such as &lt;code&gt;pyright.json&lt;/code&gt; for pyright (windows user please uses &lt;code&gt;pyright_windows.json&lt;/code&gt;, macOS user please uses &lt;code&gt;pyright_darwin.json&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(mode . server_name)&lt;/code&gt; in &lt;code&gt;lsp-bridge-lang-server-list&lt;/code&gt;, such as &lt;code&gt;(python-mode . &#34;pyright&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add new mode-hook to &lt;code&gt;lsp-bridge-default-mode-hooks&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Welcome to send PR to help us improve support for LSP servers, thanks for your contribution!&lt;/p&gt; &#xA;&lt;h2&gt;Supported language servers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Index&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;LSP Server&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clangd/clangd&#34;&gt;clangd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c, c++&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;pip install pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixirLS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that the &lt;code&gt;elixir-ls&lt;/code&gt; release directory is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;make sure gopls in PATH, please do &lt;code&gt;ln -s ~/go/bin/gopls ~/.local/bin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;hls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server&#34;&gt;dart-analysis-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scala&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/typescript&#34;&gt;typescript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;typescript, javascript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/ocaml/ocaml-lsp&#34;&gt;ocamllsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ocaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang-ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;erlang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/latex-lsp/texlab&#34;&gt;texlab&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;latex&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that &lt;code&gt;org.eclipse.jdt.ls.product/target/repository/bin&lt;/code&gt; is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clojure-lsp/clojure-lsp&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;clojure&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/bash-lsp/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/johnsoncodehk/volar&#34;&gt;volar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;vue&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server&#34;&gt;sumneko&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure &lt;code&gt;bin&lt;/code&gt; under sumneko installation is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/chemzqm/wxml-languageserver&#34;&gt;wxml-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;wxml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-html-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;html&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-css-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;css&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;TODO:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Code action&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Show signature help with eldoc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features that won&#39;t be supported&lt;/h3&gt; &#xA;&lt;p&gt;The goal of lsp-bridge is to become the fastest LSP client in Emacs, not a complete implementation of LSP protocol.&lt;/p&gt; &#xA;&lt;p&gt;Emacs can do better for the following tasks, we will not reinvent the wheel in lsp-bridge:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Code formatting: each LSP server has its own formatting specification, we can gain finer control using Emacs&#39; builtin formatting tool.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting: &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;Tree-sitter&lt;/a&gt; is a wonderful incremental parsing library for syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;Xref: Xref&#39;s mechanism is simultaneously. lsp-bridge is completely asynchronous, recommended to use wrap function to uniformly key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Join development&lt;/h2&gt; &#xA;&lt;p&gt;The following is the framework of lsp-bridge:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/framework.png&#34;&gt; &#xA;&lt;p&gt;The following is the directory structure of the lsp-bridge project:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elisp main logic part that provides custom options and elisp functions for python sub-process calls like code jumping, renaming, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-epc.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Communicating with lsp-bridge python sub-process, which mainly implements elisp IPC to connect to python EPC for data serialization, sending, receiving, and deserialization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-ref.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Framework of code referencing, providing references viewing, batch renames, regex filtering of reference results, etc. The core code is forked from color-rg.el&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-orderless.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fuzzy search for completion items, i.e. for long candidate you do not need to type the word in correct order to get the correct item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-icon.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rendering the completion menu icons, which is used to distinguish different types of completion options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-jdtls.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provide java language third-party library jumping function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python main logic part that provides event loop, message scheduling and status management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/fileaction.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tracking the status of each file, processing LSP response messages, calling Emacs elisp function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/lspserver.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LSP message processing module, mainly to analyze, send and receive LSP messages, and ensure that the sequence of LSP requests conforms with the LSP protocol specification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/utils.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Utility functions of convenience for each module call&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/mergedeep.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON information merger is mainly used to send custom options to LSP server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/hanlder/&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The implementation of sending and receiving LSP message, where &lt;strong&gt;init&lt;/strong&gt;.py is a base class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;langserver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The configurations of the LSP servers, each server corresponding to a JSON file that defines the name of the server, language ID, starting command, options, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/&#34;&gt;LSP Specification&lt;/a&gt; and &lt;a href=&#34;https://manateelazycat.github.io/emacs/2022/05/12/lsp-bridge.html&#34;&gt;The Design of lsp-bridge&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;Then turn on option &lt;code&gt;lsp-bridge-enable-log&lt;/code&gt; and happy hacking! ;)&lt;/p&gt; &#xA;&lt;h2&gt;Report bug&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;emacs -q&lt;/code&gt; and load a minimal setup with only lsp-bridge to verify that the bug is reproducible. If &lt;code&gt;emacs -q&lt;/code&gt; works fine, probably something is wrong with your Emacs config.&lt;/p&gt; &#xA;&lt;p&gt;If the problem still exists, please report it &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/issues/new&#34;&gt;here&lt;/a&gt; with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content, it contains many clues that can help us locate the problem faster.&lt;/p&gt; &#xA;&lt;p&gt;If you get a segfault error, please use the following way to collect crash information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install gdb and turn on option &lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the command &lt;code&gt;lsp-bridge-stop-process&lt;/code&gt; to stop the current process&lt;/li&gt; &#xA; &lt;li&gt;Restart lsp-bridge, send issue with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content when next crash&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributor&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=manateelazycat/lsp-bridge&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>minad/consult</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/minad/consult</id>
    <link href="https://github.com/minad/consult" rel="alternate"></link>
    <summary type="html">&lt;p&gt;consult.el - Consulting completing-read&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: consult.el - Consulting completing-read #+author: Daniel Mendler #+language: en #+export_file_name: consult.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Consult: (consult). #+texinfo_dir_desc: Useful commands built on completing-read.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/consult.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/consult.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/consult.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/consult.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/consult&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/consult-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/consult&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/consult-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction :properties: :description: Why Consult? &lt;span&gt;üîö&lt;/span&gt; #+cindex: introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult provides practical commands based on the Emacs completion function [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][completing-read]]. Completion allows you to quickly select an item from a list of candidates. Consult offers in particular an advanced buffer switching command =consult-buffer= to switch between buffers and recently opened files. Furthermore Consult provides multiple search commands, an asynchronous =consult-grep= and =consult-ripgrep=, and the line-based search command =consult-line=. Some of the Consult commands are enhanced versions of built-in Emacs commands. For example the command =consult-imenu= presents a flat list of the Imenu with [[#live-previews][live preview]], [[#narrowing-and-grouping][grouping and narrowing]]. Please take a look at the [[#available-commands][full list of commands]].&lt;/p&gt; &#xA;&lt;p&gt;Consult is fully compatible with completion systems based on the standard Emacs =completing-read= API, notably the default completion system, [[https://github.com/minad/vertico][Vertico]], [[https://github.com/protesilaos/mct][Mct]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][Icomplete]] and [[https://github.com/raxod502/selectrum][Selectrum]].&lt;/p&gt; &#xA;&lt;p&gt;This package keeps the completion system specifics to a minimum. The ability of the Consult commands to work well with arbitrary completion systems is one of the main advantages of the package. Consult fits well into existing setups and it helps you to create a full completion environment out of small and independent components. Note that, if you use [[https://github.com/abo-abo/swiper#ivy][Ivy]] or [[https://github.com/emacs-helm/helm][Helm]], you probably don&#39;t need Consult, since both packages bring their own Consult-like functionality.&lt;/p&gt; &#xA;&lt;p&gt;You can combine the complementary packages [[https://github.com/minad/marginalia/][Marginalia]], [[https://github.com/oantolin/embark/][Embark]] and [[https://github.com/oantolin/orderless][Orderless]] with Consult. Marginalia enriches the completion display with annotations, e.g., documentation strings or file information. The versatile Embark package provides local actions, comparable to a context menu. These actions operate on the selected candidate in the minibuffer or at point in normal buffers. For example, when selecting from a list of files, Embark offers an action to delete the file. Additionally Embark offers a facility to collect completion candidates in a collect buffer. The section [[#embark-integration][Embark integration]] documents in greater detail how Consult and Embark work together.&lt;/p&gt; &#xA;&lt;p&gt;** Screenshots :noexport:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-grep [[https://github.com/minad/consult/blob/screenshots/consult-grep.gif?raw=true]] Fig. 1: Command =consult-git-grep=&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-imenu [[https://github.com/minad/consult/blob/screenshots/consult-imenu.png?raw=true]] Fig. 2: Command =consult-imenu=&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-line [[https://github.com/minad/consult/blob/screenshots/consult-line.png?raw=true]] Fig. 3: Command =consult-line=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available commands :properties: :custom_id: available-commands :description: Navigation, search, editing commands and more &lt;span&gt;üîö&lt;/span&gt; #+cindex: commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most Consult commands follow the meaningful naming scheme =consult-&#xA; &lt;thing&gt;&#xA;  =. Many commands implement a little known but convenient Emacs feature called &#34;future history&#34;, which guesses what input the user wants. At a command prompt type =M-n= and typically Consult will insert the symbol or thing at point into the input.&#xA; &lt;/thing&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP:&lt;/em&gt; If you have [[https://github.com/minad/marginalia][Marginalia]] annotators activated, type =M-x ^consult= to see all Consult commands with their abbreviated description. Alternatively, type =C-h a ^consult= to get an overview of all Consult variables and functions with their descriptions.&lt;/p&gt; &#xA;&lt;p&gt;** Virtual Buffers :properties: :description: Buffers, bookmarks and recent files &lt;span&gt;üîö&lt;/span&gt; #+cindex: virtual buffers&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-buffer #+findex: consult-buffer-other-window #+findex: consult-buffer-other-frame #+findex: consult-project-buffer #+findex: consult-recent-file #+findex: consult-bookmark&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-buffer= (=-other-window=, =-other-frame=): Enhanced version of =switch-to-buffer= with support for virtual buffers. Supports live preview of buffers and narrowing to the virtual buffer types. You can type =f SPC= in order to narrow to recent files. Press =SPC= to show ephemeral buffers. Supported narrowing keys: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;b Buffers&lt;/li&gt; &#xA;   &lt;li&gt;SPC Hidden buffers&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Modified buffers&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;f Files (Requires =recentf-mode=)&lt;/li&gt; &#xA;   &lt;li&gt;m Bookmarks&lt;/li&gt; &#xA;   &lt;li&gt;p Project&lt;/li&gt; &#xA;   &lt;li&gt;Custom [[#multiple-sources][other sources]] configured in =consult-buffer-sources=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=consult-project-buffer=: Variant of =consult-buffer= restricted to buffers and recent files of the current project. You can add custom sources to =consult-project-buffer-sources=. The command may prompt you for a project if you invoke it from outside a project.&lt;/li&gt; &#xA; &lt;li&gt;=consult-bookmark=: Select or create bookmark. To select bookmarks you might use the =consult-buffer= as an alternative, which can include a bookmark virtual buffer source. Note that =consult-bookmark= supports preview of bookmarks and narrowing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-recent-file=: Select from recent files with preview. You might prefer the powerful =consult-buffer= instead, which can include recent files as a virtual buffer source. The =recentf-mode= enables tracking of recent files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Editing :properties: :description: Commands useful for editing &lt;span&gt;üîö&lt;/span&gt; #+cindex: editing&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-yank-pop #+findex: consult-yank-from-kill-ring #+findex: consult-yank-replace #+findex: consult-kmacro&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-yank-from-kill-ring=: Enhanced version of =yank= to select an item from the =kill-ring=. The selected text previewed as overlay in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-yank-pop=: Enhanced version of =yank-pop= with DWIM-behavior, which either replaces the last =yank= by cycling through the =kill-ring=, or if there has not been a last =yank= consults the =kill-ring=. The selected text previewed as overlay in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-yank-replace=: Like =consult-yank-pop=, but always replaces the last =yank= with an item from the =kill-ring=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-kmacro=: Select macro from the macro ring and execute it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Register :properties: :description: Searching through registers and fast access &lt;span&gt;üîö&lt;/span&gt; #+cindex: register&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-register #+findex: consult-register-load #+findex: consult-register-store #+findex: consult-register-format #+findex: consult-register-window&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-register=: Select from list of registers. The command supports narrowing to register types and preview of marker positions. This command is useful to search the register contents. For quick access use the commands =consult-register-load=, =consult-register-store= or the built-in Emacs register commands.&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-format=: Set =register-preview-function= to this function for an enhanced register formatting. See the [[#use-package-example][example configuration]].&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-window=: Replace =register-preview= with this function for a better register window. See the [[#use-package-example][example configuration]].&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-load=: Utility command to quickly load a register. The command either jumps to the register value or inserts it.&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-store=: Improved UI to store registers depending on the current context with an action menu. With an active region, store/append/prepend the contents, optionally deleting the region when a prefix argument is given. With a numeric prefix argument, store/add the number. Otherwise store point, frameset, window or kmacro. Usage examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=M-&#39; x=: If no region is active, store point in register =x=. If a region is active, store the region in register =x=.&lt;/li&gt; &#xA;   &lt;li&gt;=M-&#39; M-w x=: Store window configuration in register =x=.&lt;/li&gt; &#xA;   &lt;li&gt;=C-u 100 M-&#39; x=: Store number in register =x=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Navigation :properties: :description: Mark rings, outlines and imenu &lt;span&gt;üîö&lt;/span&gt; #+cindex: navigation&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-goto-line #+findex: consult-mark #+findex: consult-global-mark #+findex: consult-outline #+findex: consult-imenu #+findex: consult-imenu-multi&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-goto-line=: Jump to line number enhanced with live preview. This is a drop-in replacement for =goto-line=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-mark=: Jump to a marker in the =mark-ring=. Supports live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-global-mark=: Jump to a marker in the =global-mark-ring=. Supports live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-outline=: Jump to a heading of the outline. Supports narrowing to a heading level, live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-imenu=: Jump to imenu item in the current buffer. Supports live preview, recursive editing and narrowing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-imenu-multi=: Jump to imenu item in project buffers, with the same major mode as the current buffer. Supports live preview, recursive editing and narrowing. This feature has been inspired by [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Search :properties: :description: Line search, grep and file search &lt;span&gt;üîö&lt;/span&gt; #+cindex: search&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-line #+findex: consult-line-multi #+findex: consult-multi-occur #+findex: consult-keep-lines #+findex: consult-focus-lines&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-line=: Enter search string and select from matching lines. Supports live preview and recursive editing. The symbol at point and the recent Isearch string are added to the &#34;future history&#34; and can be accessed by pressing =M-n=. When =consult-line= is bound to the =isearch-mode-map= and is invoked during a running Isearch, it will use the current Isearch string.&lt;/li&gt; &#xA; &lt;li&gt;=consult-line-multi=: Search across multiple buffers. By default search across project buffers. If invoked with a prefix argument search across all buffers. Behaves like =consult-line=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-multi-occur=: Replacement for =multi-occur= which uses =completing-read-multiple=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-keep-lines=: Replacement for =keep/flush-lines= which uses the current completion style for filtering the buffer. The function updates the buffer while typing. In particular =consult-keep-lines= can narrow down an exported Embark collect buffer further, relying on the same completion filtering as &lt;del&gt;completing-read&lt;/del&gt;. If the input begins with the negation operator, i.e., &lt;del&gt;! SPC&lt;/del&gt;, the filter matches the complement. If a region is active, the region restricts the filtering.&lt;/li&gt; &#xA; &lt;li&gt;=consult-focus-lines=: Temporarily hide lines by filtering them using the current completion style. Call with =C-u= prefix argument in order to show the hidden lines again. If the input begins with the negation operator, i.e., &lt;del&gt;! SPC&lt;/del&gt;, the filter matches the complement. In contrast to =consult-keep-lines= this function does not edit the buffer. If a region is active, the region restricts the filtering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Grep and Find :properties: :description: Searching through the filesystem &lt;span&gt;üîö&lt;/span&gt; #+cindex: grep #+cindex: find #+cindex: locate&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-grep #+findex: consult-ripgrep #+findex: consult-git-grep #+findex: consult-find #+findex: consult-locate&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-grep=, =consult-ripgrep=, =consult-git-grep=: Search for regular expression in files. Consult invokes Grep asynchronously, while you enter the search term. After at least =consult-async-min-input= characters, the search gets started. Consult splits the input string into two parts, if the first character is a punctuation character, like =#=. For example =#regexps#filter-string=, is split at the second =#=. The string =regexps= is passed to Grep. Note that Consult transforms Emacs regular expressions to expressions understand by the search program. Always use Emacs regular expressions at the prompt. If you enter multiple regular expressions separated by space only lines matching all regular expressions are shown. In order to match space literally, escape the space with a backslash. The =filter-string= is passed to the /fast/ Emacs filtering to further narrow down the list of matches. This is particularly useful if you are using an advanced completion style like orderless. =consult-grep= supports preview. If the =consult-project-function= returns non-nil, =consult-grep= searches the current project directory. Otherwise the =default-directory= is searched. If =consult-grep= is invoked with prefix argument =C-u M-s g=, you can specify the directory manually.&lt;/li&gt; &#xA; &lt;li&gt;=consult-find=, =consult-locate=: Find file by matching the path against a regexp. Like for =consult-grep,= either the project root or the current directory is the root directory for the search. The input string is treated similarly to =consult-grep=, where the first part is passed to find, and the second part is used for Emacs filtering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Compilation :properties: :description: Jumping to references and compilation errors &lt;span&gt;üîö&lt;/span&gt; #+cindex: compilation errors&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-compile-error #+findex: consult-flymake #+findex: consult-xref&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-compile-error=: Jump to a compilation error. Supports live preview narrowing and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-flymake=: Jump to flymake diagnostic. Supports live preview and recursive editing. The command supports narrowing. Press =e SPC=, =w SPC=, =n SPC= to only show errors, warnings and notes respectively.&lt;/li&gt; &#xA; &lt;li&gt;=consult-xref=: Integration with xref. This function can be set as =xref-show-xrefs-function= and =xref-show-definitions-function=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Histories :properties: :description: Navigating histories &lt;span&gt;üîö&lt;/span&gt; #+cindex: history&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-complex-command #+findex: consult-history #+findex: consult-isearch-history&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-complex-command=: Select a command from the =command-history=. This command is a =completing-read= version of =repeat-complex-command= and is also a replacement for the =command-history= command from chistory.el.&lt;/li&gt; &#xA; &lt;li&gt;=consult-history=: Insert a string from the current buffer history, for example the Eshell or Comint history. You can also invoke this command from the minibuffer. In that case =consult-history= uses the history stored in the =minibuffer-history-variable=. If you prefer =completion-at-point=, take a look at =cape-history= from the [[https://github.com/minad/cape][Cape]] package.&lt;/li&gt; &#xA; &lt;li&gt;=consult-isearch-history=: During an Isearch session, this command picks a search string from history and continues the search with the newly selected string. Outside of Isearch, the command allows you to pick a string from the history and starts a new Isearch. =consult-isearch-history= acts as a drop-in replacement for =isearch-edit-string=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Modes :properties: :description: Toggling minor modes and executing commands &lt;span&gt;üîö&lt;/span&gt; #+cindex: minor mode #+cindex: major mode&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-minor-mode-menu #+findex: consult-mode-command&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-minor-mode-menu=: Enable/disable minor mode. Supports narrowing to on/off/local/global modes by pressing =i/o/l/g SPC= respectively.&lt;/li&gt; &#xA; &lt;li&gt;=consult-mode-command=: Run a command from the currently active minor or major modes. Supports narrowing to local-minor/global-minor/major mode via the keys =l/g/m=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Org Mode :properties: :description: Org-specific commands &lt;span&gt;üîö&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-org-heading #+findex: consult-org-agenda&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-org-heading=: Similar to =consult-outline=, for Org buffers. Supports narrowing by heading level, priority and TODO state, as well as live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-org-agenda=: Jump to an agenda heading. Supports narrowing by heading level, priority and TODO state, as well as live preview and recursive editing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Miscellaneous :properties: :description: Various other useful commands &lt;span&gt;üîö&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-apropos #+findex: consult-file-externally #+findex: consult-completion-in-region #+findex: consult-theme #+findex: consult-man #+findex: consult-preview-at-point #+findex: consult-preview-at-point-mode&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-apropos=: Replacement for =apropos= with completion. As a better alternative, you can run =embark-export= from commands like =M-x= or =describe-symbol=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-man=: Find Unix man page, via Unix =apropos= or =man -k=. =consult-man= opens the selected man page using the Emacs =man= command.&lt;/li&gt; &#xA; &lt;li&gt;=consult-file-externally=: Select a file and open it externally, e.g.&amp;nbsp;using =xdg-open= on Linux.&lt;/li&gt; &#xA; &lt;li&gt;=consult-theme=: Select a theme and disable all currently enabled themes. Supports live preview of the theme while scrolling through the candidates.&lt;/li&gt; &#xA; &lt;li&gt;=consult-preview-at-point= and =consult-preview-at-point-mode=: Command and minor mode which previews the candidate at point in the =&lt;em&gt;Completions&lt;/em&gt;= buffer. This mode is relevant if you use [[https://git.sr.ht/~protesilaos/mct][Mct]] or the default =&lt;em&gt;Completions&lt;/em&gt;= UI.&lt;/li&gt; &#xA; &lt;li&gt;=consult-completion-in-region=: In case you don&#39;t use [[https://github.com/minad/corfu][Corfu]] as your in-buffer completion UI, this function can be set as =completion-in-region-function=. Then your minibuffer completion UI (e.g., Vertico or Icomplete) will be used for =completion-at-point=. Note that Selectrum provides its own variant of =consult-completion-in-region=. If you use Mct, you may want to try =mct-region-mode= instead. #+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src Instead of =consult-completion-in-region=, you may prefer to see the completions directly in the buffer as a small popup. In that case, I recommend either the [[https://github.com/minad/corfu][Corfu]] or the [[https://github.com/company-mode/company-mode][Company]] package. There is a technical limitation of =consult-completion-in-region= in combination with Lsp-mode or Eglot. The Lsp server relies on the input at point, in order to generate refined candidate strings. Since the completion is transferred from the original buffer to the minibuffer, the server does not receive the updated input. LSP completion works with Corfu or Company though, which perform the completion directly in the original buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Special features :properties: :description: Enhancements over built-in `completing-read&#39; &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult enhances =completing-read= with live previews of candidates, additional narrowing capabilities to candidate groups and asynchronously generated candidate lists. The internal =consult--read= function, which is used by most Consult commands, is a thin wrapper around =completing-read= and provides the special functionality. In order to support multiple candidate sources there exists the high-level function =consult--multi=. The architecture of Consult allows it to work with different completion systems in the backend, while still offering advanced features.&lt;/p&gt; &#xA;&lt;p&gt;** Live previews :properties: :description: Preview the currently selected candidate :custom_id: live-previews &lt;span&gt;üîö&lt;/span&gt; #+cindex: preview&lt;/p&gt; &#xA;&lt;p&gt;Some Consult commands support live previews. For example when you scroll through the items of =consult-line=, the buffer will scroll to the corresponding position. It is possible to jump back and forth between the minibuffer and the buffer to perform recursive editing while the search is ongoing.&lt;/p&gt; &#xA;&lt;p&gt;Consult enables previews by default. You can disable them by adjusting the =consult-preview-key= variable. Furthermore it is possible to specify keybindings which trigger the preview manually as shown in the [[#use-package-example][example configuration]]. The default setting of =consult-preview-key= is =any= which means that Consult triggers the preview /immediately/ on any key press when the selected candidate changes. You can configure each command individually with its own =:preview-key=. The following settings are possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic and immediate =&#39;any=&lt;/li&gt; &#xA; &lt;li&gt;Automatic and delayed =(list :debounce 0.5 &#39;any)=&lt;/li&gt; &#xA; &lt;li&gt;Manual and immediate =(kbd &#34;M-.&#34;)=&lt;/li&gt; &#xA; &lt;li&gt;Manual and delayed =(list :debounce 0.5 (kbd &#34;M-.&#34;))=&lt;/li&gt; &#xA; &lt;li&gt;Disabled =nil=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A safe recommendation is to leave automatic immediate previews enabled in general and disable the automatic preview only for commands, where the preview may be expensive due to file loading.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-recent-file consult-xref consult--source-bookmark consult--source-recent-file consult--source-project-recent-file ;; :preview-key &#39;(:debounce 0.2 any) ;; Option 1: Delay preview :preview-key (kbd &#34;M-.&#34;)) ;; Option 2: Manual preview #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In this case one may wonder what the difference is between using an Embark action on the current candidate in comparison to a manually triggered preview. The main difference is that the files opened by manual preview are closed again after the completion session. Furthermore during preview some functionality is disabled to improve the performance, see for example the customization variables =consult-preview-allowed-hooks= and =consult-preview-variables=. Files larger than =consult-preview-raw-size= are previewed literally without syntax highlighting and without changing the major mode. Delaying the preview is also useful for =consult-theme=, since the theme preview is slow. The delay results in a smoother UI experience.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Preview on any key press, but delay 0.5s (consult-customize consult-theme :preview-key &#39;(:debounce 0.5 any)) ;; Preview immediately on M-., on up/down after 0.5s, on any other key after 1s (consult-customize consult-theme :preview-key (list (kbd &#34;M-.&#34;) :debounce 0.5 (kbd &#34;&#xA; &lt;up&gt;&#xA;  &#34;) (kbd &#34;&#xA;  &lt;down&gt;&#xA;   &#34;) :debounce 1 &#39;any)) #+end_src&#xA;  &lt;/down&gt;&#xA; &lt;/up&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Narrowing and grouping :properties: :description: Restricting the completion to a candidate group :custom_id: narrowing-and-grouping &lt;span&gt;üîö&lt;/span&gt; #+cindex: narrowing&lt;/p&gt; &#xA;&lt;p&gt;Consult has special support for candidate groups. If the completion UI supports the grouping functionality, the UI separates the groups with thin lines and shows group titles. Grouping is useful if the list of candidates consists of candidates of multiple types or candidates from [[#multiple-sources][multiple sources]], like the =consult-buffer= command, which shows both buffers and recently opened files. Note that you can disable the group titles by setting the =:group= property of the corresponding command to nil using the =consult-customize= macro.&lt;/p&gt; &#xA;&lt;p&gt;By entering a narrowing prefix or by pressing a narrowing key it is possible to restrict the completion candidates to a certain candidate group. When you use the =consult-buffer= command, you can enter the prefix =b SPC= to restrict list of candidates to buffers only. If you press =DEL= afterwards, the full candidate list will be shown again. Furthermore a narrowing prefix key and a widening key can be configured which can be pressed to achieve the same effect, see the configuration variables =consult-narrow-key= and =consult-widen-key=.&lt;/p&gt; &#xA;&lt;p&gt;After pressing =consult-narrow-key=, the possible narrowing keys can be shown by pressing =C-h=. When pressing =C-h= after some prefix key, the =prefix-help-command= is invoked, which shows the keybinding help window by default. As a more compact alternative, there is the =consult-narrow-help= command which can be bound to a key, for example =?= or =C-h= in the =consult-narrow-map=, as shown in the [[#use-package-example][example configuration]]. If [[https://github.com/justbur/emacs-which-key][which-key]] is installed, the narrowing keys are automatically shown in the which-key window after pressing the =consult-narrow-key=.&lt;/p&gt; &#xA;&lt;p&gt;** Asynchronous search :properties: :description: Filtering asynchronously generated candidate lists &lt;span&gt;üîö&lt;/span&gt; #+cindex: asynchronous search&lt;/p&gt; &#xA;&lt;p&gt;Consult has support for asynchronous generation of candidate lists. This feature is used for search commands like =consult-grep=, where the list of matches is generated dynamically while the user is typing a regular expression. The grep process is executed in the background. When modifying the regular expression, the background process is terminated and a new process is started with the modified regular expression.&lt;/p&gt; &#xA;&lt;p&gt;The matches, which have been found, can then be narrowed using the installed Emacs completion-style. This can be powerful if you are using for example the =orderless= completion style.&lt;/p&gt; &#xA;&lt;p&gt;This two-level filtering is possible by splitting the input string. Part of the input string is treated as input to grep and part of the input is used for filtering. There are multiple splitting styles available, configured in &lt;del&gt;consult-async-split-styles-alist&lt;/del&gt;: =nil=, =comma=, =semicolon= and =perl=. The default splitting style is configured with the variable &lt;del&gt;consult-async-split-style&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the =comma= and =semicolon= splitting styles, the first word before the comma or semicolon is passed to grep, the remaining string is used for filtering. The =nil= splitting style does not perform any splitting, the whole input is passed to grep.&lt;/p&gt; &#xA;&lt;p&gt;The =perl= splitting style splits the input string at a punctuation character, using a similar syntax as Perl regular expressions.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=#defun=: Search for &#34;defun&#34; using grep.&lt;/li&gt; &#xA; &lt;li&gt;=#consult embark=: Search for both &#34;consult&#34; and &#34;embark&#34; using grep in any order.&lt;/li&gt; &#xA; &lt;li&gt;=#first.*second=: Search for &#34;first&#34; followed by &#34;second&#34; using grep.&lt;/li&gt; &#xA; &lt;li&gt;=#(consult|embark)=: Search for &#34;consult&#34; or &#34;embark&#34; using grep. Note the usage of Emacs-style regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=#defun#consult=: Search for &#34;defun&#34; using grep, filter with the word &#34;consult&#34;.&lt;/li&gt; &#xA; &lt;li&gt;=/defun/consult=: It is also possible to use other punctuation characters.&lt;/li&gt; &#xA; &lt;li&gt;=#to#=: Force searching for &#34;to&#34; using grep, since the grep pattern must be longer than =consult-async-min-input= characters by default.&lt;/li&gt; &#xA; &lt;li&gt;=#defun -- --invert-match#=: Pass argument =--invert-match= to grep.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Asynchronous processes like =find= and =grep= create an error log buffer =_&lt;em&gt;consult-async&lt;/em&gt;= (note the leading space), which is useful for troubleshooting. The prompt has a small indicator showing the process status:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:= the usual prompt colon, before input is provided.&lt;/li&gt; &#xA; &lt;li&gt;=*= with warning face, the process is running.&lt;/li&gt; &#xA; &lt;li&gt;=:= with success face, success, process exited with an error code of zero.&lt;/li&gt; &#xA; &lt;li&gt;=!= with error face, failure, process exited with a nonzero error code.&lt;/li&gt; &#xA; &lt;li&gt;=;= with error face, interrupted, for example if more input is provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Multiple sources :properties: :description: Combining candidates from different sources :custom_id: multiple-sources &lt;span&gt;üîö&lt;/span&gt; #+cindex: multiple sources&lt;/p&gt; &#xA;&lt;p&gt;Multiple synchronous candidate sources can be combined. This feature is used by the =consult-buffer= command to present buffer-like candidates in a single menu for quick access. By default =consult-buffer= includes buffers, bookmarks, recent files and project-specific buffers and files. It is possible to configure the list of sources via the =consult-buffer-sources= variable. Arbitrary custom sources can be defined.&lt;/p&gt; &#xA;&lt;p&gt;As an example, the bookmark source is defined as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar consult--source-bookmark `(:name &#34;Bookmark&#34; :narrow ?m :category bookmark :face consult-bookmark :history bookmark-history :items ,#&#39;bookmark-all-names :action ,#&#39;consult--bookmark-action)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Required source fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:category= Completion category.&lt;/li&gt; &#xA; &lt;li&gt;=:items= List of strings to select from or function returning list of strings. A list of cons cells is not supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional source fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:name= Name of the source, used for narrowing, group titles and annotations.&lt;/li&gt; &#xA; &lt;li&gt;=:narrow= Narrowing character or =(character . string)= pair.&lt;/li&gt; &#xA; &lt;li&gt;=:preview-key= Preview key or keys which trigger preview.&lt;/li&gt; &#xA; &lt;li&gt;=:enabled= Function which must return t if the source is enabled.&lt;/li&gt; &#xA; &lt;li&gt;=:hidden= When t candidates of this source are hidden by default.&lt;/li&gt; &#xA; &lt;li&gt;=:face= Face used for highlighting the candidates.&lt;/li&gt; &#xA; &lt;li&gt;=:annotate= Annotation function called for each candidate, returns string.&lt;/li&gt; &#xA; &lt;li&gt;=:history= Name of history variable to add selected candidate.&lt;/li&gt; &#xA; &lt;li&gt;=:default= Must be t if the first item of the source is the default value.&lt;/li&gt; &#xA; &lt;li&gt;=:action= Function called with the selected candidate.&lt;/li&gt; &#xA; &lt;li&gt;=:new= Function called with new candidate name, only if =:require-match= is nil.&lt;/li&gt; &#xA; &lt;li&gt;=:state= State constructor for the source, must return the state function.&lt;/li&gt; &#xA; &lt;li&gt;Other source fields can be added specifically to the use case.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The =:state= and =:action= fields of the sources deserve a longer explanation. The =:action= function takes a single argument and is only called after selection with the selected candidate, if the selection has not been aborted. This functionality is provided for convenience and easy definition of sources. The =:state= field is more general. The =:state= function is a constructor function without arguments, which can perform some setup necessary for the preview. It must return a closure which takes an ACTION and a CANDIDATE argument. See the docstring of =consult--with-preview= for more details about the ACTION argument.&lt;/p&gt; &#xA;&lt;p&gt;By default, =consult-buffer= previews buffers, bookmarks and files. Loading recent files, bookmarks or views can result in expensive operations. However it is possible to configure a manual preview as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult--source-bookmark consult--source-recent-file consult--source-project-recent-file :preview-key (kbd &#34;M-.&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Sources can be added directly to the =consult-buffer-source= list for convenience. For example views can be added to the list of virtual buffers from a library like &lt;a href=&#34;https://github.com/minad/bookmark-view/&#34;&gt;https://github.com/minad/bookmark-view/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure new bookmark-view source (add-to-list &#39;consult-buffer-sources (list :name &#34;View&#34; :narrow ?v :category &#39;bookmark :face &#39;font-lock-keyword-face :history &#39;bookmark-view-history :action #&#39;consult--bookmark-action :items #&#39;bookmark-view-names) &#39;append)&lt;/p&gt; &#xA;&lt;p&gt;;; Modify bookmark source, such that views are hidden (setq consult--source-bookmark (plist-put consult--source-bookmark :items (lambda () (bookmark-maybe-load-default-file) (mapcar #&#39;car (seq-remove (lambda (x) (eq #&#39;bookmark-view-handler (alist-get &#39;handler (cdr x)))) bookmark-alist))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Another useful source lists all Org buffers and lets you create new ones. One can create similar sources for other major modes, e.g., for Eshell.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar org-source (list :name &#34;Org Buffer&#34; :category &#39;buffer :narrow ?o :face &#39;consult-buffer :history &#39;buffer-name-history :state #&#39;consult--buffer-state :new (lambda (name) (with-current-buffer (get-buffer-create name) (insert &#34;#+title: &#34; name &#34;\n\n&#34;) (org-mode) (consult--buffer-action (current-buffer)))) :items (lambda () (mapcar #&#39;buffer-name (seq-filter (lambda (x) (eq (buffer-local-value &#39;major-mode x) &#39;org-mode)) (buffer-list))))))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;consult-buffer-sources &#39;org-source &#39;append) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the documentation of =consult-buffer= and of the internal =consult--multi= API. The =consult--multi= function can be used to create new multi-source commands, but is part of the internal API as of now, since some details may still change.&lt;/p&gt; &#xA;&lt;p&gt;** Embark integration :properties: :description: Actions, Grep/Occur-buffer export :custom_id: embark-integration &lt;span&gt;üîö&lt;/span&gt; #+cindex: embark&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Install the =embark-consult= package from MELPA, which provides Consult-specific Embark actions and the Occur buffer export.&lt;/p&gt; &#xA;&lt;p&gt;Embark is a versatile package which offers context dependent actions, comparable to a context menu. See the [[https://github.com/oantolin/embark][Embark manual]] for an extensive description of its capabilities.&lt;/p&gt; &#xA;&lt;p&gt;Actions are commands which can operate on the currently selected candidate (or target in Embark terminology). When completing files, for example the =delete-file= command is offered. With Embark you can execute arbitrary commands on the currently selected candidate via =M-x=.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore Embark provides the =embark-collect= command, which collects candidates and presents them in an Embark collect buffer, where further actions can be applied to them. A related feature is the =embark-export= command, which exports candidate lists to a buffer of a special type. For example in the case of file completion, a Dired buffer is opened.&lt;/p&gt; &#xA;&lt;p&gt;In the context of Consult, particularly exciting is the possibility to export the matching lines from =consult-line=, =consult-outline=, =consult-mark= and =consult-global-mark=. The matching lines are exported to an Occur buffer where they can be edited via the =occur-edit-mode= (press key =e=). Similarly, Embark supports exporting the matches found by =consult-grep=, =consult-ripgrep= and =consult-git-grep= to a Grep buffer, where the matches across files can be edited, if the [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] package is installed. These three workflows are symmetric.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-line= -&amp;gt; =embark-export= to =occur-mode= buffer -&amp;gt; =occur-edit-mode= for editing of matches in buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-grep= -&amp;gt; =embark-export= to =grep-mode= buffer -&amp;gt; =wgrep= for editing of all matches.&lt;/li&gt; &#xA; &lt;li&gt;=consult-find= -&amp;gt; =embark-export= to =dired-mode= buffer -&amp;gt; =wdired-change-to-wdired-mode= for editing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration :properties: :description: Example configuration and customization variables &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult can be installed from [[http://elpa.gnu.org/packages/consult.html][ELPA]] or [[https://melpa.org/#/consult][MELPA]] via the Emacs built-in package manager. Alternatively it can be directly installed from the development repository via other non-standard package managers.&lt;/p&gt; &#xA;&lt;p&gt;There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where additional configuration examples can be contributed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT:&lt;/em&gt; It is strongly recommended that you enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]] in your configuration. Consult relies on lambdas and lexical closures. For this reason many Consult-related snippets require lexical binding.&lt;/p&gt; &#xA;&lt;p&gt;** Use-package example :properties: :description: Configuration example based on use-package :custom_id: use-package-example &lt;span&gt;üîö&lt;/span&gt; #+cindex: use-package&lt;/p&gt; &#xA;&lt;p&gt;The Consult package only provides commands and does not add any keybindings or modes. Therefore the package is non-intrusive but requires a little setup effort. In order to use the Consult commands, it is advised to add keybindings for commands which are accessed often. Rarely used commands can be invoked via =M-x=. Feel free to only bind the commands you consider useful to your workflow. The configuration shown here relies on the =use-package= macro, which is a convenient tool to manage package configurations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where you can contribute additional configuration examples.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Example configuration for Consult (use-package consult ;; Replace bindings. Lazily loaded due by `use-package&#39;. :bind (;; C-c bindings (mode-specific-map) (&#34;C-c h&#34; . consult-history) (&#34;C-c m&#34; . consult-mode-command) (&#34;C-c k&#34; . consult-kmacro) ;; C-x bindings (ctl-x-map) (&#34;C-x M-:&#34; . consult-complex-command) ;; orig. repeat-complex-command (&#34;C-x b&#34; . consult-buffer) ;; orig. switch-to-buffer (&#34;C-x 4 b&#34; . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window (&#34;C-x 5 b&#34; . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame (&#34;C-x r b&#34; . consult-bookmark) ;; orig. bookmark-jump (&#34;C-x p b&#34; . consult-project-buffer) ;; orig. project-switch-to-buffer ;; Custom M-# bindings for fast register access (&#34;M-#&#34; . consult-register-load) (&#34;M-&#39;&#34; . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated) (&#34;C-M-#&#34; . consult-register) ;; Other custom bindings (&#34;M-y&#34; . consult-yank-pop) ;; orig. yank-pop (&#34;&#xA; &lt;help&gt;&#xA;   a&#34; . consult-apropos) ;; orig. apropos-command ;; M-g bindings (goto-map) (&#34;M-g e&#34; . consult-compile-error) (&#34;M-g f&#34; . consult-flymake) ;; Alternative: consult-flycheck (&#34;M-g g&#34; . consult-goto-line) ;; orig. goto-line (&#34;M-g M-g&#34; . consult-goto-line) ;; orig. goto-line (&#34;M-g o&#34; . consult-outline) ;; Alternative: consult-org-heading (&#34;M-g m&#34; . consult-mark) (&#34;M-g k&#34; . consult-global-mark) (&#34;M-g i&#34; . consult-imenu) (&#34;M-g I&#34; . consult-imenu-multi) ;; M-s bindings (search-map) (&#34;M-s d&#34; . consult-find) (&#34;M-s D&#34; . consult-locate) (&#34;M-s g&#34; . consult-grep) (&#34;M-s G&#34; . consult-git-grep) (&#34;M-s r&#34; . consult-ripgrep) (&#34;M-s l&#34; . consult-line) (&#34;M-s L&#34; . consult-line-multi) (&#34;M-s m&#34; . consult-multi-occur) (&#34;M-s k&#34; . consult-keep-lines) (&#34;M-s u&#34; . consult-focus-lines) ;; Isearch integration (&#34;M-s e&#34; . consult-isearch-history) :map isearch-mode-map (&#34;M-e&#34; . consult-isearch-history) ;; orig. isearch-edit-string (&#34;M-s e&#34; . consult-isearch-history) ;; orig. isearch-edit-string (&#34;M-s l&#34; . consult-line) ;; needed by consult-line to detect isearch (&#34;M-s L&#34; . consult-line-multi) ;; needed by consult-line to detect isearch ;; Minibuffer history :map minibuffer-local-map (&#34;M-s&#34; . consult-history) ;; orig. next-matching-history-element (&#34;M-r&#34; . consult-history)) ;; orig. previous-matching-history-element&#xA; &lt;/help&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Enable automatic preview at point in the *Completions* buffer. This is&#xA;;; relevant when you use the default completion UI.&#xA;:hook (completion-list-mode . consult-preview-at-point-mode)&#xA;&#xA;;; The :init configuration is always executed (Not lazy)&#xA;:init&#xA;&#xA;;; Optionally configure the register formatting. This improves the register&#xA;;; preview for `consult-register&#39;, `consult-register-load&#39;,&#xA;;; `consult-register-store&#39; and the Emacs built-ins.&#xA;(setq register-preview-delay 0.5&#xA;      register-preview-function #&#39;consult-register-format)&#xA;&#xA;;; Optionally tweak the register preview window.&#xA;;; This adds thin lines, sorting and hides the mode line of the window.&#xA;(advice-add #&#39;register-preview :override #&#39;consult-register-window)&#xA;&#xA;;; Use Consult to select xref locations with preview&#xA;(setq xref-show-xrefs-function #&#39;consult-xref&#xA;      xref-show-definitions-function #&#39;consult-xref)&#xA;&#xA;;; Configure other variables and modes in the :config section,&#xA;;; after lazily loading the package.&#xA;:config&#xA;&#xA;;; Optionally configure preview. The default value&#xA;;; is &#39;any, such that any key triggers the preview.&#xA;;; (setq consult-preview-key &#39;any)&#xA;;; (setq consult-preview-key (kbd &#34;M-.&#34;))&#xA;;; (setq consult-preview-key (list (kbd &#34;&amp;lt;S-down&amp;gt;&#34;) (kbd &#34;&amp;lt;S-up&amp;gt;&#34;)))&#xA;;; For some commands and buffer sources it is useful to configure the&#xA;;; :preview-key on a per-command basis using the `consult-customize&#39; macro.&#xA;(consult-customize&#xA; consult-theme&#xA; :preview-key &#39;(:debounce 0.2 any)&#xA; consult-ripgrep consult-git-grep consult-grep&#xA; consult-bookmark consult-recent-file consult-xref&#xA; consult--source-bookmark consult--source-recent-file&#xA; consult--source-project-recent-file&#xA; :preview-key (kbd &#34;M-.&#34;))&#xA;&#xA;;; Optionally configure the narrowing key.&#xA;;; Both &amp;lt; and C-+ work reasonably well.&#xA;(setq consult-narrow-key &#34;&amp;lt;&#34;) ;; (kbd &#34;C-+&#34;)&#xA;&#xA;;; Optionally make narrowing help available in the minibuffer.&#xA;;; You may want to use `embark-prefix-help-command&#39; or which-key instead.&#xA;;; (define-key consult-narrow-map (vconcat consult-narrow-key &#34;?&#34;) #&#39;consult-narrow-help)&#xA;&#xA;;; By default `consult-project-function&#39; uses `project-root&#39; from project.el.&#xA;;; Optionally configure a different project root function.&#xA;;; There are multiple reasonable alternatives to chose from.&#xA;;;;; 1. project.el (the default)&#xA;;; (setq consult-project-function #&#39;consult--default-project--function)&#xA;;;;; 2. projectile.el (projectile-project-root)&#xA;;; (autoload &#39;projectile-project-root &#34;projectile&#34;)&#xA;;; (setq consult-project-function (lambda (_) (projectile-project-root)))&#xA;;;;; 3. vc.el (vc-root-dir)&#xA;;; (setq consult-project-function (lambda (_) (vc-root-dir)))&#xA;;;;; 4. locate-dominating-file&#xA;;; (setq consult-project-function (lambda (_) (locate-dominating-file &#34;.&#34; &#34;.git&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Custom variables :properties: :description: Short description of all customization settings &lt;span&gt;üîö&lt;/span&gt; #+cindex: customization&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP:&lt;/em&gt; If you have [[https://github.com/minad/marginalia][Marginalia]] installed, type =M-x customize-variable RET ^consult= to see all Consult-specific customizable variables with their current values and abbreviated description. Alternatively, type =C-h a ^consult= to get an overview of all Consult variables and functions with their descriptions.&lt;/p&gt; &#xA;&lt;p&gt;| Variable | Description | |----------------------------------+-------------------------------------------------------| | consult-after-jump-hook | Functions to call after jumping to a location | | consult-async-input-debounce | Input debounce for asynchronous commands | | consult-async-input-throttle | Input throttle for asynchronous commands | | consult-async-min-input | Minimum numbers of letters needed for async process | | consult-async-refresh-delay | Refresh delay for asynchronous commands | | consult-async-split-style | Splitting style used for async commands | | consult-async-split-styles-alist | Available splitting styles used for async commands | | consult-bookmark-narrow | Narrowing configuration for =consult-bookmark= | | consult-buffer-filter | Filter for =consult-buffer= | | consult-buffer-sources | List of virtual buffer sources | | consult-find-args | Command line arguments for find | | consult-fontify-max-size | Buffers larger than this limit are not fontified | | consult-fontify-preserve | Preserve fontification for line-based commands. | | consult-git-grep-args | Command line arguments for git-grep | | consult-goto-line-numbers | Show line numbers for =consult-goto-line= | | consult-grep-max-columns | Maximal number of columns of the matching lines | | consult-grep-args | Command line arguments for grep | | consult-imenu-config | Mode-specific configuration for =consult-imenu= | | consult-line-numbers-widen | Show absolute line numbers when narrowing is active. | | consult-line-point-placement | Placement of the point used by =consult-line= | | consult-line-start-from-top | Start the =consult-line= search from the top | | consult-locate-args | Command line arguments for locate | | consult-man-args | Command line arguments for man | | consult-mode-command-filter | Filter for =consult-mode-command= | | consult-mode-histories | Mode-specific history variables | | consult-narrow-key | Narrowing prefix key during completion | | consult-preview-key | Keys which triggers preview | | consult-preview-allowed-hooks | List of =find-file= hooks to enable during preview | | consult-preview-max-count | Maximum number of files to keep open during preview | | consult-preview-max-size | Files larger than this size are not previewed | | consult-preview-raw-size | Files larger than this size are previewed in raw form | | consult-preview-variables | Alist of variables to bind during preview | | consult-project-buffer-sources | List of virtual project buffer sources | | consult-project-function | Function which returns current project root | | consult-register-prefix | Prefix string for register keys during completion | | consult-ripgrep-args | Command line arguments for ripgrep | | consult-themes | List of themes to be presented for selection | | consult-widen-key | Widening key during completion |&lt;/p&gt; &#xA;&lt;p&gt;** Fine-tuning of individual commands :properties: :alt_title: Fine-tuning :description: Fine-grained configuration for special requirements &lt;span&gt;üîö&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Consult supports fine-grained customization of individual commands. This configuration feature exists for experienced users with special requirements. There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where we collect further configuration examples.&lt;/p&gt; &#xA;&lt;p&gt;Commands and buffer sources allow flexible, individual customization by using the =consult-customize= macro. You can override any option passed to the internal =consult--read= API. The [[https://github.com/minad/consult/wiki][Consult wiki]] already contains a numerous useful configuration examples. Note that since =consult--read= is part of the internal API, options could be removed, replaced or renamed in future versions of the package.&lt;/p&gt; &#xA;&lt;p&gt;Useful options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:prompt= set the prompt string&lt;/li&gt; &#xA; &lt;li&gt;=:preview-key= set the preview key, default is =consult-preview-key=&lt;/li&gt; &#xA; &lt;li&gt;=:initial= set the initial input&lt;/li&gt; &#xA; &lt;li&gt;=:default= set the default value&lt;/li&gt; &#xA; &lt;li&gt;=:history= set the history variable symbol&lt;/li&gt; &#xA; &lt;li&gt;=:add-history= add items to the future history, for example symbol at point&lt;/li&gt; &#xA; &lt;li&gt;=:sort= enable or disable sorting&lt;/li&gt; &#xA; &lt;li&gt;=:group= set to nil to disable candidate grouping and titles.&lt;/li&gt; &#xA; &lt;li&gt;=:inherit-input-method= set to non-nil to inherit the input method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize ;; Disable preview for &lt;code&gt;consult-theme&#39; completely. consult-theme :preview-key nil ;; Set preview for &lt;/code&gt;consult-buffer&#39; to key &lt;code&gt;M-.&#39; consult-buffer :preview-key (kbd &#34;M-.&#34;) ;; For &lt;/code&gt;consult-line&#39; change the prompt and specify multiple preview ;; keybindings. Note that you should bind &#xA; &lt;s-up&gt;&#xA;   and &#xA;  &lt;s-down&gt;&#xA;    in the ;; &#xA;   &lt;code&gt;minibuffer-local-completion-map&#39; or &lt;/code&gt;vertico-map&#39; to the commands which ;; select the previous or next candidate. consult-line :prompt &#34;Search: &#34; :preview-key (list (kbd &#34;&#xA;   &lt;s-down&gt;&#xA;    &#34;) (kbd &#34;&#xA;    &lt;s-up&gt;&#xA;     &#34;))) #+end_src&#xA;    &lt;/s-up&gt;&#xA;   &lt;/s-down&gt;&#xA;  &lt;/s-down&gt;&#xA; &lt;/s-up&gt;&lt;/p&gt; &#xA;&lt;p&gt;The configuration values are evaluated at runtime, just before the completion session is started. Therefore you can use for example =thing-at-point= to adjust the initial input or the future hitory.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult-line :add-history (seq-some #&#39;thing-at-point &#39;(region symbol)))&lt;/p&gt; &#xA;&lt;p&gt;(defalias &#39;consult-line-thing-at-point &#39;consult-line)&lt;/p&gt; &#xA;&lt;p&gt;(consult-customize consult-line-thing-at-point :initial (thing-at-point &#39;symbol)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Generally it is possible to modify commands for your individual needs by the following techniques:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use =consult-customize= in order to change the command or source settings.&lt;/li&gt; &#xA; &lt;li&gt;Create your own wrapper function which passes modified arguments to the Consult functions.&lt;/li&gt; &#xA; &lt;li&gt;Create your own buffer [[#multiple-sources][multi sources]] for =consult-buffer=.&lt;/li&gt; &#xA; &lt;li&gt;Create advices to modify some internal behavior.&lt;/li&gt; &#xA; &lt;li&gt;Write or propose a patch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recommended packages :properties: :description: Related packages recommended for installation &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I use and recommend this combination of packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;consult: This package&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico][vertico]]: Fast and minimal vertical completion system&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][marginalia]]: Annotations for the completion candidates&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][embark and embark-consult]]: Action commands, which can act on the completion candidates&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][orderless]]: Completion style which offers flexible candidate filtering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There exist many other fine completion UIs beside Vertico, which are supported by Consult. Give them a try and find out which interaction model fits best for you!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The builtin completion UI, which pops up the =&lt;em&gt;Completions&lt;/em&gt;= buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][mct by Protesilaos Stavrou]]: Minibuffer and Completions in Tandem, which builds on the default completion UI.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/raxod502/selectrum][selectrum by Radon Rosborough]]: Alternative vertical completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/icomplete-vertical][icomplete-vertical by Omar Antol√≠n Camarena]]: Vertical completion system based on Icomplete. Icomplete-vertical is only needed for Emacs 27, built-in on Emacs 28.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can integrated Consult with special programs or with other packages in the wider Emacs ecosystem. You may want to install some of theses packages depending on your preferences and requirements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/yadex205/consult-ag][consult-ag]]: Support for the [[https://github.com/ggreer/the_silver_searcher][Silver Searcher]] in the style of =consult-grep=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-company][consult-company]]: Completion at point using the [[https://github.com/company-mode/company-mode][Company]] backends.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink/consult-dir][consult-dir]]: Directory jumper using Consult multi sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-eglot][consult-eglot]]: Integration with Eglot (LSP client).&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult-flycheck][consult-flycheck]]: Additional Flycheck integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]]: Additional Flyspell integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rcj/consult-ls-git][consult-ls-git]]: List files from git via Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/gagbo/consult-lsp][consult-lsp]]: Integration with Lsp-mode (LSP client).&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/consult-notmuch][consult-notmuch]]: Access the [[https://notmuchmail.org/][Notmuch]] email system using Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jgru/consult-org-roam][consult-org-roam]]: Integration with [[https://github.com/org-roam/org-roam][Org-roam]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler/consult-project-extra/][consult-project-extra]]: Additional project.el extras and buffer sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon/consult-projectile/][consult-projectile]]: Additional [[https://github.com/bbatsov/projectile][Projectile]] integration and buffer sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/consult-recoll][consult-recoll]]: Access the [[https://www.lesbonscomptes.com/recoll/][Recoll]] desktop full-text search using Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/espotify][consult-spotify]]: Access the Spotify API and control your local music player.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-yasnippet][consult-yasnippet]]: Integration with Yasnippet.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/affe][affe]]: Asynchronous Fuzzy Finder for Emacs based on Consult.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not directly related to Consult, but maybe still of interest are the following packages. These packages should work well with Consult, follow a similar spirit or offer functionality based on &lt;del&gt;completing-read&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu][corfu]]: Completion systems for =completion-at-point= using small popups (Alternative to [[https://github.com/company-mode/company-mode][Company]]).&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/cape][cape]]: Completion At Point Extensions, which can be used with =consult-completion-in-region= and [[https://github.com/minad/corfu][Corfu]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/bookmark-view][bookmark-view]]: Store window configuration as bookmarks, possible integration with =consult-buffer=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bdarcus/citar][citar]]: Versatile package for citation insertion and bibliography management.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/astoff/devdocs.el][devdocs]]: Emacs viewer for [[https://devdocs.io/][DevDocs]] with a convenient completion interface.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/d12frosted/flyspell-correct][flyspell-correct]]: Apply spelling corrections by selecting via =completing-read=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]: Editing of grep buffers, use together with =consult-grep= via =embark-export=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]: Icons for the completion UI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that all packages are independent and can be exchanged with alternative components, since there exist no hard dependencies. Furthermore it is possible to get started with only default completion and Consult and add more components later to the mix. For example you can omit Marginalia if you don&#39;t need annotations. I highly recommend the Embark package, but in order to familarize yourself with the other components, you can first start without it - or you could use with Embark right away and add the other components later on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug reports :properties: :description: How to create reproducible bug reports &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you find a bug or suspect that there is a problem with Consult, please carry out the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Update all the relevant packages to the newest version&lt;/em&gt;. This includes Consult, Vertico or other completion UIs, Marginalia, Embark and Orderless.&lt;/li&gt; &#xA; &lt;li&gt;Either use the default completion UI or ensure that exactly one of =vertico-mode=, =mct-mode=, =selectrum-mode=, or =icomplete-mode= is enabled. The unsupported modes =ivy-mode=, =helm-mode= and =ido-ubiquitous-mode= must be disabled.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the =completion-styles= variable is properly configured. Try to set =completion-styles= to a list including =substring= or =orderless=.&lt;/li&gt; &#xA; &lt;li&gt;Try to reproduce the issue by starting a bare bone Emacs instance with =emacs -Q= on the command line. Execute the following minimal code snippets in the scratch buffer. This way we can exclude side effects due to configuration settings. If other packages are relevant to reproduce the issue, include them in the minimal configuration snippet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Minimal setup with Vertico for =emacs -Q=: #+begin_src emacs-lisp (package-initialize) (require &#39;consult) (require &#39;vertico) (vertico-mode) (setq completion-styles &#39;(substring basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Minimal setup with the default completion system for =emacs -Q=: #+begin_src emacs-lisp (package-initialize) (require &#39;consult) (setq completion-styles &#39;(substring basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Please provide the necessary important information with your bug report:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The minimal configuration snippet used to reproduce the issue.&lt;/li&gt; &#xA; &lt;li&gt;Your completion UI (Default completion, Vertico, Mct, Selectrum or Icomplete).&lt;/li&gt; &#xA; &lt;li&gt;A stack trace in case the bug triggers an exception.&lt;/li&gt; &#xA; &lt;li&gt;Your Emacs version, since bugs may be fixed or introduced in newer versions.&lt;/li&gt; &#xA; &lt;li&gt;Your operating system, since Emacs behavior varies between Linux, Mac and Windows.&lt;/li&gt; &#xA; &lt;li&gt;The package manager, e.g., straight.el or package.el, used to install the Emacs packages, in order to exclude update issues. Did you install Consult as part of the Doom or Spacemacs Emacs distributions?&lt;/li&gt; &#xA; &lt;li&gt;Do you use Evil or other packages which apply deep changes? Consult does not provide Evil integration out of the box, but there is some support in [[https://github.com/emacs-evil/evil-collection][evil-collection]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When evaluating Consult-related code snippets you should enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]]. Consult often relies on lambdas and lexical closures.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions :properties: :description: Feature requests and pull requests &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult is a community effort, please participate in the discussions. Contributions are welcome, but you may want to discuss potential contributions first. Since this package is part of [[http://elpa.gnu.org/packages/consult.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;p&gt;If you have a proposal, take a look at the [[https://github.com/consult/issues][Consult issue tracker]] and the [[https://github.com/minad/consult/issues/6][Consult wishlist]]. There have been many prior feature discussions. Please search through the issue tracker, maybe your issue or feature request has already been discussed. You can contribute to the [[https://github.com/minad/consult/wiki][Consult wiki]], in case you want to share small configuration or command snippets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgments :properties: :description: Contributors and Sources of Inspiration &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You probably guessed from the name that this package took inspiration from [[https://github.com/abo-abo/swiper#counsel][Counsel]] by Oleh Krehel. Some of the Consult commands originated in the Counsel package or the [[https://github.com/raxod502/selectrum/wiki/Useful-Commands][Selectrum wiki]]. The commands have been rewritten and greatly enhanced in comparison to the original versions.&lt;/p&gt; &#xA;&lt;p&gt;Code contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/][Omar Antol√≠n Camarena]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/s-kostyaev/][Sergey Kostyaev]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/okamsn/][okamsn]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tomfitzhenry/][Tom Fitzhenry]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jakanakaevangeli][jakanakaevangeli]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://hg.serna.eu][I√±igo Serna]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/aspiers/][Adam Spiers]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/omar-polo][Omar Polo]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/astoff][Augusto Stoffel]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/noctuid][Fox Kiester]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tecosaur][Tecosaur]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohamed-abdelnour][Mohamed Abdelnour]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/thisirs][Sylvain Rousseau]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][J.D. Smith]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advice and useful discussions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/][Omar Antol√≠n Camarena]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://protesilaos.com][Protesilaos Stavrou]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/purcell/][Steve Purcell]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/alphapapa/][Adam Porter]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/manuel-uberti/][Manuel Uberti]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tomfitzhenry/][Tom Fitzhenry]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/hmelman/][Howard Melman]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/monnier/][Stefan Monnier]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/dgutov/][Dmitry Gutov]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat][Itai Y. Efrat]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bdarcus][Bruce d&#39;Arcus]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][J.D. Smith]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler][Enrique Kessler Mart√≠nez]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Authors of supplementary =consult-*= packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/][Jose A Ortega Ruiz]] ([[https://codeberg.org/jao/consult-notmuch][consult-notmuch]], [[https://codeberg.org/jao/consult-recoll][consult-recoll]], [[https://codeberg.org/jao/espotify][consult-spotify]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/gagbo/][Gerry Agbobada]] ([[https://github.com/gagbo/consult-lsp][consult-lsp]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink][Karthik Chikmagalur]] ([[https://github.com/karthink/consult-dir][consult-dir]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale][Mohsin Kaleem]] ([[https://github.com/mohkale/consult-company][consult-company]], [[https://github.com/mohkale/consult-eglot][consult-eglot]], [[https://github.com/mohkale/consult-yasnippet][consult-yasnippet]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon][Marco Paw≈Çowski]] ([[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]], [[https://gitlab.com/OlMon/consult-projectile][consult-projectile]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler][Enrique Kessler Mart√≠nez]] ([[https://github.com/Qkessler/consult-project-extra][consult-project-extra]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jgru][Jan Gru]] ([[https://github.com/jgru/consult-org-roam][consult-org-roam]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/yadex205][Kanon Kakuno]] ([[https://github.com/yadex205/consult-ag][consult-ag]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rcj][Robin Joy]] ([[https://github.com/rcj/consult-ls-git][consult-ls-git]])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html: &amp;lt;!--&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Indices :properties: :description: Indices of concepts and functions &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Function index :properties: :description: List of all Consult commands :index: fn &lt;span&gt;üîö&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Concept index :properties: :description: List of all Consult-specific concepts :index: cp &lt;span&gt;üîö&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+html: --&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doomemacs/doomemacs</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/doomemacs/doomemacs</id>
    <link href="https://github.com/doomemacs/doomemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Doom Emacs&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Documentation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&#34;&gt;Screenshots&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&#34; alt=&#34;Made with Doom Emacs&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Supports-Emacs_27.1--28.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Supports Emacs 27.1 - 28.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/doomemacs/doomemacs/master?style=flat-square&#34; alt=&#34;Latest commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square&#34; alt=&#34;Build status: master&#34;&gt; &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.doomemacs.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&#34; alt=&#34;Discourse server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&#34; alt=&#34;Doom Emacs Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&#34;&gt;Getting help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;a href=&#34;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer‚Äîenvious of the features of modern text editors‚Äîspirals into despair before he succumbs to the &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Doom is a configuration framework for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; &#xA;&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; &#xA; &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; &#xA; &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; &#xA; &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; &#xA; &lt;li&gt;A declarative &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; &#xA; &lt;li&gt;Optional vim emulation powered by &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&#34;&gt;more&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; &#xA; &lt;li&gt;A Spacemacs-esque &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&#34;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; &#xA; &lt;li&gt;A rule-based &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&#34;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; &#xA; &lt;li&gt;Per-file indentation style detection and &lt;a href=&#34;http://editorconfig.org/&#34;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; &#xA; &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;ivy&lt;/a&gt; or &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; &#xA; &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; &#xA; &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git 2.23+&lt;/li&gt; &#xA; &lt;li&gt;Emacs 27.1+ (&lt;em&gt;27.2 is recommended&lt;/em&gt;, or &lt;a href=&#34;https://www.emacswiki.org/emacs/GccEmacs&#34;&gt;native-comp&lt;/a&gt;. &lt;strong&gt;29+ is not supported&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; &#xA; &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Doom is comprised of &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d&#xA;~/.emacs.d/bin/doom install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&#34;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.emacs.d/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom build&lt;/code&gt; to recompile all installed packages (use this if you up/downgrade Emacs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/6&#34;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/5&#34;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/7&#34;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting help&lt;/h1&gt; &#xA;&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Our documentation&lt;/a&gt; covers many use cases. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&#34;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&#34;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&#34;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&#34;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&#34;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; &#xA;   &lt;li&gt;Your issue may be documented in the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues&#34;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&#34; alt=&#34;Donate on liberapay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I &lt;span&gt;‚ù§Ô∏è&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&#34;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t hesitate to &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues/new&#34;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;liberapay&lt;/a&gt; or &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>minad/vertico</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/minad/vertico</id>
    <link href="https://github.com/minad/vertico" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí´ vertico.el - VERTical Interactive COmpletion&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: vertico.el - VERTical Interactive COmpletion #+author: Daniel Mendler #+language: en #+export_file_name: vertico.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Vertico: (vertico). #+texinfo_dir_desc: VERTical Interactive COmpletion.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/vertico.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/vertico.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Vertigomovie_restoration.jpg/800px-Vertigomovie_restoration.jpg&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The main focus of Vertico is to provide a UI which behaves /correctly/ under all circumstances. By reusing the built-in facilities system, Vertico achieves /full compatibility/ with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extensible and modular. Additional enhancements are available as [[#extensions][extensions]] or [[#complementary-packages][complementary packages]]. The code base is small and maintainable. The main &lt;del&gt;vertico.el&lt;/del&gt; package is only about 600 lines of code without white space and comments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertical display with arrow key navigation. See the [[#extensions][extensions]] for additional display modes.&lt;/li&gt; &#xA; &lt;li&gt;Prompt shows the current candidate index and the total number of candidates.&lt;/li&gt; &#xA; &lt;li&gt;The current candidate is inserted with =TAB= and selected with =RET=.&lt;/li&gt; &#xA; &lt;li&gt;Non-existing candidates can be submitted with =M-RET= or by moving the point to the prompt.&lt;/li&gt; &#xA; &lt;li&gt;Configurable sorting by history position, length and alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;Long candidates with newlines are formatted to take up less space.&lt;/li&gt; &#xA; &lt;li&gt;Deferred completion style highlighting for performance.&lt;/li&gt; &#xA; &lt;li&gt;Annotations are displayed next to the candidates (&lt;del&gt;annotation-&lt;/del&gt; and &lt;del&gt;affixation-function&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Support for candidate grouping and group cycling commands (&lt;del&gt;group-function&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-mx.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico defines its own local keymap in the minibuffer which is derived from &lt;del&gt;minibuffer-local-map&lt;/del&gt;. The keymap keeps most of the &lt;del&gt;fundamental-mode&lt;/del&gt; keybindings intact and remaps and binds only a handful of commands. Note in particular the binding of =TAB= to &lt;del&gt;vertico-insert&lt;/del&gt; and the bindings of &lt;del&gt;vertico-exit/exit-input&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;beginning-of-buffer&lt;/del&gt;, &lt;del&gt;minibuffer-beginning-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-first&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;end-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-last&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-down-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-down&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-up-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-up&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;next-line&lt;/del&gt;, &lt;del&gt;next-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;previous-line&lt;/del&gt;, &lt;del&gt;previous-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;forward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;backward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;exit-minibuffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-exit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;kill-ring-save&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-save&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-RET= -&amp;gt; &lt;del&gt;vertico-exit-input&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=TAB= -&amp;gt; &lt;del&gt;vertico-insert&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is available from [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]]. You can install it directly via &lt;del&gt;package-install&lt;/del&gt;. After installation, you can activate the global minor mode with =M-x vertico-mode=. In order to configure Vertico and other packages in your init.el, you may want to take advantage of &lt;del&gt;use-package&lt;/del&gt;. Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico (use-package vertico :init (vertico-mode)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Different scroll margin&#xA;;; (setq vertico-scroll-margin 0)&#xA;&#xA;;; Show more candidates&#xA;;; (setq vertico-count 20)&#xA;&#xA;;; Grow and shrink the Vertico minibuffer&#xA;;; (setq vertico-resize t)&#xA;&#xA;;; Optionally enable cycling for `vertico-next&#39; and `vertico-previous&#39;.&#xA;;; (setq vertico-cycle t)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;;; Persist history over Emacs restarts. Vertico sorts by history position. (use-package savehist :init (savehist-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; A few more useful configurations... (use-package emacs :init ;; Add prompt indicator to &lt;code&gt;completing-read-multiple&#39;. ;; We display [CRM&amp;lt;separator&amp;gt;], e.g., [CRM,] if the separator is a comma. (defun crm-indicator (args) (cons (format &#34;[CRM%s] %s&#34; (replace-regexp-in-string &#34;\\&lt;/code&gt;\[.&lt;em&gt;?]\&lt;/em&gt;\|\[.&lt;em&gt;?]\&lt;/em&gt;\&#39;&#34; &#34;&#34; crm-separator) (car args)) (cdr args))) (advice-add #&#39;completing-read-multiple :filter-args #&#39;crm-indicator)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Do not allow the cursor in the minibuffer prompt&#xA;(setq minibuffer-prompt-properties&#xA;      &#39;(read-only t cursor-intangible t face minibuffer-prompt))&#xA;(add-hook &#39;minibuffer-setup-hook #&#39;cursor-intangible-mode)&#xA;&#xA;;; Emacs 28: Hide commands in M-x which do not work in the current mode.&#xA;;; Vertico commands are hidden in normal buffers.&#xA;;; (setq read-extended-command-predicate&#xA;;;       #&#39;command-completion-default-include-p)&#xA;&#xA;;; Enable recursive minibuffers&#xA;(setq enable-recursive-minibuffers t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;I recommend to give Orderless completion a try, which is different from the prefix TAB completion used by the basic default completion system or in shells.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Optionally use the `orderless&#39; completion style. (use-package orderless :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers &#39;(+orderless-dispatch) ;; orderless-component-separator #&#39;orderless-escapable-split-on-space) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles partial-completion))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. See =+orderless-dispatch= in the [[https://github.com/minad/consult/wiki][Consult wiki]] for an advanced Orderless style dispatcher. Additionally enable =partial-completion= for file path expansion. =partial-completion= is important for file wildcard support. Multiple files can be opened at once with =find-file= if you enter a wildcard. You may also give the =initials= completion style a try.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[https://github.com/minad/vertico/wiki][Vertico Wiki]] for additional configuration tips. For more general documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want to create your own completion commands, you can find documentation about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Completion styles and TAB completion&lt;/p&gt; &#xA;&lt;p&gt;The bindings of the &lt;del&gt;minibuffer-local-completion-map&lt;/del&gt; are not available in Vertico by default. This means that TAB works differently from what you may expect from the default Emacs completion system.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to have the default completion commands a key press away you can add new bindings or even replace the Vertico bindings. Then the default completion commands behave as usual. For example you can use =M-TAB= to cycle between candidates if you have set &lt;del&gt;completion-cycle-threshold&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;?&#34; #&#39;minibuffer-completion-help) (define-key vertico-map (kbd &#34;M-RET&#34;) #&#39;minibuffer-force-complete-and-exit) (define-key vertico-map (kbd &#34;M-TAB&#34;) #&#39;minibuffer-complete) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;orderless&lt;/del&gt; completion style does not support completion of a common prefix substring, as you may be familiar with from shells or the basic default completion system. The reason is that the Orderless input string is usually not a prefix. In order to support completing prefixes you may want to combine &lt;del&gt;orderless&lt;/del&gt; with &lt;del&gt;substring&lt;/del&gt; in your =completion-styles= configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(substring orderless basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can experiment with the built-in completion-styles, e.g., adding =partial-completion= or =flex=. The =partial-completion= style is important to add if you want to open multiple files at once with &lt;del&gt;find-file&lt;/del&gt; using wildcards. In order to open multiple files at once, you have to move to the prompt and then press =RET=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic substring partial-completion flex)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Because Vertico is fully compatible with Emacs default completion system, further customization of completion behavior can be achieved by setting the designated Emacs variables. For example, one may wish to disable case-sensitivity for file and buffer matching when built-in completion styles are used instead of &lt;del&gt;orderless&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq read-file-name-completion-ignore-case t read-buffer-completion-ignore-case t completion-ignore-case t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completion-at-point and completion-in-region&lt;/p&gt; &#xA;&lt;p&gt;The =completion-at-point= command is usually bound to =M-TAB= or =TAB=. In case you want to use Vertico for completion-at-point/completion-in-region, you can use the function &lt;del&gt;consult-completion-in-region&lt;/del&gt; provided by the Consult package.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =completion-in-region-function= setting also affects TAB completion in the minibuffer when =M-:= (&lt;del&gt;eval-expression&lt;/del&gt;) is used.&lt;/p&gt; &#xA;&lt;p&gt;You may also want to look into my [[https://github.com/minad/corfu][Corfu]] package, which provides a minimal completion system for =completion-in-region= in a child frame popup. Corfu is also a narrowly focused package and developed in the same spirit as Vertico.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensions :properties: :custom_id: extensions &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We maintain small extension packages to Vertico in this repository in the subdirectory [[https://github.com/minad/vertico/tree/main/extensions][extensions/]]. The extensions are installed together with Vertico if you pull the package from ELPA. The extensions are inactive by default and can be enabled manually if desired. Furthermore it is possible to install all of the files separately, both &lt;del&gt;vertico.el&lt;/del&gt; and the &lt;del&gt;vertico-*.el&lt;/del&gt; extensions. Currently the following extensions come with the Vertico ELPA package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-buffer.el][vertico-buffer]]: =vertico-buffer-mode= to display Vertico in a separate buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-directory.el][vertico-directory]]: Commands for Ido-like directory navigation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-flat.el][vertico-flat]]: =vertico-flat-mode= to enable a flat, horizontal display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-grid.el][vertico-grid]]: =vertico-grid-mode= to enable a grid display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-indexed.el][vertico-indexed]]: =vertico-indexed-mode= to select indexed candidates with prefix arguments.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-mouse.el][vertico-mouse]]: =vertico-mouse-mode= to support for scrolling and candidate selection.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-multiform.el][vertico-multiform]]: Configure Vertico modes per command or completion category.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-quick.el][vertico-quick]]: Commands to select using Avy-style quick keys.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-repeat.el][vertico-repeat]]: The command =vertico-repeat= repeats the last completion session.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-reverse.el][vertico-reverse]]: =vertico-reverse-mode= to reverse the display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-unobtrusive.el][vertico-unobtrusive]]: =vertico-unobtrusive-mode= displays only the topmost candidate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the Commentary of those files for configuration details. With these extensions it is possible to adapt Vertico such that it matches your preference or behaves similar to other familiar UIs. For example, the combination =vertico-flat= plus =vertico-directory= resembles Ido in look and feel. For an interface similar to Helm, the extension =vertico-buffer= allows you to configure freely where the completion buffer opens, instead of growing the minibuffer. Furthermore =vertico-buffer= will adjust the number of displayed candidates according to the buffer height.&lt;/p&gt; &#xA;&lt;p&gt;Configuration example for =vertico-directory=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure directory extension. (use-package vertico-directory :after vertico :ensure nil ;; More convenient directory navigation commands :bind (:map vertico-map (&#34;RET&#34; . vertico-directory-enter) (&#34;DEL&#34; . vertico-directory-delete-char) (&#34;M-DEL&#34; . vertico-directory-delete-word)) ;; Tidy shadowed file names :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Configure Vertico per command or completion category&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-ripgrep.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;Vertico offers the =vertico-multiform-mode= which allows you to configure Vertico per command or per completion category. The =vertico-buffer-mode= enables a Helm-like buffer display, which takes more space but also displays more candidates. This verbose display mode is useful for commands like &lt;del&gt;consult-imenu&lt;/del&gt; or &lt;del&gt;consult-outline&lt;/del&gt; since the buffer display allows you to get a better overview over the entire current buffer. But for other commands you want to keep using the default Vertico display. &lt;del&gt;vertico-multiform-mode&lt;/del&gt; solves this configuration problem!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico-multiform (vertico-multiform-mode)&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per command. ;; Use a buffer with indices for imenu ;; and a flat (Ido-like) menu for M-x. (setq vertico-multiform-commands &#39;((consult-imenu buffer indexed) (execute-extended-command unobtrusive)))&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per completion category. ;; Use the grid display for files and a buffer ;; for the consult-grep commands. (setq vertico-multiform-categories &#39;((file grid) (consult-grep buffer))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Temporary toggling between the different display modes is possible. Bind the following commands:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key vertico-map &#34;\M-V&#34; #&#39;vertico-multiform-vertical) (define-key vertico-map &#34;\M-G&#34; #&#39;vertico-multiform-grid) (define-key vertico-map &#34;\M-F&#34; #&#39;vertico-multiform-flat) (define-key vertico-map &#34;\M-R&#34; #&#39;vertico-multiform-reverse) (define-key vertico-map &#34;\M-U&#34; #&#39;vertico-multiform-unobtrusive) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can use your own functions or even lambdas to configure the completion behavior per command or per completion category. The function must have the calling convention of a mode, i.e., it takes a single argument, which is either 1 to turn on the mode and -1 to turn off the mode.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure &lt;code&gt;consult-outline&#39; as a scaled down TOC in a separate buffer (setq vertico-multiform-commands &lt;/code&gt;((consult-outline buffer ,(lambda (_) (text-scale-set -1))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Furthermore you can tune buffer-local settings per command or category.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Change the default sorting function. ;; See &lt;code&gt;vertico-sort-function&#39; and &lt;/code&gt;vertico-sort-override-function&#39;. (setq vertico-multiform-commands &#39;((describe-symbol (vertico-sort-function . vertico-sort-alpha))))&lt;/p&gt; &#xA;&lt;p&gt;(setq vertico-multiform-categories &#39;((symbol (vertico-sort-function . vertico-sort-alpha)) (file (vertico-sort-function . sort-directories-first))))&lt;/p&gt; &#xA;&lt;p&gt;;; Sort directories before files (defun sort-directories-first (files) (setq files (vertico-sort-history-length-alpha files)) (nconc (seq-filter (lambda (x) (string-suffix-p &#34;/&#34; x)) files) (seq-remove (lambda (x) (string-suffix-p &#34;/&#34; x)) files))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Combining these features allows us to fine-tune the completion display even more by adjusting the &lt;del&gt;vertico-buffer-display-action&lt;/del&gt;. We can for example reuse the current window for commands of the &lt;del&gt;consult-grep&lt;/del&gt; category (&lt;del&gt;consult-grep&lt;/del&gt;, &lt;del&gt;consult-git-grep&lt;/del&gt; and &lt;del&gt;consult-ripgrep&lt;/del&gt;). Note that this configuration is incompatible with Consult preview, since the previewed buffer is usually shown in exactly this window. Nevertheless this snippet demonstrates the flexibility of the configuration system.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure the buffer display and the buffer display action (setq vertico-multiform-categories &#39;((consult-grep buffer (vertico-buffer-display-action . (display-buffer-same-window)))))&lt;/p&gt; &#xA;&lt;p&gt;;; Disable preview for consult-grep commands (consult-customize consult-ripgrep consult-git-grep consult-grep :preview-key nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As another example, the following code uses &lt;del&gt;vertico-flat&lt;/del&gt; and &lt;del&gt;vertico-cycle&lt;/del&gt; to emulate &lt;del&gt;(ido-mode &#39;buffer)&lt;/del&gt;, i.e., Ido when it is enabled only for completion of buffer names. &lt;del&gt;vertico-cycle&lt;/del&gt; set to &lt;del&gt;t&lt;/del&gt; is necessary here to prevent completion candidates from disappearing when they scroll off-screen to the left.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq vertico-multiform-categories &#39;((buffer flat (vertico-cycle . t)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complementary packages :properties: :custom_id: complementary-packages &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico integrates well with complementary packages, which enrich the completion UI. These packages are fully supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][Marginalia]]: Rich annotations in the minibuffer&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult][Consult]]: Useful search and navigation commands&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][Embark]]: Minibuffer actions and context menu&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][Orderless]]: Advanced completion style&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to get accustomed with the package ecosystem, I recommed the following quick start approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start with plain Emacs (&lt;del&gt;emacs -Q&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Install and enable Vertico to get incremental minibuffer completion.&lt;/li&gt; &#xA; &lt;li&gt;Install Orderless and/or configure the built-in completion styles for more flexible minibuffer filtering.&lt;/li&gt; &#xA; &lt;li&gt;Install Marginalia if you like rich minibuffer annotations.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark and add two keybindings for &lt;del&gt;embark-dwim&lt;/del&gt; and &lt;del&gt;embark-act&lt;/del&gt;. I am using the mnemonic keybindings =M-.= and =C-.= since these commands allow you to act on the object at point or in the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Install Consult if you want additional featureful completion commands, e.g., the buffer switcher &lt;del&gt;consult-buffer&lt;/del&gt; with preview or the line-based search &lt;del&gt;consult-line&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark-Consult and Wgrep for export from =consult-line= to =occur-mode= buffers and from =consult-grep= to editable =grep-mode= buffers.&lt;/li&gt; &#xA; &lt;li&gt;Fine tune Vertico with [[#extensions][extensions]].&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The ecosystem is modular. You don&#39;t have to use all of these components. Use only the ones you like and the ones which fit well into your setup. The steps 1. to 4. introduce no new commands over plain Emacs. Step 5. introduces the new commands &lt;del&gt;embark-act&lt;/del&gt; and &lt;del&gt;embark-dwim&lt;/del&gt;. In step 6. you get the Consult commands, some offer new functionality not present in Emacs already (e.g., &lt;del&gt;consult-line&lt;/del&gt;) and some are substitutes (e.g., &lt;del&gt;consult-buffer&lt;/del&gt; for &lt;del&gt;switch-to-buffer&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Child frames and Popups&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An often requested feature is the ability to display the completions in a child frame popup. Personally I am critical of using child frames for minibuffer completion. From my experience it introduces more problems than it solves. Most importantly child frames hide the content of the underlying buffer. Furthermore child frames do not play well together with changing windows and entering recursive minibuffer sessions. On top, child frames can feel slow and sometimes flicker. A better alternative is the &lt;del&gt;vertico-buffer&lt;/del&gt; display which can even be configured individually per command using &lt;del&gt;vertico-multiform&lt;/del&gt;. On the plus side of child frames, the completion display appears at the center of the screen, where your eyes are focused. Please give the following packages a try and judge for yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/muffinmad/emacs-mini-frame][mini-frame]]: Display the entire minibuffer in a child frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/mini-popup][mini-popup]]: Slightly simpler alternative to mini-frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tumashu/vertico-posframe][vertico-posframe]]: Display only the Vertico minibuffer in a child frame using the posframe library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many alternative completion UIs, each UI with its own advantages and disadvantages.&lt;/p&gt; &#xA;&lt;p&gt;Vertico aims to be 100% compliant with all Emacs commands and achieves that with a minimal code base, relying purely on &lt;del&gt;completing-read&lt;/del&gt; while avoiding to invent its own APIs. Inventing a custom API as Helm or Ivy is explicitly avoided in order to increase flexibility and package reuse. Due to its small code base and reuse of the Emacs built-in facilities, bugs and compatibility issues are less likely to occur in comparison to completion UIs or full completion systems, which reimplement a lot of functionality.&lt;/p&gt; &#xA;&lt;p&gt;Since Vertico only provides the UI, you may want to combine it with some of the complementary packages, to give a full-featured completion experience similar to Helm or Ivy. Overall the packages in the spirit of Vertico have a different style than Helm or Ivy. The idea is to have smaller independent components, which one can add and understand step by step. Each component focuses on its niche and tries to be as non-intrusive as possible. Vertico targets users interested in crafting their Emacs precisely to their liking - completion plays an integral part in how the users interacts with Emacs.&lt;/p&gt; &#xA;&lt;p&gt;There are other interactive completion UIs, which follow a similar philosophy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][Mct]]: Minibuffer and Completions in Tandem. Mct reuses the default &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer and enhances it with automatic updates and additional keybindings, to select a candidate and move between minibuffer and completions buffer. Mct can be configured to open only when requested. Furthermore since Mct uses a fully functional buffer you can reuse all your familar buffer commands inside the completions buffer. The main distinction to Vertico&#39;s approach is that &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer displays all matching candidates. This has the advantage that you can interact freely with the candidates and jump around with Isearch or Avy. On the other hand it necessarily causes a slowdown in comparison to Vertico, which only displays a subset of candidates. Mct supports completion in region via its &lt;del&gt;mct-region-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/icomplete-vertical][Icomplete-vertical]]: This package enhances the Emacs builtin Icomplete with a vertical display. In contrast to Vertico, Icomplete rotates the candidates such that the current candidate always appears at the top. From my perspective, candidate rotation feels a bit less intuitive than the UI of Vertico or Selectrum. Note that Emacs 28 offers a built-in &lt;del&gt;icomplete-vertical-mode&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/raxod502/selectrum][Selectrum]]: Selectrum is the predecessor of Vertico, since it directly inspired Vertico. Selectrum has a similar UI and interaction model as Vertico. Vertico offers additional features and is more flexible than Selectrum thanks to its [[#extensions][extensions]]. Unfortunately Selectrum is not fully compatible with every Emacs completion command and dynamic completion tables ([[https://github.com/raxod502/selectrum/issues/481][Issue #481]]), since it uses its own filtering infrastructure, which deviates from the standard Emacs completion facilities. The filtering infrastructure also leads to a larger and more complex code base.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to learn more about Vertico and minibuffer completion, check out the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/hlissner/doom-emacs/tree/develop/modules/completion/vertico][Doom Emacs Vertico Module]]: Vertico is Doom&#39;s default completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=w9hHMDyF9V4][Emacs Minibuffer Completions]] (2022-02-12) by Greg Yut.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=hPwDbx--Waw][Vertico Extensions for Emacs]] (2022-01-08) by Karthik Chikmagalur.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/5ffb2at2d7w][Using Emacs Episode 80 - Vertico, Marginalia, Consult and Embark]] (2021-10-26) by Mike Zamansky.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=UtqE-lR2HCA][System Crafters Live! - Replacing Ivy and Counsel with Vertico and Consult]] (2021-05-21) by David Wilson.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=J0OaRy85MOo][Streamline Your Emacs Completions with Vertico]] (2021-05-17) by David Wilson.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/vertico.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Problematic completion commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is robust in most scenarios. However some completion commands make certain assumptions about the completion styles and the completion UI. Some of these assumptions may not hold in Vertico or other UIs and require minor workarounds.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-refile&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-refile&lt;/del&gt; uses &lt;del&gt;org-olpath-completing-read&lt;/del&gt; to complete the outline path in steps, when &lt;del&gt;org-refile-use-outline-path&lt;/del&gt; is non-nil.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately the implementation of this Org completion table assumes that the &lt;del&gt;basic&lt;/del&gt; completion style is used. The table is incompatible with completion styles like &lt;del&gt;substring&lt;/del&gt;, &lt;del&gt;flex&lt;/del&gt; or &lt;del&gt;orderless&lt;/del&gt;. In order to fix the issue at the root, the completion table should make use of completion boundaries similar to the built-in file completion table. In your user configuration you can prioritize &lt;del&gt;basic&lt;/del&gt; before &lt;del&gt;orderless&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 1: Use the basic completion style (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps t) (advice-add #&#39;org-olpath-completing-read :around (lambda (&amp;amp;rest args) (minibuffer-with-setup-hook (lambda () (setq-local completion-styles &#39;(basic))) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you may want to disable the outline path completion in steps. The completion on the full path can be quicker since the input string matches directly against substrings of the full path, which is useful with Orderless. However the list of possible completions becomes much more cluttered.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 2: Complete full paths (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-agenda-filter&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;del&gt;org-refile&lt;/del&gt;, the &lt;del&gt;org-agenda-filter&lt;/del&gt; completion function (&lt;del&gt;org-agenda-filter-completion-function&lt;/del&gt;) does not make use of completion boundaries. Unfortunately =TAB= completion (&lt;del&gt;minibuffer-complete&lt;/del&gt;) does not work for this reason. This affects Vertico and also the Emacs default completion system. For example if you enter &lt;del&gt;+tag&amp;lt;0 TAB&lt;/del&gt; the input is replaced with &lt;del&gt;0:10&lt;/del&gt; which is not correct. With preserved completion boundaries, the expected result would be &lt;del&gt;+tag&amp;lt;0:10&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;tmm-menubar&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The text menu bar works well with Vertico but always shows a =&lt;em&gt;Completions&lt;/em&gt;= buffer, which is unwanted if you use the Vertico UI. This completion buffer can be disabled with an advice. If you disabled the standard GUI menu bar and prefer the Vertico interface you may also overwrite the default F10 keybinding.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (global-set-key [f10] #&#39;tmm-menubar) (advice-add #&#39;tmm-add-prompt :after #&#39;minibuffer-hide-completions) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;ffap-menu&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;ffap-menu&lt;/del&gt; shows the =&lt;em&gt;Completions&lt;/em&gt;= buffer by default like &lt;del&gt;tmm-menubar&lt;/del&gt;, which is unnecessary with Vertico. This completion buffer can be disabled as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add #&#39;ffap-menu-ask :around (lambda (&amp;amp;rest args) (cl-letf (((symbol-function #&#39;minibuffer-completion-help) #&#39;ignore)) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;completion-table-dynamic&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dynamic completion tables (&lt;del&gt;completion-table-dynamic&lt;/del&gt;, &lt;del&gt;completion-table-in-turn&lt;/del&gt;, etc.) should work well with Vertico. However the requirement is that the =basic= completion style is enabled. The =basic= style performs prefix filtering by passing the input to the completion table (or the dynamic completion table function). The =basic= completion style must not necessarily be configured with highest priority, it can also come after other completion styles like =orderless=, =substring= or =flex=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic)) ;; (setq completion-styles &#39;(orderless basic)) (completing-read &#34;Dynamic: &#34; (completion-table-dynamic (lambda (str) (list (concat str &#34;1&#34;) (concat str &#34;2&#34;) (concat str &#34;3&#34;))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Submitting the empty string&lt;/p&gt; &#xA;&lt;p&gt;The commands &lt;del&gt;multi-occur&lt;/del&gt;, &lt;del&gt;auto-insert&lt;/del&gt;, &lt;del&gt;bbdb-create&lt;/del&gt; read multiple arguments from the minibuffer with &lt;del&gt;completing-read&lt;/del&gt;, one at a time, until you submit an empty string. You should type =M-RET= (&lt;del&gt;vertico-exit-input&lt;/del&gt;) to finish the loop. Directly pressing =RET= (&lt;del&gt;vertico-exit&lt;/del&gt;) does not work since the first candidate is preselected.&lt;/p&gt; &#xA;&lt;p&gt;The underlying issue is that &lt;del&gt;completing-read&lt;/del&gt; always allows you to exit with the empty string, which is called the /null completion/, even if the &lt;del&gt;REQUIRE-MATCH&lt;/del&gt; argument is non-nil. Try the following two calls to &lt;del&gt;completing-read&lt;/del&gt; with =C-x C-e=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match) (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match nil nil &#34;&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In both cases the empty string can be submitted. In the first case no explicit default value is specified and Vertico preselects the &lt;em&gt;first&lt;/em&gt; candidate. In order to exit with the empty string, press =M-RET=. In the second case the explicit default value &#34;&#34; is specified and Vertico preselects the prompt, such that exiting with the empty string is possible by pressing =RET= only.&lt;/p&gt; &#xA;&lt;p&gt;** Tramp hostname completion&lt;/p&gt; &#xA;&lt;p&gt;In combination with Orderless, hostnames are not made available for completion after entering =/ssh:=. In order to avoid this problem, the =basic= completion style should be specified for the file completion category, such that =basic= is tried before =orderless=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic partial-completion)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For users who are familiar with the =completion-style= machinery: You may also define a custom completion style which sets in only for remote files!&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun basic-remote-try-completion (string table pred point) (and (vertico--remote-p string) (completion-basic-try-completion string table pred point))) (defun basic-remote-all-completions (string table pred point) (and (vertico--remote-p string) (completion-basic-all-completions string table pred point))) (add-to-list &#39;completion-styles-alist &#39;(basic-remote basic-remote-try-completion basic-remote-all-completions nil)) (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic-remote partial-completion)))) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>minad/corfu</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/minad/corfu</id>
    <link href="https://github.com/minad/corfu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üèùÔ∏è corfu.el - Completion Overlay Region FUnction&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: corfu.el - Completion Overlay Region FUnction #+author: Daniel Mendler #+language: en #+export_file_name: corfu.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Corfu: (corfu). #+texinfo_dir_desc: Completion Overlay Region FUnction&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/corfu.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/corfu.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/corfu.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/corfu.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu enhances completion at point with a small completion popup. The current candidates are shown in a popup below or above the point. Corfu is the minimalistic &lt;del&gt;completion-in-region&lt;/del&gt; counterpart of the [[https://github.com/minad/vertico][Vertico]] minibuffer UI.&lt;/p&gt; &#xA;&lt;p&gt;Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion UI. Completions are either provided by commands like &lt;del&gt;dabbrev-completion&lt;/del&gt; or by pluggable backends (&lt;del&gt;completion-at-point-functions&lt;/del&gt;, Capfs). Most programming language major modes implement a Capf. Furthermore the language server packages, [[https://github.com/joaotavora/eglot][Eglot]] and [[https://github.com/emacs-lsp/lsp-mode][Lsp-mode]], use Capfs which talk to the LSP server to retrieve the completions. Corfu does not include its own completion backends. The Emacs built-in Capfs and the Capfs provided by other programming language packages are usually sufficient. A few additional Capfs and completion utilities are provided by the [[https://github.com/minad/cape][Cape]] package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Corfu uses child frames to show the popup and falls back to the default setting of the &lt;del&gt;completion-in-region-function&lt;/del&gt; on non-graphical displays. If you want to use Corfu in the terminal, install the package [[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]], which provides an alternative overlay-based display.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/corfu/blob/screenshots/light.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/corfu/blob/screenshots/dark.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Timer-based auto-completions (/off/ by default, set &lt;del&gt;corfu-auto&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Popup display with scrollbar indicator and arrow key navigation.&lt;/li&gt; &#xA; &lt;li&gt;The popup can be summoned explicitly by pressing =TAB= at any time.&lt;/li&gt; &#xA; &lt;li&gt;The current candidate is inserted with =TAB= and selected with =RET=.&lt;/li&gt; &#xA; &lt;li&gt;Candidates sorting by prefix, string length and alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;The selected candidate is previewed (configurable via &lt;del&gt;corfu-preview-current&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The selected candidate automatically committed on further input by default. (configurable via &lt;del&gt;corfu-preview-current&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The [[https://github.com/oantolin/orderless][Orderless]] completion style is supported. The filter string can contain arbitrary characters, after inserting a space via =M-SPC= (configurable via &lt;del&gt;corfu-quit-at-boundary&lt;/del&gt; and &lt;del&gt;corfu-separator&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Deferred completion style highlighting for performance.&lt;/li&gt; &#xA; &lt;li&gt;Support for candidate annotations and documentation in the echo area.&lt;/li&gt; &#xA; &lt;li&gt;Deprecated candidates are crossed out in the display.&lt;/li&gt; &#xA; &lt;li&gt;Icons can be provided by an external package via margin formatter functions.&lt;/li&gt; &#xA; &lt;li&gt;Extensions: Quick keys, Index keys, Sorting by history, Candidate documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation and Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu is available from [[http://elpa.gnu.org/packages/corfu.html][GNU ELPA]], such that it can be installed directly via &lt;del&gt;package-install&lt;/del&gt;. After installation, the global minor mode can be enabled with =M-x global-corfu-mode=. In order to configure Corfu and other packages in your init.el, you may want to use &lt;del&gt;use-package&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Corfu is highly flexible and customizable via &lt;del&gt;corfu-*&lt;/del&gt; customization variables, such that you can adapt it precisely to your requirements. However in order to quickly try out the Corfu completion package, it should be sufficient to activate &lt;del&gt;global-corfu-mode&lt;/del&gt;. You can experiment with manual completion for example in an Elisp buffer or in an Eshell or Shell buffer. For auto completion, set &lt;del&gt;corfu-auto=t&lt;/del&gt; before turning on &lt;del&gt;global-corfu-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package corfu ;; Optional customizations ;; :custom ;; (corfu-cycle t) ;; Enable cycling for `corfu-next/previous&#39; ;; (corfu-auto t) ;; Enable auto completion ;; (corfu-separator ?\s) ;; Orderless field separator ;; (corfu-quit-at-boundary nil) ;; Never quit at completion boundary ;; (corfu-quit-no-match nil) ;; Never quit, even if there is no match ;; (corfu-preview-current nil) ;; Disable current candidate preview ;; (corfu-preselect-first nil) ;; Disable candidate preselection ;; (corfu-on-exact-match nil) ;; Configure handling of exact matches ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area ;; (corfu-scroll-margin 5) ;; Use scroll margin&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Enable Corfu only for certain modes.&#xA;;; :hook ((prog-mode . corfu-mode)&#xA;;;        (shell-mode . corfu-mode)&#xA;;;        (eshell-mode . corfu-mode))&#xA;&#xA;;; Recommended: Enable Corfu globally.&#xA;;; This is recommended since Dabbrev can be used globally (M-/).&#xA;;; See also `corfu-excluded-modes&#39;.&#xA;:init&#xA;(global-corfu-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;;; A few more useful configurations... (use-package emacs :init ;; TAB cycle if there are only few candidates (setq completion-cycle-threshold 3)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Emacs 28: Hide commands in M-x which do not apply to the current mode.&#xA;;; Corfu commands are hidden, since they are not supposed to be used via M-x.&#xA;;; (setq read-extended-command-predicate&#xA;;;       #&#39;command-completion-default-include-p)&#xA;&#xA;;; Enable indentation+completion using the TAB key.&#xA;;; `completion-at-point&#39; is often bound to M-TAB.&#xA;(setq tab-always-indent &#39;complete))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Dabbrev completion is based on =completion-in-region= and can be used with Corfu. You may want to swap the =dabbrev-completion= with the =dabbrev-expand= key for easier access, if you prefer completion. Also take a look at the =cape-dabbrev= completion at point function provided by my [[https://github.com/minad/cape][Cape]] package.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use Dabbrev with Corfu! (use-package dabbrev ;; Swap M-/ and C-M-/ :bind ((&#34;M-/&#34; . dabbrev-completion) (&#34;C-M-/&#34; . dabbrev-expand)) ;; Other useful Dabbrev configurations. :custom (dabbrev-ignored-buffer-regexps &#39;(&#34;\.\(?:pdf\|jpe?g\|png\)\&#39;&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you start to configure the package more deeply, I recommend to give the Orderless completion style a try for filtering. Orderless completion is different from the familiar prefix TAB completion. Corfu can be used with the default completion styles. The use of Orderless is not a necessity.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Optionally use the `orderless&#39; completion style. (use-package orderless :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers &#39;(+orderless-dispatch) ;; orderless-component-separator #&#39;orderless-escapable-split-on-space) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles . (partial-completion)))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. See =+orderless-dispatch= in the [[https://github.com/minad/consult/wiki][Consult wiki]] for an advanced Orderless style dispatcher. Additionally enable =partial-completion= for file path expansion. =partial-completion= is important for file wildcard support. Multiple files can be opened at once with =find-file= if you enter a wildcard. You may also give the =initials= completion style a try.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[https://github.com/minad/corfu/wiki][Corfu Wiki]] for additional configuration tips. In particular the Lsp-mode configuration is documented in the wiki. For more general documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want to create your own Capfs, you can find documentation about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Auto completion&lt;/p&gt; &#xA;&lt;p&gt;Auto completion is disabled by default, but can be enabled by setting &lt;del&gt;corfu-auto=t&lt;/del&gt;. Furthermore you may want to configure Corfu to quit completion eagerly, such that the completion popup stays out of your way when it appeared unexpectedly.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable auto completion and configure quitting (setq corfu-auto t corfu-quit-no-match &#39;separator) ;; or t #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In general, I recommend to experiment a bit with the various settings and key bindings to find a configuration which works for you. There is no one size fits all solution. Some people like auto completion, some like manual completion, some want to cycle with TAB and some with the arrow keys...&lt;/p&gt; &#xA;&lt;p&gt;** Completing with Corfu in the minibuffer&lt;/p&gt; &#xA;&lt;p&gt;Corfu can be used for completion in the minibuffer, since it relies on child frames to display the candidates. By default, &lt;del&gt;global-corfu-mode&lt;/del&gt; does not activate &lt;del&gt;corfu-mode&lt;/del&gt; in the minibuffer, to avoid interference with specialised minibuffer completion UIs like Vertico or Mct. However you may still want to enable Corfu completion for commands like &lt;del&gt;M-:&lt;/del&gt; (&lt;del&gt;eval-expression&lt;/del&gt;) or &lt;del&gt;M-!&lt;/del&gt; (&lt;del&gt;shell-command&lt;/del&gt;), which read from the minibuffer. Activate &lt;del&gt;corfu-mode&lt;/del&gt; only if &lt;del&gt;completion-at-point&lt;/del&gt; is bound in the minibuffer-local keymap to achieve this effect.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-enable-in-minibuffer () &#34;Enable Corfu in the minibuffer if `completion-at-point&#39; is bound.&#34; (when (where-is-internal #&#39;completion-at-point (list (current-local-map))) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook &#39;minibuffer-setup-hook #&#39;corfu-enable-in-minibuffer) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also enable Corfu more generally for every minibuffer, as long as no other completion UI is active. If you use Mct or Vertico as your main minibuffer completion UI, the following snippet should yield the desired result.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-enable-always-in-minibuffer () &#34;Enable Corfu in the minibuffer if Vertico/Mct are not active.&#34; (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook &#39;minibuffer-setup-hook #&#39;corfu-enable-always-in-minibuffer 1) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completing with Corfu in the Eshell or Shell&lt;/p&gt; &#xA;&lt;p&gt;When completing in the Eshell I recommend conservative local settings without auto completion, such that the completion behavior is similar to widely used shells like Bash, Zsh or Fish.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;eshell-mode-hook (lambda () (setq-local corfu-auto nil) (corfu-mode))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;When pressing =RET= while the Corfu popup is visible, the &lt;del&gt;corfu-insert&lt;/del&gt; command will be invoked. This command does inserts the currently selected candidate, but it does not send the prompt input to Eshell or the comint process. Therefore you often have to press =RET= twice which feels like an unnecessary double confirmation. Fortunately it is easy to improve this! In my configuration I define the advice &lt;del&gt;corfu-send-shell&lt;/del&gt; which sends the candidate after insertion.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-send-shell (&amp;amp;rest _) &#34;Send completion candidate when inside comint/eshell.&#34; (cond ((and (derived-mode-p &#39;eshell-mode) (fboundp &#39;eshell-send-input)) (eshell-send-input)) ((and (derived-mode-p &#39;comint-mode) (fboundp &#39;comint-send-input)) (comint-send-input))))&lt;/p&gt; &#xA;&lt;p&gt;(advice-add #&#39;corfu-insert :after #&#39;corfu-send-shell) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Shell completion uses the flexible &lt;del&gt;pcomplete&lt;/del&gt; mechanism internally, which allows you to program the completions per shell command. If you want to know more, look into this [[https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs][blog post]], which shows how to configure pcomplete for git commands. I recommend the [[https://github.com/JonWaltman/pcmpl-args.el][pcmpl-args]] package which extends Pcomplete with completion support and helpful annotation support for more commands. Similar to the Fish shell, pcmpl-args uses man page parsing and --help output parsing to dynamically generate completions. This package brings Eshell completion to another level!&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately Pcomplete has a few technical issues, which we can work around with the [[https://github.com/minad/cape][Cape]] library (Completion at point extensions). Cape provides wrappers, which sanitize the pcomplete function. Ideally the bugs in pcomplete should be fixed upstream. &lt;em&gt;For now these two advices are strongly recommended to achieve a sane Eshell experience.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Silence the pcomplete capf, no errors or messages! (advice-add &#39;pcomplete-completions-at-point :around #&#39;cape-wrap-silent)&lt;/p&gt; &#xA;&lt;p&gt;;; Ensure that pcomplete does not write to the buffer ;; and behaves as a pure `completion-at-point-function&#39;. (advice-add &#39;pcomplete-completions-at-point :around #&#39;cape-wrap-purify) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Orderless completion&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/oantolin/orderless][Orderless]] is an advanced completion style that supports multi-component search filters separated by a configurable character (space, by default). Normally, entering characters like space which lie outside the completion region boundaries (words, typically) causes Corfu to quit. This behavior is helpful with auto-completion, which may pop-up when not desired, e.g. on entering a new variable name. Just keep typing and Corfu will get out of the way.&lt;/p&gt; &#xA;&lt;p&gt;But orderless search terms can contain arbitrary characters; they are also interpreted as regular expressions. To use orderless, set &lt;del&gt;corfu-separator&lt;/del&gt; (a space, by default) to the primary character of your orderless component separator.&lt;/p&gt; &#xA;&lt;p&gt;Then, when a new orderless component is desired, use =M-SPC= (&lt;del&gt;corfu-insert-separator&lt;/del&gt;) to enter the /first/ component separator in the input, and arbitrary orderless search terms and new separators can be entered thereafter.&lt;/p&gt; &#xA;&lt;p&gt;To treat the entire input as Orderless input, you can set the customization option &lt;del&gt;corfu-quit-at-boundary=t&lt;/del&gt;. This disables the predicate which checks if the current completion boundary has been left. In contrast, if you /always/ want to quit at the boundary, simply set &lt;del&gt;corfu-quit-at-boundary=nil&lt;/del&gt;. By default &lt;del&gt;corfu-quit-at-boundary&lt;/del&gt; is set to &lt;del&gt;separator&lt;/del&gt; which quits at completion boundaries as long as no separator has been inserted with &lt;del&gt;corfu-insert-separator&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, there exists the user option &lt;del&gt;corfu-quit-no-match&lt;/del&gt; which is set to =separator= by default. With this setting Corfu stays alive as soon as you start advanced filtering with a &lt;del&gt;corfu-separator&lt;/del&gt; even if there are no matches, for example due to a typo. As long as no separator character has been inserted with &lt;del&gt;corfu-insert-separator&lt;/del&gt;, Corfu will still quit if there are no matches. This ensures that the Corfu popup goes away quickly if completion is not possible.&lt;/p&gt; &#xA;&lt;p&gt;In the following we show two configurations, one which works best with auto completion and one which may work better with manual completion if you prefer to always use =SPC= to separate the Orderless components.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Auto completion example (use-package corfu :custom (corfu-auto t) ;; Enable auto completion ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space :bind ;; Another key binding can be used, such as S-SPC. ;; (:map corfu-map (&#34;M-SPC&#34; . corfu-insert-separator)) :init (global-corfu-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; Manual completion example (use-package corfu :custom ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space :bind ;; Configure SPC for separator insertion (:map corfu-map (&#34;SPC&#34; . corfu-insert-separator)) :init (global-corfu-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** TAB-and-Go completion&lt;/p&gt; &#xA;&lt;p&gt;You may be interested in configuring Corfu in TAB-and-Go style. Pressing TAB moves to the next candidate and further input will then commit the selection. Note that further input will not expand snippets or templates, which may not be desired but which leads overall to a more predictable behavior. In order to force snippet expansion, confirm a candidate explicitly with &lt;del&gt;RET&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package corfu ;; TAB-and-Go customizations :custom (corfu-cycle t) ;; Enable cycling for `corfu-next/previous&#39; (corfu-preselect-first nil) ;; Disable candidate preselection&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Use TAB for cycling, default is `corfu-complete&#39;.&#xA;:bind&#xA;(:map corfu-map&#xA;      (&#34;TAB&#34; . corfu-next)&#xA;      ([tab] . corfu-next)&#xA;      (&#34;S-TAB&#34; . corfu-previous)&#xA;      ([backtab] . corfu-previous))&#xA;&#xA;:init&#xA;(global-corfu-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Transfer completion to the minibuffer&lt;/p&gt; &#xA;&lt;p&gt;Sometimes it is useful to transfer the Corfu completion session to the minibuffer, since the minibuffer offers richer interaction features. In particular, [[https://github.com/oantolin/embark][Embark]] is available in the minibuffer, such that you can act on the candidates or export/collect the candidates to a separate buffer. Hopefully we can also add Corfu-support to Embark in the future, such that at least export/collect is possible directly from Corfu. But in my opinion having the ability to transfer the Corfu completion to the minibuffer is an even better feature, since further completion can be performed there.&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;corfu-move-to-minibuffer&lt;/del&gt; is defined here in terms of &lt;del&gt;consult-completion-in-region&lt;/del&gt;, which uses the minibuffer completion UI via &lt;del&gt;completing-read&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-move-to-minibuffer () (interactive) (let ((completion-extra-properties corfu--extra) completion-cycle-threshold completion-cycling) (apply #&#39;consult-completion-in-region completion-in-region--data))) (define-key corfu-map &#34;\M-m&#34; #&#39;corfu-move-to-minibuffer) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu uses a transient keymap &lt;del&gt;corfu-map&lt;/del&gt; which is active while the popup is shown. The keymap defines the following remappings and bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;beginning-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-first&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;end-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-last&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-down-command&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-scroll-down&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-up-command&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-scroll-up&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;next-line&lt;/del&gt;, =down=, =M-n= -&amp;gt; &lt;del&gt;corfu-next&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;previous-line&lt;/del&gt;, =up=, =M-p= -&amp;gt; &lt;del&gt;corfu-previous&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;completion-at-point&lt;/del&gt;, =TAB= -&amp;gt; &lt;del&gt;corfu-complete&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=RET= -&amp;gt; &lt;del&gt;corfu-insert&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-g= -&amp;gt; &lt;del&gt;corfu-info-location&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-h= -&amp;gt; &lt;del&gt;corfu-info-documentation&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-SPC= -&amp;gt; &lt;del&gt;corfu-insert-separator&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=C-g= -&amp;gt; &lt;del&gt;corfu-quit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;keyboard-escape-quit&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-reset&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensions :properties: :custom_id: extensions &lt;span&gt;üîö&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We maintain small extension packages to Corfu in this repository in the subdirectory [[https://github.com/minad/corfu/tree/main/extensions][extensions/]]. The extensions are installed together with Corfu if you pull the package from ELPA. The extensions are inactive by default and can be enabled manually if desired. Furthermore it is possible to install all of the files separately, both &lt;del&gt;corfu.el&lt;/del&gt; and the &lt;del&gt;corfu-*.el&lt;/del&gt; extensions. Currently the following extensions come with the Corfu ELPA package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-history.el][corfu-history]]: =corfu-history-mode= to remember selected candidates and to improve sorting.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-indexed.el][corfu-indexed]]: =corfu-indexed-mode= to select indexed candidates with prefix arguments.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-info.el][corfu-info]]: Actions to access the candidate location and documentation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-quick.el][corfu-quick]]: Commands to select using Avy-style quick keys.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the Commentary of those files for configuration details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complementary packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu works well together with all packages providing code completion via the &lt;del&gt;completion-at-point-functions&lt;/del&gt;. Many modes and packages already provide a Capf out of the box. Nevertheless you may want to look into complementary packages to enhance your setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]]: The corfu-terminal package provides an overlay-based display for Corfu, such that you can use Corfu in terminal Emacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/galeo/corfu-doc][corfu-doc]]: The corfu-doc package displays the candidate documentation in a popup next to the Corfu popup, similar to =company-quickhelp=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/oantolin/orderless][Orderless]]: Corfu supports completion styles, including the advanced [[https://github.com/oantolin/orderless][Orderless]] completion style, where the filtering expressions are separated by spaces or another character (see &lt;del&gt;corfu-separator&lt;/del&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/cape][Cape]]: Additional Capf backends and =completion-in-region= commands are provided by the [[https://github.com/minad/cape][Cape]] package. Among others, the package supplies a file path and a dabbrev completion backend. Cape provides the &lt;del&gt;cape-company-to-capf&lt;/del&gt; adapter to reuse Company backends in Corfu. Furthermore the function &lt;del&gt;cape-super-capf&lt;/del&gt; can merge multiple Capfs, such that the candidates of multiple Capfs are displayed together at the same time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/jdtsmith/kind-icon][kind-icon]]: Icons are supported by Corfu via an external package. For example the [[https://github.com/jdtsmith/kind-icon][kind-icon]] package provides beautifully styled SVG icons based on monochromatic icon sets like material design.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/JonWaltman/pcmpl-args.el][pcmpl-args]]: Extend the Eshell/Shell Pcomplete mechanism with support for many more commands. Similar to the Fish shell, Pcomplete uses man page parsing to dynamically retrieve the completions and helpful annotations. This package brings Eshell completions to another level!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/tempel][Tempel]]: Tiny template/snippet package with templates in Lisp syntax, which can be used in conjunction with Corfu.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/vertico][Vertico]]: You may also want to look into my [[https://github.com/minad/vertico][Vertico]] package. Vertico is the minibuffer completion counterpart of Corfu.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/company-mode/company-mode][Company]]: Company is a widely used and mature completion package, which implements a similar interaction model and popup UI as Corfu. While Corfu relies exclusively on the standard Emacs completion API (Capfs), Company defines its own API for the backends. Company includes its completion backends, which are incompatible with the Emacs completion infrastructure. As a result of this design, Company is a more complex package than Corfu. Company by default uses overlays for the popup in contrast to the child frames used by Corfu. Overall both packages work well, but Company integrates less tightly with Emacs. The &lt;del&gt;completion-styles&lt;/del&gt; support is more limited and the &lt;del&gt;completion-at-point&lt;/del&gt; command and the &lt;del&gt;completion-in-region&lt;/del&gt; function do not invoke Company.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://git.sr.ht/~protesilaos/mct][Mct]]: Protesilaos&#39; Minibuffer Confines Transcended package supports both minibuffer completion and completion in region. It reuses the default completion UI for this purpose and installs a timer which live updates the completion buffer. The main advantage of Mct is that you work with a regular Emacs buffer instead of with a popup. You can take advantage of the usual Emacs commands to navigate in the completions buffer. On top, Mct enhances the movement such that you can quickly switch between the completions buffer and the minibuffer or the region which is being completed. Mct does not support timer-based auto completion, but the integration into Emacs is naturally tight.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/consult][consult-completion-in-region]]: The Consult package provides the function &lt;del&gt;consult-completion-in-region&lt;/del&gt; which can be set as &lt;del&gt;completion-in-region-function&lt;/del&gt; such that it handles &lt;del&gt;completion-at-point&lt;/del&gt;. The function works by transferring the in-buffer completion to the minibuffer. In the minibuffer, the minibuffer completion UI, for example [[https://github.com/minad/vertico][Vertico]] takes over. If you prefer to perform all your completions in the minibuffer &lt;del&gt;consult-completion-in-region&lt;/del&gt; is your best option.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/corfu.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rougier/nano-emacs</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/rougier/nano-emacs</id>
    <link href="https://github.com/rougier/nano-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GNU Emacs / N Œõ N O - Emacs made simple&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;GNU Emacs / N Œõ N O&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GNU Emacs / N Œõ N O&lt;/strong&gt; is a set of configuration files for GNU Emacs such as to provide a nice and consistent look and feel as shown below. It is based on design principles I described in the article &#34;&lt;a href=&#34;https://arxiv.org/abs/2008.06030&#34;&gt;On the design of text Editors&lt;/a&gt;&#34; that is available on arXiv. The light theme is based on &lt;a href=&#34;https://material.io/&#34;&gt;Material colors&lt;/a&gt; and the dark theme is based on &lt;a href=&#34;https://www.nordtheme.com/&#34;&gt;Nord colors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The philosophy of nano emacs is to stick as much as possible to vanilla emacs without introducing too much dependencies (or none if possible) and to keep it modular enough. The idea is for users to copy the part they are interested in such as to include them in their own configuration.&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-emacs-light.png&#34; width=&#34;47.5%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-emacs-dark.png&#34; width=&#34;47.5%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Nano Emacs is quite close to my other project &lt;a href=&#34;https://github.com/rougier/elegant-emacs&#34;&gt;Elegant Emacs&lt;/a&gt; which might be considered to be an early prototype.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You need a recent version of &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; and to have the &lt;a href=&#34;https://fonts.google.com/specimen/Roboto+Mono&#34;&gt;Roboto Mono&lt;/a&gt; and &lt;a href=&#34;https://fonts.google.com/specimen/Fira+Code&#34;&gt;Fira Code&lt;/a&gt; fonts installed on your system. There are no other dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Quick test&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to test nano emacs is to clone the directory on your desktop and to type (from inside the cloned repository):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ emacs -q -l nano.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;If you like the result, you can either manually merge the contents of &lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano.el&#34;&gt;nano.el&lt;/a&gt; into your emacs configuration file, or install nano through the &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;h4&gt;Manual Installation&lt;/h4&gt; &#xA;&lt;p&gt;To merge the &lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano.el&#34;&gt;nano.el&lt;/a&gt; contents with your emacs configuration, you&#39;ll need to modify the &lt;code&gt;load-path&lt;/code&gt; to include the nano emacs repository and then call for the different modules. The only mandatory module is &lt;code&gt;nano-faces&lt;/code&gt; that defines 6 faces that are used in other modules.&lt;/p&gt; &#xA;&lt;h4&gt;Installation through straight.el&lt;/h4&gt; &#xA;&lt;p&gt;To install nano through &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;, install straight.el, and then add the following snippet into your emacs configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA;  &#39;(nano-emacs :type git :host github :repo &#34;rougier/nano-emacs&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from here, you may either &lt;code&gt;(require &#39;nano)&lt;/code&gt; to pull in the default nano configuration, or call for the different modules. The only mandatory module is &lt;code&gt;nano-faces&lt;/code&gt; that defines 6 faces that are used in other modules.&lt;/p&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the default font, the proportional font and the font-size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nano-font-family-monospaced &#34;Roboto Mono&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the default monospaced font. Defaults to Roboto Mono. Note that if you set this to a font without proper light or bold weights you will lose many of the key design features of nano-emacs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nano-font-family-proportional nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set this to the name (as a string) of your favorite variable-width font to enable &lt;code&gt;variable-width-mode&lt;/code&gt; and &lt;code&gt;mixed-pitch-mode&lt;/code&gt;. If you have already set this somewhere else, you can use &lt;code&gt;(setq nano-font-family-proportional (face-attribute &#39;variable-width :family))&lt;/code&gt; to use the same one.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nano-font-size 14)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the font-size of most faces in nano-emacs.&lt;/p&gt; &#xA;&lt;h4&gt;Note about load-order&lt;/h4&gt; &#xA;&lt;p&gt;Because of the way nano-emacs is set up, you need to set these variables &lt;em&gt;before&lt;/em&gt; you call &lt;code&gt;(nano-faces)&lt;/code&gt; and &lt;code&gt;(nano-theme)&lt;/code&gt;. If you change one of these variables after load/calling &lt;code&gt;(nano-faces)&lt;/code&gt; and &lt;code&gt;(nano-theme)&lt;/code&gt;, you will need to call them again for these changes to take effect.&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano.el&#34;&gt;nano.el&lt;/a&gt;&lt;/strong&gt; (optional)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module is mostly used to test nano emacs locally. Its content is supposed to be merged into an existing emacs configuration. See &lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/#Quick-test&#34;&gt;Quick test&lt;/a&gt; section above.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mandatory&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-base-colors.el&#34;&gt;nano-base-colors.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines the fundamental colors of nano theme. If your Emacs has a theme or color-scheme, make sure its loaded before you load nano-faces so that its colors are used by nano.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-faces.el&#34;&gt;nano-faces.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines the fundamental faces of nano theme. If your Emacs has a theme or color-scheme, make sure its loaded before you load nano-faces so that its colors are used by nano.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-theme-light.el&#34;&gt;nano-theme-light.el&lt;/a&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-theme-dark.el&#34;&gt;nano-theme-dark.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Theses modules define light and dark themes respectively by overriding the base colors. If your Emacs is not themed, you are encouraged to try one of these.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-theme.el&#34;&gt;nano-theme.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module derives faces for several popular emacs modes from the nano faces. You can either use them all by calling &lt;code&gt;(nano-theme)&lt;/code&gt;, or pick what you want by calling your selection of &lt;code&gt;(nano-theme--&lt;/code&gt; functions.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-help.el&#34;&gt;nano-help.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module provides a function to display a small help message in the echo area.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-splash.el&#34;&gt;nano-splash.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module provides a splash screen when emacs is started.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-modeline.el&#34;&gt;nano-modeline.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines a header line that is mode dependent and takes care of hiding the modeline when necessary.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-layout.el&#34;&gt;nano-layout.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines the overall layout of an emacs frame, defining default font, fringes, margins, etc.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-defaults.el&#34;&gt;nano-defaults.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules provides a set of sane default settings for Emacs.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-session.el&#34;&gt;nano-session.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules configures Emacs such that a session is saved from one run to the other.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-bindings.el&#34;&gt;nano-bindings.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules provides a reduced set of keybindings for a few common commands.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-counsel.el&#34;&gt;nano-counsel.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules configures the &lt;a href=&#34;https://elpa.gnu.org/packages/counsel.html&#34;&gt;counsel package&lt;/a&gt; that needs to have been &lt;strong&gt;installed&lt;/strong&gt; by user.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-colors.el&#34;&gt;nano-colors.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module provides a collection of colors palettes (&lt;a href=&#34;https://yeun.github.io/open-color/&#34;&gt;open colors&lt;/a&gt;, &lt;a href=&#34;https://material.io/&#34;&gt;material colors&lt;/a&gt;, &lt;a href=&#34;https://www.nordtheme.com/&#34;&gt;nord colors&lt;/a&gt;) with functions for easily accessing them.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Experimental&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-mu4e.el&#34;&gt;nano-mu4e.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This package setup the look and feel of mu4e.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-mu4e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-minibuffer.el&#34;&gt;nano-minibuffer.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Minibuffer using &lt;a href=&#34;https://github.com/muffinmad/emacs-mini-frame&#34;&gt;mini-frame&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-minibuffer-light.png&#34; width=&#34;47.5%&#34;&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-minibuffer-dark.png&#34; width=&#34;47.5%&#34;&gt; &#xA;  &lt;/div&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-command.el&#34;&gt;nano-command.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This package provides an experimental command line prompt in the header line. It has not history nor completion but can be used for one line input such as org-capture.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-command.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-agenda.el&#34;&gt;nano-agenda.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;An experimental interactive mini agenda that displays side by side a mini calendar on the left and timestamped org entries on the right.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-agenda.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related works&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mclear-tools/bespoke-themes&#34;&gt;Bespoke theme&lt;/a&gt; Custom medium contrast light and dark themes inspired by nano emacs, elegant emacs, Nord and Solarized themes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>haskell/haskell-mode</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/haskell/haskell-mode</id>
    <link href="https://github.com/haskell/haskell-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs mode for Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://rawgithub.com/haskell/haskell-mode/master/images/haskell-mode.svg?sanitize=true&#34; width=&#34;35&#34; height=&#34;35&#34;&gt; Haskell Mode for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;This is an Emacs mode for editing, developing and debugging Haskell programs. &lt;a href=&#34;http://haskell.github.io/haskell-mode/&#34;&gt;Home page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/haskell/haskell-mode&#34;&gt;&lt;img src=&#34;https://travis-ci.org/haskell/haskell-mode.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/actions&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License GPL3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/HaskellMode&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/HaskellMode.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I just want to thank everybody involved in one way or another with the Haskell Emacs tooling. It is one of the best language experiences I had in Emacs. -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/2xjum3/haskellmode_february_2015_developments/cp0qa9a&#34;&gt;cocreature, 2015-03-01&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;ve been using it for a long time and love it. Great work on haskell-mode! Keep up the good work! -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/316hcm/month_in_haskell_mode_march_2015/cpyutph&#34;&gt;LukeHoersten, 2015-04-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This sounds wonderful. Does anything similar exist for Vim? -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/3bsa0f/month_in_haskell_mode_june_2015/cspdbb6&#34;&gt;earldouglas, 2015-07-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Users manual: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;latest version&lt;/a&gt;, older versions: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.12/&#34;&gt;13.12&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.14/&#34;&gt;13.14&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.16/&#34;&gt;13.16&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.18/&#34;&gt;13.18&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.20/&#34;&gt;13.20&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have this in your &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;init file&lt;/a&gt; (usually &lt;code&gt;~/.emacs&lt;/code&gt;). If you already have &lt;code&gt;custom-set-variables&lt;/code&gt;, merge its contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(custom-set-variables&#xA; ;; custom-set-variables was added by Custom.&#xA; ;; If you edit it by hand, you could mess it up, so be careful.&#xA; ;; Your init file should contain only one such instance.&#xA; ;; If there is more than one, they won&#39;t work right.&#xA; &#39;(package-archives&#xA;   (quote&#xA;    ((&#34;gnu&#34; . &#34;https://elpa.gnu.org/packages/&#34;)&#xA;     (&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;)))))&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run emacs, and evaluate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-refresh-contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then follow by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET haskell-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Voil√†! &lt;code&gt;haskell-mode&lt;/code&gt; is installed! You should be able to edit Haskell source code in color now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Haskell-mode&lt;/code&gt; has much much more to offer but the above should get you going!&lt;/p&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;For setup instructions, please consult the integrated &lt;code&gt;haskell-mode&lt;/code&gt; Info manual which can be accessed after installation via &lt;code&gt;M-x info-display-manual [RET] haskell-mode&lt;/code&gt;. Alternatively, you can also direct your browser to the &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;the online haskell-mode manual&lt;/a&gt; for setup and user guide.&lt;/p&gt; &#xA;&lt;h2&gt;Installation - more information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; supports GNU Emacs version 25.1 or later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is available from &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; (releases) and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; (git snapshots). The latter will generally be considerably more up-to-date, and is recommended for most users.&lt;/p&gt; &#xA;&lt;p&gt;Other means of obtaining &lt;code&gt;haskell-mode&lt;/code&gt; include &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt; and &lt;a href=&#34;https://packages.debian.org/search?keywords=haskell-mode&#34;&gt;Debian package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation from git repository&lt;/h2&gt; &#xA;&lt;p&gt;Running &lt;code&gt;haskell-mode&lt;/code&gt; directly from sources is easy but requires a little preparation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/haskell/haskell-mode.git&lt;/code&gt; into a suitable directory, e.g. &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt; where &lt;code&gt;~&lt;/code&gt; stands for your home directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Assuming you have unpacked the various haskell-mode modules (&lt;code&gt;haskell-mode.el&lt;/code&gt; and the rest) in the directory &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt;, you need to generate various files, the autoloads file (&lt;code&gt;haskell-mode-autoloads.el&lt;/code&gt;) is one among them. Invoke:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make EMACS=/path/to/your/emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then adding the following command to your &lt;code&gt;.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-to-list &#39;load-path &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;(require &#39;haskell-mode-autoloads)&#xA;(add-to-list &#39;Info-default-directory-list &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation from git repository on macOS&lt;/h3&gt; &#xA;&lt;p&gt;There are a couple of things to note if you want to install directly from git on macOS systems, as of version 10.13 High Sierra:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The version of makeinfo that is installed by default in /usr/bin is quite old and will cause the above make command to exit with an error. Installing the texinfo package using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; will fix this. Be sure to follow the post-install instructions to add its bin directory to your shell&#39;s PATH variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are running an Emacs distribution packaged as a macOS application. such as the one available at &lt;a href=&#34;https://emacsformacosx.com/&#34;&gt;https://emacsformacosx.com/&lt;/a&gt;, you&#39;ll need to add its executable to your PATH before the system&#39;s default Emacs version. That project&#39;s &lt;a href=&#34;https://emacsformacosx.com/tips&#34;&gt;Tips and Tricks&lt;/a&gt; page has detailed instructions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you followed the above you are just a couple of steps away from contributing to &lt;code&gt;haskell-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is actively seeking contributions from users of &lt;code&gt;haskell-mode&lt;/code&gt;. For more information have a look at &lt;a href=&#34;https://github.com/haskell/haskell-mode/wiki/Contributing&#34;&gt;the wiki page on contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>melpa/melpa</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/melpa/melpa</id>
    <link href="https://github.com/melpa/melpa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recipes and build machinery for the biggest Emacs package repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MELPA&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/melpa/melpa/actions&#34;&gt;&lt;img src=&#34;https://github.com/melpa/melpa/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MELPA is a growing collection of &lt;code&gt;package.el&lt;/code&gt;-compatible Emacs Lisp packages built automatically on our server from the upstream source code using simple recipes. (Think of it as a server-side version of &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, or even &lt;a href=&#34;https://github.com/Homebrew/homebrew&#34;&gt;Homebrew&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Packages are updated at intervals throughout the day.&lt;/p&gt; &#xA;&lt;p&gt;To browse available packages, check out the &lt;a href=&#34;https://melpa.org/&#34;&gt;archive index page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adding packages is as simple as submitting a new recipe as a pull request; read on for details.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#build-scripts&#34;&gt;Build Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#mirrors&#34;&gt;Mirrors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the MELPA repository, you&#39;ll need an Emacs with &lt;code&gt;package.el&lt;/code&gt;, ie. Emacs 24.1 or greater. To test TLS support you can visit a HTTPS URL, for example with &lt;code&gt;M-x eww RET https://wikipedia.org RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enable installation of packages from MELPA by adding an entry to &lt;code&gt;package-archives&lt;/code&gt; after &lt;code&gt;(require &#39;package)&lt;/code&gt; and before the call to &lt;code&gt;package-initialize&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`&#xA;;; and `package-pinned-packages`. Most users will not need or want to do this.&#xA;;;(add-to-list &#39;package-archives &#39;(&#34;melpa-stable&#34; . &#34;https://stable.melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just use &lt;code&gt;M-x package-list-packages&lt;/code&gt; to browse and install packages from MELPA and elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Note that you&#39;ll need to run &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; or &lt;code&gt;M-x package-list-packages&lt;/code&gt; to ensure that Emacs has fetched the MELPA package list before you can install packages with &lt;code&gt;M-x package-install&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;h3&gt;MELPA Stable&lt;/h3&gt; &#xA;&lt;p&gt;Packages in MELPA are built directly from the latest package source code in the upstream repositories, but we also build and publish packages corresponding to the latest tagged code in those repositories, where version tags exist. These packages are published in a separate package archive called &lt;a href=&#34;https://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt;. Most users should prefer MELPA over MELPA Stable.&lt;/p&gt; &#xA;&lt;p&gt;Some notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you leave the original MELPA server in your &lt;code&gt;package-archives&lt;/code&gt; then by default you will get the &lt;em&gt;development&lt;/em&gt; versions of packages and not the stable ones, because the development versions are higher.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your Emacs has the variables &lt;code&gt;package-pinned-packages&lt;/code&gt; (available in 24.4 and later) and/or &lt;code&gt;package-archive-priorities&lt;/code&gt;, you can customize or modify those variables as needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use the &lt;a href=&#34;https://github.com/milkypostman/package-filter&#34;&gt;package-filter.el&lt;/a&gt; package which we provide.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will probably want to remove all packages and then reinstall them. Any packages you already have installed from MELPA will never get &#34;updated&#34; to the stable version because of the way version numbering is handled.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the MELPA maintainers do not use MELPA Stable themselves, and do not particularly recommend its use.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/CONTRIBUTING.org&#34;&gt;CONTRIBUTING.org&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Recipe Format&lt;/h2&gt; &#xA;&lt;p&gt;Packages are specified by files in the &lt;code&gt;recipes&lt;/code&gt; directory. You can contribute a new package by adding a new file under &lt;code&gt;recipes&lt;/code&gt; using the following form (&lt;code&gt;[...]&lt;/code&gt; denotes optional or conditional values),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&amp;lt;package-name&amp;gt;&#xA; :fetcher [git|github|gitlab|hg]&#xA; [:url &#34;&amp;lt;repo url&amp;gt;&#34;]&#xA; [:repo &#34;github-or-gitlab-user/repo-name&#34;]&#xA; [:commit &#34;commit&#34;]&#xA; [:branch &#34;branch&#34;]&#xA; [:version-regexp &#34;&amp;lt;regexp&amp;gt;&#34;]&#xA; [:files (&#34;&amp;lt;file1&amp;gt;&#34; ...)]&#xA; [:old-names (&amp;lt;old-name&amp;gt; ...)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-name&lt;/code&gt; a lisp symbol that has the same name as the package being specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:fetcher&lt;/code&gt; specifies the type of repository that &lt;code&gt;:url&lt;/code&gt; or &lt;code&gt;:repo&lt;/code&gt; points to. MELPA supports &lt;a href=&#34;http://git-scm.com/&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://gitlab.com/&#34;&gt;&lt;code&gt;gitlab&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;&lt;code&gt;hg&lt;/code&gt;&lt;/a&gt; (Mercurial).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:url&lt;/code&gt; specifies the URL of the version control repository. &lt;em&gt;required for the &lt;code&gt;git&lt;/code&gt;, and &lt;code&gt;hg&lt;/code&gt; fetchers.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt; specifies the github or gitlab repository and is of the form &lt;code&gt;user/repo-name&lt;/code&gt;. &lt;em&gt;required for the &lt;code&gt;github&lt;/code&gt; and &lt;code&gt;gitlab&lt;/code&gt; fetchers&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:commit&lt;/code&gt; specifies the commit of the git repo to checkout. The value will be passed to &lt;code&gt;git reset&lt;/code&gt; in a repo where &lt;code&gt;upstream&lt;/code&gt; is the original repository. Can therefore be either a SHA, if pointing at a specific commit, or a full ref prefixed with &#34;origin/&#34;. Only used by the &lt;code&gt;git&lt;/code&gt;-based fetchers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt; specifies the branch of the git repo to use. This is like &lt;code&gt;:commit&lt;/code&gt;, but it adds the &#34;origin/&#34; prefix automatically. This must be specified when using a branch other than the default branch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:version-regexp&lt;/code&gt; is a regular expression for extracting a version-string from the repository tags. The default matches typical version tags such as &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;R16&lt;/code&gt; or &lt;code&gt;v4.3.5&lt;/code&gt;, so you should not override it unless necessary. For an unusual tag like &#34;OTP-18.1.5&#34;, we might add &lt;code&gt;:version-regexp &#34;[^0-9]*\\(.*\\)&#34;&lt;/code&gt; to strip the &#34;OTP-&#34; prefix. The captured portion of the regexp must be parseable by Emacs&#39; &lt;code&gt;version-to-list&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt; optional property specifying the elisp and info files used to build the package. Please do not override this if the default value (below) is adequate, which it should usually be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;&#39;(&#34;*.el&#34; &#34;lisp/*.el&#34;&#xA;  &#34;dir&#34; &#34;*.info&#34; &#34;*.texi&#34; &#34;*.texinfo&#34;&#xA;  &#34;doc/dir&#34; &#34;doc/*.info&#34; &#34;doc/*.texi&#34; &#34;doc/*.texinfo&#34;&#xA;  &#34;docs/dir&#34; &#34;docs/*.info&#34; &#34;docs/*.texi&#34; &#34;docs/*.texinfo&#34;&#xA;  (:exclude&#xA;   &#34;.dir-locals.el&#34; &#34;lisp/.dir-locals.el&#34;&#xA;   &#34;test.el&#34; &#34;tests.el&#34; &#34;*-test.el&#34; &#34;*-tests.el&#34;&#xA;   &#34;lisp/test.el&#34; &#34;lisp/tests.el&#34; &#34;lisp/*-test.el&#34; &#34;lisp/*-tests.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that elisp in subdirectories is never included by default, so you might find it convenient to keep your package&#39;s elisp in the root of your repository, and separate auxiliary files such as tests into subdirectories to keep packaging simple.&lt;/p&gt; &lt;p&gt;The elements of the &lt;code&gt;:files&lt;/code&gt; list are glob-expanded and processed from left to right to make a list of paths that will be copied into the root of the new package, as if by using &lt;code&gt;cp -R [SRCPATHS] DEST&lt;/code&gt;. This means a directory like &#34;foo/bar&#34; would become &#34;bar&#34; in the new package. To specify a destination subdirectory, use a list element of the form &lt;code&gt;(SUBDIR SRCPATH ...)&lt;/code&gt;. Likewise, to filter out paths expanded earlier in the list, use &lt;code&gt;(:exclude SRCPATH ...)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If your package requires some additional files, but is otherwise fine with the defaults, it&#39;s recommended to use the special element &lt;code&gt;:defaults&lt;/code&gt; as the very first element of the &lt;code&gt;:files&lt;/code&gt; list, which causes the default value shown above to be prepended to the specified file list. For example &lt;code&gt;:files (:defaults &#34;snippets&#34;)&lt;/code&gt; would cause the &#34;snippets&#34; subdir to be copied in addition to the defaults.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:old-names&lt;/code&gt; specifies former names of the package, if any. The value is a list of symbols.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example: Single File Repository&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nonsequitur/smex&#34;&gt;smex&lt;/a&gt; is a repository that contains two files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;README.markdown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smex.el&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since there is only one &lt;code&gt;.el&lt;/code&gt; file, this package only needs the &lt;code&gt;:repo&lt;/code&gt; and &lt;code&gt;:fetcher&lt;/code&gt; specified,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(smex :repo &#34;nonsequitur/smex&#34; :fetcher github)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Packages in one Repository&lt;/h3&gt; &#xA;&lt;p&gt;Assume we have a repository containing three libraries &lt;code&gt;mypackage.el&lt;/code&gt;, &lt;code&gt;helm-mypackage.el&lt;/code&gt;, and &lt;code&gt;persp-mypackage.el&lt;/code&gt;. The latter two libraries are optional and users who don&#39;t want to use the packages &lt;code&gt;helm&lt;/code&gt; and/or &lt;code&gt;perspective&lt;/code&gt; should not be forced to install them just so they can install &lt;code&gt;mypackage&lt;/code&gt;. These libraries should therefore be distributed as separate packages.&lt;/p&gt; &#xA;&lt;p&gt;The three packages have to be declared in three separate files &lt;code&gt;recipes/mypackage&lt;/code&gt;, &lt;code&gt;recipes/helm-mypackage&lt;/code&gt;, and &lt;code&gt;recipes/persp-mypackage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(mypackage :repo &#34;someuser/mypackage&#34;&#xA;           :fetcher github&#xA;           :files (&#34;mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(helm-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                :fetcher github&#xA;                :files (&#34;helm-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(persp-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                 :fetcher github&#xA;                 :files (&#34;persp-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Files in Multiple Directories&lt;/h3&gt; &#xA;&lt;p&gt;There are special cases where creation of the package comes from many different sub-directories in the repository and the destination sub-directories need to be explicitly set.&lt;/p&gt; &#xA;&lt;p&gt;Consider the &lt;code&gt;flymake-perlcritic&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(flymake-perlcritic :repo &#34;illusori/emacs-flymake-perlcritic&#34;&#xA;                    :fetcher github&#xA;                    :files (&#34;*.el&#34; (&#34;bin&#34; &#34;bin/flymake_perlcritic&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will result in a package structure of,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flymake-perlcritic-YYYMMDD&#xA;|-- bin&#xA;|   `-- flymake_perlcritic&#xA;|-- flymake-perlcritic-pkg.el&#xA;`-- flymake-perlcritic.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that specifying an entry in &lt;code&gt;:files&lt;/code&gt; that is a list takes the first element to be the destination directory. These can be embedded further, such as the following---hypothetical---entry for &lt;code&gt;:files&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&#34;*.el&#34; (&#34;snippets&#34;&#xA;         (&#34;html-mode&#34; &#34;snippets/html-mode/*&#34;)&#xA;         (&#34;python-mode&#34; &#34;snippets/python-mode/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which would result in a package with &lt;code&gt;*.el&lt;/code&gt; in something like,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package-YYYYMMDD&#xA;|-- snippets&#xA;|   |-- html-mode&#xA;|   |   |-- div&#xA;|   |   `-- html&#xA;|   `-- python-mode&#xA;|       |-- for&#xA;|       `-- main&#xA;`-- package.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But a better solution, given that we probably want to copy the &lt;em&gt;entire&lt;/em&gt; &lt;code&gt;snippets&lt;/code&gt; directory to the root of the package, we could just specify that directory. Consider the &lt;code&gt;pony-mode&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(pony-mode&#xA; :repo &#34;davidmiller/pony-mode&#34;&#xA; :fetcher github&#xA; :files (&#34;src/*.el&#34; &#34;snippets&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which generates the package,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pony-mode-YYYYMMDD&#xA;|-- pony-mode-pkg.el&#xA;|-- pony-mode.el&#xA;|-- pony-tpl.el&#xA;`-- snippets&#xA;    |-- html-mode&#xA;    |   |-- bl&#xA;    |   |-- ex&#xA;    |   |-- for&#xA;    |   |-- if&#xA;    |   |-- loa&#xA;    |   |-- sup&#xA;    |   |-- testc&#xA;    |   `-- {{&#xA;    `-- python-mode&#xA;        |-- auth-view&#xA;        |-- bn&#xA;        |-- model&#xA;        |-- modelform&#xA;        |-- render-to&#xA;        |-- testc&#xA;        `-- view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Scripts&lt;/h2&gt; &#xA;&lt;p&gt;Building MELPA is all based around using the &lt;code&gt;Makefile&lt;/code&gt; included in the root repository directory. Described below are the actions that accepted by the &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all&lt;/code&gt; -- Builds all packages under the &lt;code&gt;recipes/&lt;/code&gt; directory and compiles the &lt;code&gt;index.html&lt;/code&gt; file for the &lt;a href=&#34;https://melpa.org&#34;&gt;melpa&lt;/a&gt; website.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes/&amp;lt;NAME&amp;gt;&lt;/code&gt; -- Build individual recipe &lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;. Built packages are put in the &lt;code&gt;packages/&lt;/code&gt; folder with version corresponding to the date of the latest commit that modified at least one of the files specified by the recipe; given according to the &lt;code&gt;%Y%m%d&lt;/code&gt; format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt; -- build all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;archive.json&lt;/code&gt; -- construct the &lt;code&gt;archive.json&lt;/code&gt; file that will contain a JSON object of all compiled packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes.json&lt;/code&gt; -- construct the &lt;code&gt;recipes.json&lt;/code&gt; file containing a JSON object of all packages available for building.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt; -- clean everything.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;html&lt;/code&gt; -- build &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-working&lt;/code&gt; -- remove all repositories that have been checked out to the &lt;code&gt;working/&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-packages&lt;/code&gt; -- remove all compiled packages from the &lt;code&gt;packages&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-json&lt;/code&gt; -- remove all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that these scripts require an Emacs with &lt;code&gt;package.el&lt;/code&gt; installed, such as Emacs 24. If you have an older version of Emacs, you can get a suitable &lt;code&gt;package.el&lt;/code&gt; &lt;a href=&#34;https://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;All repository code is contained in the file &lt;code&gt;package-build/package-build.el&lt;/code&gt;. That code is maintained in a &lt;a href=&#34;https://github.com/melpa/package-build&#34;&gt;separate repository&lt;/a&gt;: the version in the MELPA repository is imported using &lt;code&gt;git subtree&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-all)&lt;/code&gt; : build packages for all recipes in the directory specified by &lt;code&gt;package-build-recipes-dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-archive NAME)&lt;/code&gt; : interactive elisp function to build a single archive. NAME is a symbol for the package to be built. Packages are staged in the directory specified by &lt;code&gt;package-build-working-dir&lt;/code&gt; and built packages are placed in the directory specified by &lt;code&gt;package-build-archive-dir&lt;/code&gt;. Packages are versioned based on the most recent commit date to package files based on commits to upstream package repository. For multi-file packages, the file &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt; is automatically generated and contains &lt;em&gt;description&lt;/em&gt;, &lt;em&gt;version&lt;/em&gt;, and &lt;em&gt;requires&lt;/em&gt; information determined by searching &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt;, &lt;code&gt;&amp;lt;NAME&amp;gt;.el&lt;/code&gt;, and &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el.in&lt;/code&gt;, if they exist in the repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-working-dir&lt;/code&gt; : Staging area containing package repositories and package directories being built.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-archive-dir&lt;/code&gt; : Location to store &lt;code&gt;archive-contents&lt;/code&gt; and any built packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-recipes-dir&lt;/code&gt; : Directory containing MELPA compatible recipes. See &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt; section for more details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Packages end up in the &lt;code&gt;packages/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-archive-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;Repositories are checked out to the &lt;code&gt;working/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-working-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h2&gt;Mirrors&lt;/h2&gt; &#xA;&lt;p&gt;Official mirrors are available (with many thanks to mirrorservice.org) so that if melpa.org is down, packages can still be installed. The following are the HTTP/HTTPS URLs to use in &lt;code&gt;package-archives&lt;/code&gt; for MELPA and MELPA Stable respectively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only the packages are mirrored, not the web site front-end itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;We are NOT responsible for the contents of any UNOFFICIAL mirror of our packages.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;MELPA&lt;/em&gt; is &lt;em&gt;Milkypostman&#39;s ELPA&lt;/em&gt; or &lt;em&gt;Milkypostman&#39;s Experimental Lisp Package Archive&lt;/em&gt; if you&#39;re not into the whole brevity thing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zerolfx/copilot.el</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/zerolfx/copilot.el</id>
    <link href="https://github.com/zerolfx/copilot.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot.el&lt;/h1&gt; &#xA;&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This plugin is unofficial and based on binaries provided by &lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;copilot.vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to Copilot technical preview to use this plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; (only support 12.x to 17.x).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package! copilot&#xA;  :recipe (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;*.el&#34; &#34;dist&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(use-package! copilot&#xA;  :hook (prog-mode . copilot-mode)&#xA;  :bind ((&#34;C-TAB&#34; . &#39;copilot-accept-completion-by-word)&#xA;         (&#34;C-&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion-by-word)&#xA;         :map company-active-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)&#xA;         :map company-mode-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; ===================&#xA;;; dotspacemacs/layers&#xA;;; ===================&#xA;&#xA;;; add copilot.el to additional packages&#xA;dotspacemacs-additional-packages&#xA; &#39;((copilot :location (recipe&#xA;                       :fetcher github&#xA;                       :repo &#34;zerolfx/copilot.el&#34;&#xA;                       :files (&#34;*.el&#34; &#34;dist&#34;))))&#xA;&#xA;;; ========================&#xA;;; dotspacemacs/user-config&#xA;;; ========================&#xA;&#xA;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;  ;; enable tab completion&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&#xA;&#xA;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&#xA;(define-key evil-insert-state-map (kbd &#34;C-&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion-by-word)&#xA;(define-key evil-insert-state-map (kbd &#34;C-TAB&#34;) &#39;copilot-accept-completion-by-word)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;General Configurations&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Load via &lt;code&gt;straight.el&lt;/code&gt; (recommended)&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :straight (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))&#xA;  :ensure t)&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Option 2: Load manually&lt;/h5&gt; &#xA; &lt;p&gt;Please make sure you have these dependencies installed, and use &lt;code&gt;load-file&lt;/code&gt; or &lt;code&gt;load-path&lt;/code&gt; + &lt;code&gt;require&lt;/code&gt; to load it.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;2. Configure completion&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; &#xA; &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; &#xA; &lt;p&gt;In general, you need to bind &lt;code&gt;copilot-accept-completion&lt;/code&gt; to some key in order to accept the completion. Also, you may find &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; is useful.&lt;/p&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;company-mode&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then company-mode&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;; modify company-mode behaviors&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;auto-complete&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then auto-complete&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (ac-expand nil)))&#xA;&#xA;(with-eval-after-load &#39;auto-complete&#xA;  ; disable inline preview&#xA;  (setq ac-disable-inline t)&#xA;  ; show menu if have only one candidate&#xA;  (setq ac-candidate-menu-min 0)&#xA;&#xA;  (define-key ac-completing-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key ac-completing-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab))&#xA;&#xA;(define-key global-map [remap indent-for-tab-command] &#39;(lambda ()&#xA;                                                         (interactive)&#xA;                                                         (or (copilot-accept-completion)&#xA;                                                             (indent-for-tab-command))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-diagnose&lt;/h4&gt; &#xA;&lt;p&gt;Check the current status of the plugin. Also you can check error logs in the &lt;code&gt;*copilot-log*&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-login&lt;/h4&gt; &#xA;&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-mode&lt;/h4&gt; &#xA;&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-complete&lt;/h4&gt; &#xA;&lt;p&gt;Try to complete at the current point.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; &#xA;&lt;p&gt;Accept the current completion.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; &#xA;&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; &#xA;&lt;p&gt;Cycle through the completion list.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-node-executable&lt;/h4&gt; &#xA;&lt;p&gt;The executable path of Node.js.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; &#xA;&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be enabled only if all predicates return &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-disable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to disable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be disabled if any predicate returns &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-overlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; &#xA;&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-box.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cycle through suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;These projects helped me a lot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyX12/company-tabnine/&#34;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cryptobadger/flight-attendant.el&#34;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sshaw/git-link</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/sshaw/git-link</id>
    <link href="https://github.com/sshaw/git-link" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package to get the GitHub/Bitbucket/GitLab/... URL for a buffer location&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-link&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/git-link&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/git-link-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/sshaw/git-link&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sshaw/git-link.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Interactive Emacs functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link&lt;/code&gt; returns the URL for the current buffer&#39;s file location at the current line number or active region.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit&lt;/code&gt; returns the URL for the commit at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-homepage&lt;/code&gt; returns the URL for the repository&#39;s homepage.&lt;/p&gt; &#xA;&lt;p&gt;URLs are added to the kill ring.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Functions can be called interactively (&lt;code&gt;M-x git-link&lt;/code&gt;) or via a key binding of your choice. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(global-set-key (kbd &#34;C-c g l&#34;) &#39;git-link)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a prefix argument prompt for the remote&#39;s name. Defaults to &lt;code&gt;&#34;origin&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With a prefix argument of &lt;code&gt;-&lt;/code&gt;, generate a link without line numbers.&lt;/p&gt; &#xA;&lt;p&gt;Works with Dired, Magit, VC revisions, and Tramp too.&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Global setting are elisp variables. They can be set directly or via &lt;code&gt;M-x customize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Local settings are managed via the repository&#39;s git configuration. They can be set via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --local --add setting value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Local settings have precedence over global settings.&lt;/p&gt; &#xA;&lt;h4&gt;Global&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to, defaults to the current branch.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-open-in-browser&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; also open link in browser via &lt;code&gt;browse-url&lt;/code&gt;, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-commit&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; use the latest commit&#39;s hash in the link instead of the branch name, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-single-line-number&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If &lt;code&gt;nil&lt;/code&gt; line numbers are only added when the selection contains more than 1 line, defaults to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;git-link&lt;/code&gt; will exclude line numbers when invoked with the &lt;code&gt;-&lt;/code&gt; prefix argument.&lt;/p&gt; &#xA;&lt;h4&gt;Local&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Services&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/devops/&#34;&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/codecommit/&#34;&gt;AWS CodeCommit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bitbucket.com&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/&#34;&gt;Codeberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/Cgit&#34;&gt;cgit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com&#34;&gt;GitLab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gitorious.org&#34;&gt;Gitorious&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.savannah.gnu.org/cgit&#34;&gt;Savannah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcegraph.com&#34;&gt;Sourcegraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Git Timemachine&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://gitlab.com/pidu/git-timemachine&#34;&gt;&lt;code&gt;git-timemachine-mode&lt;/code&gt;&lt;/a&gt; is active &lt;code&gt;git-link&lt;/code&gt; generates a URL for the version of the file being visited.&lt;/p&gt; &#xA;&lt;h3&gt;Sourcegraph&lt;/h3&gt; &#xA;&lt;p&gt;To link to files on a Sourcegraph server add a git remote pointing to the repository&#39;s Sourcegraph page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git remote add sourcegraph https://sourcegraph.com/github.com/sshaw/copy-as-format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Links can be generated by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#usage&#34;&gt;specifying &lt;code&gt;sourcegraph&lt;/code&gt; as your remote&lt;/a&gt; when calling the desired link function or by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#settings&#34;&gt;setting &lt;code&gt;sourcegraph&lt;/code&gt; as the default remote&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that the remote can be named anything but its URL&#39;s host must match what&#39;s in the associated link function&#39;s alist. This defaults to &lt;code&gt;&#34;sourcegraph&#34;&lt;/code&gt; but can be changed. See &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#building-links-and-adding-services&#34;&gt;Building Links and Adding Services&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;URLs with ports or an http scheme will not work. It&#39;s a trivial fix so if it&#39;s a problem for you please open an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Building Links and Adding Services&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-remote-alist&lt;/code&gt; is an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. The FUNCTION creates URLs for file on remote host names that match the REGEXP. To add (or modify) how URLs are created for a given host, add appropriate elements to this list.&lt;/p&gt; &#xA;&lt;p&gt;As an example, one of the default elements in this alist is &lt;code&gt;(&#34;gitlab&#34; git-link-gitlab)&lt;/code&gt;. So the &lt;code&gt;git-link-gitlab&lt;/code&gt; function will be used to create URLs to files in remotes that match the &lt;em&gt;regexp&lt;/em&gt; &lt;code&gt;&#34;gitlab&#34;&lt;/code&gt;. That would cover common Gitlab host URLs like &lt;em&gt;&#34;gitlab.com&#34;&lt;/em&gt;, &lt;em&gt;&#34;gitlab.example.com&#34;&lt;/em&gt; and &lt;em&gt;&#34;gitlab.example.org&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit-remote-alist&lt;/code&gt; is also an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. Here, the FUNCTION creates URLs to the commit pages, for remote hosts matching REGEXP.&lt;/p&gt; &#xA;&lt;p&gt;If you use a self-hosted version of one of the supported services, but your remote URL does match with the defaults, you can configure these link function alists. For example, for a GitHub Enterprise instance at &lt;code&gt;gh.example.com&lt;/code&gt;, you could add the following to your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(eval-after-load &#39;git-link&#xA; &#39;(progn&#xA;   (add-to-list &#39;git-link-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-github))&#xA;   (add-to-list &#39;git-link-commit-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-commit-github))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME FILENAME BRANCH COMMIT START END&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FILENAME&lt;/code&gt; source file, relative to &lt;code&gt;DIRNAME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BRANCH&lt;/code&gt; active branch, may be &lt;code&gt;nil&lt;/code&gt; if the repo&#39;s in &#34;detached HEAD&#34; state&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the latest commit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;START&lt;/code&gt; starting line number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;END&lt;/code&gt; ending line number, &lt;code&gt;nil&lt;/code&gt; unless region is active&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link-commit&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME COMMIT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the commit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;See Also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/copy-as-format&#34;&gt;copy-as-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/output-as-format&#34;&gt;output-as-format&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More tests!&lt;/li&gt; &#xA; &lt;li&gt;Consolidate &lt;code&gt;git-link-*-alist&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git-link-grep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Emacs-Kotlin-Mode-Maintainers/kotlin-mode</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/Emacs-Kotlin-Mode-Maintainers/kotlin-mode</id>
    <link href="https://github.com/Emacs-Kotlin-Mode-Maintainers/kotlin-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin major mode for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Emacs Kotlin Mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/kotlin-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/kotlin-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In a sense the title says it all, this is an &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt; major mode for editing &lt;a href=&#34;http://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; source code ‚Äì and in the future &lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt; build files.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Emacs 24 or later, use the package management system to install this mode from &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt; (*).&lt;/p&gt; &#xA;&lt;p&gt;If you are using an earlier version of Emacs, you are probably best advised to upgrade Emacs to a version with package management so you can use package management to install the mode from MELPA.&lt;/p&gt; &#xA;&lt;p&gt;(*) As at 2016-06-20 this mode is only in MELPA and not in MELPA stable, a release will be made when a version is ready to be declared.&lt;/p&gt; &#xA;&lt;h2&gt;Kotlin REPL key binding&lt;/h2&gt; &#xA;&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt; &#xA; &lt;colgroup&gt; &#xA;  &lt;col class=&#34;org-left&#34;&gt; &#xA;  &lt;col class=&#34;org-left&#34;&gt; &#xA; &lt;/colgroup&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;C-c C-z&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;Start REPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;C-c C-n&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;Send current line to REPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;C-c C-r&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;Send selected region to REPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;C-c C-c&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;Send current code block to REPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;C-c C-b&lt;/td&gt; &#xA;   &lt;td class=&#34;org-left&#34;&gt;Send whole buffer to REPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/borg</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/emacscollective/borg</id>
    <link href="https://github.com/emacscollective/borg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Assimilate Emacs packages as Git submodules&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Assimilate Emacs packages as Git submodules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Borg is a bare-bones package manager for Emacs packages. It provides only a few essential features and should be combined with other tools such as [[https://github.com/magit/magit][Magit]], [[https://github.com/emacscollective/epkg][epkg]], [[https://github.com/jwiegley/use-package][use-package]], and [[https://github.com/tarsius/auto-compile][auto-compile]].&lt;/p&gt; &#xA;&lt;p&gt;Borg assimilates packages into the =&lt;del&gt;/.emacs.d= repository as Git submodules. An assimilated package is called a drone and a borg-based =&lt;/del&gt;/.emacs.d= repository is called a collective.&lt;/p&gt; &#xA;&lt;p&gt;/For more information see the [[https://emacsair.me/2016/05/17/assimilate-emacs-packages-as-git-submodules][announcement]] and the [[https://emacsmirror.net/manual/borg][manual]]./&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/color-theme-sanityinc-tomorrow</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/purcell/color-theme-sanityinc-tomorrow</id>
    <link href="https://github.com/purcell/color-theme-sanityinc-tomorrow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A set of comprehensive Emacs color themes based on Chris Kempson&#39;s &#39;tomorrow&#39; themes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/color-theme-sanityinc-tomorrow&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/color-theme-sanityinc-tomorrow-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/color-theme-sanityinc-tomorrow/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/color-theme-sanityinc-tomorrow/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/color-theme-sanityinc-tomorrow&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/color-theme-sanityinc-tomorrow-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An Emacs version of &lt;a href=&#34;https://github.com/ChrisKempson/Tomorrow-Theme&#34;&gt;Chris Kempson&#39;s &#34;Tomorrow&#34; themes&lt;/a&gt;, with much more extensive face definitions than the &#34;official&#34; Emacs variant.&lt;/p&gt; &#xA;&lt;p&gt;The themes work with both the built-in theming support in recent Emacsen, &lt;em&gt;and&lt;/em&gt; via the traditional &lt;code&gt;color-theme.el&lt;/code&gt; add-on library in older versions, so use whichever you prefer.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re all set up to use &lt;a href=&#34;http://marmalade-repo.org&#34;&gt;Marmalade&lt;/a&gt; or &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt; (highly recommended!), simply&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET color-theme-sanityinc-tomorrow RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/dimitri/el-get/&#34;&gt;el-get&lt;/a&gt;, simply add this to your packages list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;color-theme-sanityinc-tomorrow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, ensure a directory containing these files is on your &lt;code&gt;load-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using an Emacs version older than 23.x, you&#39;ll also need to install &lt;code&gt;color-theme.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;color-theme-sanityinc-tomorrow)&#xA;&#xA;M-x color-theme-sanityinc-tomorrow-day&#xA;M-x color-theme-sanityinc-tomorrow-night&#xA;M-x color-theme-sanityinc-tomorrow-blue&#xA;M-x color-theme-sanityinc-tomorrow-bright&#xA;M-x color-theme-sanityinc-tomorrow-eighties&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In newer Emacs versions, just require the library as above, then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x customize-themes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Author links:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;üíù Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;üíº LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;‚úç sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;üê¶ @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Malabarba/aggressive-indent-mode</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/Malabarba/aggressive-indent-mode</id>
    <link href="https://github.com/Malabarba/aggressive-indent-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs minor mode that keeps your code always indented. More reliable than electric-indent-mode.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aggressive-indent-mode &lt;a href=&#34;http://melpa.org/#/aggressive-indent&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/aggressive-indent-badge.svg?sanitize=true&#34; alt=&#34;Melpa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/aggressive-indent&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/aggressive-indent-badge.svg?sanitize=true&#34; alt=&#34;Melpa-Stable&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;electric-indent-mode&lt;/code&gt; is enough to keep your code nicely aligned when all you do is type. However, once you start shifting blocks around, transposing lines, or slurping and barfing sexps, indentation is bound to go wrong.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;aggressive-indent-mode&lt;/code&gt;&lt;/strong&gt; is a minor mode that keeps your code &lt;strong&gt;always&lt;/strong&gt; indented. It reindents after every change, making it more reliable than &lt;code&gt;electric-indent-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Demonstration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;An example of Lisp mode (Emacs Lisp): &lt;img src=&#34;https://raw.githubusercontent.com/Malabarba/aggressive-indent-mode/master/lisp-example.gif&#34; alt=&#34;Lisp Code Example&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An example of non-Lisp mode (C): &lt;img src=&#34;https://raw.githubusercontent.com/Malabarba/aggressive-indent-mode/master/c-example.gif&#34; alt=&#34;C Code Example&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;p&gt;This package is available from Melpa, you may install it by calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET aggressive-indent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then activate it with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;emacs-lisp-mode-hook #&#39;aggressive-indent-mode)&#xA;(add-hook &#39;css-mode-hook #&#39;aggressive-indent-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use this hook on any mode you want, &lt;code&gt;aggressive-indent&lt;/code&gt; is not exclusive to emacs-lisp code. In fact, if you want to turn it on for every programming mode, you can do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-aggressive-indent-mode 1)&#xA;(add-to-list &#39;aggressive-indent-excluded-modes &#39;html-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual Installation&lt;/h4&gt; &#xA;&lt;p&gt;If you don&#39;t want to install from Melpa, you can download it manually, place it in your &lt;code&gt;load-path&lt;/code&gt; along with its dependency &lt;code&gt;cl-lib&lt;/code&gt; (which you should already have if your &lt;code&gt;emacs-version&lt;/code&gt; is at least 24.3).&lt;/p&gt; &#xA;&lt;p&gt;Then require it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;aggressive-indent)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;aggressive-indent-dont-indent-if&lt;/code&gt; lets you customize when you &lt;strong&gt;don&#39;t&lt;/strong&gt; want indentation to happen. For instance, if you think it&#39;s annoying that lines jump around in &lt;code&gt;c++-mode&lt;/code&gt; because you haven&#39;t typed the &lt;code&gt;;&lt;/code&gt; yet, you could add the following clause:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list&#xA; &#39;aggressive-indent-dont-indent-if&#xA; &#39;(and (derived-mode-p &#39;c++-mode)&#xA;       (null (string-match &#34;\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)&#34;&#xA;                           (thing-at-point &#39;line)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gratipay.com/Malabarba&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/gratipay/gratipay-badge/2.1.3/dist/gratipay.png&#34; alt=&#34;Gratipay&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsmirror/cmake-mode</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/emacsmirror/cmake-mode</id>
    <link href="https://github.com/emacsmirror/cmake-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major-mode for editing CMake sources&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>atgreen/emacs</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/atgreen/emacs</id>
    <link href="https://github.com/atgreen/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My emacs config&lt;/p&gt;&lt;hr&gt;&lt;p&gt;;; ========================================================================= ;; Anthony Green&#39;s GNU Emacs configuration file. ;; ;; Copyright (C) 2009 Anthony Green &lt;a href=&#34;mailto:green@moxielogic.com&#34;&gt;green@moxielogic.com&lt;/a&gt; ;; ;; This file is free software: you can redistribute it and/or modify ;; it under the terms of the GNU General Public License as published ;; by the Free Software Foundation, either version 3 of the License, ;; or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;;; This file is distributed in the hope that it will be useful, but ;; WITHOUT ANY WARRANTY; without even the implied warranty of ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU ;; General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;;; You should have received a copy of the GNU General Public License ;; along with this file. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;. ;; =========================================================================&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>syl20bnr/nose.el</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/syl20bnr/nose.el</id>
    <link href="https://github.com/syl20bnr/nose.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This gives a bunch of functions that handle running nosetests on a particular buffer or part of a buffer. Fork from https://bitbucket.org/durin42/nosemacs/overview&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nose.el&lt;/h1&gt; &#xA;&lt;p&gt;This gives a bunch of functions that handle running nosetests on a particular buffer or part of a buffer.&lt;/p&gt; &#xA;&lt;p&gt;This is a fork from the &lt;a href=&#34;https://bitbucket.org/durin42/nosemacs/overview&#34;&gt;bitbucket repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s different ?&lt;/h2&gt; &#xA;&lt;p&gt;This fork:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;brings Windows compatibility.&lt;/li&gt; &#xA; &lt;li&gt;calls python with an inline script to launch nose.&lt;/li&gt; &#xA; &lt;li&gt;can launch test suites (require to install the nose fixes via &lt;code&gt;easy_install nose-fixes&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;is compatible with virtualenv&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need to add the directory containing &lt;code&gt;nose.el&lt;/code&gt; to your &lt;code&gt;load-path&lt;/code&gt;, and then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;nose)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;By default, the root of a project is found by looking for any of the files &lt;code&gt;setup.cfg&lt;/code&gt;, &lt;code&gt;.hg&lt;/code&gt;, &lt;code&gt;.git&lt;/code&gt; and &lt;code&gt;.projectile&lt;/code&gt;. You can add files to check for to the file list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;nose-project-root-files &#34;something&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can change the project root test to detect in some other way whether a directory is the project root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq nose-project-root-test (lambda (dirname) (equal dirname &#34;foo&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want dots as output, rather than the verbose output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(defvar nose-use-verbose nil) ; default is t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Probably also want some key bindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;python-mode-hook&#xA;          (lambda ()&#xA;            (local-set-key &#34;\C-ca&#34; &#39;nosetests-all)&#xA;            (local-set-key &#34;\C-cm&#34; &#39;nosetests-module)&#xA;            (local-set-key &#34;\C-cs&#34; &#39;nosetests-suite)&#xA;            (local-set-key &#34;\C-c.&#34; &#39;nosetests-one)&#xA;            (local-set-key &#34;\C-cpa&#34; &#39;nosetests-pdb-all)&#xA;            (local-set-key &#34;\C-cpm&#34; &#39;nosetests-pdb-module)&#xA;            (local-set-key &#34;\C-cps&#34; &#39;nosetests-pdb-suite)&#xA;            (local-set-key &#34;\C-cp.&#34; &#39;nosetests-pdb-one)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;To be able to launch a test suite, your suite must define a function with the name &lt;code&gt;load_tests&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For instance (typical example to make &lt;code&gt;PyDev&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;nose.el&lt;/code&gt; happy):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import unittest&#xA;&#xA;ALL_TESTS = unittest.TestSuite([my_suites_go_here]) &#xA;&#xA;def load_tests(loader=None, tests=None, pattern=None):&#xA;    return ALL_TESTS&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    unittest.TextTestRunner(verbosity=2).run(ALL_TESTS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;To the original authors of nose.el: &lt;code&gt;Jason Pellerin&lt;/code&gt; and &lt;code&gt;Augie Fackler&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/epkg</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/emacscollective/epkg</id>
    <link href="https://github.com/emacscollective/epkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Browse the Emacsmirror package database&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Browse the Emacsmirror package database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides access to a local copy of the [[https://emacsmirror.net][Emacsmirror]] package database. It provides low-level functions for querying the database and a &lt;del&gt;package.el&lt;/del&gt;-like user interface for browsing the available packages.&lt;/p&gt; &#xA;&lt;p&gt;The Emacsmirror is a growing collection of Emacs Lisp packages. All mirrored packages are available as Git repositories. In most cases this is done by mirroring the upstream Git repository, but if upstream uses something else, then the mirror nevertheless makes the package available as a Git repository.&lt;/p&gt; &#xA;&lt;p&gt;One primary purpose of the Emacsmirror is to provide a comprehensive list of available Emacs packages, including packages which have gone out of fashion (but might later prove to be useful still).&lt;/p&gt; &#xA;&lt;p&gt;For more information see the [[https://emacsmirror.net/manual/epkg][manual]] and the [[https://emacsmirror.net][Emacsmirror]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nelhage/elisp</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/nelhage/elisp</id>
    <link href="https://github.com/nelhage/elisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nelhage&#39;s emacs configuration&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>emacs-mirror/emacs</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/emacs-mirror/emacs</id>
    <link href="https://github.com/emacs-mirror/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2022 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; &#xA;&lt;p&gt;This directory tree holds version 29.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; &#xA;&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; &#xA;&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; &#xA;&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&#34;mailto:bug-gnu-emacs@gnu.org&#34;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; &#xA;&lt;p&gt;See the &#34;Bugs&#34; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&#34;https://savannah.gnu.org/mail/?group=emacs&#34;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&#34;https://lists.gnu.org/&#34;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; &#xA;&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; &#xA;&lt;p&gt;There are several subdirectories:&lt;/p&gt; &#xA;&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script.&lt;/p&gt; &#xA;&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; &#xA;&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; &#xA;&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; &#xA;&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rmloveland/zoom-to-point</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/rmloveland/zoom-to-point</id>
    <link href="https://github.com/rmloveland/zoom-to-point" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs functions that zoom in on the text at point.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Exposes a command, &lt;code&gt;zoom-toggle&#39;, which will increase or decrease the size of the text at point, and a variable, &lt;/code&gt;&lt;em&gt;default-zoom-level&lt;/em&gt;&#39;, which determines the change in size.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>e2r0r/joy-emacs</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/e2r0r/joy-emacs</id>
    <link href="https://github.com/e2r0r/joy-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;enjoy with emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#title README&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;mailto:breeze.guangfeng@googlemail.com&#34;&gt;breeze.guangfeng@googlemail.com&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;my .emacs and site-lisp backup here&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add .emacs for console&lt;/li&gt; &#xA; &lt;li&gt;fix .emacs with classic theme supporting&lt;/li&gt; &#xA; &lt;li&gt;add SML-Mode&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cmugang/dotemacs</title>
    <updated>2022-06-01T02:08:13Z</updated>
    <id>tag:github.com,2022-06-01:/cmugang/dotemacs</id>
    <link href="https://github.com/cmugang/dotemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ïù¥Îß•Ïä§ ÏÑ§Ï†ï ÌååÏùº&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Read me.&lt;/p&gt;</summary>
  </entry>
</feed>