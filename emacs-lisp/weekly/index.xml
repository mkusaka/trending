<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-07T01:47:24Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>copilot-emacs/copilot.el</title>
    <updated>2024-01-07T01:47:24Z</updated>
    <id>tag:github.com,2024-01-07:/copilot-emacs/copilot.el</id>
    <link href="https://github.com/copilot-emacs/copilot.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot.el&lt;/h1&gt; &#xA;&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This plugin is unofficial and based on binaries provided by &lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;copilot.vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to &lt;a href=&#34;https://github.com/features/copilot&#34;&gt;GitHub Copilot&lt;/a&gt; to use this plugin.&lt;/p&gt; &#xA;&lt;p&gt;Current maintainer: &lt;a href=&#34;https://github.com/emil-vdw&#34;&gt;@emil-vdw&lt;/a&gt;, &lt;a href=&#34;https://github.com/rakotomandimby&#34;&gt;@rakotomandimby&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Retired maintainer: &lt;a href=&#34;https://github.com/zerolfx&#34;&gt;@zerolfx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure your Emacs version is at least 27, and the dependency package &lt;code&gt;editorconfig&lt;/code&gt; (&lt;a href=&#34;https://melpa.org/#/editorconfig&#34;&gt;melpa&lt;/a&gt;) is also installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; v16+. (You can specify the path to &lt;code&gt;node&lt;/code&gt; executable by setting &lt;code&gt;copilot-node-executable&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt; (&lt;code&gt;NotAuthorized&lt;/code&gt; means you don&#39;t have a valid subscription).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package! copilot&#xA;  :recipe (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;*.el&#34; &#34;dist&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; accept completion from copilot and fallback to company&#xA;(use-package! copilot&#xA;  :hook (prog-mode . copilot-mode)&#xA;  :bind (:map copilot-completion-map&#xA;              (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion)&#xA;              (&#34;TAB&#34; . &#39;copilot-accept-completion)&#xA;              (&#34;C-TAB&#34; . &#39;copilot-accept-completion-by-word)&#xA;              (&#34;C-&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion-by-word)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; &#xA; &lt;p&gt;If pressing tab to complete sometimes doesn&#39;t work you might want to bind completion to another key or try:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(after! (evil copilot)&#xA;  ;; Define the custom function that either accepts the completion or does the default behavior&#xA;  (defun my/copilot-tab-or-default ()&#xA;    (interactive)&#xA;    (if (and (bound-and-true-p copilot-mode)&#xA;             ;; Add any other conditions to check for active copilot suggestions if necessary&#xA;             )&#xA;        (copilot-accept-completion)&#xA;      (evil-insert 1))) ; Default action to insert a tab. Adjust as needed.&#xA;&#xA;  ;; Bind the custom function to &amp;lt;tab&amp;gt; in Evil&#39;s insert state&#xA;  (evil-define-key &#39;insert &#39;global (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my/copilot-tab-or-default))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; ===================&#xA;;; dotspacemacs/layers&#xA;;; ===================&#xA;&#xA;;; add or uncomment the auto-completion layer&#xA;dotspacemacs-configuration-layers&#xA;&#39;(&#xA;  ...&#xA;  auto-completion&#xA;  ...&#xA; )&#xA;&#xA;;; add copilot.el to additional packages&#xA;dotspacemacs-additional-packages&#xA; &#39;((copilot :location (recipe&#xA;                       :fetcher github&#xA;                       :repo &#34;zerolfx/copilot.el&#34;&#xA;                       :files (&#34;*.el&#34; &#34;dist&#34;))))&#xA;&#xA;;; ========================&#xA;;; dotspacemacs/user-config&#xA;;; ========================&#xA;&#xA;;; accept completion from copilot and fallback to company&#xA;&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends))&#xA;  &#xA;(with-eval-after-load &#39;copilot&#xA;  (define-key copilot-completion-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion)&#xA;  (define-key copilot-completion-map (kbd &#34;TAB&#34;) &#39;copilot-accept-completion)&#xA;  (define-key copilot-completion-map (kbd &#34;C-TAB&#34;) &#39;copilot-accept-completion-by-word)&#xA;  (define-key copilot-completion-map (kbd &#34;C-&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion-by-word))&#xA;&#xA;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;General Configurations&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Load via &lt;code&gt;straight.el&lt;/code&gt; or &lt;code&gt;quelpa&lt;/code&gt; (recommended)&lt;/h5&gt; &#xA; &lt;h6&gt;&lt;code&gt;straight.el&lt;/code&gt;:&lt;/h6&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :straight (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))&#xA;  :ensure t)&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h6&gt;&lt;code&gt;quelpa&lt;/code&gt; + &lt;code&gt;quelpa-use-package&lt;/code&gt;:&lt;/h6&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :quelpa (copilot :fetcher github&#xA;                   :repo &#34;zerolfx/copilot.el&#34;&#xA;                   :branch &#34;main&#34;&#xA;                   :files (&#34;dist&#34; &#34;*.el&#34;)))&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Option 2: Load manually&lt;/h5&gt; &#xA; &lt;p&gt;Please make sure you have these dependencies installed (available in ELPA/MELPA):&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;After installing those, clone this repository then insert the below snippet into your config file.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path &#34;/path/to/copilot.el&#34;)&#xA;(require &#39;copilot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;2. Configure completion&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; &#xA; &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; &#xA; &lt;p&gt;Use tab to accept completions (you may also want to bind &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; to some key):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key copilot-completion-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion)&#xA;(define-key copilot-completion-map (kbd &#34;TAB&#34;) &#39;copilot-accept-completion)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Programming language detection&lt;/h3&gt; &#xA;&lt;p&gt;Copilot.el detects the programming language of a buffer based on the major-mode name, stripping the &lt;code&gt;-mode&lt;/code&gt; part. Resulting languageId should match table &lt;a href=&#34;https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers&#34;&gt;here&lt;/a&gt;. You can add unusual major-mode mappings to &lt;code&gt;copilot-major-mode-alist&lt;/code&gt;. Without the proper language set suggestions may be of poorer quality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;copilot-major-mode-alist &#39;(&#34;enh-ruby&#34; . &#34;ruby&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-diagnose&lt;/h4&gt; &#xA;&lt;p&gt;Check the current status of the plugin. Also you can check logs in the &lt;code&gt;*copilot events*&lt;/code&gt; buffer and stderr output in the &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-login&lt;/h4&gt; &#xA;&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-mode&lt;/h4&gt; &#xA;&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-complete&lt;/h4&gt; &#xA;&lt;p&gt;Try to complete at the current point.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; &#xA;&lt;p&gt;Accept the current completion.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; &#xA;&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; &#xA;&lt;p&gt;Cycle through the completion list.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-logout&lt;/h4&gt; &#xA;&lt;p&gt;Logout from GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-node-executable&lt;/h4&gt; &#xA;&lt;p&gt;The executable path of Node.js.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; &#xA;&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-predicates / copilot-disable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable/disable triggering Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-display-predicates / copilot-disable-display-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable/disable showing Copilot&#39;s completions in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay-ignore-commands&lt;/h4&gt; &#xA;&lt;p&gt;A list of commands that won&#39;t cause the overlay to be cleared.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-network-proxy&lt;/h4&gt; &#xA;&lt;p&gt;Format: &lt;code&gt;&#39;(:host &#34;127.0.0.1&#34; :port 7890 :username: &#34;user&#34; :password: &#34;password&#34;)&lt;/code&gt;, where &lt;code&gt;:username&lt;/code&gt; and &lt;code&gt;:password&lt;/code&gt; are optional.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq copilot-network-proxy &#39;(:host &#34;127.0.0.1&#34; :port 7890))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-overlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; &#xA;&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-box.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; &#xA;&lt;h3&gt;Cursor Jump to End of Line When Typing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are using &lt;code&gt;whitespace-mode&lt;/code&gt;, make sure to remove &lt;code&gt;newline-mark&lt;/code&gt; from &lt;code&gt;whitespace-style&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have restarted your Emacs (and rebuild the plugin if necessary) after updating the plugin.&lt;/li&gt; &#xA; &lt;li&gt;Please enable event logging by customize &lt;code&gt;copilot-log-max&lt;/code&gt; (to e.g. 1000), then paste related logs in the &lt;code&gt;*copilot events*&lt;/code&gt; and &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/li&gt; &#xA; &lt;li&gt;If an exception is thrown, please also paste the stack trace (use &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; to enable stack trace).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cycle through suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;These projects helped me a lot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyX12/company-tabnine/&#34;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cryptobadger/flight-attendant.el&#34;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>auto-complete/popup-el</title>
    <updated>2024-01-07T01:47:24Z</updated>
    <id>tag:github.com,2024-01-07:/auto-complete/popup-el</id>
    <link href="https://github.com/auto-complete/popup-el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visual Popup Interface Library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/popup&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/popup-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/popup&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/popup-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;popup.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/auto-complete/popup-el/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/auto-complete/popup-el/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;popup.el is a visual popup user interface library for Emacs. This provides a basic API and common UI widgets such as popup tooltips and popup menus.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Tooltip&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Popup Menu&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Popup Cascade Menu&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/auto-complete/popup-el/master/etc/images/popup1.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/auto-complete/popup-el/master/etc/images/popup2.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/auto-complete/popup-el/master/etc/images/popup3.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;popup.el&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; with package.el. popwin is tested under GNU Emacs 24 or later.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.04 or later may simply &lt;code&gt;apt-get install elpa-popup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Popup Items&lt;/h2&gt; &#xA;&lt;p&gt;Elements of &lt;code&gt;popup-list&lt;/code&gt; have to be popup items. A popup item is substantially a string but it may involve some text-properties. There are two ways to make popup items. One is just using strings. Another is to use the &lt;code&gt;popup-make-item&lt;/code&gt; function, which just returns the string after adding text-properties of its keywords. Effective text-properties are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;value&lt;/code&gt; -- This represents the &lt;strong&gt;real&lt;/strong&gt; value of the item. This will be used when returning the value but not the item (or string) from some synchronous functions such as &lt;code&gt;popup-menu*&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;face&lt;/code&gt; -- The background face of the item. The value of &lt;code&gt;popup-face&lt;/code&gt; will be overridden.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selection-face&lt;/code&gt; -- The selection face of the item. The value of &lt;code&gt;popup-selection-face&lt;/code&gt; will be overridden.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;document&lt;/code&gt; -- The documentation string or function of the item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;summary&lt;/code&gt; -- The summary string of the item. This will be shown inline with the item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; -- The symbol character of the item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sublist&lt;/code&gt; -- The sublist of the item. This is effective only with &lt;code&gt;popup-cascade-menu&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of properties can be accessed by &lt;code&gt;popup-item-&amp;lt;property&amp;gt;&lt;/code&gt; utility function.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-item-propertize&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-item-propertize item &amp;amp;rest properties =&amp;gt; item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;propertize&lt;/code&gt; except that this avoids overriding existed value with &lt;code&gt;nil&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-make-item&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-make-item name &amp;amp;key value popup-face selection-face sublist&#xA;document symbol summary =&amp;gt; item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The utility function of &lt;code&gt;popup-item-propertize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Popups&lt;/h2&gt; &#xA;&lt;p&gt;This section describes the basic data structures and operations of popups.&lt;/p&gt; &#xA;&lt;h3&gt;Struct: &lt;code&gt;popup&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Any instance of &lt;code&gt;popup&lt;/code&gt; structure has the following fields (some unimportant fields are not listed):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;point&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;row&lt;/code&gt; -- The line number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;column&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;width&lt;/code&gt; -- Max width of &lt;code&gt;popup&lt;/code&gt; instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt; -- Max height of &lt;code&gt;popup&lt;/code&gt; instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;current-height&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;direction&lt;/code&gt; -- Positive number means forward, negative number means backward.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parent&lt;/code&gt; -- The parent of &lt;code&gt;popup&lt;/code&gt; instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;face&lt;/code&gt; -- The background face.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selection-face&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scroll-bar&lt;/code&gt; -- Non-nil means &lt;code&gt;popup&lt;/code&gt; instance has a scroll bar.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; -- Non-nil means &lt;code&gt;popup&lt;/code&gt; instance has a space for displaying symbols of item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; -- The current position of &lt;code&gt;list&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scroll-top&lt;/code&gt; -- The offset of scrolling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt; -- The contents of &lt;code&gt;popup&lt;/code&gt; instance in a list of items (strings).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;original-list&lt;/code&gt; -- Same as &lt;code&gt;list&lt;/code&gt; except that this is not filtered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these fields can be accessed by &lt;code&gt;popup-&amp;lt;field&amp;gt;&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-create&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-create point width height &amp;amp;key min-height max-width around face&#xA;selection-face scroll-bar margin-left margin-right symbol parent&#xA;parent-offset =&amp;gt; popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a popup instance at &lt;code&gt;POINT&lt;/code&gt; with &lt;code&gt;WIDTH&lt;/code&gt; and &lt;code&gt;HEIGHT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MIN-HEIGHT&lt;/code&gt; is the minimal height of the popup. The default value is 0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MAX-WIDTH&lt;/code&gt; is the maximum width of the popup. The default value is nil (no limit). If a floating point, the value refers to the ratio of the window. If an integer, limit is in characters.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;AROUND&lt;/code&gt; is non-nil, the popup will be displayed around the point but not at the point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FACE&lt;/code&gt; is the background face of the popup. The default value is &lt;code&gt;popup-face&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECTION-FACE&lt;/code&gt; is the foreground (selection) face of the popup The default value is &lt;code&gt;popup-face&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;SCROLL-BAR&lt;/code&gt; is non-nil, the popup will have a scroll bar at the right.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;MARGIN-LEFT&lt;/code&gt; is non-nil, the popup will have a margin at the left.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;MARGIN-RIGHT&lt;/code&gt; is non-nil, the popup will have a margin at the right.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SYMBOL&lt;/code&gt; is a single character which indicates the kind of the item.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PARENT&lt;/code&gt; is the parent popup instance. If &lt;code&gt;PARENT&lt;/code&gt; is omitted, the popup will be a root instance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PARENT-OFFSET&lt;/code&gt; is a row offset from the parent popup.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq popup (popup-create (point) 10 10))&#xA;(popup-set-list popup &#39;(&#34;Foo&#34; &#34;Bar&#34; &#34;Baz&#34;))&#xA;(popup-draw popup)&#xA;;; do something here&#xA;(popup-delete popup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-delete&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-delete popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delete the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-live-p&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-live-p popup =&amp;gt; boolean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-set-list&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-set-list popup list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the contents of the &lt;code&gt;POPUP&lt;/code&gt;. &lt;code&gt;LIST&lt;/code&gt; has to be popup items.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-draw&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-draw popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Draw the contents of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-hide&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-hide popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hide the &lt;code&gt;POPUP&lt;/code&gt;. To show again, call &lt;code&gt;popup-draw&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-hidden-p&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-hidden-p popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Return non-nil if the &lt;code&gt;POPUP&lt;/code&gt; is hidden.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-select&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;    popup-select popup index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Select the item of &lt;code&gt;INDEX&lt;/code&gt; of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-selected-item&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-selected-item popup =&amp;gt; item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Return the selected item of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Return non-nil if the &lt;code&gt;POPUP&lt;/code&gt; is still alive.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-next&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-next popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Select the next item of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-previous&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-previous popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Select the next item of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-scroll-down&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-scroll-down popup n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scroll down &lt;code&gt;N&lt;/code&gt; items of the &lt;code&gt;POPUP&lt;/code&gt;. This won&#39;t wrap.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-scroll-up&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-scroll-up popup n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scroll up &lt;code&gt;N&lt;/code&gt; items of the &lt;code&gt;POPUP&lt;/code&gt;. This won&#39;t wrap.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-isearch&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-isearch popup &amp;amp;key cursor-color keymap callback help-delay&#xA;=&amp;gt; boolean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter incremental search event loop of &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tooltips&lt;/h2&gt; &#xA;&lt;p&gt;A tooltip is an useful visual UI widget for displaying information something about what cursor points to.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-tip&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-tip string &amp;amp;key point around width height min-height max-width&#xA;truncate margin margin-left margin-right scroll-bar parent&#xA;parent-offset nowait nostrip prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Show a tooltip with message &lt;code&gt;STRING&lt;/code&gt; at &lt;code&gt;POINT&lt;/code&gt;. This function is synchronized unless &lt;code&gt;NOWAIT&lt;/code&gt; specified. Almost all arguments are same as &lt;code&gt;popup-create&lt;/code&gt; except for &lt;code&gt;TRUNCATE&lt;/code&gt;, &lt;code&gt;NOWAIT&lt;/code&gt;, &lt;code&gt;NOSTRIP&lt;/code&gt; and &lt;code&gt;PROMPT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;TRUNCATE&lt;/code&gt; is non-nil, the tooltip can be truncated.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;NOWAIT&lt;/code&gt; is non-nil, this function immediately returns the tooltip instance without entering event loop.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;NOSTRIP&lt;/code&gt; is non-nil, &lt;code&gt;STRING&lt;/code&gt; properties are not stripped.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PROMPT&lt;/code&gt; is a prompt string used when reading events during the event loop.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(popup-tip &#34;Hello, World!&#34;)&#xA;;; reach here after the tooltip disappeared&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Popup Menus&lt;/h2&gt; &#xA;&lt;p&gt;Popup menu is an useful visual UI widget for prompting users to select an item of a list.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-menu*&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;popup-menu* list &amp;amp;key point around width height margin margin-left&#xA;margin-right scroll-bar symbol parent parent-offset keymap&#xA;fallback help-delay nowait prompt isearch isearch-filter isearch-cursor-color&#xA;isearch-keymap isearch-callback initial-index =&amp;gt; selected-value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Show a popup menu of &lt;code&gt;LIST&lt;/code&gt; at &lt;code&gt;POINT&lt;/code&gt;. This function returns the value of the selected item. Almost all arguments are same as &lt;code&gt;popup-create&lt;/code&gt; except for &lt;code&gt;KEYMAP&lt;/code&gt;, &lt;code&gt;FALLBACK&lt;/code&gt;, &lt;code&gt;HELP-DELAY&lt;/code&gt;, &lt;code&gt;PROMPT&lt;/code&gt;, &lt;code&gt;ISEARCH&lt;/code&gt;, &lt;code&gt;ISEARCH-FILTER&lt;/code&gt;, &lt;code&gt;ISEARCH-CURSOR-COLOR&lt;/code&gt;, &lt;code&gt;ISEARCH-KEYMAP&lt;/code&gt; and &lt;code&gt;ISEARCH-CALLBACK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;KEYMAP&lt;/code&gt; is provided, it is a keymap which is used when processing events during event loop.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;FALLBACK&lt;/code&gt; is provided, it is a function taking two arguments; a key and a command. &lt;code&gt;FALLBACK&lt;/code&gt; is called when no special operation is found on the key. The default value is &lt;code&gt;popup-menu-fallback&lt;/code&gt;, which does nothing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HELP-DELAY&lt;/code&gt; is a delay of displaying helps.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;NOWAIT&lt;/code&gt; is non-nil, this function immediately returns the menu instance without entering event loop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PROMPT&lt;/code&gt; is a prompt string when reading events during event loop.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ISEARCH&lt;/code&gt; is non-nil, do isearch as soon as displaying the popup menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ISEARCH-FILTER&lt;/code&gt; is a filtering function taking two arguments: search pattern and list of items. Returns a list of matching items.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ISEARCH-CURSOR-COLOR&lt;/code&gt; is a cursor color during isearch. The default value is `popup-isearch-cursor-color&#39;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ISEARCH-KEYMAP&lt;/code&gt; is a keymap which is used when processing events during event loop. The default value is &lt;code&gt;popup-isearch-keymap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ISEARCH-CALLBACK&lt;/code&gt; is a function taking one argument. &lt;code&gt;popup-menu&lt;/code&gt; calls &lt;code&gt;ISEARCH-CALLBACK&lt;/code&gt;, if specified, after isearch finished or isearch canceled. The arguments is whole filtered list of items.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;INITIAL-INDEX&lt;/code&gt; is non-nil, this is an initial index value for &lt;code&gt;popup-select&lt;/code&gt;. Only positive integer is valid.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(popup-menu* &#39;(&#34;Foo&#34; &#34;Bar&#34; &#34;Baz&#34;))&#xA;;; =&amp;gt; &#34;Baz&#34; if you select Baz&#xA;(popup-menu* (list (popup-make-item &#34;Yes&#34; :value t)&#xA;                   (popup-make-item &#34;No&#34; :value nil)))&#xA;;; =&amp;gt; t if you select Yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-cascade-menu&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;popup-menu&lt;/code&gt; except that an element of &lt;code&gt;LIST&lt;/code&gt; can be also a sub-menu if the element is a cons cell formed &lt;code&gt;(ITEM . SUBLIST)&lt;/code&gt; where &lt;code&gt;ITEM&lt;/code&gt; is an usual item and &lt;code&gt;SUBLIST&lt;/code&gt; is a list of the sub menu.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(popup-cascade-menu &#39;((&#34;Top1&#34; &#34;Sub1&#34; &#34;Sub2&#34;) &#34;Top2&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize Variables&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;popup-isearch-regexp-builder-function&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Function used to construct a regexp from a pattern. You may for instance provide a function that replaces spaces by &#39;.+&#39; if you like helm or ivy style of completion. Default value is &lt;code&gt;#&#39;regexp-quote&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Copyright (C) 2011-2015 Tomohiro Matsuyama &amp;lt;&lt;a href=&#34;mailto:m2ym.pub@gmail.com&#34;&gt;m2ym.pub@gmail.com&lt;/a&gt;&amp;gt;&lt;br&gt; Copyright (C) 2020-2022 Jen-Chieh Shen &amp;lt;&lt;a href=&#34;mailto:jcs090218@gmail.com&#34;&gt;jcs090218@gmail.com&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-straight/compat</title>
    <updated>2024-01-07T01:47:24Z</updated>
    <id>tag:github.com,2024-01-07:/emacs-straight/compat</id>
    <link href="https://github.com/emacs-straight/compat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the compat package from GNU ELPA, current as of 2024-01-07&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;COMPATibility Library for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;This is the source of compat.el, the forwards-compatibility library for (GNU) Emacs Lisp, versions 24.4 and newer. The intended audience are package developers that are interested in using newer developments, without having to break compatibility.&lt;/p&gt; &#xA;&lt;p&gt;For information on how to use Compat, please consult the &lt;a href=&#34;https://elpa.gnu.org/packages/doc/compat.html&#34;&gt;manual&lt;/a&gt;. The latest state of development can be found in the &lt;a href=&#34;https://elpa.gnu.org/devel/doc/compat.html&#34;&gt;snapshot version&lt;/a&gt; of the manual.&lt;/p&gt; &#xA;&lt;h2&gt;Source code&lt;/h2&gt; &#xA;&lt;p&gt;Compat is developed on &lt;a href=&#34;https://github.com/emacs-compat/compat&#34;&gt;GitHub&lt;/a&gt;. The code is mirrored to the &lt;a href=&#34;https://git.savannah.gnu.org/cgit/emacs/elpa.git/tree/?h=externals/compat&#34;&gt;GNU ELPA repository&lt;/a&gt;, which is the canonical repository for the &lt;a href=&#34;http://elpa.gnu.org/packages/compat.html&#34;&gt;GNU ELPA package builds&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bug and patches&lt;/h2&gt; &#xA;&lt;p&gt;Patches, bug reports and comments can be sent via &lt;a href=&#34;https://github.com/emacs-compat/compat&#34;&gt;GitHub&lt;/a&gt;. These may include issues in the compatibility code, missing definitions or performance issues. We also provide a &lt;a href=&#34;https://lists.sr.ht/~pkal/compat-devel&#34;&gt;development mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;As compat.el is distributed as part of &lt;a href=&#34;http://elpa.gnu.org/packages/compat.html&#34;&gt;GNU ELPA&lt;/a&gt;, and therefore requires a &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Copyright-Assignment.html&#34;&gt;copyright assignment&lt;/a&gt; to the &lt;a href=&#34;https://www.fsf.org/&#34;&gt;FSF&lt;/a&gt;, for all non-trivial code contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Distribution&lt;/h2&gt; &#xA;&lt;p&gt;compat.el and all other source files in this directory are distributed under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GNU Public License 3&lt;/a&gt; like Emacs itself. The manual is distributed under the &lt;a href=&#34;https://www.gnu.org/licenses/fdl-1.3.html&#34;&gt;GNU Free Documentation License 1.3&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>