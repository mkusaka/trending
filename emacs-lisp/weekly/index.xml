<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-02T01:47:33Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ichernyshovvv/grid.el</title>
    <updated>2024-06-02T01:47:33Z</updated>
    <id>tag:github.com,2024-06-02:/ichernyshovvv/grid.el</id>
    <link href="https://github.com/ichernyshovvv/grid.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;grid.el&lt;/h2&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#description][Description]]&lt;/li&gt; &#xA; &lt;li&gt;[[#api][API]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Description :PROPERTIES: :CUSTOM_ID: description :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This library allows you to put text data into boxes and align them horizontally, applying margin, padding, borders.&lt;/p&gt; &#xA;&lt;p&gt;A snippet from grid-examples.el. Evaluate it in a buffer at the first character of some line:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (grid-insert-content `(((:content ,grid-multiline-str :width 10 :border t :padding 1) (:content ,grid-lipsum-2 :width &#34;33%&#34; :padding 2) (:content ,grid-lipsum :width &#34;33%&#34; :padding 3)) ((:content ,grid-multiline-str :width &#34;49%&#34; :border t :padding 1) (:content ,grid-lipsum :width &#34;49%&#34; :border t :padding 10)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Result: #+html: &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ichernyshovvv/grid.el/master/image.png&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can wrap into a box any text you want. Any text properties will be saved. For example, this is a combination of [[https:https://github.com/ichernyshovvv/light-dashboard][light-dashboard]] and some other text:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (grid-insert-content `(((:content ,grid-calendar :width 24 :border t :padding 1) (:content ,light-dashboard-dashboard-string :width 40) (:content ,grid-lipsum :width 40 :border 1 :padding 1)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Result: #+html: &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ichernyshovvv/grid.el/master/image-with-light-dashboard.png&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API :PROPERTIES: :CUSTOM_ID: api :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;grid-insert-box&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src elisp (grid-insert-box BOX) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;grid-insert-rows&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src elisp (grid-insert-rows &#39;(ROW ROW ...)) ;; ROW: &#39;(BOX BOX ...) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;grid-insert-row&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src elisp (grid-insert-row ROW) ;; ROW: &#39;(BOX BOX ...) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;grid-insert-column&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src elisp (grid-insert-column COLUMN) ;; COLUMN: &#39;(BOX BOX ...) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;grid-get-box&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;grid-get-column&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;grid-get-row&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;grid-get-rows&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BOX formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;string. In that case the width of the box will be equal to the longest line in the string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;plist. Properties:&lt;/p&gt; &lt;p&gt;:content - string to be inserted in the box&lt;/p&gt; &lt;p&gt;Optional:&lt;/p&gt; &lt;p&gt;:align center left (default) right&lt;/p&gt; &lt;p&gt;:width &#34;50%&#34; integer (number of characters)&lt;/p&gt; &lt;p&gt;:border nil or t&lt;/p&gt; &lt;p&gt;:padding - horizontal padding integer (number of characters)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>gavv/om-dash</title>
    <updated>2024-06-02T01:47:33Z</updated>
    <id>tag:github.com,2024-06-02:/gavv/om-dash</id>
    <link href="https://github.com/gavv/om-dash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Building blocks for org-based dashboards.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;om-dash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-toc&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#what-is-this?][What is this?]]&lt;/li&gt; &#xA; &lt;li&gt;[[#example-workflow][Example workflow]]&lt;/li&gt; &#xA; &lt;li&gt;[[#example-blocks][Example blocks]]&lt;/li&gt; &#xA; &lt;li&gt;[[#contributions][Contributions]]&lt;/li&gt; &#xA; &lt;li&gt;[[#releases][Releases]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#updater-functions][Updater functions]]&lt;/li&gt; &#xA; &lt;li&gt;[[#dynamic-blocks][Dynamic blocks]]&lt;/li&gt; &#xA; &lt;li&gt;[[#templates][Templates]]&lt;/li&gt; &#xA; &lt;li&gt;[[#minor-mode][Minor mode]]&lt;/li&gt; &#xA; &lt;li&gt;[[#variables][Variables]]&lt;/li&gt; &#xA; &lt;li&gt;[[#faces][Faces]]&lt;/li&gt; &#xA; &lt;li&gt;[[#authors][Authors]]&lt;/li&gt; &#xA; &lt;li&gt;[[#license][License]] #+END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What is this?&lt;/p&gt; &#xA;&lt;p&gt;=om-dash= implements [[https://orgmode.org/manual/Dynamic-Blocks.html][dynamic blocks]] for org-mode that you can use to &lt;em&gt;compose a custom project dashboard&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It was always a struggle to me to keep track of the &#34;big picture&#34; when I&#39;m hopping between projects.&lt;/p&gt; &#xA;&lt;p&gt;I wanted a tool that can give me a brief summary of all ongoing projects: what&#39;s done, what&#39;s next, and what requires attention. And then I realized that it can be easily implemented using org-mode, so here we go.&lt;/p&gt; &#xA;&lt;p&gt;Currently om-dash implementats three configurable dynamic blocks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=om-dash-github= - generates a table with issues or pull requests from github repository&lt;/li&gt; &#xA; &lt;li&gt;=om-dash-orgfile= - generates tables with top-level entries from an org file&lt;/li&gt; &#xA; &lt;li&gt;=om-dash-command= - generates a table from the output of a shell command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It also provides a minor mode (=om-dash-mode=) that applies highlighting to the generated tables.&lt;/p&gt; &#xA;&lt;p&gt;In addition, there is support for templates, which allows to create reusable parameterized configurations of the above blocks (e.g. for specific github query or shell command).&lt;/p&gt; &#xA;&lt;p&gt;** Example workflow&lt;/p&gt; &#xA;&lt;p&gt;Here I describe my own workflow. Yours can be different of course, but I think this should give the basic idea about this package.&lt;/p&gt; &#xA;&lt;p&gt;For every project, I have three main sources of &#34;things&#34; to keep track of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;github repository with issues and pull requests&lt;/li&gt; &#xA; &lt;li&gt;personal org file with tasks grouped into some kind of milestones (usually releases)&lt;/li&gt; &#xA; &lt;li&gt;a few IMAP directories with email related to this project (mailing lists, notifications, discussions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On top of that, I have a file called &#34;dashboard.org&#34; with a top-level entry for every project, and a few second-level entries with om-dash dynamic blocks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a block with all open or recently merged pull requests from github&lt;/li&gt; &#xA; &lt;li&gt;another block with open github issues (for big projects, I display only issues from specific column of github kanban board, or from specific milestone)&lt;/li&gt; &#xA; &lt;li&gt;one block for every ongoing or upcoming milestone from my personal org file for this project, showing top level tasks from each milestone&lt;/li&gt; &#xA; &lt;li&gt;block with project&#39;s IMAP directories and unread email counter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Screenshot of a project from &#34;dashboard.org&#34; described above:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_HTML &lt;img src=&#34;https://raw.githubusercontent.com/gavv/om-dash/main/screenshot/project_example.png&#34; width=&#34;650px&#34;&gt; #+END_HTML&lt;/p&gt; &#xA;&lt;p&gt;** Example blocks&lt;/p&gt; &#xA;&lt;p&gt;*** Github pull requests&lt;/p&gt; &#xA;&lt;p&gt;Display all open pull requests and pull requests closed last month.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example ,#+BEGIN: om-dash-github :repo &#34;roc-streaming/roc-toolkit&#34; :type pr :open &#34;*&#34; :closed &#34;-1mo&#34; ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;[[./screenshot/github_pull_requests.png]]&lt;/p&gt; &#xA;&lt;p&gt;*** Github issues&lt;/p&gt; &#xA;&lt;p&gt;Display all open issues except those which have &#34;help wanted&#34; label.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example ,#+BEGIN: om-dash-github :repo &#34;gavv/signal-estimator&#34; :type issue :open &#34;-label:&#34;help wanted&#34;&#34; ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;[[./screenshot/github_issues.png]]&lt;/p&gt; &#xA;&lt;p&gt;*** Github project column&lt;/p&gt; &#xA;&lt;p&gt;Display all open issues from &#34;In work&#34; column of github project with id &#34;2&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This examples uses built-in =project-column= template, which transforms =:project= and =:column= arguments into corresponding github queries for =om-dash-github= block.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example ,#+BEGIN: om-dash-github :template project-column :repo &#34;roc-streaming/roc-toolkit&#34; :type issue :project 2 :column &#34;In work&#34; ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;[[./screenshot/github_project_column.png]]&lt;/p&gt; &#xA;&lt;p&gt;*** Tasks from org file&lt;/p&gt; &#xA;&lt;p&gt;Display 1-level TODO tasks as tables with their child 2-level TODO tasks as table rows. Hide 1-level DONE tasks.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example ,#+BEGIN: om-dash-orgfile :file &#34;~/cloud/org/roc-toolkit.org&#34; :todo 2 :done 0 ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;[[./screenshot/org_tasks.png]]&lt;/p&gt; &#xA;&lt;p&gt;*** Project email&lt;/p&gt; &#xA;&lt;p&gt;Display unread email counters for project&#39;s IMAP directories fetched by Claws Mail client.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example ,#+BEGIN: om-dash-command :template claws-mail :folder &#34;develop/roc&#34; ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;[[./screenshot/command_claws_mail.png]]&lt;/p&gt; &#xA;&lt;p&gt;This example uses custom (not built-in) template, which transforms =:folder= argument into appropriate arguments for =om-dash-command= block:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-claws-mail-template (params) (let ((folder (plist-get params :folder))) (list :headline (format &#34;emails (%s)&#34; folder) :command (format &#34;claws2json -f %s&#34; folder) :columns &#39;(&#34;state&#34; &#34;count&#34; &#34;total&#34; &#34;folder&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;om-dash-templates &#39;(claws-mail . my-claws-mail-template)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;(Here, =claws2json= is a small script I wrote that reads =folderlist.xml= file produced by Claws Mail and prints a table in JSON format.)&lt;/p&gt; &#xA;&lt;p&gt;** Contributions&lt;/p&gt; &#xA;&lt;p&gt;So far I&#39;ve implemented only things that I needed for my own workflow, plus some reasonable customization. I have quite limited time for this project, so if you would like to extend it for your workflow, pull requests are very welcome!&lt;/p&gt; &#xA;&lt;p&gt;Also, as I&#39;ve never created elisp packages before, I probably missed some conventions or best practices. Again, patches are welcome.&lt;/p&gt; &#xA;&lt;p&gt;** Releases&lt;/p&gt; &#xA;&lt;p&gt;Changelog file can be found here: [[./CHANGES.md][changelog]].&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;Required external tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://cli.github.com/][gh]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://jqlang.github.io/jq/][jq]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To access private repos on github, follow [[https://cli.github.com/manual/gh_auth_login][official instructions]].&lt;/p&gt; &#xA;&lt;p&gt;Elisp dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/alphapapa/org-ql][org-ql]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/magnars/s.el][s.el]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/alphapapa/ts.el][ts.el]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mrc/el-csv][el-csv]] (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Package was tested on Emacs 28.2 on Linux.&lt;/p&gt; &#xA;&lt;p&gt;Instructions for straight.el:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; required dependencies (straight-use-package &#39;org-ql) (straight-use-package &#39;s) (straight-use-package &#39;ts)&lt;/p&gt; &#xA;&lt;p&gt;;; optional (straight-use-package &#39;(el-csv :type git :host github :repo &#34;mrc/el-csv&#34; :branch &#34;master&#34; :files (&#34;parse-csv.el&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;;; om-dash (straight-use-package &#39;(om-dash :type git :host github :repo &#34;gavv/om-dash&#34; :branch &#34;main&#34; :files (&#34;om-dash.el&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Updater functions&lt;/p&gt; &#xA;&lt;p&gt;The following functions can be used to update dynamic blocks (of any kind) in current document. You can bind them to =org-mode-map= or =om-dash-mode-map=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol org-update-all-dblocks *** org-update-all-dblocks Update all dynamic blocks in the buffer. This function can be used in a hook. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol org-dblock-update *** org-dblock-update User command for updating dynamic blocks. Update the dynamic block at point. With prefix ARG, update all dynamic blocks in the buffer.&lt;/p&gt; &#xA;&lt;p&gt;(fn &amp;amp;optional ARG) #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-update-tree *** om-dash-update-tree Update all dynamic blocks in current tree, starting from top-level entry.&lt;/p&gt; &#xA;&lt;p&gt;E.g., for the following document:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code&gt;             o&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.1 &amp;lt;- cursor | *** 1.1.1 | [tree] *** 1.1.2 | ** 1.2 o&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 2.1 #+end_example&lt;/p&gt; &#xA;&lt;p&gt;the function updates all blocks inside 1., 1.1, 1.1.1, 1.1.2, 1.2. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-update-subtree *** om-dash-update-subtree Update all dynamic blocks in current subtree, starting from current entry.&lt;/p&gt; &#xA;&lt;p&gt;E.g., for the following document:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.1 &amp;lt;- cursor o *** 1.1.1 | [subtree] *** 1.1.2 o ** 1.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 2.1 #+end_example&lt;/p&gt; &#xA;&lt;p&gt;the function updates all blocks inside 1.1, 1.1.1, 1.1.2. #+END:&lt;/p&gt; &#xA;&lt;p&gt;** Dynamic blocks&lt;/p&gt; &#xA;&lt;p&gt;This section lists dynamic blocks implemented by =om-dash=. Each block named =om-dash-xxx= corresponds to a function named =org-dblock-write:om-dash-xxx=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol org-dblock-write:om-dash-github *** om-dash-github Builds org heading with a table of github issues or pull requests.&lt;/p&gt; &#xA;&lt;p&gt;Basic example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example ,#+BEGIN: om-dash-github :repo &#34;octocat/linguist&#34; :type pr :open &#34;*&#34; :closed &#34;-1w&#34; ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;More advanced example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example ,#+BEGIN: om-dash-github :repo &#34;octocat/hello-world&#34; :type any :open (&#34;comments:&amp;gt;2&#34; &#34;.title | contains(&#34;Hello&#34;)&#34;) :sort &#34;updatedAt&#34; :limit 100 ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Parameters:&lt;/p&gt; &#xA;&lt;p&gt;| parameter | default | description | |----------------+--------------------------+--------------------------------------| | :repo | required | github repo in form “&#xA; &lt;login&gt;&#xA;  /&#xA;  &lt;repo&gt;&#xA;   “ | | :type | required | topic type (=issue=, =pr=, =any=) | | :any | match none (““) | query for topics in any state | | :open | match all (“*“) | query for topics in open state | | :closed | match none (““) | query for topics in closed state | | :sort | “createdAt“ | sort results by given field | | :fields | =om-dash-github-fields= | explicitly specify list of fields | | :limit | =om-dash-github-limit= | limit number of results | | :table-columns | =om-dash-github-columns= | list of columns to display | | :headline | auto | text for generated org heading | | :heading-level | auto | level for generated org heading |&#xA;  &lt;/repo&gt;&#xA; &lt;/login&gt;&lt;/p&gt; &#xA;&lt;p&gt;A query for =:any=, =:open=, and =:closed= can have one of the two forms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;github-query&#34;&lt;/li&gt; &#xA; &lt;li&gt;(&#34;github-query&#34; &#34;jq-selector&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=github-query= is a string using github search syntax: &lt;a href=&#34;https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests&#34;&gt;https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Besides standard syntax, a few extended forms are supported:&lt;/p&gt; &#xA;&lt;p&gt;| form | description | |----------+---------------------------------------| | “*“ | match all | | “-123d“ | match if updated during last 123 days | | “-123w“ | same, but weeks | | “-123mo“ | same, but months | | “-123y“ | same, but years |&lt;/p&gt; &#xA;&lt;p&gt;=jq-selector= is an optional selector to filter results using jq command: &lt;a href=&#34;https://jqlang.github.io/jq/&#34;&gt;https://jqlang.github.io/jq/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can specify different queries for open and closed topics, e.g. to show all open issues but only recently closed issues, use:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example :open &#34;*&#34; :closed &#34;-1mo&#34; #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use a single query regardless of topic state:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example :any &#34;-1mo&#34; #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, the block uses combination of gh and jq commands like:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example gh -R &#xA; &lt;repo&gt;&#xA;   issue list &#xA;  &lt;br&gt; --json &#xA;  &lt;fields&gt;&#xA;    --search &#xA;   &lt;github query&gt;&#xA;     --limit &#xA;    &lt;limit&gt; &#xA;     &lt;br&gt; | jq &#39;[.[] | select(&#xA;     &lt;jq selector&gt;&#xA;      )]&#39; #+end_example&#xA;     &lt;/jq&gt;&#xA;    &lt;/limit&gt;&#xA;   &lt;/github&gt;&#xA;  &lt;/fields&gt;&#xA; &lt;/repo&gt;&lt;/p&gt; &#xA;&lt;p&gt;(jq part is optional and is used only when the query has the second form when both github and jq parts are present).&lt;/p&gt; &#xA;&lt;p&gt;Exact commands being executed are printed to =&lt;em&gt;om-dash&lt;/em&gt;= buffer if =om-dash-verbose= is set.&lt;/p&gt; &#xA;&lt;p&gt;By default, github query uses all fields from =om-dash-github-fields=, plus any field from =om-dash-github-auto-enabled-fields= if it&#39;s present in jq selector.&lt;/p&gt; &#xA;&lt;p&gt;The latter allows to exclude fields that makes queries slower, when they&#39;re not used. To change this, you can specify =:fields= parameter explicitly. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol org-dblock-write:om-dash-orgfile *** om-dash-orgfile Builds org headings with tables based on another org file.&lt;/p&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example ,#+BEGIN: om-dash-orgfile :repo :file &#34;~/my/file.org&#34; :todo 2 :done 1 ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Parameters:&lt;/p&gt; &#xA;&lt;p&gt;| parameter | default | description | |----------------+---------------------------+----------------------------------| | :file | required | path to .org file | | :todo | 2 | nesting level for TODO entries | | :done | 1 | nesting level for DONE entries | | :table-columns | =om-dash-orgfile-columns= | list of columns to display | | :heading-level | auto | level for generated org headings |&lt;/p&gt; &#xA;&lt;p&gt;This block generates an org heading with a table for every top-level (i.e. level-1) org heading in specified =:file=, with nested headings represented as table rows.&lt;/p&gt; &#xA;&lt;p&gt;Parameters =:todo= and =:done= limit how deep the tree is traversed for top-level headings in =TODO= and =DONE= states.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;if =:done= is 0, then level-1 headings in =DONE= state are not shown at all&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if =:done= is 1, then level-1 headings in =DONE= state are shown &#34;collapsed&#34;, i.e. org heading is generated, but without table&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if =:done= is 2, then level-1 headings in =DONE= state are shown and each has a table with its level-2 children&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if =:done= is 3, then level-1 headings in =DONE= state are shown and each has a table with its level-2 and level-3 children&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;...and so on. Same applies to =:todo= parameter.&lt;/p&gt; &#xA;&lt;p&gt;Whether a heading is considered as =TODO= or =DONE= is defined by variables =om-dash-todo-keywords= and =om-dash-done-keywords=.&lt;/p&gt; &#xA;&lt;p&gt;By default they are automatically populated from =org-todo-keywords-1= and =org-done-keywords=, but you can set them to your own values. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol org-dblock-write:om-dash-command *** om-dash-command Builds org heading with a table from output of a shell command.&lt;/p&gt; &#xA;&lt;p&gt;Usage example: #+begin_example ,#+BEGIN: om-dash-command :command &#34;curl -s &lt;a href=&#34;https://api.github.com/users/octocat/repos&#34;&gt;https://api.github.com/users/octocat/repos&lt;/a&gt;&#34; :format json :columns (&#34;name&#34; &#34;forks_count&#34;) ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;| parameter | default | description | |----------------+----------+-----------------------------------------| | :command | required | shell command to run | | :columns | required | column names (list of strings) | | :format | =json= | command output format (=json= or =csv=) | | :headline | auto | text for generated org heading | | :heading-level | auto | level for generated org heading |&lt;/p&gt; &#xA;&lt;p&gt;If =:format= is =json=, command output should be a JSON array of JSON objects, which have a value for every key from =:columns=.&lt;/p&gt; &#xA;&lt;p&gt;If =:format= is =csv=, command output should be CSV. First column of CSV becomes value of first column from =:columns=, and so on.&lt;/p&gt; &#xA;&lt;p&gt;Note: using CSV format requires installing =parse-csv= package from &lt;a href=&#34;https://github.com/mrc/el-csv&#34;&gt;https://github.com/mrc/el-csv&lt;/a&gt; #+END:&lt;/p&gt; &#xA;&lt;p&gt;** Templates&lt;/p&gt; &#xA;&lt;p&gt;This section lists built-in templates provided by =om-dash=. You can define your own templates via =om-dash-templates= variable.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-github:milestone *** om-dash-github:milestone Template for =om-dash-github= block to display topics from given milestone.&lt;/p&gt; &#xA;&lt;p&gt;Can be used as =:template= =milestone= with =om-dash-github= block.&lt;/p&gt; &#xA;&lt;p&gt;Usage example: #+begin_example ,#+BEGIN: om-dash-github :template milestone :repo &#34;user/repo&#34; :type issue :milestone &#34;name&#34; ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Parameters:&lt;/p&gt; &#xA;&lt;p&gt;| parameter | default | description | |----------------+----------+---------------------------------------| | :repo | required | github repo in form “&#xA; &lt;login&gt;&#xA;  /&#xA;  &lt;repo&gt;&#xA;   “ | | :type | required | topic type (=issue=, =pr=, =any=) | | :state | =open= | topic state (=open=, =closed=, =any=) | | :milestone | required | milestone name (string) | | :headline | auto | text for generated org heading | | :heading-level | auto | level for generated org heading |&#xA;  &lt;/repo&gt;&#xA; &lt;/login&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any other parameter is not used by template and passed to =om-dash-github= as-is. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-github:project-column *** om-dash-github:project-column Template for =om-dash-github= block to display topics from given project&#39;s column.&lt;/p&gt; &#xA;&lt;p&gt;Can be used as =:template= =project-column= with =om-dash-github= block.&lt;/p&gt; &#xA;&lt;p&gt;Usage example: #+begin_example ,#+BEGIN: om-dash-github :template project-column :repo &#34;user/repo&#34; :type issue :project 123 :column &#34;name&#34; ... ,#+END: #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Parameters:&lt;/p&gt; &#xA;&lt;p&gt;| parameter | default | description | |----------------+----------+----------------------------------------------------------| | :repo | required | github repo in form “&#xA; &lt;login&gt;&#xA;  /&#xA;  &lt;repo&gt;&#xA;   “ | | :type | required | topic type (=issue=, =pr=, =any=) | | :state | =open= | topic state (=open=, =closed=, =any=) | | :project | required | project id in form &#xA;   &lt;number&gt;&#xA;     or “&#xA;    &lt;login&gt;&#xA;     /&#xA;     &lt;repo&gt;&#xA;      /&#xA;      &lt;number&gt;&#xA;       “ | | :column | required | project column name (string) | | :headline | auto | text for generated org heading | | :heading-level | auto | level for generated org heading |&#xA;      &lt;/number&gt;&#xA;     &lt;/repo&gt;&#xA;    &lt;/login&gt;&#xA;   &lt;/number&gt;&#xA;  &lt;/repo&gt;&#xA; &lt;/login&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any other parameter is not used by template and passed to =om-dash-github= as-is. #+END:&lt;/p&gt; &#xA;&lt;p&gt;** Minor mode&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-mode *** om-dash-mode om-dash minor mode.&lt;/p&gt; &#xA;&lt;p&gt;This is a minor mode. If called interactively, toggle the &#39;OM-Dash mode&#39; mode. If the prefix argument is positive, enable the mode, and if it is zero or negative, disable the mode.&lt;/p&gt; &#xA;&lt;p&gt;If called from Lisp, toggle the mode if ARG is =toggle=. Enable the mode if ARG is nil, omitted, or is a positive number. Disable the mode if ARG is a negative number.&lt;/p&gt; &#xA;&lt;p&gt;To check whether the minor mode is enabled in the current buffer, evaluate =om-dash-mode=.&lt;/p&gt; &#xA;&lt;p&gt;The mode&#39;s hook is called both when the mode is enabled and when it is disabled.&lt;/p&gt; &#xA;&lt;p&gt;This minor mode for .org files enables additional highlighting inside org tables generated by om-dash dynamic blocks.&lt;/p&gt; &#xA;&lt;p&gt;Things that are highlighted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;table header and cell (text and background)&lt;/li&gt; &#xA; &lt;li&gt;org-mode keywords&lt;/li&gt; &#xA; &lt;li&gt;issue or pull request state, number, author&lt;/li&gt; &#xA; &lt;li&gt;tags&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After editing keywords list, you need to reactivate minor mode for changes to take effect.&lt;/p&gt; &#xA;&lt;p&gt;To active this mode automatically for specific files, you can use local variables (add this to the end of file):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example&lt;/p&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;eval: (om-dash-mode 1)&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt; &#xA;&lt;p&gt;#+end_example #+END:&lt;/p&gt; &#xA;&lt;p&gt;** Variables&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-todo-keywords *** om-dash-todo-keywords List of keywords considered as TODO.&lt;/p&gt; &#xA;&lt;p&gt;If block has any of the TODO keywords, block&#39;s heading becomes TODO. The first element from this list is used for block&#39;s heading in this case.&lt;/p&gt; &#xA;&lt;p&gt;If a keyword from this list doesn&#39;t have a face in =om-dash-keyword-faces=, it uses default TODO keyword face.&lt;/p&gt; &#xA;&lt;p&gt;When nil, filled automatically from =org-todo-keywords=, =org-done-keywords=, and pre-defined github keywords. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-done-keywords *** om-dash-done-keywords List of keywords considered as DONE.&lt;/p&gt; &#xA;&lt;p&gt;If block doesn&#39;t have any of the TODO keywords, block&#39;s heading becomes DONE. The first element from this list is used for block&#39;s heading in this case.&lt;/p&gt; &#xA;&lt;p&gt;If a keyword from this list doesn&#39;t have a face in =om-dash-keyword-faces=, it uses default DONE keyword face.&lt;/p&gt; &#xA;&lt;p&gt;When nil, filled automatically from =org-todo-keywords=, =org-done-keywords=, and pre-defined github keywords. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-keyword-faces *** om-dash-keyword-faces Assoc list to map keywords to faces.&lt;/p&gt; &#xA;&lt;p&gt;If some keyword is not mapped to a face explicitly, default face is selected, using face for TODO or DONE depending on whether that keyword is in =om-dash-todo-keywords= or =om-dash-done-keywords=. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-tag-map *** om-dash-tag-map Assoc list to remap or unmap tag names.&lt;/p&gt; &#xA;&lt;p&gt;Defines how tags are displayed in table. You can map tag name to a different string or to nil to hide it. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-templates *** om-dash-templates Assoc list of expandable templates for om-dash dynamic blocks.&lt;/p&gt; &#xA;&lt;p&gt;Each entry is a cons of two symbols: template name and template function.&lt;/p&gt; &#xA;&lt;p&gt;When you pass &#34;:template foo&#34; as an argument to a dynamic block, it finds a function in this list by key =foo= and uses it to &#34;expand&#34; the template.&lt;/p&gt; &#xA;&lt;p&gt;This function is invoked with dynamic block parameters plist and should return a new plist. The new plist is used to update the original parameters by appending new values and overwriting existing values.&lt;/p&gt; &#xA;&lt;p&gt;For example, if =org-dblock-write:om-dash-github= block has parameters: #+begin_example (:template project-column :repo &#34;owner/repo&#34; :type &#39;pr :project 123 :column &#34;In progress&#34;) #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Dynamic block will use =project-column= as a key in =om-dash-templates= and find =om-dash-github:project-column= function.&lt;/p&gt; &#xA;&lt;p&gt;The function is invoked with all the parameters above, and returns something like: #+begin_example (:repo &#34;owner/repo&#34; :type &#39;pr :open (&#34;project:owner/repo/123&#34; &#34;.projectCards[] | (.column.name == &#34;In progress&#34;)&#34;)) #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Then this parameters are interpreted as usual. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-table-fixed-width *** om-dash-table-fixed-width If non-nil, align tables to have given fixed width. If nil, tables have minimum width that fits their contents. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-table-squeeze-empty *** om-dash-table-squeeze-empty If non-nil, automatically remove empty columns from tables. E.g. if every row has empty tags, :tags column is removed from this table. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-table-link-style *** om-dash-table-link-style How links are generated in om-dash tables.&lt;/p&gt; &#xA;&lt;p&gt;Allowed values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;:none - no links are inserted&lt;/li&gt; &#xA; &lt;li&gt;:text - only cell text becomes a link&lt;/li&gt; &#xA; &lt;li&gt;:cell - whole cell becomes a link #+END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-orgfile-columns *** om-dash-orgfile-columns Column list for =om-dash-orgfile= table.&lt;/p&gt; &#xA;&lt;p&gt;Supported values:&lt;/p&gt; &#xA;&lt;p&gt;| symbol | example | |-------------+-----------------| | :state | TODO, DONE, ... | | :title | text | | :title-link | [​[link][text]] | | :tags | :tag1:tag2:...: | #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-github-columns *** om-dash-github-columns Column list for =om-dash-github= table.&lt;/p&gt; &#xA;&lt;p&gt;Supported values:&lt;/p&gt; &#xA;&lt;p&gt;| symbol | example | |-------------+-------------------| | :state | OPEN, CLOSED, ... | | :number | #123 | | :author | @octocat | | :title | text | | :title-link | [​[link][text]] | | :tags | :tag1:tag2:...: | #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-github-limit *** om-dash-github-limit Default limit for github queries.&lt;/p&gt; &#xA;&lt;p&gt;E.g. if you query &#34;all open issues&#34; or &#34;closed issues since january&#34;, only last =om-dash-github-limit= results are returned. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-github-fields *** om-dash-github-fields List of json fields enabled by default in github queries.&lt;/p&gt; &#xA;&lt;p&gt;This defines which fields are present in github responses and hence can be used in jq selectors.&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t enable all fields by default because some of them noticeably slow down response times.&lt;/p&gt; &#xA;&lt;p&gt;There is also =om-dash-github-auto-enabled-fields=, which defines fields that are enabled automatically for a query if jq selector contains them.&lt;/p&gt; &#xA;&lt;p&gt;In addition, =org-dblock-write:om-dash-github= accepts =:fields= parameter, which can be used to overwrite fields list per-block. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-github-auto-enabled-fields *** om-dash-github-auto-enabled-fields List of json fields automatically enabled on demand in github queries.&lt;/p&gt; &#xA;&lt;p&gt;See =om-dash-github-fields= for more details. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-verbose *** om-dash-verbose Enable verbose logging. If non-nill, all commands and queries are logged to =&lt;em&gt;om-dash&lt;/em&gt;= buffer. #+END:&lt;/p&gt; &#xA;&lt;p&gt;** Faces&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-header-cell *** om-dash-header-cell Face used for entire cell in om-dash table header. You can use it so specify header background. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-header-text *** om-dash-header-text Face used for text in om-dash table header. You can use it so specify header font. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-cell *** om-dash-cell Face used for entire non-header cell in om-dash table. You can use it so specify cell background. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-text *** om-dash-text Face used for text in om-dash table non-header cell. You can use it so specify cell font. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-number *** om-dash-number Face used for issue or pull request numbers in om-dash tables. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-author *** om-dash-author Face used for issue or pull request authors in om-dash tables. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-todo-keyword *** om-dash-todo-keyword Face used for =TODO= keyword in om-dash tables. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-done-keyword *** om-dash-done-keyword Face used for =DONE= keyword in om-dash tables. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-open-keyword *** om-dash-open-keyword Face used for =OPEN= keyword in om-dash tables. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-merged-keyword *** om-dash-merged-keyword Face used for =MERGED= keyword in om-dash tables. #+END:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN: om-dash--readme-symbol :symbol om-dash-closed-keyword *** om-dash-closed-keyword Face used for =CLOSED= keyword in om-dash tables. #+END:&lt;/p&gt; &#xA;&lt;p&gt;** Authors&lt;/p&gt; &#xA;&lt;p&gt;See [[./AUTHORS.md][here]].&lt;/p&gt; &#xA;&lt;p&gt;** License&lt;/p&gt; &#xA;&lt;p&gt;[[LICENSE][GPLv3+]]&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mhayashi1120/japanlaw.el</title>
    <updated>2024-06-02T01:47:33Z</updated>
    <id>tag:github.com,2024-06-02:/mhayashi1120/japanlaw.el</id>
    <link href="https://github.com/mhayashi1120/japanlaw.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs 電子六法&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;e-gov.go.jp サイトの大幅な書式変更に伴い、このリポジトリは obsolete とします。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;japanlaw.el&lt;/h1&gt; &#xA;&lt;p&gt;日本の法律 (&lt;a href=&#34;http://law.e-gov.go.jp/&#34;&gt;http://law.e-gov.go.jp/&lt;/a&gt;) を Emacs で browse するための elisp です。 laws.el から fork しました。&lt;/p&gt; &#xA;&lt;p&gt;元開発者である Kazushi NODA さんのご厚意により、パッケージ名を変更して github, melpa で公開する許可をいただきました。 ありがとうございます。&lt;/p&gt; &#xA;&lt;p&gt;詳しい説明は以下の URL を参考にしてください。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.ne.jp/asahi/alpha/kazu/laws.html&#34;&gt;http://www.ne.jp/asahi/alpha/kazu/laws.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>