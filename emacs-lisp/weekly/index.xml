<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-31T01:46:22Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-straight/eldoc</title>
    <updated>2024-03-31T01:46:22Z</updated>
    <id>tag:github.com,2024-03-31:/emacs-straight/eldoc</id>
    <link href="https://github.com/emacs-straight/eldoc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the eldoc package from GNU ELPA, current as of 2024-03-31&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Wu-Bo/.emacs.d</title>
    <updated>2024-03-31T01:46:22Z</updated>
    <id>tag:github.com,2024-03-31:/Wu-Bo/.emacs.d</id>
    <link href="https://github.com/Wu-Bo/.emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;emacs 扩展仓库&lt;/p&gt;&lt;hr&gt;&lt;p&gt;C-c / hippe-expand Tab yasnippet M / auto-complete-clang-async&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magnars/s.el</title>
    <updated>2024-03-31T01:46:22Z</updated>
    <id>tag:github.com,2024-03-31:/magnars/s.el</id>
    <link href="https://github.com/magnars/s.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The long lost Emacs string manipulation library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;s.el &lt;a href=&#34;https://github.com/magnars/s.el/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/magnars/s.el/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;s.el testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/magnars/s.el?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/magnars/s.el/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The long lost Emacs string manipulation library.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s available on &lt;a href=&#34;https://melpa.org/&#34;&gt;Melpa&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can just dump &lt;code&gt;s.el&lt;/code&gt; in your load path somewhere.&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;h3&gt;Tweak whitespace&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-trim-s&#34;&gt;s-trim&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-trim-left-s&#34;&gt;s-trim-left&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-trim-right-s&#34;&gt;s-trim-right&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-chomp-s&#34;&gt;s-chomp&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-collapse-whitespace-s&#34;&gt;s-collapse-whitespace&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-word-wrap-len-s&#34;&gt;s-word-wrap&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-center-len-s&#34;&gt;s-center&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-pad-left-len-padding-s&#34;&gt;s-pad-left&lt;/a&gt; &lt;code&gt;(len padding s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-pad-right-len-padding-s&#34;&gt;s-pad-right&lt;/a&gt; &lt;code&gt;(len padding s)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;To shorter string&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-truncate-len-s&#34;&gt;s-truncate&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-left-len-s&#34;&gt;s-left&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-right-len-s&#34;&gt;s-right&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-chop-left-len-s&#34;&gt;s-chop-left&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-chop-right-len-s&#34;&gt;s-chop-right&lt;/a&gt; &lt;code&gt;(len s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-chop-suffix-suffix-s&#34;&gt;s-chop-suffix&lt;/a&gt; &lt;code&gt;(suffix s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-chop-suffixes-suffixes-s&#34;&gt;s-chop-suffixes&lt;/a&gt; &lt;code&gt;(suffixes s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-chop-prefix-prefix-s&#34;&gt;s-chop-prefix&lt;/a&gt; &lt;code&gt;(prefix s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-chop-prefixes-prefixes-s&#34;&gt;s-chop-prefixes&lt;/a&gt; &lt;code&gt;(prefixes s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-shared-start-s1-s2&#34;&gt;s-shared-start&lt;/a&gt; &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-shared-end-s1-s2&#34;&gt;s-shared-end&lt;/a&gt; &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;To longer string&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-repeat-num-s&#34;&gt;s-repeat&lt;/a&gt; &lt;code&gt;(num s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-concat-rest-strings&#34;&gt;s-concat&lt;/a&gt; &lt;code&gt;(&amp;amp;rest strings)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-prepend-prefix-s&#34;&gt;s-prepend&lt;/a&gt; &lt;code&gt;(prefix s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-append-suffix-s&#34;&gt;s-append&lt;/a&gt; &lt;code&gt;(suffix s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-splice-needle-n-s&#34;&gt;s-splice&lt;/a&gt; &lt;code&gt;(needle n s)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;To and from lists&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-lines-s&#34;&gt;s-lines&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-match-regexp-s-optional-start&#34;&gt;s-match&lt;/a&gt; &lt;code&gt;(regexp s &amp;amp;optional start)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-match-strings-all-regex-string&#34;&gt;s-match-strings-all&lt;/a&gt; &lt;code&gt;(regex string)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-matched-positions-all-regexp-string-optional-subexp-depth&#34;&gt;s-matched-positions-all&lt;/a&gt; &lt;code&gt;(regexp string &amp;amp;optional subexp-depth)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-slice-at-regexp-s&#34;&gt;s-slice-at&lt;/a&gt; &lt;code&gt;(regexp s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-split-separator-s-optional-omit-nulls&#34;&gt;s-split&lt;/a&gt; &lt;code&gt;(separator s &amp;amp;optional omit-nulls)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-split-up-to-separator-s-n-optional-omit-nulls&#34;&gt;s-split-up-to&lt;/a&gt; &lt;code&gt;(separator s n &amp;amp;optional omit-nulls)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-join-separator-strings&#34;&gt;s-join&lt;/a&gt; &lt;code&gt;(separator strings)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Predicates&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-equals-s1-s2&#34;&gt;s-equals?&lt;/a&gt; &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-less-s1-s2&#34;&gt;s-less?&lt;/a&gt; &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-matches-regexp-s-optional-start&#34;&gt;s-matches?&lt;/a&gt; &lt;code&gt;(regexp s &amp;amp;optional start)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-blank-s&#34;&gt;s-blank?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-present-s&#34;&gt;s-present?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-ends-with-suffix-s-optional-ignore-case&#34;&gt;s-ends-with?&lt;/a&gt; &lt;code&gt;(suffix s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-starts-with-prefix-s-optional-ignore-case&#34;&gt;s-starts-with?&lt;/a&gt; &lt;code&gt;(prefix s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-contains-needle-s-optional-ignore-case&#34;&gt;s-contains?&lt;/a&gt; &lt;code&gt;(needle s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-lowercase-s&#34;&gt;s-lowercase?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-uppercase-s&#34;&gt;s-uppercase?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-mixedcase-s&#34;&gt;s-mixedcase?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-capitalized-s&#34;&gt;s-capitalized?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-numeric-s&#34;&gt;s-numeric?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The misc bucket&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-replace-old-new-s&#34;&gt;s-replace&lt;/a&gt; &lt;code&gt;(old new s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-replace-all-replacements-s&#34;&gt;s-replace-all&lt;/a&gt; &lt;code&gt;(replacements s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-downcase-s&#34;&gt;s-downcase&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-upcase-s&#34;&gt;s-upcase&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-capitalize-s&#34;&gt;s-capitalize&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-titleize-s&#34;&gt;s-titleize&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-with-s-form-rest-more&#34;&gt;s-with&lt;/a&gt; &lt;code&gt;(s form &amp;amp;rest more)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-index-of-needle-s-optional-ignore-case&#34;&gt;s-index-of&lt;/a&gt; &lt;code&gt;(needle s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-reverse-s&#34;&gt;s-reverse&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-presence-s&#34;&gt;s-presence&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-format-template-replacer-optional-extra&#34;&gt;s-format&lt;/a&gt; &lt;code&gt;(template replacer &amp;amp;optional extra)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-lex-format-format-str&#34;&gt;s-lex-format&lt;/a&gt; &lt;code&gt;(format-str)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-count-matches-regexp-s-optional-start-end&#34;&gt;s-count-matches&lt;/a&gt; &lt;code&gt;(regexp s &amp;amp;optional start end)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-wrap-s-prefix-optional-suffix&#34;&gt;s-wrap&lt;/a&gt; &lt;code&gt;(s prefix &amp;amp;optional suffix)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pertaining to words&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-split-words-s&#34;&gt;s-split-words&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-lower-camel-case-s&#34;&gt;s-lower-camel-case&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-upper-camel-case-s&#34;&gt;s-upper-camel-case&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-snake-case-s&#34;&gt;s-snake-case&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-dashed-words-s&#34;&gt;s-dashed-words&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-capitalized-words-s&#34;&gt;s-capitalized-words&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-titleized-words-s&#34;&gt;s-titleized-words&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-word-initials-s&#34;&gt;s-word-initials&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/magnars/s.el/master/#s-blank-str-s&#34;&gt;s-blank-str?&lt;/a&gt; &lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation and examples&lt;/h2&gt; &#xA;&lt;h3&gt;s-trim &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove whitespace at the beginning and end of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-trim &#34;trim &#34;) ;; =&amp;gt; &#34;trim&#34;&#xA;(s-trim &#34; this&#34;) ;; =&amp;gt; &#34;this&#34;&#xA;(s-trim &#34; only  trims beg and end  &#34;) ;; =&amp;gt; &#34;only  trims beg and end&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-trim-left &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove whitespace at the beginning of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-trim-left &#34;trim &#34;) ;; =&amp;gt; &#34;trim &#34;&#xA;(s-trim-left &#34; this&#34;) ;; =&amp;gt; &#34;this&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-trim-right &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove whitespace at the end of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-trim-right &#34;trim &#34;) ;; =&amp;gt; &#34;trim&#34;&#xA;(s-trim-right &#34; this&#34;) ;; =&amp;gt; &#34; this&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-chomp &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove one trailing &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt; or &lt;code&gt;\r\n&lt;/code&gt; from &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-chomp &#34;no newlines\n&#34;) ;; =&amp;gt; &#34;no newlines&#34;&#xA;(s-chomp &#34;no newlines\r\n&#34;) ;; =&amp;gt; &#34;no newlines&#34;&#xA;(s-chomp &#34;some newlines\n\n&#34;) ;; =&amp;gt; &#34;some newlines\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-collapse-whitespace &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert all adjacent whitespace characters to a single space.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-collapse-whitespace &#34;only   one space   please&#34;) ;; =&amp;gt; &#34;only one space please&#34;&#xA;(s-collapse-whitespace &#34;collapse \n all \t sorts of \r whitespace&#34;) ;; =&amp;gt; &#34;collapse all sorts of whitespace&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-word-wrap &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is longer than &lt;code&gt;len&lt;/code&gt;, wrap the words with newlines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-word-wrap 10 &#34;This is too long&#34;) ;; =&amp;gt; &#34;This is\ntoo long&#34;&#xA;(s-word-wrap 10 &#34;This is way way too long&#34;) ;; =&amp;gt; &#34;This is\nway way\ntoo long&#34;&#xA;(s-word-wrap 10 &#34;It-wraps-words-but-does-not-break-them&#34;) ;; =&amp;gt; &#34;It-wraps-words-but-does-not-break-them&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-center &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is shorter than &lt;code&gt;len&lt;/code&gt;, pad it with spaces so it is centered.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-center 5 &#34;a&#34;) ;; =&amp;gt; &#34;  a  &#34;&#xA;(s-center 5 &#34;ab&#34;) ;; =&amp;gt; &#34;  ab &#34;&#xA;(s-center 1 &#34;abc&#34;) ;; =&amp;gt; &#34;abc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-pad-left &lt;code&gt;(len padding s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is shorter than &lt;code&gt;len&lt;/code&gt;, pad it with &lt;code&gt;padding&lt;/code&gt; on the left.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-pad-left 3 &#34;0&#34; &#34;3&#34;) ;; =&amp;gt; &#34;003&#34;&#xA;(s-pad-left 3 &#34;0&#34; &#34;23&#34;) ;; =&amp;gt; &#34;023&#34;&#xA;(s-pad-left 3 &#34;0&#34; &#34;1234&#34;) ;; =&amp;gt; &#34;1234&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-pad-right &lt;code&gt;(len padding s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is shorter than &lt;code&gt;len&lt;/code&gt;, pad it with &lt;code&gt;padding&lt;/code&gt; on the right.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-pad-right 3 &#34;.&#34; &#34;3&#34;) ;; =&amp;gt; &#34;3..&#34;&#xA;(s-pad-right 3 &#34;.&#34; &#34;23&#34;) ;; =&amp;gt; &#34;23.&#34;&#xA;(s-pad-right 3 &#34;.&#34; &#34;1234&#34;) ;; =&amp;gt; &#34;1234&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-truncate &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is longer than &lt;code&gt;len&lt;/code&gt;, cut it down to &lt;code&gt;len&lt;/code&gt; - 3 and add ... at the end.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-truncate 6 &#34;This is too long&#34;) ;; =&amp;gt; &#34;Thi...&#34;&#xA;(s-truncate 16 &#34;This is also too long&#34;) ;; =&amp;gt; &#34;This is also ...&#34;&#xA;(s-truncate 16 &#34;But this is not!&#34;) ;; =&amp;gt; &#34;But this is not!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-left &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns up to the &lt;code&gt;len&lt;/code&gt; first chars of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-left 3 &#34;lib/file.js&#34;) ;; =&amp;gt; &#34;lib&#34;&#xA;(s-left 3 &#34;li&#34;) ;; =&amp;gt; &#34;li&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-right &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns up to the &lt;code&gt;len&lt;/code&gt; last chars of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-right 3 &#34;lib/file.js&#34;) ;; =&amp;gt; &#34;.js&#34;&#xA;(s-right 3 &#34;li&#34;) ;; =&amp;gt; &#34;li&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-chop-left &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove the first &lt;code&gt;len&lt;/code&gt; chars from &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-chop-left 3 &#34;lib/file.js&#34;) ;; =&amp;gt; &#34;/file.js&#34;&#xA;(s-chop-left 3 &#34;li&#34;) ;; =&amp;gt; &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-chop-right &lt;code&gt;(len s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove the last &lt;code&gt;len&lt;/code&gt; chars from &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-chop-right 3 &#34;lib/file.js&#34;) ;; =&amp;gt; &#34;lib/file&#34;&#xA;(s-chop-right 3 &#34;li&#34;) ;; =&amp;gt; &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-chop-suffix &lt;code&gt;(suffix s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove &lt;code&gt;suffix&lt;/code&gt; if it is at end of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-chop-suffix &#34;-test.js&#34; &#34;penguin-test.js&#34;) ;; =&amp;gt; &#34;penguin&#34;&#xA;(s-chop-suffix &#34;\n&#34; &#34;no newlines\n&#34;) ;; =&amp;gt; &#34;no newlines&#34;&#xA;(s-chop-suffix &#34;\n&#34; &#34;some newlines\n\n&#34;) ;; =&amp;gt; &#34;some newlines\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-chop-suffixes &lt;code&gt;(suffixes s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove &lt;code&gt;suffixes&lt;/code&gt; one by one in order, if they are at the end of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-chop-suffixes &#39;(&#34;_test.js&#34; &#34;-test.js&#34; &#34;Test.js&#34;) &#34;penguin-test.js&#34;) ;; =&amp;gt; &#34;penguin&#34;&#xA;(s-chop-suffixes &#39;(&#34;\r&#34; &#34;\n&#34;) &#34;penguin\r\n&#34;) ;; =&amp;gt; &#34;penguin\r&#34;&#xA;(s-chop-suffixes &#39;(&#34;\n&#34; &#34;\r&#34;) &#34;penguin\r\n&#34;) ;; =&amp;gt; &#34;penguin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-chop-prefix &lt;code&gt;(prefix s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove &lt;code&gt;prefix&lt;/code&gt; if it is at the start of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-chop-prefix &#34;/tmp&#34; &#34;/tmp/file.js&#34;) ;; =&amp;gt; &#34;/file.js&#34;&#xA;(s-chop-prefix &#34;/tmp&#34; &#34;/tmp/tmp/file.js&#34;) ;; =&amp;gt; &#34;/tmp/file.js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-chop-prefixes &lt;code&gt;(prefixes s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Remove &lt;code&gt;prefixes&lt;/code&gt; one by one in order, if they are at the start of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-chop-prefixes &#39;(&#34;/tmp&#34; &#34;/my&#34;) &#34;/tmp/my/file.js&#34;) ;; =&amp;gt; &#34;/file.js&#34;&#xA;(s-chop-prefixes &#39;(&#34;/my&#34; &#34;/tmp&#34;) &#34;/tmp/my/file.js&#34;) ;; =&amp;gt; &#34;/my/file.js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-shared-start &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns the longest prefix &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; have in common.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-shared-start &#34;bar&#34; &#34;baz&#34;) ;; =&amp;gt; &#34;ba&#34;&#xA;(s-shared-start &#34;foobar&#34; &#34;foo&#34;) ;; =&amp;gt; &#34;foo&#34;&#xA;(s-shared-start &#34;bar&#34; &#34;foo&#34;) ;; =&amp;gt; &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-shared-end &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns the longest suffix &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; have in common.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-shared-end &#34;bar&#34; &#34;var&#34;) ;; =&amp;gt; &#34;ar&#34;&#xA;(s-shared-end &#34;foo&#34; &#34;foo&#34;) ;; =&amp;gt; &#34;foo&#34;&#xA;(s-shared-end &#34;bar&#34; &#34;foo&#34;) ;; =&amp;gt; &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-repeat &lt;code&gt;(num s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Make a string of &lt;code&gt;s&lt;/code&gt; repeated &lt;code&gt;num&lt;/code&gt; times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-repeat 10 &#34; &#34;) ;; =&amp;gt; &#34;          &#34;&#xA;(s-concat (s-repeat 8 &#34;Na&#34;) &#34; Batman!&#34;) ;; =&amp;gt; &#34;NaNaNaNaNaNaNaNa Batman!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-concat &lt;code&gt;(&amp;amp;rest strings)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Join all the string arguments into one string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-concat &#34;abc&#34; &#34;def&#34; &#34;ghi&#34;) ;; =&amp;gt; &#34;abcdefghi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-prepend &lt;code&gt;(prefix s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Concatenate &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-prepend &#34;abc&#34; &#34;def&#34;) ;; =&amp;gt; &#34;abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-append &lt;code&gt;(suffix s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Concatenate &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;suffix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-append &#34;abc&#34; &#34;def&#34;) ;; =&amp;gt; &#34;defabc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-splice &lt;code&gt;(needle n s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Splice &lt;code&gt;needle&lt;/code&gt; into &lt;code&gt;s&lt;/code&gt; at position &lt;code&gt;n&lt;/code&gt;. 0 is the beginning of the string, -1 is the end.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-splice &#34;abc&#34; 0 &#34;def&#34;) ;; =&amp;gt; &#34;abcdef&#34;&#xA;(s-splice &#34;abc&#34; -1 &#34;def&#34;) ;; =&amp;gt; &#34;defabc&#34;&#xA;(s-splice &#34;needle&#34; 2 &#34;A  in a haystack.&#34;) ;; =&amp;gt; &#34;A needle in a haystack.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-lines &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Splits &lt;code&gt;s&lt;/code&gt; into a list of strings on newline characters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-lines &#34;abc\ndef\nghi&#34;) ;; =&amp;gt; &#39;(&#34;abc&#34; &#34;def&#34; &#34;ghi&#34;)&#xA;(s-lines &#34;abc\rdef\rghi&#34;) ;; =&amp;gt; &#39;(&#34;abc&#34; &#34;def&#34; &#34;ghi&#34;)&#xA;(s-lines &#34;abc\r\ndef\r\nghi&#34;) ;; =&amp;gt; &#39;(&#34;abc&#34; &#34;def&#34; &#34;ghi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-match &lt;code&gt;(regexp s &amp;amp;optional start)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When the given expression matches the string, this function returns a list of the whole matching string and a string for each matched subexpressions. If it did not match the returned value is an empty list (nil).&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;start&lt;/code&gt; is non-nil the search will start at that index.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-match &#34;^def&#34; &#34;abcdefg&#34;) ;; =&amp;gt; nil&#xA;(s-match &#34;^abc&#34; &#34;abcdefg&#34;) ;; =&amp;gt; &#39;(&#34;abc&#34;)&#xA;(s-match &#34;^/.*/\\([a-z]+\\)\\.\\([a-z]+\\)&#34; &#34;/some/weird/file.html&#34;) ;; =&amp;gt; &#39;(&#34;/some/weird/file.html&#34; &#34;file&#34; &#34;html&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-match-strings-all &lt;code&gt;(regex string)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Return a list of matches for &lt;code&gt;regex&lt;/code&gt; in &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each element itself is a list of matches, as per &lt;code&gt;match-string&lt;/code&gt;. Multiple matches at the same position will be ignored after the first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-match-strings-all &#34;{\\([^}]+\\)}&#34; &#34;x is {x} and y is {y}&#34;) ;; =&amp;gt; &#39;((&#34;{x}&#34; &#34;x&#34;) (&#34;{y}&#34; &#34;y&#34;))&#xA;(s-match-strings-all &#34;ab.&#34; &#34;abXabY&#34;) ;; =&amp;gt; &#39;((&#34;abX&#34;) (&#34;abY&#34;))&#xA;(s-match-strings-all &#34;\\&amp;lt;&#34; &#34;foo bar baz&#34;) ;; =&amp;gt; &#39;((&#34;&#34;) (&#34;&#34;) (&#34;&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-matched-positions-all &lt;code&gt;(regexp string &amp;amp;optional subexp-depth)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Return a list of matched positions for &lt;code&gt;regexp&lt;/code&gt; in &lt;code&gt;string&lt;/code&gt;. &lt;code&gt;subexp-depth&lt;/code&gt; is 0 by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-matched-positions-all &#34;l+&#34; &#34;{{Hello}} World, {{Emacs}}!&#34; 0) ;; =&amp;gt; &#39;((4 . 6) (13 . 14))&#xA;(s-matched-positions-all &#34;{{\\(.+?\\)}}&#34; &#34;{{Hello}} World, {{Emacs}}!&#34; 0) ;; =&amp;gt; &#39;((0 . 9) (17 . 26))&#xA;(s-matched-positions-all &#34;{{\\(.+?\\)}}&#34; &#34;{{Hello}} World, {{Emacs}}!&#34; 1) ;; =&amp;gt; &#39;((2 . 7) (19 . 24))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-slice-at &lt;code&gt;(regexp s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Slices &lt;code&gt;s&lt;/code&gt; up at every index matching &lt;code&gt;regexp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-slice-at &#34;-&#34; &#34;abc&#34;) ;; =&amp;gt; &#39;(&#34;abc&#34;)&#xA;(s-slice-at &#34;-&#34; &#34;abc-def&#34;) ;; =&amp;gt; &#39;(&#34;abc&#34; &#34;-def&#34;)&#xA;(s-slice-at &#34;[.#]&#34; &#34;abc.def.ghi#id&#34;) ;; =&amp;gt; &#39;(&#34;abc&#34; &#34;.def&#34; &#34;.ghi&#34; &#34;#id&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-split &lt;code&gt;(separator s &amp;amp;optional omit-nulls)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Split &lt;code&gt;s&lt;/code&gt; into substrings bounded by matches for regexp &lt;code&gt;separator&lt;/code&gt;. If &lt;code&gt;omit-nulls&lt;/code&gt; is non-nil, zero-length substrings are omitted.&lt;/p&gt; &#xA;&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;split-string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-split &#34;|&#34; &#34;a|bc|12|3&#34;) ;; =&amp;gt; &#39;(&#34;a&#34; &#34;bc&#34; &#34;12&#34; &#34;3&#34;)&#xA;(s-split &#34;:&#34; &#34;a,c,d&#34;) ;; =&amp;gt; &#39;(&#34;a,c,d&#34;)&#xA;(s-split &#34;\n&#34; &#34;z\nefg\n&#34;) ;; =&amp;gt; &#39;(&#34;z&#34; &#34;efg&#34; &#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-split-up-to &lt;code&gt;(separator s n &amp;amp;optional omit-nulls)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Split &lt;code&gt;s&lt;/code&gt; up to &lt;code&gt;n&lt;/code&gt; times into substrings bounded by matches for regexp &lt;code&gt;separator&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;omit-nulls&lt;/code&gt; is non-nil, zero-length substrings are omitted.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;code&gt;s-split&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-split-up-to &#34;\\s-*-\\s-*&#34; &#34;Author - Track-number-one&#34; 1) ;; =&amp;gt; &#39;(&#34;Author&#34; &#34;Track-number-one&#34;)&#xA;(s-split-up-to &#34;\\s-*-\\s-*&#34; &#34;Author - Track-number-one&#34; 2) ;; =&amp;gt; &#39;(&#34;Author&#34; &#34;Track&#34; &#34;number-one&#34;)&#xA;(s-split-up-to &#34;|&#34; &#34;foo||bar|baz|qux&#34; 3 t) ;; =&amp;gt; &#39;(&#34;foo&#34; &#34;bar&#34; &#34;baz|qux&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-join &lt;code&gt;(separator strings)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Join all the strings in &lt;code&gt;strings&lt;/code&gt; with &lt;code&gt;separator&lt;/code&gt; in between.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-join &#34;+&#34; &#39;(&#34;abc&#34; &#34;def&#34; &#34;ghi&#34;)) ;; =&amp;gt; &#34;abc+def+ghi&#34;&#xA;(s-join &#34;\n&#34; &#39;(&#34;abc&#34; &#34;def&#34; &#34;ghi&#34;)) ;; =&amp;gt; &#34;abc\ndef\nghi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-equals? &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Is &lt;code&gt;s1&lt;/code&gt; equal to &lt;code&gt;s2&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;string-equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-equals? &#34;abc&#34; &#34;ABC&#34;) ;; =&amp;gt; nil&#xA;(s-equals? &#34;abc&#34; &#34;abc&#34;) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-less? &lt;code&gt;(s1 s2)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Is &lt;code&gt;s1&lt;/code&gt; less than &lt;code&gt;s2&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;string-lessp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-less? &#34;abc&#34; &#34;abd&#34;) ;; =&amp;gt; t&#xA;(s-less? &#34;abd&#34; &#34;abc&#34;) ;; =&amp;gt; nil&#xA;(s-less? &#34;abc&#34; &#34;abc&#34;) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-matches? &lt;code&gt;(regexp s &amp;amp;optional start)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Does &lt;code&gt;regexp&lt;/code&gt; match &lt;code&gt;s&lt;/code&gt;? If &lt;code&gt;start&lt;/code&gt; is non-nil the search starts at that index.&lt;/p&gt; &#xA;&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;string-match-p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-matches? &#34;^[0-9]+$&#34; &#34;123&#34;) ;; =&amp;gt; t&#xA;(s-matches? &#34;^[0-9]+$&#34; &#34;a123&#34;) ;; =&amp;gt; nil&#xA;(s-matches? &#34;1&#34; &#34;1a&#34; 1) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-blank? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Is &lt;code&gt;s&lt;/code&gt; nil or the empty string?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-blank? &#34;&#34;) ;; =&amp;gt; t&#xA;(s-blank? nil) ;; =&amp;gt; t&#xA;(s-blank? &#34; &#34;) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-present? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Is &lt;code&gt;s&lt;/code&gt; anything but nil or the empty string?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-present? &#34;&#34;) ;; =&amp;gt; nil&#xA;(s-present? nil) ;; =&amp;gt; nil&#xA;(s-present? &#34; &#34;) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-ends-with? &lt;code&gt;(suffix s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Does &lt;code&gt;s&lt;/code&gt; end with &lt;code&gt;suffix&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ignore-case&lt;/code&gt; is non-nil, the comparison is done without paying attention to case differences.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;s-suffix?&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-ends-with? &#34;.md&#34; &#34;readme.md&#34;) ;; =&amp;gt; t&#xA;(s-ends-with? &#34;.MD&#34; &#34;readme.md&#34;) ;; =&amp;gt; nil&#xA;(s-ends-with? &#34;.MD&#34; &#34;readme.md&#34; t) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-starts-with? &lt;code&gt;(prefix s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Does &lt;code&gt;s&lt;/code&gt; start with &lt;code&gt;prefix&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ignore-case&lt;/code&gt; is non-nil, the comparison is done without paying attention to case differences.&lt;/p&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;s-prefix?&lt;/code&gt;. This is a simple wrapper around the built-in &lt;code&gt;string-prefix-p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-starts-with? &#34;lib/&#34; &#34;lib/file.js&#34;) ;; =&amp;gt; t&#xA;(s-starts-with? &#34;LIB/&#34; &#34;lib/file.js&#34;) ;; =&amp;gt; nil&#xA;(s-starts-with? &#34;LIB/&#34; &#34;lib/file.js&#34; t) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-contains? &lt;code&gt;(needle s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Does &lt;code&gt;s&lt;/code&gt; contain &lt;code&gt;needle&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ignore-case&lt;/code&gt; is non-nil, the comparison is done without paying attention to case differences.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-contains? &#34;file&#34; &#34;lib/file.js&#34;) ;; =&amp;gt; t&#xA;(s-contains? &#34;nope&#34; &#34;lib/file.js&#34;) ;; =&amp;gt; nil&#xA;(s-contains? &#34;^a&#34; &#34;it&#39;s not ^a regexp&#34;) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-lowercase? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Are all the letters in &lt;code&gt;s&lt;/code&gt; in lower case?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-lowercase? &#34;file&#34;) ;; =&amp;gt; t&#xA;(s-lowercase? &#34;File&#34;) ;; =&amp;gt; nil&#xA;(s-lowercase? &#34;filä&#34;) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-uppercase? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Are all the letters in &lt;code&gt;s&lt;/code&gt; in upper case?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-uppercase? &#34;HULK SMASH&#34;) ;; =&amp;gt; t&#xA;(s-uppercase? &#34;Bruce no smash&#34;) ;; =&amp;gt; nil&#xA;(s-uppercase? &#34;FöB&#34;) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-mixedcase? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Are there both lower case and upper case letters in &lt;code&gt;s&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-mixedcase? &#34;HULK SMASH&#34;) ;; =&amp;gt; nil&#xA;(s-mixedcase? &#34;Bruce no smash&#34;) ;; =&amp;gt; t&#xA;(s-mixedcase? &#34;BRÜCE&#34;) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-capitalized? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;s&lt;/code&gt;, is the first letter upper case, and all other letters lower case?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-capitalized? &#34;Capitalized&#34;) ;; =&amp;gt; t&#xA;(s-capitalized? &#34;I am capitalized&#34;) ;; =&amp;gt; t&#xA;(s-capitalized? &#34;I Am Titleized&#34;) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-numeric? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Is &lt;code&gt;s&lt;/code&gt; a number?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-numeric? &#34;123&#34;) ;; =&amp;gt; t&#xA;(s-numeric? &#34;onetwothree&#34;) ;; =&amp;gt; nil&#xA;(s-numeric? &#34;7a&#34;) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-replace &lt;code&gt;(old new s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Replaces &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-replace &#34;file&#34; &#34;nope&#34; &#34;lib/file.js&#34;) ;; =&amp;gt; &#34;lib/nope.js&#34;&#xA;(s-replace &#34;^a&#34; &#34;\\1&#34; &#34;it&#39;s not ^a regexp&#34;) ;; =&amp;gt; &#34;it&#39;s not \\1 regexp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-replace-all &lt;code&gt;(replacements s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;replacements&lt;/code&gt; is a list of cons-cells. Each &lt;code&gt;car&lt;/code&gt; is replaced with &lt;code&gt;cdr&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-replace-all &#39;((&#34;lib&#34; . &#34;test&#34;) (&#34;file&#34; . &#34;file_test&#34;)) &#34;lib/file.js&#34;) ;; =&amp;gt; &#34;test/file_test.js&#34;&#xA;(s-replace-all &#39;((&#34;lib&#34; . &#34;test&#34;) (&#34;test&#34; . &#34;lib&#34;)) &#34;lib/test.js&#34;) ;; =&amp;gt; &#34;test/lib.js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-downcase &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to lower case.&lt;/p&gt; &#xA;&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;downcase&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-downcase &#34;ABC&#34;) ;; =&amp;gt; &#34;abc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-upcase &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to upper case.&lt;/p&gt; &#xA;&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;upcase&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-upcase &#34;abc&#34;) ;; =&amp;gt; &#34;ABC&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-capitalize &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert the first word&#39;s first character to upper case and the rest to lower case in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-capitalize &#34;abc DEF&#34;) ;; =&amp;gt; &#34;Abc def&#34;&#xA;(s-capitalize &#34;abc.DEF&#34;) ;; =&amp;gt; &#34;Abc.def&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-titleize &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert each word&#39;s first character to upper case and the rest to lower case in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a simple wrapper around the built-in &lt;code&gt;capitalize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-titleize &#34;abc DEF&#34;) ;; =&amp;gt; &#34;Abc Def&#34;&#xA;(s-titleize &#34;abc.DEF&#34;) ;; =&amp;gt; &#34;Abc.Def&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-with &lt;code&gt;(s form &amp;amp;rest more)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Threads &lt;code&gt;s&lt;/code&gt; through the forms. Inserts &lt;code&gt;s&lt;/code&gt; as the last item in the first form, making a list of it if it is not a list already. If there are more forms, inserts the first form as the last item in second form, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-with &#34;   hulk smash   &#34; s-trim s-upcase) ;; =&amp;gt; &#34;HULK SMASH&#34;&#xA;(s-with &#34;My car is a Toyota&#34; (s-replace &#34;car&#34; &#34;name&#34;) (s-replace &#34;a Toyota&#34; &#34;Bond&#34;) (s-append &#34;, James Bond&#34;)) ;; =&amp;gt; &#34;My name is Bond, James Bond&#34;&#xA;(s-with &#34;abc \ndef  \nghi&#34; s-lines (mapcar &#39;s-trim) (s-join &#34;-&#34;) s-reverse) ;; =&amp;gt; &#34;ihg-fed-cba&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-index-of &lt;code&gt;(needle s &amp;amp;optional ignore-case)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns first index of &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;, or nil.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ignore-case&lt;/code&gt; is non-nil, the comparison is done without paying attention to case differences.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-index-of &#34;abc&#34; &#34;abcdef&#34;) ;; =&amp;gt; 0&#xA;(s-index-of &#34;CDE&#34; &#34;abcdef&#34; t) ;; =&amp;gt; 2&#xA;(s-index-of &#34;n.t&#34; &#34;not a regexp&#34;) ;; =&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-reverse &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Return the reverse of &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-reverse &#34;abc&#34;) ;; =&amp;gt; &#34;cba&#34;&#xA;(s-reverse &#34;ab xyz&#34;) ;; =&amp;gt; &#34;zyx ba&#34;&#xA;(s-reverse &#34;&#34;) ;; =&amp;gt; &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-presence &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Return &lt;code&gt;s&lt;/code&gt; if it&#39;s &lt;code&gt;s-present?&lt;/code&gt;, otherwise return nil.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-presence nil) ;; =&amp;gt; nil&#xA;(s-presence &#34;&#34;) ;; =&amp;gt; nil&#xA;(s-presence &#34;foo&#34;) ;; =&amp;gt; &#34;foo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-format &lt;code&gt;(template replacer &amp;amp;optional extra)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Format &lt;code&gt;template&lt;/code&gt; with the function &lt;code&gt;replacer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;replacer&lt;/code&gt; takes an argument of the format variable and optionally an extra argument which is the &lt;code&gt;extra&lt;/code&gt; value from the call to &lt;code&gt;s-format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Several standard &lt;code&gt;s-format&lt;/code&gt; helper functions are recognized and adapted for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(s-format &#34;${name}&#34; &#39;gethash hash-table)&#xA;(s-format &#34;${name}&#34; &#39;aget alist)&#xA;(s-format &#34;$0&#34; &#39;elt sequence)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;replacer&lt;/code&gt; function may be used to do any other kind of transformation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-format &#34;help ${name}! I&#39;m ${malady}&#34; &#39;aget &#39;((&#34;name&#34; . &#34;nic&#34;) (&#34;malady&#34; . &#34;on fire&#34;))) ;; =&amp;gt; &#34;help nic! I&#39;m on fire&#34;&#xA;(s-format &#34;hello ${name}, nice day&#34; (lambda (var-name) &#34;nic&#34;)) ;; =&amp;gt; &#34;hello nic, nice day&#34;&#xA;(s-format &#34;hello $0, nice $1&#34; &#39;elt &#39;(&#34;nic&#34; &#34;day&#34;)) ;; =&amp;gt; &#34;hello nic, nice day&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-lex-format &lt;code&gt;(format-str)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;s-format&lt;/code&gt; with the current environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;format-str&lt;/code&gt; may use the &lt;code&gt;s-format&lt;/code&gt; variable reference to refer to any variable:&lt;/p&gt; &#xA;&lt;p&gt;(let ((x 1)) (s-lex-format &#34;x is: ${x}&#34;))&lt;/p&gt; &#xA;&lt;p&gt;The values of the variables are interpolated with &#34;%s&#34; unless the variable &lt;code&gt;s-lex-value-as-lisp&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt; and then they are interpolated with &#34;%S&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(let ((x 1)) (s-lex-format &#34;x is ${x}&#34;)) ;; =&amp;gt; &#34;x is 1&#34;&#xA;(let ((str1 &#34;this&#34;) (str2 &#34;that&#34;)) (s-lex-format &#34;${str1} and ${str2}&#34;)) ;; =&amp;gt; &#34;this and that&#34;&#xA;(let ((foo &#34;Hello\\nWorld&#34;)) (s-lex-format &#34;${foo}&#34;)) ;; =&amp;gt; &#34;Hello\\nWorld&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-count-matches &lt;code&gt;(regexp s &amp;amp;optional start end)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Count occurrences of &lt;code&gt;regexp&lt;/code&gt; in `s&#39;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;start&lt;/code&gt;, inclusive, and &lt;code&gt;end&lt;/code&gt;, exclusive, delimit the part of &lt;code&gt;s&lt;/code&gt; to match.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-count-matches &#34;a&#34; &#34;aba&#34;) ;; =&amp;gt; 2&#xA;(s-count-matches &#34;a&#34; &#34;aba&#34; 0 2) ;; =&amp;gt; 1&#xA;(s-count-matches &#34;\\w\\{2\\}[0-9]+&#34; &#34;ab1bab2frobinator&#34;) ;; =&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-wrap &lt;code&gt;(s prefix &amp;amp;optional suffix)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Wrap string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;prefix&lt;/code&gt; and optionally &lt;code&gt;suffix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Return string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;prefix&lt;/code&gt; prepended. If &lt;code&gt;suffix&lt;/code&gt; is present, it is appended, otherwise &lt;code&gt;prefix&lt;/code&gt; is used as both prefix and suffix.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-wrap &#34;foo&#34; &#34;\&#34;&#34;) ;; =&amp;gt; &#34;\&#34;foo\&#34;&#34;&#xA;(s-wrap &#34;foo&#34; &#34;(&#34; &#34;)&#34;) ;; =&amp;gt; &#34;(foo)&#34;&#xA;(s-wrap &#34;foo&#34; &#34;bar&#34;) ;; =&amp;gt; &#34;barfoobar&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-split-words &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Split &lt;code&gt;s&lt;/code&gt; into list of words.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-split-words &#34;under_score&#34;) ;; =&amp;gt; &#39;(&#34;under&#34; &#34;score&#34;)&#xA;(s-split-words &#34;some-dashed-words&#34;) ;; =&amp;gt; &#39;(&#34;some&#34; &#34;dashed&#34; &#34;words&#34;)&#xA;(s-split-words &#34;evenCamelCase&#34;) ;; =&amp;gt; &#39;(&#34;even&#34; &#34;Camel&#34; &#34;Case&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-lower-camel-case &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to lowerCamelCase.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-lower-camel-case &#34;some words&#34;) ;; =&amp;gt; &#34;someWords&#34;&#xA;(s-lower-camel-case &#34;dashed-words&#34;) ;; =&amp;gt; &#34;dashedWords&#34;&#xA;(s-lower-camel-case &#34;under_scored_words&#34;) ;; =&amp;gt; &#34;underScoredWords&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-upper-camel-case &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to UpperCamelCase.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-upper-camel-case &#34;some words&#34;) ;; =&amp;gt; &#34;SomeWords&#34;&#xA;(s-upper-camel-case &#34;dashed-words&#34;) ;; =&amp;gt; &#34;DashedWords&#34;&#xA;(s-upper-camel-case &#34;under_scored_words&#34;) ;; =&amp;gt; &#34;UnderScoredWords&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-snake-case &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to snake_case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-snake-case &#34;some words&#34;) ;; =&amp;gt; &#34;some_words&#34;&#xA;(s-snake-case &#34;dashed-words&#34;) ;; =&amp;gt; &#34;dashed_words&#34;&#xA;(s-snake-case &#34;camelCasedWords&#34;) ;; =&amp;gt; &#34;camel_cased_words&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-dashed-words &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to dashed-words.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-dashed-words &#34;some words&#34;) ;; =&amp;gt; &#34;some-words&#34;&#xA;(s-dashed-words &#34;under_scored_words&#34;) ;; =&amp;gt; &#34;under-scored-words&#34;&#xA;(s-dashed-words &#34;camelCasedWords&#34;) ;; =&amp;gt; &#34;camel-cased-words&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-capitalized-words &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to Capitalized words.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-capitalized-words &#34;some words&#34;) ;; =&amp;gt; &#34;Some words&#34;&#xA;(s-capitalized-words &#34;under_scored_words&#34;) ;; =&amp;gt; &#34;Under scored words&#34;&#xA;(s-capitalized-words &#34;camelCasedWords&#34;) ;; =&amp;gt; &#34;Camel cased words&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-titleized-words &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to Titleized Words.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-titleized-words &#34;some words&#34;) ;; =&amp;gt; &#34;Some Words&#34;&#xA;(s-titleized-words &#34;under_scored_words&#34;) ;; =&amp;gt; &#34;Under Scored Words&#34;&#xA;(s-titleized-words &#34;camelCasedWords&#34;) ;; =&amp;gt; &#34;Camel Cased Words&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-word-initials &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert &lt;code&gt;s&lt;/code&gt; to its initials.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-word-initials &#34;some words&#34;) ;; =&amp;gt; &#34;sw&#34;&#xA;(s-word-initials &#34;under_scored_words&#34;) ;; =&amp;gt; &#34;usw&#34;&#xA;(s-word-initials &#34;camelCasedWords&#34;) ;; =&amp;gt; &#34;cCW&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;s-blank-str? &lt;code&gt;(s)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Is &lt;code&gt;s&lt;/code&gt; nil or the empty string or string only contains whitespace?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(s-blank-str? &#34;  \t \r   &#34;) ;; =&amp;gt; t&#xA;(s-blank-str? &#34;    &#34;) ;; =&amp;gt; t&#xA;(s-blank-str? &#34;\t\r&#34;) ;; =&amp;gt; t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What&#39;s with the built-in wrappers?&lt;/h2&gt; &#xA;&lt;p&gt;Imagine looking through the function list and seeing &lt;code&gt;s-ends-with?&lt;/code&gt;, but &lt;code&gt;s-starts-with?&lt;/code&gt; is nowhere to be found. Why? Well, because Emacs already has &lt;code&gt;string-prefix-p&lt;/code&gt;. Now you&#39;re starting out slightly confused, then have to go somewhere else to dig for the command you were looking for.&lt;/p&gt; &#xA;&lt;p&gt;The wrapping functions serve as both documentation for existing functions and makes for a consistent API.&lt;/p&gt; &#xA;&lt;h2&gt;Other string related libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/eschulte/jump.el/raw/master/inflections.el&#34;&gt;inflections&lt;/a&gt; package provides functions for strings pluralization and singularization.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://emacswiki.org/emacs/levenshtein.el&#34;&gt;levenshtein&lt;/a&gt; package provides a function to calculate the Levenshtein distance between two strings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rolandwalker/string-utils&#34;&gt;string-utils&lt;/a&gt; is another general string manipulation library.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelist&lt;/h2&gt; &#xA;&lt;h3&gt;From 1.11.0 to 1.12.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alias all functions ending in &lt;code&gt;?&lt;/code&gt; (Tianxiang Xiong)&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-blank-str?&lt;/code&gt; (Aborn Jiang)&lt;/li&gt; &#xA; &lt;li&gt;Several bugfixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.10.0 to 1.11.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-matched-positions-all&lt;/code&gt; (ono hiroko)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.9.0 to 1.10.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-wrap&lt;/code&gt; (Johan Andersson)&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-split-up-to&lt;/code&gt; (Matus Goljer)&lt;/li&gt; &#xA; &lt;li&gt;Fix &lt;code&gt;s-reverse&lt;/code&gt; for Unicode combining characters. (Christopher Wellons)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.8.0 to 1.9.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-count-matches&lt;/code&gt; (Lars Andersen)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.7.0 to 1.8.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-present?&lt;/code&gt; and &lt;code&gt;s-present?&lt;/code&gt; (Johan Andersson)&lt;/li&gt; &#xA; &lt;li&gt;Better handling of international characters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.6.0 to 1.7.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-word-initials&lt;/code&gt; (Sylvain Rousseau)&lt;/li&gt; &#xA; &lt;li&gt;Better handling of camel cased strings (@Bruce-Connor)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.5.0 to 1.6.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-pad-left&lt;/code&gt; and &lt;code&gt;s-pad-right&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bugfixes for &lt;code&gt;s-format&lt;/code&gt; (Nic Ferrier)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.4.0 to 1.5.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-all-match-strings&lt;/code&gt; (Geoff Gole)&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-lex-format&lt;/code&gt; (Nic Ferrier)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.3.1 to 1.4.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-capitalized?&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-replace-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-slice-at&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-split&lt;/code&gt; alias for &lt;code&gt;split-string&lt;/code&gt; (Rüdiger Sonderfeld)&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-less?&lt;/code&gt; predicate (Rüdiger Sonderfeld)&lt;/li&gt; &#xA; &lt;li&gt;Add START parameter to &lt;code&gt;s-matches?&lt;/code&gt; (Rüdiger Sonderfeld)&lt;/li&gt; &#xA; &lt;li&gt;Bugfixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.3.0 to 1.3.1&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-numeric?&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-match&lt;/code&gt; (Arthur Andersen)&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;s-format&lt;/code&gt; (Nic Ferrier)&lt;/li&gt; &#xA; &lt;li&gt;Move .el files out of root to avoid problems with require.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 1.2.1 to 1.3.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; &lt;code&gt;s-capitalize&lt;/code&gt; now converts the first word&#39;s first character to upper case and the rest to lower case. &lt;code&gt;s-titleize&lt;/code&gt; works like the old &lt;code&gt;s-capitalize&lt;/code&gt; and capitalizes each word. (Johan Andersson)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;s-capitalized-words&lt;/code&gt; and &lt;code&gt;s-titleized-words&lt;/code&gt; mirror this change.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leoc&#34;&gt;Arthur Andersen&lt;/a&gt; contributed &lt;code&gt;s-match&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rolando2424&#34;&gt;Rolando&lt;/a&gt; contributed &lt;code&gt;s-shared-start&lt;/code&gt; and &lt;code&gt;s-shared-end&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rejeep&#34;&gt;Johan Andersson&lt;/a&gt; contributed &lt;code&gt;s-presence&lt;/code&gt;, &lt;code&gt;s-present?&lt;/code&gt; and fixed &lt;code&gt;s-titleize&lt;/code&gt; vs &lt;code&gt;s-capitalize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicferrier&#34;&gt;Nic Ferrier&lt;/a&gt; added &lt;code&gt;s-format&lt;/code&gt; and &lt;code&gt;s-lex-format&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ruediger&#34;&gt;Rüdiger Sonderfeld&lt;/a&gt; contributed &lt;code&gt;s-less?&lt;/code&gt;, &lt;code&gt;s-split&lt;/code&gt; and several bugfixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gsg&#34;&gt;Geoff Gole&lt;/a&gt; contributed &lt;code&gt;s-all-match-strings&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thisirs&#34;&gt;Sylvain Rousseau&lt;/a&gt; contributed &lt;code&gt;s-word-initials&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/expez&#34;&gt;Lars Andersen&lt;/a&gt; contributed &lt;code&gt;s-count-matches&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kuanyui&#34;&gt;ono hiroko&lt;/a&gt; contributed &lt;code&gt;s-matched-positions-all&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Yes, please do. Pure functions in the string manipulation realm only, please. There&#39;s a suite of tests in &lt;code&gt;dev/examples.el&lt;/code&gt;, so remember to add tests for your function, or I might break it later.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find the repo at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/magnars/s.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run-tests.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the docs with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./create-docs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I highly recommend that you install these as a pre-commit hook, so that the tests are always running and the docs are always in sync:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp pre-commit.sh .git/hooks/pre-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Oh, and don&#39;t edit &lt;code&gt;README.md&lt;/code&gt; directly, it is auto-generated. Change &lt;code&gt;readme-template.md&lt;/code&gt; or &lt;code&gt;examples-to-docs.el&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2012-2022 Magnar Sveen&lt;/p&gt; &#xA;&lt;p&gt;Authors: Magnar Sveen &lt;a href=&#34;mailto:magnars@gmail.com&#34;&gt;magnars@gmail.com&lt;/a&gt; Maintainer: Jason Milkins &lt;a href=&#34;mailto:jasonm23@gmail.com&#34;&gt;jasonm23@gmail.com&lt;/a&gt; Keywords: strings&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>