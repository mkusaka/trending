<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-12T01:47:27Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>purcell/emacs-reformatter</title>
    <updated>2023-11-12T01:47:27Z</updated>
    <id>tag:github.com,2023-11-12:/purcell/emacs-reformatter</id>
    <link href="https://github.com/purcell/emacs-reformatter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Define commands which run reformatters on the current Emacs buffer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/reformatter&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/reformatter-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/reformatter&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/reformatter-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/reformatter.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/reformatter.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/emacs-reformatter/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/purcell/emacs-reformatter/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Define commands which run reformatters on the current Emacs buffer&lt;/h1&gt; &#xA;&lt;p&gt;This library lets elisp authors easily define an idiomatic command to reformat the current buffer using a command-line program, together with an optional minor mode which can apply this command automatically on save.&lt;/p&gt; &#xA;&lt;p&gt;By default, reformatter.el expects programs to read from stdin and write to stdout, and you should prefer this mode of operation where possible. If this isn&#39;t possible with your particular formatting program, refer to the options for &lt;code&gt;reformatter-define&lt;/code&gt;, and see the examples in the package&#39;s tests.&lt;/p&gt; &#xA;&lt;p&gt;In its initial release it supports only reformatters which can read from stdin and write to stdout, but a more versatile interface will be provided as development continues.&lt;/p&gt; &#xA;&lt;p&gt;As an example, let&#39;s define a reformat command that applies the &#34;dhall format&#34; command. We&#39;ll assume here that we&#39;ve already defined a variable &lt;code&gt;dhall-command&lt;/code&gt; which holds the string name or path of the dhall executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(reformatter-define dhall-format&#xA;  :program dhall-command&#xA;  :args &#39;(&#34;format&#34;)&#xA;  :lighter &#34; DF&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;reformatter-define&lt;/code&gt; macro expands to code which generates &lt;code&gt;dhall-format-buffer&lt;/code&gt; and &lt;code&gt;dhall-format-region&lt;/code&gt; interactive commands, and a local minor mode called &lt;code&gt;dhall-format-on-save-mode&lt;/code&gt;. The &lt;code&gt;:args&lt;/code&gt; and &lt;code&gt;:program&lt;/code&gt; expressions will be evaluated at runtime, so they can refer to variables that may (later) have a buffer-local value. A custom variable will be generated for the mode lighter, with the supplied value becoming the default.&lt;/p&gt; &#xA;&lt;p&gt;The generated minor mode allows idiomatic per-directory or per-file customisation, via the &#34;modes&#34; support baked into Emacs&#39; file-local and directory-local variables mechanisms. For example, users of the above example might add the following to a project-specific &lt;code&gt;.dir-locals.el&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;((dhall-mode&#xA;   (mode . dhall-format-on-save)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the documentation for &lt;code&gt;reformatter-define&lt;/code&gt;, which provides a number of options for customising the generated code.&lt;/p&gt; &#xA;&lt;p&gt;Library authors might like to provide autoloads for the generated code, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;;;###autoload (autoload &#39;dhall-format-buffer &#34;current-file&#34; nil t)&#xA;;;;###autoload (autoload &#39;dhall-format-region &#34;current-file&#34; nil t)&#xA;;;;###autoload (autoload &#39;dhall-format-on-save-mode &#34;current-file&#34; nil t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples of usage in the wild&lt;/h2&gt; &#xA;&lt;p&gt;To find reverse dependencies, look for &#34;Needed by&#34; on the &lt;a href=&#34;https://melpa.org/#/reformatter&#34;&gt;MELPA page for reformatter&lt;/a&gt;. Here are some specific examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psibi/dhall-mode/raw/master/dhall-mode.el&#34;&gt;dhall-mode.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jcollard/elm-mode/raw/master/elm-format.el&#34;&gt;elm-format.el&lt;/a&gt;, in &lt;code&gt;elm-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purcell/sqlformat/raw/master/sqlformat.el&#34;&gt;sqlformat.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purcell/emacs.d/raw/14f645a9bde04498ce2b60de268c2cbafa13604a/lisp/init-purescript.el#L18-L19&#34;&gt;Here&lt;/a&gt; is the author defining a reformatter in his own configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;I contribute to a number of Emacs programming language modes and tools, and increasingly use code reformatters in my daily work. It&#39;s surprisingly difficult to write robust, correct code to apply these reformatters, given that it must consider such issues as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Missing programs&lt;/li&gt; &#xA; &lt;li&gt;Buffers not yet saved to a file&lt;/li&gt; &#xA; &lt;li&gt;Displaying error output&lt;/li&gt; &#xA; &lt;li&gt;Colorising ANSI escape sequences in any error output&lt;/li&gt; &#xA; &lt;li&gt;Handling file encodings correctly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this library, I hope to help the community standardise on best practices, and make things easier for tool authors and end users alike.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How is this different from &lt;a href=&#34;https://github.com/lassik/emacs-format-all-the-code&#34;&gt;format-all.el&lt;/a&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;format-all&lt;/code&gt; is a very different approach: it aims to provide a single minor mode which you then enable and configure to do the right thing (including nothing) for all the languages you use. It even tries to tell you how to install missing programs. It&#39;s an interesting project, but IMO it&#39;s hard to design the configuration for such a grand unified approach, and it can get complex. For example, you&#39;d have to be able to configure which of two possible reformatters you want to use for a specific language, and to be able to do that on a per-project basis.&lt;/p&gt; &#xA;&lt;p&gt;In contrast reformatter produces small, self-contained and separate formatters and minor modes which all work consistently and are individually configured. It makes it possible to replace existing formatter code, and it&#39;s also very convenient for users to define their own ad-hoc reformatter wrappers&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Ensure &lt;code&gt;reformatter.el&lt;/code&gt; is in a directory on your load-path, and add the following to your &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;reformatter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MELPA&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re an Emacs 24 user or you have a recent version of &lt;code&gt;package.el&lt;/code&gt; you can install &lt;code&gt;reformatter&lt;/code&gt; from the &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repository. The version of &lt;code&gt;reformatter&lt;/code&gt; there will always be up-to-date.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Author: Steve Purcell &#xA; &lt;steve at sanityinc dot com&gt;&lt;/steve&gt;&lt;/p&gt; &#xA;&lt;p&gt;Homepage: &lt;a href=&#34;https://github.com/purcell/emacs-reformatter&#34;&gt;https://github.com/purcell/emacs-reformatter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;üíù Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;üíº LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sanityinc.com/&#34;&gt;‚úç sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;üê¶ @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magit/ghub</title>
    <updated>2023-11-12T01:47:27Z</updated>
    <id>tag:github.com,2023-11-12:/magit/ghub</id>
    <link href="https://github.com/magit/ghub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Client libraries for the APIs of various Git forges&lt;/p&gt;&lt;hr&gt;&lt;p&gt;** Ghub ‚Äî Client libraries for the APIs of various Git forges&lt;/p&gt; &#xA;&lt;p&gt;Ghub provides basic support for using the APIs of various Git forges from Emacs packages. Originally it only supported the Github REST API, but now it also supports the Github GraphQL API as well as the REST APIs of Gitlab, Gitea, Gogs and Bitbucket.&lt;/p&gt; &#xA;&lt;p&gt;Ghub abstracts access to API resources using only a handful of basic functions such as &lt;del&gt;ghub-get&lt;/del&gt;. These are convenience wrappers around &lt;del&gt;ghub-request&lt;/del&gt;. Additional forge-specific wrappers like &lt;del&gt;glab-put&lt;/del&gt;, &lt;del&gt;gtea-put&lt;/del&gt;, &lt;del&gt;gogs-post&lt;/del&gt; and &lt;del&gt;buck-delete&lt;/del&gt; are also available. Ghub does not provide any resource-specific functions, with the exception of &lt;del&gt;FORGE-repository-id&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When accessing Github, then Ghub handles the creation and storage of access tokens using a setup wizard to make it easier for users to get started. The tokens for other forges have to be created manually.&lt;/p&gt; &#xA;&lt;p&gt;Ghub is intentionally limited to only provide these two essential features ‚Äî basic request functions and guided setup ‚Äî to avoid being too opinionated, which would hinder wide adoption. It is assumed that wide adoption would make life easier for users and maintainers alike, because then all packages that talk to forge APIs could be configured the same way.&lt;/p&gt; &#xA;&lt;p&gt;Please consult the [[https://magit.vc/manual/ghub][manual]] for more information.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;br&gt;&lt;br&gt; #+html: &lt;a href=&#34;https://github.com/magit/ghub/actions/workflows/compile.yml&#34;&gt;&lt;img alt=&#34;Compile&#34; src=&#34;https://github.com/magit/ghub/actions/workflows/compile.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://github.com/magit/ghub/actions/workflows/manual.yml&#34;&gt;&lt;img alt=&#34;Manual&#34; src=&#34;https://github.com/magit/ghub/actions/workflows/manual.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/ghub&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/ghub-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/ghub&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/ghub-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dsevilla/masquerade-mode-el</title>
    <updated>2023-11-12T01:47:27Z</updated>
    <id>tag:github.com,2023-11-12:/dsevilla/masquerade-mode-el</id>
    <link href="https://github.com/dsevilla/masquerade-mode-el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minor mode to add templating capabilities to any mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;masquerade-mode-el&lt;/h1&gt; &#xA;&lt;p&gt;Minor mode to add templating capabilities to any mode&lt;/p&gt;</summary>
  </entry>
</feed>