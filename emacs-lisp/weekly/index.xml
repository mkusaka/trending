<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T02:09:08Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>magit/magit</title>
    <updated>2022-08-14T02:09:08Z</updated>
    <id>tag:github.com,2022-08-14:/magit/magit</id>
    <link href="https://github.com/magit/magit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;It&#39;s Magit! A Git porcelain inside Emacs.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://magit.vc/assets/magit-168x200px.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;A Git Porcelain inside Emacs&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://magit.vc&#34;&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://magit.vc/manual&#34;&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://magit.vc/manual/magit/FAQ.html&#34;&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/magit/magit/wiki&#34;&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/magit_emacs&#34;&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;justify&#34;&gt; Magit is an interface to the version control system &lt;a href=&#34;https://git-scm.com&#34;&gt;Git&lt;/a&gt;, implemented as an &lt;a href=&#34;https://www.gnu.org/software/emacs&#34;&gt;Emacs&lt;/a&gt; package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Keeping its users &#xA; &lt;a href=&#34;https://magit.vc/quotes&#34;&gt;this excited&lt;/a&gt; is &#xA; &lt;a href=&#34;https://magit.vc/stats/magit/authors.html#cumulated_added_lines_of_code_per_author&#34;&gt; a lot of work &lt;/a&gt;. If Magit makes you &#xA; &lt;br&gt; more productive too, then &#xA; &lt;b&gt;please consider making a donation&lt;/b&gt;. &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;em&gt;Thank you! ‚Äî Jonas Bernoulli&lt;/em&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/sponsors/tarsius&#34;&gt; &lt;img title=&#34;Donate using Github Sponsors&#34; alt=&#34;Donate using Github Sponsors&#34; src=&#34;https://magit.vc/assets/github-sponsors-40px.png&#34;&gt;&lt;/a&gt; &amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/iban.html&#34;&gt; &lt;img title=&#34;Donate using IBAN&#34; alt=&#34;Donate using IBAN&#34; src=&#34;https://magit.vc/assets/iban-40px.png&#34;&gt;&lt;/a&gt; &amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/ach.html&#34;&gt; &lt;img title=&#34;Donate using ACH&#34; alt=&#34;Donate using ACH&#34; src=&#34;https://magit.vc/assets/ach-40px.png&#34;&gt;&lt;/a&gt; &amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/stripe.html&#34;&gt; &lt;img title=&#34;Donate using Stripe&#34; alt=&#34;Donate using Stripe&#34; src=&#34;https://magit.vc/assets/stripe-40px.png&#34;&gt;&lt;/a&gt; &amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/paypal.html&#34;&gt; &lt;img title=&#34;Donate using PayPal&#34; alt=&#34;Donate using PayPal&#34; src=&#34;https://magit.vc/assets/paypal-40px.png&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Some alternative donation methods are &#xA; &lt;a href=&#34;https://magit.vc/donate&#34;&gt;available&lt;/a&gt;. &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;If you are new to Magit, then either one of the following two articles should help understanding how it differs from other Git clients.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://emacsair.me/2017/09/01/magit-walk-through&#34;&gt;Visual Magit walk-through&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you are completely new to Magit, then this article is a good visual introduction.&lt;/p&gt; &#xA;&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing some key, but that&#39;s not obvious from just seeing how Magit looks. The screenshots and accompanying text of this article explain how to perform a variety of actions on Magit&#39;s output.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://emacsair.me/2017/09/01/the-magical-git-interface&#34;&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Magit differs significantly from other Git interfaces, and its advantages are not immediately obvious simply from looking at a few screenshots as presented in the preceding article.&lt;/p&gt; &#xA;&lt;p&gt;This article discusses Magit&#39;s properties in somewhat more abstract terms.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Support and Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Magit has many users and very few maintainers, so we kindly ask to read the appropriate guidelines before getting in contact. ‚Äî Thanks!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üÜò &lt;a href=&#34;https://github.com/magit/magit/discussions/4630&#34;&gt;How to ask for help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ü™≥ &lt;a href=&#34;https://github.com/magit/magit/wiki/How-to-report-a-bug&#34;&gt;How to report a bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üí° &lt;a href=&#34;https://github.com/magit/magit/discussions/4631&#34;&gt;How to suggest a feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üèóÔ∏è &lt;a href=&#34;https://github.com/magit/magit/wiki/Pull-request-guidelines&#34;&gt;Pull request guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚ÑπÔ∏è &lt;a href=&#34;https://magit.vc/manual/magit/FAQ.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚ÑπÔ∏è &lt;a href=&#34;https://magit.vc/manual/magit&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TL;DR We now use discussions for feature requests (not issues) and prefer if you ask the community for support instead of the overworked maintainers.&lt;/p&gt; &#xA;&lt;p&gt;Please also consider to contribute by supporting other users or by making a &lt;a href=&#34;https://magit.vc/donate&#34;&gt;monetary donation&lt;/a&gt;. ‚Äî Thanks!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Acknowledgments&lt;/h3&gt; &#xA;&lt;p&gt;Magit was started by &lt;a href=&#34;https://github.com/mvollmer&#34;&gt;Marius Vollmer&lt;/a&gt;, and is now maintained by &lt;a href=&#34;https://emacsair.me&#34;&gt;Jonas Bernoulli&lt;/a&gt; and &lt;a href=&#34;https://kyleam.com&#34;&gt;Kyle Meyer&lt;/a&gt;. Former maintainers are &lt;a href=&#34;http://dudebout.com&#34;&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href=&#34;https://github.com/npostavs&#34;&gt;Noam Postavsky&lt;/a&gt;, &lt;a href=&#34;https://github.com/pjweisberg&#34;&gt;Peter J. Weisberg&lt;/a&gt;, &lt;a href=&#34;https://github.com/philjackson&#34;&gt;Phil Jackson&lt;/a&gt;, &lt;a href=&#34;https://github.com/vanicat&#34;&gt;R√©mi Vanicat&lt;/a&gt; and &lt;a href=&#34;http://www.hodique.info&#34;&gt;Yann Hodique&lt;/a&gt;. Many more people have &lt;a href=&#34;https://magit.vc/stats/magit/authors.html&#34;&gt;contributed code&lt;/a&gt;, suggested features or made monetary contributions.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xkcd.com/859&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%28-%20%20%20-red.svg?sanitize=true&#34; alt=&#34;Paren Xkcb&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_v3-green.svg?sanitize=true&#34; alt=&#34;GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/magit/magit/actions&#34;&gt;&lt;img src=&#34;https://github.com/magit/magit/workflows/test/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/magit.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/magit.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/magit&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/magit-badge.svg?sanitize=true&#34; alt=&#34;Melpa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/magit&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/magit-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://magit.vc/manual/magit&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/eierlegende-Wollmilchsau-green.svg?sanitize=true&#34; alt=&#34;Eierlegende Wollmilchsau&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Browser_wars&#34;&gt;&lt;img src=&#34;https://magit.vc/assets/netscape-20px.png&#34; alt=&#34;Netscape&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-typescript/typescript.el</title>
    <updated>2022-08-14T02:09:08Z</updated>
    <id>tag:github.com,2022-08-14:/emacs-typescript/typescript.el</id>
    <link href="https://github.com/emacs-typescript/typescript.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TypeScript-support for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;typescript.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/emacs-typescript/typescript.el/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Test&#34;&gt; &lt;a href=&#34;https://melpa.org/#/typescript-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/typescript-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/typescript-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/typescript-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript.el&lt;/code&gt; is a major-mode for editing &lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;Typescript&lt;/a&gt;-files in &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript.el&lt;/code&gt; is a self-contained, lightweight and minimalist major-mode focused on providing basic font-lock/syntax-highlighting and indentation for Typescript syntax, without any external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Output from &lt;code&gt;tsc&lt;/code&gt; and &lt;code&gt;tslint&lt;/code&gt; is also handled seamlessly through &lt;code&gt;compilation-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;A short note on development HALT&lt;/h2&gt; &#xA;&lt;p&gt;As the both the JavaScript and TypeScript languages have evolved to become ever more complex, so has the Elisp codebase for &lt;code&gt;typescript-mode&lt;/code&gt; trying to correctly handle them.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;&#39;ve been at the point for quite some time where it has become increasingly obvious that the current code-base simply cannot continue growing. It will be slow. It will be complex. It will be buggy. It will be head-ache inducing to wrap our heads around it, and ... I guess we&#39;re already there.&lt;/p&gt; &#xA;&lt;p&gt;Apart from occasional PRs getting merged, the current &lt;code&gt;typescript-mode&lt;/code&gt; code isn&#39;t being developed because almost nobody wants to work code of this complexity.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Essentially all major development of &lt;code&gt;typescript-mode&lt;/code&gt; has come to a halt.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Seeing the forest for trees&lt;/h2&gt; &#xA;&lt;p&gt;Lots of Emacs major-modes are facing the same problem. I&#39;m sure there&#39;s similar issues for other editors too.&lt;/p&gt; &#xA;&lt;p&gt;This means lots of developers are working on solving this problem once and for all, and what they&#39;ve decided on is relying on a standardized set of external parsers using the &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;tree-sitter&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;New major modes are being developed as we speak to support TypeScript (and other languages) within Emacs based on Emacs&#39; upcoming native tree-sitter support.&lt;/p&gt; &#xA;&lt;p&gt;The code will be much faster, it will be simpler to work with and everyone should be happy. Well almost. Since tree-sitter support relies on a new major feature being added to core Emacs, it also means that these new major modes won&#39;t be backward compatible with older Emacs-versions.&lt;/p&gt; &#xA;&lt;p&gt;For that reason we are not &lt;em&gt;replacing&lt;/em&gt; this major mode with the new and improved one, but keeping it around to make sure older Emacs-versions does at least have an option for working with Typescript, even though it may not be optimal or track recent changes to the TypeScript-language.&lt;/p&gt; &#xA;&lt;p&gt;But once new Emacs ships with tree-sitter support, you are adviced to upgrade to the newer modes for better TypeScript-support, rather than keeping this old version around.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript.el&lt;/code&gt; can be installed from source directly using your favourite approach or framework, or from MELPA and MELPA Stable as a package.&lt;/p&gt; &#xA;&lt;p&gt;To install typescript.el simply type &lt;code&gt;M-x package-install&amp;lt;RET&amp;gt;typescript-mode&amp;lt;RET&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;To customize &lt;code&gt;typescript.el&lt;/code&gt; just type the following: &lt;code&gt;M-x customize-group&amp;lt;RET&amp;gt;typescript&amp;lt;RET&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can add any other customization you like to &lt;code&gt;typescript-mode-hook&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; file. &lt;code&gt;typescript.el&lt;/code&gt; also handles &lt;code&gt;prog-mode-hook&lt;/code&gt; on versions of Emacs which supports it.&lt;/p&gt; &#xA;&lt;h1&gt;Support for Compilation Mode&lt;/h1&gt; &#xA;&lt;p&gt;This mode automatically adds support for &lt;code&gt;compilation-mode&lt;/code&gt; so that if you run &lt;code&gt;M-x compile&amp;lt;ret&amp;gt;tsc&amp;lt;ret&amp;gt;&lt;/code&gt; the error messages are correctly parsed.&lt;/p&gt; &#xA;&lt;p&gt;However, the error messages produced by &lt;code&gt;tsc&lt;/code&gt; when its &lt;code&gt;pretty&lt;/code&gt; flag is turned on include ANSI color escapes, which by default &lt;code&gt;compilation-mode&lt;/code&gt; does not interpret. In order to get the escapes parsed, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;ansi-color)&#xA;(defun colorize-compilation-buffer ()&#xA;  (ansi-color-apply-on-region compilation-filter-start (point-max)))&#xA;(add-hook &#39;compilation-filter-hook &#39;colorize-compilation-buffer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you prefer, you can configure &lt;code&gt;tsc&lt;/code&gt; with the &lt;code&gt;pretty&lt;/code&gt; flag set to &lt;code&gt;false&lt;/code&gt;: &lt;code&gt;tsc --pretty false&lt;/code&gt;. However, doing this does more than just turning off the colors. It also causes &lt;code&gt;tsc&lt;/code&gt; to produce less elaborate error messages.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;To run the tests you can run &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer, you may run the tests via the provided &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t typescript-mode .&#xA;docker run --rm -v $(pwd):/typescript-mode typescript-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Other Typescript-packages of interest&lt;/h1&gt; &#xA;&lt;p&gt;While &lt;code&gt;typescript.el&lt;/code&gt; may &lt;em&gt;not&lt;/em&gt; provide a full kitchen-sink, the good news is that there&#39;s other packages which do!&lt;/p&gt; &#xA;&lt;p&gt;More advanced features can be provided by using these additional packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; - A standards-based code-completion and refactoring backend, based on the &lt;a href=&#34;https://langserver.org/&#34;&gt;Language Server Protocol (LSP)&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ananthakumaran/tide/&#34;&gt;tide&lt;/a&gt; - TypeScript Interactive Development Environment for Emacs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/josteink/ts-comint&#34;&gt;ts-comint&lt;/a&gt; - a Typescript REPL in Emacs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Initializing these with &lt;code&gt;typescript.el&lt;/code&gt; will then become a matter of creating your own &lt;code&gt;typescript-mode-hook&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abo-abo/ace-window</title>
    <updated>2022-08-14T02:09:08Z</updated>
    <id>tag:github.com,2022-08-14:/abo-abo/ace-window</id>
    <link href="https://github.com/abo-abo/ace-window" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickly switch windows in Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ace-window&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/packages/ace-window.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/ace-window.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/ace-window&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/ace-window-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/ace-window&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/ace-window-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;GNU Emacs package for selecting a window to switch to&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What and why&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m sure you&#39;re aware of the &lt;code&gt;other-window&lt;/code&gt; command. While it&#39;s great for two windows, it quickly loses its value when there are more windows. You need to call it many times, and since it&#39;s not easily predictable, you have to check each time if you&#39;re in the window that you wanted.&lt;/p&gt; &#xA;&lt;p&gt;Another approach is to use &lt;code&gt;windmove-left&lt;/code&gt;, &lt;code&gt;windmove-up&lt;/code&gt;, etc. These are fast and predictable. Their disadvantage is that they need 4 key bindings. The default ones are shift+arrows, which are hard to reach.&lt;/p&gt; &#xA;&lt;p&gt;This package aims to take the speed and predictability of &lt;code&gt;windmove&lt;/code&gt; and pack it into a single key binding, similar to &lt;code&gt;other-window&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Just assign &lt;code&gt;ace-window&lt;/code&gt; to a short key binding, as switching windows is a common task. I suggest &lt;kbd&gt;M-o&lt;/kbd&gt;, as it&#39;s short and not bound to anything important in the default Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;When there are two windows, &lt;code&gt;ace-window&lt;/code&gt; will call &lt;code&gt;other-window&lt;/code&gt; (unless &lt;code&gt;aw-dispatch-always&lt;/code&gt; is set non-nil). If there are more, each window will have the first character of its window label highlighted at the upper left of the window. Pressing that character will either switch to that window or filter to the next character needed to select a specific window. Note that, unlike &lt;code&gt;ace-jump-mode&lt;/code&gt;, the position of point will not be changed, i.e. the same behavior as that of &lt;code&gt;other-window&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A special character defined by &lt;code&gt;aw-make-frame-char&lt;/code&gt; (default = &lt;code&gt;z&lt;/code&gt;) means create a new frame and use its window as the target. The new frame&#39;s location is set relative to the prior selected frame&#39;s location and given by &lt;code&gt;aw-frame-offset&lt;/code&gt;. The new frame&#39;s size is given by &lt;code&gt;aw-frame-size&lt;/code&gt;. See their documentation strings for more information.&lt;/p&gt; &#xA;&lt;p&gt;The windows are ordered top-down, left-to-right. This means that if you remember your window layouts, you can switch windows without even looking at the leading char. For instance, the top left window will always be &lt;code&gt;1&lt;/code&gt; (or &lt;code&gt;a&lt;/code&gt; if you use letters for window characters).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ace-window&lt;/code&gt; works across multiple frames, as you can see from the &lt;a href=&#34;http://oremacs.com/download/ace-window.gif&#34;&gt;in-action gif&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swap and delete window&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can swap windows by calling &lt;code&gt;ace-window&lt;/code&gt; with a prefix argument &lt;kbd&gt;C-u&lt;/kbd&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can delete the selected window by calling &lt;code&gt;ace-window&lt;/code&gt; with a double prefix argument, i.e. &lt;kbd&gt;C-u C-u&lt;/kbd&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change the action midway&lt;/h2&gt; &#xA;&lt;p&gt;You can also start by calling &lt;code&gt;ace-window&lt;/code&gt; and then decide to switch the action to &lt;code&gt;delete&lt;/code&gt; or &lt;code&gt;swap&lt;/code&gt; etc. By default the bindings are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;x&lt;/kbd&gt; - delete window&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;m&lt;/kbd&gt; - swap windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;M&lt;/kbd&gt; - move window&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;c&lt;/kbd&gt; - copy window&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt; - select buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;n&lt;/kbd&gt; - select the previous window&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;u&lt;/kbd&gt; - select buffer in the other window&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;c&lt;/kbd&gt; - split window fairly, either vertically or horizontally&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;v&lt;/kbd&gt; - split window vertically&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;b&lt;/kbd&gt; - split window horizontally&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;o&lt;/kbd&gt; - maximize current window&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;?&lt;/kbd&gt; - show these command bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For proper operation, these keys &lt;em&gt;must not&lt;/em&gt; be in &lt;code&gt;aw-keys&lt;/code&gt;. Additionally, if you want these keys to work with fewer than three windows, you need to have &lt;code&gt;aw-dispatch-always&lt;/code&gt; set to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Aside from binding &lt;code&gt;ace-window&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &#34;M-o&#34;) &#39;ace-window)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the following customizations are available:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;aw-keys&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;aw-keys&lt;/code&gt; - the list of initial characters used in window labels:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq aw-keys &#39;(?a ?s ?d ?f ?g ?h ?j ?k ?l))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;aw-keys&lt;/code&gt; are 0-9 by default, which is reasonable, but in the setup above, the keys are on the home row.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;aw-scope&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The default one is &lt;code&gt;global&lt;/code&gt;, which means that &lt;code&gt;ace-window&lt;/code&gt; will work across frames. If you set this to &lt;code&gt;frame&lt;/code&gt;, &lt;code&gt;ace-window&lt;/code&gt; will offer you only the windows of the current frame.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;aw-background&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;ace-window&lt;/code&gt; temporarily sets a gray background and removes color from available windows in order to make the window-switching characters more visible. This is the behavior inherited from &lt;code&gt;ace-jump-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This behavior might not be necessary, as you already know the locations where to look, i.e. the top-left corners of each window. So you can turn off the gray background with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq aw-background nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;aw-dispatch-always&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When non-nil, &lt;code&gt;ace-window&lt;/code&gt; will issue a &lt;code&gt;read-char&lt;/code&gt; even for one window. This will make &lt;code&gt;ace-window&lt;/code&gt; act differently from &lt;code&gt;other-window&lt;/code&gt; for one or two windows. This is useful to change the action midway and execute an action other than the default &lt;em&gt;jump&lt;/em&gt; action. By default, this is set to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;aw-dispatch-alist&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is the list of actions you can trigger from &lt;code&gt;ace-window&lt;/code&gt; other than the &lt;em&gt;jump&lt;/em&gt; default. By default it is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(defvar aw-dispatch-alist&#xA;  &#39;((?x aw-delete-window &#34;Delete Window&#34;)&#xA;&#x9;(?m aw-swap-window &#34;Swap Windows&#34;)&#xA;&#x9;(?M aw-move-window &#34;Move Window&#34;)&#xA;&#x9;(?c aw-copy-window &#34;Copy Window&#34;)&#xA;&#x9;(?j aw-switch-buffer-in-window &#34;Select Buffer&#34;)&#xA;&#x9;(?n aw-flip-window)&#xA;&#x9;(?u aw-switch-buffer-other-window &#34;Switch Buffer Other Window&#34;)&#xA;&#x9;(?c aw-split-window-fair &#34;Split Fair Window&#34;)&#xA;&#x9;(?v aw-split-window-vert &#34;Split Vert Window&#34;)&#xA;&#x9;(?b aw-split-window-horz &#34;Split Horz Window&#34;)&#xA;&#x9;(?o delete-other-windows &#34;Delete Other Windows&#34;)&#xA;&#x9;(?? aw-show-dispatch-help))&#xA;  &#34;List of actions for `aw-dispatch-default&#39;.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using ace-window, if the action character is followed by a string, then &lt;code&gt;ace-window&lt;/code&gt; will be invoked again to select the target window for the action. Otherwise, the current window is selected.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;aw-minibuffer-flag&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When non-nil, also display &lt;code&gt;ace-window-mode&lt;/code&gt; string in the minibuffer when &lt;code&gt;ace-window&lt;/code&gt; is active. This is useful when there are many side-by-side windows and the &lt;code&gt;ace-window-mode&lt;/code&gt; string is cutoff in the minor mode area of the modeline.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;aw-ignored-buffers&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;List of buffers and major-modes to ignore when choosing a window from the window list. Active only when &lt;code&gt;aw-ignore-on&lt;/code&gt; is non-nil. Windows displaying these buffers can still be chosen by typing their specific labels.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;aw-ignore-on&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When t, &lt;code&gt;ace-window&lt;/code&gt; will ignore buffers and major-modes in &lt;code&gt;aw-ignored-buffers&lt;/code&gt;. Use M-0 &lt;code&gt;ace-window&lt;/code&gt; to toggle this value. :type &#39;boolean)&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;aw-ignore-current&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When t, &lt;code&gt;ace-window&lt;/code&gt; will ignore `selected-window&#39;.&lt;/p&gt;</summary>
  </entry>
</feed>