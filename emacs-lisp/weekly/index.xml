<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-30T01:45:41Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-lsp/dap-mode</title>
    <updated>2022-10-30T01:45:41Z</updated>
    <id>tag:github.com,2022-10-30:/emacs-lsp/dap-mode</id>
    <link href="https://github.com/emacs-lsp/dap-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs ❤️ Debug Adapter Protocol&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://melpa.org/#/dap-mode][file:https://melpa.org/packages/dap-mode-badge.svg]] [[https://stable.melpa.org/#/dap-mode][file:https://stable.melpa.org/packages/dap-mode-badge.svg]] [[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]] [[https://github.com/emacs-lsp/dap-mode/actions][file:https://github.com/emacs-lsp/dap-mode/workflows/CI/badge.svg]] [[https://discord.gg/swuxy5AAgT][file:https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dap-mode ** Table of Contents :TOC_4_gh:noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#dap-mode][dap-mode]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#summary][Summary]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#project-status][Project status]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#usage][Usage]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#docker-usage][Docker usage]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#features][Features]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#configuration][Configuration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#gallery][Gallery]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#extending-dap-with-new-debug-servers][Extending DAP with new Debug servers]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#links][Links]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#acknowledgments][Acknowledgments]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Summary Emacs client/library for [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]] is a wire protocol for communication between client and Debug Server. It&#39;s similar to the [[https://github.com/Microsoft/language-server-protocol][LSP]] but provides integration with debug server. *** Project status The API considered unstable until 1.0 release is out. It is tested against Java, Python, Ruby, Elixir and LLDB (C/C++/Objective-C/Swift). ** Usage The main entry points are &lt;del&gt;dap-debug&lt;/del&gt; and &lt;del&gt;dap-debug-edit-template&lt;/del&gt;. The first one asks for a registered debug template and starts the configuration using the default values for that particular configuration. The latter creates a debug template which could be customized before running. &lt;del&gt;dap-debug-edit-template&lt;/del&gt; will prepare a template declaration inside a temporary buffer. You should execute this code using &lt;del&gt;C-M-x&lt;/del&gt; for the changes to apply. You should also copy this code into your Emacs configuration if you wish to make it persistent.&lt;/p&gt; &#xA;&lt;p&gt;dap-mode also provides a [[https://github.com/abo-abo/hydra][hydra]] with &lt;del&gt;dap-hydra&lt;/del&gt;. You can automatically trigger the hydra when the program hits a breakpoint by using the following code.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (add-hook &#39;dap-stopped-hook (lambda (arg) (call-interactively #&#39;dap-hydra))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Docker usage You can also use this tool with dockerized debug servers: configure it either with a &lt;del&gt;.dir-locals&lt;/del&gt; file or drop an &lt;del&gt;.lsp-docker.yml&lt;/del&gt; configuration file (use [[https://github.com/emacs-lsp/lsp-docker][lsp-docker]] for general reference). Basically you have one function &lt;del&gt;dap-docker-register&lt;/del&gt; that performs all the heavy lifting (finding the original debug template, patching it, registering a debug provider e.t.c). This function examines a configuration file or falls back to the default configuration (which can be patched using the &lt;del&gt;.dir-locals&lt;/del&gt; approach, take a note that the default configuration doesn&#39;t provide any sane defaults for debugging) and then operates on the combination of the two. This mechanism is the same as in &lt;del&gt;lsp-docker&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Note: currently you cannot use this mode when using a network connection to connect to debuggers (this part is yet to be implemented).&#xA;Still want to talk to debuggers over network? In order to do so you have to look at the ~launch-args~ patching&#xA;done by ~dap-docker--dockerize-start-file-args~, you have to somehow assign ~nil~ to ~dap-server-path~ before it is passed further into session creation.&#xA;&#xA;If you want to stick to a configuration file, take a look at the example below:&#xA;&#xA;#+begin_src yaml&#xA;lsp:&#xA;  server:&#xA;    # &#39;lsp-docker&#39; fields&#xA;  mappings:&#xA;    - source: &#34;/your/host/source/path&#34; # used both by &#39;lsp-docker&#39; and &#39;dap-docker&#39;&#xA;      destination: &#34;/your/local/path/inside/a/container&#34; # used both by &#39;lsp-docker&#39; and &#39;dap-docker&#39;&#xA;  debug:&#xA;    type: docker # only docker is supported&#xA;    subtype: image # or &#39;container&#39;&#xA;    name: &amp;lt;docker image or container that has the debugger in&amp;gt; # you can omit this field&#xA;    # in this case the &#39;lsp-docker&#39; (&#39;server&#39; section) image name is used&#xA;    enabled: true # you can explicitly disable &#39;dap-docker&#39; by using &#39;false&#39;&#xA;    provider: &amp;lt;your default language debug provider, double quoted string&amp;gt;&#xA;    template: &amp;lt;your default language debug template, double quoted string&amp;gt;&#xA;    launch_command: &amp;lt;an explicit command if you want to override a default one provided by the debug provider&amp;gt;&#xA;    # e.g. if you have installed a debug server in a different directory, not used with &#39;container&#39; subtype debuggers&#xA;#+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** [[https://emacs-lsp.github.io/dap-mode/page/features/][Features]] ** [[https://emacs-lsp.github.io/dap-mode/page/configuration/][Configuration]] ** [[https://emacs-lsp.github.io/dap-mode/page/gallery][Gallery]] ** [[https://emacs-lsp.github.io/dap-mode/page/adding-debug-server][Extending DAP with new Debug servers]] ** Links&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/emacs-lsp/lsp-java][LSP Java]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/][Debug Adapter Protocol Server Implementations]] ** Acknowledgments&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/danielmartin][Daniel Martin]] - LLDB integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/kiennq][Kien Nguyen]] - NodeJS debugger, Edge debuggers, automatic extension installation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Ladicle][Aya Igarashi]] - Go debugger integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/nbfalcon][Nikita Bloshchanevich]] - launch.json support (+ variable expansion), debugpy support, (with some groundwork by yyoncho) runInTerminal support, various bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/factyy][Andrei Mochalov]] - Docker (debugging in containers) integration.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tkf/emacs-request</title>
    <updated>2022-10-30T01:45:41Z</updated>
    <id>tag:github.com,2022-10-30:/tkf/emacs-request</id>
    <link href="https://github.com/tkf/emacs-request" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Request.el -- Easy HTTP request for Emacs Lisp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|build-status| |melpa-badge| |melpa-stable-badge|&lt;/p&gt; &#xA;&lt;h1&gt;==================================== request.el -- an elisp HTTP library&lt;/h1&gt; &#xA;&lt;p&gt;Uses &lt;code&gt;curl&lt;/code&gt; as its backend or Emacs&#39;s native &lt;code&gt;url.el&lt;/code&gt; library if &lt;code&gt;curl&lt;/code&gt; is not found.&lt;/p&gt; &#xA;&lt;p&gt;The default encoding for requests is &lt;code&gt;utf-8&lt;/code&gt;. Please explicitly specify &lt;code&gt;:encoding &#39;binary&lt;/code&gt; for binary data.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;As described in &lt;code&gt;Getting started&lt;/code&gt;_, ensure melpa&#39;s whereabouts in &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt;::&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;&lt;a href=&#34;https://melpa.org/packages/&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&#34;))&lt;/p&gt; &#xA;&lt;p&gt;Then&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;M-x package-refresh-contents RET M-x package-install RET request RET&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, directly clone this repo and &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;GET:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/get&#34;&gt;http://httpbin.org/get&lt;/a&gt;&#34; :params &#39;((&#34;key&#34; . &#34;value&#34;) (&#34;key2&#34; . &#34;value2&#34;)) :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;args data)))))&lt;/p&gt; &#xA;&lt;p&gt;POST:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/post&#34;&gt;http://httpbin.org/post&lt;/a&gt;&#34; :type &#34;POST&#34; :data &#39;((&#34;key&#34; . &#34;value&#34;) (&#34;key2&#34; . &#34;value2&#34;)) ;; :data &#34;key=value&amp;amp;key2=value2&#34; ;; this is equivalent :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;form data)))))&lt;/p&gt; &#xA;&lt;p&gt;Block until completion:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/get&#34;&gt;http://httpbin.org/get&lt;/a&gt;&#34; :sync t :complete (cl-function (lambda (&amp;amp;key response &amp;amp;allow-other-keys) (message &#34;Done: %s&#34; (request-response-status-code response)))))&lt;/p&gt; &#xA;&lt;p&gt;Curl authentication:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/get&#34;&gt;http://httpbin.org/get&lt;/a&gt;&#34; :auth &#34;digest&#34; ;; or &#34;basic&#34;, &#34;anyauth&#34;, etc., which see curl(1) :complete (cl-function (lambda (&amp;amp;key response &amp;amp;allow-other-keys) (message &#34;Done: %s&#34; (request-response-status-code response)))))&lt;/p&gt; &#xA;&lt;p&gt;Request binary data:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/get&#34;&gt;http://httpbin.org/get&lt;/a&gt;&#34; :encoding &#39;binary :complete (cl-function (lambda (&amp;amp;key response &amp;amp;allow-other-keys) (message &#34;Done: %s&#34; (request-response-status-code response)))))&lt;/p&gt; &#xA;&lt;p&gt;POST file (&lt;strong&gt;WARNING&lt;/strong&gt;: it will send the contents of the current buffer!):&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/post&#34;&gt;http://httpbin.org/post&lt;/a&gt;&#34; :type &#34;POST&#34; :files `((&#34;current buffer&#34; . ,(current-buffer))) :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;files data)))))&lt;/p&gt; &#xA;&lt;p&gt;Rich callback dispatch (like &lt;code&gt;jQuery.ajax&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/status/418&#34;&gt;http://httpbin.org/status/418&lt;/a&gt;&#34; ;; &#34;&lt;a href=&#34;http://httpbin.org/status/200&#34;&gt;http://httpbin.org/status/200&lt;/a&gt;&#34; ;; success callback will be called. ;; &#34;&lt;a href=&#34;http://httpbin.org/status/400&#34;&gt;http://httpbin.org/status/400&lt;/a&gt;&#34; ;; you will see &#34;Got 400.&#34; :parser &#39;buffer-string :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (when data (with-current-buffer (get-buffer-create &#34;&lt;em&gt;request demo&lt;/em&gt;&#34;) (erase-buffer) (insert data) (pop-to-buffer (current-buffer)))))) :error (cl-function (lambda (&amp;amp;rest args &amp;amp;key error-thrown &amp;amp;allow-other-keys) (message &#34;Got error: %S&#34; error-thrown))) :complete (lambda (&amp;amp;rest _) (message &#34;Finished!&#34;)) :status-code &#39;((400 . (lambda (&amp;amp;rest _) (message &#34;Got 400.&#34;))) (418 . (lambda (&amp;amp;rest _) (message &#34;Got 418.&#34;)))))&lt;/p&gt; &#xA;&lt;p&gt;Flexible PARSER option:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;https://github.com/tkf/emacs-request/commits/master.atom&#34;&gt;https://github.com/tkf/emacs-request/commits/master.atom&lt;/a&gt;&#34; ;; Parse XML in response body: :parser (lambda () (libxml-parse-xml-region (point) (point-max))) :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) ;; Just don&#39;t look at this function.... (let ((get (lambda (node &amp;amp;rest names) (if names (apply get (first (xml-get-children node (car names))) (cdr names)) (first (xml-node-children node)))))) (message &#34;Latest commit: %s (by %s)&#34; (funcall get data &#39;entry &#39;title) (funcall get data &#39;entry &#39;author &#39;name))))))&lt;/p&gt; &#xA;&lt;p&gt;PUT JSON data:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/put&#34;&gt;http://httpbin.org/put&lt;/a&gt;&#34; :type &#34;PUT&#34; :data (json-encode &#39;((&#34;key&#34; . &#34;value&#34;) (&#34;key2&#34; . &#34;value2&#34;))) :headers &#39;((&#34;Content-Type&#34; . &#34;application/json&#34;)) :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;json data)))))&lt;/p&gt; &#xA;&lt;p&gt;PUT JSON data including non-ascii strings:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;&lt;a href=&#34;http://httpbin.org/put&#34;&gt;http://httpbin.org/put&lt;/a&gt;&#34; :type &#34;PUT&#34; :data (json-encode &#39;((&#34;key&#34; . &#34;値1&#34;) (&#34;key2&#34; . &#34;値2&#34;))) :headers &#39;((&#34;Content-Type&#34; . &#34;application/json&#34;)) :parser &#39;json-read :encoding &#39;utf-8 :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;json data)))))&lt;/p&gt; &#xA;&lt;p&gt;Another PUT JSON example (nested JSON using alist structure, how to represent a boolean &amp;amp; how to selectively evaluate lisp):&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;;; (1) Prepend alist structure with a backtick (&lt;code&gt;) rather than single quote (&#39;) ;; to allow elisp evaluation of selected elements prefixed with a comma (,) ;; (2) This value is expected as a boolean so use the nil / t elisp alist denotation ;; (3) The function will be evaluated as it has been prefixed with a comma (,) (request &#34;http://httpbin.org/put&#34; :type &#34;PUT&#34; :data (json-encode &lt;/code&gt;((&#34;jsonArray&#34; . ((&#34;item1&#34; . &#34;value 1&#34;) ;; (1) (&#34;item2&#34; . t) ;; (2) (&#34;item3&#34; . ,(your-custom-elisp-function)))))) ;; (3) :headers &#39;((&#34;Content-Type&#34; . &#34;application/json&#34;)) :parser &#39;json-read :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;I sent: %S&#34; (assoc-default &#39;json data)))))&lt;/p&gt; &#xA;&lt;p&gt;GET with Unix domain socket data:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(request &#34;http:/hello.txt&#34; :unix-socket &#34;/tmp/app.sock&#34; :parser (lambda () (buffer-string)) :success (cl-function (lambda (&amp;amp;key data &amp;amp;allow-other-keys) (message &#34;Got: %s&#34; data))))&lt;/p&gt; &#xA;&lt;h1&gt;Legacy documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Github Pages &amp;lt;https://tkf.github.io/emacs-request/&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. |build-status| image:: &lt;a href=&#34;https://github.com/tkf/emacs-request/workflows/CI/badge.svg&#34;&gt;https://github.com/tkf/emacs-request/workflows/CI/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/tkf/emacs-request/actions&#34;&gt;https://github.com/tkf/emacs-request/actions&lt;/a&gt; :alt: Build Status .. |melpa-badge| image:: &lt;a href=&#34;http://melpa.org/packages/request-badge.svg&#34;&gt;http://melpa.org/packages/request-badge.svg&lt;/a&gt; :target: &lt;a href=&#34;http://melpa.org/#/request&#34;&gt;http://melpa.org/#/request&lt;/a&gt; :alt: MELPA Badge .. |melpa-stable-badge| image:: &lt;a href=&#34;http://stable.melpa.org/packages/request-badge.svg&#34;&gt;http://stable.melpa.org/packages/request-badge.svg&lt;/a&gt; :target: &lt;a href=&#34;http://stable.melpa.org/#/request&#34;&gt;http://stable.melpa.org/#/request&lt;/a&gt; :alt: MELPA Stable Badge .. _Getting started: &lt;a href=&#34;http://melpa.org/#/getting-started&#34;&gt;http://melpa.org/#/getting-started&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hlissner/evil-snipe</title>
    <updated>2022-10-30T01:45:41Z</updated>
    <id>tag:github.com,2022-10-30:/hlissner/evil-snipe</id>
    <link href="https://github.com/hlissner/evil-snipe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;2-char searching ala vim-sneak &amp; vim-seek, for evil-mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made_with-Doom_Emacs-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Made with Doom Emacs&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/tag/hlissner/evil-snipe.svg?label=release&amp;amp;style=flat-square&#34; alt=&#34;Release tag&#34;&gt; &lt;a href=&#34;http://melpa.org/#/evil-snipe&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/evil-snipe-badge.svg?style=flat-square&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/hlissner/evil-snipe/CI/master?style=flat-square&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;evil-snipe&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hlissner/evil-snipe/screenshots/cover.jpg&#34; alt=&#34;Sniper!&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Evil-snipe emulates &lt;a href=&#34;https://github.com/goldfeld/vim-seek&#34;&gt;vim-seek&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt; in &lt;a href=&#34;https://gitorious.org/evil/pages/Home&#34;&gt;evil-mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It provides 2-character motions for quickly (and more accurately) jumping around text, compared to evil&#39;s built-in f/F/t/T motions, incrementally highlighting candidate targets as you type.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Evil-snipe is available on MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install evil-snipe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;evil-snipe)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;evil-snipe&lt;/code&gt; comes with two global modes: &lt;code&gt;evil-snipe-mode&lt;/code&gt; and &lt;code&gt;evil-snipe-override-mode&lt;/code&gt;, and two local modes: &lt;code&gt;evil-snipe-local-mode&lt;/code&gt; and &lt;code&gt;evil-snipe-override-local-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can either a) enable one or both globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(evil-snipe-mode +1)&#xA;(evil-snipe-override-mode +1)&#xA;&#xA;;; and disable in specific modes&#xA;(push &#39;python-mode evil-snipe-disabled-modes)&#xA;&#xA;;; or disable it manually&#xA;(add-hook &#39;python-mode-hook #&#39;turn-off-evil-snipe-mode)&#xA;(add-hook &#39;python-mode-hook #&#39;turn-off-evil-snipe-override-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or b) enable one or both locally, where you need it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;python-mode-hook &#39;turn-on-evil-snipe-mode)&#xA;(add-hook &#39;python-mode-hook &#39;turn-on-evil-snipe-override-local-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;By default, snipe only binds &lt;kbd&gt;s&lt;/kbd&gt; (forward)/&lt;kbd&gt;S&lt;/kbd&gt; (backward) to &lt;code&gt;evil-snipe-s&lt;/code&gt; and &lt;code&gt;evil-snipe-S&lt;/code&gt;, respectively. In operator mode, snipe is bound to &lt;kbd&gt;z&lt;/kbd&gt;/&lt;kbd&gt;Z&lt;/kbd&gt; and &lt;kbd&gt;x&lt;/kbd&gt;/&lt;kbd&gt;X&lt;/kbd&gt; (exclusive).&lt;/p&gt; &#xA;&lt;p&gt;The last snipe can be repeated with &lt;kbd&gt;s&lt;/kbd&gt;/&lt;kbd&gt;S&lt;/kbd&gt; after a successful snipe (or with &lt;kbd&gt;s&lt;/kbd&gt;+&lt;kbd&gt;RET&lt;/kbd&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Evil-snipe can override evil-mode&#39;s native motions with 1-char sniping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Globally&#xA;(evil-snipe-override-mode 1)&#xA;&#xA;;; Or locally&#xA;(add-hook &#39;ruby-mode-hook &#39;evil-snipe-override-local-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The benefit of this is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Incremental highlighting&lt;/li&gt; &#xA; &lt;li&gt;You can repeat searches with &lt;kbd&gt;f&lt;/kbd&gt;, &lt;kbd&gt;F&lt;/kbd&gt;, &lt;kbd&gt;t&lt;/kbd&gt; and &lt;kbd&gt;T&lt;/kbd&gt; (ala &lt;a href=&#34;https://github.com/rhysd/clever-f.vim&#34;&gt;Clever-F&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;;&lt;/kbd&gt; and &lt;kbd&gt;,&lt;/kbd&gt; are available for repeating searches (and won&#39;t interfere with the original maps; they take effect only after a successful snipe)&lt;/li&gt; &#xA; &lt;li&gt;A more streamlined experience in general&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;Search scope&lt;/h3&gt; &#xA;&lt;p&gt;These three variables determine the scope of snipes (and the incremental highlighter):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-scope&lt;/code&gt; (default: &lt;code&gt;line&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-repeat-scope&lt;/code&gt; (default: &lt;code&gt;whole-line&lt;/code&gt;) Scope while &lt;em&gt;repeating&lt;/em&gt; searches with &lt;code&gt;evil-snipe-repeat&lt;/code&gt; or &lt;code&gt;evil-snipe-repeat-reverse&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-spillover-scope&lt;/code&gt; (default: &lt;code&gt;nil&lt;/code&gt;) Scope to expand to when a snipe fails. Only useful if set to a broader scope than &lt;code&gt;evil-snipe-scope&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are the possible settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;line&lt;/td&gt; &#xA;   &lt;td&gt;rest of the current line after cursor (&lt;code&gt;vim-seek&lt;/code&gt; behavior)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;buffer&lt;/td&gt; &#xA;   &lt;td&gt;rest of the buffer after cursor (&lt;code&gt;vim-sneak&lt;/code&gt; behavior)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;visible&lt;/td&gt; &#xA;   &lt;td&gt;the rest of the &lt;em&gt;visible&lt;/em&gt; buffer after cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;whole-line&lt;/td&gt; &#xA;   &lt;td&gt;same as &lt;code&gt;&#39;line&lt;/code&gt;, but highlights on either side of cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;whole-buffer&lt;/td&gt; &#xA;   &lt;td&gt;same as &lt;code&gt;&#39;buffer&lt;/code&gt;, but highlights &lt;em&gt;all&lt;/em&gt; matches in buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;whole-visible&lt;/td&gt; &#xA;   &lt;td&gt;same as &lt;code&gt;&#39;visible&lt;/code&gt;, but highlights &lt;em&gt;all&lt;/em&gt; visible matches in buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Character aliases&lt;/h3&gt; &#xA;&lt;p&gt;Specific characters can be aliased to regex patterns by modifying &lt;code&gt;evil-snipe-aliases&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To map &lt;kbd&gt;[&lt;/kbd&gt; to any opening parentheses or bracket &lt;strong&gt;in all modes&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(push &#39;(?\[ &#34;[[{(]&#34;) evil-snipe-aliases)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Therefore, &lt;kbd&gt;s&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;[&lt;/kbd&gt; will match &lt;code&gt;a[&lt;/code&gt;, &lt;code&gt;a{&lt;/code&gt; or &lt;code&gt;a(&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To map &lt;kbd&gt;:&lt;/kbd&gt; to a python function (but only in &lt;code&gt;python-mode&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;python-mode-hook&#xA;  (lambda ()&#xA;    (make-variable-buffer-local &#39;evil-snipe-aliases)&#xA;    (push &#39;(?: &#34;def .+:&#34;) evil-snipe-aliases)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Faces&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-first-match-face&lt;/code&gt;: The first highlighted match.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-matches-face&lt;/code&gt;: The rest of the highlighted matches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sniping in visual mode&lt;/h3&gt; &#xA;&lt;p&gt;To avoid binding conflicts, evil-snipe has no visual mode bindings. You can add them with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(evil-define-key &#39;visual evil-snipe-local-mode-map &#34;z&#34; &#39;evil-snipe-s)&#xA;(evil-define-key &#39;visual evil-snipe-local-mode-map &#34;Z&#34; &#39;evil-snipe-S)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration into avy/evil-easymotion&lt;/h3&gt; &#xA;&lt;p&gt;This will allow you to quickly hop into avy/evil-easymotion right after a snipe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key evil-snipe-parent-transient-map (kbd &#34;C-;&#34;)&#xA;  (evilem-create &#39;evil-snipe-repeat&#xA;                 :bind ((evil-snipe-scope &#39;buffer)&#xA;                        (evil-snipe-enable-highlight)&#xA;                        (evil-snipe-enable-incremental-highlight))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Thanks to &lt;a href=&#34;https://github.com/PythonNut&#34;&gt;PythonNut&lt;/a&gt; for this. &lt;a href=&#34;https://github.com/hlissner/evil-snipe/issues/25#issuecomment-208068419&#34;&gt;More info here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Conflicts with other plugins&lt;/h2&gt; &#xA;&lt;p&gt;It seems &lt;code&gt;evil-snipe-override-mode&lt;/code&gt; causes problems in Magit buffers, to fix this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(add-hook &#39;magit-mode-hook &#39;turn-off-evil-snipe-override-mode)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Other settings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-enable-highlight&lt;/code&gt; (default: &lt;code&gt;t&lt;/code&gt;) Highlight first match.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-enable-incremental-highlight&lt;/code&gt; (default: &lt;code&gt;t&lt;/code&gt;) Incrementally highlight all matches in scope.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-override-evil-repeat-keys&lt;/code&gt; (default: &lt;code&gt;t&lt;/code&gt;) Whether or not evil-snipe will override evil&#39;s default &lt;kbd&gt;;&lt;/kbd&gt; and &lt;kbd&gt;,&lt;/kbd&gt; mappings with snipe&#39;s (when &lt;code&gt;evil-snipe-override-mode&lt;/code&gt; is on).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-repeat-keys&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) If non-nil, pressing &lt;kbd&gt;s&lt;/kbd&gt;/&lt;kbd&gt;S&lt;/kbd&gt; after a search will repeat it. If &lt;code&gt;evil-snipe-override-evil&lt;/code&gt; is non-nil, this applies to f/F/t/T as well.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-show-prompt&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) Whether or not to show the &#34;N&amp;gt;&#34; prompt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-smart-case&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;) If non-nil, searches will be case-insenstive unless your search contains a capital letter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-auto-scroll&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;) If non-nil, the window will scroll to follow the cursor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-auto-disable-substitute&lt;/code&gt; (default: &lt;code&gt;t&lt;/code&gt;) Whether or not evil&#39;s default substitute mappings (s/S) are unset. They can sometimes interfere with snipe. Must be set &lt;em&gt;before&lt;/em&gt; evil-snipe is loaded.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-skip-leading-whitespace&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) If non-nil, sniping will skip over leading whitespace when you search for whitespace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-tab-increment&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;) If non-nil, pressing TAB in the snipe prompt will increase the size of the snipe buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-use-vim-sneak-bindings&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;) If non-nil, evil-snipe binds z/Z to exclusive sniping in operator state, but leaves the x/X bindings free. This mirrors the default bindings of vim-sneak, and frees up cx/cX to be used by &lt;a href=&#34;https://github.com/Dewdrops/evil-exchange&#34;&gt;evil-exchange&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-mode&lt;/code&gt; / &lt;code&gt;evil-snipe-local-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-override-mode&lt;/code&gt; / &lt;code&gt;evil-snipe-override-local-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-repeat&lt;/code&gt; / &lt;code&gt;evil-snipe-repeat-reverse&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-s&lt;/code&gt; / &lt;code&gt;evil-snipe-S&lt;/code&gt;: inclusive 2-char sniping&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-x&lt;/code&gt; / &lt;code&gt;evil-snipe-X&lt;/code&gt;: exclusive 2-char sniping&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-f&lt;/code&gt; / &lt;code&gt;evil-snipe-F&lt;/code&gt;: inclusive 1-char sniping&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-t&lt;/code&gt; / &lt;code&gt;evil-snipe-T&lt;/code&gt;: exclusive 1-char sniping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Default keybindings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(evil-define-key &#39;(normal motion) evil-snipe-local-mode-map&#xA;  &#34;s&#34; &#39;evil-snipe-s&#xA;  &#34;S&#34; &#39;evil-snipe-S)&#xA;&#xA;(evil-define-key &#39;operator evil-snipe-local-mode-map&#xA;  &#34;z&#34; &#39;evil-snipe-s&#xA;  &#34;Z&#34; &#39;evil-snipe-S&#xA;  &#34;x&#34; &#39;evil-snipe-x&#xA;  &#34;X&#34; &#39;evil-snipe-X)&#xA;&#xA;(evil-define-key &#39;motion evil-snipe-override-local-mode-map&#xA;  &#34;f&#34; &#39;evil-snipe-f&#xA;  &#34;F&#34; &#39;evil-snipe-F&#xA;  &#34;t&#34; &#39;evil-snipe-t&#xA;  &#34;T&#34; &#39;evil-snipe-T)&#xA;&#xA;(when evil-snipe-override-evil-repeat-keys&#xA;  (evil-define-key &#39;motion map&#xA;    &#34;;&#34; &#39;evil-snipe-repeat&#xA;    &#34;,&#34; &#39;evil-snipe-repeat-reverse))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>