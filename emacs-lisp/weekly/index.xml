<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-07T02:07:21Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PythonNut/evil-easymotion</title>
    <updated>2022-08-07T02:07:21Z</updated>
    <id>tag:github.com,2022-08-07:/PythonNut/evil-easymotion</id>
    <link href="https://github.com/PythonNut/evil-easymotion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚è© A port of vim easymotion to Emacs&#39; evil-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;evil-easymotion&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/evil-easymotion&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/evil-easymotion-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In which we give &lt;a href=&#34;https://github.com/Lokaltog/vim-easymotion&#34;&gt;Lokaltog/&lt;strong&gt;vim-easymotion&lt;/strong&gt;&lt;/a&gt; a streak of malevolence.&lt;/p&gt; &#xA;&lt;p&gt;Suppose you&#39;re a proud user of &lt;code&gt;evil&lt;/code&gt;, but you have a nasty habit: when you want to move ten lines down, you hit &lt;kbd&gt;j&lt;/kbd&gt; ten times in a row instead of using the ergonomically superior &lt;kbd&gt;10&lt;/kbd&gt;&lt;kbd&gt;j&lt;/kbd&gt;. With &lt;code&gt;evil-easymotion&lt;/code&gt; you can invoke &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;j&lt;/kbd&gt;, and this plugin will put a target character on every possible position. Type the character on the target and &lt;strong&gt;&lt;em&gt;wham&lt;/em&gt;&lt;/strong&gt;! you have teleported there.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Obligatory screencast&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PythonNut/evil-easymotion/master/img/evil-easymotion-demo.gif&#34; alt=&#34;screencast&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently most motions are supported, and it&#39;s easy to define your own easymotions. Easymotions can also be composed with operators e.g. &lt;kbd&gt;d&lt;/kbd&gt;&lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;j&lt;/kbd&gt; to delete a bunch of lines.&lt;/p&gt; &#xA;&lt;h1&gt;Notice&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;evil-easymotion&lt;/code&gt; API has changed to use keyword arguments. The required changes (if any) to your config should be pretty self-explanatory. This should allow me to add more options in the future without breaking your config.&lt;/p&gt; &#xA;&lt;h1&gt;Basic Usage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;evil-easymotion&lt;/code&gt; comes with predefined easymotions for all basic motions that evil defines by default, and provides key bindings for these using the standard evil keys in the built-in keymap &lt;code&gt;evilem-map&lt;/code&gt;. To make these available for use, bind this keymap to a prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs&#34;&gt;(evilem-default-keybindings &#34;SPC&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This binds all motions under the prefix &lt;kbd&gt;SPC&lt;/kbd&gt; in &lt;code&gt;evil-motion-state-map&lt;/code&gt;. Type &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;j&lt;/kbd&gt; to give it a try.&lt;/p&gt; &#xA;&lt;p&gt;For motions defined manually, you need to bind the keys yourself, for instance using &lt;code&gt;evilem-define&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs&#34;&gt;(evilem-define (kbd &#34;SPC w&#34;) &#39;evil-forward-word-begin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(This is just an example; this functionality is already available by default.)&lt;/p&gt; &#xA;&lt;p&gt;You can always drop by &lt;a href=&#34;https://github.com/PythonNut/evil-easymotion/wiki&#34;&gt;the wiki&lt;/a&gt; for more tips.&lt;/p&gt; &#xA;&lt;h1&gt;Building Your Own Motions&lt;/h1&gt; &#xA;&lt;h3&gt;Collectors&lt;/h3&gt; &#xA;&lt;p&gt;Where present, &lt;code&gt;collectors&lt;/code&gt; is used as the motion specification for generating jump points. It may be an (optionally sharp) quoted function name, a lambda, or a list of any of the above. If multiple functions are provided, the collected points are merged and presented at once.&lt;/p&gt; &#xA;&lt;h3&gt;Macros&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;evil-easymotion&lt;/code&gt; provides four user-facing macros:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-make-motion-plain name collectors &amp;amp;key ...)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Produce a function, named &lt;code&gt;name&lt;/code&gt;, from &lt;code&gt;collectors&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-make-motion name collectors &amp;amp;key ...)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Like &lt;code&gt;evilem-make-motion-plain&lt;/code&gt;, but produce an evil motion produced with &lt;code&gt;evil-define-motion&lt;/code&gt; instead of a plain &lt;code&gt;defun&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-create-plain collectors &amp;amp;key ...)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Like &lt;code&gt;evil-make-motion-plain&lt;/code&gt;, but with an automatically generated &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-create collectors &amp;amp;key ...)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;evilem-create&lt;/code&gt; : &lt;code&gt;evil-evilem-make-motion&lt;/code&gt; :: &lt;code&gt;evilem-create-plain&lt;/code&gt; : &lt;code&gt;evilem-make-motion-plain&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-define key collectors)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Like &lt;code&gt;evilem-create&lt;/code&gt;, but also bind the generated function to &lt;code&gt;key&lt;/code&gt; in the relevant maps (either &lt;code&gt;evil-normal-state&lt;/code&gt; or &lt;code&gt;evil-motion-state&lt;/code&gt;, depending on other flags).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keyword arguments&lt;/h3&gt; &#xA;&lt;p&gt;In addition, various keyword arguments may be used to modify the behavior of the easymotion.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:pre-hook expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Code to run before the easymotion executes. &lt;code&gt;expr&lt;/code&gt; may either be an (optionally sharp) quoted function name, a lambda, or a bare sexp, which is implictly wrapped in a lambda.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:post-hook expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Like &lt;code&gt;:pre-hook expr&lt;/code&gt;, but code is run after the motion finishes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:bind forms&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A list of forms to bind around the entire easymotion. &lt;code&gt;forms&lt;/code&gt; may be any bindings accepted by &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/cl/Modify-Macros.html&#34;&gt;&lt;code&gt;cl-letf*&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:scope object&lt;/code&gt;&lt;/p&gt; &lt;p&gt;An object to limit the scope of an easymotion. &lt;code&gt;object&lt;/code&gt; may be any &lt;em&gt;thing&lt;/em&gt; understood by &lt;code&gt;thing-at-point&lt;/code&gt;. In practice, &lt;code&gt;object&lt;/code&gt; will often be &lt;code&gt;&#39;line&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:all-windows expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;If &lt;code&gt;expr&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the motion will be executed in all visible windows simultaneously. Because evil motions do not make sense across windows, &lt;code&gt;evil-define-command&lt;/code&gt; is used instead of &lt;code&gt;evil-define-motion&lt;/code&gt; and &lt;code&gt;evil-normal-state-map&lt;/code&gt; is used instead of &lt;code&gt;evil-motion-state-map&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:initial-position callable&lt;/code&gt;&lt;/p&gt; &lt;p&gt;When specified, &lt;code&gt;(goto-char (funcall callable))&lt;/code&gt; is run before the motion is executed. For example, use this to jump to the BOL of each line as in easymotion with &lt;code&gt;:initial-position #&#39;point-at-bol&lt;/code&gt;. Unlike in &lt;code&gt;:pre-hook&lt;/code&gt;, &lt;code&gt;callable&lt;/code&gt; is run once per window when &lt;code&gt;:all-windows&lt;/code&gt; is specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:push-jump expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;When &lt;code&gt;expr&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the motion will push to the &lt;code&gt;evil&lt;/code&gt; jump list before jumping. This defaults to &lt;code&gt;t&lt;/code&gt; when the motion is un&lt;code&gt;:scope&lt;/code&gt;ed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:collect-postprocess callable&lt;/code&gt;&lt;/p&gt; &lt;p&gt;When specified, &lt;code&gt;callable&lt;/code&gt; is called on the collected list of points (which is of the form &lt;code&gt;((point window)...)&lt;/code&gt;). Otherwise, the default function, which sorts the points in order of increasing distance from &lt;code&gt;(point)&lt;/code&gt;, is used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:include-invisible expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;When &lt;code&gt;expr&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the motion will not skip over invisible overlays. This may be required for motions that generate dramatically different sets of points if they are started at different locations. This defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;m deeply indebted to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abo-abo&#34;&gt;abo-abo&lt;/a&gt; for authoring &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;&lt;code&gt;avy&lt;/code&gt;&lt;/a&gt;, on which this package depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lokaltog&#34;&gt;Lokaltog&lt;/a&gt; for authoring &lt;a href=&#34;https://github.com/Lokaltog/vim-easymotion&#34;&gt;&lt;code&gt;vim-easymotion&lt;/code&gt;&lt;/a&gt; and creating the paradigm which this package emulates.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Bad-ptr/persp-mode.el</title>
    <updated>2022-08-07T02:07:21Z</updated>
    <id>tag:github.com,2022-08-07:/Bad-ptr/persp-mode.el</id>
    <link href="https://github.com/Bad-ptr/persp-mode.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;named perspectives(set of buffers/window configs) for emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;persp-mode&lt;/h1&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;Perspectives for emacs, based on the &lt;a href=&#34;http://github.com/nex3/perspective-el&#34;&gt;&lt;code&gt;perspective-el&lt;/code&gt;&lt;/a&gt; by Natalie Weizenbaum.&lt;br&gt; But perspectives are shared among frames + ability to save/restore its state from/to a file.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The persp-mode is available from the &lt;a href=&#34;https://github.com/milkypostman/melpa&#34;&gt;&lt;code&gt;MELPA&lt;/code&gt;&lt;/a&gt;. So if you use this repo then the installation is easy:&lt;br&gt; &lt;code&gt;M-x: package-install RET persp-mode RET&lt;/code&gt;&lt;br&gt; Alternatively you can download the persp-mode.el from &lt;a href=&#34;https://github.com/Bad-ptr/persp-mode.el&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt; and install it as a package:&lt;br&gt; &lt;code&gt;M-x: package-install-file RET &#39;path_to_where_you_saved_persp-mode.el&#39; RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another(oldschool) way:&lt;br&gt; Place the persp-mode.el file somewhere in the emacs&#39; load-path and add &lt;code&gt;(require &#39;persp-mode) (persp-mode 1)&lt;/code&gt; to your configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;Suggested configuration&lt;/h3&gt; &#xA;&lt;p&gt;If you use the &lt;a href=&#34;https://github.com/tlh/workgroups.el&#34;&gt;&lt;code&gt;workgroups.el&lt;/code&gt;&lt;/a&gt; (note that workgroups sometimes do a better job restoring window configurations than standard emacs mechanism) it is a good idea to switch off the restore windows animation.&lt;br&gt; (it&#39;s clashing with the &lt;a href=&#34;https://github.com/roman/golden-ratio.el&#34;&gt;&lt;code&gt;golden-ratio-mode&lt;/code&gt;&lt;/a&gt; for example, sometimes erring when creating new frames and it is slow on remote network connections.)&lt;br&gt; You can do it with: &lt;code&gt;(setq wg-morph-on nil)&lt;/code&gt;.&lt;br&gt; If you want buffers to be killed after they were removed from perspectives, see the &lt;code&gt;persp-autokill-buffer-on-remove&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h4&gt;When installing with package-install&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode-autoloads&#34;&#xA;      (setq wg-morph-on nil) ;; switch off animation&#xA;      (setq persp-autokill-buffer-on-remove &#39;kill-weak)&#xA;      (add-hook &#39;window-setup-hook #&#39;(lambda () (persp-mode 1))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;When installing without generation of autoloads&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (setq wg-morph-on nil)&#xA;      (setq persp-autokill-buffer-on-remove &#39;kill-weak)&#xA;      (add-hook &#39;window-setup-hook #&#39;(lambda () (persp-mode 1))))&#xA;    (require &#39;persp-mode)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run emacs &amp;lt;= 24.3 the macro &lt;code&gt;with-eval-after-load&lt;/code&gt; is not defined. Here is the definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (unless (fboundp &#39;with-eval-after-load)&#xA;      (defmacro with-eval-after-load (file &amp;amp;rest body)&#xA;        (declare (indent 1) (debug t))&#xA;        `(eval-after-load ,file &#39;(progn ,@body))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Ability to save/restore window configurations from/to a file for emacs &amp;lt; 24.4 depends on the &lt;a href=&#34;https://github.com/tlh/workgroups.el&#34;&gt;&lt;code&gt;workgroups.el&lt;/code&gt;&lt;/a&gt; which also available from &lt;a href=&#34;https://github.com/milkypostman/melpa&#34;&gt;&lt;code&gt;MELPA&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Keys&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt; -- next perspective.&lt;br&gt; &lt;code&gt;p&lt;/code&gt; -- previous perspective.&lt;br&gt; &lt;code&gt;s&lt;/code&gt; -- create/switch to perspective.&lt;br&gt; &lt;code&gt;S&lt;/code&gt; -- create/switch to perspective in a window.&lt;br&gt; &lt;code&gt;r&lt;/code&gt; -- rename perspective.&lt;br&gt; &lt;code&gt;c&lt;/code&gt; -- copy perspective.&lt;br&gt; &lt;code&gt;C&lt;/code&gt; -- kill perspective(killing the &#39;nil&#39; perspective will kill all buffers). With prefix argument will not kill perspective&#39;s buffers.&lt;br&gt; &lt;code&gt;a&lt;/code&gt; -- add buffer to perspective. With prefix argument reverses the effect of the &lt;code&gt;persp-switch-to-added-buffer&lt;/code&gt;.&lt;br&gt; &lt;code&gt;b&lt;/code&gt; -- switch to buffer in perspective.&lt;br&gt; &lt;code&gt;t&lt;/code&gt; -- switch to buffer without adding it to perspective. With prefix argument allows to remove a buffer from perspective without killing and switching to another buffer.&lt;br&gt; &lt;code&gt;i&lt;/code&gt; -- import buffers from perspective.&lt;br&gt; &lt;code&gt;I&lt;/code&gt; -- import window configuration from perspecive.&lt;br&gt; &lt;code&gt;k&lt;/code&gt; -- remove buffer from perspective. With prefix argument reverses the effect of the &lt;code&gt;persp-autokill-buffer-on-remove&lt;/code&gt;.&lt;br&gt; &lt;code&gt;K&lt;/code&gt; -- kill buffer.&lt;br&gt; &lt;code&gt;w&lt;/code&gt; -- save perspectives to file.&lt;br&gt; &lt;code&gt;W&lt;/code&gt; -- save perspectives subset to file.&lt;br&gt; &lt;code&gt;l&lt;/code&gt; -- load perspectives from file.&lt;br&gt; &lt;code&gt;L&lt;/code&gt; -- load perspectives subset from file.&lt;br&gt; &lt;code&gt;o&lt;/code&gt; -- switch off persp-mode (you can quickly switch off persp-mode after emacs start and before autoresuming previous perspectives state if you only need to edit a single file).&lt;/p&gt; &#xA;&lt;p&gt;These key sequences must follow the &lt;code&gt;persp-keymap-prefix&lt;/code&gt; which you can customize (by default it is &lt;code&gt;C-c p&lt;/code&gt;), so if you want to invoke the &amp;lt; &lt;code&gt;s&lt;/code&gt; - create/switch perspective &amp;gt; command you must first type the prefix(&lt;code&gt;C-c p&lt;/code&gt;) and then &lt;code&gt;s&lt;/code&gt; (full sequence is &lt;code&gt;C-c p s&lt;/code&gt;).&lt;br&gt; If you want to bind a new key for persp-mode, use &lt;code&gt;persp-key-map&lt;/code&gt;:&lt;br&gt; &lt;code&gt;(define-key persp-key-map (kbd ...) ...)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you kill a buffer with &lt;code&gt;C-x k&lt;/code&gt;(kill-buffer command) it will be killed only if it belongs to a single perspective, otherwise it&#39;ll be only removed from the current perspective and not killed.&lt;br&gt; But if you kill a buffer from the &#39;none&#39;(nil) perspective -- it will be removed from all perspectives and then killed.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x: customize-group RET persp-mode RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom save/load buffer function example&lt;/h2&gt; &#xA;&lt;p&gt;Suppose you want to save the &lt;code&gt;*ielm*&lt;/code&gt;(M-x ielm RET -- elisp repl) buffers.&lt;br&gt; Then the save function would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (lambda (b)&#xA;      (with-current-buffer b&#xA;        (when (string= major-mode &#34;inferior-emacs-lisp-mode&#34;)&#xA;          `(def-ielm-buffer ,(buffer-name) ,default-directory))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must prepend that function to the &lt;code&gt;persp-save-buffer-functions&lt;/code&gt; list (before the standard filtering functions because it filters buffers starting with the &#39;*&#39;).&lt;/p&gt; &#xA;&lt;p&gt;The load function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (lambda (savelist)&#xA;      (when (eq (car savelist) &#39;def-ielm-buffer)&#xA;        (with-current-buffer (get-buffer-create (cadr savelist))&#xA;          (setq default-directory (caddr savelist))&#xA;          (require &#39;ielm)&#xA;          (inferior-emacs-lisp-mode))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add load function to the &lt;code&gt;persp-load-buffer-functions&lt;/code&gt; list.&lt;br&gt; That&#39;s it. Now the persp-mode can save and restore ielm buffers.&lt;/p&gt; &#xA;&lt;p&gt;Python shell example:&lt;br&gt; &lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-inferior-python-save-load-el&#34;&gt;gist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also you can use the &lt;code&gt;persp-def-buffer-save/load&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    ;; eshell&#xA;    (persp-def-buffer-save/load&#xA;     :mode &#39;eshell-mode :tag-symbol &#39;def-eshell-buffer&#xA;     :save-vars &#39;(major-mode default-directory))&#xA;&#xA;    ;; compile&#xA;    (persp-def-buffer-save/load&#xA;     :mode &#39;compilation-mode :tag-symbol &#39;def-compilation-buffer&#xA;     :save-vars &#39;(major-mode default-directory compilation-directory&#xA;                             compilation-environment compilation-arguments))&#xA;&#xA;    ;; magit-status&#xA;    (with-eval-after-load &#34;magit-autoloads&#34;&#xA;      (autoload &#39;magit-status-mode &#34;magit&#34;)&#xA;      (autoload &#39;magit-refresh &#34;magit&#34;)&#xA;      (persp-def-buffer-save/load&#xA;       :mode &#39;magit-status-mode :tag-symbol &#39;def-magit-status-buffer&#xA;       :save-vars &#39;(major-mode default-directory)&#xA;       :after-load-function #&#39;(lambda (b &amp;amp;rest _)&#xA;                                (with-current-buffer b (magit-refresh)))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;switch-to-buffer, display-buffer hook, and other advices&lt;/h2&gt; &#xA;&lt;p&gt;Some time ago there were switch-to-buffer and display-buffer advices in the persp-mode. If you still need them, I can suggest you a way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (defvar after-switch-to-buffer-functions nil)&#xA;      (defvar after-display-buffer-functions nil)&#xA;&#xA;      (if (fboundp &#39;advice-add)&#xA;          ;;Modern way&#xA;          (progn&#xA;            (defun after-switch-to-buffer-adv (&amp;amp;rest r)&#xA;              (apply #&#39;run-hook-with-args &#39;after-switch-to-buffer-functions r))&#xA;            (defun after-display-buffer-adv (&amp;amp;rest r)&#xA;              (apply #&#39;run-hook-with-args &#39;after-display-buffer-functions r))&#xA;            (advice-add #&#39;switch-to-buffer :after #&#39;after-switch-to-buffer-adv)&#xA;            (advice-add #&#39;display-buffer   :after #&#39;after-display-buffer-adv))&#xA;&#xA;        ;;Old way&#xA;        (defadvice switch-to-buffer (after after-switch-to-buffer-adv)&#xA;          (run-hook-with-args &#39;after-switch-to-buffer-functions (ad-get-arg 0)))&#xA;        (defadvice display-buffer (after after-display-buffer-adv)&#xA;          (run-hook-with-args &#39;after-display-buffer-functions (ad-get-arg 0)))&#xA;        (ad-enable-advice #&#39;switch-to-buffer &#39;after &#39;after-switch-to-buffer-adv)&#xA;        (ad-enable-advice #&#39;display-buffer &#39;after &#39;after-display-buffer-adv)&#xA;        (ad-activate #&#39;switch-to-buffer)&#xA;        (ad-activate #&#39;display-buffer)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that you can add functions to &lt;code&gt;after-switch-to-buffer-functions&lt;/code&gt; and &lt;code&gt;after-display-buffer-functions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (add-hook &#39;after-switch-to-buffer-functions&#xA;        #&#39;(lambda (bn) (when (and persp-mode&#xA;                                  (not persp-temporarily-display-buffer))&#xA;                         (persp-add-buffer bn))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set persp-add-buffer-on-after-change-major-mode to auto-add more buffers&lt;/h2&gt; &#xA;&lt;p&gt;Buffers end up in a perspective after you manually add them or more often automatically when &lt;code&gt;find-file-hook&lt;/code&gt; fires. This works well for buffers that visit a file, but not every buffer does. E.g. buffers created by Dired won&#39;t trigger &lt;code&gt;find-file-hook&lt;/code&gt; and won&#39;t be added to current perspective. If you discover that some buffers you&#39;d expect are missing you may be able to get the desired behavior by effecting &lt;code&gt;after-change-major-mode-hook&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    ;; see documentation for other possible values&#xA;    (setq persp-add-buffer-on-after-change-major-mode t)&#xA;&#xA;    ;; above setting will not discriminate and bring ephemeral buffers e.g.&#xA;    ;; *magit* which you probably don&#39;t want. You can filter them out.&#xA;    (add-hook &#39;persp-common-buffer-filter-functions&#xA;    ;; there is also `persp-add-buffer-on-after-change-major-mode-filter-functions&#39;&#xA;        #&#39;(lambda (b) (string-prefix-p &#34;*&#34; (buffer-name b))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Auto perspectives&lt;/h2&gt; &#xA;&lt;p&gt;You can now define an auto perspective using the &lt;code&gt;persp-def-auto-persp&lt;/code&gt; function.&lt;br&gt; This kind of perspective is intended to be dynamically created/destroyed/hided/unhided when a specific kind of buffers appears/disappears.&lt;/p&gt; &#xA;&lt;p&gt;The argument list of the &lt;code&gt;persp-def-auto-persp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;The first argument is a string which will serve as a name for the auto perspective.&lt;/p&gt; &#xA;&lt;p&gt;Other arguments is a key - value pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:buffer-name&lt;/code&gt; -- regexp to match against a name of a buffer.&lt;br&gt; &lt;code&gt;:file-name&lt;/code&gt; -- regexp to match against a filename of the buffer.&lt;br&gt; &lt;code&gt;:mode&lt;/code&gt; -- symbol to compare with the major-mode of the buffer.&lt;br&gt; &lt;code&gt;:mode-name&lt;/code&gt; -- regexp to compare against mode-name of the buffer.&lt;br&gt; &lt;code&gt;:minor-mode&lt;/code&gt; -- check if a minor mode is active for the buffer.&lt;br&gt; &lt;code&gt;:minor-mode-name&lt;/code&gt; -- check if minor mode with name matching this regexp is active for the buffer.&lt;br&gt; &lt;code&gt;:predicate&lt;/code&gt; -- function to check if the buffer is a good one(return nil if not).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:hooks&lt;/code&gt; -- a list of hooks (or symbol) to which you want to add checks.&lt;br&gt; &lt;code&gt;persp-def-auto-persp&lt;/code&gt; tries to be smart about hooks to which it&#39;ll add checks , but sometimes you need more control.&lt;br&gt; &lt;code&gt;:dyn-env&lt;/code&gt; -- the list of variables and values to dynamically bind when the checks and action takes place. The format is the same as in the &lt;code&gt;let&lt;/code&gt; form.&lt;br&gt; &lt;code&gt;:get-name&lt;/code&gt; -- function to get a perspecive name.&lt;br&gt; &lt;code&gt;:get-buffer&lt;/code&gt; -- function to get the buffer.&lt;br&gt; &lt;code&gt;:get-persp&lt;/code&gt; -- function to get the perspective.&lt;br&gt; &lt;code&gt;:switch&lt;/code&gt; -- how to switch to the auto perspective: &lt;code&gt;nil&lt;/code&gt; -- do not switch, &lt;code&gt;&#39;window&lt;/code&gt; -- switch in window, &lt;code&gt;&#39;frame&lt;/code&gt; -- switch for frame.&lt;br&gt; &lt;code&gt;:parameters&lt;/code&gt; -- list of parameters for perspective(see the &lt;code&gt;modify-persp-parameters&lt;/code&gt; function).&lt;br&gt; &lt;code&gt;:noauto&lt;/code&gt; -- if non nil then do not set the auto field of the perspective.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:on-match&lt;/code&gt; -- function to run when the buffer passed all checks, instead of standard actions(create/get perspective, add buffer to it).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:after-match&lt;/code&gt; -- function to run after the buffer has passed all checks and standard or custom action finished their work.&lt;/p&gt; &#xA;&lt;p&gt;All function parameters must accept a single argument -- the current &lt;code&gt;state&lt;/code&gt; and must return a new &lt;code&gt;state&lt;/code&gt;(which can be the old &lt;code&gt;state&lt;/code&gt;). Where the &lt;code&gt;state&lt;/code&gt; is the association list which initially contains all key-value arguments that were passed to the &lt;code&gt;persp-def-auto-persp&lt;/code&gt;. The standard &lt;code&gt;:get-name&lt;/code&gt; puts &lt;code&gt;&#39;persp-name&lt;/code&gt; cell to the state, the standard &lt;code&gt;get-buffer&lt;/code&gt; puts &lt;code&gt;&#39;buffer&lt;/code&gt;, standard &lt;code&gt;:get-persp&lt;/code&gt; adds &lt;code&gt;&#39;persp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However the &lt;code&gt;:predicate&lt;/code&gt; function parameter is different -- it must accept a buffer as the first argument and the &lt;code&gt;state&lt;/code&gt; as the second argument and the &lt;code&gt;state&lt;/code&gt; argument is optional. If the &lt;code&gt;state&lt;/code&gt; argument is non &lt;code&gt;nil&lt;/code&gt; then the predicate must return a new state if the buffer satisfies that predicate. If the &lt;code&gt;state&lt;/code&gt; argument is &lt;code&gt;nil&lt;/code&gt; then it can return anything non &lt;code&gt;nil&lt;/code&gt; if the buffer satisfies the predicate. If the buffer is not satisfies the predicate it must return nil regardless of the &lt;code&gt;state&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;Only the name string(first argument) is required. All other arguments may be omitted or combined in any way you like.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;persp-def-auto-persp&lt;/code&gt; function creates an auto persp definition and adds it to the &lt;code&gt;persp-auto-persp-alist&lt;/code&gt;. If a definition with same name already exists it will be replaced. If you want to delete a definition pass &lt;code&gt;t&lt;/code&gt; as the &lt;code&gt;:delete&lt;/code&gt; parameter.&lt;br&gt; Unless you pass &lt;code&gt;t&lt;/code&gt; as the &lt;code&gt;:dont-pick-up-buffers&lt;/code&gt; argument all existing buffers will be checked against the new auto persp definition.&lt;/p&gt; &#xA;&lt;p&gt;Example of usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode-autoload&#34;&#xA;      (with-eval-after-load &#34;dired&#34;&#xA;        (persp-def-auto-persp &#34;dired&#34;&#xA;          :parameters &#39;((dont-save-to-file . t))&#xA;          :mode &#39;dired-mode&#xA;          :dyn-env &#39;(after-switch-to-buffer-functions ;; prevent recursion&#xA;                     (persp-add-buffer-on-find-file nil)&#xA;                     persp-add-buffer-on-after-change-major-mode)&#xA;          :hooks &#39;(after-switch-to-buffer-functions)&#xA;          :switch &#39;window)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-projectile-auto-persp-el&#34;&gt;persp-projectile-auto-persp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interaction with side packages&lt;/h2&gt; &#xA;&lt;h3&gt;Buffer lists&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;code&gt;persp-hook-up-emacs-buffer-completion&lt;/code&gt; variable if you want the &lt;code&gt;persp-mode&lt;/code&gt; to try to restrict buffer lists completion for emacs commands commands.&lt;br&gt; Also you can bind &lt;code&gt;persp-switch-to-buffer&lt;/code&gt; and &lt;code&gt;persp-kill-buffer&lt;/code&gt; to default keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (global-set-key (kbd &#34;C-x b&#34;) #&#39;persp-switch-to-buffer)&#xA;      (global-set-key (kbd &#34;C-x k&#34;) #&#39;persp-kill-buffer))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (substitute-key-definition #&#39;switch-to-buffer #&#39;persp-switch-to-buffer global-map)&#xA;      (substitute-key-definition #&#39;kill-buffer #&#39;persp-kill-buffer global-map))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Universal&lt;/h4&gt; &#xA;&lt;p&gt;This must work for most buffer listing commands that internally use the &lt;code&gt;buffer-list&lt;/code&gt; function, just wrap &#39;your function&#39; with the &lt;code&gt;with-persp-buffer-list&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-persp-buffer-list () (your-function))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;with-persp-read-buffer&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;h5&gt;bs-show&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (global-set-key (kbd &#34;C-x b&#34;) #&#39;(lambda (arg)&#xA;                                      (interactive &#34;P&#34;)&#xA;                                      (with-persp-buffer-list () (bs-show arg))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;ibuffer&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (global-set-key (kbd &#34;C-x b&#34;) #&#39;(lambda (arg)&#xA;                                      (interactive &#34;P&#34;)&#xA;                                      (with-persp-buffer-list () (ibuffer arg))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is something ibuffer-specific: &lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-mode-ibuffer-groups-el&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ido&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x customize-variable RET persp-set-ido-hooks RET&lt;/code&gt;&lt;br&gt; There is also the &lt;code&gt;with-persp-ido-hooks&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;p&gt;You can set the &lt;code&gt;persp-interactive-completion-function&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (with-eval-after-load &#34;persp-mode&#34;&#xA;      (setq persp-interactive-completion-function #&#39;ido-completing-read))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or just use the &lt;a href=&#34;https://github.com/DarwinAwardWinner/ido-ubiquitous&#34;&gt;ido-ubiquitous-mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;iswitchb&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-iswitchb-el&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ivy&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-ivy-el&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;helm&lt;/h4&gt; &#xA;&lt;p&gt;(Note that &lt;code&gt;helm-buffer-list&lt;/code&gt;, &lt;code&gt;helm-mini&lt;/code&gt; are using &lt;code&gt;ido&lt;/code&gt;&#39;s &lt;code&gt;ido-make-buffer-list&lt;/code&gt; internally).&lt;br&gt; Buffer filtering support: &lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-helm-persp-bridge-el&#34;&gt;gist#1&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-helm-persp-bridge-v2-el&#34;&gt;gist#2&lt;/a&gt;.&lt;br&gt; Also, you can take a look at &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt; , and especially &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/raw/master/layers/%2Bspacemacs/spacemacs-layouts/funcs.el&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Projectile&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Bad-ptr/persp-mode-projectile-bridge.el&#34;&gt;persp-mode-projectile-bridge.el&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;multi-term&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-multi-term-el&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Speedbar&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (add-to-list &#39;speedbar-frame-parameters (cons &#39;persp-ignore-wconf t))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Olivetti&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-olivetti-el&#34;&gt;gist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hints&lt;/h2&gt; &#xA;&lt;h3&gt;Changing the order of the perspectives(how it looks when you are prompted for a perspective name(s)):&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;code&gt;C-h v persp-names-cache RET&lt;/code&gt;.&lt;br&gt; You can manually edit the order of the perspectives by editing the &lt;code&gt;persp-names-cache&lt;/code&gt; variable using &lt;a href=&#34;https://github.com/emacsmirror/edit-list&#34;&gt;&lt;code&gt;edit-list&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/Wilfred/refine&#34;&gt;&lt;code&gt;refine&lt;/code&gt;&lt;/a&gt; packages.&lt;/p&gt; &#xA;&lt;h4&gt;Keep most recently used perspectives on top&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-mru-el&#34;&gt;gist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Launch Emacs to quickly edit a file without perspectives loading/saving&lt;/h3&gt; &#xA;&lt;p&gt;If you often launch emacs to edit a single file and you don&#39;t want to wait the persp-mode resuming process(and don&#39;t want to use the emacs daemon) -- you can create a script like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#xA;    #!/bin/bash&#xA;    emacs --eval &#39;(setq persp-auto-resume-time -1.0 persp-auto-save-opt 0)&#39; $@;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;call it editor.sh, save somewhere in the $PATH, and add &lt;code&gt;export EDITOR=&#34;editor.sh&#34;&lt;/code&gt; to your .bashrc.&lt;br&gt; Or add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (add-to-list &#39;command-switch-alist&#xA;                   (cons &#34;persp-q&#34;&#xA;                         #&#39;(lambda (p)&#xA;                             (setq persp-auto-resume-time -1&#xA;                                   persp-auto-save-opt 0))))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To your emacs config. Then the editor.sh would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#xA;    #!/bin/bash&#xA;    emacs -persp-q $@;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Troubles&lt;/h2&gt; &#xA;&lt;p&gt;If you updated or changed something or simply something goes wrong don&#39;t warry to lose/overwrite perspectives&#39; state, remember that the persp-mode makes backups in `persp-save-dir&#39; for you(3 previous states by default).&lt;/p&gt; &#xA;&lt;p&gt;When you create a new frame(with &lt;code&gt;emacsclient -c&lt;/code&gt; for example) the selected window of the created frame is switching to the &lt;code&gt;*scratch*&lt;/code&gt; buffer. This behaviour is fixed in the emacs version &amp;gt;= 24.4(and in current emacs trunk). Alternatively you can save the &lt;code&gt;server.el&lt;/code&gt; from &lt;code&gt;/usr/share/emacs/${your_emacs_version_number}/lisp/&lt;/code&gt; (or from source tree, or from somewhere else) to a directory in your &lt;code&gt;load-path&lt;/code&gt; and edit it like that (this works for emacs 24.3 at least):&lt;br&gt; replace&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (unless (or files commands)&#xA;      (if (stringp initial-buffer-choice)&#xA;          (find-file initial-buffer-choice)&#xA;        (switch-to-buffer (get-buffer-create &#34;*scratch*&#34;)&#xA;                          &#39;norecord)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;    (unless (or files commands)&#xA;      (let ((buf&#xA;             (cond ((stringp initial-buffer-choice)&#xA;                    (find-file-noselect initial-buffer-choice))&#xA;                   ((functionp initial-buffer-choice)&#xA;                    (funcall initial-buffer-choice)))))&#xA;        (switch-to-buffer&#xA;         (if (buffer-live-p buf) buf (get-buffer-create &#34;*scratch*&#34;))&#xA;         &#39;norecord)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and set the &lt;code&gt;persp-is-ibc-as-f-supported&lt;/code&gt; variable to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abo-abo/swiper</title>
    <updated>2022-08-07T02:07:21Z</updated>
    <id>tag:github.com,2022-08-07:/abo-abo/swiper</id>
    <link href="https://github.com/abo-abo/swiper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, man!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/abo-abo/swiper/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/abo-abo/swiper/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;flexible, simple tools for minibuffer completion in Emacs&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ivy&lt;/strong&gt;, a generic completion mechanism for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Counsel&lt;/strong&gt;, a collection of Ivy-enhanced versions of common Emacs commands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swiper&lt;/strong&gt;, an Ivy-enhanced alternative to Isearch.&lt;/p&gt; &#xA;&lt;h1&gt;Ivy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/devel/ivy.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/ivy.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/ivy.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/ivy.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/ivy&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/ivy-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/ivy&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/ivy-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ivy is a generic completion mechanism for Emacs. While it operates similarly to other completion schemes such as &lt;code&gt;icomplete-mode&lt;/code&gt;, Ivy aims to be more efficient, smaller, simpler, and smoother to use yet highly customizable.&lt;/p&gt; &#xA;&lt;p&gt;To try Ivy, just call &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;ivy-mode&lt;/code&gt;. This will enable generic Ivy completion, including specific completion for file and buffer names.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;ivy&lt;/code&gt; package from GNU ELPA or MELPA.&lt;/p&gt; &#xA;&lt;p&gt;Users of Debian ‚â•10 (and derivatives such as Ubuntu ‚â•18.04) can install Ivy, Counsel, and Swiper with &lt;code&gt;sudo apt install elpa-counsel&lt;/code&gt;. To add Hydra support &lt;code&gt;sudo apt install elpa-ivy-hydra&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;The manual is available as &lt;a href=&#34;https://oremacs.com/swiper/&#34;&gt;HTML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Installing &lt;code&gt;ivy&lt;/code&gt; from GNU ELPA or MELPA also installs the manual under the &lt;code&gt;(ivy)&lt;/code&gt; Info node.&lt;/p&gt; &#xA;&lt;p&gt;The source file for the Info page is &lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/swiper/master/doc/ivy.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Wiki&lt;/h3&gt; &#xA;&lt;p&gt;Ivy and Swiper wiki is here: &lt;a href=&#34;https://github.com/abo-abo/swiper/wiki&#34;&gt;the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Small config example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(ivy-mode)&#xA;(setq ivy-use-virtual-buffers t)&#xA;(setq enable-recursive-minibuffers t)&#xA;;; enable this if you want `swiper&#39; to use it&#xA;;; (setq search-default-mode #&#39;char-fold-to-regexp)&#xA;(global-set-key &#34;\C-s&#34; &#39;swiper)&#xA;(global-set-key (kbd &#34;C-c C-r&#34;) &#39;ivy-resume)&#xA;(global-set-key (kbd &#34;&amp;lt;f6&amp;gt;&#34;) &#39;ivy-resume)&#xA;(global-set-key (kbd &#34;M-x&#34;) &#39;counsel-M-x)&#xA;(global-set-key (kbd &#34;C-x C-f&#34;) &#39;counsel-find-file)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; f&#34;) &#39;counsel-describe-function)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; v&#34;) &#39;counsel-describe-variable)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; o&#34;) &#39;counsel-describe-symbol)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; l&#34;) &#39;counsel-find-library)&#xA;(global-set-key (kbd &#34;&amp;lt;f2&amp;gt; i&#34;) &#39;counsel-info-lookup-symbol)&#xA;(global-set-key (kbd &#34;&amp;lt;f2&amp;gt; u&#34;) &#39;counsel-unicode-char)&#xA;(global-set-key (kbd &#34;C-c g&#34;) &#39;counsel-git)&#xA;(global-set-key (kbd &#34;C-c j&#34;) &#39;counsel-git-grep)&#xA;(global-set-key (kbd &#34;C-c k&#34;) &#39;counsel-ag)&#xA;(global-set-key (kbd &#34;C-x l&#34;) &#39;counsel-locate)&#xA;(global-set-key (kbd &#34;C-S-o&#34;) &#39;counsel-rhythmbox)&#xA;(define-key minibuffer-local-map (kbd &#34;C-r&#34;) &#39;counsel-minibuffer-history)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: parts of this config can be replaced by using &lt;code&gt;counsel-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Counsel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/devel/counsel.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/counsel.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/counsel.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/counsel.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/counsel&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/counsel-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/counsel&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/counsel-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ivy-mode&lt;/code&gt; ensures that any Emacs command using &lt;code&gt;completing-read-function&lt;/code&gt; uses ivy for completion.&lt;/p&gt; &#xA;&lt;p&gt;Counsel takes this further, providing versions of common Emacs commands that are customised to make the best use of Ivy. For example, &lt;code&gt;counsel-find-file&lt;/code&gt; has some additional keybindings. Pressing &lt;kbd&gt;DEL&lt;/kbd&gt; will move you to the parent directory.&lt;/p&gt; &#xA;&lt;p&gt;Enabling &lt;code&gt;counsel-mode&lt;/code&gt; remaps built-in Emacs functions that have counsel replacements:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Emacs command&lt;/th&gt; &#xA;   &lt;th&gt;Counsel equivalent&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;execute-extended-command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-M-x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-bindings&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-descbinds&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-describe-function&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-variable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-describe-variable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apropos-command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-apropos&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-face&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-describe-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list-faces-display&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-faces&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;find-file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-find-file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;find-library&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-find-library&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;imenu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-imenu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;load-library&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-load-library&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;load-theme&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-load-theme&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yank-pop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-yank-pop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;info-lookup-symbol&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-info-lookup-symbol&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pop-to-mark-command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-mark-ring&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bookmark-jump&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-bookmark&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Swiper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/devel/swiper.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/swiper.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/swiper.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/swiper.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/swiper&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/swiper-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/swiper&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/swiper-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swiper is an alternative to isearch that uses Ivy to show an overview of all matches.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oremacs.com/download/swiper.png&#34; alt=&#34;swiper.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Helm version of Swiper is also available: &lt;a href=&#34;https://github.com/abo-abo/swiper-helm&#34;&gt;swiper-helm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oremacs.com/download/ivy-swiper-1.png&#34; alt=&#34;ivy-swiper-1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a ten minute &lt;a href=&#34;https://www.youtube.com/watch?v=VvnJQpTFVDc&#34;&gt;video demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Frequently asked questions&lt;/h1&gt; &#xA;&lt;p&gt;Q: How do I enter an input that matches one of the candidates instead of this candidate? Example: create a file &lt;code&gt;bar&lt;/code&gt; when a file &lt;code&gt;barricade&lt;/code&gt; exists in the current directory.&lt;/p&gt; &#xA;&lt;p&gt;A: Press &lt;kbd&gt;C-M-j&lt;/kbd&gt;. Alternatively, you can make the prompt line selectable with &lt;code&gt;(setq ivy-use-selectable-prompt t)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/swiper/master/CONTRIBUTING.org&#34;&gt;guidelines&lt;/a&gt; for reporting issues and opening pull requests.&lt;/p&gt;</summary>
  </entry>
</feed>