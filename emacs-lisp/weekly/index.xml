<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:53:57Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-straight/vertico</title>
    <updated>2023-08-27T01:53:57Z</updated>
    <id>tag:github.com,2023-08-27:/emacs-straight/vertico</id>
    <link href="https://github.com/emacs-straight/vertico" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the vertico package from GNU ELPA, current as of 2023-08-27&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: vertico.el - VERTical Interactive COmpletion #+author: Daniel Mendler #+language: en #+export_file_name: vertico.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Vertico: (vertico). #+texinfo_dir_desc: VERTical Interactive COmpletion.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/packages/vertico.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/devel/vertico.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/vertico.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Vertigomovie_restoration.jpg/800px-Vertigomovie_restoration.jpg&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. The focus of Vertico is to provide a UI which behaves /correctly/ under all circumstances. By reusing the built-in facilities system, Vertico achieves /full compatibility/ with built-in Emacs completion commands and completion tables. Vertico only provides the completion UI but aims to be highly flexible, extendable and modular. Additional enhancements are available as [[#extensions][extensions]] or [[#complementary-packages][complementary packages]]. The code base is small and maintainable. The main &lt;del&gt;vertico.el&lt;/del&gt; package is only about 600 lines of code without white space and comments.&lt;/p&gt; &#xA;&lt;p&gt;#+toc: headlines 8&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertical display with arrow key navigation. See the [[#extensions][extensions]] for additional display modes.&lt;/li&gt; &#xA; &lt;li&gt;Prompt shows the current candidate index and the total number of candidates.&lt;/li&gt; &#xA; &lt;li&gt;The current candidate is inserted with =TAB= and selected with =RET=.&lt;/li&gt; &#xA; &lt;li&gt;Non-existing candidates can be submitted with =M-RET= or by moving the point to the prompt.&lt;/li&gt; &#xA; &lt;li&gt;Configurable sorting by history position, length and alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;Long candidates with newlines are formatted to take up less space.&lt;/li&gt; &#xA; &lt;li&gt;Deferred completion style highlighting for performance.&lt;/li&gt; &#xA; &lt;li&gt;Annotations are displayed next to the candidates (&lt;del&gt;annotation-&lt;/del&gt; and &lt;del&gt;affixation-function&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Support for candidate grouping and group cycling commands (&lt;del&gt;group-function&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-mx.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico defines its own local keymap in the minibuffer which is derived from &lt;del&gt;minibuffer-local-map&lt;/del&gt;. The keymap keeps most of the &lt;del&gt;fundamental-mode&lt;/del&gt; keybindings intact and remaps and binds only a handful of commands. Note in particular the binding of =TAB= to &lt;del&gt;vertico-insert&lt;/del&gt; and the bindings of &lt;del&gt;vertico-exit/exit-input&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;beginning-of-buffer&lt;/del&gt;, &lt;del&gt;minibuffer-beginning-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-first&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;end-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-last&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-down-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-down&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-up-command&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-scroll-up&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;next-line&lt;/del&gt;, &lt;del&gt;next-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;previous-line&lt;/del&gt;, &lt;del&gt;previous-line-or-history-element&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;forward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-next-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;backward-paragraph&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-previous-group&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;exit-minibuffer&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-exit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;kill-ring-save&lt;/del&gt; -&amp;gt; &lt;del&gt;vertico-save&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-RET= -&amp;gt; &lt;del&gt;vertico-exit-input&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=TAB= -&amp;gt; &lt;del&gt;vertico-insert&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is available from [[https://elpa.gnu.org/packages/vertico.html][GNU ELPA]]. You can install it directly via &lt;del&gt;package-install&lt;/del&gt;. After installation, you can activate the global minor mode with =M-x vertico-mode=. In order to configure Vertico and other packages in your init.el, you may want to take advantage of &lt;del&gt;use-package&lt;/del&gt;. Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico (use-package vertico :init (vertico-mode)&lt;/p&gt; &#xA;&lt;p&gt;;; Different scroll margin ;; (setq vertico-scroll-margin 0)&lt;/p&gt; &#xA;&lt;p&gt;;; Show more candidates ;; (setq vertico-count 20)&lt;/p&gt; &#xA;&lt;p&gt;;; Grow and shrink the Vertico minibuffer ;; (setq vertico-resize t)&lt;/p&gt; &#xA;&lt;p&gt;;; Optionally enable cycling for &lt;code&gt;vertico-next&#39; and &lt;/code&gt;vertico-previous&#39;. ;; (setq vertico-cycle t) )&lt;/p&gt; &#xA;&lt;p&gt;;; Persist history over Emacs restarts. Vertico sorts by history position. (use-package savehist :init (savehist-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; A few more useful configurations... (use-package emacs :init ;; Add prompt indicator to &lt;code&gt;completing-read-multiple&#39;. ;; We display [CRM&amp;lt;separator&amp;gt;], e.g., [CRM,] if the separator is a comma. (defun crm-indicator (args) (cons (format &#34;[CRM%s] %s&#34; (replace-regexp-in-string &#34;\\&lt;/code&gt;\[.&lt;em&gt;?]\&lt;/em&gt;\|\[.&lt;em&gt;?]\&lt;/em&gt;\&#39;&#34; &#34;&#34; crm-separator) (car args)) (cdr args))) (advice-add #&#39;completing-read-multiple :filter-args #&#39;crm-indicator)&lt;/p&gt; &#xA;&lt;p&gt;;; Do not allow the cursor in the minibuffer prompt (setq minibuffer-prompt-properties &#39;(read-only t cursor-intangible t face minibuffer-prompt)) (add-hook &#39;minibuffer-setup-hook #&#39;cursor-intangible-mode)&lt;/p&gt; &#xA;&lt;p&gt;;; Emacs 28: Hide commands in M-x which do not work in the current mode. ;; Vertico commands are hidden in normal buffers. ;; (setq read-extended-command-predicate ;; #&#39;command-completion-default-include-p)&lt;/p&gt; &#xA;&lt;p&gt;;; Enable recursive minibuffers (setq enable-recursive-minibuffers t)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;I recommend to give Orderless completion a try, which is different from the prefix TAB completion used by the basic default completion system or in shells.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Optionally use the `orderless&#39; completion style. (use-package orderless :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers &#39;(+orderless-consult-dispatch orderless-affix-dispatch) ;; orderless-component-separator #&#39;orderless-escapable-split-on-space) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles partial-completion))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. See the [[https://github.com/minad/consult/wiki#minads-orderless-configuration][Consult wiki]] for my advanced Orderless configuration with style dispatchers. Additionally enable =partial-completion= for file path expansion. =partial-completion= is important for file wildcard support in =find-file=. In order to open multiple files with a wildcard at once, you have to submit the prompt with =M-RET=. Alternative first move to the prompt and then press =RET=.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[https://github.com/minad/vertico/wiki][Vertico Wiki]] for additional configuration tips. For more general documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want to create your own completion commands, you can find documentation about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Completion styles and TAB completion&lt;/p&gt; &#xA;&lt;p&gt;The bindings of the &lt;del&gt;minibuffer-local-completion-map&lt;/del&gt; are not available in Vertico by default. This means that TAB works differently from what you may expect from shells like Bash or the default Emacs completion system.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to have the default completion commands a key press away you can add new bindings or even replace the Vertico bindings. Then the default completion commands behave as usual. For example you can use =M-TAB= to cycle between candidates if you have set &lt;del&gt;completion-cycle-threshold&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (keymap-set vertico-map &#34;?&#34; #&#39;minibuffer-completion-help) (keymap-set vertico-map &#34;M-RET&#34; #&#39;minibuffer-force-complete-and-exit) (keymap-set vertico-map &#34;M-TAB&#34; #&#39;minibuffer-complete) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;orderless&lt;/del&gt; completion style does not support completion of a common prefix substring, as you may be familiar with from shells or the basic default completion system. The reason is that the Orderless input string is usually not a prefix. In order to support completing prefixes you may want to combine &lt;del&gt;orderless&lt;/del&gt; with &lt;del&gt;substring&lt;/del&gt; in your =completion-styles= configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(substring orderless basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can use the built-in completion-styles, e.g., =partial-completion=, =flex= or =initials=. The =partial-completion= style is important if you want to open multiple files at once with &lt;del&gt;find-file&lt;/del&gt; using wildcards. In order to open multiple files with a wildcard at once, you have to submit the prompt with =M-RET=. Alternative first move to the prompt and then press =RET=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic substring partial-completion flex)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Because Vertico is fully compatible with Emacs default completion system, further customization of completion behavior can be achieved by setting the designated Emacs variables. For example, one may wish to disable case-sensitivity for file and buffer matching when built-in completion styles are used instead of &lt;del&gt;orderless&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq read-file-name-completion-ignore-case t read-buffer-completion-ignore-case t completion-ignore-case t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completion-at-point and completion-in-region&lt;/p&gt; &#xA;&lt;p&gt;The tab completion command =completion-at-point= command is usually bound to =M-TAB= or =TAB=. Tab completion is also used in the minibuffer by =M-:= (&lt;del&gt;eval-expression&lt;/del&gt;). In case you want to use Vertico to show the completion candidates of =completion-at-point= and =completion-in-region=, you can use the function &lt;del&gt;consult-completion-in-region&lt;/del&gt; provided by the Consult package.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You may also want to look into my [[https://github.com/minad/corfu][Corfu]] package, which provides a minimal completion system for =completion-in-region= in a child frame popup. Corfu is a narrowly focused package and developed in the same spirit as Vertico. You can even use Corfu in the minibuffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensions :properties: :custom_id: extensions &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We maintain small extension packages to Vertico in this repository in the subdirectory [[https://github.com/minad/vertico/tree/main/extensions][extensions/]]. The extensions are installed together with Vertico if you pull the package from ELPA. The extensions are inactive by default and can be enabled manually if desired. Furthermore it is possible to install all of the files separately, both &lt;del&gt;vertico.el&lt;/del&gt; and the &lt;del&gt;vertico-*.el&lt;/del&gt; extensions. Currently the following extensions come with the Vertico ELPA package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-buffer.el][vertico-buffer]]: =vertico-buffer-mode= to display Vertico in a separate buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-directory.el][vertico-directory]]: Commands for Ido-like directory navigation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-flat.el][vertico-flat]]: =vertico-flat-mode= to enable a flat, horizontal display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-grid.el][vertico-grid]]: =vertico-grid-mode= to enable a grid display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-indexed.el][vertico-indexed]]: =vertico-indexed-mode= to select indexed candidates with prefix arguments.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-mouse.el][vertico-mouse]]: =vertico-mouse-mode= to support for scrolling and candidate selection.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-multiform.el][vertico-multiform]]: Configure Vertico modes per command or completion category.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-quick.el][vertico-quick]]: Commands to select using Avy-style quick keys.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-repeat.el][vertico-repeat]]: The command =vertico-repeat= repeats the last completion session.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-reverse.el][vertico-reverse]]: =vertico-reverse-mode= to reverse the display.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico/blob/main/extensions/vertico-unobtrusive.el][vertico-unobtrusive]]: =vertico-unobtrusive-mode= displays only the topmost candidate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the Commentary of those files for configuration details. With these extensions it is possible to adapt Vertico such that it matches your preference or behaves similar to other familiar UIs. For example, the combination =vertico-flat= plus =vertico-directory= resembles Ido in look and feel. For an interface similar to Helm, the extension =vertico-buffer= allows you to configure freely where the completion buffer opens, instead of growing the minibuffer. Furthermore =vertico-buffer= will adjust the number of displayed candidates according to the buffer height.&lt;/p&gt; &#xA;&lt;p&gt;Configuration example for =vertico-directory=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure directory extension. (use-package vertico-directory :after vertico :ensure nil ;; More convenient directory navigation commands :bind (:map vertico-map (&#34;RET&#34; . vertico-directory-enter) (&#34;DEL&#34; . vertico-directory-delete-char) (&#34;M-DEL&#34; . vertico-directory-delete-word)) ;; Tidy shadowed file names :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Configure Vertico per command or completion category&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/vertico/blob/screenshots/vertico-ripgrep.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;Vertico offers the =vertico-multiform-mode= which allows you to configure Vertico per command or per completion category. The =vertico-buffer-mode= enables a Helm-like buffer display, which takes more space but also displays more candidates. This verbose display mode is useful for commands like &lt;del&gt;consult-imenu&lt;/del&gt; or &lt;del&gt;consult-outline&lt;/del&gt; since the buffer display allows you to get a better overview over the entire current buffer. But for other commands you want to keep using the default Vertico display. &lt;del&gt;vertico-multiform-mode&lt;/del&gt; solves this configuration problem.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable vertico-multiform (vertico-multiform-mode)&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per command. ;; Use a buffer with indices for imenu ;; and a flat (Ido-like) menu for M-x. (setq vertico-multiform-commands &#39;((consult-imenu buffer indexed) (execute-extended-command unobtrusive)))&lt;/p&gt; &#xA;&lt;p&gt;;; Configure the display per completion category. ;; Use the grid display for files and a buffer ;; for the consult-grep commands. (setq vertico-multiform-categories &#39;((file grid) (consult-grep buffer))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Temporary toggling between the different display modes is possible. The following commands are bound by default in the =vertico-multiform-map=. You can of course change these bindings if you like.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=M-V= -&amp;gt; &lt;del&gt;vertico-multiform-vertical&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-G= -&amp;gt; &lt;del&gt;vertico-multiform-grid&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-F= -&amp;gt; &lt;del&gt;vertico-multiform-flat&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-R= -&amp;gt; &lt;del&gt;vertico-multiform-reverse&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-U= -&amp;gt; &lt;del&gt;vertico-multiform-unobtrusive&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For special configuration you can use your own functions or even lambdas to configure the completion behavior per command or per completion category. Functions must have the calling convention of a mode, i.e., take a single argument, which is either 1 to turn on the mode and -1 to turn off the mode.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure &lt;code&gt;consult-outline&#39; as a scaled down TOC in a separate buffer (setq vertico-multiform-commands &lt;/code&gt;((consult-outline buffer ,(lambda (_) (text-scale-set -1))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Furthermore you can tune buffer-local settings per command or category.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Change the default sorting function. ;; See &lt;code&gt;vertico-sort-function&#39; and &lt;/code&gt;vertico-sort-override-function&#39;. (setq vertico-multiform-commands &#39;((describe-symbol (vertico-sort-function . vertico-sort-alpha))))&lt;/p&gt; &#xA;&lt;p&gt;(setq vertico-multiform-categories &#39;((symbol (vertico-sort-function . vertico-sort-alpha)) (file (vertico-sort-function . sort-directories-first))))&lt;/p&gt; &#xA;&lt;p&gt;;; Sort directories before files (defun sort-directories-first (files) (setq files (vertico-sort-history-length-alpha files)) (nconc (seq-filter (lambda (x) (string-suffix-p &#34;/&#34; x)) files) (seq-remove (lambda (x) (string-suffix-p &#34;/&#34; x)) files))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Combining these features allows us to fine-tune the completion display even more by adjusting the &lt;del&gt;vertico-buffer-display-action&lt;/del&gt;. We can for example reuse the current window for commands of the &lt;del&gt;consult-grep&lt;/del&gt; category (&lt;del&gt;consult-grep&lt;/del&gt;, &lt;del&gt;consult-git-grep&lt;/del&gt; and &lt;del&gt;consult-ripgrep&lt;/del&gt;). Note that this configuration is incompatible with Consult preview, since the previewed buffer is usually shown in exactly this window. Nevertheless this snippet demonstrates the flexibility of the configuration system.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure the buffer display and the buffer display action (setq vertico-multiform-categories &#39;((consult-grep buffer (vertico-buffer-display-action . (display-buffer-same-window)))))&lt;/p&gt; &#xA;&lt;p&gt;;; Disable preview for consult-grep commands (consult-customize consult-ripgrep consult-git-grep consult-grep :preview-key nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;As another example, the following code uses &lt;del&gt;vertico-flat&lt;/del&gt; and &lt;del&gt;vertico-cycle&lt;/del&gt; to emulate &lt;del&gt;(ido-mode &#39;buffer)&lt;/del&gt;, i.e., Ido when it is enabled only for completion of buffer names. &lt;del&gt;vertico-cycle&lt;/del&gt; set to &lt;del&gt;t&lt;/del&gt; is necessary here to prevent completion candidates from disappearing when they scroll off-screen to the left.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq vertico-multiform-categories &#39;((buffer flat (vertico-cycle . t)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complementary packages :properties: :custom_id: complementary-packages &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico integrates well with complementary packages, which enrich the completion UI. These packages are fully supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][Marginalia]]: Rich annotations in the minibuffer&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult][Consult]]: Useful search and navigation commands&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][Embark]]: Minibuffer actions and context menu&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][Orderless]]: Advanced completion style&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to get accustomed with the package ecosystem, I recommend the following quick start approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start with plain Emacs (&lt;del&gt;emacs -Q&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Install and enable Vertico to get incremental minibuffer completion.&lt;/li&gt; &#xA; &lt;li&gt;Install Orderless and/or configure the built-in completion styles for more flexible minibuffer filtering.&lt;/li&gt; &#xA; &lt;li&gt;Install Marginalia if you like rich minibuffer annotations.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark and add two keybindings for &lt;del&gt;embark-dwim&lt;/del&gt; and &lt;del&gt;embark-act&lt;/del&gt;. I am using the mnemonic keybindings =M-.= and =C-.= since these commands allow you to act on the object at point or in the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Install Consult if you want additional featureful completion commands, e.g., the buffer switcher &lt;del&gt;consult-buffer&lt;/del&gt; with preview or the line-based search &lt;del&gt;consult-line&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Embark-Consult and Wgrep for export from =consult-line= to =occur-mode= buffers and from =consult-grep= to editable =grep-mode= buffers.&lt;/li&gt; &#xA; &lt;li&gt;Fine tune Vertico with [[#extensions][extensions]].&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The ecosystem is modular. You don&#39;t have to use all of these components. Use only the ones you like and the ones which fit well into your setup. The steps 1. to 4. introduce no new commands over plain Emacs. Step 5. introduces the new commands &lt;del&gt;embark-act&lt;/del&gt; and &lt;del&gt;embark-dwim&lt;/del&gt;. In step 6. you get the Consult commands, some offer new functionality not present in Emacs already (e.g., &lt;del&gt;consult-line&lt;/del&gt;) and some are substitutes (e.g., &lt;del&gt;consult-buffer&lt;/del&gt; for &lt;del&gt;switch-to-buffer&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Child frames and Popups&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An often requested feature is the ability to display the completions in a child frame popup. Personally I am critical of using child frames for minibuffer completion. From my experience it introduces more problems than it solves. Most importantly child frames hide the content of the underlying buffer. Furthermore child frames do not play well together with changing windows and entering recursive minibuffer sessions. On top, child frames can feel slow and sometimes flicker. A better alternative is the &lt;del&gt;vertico-buffer&lt;/del&gt; display which can even be configured individually per command using &lt;del&gt;vertico-multiform&lt;/del&gt;. On the plus side of child frames, the completion display appears at the center of the screen, where your eyes are focused. Please give the following packages a try and judge for yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/muffinmad/emacs-mini-frame][mini-frame]]: Display the entire minibuffer in a child frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/mini-popup][mini-popup]]: Slightly simpler alternative to mini-frame.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tumashu/vertico-posframe][vertico-posframe]]: Display only the Vertico minibuffer in a child frame using the posframe library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many alternative completion UIs, each UI with its own advantages and disadvantages.&lt;/p&gt; &#xA;&lt;p&gt;Vertico aims to be 100% compliant with all Emacs commands and achieves that with a minimal code base, relying purely on &lt;del&gt;completing-read&lt;/del&gt; while avoiding to invent its own APIs. Inventing a custom API as Helm or Ivy is explicitly avoided in order to increase flexibility and package reuse. Due to its small code base and reuse of the Emacs built-in facilities, bugs and compatibility issues are less likely to occur in comparison to completion UIs or monolithic completion systems.&lt;/p&gt; &#xA;&lt;p&gt;Since Vertico only provides the UI, you may want to combine it with some of the complementary packages, to give a full-featured completion experience similar to Helm or Ivy. The idea is to have smaller independent components, which one can add and understand step by step. Each component focuses on its niche and tries to be as non-intrusive as possible. Vertico targets users interested in crafting their Emacs precisely to their liking - completion plays an integral part in how the users interacts with Emacs.&lt;/p&gt; &#xA;&lt;p&gt;There are other interactive completion UIs, which follow a similar philosophy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][Mct]]: Minibuffer and Completions in Tandem. Mct reuses the default &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer and enhances it with automatic updates and additional keybindings, to select a candidate and move between minibuffer and completions buffer. Since Mct uses a fully functional buffer you can use familiar buffer commands inside the completions buffer. The main distinction to Vertico&#39;s approach is that &lt;del&gt;&lt;em&gt;Completions&lt;/em&gt;&lt;/del&gt; buffer displays all matching candidates. This has the advantage that you can interact freely with the candidates and jump around with Isearch or Avy. On the other hand it necessarily causes a slowdown.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/radian-software/selectrum][Selectrum]]: Selectrum is the predecessor of Vertico has been deprecated in favor of Vertico. Read the [[https://github.com/minad/vertico/wiki/Migrating-from-Selectrum-to-Vertico][migration guide]] when migrating from Selectrum. Vertico was designed specifically to address the technical shortcomings of Selectrum. Selectrum is not fully compatible with every Emacs completion command and dynamic completion tables, since it uses its own filtering infrastructure, which deviates from the standard Emacs completion facilities.&lt;/li&gt; &#xA; &lt;li&gt;Icomplete: Emacs 28 comes with a builtin =icomplete-vertical-mode=, which is a more bare-bone than Vertico. Vertico offers additional flexibility thanks to its [[#extensions][extensions]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to learn more about Vertico and minibuffer completion, check out the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/doomemacs/doomemacs/tree/master/modules/completion/vertico][Doom Emacs Vertico Module]]: Vertico is Doom&#39;s default completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/SystemCrafters/crafted-emacs/blob/master/modules/crafted-completion.el][Crafted Emacs Completion Module]]: Vertico and Corfu are used for completion.&lt;/li&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/dotfiles/tree/master/item/emacs/.emacs.d/][Prot&#39;s Emacs configuration]]: Vertico and Corfu are used for completion.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=fnE0lXoe7Y0][Emacs Completion Explained]] (2022-07-19) by Andrew Tropin.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=w9hHMDyF9V4][Emacs Minibuffer Completions]] (2022-02-12) by Greg Yut.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=hPwDbx--Waw][Vertico Extensions for Emacs]] (2022-01-08) by Karthik Chikmagalur.&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/5ffb2at2d7w][Using Emacs Episode 80 - Vertico, Marginalia, Consult and Embark]] (2021-10-26) by Mike Zamansky.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=UtqE-lR2HCA][System Crafters Live! - Replacing Ivy and Counsel with Vertico and Consult]] (2021-05-21) by David Wilson.&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=J0OaRy85MOo][Streamline Your Emacs Completions with Vertico]] (2021-05-17) by David Wilson.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[https://elpa.gnu.org/packages/vertico.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debugging Vertico&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you observe an error in the =vertico--exhibit= post command hook, you should install an advice to enforce debugging. This allows you to obtain a stack trace in order to narrow down the location of the error. The reason is that post command hooks are automatically disabled (and not debugged) by Emacs. Otherwise Emacs would become unusable, given that the hooks are executed after every command.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq debug-on-error t)&lt;/p&gt; &#xA;&lt;p&gt;(defun force-debug (func &amp;amp;rest args) (condition-case e (apply func args) ((debug error) (signal (car e) (cdr e)))))&lt;/p&gt; &#xA;&lt;p&gt;(advice-add #&#39;vertico--exhibit :around #&#39;force-debug) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Problematic completion commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vertico is robust in most scenarios. However some completion commands make certain assumptions about the completion styles and the completion UI. Some of these assumptions may not hold in Vertico or other UIs and require minor workarounds.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-refile&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-refile&lt;/del&gt; uses &lt;del&gt;org-olpath-completing-read&lt;/del&gt; to complete the outline path in steps, when &lt;del&gt;org-refile-use-outline-path&lt;/del&gt; is non-nil.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately the implementation of this Org completion table assumes that the &lt;del&gt;basic&lt;/del&gt; completion style is used. The table is incompatible with completion styles like &lt;del&gt;substring&lt;/del&gt;, &lt;del&gt;flex&lt;/del&gt; or &lt;del&gt;orderless&lt;/del&gt;. In order to fix the issue at the root, the completion table should make use of completion boundaries similar to the built-in file completion table. In your user configuration you can prioritize &lt;del&gt;basic&lt;/del&gt; before &lt;del&gt;orderless&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 1: Use the basic completion style (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps t)&lt;/p&gt; &#xA;&lt;p&gt;(advice-add #&#39;org-olpath-completing-read :around #&#39;org-enforce-basic-completion)&lt;/p&gt; &#xA;&lt;p&gt;(defun org-enforce-basic-completion (&amp;amp;rest args) (minibuffer-with-setup-hook (:append (lambda () (let ((map (make-sparse-keymap (current-local-map)))) (define-key map [tab] #&#39;minibuffer-complete) (use-local-map map)) (setq-local completion-styles (cons &#39;basic completion-styles) vertico-preselect &#39;prompt))) (apply args))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you may want to disable the outline path completion in steps. The completion on the full path can be quicker since the input string matches directly against substrings of the full path, which is useful with Orderless. However the list of possible completions becomes much more cluttered.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Alternative 2: Complete full paths (setq org-refile-use-outline-path &#39;file org-outline-path-complete-in-steps nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;org-agenda-filter&lt;/del&gt; and &lt;del&gt;org-tags-view&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;del&gt;org-refile&lt;/del&gt;, the commands &lt;del&gt;org-agenda-filter&lt;/del&gt; and &lt;del&gt;org-tags-view&lt;/del&gt; do not make use of completion boundaries. The internal completion tables are &lt;del&gt;org-agenda-filter-completion-function&lt;/del&gt; and &lt;del&gt;org-tags-completion-function&lt;/del&gt;. Unfortunately =TAB= completion (&lt;del&gt;minibuffer-complete&lt;/del&gt;) does not work for this reason with arbitrary completion styles like &lt;del&gt;substring&lt;/del&gt;, &lt;del&gt;flex&lt;/del&gt; or &lt;del&gt;orderless&lt;/del&gt;. This affects Vertico and also the Emacs default completion system. For example if you enter &lt;del&gt;+tag&amp;lt;0 TAB&lt;/del&gt; the input is replaced with &lt;del&gt;0:10&lt;/del&gt; which is not correct. With preserved completion boundaries, the expected result would be &lt;del&gt;+tag&amp;lt;0:10&lt;/del&gt;. Completion boundaries are used for example by file completion, where each part of the path can be completed separately. Ideally this issue would be fixed in Org.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add #&#39;org-make-tags-matcher :around #&#39;org-enforce-basic-completion) (advice-add #&#39;org-agenda-filter :around #&#39;org-enforce-basic-completion) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;tmm-menubar&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The text menu bar works well with Vertico but always shows a =&lt;em&gt;Completions&lt;/em&gt;= buffer, which is unwanted if you use the Vertico UI. This completion buffer can be disabled with an advice. If you disabled the standard GUI menu bar and prefer the Vertico interface you may also overwrite the default F10 keybinding.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (keymap-global-set &#34;&#xA; &lt;f10&gt;&#xA;  &#34; #&#39;tmm-menubar) (advice-add #&#39;tmm-add-prompt :after #&#39;minibuffer-hide-completions) #+end_src&#xA; &lt;/f10&gt;&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;ffap-menu&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;ffap-menu&lt;/del&gt; shows the =&lt;em&gt;Completions&lt;/em&gt;= buffer by default like &lt;del&gt;tmm-menubar&lt;/del&gt;, which is unnecessary with Vertico. This completion buffer can be disabled as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add #&#39;ffap-menu-ask :around (lambda (&amp;amp;rest args) (cl-letf (((symbol-function #&#39;minibuffer-completion-help) #&#39;ignore)) (apply args)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;completion-table-dynamic&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dynamic completion tables (&lt;del&gt;completion-table-dynamic&lt;/del&gt;, &lt;del&gt;completion-table-in-turn&lt;/del&gt;, ...) should work well with Vertico. The only requirement is that the =basic= completion style is enabled. The =basic= style performs prefix filtering by passing the input to the completion table (or the dynamic completion table function). The =basic= completion style must not necessarily be configured with highest priority, it can also come after other completion styles like =orderless=, =substring= or =flex=, as is also recommended by the Orderless documentation because of &lt;del&gt;completion-table-dynamic&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(basic)) ;; (setq completion-styles &#39;(orderless basic)) (completing-read &#34;Dynamic: &#34; (completion-table-dynamic (lambda (str) (list (concat str &#34;1&#34;) (concat str &#34;2&#34;) (concat str &#34;3&#34;))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Submitting the empty string&lt;/p&gt; &#xA;&lt;p&gt;The commands &lt;del&gt;multi-occur&lt;/del&gt;, &lt;del&gt;auto-insert&lt;/del&gt;, &lt;del&gt;bbdb-create&lt;/del&gt; read multiple arguments from the minibuffer with &lt;del&gt;completing-read&lt;/del&gt;, one at a time, until you submit an empty string. You should type =M-RET= (&lt;del&gt;vertico-exit-input&lt;/del&gt;) to finish the loop. Directly pressing =RET= (&lt;del&gt;vertico-exit&lt;/del&gt;) does not work since the first candidate is preselected.&lt;/p&gt; &#xA;&lt;p&gt;The underlying issue is that &lt;del&gt;completing-read&lt;/del&gt; always allows you to exit with the empty string, which is called the /null completion/, even if the &lt;del&gt;REQUIRE-MATCH&lt;/del&gt; argument is non-nil. Try the following two calls to &lt;del&gt;completing-read&lt;/del&gt; with =C-x C-e=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match) (completing-read &#34;Select: &#34; &#39;(&#34;first&#34; &#34;second&#34; &#34;third&#34;) nil &#39;require-match nil nil &#34;&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In both cases the empty string can be submitted. In the first case no explicit default value is specified and Vertico preselects the &lt;em&gt;first&lt;/em&gt; candidate. In order to exit with the empty string, press =M-RET=. In the second case the explicit default value &#34;&#34; is specified and Vertico preselects the prompt, such that exiting with the empty string is possible by pressing =RET= only.&lt;/p&gt; &#xA;&lt;p&gt;** Tramp hostname and username completion&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; On upcoming Emacs 30 and Tramp 2.6.0.2 the workarounds described in this section are not necessary anymore, since the relevant completion tables have been improved.&lt;/p&gt; &#xA;&lt;p&gt;In combination with Orderless or other non-prefix completion styles like =substring= or =flex=, host names and user names are not made available for completion after entering =/ssh:=. In order to avoid this problem, the =basic= completion style should be specified for the file completion category, such that =basic= is tried before =orderless=. This can be achieved by putting =basic= first in the completion style overrides for the file completion category.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles basic partial-completion)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you are familiar with the =completion-style= machinery and want to dig a bit deeper, you may also define a custom completion style which sets in only for remote files. The custom completion style ensures that you can always match substrings within non-remote file names, since =orderless= will stay the preferred style for non-remote files.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun basic-remote-try-completion (string table pred point) (and (vertico--remote-p string) (completion-basic-try-completion string table pred point))) (defun basic-remote-all-completions (string table pred point) (and (vertico--remote-p string) (completion-basic-all-completions string table pred point))) (add-to-list &#39;completion-styles-alist &#39;(basic-remote basic-remote-try-completion basic-remote-all-completions nil)) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles basic-remote partial-completion)))) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/holo-layer</title>
    <updated>2023-08-27T01:53:57Z</updated>
    <id>tag:github.com,2023-08-27:/manateelazycat/holo-layer</id>
    <link href="https://github.com/manateelazycat/holo-layer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HoloLayer is a multimedia layer plugin designed specifically for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/manateelazycat/holo-layer/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;HoloLayer is a multimedia layer plugin specifically designed for Emacs. It is developed based on PyQt, aiming to significantly enhance the visual experience of Emacs. The plugin provides a series of visual enhancement features, including modern window borders, window jump prompts, cursor animations, window screenshots, transparent floating terminals, and real-time dictionaries, etc. These features not only make the Emacs interface look more modern, but also ensure that the performance of Emacs will not be affected.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Emacs 28 or above (For MacOS, please use window mode)&lt;/li&gt; &#xA; &lt;li&gt;Install Python dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;pip3 install epc sexpdata six pynput inflect PyQt6 PyQt6-Qt6 PyQt6-sip&lt;/code&gt; (For ArchLinux, please use pacman to install PyQt6)&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;pip3 install epc sexpdata six pynput inflect pygetwindow PyQt6 PyQt6-Qt6 PyQt6-sip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;pip3 install epc sexpdata six pynput inflect pyobjc PyQt6 PyQt6-Qt6 PyQt6-sip&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Download this repository using &lt;code&gt;git clone&lt;/code&gt;, and replace the load-path in the configuration below&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your configuration file ~/.emacs:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-holo-layer&amp;gt;&#34;)&#xA;(require &#39;holo-layer)&#xA;(holo-layer-enable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you are using Conda or other virtual environments, please first set &lt;code&gt;holo-layer-python-command&lt;/code&gt; to the corresponding Python path.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;h3&gt;Jelly Cursor Animation&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img style=&#34;height: auto; width: 80%; object-fit: contain&#34; src=&#34;https://raw.githubusercontent.com/manateelazycat/holo-layer/master/demo/jelly-cursor.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;holo-layer-enable-cursor-animation: Whether to enable the animation of the jelly cursor, it is off by default&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-enable-place-info: Display information at the cursor in the upper right corner of the screen, such as the translation of the word at the cursor, it is off by default&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-enable-window-border: Display window border, it is off by default&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-hide-mode-line: Enable this option to hide the mode-line, it is off by default&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-active-window-color: The border color of the active window, only displayed when there are more than two windows&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-inactive-window-color: The border color of the inactive window, only displayed when there are more than two windows&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-cursor-color: The color of the jelly cursor, by default it matches the background color of the Emacs cursor&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-cursor-alpha: The Alpha transparency of the jelly cursor, the default is 200, completely transparent is 0, opaque is 255&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-cursor-animation-interval: The interval time of the jelly cursor animation, the default is 10ms, don&#39;t worry about the time interval, because the animation effect is drawn with PyQt multithreading, it does not affect Emacs performance&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-cursor-block-commands: If you don&#39;t want to display cursor animation in some cases, you can add the command string to this list, for example, after &lt;code&gt;self-insert-command&lt;/code&gt; is added to the list, inserting characters will not produce animation&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-place-info-text-color: The text color of the information at the cursor, the default is the foreground color of &lt;code&gt;default&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-place-info-background-color: The background color of the information at the cursor, the default is the background color of &lt;code&gt;default&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-place-info-font-size: The font size of the information at the cursor, the default is 18&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-window-number-color: The color of the window jump number, use the &lt;code&gt;holo-layer-jump-to-window&lt;/code&gt; command to jump windows&lt;/li&gt; &#xA; &lt;li&gt;holo-layer-window-number-font-size: The font size of the window jump number, the default is 40&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback Issues&lt;/h2&gt; &#xA;&lt;p&gt;For other issues, please use the command &lt;code&gt;emacs -q&lt;/code&gt; and only add holo-layer configuration for a comparison test. If &lt;code&gt;emacs -q&lt;/code&gt; can work normally, please check your personal configuration file.&lt;/p&gt; &#xA;&lt;p&gt;If the problem still exists under the &lt;code&gt;emacs -q&lt;/code&gt; environment, please go &lt;a href=&#34;https://github.com/manateelazycat/holo-layer/issues/new&#34;&gt;here&lt;/a&gt; to provide feedback, and attach the content of the &lt;code&gt;*holo-layer*&lt;/code&gt; window to submit an issue to us. There are many clues in there that can help us troubleshoot the problem.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter a crash, please use the following method to collect crash information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First install gdb and turn on the option &lt;code&gt;(setq holo-layer-enable-debug t)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the command &lt;code&gt;holo-layer-stop-process&lt;/code&gt; to stop the holo-layer process&lt;/li&gt; &#xA; &lt;li&gt;Reopen holo-layer, and send the content of &lt;code&gt;*holo-layer*&lt;/code&gt; at the next crash&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/manateelazycat/holo-layer/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=manateelazycat/holo-layer&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>jorgenschaefer/elpy</title>
    <updated>2023-08-27T01:53:57Z</updated>
    <id>tag:github.com,2023-08-27:/jorgenschaefer/elpy</id>
    <link href="https://github.com/jorgenschaefer/elpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Python Development Environment&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/jorgenschaefer/elpy/workflows/Tests/badge.svg?branch=master&#34;&gt;https://github.com/jorgenschaefer/elpy/workflows/Tests/badge.svg?branch=master&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/jorgenschaefer/elpy/actions?query=workflow%3ATests&#34;&gt;https://github.com/jorgenschaefer/elpy/actions?query=workflow%3ATests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://readthedocs.org/projects/elpy/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/elpy/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/?badge=latest&#34;&gt;https://elpy.readthedocs.io/en/latest/?badge=latest&lt;/a&gt; :alt: Documentation Status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://coveralls.io/repos/jorgenschaefer/elpy/badge.svg?branch=master&#34;&gt;https://coveralls.io/repos/jorgenschaefer/elpy/badge.svg?branch=master&lt;/a&gt; :target: &lt;a href=&#34;https://coveralls.io/r/jorgenschaefer/elpy?branch=master&#34;&gt;https://coveralls.io/r/jorgenschaefer/elpy?branch=master&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://melpa.org/packages/elpy-badge.svg&#34;&gt;https://melpa.org/packages/elpy-badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://melpa.org/#/elpy&#34;&gt;https://melpa.org/#/elpy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://stable.melpa.org/packages/elpy-badge.svg&#34;&gt;https://stable.melpa.org/packages/elpy-badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://stable.melpa.org/#/elpy&#34;&gt;https://stable.melpa.org/#/elpy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;========================== Elpy, the Emacs Python IDE&lt;/h1&gt; &#xA;&lt;p&gt;Elpy is an Emacs package to bring powerful Python editing to Emacs. It combines and configures a number of other packages, both written in Emacs Lisp as well as Python. Elpy is fully documented at &lt;code&gt;Readthedocs&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. _Readthedocs: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/index.html&#34;&gt;https://elpy.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;IMPORTANT NOTE: Looking for a maintainer&lt;/h1&gt; &#xA;&lt;p&gt;I find myself (@galaunay, current maintainer), unable to maintain Elpy at the moment, and probably for a while. If you are interested in getting involved in Elpy, please contact me by mail, &lt;strong&gt;the project definitely needs you&lt;/strong&gt; !&lt;/p&gt; &#xA;&lt;p&gt;In the meantime, I will keep an eye on the PRs to integrate any fix and/or new features proposed, but I will definitely not be able to treat the issues in a satisfying manner. If you are stuck with an issue, please have a look at the &lt;code&gt;documentation&lt;/code&gt;&lt;em&gt;, there is a lot of answers there. @gfederix also made some bug fixing in his &lt;code&gt;fork&lt;/code&gt;&lt;/em&gt;, so you can try using this version of Elpy.&lt;/p&gt; &#xA;&lt;p&gt;.. _documentation: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/index.html&#34;&gt;https://elpy.readthedocs.io/en/latest/index.html&lt;/a&gt; .. _fork: &lt;a href=&#34;https://github.com/gfederix/elpy&#34;&gt;https://github.com/gfederix/elpy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Code completion&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Code Navigation&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Interactive Python shell&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Virtualenv support&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;On-the-fly syntax checking&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Access to documentation&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Debugging&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Testing&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Profiling&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Snippet Expansion&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Code hinting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _Code completion: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#completion&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#completion&lt;/a&gt; .. _Code Navigation: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#navigation&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#navigation&lt;/a&gt; .. _On-the-fly syntax checking: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#syntax-checking&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#syntax-checking&lt;/a&gt; .. _Interactive Python shell: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#interactive-python&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#interactive-python&lt;/a&gt; .. _Access to documentation: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#documentation&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#documentation&lt;/a&gt; .. _Debugging: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#debugging&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#debugging&lt;/a&gt; .. _Testing: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#testing&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#testing&lt;/a&gt; .. _Profiling: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#profiling&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#profiling&lt;/a&gt; .. _Virtualenv support: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/concepts.html#virtual-envs&#34;&gt;https://elpy.readthedocs.io/en/latest/concepts.html#virtual-envs&lt;/a&gt; .. _Snippet Expansion: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/ide.html#snippets&#34;&gt;https://elpy.readthedocs.io/en/latest/ide.html#snippets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Elpy is available on Melpa, the most straightforward way to install it is to use &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;(use-package elpy :ensure t :init (elpy-enable))&lt;/p&gt; &#xA;&lt;p&gt;For other installation alternatives, see the documentation section &lt;code&gt;Installation&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. _Installation: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/introduction.html#installation&#34;&gt;https://elpy.readthedocs.io/en/latest/introduction.html#installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;Once installed, Elpy will automatically provide code completion, syntax error highlighting and code hinting (in the modeline) for python files. Elpy offers a lot of features, but the following keybindings should be enough to get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;:kbd:&lt;code&gt;C-c C-c&lt;/code&gt; evaluates the current python script (or region if something is selected) in an interactive python shell. The python shell is automatically displayed aside of your script.&lt;/li&gt; &#xA; &lt;li&gt;:kbd:&lt;code&gt;C-RET&lt;/code&gt; evaluates the current statement (current line plus the following nested lines).&lt;/li&gt; &#xA; &lt;li&gt;:kbd:&lt;code&gt;C-c C-z&lt;/code&gt; switches between your script and the interactive shell.&lt;/li&gt; &#xA; &lt;li&gt;:kbd:&lt;code&gt;C-c C-d&lt;/code&gt; displays documentation for the thing under cursor. The documentation will pop in a different buffer, that can be closed with :kbd:&lt;code&gt;q&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please have a look at the documentation at &lt;code&gt;Readthedocs&lt;/code&gt;_ if you want to know more about what Elpy can do.&lt;/p&gt; &#xA;&lt;p&gt;.. _Readthedocs: &lt;a href=&#34;https://elpy.readthedocs.io/en/latest/index.html&#34;&gt;https://elpy.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;External resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Emacs: The Best Python Editor?&lt;/code&gt;_ by Jon Fincher&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Managing a Python development environment in Emacs&lt;/code&gt;_ by Diego Fernández Giraldo&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Configuring GNU emacs with elpy on MacOS&lt;/code&gt;_ by Kenneth H. East&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _Managing a Python development environment in Emacs: &lt;a href=&#34;https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a&#34;&gt;https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a&lt;/a&gt; .. _Emacs: The Best Python Editor?: &lt;a href=&#34;https://realpython.com/emacs-the-best-python-editor&#34;&gt;https://realpython.com/emacs-the-best-python-editor&lt;/a&gt; .. _Configuring GNU emacs with elpy on MacOS: &lt;a href=&#34;https://east.fm/posts/configuring-gnu-emacs-with-elpy-on-macos/index.html#&#34;&gt;https://east.fm/posts/configuring-gnu-emacs-with-elpy-on-macos/index.html#&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;For questions regarding Elpy, do not hesitate to open an &lt;code&gt;issue on github&lt;/code&gt;_ or visit us on IRC, channel &lt;code&gt;#emacs-elpy&lt;/code&gt; on &lt;code&gt;irc.freenode.net&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;.. _issue on github: &lt;a href=&#34;https://github.com/jorgenschaefer/elpy/issues/new&#34;&gt;https://github.com/jorgenschaefer/elpy/issues/new&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>