<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-22T01:52:19Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacscollective/no-littering</title>
    <updated>2023-01-22T01:52:19Z</updated>
    <id>tag:github.com,2023-01-22:/emacscollective/no-littering</id>
    <link href="https://github.com/emacscollective/no-littering" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Help keeping ~/.emacs.d clean&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Help keeping ~/.emacs.d clean&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default paths used to store configuration files and persistent data are not consistent across Emacs packages. This isn&#39;t just a problem with third-party packages but even with built-in packages.&lt;/p&gt; &#xA;&lt;p&gt;Some packages put these files directly in &lt;del&gt;user-emacs-directory&lt;/del&gt; or &lt;del&gt;$HOME&lt;/del&gt; or in a subdirectory of either of the two or elsewhere. Furthermore sometimes file names are used that don&#39;t provide any insight into what package might have created them.&lt;/p&gt; &#xA;&lt;p&gt;This package sets out to fix this by changing the values of path variables to put configuration files in &lt;del&gt;no-littering-etc-directory&lt;/del&gt; (defaulting to &#34;etc/&#34; under &lt;del&gt;user-emacs-directory&lt;/del&gt;, thus usually &lt;del&gt;&#34;&lt;/del&gt;/.emacs.d/etc/&#34;&lt;del&gt;) and persistent data files in &lt;del&gt;no-littering-var-directory&lt;/del&gt; (defaulting to &lt;del&gt;&#34;var/&#34;&lt;/del&gt; under &lt;del&gt;user-emacs-directory&lt;/del&gt;, thus usually &lt;del&gt;&#34;&lt;/del&gt;/.emacs.d/var/&#34;&lt;/del&gt;), and by using descriptive file names and subdirectories when appropriate. This is similar to a color-theme; a &#34;path-theme&#34; if you will.&lt;/p&gt; &#xA;&lt;p&gt;We still have a long way to go until most built-in and many third-party path variables are properly &#34;themed&#34;. Like a color-theme, this package depends on user contributions to accomplish decent coverage. Pull requests are highly welcome (but please follow the conventions described below and in the pull request template).&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;no-littering&lt;/del&gt; cannot help with moving existing files to the new location. You will have to move the files manually. See issue [[https://github.com/emacscollective/no-littering/issues/79][#79]] for more information.&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;Load the feature &lt;del&gt;no-littering&lt;/del&gt; as early as possible in your init file. Make sure you load it at least before you change any path variables using some other method.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;no-littering) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you would like to use base directories different from what &lt;del&gt;no-littering&lt;/del&gt; uses by default, then you have to set the respective variables before loading the feature.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq no-littering-etc-directory (expand-file-name &#34;config/&#34; user-emacs-directory)) (setq no-littering-var-directory (expand-file-name &#34;data/&#34; user-emacs-directory)) (require &#39;no-littering) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Suggested Settings&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;del&gt;recentf&lt;/del&gt; then you might find it convenient to exclude all of the files in the &lt;del&gt;no-littering&lt;/del&gt; directories using something like the following.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;recentf) (add-to-list &#39;recentf-exclude no-littering-var-directory) (add-to-list &#39;recentf-exclude no-littering-etc-directory) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** Auto-save settings&lt;/p&gt; &#xA;&lt;p&gt;One of the most common types of files that Emacs creates automatically is auto-save files. By default, these appear in the current directory of a visited file. No-littering does not change this, but you can add the following code to your &lt;del&gt;init.el&lt;/del&gt; file to store these files in the &lt;del&gt;var&lt;/del&gt; directory:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq auto-save-file-name-transforms `((&#34;.*&#34; ,(no-littering-expand-var-file-name &#34;auto-save/&#34;) t))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** Saved customizations&lt;/p&gt; &#xA;&lt;p&gt;Emacs will save [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html ][customizations]] into your &lt;del&gt;init.el&lt;/del&gt; file by default. If you don&#39;t want that, you might want to store them in a sibling file or even in the &lt;del&gt;etc/&lt;/del&gt; directory:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq custom-file (expand-file-name &#34;custom.el&#34; user-emacs-directory)) ;; or (setq custom-file (no-littering-expand-etc-file-name &#34;custom.el&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;**** Native compilation cache&lt;/p&gt; &#xA;&lt;p&gt;When using Emacs 29, the location of the native compilation cache can be changed using a function, preferably in &lt;del&gt;early-init.el&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (when (fboundp &#39;startup-redirect-eln-cache) (startup-redirect-eln-cache (convert-standard-filename (expand-file-name &#34;var/eln-cache/&#34; user-emacs-directory)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Conventions&lt;/p&gt; &#xA;&lt;p&gt;*** (A) File names&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;File names are based on the name of the respective Emacs lisp variables and the name of the respective Emacs package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The name of the respective Emacs package should serve as the prefix of the file name, unless the file is in a subdirectory in which case the name of the subdirectory serves as the prefix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the name of the package and the prefix of the variable do not match, then we prefer the name of the package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the name of a path variable ends with &lt;del&gt;-file&lt;/del&gt;, &lt;del&gt;-default-file&lt;/del&gt;, &lt;del&gt;-directory&lt;/del&gt;, &lt;del&gt;-default-directory&lt;/del&gt;, or something similar, then that suffix is usually dropped from the file name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If applicable, the appropriate extension is added to the file name so that files are visited using the appropriate major-modes and also to provide a hint about the kind of data stored in the file. E.g. if a file contains an S-expression, then the suffix should be &lt;del&gt;*.el&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** (B) File location and subdirectories&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package has only one data file, then that is usually placed in &lt;del&gt;no-littering-var-directory&lt;/del&gt; itself. Likewise if a package has only one config file, then that is placed in &lt;del&gt;no-littering-etc-directory&lt;/del&gt; itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package has multiple data (or config files), then those files are placed in a subdirectory of &lt;del&gt;no-littering-var-directory&lt;/del&gt; (or &lt;del&gt;no-littering-etc-directory&lt;/del&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a subdirectory is used for a package&#39;s data (or config) file variables, then the name of the directory should match the name of the package in most cases. The subdirectory name may serve as the package prefix of the file name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package provides a &#34;framework&#34; for other packages to use, then we may reuse its directories for other packages that make use of that framework or otherwise &#34;extend&#34; the &#34;main package&#34;. E.g. we place all &lt;del&gt;helm&lt;/del&gt; related files in &lt;del&gt;helm/&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package only defines a single variable that specifies a data (or config) directory, then the directory name should nevertheless be just the package name. E.g. the path used for &lt;del&gt;sx-cache-directory&lt;/del&gt; from the &lt;del&gt;sx&lt;/del&gt; package is &lt;del&gt;sx/cache/&lt;/del&gt;, not &lt;del&gt;sx-cache/&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;However if the name of the directory variable implies that the package won&#39;t ever define any data (or config) files that won&#39;t be placed in that directory, then we use a top-level directory. E.g. when the name of the variable is &lt;del&gt;&#xA;    &lt;package&gt;&#xA;     -directory&#xA;    &lt;/package&gt;&lt;/del&gt;, in which case we would use just &lt;del&gt;&#xA;    &lt;package&gt;&#xA;     /&#xA;    &lt;/package&gt;&lt;/del&gt; as the path.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** (C) Ordering and alignment&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The code that sets the values of themed variables is split into two groups. The first group sets the value of variables that belong to packages that are part of Emacs, and the second group is used for variables that are defined by packages that are not part of Emacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each of these lists is sorted alphabetically (usually by variable name). Please keep it that way.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We attempt to align the value forms inside different &lt;del&gt;setq&lt;/del&gt; forms. If the symbol part for a particular variable is too long to allow doing so, then don&#39;t worry about it and just break the alignment. If it turns out that this happens very often, then we will adjust the alignment eventually.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** (D) Commit messages&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Please theme each package using a separate commit and use commit messages of the form &lt;del&gt;PACKAGE: theme VARIABLE&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a package has several path variables, then you should theme them all in one commit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the variable names do not fit nicely on the summary line, then use a message such as:&lt;/p&gt; &lt;p&gt;#+begin_src text foo: theme variables&lt;/p&gt; &lt;p&gt;Theme &lt;code&gt;foo-config-file&#39;, &lt;/code&gt;foo-cache-directory&#39;, and `foo-persistent-file&#39;. #+end_src&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When appropriate add statements like the following to the commit message:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This file is used to store an s-expression.&lt;/li&gt; &#xA;   &lt;li&gt;This file is used to store raw text.&lt;/li&gt; &#xA;   &lt;li&gt;This is the only configuration/data file of the package.&lt;/li&gt; &#xA;   &lt;li&gt;This package does/doesn&#39;t take care of creating the containing directory if necessary. (If the package does not do it, then you should also fix that and submit an upstream pull request.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are uncertain, then be explicit about it by adding a comment to the pull-request.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;fill-column: 70&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt; &#xA;&lt;p&gt;#+html: &lt;br&gt;&lt;br&gt; #+html: &lt;a href=&#34;https://github.com/emacscollective/no-littering/actions/workflows/compile.yml&#34;&gt;&lt;img alt=&#34;Compile&#34; src=&#34;https://github.com/emacscollective/no-littering/actions/workflows/compile.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/no-littering&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/no-littering-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/no-littering&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/no-littering-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>milkypostman/powerline</title>
    <updated>2023-01-22T01:52:19Z</updated>
    <id>tag:github.com,2023-01-22:/milkypostman/powerline</id>
    <link href="https://github.com/milkypostman/powerline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;emacs powerline&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;powerline&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This project is in maintenance mode and not currently being developed or maintained. Pull requests will be reviewed and accepted but may not get an immediate response. Sorry for the inconvenience.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emacs version of the Vim powerline.&lt;/p&gt; &#xA;&lt;p&gt;This is a proposed version 2.0 of the original &lt;a href=&#34;http://www.emacswiki.org/emacs/PowerLine&#34;&gt;Emacs Powerline&lt;/a&gt; which is a fork of &lt;a href=&#34;https://github.com/Lokaltog/vim-powerline&#34;&gt;vim-powerline&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This version has utf-8 support enabled. The &lt;code&gt;utf-8&lt;/code&gt; separators will display a unicode character properly under mintty for example - as long as you have &lt;a href=&#34;https://github.com/Lokaltog/powerline-fonts&#34;&gt;patched fonts&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;p&gt;By default, any terminal mode emacs will use the &lt;code&gt;utf-8&lt;/code&gt; separators.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;powerline)&#xA;(powerline-default-theme)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second line customizes &lt;code&gt;mode-line-format&lt;/code&gt; according to the default theme.&lt;/p&gt; &#xA;&lt;p&gt;There are five builtin themes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;powerline-default-theme&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;powerline-center-theme&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;powerline-center-evil-theme&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;powerline-vim-theme&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;powerline-nano-theme&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can revert back to the original value of &lt;code&gt;mode-line-format&lt;/code&gt; that was being used when powerline was loaded using &lt;code&gt;powerline-revert&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Faces&lt;/h2&gt; &#xA;&lt;p&gt;The faces that powerline uses for the builtin themes are &lt;code&gt;powerline-active1&lt;/code&gt; and &lt;code&gt;powerline-active2&lt;/code&gt; for the active modeline, and &lt;code&gt;powerline-inactive1&lt;/code&gt; ande &lt;code&gt;powerline-inactive2&lt;/code&gt; for the inactive modelines. If you create your own theme, you can add as many faces as you want and pass those faces to the corresponding &lt;code&gt;powerline-*&lt;/code&gt; functions when creating your &lt;code&gt;mode-line-format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Themes&lt;/h2&gt; &#xA;&lt;p&gt;Please look over the &lt;code&gt;powerline-default-theme&lt;/code&gt; and &lt;code&gt;powerline-center-theme&lt;/code&gt; in &lt;a href=&#34;https://github.com/milkypostman/powerline/raw/master/powerline-themes.el&#34;&gt;&lt;code&gt;powerline-themes.el&lt;/code&gt;&lt;/a&gt; for examples of themes that involve different justifications of modeline text.&lt;/p&gt; &#xA;&lt;p&gt;You can write your own powerline theme by simply setting your own &lt;code&gt;mode-line-format&lt;/code&gt; to be an evaluation (&lt;code&gt;:eval&lt;/code&gt;) of the powerline functions. Notice in &lt;code&gt;powerline-default-theme&lt;/code&gt; the &lt;code&gt;let*&lt;/code&gt; defines two lists: &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; which are exactly the lists that define what goes on the left and right sides of the modeline. The &lt;code&gt;powerline-center-theme&lt;/code&gt; demonstrates how to &lt;em&gt;center&lt;/em&gt; justify part of the modeline and defines an additional &lt;code&gt;center&lt;/code&gt; list which is exactly the modeline components to be displayed in the middle section.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;em&gt;most&lt;/em&gt; circumstances you should only need to modify the builtin themes unless you are trying to do a particularly unique layout.&lt;/p&gt; &#xA;&lt;h3&gt;Explanation&lt;/h3&gt; &#xA;&lt;p&gt;This theme does some tricks to improve performance and get all the text justified properly. First, it sets &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; to a list of powerline sections. You can easily re-utilize builtin modeline formatting by adding it as a raw powerline section. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(powerline-raw mode-line-mule-info nil &#39;l)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;would add the formatting defined in &lt;code&gt;mode-line-mule-info&lt;/code&gt; to the modeline as it appears in the default modeline.&lt;/p&gt; &#xA;&lt;p&gt;The last line of this is what actually puts it all together, by concatonating the &lt;code&gt;lhs&lt;/code&gt;, some &#34;fill&#34; space, and &lt;code&gt;rhs&lt;/code&gt;. This &lt;em&gt;must&lt;/em&gt; be done to ensure that the padding in between the left and right sections properly fills the modeline.&lt;/p&gt; &#xA;&lt;h2&gt;Improvements from this rewrite:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cleaner code.&lt;/li&gt; &#xA; &lt;li&gt;Try to simply be a &lt;em&gt;library&lt;/em&gt; that provides functions for generating a mode-line&lt;/li&gt; &#xA; &lt;li&gt;Make right-aligned text actually be flush against the right side.&lt;/li&gt; &#xA; &lt;li&gt;Separators are designed to dynamically size their height based on the font settings.&lt;/li&gt; &#xA; &lt;li&gt;Separators spread their width to the nearest character width. (This is required to make right-aligned text actually be right-aligned)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementing New Separators&lt;/h2&gt; &#xA;&lt;p&gt;The function should return an XPM image created using the &lt;code&gt;create-image&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;There is a function called &lt;code&gt;memoize&lt;/code&gt; that will help make calling the function multiple times with the same parameters be much quicker by caching the return value.&lt;/p&gt; &#xA;&lt;p&gt;Each divider should have the signature: &lt;code&gt;(face1 face2 &amp;amp;optional height)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;face1&lt;/code&gt; : the left-hand face&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;face2&lt;/code&gt; : the right-hand face&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;height&lt;/code&gt; : specifies the height of the XPM, most of time this is &lt;code&gt;(font-char-height)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Separators should consider the &lt;code&gt;height&lt;/code&gt; when they are created so that the mode-line can change sizes based on the font height.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>editorconfig/editorconfig-emacs</title>
    <updated>2023-01-22T01:52:19Z</updated>
    <id>tag:github.com,2023-01-22:/editorconfig/editorconfig-emacs</id>
    <link href="https://github.com/editorconfig/editorconfig-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EditorConfig plugin for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/editorconfig/editorconfig-emacs/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt; &lt;a href=&#34;http://melpa.org/#/editorconfig&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/editorconfig-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/editorconfig&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/editorconfig-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://elpa.nongnu.org/nongnu/editorconfig.html&#34;&gt;&lt;img src=&#34;http://elpa.nongnu.org/nongnu/editorconfig.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;EditorConfig Emacs Plugin&lt;/h1&gt; &#xA;&lt;p&gt;This is an &lt;a href=&#34;https://editorconfig.org&#34;&gt;EditorConfig&lt;/a&gt; plugin for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;package.el&lt;/h3&gt; &#xA;&lt;p&gt;This package is available from &lt;a href=&#34;https://melpa.org/#/editorconfig&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;https://stable.melpa.org/#/editorconfig&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://elpa.nongnu.org/nongnu/editorconfig.html&#34;&gt;NonGNU ELPA&lt;/a&gt;. Install from these repositories and enable global minor-mode &lt;code&gt;editorconfig-mode&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(editorconfig-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Normally, enabling &lt;code&gt;editorconfig-mode&lt;/code&gt; should be enough for this plugin to work: all other configurations are optional. This mode sets up hooks so that EditorConfig properties will be loaded and applied to the new buffers automatically when visiting files.&lt;/p&gt; &#xA;&lt;h3&gt;use-package&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://www.emacswiki.org/emacs/UsePackage&#34;&gt;&lt;strong&gt;use-package&lt;/strong&gt;&lt;/a&gt;, add the following to your &lt;code&gt;init.el&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package editorconfig&#xA;  :ensure t&#xA;  :config&#xA;  (editorconfig-mode 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;Copy all &lt;code&gt;.el&lt;/code&gt; files in this repository to &lt;code&gt;~/.emacs.d/lisp&lt;/code&gt; and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/lisp&#34;)&#xA;(require &#39;editorconfig)&#xA;(editorconfig-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported properties&lt;/h2&gt; &#xA;&lt;p&gt;Current Emacs plugin coverage for EditorConfig&#39;s &lt;a href=&#34;https://editorconfig.org/#supported-properties&#34;&gt;properties&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;indent_style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent_size&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tab_width&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;end_of_line&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim_trailing_whitespace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;insert_final_newline = true&lt;/code&gt; is supported&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&lt;code&gt;insert_final_newline = false&lt;/code&gt;&lt;/del&gt; is not enforced (as in trailing newlines actually being removed automagically), we just buffer-locally override any preferences that would auto-add them to files &lt;code&gt;.editorconfig&lt;/code&gt; marks as trailing-newline-free&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_line_length&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&lt;code&gt;file_type_ext&lt;/code&gt; (Experimental)&lt;/del&gt; (See below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;&lt;code&gt;file_type_emacs&lt;/code&gt; (Experimental)&lt;/del&gt; (See below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;root&lt;/code&gt; (only used by EditorConfig core)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not yet covered properties marked with &lt;del&gt;over-strike&lt;/del&gt; – pull requests implementing missing features warmly welcomed! Typically, you will want to tie these to native functionality, or the configuration of existing packages handling the feature.&lt;/p&gt; &#xA;&lt;p&gt;As several packages have their own handling of, say, indentation, we might not yet cover some mode you use, but we try to add the ones that show up on our radar.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;del&gt;File Type (file_type_ext, file_type_emacs)&lt;/del&gt;&lt;/h3&gt; &#xA;&lt;p&gt;File-type feature is currently disabled, because this package is now undergoing big internal refactoring. For those who want this functionality, please consider using &lt;a href=&#34;https://github.com/10sr/editorconfig-custom-majormode-el&#34;&gt;editorconfig-custom-majormode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;editorconfig-emacs&lt;/code&gt; provides some customize variables.&lt;/p&gt; &#xA;&lt;p&gt;Here are some of these variables: for the full list of available variables, type &lt;kbd&gt;M-x customize-group [RET] editorconfig [RET]&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;editorconfig-trim-whitespaces-mode&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Buffer local minor-mode to use to trim trailing whitespaces.&lt;/p&gt; &#xA;&lt;p&gt;If set, editorconfig will enable/disable this mode in accord with &lt;code&gt;trim_trailing_whitespace&lt;/code&gt; property in &lt;code&gt;.editorconfig&lt;/code&gt;. Otherwise, use Emacs built-in &lt;code&gt;delete-trailing-whitespace&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;One possible value is &lt;a href=&#34;https://github.com/lewang/ws-butler&#34;&gt;&lt;code&gt;ws-butler-mode&lt;/code&gt;&lt;/a&gt;, with which only lines touched get trimmed. To use it, add following to your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq editorconfig-trim-whitespaces-mode&#xA;      &#39;ws-butler-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;editorconfig-after-apply-functions&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;(Formerly &lt;code&gt;editorconfig-custom-hooks&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;A list of functions which will be called after loading common EditorConfig settings, when you can set some custom variables.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;web-mode&lt;/code&gt; has several variables for indentation offset size and EditorConfig sets them at once by &lt;code&gt;indent_size&lt;/code&gt;. You can stop indenting only blocks of &lt;code&gt;web-mode&lt;/code&gt; by adding following to your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;editorconfig-after-apply-functions&#xA;  (lambda (props) (setq web-mode-block-padding 0)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Enabling &lt;code&gt;editorconfig-mode&lt;/code&gt; should be enough for normal cases.&lt;/p&gt; &#xA;&lt;p&gt;When EditorConfig properties are not effective for unknown reason, we recommend first trying &lt;code&gt;M-x editorconfig-display-current-properties&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This command will open a new buffer and display the EditorConfig properties loaded for current buffer. You can check if EditorConfig properties were not read for buffers at all, or they were loaded but did not take effect for some other reasons.&lt;/p&gt; &#xA;&lt;h3&gt;Indentation for new major-modes&lt;/h3&gt; &#xA;&lt;p&gt;Because most Emacs major-modes have their own indentation settings, this plugin requires explicit support for each major-mode for &lt;code&gt;indent_size&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;By default this plugin ships with settings for many major-modes, but, sorry to say, it cannot be perfect. Especially it is difficult to support brand-new major-modes. Please feel free to submit issue or pull-request for such major-mode!&lt;/p&gt; &#xA;&lt;p&gt;Supported major-modes and their indentation configs are defined in the variable &lt;code&gt;editorconfig-indentation-alist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Not work at all for FOO-mode!&lt;/h3&gt; &#xA;&lt;p&gt;Most cases properties are loaded just after visiting files when &lt;code&gt;editorconfig-mode&lt;/code&gt; is enabled. But it is known that there are major-modes that this mechanism does not work for and require explicit call of &lt;code&gt;editorconfig-apply&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Typically it will occur when the major-mode is not defined using &lt;code&gt;define-derived-mode&lt;/code&gt; (&lt;code&gt;rpm-spec-mode&lt;/code&gt; is an example for this). Please feel free to submit issues if you find such modes!&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;editorconfig-format-buffer&lt;/code&gt; does not work well with lsp-mode&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; configures indent-region-function so that Emacs uses language servers&#39; &lt;code&gt;textDocument/rangeFormatting&lt;/code&gt; request to format text in buffers. So EditorConfig settings are ignored unless language servers themselves support loading configs from &lt;code&gt;.editorconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this behavior ad-hocly, set &lt;code&gt;lsp-enable-indentation&lt;/code&gt; to nil.&lt;/p&gt; &#xA;&lt;h2&gt;Submitting Bugs and Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;Bugs, feature requests, and other issues should be submitted to the issue tracker: &lt;a href=&#34;https://github.com/editorconfig/editorconfig-emacs/issues&#34;&gt;https://github.com/editorconfig/editorconfig-emacs/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;Make and &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt; must be installed to run the tests locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start a new Emacs process with current &lt;code&gt;*.el&lt;/code&gt; and without loading user init file, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;EditorConfig Emacs Plugin is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>