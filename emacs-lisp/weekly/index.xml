<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-24T01:49:54Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ysano/dotfiles</title>
    <updated>2023-09-24T01:49:54Z</updated>
    <id>tag:github.com,2023-09-24:/ysano/dotfiles</id>
    <link href="https://github.com/ysano/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dotfiles&lt;/h1&gt; &#xA;&lt;p&gt;dot dot dot&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/quickrun</title>
    <updated>2023-09-24T01:49:54Z</updated>
    <id>tag:github.com,2023-09-24:/emacsorphanage/quickrun</id>
    <link href="https://github.com/emacsorphanage/quickrun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run command quickly. This packages is inspired quickrun.vim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/quickrun&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/quickrun-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/quickrun&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/quickrun-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;quickrun.el&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;quickrun.el&lt;/strong&gt; is Emacs port of &lt;a href=&#34;https://github.com/thinca/vim-quickrun&#34;&gt;quickrun.vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacsorphanage/quickrun/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacsorphanage/quickrun/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;quickrun.el&lt;/code&gt; is a extension to execute editing buffer. &lt;code&gt;quickrun.el&lt;/code&gt; is similar to executable-interpret, but &lt;code&gt;quickrun.el&lt;/code&gt; provides more convenient commands. &lt;code&gt;quickrun.el&lt;/code&gt; execute not only script languages(Perl, Ruby, Python etc), but also compiling languages(C, C++, Go, Java etc) and markup language.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 24.3 or higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;quickrun.el&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; with package.el.&lt;/p&gt; &#xA;&lt;p&gt;Or install directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd load-path-dir&#xA;$ wget https://raw.githubusercontent.com/syohex/emacs-quickrun/master/quickrun.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After Installation add following to your configuration file(~/.emacs.d/init.el, ~/.emacs etc)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;quickrun)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support Programming Languages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;quickrun.el&lt;/code&gt; supports following programming languages and markup languages as default. But you can register your own command and apply other languages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Programming Language(commands used)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C (&lt;code&gt;gcc&lt;/code&gt; / &lt;code&gt;clang&lt;/code&gt; / &lt;code&gt;Visual C++&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;C++ (&lt;code&gt;g++&lt;/code&gt; / &lt;code&gt;clang++&lt;/code&gt; / &lt;code&gt;Visual C++&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;C# (&lt;code&gt;dotnet&lt;/code&gt; / &lt;code&gt;mono&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Objective-C (gcc -objc)&lt;/li&gt; &#xA; &lt;li&gt;D Language (&lt;code&gt;dmd&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fortran (&lt;code&gt;gfortran&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Java (&lt;code&gt;javac&lt;/code&gt; / &lt;code&gt;java&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Perl (&lt;code&gt;perl&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Perl6 (&lt;code&gt;perl6&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Ruby (&lt;code&gt;ruby&lt;/code&gt; / &lt;code&gt;mruby&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Python (&lt;code&gt;python&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PHP (&lt;code&gt;php&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Emacs Lisp (&lt;code&gt;emacs&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Scheme (&lt;code&gt;gosh&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Smalltalk (&lt;code&gt;gst&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Racket (&lt;code&gt;racket&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Common Lisp (&lt;code&gt;clisp&lt;/code&gt; / &lt;code&gt;sbcl&lt;/code&gt; / &lt;code&gt;ccl&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Clojure (&lt;code&gt;jark&lt;/code&gt; / &lt;code&gt;clj-env-dir&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Javascript (&lt;code&gt;node&lt;/code&gt; / &lt;code&gt;v8&lt;/code&gt; / &lt;code&gt;js&lt;/code&gt; / &lt;code&gt;jrunscript&lt;/code&gt; / &lt;code&gt;cscript&lt;/code&gt; / &lt;code&gt;deno&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Coffee Script (&lt;code&gt;coffee&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;JSX (&lt;code&gt;jsx&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Markdown (&lt;code&gt;Markdown.pl&lt;/code&gt; / &lt;code&gt;bluecloth&lt;/code&gt; / &lt;code&gt;kramdown&lt;/code&gt; / &lt;code&gt;pandoc&lt;/code&gt; / &lt;code&gt;redcarpet&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Haskell (&lt;code&gt;runghc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Go Language (&lt;code&gt;go&lt;/code&gt; / &lt;code&gt;gccgo&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Io (&lt;code&gt;io&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Lua (&lt;code&gt;lua&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Groovy (&lt;code&gt;groovy&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Scala (&lt;code&gt;scala&lt;/code&gt;) &lt;strong&gt;Please use UTF-8 encoding&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;HAML (&lt;code&gt;haml&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SASS (&lt;code&gt;sass&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LESS (&lt;code&gt;lessc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Erlang (&lt;code&gt;escript&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OCaml (&lt;code&gt;ocamlc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;F# (&lt;code&gt;fsharpc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ShellScript (shebang&#39;s shell)&lt;/li&gt; &#xA; &lt;li&gt;AWK (&lt;code&gt;awk&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Rust (&lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dart (&lt;code&gt;dart&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Elixir (&lt;code&gt;elixir&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TypeScript (&lt;code&gt;tsc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Tcl (&lt;code&gt;tclsh&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Swift (&lt;code&gt;swift&lt;/code&gt;, &lt;code&gt;xcrun&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ATS2 (&lt;code&gt;patscc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;R (&lt;code&gt;Rscript&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nim/NimScript (&lt;code&gt;nim&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Julia (&lt;code&gt;julia&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Gnuplot (&lt;code&gt;gnuplot&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kotlin (&lt;code&gt;kotlin&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Crystal (&lt;code&gt;crystal&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;V (&lt;code&gt;v&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Applescript (&lt;code&gt;osascript&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Assembly Language (&lt;code&gt;nasm&lt;/code&gt;, &lt;code&gt;masm&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also &lt;code&gt;quickrun--support-languages&lt;/code&gt; global variable.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Execute current buffer. If &lt;code&gt;quickrun.el&lt;/code&gt; does not find command-key, then &lt;code&gt;quickrun.el&lt;/code&gt; asks you command-key(You always input command if you use &lt;code&gt;C-u&lt;/code&gt; prefix key)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-select&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Like &lt;code&gt;quickrun&lt;/code&gt; command but select the backend before the execution.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-region&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Execute region. (Java is not supported)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-with-arg&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Execute current buffer with arguments. &lt;code&gt;quickrun.el&lt;/code&gt; asks you command line argument&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-shell&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Execute current buffer in eshell for interactive command such as program which reads input from STDIN.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-compile-only&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Compile current buffer with compile.el framework, not execute. quickrun with &lt;code&gt;C-u C-u&lt;/code&gt; prefix behaves same as quickrun-compile-only.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-compile-only-select&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Like &lt;code&gt;quickrun-compile-only&lt;/code&gt; command but select the backend before the execution.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-replace-region&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Replace region of code with its output.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;quickrun-autorun-mode&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Minor mode which executes &lt;code&gt;quickrun&lt;/code&gt; after saving buffer.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;helm-quickrun&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x quickrun&lt;/code&gt; with helm interface&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;anything-quickrun&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x quickrun&lt;/code&gt; with anything interface&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;If quickrun returns &lt;code&gt;command not found&lt;/code&gt;, please check &lt;code&gt;(executable-find &#34;THE_COMMAND_NAME&#34;)&lt;/code&gt; [for example &lt;code&gt;(executable-find &#34;gnuplot&#34;)&lt;/code&gt;] . If this returns &lt;code&gt;nil&lt;/code&gt;, I strongly recommend you use &lt;a href=&#34;https://github.com/purcell/exec-path-from-shell&#34;&gt;https://github.com/purcell/exec-path-from-shell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Send File to STDIN&lt;/h2&gt; &#xA;&lt;p&gt;If &lt;code&gt;executed_file.qrinput&lt;/code&gt;(like &lt;code&gt;foo.c.qrinput&lt;/code&gt;) is existed in directory same as executed buffer file, &lt;code&gt;quickrun.el&lt;/code&gt; sends its content to stdin of executed program. Please set &lt;code&gt;quickrun-input-file-extension&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; If you want to disable this feature.&lt;/p&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;quickrun-focus-p&lt;/code&gt;(Default: &lt;code&gt;t&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;If this value is &lt;code&gt;nil&lt;/code&gt;, quickrun.el does not move focus to output buffer.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;quickrun-truncate-lines&lt;/code&gt;(Default: &lt;code&gt;t&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;truncate-lines&#39; value for &lt;/code&gt;&lt;em&gt;quickrun&lt;/em&gt;` buffer.&lt;/p&gt; &#xA;&lt;h2&gt;User Defined Command&lt;/h2&gt; &#xA;&lt;p&gt;You can add your own command or override existsing command by &lt;code&gt;quickrun-add-command&lt;/code&gt; as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Use this parameter as C++ default&#xA;(quickrun-add-command &#34;c++/c1z&#34;&#xA;  &#39;((:command . &#34;g++&#34;)&#xA;    (:exec    . (&#34;%c -std=c++1z %o -o %e %s&#34;&#xA;&#x9;&#x9; &#34;%e %a&#34;))&#xA;    (:remove  . (&#34;%e&#34;)))&#xA;  :default &#34;c++&#34;)&#xA;&#xA;;; Use this parameter in pod-mode&#xA;(quickrun-add-command &#34;pod&#34;&#xA;  &#39;((:command . &#34;perldoc&#34;)&#xA;    (:exec    . &#34;%c -T -F %s&#34;))&#xA;  :mode &#39;pod-mode)&#xA;&#xA;;; You can override existing command&#xA;(quickrun-add-command &#34;c/gcc&#34;&#xA;  &#39;((:exec . (&#34;%c -std=c++1z %o -o %e %s&#34;&#xA;&#x9;      &#34;%e %a&#34;)))&#xA;  :override t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First argument of &lt;code&gt;quickrun-add-command&lt;/code&gt; is command key. Second argument of it is command parameter, which is described laster. &lt;code&gt;quickrun-add-command&lt;/code&gt; also takes key parameters, &lt;code&gt;:default&lt;/code&gt;, &lt;code&gt;:mode&lt;/code&gt;, &lt;code&gt;:override&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Argument&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;:default&lt;/code&gt; lang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use this command parameter as default in specified language&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;:mode&lt;/code&gt; mode&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;this command parameter in specified mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;:override&lt;/code&gt; bool&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Override existing parameter with specified parameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Command Parameter&lt;/h3&gt; &#xA;&lt;p&gt;Command alist has following parameters,&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:command&lt;/code&gt;(mandatory parameter)&lt;/h4&gt; &#xA;&lt;p&gt;Command name. &lt;code&gt;%c&lt;/code&gt; is expanded into this value.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:cmdopt&lt;/code&gt;(optional)&lt;/h4&gt; &#xA;&lt;p&gt;Command(&lt;code&gt;:command&lt;/code&gt;) option. &lt;code&gt;%o&lt;/code&gt; is expanded into this value.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:exec&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Executed commands. You can also set command list parameter. If you set list parameter, &lt;code&gt;quickrun.el&lt;/code&gt; executes command list in order.&lt;/p&gt; &#xA;&lt;p&gt;If this parameter is omitted, &lt;code&gt;quickrun.el&lt;/code&gt; use default execute command template &#34;%c %o %s %a&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:timeout&lt;/code&gt;(optional)&lt;/h4&gt; &#xA;&lt;p&gt;Timeout in seconds for the process spawn by the command. This value takes precedence over the &lt;code&gt;quickrun-timeout-seconds&lt;/code&gt; custom variable.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:compile-only&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Command exected by &lt;code&gt;quickrun-compile-only&lt;/code&gt;. This option is used for syntax check or converting another language(e.g. CoffeeScript =&amp;gt; JavaScript).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;:compile-conf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Configuration of &lt;code&gt;quickrun-compile-only&lt;/code&gt;. This parameter must be alist.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:remove&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Remove files after executing. If command create some intermediate files, you should set this parameter. :remove value is atom or list.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:outputter&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Please see Outputter section.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:default-directory&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Directory where commands are executed.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:tempfile&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use temporary file or not. &lt;code&gt;quickrun.el&lt;/code&gt; uses temporary file if you omit this parameter.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If you set this parameter, you cannot use &lt;code&gt;quickrun-region&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;:description&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Description of this command. This parameter is used in &lt;code&gt;helm-quickrun&lt;/code&gt; or &lt;code&gt;anything-quickrun&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Placeholders&lt;/h3&gt; &#xA;&lt;p&gt;You can use following placeholders in command parameter&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Placeholder&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Expanded&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%o&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Command line option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Source(absolute path)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Script&#39;s arguments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Source without extension(absolute path)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%N&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Source without extension(nondirectory)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Directory name of Source(absolute path)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%e&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Source with executable suffix(absolute path)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%E&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Source with executable suffix(nondirectory)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Source file name(&lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%n&lt;/code&gt; etc) is not original file name except Java language. Because &lt;code&gt;quickrun.el&lt;/code&gt; copys source file to temporary file firstly.&lt;/p&gt; &#xA;&lt;h2&gt;Change Default Command&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;quickrun-set-default&lt;/code&gt; changes default command in language that is registerd multiple command parameters(like c, c++,Javascript).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(quickrun-set-default &#34;c&#34; &#34;c/clang&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that quickrun uses &#34;c/clang&#34; for C files.&lt;/p&gt; &#xA;&lt;h2&gt;Timeout Seconds&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;quickrun.el&lt;/code&gt; kills process if program run over 10 seconds as default. This avoids infinite loop program or endless program by some mistakes. You control timeout second to set &lt;code&gt;quickrun-timeout-seconds&lt;/code&gt;. This feature is disabled if &lt;code&gt;quickrun-timeout-seconds&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. The timeout can also be set per command with the &lt;code&gt;:timeout&lt;/code&gt; parameter. (You can also kill process by &lt;code&gt;C-c C-c&lt;/code&gt; in quickrun buffer)&lt;/p&gt; &#xA;&lt;h2&gt;Key bindings in quickrun buffer&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Close quickrun window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;C-c C-c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kill quickrun process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Buffer Local Variables&lt;/h2&gt; &#xA;&lt;p&gt;Buffer local variables is priority to default parameters.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-option-cmd-alist&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Command alist.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-option-command&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Command key(Expanded to %c)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-option-cmdkey&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Command key of command parameter.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-option-cmdopt&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Command option(Expanded to %o)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-option-args&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Program argument(Expanded to %a.)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-option-shebang&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If this value is &lt;code&gt;non-nil&lt;/code&gt; and first line of source file is started &#34;#!&#34;, the following string is treated as &#34;:command&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-option-outputter&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Outputter function. See &lt;em&gt;Outputter&lt;/em&gt; section&lt;/p&gt; &#xA;&lt;h3&gt;Example of buffer local variable&lt;/h3&gt; &#xA;&lt;p&gt;Setting C++11.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;vector&amp;gt;&#xA;#include &amp;lt;string&amp;gt;&#xA;&#xA;int main (int argc, char *argv[])&#xA;{&#xA;    std::vector &amp;lt;std::string&amp;gt; lst = { &#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34; };&#xA;&#xA;    for (auto x : lst) {&#xA;        std::cout &amp;lt;&amp;lt; &#34;[&#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &#34;]&#34; &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;&#xA;    for (auto i = 1; i &amp;lt; argc; i++) {&#xA;        std::cout &amp;lt;&amp;lt; &#34;[&#34; &amp;lt;&amp;lt; argv[i] &amp;lt;&amp;lt; &#34;]&#34; &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;&#xA;    return 0;&#xA;}&#xA;&#xA;/*&#xA;  Local Variables:&#xA;  quickrun-option-cmd-alist: ((:command . &#34;g++&#34;)&#xA;                              (:exec    . (&#34;%c -std=c++0x -o %n %s&#34;&#xA;                                           &#34;%n apple orange melon&#34;))&#xA;                              (:remove  . (&#34;%n&#34;)))&#xA;  End:&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hooks&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;code&gt;quickrun-after-run-hook&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Run hooks after execute all commands.&lt;/p&gt; &#xA;&lt;h2&gt;Outputter&lt;/h2&gt; &#xA;&lt;p&gt;Outputter is a function for processing command output. Default outputter is to output to *quickrun* buffer and processing ANSI Color sequence.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;quickrun.el&lt;/code&gt; defines following functions as default.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;buffer:buffername&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Output to buffer. &lt;a href=&#34;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_buffer.pl&#34;&gt;outputter &lt;em&gt;buffer&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;file:filename&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Output to file. &lt;a href=&#34;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_file.pl&#34;&gt;outputter &lt;em&gt;file&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;variable:varname&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Output to variable. &lt;a href=&#34;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_variable.pl&#34;&gt;outputter &lt;em&gt;variable&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;browser&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Output to Web browser(using function &lt;em&gt;browse-url&lt;/em&gt;) &lt;a href=&#34;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_browser.pl&#34;&gt;outputter &lt;em&gt;browser&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;message&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Output to *Message* buffer(using function &lt;em&gt;message&lt;/em&gt;) &lt;a href=&#34;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_message.pl&#34;&gt;outputter &lt;em&gt;message&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;multi&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Use multiple outputters. &lt;a href=&#34;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_multi.pl&#34;&gt;outputter &lt;em&gt;multi&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;null&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;No output. &lt;a href=&#34;https://raw.githubusercontent.com/emacsorphanage/quickrun/master/sample/sample_outputter_null.pl&#34;&gt;outputter &lt;em&gt;null&lt;/em&gt; sample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using quickrun as function from other functions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;quickrun&lt;/code&gt; can be used as function from other functions. You can pass configuration by &lt;code&gt;:source&lt;/code&gt; argument. Sample is following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun test-perl ()&#xA;  (interactive)&#xA;  (let* ((cmd &#34;git rev-parse --show-toplevel&#34;)&#xA;         (topdir (with-temp-buffer&#xA;                   (call-process-shell-command cmd nil t nil)&#xA;                   (goto-char (point-min))&#xA;                   (if (re-search-forward &#34;^\\(.+\\)$&#34; nil t)&#xA;                       (match-string 1)))))&#xA;    (quickrun :source `((:command . &#34;prove&#34;)&#xA;                        (:default-directory . ,topdir)&#xA;                        (:exec . (&#34;%c -bv --color %s&#34;))))))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>magit/orgit</title>
    <updated>2023-09-24T01:49:54Z</updated>
    <id>tag:github.com,2023-09-24:/magit/orgit</id>
    <link href="https://github.com/magit/orgit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Support for Org links to Magit buffers&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Link to Magit buffers from Org documents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package defines several Org link types, which can be used to link to certain Magit buffers. Use the command &lt;del&gt;org-store-link&lt;/del&gt; while such a buffer is current to store a link. Later you can insert it into an Org buffer using the command &lt;del&gt;org-insert-link&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Format&lt;/p&gt; &#xA;&lt;p&gt;The three link types defined here take these forms:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src text orgit:/path/to/repo/ links to a magit-status buffer orgit-log:/path/to/repo/::REV links to a magit-log buffer orgit-rev:/path/to/repo/::ARGS links to a magit-revision buffer #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Before &lt;del&gt;v1.3.0&lt;/del&gt; only the first revision was stored in &lt;del&gt;orgit-log&lt;/del&gt; links, and all other revisions were discarded. All other arguments were also discarded and Magit&#39;s usual mechanism for determining the switches and options was used instead.&lt;/p&gt; &#xA;&lt;p&gt;For backward compatibility, and because it is the common case and looks best, ARGS by default has the form &lt;del&gt;REV&lt;/del&gt; as before. However if linking to a log buffer that shows the log for multiple revisions, then &lt;del&gt;(&#34;REV&#34;...)&lt;/del&gt; is used instead. If &lt;del&gt;orgit-log-save-arguments&lt;/del&gt; is non-nil, then &lt;del&gt;((&#34;REV&#34;...) (&#34;ARG&#34;...) [(&#34;FILE&#34;...)])&lt;/del&gt; is always used, which allows restoring the buffer most faithfully.&lt;/p&gt; &#xA;&lt;p&gt;** Export&lt;/p&gt; &#xA;&lt;p&gt;When an Org file containing such links is exported, then the url of the remote configured with &lt;del&gt;orgit-remote&lt;/del&gt; is used to generate a web url according to &lt;del&gt;orgit-export-alist&lt;/del&gt;. That webpage should present approximately the same information as the Magit buffer would.&lt;/p&gt; &#xA;&lt;p&gt;Both the remote to be considered the public remote, as well as the actual web urls can be defined in individual repositories using Git variables.&lt;/p&gt; &#xA;&lt;p&gt;To use a remote different from &lt;del&gt;orgit-remote&lt;/del&gt; but still use &lt;del&gt;orgit-export-alist&lt;/del&gt; to generate the web urls, use:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src text git config orgit.remote REMOTE-NAME #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To explicitly define the web urls, use something like:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src text git config orgit.status &lt;a href=&#34;http://example.com/repo/overview&#34;&gt;http://example.com/repo/overview&lt;/a&gt; git config orgit.log &lt;a href=&#34;http://example.com/repo/history/%r&#34;&gt;http://example.com/repo/history/%r&lt;/a&gt; git config orgit.rev &lt;a href=&#34;http://example.com/repo/revision/%r&#34;&gt;http://example.com/repo/revision/%r&lt;/a&gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;br&gt;&lt;br&gt; #+html: &lt;a href=&#34;https://github.com/magit/orgit/actions/workflows/compile.yml&#34;&gt;&lt;img alt=&#34;Compile&#34; src=&#34;https://github.com/magit/orgit/actions/workflows/compile.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/orgit&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/orgit-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/orgit&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/orgit-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>