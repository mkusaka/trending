<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-08T01:54:02Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dgutov/diff-hl</title>
    <updated>2023-01-08T01:54:02Z</updated>
    <id>tag:github.com,2023-01-08:/dgutov/diff-hl</id>
    <link href="https://github.com/dgutov/diff-hl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package for highlighting uncommitted changes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;diff-hl-mode&lt;/code&gt; highlights uncommitted changes on the left side of the window (area also known as the &#34;gutter&#34;), allows you to jump between and revert them selectively.&lt;/p&gt; &#xA;&lt;p&gt;In buffers controlled by Git, you can also stage and unstage the changes.&lt;/p&gt; &#xA;&lt;p&gt;For the usage instructions and the list of commands, see the Commentary section inside the file.&lt;/p&gt; &#xA;&lt;p&gt;Tested with Git, Mercurial, Bazaar and SVN. May work with other VC backends, too.&lt;/p&gt; &#xA;&lt;p&gt;The package also contains auxiliary modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-dired-mode&lt;/code&gt; provides similar functionality in Dired.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-margin-mode&lt;/code&gt; changes the highlighting function to use the margin instead of the fringe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-amend-mode&lt;/code&gt; sets the reference revision to the one before recent one. Also, you could use &lt;code&gt;diff-hl-set-reference-rev&lt;/code&gt; to set it to any revision, see its docstring for details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-flydiff-mode&lt;/code&gt; implements highlighting changes on the fly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff-hl-show-hunk-mouse-mode&lt;/code&gt; makes fringe and margin react to mouse clicks to show the curresponding hunk. That&#39;s the alternative to using &lt;code&gt;diff-hl-show-hunk&lt;/code&gt; and friends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Put this into your init script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(global-diff-hl-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must also ensure that VC is enabled (e.g. &lt;code&gt;vc-handled-backends&lt;/code&gt; is not nil).&lt;/p&gt; &#xA;&lt;p&gt;Check out the Commentary section in each file for more detailed usage instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;h2&gt;diff-hl-mode&lt;/h2&gt; &#xA;&lt;p&gt;Top window: a buffer in this minor mode, bottom window: the corresponding diff.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgutov/diff-hl/master/screenshot.png&#34; alt=&#34;screenie&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;diff-hl-dired-mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgutov/diff-hl/master/screenshot-dired.png&#34; alt=&#34;screenie&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;diff-hl-margin-mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgutov/diff-hl/master/screenshot-margin.png&#34; alt=&#34;screenie&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Emacs 25.1+.&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;By default &lt;code&gt;diff-hl-mode&lt;/code&gt; uses the corresponding VC diff command, so it&#39;s only accurate when the buffer is in saved state. Check out &lt;code&gt;diff-hl-flydiff-mode&lt;/code&gt;, it aims to handle unsaved buffers as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use an &lt;a href=&#34;http://stackoverflow.com/questions/32365271/whats-the-difference-between-git-diff-patience-and-git-diff-histogram&#34;&gt;alternative diff algorithm&lt;/a&gt; with Git, add a corresponding argument to &lt;code&gt;vc-git-diff-switches&lt;/code&gt;, e.g. &lt;code&gt;(setq vc-git-diff-switches &#39;(&#34;--histogram&#34;))&lt;/code&gt;. Using the &lt;code&gt;diff.algorithm&lt;/code&gt; option doesn&#39;t work &lt;a href=&#34;http://article.gmane.org/gmane.comp.version-control.git/294622&#34;&gt;because&lt;/a&gt; &lt;code&gt;vc-git-diff&lt;/code&gt; calls &lt;code&gt;git diff-index&lt;/code&gt;. &lt;code&gt;diff-hl-flydiff-mode&lt;/code&gt; does not support alternative algorithms, because it uses the external &lt;code&gt;diff&lt;/code&gt; program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We conflict with other modes when they put indicators on the fringe, such as &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt;. This is rarely a significant problem, since if you&#39;re using such a mode, you&#39;d usually want to fix all errors and warnings before continuing, and then the conflicting indicators go away.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s no fringe when Emacs is running in the console, but the navigation and revert commands still work. Consider turning &lt;code&gt;diff-hl-margin-mode&lt;/code&gt; on, to show the indicators in the margin instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Frame-local and buffer-local values of &lt;code&gt;line-spacing&lt;/code&gt; are not supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fringe width up to 16 works best (because we can&#39;t define a bitmap with width above that number).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/syohex/emacs-git-gutter&#34;&gt;emacs-git-gutter&lt;/a&gt; shows indicators in the margin by default, allows you to customize how the indicators look more easily, and has a &#34;stage hunk&#34; command.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Integration&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re using some package other than &lt;code&gt;vc&lt;/code&gt; to commit changes, it might not run &lt;code&gt;vc-checkin-hook&lt;/code&gt; after commits. In that case, you&#39;ll need to either add &lt;code&gt;diff-hl-update&lt;/code&gt; to the hook it does run, or advise some function that&#39;s called in the buffer after its state has changed.&lt;/p&gt; &#xA;&lt;h2&gt;psvn&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(advice-add &#39;svn-status-update-modeline :after #&#39;diff-hl-update)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Magit&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using a version before 2.4.0, it defines &lt;code&gt;magit-revert-buffer-hook&lt;/code&gt; (or &lt;code&gt;magit-not-reverted-hook&lt;/code&gt;), which we use.&lt;/p&gt; &#xA;&lt;p&gt;When using Magit 2.4 or newer, add this to your init script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;magit-pre-refresh-hook &#39;diff-hl-magit-pre-refresh)&#xA;(add-hook &#39;magit-post-refresh-hook &#39;diff-hl-magit-post-refresh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tramp&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;diff-hl&lt;/code&gt; should just work with Tramp. But slow or high latency connections can cause performance problems. If you experience such issues, customize &lt;code&gt;diff-hl-disable-on-remote&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;. This will change the behavior of both &lt;code&gt;turn-on-diff-hl-mode&lt;/code&gt; and &lt;code&gt;global-diff-hl-mode&lt;/code&gt; (whichever you prefer to use).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/epkg</title>
    <updated>2023-01-08T01:54:02Z</updated>
    <id>tag:github.com,2023-01-08:/emacscollective/epkg</id>
    <link href="https://github.com/emacscollective/epkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Browse the Emacsmirror package database&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Browse the Emacsmirror package database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides access to a local copy of the [[https://emacsmirror.net][Emacsmirror]] package database. It provides low-level functions for querying the database and a &lt;del&gt;package.el&lt;/del&gt;-like user interface for browsing the available packages.&lt;/p&gt; &#xA;&lt;p&gt;The Emacsmirror is a growing collection of Emacs Lisp packages. All mirrored packages are available as Git repositories. In most cases this is done by mirroring the upstream Git repository, but if upstream uses something else, then the mirror nevertheless makes the package available as a Git repository.&lt;/p&gt; &#xA;&lt;p&gt;One primary purpose of the Emacsmirror is to provide a comprehensive list of available Emacs packages, including packages which have gone out of fashion (but might later prove to be useful still).&lt;/p&gt; &#xA;&lt;p&gt;For more information see the [[https://emacsmirror.net/manual/epkg][manual]] and the [[https://emacsmirror.net][Emacsmirror]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>radian-software/prescient.el</title>
    <updated>2023-01-08T01:54:02Z</updated>
    <id>tag:github.com,2023-01-08:/radian-software/prescient.el</id>
    <link href="https://github.com/radian-software/prescient.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;☄️ Simple but effective sorting and filtering for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;prescient.el:&lt;/strong&gt; simple but effective sorting and filtering for Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prescient.el&lt;/code&gt; is a library which sorts and filters lists of candidates, such as appear when you use a package like &lt;a href=&#34;https://github.com/abo-abo/swiper#ivy&#34;&gt;Ivy&lt;/a&gt; or &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;Company&lt;/a&gt;. Extension packages such as &lt;code&gt;ivy-prescient.el&lt;/code&gt; and &lt;code&gt;company-prescient.el&lt;/code&gt; adapt the library for usage with various frameworks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;prescient.el&lt;/code&gt; also provides a completion style (&lt;code&gt;prescient&lt;/code&gt;) for filtering candidates via Emacs&#39;s generic completion, such as in &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html&#34;&gt;Icomplete&lt;/a&gt;, &lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt;, and &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;Corfu&lt;/a&gt;. These last two have extension packages to correctly set up filtering and sorting.&lt;/p&gt; &#xA;&lt;p&gt;As compared to other packages which accomplish similar tasks, including &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/ido.html&#34;&gt;IDO&lt;/a&gt;, &lt;a href=&#34;https://github.com/abo-abo/swiper#ivy&#34;&gt;Ivy&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;Helm&lt;/a&gt;, &lt;a href=&#34;https://github.com/nonsequitur/smex&#34;&gt;Smex&lt;/a&gt;, &lt;a href=&#34;https://github.com/lewang/flx&#34;&gt;Flx&lt;/a&gt;, &lt;a href=&#34;https://github.com/PythonNut/historian.el&#34;&gt;Historian&lt;/a&gt;, and &lt;a href=&#34;https://github.com/company-mode/company-statistics&#34;&gt;Company-Statistics&lt;/a&gt;, &lt;code&gt;prescient.el&lt;/code&gt; aims to be simpler, more predictable, and faster.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prescient.el&lt;/code&gt; is available on MELPA as six separate packages (one for the library, and the rest for integrating with other frameworks):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melpa.org/#/prescient&#34;&gt;&lt;code&gt;prescient&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melpa.org/#/corfu-prescient&#34;&gt;&lt;code&gt;corfu-prescient&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melpa.org/#/company-prescient&#34;&gt;&lt;code&gt;company-prescient&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melpa.org/#/ivy-prescient&#34;&gt;&lt;code&gt;ivy-prescient&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melpa.org/#/selectrum-prescient&#34;&gt;&lt;code&gt;selectrum-prescient&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melpa.org/#/vertico-prescient&#34;&gt;&lt;code&gt;vertico-prescient&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The easiest way to install these packages is using &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;&lt;code&gt;straight.el&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(straight-use-package &#39;prescient)&#xA;(straight-use-package &#39;corfu-prescient)&#xA;(straight-use-package &#39;company-prescient)&#xA;(straight-use-package &#39;ivy-prescient)&#xA;(straight-use-package &#39;selectrum-prescient)&#xA;(straight-use-package &#39;vertico-prescient)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, you may install using any other package manager if you prefer.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prescient.el&lt;/code&gt; and the extension packages provide modes that configure filtering and/or sorting in their respective framework. These modes can have their own settings, such as ways to set up filtering but not sorting, which are described in a following section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To cause Emacs to use the &lt;code&gt;prescient&lt;/code&gt; completion style for filtering, add &lt;code&gt;prescient&lt;/code&gt; to the user option &lt;code&gt;completion-styles&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To cause &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;Corfu&lt;/a&gt; to use &lt;code&gt;prescient.el&lt;/code&gt; sorting and filtering, enable &lt;code&gt;corfu-prescient-mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To cause &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;Company&lt;/a&gt; to use &lt;code&gt;prescient.el&lt;/code&gt; sorting, enable &lt;code&gt;company-prescient-mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To cause &lt;a href=&#34;https://github.com/abo-abo/swiper#ivy&#34;&gt;Ivy&lt;/a&gt; to use &lt;code&gt;prescient.el&lt;/code&gt; sorting and filtering, enable &lt;code&gt;ivy-prescient-mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To cause &lt;a href=&#34;https://github.com/raxod502/selectrum&#34;&gt;Selectrum&lt;/a&gt; to use &lt;code&gt;prescient.el&lt;/code&gt; sorting and filtering, enable &lt;code&gt;selectrum-prescient-mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To cause &lt;a href=&#34;https://github.com/minad/vertico&#34;&gt;Vertico&lt;/a&gt; to use &lt;code&gt;prescient.el&lt;/code&gt; sorting and filtering, enable &lt;code&gt;vertico-prescient-mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To cause your usage statistics to be saved between Emacs sessions, enable &lt;code&gt;prescient-persist-mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note that &lt;strong&gt;you must load Counsel before &lt;code&gt;ivy-prescient.el&lt;/code&gt;&lt;/strong&gt;. This is because loading Counsel results in a number of changes being made to the user options of Ivy, which &lt;code&gt;ivy-prescient.el&lt;/code&gt; must then undo.&lt;/p&gt; &#xA;&lt;h2&gt;Algorithm&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;prescient.el&lt;/code&gt; takes as input a list of candidates, and a query that you type.&lt;/p&gt; &#xA;&lt;p&gt;When filtering, the query is first split on spaces into subqueries (two consecutive spaces match a literal space). Each subquery filters the candidates according to the filter methods listed in &lt;code&gt;prescient-filter-method&lt;/code&gt;. By default, a subquery must match as either a substring of the candidate, a regexp, or an initialism (e.g. &lt;code&gt;ffap&lt;/code&gt; matches &lt;code&gt;find-file-at-point&lt;/code&gt;, and so does &lt;code&gt;fa&lt;/code&gt;). A candidate must match all subqueries to pass the filter and subqueries can be matched in any order.&lt;/p&gt; &#xA;&lt;p&gt;When sorting, the last few candidates you selected are displayed first, followed by the most frequently selected ones, and then the remaining candidates are sorted by length.&lt;/p&gt; &#xA;&lt;p&gt;If you would like &lt;code&gt;prescient.el&lt;/code&gt; to forget about a candidate, use the command &lt;code&gt;prescient-forget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration and other features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-history-length&lt;/code&gt;: The number of recently selected candidates that are remembered and displayed at the top of the list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-frequency-decay&lt;/code&gt;: &lt;code&gt;prescient.el&lt;/code&gt; keeps a &#34;frequency&#34; for each selected candidate, which is incremented by one each time you select the candidate. To keep things tidy, frequencies are multiplied by this variable&#39;s value each time you select a new candidate, so they decrease over time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-frequency-threshold&lt;/code&gt;: Once the frequency for an infrequently used command falls below the value of this variable, &lt;code&gt;prescient.el&lt;/code&gt; forgets about it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-save-file&lt;/code&gt;: Where to save statistics that are persisted between Emacs sessions when &lt;code&gt;prescient-persist-mode&lt;/code&gt; is active. The default value follows the conventions of &lt;a href=&#34;https://github.com/emacscollective/no-littering&#34;&gt;&lt;code&gt;no-littering&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-filter-method&lt;/code&gt;: A list of algorithms to use for filtering candidates. The default is &lt;code&gt;literal&lt;/code&gt;, &lt;code&gt;regexp&lt;/code&gt;, and &lt;code&gt;initialism&lt;/code&gt; as described above, but you can also use substring matching, initialism matching, regexp matching, fuzzy matching, prefix matching, anchored matching, literal-prefix matching, or any combination of those. See the docstring for full details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-filter-alist&lt;/code&gt;: An alist of symbol-function pairs that associate a symbol in &lt;code&gt;prescient-filter-method&lt;/code&gt; with a function that creates a regexp for matching a candidate. You can add to this alist to define your own custom filter methods, and use them by adding the appropriate symbol to &lt;code&gt;prescient-filter-method&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-sort-full-matches-first&lt;/code&gt;: Whether &lt;code&gt;prescient.el&lt;/code&gt; sorts candidates that are fully matched before candidates that are partially matched. This user option affects:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;corfu-prescient.el&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;company-prescient.el&lt;/code&gt; for Company backends that used the &lt;code&gt;prescient&lt;/code&gt; completion style for filtering&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;selectrum-prescient.el&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vertico-prescient.el&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-sort-length-enable&lt;/code&gt;: Whether to sort the candidates by length in addition to recency and frequency.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-use-char-folding&lt;/code&gt;: Whether the &lt;code&gt;literal&lt;/code&gt; and &lt;code&gt;literal-prefix&lt;/code&gt; filter methods use character folding.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;prescient-use-case-folding&lt;/code&gt;: Whether filtering methods use case folding (in non-Emacs terms, whether they are case insensitive). This can be one of &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, or &lt;code&gt;smart&lt;/code&gt; (the default). If &lt;code&gt;smart&lt;/code&gt;, then case folding is disabled when upper-case characters are used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quickly adjusting filtering: Commands are available to temporarily toggle filter methods on or off while you&#39;re completing candidates. These commands are similar in usage to Isearch&#39;s own toggling commands, except that multiple filtering methods can be active at the same time.&lt;/p&gt; &lt;p&gt;For example, to toggle regexp filtering on or off (perhaps you&#39;re searching for a long/complex candidate), you can press &lt;code&gt;M-s r&lt;/code&gt;. If you wish to use &lt;em&gt;only&lt;/em&gt; regexp filtering, you can use &lt;code&gt;C-u M-s r&lt;/code&gt; to unconditionally turn on regexp filtering and turn off all other methods. This toggling is a buffer-local effect, and does not change the default filtering behavior. For that, customize &lt;code&gt;prescient-filter-method&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;selectrum-prescient.el&lt;/code&gt; and &lt;code&gt;vertico-prescient.el&lt;/code&gt; will both bind commands to toggle filter methods in the current completion buffer. &lt;code&gt;corfu-prescient.el&lt;/code&gt; will bind the commands while the Corfu pop-up is active. While the integration mode is enabled, &lt;code&gt;M-s&lt;/code&gt; is bound to &lt;code&gt;prescient-toggle-map&lt;/code&gt; in the completion buffer or Corfu pop-up, and is used as a prefix key to access the commands.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Key&lt;/th&gt; &#xA;     &lt;th&gt;Command&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;M-s a&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;prescient-toggle-anchored&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;M-s f&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;prescient-toggle-fuzzy&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;M-s i&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;prescient-toggle-initialism&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;M-s l&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;prescient-toggle-literal&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;M-s p&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;prescient-toggle-prefix&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;M-s P&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;prescient-toggle-literal-prefix&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;M-s r&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;prescient-toggle-regexp&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;M-s &#39;&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;prescient-toggle-char-fold&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;M-s c&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;prescient-toggle-case-fold&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;p&gt;When defining custom filter methods, you can create new bindings using &lt;code&gt;prescient-create-and-bind-toggle-command&lt;/code&gt;, which takes an unquoted filter symbol and a string that can be used by &lt;code&gt;kbd&lt;/code&gt;. For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(prescient-create-and-bind-toggle-command my-foo &#34;M-f&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;will bind a command for toggling the &lt;code&gt;my-foo&lt;/code&gt; filter to &lt;code&gt;M-s M-f&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Faces&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;prescient.el&lt;/code&gt; defines two faces: &lt;code&gt;prescient-primary-highlight&lt;/code&gt; and &lt;code&gt;prescient-secondary-highlight&lt;/code&gt;. The primary highlight is used to highlight matches in candidates. The secondary highlight is used for important sections within each matched region. For example, the &lt;code&gt;initialism&lt;/code&gt; filter method highlights the entire match with &lt;code&gt;prescient-primary-highlight&lt;/code&gt; and each initial in the initialism with &lt;code&gt;prescient-secondary-highlight&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These faces are used by the &lt;code&gt;prescient&lt;/code&gt; completion style (and so completion frameworks using that style, such as Corfu and Vertico) and Selectrum. &lt;code&gt;ivy-prescient.el&lt;/code&gt; uses Ivy&#39;s faces.&lt;/p&gt; &#xA;&lt;p&gt;The following example shows customizing these faces. I use the &lt;a href=&#34;https://github.com/NicolasPetton/zerodark-theme&#34;&gt;Zerodark&lt;/a&gt; color theme, which includes colors for Ivy, but not for Selectrum. I inspected the theme source code to see what colors were being used for Ivy, and copied them to be used for Selectrum as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;zerodark-theme)&#xA;&#xA;(let ((class &#39;((class color) (min-colors 89))))&#xA;  (custom-theme-set-faces&#xA;   &#39;zerodark&#xA;   `(selectrum-current-candidate&#xA;     ((,class (:background &#34;#48384c&#34;&#xA;                           :weight bold&#xA;                           :foreground &#34;#c678dd&#34;))))&#xA;   `(prescient-primary-highlight&#xA;     ((,class (:foreground &#34;#da8548&#34;))))&#xA;   `(prescient-secondary-highlight&#xA;     ((,class (:foreground &#34;#98be65&#34;))))))&#xA;&#xA;(enable-theme &#39;zerodark)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For the completion style&lt;/h3&gt; &#xA;&lt;p&gt;The following user options are specific to using the &lt;code&gt;prescient&lt;/code&gt; completion style:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;prescient-completion-highlight-matches&lt;/code&gt;: Whether the completion style should highlight matches in the filtered candidates using the faces &lt;code&gt;prescient-primary-highlight&lt;/code&gt; and &lt;code&gt;prescient-secondary-highlight&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Corfu&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;corfu-prescient.el&lt;/code&gt; configures filtering locally in buffers in which &lt;code&gt;corfu-mode&lt;/code&gt; is active. To do this, it modifies the values of &lt;code&gt;completion-styles&lt;/code&gt;, &lt;code&gt;completion-category-overrides&lt;/code&gt;, and &lt;code&gt;completion-category-defaults&lt;/code&gt;. Sorting is configured globally.&lt;/p&gt; &#xA;&lt;p&gt;The following user options are specific to using &lt;code&gt;prescient.el&lt;/code&gt; with Corfu:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;corfu-prescient-completion-styles&lt;/code&gt;: What the value of &lt;code&gt;completion-styles&lt;/code&gt; is changed to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;corfu-prescient-completion-category-overrides&lt;/code&gt;: Overrides that should be included in &lt;code&gt;completion-category-overrides&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;corfu-prescient-enable-filtering&lt;/code&gt;: If non-nil when &lt;code&gt;corfu-prescient-mode&lt;/code&gt; is enabled, then&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;M-s&lt;/code&gt; is bound to &lt;code&gt;prescient-toggle-map&lt;/code&gt; while the Corfu pop-up is active&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;completion-styles&lt;/code&gt; is changed to the value of &lt;code&gt;corfu-prescient-completion-styles&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;completion-category-overrides&lt;/code&gt; is changed to include overrides in &lt;code&gt;corfu-prescient-completion-category-overrides&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;completion-category-defaults&lt;/code&gt; is set to &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;corfu-prescient-enable-sorting&lt;/code&gt;: If non-nil when &lt;code&gt;corfu-prescient-mode&lt;/code&gt; is enabled, then &lt;code&gt;corfu-sort-function&lt;/code&gt; is set to the function &lt;code&gt;prescient-completion-sort&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;corfu-prescient-override-sorting&lt;/code&gt;: If non-nil when &lt;code&gt;corfu-prescient-mode&lt;/code&gt; is enabled, then &lt;code&gt;corfu-sort-override-function&lt;/code&gt; is set to the function &lt;code&gt;prescient-completion-sort&lt;/code&gt; and &lt;code&gt;corfu-prescient-enable-sorting&lt;/code&gt; is made non-nil.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Company&lt;/h3&gt; &#xA;&lt;p&gt;The following user options are specific to using &lt;code&gt;prescient.el&lt;/code&gt; sorting with Company:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;company-prescient-sort-length-enable&lt;/code&gt;: By default, the standard &lt;code&gt;prescient.el&lt;/code&gt; sorting algorithm is used for all Company completions when &lt;code&gt;company-prescient-mode&lt;/code&gt; is enabled. However, this algorithm is inappropriate in some situations. In particular, some Company backends return fuzzy-matched candidates with an intelligent sorting pre-applied. In this case, the fallback sorting by length that &lt;code&gt;prescient.el&lt;/code&gt; does will just make a giant mess of things. By customizing this user option to nil for such Company backends (see &lt;a href=&#34;https://github.com/raxod502/radian/raw/06f2a30258deacb719a195221747ce1d528fc2fe/emacs/radian.el#L2513-L2532&#34;&gt;Radian&lt;/a&gt; for an example), you can avoid the problem. Then &lt;code&gt;prescient.el&lt;/code&gt; will helpfully move recently and frequently used candidates to the top of the completions list, but otherwise leave candidate ordering alone.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Ivy&lt;/h3&gt; &#xA;&lt;p&gt;The following user options are specific to using &lt;code&gt;prescient.el&lt;/code&gt; with Ivy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ivy-prescient-sort-commands&lt;/code&gt;: By default, all commands have their candidates sorted. You can override this behavior by customizing &lt;code&gt;ivy-prescient-sort-commands&lt;/code&gt;. See the docstring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ivy-prescient-retain-classic-highlighting&lt;/code&gt;: By default, the highlighting behavior of &lt;code&gt;ivy-prescient.el&lt;/code&gt; is slightly different from Ivy&#39;s highlighting for &lt;code&gt;ivy--regex-ignore-order&lt;/code&gt;. You can recover the original behavior by customizing this user option; see the docstring for more details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ivy-prescient-enable-filtering&lt;/code&gt;: If set to nil, then &lt;code&gt;ivy-prescient.el&lt;/code&gt; does not apply &lt;code&gt;prescient.el&lt;/code&gt; filtering to Ivy. See the Ivy documentation for information on how Ivy filters by default, and how to customize it manually.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ivy-prescient-enable-sorting&lt;/code&gt;: If set to nil, then &lt;code&gt;ivy-prescient.el&lt;/code&gt; does not apply &lt;code&gt;prescient.el&lt;/code&gt; sorting to Ivy. See the Ivy documentation for information on how Ivy sorts by default, and how to customize it manually.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Selectrum&lt;/h3&gt; &#xA;&lt;p&gt;The following user options are specific to using &lt;code&gt;prescient.el&lt;/code&gt; with Selectrum:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;selectrum-prescient-enable-filtering&lt;/code&gt;: If set to nil, then &lt;code&gt;selectrum-prescient.el&lt;/code&gt; does not change filtering of Selectrum. See the Selectrum documentation for information on how Selectrum configures filtering by default, and how to customize it manually.&lt;/p&gt; &lt;p&gt;Additionally, when set, the matched part of each candidate is highlighted using the faces described above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;selectrum-prescient-enable-sorting&lt;/code&gt;: If set to nil, then &lt;code&gt;selectrum-prescient.el&lt;/code&gt; does not change sorting of Selectrum. See the Selectrum documentation for information on how Selectrum configures sorting by default, and how to customize it manually.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Vertico&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;vertico-prescient.el&lt;/code&gt; configures filtering locally in the Vertico buffer. To do this, it modifies the values of &lt;code&gt;completion-styles&lt;/code&gt;, &lt;code&gt;completion-category-overrides&lt;/code&gt;, and &lt;code&gt;completion-category-defaults&lt;/code&gt;. Sorting is configured globally.&lt;/p&gt; &#xA;&lt;p&gt;The following user options are specific to using &lt;code&gt;prescient.el&lt;/code&gt; with Vertico:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vertico-prescient-completion-styles&lt;/code&gt;: What the value of &lt;code&gt;completion-styles&lt;/code&gt; is changed to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vertico-prescient-completion-category-overrides&lt;/code&gt;: Overrides that should be included in &lt;code&gt;completion-category-overrides&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vertico-prescient-enable-filtering&lt;/code&gt;: If non-nil when &lt;code&gt;vertico-prescient-mode&lt;/code&gt; is enabled, then&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;M-s&lt;/code&gt; is bound to &lt;code&gt;prescient-toggle-map&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;completion-styles&lt;/code&gt; is changed to the value of &lt;code&gt;vertico-prescient-completion-styles&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;completion-category-overrides&lt;/code&gt; is changed to include overrides in &lt;code&gt;vertico-prescient-completion-category-overrides&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;completion-category-defaults&lt;/code&gt; is set to &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vertico-prescient-enable-sorting&lt;/code&gt;: If non-nil when &lt;code&gt;vertico-prescient-mode&lt;/code&gt; is enabled, then &lt;code&gt;vertico-sort-function&lt;/code&gt; is set to the function &lt;code&gt;prescient-completion-sort&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vertico-prescient-override-sorting&lt;/code&gt;: If non-nil when &lt;code&gt;vertico-prescient-mode&lt;/code&gt; is enabled, then &lt;code&gt;vertico-sort-override-function&lt;/code&gt; is set to the function &lt;code&gt;prescient-completion-sort&lt;/code&gt; and &lt;code&gt;vertico-prescient-enable-sorting&lt;/code&gt; is made non-nil.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributor guide&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/raxod502/contributor-guide&#34;&gt;the contributor guide for my projects&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>