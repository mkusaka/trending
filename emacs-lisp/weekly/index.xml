<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-06T01:41:29Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leanprover-community/lean4-mode</title>
    <updated>2025-07-06T01:41:29Z</updated>
    <id>tag:github.com,2025-07-06:/leanprover-community/lean4-mode</id>
    <link href="https://github.com/leanprover-community/lean4-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs major mode for Lean 4&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Lean4-Mode - Emacs major mode for Lean language #+language: en #+export_file_name: lean4-mode.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Lean4-Mode: (lean4-mode). #+texinfo_dir_desc: Emacs major mode for Lean language&lt;/p&gt; &#xA;&lt;p&gt;This package extends [[https://www.gnu.org/software/emacs/][GNU Emacs]] by providing a major mode for editing code written in version 4 of the programming language and theorem prover [[https://lean-lang.org][Lean]].&lt;/p&gt; &#xA;&lt;p&gt;The Lean4-Mode source code is developed at [[https://github.com/leanprover-community/lean4-mode][Github]] and its issues tracked there too. Further discussions and question-answering takes place in the [[https://leanprover.zulipchat.com/#narrow/channel/468104-Emacs][#Emacs channel]] of Lean&#39;s Zulip chat.&lt;/p&gt; &#xA;&lt;p&gt;For legacy version 3 of Lean, use the archived [[https://github.com/leanprover/lean3-mode][Lean3-Mode]] (also known as /Lean-Mode/).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Brief and Generic Instructions&lt;/p&gt; &#xA;&lt;p&gt;First, install the dependencies of Lean4-Mode:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://lean-lang.org/lean4/doc/setup.html][Lean]] (version 4)&lt;/li&gt; &#xA; &lt;li&gt;Emacs (version 27 or later)&lt;/li&gt; &#xA; &lt;li&gt;Emacs packages [[https://github.com/magnars/dash.el][Dash]] (available on GNU-Elpa), [[https://emacs-lsp.github.io/lsp-mode][lsp-mode]], and [[https://github.com/magit/magit/blob/main/lisp/magit-section.el][Magit-Section]] (available on Melpa)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Second, install Lean4-Mode itself:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the [[https://github.com/leanprover-community/lean4-mode][Git repository of Lean4-Mode]].&lt;/li&gt; &#xA; &lt;li&gt;In your [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][Emacs initialization file]], add the path to that local repository to the &lt;del&gt;load-path&lt;/del&gt; list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Note that (require &#39;lean4-mode) is not necessary when the user&lt;/h1&gt; &#xA;&lt;h1&gt;relies on autoloading and uses the default settings.&lt;/h1&gt; &#xA;&lt;p&gt;** Detailed and Concrete Instructions&lt;/p&gt; &#xA;&lt;p&gt;Install Lean version 4.&lt;/p&gt; &#xA;&lt;p&gt;Install Emacs version 27 or later.&lt;/p&gt; &#xA;&lt;p&gt;Install the Emacs packages Dash, lsp-mode and Magit-Section. Dash is the only one of these packages that is available in the default [[https://elpa.gnu.org][GNU Elpa]] package-archive. You can install the remaining packages either from source or from [[https://melpa.org/#/getting-started][Melpa]] package-archive. For later approach, add the following to your Emacs initialization file (e.g. =~/.emacs.d/init.el=):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (require &#39;package)&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;&lt;a href=&#34;https://melpa.org/packages/&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;package-selected-packages &#39;dash) (add-to-list &#39;package-selected-packages &#39;lsp-mode) (add-to-list &#39;package-selected-packages &#39;magit-section)&lt;/p&gt; &#xA;&lt;p&gt;(package-refresh-contents) (package-install-selected-packages &#39;no-confirm) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Clone the Git repository of Lean4-Mode:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src shell git clone &lt;a href=&#34;https://github.com/leanprover-community/lean4-mode.git&#34;&gt;https://github.com/leanprover-community/lean4-mode.git&lt;/a&gt; ~/path/to/lean4-mode #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In your Emacs initialization file, add the path to your local Lean4-Mode repository to the &lt;del&gt;load-path&lt;/del&gt; list: #+begin_src elisp (add-to-list &#39;load-path &#34;~/path/to/lean4-mode&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Lean4-Mode should now already be enabled when you open a file with =.lean= extension. But you can optionally also already load Lean4-Mode on Emacs startup, e.g. in order to customize variables: #+begin_src elisp (require &#39;lean4-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Instructions for Source-Based Use-Package&lt;/p&gt; &#xA;&lt;p&gt;If you use a source-based package-manager (e.g. =package-vc.el=, Straight or Elpaca), then make sure to list the =&#34;data&#34;= directory in your Lean4-Mode package recipe.&lt;/p&gt; &#xA;&lt;p&gt;If you use the &lt;del&gt;use-package&lt;/del&gt; macro and intent to defer loading of packages in order to improve your Emacs startup time, then make sure to specify &lt;del&gt;lean4-mode&lt;/del&gt; as a =:command=.&lt;/p&gt; &#xA;&lt;p&gt;Following subsections show concrete examples.&lt;/p&gt; &#xA;&lt;p&gt;*** Native =:vc= (Emacs 30 or later)&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs comes with =use-package.el= built-in since version 29. And since version 30, it also comes with a built-in =:vc= keyword for the &lt;del&gt;use-package&lt;/del&gt; macro that utilizes =package-vc.el= to install Emacs packages from remote source repositories.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (require &#39;package) (add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;&lt;a href=&#34;https://melpa.org/packages/&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&#34;)) (package-initialize)&lt;/p&gt; &#xA;&lt;p&gt;(use-package lean4-mode :commands lean4-mode :vc (:url &#34;&lt;a href=&#34;https://github.com/leanprover-community/lean4-mode.git&#34;&gt;https://github.com/leanprover-community/lean4-mode.git&lt;/a&gt;&#34; :rev :last-release ;; Or, if you prefer the bleeding edge version of Lean4-Mode: ;; :rev :newest )) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Doom-Emacs&lt;/p&gt; &#xA;&lt;p&gt;If you use Doom-Emacs, you can place the following code in your Doom initialization file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (package! lean4-mode :recipe (:host github :repo &#34;leanprover-community/lean4-mode&#34; :files (&#34;*.el&#34; &#34;data&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Straight&lt;/p&gt; &#xA;&lt;p&gt;If you use the Straight package manager through Use-Package, then place the following code in your Emacs initialization file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (use-package lean4-mode :commands lean4-mode :straight (lean4-mode :type git :host github :repo &#34;leanprover-community/lean4-mode&#34; :files (&#34;*.el&#34; &#34;data&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If things are working correctly, you should see the word &#34;Lean 4&#34; in Emacs mode-line when you open a file with =.lean= extension. Emacs will ask you to identify the /project/ this file belongs to. If you then type =#check id=, the word =#check= will be underlined, and hovering over it will show you the type of &lt;del&gt;id&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To view the proof state, run &lt;del&gt;lean4-toggle-info&lt;/del&gt; (=C-c C-i=). This will display the =&lt;em&gt;Lean Goals&lt;/em&gt;= buffer (like the Lean Info-View pane in VS-Code) in a separate window.&lt;/p&gt; &#xA;&lt;p&gt;| Key | Description | Command | |------------------------+--------------------------------------------------------+-----------------------------------| | =C-c C-k= | Echo the keystroke needed to input the symbol at point | &lt;del&gt;quail-show-key&lt;/del&gt; | | =C-c C-d= | Recompile and reload imports | &lt;del&gt;lean4-refresh-file-dependencies&lt;/del&gt; | | =C-c C-x= or =C-c C-l= | Execute Lean in stand-alone mode | &lt;del&gt;lean4-std-exe&lt;/del&gt; | | =C-c C-p C-l= | Builds package with lake | &lt;del&gt;lean4-lake-build&lt;/del&gt; | | =C-c C-i= | Toggle Info-View which shows goals and errors at point | &lt;del&gt;lean4-toggle-info-buffer&lt;/del&gt; |&lt;/p&gt; &#xA;&lt;p&gt;** lsp-mode&lt;/p&gt; &#xA;&lt;p&gt;For key bindings from lsp-mode, see [[https://emacs-lsp.github.io/lsp-mode/page/keybindings/][its respective documentation]] and note that not all capabilities are supported by Lean4-Mode.&lt;/p&gt; &#xA;&lt;p&gt;** Flycheck&lt;/p&gt; &#xA;&lt;p&gt;You may optionally use Lean4-Mode together with Flycheck. In that case, the mode-line will show =FlyC:E/N=, indicating that there are =E= number of errors and =N= number of notes. Following keys will be available by default (via &lt;del&gt;flycheck-mode-map&lt;/del&gt;):&lt;/p&gt; &#xA;&lt;p&gt;| Key | Description | Command | |-----------+----------------------+---------------------------| | =C-c ! n= | Go to next error | &lt;del&gt;flycheck-next-error&lt;/del&gt; | | =C-c ! p= | Go to previous error | &lt;del&gt;flycheck-previous-error&lt;/del&gt; |&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** lsp-mode&lt;/p&gt; &#xA;&lt;p&gt;If you want breadcrumbs of namespaces and sections to be shown in the header-line, set the user option &lt;del&gt;lsp-headerline-breadcrumb-enable&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Flycheck&lt;/p&gt; &#xA;&lt;p&gt;Flycheck is an optional but supported dependency of Lean4-Mode. If Flycheck is installed, lsp-mode and thus Lean4-Mode will by default use it. If you want to customize this behavior, e.g. if you&#39;d like to use Emacs&#39; built-in Flymake package instead of Flycheck while keeping later installed, then customize the &lt;del&gt;lsp-diagnostics-provider&lt;/del&gt; user option accordingly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Common Pitfalls&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lean4-Mode only supports version 4 of Lean. For editing Lean version 3, use [[https://github.com/leanprover/lean3-mode][Lean3-Mode]], which is also known as Lean-Mode due to historical reasons. In principle, it is fine to have both Lean3-Mode and Lean4-Mode installed at the same time. But note that Lean3-Mode uses the prefix =lean-= for its symbols. E.g. you should not use =lean-=-prefixed commands in a buffer with Lean4-Mode as major mode.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>protesilaos/modus-themes</title>
    <updated>2025-07-06T01:41:29Z</updated>
    <id>tag:github.com,2025-07-06:/protesilaos/modus-themes</id>
    <link href="https://github.com/protesilaos/modus-themes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Highly accessible themes for GNU Emacs, conforming with the highest standard for colour contrast between background and foreground values (WCAG AAA).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Modus themes for GNU Emacs&lt;/h1&gt; &#xA;&lt;p&gt;IMAGES HERE: &lt;a href=&#34;https://protesilaos.com/emacs/modus-themes-pictures&#34;&gt;https://protesilaos.com/emacs/modus-themes-pictures&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Highly accessible themes, conforming with the highest standard for colour contrast between background and foreground values (WCAG AAA). They also are optimised for users with red-green colour deficiency.&lt;/p&gt; &#xA;&lt;p&gt;The themes are very customisable and provide support for a very wide range of packages. Their manual is detailed so that new users can get started, while it also provides custom code for all sorts of more advanced customisations.&lt;/p&gt; &#xA;&lt;p&gt;Since August 2020, the original Modus themes (&lt;code&gt;modus-operandi&lt;/code&gt;, &lt;code&gt;modus-vivendi&lt;/code&gt;) are built into Emacs version 28 or higher. Emacs 28 ships with &lt;code&gt;modus-themes&lt;/code&gt; version &lt;code&gt;1.6.0&lt;/code&gt;. Emacs 29 includes version &lt;code&gt;3.0.0&lt;/code&gt;. Emacs 30 provides a newer, refactored version that thoroughly refashions how the themes are implemented and customized. Such major versions are not backward-compatible due to the limited resources at my disposal to support multiple versions of Emacs and of the themes across the years.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Package name (GNU ELPA): &lt;code&gt;modus-themes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Official manual: &lt;a href=&#34;https://protesilaos.com/emacs/modus-themes&#34;&gt;https://protesilaos.com/emacs/modus-themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change log: &lt;a href=&#34;https://protesilaos.com/emacs/modus-themes-changelog&#34;&gt;https://protesilaos.com/emacs/modus-themes-changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colour palette: &lt;a href=&#34;https://protesilaos.com/emacs/modus-themes-colors&#34;&gt;https://protesilaos.com/emacs/modus-themes-colors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sample pictures: &lt;a href=&#34;https://protesilaos.com/emacs/modus-themes-pictures&#34;&gt;https://protesilaos.com/emacs/modus-themes-pictures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git repositories: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/protesilaos/modus-themes&#34;&gt;https://github.com/protesilaos/modus-themes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GitLab: &lt;a href=&#34;https://gitlab.com/protesilaos/modus-themes&#34;&gt;https://gitlab.com/protesilaos/modus-themes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Backronym: My Old Display Unexpectedly Sharpened ... themes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>