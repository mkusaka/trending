<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-19T01:50:16Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>parsoj/dotfiles</title>
    <updated>2023-11-19T01:50:16Z</updated>
    <id>tag:github.com,2023-11-19:/parsoj/dotfiles</id>
    <link href="https://github.com/parsoj/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My personal laptop configurations.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: dotfiles My personal laptop configurations.&lt;/p&gt; &#xA;&lt;p&gt;** Bash&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;there is not much in my bash config, since I mostly live out of Emacs. the fancy biz is over there :) ** Git&lt;/li&gt; &#xA; &lt;li&gt;just global git configurations ** OSX&lt;/li&gt; &#xA; &lt;li&gt;tools and configurations for managing desktop automation and package management. (It has its own [[file:osx/README.org][README]])&lt;/li&gt; &#xA; &lt;li&gt;I tend to prefer code-only configuration tools, since they are simpler and everything can be checked into source control and easily be ported to other machines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Emacs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A custom emacs config built around [[https://github.com/raxod502/straight.el][straight.el]] I will look into setting up a full Emacs &#34;Literate Configuration&#34; one day....&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>facebookarchive/phpsh</title>
    <updated>2023-11-19T01:50:16Z</updated>
    <id>tag:github.com,2023-11-19:/facebookarchive/phpsh</id>
    <link href="https://github.com/facebookarchive/phpsh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A read-eval-print-loop for php&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Archived Repo&lt;/h1&gt; &#xA;&lt;p&gt;This is an archived project and is no longer supported or updated by Facebook. Please do not file issues or pull-requests against this repo. If you wish to continue to develop this code yourself, we recommend you fork it.&lt;/p&gt; &#xA;&lt;p&gt;Proceed and be bold!&lt;/p&gt; &#xA;&lt;h1&gt;phpsh&lt;/h1&gt; &#xA;&lt;p&gt;phpsh is a read-eval-print-loop for php that features readline history, tab completion, and quick access to documentation. It was developed at Facebook and ironically, is written mostly in python. It is open source and released under a modified BSD license.&lt;/p&gt; &#xA;&lt;p&gt;Mailing list at: &lt;a href=&#34;https://raw.githubusercontent.com/facebookarchive/phpsh/master/%5Bhttp://groups.google.com/group/phpsh%5D&#34;&gt;http://groups.google.com/group/phpsh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PHP Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modules:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.pcntl.php&#34;&gt;pcntl&lt;/a&gt; &lt;em&gt;recommended but not required.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.pcre.php&#34;&gt;pcre&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.posix.php&#34;&gt;posix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://php.net/manual/en/book.tokenizer.php&#34;&gt;tokenizer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Python Dependencies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sqlite &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Python &amp;lt; 2.6: &lt;code&gt;sudo easy_install pysqlite&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Python &amp;gt;= 2.6: pysqlite should already be installed, since it&#39;s part of the stdlib&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;readline &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mac OS X: &lt;code&gt;sudo easy_install readline&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ActivePython: &lt;code&gt;pypm install readline&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Most Linux distributions: readline should already be installed, since it&#39;s part of the stdlib&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installing Globally&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that this install currently clobbers any previous /etc/phpsh/rc.php&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python setup.py build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo python setup.py install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;phpsh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installing Locally&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that this install currently clobbers any previous ~/.phpsh/rc.php&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python setup.py install --prefix=~&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;export PYTHONPATH=~/lib/python2.6/site-packages&lt;/code&gt; (Adjust this if your python minor version differs from 2.6)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/bin/phpsh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;You will probably want to put the PYTHONPATH line in your .bashrc or such, and just add ~/bin to your PATH as well.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are more details on installing from a setup.py at &lt;a href=&#34;http://docs.python.org/library/distutils.html&#34;&gt;http://docs.python.org/library/distutils.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;After Install&lt;/h1&gt; &#xA;&lt;h2&gt;Vanilla PHP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just run &lt;code&gt;phpsh&lt;/code&gt; and have fun.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Connecting to an Actual Codebase&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd ~/www&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctags -R&lt;/code&gt; # for phpsh ctags integration, recommended&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;phpsh lib/init.php&lt;/code&gt; # or some file(s) that load codebase libraries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Autoloading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify /etc/phpsh/rc.php. Then: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd ~/www&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;phpsh&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;And for times when you just want vanilla php: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;phpsh -c none&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Individual Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For individual configuration, also see rc.example.php in the php distribution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hacking on phpsh&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For faster iteration, after installing once, you can run phpsh from src/ directly without reinstalling. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd ~/www&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;~/projects/phpsh/src/phpsh&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Todo (after phpsh 1.2)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple phpsh breakpoints that you can insert into your php code.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;jlindamood has suggested adding a very basic debugging facility in which phpsh.php would define some function called like phpsh_breakpoint() which you would be able to put in your code that would cause the php&amp;gt; to re-happen at that breakpoint so that you can investigate whatever state until you issue like a phpsh_resume() (or whatever it would be called).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;My suspicion is that that can be done pretty easily be having a new message type from phpsh.php to phpsh.py. (Currently there is only the &#39;ready&#39; message when phpsh.php is ready to receive a new line of codes from phpsh.py.)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Magic fatal undoing?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;brent suggested adding some kind of katamari-esque memory snapshotting, so that on fatals like calling a nonexistent function (which are not catchable in php-land, sadly) can be magically recovered from. I think dweatherford or larry would be good to ask about this kind of black magic.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Convert from /tmp file to named pipe for &#39;ready&#39; message passing &lt;a href=&#34;http://my.opera.com/zomg/blog/2007/08/29/php-and-named-pipes&#34;&gt;http://my.opera.com/zomg/blog/2007/08/29/php-and-named-pipes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Maybe phpsh_check_syntax shouldn&#39;t actually be installed as a script, and just be a pkg_resource? Didn&#39;t want to worry about zip file overhead, and installing didn&#39;t seem like a big deal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Similarly, php_manual.db should probably go in share/ not etc/ but similarly was worried about b.s. with setuptools..&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Paging for long php&amp;gt; d .. results? Or is terminal scroll fine..&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thread loading ctags and starting php? Would speed start but not restart.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Command-line apc for faster php startup for large codebases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note on php start error to start from codebase place?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make tab to show function signature work with multiline func sigs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>gpoulter/emacsfiles</title>
    <updated>2023-11-19T01:50:16Z</updated>
    <id>tag:github.com,2023-11-19:/gpoulter/emacsfiles</id>
    <link href="https://github.com/gpoulter/emacsfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My Emacs configuration files&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>