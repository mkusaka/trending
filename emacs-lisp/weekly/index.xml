<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T01:54:58Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-lsp/lsp-docker</title>
    <updated>2023-04-30T01:54:58Z</updated>
    <id>tag:github.com,2023-04-30:/emacs-lsp/lsp-docker</id>
    <link href="https://github.com/emacs-lsp/lsp-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scripts and configurations to leverage lsp-mode in docker environment&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+ATTR_HTML: align=&#34;center&#34;; margin-right=&#34;auto&#34;; margin-left=&#34;auto&#34; =lsp-mode= uses =lsp-docker= to run language servers using in containers&lt;/p&gt; &#xA;&lt;p&gt;[[./images/logo.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :TOC_4_gh:noexport: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#preconfigured-language-servers][Preconfigured language servers]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#emacslsplsp-docker-langservers][emacslsp/lsp-docker-langservers]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#configuration][Configuration]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#how-it-works][How it works]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#emacslsplsp-docker-full][emacslsp/lsp-docker-full]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#flags][Flags]] &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;[[#emacs][Emacs]]&lt;/li&gt; &#xA;       &lt;li&gt;[[#spacemacs][Spacemacs]]&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#custom-language-server-containers][Custom language server containers]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#docker-over-tramp-tbd][Docker over TRAMP (TBD)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#see-also][See also]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#maintainers][Maintainers]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Preconfigured language servers =emacslsp/lsp-docker-langservers= has the following content:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Language servers: | Language | Language Server | |-----------------------+-----------------------------------| | Bash | [[https://github.com/mads-hartmann/bash-language-server][bash-language-server]] | | C++ | [[https://github.com/MaskRay/ccls][ccls]] | | CSS/LessCSS/SASS/SCSS | [[https://github.com/vscode-langservers/vscode-css-languageserver-bin][css]] | | Dockerfile | [[https://github.com/rcjsuen/dockerfile-language-server-nodejs][dockerfile-language-server-nodejs]] | | Go | [[https://golang.org/x/tools/cmd/gopls][gopls]] | | HTML | [[https://github.com/vscode-langservers/vscode-html-languageserver][html]] | | JavaScript/TypeScript | [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] | | Python | [[https://github.com/python-lsp/python-lsp-server][pylsp]] | ** Usage There are two ways of working with containerized language servers:&lt;/li&gt; &#xA; &lt;li&gt;2 containers provided by =lsp-docker=: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#emacslsplsp-docker-langservers][emacslsp/lsp-docker-langservers]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#emacslsplsp-docker-full][emacslsp/lsp-docker-full]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#custom-language-server-containers][Custom language server containers]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** emacslsp/lsp-docker-langservers This container is used by =lsp-docker= to run =Language Servers= for =lsp-mode= over local sources. =You must pull the container before lsp-docker can use it= *** Configuration - Clone the repo #+begin_src bash git clone &lt;a href=&#34;https://github.com/emacs-lsp/lsp-docker&#34;&gt;https://github.com/emacs-lsp/lsp-docker&lt;/a&gt; #+end_src - Pull the container #+begin_src bash docker pull emacslsp/lsp-docker-langservers #+end_src - Add repo to load path and register the docker clients in your =~/.emacs= file #+begin_src elisp ;; Uncomment the next line if you are using this from source ;; (add-to-list &#39;load-path &#34;&#xA; &lt;path-to-lsp-docker-dir&gt;&#xA;  &#34;) (require &#39;lsp-docker)&#xA; &lt;/path-to-lsp-docker-dir&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  (defvar lsp-docker-client-packages&#xA;      &#39;(lsp-css lsp-clients lsp-bash lsp-go lsp-pylsp lsp-html lsp-typescript&#xA;        lsp-terraform lsp-clangd))&#xA;&#xA;  (setq lsp-docker-client-configs&#xA;      &#39;((:server-id bash-ls :docker-server-id bashls-docker :server-command &#34;bash-language-server start&#34;)&#xA;        (:server-id clangd :docker-server-id clangd-docker :server-command &#34;clangd&#34;)&#xA;        (:server-id css-ls :docker-server-id cssls-docker :server-command &#34;css-languageserver --stdio&#34;)&#xA;        (:server-id dockerfile-ls :docker-server-id dockerfilels-docker :server-command &#34;docker-langserver --stdio&#34;)&#xA;        (:server-id gopls :docker-server-id gopls-docker :server-command &#34;gopls&#34;)&#xA;        (:server-id html-ls :docker-server-id htmls-docker :server-command &#34;html-languageserver --stdio&#34;)&#xA;        (:server-id pylsp :docker-server-id pyls-docker :server-command &#34;pylsp&#34;)&#xA;        (:server-id ts-ls :docker-server-id tsls-docker :server-command &#34;typescript-language-server --stdio&#34;)))&#xA;&#xA;  (require &#39;lsp-docker)&#xA;  (lsp-docker-init-clients&#xA;    :path-mappings &#39;((&#34;path-to-projects-you-want-to-use&#34; . &#34;/projects&#34;))&#xA;    :client-packages lsp-docker-client-packages&#xA;    :client-configs lsp-docker-client-configs)&#xA;  #+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** How it works =lsp-mode= starts the image passed as =:docker-image-id= and mounts =:path-mappings= in the container. Then when the process is started =lsp-mode= translates the local paths to =docker= path and vice versa using the =:path-mappings= specified when calling =lsp-docker-init-default-clients=. You may use =lsp-enabled-clients= and =lsp-disabled-clients= to control what language server will be used to run for a particular project(refer to =lsp-mode= FAQ on how to configure .dir-locals).&lt;/p&gt; &#xA;&lt;p&gt;** emacslsp/lsp-docker-full The container =emacslsp/lsp-docker-full= contains: - The above language servers - =Emacs28= compiled with native JSON support for better performance. *** Flags | Flag | Purpose | Default | |-----------------+----------------------------------------+-------------------------------------------------------| | EMACS_D_VOLUME | Emacs folder to use for =/root/.emacs= | Emacs: =$(pwd)/emacs.d= Spacemacs: =$(pwd)/spacemacs= | | PROJECTS_VOLUME | Directory to mount at /Projects | =$(pwd)/demo-projects/= | | TZ | Timezone to user in container | Europe/Minsk | | DOCKER_FLAGS | Any additional docker flags | N/A | **** Emacs - Clone =lsp-docker=. #+begin_src bash git clone &lt;a href=&#34;https://github.com/emacs-lsp/lsp-docker&#34;&gt;https://github.com/emacs-lsp/lsp-docker&lt;/a&gt; cd lsp-docker #+end_src - Run #+begin_src bash bash start-emacs.sh #+end_src **** Spacemacs - Clone =lsp-docker=. #+begin_src bash git clone &lt;a href=&#34;https://github.com/emacs-lsp/lsp-docker&#34;&gt;https://github.com/emacs-lsp/lsp-docker&lt;/a&gt; cd lsp-docker #+end_src - Clone spacemacs repo #+begin_src bash # Clone spacemacs develop git clone -b develop &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;https://github.com/syl20bnr/spacemacs&lt;/a&gt; spacemacs #+end_src - Run #+begin_src bash EMACS_D_VOLUME=/path/to/spacemacs bash start-spacemacs.sh #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Custom language server containers&lt;br&gt; You can use manually built language containers or images hosting language server(s), just follow a few simple rules (shown below).&lt;/p&gt; &#xA;&lt;p&gt;*** Building a container (or an image) manually: You have 2 constraints: - A language server must be launched in =stdio= mode (other types of communication are yet to be supported) - A docker container (only =container= subtype, see the configuration below) must have your language server as an entrypoint (basically you have to be able to launch it with =docker start -i &amp;lt;container_name&amp;gt;= as it is launched this way with =lsp-docker=)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;When you have sucessfully built a language server, you have to register it with either a configuration file or a =.dir-locals= file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Registering a language server using a persistent configuration file: A configuration file is a yaml file that is named =.lsp-docker.yml= or =.lsp-docker.yaml= and looks generally like this: #+begin_src yaml lsp: server: type: docker subtype: container # Or image. container subtype means launching an existing container # image subtype means creating a new container each time from a specified image name: not-significant-but-unique-name # Must be unique across all language servers server: server-id-of-the-base-server # Server id of a registered server (by lsp-mode) launch_command: &#34;launch command with arguments&#34; # Launch command of the language server # (selected by a server id specified above) in stdio mode # Note: launch_command is not used with container subtype servers # as a command is embedded in a container itself and serves as an entrypoint mappings: - source: &#34;/your/host/source/path&#34; destination: &#34;/your/local/path/inside/a/container&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Registering a language server using a =.dir-locals= file: Just refer to the source code and general conventions of using =.dir-locals=. The variable you need is =lsp-docker-persistent-default-config=, its content is merged with the =lsp= section from a configuration file (if present).&lt;/p&gt; &#xA;&lt;p&gt;*** Automatic image building: You can also build an image automatically (currently supported only for =image= subtype): just drop the corresponding =Dockerfile= into the =.lsp-docker= folder in the project root (=Dockerfile= may be named as =Dockerfile= or =Dockerfile.lsp=). Take a note that you can also place the =.lsp-docker.yml= config there as well. Building process is triggered by the =lsp-docker-register= call (you will be prompted whether you want to build the image). Image building takes place in the project root (&lt;em&gt;not&lt;/em&gt; in the =.lsp-docker= subfolder)! In case of an automatic build the image will be registered automatically (based on the values from the config or =.dir-locals= file).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can also troubleshoot any issues with supplemental docker calls (checking whether the required image already exists, building a new image) using the supplemental logging functionality: there are 2 variables: first you have to set =lsp-docker-log-docker-supplemental-calls= to true-like value (by default it is =nil=) and then specify the log buffer in the =lsp-docker-log-docker-supplemental-calls-buffer-name= variable (by default it is set to =*lsp-docker-supplemental-calls*=)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Docker over TRAMP (TBD) Docker running the language servers and hosting the sources, Emacs running on the desktop machine and connecting to docker instance over TRAMP. ** See also&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/Silex/docker.el][docker]] - package for managing =docker= images/containers. ** Maintainers&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/yyoncho][yyoncho]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rnikoopour][rnikoopour]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>li-vu/emacs</title>
    <updated>2023-04-30T01:54:58Z</updated>
    <id>tag:github.com,2023-04-30:/li-vu/emacs</id>
    <link href="https://github.com/li-vu/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;emacs&lt;/h1&gt; &#xA;&lt;p&gt;Miscellaneous stuff about Emacs.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gaqzi/conf</title>
    <updated>2023-04-30T01:54:58Z</updated>
    <id>tag:github.com,2023-04-30:/gaqzi/conf</id>
    <link href="https://github.com/gaqzi/conf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Config files&lt;/h1&gt; &#xA;&lt;p&gt;These are my general config files aggrued over a long period of time. It&#39;s likely not useful to anyone but myself.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Clone the directory and then run &lt;code&gt;rake&lt;/code&gt; to clone any submodules and symlink all files and folders.&lt;/p&gt; &#xA;&lt;h2&gt;Updated with thoughtbot&#39;s laptop script&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir ~/code &amp;amp;&amp;amp; cd ~/code&#xA;$ git clone git://github.com/thoughtbot/laptop.git&#xA;$ bash laptop/mac&#xA;$ rehash&#xA;$ # copy id_rsa file into place&#xA;$ git clone git@github.com:gaqzi/conf.git&#xA;$ RCRC=$(pwd)/conf/rcrc rcup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuring OSX apps&lt;/h1&gt; &#xA;&lt;h2&gt;iTerm2&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Cmd+;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;General tab, near the bottom click &#34;Load preferences from a custom folder or URL&#34;&lt;/li&gt; &#xA; &lt;li&gt;Browse to &lt;code&gt;$HOME/code/conf/Mac apps/iTerm2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Restart iTerm2&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;IntelliJ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Load by going to &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Import settings&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;settings.jar&lt;/code&gt; from &lt;code&gt;~/code/conf/Mac apps/IntelliJIdea15&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>