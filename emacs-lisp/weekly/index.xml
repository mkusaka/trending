<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:42:10Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dimitri/el-get</title>
    <updated>2023-01-01T01:42:10Z</updated>
    <id>tag:github.com,2023-01-01:/dimitri/el-get</id>
    <link href="https://github.com/dimitri/el-get" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manage the external elisp bits and pieces upon which you depend!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/dimitri/el-get/actions&#34;&gt;&lt;img src=&#34;https://github.com/dimitri/el-get/actions/workflows/test.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/dimitri/el-get/master/logo/el-get.png&#34; alt=&#34;Color El-Get logo&#34;&gt; El-Get allows you to install and manage &lt;code&gt;elisp&lt;/code&gt; code for Emacs. It supports lots of different types of sources and is able to &lt;em&gt;install&lt;/em&gt; them, &lt;em&gt;update&lt;/em&gt; them and &lt;em&gt;remove&lt;/em&gt; them, but more importantly it will &lt;em&gt;init&lt;/em&gt; them for you. That means it will &lt;code&gt;require&lt;/code&gt; the &lt;em&gt;features&lt;/em&gt; you need, &lt;code&gt;load&lt;/code&gt; the necessary files, set the &lt;em&gt;Info&lt;/em&gt; paths so that &lt;code&gt;C-h i&lt;/code&gt; shows the new documentation you now depend on, and finally call your own initialisation code for you to setup the extension. Or call it a package.&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/dimitri/el-get?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/dimitri/el-get.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/dimitri/el-get&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are many methods to keep track of your emacs setup. You can manage it all in a private git repository, you can set up &lt;code&gt;git submodules&lt;/code&gt; or directly import external repositories. You can manually retrieve the various packages you wish to track and ensure they are installed on any machine you apply your configuration to.&lt;/p&gt; &#xA;&lt;p&gt;All of these systems require some degree of manual maintenance, especially if you have packages from various types of locations: &lt;a href=&#34;https://github.com&#34;&gt;github&lt;/a&gt;, &lt;a href=&#34;http://emacswiki.org&#34;&gt;emacswiki&lt;/a&gt;, &lt;a href=&#34;http://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt; or &lt;a href=&#34;http://marmalade-repo.org/&#34;&gt;Marmalade&lt;/a&gt;, privately hosted pages, &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt;, &lt;a href=&#34;http://bazaar.canonical.com/en/&#34;&gt;bzr&lt;/a&gt;, &lt;a href=&#34;http://www.nongnu.org/cvs/&#34;&gt;CVS&lt;/a&gt;, the list goes on.&lt;/p&gt; &#xA;&lt;p&gt;El-Get is designed to simplify this process and allow access to all the various methods of obtaining packages from a single interface. Every package has a recipe that allows you to locate the original source, and that can be updated if the package is moved.&lt;/p&gt; &#xA;&lt;p&gt;Whether you are using one machine or many, El-Get provides you with a simple interface to your list of installed packages, and the tools to keep them up to date.&lt;/p&gt; &#xA;&lt;h1&gt;El-Get, ELPA and package.el&lt;/h1&gt; &#xA;&lt;p&gt;Emacs 24 ships with &lt;code&gt;package.el&lt;/code&gt; which allows for easy installation of Emacs Lisp extensions for Emacs, and supports several servers where to find a list of packaged extension.&lt;/p&gt; &#xA;&lt;p&gt;Rather than ask authors or contributors to clean-up and package existing software, the El-Get approach is to take bits and pieces as they exist today and still empower Emacs users in a way that those random electrons are easy to use.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s why El-Get supports &lt;code&gt;package.el&lt;/code&gt; as one of its &lt;em&gt;methods&lt;/em&gt; to fetch Emacs Lisp Extensions.&lt;/p&gt; &#xA;&lt;p&gt;Technical differences also include the ability for El-Get to run OS commands (such as &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;ginstall-info&lt;/code&gt;) so as to better cope with the diversity found in the wild, allowing for automatic inclusion of &lt;em&gt;Info&lt;/em&gt; pages for packages providing some.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;el-get-elpa-build-local-recipes&lt;/code&gt; to install extensions provided by ELPA.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;El-Get is easy to install. The only requirements to do so successfully are Emacs (24.3 and above), &lt;code&gt;git&lt;/code&gt; and a connection to the internet that allows you to &lt;code&gt;git clone&lt;/code&gt; repositories.&lt;/p&gt; &#xA;&lt;p&gt;If you do not already have &lt;code&gt;git&lt;/code&gt; on your system, you can install it through your package manager if you are using Linux or by downloading it from the &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git Homepage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Installing El-Get depends on a working &lt;code&gt;install-info&lt;/code&gt; command, please make sure you have one in your &lt;code&gt;PATH&lt;/code&gt;. In &lt;code&gt;debian&lt;/code&gt;, it&#39;s available in the &lt;a href=&#34;http://packages.debian.org/squeeze/install-info&#34;&gt;install-info debian package&lt;/a&gt;. The &lt;a href=&#34;http://developer.apple.com/library/mac/#DOCUMENTATION/Darwin/Reference/ManPages/man1/install-info.1.html&#34;&gt;MacOSX install-info&lt;/a&gt; version works fine with El-Get.&lt;/p&gt; &#xA;&lt;p&gt;When using the &lt;em&gt;windows&lt;/em&gt; operating system, take into account that the way Emacs calls external programs is not the same for &lt;em&gt;native builds&lt;/em&gt; and &lt;em&gt;cygwin&lt;/em&gt;, so make sure you don&#39;t mix and match them at least for &lt;code&gt;install-info&lt;/code&gt; (e.g. &lt;em&gt;cygwin&lt;/em&gt; version of &lt;code&gt;install-info&lt;/code&gt; will error out when called by el-get from a &lt;code&gt;windows-nt&lt;/code&gt; Emacs, see &lt;code&gt;system-type&lt;/code&gt;). When using a &lt;em&gt;native build&lt;/em&gt; of Emacs for windows, consider using the &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages.html&#34;&gt;GNU Win 32&lt;/a&gt; distribution of &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/texinfo.htm&#34;&gt;TexInfo for windows&lt;/a&gt;, which contains the proper &lt;code&gt;install-info&lt;/code&gt; version when you&#39;re not using the &lt;em&gt;cygwin&lt;/em&gt; Emacs binary.&lt;/p&gt; &#xA;&lt;h2&gt;The Lazy Installer&lt;/h2&gt; &#xA;&lt;p&gt;To install El-Get you can use the &lt;em&gt;lazy-installer&lt;/em&gt;. This will not load it on startup or otherwise affect future usage of Emacs. If you wish to ensure that El-Get will be available in future Emacs session please use the code provided in &lt;strong&gt;Basic Setup&lt;/strong&gt;. Using the code below will require an internet connection even if El-Get is already installed, that&#39;s why it&#39;s advised to use it for first time installation, not for embedding into your &lt;code&gt;.emacs&lt;/code&gt; (or your &lt;code&gt;user-init-file&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; So the idea is that you copy/paste this code into your *scratch* buffer,&#xA;;; hit C-j, and you have a working el-get.&#xA;(url-retrieve&#xA; &#34;https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el&#34;&#xA; (lambda (s)&#xA;   (goto-char (point-max))&#xA;   (eval-print-last-sexp)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: if you are using Windows see &lt;a href=&#34;https://github.com/dimitri/el-get/wiki/Installation-on-Windows&#34;&gt;Installation on Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Evaluating this code after copying it into your &lt;code&gt;*scratch*&lt;/code&gt; buffer by typing &lt;code&gt;C-j&lt;/code&gt; or &lt;code&gt;M-x eval-print-last-exp&lt;/code&gt; will retrieve the El-Get installation script. This script will then use &lt;code&gt;git&lt;/code&gt; to clone El-Get and install it to the default location (&lt;code&gt;~/.emacs.d/el-get/el-get&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Replicating a package set on another Emacs installation&lt;/h2&gt; &#xA;&lt;p&gt;In the Emacs whose setup you wish to replicate, type &lt;code&gt;M-x ielm&lt;/code&gt; for an Emacs Lisp prompt, and enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;`(setq my-packages&#xA;              &#39;,(mapcar #&#39;el-get-as-symbol&#xA;                        (el-get-list-package-names-with-status &#34;installed&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the result into the new Emacs, in which you should already have installed El-Get, and evaluate it, followed by &lt;code&gt;(el-get &#39;sync my-packages)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h2&gt;Basic Setup&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to ensure that El-Get is available when you load Emacs you can place the following elisp code in your init file. It will detect if &lt;code&gt;el-get&lt;/code&gt; is already installed and install it if necessary.&lt;/p&gt; &#xA;&lt;p&gt;The addition of &lt;code&gt;(el-get &#39;sync)&lt;/code&gt; in the code blocks below ensures that any currently &lt;em&gt;installed&lt;/em&gt; packages will be initialized and any &lt;em&gt;required&lt;/em&gt; packages will be installed.&lt;/p&gt; &#xA;&lt;p&gt;Calling the &lt;code&gt;el-get&lt;/code&gt; function is covered in details in the full &lt;em&gt;Info&lt;/em&gt; manual.&lt;/p&gt; &#xA;&lt;p&gt;Here is the basic setup to add to your &lt;code&gt;user-init-file&lt;/code&gt; (&lt;code&gt;.emacs&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;load-path (expand-file-name &#34;el-get/el-get&#34; user-emacs-directory))&#xA;&#xA;(unless (require &#39;el-get nil &#39;noerror)&#xA;  (with-current-buffer&#xA;      (url-retrieve-synchronously&#xA;       &#34;https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el&#34;)&#xA;    (goto-char (point-max))&#xA;    (eval-print-last-sexp)))&#xA;&#xA;(add-to-list &#39;el-get-recipe-path &#34;~/.emacs.d/el-get-user/recipes&#34;)&#xA;(el-get &#39;sync)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alternative Basic Setup with Installation via MELPA&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path (expand-file-name &#34;el-get/el-get&#34; user-emacs-directory))&#xA;&#xA;(unless (require &#39;el-get nil &#39;noerror)&#xA;  (require &#39;package)&#xA;  (add-to-list &#39;package-archives&#xA;               &#39;(&#34;melpa&#34; . &#34;http://melpa.org/packages/&#34;))&#xA;  (package-refresh-contents)&#xA;  (package-initialize)&#xA;  (package-install &#39;el-get)&#xA;  (require &#39;el-get))&#xA;&#xA;(add-to-list &#39;el-get-recipe-path &#34;~/.emacs.d/el-get-user/recipes&#34;)&#xA;(el-get &#39;sync)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Package Setup&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to setup a given package is to add its initialization code to a file named &lt;code&gt;init-&amp;lt;package&amp;gt;.el&lt;/code&gt; with &lt;code&gt;&amp;lt;package&amp;gt;&lt;/code&gt; replaced with the package name. This file needs to be placed in the directory &lt;code&gt;el-get-user-package-directory&lt;/code&gt; (defaults to &lt;code&gt;nil&lt;/code&gt;, you have to set a value for it, like for example &lt;code&gt;~/.emacs.d/el-get-init-files/&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;El-Get will then load that file at package initialization time. See the full &lt;em&gt;Info&lt;/em&gt; documentation for more details and possibilities.&lt;/p&gt; &#xA;&lt;p&gt;Many &lt;code&gt;init-&lt;/code&gt; packages are already available in El-Get.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;El-Get requires very little interaction with your init file when managing packages. &lt;strong&gt;Basic Usage&lt;/strong&gt; explains how to manage your packages without ever having to touch your init file again (meaning, &lt;em&gt;once El-Get is installed&lt;/em&gt;). &lt;strong&gt;Advanced Usage with Local Recipes&lt;/strong&gt; explains how to write your init file with explicitly specifying packages to install (when sharing the same setup between several machines for example).&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Adding and removing packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-install&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will prompt for a package name, with completion, then install it. It will only propose packages that are not already &lt;code&gt;installed&lt;/code&gt;. Any package that you have a recipe for is a candidate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-remove&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will prompt for an &lt;code&gt;installed&lt;/code&gt; package name, with completion, then remove it. Depending on the &lt;code&gt;type&lt;/code&gt; of the package, this often means simply deleting the directory where the source package lies. Sometime we have to use external tools instead (e.g. &lt;code&gt;apt-get&lt;/code&gt;). No effort is made to unload the features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-reinstall&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This is just a shortcut for &lt;code&gt;el-get-remove&lt;/code&gt; followed by &lt;code&gt;el-get-install&lt;/code&gt; of the same package. It is primarily useful when a package has changed types, so the normal &lt;code&gt;el-get-update&lt;/code&gt; process will not work correctly.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keeping up to date&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-self-update&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Update only one package, &lt;code&gt;el-get&lt;/code&gt; itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-update&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will prompt for an installed package name, with completion, then update it. This will run the &lt;code&gt;build&lt;/code&gt; commands and &lt;code&gt;init&lt;/code&gt; the package again.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-update-all&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will update all packages that have the &lt;code&gt;installed&lt;/code&gt; status in your status file. Before the update you will be prompted for confirmation that you wish to proceed.&lt;/p&gt; &lt;p&gt;Beware that using this function can lead to hours of settings review: more often than not updating a package requires some adjustments to your setup. Updating all of them at once will require reviewing almost all your setup.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-reload&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Reload the given package files. Happens automatically at update time too.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Viewing available recipes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-list-packages&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Opens a buffer listing all known packages (those for which you have a recipe). The listing includes the package name, its status (one of &lt;em&gt;available&lt;/em&gt;, &lt;em&gt;installed&lt;/em&gt;, &lt;em&gt;removed&lt;/em&gt; or &lt;em&gt;required&lt;/em&gt;) and the package description. The description is a free form text and has not been provided for all recipes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-describe&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Prompt for a package name, with completion, then open an &lt;code&gt;*Help*&lt;/code&gt; window with details about the selected package. Those include current status, website, description, installation method, full recipe, and buttons to easily install, update or remove the package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;M-x el-get-find-recipe-file&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Will prompt for the name of a package, with completion, then &lt;code&gt;find-file&lt;/code&gt; its &lt;code&gt;recipe&lt;/code&gt; file. If the recipe does not exist, it will create a new recipe file with the appropriate name.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Usage with Local Recipes&lt;/h2&gt; &#xA;&lt;p&gt;Placing &lt;code&gt;el-get-bundle&lt;/code&gt; macro calls instead of &lt;code&gt;(el-get &#39;sync)&lt;/code&gt; in your init file to explicitly specify which packages should be installed. The macro accepts either a simple package name from defined recipes, a package name with a local recipe definition, a package with initialization code, or everything together.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you leave in the &lt;code&gt;(el-get &#39;sync)&lt;/code&gt; call (which you need to, unless you&#39;ve also made sure to explicitly call &lt;code&gt;el-get-bundle&lt;/code&gt; for all dependency packages), it &lt;em&gt;must&lt;/em&gt; go after any recipe defining &lt;code&gt;el-get-bundle&lt;/code&gt; calls, otherwise el-get won&#39;t know the recipe when it tries to initialize the package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Basic setup&#xA;&#xA;(add-to-list &#39;load-path (expand-file-name &#34;el-get/el-get&#34; user-emacs-directory))&#xA;&#xA;(unless (require &#39;el-get nil &#39;noerror)&#xA;  (with-current-buffer&#xA;      (url-retrieve-synchronously&#xA;       &#34;https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el&#34;)&#xA;    (goto-char (point-max))&#xA;    (eval-print-last-sexp)))&#xA;&#xA;(add-to-list &#39;el-get-recipe-path &#34;~/.emacs.d/el-get-user/recipes&#34;)&#xA;&#xA;;; Simple package names&#xA;(el-get-bundle yasnippet)&#xA;(el-get-bundle color-moccur)&#xA;&#xA;;; Locally defined recipe&#xA;(el-get-bundle yaicomplete&#xA;  :url &#34;https://github.com/tarao/elisp.git&#34;&#xA;  :features yaicomplete)&#xA;&#xA;;; With initialization code&#xA;(el-get-bundle zenburn-theme&#xA;  :url &#34;https://raw.githubusercontent.com/bbatsov/zenburn-emacs/master/zenburn-theme.el&#34;&#xA;  (load-theme &#39;zenburn t))&#xA;&#xA;;; End of recipes, call `el-get&#39; to make sure all packages (including&#xA;;; dependencies) are setup.&#xA;(el-get &#39;sync)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a package with a local recipe definition has a recipe file, the definition overrides that in the recipe file.&lt;/p&gt; &#xA;&lt;p&gt;There is some syntactic sugar to specify a package name and a recipe source together.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(el-get-bundle tarao/tab-group-el)&#xA;;; equivalent to&#xA;;; (el-get-bundle tab-group-el :type github :pkgname &#34;tarao/tab-group-el&#34;)&#xA;&#xA;(el-get-bundle gist:4468816:pit&#xA;;; equivalent to&#xA;;; (el-get-bundle pit :type git :url &#34;http://gist.github.com/4468816.git&#34;)&#xA;&#xA;(el-get-bundle elpa:undo-tree)&#xA;;; equivalent to&#xA;;; (el-get-bundle undo-tree :type elpa)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to the &lt;em&gt;Info&lt;/em&gt; documentation provided with El-Get for the complete syntax of &lt;code&gt;el-get-bundle&lt;/code&gt; and recipe definitions.&lt;/p&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;In some &lt;a href=&#34;https://github.com/dimitri/el-get/issues/2747&#34;&gt;hard to understand cases&lt;/a&gt; installed packages may fail to produce correct autoloads. In this case a package will be present at your file system but Emacs will not &#34;see&#34; it.&lt;/p&gt; &#xA;&lt;p&gt;If you have this problem you can try reinstalling a package or add explicit &lt;code&gt;(require &#39;package-name)&lt;/code&gt; to your Emacs config.&lt;/p&gt; &#xA;&lt;h1&gt;Conclusion&lt;/h1&gt; &#xA;&lt;p&gt;Enjoy El-get, enjoy Emacs, have fun with Emacs Lisp, and simplify your Emacs Setup &lt;strong&gt;today&lt;/strong&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>seagle0128/doom-modeline</title>
    <updated>2023-01-01T01:42:10Z</updated>
    <id>tag:github.com,2023-01-01:/seagle0128/doom-modeline</id>
    <link href="https://github.com/seagle0128/doom-modeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;doom-modeline&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/seagle0128/doom-modeline/actions&#34;&gt;&lt;img src=&#34;https://github.com/seagle0128/doom-modeline/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/release&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/seagle0128/doom-modeline.svg?label=Release&#34; alt=&#34;Release Tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/License&#34;&gt;&lt;img src=&#34;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/doom-modeline&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/doom-modeline-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/doom-modeline&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/doom-modeline-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#feature&#34;&gt;Feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#use-package&#34;&gt;Use-package&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#customize&#34;&gt;Customize&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#donate&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s integrated into &lt;a href=&#34;https://github.com/seagle0128/.emacs.d&#34;&gt;Centaur Emacs&lt;/a&gt;, &lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;Doom Emacs&lt;/a&gt; and &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;doom-modeline&lt;/code&gt; was designed for minimalism, and offers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A match count panel (for &lt;code&gt;anzu&lt;/code&gt;, &lt;code&gt;iedit&lt;/code&gt;, &lt;code&gt;multiple-cursors&lt;/code&gt;, &lt;code&gt;symbol-overlay&lt;/code&gt;, and &lt;code&gt;evil-search&lt;/code&gt;, etc.)&lt;/li&gt; &#xA; &lt;li&gt;An indicator for recording a macro&lt;/li&gt; &#xA; &lt;li&gt;Current environment version (e.g. &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, etc.) in the major-mode&lt;/li&gt; &#xA; &lt;li&gt;A customizable mode-line height (see &lt;code&gt;doom-modeline-height&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A minor modes segment which is compatible with &lt;code&gt;minions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An error/warning count segment for &lt;code&gt;flymake&lt;/code&gt;/&lt;code&gt;flycheck&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A workspace number/name segment for &lt;code&gt;eyebrowse&lt;/code&gt; or &lt;code&gt;tab-bar-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A perspective name segment for &lt;code&gt;persp-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A window number segment for &lt;code&gt;ace-window&lt;/code&gt;, &lt;code&gt;winum&lt;/code&gt; and &lt;code&gt;window-numbering&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for modal editing state, including &lt;code&gt;evil&lt;/code&gt;, &lt;code&gt;overwrite&lt;/code&gt;, &lt;code&gt;god&lt;/code&gt;, &lt;code&gt;ryo&lt;/code&gt; and &lt;code&gt;xah-fly-keys&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;An indicator for &lt;code&gt;battery&lt;/code&gt; status&lt;/li&gt; &#xA; &lt;li&gt;An indicator for current input method&lt;/li&gt; &#xA; &lt;li&gt;An indicator for debug state&lt;/li&gt; &#xA; &lt;li&gt;An indicator for remote host&lt;/li&gt; &#xA; &lt;li&gt;An indicator for LSP state with &lt;code&gt;lsp-mode&lt;/code&gt; or &lt;code&gt;eglot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for GitHub notifications&lt;/li&gt; &#xA; &lt;li&gt;An indicator for unread emails with &lt;code&gt;mu4e-alert&lt;/code&gt; and &lt;code&gt;gnus&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for IRC notifications with &lt;code&gt;circe&lt;/code&gt;, &lt;code&gt;rcirc&lt;/code&gt; or &lt;code&gt;erc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for buffer position which is compatible with &lt;code&gt;nyan-mode&lt;/code&gt; or &lt;code&gt;poke-line&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for party &lt;code&gt;parrot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for PDF page number with &lt;code&gt;pdf-tools&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for markdown/org preview with &lt;code&gt;grip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Truncated file name, file icon, buffer state and project name in buffer information segment, which is compatible with &lt;code&gt;project&lt;/code&gt;, &lt;code&gt;projectile&lt;/code&gt; and &lt;code&gt;find-file-in-project&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;New mode-line for &lt;code&gt;Info-mode&lt;/code&gt; buffers&lt;/li&gt; &#xA; &lt;li&gt;New package mode-line for &lt;code&gt;paradox&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;New mode-line for &lt;code&gt;helm&lt;/code&gt; buffers&lt;/li&gt; &#xA; &lt;li&gt;New mode-line for &lt;code&gt;git-timemachine&lt;/code&gt; buffers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694177-10dcd280-fbc0-11e8-8d21-971ede6afdb5.png&#34; alt=&#34;modeline&#34; title=&#34;Mode-line&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694189-6913d480-fbc0-11e8-93ae-9578455dcd2c.png&#34; alt=&#34;search_replace&#34; title=&#34;Search and Replace&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/162925065-0ffe40fd-1efd-469b-bf09-c62fe2d22fd2.png&#34; alt=&#34;evil_search&#34; title=&#34;Evil Search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694199-cc056b80-fbc0-11e8-9bb1-533b1e64da66.png&#34; alt=&#34;macro&#34; title=&#34;Macro&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/51301117-0805d900-1a69-11e9-957d-b4c7a70a1cf8.png&#34; alt=&#34;no_icons&#34; title=&#34;No Icons&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50414928-3c63ec00-0853-11e9-9b26-6a1df278d332.png&#34; alt=&#34;color_icon_cpp&#34; title=&#34;Color C++ icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50415081-1428bd00-0854-11e9-9ae5-91805290c524.png&#34; alt=&#34;color_icon_java&#34; title=&#34;Color Java icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50415381-9f568280-0855-11e9-9478-34a6dd614d96.png&#34; alt=&#34;color_icon_elisp&#34; title=&#34;Color Elisp icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/68990534-332aa600-088f-11ea-920f-20c9527a6466.png&#34; alt=&#34;evil_normal_state_icon&#34; title=&#34;Evil Normal State icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/68990540-4dfd1a80-088f-11ea-8e53-ab77af4c58c2.png&#34; alt=&#34;evil_insert_state_icon&#34; title=&#34;Evil Insert State icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694476-b8103880-fbc5-11e8-9c18-91f5e9258333.png&#34; alt=&#34;evil_normal_state&#34; title=&#34;Evil Normal State&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694461-8b5c2100-fbc5-11e8-993e-d97baa9f01af.png&#34; alt=&#34;evil_insert_state&#34; title=&#34;Evil Insert State&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/53592864-c751c180-3bc9-11e9-9914-493007c013d5.png&#34; alt=&#34;lsp_version&#34; title=&#34;Perspective, LSP, Version, VCS and Flycheck&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694481-e0983280-fbc5-11e8-8cb2-c8d2e782bcdb.png&#34; alt=&#34;perspective&#34; title=&#34;Perspective, LSP, Version and VCS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/53592683-64602a80-3bc9-11e9-8054-91f79aa930b9.png&#34; alt=&#34;notifications&#34; title=&#34;Notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50301291-de857c00-04c1-11e9-84c5-bfbc8de8295f.png&#34; alt=&#34;minions&#34; title=&#34;Minions and minor modes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50302008-c57dca80-04c3-11e9-8578-50154ef4f9f0.png&#34; alt=&#34;debug&#34; title=&#34;Debug state&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/51301061-da209480-1a68-11e9-9f64-905d889df9d6.png&#34; alt=&#34;nyan_parrot&#34; title=&#34;Nyan and Parrot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/69004814-20c67000-0954-11ea-8489-f5a527a80574.png&#34; alt=&#34;irc&#34; title=&#34;IRC Notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/53593622-ba35d200-3bcb-11e9-85b3-38d64d05c127.png&#34; alt=&#34;battery&#34; title=&#34;Battery&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/57503916-e769d380-7324-11e9-906d-44c79f7408a3.png&#34; alt=&#34;package&#34; title=&#34;Package&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/57506248-d96c8080-732d-11e9-8167-644c8fc4e0db.png&#34; alt=&#34;info&#34; title=&#34;Info&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/57506112-6531dd00-732d-11e9-8a5e-22166f42dd4c.png&#34; alt=&#34;helm&#34; title=&#34;Helm&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;From melpa, &lt;code&gt;M-x package-install RET doom-modeline RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;init.el&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;doom-modeline)&#xA;(doom-modeline-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;after-init-hook #&#39;doom-modeline-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use-package&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package doom-modeline&#xA;  :ensure t&#xA;  :init (doom-modeline-mode 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package doom-modeline&#xA;  :ensure t&#xA;  :hook (after-init . doom-modeline-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This package is able to display icons if &lt;code&gt;all-the-icons&lt;/code&gt; package and required fonts are installed. Run &lt;code&gt;M-x all-the-icons-install-fonts&lt;/code&gt; to install the necessary fonts. Please refer to the &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el#installation&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;init.el&lt;/code&gt; if you want to use icons,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Install via `M-x package-install RET all-the-icons RET`&#xA;(require &#39;all-the-icons)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package all-the-icons&#xA;  :ensure t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Strongly recommend to use &lt;a href=&#34;https://github.com/hlissner/emacs-doom-themes&#34;&gt;doom-themes&lt;/a&gt; at the same time.&lt;/p&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;M-x customize-group RET doom-modeline RET&lt;/code&gt; or set the variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; If non-nil, cause imenu to see `doom-modeline&#39; declarations.&#xA;;; This is done by adjusting `lisp-imenu-generic-expression&#39; to&#xA;;; include support for finding `doom-modeline-def-*&#39; forms.&#xA;;; Must be set before loading doom-modeline.&#xA;(setq doom-modeline-support-imenu t)&#xA;&#xA;;; How tall the mode-line should be. It&#39;s only respected in GUI.&#xA;;; If the actual char height is larger, it respects the actual height.&#xA;(setq doom-modeline-height 25)&#xA;&#xA;;; How wide the mode-line bar should be. It&#39;s only respected in GUI.&#xA;(setq doom-modeline-bar-width 4)&#xA;&#xA;;; Whether to use hud instead of default bar. It&#39;s only respected in GUI.&#xA;(setq doom-modeline-hud nil)&#xA;&#xA;;; The limit of the window width.&#xA;;; If `window-width&#39; is smaller than the limit, some information won&#39;t be&#xA;;; displayed. It can be an integer or a float number. `nil&#39; means no limit.&#34;&#xA;(setq doom-modeline-window-width-limit 85)&#xA;&#xA;;; How to detect the project root.&#xA;;; nil means to use `default-directory&#39;.&#xA;;; The project management packages have some issues on detecting project root.&#xA;;; e.g. `projectile&#39; doesn&#39;t handle symlink folders well, while `project&#39; is unable&#xA;;; to hanle sub-projects.&#xA;;; You can specify one if you encounter the issue.&#xA;(setq doom-modeline-project-detection &#39;auto)&#xA;&#xA;;; Determines the style used by `doom-modeline-buffer-file-name&#39;.&#xA;;;&#xA;;; Given ~/Projects/FOSS/emacs/lisp/comint.el&#xA;;;   auto =&amp;gt; emacs/l/comint.el (in a project) or comint.el&#xA;;;   truncate-upto-project =&amp;gt; ~/P/F/emacs/lisp/comint.el&#xA;;;   truncate-from-project =&amp;gt; ~/Projects/FOSS/emacs/l/comint.el&#xA;;;   truncate-with-project =&amp;gt; emacs/l/comint.el&#xA;;;   truncate-except-project =&amp;gt; ~/P/F/emacs/l/comint.el&#xA;;;   truncate-upto-root =&amp;gt; ~/P/F/e/lisp/comint.el&#xA;;;   truncate-all =&amp;gt; ~/P/F/e/l/comint.el&#xA;;;   truncate-nil =&amp;gt; ~/Projects/FOSS/emacs/lisp/comint.el&#xA;;;   relative-from-project =&amp;gt; emacs/lisp/comint.el&#xA;;;   relative-to-project =&amp;gt; lisp/comint.el&#xA;;;   file-name =&amp;gt; comint.el&#xA;;;   buffer-name =&amp;gt; comint.el&amp;lt;2&amp;gt; (uniquify buffer name)&#xA;;;&#xA;;; If you are experiencing the laggy issue, especially while editing remote files&#xA;;; with tramp, please try `file-name&#39; style.&#xA;;; Please refer to https://github.com/bbatsov/projectile/issues/657.&#xA;(setq doom-modeline-buffer-file-name-style &#39;auto)&#xA;&#xA;;; Whether display icons in the mode-line.&#xA;;; While using the server mode in GUI, should set the value explicitly.&#xA;(setq doom-modeline-icon t)&#xA;&#xA;;; Whether display the icon for `major-mode&#39;. It respects `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-major-mode-icon t)&#xA;&#xA;;; Whether display the colorful icon for `major-mode&#39;.&#xA;;; It respects `all-the-icons-color-icons&#39;.&#xA;(setq doom-modeline-major-mode-color-icon t)&#xA;&#xA;;; Whether display the icon for the buffer state. It respects `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-buffer-state-icon t)&#xA;&#xA;;; Whether display the modification icon for the buffer.&#xA;;; It respects `doom-modeline-icon&#39; and `doom-modeline-buffer-state-icon&#39;.&#xA;(setq doom-modeline-buffer-modification-icon t)&#xA;&#xA;;; Whether display the time icon. It respects variable `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-time-icon t)&#xA;&#xA;;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.&#xA;(setq doom-modeline-unicode-fallback nil)&#xA;&#xA;;; Whether display the buffer name.&#xA;(setq doom-modeline-buffer-name t)&#xA;&#xA;;; Whether highlight the modified buffer name.&#xA;(setq doom-modeline-highlight-modified-buffer-name t)&#xA;&#xA;;; Whether display the minor modes in the mode-line.&#xA;(setq doom-modeline-minor-modes nil)&#xA;&#xA;;; If non-nil, a word count will be added to the selection-info modeline segment.&#xA;(setq doom-modeline-enable-word-count nil)&#xA;&#xA;;; Major modes in which to display word count continuously.&#xA;;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count&#39;.&#xA;;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count&#39; or&#xA;;; remove the modes from `doom-modeline-continuous-word-count-modes&#39;.&#xA;(setq doom-modeline-continuous-word-count-modes &#39;(markdown-mode gfm-mode org-mode))&#xA;&#xA;;; Whether display the buffer encoding.&#xA;(setq doom-modeline-buffer-encoding t)&#xA;&#xA;;; Whether display the indentation information.&#xA;(setq doom-modeline-indent-info nil)&#xA;&#xA;;; If non-nil, only display one number for checker information if applicable.&#xA;(setq doom-modeline-checker-simple-format t)&#xA;&#xA;;; The maximum number displayed for notifications.&#xA;(setq doom-modeline-number-limit 99)&#xA;&#xA;;; The maximum displayed length of the branch name of version control.&#xA;(setq doom-modeline-vcs-max-length 12)&#xA;&#xA;;; Whether display the workspace name. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-workspace-name t)&#xA;&#xA;;; Whether display the perspective name. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-persp-name t)&#xA;&#xA;;; If non nil the default perspective name is displayed in the mode-line.&#xA;(setq doom-modeline-display-default-persp-name nil)&#xA;&#xA;;; If non nil the perspective name is displayed alongside a folder icon.&#xA;(setq doom-modeline-persp-icon t)&#xA;&#xA;;; Whether display the `lsp&#39; state. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-lsp t)&#xA;&#xA;;; Whether display the GitHub notifications. It requires `ghub&#39; package.&#xA;(setq doom-modeline-github nil)&#xA;&#xA;;; The interval of checking GitHub.&#xA;(setq doom-modeline-github-interval (* 30 60))&#xA;&#xA;;; Whether display the modal state.&#xA;;; Including `evil&#39;, `overwrite&#39;, `god&#39;, `ryo&#39; and `xah-fly-keys&#39;, etc.&#xA;(setq doom-modeline-modal t)&#xA;&#xA;;; Whether display the modal state icon.&#xA;;; Including `evil&#39;, `overwrite&#39;, `god&#39;, `ryo&#39; and `xah-fly-keys&#39;, etc.&#xA;(setq doom-modeline-modal-icon t)&#xA;&#xA;;; Whether display the mu4e notifications. It requires `mu4e-alert&#39; package.&#xA;(setq doom-modeline-mu4e nil)&#xA;;; also enable the start of mu4e-alert&#xA;(mu4e-alert-enable-mode-line-display)&#xA;&#xA;;; Whether display the gnus notifications.&#xA;(setq doom-modeline-gnus t)&#xA;&#xA;;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)&#xA;(setq doom-modeline-gnus-timer 2)&#xA;&#xA;;; Wheter groups should be excludede when gnus automatically being updated.&#xA;(setq doom-modeline-gnus-excluded-groups &#39;(&#34;dummy.group&#34;))&#xA;&#xA;;; Whether display the IRC notifications. It requires `circe&#39; or `erc&#39; package.&#xA;(setq doom-modeline-irc t)&#xA;&#xA;;; Function to stylize the irc buffer names.&#xA;(setq doom-modeline-irc-stylize &#39;identity)&#xA;&#xA;;; Whether display the time. It respects `display-time-mode&#39;.&#xA;(setq doom-modeline-time t)&#xA;&#xA;;; Whether display the misc segment on all mode lines.&#xA;;; If nil, display only if the mode line is active.&#xA;(setq doom-modeline-display-misc-in-all-mode-lines t)&#xA;&#xA;;; Whether display the environment version.&#xA;(setq doom-modeline-env-version t)&#xA;;; Or for individual languages&#xA;(setq doom-modeline-env-enable-python t)&#xA;(setq doom-modeline-env-enable-ruby t)&#xA;(setq doom-modeline-env-enable-perl t)&#xA;(setq doom-modeline-env-enable-go t)&#xA;(setq doom-modeline-env-enable-elixir t)&#xA;(setq doom-modeline-env-enable-rust t)&#xA;&#xA;;; Change the executables to use for the language version string&#xA;(setq doom-modeline-env-python-executable &#34;python&#34;) ; or `python-shell-interpreter&#39;&#xA;(setq doom-modeline-env-ruby-executable &#34;ruby&#34;)&#xA;(setq doom-modeline-env-perl-executable &#34;perl&#34;)&#xA;(setq doom-modeline-env-go-executable &#34;go&#34;)&#xA;(setq doom-modeline-env-elixir-executable &#34;iex&#34;)&#xA;(setq doom-modeline-env-rust-executable &#34;rustc&#34;)&#xA;&#xA;;; What to display as the version while a new one is being loaded&#xA;(setq doom-modeline-env-load-string &#34;...&#34;)&#xA;&#xA;;; By default, almost all segments are displayed only in the active window. To&#xA;;; display such segments in all windows, specify e.g.&#xA;(setq doom-modeline-always-visible-segments &#39;(mu4e irc))&#xA;&#xA;;; Hooks that run before/after the modeline version string is updated&#xA;(setq doom-modeline-before-update-env-hook nil)&#xA;(setq doom-modeline-after-update-env-hook nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display icons correctly?&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt; are necessary. Then run &lt;code&gt;M-x all-the-icons-install-fonts&lt;/code&gt; to install the resource fonts. On Windows, the fonts should be installed manually. &lt;code&gt;all-the-icons&lt;/code&gt; only support GUI. If you don&#39;t like color icons, &lt;code&gt;(setq all-the-icons-color-icons nil)&lt;/code&gt; to disable it. Please refer to &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons.el&lt;/a&gt; for details.&lt;/p&gt; &lt;p&gt;If the icons are not displayed correctly although &lt;code&gt;all-the-icons&lt;/code&gt; fonts are installed correctly, please install the &lt;a href=&#34;http://users.teilar.gr/~g1951d/License.pdf&#34;&gt;non-free&lt;/a&gt; font &lt;a href=&#34;https://dn-works.com/wp-content/uploads/2020/UFAS-Fonts/Symbola.zip&#34;&gt;Symbola&lt;/a&gt;. This issue usually occurs on Windows.&lt;/p&gt; &lt;p&gt;If you are using &lt;a href=&#34;https://github.com/tumashu/cnfonts&#34;&gt;cnfonts&lt;/a&gt;, it will conflict with &lt;code&gt;all-the-icons&lt;/code&gt;. The workaround is &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/278#issuecomment-569510336&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In terminal mode, no icons or bars will be displayed, even though &lt;code&gt;all-the-icons&lt;/code&gt; fonts are installed successfully, and &lt;code&gt;doom-modeline-icon&lt;/code&gt; is non-nil.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I am experiencing the laggy issue, how to resolve it?&lt;/p&gt; &lt;p&gt;Add this configuration into your init file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Don’t compact font caches during GC.&#xA;(setq inhibit-compacting-font-caches t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A ridiculous path is displayed on the mode-line while visiting a symbolink.&lt;/p&gt; &lt;p&gt;It&#39;s the default behaviors of Vanilla Emacs. If you want to display the real names, please put this into your init file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq find-file-visit-truename t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the file is controlled by vc, refer to the documentation of &lt;code&gt;vc-follow-symlinks&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why doesn&#39;t change of branch reflect in modeline?&lt;/p&gt; &lt;p&gt;Actually it&#39;s related to &lt;code&gt;magit&lt;/code&gt; and &lt;code&gt;vc-mode&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Workaround: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Revert the buffers manually.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;(setq auto-revert-check-vc-info t)&lt;/code&gt; brings the performance issue.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Refer to: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://magit.vc/manual/magit/The-mode_002dline-information-isn_0027t-always-up_002dto_002ddate.html&#34;&gt;The mode-line information isn’t always up-to-date&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/magit/magit/issues/2687&#34;&gt;Maybe provide an alternative to VC&#39;s mode-line information&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can I add my mode-line segments myself? How to do that? How can I define my own mode-line?&lt;/p&gt; &lt;p&gt;There are two methods.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If the information is simple, just add to &lt;code&gt;mode-line-misc-info&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use &lt;code&gt;doom-modeline-def-modeline&lt;/code&gt; to define your own mode-line and set it as default.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Define your custom doom-modeline&#xA;(doom-modeline-def-modeline &#39;my-simple-line&#xA;  &#39;(bar matches buffer-info remote-host buffer-position parrot selection-info)&#xA;  &#39;(misc-info minor-modes input-method buffer-encoding major-mode process vcs checker))&#xA;&#xA;;; Set default mode-line&#xA;(add-hook &#39;doom-modeline-mode-hook&#xA;          (lambda ()&#xA;            (doom-modeline-set-modeline &#39;my-simple-line &#39;default)))&#xA;&#xA;;; Configure other mode-lines based on major modes&#xA;(add-to-list &#39;doom-modeline-mode-alist &#39;(my-mode . my-simple-line))&#xA;&#xA;;; Or disable other mode-lines&#xA;(setq &#39;doom-modeline-mode-alist nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to specify font family and size in modeline?&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq doom-modeline-height 1) ; optional&#xA;(if (facep &#39;mode-line-active)&#xA;    (set-face-attribute &#39;mode-line-active nil :family &#34;Noto Sans&#34; :height 100) ; For 29+&#xA;  (set-face-attribute &#39;mode-line nil :family &#34;Noto Sans&#34; :height 100))&#xA;(set-face-attribute &#39;mode-line-inactive nil :family &#34;Noto Sans&#34; :height 100)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq doom-modeline-height 1) ; optional&#xA;(custom-set-faces&#xA;  &#39;(mode-line ((t (:family &#34;Noto Sans&#34; :height 0.9))))&#xA;  &#39;(mode-line-active ((t (:family &#34;Noto Sans&#34; :height 0.9)))) ; For 29+&#xA;  &#39;(mode-line-inactive ((t (:family &#34;Noto Sans&#34; :height 0.9)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/189&#34;&gt;#189&lt;/a&gt; and &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/301&#34;&gt;#301&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The right side of the modeline is cut off. How to fix it?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tweak &lt;code&gt;all-the-icons-scale-factor&lt;/code&gt;. e.g. &lt;code&gt;(setq all-the-icons-scale-factor 1.1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use another font family or size. See above.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to disable symbolic links expanding in mode-line?&lt;/p&gt; &lt;p&gt;If you encounter the issue like this&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9449246/62822565-c3f93380-bb74-11e9-95f6-f9c24a6cbd14.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &lt;p&gt;please try this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; built-in `project&#39; on 26+&#xA;(setq doom-modeline-project-detection &#39;project)&#xA;;; or `find-in-project&#39; if it&#39;s installed&#xA;(setq doom-modeline-project-detection &#39;ffip)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more details, refer to &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/209&#34;&gt;#209&lt;/a&gt; and &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/224&#34;&gt;#224&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can &lt;code&gt;doom-modeline&lt;/code&gt; show match count while search with &lt;code&gt;evil-search&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Yes. For better experience, should enable &lt;code&gt;anzu-mode&lt;/code&gt; and load &lt;code&gt;evil-anzu&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to show that the R is running in inferior ess R mode?&lt;/p&gt; &lt;p&gt;The ess R mode modifies &lt;code&gt;mode-line-buffer-identification&lt;/code&gt; directly to display the status. To display the status in &lt;code&gt;doom-modeline&lt;/code&gt;, you can add the status to &lt;code&gt;mode-line-process&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt; as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;inferior-ess-mode-hook&#xA;      (lambda ()&#xA;        (add-to-list &#39;mode-line-process &#39;(:eval (nth ess--busy-count ess-busy-strings)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display company mode-line information?&lt;/p&gt; &lt;p&gt;Enable &lt;code&gt;doom-modeline-minor-modes&lt;/code&gt; or &lt;code&gt;(add-to-list &#39;global-mode-string company-lighter)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display LaTeX compilation information in the mode line?&lt;/p&gt; &lt;p&gt;Use &lt;a href=&#34;https://github.com/haji-ali/procress&#34;&gt;process&lt;/a&gt; package. Refer to &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/387&#34;&gt;#387&lt;/a&gt; for more details.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;procress)&#xA;(procress-load-default-svg-images)&#xA;(add-hook &#39;LaTeX-mode-hook #&#39;procress-auctex-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you think it&#39;s helpful for you, please consider paying a cup of coffee for me. Thank you! &lt;span&gt;😄&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818854-44204900-e248-11e9-9cc5-3e6339587cd8.png&#34; alt=&#34;Alipay&#34; width=&#34;120&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818844-366ac380-e248-11e9-931c-4bd872d0566b.png&#34; alt=&#34;Wechat Pay&#34; width=&#34;120&#34;&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://paypal.me/seagle0128&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://www.paypalobjects.com/digitalassets/c/website/marketing/apac/C2/logos-buttons/optimize/44_Grey_PayPal_Pill_Button.png&#34; alt=&#34;PayPal&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.buymeacoffee.com/s9giES1&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; width=&#34;160&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>magit/transient</title>
    <updated>2023-01-01T01:42:10Z</updated>
    <id>tag:github.com,2023-01-01:/magit/transient</id>
    <link href="https://github.com/magit/transient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transient commands&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Transient commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Taking inspiration from prefix keys and prefix arguments, Transient implements a similar abstraction involving a prefix command, infix arguments and suffix commands. We could call this abstraction a &#34;transient command&#34;, but because it always involves at least two commands (a prefix and a suffix) we prefer to call it just a &#34;transient&#34;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote Transient keymaps are a feature provided by Emacs. Transients as implemented by this package involve the use of transient keymaps.&lt;/p&gt; &#xA;&lt;p&gt;Emacs provides a feature that it calls &#34;prefix commands&#34;. When we talk about &#34;prefix commands&#34; in Transient&#39;s documentation, then we mean our own kind of &#34;prefix commands&#34;, unless specified otherwise. To avoid ambiguity we sometimes use the terms &#34;transient prefix command&#34; for our kind and &#34;regular prefix command&#34; for Emacs&#39; kind. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;When the user calls a transient prefix command, then a transient (temporary) keymap is activated, which binds the transient&#39;s infix and suffix commands, and functions that control the transient state are added to &lt;del&gt;pre-command-hook&lt;/del&gt; and &lt;del&gt;post-command-hook&lt;/del&gt;. The available suffix and infix commands and their state are shown in a popup buffer until the transient is exited by invoking a suffix command.&lt;/p&gt; &#xA;&lt;p&gt;Calling an infix command causes its value to be changed. How that is done depends on the type of the infix command. The simplest case is an infix command that represents a command-line argument that does not take a value. Invoking such an infix command causes the switch to be toggled on or off. More complex infix commands may read a value from the user, using the minibuffer.&lt;/p&gt; &#xA;&lt;p&gt;Calling a suffix command usually causes the transient to be exited; the transient keymaps and hook functions are removed, the popup buffer no longer shows information about the (no longer bound) suffix commands, the values of some public global variables are set, while some internal global variables are unset, and finally the command is actually called. Suffix commands can also be configured to not exit the transient.&lt;/p&gt; &#xA;&lt;p&gt;A suffix command can, but does not have to, use the infix arguments in much the same way it can choose to use or ignore the prefix arguments. For a suffix command that was invoked from a transient the variable &lt;del&gt;transient-current-suffixes&lt;/del&gt; and the function &lt;del&gt;transient-args&lt;/del&gt; serve about the same purpose as the variables &lt;del&gt;prefix-arg&lt;/del&gt; and &lt;del&gt;current-prefix-arg&lt;/del&gt; do for any command that was called after the prefix arguments have been set using a command such as &lt;del&gt;universal-argument&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[[http://readme.emacsair.me/transient.png]]&lt;/p&gt;</summary>
  </entry>
</feed>