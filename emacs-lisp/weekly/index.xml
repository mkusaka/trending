<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:10:41Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-lsp/lsp-mode</title>
    <updated>2022-06-04T02:10:41Z</updated>
    <id>tag:github.com,2022-06-04:/emacs-lsp/lsp-mode</id>
    <link href="https://github.com/emacs-lsp/lsp-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs client/library for the Language Server Protocol&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: LSP Mode - Language Server Protocol support for Emacs description: Language Server Protocol support with multiples languages support for Emacs root_file: README.md&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/lsp-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lsp-mode-badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/lsp-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/lsp-mode-badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/swuxy5AAgT&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/emacs-lsp/lsp-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/logo.png&#34; width=&#34;240&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;Language Server Protocol Support for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/head.png&#34; alt=&#34;LSP mode&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode&#34;&gt;&lt;strong&gt;homepage&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/installation&#34;&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/languages&#34;&gt;&lt;strong&gt;languages&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/settings/mode/&#34;&gt;&lt;strong&gt;settings&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/&#34;&gt;&lt;strong&gt;tutorials&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/troubleshooting&#34;&gt;&lt;strong&gt;troubleshooting&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/gallery&#34;&gt;&lt;strong&gt;screenshots&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/faq&#34;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚ù§Ô∏è&lt;/span&gt; &lt;strong&gt;Community Driven&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üíé&lt;/span&gt; &lt;strong&gt;Fully featured&lt;/strong&gt; - supports &lt;strong&gt;all&lt;/strong&gt; features in Language Server Protocol v3.14.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üöÄ&lt;/span&gt; &lt;strong&gt;Fast&lt;/strong&gt; - see &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/performance&#34;&gt;performance section&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üåü&lt;/span&gt; &lt;strong&gt;Flexible&lt;/strong&gt; - choose between full-blown IDE with flashy UI or minimal distraction free.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚öô&lt;/span&gt; &lt;strong&gt;Easy to configure&lt;/strong&gt; - works out of the box and automatically upgrades if additional packages are present.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Client for &lt;a href=&#34;https://github.com/Microsoft/language-server-protocol/&#34;&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt; &#xA; &lt;li&gt;Real-time Diagnostics/linting via &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; (recommended) or &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26 (requires flymake&amp;gt;=1.0.5)&lt;/li&gt; &#xA; &lt;li&gt;Code completion - &lt;code&gt;company-capf&lt;/code&gt; / &lt;code&gt;completion-at-point&lt;/code&gt; (note that &lt;a href=&#34;https://github.com/tigersoldier/company-lsp&#34;&gt;company-lsp&lt;/a&gt; is no longer supported).&lt;/li&gt; &#xA; &lt;li&gt;Hovers - using &lt;a href=&#34;https://emacs-lsp.github.io/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code actions - via &lt;code&gt;lsp-execute-code-action&lt;/code&gt;, &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#code-actions-on-modeline&#34;&gt;modeline&lt;/a&gt; (recommended) or &lt;a href=&#34;https://emacs-lsp.github.io/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; sideline.&lt;/li&gt; &#xA; &lt;li&gt;Code outline - using builtin &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&#34;&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code navigation - using builtin &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&#34;&gt;xref&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-treemacs&#34;&gt;lsp-treemacs&lt;/a&gt; tree views or &lt;a href=&#34;https://emacs-lsp.github.io/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; peek functions.&lt;/li&gt; &#xA; &lt;li&gt;Code lens&lt;/li&gt; &#xA; &lt;li&gt;Symbol highlights&lt;/li&gt; &#xA; &lt;li&gt;Formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#project-errors-on-modeline&#34;&gt;Project errors&lt;/a&gt; on modeline&lt;/li&gt; &#xA; &lt;li&gt;Debugger - &lt;a href=&#34;https://emacs-lsp.github.io/dap-mode/&#34;&gt;dap-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#breadcrumb-on-headerline&#34;&gt;Breadcrumb on headerline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helm integration - &lt;a href=&#34;https://github.com/emacs-lsp/helm-lsp/&#34;&gt;helm-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ivy integration - &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ivy/&#34;&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Consult integration - &lt;a href=&#34;https://github.com/gagbo/consult-lsp&#34;&gt;consult-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Treemacs integration - &lt;a href=&#34;https://github.com/emacs-lsp/lsp-treemacs&#34;&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Semantic tokens as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justbur/emacs-which-key/&#34;&gt;which-key&lt;/a&gt; integration for better discovery&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#iedit&#34;&gt;iedit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#dired&#34;&gt;dired&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#integrations&#34;&gt;ido&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Presentations/demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/SystemCrafters&#34;&gt;System Crafters&lt;/a&gt; channel &lt;a href=&#34;https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN&#34;&gt;Emacs IDE Videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skybert&#34;&gt;skybert&lt;/a&gt;&#39;s emacsconf &lt;a href=&#34;https://media.emacsconf.org/2019/19.html&#34;&gt;presentation&lt;/a&gt; (Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thatwist&#34;&gt;thatwist&lt;/a&gt;&#39;s ScalaUA Conference &lt;a href=&#34;https://www.youtube.com/watch?v=x7ey0ifcqAg&amp;amp;feature=youtu.be&#34;&gt;presentation&lt;/a&gt; (Scala)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-docker/&#34;&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sebastiencs/company-box/&#34;&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/dap-mode&#34;&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justbur/emacs-which-key/&#34;&gt;which-key&lt;/a&gt; - Emacs package that displays available keybindings in popup&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov/projectile/&#34;&gt;projectile&lt;/a&gt; - Project Interaction Library for Emacs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ubolonton/emacs-tree-sitter&#34;&gt;emacs-tree-sitter&lt;/a&gt; - Faster, fine-grained code highlighting via &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;tree-sitter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akrl.sdf.org/gccemacs.html&#34;&gt;gccemacs&lt;/a&gt; - modified Emacs capable of compiling and running Emacs Lisp as native code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very much welcome!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Documentation for clients is generated from doc comments in the clients themselves (see &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-doc.el&#34;&gt;lsp-doc.el&lt;/a&gt;) and some metadata (see &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-clients.json&#34;&gt;lsp-clients.json&lt;/a&gt;) so please submit corrections accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Support the project&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;emacs-lsp&lt;/code&gt; organization has more than &lt;strong&gt;20,000 lines of code&lt;/strong&gt;, to keep all of this working, we need to implement new features and help the community on a lot of issues.&lt;/p&gt; &#xA;&lt;p&gt;You can help us keep going and improving it by &lt;strong&gt;&lt;a href=&#34;https://github.com/sponsors/emacs-lsp&#34;&gt;supporting the project&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/emacs-lsp&#34;&gt;&lt;img src=&#34;https://opencollective.com/emacs-lsp/tiers/backer.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Members&lt;/h3&gt; &#xA;&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt; &#xA;&lt;table id=&#34;emacs-lsp-members&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/totbwf&#34;&gt; &lt;img src=&#34;https://github.com/totbwf.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;totbwf&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;totbwf&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; F# &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/brotzeit&#34;&gt; &lt;img src=&#34;https://github.com/brotzeit.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;brotzeit&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;brotzeit&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Rust &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/dsyzling&#34;&gt; &lt;img src=&#34;https://github.com/dsyzling.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;dsyzling&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;dsyzling&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Scala &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/kurnevsky&#34;&gt; &lt;img src=&#34;https://github.com/kurnevsky.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;kurnevsky&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kurnevsky&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Scala | Rust &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/seagle0128&#34;&gt; &lt;img src=&#34;https://github.com/seagle0128.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;seagle0128&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;seagle0128&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Go | Python MS &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/sebastiansturm&#34;&gt; &lt;img src=&#34;https://github.com/sebastiansturm.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;sebastiansturm&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;sebastiansturm&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core | C++ &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/vibhavp&#34;&gt; &lt;img src=&#34;https://github.com/vibhavp.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;vibhavp&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;vibhavp&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/yyoncho&#34;&gt; &lt;img src=&#34;https://github.com/yyoncho.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;yyoncho&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;yyoncho&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core | Java &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/ericdallo&#34;&gt; &lt;img src=&#34;https://github.com/ericdallo.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;ericdallo&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;ericdallo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Dart/Flutter | Clojure &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/danielmartin&#34;&gt; &lt;img src=&#34;https://github.com/danielmartin.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;danielmartin&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;danielmartin&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; C++ | Swift &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/kiennq&#34;&gt; &lt;img src=&#34;https://github.com/kiennq.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;kiennq&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kiennq&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; completions | pwsh &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/nbfalcon&#34;&gt; &lt;img src=&#34;https://github.com/nbfalcon.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;nbfalcon&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;nbfalcon&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core | iedit &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/psibi&#34;&gt; &lt;img src=&#34;https://github.com/psibi.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;psibi&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;psibi&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Terraform &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>dalanicolai/image-roll.el</title>
    <updated>2022-06-04T02:10:41Z</updated>
    <id>tag:github.com,2022-06-04:/dalanicolai/image-roll.el</id>
    <link href="https://github.com/dalanicolai/image-roll.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual scroll display engine for Emacs&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;image-roll.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides a virtual scroll engine for displaying books/documents in Emacs. The main purpose of the package is to provide a continuous scrolling feature when viewing documents. This is the successor of the [[https://github.com/dalanicolai/pdf-continuous-scroll-mode.el][pdf-continuous-scroll-mode package]]. Making it a new package (instead of an update), was necessarry because this package provides a general &#39;display engine&#39; which can be used also by other packages, like doc-view.&lt;/p&gt; &#xA;&lt;p&gt;This implementation of the image-roll/continuous-scroll is based on a correct usage of vscroll, instead of using the vscroll functionality incorrectly (causing Emacs crashes when viewing large documents, see [[https://lists.gnu.org/archive/html/emacs-devel/2022-04/msg01234.html][this thread in the Emacs devel archives]]). Additionally, this implementation is quite a bit simpler and cleaner than previous implementations (e.g. the gap-overlays have been eliminated).&lt;/p&gt; &#xA;&lt;p&gt;The package is meant to be used in combination with some other package that provides features to extract and manage the data from the document. An example of such a package is the pdf-tools package as provided in the [[https://github.com/dalanicolai/pdf-tools/tree/pdf-roll][the pdf-roll branch of my pdf-tools repo]].&lt;/p&gt; &#xA;&lt;p&gt;The package is written in a way that it supports images/pages of different sizes on the same roll (see comment above `image-roll-scroll-forward&#39;). Also there is no minumum or maximum on the range of the sizes, and finally, it is written to support being displayed in (any number of) multiple windows.&lt;/p&gt; &#xA;&lt;p&gt;This file provides four buffer local variables that should be set to the values of the functions that correctly &#39;retrieve&#39; the required data from the document. See their docstrings and the &lt;code&gt;image-roll-directory&#39; function (or &lt;/code&gt;pdf-scroll.el&#39;) for more info.&lt;/p&gt; &#xA;&lt;p&gt;The core functionality, i.e. the &#39;scroll&#39; is provided by the &lt;code&gt;image-roll--new-window-function&#39; and &lt;/code&gt;image-roll--redisplay&#39; functions. The function &lt;code&gt;image-roll--new-window-function&#39; should be added to the &lt;/code&gt;image-mode-new-window-functions&#39; while the &lt;code&gt;image-roll--redisplay&#39; should be added to the &lt;/code&gt;window-configuration-change-hook&#39; both as buffer local hook functions (i.e. by passing a non-nil LOCAL argument to &lt;code&gt;add-hook&#39;). For the &lt;/code&gt;image-mode-new-window-functions&#39; to have effect, the &lt;code&gt;image-mode-winprops&#39; should be initialized by either using &lt;/code&gt;image-mode-setup-winprops&#39; (like in the body of &lt;code&gt;pdf-view-mode&#39;) or by initializing the &lt;/code&gt;image-mode-winprops-alist&#39; explicitly (by setting its value to nil, like in the `image-roll-mode&#39; example).&lt;/p&gt; &#xA;&lt;p&gt;** Donations Donations are more than welcome, as I have been working many weeks/months on this feature for zero, while I can not even afford to buy new socks without holes. Thank you very much!&lt;/p&gt; &#xA;&lt;p&gt;** Known issues [[https://github.com/dalanicolai/image-roll.el/issues/4]]&lt;/p&gt; &#xA;&lt;p&gt;** Todo&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See if we can cache page images in advance.&lt;/li&gt; &#xA; &lt;li&gt;Add support for &#39;sliced&#39; images (in particular for =pdf-view-set-slice-from-bounding-box=)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Installation and usage Because there is still the issue, described just above, left, I am not yet publishing this package on some package archive (or submit it to get included into Emacs core). Therefore, it is up to you how you install this package, of which the simplest way is to clone this repo or download the image-roll.el file, and =load= it from you init file.&lt;/p&gt; &#xA;&lt;p&gt;This does not provide any useful functionality by itself, but instead it is meant to be used by some other package (see below).&lt;/p&gt; &#xA;&lt;p&gt;*** Spacemacs users Simply clone the private layer [[https://github.com/dalanicolai/pdf-layer][here]], then restart Spacemacs and update your packages. Finally, from within a pdf buffer press &lt;del&gt;c&lt;/del&gt; to activate displaying using the image-roll.&lt;/p&gt; &#xA;&lt;p&gt;*** Doom users Don&#39;t use the =pdf= module, and add the following code to =packages.el=: #+begin_src emacs-lisp (package! pdf-tools :recipe (:host github :repo &#34;dalanicolai/pdf-tools&#34; :branch &#34;pdf-roll&#34; :files (&#34;lisp/*.el&#34; &#34;README&#34; (&#34;build&#34; &#34;Makefile&#34;) (&#34;build&#34; &#34;server&#34;) (:exclude &#34;lisp/tablist.el&#34; &#34;lisp/tablist-filter.el&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;(package! image-roll :recipe (:host github :repo &#34;dalanicolai/image-roll.el&#34;)) #+end_src then manually remove the old pdf-tools directory using: #+begin_src bash rm -rf ~/.emacs.d/.local/straight/repos/pdf-tools/ #+end_src&lt;/p&gt; &#xA;&lt;p&gt;then run =doom sync= (should we add =-u= here? I am no Doom user).&lt;/p&gt; &#xA;&lt;p&gt;Finally, from some pdf buffer do =M-x pdf-view-roll-minor-mode= to get continuous scrolling.&lt;/p&gt; &#xA;&lt;p&gt;** Install complementary packages (support) *** pdf-tools A =pdf-tools= branch that implements =image-roll= support is available in [[https://github.com/dalanicolai/pdf-tools/tree/pdf-roll][the pdf-roll branch of my pdf-tools fork]]. It is probably easiest to install it using [[https://melpa.org/#/quelpa][quelpa]] or [[https://github.com/raxod502/straight.el][straight]]. I am a Spacemacs user, where I install the package (and also image-mode) using the following code: #+begin_src emacs-lisp (pdf-tools :location (recipe :fetcher github :repo &#34;dalanicolai/pdf-tools&#34; :branch &#34;pdf-roll&#34; :files (&#34;lisp/*.el&#34; &#34;README&#34; (&#34;build&#34; &#34;Makefile&#34;) (&#34;build&#34; &#34;server&#34;) (:exclude &#34;lisp/tablist.el&#34; &#34;lisp/tablist-filter.el&#34;)))) (image-roll :location (recipe :fetcher github :repo &#34;dalanicolai/image-roll.el&#34;)) #+end_src From the above code example, I hope you are able to find out how to adapt it for quelpa/straight. Contributions, e.g. of installation instructions, are very welcome.&lt;/p&gt; &#xA;&lt;p&gt;After successful installation, from a pdf buffer do =M-x pdf-view-roll-minor-mode= to toggle displaying using the image roll.&lt;/p&gt; &#xA;&lt;p&gt;Because the image-roll package is not yet available from an archive, I am not creating a PR at pdf-tools yet.&lt;/p&gt; &#xA;&lt;p&gt;*** doc-view If you would like to also use the image-roll in doc-view, then simply download and load [[https://github.com/dalanicolai/emacs/blob/doc-view-image-roll/lisp/doc-view.el][this doc-view.el file]]. After opening a file in =doc-view=, first WAIT UNTIL ALL PAGES HAVE BEEN CONVERTED (see page counter at bottom of screen). Subsequently do =M-x doc-view-roll-minor-mode= (for doc-view, currently only activation of the minor mode has been implemented).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New keybindings | &lt;em&gt;Key binding&lt;/em&gt; | &lt;em&gt;Description&lt;/em&gt; | |-------------+-----------------------------| | &lt;del&gt;S-next&lt;/del&gt; | Scroll full screen forward | | &lt;del&gt;S-prior&lt;/del&gt; | Scroll full screen backward | (next/prior = PgUp/PgDown)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emacs-tree-sitter/tree-sitter-langs</title>
    <updated>2022-06-04T02:10:41Z</updated>
    <id>tag:github.com,2022-06-04:/emacs-tree-sitter/tree-sitter-langs</id>
    <link href="https://github.com/emacs-tree-sitter/tree-sitter-langs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language bundle for Emacs&#39;s tree-sitter package&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Tree-sitter Language Bundle for Emacs&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_HTML &lt;a href=&#34;https://dev.azure.com/emacs-tree-sitter/tree-sitter-langs/_build/latest?definitionId=2&amp;amp;branchName=master&#34; rel=&#34;nofollow&#34;&gt; &lt;img src=&#34;https://dev.azure.com/emacs-tree-sitter/tree-sitter-langs/_apis/build/status/ci?branchName=master&amp;amp;label=build&amp;amp;api-version=6.0-preview.1&#34; alt=&#34;Build Status&#34; style=&#34;max-width:100%;&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs/actions/workflows/main.yml&#34;&gt; &lt;img src=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34; style=&#34;max-width: 100%;&#34;&gt; &lt;/a&gt; #+END_HTML&lt;/p&gt; &#xA;&lt;p&gt;This is a convenient language bundle for the Emacs package [[https://github.com/emacs-tree-sitter/elisp-tree-sitter][tree-sitter]]. It serves as an interim distribution mechanism, until &lt;del&gt;tree-sitter&lt;/del&gt; is widespread enough for language-specific major modes to incorporate its functionalities.&lt;/p&gt; &#xA;&lt;p&gt;For each supported language, this package provides:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pre-compiled grammar binaries for 3 major platforms: macOS, Linux and Windows, on x86_64. In the future, &lt;del&gt;tree-sitter-langs&lt;/del&gt; may provide tooling for major modes to do this on their own.&lt;/li&gt; &#xA; &lt;li&gt;An optional &lt;del&gt;highlights.scm&lt;/del&gt; file that provides highlighting patterns. This is mainly intended for major modes that are not aware of &lt;del&gt;tree-sitter&lt;/del&gt;. A language major mode that wants to use &lt;del&gt;tree-sitter&lt;/del&gt; for syntax highlighting should instead provide the query patterns on its own, using the mechanisms defined by [[https://emacs-tree-sitter.github.io/syntax-highlighting/interface-for-modes/][tree-sitter-hl]].&lt;/li&gt; &#xA; &lt;li&gt;Optional query patterns for other minor modes that provide high-level functionalities on top of &lt;del&gt;tree-sitter&lt;/del&gt;, such as code folding, evil text objects... As with highlighting patterns, major modes that are directly aware of &lt;del&gt;tree-sitter&lt;/del&gt; should provide the query patterns on their own.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Highlighting Queries&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;Note&lt;/em&gt;: Highlighting styles are a mattter of taste.&lt;/h1&gt; &#xA;&lt;p&gt;Highlighting query patterns for a language are in the file &lt;del&gt;queries/&#xA;  &lt;lang&gt;&#xA;   /highlights.scm&#xA;  &lt;/lang&gt;&lt;/del&gt;. Most of them are &lt;em&gt;intentionally different&lt;/em&gt; from those from upstream repositories, which are more geared towards /GitHub&#39;s use cases/. We try to be more consistent with /Emacs&#39;s existing conventions/. (For some languages, this is WIP, so their patterns may look similar to upstream&#39;s.)&lt;/p&gt; &#xA;&lt;p&gt;In general, try to follow what the docstrings of &lt;del&gt;tree-sitter-hl-face:&lt;/del&gt; faces say. Most importantly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Definitions and uses should be differentiated: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;@function&lt;/del&gt; vs. &lt;del&gt;@function.call&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;@method&lt;/del&gt; vs. &lt;del&gt;@method.call&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;@type.parameter&lt;/del&gt; vs. &lt;del&gt;@type.argument&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;@variable&lt;/del&gt; and &lt;del&gt;@variable.parameter&lt;/del&gt; should be applied only to declarations/definitions/bindings/mutations (/writes/), not usage (/reads/).&lt;/li&gt; &#xA; &lt;li&gt;Special faces should have high priority (placed earlier in the pattern list): &lt;del&gt;@function.macro&lt;/del&gt;, &lt;del&gt;@type.builtin&lt;/del&gt;, &lt;del&gt;@variable.special&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Patterns whose internals may be highlighted should have low priority (placed towards the end). Example: strings with interpolation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Mode-specific highlighting Some languages are associated with multiple major modes. Mode-specific highlighting patterns are provided by the files &lt;del&gt;queries/&#xA;  &lt;lang&gt;&#xA;   /highlights.&#xA;   &lt;major-mode&gt;&#xA;    .scm&#xA;   &lt;/major-mode&gt;&#xA;  &lt;/lang&gt;&lt;/del&gt;. These are combined with the base highlighting patterns in &lt;del&gt;queries/&#xA;  &lt;lang&gt;&#xA;   /highlights.scm&#xA;  &lt;/lang&gt;&lt;/del&gt;, but have higher precedence.&lt;/p&gt; &#xA;&lt;p&gt;** Building Grammars from Source Note: If you also plan to work on [[https://github.com/emacs-tree-sitter/elisp-tree-sitter#building-grammars-from-source][elisp-tree-sitter]], it might be more convenient to work with this repository as a submodule.&lt;/p&gt; &#xA;&lt;p&gt;*** Tools and dependencies&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install [[https://cask.readthedocs.io][cask]].&lt;/li&gt; &#xA; &lt;li&gt;Install ELisp dependencies: #+begin_src bash cask install #+end_src&lt;/li&gt; &#xA; &lt;li&gt;Install NodeJS. It is needed to generate the grammar code from the JavaScript DSL. The recommended tool to manage NodeJS is [[https://volta.sh/][volta]].&lt;/li&gt; &#xA; &lt;li&gt;Install [[https://tree-sitter.github.io/tree-sitter/creating-parsers#installation][tree-sitter CLI tool]]. (Its binary can also be downloaded directly from [[https://github.com/tree-sitter/tree-sitter/releases][GitHub]].) &lt;em&gt;Note: versions 0.20+ cannot be used, as they introduce [[https://github.com/tree-sitter/tree-sitter/pull/1157][a breaking change]] in binary storage location&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Building grammars To build a specific language&#39;s grammar, run &lt;del&gt;script/compile&lt;/del&gt;. (See the list of registered languages in [[./repos][repos/]].) For example: #+begin_src bash script/compile rust #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To build all registered languages, and creating the bundle: #+begin_src bash script/compile all #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Adding a new grammar&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register a new submodule. For example: #+begin_src bash # git submodule add -b &#xA;  &lt;branch&gt;&#xA;    -- &#xA;   &lt;git-url&gt;&#xA;     repos/&#xA;    &lt;lang&gt;&#xA;      git submodule add -b master -- &#xA;     &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-rust&#34;&gt;https://github.com/tree-sitter/tree-sitter-rust&lt;/a&gt; repos/rust #+end_src&#xA;    &lt;/lang&gt;&#xA;   &lt;/git-url&gt;&#xA;  &lt;/branch&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modify its settings in [[.gitmodules][.gitmodules]]: #+begin_src conf update = none ignore = dirty #+end_src&lt;/li&gt; &#xA; &lt;li&gt;Try building and testing it. For example: #+begin_src bash script/compile rust script/test rust #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>