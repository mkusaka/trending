<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-05T01:38:02Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tninja/aider.el</title>
    <updated>2025-01-05T01:38:02Z</updated>
    <id>tag:github.com,2025-01-05:/tninja/aider.el</id>
    <link href="https://github.com/tninja/aider.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;aider emacs plugin for https://github.com/paul-gauthier/aider&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: aider.el : aider (AI Pair Programming) Inside Emacs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Do you enjoy the AI features of the [[https://www.cursor.com/][Cursor AI Code Editor]] but prefer working within Emacs?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/paul-gauthier/aider][Aider]] is a well-known and highly effective AI pair programming tool for the terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;aider.el&lt;/code&gt; package offers an interactive interface to communicate with Aider in Emacs.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Most of the Elisp code in this repository was generated by Aider or &lt;code&gt;aider.el&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why Use &lt;code&gt;aider.el&lt;/code&gt; in Emacs?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pop-up Menu: No need to remember commands. (aider-transient-menu)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:./transient_menu.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following commands are integrated into the aider menu:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Aider session management:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-run-aider&lt;/code&gt;): Creates a comint-based, &lt;em&gt;git repo-specific Aider session&lt;/em&gt; for interactive conversation. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Git repository identification is based on the current file&#39;s path&lt;/li&gt; &#xA;   &lt;li&gt;Multiple Aider sessions can run simultaneously for different Git repositories&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-switch-to-buffer&lt;/code&gt;): Switch to the Aider buffer. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;use &#34;^&#34; in the menu to toggle open aider session in other window inside current frame, or open a dedicate frame for aider session&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** More ways to add files to the Aider buffer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use &#34;@&#34; in the menu to toggle add file between read-write mode and read-only mode&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-add-current-file&lt;/code&gt;): Add the current buffer file.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-add-files-in-current-window&lt;/code&gt;): Add all buffers in the current window.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-add-same-type-files-under-dir&lt;/code&gt;): Add all files with the same suffix as the current file under the current directory to Aider.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-batch-add-dired-marked-files&lt;/code&gt;): Add multiple Dired marked files to the Aider buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Refactor code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-function-or-region-refactor&lt;/code&gt;): If a region is selected, ask Aider to refactor the selected region. Otherwise, ask Aider to refactor the function under the cursor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Explain code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-ask-question&lt;/code&gt;): Ask Aider a question about the code in the current context. If a region is selected, use the region as context.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-function-or-region-explain&lt;/code&gt;): If a region is selected, ask Aider to explain the selected region. Otherwise, ask Aider to explain the function under the cursor.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-explain-symbol-under-point&lt;/code&gt;): Ask Aider to explain the symbol under cursor, given the line as context.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Support for Test Driven Development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-fix-failing-test-under-cursor&lt;/code&gt;): Place cursor on a failing test function and ask Aider to analyze and fix the code to make tests pass.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** And More: You can add your own Elisp functions to support your specific use cases. Feel free to ask Aider/&lt;code&gt;aider.el&lt;/code&gt; to help you create them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs need to be &amp;gt;= 26.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Vanilla Emacs Installation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://aider.chat/docs/install.html][Install aider]]&lt;/li&gt; &#xA; &lt;li&gt;Install the dependency [[https://github.com/magit/transient][Transient]] using your package manager.&lt;/li&gt; &#xA; &lt;li&gt;Install aider.el with the following code:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package aider :straight (:host github :repo &#34;tninja/aider.el&#34; :files (&#34;aider.el&#34;)) :config ;; Use claude-3-5-sonnet cause it is best in aider benchmark (setq aider-args &#39;(&#34;--model&#34; &#34;anthropic/claude-3-5-sonnet-20241022&#34;)) (setenv &#34;ANTHROPIC_API_KEY&#34; anthropic-api-key) ;; Or use chatgpt model since it is most well known ;; (setq aider-args &#39;(&#34;--model&#34; &#34;gpt-4o-mini&#34;)) ;; (setenv &#34;OPENAI_API_KEY&#34; &#xA; &lt;your-openai-api-key&gt;&#xA;  ) ;; Or use gemini v2 model since it is very good and free ;; (setq aider-args &#39;(&#34;--model&#34; &#34;gemini/gemini-exp-1206&#34;)) ;; (setenv &#34;GEMINI_API_KEY&#34; &#xA;  &lt;your-gemini-api-key&gt;&#xA;   ) ;; ;; Optional: Set a key binding for the transient menu (global-set-key (kbd &#34;C-c a&#34;) &#39;aider-transient-menu)) #+END_SRC&#xA;  &lt;/your-gemini-api-key&gt;&#xA; &lt;/your-openai-api-key&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Doom Installation and Configuration&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the following code to your doom/packages.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (package! aider :recipe (:host github :repo &#34;tninja/aider.el&#34; :files (&#34;aider.el&#34; &#34;aider-doom.el&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adjust and add the following code to your doom/config.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package aider :config (setq aider-args &#39;(&#34;--model&#34; &#34;gpt-4o-mini&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The aider prefix is &#34;A&#34;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start and open the aider buffer: =[SPC] A o=&lt;/li&gt; &#xA; &lt;li&gt;Add the current file with =[SPC] A a c=&lt;/li&gt; &#xA; &lt;li&gt;Reset the aider session with =[SPC] A r= [[file:./doom-menus.png]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Optional&lt;/p&gt; &#xA;&lt;p&gt;*** Helm Support&lt;/p&gt; &#xA;&lt;p&gt;Helm enables fuzzy searching functionality for command history prompts&lt;/p&gt; &#xA;&lt;p&gt;You can enable Helm-based completion with the following code:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package aider :straight (:host github :repo &#34;tninja/aider.el&#34; :files (&#34;aider.el&#34; &#34;aider-helm.el&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Aider script interactive mode: aider-minor-mode&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you prefer writing Aider commands in a separate file and sending them to an Aider session (similar to working with Python or R scripts and sending code blocks to a REPL), you might want to try aider-minor-mode. It by default bind C-c C-n to send current line to aider session, and C-c C-c to send current region to aider session. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enable aider-minor-mode for your editing buffer&lt;/li&gt; &#xA;   &lt;li&gt;To automatically enable aider-minor-mode for any file with &#34;aider&#34; in its filename:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-hook &#39;find-file-hook (lambda () (when (and (buffer-file-name) (string-match-p &#34;aider&#34; (buffer-file-name))) (aider-minor-mode 1)))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:./screenshot.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The screenshot above shows Aider being asked to generate an aider-help function and add its corresponding entry to the menu (top right window).&lt;/li&gt; &#xA; &lt;li&gt;Aider successfully received the command and generated the appropriate commit (bottom left).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[./examples][Example Application Written with aider.el]]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other Emacs AI coding tool&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspired by, and Thanks to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[https://github.com/shouya/ancilla.el][ancilla.el]]: AI Coding Assistant support code generation / code rewrite / discussion&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]: ChatGPT and DALL-E Emacs shells + Org Babel&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/copilot-emacs/copilot.el][copilot.el]]: Emacs plugin for GitHub Copilot&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/chep/copilot-chat.el][copilot-chat.el]]: Chat with GitHub Copilot in Emacs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>