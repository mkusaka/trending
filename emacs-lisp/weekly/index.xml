<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T01:54:47Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jscheid/dtrt-indent</title>
    <updated>2023-07-30T01:54:47Z</updated>
    <id>tag:github.com,2023-07-30:/jscheid/dtrt-indent</id>
    <link href="https://github.com/jscheid/dtrt-indent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minor mode that guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dtrt-indent&lt;/h1&gt; &#xA;&lt;p&gt;An Emacs minor mode that guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.&lt;/p&gt; &#xA;&lt;p&gt;You can install dtrt-indent from MELPA.&lt;/p&gt; &#xA;&lt;p&gt;To activate it, M-x customize-variable dtrt-indent-global-mode, and turn on &#34;Dtrt Indent Global Mode&#34;. See &lt;code&gt;dtrt-indent.el&lt;/code&gt; for full documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Related work&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nschum.de/src/emacs/guess-style/&#34;&gt;guess-style&lt;/a&gt; is similar to dtrt-indent, but only supports &lt;code&gt;cc-mode&lt;/code&gt;, and only guesses offsets of 2, 4 and 8.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tpope/vim-sleuth&#34;&gt;vim-sleuth&lt;/a&gt; provides similar functionality for Vim.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>noctuid/annalist.el</title>
    <updated>2023-07-30T01:54:47Z</updated>
    <id>tag:github.com,2023-07-30:/noctuid/annalist.el</id>
    <link href="https://github.com/noctuid/annalist.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Record and display information such as keybindings&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Annalist User Manual #+AUTHOR: Fox Kiester #+LANGUAGE: en #+TEXINFO_DIR_CATEGORY: Emacs #+TEXINFO_DIR_TITLE: Annalist: (annalist). #+TEXINFO_DIR_DESC: Record and display information such as keybindings.&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: if you are viewing this in org-mode, it is recommended that you install and enable [[https://github.com/snosov1/toc-org][toc-org]], so that all internal links open correctly.&lt;/h1&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/annalist][file:https://melpa.org/packages/annalist-badge.svg]] [[https://travis-ci.org/noctuid/annalist.el][https://travis-ci.org/noctuid/annalist.el.svg?branch=master]]&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote Incessant wind sweeps the plain. It murmurs on across grey stone, carrying dust from far climes to nibble eternally at the memorial pillars. There are a few shadows out there still but they are the weak and the timid and the hopelessly lost.&lt;/p&gt; &#xA;&lt;p&gt;It is immortality of a sort.&lt;/p&gt; &#xA;&lt;p&gt;Memory is immortality of a sort.&lt;/p&gt; &#xA;&lt;p&gt;In the night, when the wind dies and silence rules the place of glittering stone, I remember. And they all live again. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;=annalist.el= is a library that can be used to record information and later print that information using =org-mode= headings and tables. It allows defining different types of things that can be recorded (e.g. keybindings, settings, hooks, and advice) and supports custom filtering, sorting, and formatting. =annalist= is primarily intended for use in other packages like =general= and =evil-collection=, but it can also be used directly in a user&#39;s configuration.&lt;/p&gt; &#xA;&lt;p&gt;[[file:https://user-images.githubusercontent.com/4250696/63480582-64e2cb00-c460-11e9-9571-706b5b96992c.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :noexport:TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#usage][Usage]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#disabling-annalist][Disabling Annalist]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#terminology][Terminology]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#settings][Settings]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#defining-new-types][Defining New Types]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#type-top-level-settings][Type Top-level Settings]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#type-item-settings][Type Item Settings]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#record-update-preprocess-and-postprocess-settings-argument][=:record-update=, =:preprocess=, and =:postprocess= Settings Argument]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#defining-views][Defining Views]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#view-top-level-settings][View Top-level Settings]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#view-item-settings][View Item Settings]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#recording][Recording]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#describing][Describing]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#helper-functions][Helper Functions]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#list-helpers][List Helpers]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#formatting-helpers][Formatting Helpers]] &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;[[#format-helpers][=:format= Helpers]]&lt;/li&gt; &#xA;       &lt;li&gt;[[#formatting-emacs-lisp-source-blocks][Formatting Emacs Lisp Source Blocks]]&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;[[#sorting-helpers][Sorting Helpers]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#builtin-types][Builtin Types]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#keybindings-type][Keybindings Type]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage ** Disabling Annalist #+begin_quote What fool always has his nose in everywhere because he thinks he has to know so he can record it in his precious Annals? #+end_quote&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use a library that uses =annalist= (e.g. =evil-collection= or =general=) but don&#39;t need it&#39;s functionality during init or at all, you can set =annalist-record= to nil to shave some milliseconds off of your init time (especially if you have a lot of keybindings). Alternatively, if you only want to prevent =annalist= from recording certain things or have it only record certain things, you can configure =annalist-record-blacklist= or =annalist-record-whitelist= respectively.&lt;/p&gt; &#xA;&lt;p&gt;** Terminology&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;item - an individual recorded item; may be displayed as a heading or as a table column entry (e.g. a key such as =C-c=)&lt;/li&gt; &#xA; &lt;li&gt;record - a list of related, printable items corresponding to one piece of information (e.g. a single keybinding: a list of a keymap, key, and definition)&lt;/li&gt; &#xA; &lt;li&gt;metadata - a plist of information about a data list that should not be printed; appears as the last item in a record&lt;/li&gt; &#xA; &lt;li&gt;tome - a collection of records of a specific type&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Settings Annalist provides =annalist-describe-hook= which is run in annalist description buffers after they have been populated but before they are marked read-only: #+begin_src emacs-lisp (add-hook &#39;annalist-describe-hook (lambda () (visual-fill-column-mode -1))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Defining New Types #+begin_quote Three huge tomes bound in worn, cracked dark leather rested on a large, long stone lectern, as though waiting for three speakers to step up and read at the same time. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;Annalist provides the function &lt;del&gt;annalist-define-tome&lt;/del&gt; for defining new types of tomes: #+begin_src emacs-lisp (annalist-define-tome &#39;battles &#39;(:primary-key (year name) :table-start-index 1 year name casualties ...)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;At minimum, a type definition must include =:primary-key=, =:table-start-index=, and a symbol for each item records should store. Items should be defined in the order they should appear in org headings and then in the table.&lt;/p&gt; &#xA;&lt;p&gt;*** Type Top-level Settings These settings apply to the entirety of the recorded information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:table-start-index= - the index of the first item to be printed in an org table; previous items are printed as headings (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:primary-key= - the item or list of items that uniquely identifies the record; used with the =:test= values for those items to check for an old record that should be replaced/updated (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:record-update= - a function used to update a record before recording it; this can be used to, for example, set the value of an item to store the previous value of another item; the function is called with =old-record= (nil if none), =new-record=, and =settings=; see &lt;del&gt;annalist--update-keybindings&lt;/del&gt; for an example of how to create such a function (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:preprocess= - a function used to alter a record before doing anything with it; it is passed =record= and =settings= and should return the altered record; see the default keybindings type for an example (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:test= - test function used for comparing the primary key (as a list of each item in the order it appears in the definition); you will need to create the test with &lt;del&gt;define-hash-table-test&lt;/del&gt; if it does not exist (default: &lt;del&gt;equal&lt;/del&gt;; generally should be unnecessary to change)&lt;/li&gt; &#xA; &lt;li&gt;=:defaults= - a plist of default item settings; see below for valid item settings (default: none)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Type Item Settings Item settings only apply to a specific item. Defaults for items that don&#39;t explicitly specify a setting can be set using the top-level =:defaults= keyword.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:test= - test function used for comparing items; only applicable to heading items; you will need to create the test with &lt;del&gt;define-hash-table-test&lt;/del&gt; if it does not exist (default: &lt;del&gt;equal&lt;/del&gt;; generally should be unnecessary to change)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** =:record-update=, =:preprocess=, and =:postprocess= Settings Argument The settings plist past to the =:record-update= function contains all information for both the tome type and view. The information is converted into a valid plist and some extra keywords are added. Here is an example: #+begin_src emacs-lisp &#39;(:table-start-index 2 :primary-key (keymap state key) ;; the following keywords are generated for convenience :type keybindings :key-indices (2 1 0) :final-index 4 :metadata-index 5 ;; item settings can be accessed by their symbol or their index keymap (:name keymap :index 0 :format annalist-code) 0 (:name keymap :index 0 :format annalist-code) ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Defining Views #+begin_quote In those days the company was in service to… #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;Views contain settings for formatting and displaying recorded information. Settings from the type definition cannot be changed later. On the other hand, views are for all settings that a user may want to change for a particular &lt;del&gt;annalist-describe&lt;/del&gt; call. They are defined using the same format as tome types: #+begin_src emacs-lisp (annalist-define-view &#39;battles &#39;default &#39;(:defaults (:format capitalize) year name (casualties :title &#34;Deaths&#34;) ...)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =default= view is what &lt;del&gt;annalist-describe&lt;/del&gt; will use if no view name is explicitly specified. To prevent naming conflicts, external packages that create views should prefix the views with their symbol (e.g. =general-alternate-view=).&lt;/p&gt; &#xA;&lt;p&gt;*** View Top-level Settings These settings apply to the entirety of the recorded information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:predicate= - a function that is passed the entire record and returns non-nil if the record should be printed (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:sort= - a function used to sort records in each printed table; the function is passed two records and and should return non-nil if the first record should come first (default: none; tables are printed in recorded order)&lt;/li&gt; &#xA; &lt;li&gt;=:hooks= - a function or a list of functions to run in the describe buffer after printing all headings and tables before making the buffer readonly; these run before =annalist-describe-hook= (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:postprocess= - a function used to alter a record just before printing it; it is passed =record= and =settings= and should return the altered record; an example use case would be to alter the record using its metadata (e.g. by replacing a keybinding definition with a which-key description, if one exists) (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:defaults= - a plist of default item settings; see below for valid item settings (default: none)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is also a special =:inherit= keyword that can be used to create a new type of tome that is based on another type: #+begin_src emacs-lisp (annalist-define-view &#39;keybindings &#39;alternate ;; override title for key column &#39;((key :title &#34;Keybinding&#34;) ...) :inherit &#39;keybindings) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** View Item Settings Item settings only apply to a specific item. Defaults for items that don&#39;t explicitly specify a setting can be set using the top-level =:defaults= keyword. #+begin_src emacs-lisp (annalist-define-view &#39;keybindings &#39;my-view &#39;(:defaults (:format #&#39;capitalize) ;; surround key with = instead of capitalizing (key :format #&#39;annalist-verbatim) ;; perform no formatting on definition (definition :format nil))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Sorting/filtering (only for items displayed in headings):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:predicate= - a function that is passed the item and returns non-nil if it should be printed; only applicable to heading items (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:prioritize= - list of items that should be printed before any others; only applicable to heading items (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:sort= - a function used to sort records; only applicable to heading items; the function is passed two items and and should return non-nil if the first item should come first (default: none; printed in recorded order)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Formatting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:title= - a description of the item; used as the column title (default: capitalize the symbol name; local only)&lt;/li&gt; &#xA; &lt;li&gt;=:format= - function to run on the item value before it is printed (e.g. &lt;del&gt;#&#39;capitalize&lt;/del&gt;, &lt;del&gt;#&#39;annalist-code&lt;/del&gt;, &lt;del&gt;#&#39;annalist-verbatim&lt;/del&gt;, etc.); note that this is run on the item as-is if it has not been truncated, so the function may need to convert the item to a string first; has no effect if the item is extracted to a footnote/source block (default: none)&lt;/li&gt; &#xA; &lt;li&gt;=:max-width= - the max character width for an item; note that this is compared to the item as-is before any formatting (default: 50)&lt;/li&gt; &#xA; &lt;li&gt;=:extractp= - function to determine whether to extract longer entries into footnotes instead of truncating them; (default: &lt;del&gt;listp&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;=:src-block-p= function to determine whether to extract to a source block when the =:extractp= function returns non-nil (default: &lt;del&gt;listp&lt;/del&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Recording #+begin_quote The Lady said, “I wanted you to see this, Annalist.” […] “What is about to transpire. So that it is properly recorded in at least one place.” #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;annalist-record&lt;/del&gt; is used to record information. It requires three arguments: =annalist= =type= =record=. The =annalist= argument will usually be the same as the package prefix that is recording the data. =annalist= and any other names prefixed by =annalist= are reserved for this package. =type= is the type of data to record, and =record= is the actual data. Optionally, the user can also specify metadata that won&#39;t be printed after the final item. Buffer-local records should additionally specify =:local t=. Here is an example: #+begin_src emacs-lisp (annalist-record &#39;me &#39;keybindings (list ;; keymap state key definition previous-definition &#39;global-map nil (kbd &#34;C-+&#34;) #&#39;text-scale-increase nil ;; metadata can be specified after final item (list :zoom-related-binding t)))&lt;/p&gt; &#xA;&lt;p&gt;;; alternatively, record using plist instead of ordered list (annalist-record &#39;me &#39;keybindings (list &#39;keymap &#39;global-map &#39;state nil &#39;key (kbd &#34;C-+&#34;) &#39;definition #&#39;text-scale-increase ;; metadata can be specified with `t&#39; key t (list :zoom-related-binding t)) :plist t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Some items can potentially be recorded as nil. In the previous example, the evil =state= is recorded as nil (which will always be the case for non-evil users). When a heading item is nil, the heading at that level will just be skipped/not printed.&lt;/p&gt; &#xA;&lt;p&gt;** Describing #+begin_quote Once each month, in the evening, the entire Company assembles so the Annalist can read from his predecessors. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;annalist-describe&lt;/del&gt; is used to describe information. It takes three arguments: =name= =type view=. =view= is optional (defaults to =default=). For example: #+begin_src emacs-lisp (annalist-describe &#39;me &#39;keybindings) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;It is possible to have custom filtering/sorting behavior by using a custom view: #+begin_src emacs-lisp (annalist-define-view &#39;keybindings &#39;active-keybindings-only &#39;((keymap ;; only show keys bound in active keymaps :predicate #&#39;annalist--active-keymap ;; sort keymaps alphabetically :sort #&#39;annalist--string-&amp;lt;)))&lt;/p&gt; &#xA;&lt;p&gt;(annalist-describe &#39;my &#39;keybindings &#39;active-keybindings-only) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;=annalist-org-startup-folded= will determine what =org-startup-folded= setting to use (defaults to nil; all headings will be unfolded).&lt;/p&gt; &#xA;&lt;p&gt;** Helper Functions *** List Helpers &lt;del&gt;annalist-plistify-record&lt;/del&gt; can be used to convert a record that is an ordered list to a plist. &lt;del&gt;annalist-listify-record&lt;/del&gt; can be used to do the opposite. This is what the =:plist= argument for &lt;del&gt;annalist-record&lt;/del&gt; uses internally. These functions can be useful, for example, inside a =:record-update= function, so that you can get record items by their name instead of by their index. However, if there will be a lot of data recorded for a type during Emacs initialization time, the extra time to convert between list types can add up, so it&#39;s recommended that you don&#39;t use these functions or =:plist= in such cases.&lt;/p&gt; &#xA;&lt;p&gt;*** Formatting Helpers **** =:format= Helpers Annalist provides &lt;del&gt;annalist-verbatim&lt;/del&gt; (e.g. &lt;del&gt;=verbatim text=&lt;/del&gt;), &lt;del&gt;annalist-code&lt;/del&gt; (e.g. =&lt;del&gt;my-function&lt;/del&gt;=), and &lt;del&gt;annalist-capitalize&lt;/del&gt;. There is also an &lt;del&gt;annalist-compose&lt;/del&gt; helper for combining different formatting functions.&lt;/p&gt; &#xA;&lt;p&gt;**** Formatting Emacs Lisp Source Blocks By default, Emacs Lisp extracted into source blocks will just be one long line. You can add &lt;del&gt;annalist-multiline-source-blocks&lt;/del&gt; to a view&#39;s =:hooks= keyword or to =annalist-describe-hook= to autoformat org source blocks if lispy is installed. By default, it uses &lt;del&gt;lispy-alt-multiline&lt;/del&gt;. To use &lt;del&gt;lispy-multiline&lt;/del&gt; instead, customize &lt;del&gt;annalist-multiline-function&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The builtin types have &lt;del&gt;annlist-multiline-source-blocks&lt;/del&gt; in their =:hooks= setting by default.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of what this looks like:&lt;/p&gt; &#xA;&lt;p&gt;[[file:https://user-images.githubusercontent.com/4250696/62338313-1025e300-b4a6-11e9-845f-179c02abef35.png]]&lt;/p&gt; &#xA;&lt;p&gt;*** Sorting Helpers Annalist provides &lt;del&gt;annalist-string-&amp;lt;&lt;/del&gt; and &lt;del&gt;annalist-key-&amp;lt;&lt;/del&gt; (e.g. &lt;del&gt;(kbd &#34;C-c a&#34;)&lt;/del&gt; vs &lt;del&gt;(kbd &#34;C-c b&#34;)&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;** Builtin Types *** Keybindings Type Annalist provides a type for recording keybindings that is used by =evil-collection= and =general=. When recording a keybinding, the keymap must be provided as a symbol. Here is an example: #+begin_src emacs-lisp (annalist-record &#39;annalist &#39;keybindings (list &#39;org-mode-map nil (kbd &#34;C-c g&#34;) #&#39;counsel-org-goto)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In addition to the default view, it has a =valid= to only show keybindings for keymaps/states that exist (since some keybindings may be in a &lt;del&gt;with-eval-after-load&lt;/del&gt;). It also has an =active= view to only show keybindings that are currently active.&lt;/p&gt; &#xA;&lt;h1&gt;increase max depth&lt;/h1&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;toc-org-max-depth: 4&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>flycheck/flycheck</title>
    <updated>2023-07-30T01:54:47Z</updated>
    <id>tag:github.com,2023-07-30:/flycheck/flycheck</id>
    <link href="https://github.com/flycheck/flycheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;On the fly syntax checking for GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.flycheck.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flycheck/flycheck/master/doc/_static/logo.png&#34; alt=&#34;Flycheck&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flycheck/flycheck/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/flycheck/flycheck.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/flycheck/flycheck&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/flycheck/flycheck.svg?sanitize=true&#34; alt=&#34;Join the chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/flycheck&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/flycheck-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/flycheck&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/flycheck-badge.svg?sanitize=true&#34; alt=&#34;MELPA stable version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flycheck/flycheck/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/flycheck/flycheck/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flycheck/flycheck/actions/workflows/docs.yml&#34;&gt;&lt;img src=&#34;https://github.com/flycheck/flycheck/actions/workflows/docs.yml/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flycheck/flycheck/actions/workflows/lint-python.yml&#34;&gt;&lt;img src=&#34;https://github.com/flycheck/flycheck/actions/workflows/lint-python.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint Python&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flycheck.org&#34;&gt;https://www.flycheck.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Modern on-the-fly syntax checking extension for GNU Emacs. &lt;a href=&#34;https://www.flycheck.org/en/latest/#try-out&#34;&gt;Try it&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flycheck/flycheck/master/doc/images/flycheck-annotated.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more gentle introduction read the &lt;a href=&#34;https://www.flycheck.org/en/latest/user/installation.html&#34;&gt;Installation&lt;/a&gt; instructions and go through &lt;a href=&#34;https://www.flycheck.org/en/latest/user/quickstart.html&#34;&gt;Quickstart&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;Please ask questions about Flycheck on &lt;a href=&#34;https://emacs.stackexchange.com/questions/tagged/flycheck&#34;&gt;Stack Exchange&lt;/a&gt; or in our &lt;a href=&#34;https://gitter.im/flycheck/flycheck&#34;&gt;Gitter chat&lt;/a&gt;, and report bugs to our &lt;a href=&#34;https://github.com/flycheck/flycheck/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We welcome all kinds of contributions, whether you write patches, open pull requests, write documentation, help others with Flycheck issues, or just tell other people about your experiences with Flycheck. Please take a look at our &lt;a href=&#34;https://www.flycheck.org/en/latest/contributor/contributing.html&#34;&gt;Contributor’s Guide&lt;/a&gt; for help and guidance about contributing to Flycheck.&lt;/p&gt; &#xA;&lt;p&gt;We strive to create a safe, friendly and welcoming environment in the Flycheck community and have a &lt;a href=&#34;https://www.flycheck.org/en/latest/community/conduct.html&#34;&gt;Code of Conduct&lt;/a&gt; that defines acceptable and welcome behaviour as well as sanctions for violations. All contributors and all participants are expected to follow it, on Github, Gitter, Emacs.SX or any other place that’s part of Flycheck’s broader community.&lt;/p&gt; &#xA;&lt;p&gt;Flycheck is free software: you can redistribute it and/or modify it under the terms of the &lt;a href=&#34;https://github.com/flycheck/flycheck/raw/master/COPYING&#34;&gt;GNU General Public License&lt;/a&gt; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;Flycheck is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the &lt;a href=&#34;https://github.com/flycheck/flycheck/raw/master/COPYING&#34;&gt;GNU General Public License&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
</feed>