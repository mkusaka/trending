<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-11T01:42:25Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacscollective/auto-compile</title>
    <updated>2022-09-11T01:42:25Z</updated>
    <id>tag:github.com,2022-09-11:/emacscollective/auto-compile</id>
    <link href="https://github.com/emacscollective/auto-compile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically compile Emacs Lisp libraries&lt;/p&gt;&lt;hr&gt;&lt;p&gt;** Automatically compile Emacs Lisp libraries&lt;/p&gt; &#xA;&lt;p&gt;This package provides two minor modes which automatically recompile Emacs Lisp source files. Together these modes guarantee that Emacs never loads outdated byte code files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;auto-compile-on-save-mode&lt;/del&gt; re-compiles source files when they are being saved and &lt;del&gt;auto-compile-on-load-mode&lt;/del&gt; does so before they are being loaded (by advising &lt;del&gt;load&lt;/del&gt; and &lt;del&gt;require&lt;/del&gt;). Both modes only ever &lt;em&gt;re-compile&lt;/em&gt; a source file when the respective byte code file already exists but is outdated. Otherwise they do &lt;em&gt;not&lt;/em&gt; compile the source file.&lt;/p&gt; &#xA;&lt;p&gt;Even when using &lt;del&gt;auto-compile-on-save-mode&lt;/del&gt; it can happen that some source file is newer than the respective byte code file, which is a problem because by default Emacs loads the byte code file even when the respective source file has been modified more recently.&lt;/p&gt; &#xA;&lt;p&gt;Starting with Emacs version 24.4, setting &lt;del&gt;load-prefer-newer&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt; prevents outdated byte code files from being loaded. However this does not cause re-compilation of the source file, to actually do that &lt;del&gt;auto-compile-on-load-mode&lt;/del&gt; is still required.&lt;/p&gt; &#xA;&lt;p&gt;** Setup&lt;/p&gt; &#xA;&lt;p&gt;To reduce the risk of loading outdated byte code files, you should set &lt;del&gt;load-prefer-newer&lt;/del&gt; and enable &lt;del&gt;auto-compile-on-load-mode&lt;/del&gt; as early as possible. Then also enable &lt;del&gt;auto-compile-on-save-mode&lt;/del&gt;. You should also consider not byte-compiling your personal init file, or setting &lt;del&gt;load-prefer-newer&lt;/del&gt; in a system-wide init file.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;del&gt;package.el&lt;/del&gt; then use something like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;;; init.el --- user init file (setq load-prefer-newer t) (package-initialize) (require &#39;auto-compile) (auto-compile-on-load-mode) (auto-compile-on-save-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;otherwise:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;;; init.el --- user init file (setq load-prefer-newer t) (add-to-list &#39;load-path &#34;/path/to/packed&#34;) (add-to-list &#39;load-path &#34;/path/to/auto-compile&#34;) (require &#39;auto-compile) (auto-compile-on-load-mode) (auto-compile-on-save-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You might want to set the file-local value of &lt;del&gt;no-byte-compile&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;, e.g. by adding &lt;del&gt;-&lt;em&gt;- no-byte-compile: t -&lt;/em&gt;-&lt;/del&gt; at the end of the very first line. That way &lt;em&gt;all&lt;/em&gt; user files benefit from the protection offered by &lt;del&gt;load-prefer-newer&lt;/del&gt; and the modes that are defined here, otherwise ~~/.emacs.d/init.el~ is the unfortunate exception.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Emacs 27 or later, then these settings should be placed in &lt;del&gt;early-init.el&lt;/del&gt;, which should never be compiled:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;;; early-init.el --- early bird -&lt;em&gt;- no-byte-compile: t -&lt;/em&gt;- (setq load-prefer-newer t) (add-to-list &#39;load-path &#34;/path/to/packed&#34;) (add-to-list &#39;load-path &#34;/path/to/auto-compile&#34;) (require &#39;auto-compile) (auto-compile-on-load-mode) (auto-compile-on-save-mode) ;;; early-init.el ends here #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;Take note of the compile warnings and fix them.&lt;/p&gt; &#xA;&lt;p&gt;To permanently or temporarily toggle automatic compilation of some source file use the command &lt;del&gt;toggle-auto-compile&lt;/del&gt;. Since the modes only ever &lt;em&gt;update&lt;/em&gt; byte code files, toggling automatic compilation is done simply by either creating the byte code file or by removing it. &lt;del&gt;toggle-auto-compile&lt;/del&gt; can also toggle automatic compilation of multiple files at once; see its doc-string for more information.&lt;/p&gt; &#xA;&lt;p&gt;** Customization&lt;/p&gt; &#xA;&lt;p&gt;Constantly having the =&lt;em&gt;Compile-Log&lt;/em&gt;= buffer pop up when a file is being saved can quickly become annoying. Obviously the first thing you should do to about that is to actually fix outstanding issues.&lt;/p&gt; &#xA;&lt;p&gt;Once you have done that you might also want to keep that buffer from being automatically displayed and instead only show the number of compile warnings for the current file in the mode-line.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq auto-compile-display-buffer nil) (setq auto-compile-mode-line-counter t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To display the buffer use &lt;del&gt;M-x auto-compile-display-log&lt;/del&gt; or click on the counter in the mode-line.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;del&gt;auto-compile-inhibit-compile-hook&lt;/del&gt; it is possible to inhibit automatic compilation under certain circumstances; e.g. when HEAD is detached inside a Git repository (useful during rebase sessions).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-evil/evil-surround</title>
    <updated>2022-09-11T01:42:25Z</updated>
    <id>tag:github.com,2022-09-11:/emacs-evil/evil-surround</id>
    <link href="https://github.com/emacs-evil/evil-surround" rel="alternate"></link>
    <summary type="html">&lt;p&gt;you will be surrounded (surround.vim for evil, the extensible vi layer)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://user-images.githubusercontent.com/8352747/33807810-91656488-ddc3-11e7-8029-985f28471a47.png][https://user-images.githubusercontent.com/8352747/33807810-91656488-ddc3-11e7-8029-985f28471a47.png]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://travis-ci.org/emacs-evil/evil-surround.svg?branch=master][https://travis-ci.org/emacs-evil/evil-surround.svg?branch=master]] [[https://melpa.org/#/evil-surround][https://melpa.org/packages/evil-surround-badge.svg]] [[https://stable.melpa.org/#/evil-surround][file:https://stable.melpa.org/packages/evil-surround-badge.svg]] [[https://www.gnu.org/licenses/gpl-3.0.en.html][https://img.shields.io/badge/license-GPLv3-blue.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This package emulates [[https://github.com/tpope/vim-surround][surround.vim]] by [[https://github.com/tpope][Tim Pope]]. The functionality is wrapped into a minor mode.&lt;/p&gt; &#xA;&lt;p&gt;This package uses [[https://github.com/emacs-evil/evil][Evil]] as its vi layer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enable it through [[https://github.com/jwiegley/use-package][use-package]], add the following lines to =&lt;del&gt;/.emacs= or =&lt;/del&gt;/.emacs.d/init.el=:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package evil-surround :ensure t :config (global-evil-surround-mode 1)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, a user can add the =evil-surround.el= file to your load-path and add =(require &#39;evil-surround)= to your init file.&lt;/p&gt; &#xA;&lt;p&gt;Also, Instead of enabling it globally, you can also enable =surround-mode= along a major mode by adding =turn-on-surround-mode= to the mode hook.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage ** Add surrounding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can surround in visual-state with =S&#xA; &lt;textobject&gt;&#xA;  = or =gS&#xA;  &lt;textobject&gt;&#xA;   =. Or in normal-state with =ys&#xA;   &lt;textobject&gt;&#xA;    = or =yS&#xA;    &lt;textobject&gt;&#xA;     =.&#xA;    &lt;/textobject&gt;&#xA;   &lt;/textobject&gt;&#xA;  &lt;/textobject&gt;&#xA; &lt;/textobject&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Change surrounding&lt;/p&gt; &#xA;&lt;p&gt;You can change a surrounding with =cs&#xA; &lt;old-textobject&gt;&#xA;  &lt;new-textobject&gt;&#xA;   =.&#xA;  &lt;/new-textobject&gt;&#xA; &lt;/old-textobject&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Delete surrounding&lt;/p&gt; &#xA;&lt;p&gt;You can delete a surrounding with =ds&#xA; &lt;textobject&gt;&#xA;  =.&#xA; &lt;/textobject&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Add new surround pairs&lt;/p&gt; &#xA;&lt;p&gt;A surround pair is this (trigger char with textual left and right strings):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (?&amp;gt; . (&#34;&amp;lt;&#34; . &#34;&amp;gt;&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;or this (trigger char and calling a function):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (?&amp;lt; . surround-read-tag) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;You can add new by adding them to =evil-surround-pairs-alist=. For more information do: =C-h v evil-surround-pairs-alist=.&lt;/p&gt; &#xA;&lt;p&gt;=evil-surround-pairs-alist= is a buffer local variable, which means that you can have different surround pairs in different modes. By default =&amp;lt;= is used to insert a tag, in C++ this may not be useful - but inserting angle brackets is, so you can add this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-hook &#39;c++-mode-hook (lambda () (push &#39;(?&amp;lt; . (&#34;&amp;lt; &#34; . &#34; &amp;gt;&#34;)) evil-surround-pairs-alist))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t worry about having two entries for =&amp;lt;= surround will take the first.&lt;/p&gt; &#xA;&lt;p&gt;Or in Emacs Lisp modes using &lt;code&gt;to enter&lt;/code&gt; &#39; is quite useful, but not adding a pair of ` (the default behavior if no entry in =evil-surround-pairs-alist= is present), so you can do this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-hook &#39;emacs-lisp-mode-hook (lambda () (push &#39;(?&lt;code&gt; . (&#34;&lt;/code&gt;&#34; . &#34;&#39;&#34;)) evil-surround-pairs-alist))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;without affecting your Markdown surround pairs, where the default is useful.&lt;/p&gt; &#xA;&lt;p&gt;To change the default =evil-surround-pairs-alist= you have to use =setq-default=, for example to remove all default pairs:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq-default evil-surround-pairs-alist &#39;()) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;or to add a pair that surrounds with two ` if you enter ~:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq-default evil-surround-pairs-alist (push &#39;(?~ . (&#34;&lt;code&gt;&#34; . &#34;&lt;/code&gt;&#34;)) evil-surround-pairs-alist)) #+END_SRC ** Add new surround pairs through creation of evil objects You can create new evil objects that will be respected by evil-surround. Just use the following code: #+BEGIN_SRC emacs-lisp ;; this macro was copied from here: &lt;a href=&#34;https://stackoverflow.com/a/22418983/4921402&#34;&gt;https://stackoverflow.com/a/22418983/4921402&lt;/a&gt; (defmacro define-and-bind-quoted-text-object (name key start-regex end-regex) (let ((inner-name (make-symbol (concat &#34;evil-inner-&#34; name))) (outer-name (make-symbol (concat &#34;evil-a-&#34; name)))) `(progn (evil-define-text-object ,inner-name (count &amp;amp;optional beg end type) (evil-select-paren ,start-regex ,end-regex beg end type count nil)) (evil-define-text-object ,outer-name (count &amp;amp;optional beg end type) (evil-select-paren ,start-regex ,end-regex beg end type count t)) (define-key evil-inner-text-objects-map ,key #&#39;,inner-name) (define-key evil-outer-text-objects-map ,key #&#39;,outer-name))))&lt;/p&gt; &#xA;&lt;p&gt;(define-and-bind-quoted-text-object &#34;pipe&#34; &#34;|&#34; &#34;|&#34; &#34;|&#34;) (define-and-bind-quoted-text-object &#34;slash&#34; &#34;/&#34; &#34;/&#34; &#34;/&#34;) (define-and-bind-quoted-text-object &#34;asterisk&#34; &#34;&lt;em&gt;&#34; &#34;&lt;/em&gt;&#34; &#34;*&#34;) (define-and-bind-quoted-text-object &#34;dollar&#34; &#34;$&#34; &#34;\$&#34; &#34;\$&#34;) ;; sometimes your have to escape the regex #+END_SRC ** Add surround pairs for buffer-local text objects Buffer-local text objects are useful for mode specific text objects that you don&#39;t want polluting the global keymap. To make these objects work with =evil-surround=, do the following (for example to bind pipes to =Q=):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defvar evil-some-local-inner-keymap (make-sparse-keymap) &#34;Inner text object test keymap&#34;) (defvar evil-some-local-outer-keymap (make-sparse-keymap) &#34;Outer text object keymap&#34;) (define-key evil-some-local-inner-keymap &#34;Q&#34; #&#39;evil-inner-pipe) (define-key evil-some-local-outer-keymap &#34;Q&#34; #&#39;evil-a-pipe) (define-key evil-visual-state-local-map &#34;iQ&#34; #&#39;evil-inner-pipe) (define-key evil-operator-state-local-map &#34;iQ&#34; #&#39;evil-inner-pipe) (define-key evil-visual-state-local-map &#34;aQ&#34; #&#39;evil-a-pipe) (define-key evil-operator-state-local-map &#34;aQ&#34; #&#39;evil-a-pipe) (setq evil-surround-local-inner-text-object-map-list (list evil-some-local-inner-keymap)) (setq evil-surround-local-outer-text-object-map-list (list evil-some-local-outer-keymap)) (setq-local evil-surround-pairs-alist (append &#39;((?Q &#34;|&#34; . &#34;|&#34;)) evil-surround-pairs-alist)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;note that the binding to =evil-some-local-(inner|outer)-keymap= is purely for organizational perpouses, you can skip that step and do:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (define-key evil-visual-state-local-map &#34;iQ&#34; #&#39;evil-inner-pipe) (define-key evil-operator-state-local-map &#34;iQ&#34; #&#39;evil-inner-pipe) (define-key evil-visual-state-local-map &#34;aQ&#34; #&#39;evil-a-pipe) (define-key evil-operator-state-local-map &#34;aQ&#34; #&#39;evil-a-pipe) (setq evil-surround-local-inner-text-object-map-list (list (lookup-key evil-operator-state-local-map &#34;i&#34;))) (setq evil-surround-local-outer-text-object-map-list (list (lookup-key evil-operator-state-local-map &#34;a&#34;))) (setq-local evil-surround-pairs-alist (append &#39;((?Q &#34;|&#34; . &#34;|&#34;)) evil-surround-pairs-alist)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Add new supported operators&lt;/p&gt; &#xA;&lt;p&gt;You can add support for new operators by adding them to =evil-surround-operator-alist=. For more information do: =C-h v evil-surround-operator-alist=.&lt;/p&gt; &#xA;&lt;p&gt;By default, surround works with =evil-change= and =evil-delete=. To add support for the evil-paredit package, you need to add =evil-paredit-change= and =evil-paredit-delete= to =evil-surround-operator-alist=, like so:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-to-list &#39;evil-surround-operator-alist &#39;(evil-paredit-change . change)) (add-to-list &#39;evil-surround-operator-alist &#39;(evil-paredit-delete . delete)) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Examples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some usage examples (taken from [[https://github.com/tpope/vim-surround][surround.vim]]):&lt;/p&gt; &#xA;&lt;p&gt;Press =cs&#34;&#39;= inside&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE &#34;Hello world!&#34; #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;to change it to&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE &#39;Hello world!&#39; #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Now press =cs&#39;&lt;q&gt;= to change it to&lt;/q&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE &lt;q&gt;Hello world!&lt;/q&gt; #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;To go full circle, press =cst&#34;= to get&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE &#34;Hello world!&#34; #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;To remove the delimiters entirely, press =ds&#34;=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE Hello world! #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Now with the cursor on &#34;Hello&#34;, press =ysiw]= (=iw= is a text object).&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE [Hello] world! #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s make that braces and add some space (use =}= instead of ={= for no space): =cs]{=&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE { Hello } world! #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Now wrap the entire line in parentheses with =yssb= or =yss)=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE ({ Hello } world!) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Revert to the original text: =ds{ds)=&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE Hello world! #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Emphasize hello: =ysiw&lt;em&gt;=&lt;/em&gt;&lt;/p&gt;&#xA;&lt;em&gt; &lt;p&gt;#+BEGIN_SRC html &lt;em&gt;Hello&lt;/em&gt; world! #+END_SRC&lt;/p&gt; &lt;p&gt;Finally, let&#39;s try out visual mode. Press a capital V (for linewise visual mode) followed by =S&lt;/p&gt;&lt;p class=&#34;important&#34;&gt;=.&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC html&lt;/p&gt; &lt;p class=&#34;important&#34;&gt; &lt;em&gt;Hello&lt;/em&gt; world! &lt;/p&gt; #+END_SRC &lt;p&gt;Suppose you want to call a function on your visual selection or a text object. You can simply press =f= instead of the aforementioned keys and are then prompted for a functionname in the minibuffer, like with the tags. So with:&lt;/p&gt; &lt;p&gt;#+BEGIN_EXAMPLE &#34;Hello world!&#34; #+END_EXAMPLE&lt;/p&gt; &lt;p&gt;... after selecting the string, then pressing =Sf=, entering =print= and pressing return you would get&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC c print(&#34;Hello world!&#34;) #+END_SRC&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;FAAQ (frequently actually asked questions) ** Why does =vs= no longer surround?&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;This is due to an upstream change in =vim-surround=. It happened in this [[https://github.com/tpope/vim-surround/commit/6f0984a][commit]]. See the discussion in [[https://github.com/timcharper/evil-surround/pull/48][this]] pull request for more details.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Contributing &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;you are encouraged to test your changes in a standard environment with a clean emacs using just the needed plugins.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;** interactively #+BEGIN_SRC sh&lt;/p&gt; &lt;h1&gt;open a shell and go to the evil-surround directory, after cloning it&lt;/h1&gt; &lt;h1&gt;this is a clean emacs with just the absolute minimum dependencies needed to test evil-surround interactivelly.&lt;/h1&gt; &lt;p&gt;make make emacs&lt;/p&gt; &lt;h1&gt;now load evil-surround/test/evil-surround-test.el and M-x ert and run the tests&lt;/h1&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;p&gt;** command&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC sh&lt;/p&gt; &lt;h1&gt;open a shell and go to the evil-surround directory, after cloning it&lt;/h1&gt; &lt;h1&gt;this commands ensure that the tests are using a clean emacs with just the absolute minimum dependencies needed.&lt;/h1&gt; &lt;p&gt;make make test #+END_SRC&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Credits Credits and many [[https://github.com/emacs-evil/evil/issues/842][thanks]] go to [[http://github.com/timcharper][Tim Harper]], the original mantainer of the package.&lt;/li&gt; &#xA;  &lt;li&gt;LICENSE&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;[[https://www.gnu.org/licenses/gpl-3.0.en.html][GNU General Public License v3]] #+BEGIN_SRC text GNU General Public License v3 Copyright (C) 2010 - 2017 Tim Harper Copyright (c) 2018 - 2020 The evil-surround Contributors #+END_SRC&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;/em&gt;</summary>
  </entry>
  <entry>
    <title>ahyatt/emacs-websocket</title>
    <updated>2022-09-11T01:42:25Z</updated>
    <id>tag:github.com,2022-09-11:/ahyatt/emacs-websocket</id>
    <link href="https://github.com/ahyatt/emacs-websocket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A websocket implementation in elisp, for emacs.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Description This is a elisp library for websocket clients to talk to websocket servers, and for websocket servers to accept connections from websocket clients. This library is designed to be used by other library writers, to write apps that use websockets, and is not useful by itself.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example of how to use the library is in the [[https://github.com/ahyatt/emacs-websocket/blob/master/websocket-functional-test.el][websocket-functional-test.el]] file.&lt;/p&gt; &#xA;&lt;p&gt;This library is compatible with emacs 23 and 24, although only emacs 24 support secure websockets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version release checklist&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each version that is released should be checked with this checklist:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; All ert test passing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Functional test passing on emacs 23 and 24&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; websocket.el byte compiling cleanly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Existing clients:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/tkf/emacs-ipython-notebook][Emacs IPython Notebook]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/syohex/emacs-realtime-markdown-viewer][Emacs Realtime Markdown Viewer]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jscheid/kite][Kite]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/ancane/markdown-preview-mode][Markdown-preview-mode]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/org-roam/org-roam-ui][Org-Roam-UI]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are using this module for your own emacs package, please let me know by editing this file, adding your project, and sending a pull request to this repository.&lt;/p&gt;</summary>
  </entry>
</feed>