<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-23T01:36:25Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>magit/closql</title>
    <updated>2024-05-23T01:36:25Z</updated>
    <id>tag:github.com,2024-05-23:/magit/closql</id>
    <link href="https://github.com/magit/closql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Store EIEIO objects using EmacSQL&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Store EIEIO objects using EmacSQL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Store uniform [[https://www.gnu.org/software/emacs/manual/html_node/eieio/index.html][EIEIO]] objects in an [[https://github.com/skeeto/emacsql][EmacSQL]] database. [[https://www.sqlite.org][SQLite]] is used as backend. This library imposes some restrictions on what kind of objects can be stored; it isn&#39;t intended to store arbitrary objects. All objects have to share a common superclass and subclasses cannot add any additional instance slots.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;br&gt;&lt;br&gt; #+html: &lt;a href=&#34;https://github.com/magit/closql/actions/workflows/compile.yml&#34;&gt;&lt;img alt=&#34;Compile&#34; src=&#34;https://github.com/magit/closql/actions/workflows/compile.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/closql&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/closql-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/closql&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/closql-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>licht1stein/context-transient.el</title>
    <updated>2024-05-23T01:36:25Z</updated>
    <id>tag:github.com,2024-05-23:/licht1stein/context-transient.el</id>
    <link href="https://github.com/licht1stein/context-transient.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Context specific transient menus for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/context-transient&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/context-transient-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/context-transient&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/context-transient-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;context-transient.el&lt;/h1&gt; &#xA;&lt;p&gt;Easily create context-specific transient menus for Emacs. Context can be anything — buffer name, current git repo, current project etc. See examples.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This is a menu I get when pressing F6 while working on one of my projects:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/licht1stein/context-transient.el/master/img/example-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;What the commands do is not important, what&#39;s important is how easy it was to make a project-specific transient menu with useful commands.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have defined your context-specific transients, call them with &lt;code&gt;M-x context-transient RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can install it from MELPA using &lt;code&gt;M-x package-install RET context-transient RET&lt;/code&gt;, or using use-package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package context-transient&#xA; :defer nil&#xA; :bind (&#34;&amp;lt;f6&amp;gt;&#34; . context-transient))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I recommend binding &lt;code&gt;context-transient&lt;/code&gt; to something easily accessible, F6 in the example above.&lt;/p&gt; &#xA;&lt;h2&gt;Defining context transients&lt;/h2&gt; &#xA;&lt;p&gt;Context transients are defined using &lt;code&gt;context-transient-define&lt;/code&gt;. You can specify one of the following keys to check current context:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:repo&lt;/code&gt; - checks if the current git repo name is equal to this&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:project&lt;/code&gt; - checks if the current project name is equal to this (note, this is built-in project.el, not projectile)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:buffer&lt;/code&gt; - checks if the current buffer name is equal to this&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:mode&lt;/code&gt;- checks if the current major mode is this&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:context&lt;/code&gt; - arbitrary code that will be run to check if the transient should be run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Obviously, it&#39;s quite possible to define several transients that would apply to the current context. In this case user will be prompted to choose which one to run.&lt;/p&gt; &#xA;&lt;h3&gt;Git repo context (&lt;code&gt;:repo&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;This example defines a transient menu for git repos. Note the usage of &lt;code&gt;:repo&lt;/code&gt; function — this is a helper function that returns &lt;code&gt;t&lt;/code&gt; if the repo name is equal to it&#39;s argument. But context accepts any expression that evaluates to &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define context-transient-repo&#xA;  :doc &#34;Repo specific transient&#34;&#xA;  :repo &#34;context-transient.el&#34;&#xA;  :menu&#xA;  [&#34;Section&#34;&#xA;  [&#34;Subsection&#34;&#xA;   (&#34;i&#34; &#34;Increase font&#34; text-scale-increase :transient nil)&#xA;   (&#34;o&#34; &#34;Decrease font&#34; text-scale-decrease :transient nil)]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/licht1stein/context-transient.el/master/img/example-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Buffer name context (&lt;code&gt;:buffer&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;The following example runs the transient if current buffer name is &lt;code&gt;*scratch*&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define itch&#xA;  :doc &#34;Itch a *scratch*&#34;&#xA;  :buffer &#34;*scratch*&#34;&#xA;  :menu&#xA;  [[&#34;Test&#34; (&#34;i&#34; &#34;Itch *scratch*&#34; (lambda () (interactive) (message &#34;Itched&#34;)))]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Project context (&lt;code&gt;:project&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;This will check if the built-in project.el project name is equal to this. Same as &lt;code&gt;:buffer&lt;/code&gt; or &lt;code&gt;:repo&lt;/code&gt; — just pass a project name as a string.&lt;/p&gt; &#xA;&lt;h3&gt;Major mode context (&lt;code&gt;:mode&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Checks if the current major-mode is this. Note, you need to provided the major mode as a quoted symbol, and not as a string. Here&#39;s an example of a menu for editing subtitles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define subed-transient&#xA;    :doc &#34;Transient for working with subtitles&#34;&#xA;    :mode &#39;subed-srt-mode&#xA;    :menu&#xA;    [&#34;MPV&#34;&#xA;     (&#34;o&#34; &#34;Open video file&#34; subed-mpv-play-from-file)&#xA;     (&#34;O&#34; &#34;Open video url&#34; subed-mpv-play-from-url)&#xA;     (&#34;s&#34; &#34;Toggle sync subs -&amp;gt; player&#34; subed-toggle-sync-player-to-point)&#xA;     (&#34;p&#34; &#34;Toggle sync player -&amp;gt; subs&#34; subed-toggle-sync-point-to-player)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Any expression context (&lt;code&gt;:context&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;You can run any lisp expression in &lt;code&gt;:context&lt;/code&gt;. For example, transient only works on Thursdays:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define thursdays-transient&#xA;  :doc &#34;Only show this menu on Thursdays&#34;&#xA;  :context (equal &#34;Thursday&#34; (format-time-string &#34;%A&#34;))&#xA;  :menu&#xA;  [[&#34;Thursday!&#34;&#xA;    (&#34;t&#34; &#34;Once a week&#34; (lambda () (interactive) (message &#34;IT IS THURSDAY!&#34;)))]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clojure Specific Example&lt;/h3&gt; &#xA;&lt;p&gt;Normally with transient you would need to be a bit more verbose to use it to run interactive CIDER commands while working on a Clojure project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-define my-clj-transient&#xA;  :doc &#34;Transient for my-clj-repo&#34;&#xA;  :repo &#34;my-clj-repo&#34;&#xA;  :menu&#xA;  [[&#34;REPL&#34;&#xA;   (&#34;c&#34; &#34;Connect REPL&#34; (lambda () (interactive) (cider-connect-clj &#39;(:host &#34;localhost&#34; :port 63000))) :transient nil)&#xA;   (&#34;d&#34; &#34;Sync deps&#34; (lambda () (interactive) (cider-interactive-eval &#34;(sync-deps)&#34;)))]&#xA;  [&#34;Debug&#34;&#xA;   (&#34;p&#34; &#34;Start portal&#34; (lambda () (interactive) (cider-interactive-eval &#34;(user/portal)&#34;)))&#xA;   (&#34;P&#34; &#34;Clear portal&#34; (lambda () (interactive) (cider-interactive-eval &#34;(user/portal-clear)&#34;)))&#xA;   (&#34;S&#34; &#34;Require snitch&#34; (lambda () (interactive) (cider-interactive-eval &#34;(require &#39;[snitch.core :refer [defn* defmethod* *fn *let]])&#34;)))]&#xA;  [&#34;Systems&#34;&#xA;   (&#34;a&#34; &#34;(Re)start main system&#34; (lambda () (interactive) (cider-interactive-eval &#34;(user/restart-sync)&#34;)))&#xA;   (&#34;A&#34; &#34;Stop main system&#34; (lambda () (interactive) (cider-interactive-eval &#34;(user/restart-sync)&#34;)))]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/licht1stein/context-transient.el/master/img/example-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Better way for Clojure&lt;/h4&gt; &#xA;&lt;p&gt;There&#39;s a much nicer way to do this with context-transient. We provide a helper function &lt;code&gt;context-transient-require-defclj&lt;/code&gt;that creates a &lt;code&gt;defclj&lt;/code&gt; macro and allows rewriting the above example like in the code below.&lt;/p&gt; &#xA;&lt;p&gt;Note, that commands created by &lt;code&gt;defclj&lt;/code&gt; are interactive and can also &lt;strong&gt;be used from the &lt;code&gt;M-x&lt;/code&gt; menu&lt;/strong&gt; or bound to hotkeys. Because of this, &lt;code&gt;defclj&lt;/code&gt; also accepts an optional docstring:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(defclj my-sync-deps (sync-deps) &#34;Sync project deps&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the rewritten menu from above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(context-transient-require-defclj)&#xA;&#xA;(defclj my-sync-deps (sync-deps) &#34;Sync project deps&#34;)&#xA;(defclj my-portal (user/portal))&#xA;(defclj my-portal-clear (user/portal-clear))&#xA;(defclj my-require-snitch (require &#39;[snitch.core :refer [defn* defmethod* *fn *let]]))&#xA;(defclj my-restart-sync (user/restart-sync))&#xA;(defclj my-stop-sync (user/stop-sync))&#xA;&#xA;(context-transient-define&#xA; my-clj-transient&#xA; :doc &#34;Transient for my-clj repo&#34;&#xA; :repo &#34;my-clj-repo&#34;&#xA; :menu&#xA; [[&#34;REPL&#34;&#xA;   (&#34;c&#34; &#34;Connect REPL&#34; (lambda () (interactive) (cider-connect-clj &#39;(:host &#34;localhost&#34; :port 63000))) :transient nil)&#xA;   (&#34;d&#34; &#34;Sync deps&#34; my-sync-deps)]&#xA;  [&#34;Debug&#34;&#xA;   (&#34;p&#34; &#34;Start portal&#34; my-portal)&#xA;   (&#34;P&#34; &#34;Clear portal&#34; my-portal-clear)&#xA;   (&#34;S&#34; &#34;Require snitch&#34; my-require-snitch)]&#xA;  [&#34;Systems&#34;&#xA;   (&#34;a&#34; &#34;(Re)start main system&#34; my-restart-sync)&#xA;   (&#34;A&#34; &#34;Stop main system&#34; my-stop-sync)]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that the second argument to &lt;code&gt;defclj&lt;/code&gt; is unquoted Clojure code, not elisp.&lt;/p&gt; &#xA;&lt;h2&gt;Clearing context-transients&lt;/h2&gt; &#xA;&lt;p&gt;If for some reason a previously defined transient misbehaves, you can clear all context transients by running &lt;code&gt;M-x context-transient-clear RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;This library started as a variation on my &lt;a href=&#34;https://github.com/licht1stein/repo-hydra.el&#34;&gt;repo-hydra.el&lt;/a&gt; library. But thanks to the help from &lt;a href=&#34;https://github.com/progfolio&#34;&gt;Nicholas Vollmer (@progfolio)&lt;/a&gt; it became a much more useful tool.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Sterlingg/json-snatcher</title>
    <updated>2024-05-23T01:36:25Z</updated>
    <id>tag:github.com,2024-05-23:/Sterlingg/json-snatcher</id>
    <link href="https://github.com/Sterlingg/json-snatcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get the path to a JSON element in Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#json-snatcher.el&lt;/p&gt; &#xA;&lt;p&gt;Say you&#39;re looking through a large JSON file, and see a value that you want to extract programmatically. This Emacs extension will allow you to snatch the path to this value.&lt;/p&gt; &#xA;&lt;p&gt;Available on MELPA at &lt;a href=&#34;http://melpa.milkbox.net/#/json-snatcher&#34;&gt;http://melpa.milkbox.net/#/json-snatcher&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First include the package&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;json-snatcher)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the following lines to your .emacs file, which sets a hotkey when editing JSON files in either js or js2 mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun js-mode-bindings ()&#xA;&#34;Sets a hotkey for using the json-snatcher plugin&#34;&#xA;&#x9; (when (string-match  &#34;\\.json$&#34; (buffer-name))&#xA;        (local-set-key (kbd &#34;C-c C-g&#34;) &#39;jsons-print-path)))&#xA;(add-hook &#39;js-mode-hook &#39;js-mode-bindings)&#xA;(add-hook &#39;js2-mode-hook &#39;js-mode-bindings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example of the plugin at work&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Sterlingg/json-snatcher/raw/master/Demo/demo.gif&#34; alt=&#34;Lights, Camera, Action!&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>