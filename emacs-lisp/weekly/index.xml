<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:37:09Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DevelopmentCool2449/colorful-mode</title>
    <updated>2024-05-05T01:37:09Z</updated>
    <id>tag:github.com,2024-05-05:/DevelopmentCool2449/colorful-mode</id>
    <link href="https://github.com/DevelopmentCool2449/colorful-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üé®Preview any color in your buffer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: colorful-mode #+subtitle: Preview any color in your buffer in real time. #+author: Elias G. Perez #+language: en #+export_file_name: colorful-mode.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: colorful-mode: (colorful-mode). #+texinfo_dir_desc: Preview color hexs in your buffer&lt;/p&gt; &#xA;&lt;p&gt;[[./assets/colorful-mode-logo.svg]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_QUOTE Preview any color in your buffer in real time. #+END_QUOTE&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://elpa.gnu.org/packages/colorful-mode.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/colorful-mode.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://jcs-emacs.github.io/jcs-elpa/&#34;&gt;&lt;img alt=&#34;JCS ELPA&#34; src=&#34;https://raw.githubusercontent.com/jcs-emacs/badges/master/elpa/v/colorful-mode.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://jcs-emacs.github.io/jcs-elpa/&#34;&gt; &lt;p&gt;#+html: &lt;img src=&#34;https://raw.githubusercontent.com/DevelopmentCool2449/emacs-svg-badges/main/elisp_logo_warning.svg?sanitize=true&#34; align=&#34;right&#34; width=&#34;10%&#34;&gt;&lt;/p&gt; &lt;p&gt;üü¢colorful-mode is a minor mode that allow you preview any color format such as &lt;em&gt;color hex&lt;/em&gt; and &lt;em&gt;color names&lt;/em&gt;, in your current buffer in real time and in a user friendly way based on üåà[[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode.el]].&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Features ‚ú®&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Preview colors such as colors names, hexadecimal colors and more in your current buffer in real time.&lt;/li&gt; &#xA;  &lt;li&gt;Replace or copy to other color formats such as hexadecimal or color names (only for some colors).&lt;/li&gt; &#xA;  &lt;li&gt;Preview using highlight or a prefix/suffix string.&lt;/li&gt; &#xA;  &lt;li&gt;Allow preview colors only in strings.&lt;/li&gt; &#xA;  &lt;li&gt;Exclude colors from being highlighted such as hex values and color names.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Screenshots and animated GIFs üì∑ [[./assets/gif1.gif]] /With prefix instead highliht/.&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;[[./assets/gif2.gif]] [[./assets/gif3.gif]] [[./assets/screenshot1.png]] [[./assets/screenshot2.png]]&lt;/p&gt; &lt;p&gt;[[./assets/screenshot3.png]] /With a custom prefix (in this example a non-ASCII/non-Unicode character)/.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;User Options, Setups and Guides üìñ ** Customizable User options&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;=colorful-allow-mouse-clicks (default: t)= If non-nil, allow using mouse buttons for change color.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;=colorful-use-prefix (default: nil)= If non-nil, use prefix for preview color instead highlight them. &lt;em&gt;NOTE: css derived modes by default colorize rgb and hex colors, this may interfere with colorful prefix, you can disable this setting css-fontify-colors to nil&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;=colorful-prefix-string (default: &#34;‚óè&#34;)= String to be used in highlights. Only relevant if `colorful-use-prefix&#39; is non-nil. =colorful-use-prefix=.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;=colorful-prefix-alignment (default: &#39;left)= The position to put prefix string. The value can be left or right. Only relevant if `colorful-use-prefix&#39; is non-nil.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;=colorful-extra-color-keyword-functions= default: &#39;((emacs-lisp-mode . colorful-add-color-names) ((mhtml-mode html-ts-mode css-mode css-ts-mode) . (colorful-add-rgb-colors colorful-add-hsl-colors colorful-add-color-names)) (latex-mode . colorful-add-latex-colors) colorful-add-hex-colors) List of functions to add extra color keywords to colorful-color-keywords.&lt;/p&gt; &lt;p&gt;It can be a cons cell specifing the mode (or a list of modes) e.g:&lt;/p&gt; &lt;p&gt;(((css-mode css-ts-mode) . colorful-add-rgb-colors) (emacs-lisp-mode . (colorful-add-color-names colorful-add-rgb-colors)) ((text-mode html-mode) . (colorful-add-color-names colorful-add-rgb-colors)) ...)&lt;/p&gt; &lt;p&gt;Or a simple list of functions for executing wherever colorful is active: (colorful-add-color-names colorful-add-rgb-colors)&lt;/p&gt; &lt;p&gt;Available functions are:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;colorful-add-hex-colors.&lt;/li&gt; &#xA;    &lt;li&gt;colorful-add-color-names.&lt;/li&gt; &#xA;    &lt;li&gt;colorful-add-rgb-colors.&lt;/li&gt; &#xA;    &lt;li&gt;colorful-add-hsl-colors.&lt;/li&gt; &#xA;    &lt;li&gt;colorful-add-latex-colors&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;=colorful-exclude-colors (default: &#39;(&#34;#def&#34;))= List of keyword to don&#39;t highlight.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;=colorful-short-hex-convertions (default: 2)= If set to 2, hex values converted by colorful should be as short as possible. Setting this to 2 will make hex values follow a 24-bit specification and can make them inaccurate.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;=colorful-only-strings (default: nil)= If non-nil colorful will only highlight colors inside strings. If set to only-prog, only highlight colors in strings if current major mode is derived from prog-mode.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;=global-colorful-modes (default: &#39;(mhtml-mode html-ts-mode scss-mode css-mode css-ts-mode prog-mode))= Which major modes global-colorful-mode is switched on in (globally).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;** Faces&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;=colorful-base= Face used as base for highlight color names. Only used for draw box and change font &amp;amp;c., changing box color and/or background/foreground color face won&#39;t be applied.&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;** Interactive User Functions.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;=colorful-change-or-copy-color= Change or copy color to a converted format at current cursor position.&lt;/li&gt; &#xA;  &lt;li&gt;=colorful-convert-and-change-color= Convert color to a valid format and replace color at current cursor position.&lt;/li&gt; &#xA;  &lt;li&gt;=colorful-convert-and-copy-color= Convert color to a valid format and copy it at current cursor position.&lt;/li&gt; &#xA;  &lt;li&gt;=colorful-mode= Buffer-local minor mode.&lt;/li&gt; &#xA;  &lt;li&gt;=global-colorful-mode= Global minor mode.&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;** Key bindings These key bindings are defined by: =colorful-mode-map=&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;=C-c c x= ‚Üí =colorful-change-or-copy-color=.&lt;/li&gt; &#xA;  &lt;li&gt;=C-c c c= ‚Üí =colorful-convert-and-copy-color=.&lt;/li&gt; &#xA;  &lt;li&gt;=C-c c r= ‚Üí =colorful-convert-and-change-color=.&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;** Adding extra colors Colorful by default provides extra functions that highlight additional colors:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;=colorful-add-hex-colors= Add Hexadecimal Colors.&lt;/li&gt; &#xA;  &lt;li&gt;=colorful-add-color-names= Add color names.&lt;/li&gt; &#xA;  &lt;li&gt;=colorful-add-rgb-colors= Add CSS RGB colors.&lt;/li&gt; &#xA;  &lt;li&gt;=colorful-add-hsl-colors= Add CSS HSL colors.&lt;/li&gt; &#xA;  &lt;li&gt;=colorful-add-latex-colors= Add LaTex rgb/RGB/HTML/Grey colors.&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;For use them add it to: #+begin_src emacs-lisp ;; In this example add emacs color names only for yaml-mode and derived. (add-to-list &#39;colorful-extra-color-keyword-functions &#39;(yaml-mode . colorful-add-color-names)) #+end_src&lt;/p&gt; &lt;p&gt;See: =colorful-extra-color-keyword-functions= for more details.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Usage and Installation üì¶ It&#39;s recommended that you must use emacs-28.x or higher.&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;For install colorful run:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;=M-x package-install colorful-mode=&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;Once you have it installed you can run colorful locally in your buffer with =M-x colorful-mode=, if want enable it globally without using hooks then you can do =M-x global-colorful-mode=&lt;/p&gt; &lt;p&gt;Or if you prefer using =use-package= macro: #+begin_src emacs-lisp (use-package colorful-mode :ensure t ; Optional :hook (prog-mode text-mode) ...)&lt;/p&gt; &lt;p&gt;#+end_src&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;How does it compare to =rainbow-mode=? =colorful-mode= improves =rainbow-mode= in adding more features and fixing some /(and old)/ bugs:&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;| Comparation | colorful-mode.el | rainbow-mode.el | |-------------------------------------------------------+------------------+-----------------| | Compatible with hl-line and other overlays? | ‚úì | ‚ùå | | Convert color to other formats? | ‚úì | ‚ùå | | Opcionally use string prefix/suffix instead highlight | ‚úì | ‚ùå | | Exclude keywords/colors? | ‚úì | ‚ùå^{1} | | Allow highlight specifics colors in specific modes | ‚úì | ‚úì^{2} | | Opcionally highlight only in strings | ‚úì | ‚ùå | | No performance issues?^{3} | ‚ùå | ‚úì |&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;rainbow-mode (like colorful) uses regex for highlight some keywords, however it cannot exclude specifics colors keywords (such as &#34;#def&#34; that overrides C &#34;#define&#34; keyword).&lt;/li&gt; &#xA;  &lt;li&gt;Only for some colors.&lt;/li&gt; &#xA;  &lt;li&gt;I didn&#39;t a benchmark however due colorful-mode uses overlays instead text properties it can be a slow.&lt;/li&gt; &#xA; &lt;/ol&gt; &lt;p&gt;The intention is to provide a featured alternative to =rainbow-mode.el= with a user-friendly approach.&lt;/p&gt; &lt;p&gt;If you prefer only highlights without color convertion, prefix/suffix string indicator and/or anything else you can use =rainbow-mode.el=.&lt;/p&gt; &lt;p&gt;On the other hand, if you want convert colors, overlays, optional prefix strings and more features you can use =colorful-mode.el=.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;[[./CONTRIBUITING.org][How to Contribute]] colorful-mode is part of GNU ELPA, if you want send patches you will need assign copyright to the Free Software Fundation. Please see the [[./CONTRIBUITING.org][CONTRIBUITING.org]] file for getting more information.&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;#+html: &lt;img src=&#34;https://raw.githubusercontent.com/DevelopmentCool2449/emacs-svg-badges/main/powered_by_emacs.svg?sanitize=true&#34; align=&#34;left&#34; width=&#34;10%&#34; alt=&#34;Powered by GNU Emacs&#34;&gt; #+html: &lt;img src=&#34;https://raw.githubusercontent.com/DevelopmentCool2449/emacs-svg-badges/main/powered_by_org_mode.svg?sanitize=true&#34; align=&#34;right&#34; width=&#34;10%&#34; alt=&#34;Powered by Org Mode&#34;&gt;&lt;/p&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>xwl/gmail-notifier</title>
    <updated>2024-05-05T01:37:09Z</updated>
    <id>tag:github.com,2024-05-05:/xwl/gmail-notifier</id>
    <link href="https://github.com/xwl/gmail-notifier" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Notify unread gmail on mode line&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>vspinu/sesman</title>
    <updated>2024-05-05T01:37:09Z</updated>
    <id>tag:github.com,2024-05-05:/vspinu/sesman</id>
    <link href="https://github.com/vspinu/sesman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Session manager for Emacs based IDEs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/sesman&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/sesman-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/sesman&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/sesman-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/vspinu/sesman&#34;&gt;&lt;img src=&#34;https://travis-ci.org/vspinu/sesman.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Generic Session Manager for Emacs&lt;/h2&gt; &#xA;&lt;p&gt;Sesman provides facilities for session management and interactive session association with the current contexts (e.g. project, directory, buffers). While sesman can be used to manage arbitrary &#34;sessions&#34;, it primary targets the Emacs based IDEs (&lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt;, &lt;a href=&#34;https://ess.r-project.org/&#34;&gt;ESS&lt;/a&gt;, &lt;a href=&#34;https://github.com/jaor/geiser&#34;&gt;Geiser&lt;/a&gt;, &lt;a href=&#34;https://github.com/dgutov/robe&#34;&gt;Robe&lt;/a&gt;, &lt;a href=&#34;https://common-lisp.net/project/slime/&#34;&gt;SLIME&lt;/a&gt; etc.)&lt;/p&gt; &#xA;&lt;p&gt;For Emacs based IDEs, session are commonly composed of one or more physical processes (sub-processes, sockets, websockets etc). For example in the current implementation of &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt; a session would be composed of one or more sesman connections (Clojure or ClojureScript). Each &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt; connection consists of user REPL buffer and two sub-processes, one for user eval communication and another for tooling (completion, inspector etc).&lt;/p&gt; &#xA;&lt;h3&gt;Concepts:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;session&#34; is a list of the form &lt;code&gt;(session-name ..other-stuff..)&lt;/code&gt; where &lt;code&gt;..other-stuff..&lt;/code&gt; is system dependent.&lt;/li&gt; &#xA; &lt;li&gt;&#34;system&#34; is generic name used for a tool which uses sesman (e.g. &lt;code&gt;CIDER&lt;/code&gt;, &lt;code&gt;ESS&lt;/code&gt; etc)&lt;/li&gt; &#xA; &lt;li&gt;&#34;contexts&#34; are Emacs objects which describe current context. For example &lt;code&gt;current-buffer&lt;/code&gt;, &lt;code&gt;default-directory&lt;/code&gt; and &lt;code&gt;project-current&lt;/code&gt; are such contexts. Context objects are used to create associations (links) between the current context and sessions. At any given time the user can link (unlink) sessions to (from) contexts. By default there are three types of contexts - buffer, directory and project, but systems can define their own specialized context types..&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sesman is composed of two parts, user interface, available as a sesman map and menu, and system interface consisting of a few generics and API functions.&lt;/p&gt; &#xA;&lt;h3&gt;User Interface&lt;/h3&gt; &#xA;&lt;p&gt;Consists of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lifecycle management commands (&lt;code&gt;sesman-start&lt;/code&gt;, &lt;code&gt;sesman-quit&lt;/code&gt; and &lt;code&gt;sesman-restart&lt;/code&gt;), and&lt;/li&gt; &#xA; &lt;li&gt;association management commands (&lt;code&gt;sesman-link-with-buffer&lt;/code&gt;, &lt;code&gt;sesman-link-with-directory&lt;/code&gt;, &lt;code&gt;sesman-link-with-project&lt;/code&gt; and &lt;code&gt;sesman-unlink&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From the user&#39;s prospective the work-flow is as follow. Start a session, either with &lt;code&gt;sesman-start&lt;/code&gt; (&lt;code&gt;C-c C-s C-s&lt;/code&gt;) or some of the system specific commands (&lt;code&gt;run-xyz&lt;/code&gt;, &lt;code&gt;xyz-jack-in&lt;/code&gt; etc). On startup each session is automatically associated with the least specific context (commonly a project). In the most common case the user has only one session open per project. In such case, no ambiguity arises when a system retrieves the current session. If multiple sessions are associated with the current context the ambiguity is automatically resolved through the system specific relevance mechanism. Usually it is the most recently used session.&lt;/p&gt; &#xA;&lt;p&gt;By default links with projects and directories are many-to-many in the sense that any session can be linked to multiple context and each context can be associated with multiple sessions. Buffers instead are 1-to-many. One buffer can be associated with only one session and a session can be associated with multiple buffers. This behavior is controlled by a custom &lt;code&gt;sesman-single-link-context-types&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;System Interface&lt;/h3&gt; &#xA;&lt;p&gt;Consists of several generics, of which only first three are strictly required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-start-session&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-quit-session&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-restart-session&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-session-info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-context-types&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-more-relevant-p&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sesman also provides [a range of utility functions][system api] functions to manipulate sessions, links and session components. Systems can register entire sessions with &lt;code&gt;sesman-register&lt;/code&gt; or add/remove objects one by one with &lt;code&gt;sesman-add-object&lt;/code&gt;/&lt;code&gt;sesman-remove-object&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Systems should link sesman map into their key-maps (ideally on &lt;code&gt;C-c C-s&lt;/code&gt;) and install sesman menu with &lt;code&gt;sesman-install-menu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Implementations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cider.mx/cider/usage/managing_connections.html&#34;&gt;CIDER implementation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- , which is a good mnemonic and is already used in CIDER and ESS. --&gt;</summary>
  </entry>
</feed>