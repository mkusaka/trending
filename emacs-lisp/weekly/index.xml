<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:48:57Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>seagle0128/.emacs.d</title>
    <updated>2023-09-17T01:48:57Z</updated>
    <id>tag:github.com,2023-09-17:/seagle0128/.emacs.d</id>
    <link href="https://github.com/seagle0128/.emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Centaur Emacs - A Fancy and Fast Emacs Configuration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Centaur Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/seagle0128/.emacs.d/actions&#34;&gt;&lt;img src=&#34;https://github.com/seagle0128/.emacs.d/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/seagle0128/.emacs.d.svg?label=Release&#34; alt=&#34;Release Tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/License&#34;&gt;&lt;img src=&#34;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/Windows&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Windows-lightblue?logo=windows&amp;amp;style=flat&amp;amp;logoColor=blue&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/Linux&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Linux-fcc624?logo=linux&amp;amp;style=flat&amp;amp;logoColor=black&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/macOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-macOS-lightgrey?logo=apple&amp;amp;style=flat&amp;amp;logoColor=white&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/logo.png&#34; alt=&#34;Centaur Emacs&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#prerequisite&#34;&gt;Prerequisite&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#os&#34;&gt;OS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#gnu-emacs&#34;&gt;GNU Emacs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#dotfiles&#34;&gt;Dotfiles (Optional)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#update&#34;&gt;Update&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#customization&#34;&gt;Customization&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#customize-group&#34;&gt;Customize Group&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#hydra&#34;&gt;Hydra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/.emacs.d/master/#donate&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;p&gt;This is an Emacs distribution that aims to enhance the default Emacs experience. It alters a lot of the default settings, bundles a plethora of additional packages and adds its own core library to the mix. The final product offers an easy to use Emacs configuration for Emacs newcomers and lots of additional power for Emacs power users.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s able to run on Windows, GNU Linux and macOS. It is compatible &lt;strong&gt;ONLY with GNU Emacs 27.1 and above&lt;/strong&gt;. In general you&#39;re advised to always run with the latest stable release - currently &lt;strong&gt;29.1&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Out of box.&lt;/li&gt; &#xA; &lt;li&gt;Clean and Fast.&lt;/li&gt; &#xA; &lt;li&gt;Quick fuzzy search.&lt;/li&gt; &#xA; &lt;li&gt;Better Org/Markdown support.&lt;/li&gt; &#xA; &lt;li&gt;Support multiple programming languages &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;C/C++/Object-C/C#/Java&lt;/li&gt; &#xA;   &lt;li&gt;Python/Ruby/Perl/PHP/Shell/Powershell/Bat&lt;/li&gt; &#xA;   &lt;li&gt;JavaScript/Typescript/JSON/YAML&lt;/li&gt; &#xA;   &lt;li&gt;HTML/CSS/XML&lt;/li&gt; &#xA;   &lt;li&gt;Golang/Swift/Rust/Dart/Elixir&lt;/li&gt; &#xA;   &lt;li&gt;...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Auto completion.&lt;/li&gt; &#xA; &lt;li&gt;Fly syntax check.&lt;/li&gt; &#xA; &lt;li&gt;Fly spell check.&lt;/li&gt; &#xA; &lt;li&gt;Git integration.&lt;/li&gt; &#xA; &lt;li&gt;Project/Workspace integration.&lt;/li&gt; &#xA; &lt;li&gt;Pomodor integration.&lt;/li&gt; &#xA; &lt;li&gt;MPD integration.&lt;/li&gt; &#xA; &lt;li&gt;Support docker.&lt;/li&gt; &#xA; &lt;li&gt;Better Chinese support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Chinese calendar&lt;/li&gt; &#xA;   &lt;li&gt;Youdao dictionary&lt;/li&gt; &#xA;   &lt;li&gt;Google translation&lt;/li&gt; &#xA;   &lt;li&gt;Pinyin search&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisite&lt;/h2&gt; &#xA;&lt;h3&gt;OS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;Windows (Cygwin/MSYS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GNU Emacs&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;http://wikemacs.org/index.php/Installing_Emacs&#34;&gt;Installing Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dotfiles (Optional)&lt;/h3&gt; &#xA;&lt;p&gt;Recommend to use &lt;a href=&#34;https://github.com/seagle0128/dotfiles&#34;&gt;Centaur Dotfiles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mv ~/.emacs.d ~/.emacs.d.bak&#xA;git clone --depth 1 https://github.com/seagle0128/.emacs.d.git ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or download the &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/archive/master.zip&#34;&gt;zip package&lt;/a&gt; directly and extract to &lt;code&gt;~/.emacs.d&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Linux, you may prefer an XDG-compatible location, please use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Please make sure ~/.emacs.d, ~/.emacs and ~/.emacs.el don&#39;t exist&#xA;git clone --depth 1 https://github.com/seagle0128/.emacs.d.git $XDG_CONFIG_HOME/emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or extract the zip package to &lt;code&gt;$XDG_CONFIG_HOME/emacs&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Then start Emacs. Wait for a while to install packages at the first startup. Enjoy! &lt;span&gt;ðŸ˜„&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt;: It may take long time to download packages at the first startup. It&#39;s up to your network speed. If it takes too long time and no response, check the connection or use proxy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Start Emacs with the minimal configuration for fast startup and troubleshooting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;emacs -Q -l ~/.emacs.d/init-mini.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;# Update Centaur Emacs, including configurations and packages&#xA;M-x centaur-update&#xA;&#xA;# Update Emacs configurations only&#xA;M-x centaur-update-config&#xA;&#xA;# Update ~/.dotfiles if it exists&#xA;M-x centaur-update-dotfiles&#xA;&#xA;# Update packages only&#xA;M-x centaur-update-packages&#xA;&#xA;# Update all including configurations, packages and dotfiles&#xA;M-x centaur-update-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/.emacs.d/Dockerfile&#xA;docker build -t centaur/emacs .&#xA;docker run -it centaur/emacs bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;Customize Group&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x customize-group&lt;/code&gt; and select &lt;code&gt;centaur&lt;/code&gt;. Set and save the configurations, then restart Emacs.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Add or change the configurations in &lt;code&gt;custom.el&lt;/code&gt;, then restart Emacs.&lt;/p&gt; &#xA;&lt;p&gt;For Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq centaur-logo nil)                        ; Logo file or nil (official logo)&#xA;(setq centaur-full-name &#34;user name&#34;)           ; User full name&#xA;(setq centaur-mail-address &#34;user@email.com&#34;)   ; Email address&#xA;(setq centaur-proxy &#34;127.0.0.1:1087&#34;)          ; HTTP/HTTPS proxy&#xA;(setq centaur-socks-proxy &#34;127.0.0.1:1086&#34;)    ; SOCKS proxy&#xA;(setq centaur-server t)                        ; Enable `server-mode&#39; or not: t or nil&#xA;(setq centaur-icon t)                          ; Display icons or not: t or nil&#xA;(setq centaur-package-archives &#39;melpa)         ; Package repo: melpa, emacs-cn, bfsu, netease, sjtu, tencent, tuna or ustc&#xA;(setq centaur-theme &#39;auto)                     ; Color theme: auto, random, system, default, pro, dark, light, warm, cold, day or night&#xA;(setq centaur-completion-style &#39;minibuffer)    ; Completion display style: minibuffer or childframe&#xA;(setq centaur-dashboard nil)                   ; Display dashboard at startup or not: t or nil&#xA;(setq centaur-restore-frame-geometry nil)      ; Restore the frame&#39;s geometry at startup: t or nil&#xA;(setq centaur-lsp &#39;lsp-mode)                   ; Set LSP client: lsp-mode, eglot or nil&#xA;(setq centaur-lsp-format-on-save t)            ; Auto format buffers on save: t or nil&#xA;(setq centaur-lsp-format-on-save-ignore-modes &#39;(c-mode c++-mode python-mode markdown-mode)) ; Ignore format on save for some languages&#xA;(setq centaur-tree-sitter nil)                 ; Enable tree-sitter or not: t or nil. Only available in 29+.&#xA;(setq centaur-chinese-calendar nil)            ; Support Chinese calendar or not: t or nil&#xA;(setq centaur-player t)                        ; Enable players or not: t or nil&#xA;(setq centaur-prettify-symbols-alist nil)      ; Alist of symbol prettifications. Nil to use font supports ligatures.&#xA;(setq centaur-prettify-org-symbols-alist nil)  ; Alist of symbol prettifications for `org-mode&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default package archives is &lt;code&gt;melpa&lt;/code&gt;. You can change it in &lt;code&gt;custom.el&lt;/code&gt;, or set manually via &lt;code&gt;M-x set-package-archives&lt;/code&gt; anytime.&lt;/p&gt; &#xA;&lt;p&gt;For the personal configurations, you could put to &lt;code&gt;~/.emacs.d/custom-post.org&lt;/code&gt; or&lt;code&gt;~/.emacs.d/custom-post.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Hydra&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggles-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;f6&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Global option toggles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;window-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-c w&lt;/code&gt;/&lt;code&gt;C-x o w&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Window management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;doom-modeline-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;doom-modeline-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-&amp;lt;f6&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mode-line options and actions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hydra-dired-qick-sort&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;dired&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Options for &lt;code&gt;dired-quick-sort&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;org-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;org-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Org template&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dashboard-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;dashboard-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;/&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for the dashboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dumb-jump-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-M-j&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;youdao-dictionay-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;youdao-dictionay-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;/&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;youdao-dictionary&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ztreediff-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;zreediff-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-&amp;lt;f5&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for text mode directory tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git-messenger-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-x v p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;git-messenger&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;smerge-mode-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;smerge-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-c m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;smerge-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rect-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;text-mode, prog-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for Rectangle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rect-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;org-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;S-&amp;lt;return&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for Rectangle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hideshow-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;prog-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-~&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;hideshow&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lsp-ui-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lsp-ui-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-&amp;lt;f6&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;lsp-ui&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;dap-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;M-&amp;lt;f5&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for &lt;code&gt;dap-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elfeed-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;elfeed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for RSS reader &lt;code&gt;elfeed&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;xwidget-hydra&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;xwidget-webkit-mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actions for embedded webkit browser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/97093362-c793b000-167d-11eb-924a-1892c6e95b8a.png&#34; alt=&#34;Dashboard&#34; title=&#34;Dashboard (default theme)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/97093358-b9de2a80-167d-11eb-9e5a-8591b1248c37.png&#34; alt=&#34;color_icons&#34; title=&#34;Main (color icons)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/56489193-7f894f80-6513-11e9-9c95-ea1ef41efb1f.png&#34; alt=&#34;markdown_magit&#34; title=&#34;Markdown and Magit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/56489410-2837af00-6514-11e9-9e04-a1663ac479e8.png&#34; alt=&#34;org_classic&#34; title=&#34;Org (classic theme)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/56489516-85cbfb80-6514-11e9-9dd4-8602bf8a4ec7.png&#34; alt=&#34;main_light&#34; title=&#34;Main (light theme)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display icons correctly in Centaur Emacs?&lt;/p&gt; &lt;p&gt;Generally you just use &lt;code&gt;M-x centaur-install-fonts&lt;/code&gt; to install all necessary fonts. The manual steps are below.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rainstormstudio/nerd-icons.el&#34;&gt;nerd-icons&lt;/a&gt; are necessary. Run &lt;code&gt;M-x nerd-icons-install-fonts&lt;/code&gt; to install the resource fonts. On Windows, the fonts should be installed manually. &lt;code&gt;nerd-icons&lt;/code&gt; supports bot GUI and TUI. If you don&#39;t like color icons, &lt;code&gt;(setq nerd-icons-color-icons nil)&lt;/code&gt; to disable it. Please refer to &lt;a href=&#34;https://github.com/rainstormstudio/nerd-icons.el&#34;&gt;nerd-icons.el&lt;/a&gt; for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The packages cannot be installed, what should I do?&lt;/p&gt; &lt;p&gt;Generally it&#39;s due to connection issue. Please refer to &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/issues/98&#34;&gt;#98&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;M-x package-refresh-contents&lt;/code&gt; and try again.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;(setq gnutls-algorithm-priority &#34;NORMAL:-VERS-TLS1.3&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Use other mirror of ELPA.&lt;/li&gt; &#xA;   &lt;li&gt;Change another network to retry.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to search Chinese via pinyin?&lt;/p&gt; &lt;p&gt;In Emacs, &lt;code&gt;C-s !&lt;/code&gt;. If you just want to search &lt;code&gt;!&lt;/code&gt;, use &lt;code&gt;C-s \!&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to use the Centaur Dashboard?&lt;/p&gt; &lt;p&gt;If &lt;code&gt;centaur-dashboard&lt;/code&gt; is non-nil the Centaur Dashboard will be opened at startup automatically. After startup, you could use &lt;code&gt;F2&lt;/code&gt; to reopen it anytime. In the dashboard, please press &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt; to get the help. You can easily jump to the sections or buttons with keybindings, e.g. Homepage(&lt;code&gt;H&lt;/code&gt;), Session(&lt;code&gt;R&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;), Settings(&lt;code&gt;S&lt;/code&gt;), Update(&lt;code&gt;U&lt;/code&gt;), Recent Files (&lt;code&gt;r&lt;/code&gt;), Bookmarks(&lt;code&gt;m&lt;/code&gt;) and Projects(&lt;code&gt;p&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Does Centaur Emacs support Language Server Protocol (LSP)?&lt;/p&gt; &lt;p&gt;The LSP feature is supported and enabled by default in Centaur Emacs. &lt;code&gt;lsp-mode&lt;/code&gt; is the default client, and &lt;code&gt;eglot&lt;/code&gt; is another choice. Use &lt;code&gt;(setq centaur-lsp nil)&lt;/code&gt; to disable LSP if you don&#39;t like it.&lt;/p&gt; &lt;p&gt;To use LSP you should install the language servers. Refer to &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode#supported-languages&#34;&gt;lsp-mode: supported-languages&lt;/a&gt; or &lt;a href=&#34;https://github.com/joaotavora/eglot#connecting-to-a-server&#34;&gt;eglot: Connecting to a server&lt;/a&gt; for the details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to enable &lt;code&gt;plantuml&lt;/code&gt; in &lt;code&gt;org-mode&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Put &lt;code&gt;(setq org-plantuml-jar-path &#34;&amp;lt;path of plantumx.x.x.jar&amp;gt;&#34;)&lt;/code&gt; in &lt;code&gt;custom.el&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why the Emacs environment variables and &lt;code&gt;exec-path&lt;/code&gt; are different between GUI and terminal?&lt;/p&gt; &lt;p&gt;Please refer to #33. You should instead set environment variables in startup files like &lt;code&gt;.profile&lt;/code&gt;, &lt;code&gt;.bash_profile&lt;/code&gt; or &lt;code&gt;.zshenv&lt;/code&gt;, then &lt;code&gt;Centaur Emacs&lt;/code&gt; is able to recognize and import the environment variables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to use &lt;a href=&#34;https://github.com/syohex/emacs-zoom-window&#34;&gt;zoom-window&lt;/a&gt; in Centaur Emacs?&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://github.com/seagle0128/.emacs.d/issues/169#issuecomment-590035527&#34;&gt;#169&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you think the it&#39;s helpful for you, please consider paying a cup of coffee for me. Thank you! &lt;span&gt;ðŸ˜„&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818854-44204900-e248-11e9-9cc5-3e6339587cd8.png&#34; alt=&#34;Alipay&#34; width=&#34;120&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818844-366ac380-e248-11e9-931c-4bd872d0566b.png&#34; alt=&#34;Wechat Pay&#34; width=&#34;120&#34;&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://paypal.me/seagle0128&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://www.paypalobjects.com/digitalassets/c/website/marketing/apac/C2/logos-buttons/optimize/44_Grey_PayPal_Pill_Button.png&#34; alt=&#34;PayPal&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.buymeacoffee.com/s9giES1&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; width=&#34;160&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>yjwen/org-reveal</title>
    <updated>2023-09-17T01:48:57Z</updated>
    <id>tag:github.com,2023-09-17:/yjwen/org-reveal</id>
    <link href="https://github.com/yjwen/org-reveal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exports Org-mode contents to Reveal.js HTML presentation.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+Title: Introduction to Org-Reveal #+Author: Yujie Wen #+Email: &lt;a href=&#34;mailto:yjwen.ty@gmail.com&#34;&gt;yjwen.ty@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5, transition:&#39;cube&#39; #+OPTIONS: toc:nil #+REVEAL_THEME: moon #+REVEAL_HLEVEL: 2 #+REVEAL_HEAD_PREAMBLE: &#xA; &lt;meta name=&#34;description&#34; content=&#34;Org-Reveal Introduction.&#34;&gt; #+REVEAL_POSTAMBLE: &lt;/p&gt;&#xA;&lt;p&gt; Created by yjwen. &lt;/p&gt; #+REVEAL_PLUGINS: (markdown notes) #+REVEAL_EXTRA_CSS: ./local.css&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;[[http://melpa.org/#/ox-reveal][file:http://melpa.org/packages/ox-reveal-badge.svg]] [[http://www.gnu.org/licenses/gpl-3.0.html][file:https://img.shields.io/:license-gpl3-blue.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Table of Contents Title links are for viewing within org-mode buffer only. &lt;em&gt;Github viewers please use the =(gh)= links.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#table-of-contents%5D%5Bgh%5D%5D&#34;&gt;[Table of Contents][Table of Contents]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#revealjs-and-org-reveal%5D%5Bgh%5D%5D&#34;&gt;[Reveal.js and Org-Reveal][Reveal.js and Org-Reveal]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#requirements-and-installation%5D%5Bgh%5D%5D&#34;&gt;[Requirements and Installation][Requirements and Installation]&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#install-revealjs%5D%5Bgh%5D%5D&#34;&gt;[Install Reveal.js][Install Reveal.js]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#install-org-reveal-from-melpa%5D%5Bgh%5D%5D&#34;&gt;[Install org-reveal from MELPA][Install org-reveal from MELPA]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#install-org-reveal-from-github%5D%5Bgh%5D%5D&#34;&gt;[Install org-reveal from GitHub][Install org-reveal from GitHub]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#configuration%5D%5Bgh%5D%5D&#34;&gt;[Configuration][Configuration]&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#set-the-location-of-revealjs%5D%5Bgh%5D%5D&#34;&gt;[Set the location of Reveal.js][Set the location of Reveal.js]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#url-form-for-file-location%5D%5Bgh%5D%5D&#34;&gt;[Url form for file location][Url form for file location]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#first-try%5D%5Bgh%5D%5D&#34;&gt;[First Try][First Try]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#the-hlevel%5D%5Bgh%5D%5D&#34;&gt;[The HLevel][The HLevel]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#hlevels-effects-on-slides-layout%5D%5Bgh%5D%5D&#34;&gt;[HLevel&#39;s Effects on Slides Layout][HLevel&#39;s Effects on Slides Layout]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#configure-hlevels-value%5D%5Bgh%5D%5D&#34;&gt;[Configure HLevel&#39;s Value][Configure HLevel&#39;s Value]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#force-split%5D%5Bgh%5D%5D&#34;&gt;[Force Split][Force Split]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#select-theme%5D%5Bgh%5D%5D&#34;&gt;[Select Theme][Select Theme]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#set-the-title-slide%5D%5Bgh%5D%5D&#34;&gt;[Set The Title Slide][Set The Title Slide]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#customize-the-title-slide%5D%5Bgh%5D%5D&#34;&gt;[Customize the Title Slide][Customize the Title Slide]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#title-slide-state%5D%5Bgh%5D%5D&#34;&gt;[Title Slide State][Title Slide State]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#set-slide-background%5D%5Bgh%5D%5D&#34;&gt;[Set Slide Background][Set Slide Background]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#single-colored-background%5D%5Bgh%5D%5D&#34;&gt;[Single Colored Background][Single Colored Background]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#single-image-background%5D%5Bgh%5D%5D&#34;&gt;[Single Image Background][Single Image Background]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#repeating-image-background%5D%5Bgh%5D%5D&#34;&gt;[Repeating Image Background][Repeating Image Background]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#title-slide-background-image%5D%5Bgh%5D%5D&#34;&gt;[Title Slide Background Image][Title Slide Background Image]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#table-of-contents-slide-background-image%5D%5Bgh%5D%5D&#34;&gt;[Table of Contents Slide Background Image][Table of Contents Slide Background Image]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#background-for-all-slides%5D%5Bgh%5D%5D&#34;&gt;[Background for all slides][Background for all slides]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#slide-size%5D%5Bgh%5D%5D&#34;&gt;[Slide Size][Slide Size]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#slide-numbering%5D%5Bgh%5D%5D&#34;&gt;[Slide Numbering][Slide Numbering]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#slide-header/footer%5D%5Bgh%5D%5D&#34;&gt;[Slide Header/Footer][Slide Header/Footer]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#fragmented-contents%5D%5Bgh%5D%5D&#34;&gt;[Fragmented Contents][Fragmented Contents]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#fragment-styles%5D%5Bgh%5D%5D&#34;&gt;[Fragment Styles][Fragment Styles]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#fragment-index%5D%5Bgh%5D%5D&#34;&gt;[Fragment Index][Fragment Index]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#list-fragments%5D%5Bgh%5D%5D&#34;&gt;[List Fragments][List Fragments]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#initialization-options%5D%5Bgh%5D%5D&#34;&gt;[Initialization options][Initialization options]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#third-party-plugins%5D%5Bgh%5D%5D&#34;&gt;[Third-Party Plugins][Third-Party Plugins]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#highlight-source-code%5D%5Bgh%5D%5D&#34;&gt;[Highlight Source Code][Highlight Source Code]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#using-highlightjs%5D%5Bgh%5D%5D&#34;&gt;[Using highlight.js][Using highlight.js]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;[[Auto-Animate]] ([[https://github.com/yjwen/org-reveal#auto-animate][gh]])&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#editable-source-code%5D%5Bgh%5D%5D&#34;&gt;[Editable Source Code][Editable Source Code]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#mathjax%5D%5Bgh%5D%5D&#34;&gt;[MathJax][MathJax]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#preamble-and-postamble%5D%5Bgh%5D%5D&#34;&gt;[Preamble and Postamble][Preamble and Postamble]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#generating-pre/postamble-by-emacs-lisp-functions%5D%5Bgh%5D%5D&#34;&gt;[Generating Pre/Postamble by Emacs-Lisp Functions][Generating Pre/Postamble by Emacs-Lisp Functions]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#prologue-and-epilogue%5D%5Bgh%5D%5D&#34;&gt;[Prologue and Epilogue]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#raw-html-in-slides%5D%5Bgh%5D%5D&#34;&gt;[Raw HTML in Slides][Raw HTML in Slides]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#speaker-notes%5D%5Bgh%5D%5D&#34;&gt;[Speaker Notes][Speaker Notes]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#multiplexing%5D%5Bgh%5D%5D&#34;&gt;[Multiplexing][Multiplexing]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#extra-stylesheets-and-script-sources%5D%5Bgh%5D%5D&#34;&gt;[Extra Stylesheets and Script Sources][Extra Stylesheets and Script Sources]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#select-built-in-scripts%5D%5Bgh%5D%5D&#34;&gt;[Select Built-In Scripts][Select Built-In Scripts]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#extra-dependent-script%5D%5Bgh%5D%5D&#34;&gt;[Extra Dependent Script][Extra Dependent Script]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#extra-slide-attribute%5D%5Bgh%5D%5D&#34;&gt;[Extra Slide Attribute][Extra Slide Attribute]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#export-into-single-file%5D%5Bgh%5D%5D&#34;&gt;[Export into Single File][Export into Single File]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#export-current-subtree%5D%5Bgh%5D%5D&#34;&gt;[Export Current Subtree][Export Current Subtree]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#tips%5D%5Bgh%5D%5D&#34;&gt;[Tips][Tips]&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#managing-table-of-contents%5D%5Bgh%5D%5D&#34;&gt;[Managing Table of Contents][Managing Table of Contents]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#internal-links%5D%5Bgh%5D%5D&#34;&gt;[Internal Links][Internal Links]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#custom-js%5D%5Bgh%5D%5D&#34;&gt;[Custom JS][Custom JS]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#executable-source-blocks%5D%5Bgh%5D%5D&#34;&gt;[Executable Source Blocks][Executable Source Blocks]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#html-src-block%5D%5Bgh%5D%5D&#34;&gt;[HTML Src Block][HTML Src Block]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#javascript-src-block%5D%5Bgh%5D%5D&#34;&gt;[Javascript Src Block][Javascript Src Block]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#perl-src-block-(not-klipsified)%5D%5Bgh%5D%5D&#34;&gt;[Perl Src Block (not klipsified)][Perl Src Block (not klipsified)]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#properties-for-sub-headings%5D%5Bgh%5D%5D&#34;&gt;[Properties for Sub-headings][Properties for Sub-headings]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#customize-iframe-background-slide%5D%5Bgh%5D%5D&#34;&gt;[Customize iframe background slide][Customize iframe background slide]&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#thanks%5D%5Bgh%5D%5D&#34;&gt;[Thanks][Thanks]&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reveal.js and Org-Reveal&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Reveal.js&lt;/em&gt; is a tool for creating good-looking HTML presentations, authored by [[http://hakim.se/][Hakim El Hattab]]. \ For an example of a reveal.js presentation, see [[http://lab.hakim.se/reveal-js/#/][here]].&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Org-Reveal&lt;/em&gt; exports your [[http://orgmode.org/][Org]] documents to reveal.js presentations.\ With Org-reveal, you can create beautiful presentations with 3D effects from simple but powerful Org contents.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Requirements and Installation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reveal.js.&lt;/li&gt; &#xA;   &lt;li&gt;Org-mode.&lt;/li&gt; &#xA;   &lt;li&gt;ox-reveal.el.&lt;/li&gt; &#xA;   &lt;li&gt;htmlize.el (optional, for syntax highlighting).&lt;/li&gt; &#xA;   &lt;li&gt;And, of course, emacs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Install Reveal.js&lt;/p&gt; &#xA;&lt;p&gt;Download Reveal.js packages from [[https://github.com/hakimel/reveal.js/][here]].&lt;/p&gt; &#xA;&lt;p&gt;Extract Reveal.js folders from the downloaded zip file.&lt;/p&gt; &#xA;&lt;p&gt;If you do not wish to download reveal.js yourself and would rather get a copy from a CDN, see the section [[https://github.com/yjwen/org-reveal#set-the-location-of-revealjs][Set the location of Reveal.js]]&lt;/p&gt; &#xA;&lt;p&gt;** Install org-reveal from MELPA&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to install org-reveal is to install package ox-reveal from MELPA.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to [[http://melpa.org/#/getting-started]] for using MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It is suggested to use the [[http://orgmode.org/elpa.html][Org ELPA]] archive in pair with the ox-reveal packages. Emacs builtin Org-mode package may be out of date for MELPA&#39;s ox-reveal.&lt;/p&gt; &#xA;&lt;p&gt;** Install org-reveal from GitHub&lt;/p&gt; &#xA;&lt;p&gt;You can also install the latest developing version of org-reveal directly from GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Please download the latest Org-reveal package from [[https://github.com/yjwen/org-reveal][the Org-reveal GitHub page]]. Or clone the GitHub repository: #+BEGIN_SRC sh git clone &lt;a href=&#34;https://github.com/yjwen/org-reveal.git&#34;&gt;https://github.com/yjwen/org-reveal.git&lt;/a&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Copy =ox-reveal.el= to one of your Emacs&#39;s &lt;del&gt;load-path&lt;/del&gt;, and add the following statement to your =.emacs= file. #+BEGIN_SRC lisp (require &#39;ox-reveal) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It is suggested to use the Org-mode git repository in pair with the GitHub org-reveal. Please get the Org-mode git repository by: #+BEGIN_SRC sh $ git clone &lt;a href=&#34;https://code.orgmode.org/bzg/org-mode&#34;&gt;https://code.orgmode.org/bzg/org-mode&lt;/a&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Follow the [[http://orgmode.org/worg/dev/org-build-system.html][online instruction]] for building and installing Org-mode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Set the location of Reveal.js&lt;/p&gt; &#xA;&lt;p&gt;Org-reveal must know where Reveal.js is on your computer before exporting Org contents. The location of Reveal.js is the path to the top directory of the Reveal.js packages, the directory which contains file &lt;em&gt;README.md&lt;/em&gt;, but &lt;em&gt;not&lt;/em&gt; the one that contains the file reveal.js.&lt;/p&gt; &#xA;&lt;p&gt;The default location is =./reveal.js=, relative to the Org file.&lt;/p&gt; &#xA;&lt;p&gt;Changing =org-reveal-root= &#39;s value will change the location globally. For example, add the following statement to your .emacs file: #+BEGIN_SRC lisp (setq org-reveal-root &#34;file:///d:/reveal.js&#34;) #+END_SRC &lt;em&gt;IMPORTANT&lt;/em&gt;: the absolute path to Reveal.js should be in URL form, &#34;file:///path_to_reveal.js&#34;, as illustrated above. By setting option =REVEAL_ROOT=, the location is only affected within the Org file.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_ROOT: file:///d:/reveal.js #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Set your =REVEAL_ROOT= to the following URL to download reveal.js from a CDN instead of downloading a local copy.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_ROOT: &lt;a href=&#34;https://cdn.jsdelivr.net/npm/reveal.js&#34;&gt;https://cdn.jsdelivr.net/npm/reveal.js&lt;/a&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Url form for file location&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;For example if you cloned this repository to your home directory,&#xA;this file in Mac OS X would be referred to as&#xA;&#34;file:///Users/username/org-reveal/readme.org&#34;.  This file in&#xA;Ubuntu would be &#34;file:///home/username/org-reveal/readme.org&#34; and&#xA;in Windows this file would be&#xA;&#34;file:///c:/Users/username/org-reveal/readme.org&#34;.  For more&#xA;detail on this standard please refer to&#xA;[[http://en.wikipedia.org/wiki/File_URI_scheme]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** First Try&lt;/p&gt; &#xA;&lt;p&gt;To load Org-reveal, type &#34;M-x load-library&#34;, then type &#34;ox-reveal&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Now you can export this manual into Reveal.js presentation by typing &#34;C-c C-e R R&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Open the generated &#34;Readme.html&#34; in your browser and enjoy the cool slides.&lt;/p&gt; &#xA;&lt;p&gt;** The HLevel&lt;/p&gt; &#xA;&lt;p&gt;Org-reveal maps each heading and its contents to one Reveal.js slide. Since Reveal.js arranges slides into a 2-dimensional matrix, Org-reveal use a &lt;em&gt;HLevel&lt;/em&gt; value to decide whether to map headings to horizontal or vertical slides.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Headings of level less than or equal to &lt;em&gt;HLevel&lt;/em&gt; are mapped to horizontal slides.&lt;/li&gt; &#xA; &lt;li&gt;Headings with a deeper level are mapped to vertical slides.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;HLevel&#39;s default value is 1, means only level 1 headings are arranged horizontally. Deeper headings are mapped to vertical slides below their parent level 1 heading.&lt;/p&gt; &#xA;&lt;p&gt;*** HLevel&#39;s Effects on Slides Layout&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Assume we have a simple Org file as below:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,* H1 ,* H2 ,** H2.1 ,*** H2.1.1 ,* H3 #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If HLevel is 1, the default value, headings H2.1 and H2.1.1 will&#xA;be mapped to vertical slides below the slides of heading H2.&#xA;&#xA;[[./images/hlevel.png]]&#xA;&#xA;If HLevel is changed to 2, slides of heading H2.1 will be changed&#xA;to the main horizontal queue, and slides of heading H2.1.1 will be&#xA;a vertical slide below it.&#xA;&#xA;[[./images/hlevel2.png]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Configure HLevel&#39;s Value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Change variable =org-reveal-hlevel=&#39;s value to set HLevel globally.\\&#xA;  For example, add the following statement to your =.emacs= file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC lisp (setq org-reveal-hlevel 2) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Setting Org files local HLevel to option =REVEAL_HLEVEL=.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_HLEVEL: 2 #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Force Split&lt;/p&gt; &#xA;&lt;p&gt;If one heading has too many things to fit into one slide, you can split the contents into multiple vertical slides manually, by inserting&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+REVEAL: split #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;#+REVEAL: split&lt;/p&gt; &#xA;&lt;p&gt;Now a new slide begins after =#+REVEAL= keyword.&lt;/p&gt; &#xA;&lt;p&gt;To repeat the heading title on the split slide, please insert &lt;del&gt;#+REVEAL: split:t&lt;/del&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;** Select Theme&lt;/p&gt; &#xA;&lt;p&gt;Theme is set globally throughout the whole file by setting option =REVEAL_THEME=.&lt;/p&gt; &#xA;&lt;p&gt;Available themes can be found in &lt;del&gt;dist/theme&lt;/del&gt; in the reveal.js directory and can be select by giving the CSS file base name (without .css extension) to =REVEAL_THEME=.&lt;/p&gt; &#xA;&lt;p&gt;A custom theme CSS can be also set by giving its URL to &lt;del&gt;REVEAL_THEME&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Slide transition style is set by initialization option &lt;del&gt;transition&lt;/del&gt; and the transition speed is set by &lt;del&gt;transitionSpeed&lt;/del&gt; . Please refer to section [[Initialization options]] for details.&lt;/p&gt; &#xA;&lt;p&gt;Available transitions are: default|cube|page|concave|zoom|linear|fade|none.&lt;/p&gt; &#xA;&lt;p&gt;For an example of these settings, please check the heading part of this document. ** Set The Title Slide By default, Org-reveal generates a title slide displaying the title, the author, the Email, the date and the time-stamp of the Org document, controlled by Org&#39;s [[http://orgmode.org/org.html#Export-settings][export settings]].&lt;/p&gt; &#xA;&lt;p&gt;To avoid a title slide, please set variable &lt;del&gt;org-reveal-title-slide&lt;/del&gt; to &lt;del&gt;nil&lt;/del&gt;, or add &lt;del&gt;reveal_title_slide:nil&lt;/del&gt; to &lt;del&gt;#+OPTIONS:&lt;/del&gt; line.&lt;/p&gt; &#xA;&lt;p&gt;To restore the default title slide, please set variable &lt;del&gt;org-reveal-title-slide&lt;/del&gt; to &lt;del&gt;&#39;auto&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Customize the Title Slide&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;There are 3 ways to customize the title slide.&#xA;&#xA;1. Set variable ~org-reveal-title-slide~ to a string of HTML markups.&#xA;2. Set ~reveal_title_slide~ in the ~#+OPTIONS:~ line to a string of HTML markups.&#xA;3. Use one or more option lines ~#+REVEAL_TITLE_SLIDE:~ to specify&#xA;   the HTML of the title slide.&#xA;&#xA;The following escaping characters can be used to retrieve document&#xA;information:&#xA;| ~%t~ | Title     |&#xA;| ~%s~ | Subtitle  |&#xA;| ~%a~ | Author    |&#xA;| ~%e~ | Email     |&#xA;| ~%d~ | Date      |&#xA;| ~%%~ | Literal % |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Title Slide State&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Using this option allows to thoroughly change the style of the title slide:&#xA;&#xA;* =REVEAL_TITLE_SLIDE_STATE=: Style applied to the [[https://revealjs.com/markup/#viewport][viewport]] of title slide.&#xA;  See the [[https://revealjs.com/markup/#slide-states][reveal.js documentation]]&#xA;  for details.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Set Slide Background&lt;/p&gt; &#xA;&lt;p&gt;Slide background can be set to a color, an image, a repeating image array or an iframe by setting heading properties.&lt;/p&gt; &#xA;&lt;p&gt;*** Single Colored Background :PROPERTIES: :reveal_background: #543210 :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set property =reveal_background= to either an RGB color value, or any&#xA;supported CSS color format.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,*** Single Colored Background :PROPERTIES: :reveal_background: #123456 :END: #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Single Image Background :PROPERTIES: :reveal_background: ./images/whale.jpg :reveal_background_trans: slide :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set property =reveal_background= to an URL of background image.&#xA;Set property =reveal_background_trans= to =slide= to make background image&#xA;sliding rather than fading.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,*** Single Image Background :PROPERTIES: :reveal_background: ./images/whale.jpg :reveal_background_trans: slide :END: #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Repeating Image Background :PROPERTIES: :reveal_background: ./images/whale.jpg :reveal_background_size: 200px :reveal_background_repeat: repeat :reveal_background_opacity: 0.2 :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Resize background image by setting property&#xA;=reveal_background_size= to a number.&#xA;&#xA;Set property =reveal_background_repeat= to =repeat= to repeat&#xA;image on the background, =reveal_background_opacity= for the&#xA;background opacity, which is a value of 0-1.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,*** Repeating Image Background :PROPERTIES: :reveal_background: ./images/whale.jpg :reveal_background_size: 200px :reveal_background_repeat: repeat :reveal_background_opacity: 0.2 :END: #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Iframe background :PROPERTIES: :reveal_background_iframe: &lt;a href=&#34;https://hakim.se&#34;&gt;https://hakim.se&lt;/a&gt; :reveal_background: rgb(0,0,0) :reveal_background_opacity: 0.8 :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;When =iframe= is being used as slide background, the content of the slide will&#xA;be put inside a dedicated division. The other background options can be used to&#xA;configure this new division. The =reveal_background= supports both color and&#xA;image as a normal slide.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org :PROPERTIES: :reveal_background_iframe: &lt;a href=&#34;https://hakim.se&#34;&gt;https://hakim.se&lt;/a&gt; :reveal_background: rgb(0,0,0) :reveal_background_opacity: 0.8 :END: #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Title Slide Background Image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To set the title slide&#39;s background image, please specify the&#xA;following options:&#xA;&#xA;* =REVEAL_TITLE_SLIDE_BACKGROUND=: A URL to the background image.&#xA;* =REVEAL_TITLE_SLIDE_BACKGROUND_SIZE=: HTML size specification, e.g. ~200px~.&#xA;* =REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT=: Set to ~repeat~ to repeat the image.&#xA;* =REVEAL_TITLE_SLIDE_BACKGROUND_OPACITY=: Set the background opacity.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Table of Contents Slide Background Image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To set the (automatically generated) table of contents slide&#39;s background&#xA;image, please specify the following options:&#xA;&#xA;* =REVEAL_TOC_SLIDE_BACKGROUND=: A URL to the background image.&#xA;* =REVEAL_TOC_SLIDE_BACKGROUND_SIZE=: HTML size specification, e.g. ~200px~.&#xA;* =REVEAL_TOC_SLIDE_BACKGROUND_REPEAT=: Set to ~repeat~ to repeat the image.&#xA;* =REVEAL_TOC_SLIDE_BACKGROUND_OPACITY=: Set the background opacity.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Background for all slides&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can also configure the background for all slides in the presentation with:&#xA;&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND=&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE=&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND_POSITION=&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT=&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION=&#xA;&#xA;Refer to the [[https://github.com/yjwen/org-reveal#set-slide-background][Set slide background section]] for instructions on how to use each&#xA;parameter.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Slide Size&lt;/p&gt; &#xA;&lt;p&gt;Reveal.js scales slides to best fit the display resolution, but you can also specify the desired size by settings the option tags =reveal_width= and =reveal_height=.&lt;/p&gt; &#xA;&lt;p&gt;The scaling behavior can also be constrained by setting following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=#+REVEAL_MARGIN:= :: a float number, the factor of empty area surrounding slide contents.&lt;/li&gt; &#xA; &lt;li&gt;=#+REVEAL_MIN_SCALE:= :: a float number, the minimum scaling down ratio.&lt;/li&gt; &#xA; &lt;li&gt;=#+REVEAL_MAX_SCALE:= :: a float number, the maximum scaling up ratio.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Slide Numbering&lt;/p&gt; &#xA;&lt;p&gt;To enable slide numbers, please add the following Reveal.js initial option. #+BEGIN_SRC org ,#+REVEAL_INIT_OPTIONS: slideNumber:true #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Other possible choice for slide numbers are: | &#34;h.v&#34; | Horizontal . vertical slide number. The same as &lt;del&gt;true&lt;/del&gt; | | &#34;h/v&#34; | Horizontal / vertical slide number | | &#34;c&#34; | Flatten slide number | | &#34;c/t&#34; | Flatten slide number / total slides |&lt;/p&gt; &#xA;&lt;p&gt;** Slide Header/Footer Specify Slide header/footer globally by =#+REVEAL_SLIDE_HEADER:= and =#+REVEAL_SLIDE_FOOTER:=. The option content will be put into divisions of class =slide-header= and =slide-footer=, so you can control their appearance in custom CSS file(see [[https://github.com/rafadc/org-reveal#extra-stylesheets][Extra Stylesheets]]). By default header/footer content will only display on content slides. To show them also on the title and toc slide you can add &lt;del&gt;reveal_global_header:t&lt;/del&gt; and &lt;del&gt;reveal_global_footer:t&lt;/del&gt; to &lt;del&gt;#+OPTIONS:&lt;/del&gt; line.&lt;/p&gt; &#xA;&lt;p&gt;** Fragmented Contents&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Make contents fragmented (show up one-by-one) by setting option&#xA;=ATTR_REVEAL= with property &#34;:frag frag-style&#34;, as illustrated&#xA;below.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag roll-in Paragraphs can be fragmented.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag roll-in - Lists can - be fragmented.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag roll-in Pictures, tables and many other HTML elements can be fragmented.&lt;/p&gt; &#xA;&lt;p&gt;*** Fragment Styles Available fragment styles are: #+ATTR_REVEAL: :frag t * grow * shrink * roll-in * fade-out * highlight-red * highlight-green * highlight-blue * appear&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Setting ~:frag t~ will use Reveal.js default fragment style, which&#xA;can be overridden by local option ~#+REVEAL_DEFAULT_FRAG_STYLE~ or&#xA;global variable ~org-reveal-default-frag-style~.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Fragment Index Fragment sequence can be changed by assigning adding &lt;del&gt;:frag_idx&lt;/del&gt; property to each fragmented element.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag t :frag_idx 3 And, this paragraph shows at last.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag t :frag_idx 2 This paragraph shows secondly.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag t :frag_idx 1 This paragraph shows at first.&lt;/p&gt; &#xA;&lt;p&gt;*** List Fragments&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~#+ATTR_REVEAL: :frag frag-style~ above a list defines fragment&#xA;style for the list as a whole.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag grow 1. All items grow. 2. As a whole.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To define fragment styles for every list item, please enumerate&#xA;each item&#39;s style in a lisp list.&#xA;&#xA;~none~ in the style list will disable fragment for the&#xA;corresponding list item.&#xA;&#xA;Custom fragment sequence should also be enumerated for each list&#xA;item.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+REVEAL: split:t An example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+ATTR_REVEAL: :frag (grow shrink roll-in fade-out none) :frag_idx (4 3 2 1 -)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I will grow.&lt;/li&gt; &#xA; &lt;li&gt;I will shrink.&lt;/li&gt; &#xA; &lt;li&gt;I rolled in.&lt;/li&gt; &#xA; &lt;li&gt;I will fade out.&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t fragment. #+END_SRC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag (grow shrink roll-in fade-out none) :frag_idx (4 3 2 1 -)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I will grow.&lt;/li&gt; &#xA; &lt;li&gt;I will shrink.&lt;/li&gt; &#xA; &lt;li&gt;I rolled in.&lt;/li&gt; &#xA; &lt;li&gt;I will fade out.&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t fragment. #+REVEAL: split:t When there is &lt;del&gt;:frag_idx&lt;/del&gt; specified, insufficient fragment style list will be extended by its last element. So a &lt;del&gt;:frag (appear)&lt;/del&gt; assigns each item of a list the &lt;del&gt;appear&lt;/del&gt; fragment style. #+BEGIN_SRC org ,#+ATTR_REVEAL: :frag (appear)&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA; &lt;li&gt;I appear. #+END_SRC #+ATTR_REVEAL: :frag (appear)&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Initialization options Use &lt;del&gt;#+REVEAL_INIT_OPTIONS&lt;/del&gt; to give JS snippet for initialize reveal.js with different options. Check [[https://github.com/hakimel/reveal.js/#configuration][reveal.js document]] for supported options. Check the head part of this document for an example. ** Third-Party Plugins Reveal.js is also extensible through third-party plugins. Org-reveal provides a customizable variable &lt;del&gt;org-reveal-external-plugins&lt;/del&gt; for defining available third-party plugins. This variable is an associative list. The first element of each Assoc cell is a symbol same as the name of the plugin and the second is either a string specifying the location of the plugin script or a list of string in case of multiple scripts. Each script string can have ONE optional &lt;del&gt;%s&lt;/del&gt;, which will be replaced by &lt;code&gt;reveal-root&lt;/code&gt;. Code below is an example. #+begin_src lisp (setq org-reveal-external-plugins &#39;((RevealMenu . &#34;path/to/reveal.js-menu/menu.js&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+REVEAL: split:t&lt;/p&gt; &#xA;&lt;p&gt;Plugins can be specified in buffer by one or more &lt;del&gt;#+REVEAL_EXTERNAL_PLUGINS&lt;/del&gt; options. Each option can have one or more plugin specifications of the same format as in &lt;del&gt;org-reveal-external-plugins&lt;/del&gt;. Below is an example.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org ,#+REVEAL_EXTERNAL_PLUGINS: (plugin1 . &#34;ex/plugin1.js&#34;) (plugin2 . &#34;ex/plugin2.js&#34;) ,#+REVEAL_EXTERNAL_PLUGINS: (plugin3 &#34;ex/plugin3-1.js&#34; &#34;ex/plugin3-2.js&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;At most one &lt;del&gt;%s&lt;/del&gt; can be inserted into each plugin string, which will be replaced by Reveal.js root path.&lt;/p&gt; &#xA;&lt;p&gt;** Highlight Source Code&lt;/p&gt; &#xA;&lt;p&gt;There are two ways to highlight source code.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use your Emacs theme&lt;/li&gt; &#xA; &lt;li&gt;Use highlight.js&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To Use your Emacs theme, please make sure &lt;del&gt;htmlize.el&lt;/del&gt; is installed. Then no more setup is necessary.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example of highlighted lisp code from org-reveal. #+BEGIN_SRC lisp (defun org-reveal--read-file (file) &#34;Return the content of file&#34; (with-temp-buffer (insert-file-contents-literally file) (buffer-string))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;If you saw odd indentation, please set variable =org-html-indent= to =nil= and export again.&lt;/p&gt; &#xA;&lt;p&gt;*** Using highlight.js&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can also use [[https://highlightjs.org][highlight.js]], by adding ~highlight~ to the Reveal.js&#xA;plugin list.&#xA;#+BEGIN_SRC org&#xA;  ,#+REVEAL_PLUGINS: (highlight)&#xA;#+END_SRC&#xA;&#xA;The default highlighting theme is ~zenburn.css~ brought with&#xA;Reveal.js. To use other themes, please specify the CSS file name by&#xA;~#+REVEAL_HIGHLIGHT_CSS~ or the variable ~org-reveal-highlight-css~.&#xA;&#xA;The &#34;%r&#34; in the given CSS file name will be replaced by Reveal.js&#39;&#xA;URL.&#xA;&#xA;Reveal.js supports to enable line numbers and highlighting on&#xA;given line numbers. Please use ~:code_attribs~ to pass [[https://github.com/hakimel/reveal.js#line-numbers--highlights][the proper&#xA;attributes]] to the source code block . Below is an example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+ATTR_REVEAL: :code_attribs data-line-numbers=&#39;1|3&#39; ,#+BEGIN_SRC c++ int main() { cout &amp;lt;&amp;lt; &#34;Hello&#34; &amp;lt;&amp;lt; endl; } ,#+END_SRC #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Auto-Animate To enable [[https://revealjs.com/auto-animate/][auto-animate]], please add &lt;del&gt;data-auto-animate&lt;/del&gt; to heading&#39;s &lt;del&gt;REVEAL_EXTRA_ATTR&lt;/del&gt; property. To force Reveal.js to match source codes across slides, please add the same &lt;del&gt;:data_id foo&lt;/del&gt; to the &lt;del&gt;#+ADDR_REVEAL:&lt;/del&gt; tag of the source code blocks. Example as below. #+begin_src org ,* Heading 1 :PROPERTIES: :REVEAL_EXTRA_ATTR: data-auto-animate :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        ,#+ATTR_REVEAL: :data_id foo&#xA;        ,#+begin_src js&#xA;          let index = 1&#xA;        ,#+end_src&#xA;&#xA;&#xA; ,* Heading 2&#xA;   :PROPERTIES:&#xA;   :REVEAL_EXTRA_ATTR: data-auto-animate&#xA;   :END:&#xA;&#xA;&#xA;   ,#+ATTR_REVEAL: :data_id foo&#xA;   ,#+begin_src js&#xA;     let index = 1&#xA;     let value = 2&#xA;   ,#+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Editable Source Code It is now possible to embed code blocks in a codemirror instance in order to edit code during a presentation. At present, this capacity is turned on or off at time export using these defcustoms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-reveal-klipsify-src&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-reveal-klipse-css&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-reveal-klipse-js&lt;/del&gt; This feature is turned off by default and needs to be switched on with &lt;del&gt;org-reveal-klipsify-src&lt;/del&gt;. At present code editing is supported in javascript, clojure, php, ruby, scheme, and python only.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** MathJax :PROPERTIES: :CUSTOM_ID: my-heading :END:&lt;/p&gt; &#xA;&lt;p&gt;${n! \over k!(n-k)!} = {n \choose k}$&lt;/p&gt; &#xA;&lt;p&gt;LateX equation are rendered in native HTML5 contents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT&lt;/em&gt;: Displaying equations requires internet connection to [[http://mathjax.org/][mathjax.org]] or local MathJax installation. For local MathJax installation, set option =REVEAL_MATHJAX_URL= to the URL pointing to the local MathJax location.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Option &lt;del&gt;reveal_mathjax&lt;/del&gt; is obsolete now. Org-reveal exports necessary MathJax configurations when there is Latex equation found.&lt;/p&gt; &#xA;&lt;p&gt;** Preamble and Postamble&lt;/p&gt; &#xA;&lt;p&gt;You can define preamble and postamble contents which will not be shown as slides, but will be exported into the body part of the generated HTML file, at just before and after the slide contents.&lt;/p&gt; &#xA;&lt;p&gt;Change preamble and postamble contents globally by setting variable =org-reveal-preamble= and =org-reveal-postamble=.&lt;/p&gt; &#xA;&lt;p&gt;Change preamble and postamble contents locally by setting options =REVEAL_PREAMBLE= and =REVEAL_POSTAMBLE=, as illustrated at the heading part of this document.&lt;/p&gt; &#xA;&lt;p&gt;To add custom contents into HTML == parts, set contents to variable =org-reveal-head-preamble= or option =REVEAL_HEAD_PREAMBLE=.&lt;/p&gt; &#xA;&lt;p&gt;*** Generating Pre/Postamble by Emacs-Lisp Functions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If the contents of pre/postamble is the name of an evaluated&#xA;Emacs-Lisp function, which must accept an argument of Org-mode&#xA;info and return a string, the returned string will be taken&#xA;as pre/postamble contents.&#xA;&#xA;So you can embed the Emacs-Lisp function as an Org-Babel source&#xA;block and mark it to be evaluated when exporting the document.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Prologue and Epilogue&lt;/p&gt; &#xA;&lt;p&gt;Similar to preamble and postamble, arbitrary HTML contents can be inserted between the opening &lt;del&gt;&lt;/del&gt;&lt;/p&gt;&#xA;&lt;div reveal&gt;&#xA;  and &#xA; &lt;del&gt;&#xA;  &lt;div slides&gt;&#xA;    tags, called prologue, and their closing counterparts, called epilogue.&#xA;   &lt;p&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Specify those contents by options &lt;del&gt;REVEAL_PROLOGUE&lt;/del&gt; and &lt;del&gt;REVEAL_EPILOGUE&lt;/del&gt; for one buffer, or by variable &lt;del&gt;org-reveal-prologue&lt;/del&gt; and &lt;del&gt;org-reveal-epilogue&lt;/del&gt; for global setup.&lt;/p&gt; &#xA;   &lt;p&gt;** Raw HTML in Slides&lt;/p&gt; &#xA;   &lt;p&gt;Besides the Org contents, you can embed raw HTML contents into slides by placing a =#+REVEAL_HTML= keyword.&lt;/p&gt; &#xA;   &lt;p&gt;The famous cat jump fail: #+REVEAL_HTML: &amp;lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Awf45u6zrP0&#34; frameborder=&#34;0&#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt; ** Speaker Notes Reveal.js supports speaker notes, which are displayed in a separate browser window. Pressing &#39;s&#39; on slide&#39;s windows will pop up a window displaying the current slide, the next slide and the speaker notes on the current slide.&lt;/p&gt; &#xA;   &lt;p&gt;Org-reveal recognize texts between =#+BEGIN_NOTES= and =#+END_NOTES= as speaker notes. See the example below.&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,* Heading 1 Some contents. ,#+BEGIN_NOTES Enter speaker notes here. ,#+END_NOTES #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;To skip exporting speaker notes, please set variable &lt;del&gt;org-reveal-ignore-speaker-notes&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;.&lt;/p&gt; &#xA;   &lt;p&gt;#+REVEAL: split Speaker notes requires the &lt;del&gt;notes&lt;/del&gt; plug-in. If you changed default plug-in setting by specifying =#+REVEAL_PLUGINS= or by setting variable =org-reveal-plugins=, please make sure &lt;del&gt;notes&lt;/del&gt; is in the plug-in list to enable speaker notes.&lt;/p&gt; &#xA;   &lt;p&gt;#+REVEAL: split&lt;/p&gt; &#xA;   &lt;p&gt;Due to a bug in Reveal.js, sometimes the speaker notes window shows only blank screens. A workaround to this issue is to put the presentation HTML file into the Reveal.js root directory and reopen it in the browser.&lt;/p&gt; &#xA;   &lt;p&gt;** Multiplexing Reveal.js supports a [[https://github.com/reveal/multiplex#multiplex-plugin][multiplexing plugin]], which allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at [[https://reveal-multiplex.glitch.me/]].&lt;/p&gt; &#xA;   &lt;p&gt;To use multiplexing, first prepare a Socket.io server by the instruction [[https://github.com/reveal/multiplex#socketio-server][here]]. Then include the following options in the org file. Contents in &lt;del&gt;[]&lt;/del&gt; are commentary notes, not part of the options. #+BEGIN_SRC org ,#+REVEAL_MULTIPLEX_ID: [Obtained from the socket.io server. ] ,#+REVEAL_MULTIPLEX_SECRET: [Obtained from socket.io server. Gives the master control of the presentation.] ,#+REVEAL_MULTIPLEX_URL: &lt;a href=&#34;https://reveal-multiplex.glitch.me&#34;&gt;https://reveal-multiplex.glitch.me&lt;/a&gt; [Location of socket.io server] #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;If your are using Reveal.js 3.x, an extra option is necessary for Socket.io scripts. #+BEGIN_SRC org ,#+REVEAL_MULTIPLEX_SOCKETIO_URL: &lt;a href=&#34;http://cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.10/socket.io.min.js&#34;&gt;http://cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.10/socket.io.min.js&lt;/a&gt; #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;You must generate unique values for the =REVEAL_MULTIPLEX_ID= and =REVEAL_MULTIPLEX_SECRET= options, obtaining these from the socket.io server you are using.&lt;/p&gt; &#xA;   &lt;p&gt;If you include these options in your .org file, reveal-org will enable your .html file as the master file for multiplexing and will generate a file named in the form =[filename]_client.html= in the same directory as the client .html file. Provide your audience with a link to the client file to allow them to track your presentation on their own device.&lt;/p&gt; &#xA;   &lt;p&gt;** Extra Stylesheets and Script Sources&lt;/p&gt; &#xA;   &lt;p&gt;Set =REVEAL_EXTRA_CSS= to a stylesheet file path to load extra custom styles after loading a theme.&lt;/p&gt; &#xA;   &lt;p&gt;Set =REVEAL_EXTRA_SCRIPT_SRC= to script file path to load extra script sources. In case of multiple script files, specify each of them by one =REVEAL_EXTRA_SCRIPT_SRC= line. The specified scripts is loaded after Reveal.js initialization.&lt;/p&gt; &#xA;   &lt;p&gt;Scripts that must be loaded before Reveal.js initialization can be set by one or more =REVEAL_EXTRA_SCRIPT_BEFORE_SRC= lines.&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_EXTRA_CSS: url-to-custom-stylesheet.css ,#+REVEAL_EXTRA_SCRIPT_SRC: url-to-custom-script #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;Same setup can be done globally by customize variables &lt;del&gt;org-reveal-extra-css&lt;/del&gt;, &lt;del&gt;org-reveal-extra-script-src&lt;/del&gt; and &lt;del&gt;org-reveal-extra-script-before-src&lt;/del&gt;. In case of multiple script files, organize the script file names as a list.&lt;/p&gt; &#xA;   &lt;p&gt;** Select Built-In Scripts&lt;/p&gt; &#xA;   &lt;p&gt;Set option =REVEAL_PLUGINS= or variable =org-reveal-plugins= to a lisp list to select built-in scripts.&lt;/p&gt; &#xA;   &lt;p&gt;Available built-in scripts are: classList/markdown/highlight/zoom/notes/search/remotes.&lt;/p&gt; &#xA;   &lt;p&gt;Default built-ins are: classList/markdown/highlight/zoom/notes/multiplex.&lt;/p&gt; &#xA;   &lt;p&gt;The following examples select /markdown/ and /highlight/ only. #+BEGIN_SRC org ,#+REVEAL_PLUGINS: (markdown highlight) #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Extra Dependent Script&lt;/p&gt; &#xA;   &lt;p&gt;Set =REVEAL_EXTRA_JS= to the url of extra reveal.js dependent script if necessary. #+BEGIN_SRC org ,#+REVEAL_EXTRA_JS: url-to-custom-script.js #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Extra Slide Attribute&lt;/p&gt; &#xA;   &lt;p&gt;Set property =reveal_extra_attr= to headings to add any necessary attributes to slides.&lt;/p&gt; &#xA;   &lt;p&gt;** Export into Single File&lt;/p&gt; &#xA;   &lt;p&gt;By setting option =reveal_single_file= to &lt;del&gt;t&lt;/del&gt;, images and necessary Reveal.js scripts will be embedded into the exported HTML file, to make a portable HTML. Please note that remote images will /not/ be included in the single file, so presentations with remote images will still require an Internet connection.&lt;/p&gt; &#xA;   &lt;p&gt;Attention: This needs locally available reveal.js files!&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,#+OPTIONS: reveal_single_file:t #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;When exporting into single file, functions provided by Reveal.js libraries will be disabled due to limitation, including PDF export, Markdown support, zooming, speaker notes and remote control.&lt;/p&gt; &#xA;   &lt;p&gt;Code highlight by highlight.js is also disabled. But &lt;em&gt;code highlight by Emacs is not effected.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;p&gt;** Export Current Subtree&lt;/p&gt; &#xA;   &lt;p&gt;Use menu entry &#34; C-c C-e R S&#34; to export only current subtree, without the title slide and the table of content, for a quick preview of your current edition.&lt;/p&gt; &#xA;   &lt;p&gt;** Skip headings Any heading with tag &lt;del&gt;:noexport:&lt;/del&gt; will be discarded when exporting to all backends. If you want a heading being discard when exporting to Reveal.js only, please use tag &lt;del&gt;:noexport_reveal:&lt;/del&gt;.&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Tips&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;p&gt;** Managing Table of Contents&lt;/p&gt; &#xA;   &lt;p&gt;It is well often the automatic &#34;Table of Contents&#34; is too large to fit into one slide. One workaround is to disable the automatic TOC and generate one manually, which can be split into multiple slides. Org-reveal provides a helper function to insert a TOC to the current org buffer. Type &lt;del&gt;M-x org-reveal-manual-toc&lt;/del&gt; to invoke it.&lt;/p&gt; &#xA;   &lt;p&gt;To disable the automatic TOC, add =toc:nil= to =#+OPTIONS= #+BEGIN_SRC org ,#+OPTIONS: toc:nil #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Internal Links&lt;/p&gt; &#xA;   &lt;p&gt;Reveal.js supports only jump between slides, but not between elements on slides. Thus, we can only link to headlines in an Org document.&lt;/p&gt; &#xA;   &lt;p&gt;You can create links pointing to a headline&#39;s text, or its custom-id, as the examples below:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;[[Tips]].&lt;/li&gt; &#xA;    &lt;li&gt;[[#my-heading][Heading]] with a =CUSTOM_ID= property.&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;p&gt;** Custom JS&lt;/p&gt; &#xA;   &lt;p&gt;To pass custom JS code to &lt;del&gt;Reveal.initialize&lt;/del&gt;, state the code by &lt;del&gt;#+REVEAL_EXTRA_INITIAL_JS&lt;/del&gt; (multiple statements are concatenated) or by custom variable &lt;del&gt;org-reveal-extra-initial-js&lt;/del&gt;. The first appearance of &lt;del&gt;%s&lt;/del&gt; in the script will be replaced by Reveal.js root path.&lt;/p&gt; &#xA;   &lt;p&gt;If you want to add extra code outside of the &lt;del&gt;Reveal.initialize&lt;/del&gt; block, then &lt;del&gt;#+REVEAL_EXTRA_SCRIPT&lt;/del&gt; can be used. The code will be inserted after closing the &lt;del&gt;Reveal.initialize&lt;/del&gt; statement, but before the closing &lt;del&gt;&amp;lt;/script&amp;gt;&lt;/del&gt; tag.&lt;/p&gt; &#xA;   &lt;p&gt;** Executable Source Blocks To allow live execution of code in some languages, enable the klipse plugin by setting &lt;del&gt;org-reveal-klipsify-src&lt;/del&gt; to non-nil. Src blocks with the languages &lt;del&gt;js&lt;/del&gt;, &lt;del&gt;clojure&lt;/del&gt;, &lt;del&gt;html&lt;/del&gt;, &lt;del&gt;python&lt;/del&gt;, &lt;del&gt;ruby&lt;/del&gt;, &lt;del&gt;scheme&lt;/del&gt;, &lt;del&gt;php&lt;/del&gt; will be executed with output shown in a console-like environment. See the source code of &lt;del&gt;org-reveal-src-block&lt;/del&gt; for more details.&lt;/p&gt; &#xA;   &lt;p&gt;*** HTML Src Block #+BEGIN_SRC html&lt;/p&gt; &#xA;   &lt;h1 class=&#34;whatever&#34;&gt;hello, what&#39;s your name&lt;/h1&gt; #+END_SRC &#xA;   &lt;p&gt;*** Javascript Src Block #+BEGIN_SRC js console.log(&#34;success&#34;); var x=&#39;string using single quote&#39;; x #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;*** Perl Src Block (not klipsified) #+BEGIN_SRC perl I don&#39;t know perl! #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Properties for Sub-headings&lt;/p&gt; &#xA;   &lt;p&gt;If you want to have multiple reveal presentations in a single Org-mode file, you might want to switch from file-based properties like:&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_HLEVEL: 2 ,#+REVEAL_INIT_OPTIONS: transition: &#39;cube&#39; ,#+REVEAL_THEME: moon #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;to properties of sub-headings like:&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org :PROPERTIES: :EXPORT_REVEAL_HLEVEL: 2 :EXPORT_INIT_OPTIONS: transition: &#39;cube&#39; :EXPORT_REVEAL_THEME: moon :END: #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;This way, each org-reveal presentation can have its own settings. An example heading with corresponding settings would look like:&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,* My org-reveal presentation among many within the same Org-mode file :PROPERTIES: :reveal_overview: t :EXPORT_AUTHOR: Test Author :EXPORT_DATE: 2018-01-01 :EXPORT_TITLE: My Title :EXPORT_EMAIL: &lt;a href=&#34;mailto:Test@example.com&#34;&gt;Test@example.com&lt;/a&gt; :EXPORT_OPTIONS: num:nil toc:nil reveal_keyboard:t reveal_overview:t :EXPORT_REVEAL_HLEVEL: 3 :EXPORT_REVEAL_MARGIN: 200 :END: #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Customize iframe background slide :PROPERTIES: :reveal_background_iframe: &lt;a href=&#34;https://hakim.se&#34;&gt;https://hakim.se&lt;/a&gt; :reveal_background: rgb(0,0,0) :reveal_background_opacity: 0.8 :reveal_background_position: absolute :reveal_extra_attr: height: 200px; bottom: -700px; border-radius: 10px; padding: 20px :END: #+REVEAL_HTML: &#xA;    &lt;smaller&gt;&#xA;      #+BEGIN_SRC org :reveal_background_position: absolute :reveal_extra_attr: height: 200px; bottom: -700px; border-radius: 10px; padding: 20px #+END_SRC #+REVEAL_HTML: &#xA;    &lt;/smaller&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Thanks&lt;/p&gt; &lt;p&gt;Courtesy to:&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;p&gt;#+ATTR_REVEAL: :frag roll-in The powerful Org-mode, #+ATTR_REVEAL: :frag roll-in the impressive Reveal.js #+ATTR_REVEAL: :frag roll-in and the precise MathJax&lt;/p&gt; &#xA;  &lt;/div&gt;&lt;/del&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>joddie/pcre2el</title>
    <updated>2023-09-17T01:48:57Z</updated>
    <id>tag:github.com,2023-09-17:/joddie/pcre2el</id>
    <link href="https://github.com/joddie/pcre2el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;convert between PCRE, Emacs and rx regexp syntax&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;pcre2el: convert between PCRE, Emacs and rx regexp syntax&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Overview =pcre2el= or =rxt= (RegeXp Translator or RegeXp Tools) is a utility for working with regular expressions in Emacs, based on a recursive-descent parser for regexp syntax. In addition to converting (a subset of) PCRE syntax into its Emacs equivalent, it can do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;convert Emacs syntax to PCRE&lt;/li&gt; &#xA; &lt;li&gt;convert either syntax to =rx=, an S-expression based regexp syntax&lt;/li&gt; &#xA; &lt;li&gt;untangle complex regexps by showing the parse tree in =rx= form and highlighting the corresponding chunks of code&lt;/li&gt; &#xA; &lt;li&gt;show the complete list of strings (productions) matching a regexp, provided the list is finite&lt;/li&gt; &#xA; &lt;li&gt;provide live font-locking of regexp syntax (so far only for Elisp buffers -- other modes on the TODO list)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Usage Enable =rxt-mode= or its global equivalent =rxt-global-mode= to get the default key-bindings. There are three sets of commands: commands that take a PCRE regexp, commands which take an Emacs regexp, and commands that try to do the right thing based on the current mode. Currently, this means Emacs syntax in =emacs-lisp-mode= and =lisp-interaction-mode=, and PCRE syntax everywhere else.&lt;/p&gt; &#xA;&lt;p&gt;The default key bindings all begin with =C-c /= and have a mnemonic structure: =C-c / &lt;source&gt; &#xA; &lt;target&gt;&#xA;  =, or just =C-c / &#xA;  &lt;target&gt;&#xA;   = for the &#34;do what I mean&#34; commands. The complete list of key bindings is given here and explained in more detail below:&#xA;  &lt;/target&gt;&#xA; &lt;/target&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;Do-what-I-mean&#34; commands:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=C-c / /= :: =rxt-explain=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / c= :: =rxt-convert-syntax=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / x= :: =rxt-convert-to-rx=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / â€²= :: =rxt-convert-to-strings=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Commands that work on a PCRE regexp:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=C-c / p e= :: =rxt-pcre-to-elisp=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / %= :: =pcre-query-replace-regexp=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / p x= :: =rxt-pcre-to-rx=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / p s= :: =rxt-pcre-to-sre=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / p â€²= :: =rxt-pcre-to-strings=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / p /= :: =rxt-explain-pcre=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Commands that work on an Emacs regexp:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=C-c / e /= :: =rxt-explain-elisp=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / e p= :: =rxt-elisp-to-pcre=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / e x= :: =rxt-elisp-to-rx=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / e s= :: =rxt-elisp-to-sre=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / e â€²= :: =rxt-elisp-to-strings=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / e t= :: =rxt-toggle-elisp-rx=&lt;/li&gt; &#xA;   &lt;li&gt;=C-c / t= :: =rxt-toggle-elisp-rx=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Interactive input and output When used interactively, the conversion commands can read a regexp either from the current buffer or from the minibuffer. The output is displayed in the minibuffer and copied to the kill-ring.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- When called with a prefix argument (=C-u=), they read a regular&#xA;  expression from the minibuffer literally, without further&#xA;  processing -- meaning there&#39;s no need to double the backslashes if&#xA;  it&#39;s an Emacs regexp.  This is the same way commands like&#xA;  =query-replace-regexp= read input.&#xA;&#xA;- When the region is active, they use they the region contents,&#xA;  again literally (without any translation of string syntax).&#xA;&#xA;- With neither a prefix arg nor an active region, the behavior&#xA;  depends on whether the command expects an Emacs regexp or&#xA;  a PCRE one.&#xA;&#xA;  Commands that take an Emacs regexp behave like =C-x C-e=: they&#xA;  evaluate the sexp before point (which could be simply a string&#xA;  literal) and use its value. This is designed for use in Elisp&#xA;  buffers. As a special case, if point is *inside* a string, it&#39;s&#xA;  first moved to the string end, so in practice they should work&#xA;  as long as point is somewhere within the regexp literal.&#xA;&#xA;  Commands that take a PCRE regexp try to read a Perl-style&#xA;  delimited regex literal *after* point in the current buffer,&#xA;  including its flags. For example, putting point before the =m=&#xA;  in the following example and doing =C-c / p e=&#xA;  (=rxt-pcre-to-elisp=) displays =\(?:bar\|foo\)=, correctly&#xA;  stripping out the whitespace and comment:&#xA;&#xA;  : $x =~ m/  foo   |  (?# comment) bar /x&#xA;&#xA;  The PCRE reader currently only works with =/ ... /= delimiters. It&#xA;  will ignore any preceding =m=, =s=, or =qr= operator, as well as&#xA;  the replacement part of an =s= construction.&#xA;&#xA;  Readers for other PCRE-using languages are on the TODO list.&#xA;&#xA;The translation functions display their result in the minibuffer&#xA;and copy it to the kill ring. When translating something into&#xA;Elisp syntax, you might need to use the result either literally&#xA;(e.g. for interactive input to a command like&#xA;=query-replace-regexp=), or as a string to paste into Lisp code.&#xA;To allow both uses, =rxt-pcre-to-elisp= copies both versions&#xA;successively to the kill-ring. The literal regexp without string&#xA;quoting is the top element of the kill-ring, while the Lisp string&#xA;is the second-from-top. You can paste the literal regexp somewhere&#xA;by doing =C-y=, or the Lisp string by =C-y M-y=.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Syntax conversion commands =rxt-convert-syntax= (=C-c / c=) converts between Emacs and PCRE syntax, depending on the major mode in effect when called. Alternatively, you can specify the conversion direction explicitly by using either =rxt-pcre-to-elisp= (=C-c / p e=) or =rxt-elisp-to-pcre= (=C-c / e p=).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Similarly, =rxt-convert-to-rx= (=C-c / x=) converts either kind of&#xA;syntax to =rx= form, while =rxt-convert-pcre-to-rx= (=C-c / p x=)&#xA;and =rxt-convert-elisp-to-rx= (=C-c / e x=) convert to =rx= from a&#xA;specified source type.&#xA;&#xA;In Elisp buffers, you can use =rxt-toggle-elisp-rx= (=C-c / t= or&#xA;=C-c / e t=) to switch the regexp at point back and forth between&#xA;string and =rx= syntax. Point should either be within an =rx= or&#xA;=rx-to-string= form or a string literal for this to work.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** PCRE mode (experimental) If you want to use emulated PCRE regexp syntax in all Emacs commands, try =pcre-mode=, which uses Emacs&#39;s advice system to make all commands that read regexps using the minibuffer use emulated PCRE syntax. It should also work with Isearch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This feature is still fairly experimental.  It may fail to work or&#xA;do the wrong thing with certain commands.  Please report bugs.&#xA;&#xA;=pcre-query-replace-regexp= was originally defined to do&#xA;query-replace using emulated PCRE regexps, and is now made&#xA;somewhat obsolete by =pcre-mode=.  It is bound to =C-c / %= by&#xA;default, by analogy with =M-%=.  Put the following in your&#xA;=.emacs= if you want to use PCRE-style query replacement&#xA;everywhere:&#xA;&#xA;: (global-set-key [(meta %)] &#39;pcre-query-replace-regexp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Explain regexps When syntax-highlighting isn&#39;t enough to untangle some gnarly regexp you find in the wild, try the &#39;explain&#39; commands: =rxt-explain= (=C-c / /=), =rxt-explain-pcre= (=C-c / p=) and =rxt-explain-elisp= (=C-c / e=). These display the original regexp along with its pretty-printed =rx= equivalent in a new buffer. Moving point around either in the original regexp or the =rx= translation highlights corresponding pieces of syntax, which can aid in seeing things like the scope of quantifiers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;I call them &#34;explain&#34; commands because the =rx= form is close to a&#xA;plain syntax tree, and this plus the wordiness of the operators&#xA;usually helps to clarify what is going on.  People who dislike&#xA;Lisp syntax might disagree with this assessment.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Generate all matching strings (productions) Occasionally you come across a regexp which is designed to match a finite set of strings, e.g. a set of keywords, and it would be useful to recover the original set. (In Emacs you can generate such regexps using =regexp-opt=). The commands =rxt-convert-to-strings= (=C-c / â€²=), =rxt-pcre-to-strings= (=C-c / p â€²=) or =rxt-elisp-to-strings= (=C-c / e â€²=) accomplish this by generating all the matching strings (&#34;productions&#34;) of a regexp. (The productions are copied to the kill ring as a Lisp list).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;An example in Lisp code:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;: (regexp-opt &#39;(&#34;cat&#34; &#34;caterpillar&#34; &#34;catatonic&#34;)) : ;; =&amp;gt; &#34;\(?:cat\(?:atonic\|erpillar\)?\)&#34; : (rxt-elisp-to-strings &#34;\(?:cat\(?:atonic\|erpillar\)?\)&#34;) : ;; =&amp;gt; &#39;(&#34;cat&#34; &#34;caterpillar&#34; &#34;catatonic&#34;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;For obvious reasons, these commands only work with regexps that&#xA;don&#39;t include any unbounded quantifiers like =+= or =*=. They also&#xA;can&#39;t enumerate all the characters that match a named character&#xA;class like =[[:alnum:]]=. In either case they will give a (hopefully&#xA;meaningful) error message. Due to the nature of permutations, it&#39;s&#xA;still possible for a finite regexp to generate a huge number of&#xA;productions, which will eat memory and slow down your Emacs. Be&#xA;ready with =C-g= if necessary.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** RE-Builder support The Emacs RE-Builder is a useful visual tool which allows using several different built-in syntaxes via =reb-change-syntax= (=C-c TAB=). It supports Elisp read and literal syntax and =rx=, but it can only convert from the symbolic forms to Elisp, not the other way. This package hacks the RE-Builder to also work with emulated PCRE syntax, and to convert transparently between Elisp, PCRE and rx syntaxes. PCRE mode reads a delimited Perl-like literal of the form =/ ... /=, and it should correctly support using the =x= and =s= flags.&lt;/p&gt; &#xA;&lt;p&gt;*** Use from Lisp&lt;/p&gt; &#xA;&lt;p&gt;Example of using the conversion functions: : (rxt-pcre-to-elisp &#34;(abc|def)\w+\d+&#34;) : ;; =&amp;gt; &#34;\(\(?:abc\|def\)\)[_[:alnum:]]+[[:digit:]]+&#34;&lt;/p&gt; &#xA;&lt;p&gt;All the conversion functions take a single string argument, the regexp to translate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=rxt-pcre-to-elisp=&lt;/li&gt; &#xA; &lt;li&gt;=rxt-pcre-to-rx=&lt;/li&gt; &#xA; &lt;li&gt;=rxt-pcre-to-sre=&lt;/li&gt; &#xA; &lt;li&gt;=rxt-pcre-to-strings=&lt;/li&gt; &#xA; &lt;li&gt;=rxt-elisp-to-pcre=&lt;/li&gt; &#xA; &lt;li&gt;=rxt-elisp-to-rx=&lt;/li&gt; &#xA; &lt;li&gt;=rxt-elisp-to-sre=&lt;/li&gt; &#xA; &lt;li&gt;=rxt-elisp-to-strings=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Bugs and Limitations *** Limitations on PCRE syntax PCRE has a complicated syntax and semantics, only some of which can be translated into Elisp. The following subset of PCRE should be correctly parsed and converted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- parenthesis grouping =( .. )=, including shy matches =(?: ... )=&#xA;- backreferences (various syntaxes), but only up to 9 per expression    &#xA;- alternation =|=&#xA;- greedy and non-greedy quantifiers =*=, =*?=, =+=, =+?=, =?= and =??=&#xA;  (all of which are the same in Elisp as in PCRE)&#xA;- numerical quantifiers ={M,N}=&#xA;- beginning/end of string =\A=, =\Z=&#xA;- string quoting =\Q .. \E=&#xA;- word boundaries =\b=, =\B= (these are the same in Elisp)&#xA;- single character escapes =\a=, =\c=, =\e=, =\f=, =\n=, =\r=,&#xA;  =\t=, =\x=, and =\octal digits= (but see below about non-ASCII&#xA;  characters)&#xA;- character classes =[...]= including Posix escapes&#xA;- character classes =\d=, =\D=, =\h=, =\H=, =\s=, =\S=, =\v=, =\V=&#xA;  both within character class brackets and outside&#xA;- word and non-word characters =\w= and =\W=&#xA;  (Emacs has the same syntax, but its meaning is different)&#xA;- =s= (single line) and =x= (extended syntax) flags, in regexp&#xA;  literals, or set within the expression via =(?xs-xs)= or =(?xs-xs:&#xA;  .... )= syntax&#xA;- comments =(?# ... )=&#xA;&#xA;Most of the more esoteric PCRE features can&#39;t really be supported&#xA;by simple translation to Elisp regexps. These include the&#xA;different lookaround assertions, conditionals, and the&#xA;&#34;backtracking control verbs&#34; =(* ...)= . OTOH, there are a few&#xA;other syntaxes which are currently unsupported and possibly could be:&#xA;&#xA;- =\L=, =\U=, =\l=, =\u= case modifiers&#xA;- =\g{...}= backreferences&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Other limitations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The order of alternatives and characters in char classes sometimes gets shifted around, which is annoying.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Although the string parser tries to interpret PCRE&#39;s octal and hexadecimal escapes correctly, there are problems with matching 8-bit characters that I don&#39;t use enough to properly understand, e.g.: : (string-match-p (rxt-pcre-to-elisp &#34;\377&#34;) &#34;\377&#34;) =&amp;gt; nil A fix for this would be welcome.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most of PCRE&#39;s rules for how =^=, =\A=, =$= and =\Z= interact with newlines are not implemented, since they seem less relevant to Emacs&#39;s buffer-oriented rather than line-oriented model. However, the different meanings of the =.= metacharacter &lt;em&gt;are&lt;/em&gt; implemented (it matches newlines with the =/s= flag, but not otherwise).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Not currently namespace clean (both =rxt-= and a couple of =pcre-= functions).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** TODO:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Python-specific extensions to PCRE?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Language-specific stuff to enable regexp font-locking and explaining in different modes. Each language would need two functions, which could be kept in an alist:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;A function to read PCRE regexps, taking the string syntax into account. E.g., Python has single-quoted, double-quoted and raw strings, each with different quoting rules. PHP has the kind of belt-and-suspenders solution you would expect: regexps are in strings, /and/ you have to include the =/ ... /= delimiters! Duh.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;A function to copy faces back from the parsed string to the original buffer text. This has to recognize any escape sequences so they can be treated as a single character.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Internal details Internally, =rxt= defines an abstract syntax tree data type for regular expressions, parsers for Elisp and PCRE syntax, and &#34;unparsers&#34; from to PCRE, rx, and SRE syntax. Converting from a parsed syntax tree to Elisp syntax is a two-step process: first convert to =rx= form, then let =rx-to-string= do the heavy lifting. See =rxt-parse-re=, =rxt-adt-&amp;gt;pcre=, =rxt-adt-&amp;gt;rx=, and =rxt-adt-&amp;gt;sre=, and the section beginning &#34;Regexp ADT&#34; in pcre2el.el for details.&lt;/p&gt; &#xA;&lt;p&gt;This code is partially based on Olin Shivers&#39; reference SRE implementation in scsh, although it is simplified in some respects and extended in others. See =scsh/re.scm=, =scsh/spencer.scm= and =scsh/posixstr.scm= in the =scsh= source tree for details. In particular, =pcre2el= steals the idea of an abstract data type for regular expressions and the general structure of the string regexp parser and unparser. The data types for character sets are extended in order to support symbolic translation between character set expressions without assuming a small (Latin1) character set. The string parser is also extended to parse a bigger variety of constructions, including POSIX character classes and various Emacs and Perl regexp assertions. Otherwise, only the bare minimum of scsh&#39;s abstract data type is implemented.&lt;/p&gt; &#xA;&lt;p&gt;** Soapbox Emacs regexps have their annoyances, but it is worth getting used to them. The Emacs assertions for word boundaries, symbol boundaries, and syntax classes depending on the syntax of the mode in effect are especially useful. (PCRE has =\b= for word-boundary, but AFAIK it doesn&#39;t have separate assertions for beginning-of-word and end-of-word). Other things that might be done with huge regexps in other languages can be expressed more understandably in Elisp using combinations of `save-excursion&#39; with the various searches (regexp, literal, skip-syntax-forward, sexp-movement functions, etc.).&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s not much point in using =rxt-pcre-to-elisp= to use PCRE notation in a Lisp program you&#39;re going to maintain, since you still have to double all the backslashes. Better to just use the converted result (or better yet, the =rx= form).&lt;/p&gt; &#xA;&lt;p&gt;** History and acknowledgments This was originally created out of an answer to a stackoverflow question: &lt;a href=&#34;http://stackoverflow.com/questions/9118183/elisp-mechanism-for-converting-pcre-regexps-to-emacs-regexps&#34;&gt;http://stackoverflow.com/questions/9118183/elisp-mechanism-for-converting-pcre-regexps-to-emacs-regexps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wes Hardaker (hardaker) for the initial inspiration and subsequent hacking&lt;/li&gt; &#xA; &lt;li&gt;priyadarshan for requesting RX/SRE support&lt;/li&gt; &#xA; &lt;li&gt;Daniel Colascione (dcolascione) for a patch to support Emacs&#39;s explicitly-numbered match groups&lt;/li&gt; &#xA; &lt;li&gt;Aaron Meurer (asmeurer) for requesting Isearch support&lt;/li&gt; &#xA; &lt;li&gt;Philippe Vaucher (silex) for a patch to support =ibuffer-do-replace-regexp= in PCRE mode&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>