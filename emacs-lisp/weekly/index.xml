<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-15T01:39:33Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stevemolitor/claude-code.el</title>
    <updated>2025-06-15T01:39:33Z</updated>
    <id>tag:github.com,2025-06-15:/stevemolitor/claude-code.el</id>
    <link href="https://github.com/stevemolitor/claude-code.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Claude Code Emacs integration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;claude-code.el&lt;/h1&gt; &#xA;&lt;p&gt;An Emacs interface for &lt;a href=&#34;https://github.com/anthropics/claude-code&#34;&gt;Claude Code CLI&lt;/a&gt;, providing integration between Emacs and Claude AI for coding assistance.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start, stop, and toggle Claude Code sessions directly from Emacs&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple Claude instances across different projects and directories&lt;/li&gt; &#xA; &lt;li&gt;Send commands to Claude with or without file/line context&lt;/li&gt; &#xA; &lt;li&gt;Quick access to all Claude slash commands via transient menus&lt;/li&gt; &#xA; &lt;li&gt;Customizable key bindings and appearance settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 30.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anthropics/claude-code&#34;&gt;Claude Code CLI&lt;/a&gt; installed and configured&lt;/li&gt; &#xA; &lt;li&gt;Required Emacs packages: transient (0.4.0+), eat (0.9.2+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using builtin use-package (Emacs 30+)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package claude-code :ensure t&#xA;  :vc (:url &#34;https://github.com/stevemolitor/claude-code.el&#34; :rev :newest)&#xA;  :config (claude-code-mode)&#xA;  :bind-keymap (&#34;C-c c&#34; . claude-code-command-map)) ;; or your preferred key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using straight.el&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package claude-code&#xA;  :straight (:type git :host github :repo &#34;stevemolitor/claude-code.el&#34; :branch &#34;main&#34;&#xA;                   :files (&#34;*.el&#34; (:exclude &#34;demo.gif&#34;)))&#xA;  :bind-keymap&#xA;  (&#34;C-c c&#34; . claude-code-command-map)&#xA;  :config&#xA;  (claude-code-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You need to set your own key binding for the Claude Code command map. The examples in this README use &lt;code&gt;C-c c&lt;/code&gt; as the prefix key.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code&lt;/code&gt; (&lt;code&gt;C-c c c&lt;/code&gt;) - Start Claude. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), switches to the Claude buffer after creating. With double prefix (&lt;code&gt;C-u C-u&lt;/code&gt;), continues previous conversation. With triple prefix (&lt;code&gt;C-u C-u C-u&lt;/code&gt;), prompts for the project directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-toggle&lt;/code&gt; (&lt;code&gt;C-c c t&lt;/code&gt;) - Toggle Claude window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-switch-to-buffer&lt;/code&gt; (&lt;code&gt;C-c c b&lt;/code&gt;) - Switch to the Claude buffer. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), shows all Claude instances across all directories&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-kill&lt;/code&gt; (&lt;code&gt;C-c c k&lt;/code&gt;) - Kill Claude session. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), kills ALL Claude instances across all directories&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-send-command&lt;/code&gt; (&lt;code&gt;C-c c s&lt;/code&gt;) - Send command to Claude&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-send-command-with-context&lt;/code&gt; (&lt;code&gt;C-c c x&lt;/code&gt;) - Send command with current file and line context&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-send-region&lt;/code&gt; (&lt;code&gt;C-c c r&lt;/code&gt;) - Send the current region or buffer to Claude. With prefix arg (&lt;code&gt;C-u&lt;/code&gt;), prompts for instructions to add to the text. With double prefix (&lt;code&gt;C-u C-u&lt;/code&gt;), adds instructions and switches to Claude buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-fix-error-at-point&lt;/code&gt; (&lt;code&gt;C-c c e&lt;/code&gt;) - Ask Claude to fix the error at the current point (works with flycheck, flymake, and any system that implements help-at-pt)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-slash-commands&lt;/code&gt; (&lt;code&gt;C-c c /&lt;/code&gt;) - Access Claude slash commands menu&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-transient&lt;/code&gt; (&lt;code&gt;C-c c m&lt;/code&gt;) - Show all commands (transient menu)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-send-return&lt;/code&gt; (&lt;code&gt;C-c c y&lt;/code&gt;) - Send return key to Claude (useful for confirming with Claude without switching to the Claude REPL buffer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-send-escape&lt;/code&gt; (&lt;code&gt;C-c c n&lt;/code&gt;) - Send escape key to Claude (useful for saying &#34;No&#34; when Claude asks for confirmation without switching to the Claude REPL buffer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-fork&lt;/code&gt; (&lt;code&gt;C-c c f&lt;/code&gt;) - Fork conversation (jump to previous conversation by sending escape-escape to Claude)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With a single prefix arg, &lt;code&gt;claude-code&lt;/code&gt;, &lt;code&gt;claude-code-send-command&lt;/code&gt; and &lt;code&gt;claude-code-send-command-with-context&lt;/code&gt; will switch to the Claude terminal buffer after sending the command.&lt;/p&gt; &#xA;&lt;h3&gt;Read-Only Mode Toggle&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;claude-code-toggle-read-only-mode&lt;/code&gt; command provides a convenient way to switch between normal terminal mode and read-only mode in the Claude buffer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code-toggle-read-only-mode&lt;/code&gt; - Toggle between read-only mode and normal mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In read-only mode, you can interact with the terminal buffer just like a regular Emacs buffer, making it easy to select and copy text. However, you cannot change the buffer contents or enter Claude commands in this mode. This is particularly useful when you need to copy output from Claude without accidentally modifying the terminal.&lt;/p&gt; &#xA;&lt;p&gt;The command automatically detects the current mode and switches to the other:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If in normal terminal mode (semi-char mode), it switches to read-only mode&lt;/li&gt; &#xA; &lt;li&gt;If in read-only mode (emacs mode), it switches back to normal terminal mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Continuing Previous Conversations&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;claude-code&lt;/code&gt; command supports continuing previous conversations using Claude&#39;s &lt;code&gt;--continue&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Double prefix arg (&lt;code&gt;C-u C-u C-c c c&lt;/code&gt;) - Start Claude and continue previous conversation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This allows you to resume where you left off in your previous Claude session.&lt;/p&gt; &#xA;&lt;h3&gt;Transient Menus&lt;/h3&gt; &#xA;&lt;p&gt;Access all commands through the transient menu with &lt;code&gt;C-c c m&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Slash Commands Menu&lt;/h4&gt; &#xA;&lt;p&gt;For quick access to Claude slash commands like &lt;code&gt;/help&lt;/code&gt;, &lt;code&gt;/clear&lt;/code&gt;, or &lt;code&gt;/compact&lt;/code&gt;, use &lt;code&gt;C-c c /&lt;/code&gt; to open the slash commands menu.&lt;/p&gt; &#xA;&lt;h3&gt;Read-Only Mode for Text Selection&lt;/h3&gt; &#xA;&lt;p&gt;In the Claude terminal, you can switch to a read-only mode to select and copy text:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-e&lt;/code&gt; (&lt;code&gt;eat-emacs-mode&lt;/code&gt;) - Switch to read-only mode with normal Emacs cursor for text selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-j&lt;/code&gt; (&lt;code&gt;semi-char-mode&lt;/code&gt;) - Return to normal terminal mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The cursor appearance in read-only mode can be customized via the &lt;code&gt;claude-code-read-only-mode-cursor-type&lt;/code&gt; variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Customize cursor type in read-only mode (default is &#39;box)&#xA;;; Options: &#39;box, &#39;hollow, &#39;bar, &#39;hbar, or nil&#xA;(setq claude-code-read-only-mode-cursor-type &#39;bar)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Claude Instances&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;claude-code.el&lt;/code&gt; supports running multiple Claude instances across different projects and directories. Each Claude instance is associated with a specific directory (project root, file directory, or current directory).&lt;/p&gt; &#xA;&lt;h4&gt;Instance Management&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you start Claude with &lt;code&gt;claude-code&lt;/code&gt;, it creates an instance for the current directory&lt;/li&gt; &#xA; &lt;li&gt;If a Claude instance already exists for the directory, you&#39;ll be prompted to name the new instance (e.g., &#34;tests&#34;, &#34;docs&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Buffer names follow the format: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;*claude:/path/to/directory*&lt;/code&gt; for the default instance&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;*claude:/path/to/directory:instance-name*&lt;/code&gt; for named instances (e.g., &lt;code&gt;*claude:/home/user/project:tests*&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re in a directory without a Claude instance but have instances running in other directories, you&#39;ll be prompted to select one&lt;/li&gt; &#xA; &lt;li&gt;Your selection is remembered for that directory, so you won&#39;t be prompted again&lt;/li&gt; &#xA; &lt;li&gt;To start a new instance instead of selecting an existing one, cancel the prompt with &lt;code&gt;C-g&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Multiple Instances Per Directory&lt;/h4&gt; &#xA;&lt;p&gt;You can run multiple Claude instances for the same directory to support different workflows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first instance in a directory is the &#34;default&#34; instance&lt;/li&gt; &#xA; &lt;li&gt;Additional instances require a name when created (e.g., &#34;tests&#34;, &#34;docs&#34;, &#34;refactor&#34;)&lt;/li&gt; &#xA; &lt;li&gt;When multiple instances exist for a directory, commands that interact with Claude will prompt you to select which instance to use&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;C-u claude-code-switch-to-buffer&lt;/code&gt; to see all Claude instances across all directories (not just the current directory)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This allows you to have separate Claude conversations for different aspects of your work within the same project, such as one instance for writing code and another for writing tests.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Set your key binding for the command map&#xA;(global-set-key (kbd &#34;C-c C-a&#34;) claude-code-command-map)&#xA;&#xA;;; Set terminal type for the Claude terminal emulation (default is &#34;xterm-256color&#34;)&#xA;;; This determines terminal capabilities like color support&#xA;;; See the documentation for eat-term-name for more information&#xA;(setq claude-code-term-name &#34;xterm-256color&#34;)&#xA;&#xA;;; Change the path to the Claude executable (default is &#34;claude&#34;)&#xA;;; Useful if Claude is not in your PATH or you want to use a specific version&#xA;(setq claude-code-program &#34;/usr/local/bin/claude&#34;)&#xA;&#xA;;; Set command line arguments for Claude&#xA;;; For example, to enable verbose output&#xA;(setq claude-code-program-switches &#39;(&#34;--verbose&#34;))&#xA;&#xA;;; Add hooks to run after Claude is started&#xA;(add-hook &#39;claude-code-start-hook &#39;my-claude-setup-function)&#xA;&#xA;;; Adjust initialization delay (default is 0.1 seconds)&#xA;;; This helps prevent terminal layout issues if the buffer is displayed before Claude is fully ready&#xA;(setq claude-code-startup-delay 0.2)&#xA;&#xA;;; Configure the buffer size threshold for confirmation prompt (default is 1000 characters)&#xA;;; If a buffer is larger than this threshold, claude-code-send-region will ask for confirmation&#xA;;; before sending the entire buffer to Claude&#xA;(setq claude-code-large-buffer-threshold 1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing Window Position&lt;/h3&gt; &#xA;&lt;p&gt;You can control how the Claude Code window appears using Emacs&#39; &lt;code&gt;display-buffer-alist&lt;/code&gt;. For example, to make the Claude window appear on the right side of your screen with 33% width:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;display-buffer-alist&#xA;             &#39;(&#34;^\\*claude&#34;&#xA;               (display-buffer-in-side-window)&#xA;               (side . right)&#xA;               (window-width . 0.33)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This layout works best on wide screens.&lt;/p&gt; &#xA;&lt;h3&gt;Font Configuration for Better Rendering&lt;/h3&gt; &#xA;&lt;p&gt;Using a font with good Unicode support helps avoid flickering while Claude Code is rendering its thinking icons. &lt;a href=&#34;https://juliamono.netlify.app/&#34;&gt;JuliaMono&lt;/a&gt; has excellent Unicode symbols support. To let the Claude Code buffer use Julia Mono for rendering Unicode characters while still using your default font for ASCII characters add this elisp code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq use-default-font-for-symbols nil)&#xA;(set-fontset-font t &#39;unicode (font-spec :family &#34;JuliaMono&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If instead you want to use a particular font just for the Claude Code REPL but use a different font everywhere else you can customize the &lt;code&gt;claude-code-repl-face&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(custom-set-faces&#xA;   &#39;(claude-code-repl-face ((t (:family &#34;JuliaMono&#34;)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reducing Flickering on Window Configuration Changes&lt;/h3&gt; &#xA;&lt;p&gt;To reduce flickering in the Claude buffer on window configuration changes, you can adjust eat latency variables in a hook. This reduces flickering at the cost of some increased latency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;  ;; reduce flickering&#xA;  (add-hook &#39;claude-code-start-hook&#xA;            (lambda ()&#xA;              (setq-local eat-minimum-latency 0.08&#xA;                          eat-maximum-latency 0.2)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;h3&gt;GIF Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stevemolitor/claude-code.el/main/demo.gif&#34; alt=&#34;Claude Code Emacs Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://raw.githubusercontent.com/stevemolitor/claude-code.el/main/demo.gif&#34;&gt;demo&lt;/a&gt; shows claude-code.el in action, including toggling the Claude window visibility, accessing the transient menu, and sending commands with file context.&lt;/p&gt; &#xA;&lt;h3&gt;Video Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=K8sCVLmFyyU&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/K8sCVLmFyyU/0.jpg&#34; alt=&#34;The Emacs Claude Code Package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out this &lt;a href=&#34;https://www.youtube.com/watch?v=K8sCVLmFyyU&#34;&gt;video demo&lt;/a&gt; demonstrating the claude-code.el package. This video was kindly created and shared by a user of the package.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;claude-code.el&lt;/code&gt; only supports using &lt;a href=&#34;https://codeberg.org/akib/emacs-eat&#34;&gt;eat&lt;/a&gt; for the Claude Code terminal window. Eat provides better rendering with less flickering and visual artifacts compared to other terminal emulators like ansi-term and vterm in testing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache License 2.0 - see the LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jdtsmith/emacs-mac</title>
    <updated>2025-06-15T01:39:33Z</updated>
    <id>tag:github.com,2025-06-15:/jdtsmith/emacs-mac</id>
    <link href="https://github.com/jdtsmith/emacs-mac" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experimental build of emacs-mac for v&gt;=30.1&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;emacs-mac&lt;/h1&gt; &#xA;&lt;p&gt;This is an experimental build of the &lt;a href=&#34;https://bitbucket.org/mituharu/emacs-mac&#34;&gt;emacs-mac&lt;/a&gt; (aka Carbon[^1] Emacs) port of emacs, updated for Emacs v30.1.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This is an experimental build of &lt;code&gt;emacs-mac&lt;/code&gt;; there will certainly be bugs. We are looking for feedback and testing from experienced users. If you are familiar with or willing to learn about running new builds of Emacs under a debugger, perfect. If you are a Mac developer familiar with ObjC or Mac Window frameworks, even better! Other users should stick to the official NS build or recent v29.4 emacs-mac release for now.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Known working systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS 15 (Sequoia) on ARM64 (M1, M2, M3, M4), X86_64 (Intel)&lt;/li&gt; &#xA; &lt;li&gt;MacOS 14 (Sonoma) on ARM64 (M1, M3)&lt;/li&gt; &#xA; &lt;li&gt;MacOS 12 (Monterey) on X86_64 (Intel)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/issues&#34;&gt;issues&lt;/a&gt; for advice on build configurations for your system.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Please open an &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/issues&#34;&gt;issue&lt;/a&gt; to report your experiences, even if you encounter no problems. Mention your OS version, CPU, and any other relevant details, including the build/configure flags you used.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This build is kept current with the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/tree/emacs-30&#34;&gt;&lt;code&gt;emacs-30&lt;/code&gt;&lt;/a&gt; release branch.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;emacs-mac-30_1_exp&lt;/code&gt; branch and the file &lt;code&gt;README-mac&lt;/code&gt; for additional compile instructions. Briefly:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] On MacOS, &lt;code&gt;gcc&lt;/code&gt; is actually aliased to the &lt;code&gt;clang&lt;/code&gt; compiler, which is required to build &lt;code&gt;emacs-mac&lt;/code&gt;. Recent &lt;code&gt;gcc&lt;/code&gt; versions either cannot build for the architecture (e.g. Apple Silicon) and/or do not support &lt;a href=&#34;https://en.wikipedia.org/wiki/Blocks_(C_language_extension)&#34;&gt;blocks&lt;/a&gt;, which this build uses heavily.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Install (optional) libraries&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to build with tree-sitter support, native-compilation, and RSVG (all recommended), first install the necessary libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install tree-sitter libgccjit librsvg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the app either as self-contained (all resources live within the app), or non-self-contained (the default). A self-contained app is recommended. The recommended configuration options are given below; see the file &lt;code&gt;README-mac&lt;/code&gt; for others.&lt;/p&gt; &#xA;&lt;h4&gt;Self-contained&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;em&gt;self-contained&lt;/em&gt; app by default will go into &lt;code&gt;/Applications/Emacs.app&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./autogen.sh&#xA;CFLAGS=&#34;-O3 -mcpu=native&#34; ./configure --with-native-compilation --with-tree-sitter --enable-mac-app=yes --enable-mac-self-contained&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify another build directory for the self-contained app using &lt;code&gt;--enable-mac-app=/path/to/dir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Note the &lt;code&gt;yes&lt;/code&gt; argument to &lt;code&gt;--enable-mac-app=yes&lt;/code&gt;, which is required to build a self-contained app under &lt;code&gt;/Applications&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Non self-contained&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./autogen.sh&#xA;CFLAGS=&#34;-O3 -mcpu=native&#34; ./configure --with-native-compilation --with-tree-sitter  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make -j6 # or however many CPUs you want to use&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll find the staging build of the app under &lt;code&gt;mac/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;This step compresses EL files and fully populates the app.&lt;/p&gt; &#xA;&lt;h4&gt;Self-contained&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install # Installs all resources under /Applications/Emacs.app (or wherever your self-contained build is going)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Non self-contained&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install  # installs resources in, e.g., /usr/local/share/emacs/30.1.50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;No install, e.g. for debug&lt;/h4&gt; &#xA;&lt;p&gt;If you choose not to &lt;code&gt;make install&lt;/code&gt;, but instead want to run the application directly from the &lt;code&gt;mac/&lt;/code&gt; sub-directory, you may need to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% cd mac/&#xA;% ln -s ../native-lisp Emacs.app/Contents/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to associate the native lisp files. This is useful for debugging, to quickly rebuild and test, for example (saving the install step). But a &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/emacs-mac/emacs-mac-30_1_exp/#Self-contained&#34;&gt;self-contained app&lt;/a&gt; build is easier.&lt;/p&gt; &#xA;&lt;h2&gt;Additions&lt;/h2&gt; &#xA;&lt;p&gt;Several additional features and fixes have been added on top of &lt;code&gt;emacs-mac&lt;/code&gt; and Emacs proper.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;New Frame&lt;/code&gt; Dock Menu Item&lt;/li&gt; &#xA; &lt;li&gt;New variable &lt;code&gt;mac-underwave-thickness&lt;/code&gt; to customize the thickness of squiggly underlines (e.g. with linters or spell-checkers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bug fixes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Take care to avoid crashes when selecting certain fonts from the system font panel.&lt;/li&gt; &#xA; &lt;li&gt;Prevent zombie &#34;Emacs Web Content&#34; processes &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/issues/9&#34;&gt;on SVG load&lt;/a&gt;, &lt;del&gt;restoring normal WebView SVG rendering for MacOS v14+&lt;/del&gt;. Update: &lt;code&gt;WebView&lt;/code&gt; is deprecated, so this has been reverted and another workaround installed. It&#39;s recommended to build with RSVG (it is enabled by default if the &lt;code&gt;librsvg2&lt;/code&gt; library is found during build).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;If you get crashes or just want to help with debugging, it would be very useful to run emacs-mac under &lt;code&gt;lldb&lt;/code&gt;, the clang debugger. Here&#39;s how:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build emacs-mac with debug flags: &lt;pre&gt;&lt;code&gt; CFLAGS=&#34;-O0 -g3&#34; ./configure --with-native-compilation --with-tree-sitter --enable-mac-app=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Link in the &lt;a href=&#34;https://raw.githubusercontent.com/jdtsmith/emacs-mac/emacs-mac-30_1_exp/#no-install-eg-for-debug&#34;&gt;native-lisp directory&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In an &lt;code&gt;~/.lldbinit&lt;/code&gt; file, add &lt;code&gt;settings set target.load-cwd-lldbinit true&lt;/code&gt;, so Emacs can read the custom lldb commands it has defined.&lt;/li&gt; &#xA; &lt;li&gt;Start the emacs binary from the &lt;code&gt;src/&lt;/code&gt; directory, like: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;%lldb ../mac/Emacs.app&#xA;&lt;/code&gt;&lt;/pre&gt; Then &lt;code&gt;run&lt;/code&gt; (or better, &lt;code&gt;run -Q&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Now cause your crash to occur, go &lt;code&gt;up&lt;/code&gt; to the frame of interest, and use &lt;code&gt;xprint&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, etc. on the potentially problematic variables.&lt;/li&gt; &#xA; &lt;li&gt;You can also try &lt;code&gt;gui&lt;/code&gt; which is a little curses-based terminal GUI inside lldb (slow for me though), or &lt;a href=&#34;https://github.com/realgud/realgud-lldb&#34;&gt;&lt;code&gt;realgud-lldb&lt;/code&gt;&lt;/a&gt; which isn&#39;t very complete but can do some things.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;You can read about the issues encountered during the merge of Emacs v30 in the &lt;a href=&#34;https://github.com/jdtsmith/emacs-mac/raw/emacs-mac-30_1_exp/devel_update_notes.org&#34;&gt;debugging notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[^1]: Calling this the &#34;Carbon&#34; port is a vestigial nod to its origins back in the pre-OSX days. It is also what &lt;code&gt;M-x emacs-version&lt;/code&gt; says. But Carbon is a misnomer now. The ancient Carbon API never supported 64bit applications, and was deprecated and removed by Apple in 2019. A few convenience functions do remain (e.g. &lt;code&gt;Carbon.h&lt;/code&gt;), and these are used by the NS build as well. &lt;strong&gt;Both NS and emacs-mac are Cocoa applications&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>