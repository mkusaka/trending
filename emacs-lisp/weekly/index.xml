<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-08T01:50:40Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spotify/dockerfile-mode</title>
    <updated>2023-10-08T01:50:40Z</updated>
    <id>tag:github.com,2023-10-08:/spotify/dockerfile-mode</id>
    <link href="https://github.com/spotify/dockerfile-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An emacs mode for handling Dockerfiles&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dockerfile-mode&lt;/h1&gt; &#xA;&lt;p&gt;Known to work with Emacs 24 and later&lt;/p&gt; &#xA;&lt;p&gt;If you just want to use it, you can get it via MELPA.&lt;/p&gt; &#xA;&lt;p&gt;A Dockerfile mode for emacs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;/your/path/to/dockerfile-mode/&#34;)&#xA;(require &#39;dockerfile-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adds syntax highlighting as well as the ability to build the image directly using &lt;code&gt;C-c C-b&lt;/code&gt; from the buffer (&lt;code&gt;C-c M-b&lt;/code&gt; to bypass docker build cache).&lt;/p&gt; &#xA;&lt;p&gt;You can specify the image name in the file itself by adding a line like this at the top of your Dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;## -*- dockerfile-image-name: &#34;your-image-name-here&#34; -*-&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t, you&#39;ll be prompted for an image name each time you build. You may want to add the following to your emacs config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(put &#39;dockerfile-image-name &#39;safe-local-variable #&#39;stringp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change the binary to use with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq dockerfile-mode-command &#34;docker&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>purcell/inheritenv</title>
    <updated>2023-10-08T01:50:40Z</updated>
    <id>tag:github.com,2023-10-08:/purcell/inheritenv</id>
    <link href="https://github.com/purcell/inheritenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make emacs temp buffers inherit buffer-local environment variables&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/inheritenv&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/inheritenv-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/inheritenv&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/inheritenv-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/inheritenv/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/inheritenv/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Make Emacs temp buffers inherit buffer-local environment variables&lt;/h1&gt; &#xA;&lt;p&gt;Environment variables in Emacs can be set buffer-locally, like many Emacs preferences, which allows users to have different buffer-local paths for executables in different projects, specified by a &lt;code&gt;.dir-locals.el&lt;/code&gt; file or via a &lt;code&gt;direnv&lt;/code&gt; integration like &lt;a href=&#34;https://github.com/purcell/envrc&#34;&gt;envrc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, there&#39;s a fairly common pitfall when Emacs libraries run background processes on behalf of a user: many such libraries run processes in temporary buffers that do not inherit the calling buffer&#39;s environment. This can result in executables not being found, or the wrong versions of executables being picked up.&lt;/p&gt; &#xA;&lt;p&gt;An example is the Emacs built-in command &lt;code&gt;shell-command-to-string&lt;/code&gt;. Whatever buffer-local &lt;code&gt;process-environment&lt;/code&gt; (or &lt;code&gt;exec-path&lt;/code&gt;) the user has set, that command will always use the Emacs-wide default. This is &lt;em&gt;specified&lt;/em&gt; behaviour, but not &lt;em&gt;expected&lt;/em&gt; or &lt;em&gt;helpful&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;inheritenv&lt;/code&gt; provides a couple of tools for dealing with this issue:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Library authors can wrap code that plans to execute processes in temporary buffers with the &lt;code&gt;inheritenv&lt;/code&gt; macro.&lt;/li&gt; &#xA; &lt;li&gt;Users can modify commands like &lt;code&gt;shell-command-to-string&lt;/code&gt; using the &lt;code&gt;inheritenv-add-advice&lt;/code&gt; macro.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Ensure &lt;code&gt;inheritenv.el&lt;/code&gt; is in a directory on your load-path, and add the following to your &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;inheritenv)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MELPA&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re an Emacs 24 user or you have a recent version of &lt;code&gt;package.el&lt;/code&gt; you can install &lt;code&gt;inheritenv&lt;/code&gt; from the &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repository. The version of &lt;code&gt;inheritenv&lt;/code&gt; there will always be up-to-date.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Author: Steve Purcell &#xA; &lt;steve at sanityinc dot com&gt;&lt;/steve&gt;&lt;/p&gt; &#xA;&lt;p&gt;Homepage: &lt;a href=&#34;https://github.com/purcell/inheritenv&#34;&gt;https://github.com/purcell/inheritenv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;üíù Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;üíº LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sanityinc.com/&#34;&gt;‚úç sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;üê¶ @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/elpa-audit</title>
    <updated>2023-10-08T01:50:40Z</updated>
    <id>tag:github.com,2023-10-08:/purcell/elpa-audit</id>
    <link href="https://github.com/purcell/elpa-audit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Handy functions for inspecting and comparing Emas package archives&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;elpa-audit.el&lt;/h1&gt; &#xA;&lt;p&gt;This library provides functions for inspecting and comparing package archives, and is largely for the convenience of package archive maintainers such as the author!&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;If you choose not to use one of the convenient packages in &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt;, you&#39;ll need to add the directory containing &lt;code&gt;elpa-audit.el&lt;/code&gt; to your &lt;code&gt;load-path&lt;/code&gt;, and then &lt;code&gt;(require &#39;elpa-audit)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;code&gt;elpa-audit.el&lt;/code&gt; for available functions.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://coderwall.com/purcell&#34;&gt;&lt;img src=&#34;http://api.coderwall.com/purcell/endorsecount.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://uk.linkedin.com/in/stevepurcell&#34;&gt;&lt;img src=&#34;http://www.linkedin.com/img/webpromo/btn_liprofile_blue_80x15.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;Steve Purcell&#39;s blog&lt;/a&gt; // &lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;@sanityinc on Twitter&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>