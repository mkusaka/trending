<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T01:54:10Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>magit/git-modes</title>
    <updated>2023-01-15T01:54:10Z</updated>
    <id>tag:github.com,2023-01-15:/magit/git-modes</id>
    <link href="https://github.com/magit/git-modes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs major modes for Git configuration files&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Git Config Modes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Emacs major modes for various Git configuration files.&lt;/p&gt; &#xA;&lt;p&gt;The list of contributors can be found [[https://github.com/magit/git-modes/graphs/contributors][here]].&lt;/p&gt; &#xA;&lt;p&gt;The following libraries are part of the &lt;del&gt;git-modes&lt;/del&gt; package, which is available from NonGNU ELPA as well as from Melpa.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;gitattributes-mode&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Auto-/loading the library &lt;del&gt;gitattributes-mode&lt;/del&gt; enabled the mode for &lt;del&gt;.gitattributes&lt;/del&gt;, &lt;del&gt;.git/info/attributes&lt;/del&gt;, and &lt;del&gt;git/attributes&lt;/del&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;gitconfig-mode&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Auto-/loading the library &lt;del&gt;gitconfig-mode&lt;/del&gt; enables the mode for &lt;del&gt;.gitconfig&lt;/del&gt;, &lt;del&gt;.git/config&lt;/del&gt;, &lt;del&gt;git/config&lt;/del&gt;, and &lt;del&gt;.gitmodules&lt;/del&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;gitconfig-mode&lt;/del&gt; derives from &lt;del&gt;conf-unix-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;gitignore-mode&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Auto-/loading the library &lt;del&gt;gitignore-mode&lt;/del&gt; enables the mode for &lt;del&gt;.gitignore&lt;/del&gt;, &lt;del&gt;.git/info/exclude&lt;/del&gt;, and &lt;del&gt;git/ignore&lt;/del&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;gitignore-mode&lt;/del&gt; derives from &lt;del&gt;conf-unix-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This mode may be of use in other files that don&#39;t have anything to do with Git, for example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;auto-mode-alist (cons &#34;/.dockerignore\&#39;&#34; &#39;gitignore-mode)) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bastibe/org-journal</title>
    <updated>2023-01-15T01:54:10Z</updated>
    <id>tag:github.com,2023-01-15:/bastibe/org-journal</id>
    <link href="https://github.com/bastibe/org-journal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple org-mode based journaling mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://travis-ci.org/bastibe/org-journal][file:https://travis-ci.org/bastibe/org-journal.svg?branch=master]] [[https://elpa.nongnu.org/nongnu/org-journal.html][https://elpa.nongnu.org/nongnu/org-journal.svg]] [[http://melpa.org/#/org-journal][file:http://melpa.org/packages/org-journal-badge.svg]] [[http://stable.melpa.org/#/org-journal][file:http://stable.melpa.org/packages/org-journal-badge.svg]] [[contributors][file:https://img.shields.io/github/contributors/bastibe/org-journal.svg]] [[license][file:https://img.shields.io/github/license/bastibe/org-journal.svg]]&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: The org-journal logo [[./org-journal.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;org-journal&lt;/p&gt; &lt;p&gt;Adapted from &lt;a href=&#34;https://www.emacswiki.org/emacs/PersonalDiary&#34;&gt;https://www.emacswiki.org/emacs/PersonalDiary&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Functions to maintain a simple personal diary / journal using in Emacs.&lt;/p&gt; &lt;p&gt;Feel free to use, modify and improve the code! — mtvoid, bastibe&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[open-issues][file:https://img.shields.io/github/issues/bastibe/org-journal.svg]] [[closed-issues][file:https://img.shields.io/github/issues-closed/bastibe/org-journal.svg]] [[open-pull-requests][file:https://img.shields.io/github/issues-pr/bastibe/org-journal.svg]] [[closed-pull-requests][file:https://img.shields.io/github/issues-pr-closed/bastibe/org-journal.svg]]&lt;/p&gt; &#xA;&lt;p&gt;** Synopsis&lt;/p&gt; &#xA;&lt;p&gt;=org-journal= maintains a set of files, depending on the value of =org-journal-file-type=, a file represents a day, week, month or year. When =org-journal-file-type= is set to =&#39;daily=, each file represent a day. In case =org-journal-file-type= is set to =&#39;weekly=, a file represents a week, etc. Convenient bindings allow the creation of journal records in the current daily, weekly, monthly or yearly file and search within all records or specified time intervals. All records can be browsed and searched from the Emacs Calendar for convenience. All entries in a specified TODO state will be carried over to the next day, see =org-journal-carryover-items=. Optionally, the journal entry can be encrypted, so can the file, see =org-journal-enable-encryption= and =org-journal-encrypt-journal=, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Every journal entry must have a &lt;em&gt;CREATED&lt;/em&gt; property when using yearly, monthly and weekly journal files. This property is added by =org-journal-new-entry= automatically.&lt;/p&gt; &#xA;&lt;p&gt;An example of a daily file (it will actually look a lot nicer, depending on your org-mode settings):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE org&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tuesday, 06/04/13 ** 10:28 Company meeting Endless discussions about projects. Not much progress&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 11:33 Work on org-journal For the longest time, I wanted to have a cool diary app on my computer. However, I simply lacked the right tool for that job. After many hours of searching, I finally found PersonalDiary on EmacsWiki. PersonalDiary is a very simple diary system based on the emacs calendar. It works pretty well, but I don&#39;t really like that it only uses unstructured text.&lt;/p&gt; &#xA;&lt;p&gt;Thus, I spent the last two hours making that diary use org-mode and represent every entry as an org-mode headline. Very cool!&lt;/p&gt; &#xA;&lt;p&gt;** 15:33 Work on org-journal Now my journal automatically creates the right headlines (adds the current time stamp if on the current day, does not add a time stamp for any other day). Additionally, it automatically collapses the headlines in the org-file to the right level (shows everything if in view mode, shows only headlines in new-entry-mode). Emacs and elisp are really cool!&lt;/p&gt; &#xA;&lt;p&gt;** 16:40 Work on org-journal I uploaded my journal mode to marmalade and Github! Awesome!&lt;/p&gt; &#xA;&lt;p&gt;** TODO teach org-journal how to brew coffee #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;An example of a weekly/monthly/yearly journal file, see also =org-journal-file-type=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE org&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tuesday, 06/04/13 :PROPERTIES: :CREATED: 20130604 :END: ** 10:28 Company meeting ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 11:33 Work on org-journal ...&lt;/p&gt; &#xA;&lt;p&gt;** 15:33 Work on org-journal ...&lt;/p&gt; &#xA;&lt;p&gt;** 16:40 Work on org-journal ...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wednesday, 06/05/13 :PROPERTIES: :CREATED: 20130605 :END: ** 10:28 A new day ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 11:33 Work is almost over ...&lt;/p&gt; &#xA;&lt;p&gt;** TODO teach org-journal how to brew coffee #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;=org-journal= is available through [[https://elpa.nongnu.org/][NonGNU ELPA]], [[https://melpa.org/][MELPA]] and [[https://stable.melpa.org/][MELPA Stable]]. So installation should be trivial:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE M-x package-install org-journal #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Then add =(require &#39;org-journal)= to your =.emacs=.&lt;/p&gt; &#xA;&lt;p&gt;** Quickstart&lt;/p&gt; &#xA;&lt;p&gt;Doing =M-x org-journal-new-entry= will immediately create a journal directory in the default path (customized using the =org-journal-dir= variable), open or create a file in =org-journal-mode=, and insert a template for a new journal entry.&lt;/p&gt; &#xA;&lt;p&gt;The same command with a prefix argument (=C-u M-x org-journal-new-entry=) will do everything mentioned while skipping entry creation, which is useful for looking at the current journal file.&lt;/p&gt; &#xA;&lt;p&gt;** Basic Usage&lt;/p&gt; &#xA;&lt;p&gt;Bindings available in =org-journal-mode=:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=C-c C-f= - go to the next journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=C-c C-b= - go to the previous journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=C-c C-j= - insert a new entry into the current journal file (creates the file if not present).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=C-c C-s= - search the journal for a string.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All journal entries are registered in the Emacs Calendar. To see available journal entries do =M-x calendar=. Bindings available in the =calendar-mode=:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=j m= - mark entries in calendar&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j r= - view an entry in a new buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j d= - view an entry but do not switch to it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j n= - add a new entry into the day&#39;s file (creates the file if not present).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s w= - search in all entries of the current week.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s m= - search in all entries of the current month.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s y= - search in all entries of the current year.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s f= - search in all entries of all time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s F= - search in all entries in the future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=[= - go to previous day with journal entries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=]= - go to next day with journal entries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Setup and customization&lt;/p&gt; &#xA;&lt;p&gt;The following variables can be customized through =M-x customize=, or configured programmatically in your =.init.el=.&lt;/p&gt; &#xA;&lt;p&gt;See below for an example.&lt;/p&gt; &#xA;&lt;p&gt;*** Journal Directory and Files&lt;/p&gt; &#xA;&lt;p&gt;Customization options related to journal directory and files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-dir= - the journal path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-file-format= - format string for journal file names (may contain directories relative to =org-journal-dir=).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-find-file= - a function to use when opening a journal file. By default it opens a window using =find-file-other-window=. Set this to =find-file= if you don&#39;t want org-journal to split your window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-extend-today-until= - a number that indicates the hour of /your/ end of the day. If you create a new entry with =org-journal-new-entry= earlier than this time, the journal entry will go into the previous day&#39;s journal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-file-type= - the journal file type either &#39;daily (default), &#39;weekly, &#39;monthly or &#39;yearly. Also see the customizable variables =org-journal-start-on-weekday= for changing the start of the week for weekly journals (defaults to Monday). Keep in mind changing =org-journal-start-on-weekday= won&#39;t work for existing weekly journal files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Journal File Content&lt;/p&gt; &#xA;&lt;p&gt;Customization options related to the journal file contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-date-format= - date format =org-journal= uses when showing a date within a journal and search results page. It can also be a function, which return value will than be inserted.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-date-prefix= - this string will prefix the date at the top of a journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-time-format= - a timestamp format that will prefix every entry within a daily journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-time-prefix= - a string that will prefix every entry within a daily journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-file-header= - a string that will be inserted at the top of every new journal file. If a string, it will be passed to &lt;code&gt;format-time-string&lt;/code&gt; along the time value of the new journal entry. It can also be a function expecting a time value.&lt;/p&gt; &lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (defun org-journal-file-header-func (time) &#34;Custom function to create journal header.&#34; (concat (pcase org-journal-file-type (&lt;code&gt;daily &#34;#+TITLE: Daily Journal\n#+STARTUP: showeverything&#34;) (&lt;/code&gt;weekly &#34;#+TITLE: Weekly Journal\n#+STARTUP: folded&#34;) (&lt;code&gt;monthly &#34;#+TITLE: Monthly Journal\n#+STARTUP: folded&#34;) (&lt;/code&gt;yearly &#34;#+TITLE: Yearly Journal\n#+STARTUP: folded&#34;))))&lt;/p&gt; &lt;p&gt;(setq org-journal-file-header &#39;org-journal-file-header-func) #+END_EXAMPLE&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-hide-entries-p= - a boolean (defaults to =true=) that will hide previous journal entries if true. Can be set to =nil= to show previous entries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** =org-journal= behavior&lt;/p&gt; &#xA;&lt;p&gt;Customization options related to =org-journal= itself:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-journal-mode-hook= - List of functions to run when =org-journal-mode= is loaded. By default this is set to =&#39;(turn-on-visual-line-mode org-journal-default-enable-encryption)=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** An example setup&lt;/p&gt; &#xA;&lt;p&gt;A very basic example of customization.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (setq org-journal-dir &#34;~/org/journal/&#34;) (setq org-journal-date-format &#34;%A, %d %B %Y&#34;) (require &#39;org-journal) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;For users of =use-package=, this setup could look like the following:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (use-package org-journal :ensure t :defer t :init ;; Change default prefix key; needs to be set before loading org-journal (setq org-journal-prefix-key &#34;C-c j &#34;) :config (setq org-journal-dir &#34;~/org/journal/&#34; org-journal-date-format &#34;%A, %d %B %Y&#34;)) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;** Advanced Usage *** Searching the Journal&lt;/p&gt; &#xA;&lt;p&gt;=org-journal= has two searching options: the usual =org-mode= agenda search and the built-in plain text search. The former can become slow with bigger journals, so the built-in search is a recommended option.&lt;/p&gt; &#xA;&lt;p&gt;To use the agenda search, you can add all journal entries to your org-agenda by adding =org-journal-dir= to =org-agenda-files= and setting =org-agenda-file-regexp= to include files matching your =org-journal-file-pattern=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp ;; When =org-journal-file-pattern= has the default value, this would be the regex. (setq org-agenda-file-regexp &#34;\`\([^.].*\.org\|[0-9]\{8\}\(\.gpg\)?\)\&#39;&#34;) (add-to-list &#39;org-agenda-files org-journal-dir) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;However, this can become /very/ slow if you have many journal entries. As a compromize, you can set =org-journal-enable-agenda-integration= to =t=, which automatically adds the current and all future journal entries to the agenda. This is enough to get an overview over current and future tasks.&lt;/p&gt; &#xA;&lt;p&gt;The built-in search is available through the following function: =org-journal-search= (=C-c C-s= in =org-journal-mode=). By default, it will ask for the time interval to search within (accepting the =org-read-date= format such as &#34;-1y&#34; or &#34;-1m&#34;) and the string to search for. Given a prefix argument (=C-u org-journal-search=), it will go through the whole journal.&lt;/p&gt; &#xA;&lt;p&gt;The order of the search results (ascending or descending by date) can be customized using the =org-journal-search-results-order-by= variable.&lt;/p&gt; &#xA;&lt;p&gt;Search is also available through the Emacs Calendar as described in &#34;Basic Usage&#34;.&lt;/p&gt; &#xA;&lt;p&gt;*** Carry Over&lt;/p&gt; &#xA;&lt;p&gt;By default, =org-journal= will try to /carry over/ previous day TODO-marked items whenever a new journal file is created. The older journal entry will be inserted to the current day&#39;s file.&lt;/p&gt; &#xA;&lt;p&gt;This feature is controlled through the =org-journal-carryover-items= variable. To disable this feature set =org-journal-carryover-items= to an empty string =&#34;&#34;=. Any [[http://orgmode.org/manual/Matching-tags-and-properties.html][agenda tags view match string]], tags, properties, and todo states are allowed. By default this is &lt;del&gt;TODO=”TODO”&lt;/del&gt;. Which will match TODO items.&lt;/p&gt; &#xA;&lt;p&gt;The old carryover items in the previous day&#39;s journal are processed by the function assigned to =org-journal-handle-old-carryover= variable. Default is to remove all of them. You can change this behavior by assigning a custom fuction to the variable. Your function has to take one argument, which is a list of old carryover entries. The list is in form of ((START_POINT (END_POINT . &#34;TEXT&#34;)) ... (START_POINT (END_POINT . &#34;TEXT&#34;))); and in ascending order of START_POINT.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can choose putting a tag on the old carryover entries intead of removing them:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (defun my-old-carryover (old_carryover) (save-excursion (let ((matcher (cdr (org-make-tags-matcher org-journal-carryover-items)))) (dolist (entry (reverse old_carryover)) (save-restriction (narrow-to-region (car entry) (cadr entry)) (goto-char (point-min)) (org-scan-tags &#39;(lambda () (org-set-tags &#34;:carried:&#34;)) matcher org--matcher-tags-todo-only))))))&lt;/p&gt; &#xA;&lt;p&gt;(setq org-journal-handle-old-carryover &#39;my-old-carryover) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also skip carry over of [[https://orgmode.org/manual/Drawers.html][Drawers]] through the =org-journal-skip-carryover-drawers= variable. This is specifically useful when you want to skip carry over of previous days clocked entries when it is under the drawer =LOGBOOK=. The variable accepts a list of drawers names which will be skipped on carry over. Sample configuration for skipping =LOGBOOK= drawer:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq org-journal-skip-carryover-drawers (list &#34;LOGBOOK&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Encryption&lt;/p&gt; &#xA;&lt;p&gt;The journal entry can be encrypted using =org-crypt=, to enable it set &lt;del&gt;org-journal-enable-encryption&lt;/del&gt; to =t=.&lt;/p&gt; &#xA;&lt;p&gt;You can also encrypt the journal files itself by setting the variable &lt;del&gt;org-journal-encrypt-journal&lt;/del&gt; to =t=. =org-journal= will always search for journal files with the =.gpg= extension, and highlights them in the calendar, etc., regardless of the value of &lt;del&gt;org-journal-encrypt-journal&lt;/del&gt;. See the info page =(info &#34;(epa)Encrypting/decrypting gpg files&#34;)= for more information about gpg encryption in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda and Scheduling&lt;/p&gt; &#xA;&lt;p&gt;An easy way of keeping track of appointments or future TODOs is to simply create a journal entry in the future. Such entries will automatically get a timestamp and show up in the current day&#39;s journal entry once you reach that day.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if =org-journal-enable-agenda-integration= is =t=, org-journal will automatically add the current and all future journal entries to =org-agenda-files=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a few helper functions to deal with such scheduled entries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-new-scheduled-entry= - prompts for a date, and creates a new journal entry on that date with its timestamp set to the date. By default, this is a TODO entry. Set the prefix to avoid the TODO.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-schedule-view= - creates a read-only overview of scheduled entries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;**** iCalendar export&lt;/p&gt; &#xA;&lt;p&gt;You can export your scheduled entries to an iCalendar file, and subscribe to that file in your calendar application. You need to enable the agenda integration for this to work. I also recommend you set the following values before exporting:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq org-journal-enable-agenda-integration t org-icalendar-store-UID t org-icalendar-include-todo &#34;all&#34; org-icalendar-combined-agenda-file &#34;~/path/to/org-journal.ics&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;With this done, you can export your agenda, including your scheduled entries, with =(org-icalendar-combine-agenda-files)=.&lt;/p&gt; &#xA;&lt;p&gt;*** Journal Capture Template&lt;/p&gt; &#xA;&lt;p&gt;You can configure a capture template in order to integrate =org-journal= with =org-capture=, as in the following example for a daily journal:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (defun org-journal-find-location () ;; Open today&#39;s journal, but specify a non-nil prefix argument in order to ;; inhibit inserting the heading; org-capture will insert the heading. (org-journal-new-entry t) (unless (eq org-journal-file-type &#39;daily) (org-narrow-to-subtree)) (goto-char (point-max)))&lt;/p&gt; &#xA;&lt;p&gt;(setq org-capture-templates &#39;((&#34;j&#34; &#34;Journal entry&#34; plain (function org-journal-find-location) &#34;** %(format-time-string org-journal-time-format)%^{Title}\n%i%?&#34; :jump-to-captured t :immediate-finish t))) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;If you want to do the same to schedule a task for a future date, you can use the following:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (defvar org-journal--date-location-scheduled-time nil)&lt;/p&gt; &#xA;&lt;p&gt;(defun org-journal-date-location (&amp;amp;optional scheduled-time) (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil &#34;Date:&#34;)))) (setq org-journal--date-location-scheduled-time scheduled-time) (org-journal-new-entry t (org-time-string-to-time scheduled-time)) (unless (eq org-journal-file-type &#39;daily) (org-narrow-to-subtree)) (goto-char (point-max))))&lt;/p&gt; &#xA;&lt;p&gt;(setq org-capture-templates &#39;((&#34;j&#34; &#34;Journal entry&#34; plain (function org-journal-date-location) &#34;** TODO %?\n &amp;lt;%(princ org-journal--date-location-scheduled-time)&amp;gt;\n&#34; :jump-to-captured t)) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;*** Caching of journal dates Since version 2.0.0 a cache has been added to speed up calendar operations. This should drastically improve the performance when using encrypted journal files, see =org-journal-encrypt-journal=.&lt;/p&gt; &#xA;&lt;p&gt;The caching functionality can be enabled by settings =org-journal-enable-cache= to =t=. The cache can be reset by calling =org-journal-invalidate-cache=.&lt;/p&gt; &#xA;&lt;p&gt;** FAQ&lt;/p&gt; &#xA;&lt;p&gt;*** Can I use weekly/monthly/yearly journal entries instead of daily ones?&lt;/p&gt; &#xA;&lt;p&gt;Yes, see =org-journal-file-type=.&lt;/p&gt; &#xA;&lt;p&gt;*** Can I have multiple journals?&lt;/p&gt; &#xA;&lt;p&gt;At the moment, this is not possible. But it should be possible to switch the value of =org-journal-directory= using a custom function or directory local variables.&lt;/p&gt; &#xA;&lt;p&gt;*** Can I use org-journal with Spacemacs?&lt;/p&gt; &#xA;&lt;p&gt;Yes you can!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To use =org-journal= with Spacemacs from the =master= branch, you must do this:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;=git clone &lt;a href=&#34;https://github.com/borgnix/spacemacs-journal.git&#34;&gt;https://github.com/borgnix/spacemacs-journal.git&lt;/a&gt; ~/.emacs.d/private/journal=&lt;/li&gt; &#xA;   &lt;li&gt;add it to your =~/.spacemacs=. You will need to add =journal= to the existing =dotspacemacs-configuration-layers= list in this file.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The manual of the journal layer can be found at &lt;a href=&#34;https://github.com/borgnix/spacemacs-journal&#34;&gt;https://github.com/borgnix/spacemacs-journal&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use Spacemacs from the =develop= branch you can enable =org-journal= by setting =org-enable-org-journal-support= to =t=, see [[https://github.com/syl20bnr/spacemacs/tree/develop/layers/+emacs/org#org-journal-support][Spacemacs org-journal support]].&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Some key-bindings in org-journal conflict with org-mode key bindings&lt;/p&gt; &#xA;&lt;p&gt;Minor modes are supposed to only use key bindings of the form =C-c C-?=, where =?= can be any letter, and to not overwrite major mode bindings. With org-mode already using most interesting keys, collisions are inevitable. This means that some org-journal key bindings will not work as expected in an org-mode buffer, and also that some org-mode key bindings will not work as expected in an org-journal buffer.&lt;/p&gt; &#xA;&lt;p&gt;When working in an org-mode buffer the following org-journal key bindings are overwritten:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=C-c C-s= (=org-journal-search=) with =org-schedule=&lt;/li&gt; &#xA; &lt;li&gt;=C-c C-f= (=org-journal-open-next-entry=) with =org-forward-heading-same-level=&lt;/li&gt; &#xA; &lt;li&gt;=C-c C-b= (=org-journal-open-previous-entry=) with =org-backward-heading-same-level=&lt;/li&gt; &#xA; &lt;li&gt;=C-c C-j= (=org-journal-new-entry=) with =org-goto=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To workaround this, you can use user bindings of the form =C-c ?=, where =?= can be any letter, to call the org-journal functions. This allows you to have a set of keybindings that work the same in org-mode and org-journal buffers. However, this is Emacs, and if you don&#39;t like a key binding, change it!&lt;/p&gt; &#xA;&lt;p&gt;*** Opening journal entries from the calendar are not editable&lt;/p&gt; &#xA;&lt;p&gt;Old entries are opened in =view-mode=, which has convenient key bindings for browsing files. Most notably, you can quickly close =view-mode= buffers with =q=, scroll them with the =SPC= and =DEL=, or quit =view-mode= with =e=.&lt;/p&gt; &#xA;&lt;p&gt;*** Can I insert some text on a newly created journal file?&lt;/p&gt; &#xA;&lt;p&gt;Yes, you can write a custom function and assign it =org-journal-date-format=.&lt;/p&gt; &#xA;&lt;p&gt;*** Can I do more powerful things on a newly created journal entry?&lt;/p&gt; &#xA;&lt;p&gt;Yes, there are two hooks that are run when a journal entry is created. Each (=org-journal-new-entry=) will call =org-journal-after-entry-create-hook=, and =org-journal-after-header-create-hook= is called each time the date (the parent headline of each entry) is generated.&lt;/p&gt; &#xA;&lt;p&gt;** Convenient =org-journal= Snippet Extensions&lt;/p&gt; &#xA;&lt;p&gt;*** Kill journal buffer after saving buffer (By [[https://github.com/dhruvparamhans][@dhruvparamhans]]) #+BEGIN_SRC emacs-lisp (defun org-journal-save-entry-and-exit() &#34;Simple convenience function. Saves the buffer of the current day&#39;s entry and kills the window Similar to org-capture like behavior&#34; (interactive) (save-buffer) (kill-buffer-and-window)) (define-key org-journal-mode-map (kbd &#34;C-x C-s&#34;) &#39;org-journal-save-entry-and-exit) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Contributors&lt;/p&gt; &#xA;&lt;p&gt;See [[file:CONTRIBUTORS][CONTRIBUTORS]].&lt;/p&gt; &#xA;&lt;p&gt;** Contributing to =org-journal= We format the code using =common-lisp-indent-function= rather than the default =lisp-indent-function=. Please set the variable =lisp-indent-function= to =common-lisp-indent-function=, and format the code before creating a PR.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq lisp-indent-function &#39;common-lisp-indent-function) ;; Markt the whole buffer: C-x h ;; Call indent-region: C-M-&lt;br&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Changelog&lt;/p&gt; &#xA;&lt;p&gt;See [[file:CHANGELOG][CHANGELOG]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wbolster/emacs-python-pytest</title>
    <updated>2023-01-15T01:54:10Z</updated>
    <id>tag:github.com,2023-01-15:/wbolster/emacs-python-pytest</id>
    <link href="https://github.com/wbolster/emacs-python-pytest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;run pytest inside emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;================ python-pytest.el&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://melpa.org/packages/python-pytest-badge.svg&#34;&gt;https://melpa.org/packages/python-pytest-badge.svg&lt;/a&gt; :alt: melpa badge&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://stable.melpa.org/packages/python-pytest-badge.svg&#34;&gt;https://stable.melpa.org/packages/python-pytest-badge.svg&lt;/a&gt; :alt: melpa stable badge&lt;/p&gt; &#xA;&lt;h1&gt;overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;python-pytest.el&lt;/code&gt; is an &lt;code&gt;emacs&lt;/code&gt;__ package to integrate the python &lt;code&gt;pytest&lt;/code&gt;__ test runner.&lt;/p&gt; &#xA;&lt;p&gt;__ &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;https://www.gnu.org/software/emacs/&lt;/a&gt; __ &lt;a href=&#34;https://pytest.org/&#34;&gt;https://pytest.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;most functionality can be used via a dispatcher popup menu built using &lt;code&gt;transient&lt;/code&gt;&lt;strong&gt;, which gives a look and feel similar to the fantastic &lt;code&gt;magit&lt;/code&gt;&lt;/strong&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;__ &lt;a href=&#34;https://magit.vc/manual/transient&#34;&gt;https://magit.vc/manual/transient&lt;/a&gt; __ &lt;a href=&#34;https://magit.vc/&#34;&gt;https://magit.vc/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;python-pytest.el&lt;/code&gt; offers these awesome features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;various commands with ‘do what i mean’ (dwim) behaviour, using heuristics to automatically detect test files and test functions:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;run all tests&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;rerun previous failures&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;repeat the last invocation&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;run only tests for the current python (test) module&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;run only tests for the current (test) function&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;easy way to change common switches and options, e.g. toggling output capture, failing after the first error, and so on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;edit the automatically generated command line before executing, by invoking commands with a prefix argument (&lt;code&gt;C-u&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;basic debugger integration using the pdb tracking support from the built-in &lt;code&gt;python-mode&lt;/code&gt; package, which will automatically open source files at the right location.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;work simultaneously on multiple python projects. each project will use its own dedicated pytest output buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;various customisation options, e.g. to change whether a generated command line should be shown for editing by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;hooks that get run before and after running pytest, which can be used to add custom behaviour.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;screenshot&lt;/h1&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;Output -c color (--color) -q quiet (--quiet) -s no output capture (--capture=no) -v verbosity ([--verbose|--verbose --verbose])&lt;/p&gt; &#xA;&lt;p&gt;Selection, filtering, ordering -k only names matching expression (-k=) --dm run doctests (--doctest-modules) -m only marks matching expression (-m=) --nf new first (--new-first) --sw stepwise (--stepwise)&lt;/p&gt; &#xA;&lt;p&gt;Failures, errors, debugging -l show locals (--showlocals) --ff failed first (--failed-first) -p debug on error (--pdb) --ft full tracebacks (--full-trace) -x exit after first failure (--exitfirst) --mf exit after N failures or errors (--maxfail=10) --rx run xfail tests (--runxfail) --tb traceback style (--tb=) --tr debug on each test (--trace)&lt;/p&gt; &#xA;&lt;p&gt;Run tests t all r repeat f file (dwim) m files d def/class (dwim) x last failed F file (this) M directories D def/class (this)&lt;/p&gt; &#xA;&lt;h1&gt;installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;python-pytest.el&lt;/code&gt; is available from &lt;code&gt;melpa&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;__ &lt;a href=&#34;https://melpa.org/#/python-pytest&#34;&gt;https://melpa.org/#/python-pytest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;(use-package python-pytest)&lt;/p&gt; &#xA;&lt;p&gt;install manually::&lt;/p&gt; &#xA;&lt;p&gt;M-x package-install RET python-pytest RET&lt;/p&gt; &#xA;&lt;p&gt;note that &lt;code&gt;python-pytest.el&lt;/code&gt; uses &lt;code&gt;projectile&lt;/code&gt;__ for some of its features, e.g. finding associated test files. this package is intended to work correctly even without any &lt;code&gt;projectile&lt;/code&gt; configuration, since it will likely do the right thing if a project has a conventional layout.&lt;/p&gt; &#xA;&lt;p&gt;__ &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;https://github.com/bbatsov/projectile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;usage&lt;/h1&gt; &#xA;&lt;h2&gt;basics&lt;/h2&gt; &#xA;&lt;p&gt;the typical usage pattern is to invoke the popup menu, named &lt;code&gt;python-pytest-dispatch&lt;/code&gt;. it is a good idea to create a dedicated keybinding for this command, but it can also be run manually:&lt;/p&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;p&gt;M-x python-pytest-dispatch&lt;/p&gt; &#xA;&lt;p&gt;this shows a dispatcher menu. change some switches and options, then run one of the actions.&lt;/p&gt; &#xA;&lt;p&gt;a dedicated pytest &lt;code&gt;comint&lt;/code&gt; buffer will open, showing the output in real time, and allowing interaction with debuggers.&lt;/p&gt; &#xA;&lt;h2&gt;using the correct environment&lt;/h2&gt; &#xA;&lt;p&gt;this package ultimately invokes &lt;code&gt;pytest&lt;/code&gt;. &lt;code&gt;python-pytest.el&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; guess execution environments, so emacs needs to use the right &lt;code&gt;exec-path&lt;/code&gt;, taking into account python virtual environments, and so on.&lt;/p&gt; &#xA;&lt;p&gt;to manage the execution environment, consider using &lt;code&gt;direnv&lt;/code&gt;&lt;strong&gt;: it can change (and revert) paths and environment variables, simply by switching to a project directory, making it perfect for automatically ‘activating’ a &lt;code&gt;virtualenv&lt;/code&gt;. use &lt;code&gt;emacs-direnv&lt;/code&gt;&lt;/strong&gt; and possibly &lt;code&gt;exec-path-from-shell&lt;/code&gt;__ to achieve the same inside emacs.&lt;/p&gt; &#xA;&lt;p&gt;__ &lt;a href=&#34;https://direnv.net/&#34;&gt;https://direnv.net/&lt;/a&gt; __ &lt;a href=&#34;https://github.com/wbolster/emacs-direnv&#34;&gt;https://github.com/wbolster/emacs-direnv&lt;/a&gt; __ &lt;a href=&#34;https://github.com/purcell/exec-path-from-shell&#34;&gt;https://github.com/purcell/exec-path-from-shell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;working in a monorepo&lt;/h2&gt; &#xA;&lt;p&gt;by default, &lt;code&gt;pytest&lt;/code&gt; is run from the project root directory. if your package is not at the root of your repository, &lt;code&gt;pytest&lt;/code&gt; might not find your modules.&lt;/p&gt; &#xA;&lt;p&gt;a workaround is to add the the package root to &lt;code&gt;PYTHONPATH&lt;/code&gt; before running the tests. this can be found by adding a dummy file in the package root. the following hook looks for a &lt;code&gt;.pyroot&lt;/code&gt; file in parent directories. if found, it adds the directory of the file to &lt;code&gt;PYTHONPATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;python-mode-hook (lambda () (when-let ((r (locate-dominating-file default-directory &#34;.pyroot&#34;))) (setq python-pytest-executable (concat &#34;PYTHONPATH=&#34; r &#34; &#34; &#34;pytest&#34;)))))&lt;/p&gt; &#xA;&lt;h2&gt;editing and repeating&lt;/h2&gt; &#xA;&lt;p&gt;to edit the command line before running it, use a prefix argument before calling the action, e.g.type &lt;code&gt;C-u t&lt;/code&gt; instead of just &lt;code&gt;t&lt;/code&gt; in the popup menu.&lt;/p&gt; &#xA;&lt;p&gt;when the popup menu itself is invoked with a prefix argument, this will run &lt;code&gt;python-pytest-repeat&lt;/code&gt; to rerun pytest. this means a single key binding can be used for both an initial run (via the popup), and for repeated calls. this is great for quick ‘edit, test, edit, test` cycles.&lt;/p&gt; &#xA;&lt;h2&gt;available commands&lt;/h2&gt; &#xA;&lt;p&gt;the available commands are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python-pytest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python-pytest-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python-pytest-file-dwim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python-pytest-files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python-pytest-function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python-pytest-function-dwim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python-pytest-last-failed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python-pytest-repeat&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;all of these are available via the popup menu, but can also be executed directly (or bound to a key).&lt;/p&gt; &#xA;&lt;h1&gt;heuristics&lt;/h1&gt; &#xA;&lt;p&gt;this package uses a few heuristics for its ‘do what i mean’ behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;test file heuristics&lt;/h2&gt; &#xA;&lt;p&gt;the &lt;code&gt;python-pytest-file-dwim&lt;/code&gt; command tries to do the right thing both when editing the actual code and its associated test module. for instance, when editing &lt;code&gt;foo/bar.py&lt;/code&gt;, this will automatically detect &lt;code&gt;tests/test_bar.py&lt;/code&gt; (thanks to the &lt;code&gt;projectile&lt;/code&gt; package), and only run the tests from that test module.&lt;/p&gt; &#xA;&lt;h2&gt;test function heuristics&lt;/h2&gt; &#xA;&lt;p&gt;the &lt;code&gt;python-pytest-function-dwim&lt;/code&gt; command tries to run only tests related to the function close to the cursor position (‘point’ in emacs terminology).&lt;/p&gt; &#xA;&lt;p&gt;when editing a test module, this runs only a single test function, namely the one currently being edited.&lt;/p&gt; &#xA;&lt;p&gt;when editing the code itself, things are more complicated. this command will make a guess to only run the right test functions. the matching behaviour can be tweaked using &lt;code&gt;python-pytest-strict-test-name-matching&lt;/code&gt; (see configuration below).&lt;/p&gt; &#xA;&lt;p&gt;by default, the current function name will be used as a pattern to match the corresponding tests. for example, when editing &lt;code&gt;foo()&lt;/code&gt; inside &lt;code&gt;utils.py&lt;/code&gt;, this will match &lt;code&gt;test_foo()&lt;/code&gt; as well as &lt;code&gt;test_foo_xyz()&lt;/code&gt;, by invoking &lt;code&gt;pytest test_utils.py -k test_foo&lt;/code&gt;. if a pattern was specified in the popup (the &lt;code&gt;-k&lt;/code&gt; option), it will try to make a combined pattern, by invoking &lt;code&gt;pytest test_utils.py -k &#39;test_foo and other_filter&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;on the other hand, when &lt;code&gt;python-pytest-strict-test-name-matching&lt;/code&gt; is non-nil, only &lt;code&gt;test_foo()&lt;/code&gt; will match, and nothing else, by invoking &lt;code&gt;pytest test_utils.py::test_foo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;configuration&lt;/h1&gt; &#xA;&lt;h2&gt;settings&lt;/h2&gt; &#xA;&lt;p&gt;the behaviour of this package can be tweaked by customising a few &lt;code&gt;defcustom&lt;/code&gt; variables. use the &lt;code&gt;customize&lt;/code&gt; interface to explore those (each will show a description and possible values)::&lt;/p&gt; &#xA;&lt;p&gt;M-x customize-group RET python-pytest RET&lt;/p&gt; &#xA;&lt;p&gt;to set those permanently without using the customize interface, use something like this in &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;(use-package python-pytest :custom (python-pytest-confirm t))&lt;/p&gt; &#xA;&lt;p&gt;the available variables are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python-pytest-confirm&lt;/code&gt;&lt;/p&gt; &lt;p&gt;whether to ask for confirmation (allowing editing) by default. this inverts the prefix argument (&lt;code&gt;C-u&lt;/code&gt;) behaviour.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python-pytest-strict-test-name-matching&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Whether to require a strict match for the ‘test this function’ heuristic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python-pytest-executable&lt;/code&gt;&lt;/p&gt; &lt;p&gt;the name of the pytest executable (&lt;code&gt;pytest&lt;/code&gt; by default)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python-pytest-unsaved-buffers-behavior&lt;/code&gt;&lt;/p&gt; &lt;p&gt;whether to ask whether unsaved buffers should be saved before running pytest. the check for unsaved buffers can be for only the current buffer, or for all project buffers, and those can be saved directly, or after confirmation. valid values: &lt;code&gt;ask-all&lt;/code&gt;, &lt;code&gt;ask-current&lt;/code&gt;, &lt;code&gt;save-all&lt;/code&gt;, &lt;code&gt;save-current&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python-pytest-setup-hook&lt;/code&gt;, &lt;code&gt;python-pytest-started-hook&lt;/code&gt;, and &lt;code&gt;python-pytest-finished-hook&lt;/code&gt;&lt;/p&gt; &lt;p&gt;hooks run before starting &lt;code&gt;pytest&lt;/code&gt;, after starting &lt;code&gt;pytest&lt;/code&gt;, and after &lt;code&gt;pytest&lt;/code&gt; finished.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python-pytest-buffer-name&lt;/code&gt; and &lt;code&gt;python-pytest-project-name-in-buffer-name&lt;/code&gt;&lt;/p&gt; &lt;p&gt;the defaults result in &lt;code&gt;*pytest*&amp;lt;project-name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python-pytest-pdb-track&lt;/code&gt;&lt;/p&gt; &lt;p&gt;whether to enable the pdb tracking support&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;extending the popup&lt;/h2&gt; &#xA;&lt;p&gt;when using pytest plugins that provide extra switches, it may be useful to integrate those into the popup. see the &lt;code&gt;transient&lt;/code&gt;__ manual for more information.&lt;/p&gt; &#xA;&lt;p&gt;__ &lt;a href=&#34;https://magit.vc/manual/transient&#34;&gt;https://magit.vc/manual/transient&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;as an example, this will add a &lt;code&gt;-z&lt;/code&gt; switch that, when enabled, will invoke &lt;code&gt;pytest --zzz&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;(use-package python-pytest :config ;; just an extra &lt;code&gt;-y&#39; after the &lt;/code&gt;-x&#39; suffix (transient-append-suffix &#39;python-pytest-dispatch &#34;-x&#34; &#39;(&#34;-y&#34; &#34;The Y&#34; &#34;-y&#34;)) ;; group with &lt;code&gt;-z&#39; after second from the last group, ;; that is before &lt;/code&gt;Run tests&#39; (transient-append-suffix &#39;python-pytest-dispatch &#39;(-2) [&#34;My Z&#34; (&#34;-z&#34; &#34;The Z&#34; &#34;-z&#34;)]))&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;transient&lt;/code&gt; lets you save defaults you want for it. just select all options on &lt;code&gt;python-pytest-dispatch&lt;/code&gt; and then&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x C-s&lt;/code&gt; to save current settings as default and make them persistent,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x s&lt;/code&gt; to save current settings as default for the current emacs session.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;contributing&lt;/h1&gt; &#xA;&lt;p&gt;praise? complaints? bugs? questions? ideas?&lt;/p&gt; &#xA;&lt;p&gt;please use the github issue tracker.&lt;/p&gt; &#xA;&lt;h1&gt;credits&lt;/h1&gt; &#xA;&lt;p&gt;this package was created by wouter bolsterlee. i am @wbolster on &lt;code&gt;github&lt;/code&gt;__ and &lt;code&gt;twitter&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;__ &lt;a href=&#34;https://github.com/wbolster&#34;&gt;https://github.com/wbolster&lt;/a&gt; __ &lt;a href=&#34;https://twitter.com/wbolster&#34;&gt;https://twitter.com/wbolster&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;history&lt;/h1&gt; &#xA;&lt;p&gt;note: &lt;code&gt;melpa&lt;/code&gt;__ automatically ships the latest code from the git &lt;code&gt;main&lt;/code&gt; branch, while &lt;code&gt;melpa stable&lt;/code&gt;__ only contains tagged (released) versions.&lt;/p&gt; &#xA;&lt;p&gt;__ &lt;a href=&#34;https://melpa.org/&#34;&gt;https://melpa.org/&lt;/a&gt; __ &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;https://stable.melpa.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;development branch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;…&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3.3.0 (2022-10-18)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;add dispatch options for pytest-xdist (&lt;code&gt;#54 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/54&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;respect &lt;code&gt;projectile-compilation-dir&lt;/code&gt; if it exists (&lt;code&gt;#59 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/59&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;read-shell-command&lt;/code&gt; instead of &lt;code&gt;read-from-minibuffer&lt;/code&gt; (&lt;code&gt;#60 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/60&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;add &lt;code&gt;0&lt;/code&gt; as a valid argument that can be passed to &lt;code&gt;-n&lt;/code&gt; (&lt;code&gt;#61 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/61&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;switch to &lt;code&gt;compilation-mode&lt;/code&gt; after pytest process finishes (&lt;code&gt;#62 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/62&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;fix saving of verbosity setting (&lt;code&gt;#64 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/64&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3.2.0 (2021-11-11)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;do not use melpa unstable versions in package-requires (&lt;code&gt;#52 &amp;lt;https://github.com/wbolster/emacs-python-pytest/issues/52&amp;gt;&lt;/code&gt;_)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3.1.0 (2021-11-09)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;make python-pytest-files show all files if no test files are found (&lt;code&gt;#38 &amp;lt;https://github.com/wbolster/emacs-python-pytest/issues/38&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;display buffer window before starting comint to fix size detection (&lt;code&gt;#48 &amp;lt;https://github.com/wbolster/emacs-python-pytest/issues/48&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;correctly handle -m and -k flags (&lt;code&gt;#37 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/37&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;fix clearing test output buffer (&lt;code&gt;#15 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/15&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3.0.0 (2020-08-10)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;redesign the menu: use better groupings, use multi-column visual layout, add some more flags, make all flags start with either &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt; (mostly mimicking pytest flags) (&lt;code&gt;#28 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/28&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;add a &lt;code&gt;python-pytest-directories&lt;/code&gt; command with interactive multi-directory selection (&lt;code&gt;#21 &amp;lt;https://github.com/wbolster/emacs-python-pytest/issues/21&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;#31 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/31&amp;gt;&lt;/code&gt;&lt;/em&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2.0.0 (2020-08-04)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;switch to &lt;code&gt;transient&lt;/code&gt; (&lt;code&gt;magit-popup&lt;/code&gt; replacement); the command for the menu is now &lt;code&gt;python-pytest-dispatch&lt;/code&gt; (&lt;code&gt;#18 &amp;lt;https://github.com/wbolster/emacs-python-pytest/issues/18&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;#26 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/26&amp;gt;&lt;/code&gt;&lt;/em&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;add &lt;code&gt;python-pytest-files&lt;/code&gt; command with interactive multi-file selection&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;improve &lt;code&gt;python-pytest-file-dwim&lt;/code&gt; heuristic for nested functions/classes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;make &lt;code&gt;next-error&lt;/code&gt; and related-commands work&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;add a &lt;code&gt;-w&lt;/code&gt; shortcut for very verbose (&lt;code&gt;--verbose --verbose&lt;/code&gt;) (&lt;code&gt;#24 &amp;lt;https://github.com/wbolster/emacs-python-pytest/pull/24&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1.0.0 (2018-06-14)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;this package is useful for quite a few people. time to celebrate with a 1.x release!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;save (or ask to save) modified buffers before running pytest (&lt;code&gt;#4 &amp;lt;https://github.com/wbolster/emacs-python-pytest/issues/4&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;put customizable variables in the right group&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.3.1 (2018–03-07)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fix package version number for melpa stable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.3.0 (2018–03-07)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;repopulate the popup with the previously used values when running &lt;code&gt;python-pytest-dispatch&lt;/code&gt; from an output buffer. (&lt;code&gt;#3 &amp;lt;https://github.com/wbolster/emacs-python-pytest/issues/3&amp;gt;&lt;/code&gt;_)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.2.2 (2018-02-26)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;avoid &lt;code&gt;-as-&amp;gt;&lt;/code&gt; macro since the &lt;code&gt;dash.el&lt;/code&gt; version currently on melpa stable does not have it. (&lt;code&gt;#2 &amp;lt;https://github.com/wbolster/emacs-python-pytest/issues/2&amp;gt;&lt;/code&gt;_)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.2.1 (2018-02-22)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fix autoloading for &lt;code&gt;python-pytest-popup&lt;/code&gt; command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.2.0 (2018-02-19)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;now available from melpa (&lt;code&gt;#1 &amp;lt;https://github.com/wbolster/emacs-python-pytest/issues/1&amp;gt;&lt;/code&gt;_)&lt;/li&gt; &#xA; &lt;li&gt;more docs&lt;/li&gt; &#xA; &lt;li&gt;various ‘dwim’ improvements&lt;/li&gt; &#xA; &lt;li&gt;renamed and added a few popup flags&lt;/li&gt; &#xA; &lt;li&gt;improved relative path handling&lt;/li&gt; &#xA; &lt;li&gt;improved hooks&lt;/li&gt; &#xA; &lt;li&gt;improved history&lt;/li&gt; &#xA; &lt;li&gt;better shell escaping&lt;/li&gt; &#xA; &lt;li&gt;remember current command in output buffer to make repeating work&lt;/li&gt; &#xA; &lt;li&gt;misc other tweaks and fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0.1.0 (2018-02-03)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;initial release&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;license&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;(this is the osi approved 3-clause &#34;new bsd license&#34;.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;copyright 2018 wouter bolsterlee&lt;/p&gt; &#xA;&lt;p&gt;all rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;neither the name of the author nor the names of the contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;this software is provided by the copyright holders and contributors &#34;as is&#34; and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.&lt;/p&gt;</summary>
  </entry>
</feed>