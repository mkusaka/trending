<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-28T01:58:16Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Fanael/edit-indirect</title>
    <updated>2023-05-28T01:58:16Z</updated>
    <id>tag:github.com,2023-05-28:/Fanael/edit-indirect</id>
    <link href="https://github.com/Fanael/edit-indirect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Edit regions in separate buffers&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>jorgenschaefer/pyvenv</title>
    <updated>2023-05-28T01:58:16Z</updated>
    <id>tag:github.com,2023-05-28:/jorgenschaefer/pyvenv</id>
    <link href="https://github.com/jorgenschaefer/pyvenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python virtual environment interface for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pyvenv.el, Python virtual environment support for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://secure.travis-ci.org/jorgenschaefer/pyvenv.png&#34; alt=&#34;Travis-CI Build Status&#34;&gt; &lt;a href=&#34;http://stable.melpa.org/#/pyvenv&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/pyvenv-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a simple global minor mode which will replicate the changes done by virtualenv activation inside Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The main entry points are &lt;code&gt;pyvenv-activate&lt;/code&gt;, which queries the user for a virtual environment directory to activate, and &lt;code&gt;pyvenv-workon&lt;/code&gt;, which queries for a virtual environment in &lt;code&gt;$WORKON_HOME&lt;/code&gt; (from virtualenvwrapper.sh).&lt;/p&gt; &#xA;&lt;h2&gt;Similar Projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aculich/virtualenv.el&#34;&gt;virtualenv.el&lt;/a&gt; is the original virtualenv implementation for Emacs. I used it for a long time, but didn’t like some of the design decisions.&lt;/p&gt; &#xA;&lt;p&gt;For example, it does not modify &lt;code&gt;process-environment&lt;/code&gt; so does not set a virtual environment for &lt;code&gt;M-x compile&lt;/code&gt; and other external processes. Also, &lt;code&gt;M-x virtualenv-workon&lt;/code&gt; requires a prefix argument to actually change the current virtual environment. And it does not support virtualenvwrapper’s hooks, which I use to set up a working environment.&lt;/p&gt; &#xA;&lt;p&gt;All in all, too much magic for too little gain. So I figured I’d write my own. Still, it’s an excellent package and I’m very grateful to have used it for a long time.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alphapapa/org-super-agenda</title>
    <updated>2023-05-28T01:58:16Z</updated>
    <id>tag:github.com,2023-05-28:/alphapapa/org-super-agenda</id>
    <link href="https://github.com/alphapapa/org-super-agenda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Supercharge your Org daily/weekly agenda by grouping items&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: org-super-agenda&lt;/p&gt; &#xA;&lt;p&gt;#+PROPERTY: LOGGING nil&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;a href=&#34;https://melpa.org/#/org-super-agenda&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/org-super-agenda-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/org-super-agenda&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/org-super-agenda-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction :PROPERTIES: :TOC: ignore :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package lets you &#34;supercharge&#34; your Org daily/weekly agenda. The idea is to group items into sections, rather than having them all in one big list.&lt;/p&gt; &#xA;&lt;p&gt;Now you can sort-of do this already with custom agenda commands, but when you do that, you lose the daily/weekly aspect of the agenda: items are no longer shown based on deadline/scheduled timestamps, but are shown no-matter-what.&lt;/p&gt; &#xA;&lt;p&gt;So this package filters the results from &lt;del&gt;org-agenda-finalize-entries&lt;/del&gt;, which runs just before items are inserted into agenda views. It runs them through a set of filters that separate them into groups. Then the groups are inserted into the agenda buffer, and any remaining items are inserted at the end. Empty groups are not displayed.&lt;/p&gt; &#xA;&lt;p&gt;The end result is your standard daily/weekly agenda, but arranged into groups defined by you. You might put items with certain tags in one group, habits in another group, items with certain todo keywords in another, and items with certain priorities in another. The possibilities are only limited by the grouping functions.&lt;/p&gt; &#xA;&lt;p&gt;The primary use of this package is for the daily/weekly agenda, made by the &lt;del&gt;org-agenda-list&lt;/del&gt; command, but it also works for other agenda views, like &lt;del&gt;org-tags-view&lt;/del&gt;, &lt;del&gt;org-todo-list&lt;/del&gt;, &lt;del&gt;org-search-view&lt;/del&gt;, etc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :PROPERTIES: :TOC: this :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#screenshots][Screenshots]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#examples][Examples]]&lt;/li&gt; &#xA; &lt;li&gt;[[#group-selectors][Group selectors]]&lt;/li&gt; &#xA; &lt;li&gt;[[#tips][Tips]]&lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]]&lt;/li&gt; &#xA; &lt;li&gt;[[#changelog][Changelog]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots :PROPERTIES: :TOC: 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s what a normal agenda looks like:&lt;/p&gt; &#xA;&lt;p&gt;[[images/screenshots/screenshot-before.png]]&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what the &#34;super&#34; agenda looks like:&lt;/p&gt; &#xA;&lt;p&gt;[[images/screenshots/screenshot-after.png]]&lt;/p&gt; &#xA;&lt;p&gt;There are also a few [[images/screenshots/index.org][more screenshots]].&lt;/p&gt; &#xA;&lt;p&gt;** COMMENT Tasks :noexport: :PROPERTIES: :ID: 4ff94c53-a5c3-47ec-8bcb-76909f37ca2f :END:&lt;/p&gt; &#xA;&lt;p&gt;*** TODO Figure out how to exclude screenshots from info page but not GitHub rendering&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :TOC: 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** MELPA&lt;/p&gt; &#xA;&lt;p&gt;Just install the =org-super-agenda= package!&lt;/p&gt; &#xA;&lt;p&gt;** Manual installation&lt;/p&gt; &#xA;&lt;p&gt;If you want to install manually, you must also install these packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs &amp;gt;= 26.1&lt;/li&gt; &#xA; &lt;li&gt;=dash= &amp;gt;= 2.13&lt;/li&gt; &#xA; &lt;li&gt;=ht= &amp;gt;=2.2&lt;/li&gt; &#xA; &lt;li&gt;=org-mode= &amp;gt;= 9.0&lt;/li&gt; &#xA; &lt;li&gt;=s= &amp;gt;= 1.10&lt;/li&gt; &#xA; &lt;li&gt;=ts=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then put =org-super-agenda.el= in your =load-path=, and eval =(require &#39;org-super-agenda)=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :TOC: 1 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable &lt;del&gt;org-super-agenda-mode&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the variable &lt;del&gt;org-super-agenda-groups&lt;/del&gt; as desired (see example below).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; In order for groups to be automatically, persistently applied to all agenda buffers, the variable &lt;del&gt;org-super-agenda-groups&lt;/del&gt; /must be set in the global scope/ (e.g. with &lt;del&gt;setq&lt;/del&gt; in your init file, or using the customization interface). Alternatively, it can be &lt;del&gt;let&lt;/del&gt;-bound in lisp code that calls &lt;del&gt;org-agenda&lt;/del&gt; commands, but in that case, the setting /will not persist across agenda commands/ (so after refreshing an agenda buffer by pressing =g=, there will be no groups).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run an Org agenda command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the day with confidence, knowing that nothing important has been lost in the jumble of /ahem/ overdue items.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Examples&lt;/p&gt; &#xA;&lt;p&gt;At first you might feel bewildered by all the options. Never fear, [[examples.org][examples]] are here!&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the code for the screenshots above. You can test it quickly by evaluating this code block:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (let ((org-super-agenda-groups &#39;(;; Each group has an implicit boolean OR operator between its selectors. (:name &#34;Today&#34; ; Optionally specify section name :time-grid t ; Items that appear on the time grid :todo &#34;TODAY&#34;) ; Items that have this TODO keyword (:name &#34;Important&#34; ;; Single arguments given alone :tag &#34;bills&#34; :priority &#34;A&#34;) ;; Set order of multiple groups at once (:order-multi (2 (:name &#34;Shopping in town&#34; ;; Boolean AND group matches items that match all subgroups :and (:tag &#34;shopping&#34; :tag &#34;@town&#34;)) (:name &#34;Food-related&#34; ;; Multiple args given in list with implicit OR :tag (&#34;food&#34; &#34;dinner&#34;)) (:name &#34;Personal&#34; :habit t :tag &#34;personal&#34;) (:name &#34;Space-related (non-moon-or-planet-related)&#34; ;; Regexps match case-insensitively on the entire entry :and (:regexp (&#34;space&#34; &#34;NASA&#34;) ;; Boolean NOT also has implicit OR between selectors :not (:regexp &#34;moon&#34; :tag &#34;planet&#34;))))) ;; Groups supply their own section names when none are given (:todo &#34;WAITING&#34; :order 8) ; Set order of this section (:todo (&#34;SOMEDAY&#34; &#34;TO-READ&#34; &#34;CHECK&#34; &#34;TO-WATCH&#34; &#34;WATCHING&#34;) ;; Show this group at the end of the agenda (since it has the ;; highest number). If you specified this group last, items ;; with these todo keywords that e.g. have priority A would be ;; displayed in that group instead, because items are grouped ;; out in the order the groups are listed. :order 9) (:priority&amp;lt;= &#34;B&#34; ;; Show this section after &#34;Today&#34; and &#34;Important&#34;, because ;; their order is unspecified, defaulting to 0. Sections ;; are displayed lowest-number-first. :order 1) ;; After the last group, the agenda will display items that didn&#39;t ;; match any of these groups, with the default order position of 99 ))) (org-agenda nil &#34;a&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The groups apply to all agenda commands (at least, every one that calls &lt;del&gt;org-agenda-finalize-entries&lt;/del&gt;). You can set different groups for custom commands by setting &lt;del&gt;org-super-agenda-groups&lt;/del&gt; in the custom command&#39;s &lt;del&gt;settings&lt;/del&gt; list (see the description for &lt;del&gt;org-agenda-custom-commands&lt;/del&gt;). You can disable grouping by binding &lt;del&gt;org-super-agenda-groups&lt;/del&gt; to nil around a call to an agenda command, or you can disable it globally by disabling the mode.&lt;/p&gt; &#xA;&lt;p&gt;*** COMMENT Tasks :noexport:&lt;/p&gt; &#xA;&lt;p&gt;**** TODO Export examples to info page&lt;/p&gt; &#xA;&lt;p&gt;** Group selectors&lt;/p&gt; &#xA;&lt;p&gt;Each group selector creates a group in the agenda containing the items it matches and consumes those items; any items it doesn&#39;t match are passed to the next group selector. The selector &lt;del&gt;:discard&lt;/del&gt; is an exception: it consumes any items it matches without creating an agenda group and passes through the rest to the next selector.&lt;/p&gt; &#xA;&lt;p&gt;Each group selector takes an argument which can be a single atom or a list, e.g. &lt;del&gt;:tag&lt;/del&gt; takes a string or list of strings. Some selectors are predicates, like &lt;del&gt;:deadline&lt;/del&gt; or &lt;del&gt;:habit&lt;/del&gt;; for consistency, they also take an argument, but it is ignored.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The order of items may not be preserved after grouping due to the implementation&#39;s using hash tables. Future versions may address this shortcoming.&lt;/p&gt; &#xA;&lt;p&gt;*** Keywords&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:name= :: Optionally, set group name header. May be a string; or the symbol &lt;del&gt;none&lt;/del&gt;, in which case no header will be inserted. If &lt;del&gt;:name&lt;/del&gt; is not set at all, the group will be named automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:face&lt;/del&gt; :: A /face/ to apply to items in the group. If /face/ is a plist containing &lt;del&gt;:append t&lt;/del&gt;, it will be appended. See function &lt;del&gt;add-face-text-property&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:transformer&lt;/del&gt; :: Used to transform item strings before display. Either a function called with one argument, the item string, or a sexp, in which case the item string is bound to &lt;del&gt;it&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Special selectors&lt;/p&gt; &#xA;&lt;p&gt;Every selector requires an argument, even if it&#39;s just &lt;del&gt;t&lt;/del&gt;, e.g. &lt;del&gt;:anything&lt;/del&gt;, &lt;del&gt;:auto-category&lt;/del&gt;, &lt;del&gt;:auto-group&lt;/del&gt;, and &lt;del&gt;:discard&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:and= :: Group ITEMS that match all selectors in GROUP.&lt;/li&gt; &#xA; &lt;li&gt;=:anything= :: Select every item, no matter what. This is probably most useful with &lt;del&gt;:discard&lt;/del&gt;, because it doesn&#39;t actually test anything, so it&#39;s faster than, e.g. &lt;del&gt;:regexp &#34;.&#34;&lt;/del&gt;, which has to get the entry text for every item.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-category= :: This automatically groups items by their category (usually the filename it&#39;s in, without the =.org= suffix).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-dir-name&lt;/del&gt; :: This automatically groups items by the directory name of their source buffer.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-group= :: This selects items that have the =agenda-group= Org property set. By setting this property for a subtree, every item in it will be sorted into an agenda group by that name and placed into the agenda where the &lt;del&gt;:auto-group&lt;/del&gt; selector is ([[examples.org#automatically-by-group][example]]).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-map&lt;/del&gt; :: This automatically groups items by the value returned when applying each item to the given function as a string from the agenda buffer ([[examples.org#automatically-by-mapping-a-function][example]]). The function should return a string to be used as the grouping key and as the header for its group.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-outline-path= :: This automatically groups items by their outline path hierarchy, like =Plans/Take over the universe/Take over the moon=.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-parent&lt;/del&gt; :: This automatically groups items by their parent heading. This is surprisingly handy, especially if you group tasks hierarchically by project and use agenda restrictions to limit the agenda to a subtree.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-planning= :: This automatically groups items by their earliest of scheduled date or deadline, formatted according to variable &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:auto-priority= :: This automatically groups items by their priority.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-property&lt;/del&gt; :: This automatically groups items by the value of the given property ([[examples.org#automatically-by-property][example]]).&lt;/li&gt; &#xA; &lt;li&gt;=:auto-tags= :: This automatically groups items by all of their tags (i.e. items with exactly the same tags, in any order, will be grouped together).&lt;/li&gt; &#xA; &lt;li&gt;=:auto-todo= :: This automatically groups items by their to-do keyword.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:auto-ts&lt;/del&gt; :: This automatically groups items by the date of their latest timestamp anywhere in the entry, formatted according to variable &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;. With argument &lt;del&gt;reverse&lt;/del&gt;, groups are sorted newest-first.&lt;/li&gt; &#xA; &lt;li&gt;=:discard= :: Discard items that match selectors. Any groups processed after this one will not see discarded items. You might use this at the beginning or end of a list of groups, either to narrow down the list of items (used in combination with &lt;del&gt;:not&lt;/del&gt;), or to exclude items you&#39;re not interested in.&lt;/li&gt; &#xA; &lt;li&gt;=:not= :: Group ITEMS that match no selectors in GROUP. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that the &lt;del&gt;:not&lt;/del&gt; group selector /creates/ a group with items it /does not/ match; it can be combined with &lt;del&gt;:discard&lt;/del&gt; to discard items that /don&#39;t/ match. For example, &lt;del&gt;(:discard (:not (:priority &#34;A&#34;)))&lt;/del&gt; as the first selector would mean that only priority &lt;del&gt;A&lt;/del&gt; items would appear in the agenda, while &lt;del&gt;(:discard (:priority &#34;C&#34;))&lt;/del&gt; would mean that any priority &lt;del&gt;C&lt;/del&gt; items would not appear in the agenda.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=:order= :: A number setting the order sections will be displayed in the agenda, lowest number first. Defaults to =0=.&lt;/li&gt; &#xA; &lt;li&gt;=:order-multi= :: Set the order of multiple groups at once, like &lt;del&gt;(:order-multi (2 (groupA) (groupB) ...))&lt;/del&gt; to set the order of these groups to 2.&lt;/li&gt; &#xA; &lt;li&gt;=:take= :: Take the first N items in GROUP. If N is negative, take the last N items. For example, &lt;del&gt;(:take (-3 group))&lt;/del&gt; will take the last 3 items from the group. The remainder of items are discarded. Note: The order of entries from GROUP is not guaranteed to be preserved, so &lt;del&gt;:take&lt;/del&gt; may not always show expected entries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Normal selectors&lt;/p&gt; &#xA;&lt;p&gt;These selectors take one argument alone, or multiple arguments in a list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:category= :: Group items that match any of the given categories. Argument may be a string or list of strings.&lt;/li&gt; &#xA; &lt;li&gt;=:children= :: Select any item that has child entries. Argument may be &lt;del&gt;t&lt;/del&gt; to match if it has any children, &lt;del&gt;nil&lt;/del&gt; to match if it has no children, &lt;del&gt;todo&lt;/del&gt; to match if it has children with any to-do keywords, or a string to match if it has children with certain to-do keywords. You might use this to select items that are project top-level headings. Be aware that this may be very slow in non-daily/weekly agenda views because of its recursive nature.&lt;/li&gt; &#xA; &lt;li&gt;=:date= :: Group items that have a date associated. Argument can be =t= to match items with any date, =nil= to match items without a date, or =today= to match items with today’s date. The =ts-date= text-property is matched against.&lt;/li&gt; &#xA; &lt;li&gt;=:deadline= :: Group items that have a deadline. Argument can be &lt;del&gt;t&lt;/del&gt; (to match items with any deadline), &lt;del&gt;nil&lt;/del&gt; (to match items that have no deadline), &lt;del&gt;past&lt;/del&gt; (to match items with a deadline in the past), &lt;del&gt;today&lt;/del&gt; (to match items whose deadline is today), or &lt;del&gt;future&lt;/del&gt; (to match items with a deadline in the future). Argument may also be given like &lt;del&gt;before DATE&lt;/del&gt; or &lt;del&gt;after DATE&lt;/del&gt; where DATE is a date string that &lt;del&gt;org-time-string-to-absolute&lt;/del&gt; can process.&lt;/li&gt; &#xA; &lt;li&gt;=:effort&amp;lt;= :: Group items that are less than (or equal to) the given effort. Argument is a time-duration string, like &lt;del&gt;5&lt;/del&gt; or &lt;del&gt;0:05&lt;/del&gt; for 5 minutes.&lt;/li&gt; &#xA; &lt;li&gt;=:effort&amp;gt;= :: Group items that are higher than (or equal to) the given effort. Argument is a time-duration string, like &lt;del&gt;5&lt;/del&gt; or &lt;del&gt;0:05&lt;/del&gt; for 5 minutes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:file-path&lt;/del&gt; :: Group items whose buffers&#39; filename paths match any of the given regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=:habit= :: Group habit items (items which have a =STYLE: habit= Org property).&lt;/li&gt; &#xA; &lt;li&gt;=:heading-regexp= :: Group items whose headings match any of the given regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=:log= :: Group Agenda Log Mode items. Argument may be &lt;del&gt;close&lt;/del&gt; or &lt;del&gt;closed&lt;/del&gt; to select items closed today; &lt;del&gt;clock&lt;/del&gt; or &lt;del&gt;clocked&lt;/del&gt; to select items clocked today; &lt;del&gt;changed&lt;/del&gt; or &lt;del&gt;state&lt;/del&gt; to select items whose to-do state was changed today; &lt;del&gt;t&lt;/del&gt; to select any logged item, or &lt;del&gt;nil&lt;/del&gt; to select any non-logged item. (See also variable &lt;del&gt;org-agenda-log-mode-items&lt;/del&gt;.) Note that these items may also be matched by the &lt;del&gt;:time-grid&lt;/del&gt; selector, so if you want these displayed in their own group, you may need to select them in a group before a group containing the &lt;del&gt;:time-grid&lt;/del&gt; selector.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:pred&lt;/del&gt; :: Group items if any of the given predicate functions return non-nil when called with each item as a string from the agenda buffer ([[examples.org#by-predicate][example]]).&lt;/li&gt; &#xA; &lt;li&gt;=:priority= :: Group items that match any of the given priorities. Argument may be a string or list of strings, which should be the priority letter, e.g. &lt;del&gt;A&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:priority&amp;gt;= :: Group items that are higher than the given priority, e.g. &lt;del&gt;C&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:priority&amp;gt;== :: Group items that are higher than or equal to the given priority, e.g. &lt;del&gt;B&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:priority&amp;lt;= :: Group items that are lower than the given priority, e.g. &lt;del&gt;A&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:priority&amp;lt;== :: Group items that are lower than or equal to the given priority, e.g. &lt;del&gt;B&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=:property= :: Group items with a property, optionally matching a value. Argument may be a property name string, or a list of property name string and either value string or predicate with which to test the value.&lt;/li&gt; &#xA; &lt;li&gt;=:regexp= :: Group items that match any of the given regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=:scheduled= :: Group items that are scheduled. Argument can be &lt;del&gt;t&lt;/del&gt; (to match items scheduled for any date), &lt;del&gt;nil&lt;/del&gt; (to match items that are not schedule), &lt;del&gt;past&lt;/del&gt; (to match items scheduled for the past), &lt;del&gt;today&lt;/del&gt; (to match items scheduled for today), or &lt;del&gt;future&lt;/del&gt; (to match items scheduled for the future). Argument may also be given like &lt;del&gt;before DATE&lt;/del&gt; or &lt;del&gt;after DATE&lt;/del&gt; where DATE is a date string that &lt;del&gt;org-time-string-to-absolute&lt;/del&gt; can process.&lt;/li&gt; &#xA; &lt;li&gt;=:tag= :: Group items that match any of the given tags. Argument may be a string or list of strings.&lt;/li&gt; &#xA; &lt;li&gt;=:time-grid= :: Group items that appear on the time grid.&lt;/li&gt; &#xA; &lt;li&gt;=:todo= :: Group items that match any of the given TODO keywords. Argument may be a string or list of strings, or &lt;del&gt;t&lt;/del&gt; to match any keyword, or &lt;del&gt;nil&lt;/del&gt; to match only non-todo items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tips&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An [[info:org-super-agenda][info page]] is included, with the contents of this readme file.&lt;/li&gt; &#xA; &lt;li&gt;Group headers use the keymap =org-super-agenda-header-map=, allowing you to bind keys in that map which will take effect when point is on a header. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example, [[https://github.com/gregsexton/origami.el][origami]] works with =org-super-agenda= buffers without any extra configuration. Just activate =origami-mode= in the agenda buffer and use the command =origami-toggle-node= to fold groups. You can bind, e.g. =TAB= to that command in the header map, and then you can easily collapse groups as if they were an outline. You might even fold some automatically ([[examples.org#automatically-fold-certain-groups-with-origami][example]]).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FAQ :PROPERTIES: :TOC: 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Why are some items not displayed even though I used group selectors for them?&lt;/p&gt; &#xA;&lt;p&gt;This is a common misunderstanding of how this package works. As written in the introduction, it does not /collect/ items. It only /groups/ items that are collected by Org Agenda or =org-ql=. So if your Agenda command or =org-ql= query does not collect certain items, they will not be displayed, regardless of what =org-super-agenda= groups you configure.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/alphapapa/org-ql][org-ql]] provides an easier way to write queries to generate agenda-like views that can be grouped with =org-super-agenda=.&lt;/p&gt; &#xA;&lt;p&gt;** Why did a group disappear when I moved it to the end of the list?&lt;/p&gt; &#xA;&lt;p&gt;As explained in the usage instructions and shown in the example, items are collected into groups in the order the groups are listed, and empty groups are not shown. To display a group out of the order in which groups are listed, use =:order=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changelog :PROPERTIES: :TOC: 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.3-pre&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:property&lt;/del&gt;, which groups items with a property, optionally also matching a value or predicate. (Thanks to [[https://github.com/weipe][Per Weijnitz]].)&lt;/li&gt; &#xA; &lt;li&gt;Special selector &lt;del&gt;:take&lt;/del&gt;, which limits the number of items displayed in a group. (Thanks to [[https://github.com/pkazmier][Pete Kazmier]].)&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-hide-empty-groups&lt;/del&gt;, which hides empty groups. (Thanks to [[https://github.com/cslux][Christian Schwarzgruber]].)&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-keep-order&lt;/del&gt;, which re-sorts items after grouping to preserve their original sort order. (Thanks to [[https://github.com/Alexander-Miller][Alexander-Miller]].)&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-ts&lt;/del&gt; may be given the argument &lt;del&gt;reverse&lt;/del&gt; to sort the groups newest-first.&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-final-group-separator&lt;/del&gt;, which is a separator inserted after the final agenda group. (Thanks to [[https://github.com/funnell][Tyler Funnell]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-planning&lt;/del&gt;, which groups items by their earliest of scheduled date or deadline, formatted according to variable &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-ts&lt;/del&gt;, which groups items by the date of their latest timestamp anywhere in the entry, formatted according to variable &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Selector =:auto-tags=, which groups items by all of their tags.&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-date-format&lt;/del&gt;, used to format date headers in the &lt;del&gt;:auto-date&lt;/del&gt; selector.&lt;/li&gt; &#xA; &lt;li&gt;To-do keyword faces are applied to keywords in group headers.&lt;/li&gt; &#xA; &lt;li&gt;Option =org-super-agenda-header-separator= may also be a character, which is automatically repeated to the window width. (Thanks to [[https://github.com/sheepduke][YUE Daian]].)&lt;/li&gt; &#xA; &lt;li&gt;Option =org-super-agenda-header-properties=. It sets =org-agenda-structural-header= by default, which enables navigating to headers with the default =M-{= / =M-}= bindings in agenda buffers. (Thanks to [[https://github.com/haji-ali][Abdul-Lateef Haji-Ali]].)&lt;/li&gt; &#xA; &lt;li&gt;Option =org-super-agenda-header-prefix=, a string prepended to group headers. ([[https://github.com/alphapapa/org-super-agenda/issues/108][#108]]. Thanks to [[https://github.com/cslux][Christian Schwarzgruber]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Group headers face is now appended to face list instead of overriding it.&lt;/li&gt; &#xA; &lt;li&gt;Minimum Emacs version requirement is now 26.1 (required by =ts= library).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:children todo= group selection ([[https://github.com/alphapapa/org-super-agenda/issues/75][#75]]). (Thanks to [[https://github.com/bleggett][Ben Leggett]] and [[https://github.com/whirm][Elric Milon]].)&lt;/li&gt; &#xA; &lt;li&gt;=:children= group headings.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t show blank lines for disabled headers (i.e. with &lt;del&gt;:name none&lt;/del&gt; and =org-super-agenda-header-separator= set to an empty string). (Fixes [[https://github.com/alphapapa/org-super-agenda/issues/105][#105]]. Thanks to [[https://github.com/floscr][Florian Schrödl]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Updated&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tests updated for Org 9.2.4.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-habit= is now loaded when =org-super-agenda= is loaded. This avoids issues, real and potential, and should not cause any problems.&lt;/li&gt; &#xA; &lt;li&gt;Variable =org-super-agenda-allow-unsafe-groups= may be used to disable groups which call arbitrary functions (e.g. when called from other packages that may read code from untrusted origins).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.1.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Selector =:auto-dir-name= did not handle items without markers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Additions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keyword &lt;del&gt;:face&lt;/del&gt;, used to apply faces to items in groups.&lt;/li&gt; &#xA; &lt;li&gt;Keyword &lt;del&gt;:transformer&lt;/del&gt;, used to transform items in groups.&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-header-separator&lt;/del&gt;, which can, e.g. be set to an empty string for a more compact view. (Thanks to [[https://github.com/sdelafond][Sébastien Delafond]].)&lt;/li&gt; &#xA; &lt;li&gt;Face &lt;del&gt;org-super-agenda-header&lt;/del&gt;, which can be used to customize group headers. (Thanks to [[https://github.com/cslux][Christian Schwarzgruber]].)&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-map&lt;/del&gt;, which groups items by the value returned when applying items to a function.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:file-path&lt;/del&gt;, which groups items by regular expressions matched against their buffers&#39; filename paths.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:pred&lt;/del&gt;, which matches if any of the given predicate functions return non-nil when called with the item string from the agenda buffer.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-dir-name&lt;/del&gt;, which groups items by the directory name of their source buffer.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;:auto-parent&lt;/del&gt;, which groups items by their parent heading.&lt;/li&gt; &#xA; &lt;li&gt;Selector =:auto-todo=, which groups items by their to-do keyword.&lt;/li&gt; &#xA; &lt;li&gt;Selector =:auto-priority=, which groups items by their priority.&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-super-agenda-unmatched-name&lt;/del&gt;, used to change the name of the unmatched group. (Thanks to [[https://github.com/m-cat][Marcin Swieczkowski]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refactor auto-groups with macro.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0.3&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Require &lt;del&gt;seq&lt;/del&gt; library. (Fixes #54. Thanks to [[https://github.com/cryptorick][Rick Hanson]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Byte-compiler warnings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixes&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initialize &lt;del&gt;org-super-agenda-header-map&lt;/del&gt; to a copy of &lt;del&gt;org-agenda-mode-map&lt;/del&gt;. (Fixes [[https://github.com/alphapapa/org-super-agenda/issues/50][#50]]. Thanks to [[https://github.com/yiufung][Yiufung Cheong]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 1.0.0&lt;/p&gt; &#xA;&lt;p&gt;First tagged version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development :PROPERTIES: :TOC: ignore :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributions and feedback are welcome.&lt;/p&gt; &#xA;&lt;p&gt;If you find this useful, I&#39;d appreciate if you would share a screenshot or two of your agenda views using it (minus any private data, of course). I&#39;d like to get ideas for how to better organize my agenda. :)&lt;/p&gt; &#xA;&lt;p&gt;** Bugs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The =org-search-view= agenda command does not seem to set the =todo-state= text property for items it finds, so the =:todo= selector doesn&#39;t work with it. We should be able to work around this by getting the todo state for each item manually, but we have to make sure that we only do that when necessary, otherwise it might be slow. And I wouldn&#39;t be surprised if there are other selectors that don&#39;t work with this or other commands, but =org-agenda-list= should work fine, and =org-tags-view= and =org-todo-list= seem to work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tests&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s easy to run the tests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install [[https://github.com/cask/cask][Cask]].&lt;/li&gt; &#xA; &lt;li&gt;From the repo root directory, run =cask install=, which installs Emacs and package dependencies into the =.cask= directory.&lt;/li&gt; &#xA; &lt;li&gt;Run =make test=.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Credits :PROPERTIES: :TOC: ignore :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to [[https://github.com/balajisivaraman][Balaji Sivaraman]] for contributing the =:category= selector.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to [[https://github.com/hmw42][Michael Welle]] for contributing the customizable =auto-group= Org property name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License :PROPERTIES: :TOC: ignore :COPYING: t :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPLv3+&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COMMENT Export Setup :noexport: :PROPERTIES: :TOC: ignore :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Much borrowed from Org&#39;s =org-manual.org=.&lt;/h1&gt; &#xA;&lt;p&gt;#+OPTIONS: broken-links:t *:t&lt;/p&gt; &#xA;&lt;p&gt;** Info export options&lt;/p&gt; &#xA;&lt;p&gt;#+TEXINFO_DIR_CATEGORY: Emacs #+TEXINFO_DIR_TITLE: Org Super Agenda: (org-super-agenda) #+TEXINFO_DIR_DESC: Flexible grouping for the Org Agenda&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: We could use these, but that causes a pointless error, &#34;org-compile-file: File &#34;..README.info&#34; wasn&#39;t produced...&#34;, so we just rename the files in the after-save-hook instead.&lt;/h1&gt; &#xA;&lt;h1&gt;#+TEXINFO_FILENAME: org-super-agenda.info&lt;/h1&gt; &#xA;&lt;h1&gt;#+EXPORT_FILE_NAME: org-super-agenda.texi&lt;/h1&gt; &#xA;&lt;p&gt;** File-local variables&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: Setting org-comment-string buffer-locally is a nasty hack to work around GitHub&#39;s org-ruby&#39;s HTML rendering, which does not respect noexport tags. The only way to hide this tree from its output is to use the COMMENT keyword, but that prevents Org from processing the export options declared in it. So since these file-local variables don&#39;t affect org-ruby, wet set org-comment-string to an unused keyword, which prevents Org from deleting this tree from the export buffer, which allows it to find the export options in it. And since org-export does respect the noexport tag, the tree is excluded from the info page.&lt;/h1&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;before-save-hook: org-make-toc&lt;/h1&gt; &#xA;&lt;h1&gt;after-save-hook: (lambda nil (when (and (require &#39;ox-texinfo nil t) (org-texinfo-export-to-info)) (delete-file &#34;README.texi&#34;) (rename-file &#34;README.info&#34; &#34;org-super-agenda.info&#34; t)))&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-initial-scope: buffer&lt;/h1&gt; &#xA;&lt;h1&gt;org-comment-string: &#34;NOTCOMMENT&#34;&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
</feed>