<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:45:08Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mickeynp/ligature.el</title>
    <updated>2022-11-13T01:45:08Z</updated>
    <id>tag:github.com,2022-11-13:/mickeynp/ligature.el</id>
    <link href="https://github.com/mickeynp/ligature.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display typographical ligatures in Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;================================ Typographic Ligatures in Emacs&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: cascadia-code-full.svg&lt;/p&gt; &#xA;&lt;p&gt;This package maps ordinary graphemes (characters) to fancy ligatures, if both your version of Emacs and the font supports it.&lt;/p&gt; &#xA;&lt;p&gt;With this package you can control where Emacs must display ligatures. That is useful if you only want a subset of the ligatures in certain major modes, for instance, or if you want to ensure that some modes have no ligatures at all.&lt;/p&gt; &#xA;&lt;p&gt;If you know what you&#39;re doing, you can skip to the end for an example that works with &lt;code&gt;Cascadia Code&lt;/code&gt; (and most probably other fonts, too).&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility and Version Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Support for this feature is new. You must meet a number of requirements to ensure the package works correctly:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You must use Emacs 28 or later, or backport a fix to Emacs 27.x;&lt;/p&gt; &lt;p&gt;You can check by typing &lt;code&gt;M-x emacs-version&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There are critical issues in Emacs 27.1 and 27.2. Ideally, if at all possible, you should attempt to use a build of Emacs that includes this fix. See below for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your Emacs must be built with Harfbuzz enabled -- this is the default as of Emacs 27.1, but obscure platforms may not support it;&lt;/p&gt; &lt;p&gt;You can check by typing &lt;code&gt;C-h v system-configuration-features&lt;/code&gt;. Search for the word &lt;code&gt;HARFBUZZ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must have a font that supports the particular typographical ligature you wish to display. Emacs should skip the ones it does not recognize, however;&lt;/p&gt; &lt;p&gt;Common programming fonts include &lt;code&gt;Cascadia Code &amp;lt;https://github.com/microsoft/cascadia-code&amp;gt;&lt;/code&gt;&lt;strong&gt;, &lt;code&gt;Fira Code &amp;lt;https://github.com/tonsky/FiraCode&amp;gt;&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;Iosevka &amp;lt;https://github.com/be5invis/Iosevka&amp;gt;&lt;/code&gt;&lt;strong&gt;, and &lt;code&gt;JetBrains Mono &amp;lt;https://github.com/JetBrains/JetBrainsMono&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;For variable width fonts, the world is your oyster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ideally, your Emacs is built with Cairo support. Without it, you may experience issues;&lt;/p&gt; &lt;p&gt;You can check by typing &lt;code&gt;C-h v cairo-version-string&lt;/code&gt;. If you cannot find it, you probably don&#39;t have it built: you can double check by looking at &lt;code&gt;system-configuration-features&lt;/code&gt; -- see above.&lt;/p&gt; &lt;p&gt;a. Older versions of Cairo apparently have some issues. &lt;code&gt;cairo-version-string&lt;/code&gt; should say &#34;1.16.0&#34; or later.&lt;/p&gt; &lt;p&gt;See above. It may work perfectly fine with a lower version, however.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Crash issues in Emacs 27.1 and Emacs 27.2&lt;/h2&gt; &#xA;&lt;p&gt;If you are using a release build of Emacs 27.x then you may &lt;code&gt;experience hangs or crashes &amp;lt;https://github.com/mickeynp/ligature.el/issues/10&amp;gt;&lt;/code&gt;__ with the following message::&lt;/p&gt; &#xA;&lt;p&gt;Attempt to shape unibyte text&lt;/p&gt; &#xA;&lt;p&gt;The source of the fix is &lt;code&gt;this commit &amp;lt;http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=fe903c5ab7354b97f80ecf1b01ca3ff1027be446&amp;gt;&lt;/code&gt;__, but it did not make it into Emacs 27.1 or 27.2, unfortunately.&lt;/p&gt; &#xA;&lt;p&gt;However, if you built Emacs off the &lt;code&gt;master&lt;/code&gt; branch then you most certainly have the fix already.&lt;/p&gt; &#xA;&lt;h1&gt;How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;Unlike almost all text editors that support ligatures, you are free to choose which ligatures you want and which modes they apply to. That is rather important as you may only want some ligatures in certain modes, and perhaps none at all in other modes. With this package you can freely pick and choose.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart Guide&lt;/h2&gt; &#xA;&lt;p&gt;You can copy and paste the example snippet near the end. It&#39;ll give you basic support for &lt;em&gt;Cascadia Code&lt;/em&gt;, but many of the ligations are similar across fonts. You will most likely have to amend this sample if you want fancier features.&lt;/p&gt; &#xA;&lt;h2&gt;Adding New Ligations&lt;/h2&gt; &#xA;&lt;p&gt;This is very easy to do. You can create ligations with the function &lt;code&gt;ligature-set-ligatures&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You must also enable &lt;code&gt;M-x ligature-mode&lt;/code&gt; in the mode(s) you want it to apply to. The ligations are disabled if you turn off this minor mode, and you can enable it &lt;em&gt;globally&lt;/em&gt; with &lt;code&gt;M-x global-ligature-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You must have the list of ligations you want Emacs to ligate. For instance, &lt;code&gt;==&amp;gt;&lt;/code&gt; to turn into an arrow, for example. You also need the list of major mode(s) you want it apply to; or, you can tell the ligation engine to apply it everywhere. You can make as many calls to &lt;code&gt;ligature-set-ligatures&lt;/code&gt; as you like.&lt;/p&gt; &#xA;&lt;p&gt;Here is a very simple example that enables simple HTML ligations for web-related major modes using the &lt;em&gt;string notation&lt;/em&gt; to create ligations&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: elisp&lt;/p&gt; &#xA;&lt;p&gt;(ligature-set-ligatures &#39;(html-mode nxml-mode web-mode) &#39;(&#34;&#xA; &lt;!--&#34; &#34;--&gt;&#34; &#34;&amp;lt;/&amp;gt;&#34; &#34;&amp;lt;/&#34; &#34;/&amp;gt;&#34; &#34;://&#34;))&lt;/p&gt; &#xA;&lt;p&gt;When you evaluate the form the change should take effect immediately in &lt;code&gt;html-mode&lt;/code&gt;, &lt;code&gt;nxml-mode&lt;/code&gt;, and &lt;code&gt;web-mode&lt;/code&gt;. Occasionally, you may have to &#34;reload&#34; the configuration in a major mode. This is usually only required if you are experimenting. Simply toggle &lt;code&gt;M-x ligature-mode&lt;/code&gt; or &lt;code&gt;M-x global-ligature-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also supply &lt;code&gt;t&lt;/code&gt; in lieu of a list of major modes. Any ligations registered with &lt;code&gt;t&lt;/code&gt; will have their ligations applied &lt;em&gt;everywhere&lt;/em&gt; in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Complex Compositions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Some fonts support variable-length ligations, such as headings or arrows. The usual *string notation* used above is not always enough. You can build your own regular expressions and the ligation engine will try -- emphasis *try* -- to combine your custom regular expressions with any existing *string notations* that may already exist.&#xA;&#xA;To use the regular expression syntax you can add forms of ``(STR-CHAR . REGEXP)``, like so&#xA;&#xA;.. code-block:: elisp&#xA;&#xA;  (ligature-set-ligatures &#39;markdown-mode &#39;((&#34;=&#34; (rx (+ &#34;=&#34;) (? (| &#34;&amp;gt;&#34; &#34;&amp;lt;&#34;))))&#xA;                                           (&#34;-&#34; (rx (+ &#34;-&#34;)))))&#xA;&#xA;This creates two ligation mappings: one for ligations beginning with ``=`` and the other for ``-``. You must give the starting character of a ligation so Emacs&#39;s composition engine knows how to compose the beginning of a ligature. The second part of the form is an ``rx`` macro call that defines the regular expression. In this case it will match any length of ``=`` followed by an optional ``&amp;lt;`` or ``&amp;gt;`` to add arrow support.&#xA;&#xA;**NOTE**: You can find complete examples for Fira and Cascadia Code in the Wiki.&#xA;&#xA;&#xA;Removing or browsing existing compositions&#xA;------------------------------------------&#xA;&#xA;If you are experimenting and you want to clear all existing compositions, you can do so with this command&#xA;&#xA;.. code-block:: elisp&#xA;&#xA;  (setq ligature-composition-table nil)&#xA;&#xA;You can also view the variable&#39;s contents if you want to see how the ligation tool works. You can even edit it manually (see ``Technical Details`` below.)&#xA;&#xA;&#xA;&#xA;Technical Details&#xA;-----------------&#xA;&#xA;Each buffer you want the ligatures to apply to require a call to ``ligature-generate-ligatures``. That command will check against a table of registered ligatures if the current buffer&#39;s major mode has any associated ligatures and, if it does, what they are. The command will check against anything that may be considered a valid parent of your buffer&#39;s major mode: for instance, a lot of programming major modes inherit from ``prog-mode``, so assigning ligatures to that major mode is a good way to ensure they work in most programming modes.&#xA;&#xA;To create a ligature mapping you can either update the alist ``ligature-composition-table`` directly or use the helper function ``ligature-set-ligatures``. I recommend you start with the latter helper function and only modify the table if you have complex requirements.&#xA;&#xA;How do I install it?&#xA;====================&#xA;&#xA;The package is available here or through MELPA.&#xA;&#xA;These example snippets enables all ligatures for ``prog-mode`` and any&#xA;major mode that derives from that mode; that is usually most&#xA;programming-related modes.&#xA;&#xA;You can find more font configurations in the `Wiki &amp;lt;https://github.com/mickeynp/ligature.el/wiki&amp;gt;`__&#xA;&#xA;Complex Font Configuration for Cascadia and Fira Code&#xA;-----------------------------------------------------&#xA;&#xA;If you are looking for a complete set of ligatures for both Fira or Cascadia Code, then visit the `Wiki &amp;lt;https://github.com/mickeynp/ligature.el/wiki&amp;gt;`__ for a complete example.&#xA;&#xA;If you use another font, you may find that many of the ligatures still work.&#xA;&#xA;Example Font Configuration: Cascadia Code&#xA;-----------------------------------------&#xA;&#xA;This snippet is designed for the *Cascadia Code* font;&#xA;you may find it won&#39;t work 100% if you use a different one.&#xA;&#xA;.. code-block:: elisp&#xA;&#xA;  (use-package ligature&#xA;    :load-path &#34;path-to-ligature-repo&#34;&#xA;    :config&#xA;    ;; Enable the &#34;www&#34; ligature in every possible major mode&#xA;    (ligature-set-ligatures &#39;t &#39;(&#34;www&#34;))&#xA;    ;; Enable traditional ligature support in eww-mode, if the&#xA;    ;; `variable-pitch&#39; face supports it&#xA;    (ligature-set-ligatures &#39;eww-mode &#39;(&#34;ff&#34; &#34;fi&#34; &#34;ffi&#34;))&#xA;    ;; Enable all Cascadia Code ligatures in programming modes&#xA;    (ligature-set-ligatures &#39;prog-mode &#39;(&#34;|||&amp;gt;&#34; &#34;&amp;lt;|||&#34; &#34;&amp;lt;==&amp;gt;&#34; &#34;&amp;lt;!--&#34; &#34;####&#34; &#34;~~&amp;gt;&#34; &#34;***&#34; &#34;||=&#34; &#34;||&amp;gt;&#34;&#xA;                                         &#34;:::&#34; &#34;::=&#34; &#34;=:=&#34; &#34;===&#34; &#34;==&amp;gt;&#34; &#34;=!=&#34; &#34;=&amp;gt;&amp;gt;&#34; &#34;=&amp;lt;&amp;lt;&#34; &#34;=/=&#34; &#34;!==&#34;&#xA;                                         &#34;!!.&#34; &#34;&amp;gt;=&amp;gt;&#34; &#34;&amp;gt;&amp;gt;=&#34; &#34;&amp;gt;&amp;gt;&amp;gt;&#34; &#34;&amp;gt;&amp;gt;-&#34; &#34;&amp;gt;-&amp;gt;&#34; &#34;-&amp;gt;&amp;gt;&#34; &#34;--&amp;gt;&#34; &#34;---&#34; &#34;-&amp;lt;&amp;lt;&#34;&#xA;                                         &#34;&amp;lt;~~&#34; &#34;&amp;lt;~&amp;gt;&#34; &#34;&amp;lt;*&amp;gt;&#34; &#34;&amp;lt;||&#34; &#34;&amp;lt;|&amp;gt;&#34; &#34;&amp;lt;$&amp;gt;&#34; &#34;&amp;lt;==&#34; &#34;&amp;lt;=&amp;gt;&#34; &#34;&amp;lt;=&amp;lt;&#34; &#34;&amp;lt;-&amp;gt;&#34;&#xA;                                         &#34;&amp;lt;--&#34; &#34;&amp;lt;-&amp;lt;&#34; &#34;&amp;lt;&amp;lt;=&#34; &#34;&amp;lt;&amp;lt;-&#34; &#34;&amp;lt;&amp;lt;&amp;lt;&#34; &#34;&amp;lt;+&amp;gt;&#34; &#34;&amp;lt;/&amp;gt;&#34; &#34;###&#34; &#34;#_(&#34; &#34;..&amp;lt;&#34;&#xA;                                         &#34;...&#34; &#34;+++&#34; &#34;/==&#34; &#34;///&#34; &#34;_|_&#34; &#34;www&#34; &#34;&amp;amp;&amp;amp;&#34; &#34;^=&#34; &#34;~~&#34; &#34;~@&#34; &#34;~=&#34;&#xA;                                         &#34;~&amp;gt;&#34; &#34;~-&#34; &#34;**&#34; &#34;*&amp;gt;&#34; &#34;*/&#34; &#34;||&#34; &#34;|}&#34; &#34;|]&#34; &#34;|=&#34; &#34;|&amp;gt;&#34; &#34;|-&#34; &#34;{|&#34;&#xA;                                         &#34;[|&#34; &#34;]#&#34; &#34;::&#34; &#34;:=&#34; &#34;:&amp;gt;&#34; &#34;:&amp;lt;&#34; &#34;$&amp;gt;&#34; &#34;==&#34; &#34;=&amp;gt;&#34; &#34;!=&#34; &#34;!!&#34; &#34;&amp;gt;:&#34;&#xA;                                         &#34;&amp;gt;=&#34; &#34;&amp;gt;&amp;gt;&#34; &#34;&amp;gt;-&#34; &#34;-~&#34; &#34;-|&#34; &#34;-&amp;gt;&#34; &#34;--&#34; &#34;-&amp;lt;&#34; &#34;&amp;lt;~&#34; &#34;&amp;lt;*&#34; &#34;&amp;lt;|&#34; &#34;&amp;lt;:&#34;&#xA;                                         &#34;&amp;lt;$&#34; &#34;&amp;lt;=&#34; &#34;&amp;lt;&amp;gt;&#34; &#34;&amp;lt;-&#34; &#34;&amp;lt;&amp;lt;&#34; &#34;&amp;lt;+&#34; &#34;&amp;lt;/&#34; &#34;#{&#34; &#34;#[&#34; &#34;#:&#34; &#34;#=&#34; &#34;#!&#34;&#xA;                                         &#34;##&#34; &#34;#(&#34; &#34;#?&#34; &#34;#_&#34; &#34;%%&#34; &#34;.=&#34; &#34;.-&#34; &#34;..&#34; &#34;.?&#34; &#34;+&amp;gt;&#34; &#34;++&#34; &#34;?:&#34;&#xA;                                         &#34;?=&#34; &#34;?.&#34; &#34;??&#34; &#34;;;&#34; &#34;/*&#34; &#34;/=&#34; &#34;/&amp;gt;&#34; &#34;//&#34; &#34;__&#34; &#34;~~&#34; &#34;(*&#34; &#34;*)&#34;&#xA;                                         &#34;\\\\&#34; &#34;://&#34;))&#xA;    ;; Enables ligature checks globally in all buffers. You can also do it&#xA;    ;; per mode with `ligature-mode&#39;.&#xA;    (global-ligature-mode t))&#xA;&#xA;Can I contribute support for more fonts?&#xA;========================================&#xA;&#xA;I&#39;m glad you asked. Yes, please. If you want to configure ligatures&#xA;for common programming fonts not already listed here, please raise a&#xA;PR.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>skeeto/emacs-aio</title>
    <updated>2022-11-13T01:45:08Z</updated>
    <id>tag:github.com,2022-11-13:/skeeto/emacs-aio</id>
    <link href="https://github.com/skeeto/emacs-aio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;async/await for Emacs Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aio: async/await for Emacs Lisp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;aio&lt;/code&gt; is to Emacs Lisp as &lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt; is to Python. This package builds upon Emacs 25 generators to provide functions that pause while they wait on asynchronous events. They do not block any thread while paused.&lt;/p&gt; &#xA;&lt;p&gt;Introduction: &lt;a href=&#34;https://nullprogram.com/blog/2019/03/10/&#34;&gt;An Async / Await Library for Emacs Lisp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Installation is &lt;a href=&#34;https://melpa.org/#/aio&#34;&gt;available through MELPA&lt;/a&gt;. Since it uses the &lt;code&gt;record&lt;/code&gt; built-in, it requires Emacs 26 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;An async function is defined using &lt;code&gt;aio-defun&lt;/code&gt; or &lt;code&gt;aio-lambda&lt;/code&gt;. The body of such functions can use &lt;code&gt;aio-await&lt;/code&gt; to pause the function and wait on a given promise. The function continues with the promise&#39;s resolved value when it&#39;s ready. The package provides a number of functions that return promises, and every async function returns a promise representing its future return value.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(aio-defun foo (url)&#xA;  (aio-await (aio-sleep 3))&#xA;  (message &#34;Done sleeping. Now fetching %s&#34; url)&#xA;  (let* ((result (aio-await (aio-url-retrieve url)))&#xA;         (contents (with-current-buffer (cdr result)&#xA;                     (prog1 (buffer-string)&#xA;                       (kill-buffer)))))&#xA;    (message &#34;Result: %s&#34; contents)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an uncaught signal terminates an asynchronous function, that signal is captured by its return value promise and propagated into any function that awaits on that function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(aio-defun divide (a b)&#xA;  (aio-await (aio-sleep 1))&#xA;  (/ a b))&#xA;&#xA;(aio-defun divide-safe (a b)&#xA;  (condition-case error&#xA;      (aio-await (divide a b))&#xA;    (arith-error :arith-error)))&#xA;&#xA;(aio-wait-for (divide-safe 1.0 2.0))&#xA;;; =&amp;gt; 0.5&#xA;&#xA;(aio-wait-for (divide-safe 0 0))&#xA;;; =&amp;gt; :arith-error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To convert a callback-based function into an awaitable, async-friendly function, create a new promise object with &lt;code&gt;aio-promise&lt;/code&gt;, then &lt;code&gt;aio-resolve&lt;/code&gt; that promise in the callback. The helper function, &lt;code&gt;aio-make-callback&lt;/code&gt;, makes this easy.&lt;/p&gt; &#xA;&lt;h2&gt;Utility macros and functions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(aio-wait-for promise)&#xA;;; Synchronously wait for PROMISE, blocking the current thread.&#xA;&#xA;(aio-cancel promise)&#xA;;; Attempt to cancel PROMISE, returning non-nil if successful.&#xA;&#xA;(aio-with-promise promise &amp;amp;rest body) [macro]&#xA;;; Evaluate BODY and resolve PROMISE with the result.&#xA;&#xA;(aio-with-async &amp;amp;rest body) [macro]&#xA;;; Evaluate BODY asynchronously as if it was inside `aio-lambda&#39;.&#xA;&#xA;(aio-make-callback &amp;amp;key tag once)&#xA;;; Return a new callback function and its first promise.&#xA;&#xA;(aio-chain expr) [macro]&#xA;;; `aio-await&#39; on EXPR and replace place EXPR with the next promise.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;aio-make-callback&lt;/code&gt; function is especially useful for callbacks that are invoked repeatedly, such as process filters and sentinels. The &lt;code&gt;aio-chain&lt;/code&gt; macro works in conjunction.&lt;/p&gt; &#xA;&lt;h2&gt;Awaitable functions&lt;/h2&gt; &#xA;&lt;p&gt;Here are some useful promise-returning — i.e. awaitable — functions defined by this package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(aio-sleep seconds &amp;amp;optional result)&#xA;;; Return a promise that is resolved after SECONDS with RESULT.&#xA;&#xA;(aio-idle seconds &amp;amp;optional result)&#xA;;; Return a promise that is resolved after idle SECONDS with RESULT.&#xA;&#xA;(aio-url-retrieve url &amp;amp;optional silent inhibit-cookies)&#xA;;; Wraps `url-retrieve&#39; in a promise.&#xA;&#xA;(aio-all promises)&#xA;;; Return a promise that resolves when all PROMISES are resolved.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Select API&lt;/h2&gt; &#xA;&lt;p&gt;This package includes a select()-like, level-triggered API for waiting on multiple promises at once. Create a &#34;select&#34; object, add promises to it, and await on it. Resolved and returned promises are automatically removed, and the &#34;select&#34; object can be reused.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(aio-make-select &amp;amp;optional promises)&#xA;;; Create a new `aio-select&#39; object for waiting on multiple promises.&#xA;&#xA;(aio-select-add select promise)&#xA;;; Add PROMISE to the set of promises in SELECT.&#xA;&#xA;(aio-select-remove select promise)&#xA;;; Remove PROMISE form the set of promises in SELECT.&#xA;&#xA;(aio-select-promises select)&#xA;;; Return a list of promises in SELECT.&#xA;&#xA;(aio-select select)&#xA;;; Return a promise that resolves when any promise in SELECT resolves.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, here&#39;s an implementation of sleep sort:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(aio-defun sleep-sort (values)&#xA;  (let* ((promises (mapcar (lambda (v) (aio-sleep v v)) values))&#xA;         (select (aio-make-select promises)))&#xA;    (cl-loop repeat (length promises)&#xA;             for next = (aio-await (aio-select select))&#xA;             collect (aio-await next))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Semaphore API&lt;/h2&gt; &#xA;&lt;p&gt;Semaphores work just as they would as a thread synchronization primitive. There&#39;s an internal counter that cannot drop below zero, and &lt;code&gt;aio-sem-wait&lt;/code&gt; is an awaitable function that may block the asynchronous function until another asynchronous function calls &lt;code&gt;aio-sem-post&lt;/code&gt;. Blocked functions wait in a FIFO queue and are awoken in the same order that they awaited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(aio-sem init)&#xA;;; Create a new semaphore with initial value INIT.&#xA;&#xA;(aio-sem-post sem)&#xA;;; Increment the value of SEM.&#xA;&#xA;(aio-sem-wait sem)&#xA;;; Decrement the value of SEM.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be used to create a work queue. For example, here&#39;s a configurable download queue for &lt;code&gt;url-retrieve&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(defun fetch (url-list max-parallel callback)&#xA;  (let ((sem (aio-sem max-parallel)))&#xA;    (dolist (url url-list)&#xA;      (aio-with-async&#xA;        (aio-await (aio-sem-wait sem))&#xA;        (cl-destructuring-bind (status . buffer)&#xA;            (aio-await (aio-url-retrieve url))&#xA;          (aio-sem-post sem)&#xA;          (funcall callback&#xA;                   (with-current-buffer buffer&#xA;                     (prog1 (buffer-string)&#xA;                       (kill-buffer)))))))))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/blink-search</title>
    <updated>2022-11-13T01:45:08Z</updated>
    <id>tag:github.com,2022-11-13:/manateelazycat/blink-search</id>
    <link href="https://github.com/manateelazycat/blink-search" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In the blink of an eye, the search is complete&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;blink-search&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt;&lt;strong&gt;In the blink of an eye, the search is complete!&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;blink-search&#39;s goal is to become the fastest search framework in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;blink-search use python multi-thread technology to search and filter candidates, Emacs only render result and do action.&lt;/p&gt; &#xA;&lt;p&gt;blink-search will provide smooth completion experience without compromise to slow down emacs&#39; performance.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt;blink-search with split window style &lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/blink-search/master/images/blink-search.png&#34;&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt;blink-search with popup frame style &lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/blink-search/master/images/blink-search-posframe.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Emacs 28 and above versions&lt;/li&gt; &#xA; &lt;li&gt;Install Python dependencies: &lt;code&gt;pip3 install epc requests&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install search tools:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org&#34;&gt;sqlite3&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Clone or download this repository (path of the folder is the &lt;code&gt;&amp;lt;path-to-blink-search&amp;gt;&lt;/code&gt; used below).&lt;/li&gt; &#xA; &lt;li&gt;Add following code in your ~/.emacs:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-blink-search&amp;gt;&#34;)&#xA;&#xA;(require &#39;blink-search)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start blink-search: M-x blink-search&lt;/li&gt; &#xA; &lt;li&gt;Type keyword to search from multiple backend&lt;/li&gt; &#xA; &lt;li&gt;Type keyword that prefix with &lt;code&gt;#&lt;/code&gt; to search current buffer&lt;/li&gt; &#xA; &lt;li&gt;Type keyword that prefix with &lt;code&gt;!&lt;/code&gt; to grep current directory&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Ctrl + m&lt;/code&gt; to select candidate or press &lt;code&gt;Alt + QuickKey&lt;/code&gt; to select candidate match QuickKey&lt;/li&gt; &#xA; &lt;li&gt;Search current symbol: C-u M-x blink-search&lt;/li&gt; &#xA; &lt;li&gt;When you select candidate of common directory, you can press &lt;code&gt;Ctrl + l&lt;/code&gt; to continue search on new directory with select candidate&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Grep Buffer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Grep Directory&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/blink-search/master/images/blink-search-grep-buffer.png&#34; width=&#34;400&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/blink-search/master/images/blink-search-grep-directory.png&#34; width=&#34;400&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Keymap&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C + n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-candidate-select-next&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Select next candidate item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C + p&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-candidate-select-prev&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Select previous candidate item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;M + n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-backend-select-next&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Select next backend item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;M + p&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-backend-select-prev&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Select previous backend item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;M + j&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-candidate-group-select-next&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Select next candidate group item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;M + k&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-candidate-group-select-prev&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Select previous candidate group item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C + j&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-parent&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Jump parent for select candidate item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C + l&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-continue&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Continue search from directory of current candidate item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C + m&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-do&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do action for select candidate item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C + M + m&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-preview&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Preview select candidate item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C + M + n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-preview-next&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Preview next candidate item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C + M + p&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-preview-next&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Preview previous candidate item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;M + w&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-copy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Copy select candidate item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C + g&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;blink-search-quit&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blink-search-restart-process&lt;/code&gt;: restart blink-search process (only used for development)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Option&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blink-search-enable-posframe&lt;/code&gt;: set this option with &lt;code&gt;t&lt;/code&gt;, blink-search will use &lt;code&gt;posframe&lt;/code&gt; instead split bottom layout, this feature need you install &lt;a href=&#34;https://github.com/tumashu/posframe&#34;&gt;posframe&lt;/a&gt; first&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blink-search-browser-function&lt;/code&gt;: the default browser used for google suggestion. The default is &lt;code&gt;eaf-open-browser&lt;/code&gt;, you can set it to &lt;code&gt;xwidget-webkit-browse-url&lt;/code&gt; if your emacs is built with xwidget module. Or &lt;code&gt;browse-url-default-macosx-browser/browse-url-xdg-open&lt;/code&gt; to open the browser by your system default browser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Search Backend&lt;/h2&gt; &#xA;&lt;p&gt;blink-search has completed the following search backend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Buffer List: search buffer list&lt;/li&gt; &#xA; &lt;li&gt;Common Directory: search your favorite common directory, you can customize option &lt;code&gt;blink-search-common-directory&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recent File: search recent file&lt;/li&gt; &#xA; &lt;li&gt;Current Buffer: use &lt;code&gt;ripgrep&lt;/code&gt; grep current buffer content&lt;/li&gt; &#xA; &lt;li&gt;Grep File: use &lt;code&gt;ripgrep&lt;/code&gt; grep file under project or current directory&lt;/li&gt; &#xA; &lt;li&gt;IMenu: search imenu of current buffer&lt;/li&gt; &#xA; &lt;li&gt;Find File: use &lt;code&gt;fd&lt;/code&gt; search file under project or current directory&lt;/li&gt; &#xA; &lt;li&gt;EAF Browser History: search history of EAF browser&lt;/li&gt; &#xA; &lt;li&gt;Elisp Symbol: search elisp symbol&lt;/li&gt; &#xA; &lt;li&gt;Google Suggest: search google suggestions and open in browser&lt;/li&gt; &#xA; &lt;li&gt;Key Value: read/get/del/update key-value pairs in sqlite3, require &lt;code&gt;sqlite3&lt;/code&gt; and ensure &lt;code&gt;pip install sqlite3&lt;/code&gt; at first&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Report bug&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;emacs -q&lt;/code&gt; and load a minimal setup with only blink-search to verify that the bug is reproducible. If &lt;code&gt;emacs -q&lt;/code&gt; works fine, probably something is wrong with your Emacs config.&lt;/p&gt; &#xA;&lt;p&gt;If the problem still exists, please report it &lt;a href=&#34;https://github.com/manateelazycat/blink-search/issues/new&#34;&gt;here&lt;/a&gt; with &lt;code&gt;*blink-search*&lt;/code&gt; buffer content, it contains many clues that can help us locate the problem faster.&lt;/p&gt; &#xA;&lt;p&gt;If you get a segfault error, please use the following way to collect crash information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install gdb and turn on option &lt;code&gt;blink-search-enable-debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the command &lt;code&gt;blink-search-stop-process&lt;/code&gt; to stop the current process&lt;/li&gt; &#xA; &lt;li&gt;Restart blink-search, send issue with &lt;code&gt;*blink-search*&lt;/code&gt; buffer content when next crash&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributor&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/manateelazycat/blink-search/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=manateelazycat/blink-search&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>