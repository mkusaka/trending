<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-25T01:45:21Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-straight/spinner</title>
    <updated>2024-02-25T01:45:21Z</updated>
    <id>tag:github.com,2024-02-25:/emacs-straight/spinner</id>
    <link href="https://github.com/emacs-straight/spinner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the spinner package from GNU ELPA, current as of 2024-02-25&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: spinner.el&lt;/p&gt; &#xA;&lt;p&gt;Add spinners and progress-bars to the mode-line for ongoing operations.&lt;/p&gt; &#xA;&lt;p&gt;[[file:some-spinners.gif]]&lt;/p&gt; &#xA;&lt;p&gt;[[file:all-spinners.gif]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;First of all, don’t forget to add &lt;del&gt;(spinner &#34;VERSION&#34;)&lt;/del&gt; to your package’s dependencies.&lt;/p&gt; &#xA;&lt;p&gt;** Major-modes&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Just call &lt;del&gt;(spinner-start)&lt;/del&gt; and a spinner will be added to the mode-line.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;del&gt;(spinner-stop)&lt;/del&gt; on the same buffer when you want to remove it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The default spinner is a line drawing that rotates. You can pass an argument to &lt;del&gt;spinner-start&lt;/del&gt; to specify which spinner you want. All possibilities are listed in the &lt;del&gt;spinner-types&lt;/del&gt; variable, but here are a few examples for you to try:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;(spinner-start &#39;vertical-breathing 10)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(spinner-start &#39;minibox)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(spinner-start &#39;moon)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(spinner-start &#39;triangle)&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also define your own as a vector of strings (see the examples in &lt;del&gt;spinner-types&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;** Minor-modes Minor-modes can create a spinner with &lt;del&gt;spinner-create&lt;/del&gt; and then add it to their mode-line lighter. They can then start the spinner by setting a variable and calling &lt;del&gt;spinner-start-timer&lt;/del&gt;. Finally, they can stop the spinner (and the timer) by just setting the same variable to nil.&lt;/p&gt; &#xA;&lt;p&gt;Here’s an example for a minor-mode named &lt;del&gt;foo&lt;/del&gt;. Assuming that &lt;del&gt;foo--lighter&lt;/del&gt; is used as the mode-line lighter, the following code will add an &lt;em&gt;inactive&lt;/em&gt; global spinner to the mode-line. #+begin_src emacs-lisp (defvar foo--spinner (spinner-create &#39;rotating-line)) (defconst foo--lighter &#39;(&#34; foo&#34; (:eval (spinner-print foo--spinner)))) #+end_src&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To activate the spinner, just call &lt;del&gt;(spinner-start foo--spinner)&lt;/del&gt;. It will show up on the mode-line and start animating.&lt;/li&gt; &#xA; &lt;li&gt;To get rid of it, call &lt;del&gt;(spinner-stop foo--spinner)&lt;/del&gt;. It will then disappear again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Some minor-modes will need spinners to be buffer-local. To achieve that, just make the &lt;del&gt;foo--spinner&lt;/del&gt; variable buffer-local and use the third argument of the &lt;del&gt;spinner-create&lt;/del&gt; function. The snippet below is an example.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar-local foo--spinner nil) (defconst foo--lighter &#39;(&#34; foo&#34; (:eval (spinner-print foo--spinner)))) (defun foo--start-spinner () &#34;Create and start a spinner on this buffer.&#34; (unless foo--spinner (setq foo--spinner (spinner-create &#39;moon t))) (spinner-start foo--spinner)) #+end_src&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To activate the spinner, just call &lt;del&gt;(foo--start-spinner)&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To get rid of it, call &lt;del&gt;(spinner-stop foo--spinner)&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will use the &lt;del&gt;moon&lt;/del&gt; spinner, but you can use any of the names defined in the &lt;del&gt;spinner-types&lt;/del&gt; variable or even define your own.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extra options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both &lt;del&gt;spinner-start&lt;/del&gt; and &lt;del&gt;spinner-create&lt;/del&gt; take extra options to configure the spinner, these are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;FPS&lt;/del&gt;: The number of frames to display per second. Defaults to &lt;del&gt;spinner-frames-per-second&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;DELAY&lt;/del&gt;: After starting a spinner, it still won’t be displayed for this many seconds.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emacs-straight/queue</title>
    <updated>2024-02-25T01:45:21Z</updated>
    <id>tag:github.com,2024-02-25:/emacs-straight/queue</id>
    <link href="https://github.com/emacs-straight/queue" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the queue package from GNU ELPA, current as of 2024-02-25&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>gonewest818/elisp-lint</title>
    <updated>2024-02-25T01:45:21Z</updated>
    <id>tag:github.com,2024-02-25:/gonewest818/elisp-lint</id>
    <link href="https://github.com/gonewest818/elisp-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Basic linting for Emacs Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;elisp-lint&lt;/h1&gt; &#xA;&lt;p&gt;Basic linting for Emacs Lisp&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stable.melpa.org/#/elisp-lint&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/elisp-lint-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/elisp-lint&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/elisp-lint-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/gonewest818/elisp-lint&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/gonewest818/elisp-lint.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/gonewest818/elisp-lint&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/gonewest818/elisp-lint/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a tool for finding certain problems in Emacs Lisp files. Use it on the command line like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emacs -Q --batch -l elisp-lint.el -f elisp-lint-files-batch *.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can disable individual checks by passing flags on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emacs -Q --batch -l elisp-lint.el -f elisp-lint-files-batch --no-indent *.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use file variables or &lt;code&gt;.dir-locals.el&lt;/code&gt; to disable checks completely, and also to configure certain checks as described below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;((emacs-lisp-mode . ((fill-column . 80)&#xA;                     (indent-tabs-mode . nil)&#xA;                     (elisp-lint-ignored-validators . (&#34;byte-compile&#34;))&#xA;                     (elisp-lint-indent-specs . ((describe . 1)&#xA;                                                 (it . 1))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validators&lt;/h2&gt; &#xA;&lt;h3&gt;byte-compile&lt;/h3&gt; &#xA;&lt;p&gt;Byte-compiles the file with all warnings enabled.&lt;/p&gt; &#xA;&lt;h3&gt;check-declare&lt;/h3&gt; &#xA;&lt;p&gt;Verifies all &lt;code&gt;declare-function&lt;/code&gt; statements are legitimate.&lt;/p&gt; &#xA;&lt;h3&gt;checkdoc&lt;/h3&gt; &#xA;&lt;p&gt;Runs checkdoc on the file to enforce standards in documentation.&lt;/p&gt; &#xA;&lt;h3&gt;fill-column&lt;/h3&gt; &#xA;&lt;p&gt;Verifies that no line exceeds the number of columns in &lt;code&gt;fill-column&lt;/code&gt;. Certain lines in the file are excluded from this check, and can have unlimited length:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The package summary comment line, which by definition must include the package name, a summary description (up to 60 characters), and an optional &lt;code&gt;-*- lexical-binding:t -*-&lt;/code&gt; declaration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &#34;Package-Requires&#34; header, whose length is determined by the number of dependencies specified.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;indent&lt;/h3&gt; &#xA;&lt;p&gt;Verifies that each line is indented according to &lt;code&gt;emacs-lisp-mode&lt;/code&gt;. Where macros are defined with special &lt;code&gt;indent&lt;/code&gt; metadata, use the &lt;code&gt;elisp-lint-indent-specs&lt;/code&gt; alist to specify each symbol&#39;s required indent.&lt;/p&gt; &#xA;&lt;h3&gt;indent-character&lt;/h3&gt; &#xA;&lt;p&gt;Verifies the indentation is consistently tabs or spaces, according to the value of &lt;code&gt;indent-tabs-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;package-lint&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;package-lint&lt;/code&gt; to perform checks on package metadata and elisp style.&lt;/p&gt; &#xA;&lt;p&gt;Because this check uses the &lt;code&gt;package&lt;/code&gt; library to validate when dependencies can be installed from an available package repository, this check will suppress any &#34;package is not installable&#34; errors when running in a context where the &lt;code&gt;package&lt;/code&gt; library is not initialized. This can happen, e.g. when running Emacs on packages installed with Cask.&lt;/p&gt; &#xA;&lt;h3&gt;trailing-whitespace&lt;/h3&gt; &#xA;&lt;p&gt;Verifies the buffer has no lines with trailing whitespace.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Use a file variable or &lt;code&gt;.dir-locals.el&lt;/code&gt; to override the variables mentioned above.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Report&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;test/data/example.el:0:0 (checkdoc) You should have a section marked &#34;;;; Commentary:&#34;&#xA;test/data/example.el:0:0 (checkdoc) The first line should be of the form: &#34;;;; package --- Summary&#34;&#xA;test/data/example.el:1:0 (error) Package should have a ;;; Commentary section.&#xA;test/data/example.el:1:0 (error) Package should have a Homepage or URL header.&#xA;test/data/example.el:1:0 (error) package.el cannot parse this buffer: Package lacks a file header&#xA;test/data/example.el:5:0 (checkdoc) You should have a section marked &#34;;;; Code:&#34;&#xA;test/data/example.el:8:0 (checkdoc) White space found at end of line&#xA;test/data/example.el:8:0 (whitespace) trailing whitespace found&#xA;test/data/example.el:9:0 (indent) !      (b y))&#xA;test/data/example.el:10:0 (indent) ! &#x9;  (message &#34;%s&#34; a))  &#xA;test/data/example.el:10:0 (indent-character) tabs instead of spaces&#xA;test/data/example.el:10:0 (whitespace) trailing whitespace found&#xA;test/data/example.el:11:0 (fill-column) line length 80 exceeded&#xA;test/data/example.el:12:0 (indent) !   (setq a 3)&#xA;test/data/example.el:16:0 (error) &#34;foo&#34; doesn&#39;t start with package&#39;s prefix &#34;difftest&#34;.&#xA;test/data/example.el:17:0 (checkdoc) First line should be capitalized&#xA;test/data/example.el:17:0 (checkdoc) First sentence should end with punctuation&#xA;test/data/example.el:17:0 (indent) ! &#34;emacs is fun&#34;&#xA;test/data/example.el:18:0 (warning) Closing parens should not be wrapped onto new lines.&#xA;test/data/example.el:18:0 (indent) ! )&#xA;test/data/example.el:21:0 (checkdoc) The footer should be: (provide &#39;example)\n;;; example.el ends here&#xA;test/data/example.el FAIL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version 0.5-SNAPSHOT (MELPA) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;suppress &#34;Package X is not installable&#34; errors when running in a context where &#39;package-initialize&#39; hasn&#39;t occurred&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Version 0.4-SNAPSHOT (MELPA Stable, March 2020) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Provide a summary report of all tests [#20]&lt;/li&gt; &#xA;   &lt;li&gt;Integrate package-lint [#19]&lt;/li&gt; &#xA;   &lt;li&gt;Remove package-format, as package-lint covers the same territory&lt;/li&gt; &#xA;   &lt;li&gt;Make byte-compile errors and warnings more robust&lt;/li&gt; &#xA;   &lt;li&gt;Make the fill-column checker ignore the package summary line [#25]&lt;/li&gt; &#xA;   &lt;li&gt;Make &#39;fill-column&#39; checker ignore the package requires header&lt;/li&gt; &#xA;   &lt;li&gt;Add dependency on dash.el&lt;/li&gt; &#xA;   &lt;li&gt;Colorized output&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Version 0.3 (December 2019) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Emacs 23 support is deprecated [#13]&lt;/li&gt; &#xA;   &lt;li&gt;Adopt CircleCI and drop Travis CI [#9] [#14]&lt;/li&gt; &#xA;   &lt;li&gt;Add check-declare validator [#16]&lt;/li&gt; &#xA;   &lt;li&gt;Generate autoloads before bytecompile [#8]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Version 0.2.0 (Feb 2018) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Project transferred to new maintainer&lt;/li&gt; &#xA;   &lt;li&gt;Whitespace check permits page-delimiter (^L)&lt;/li&gt; &#xA;   &lt;li&gt;Indentation check prints the diff to console&lt;/li&gt; &#xA;   &lt;li&gt;User can specify indent specs to tell the checker about macros&lt;/li&gt; &#xA;   &lt;li&gt;Added checkdoc (available only Emacs 25 and newer)&lt;/li&gt; &#xA;   &lt;li&gt;Cleared up the console output for easier reading in CI&lt;/li&gt; &#xA;   &lt;li&gt;Expand Travis CI test matrix to include Emacs 25 and 26&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Version 0.1.0 (2015) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Basic linting functionality implemented&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The initial development of &lt;code&gt;elisp-lint&lt;/code&gt; is Copyright 2013-2015 Nikolaj Schumacher. This project was transferred to Neil Okamoto in 2018.&lt;/p&gt; &#xA;&lt;p&gt;Updates and ongoing development are Copyright 2018-2020 Neil Okamoto and contributors.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome!&lt;/p&gt;</summary>
  </entry>
</feed>