<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:43:17Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>oantolin/orderless</title>
    <updated>2024-03-03T01:43:17Z</updated>
    <id>tag:github.com,2024-03-03:/oantolin/orderless</id>
    <link href="https://github.com/oantolin/orderless" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs completion style that matches multiple regexps in any order&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Orderless #+OPTIONS: d:nil #+EXPORT_FILE_NAME: orderless.texi #+TEXINFO_DIR_CATEGORY: Emacs misc features #+TEXINFO_DIR_TITLE: Orderless: (orderless). #+TEXINFO_DIR_DESC: Completion style for matching regexps in any order&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;http://elpa.gnu.org/packages/orderless.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/orderless.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/orderless.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/orderless.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/orderless&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/orderless-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/orderless&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/orderless-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview :PROPERTIES: :TOC: :include all :ignore this :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides an =orderless= /completion style/ that divides the pattern into space-separated components, and matches candidates that match all of the components in any order. Each component can match in any one of several ways: literally, as a regexp, as an initialism, in the flex style, or as multiple word prefixes. By default, regexp and literal matches are enabled.&lt;/p&gt; &#xA;&lt;p&gt;A completion style is a back-end for completion and is used from a front-end that provides a completion UI. Any completion style can be used with the default Emacs completion UI (sometimes called minibuffer tab completion), with the built-in Icomplete package (which is similar to the more well-known Ido Mode), the icomplete-vertical variant from Emacs 28 (see the external [[https://github.com/oantolin/icomplete-vertical][icomplete-vertical]] package to get that functionality on earlier versions of Emacs), or with some third party minibuffer completion frameworks such as [[https://gitlab.com/protesilaos/mct][Mct]] or [[https://github.com/minad/vertico][Vertico]].&lt;/p&gt; &#xA;&lt;p&gt;All the completion UIs just mentioned are for minibuffer completion, used when Emacs commands prompt the user in the minibuffer for some input, but there is also completion at point in normal buffers, typically used for identifiers in programming languages. Completion styles can also be used for that purpose by completion at point UIs such as [[https://github.com/minad/corfu][Corfu]], [[https://company-mode.github.io/][Company]] or the function =consult-completion-in-region= from [[https://github.com/minad/consult][Consult]].&lt;/p&gt; &#xA;&lt;p&gt;To use a completion style with any of the above mentioned completion UIs simply add it as an entry in the variables =completion-styles= and =completion-category-overrides= (see their documentation). You may also want to modify the =completion-category-defaults= variable, which serves as a default value for =completion-category-overrides=: if you want to use =orderless= exclusively, set both variables to =nil=.&lt;/p&gt; &#xA;&lt;p&gt;With a bit of effort, it might still be possible to use =orderless= with other completion UIs, even if those UIs don&#39;t support the standard Emacs completion styles. Currently there is support for [[https://github.com/abo-abo/swiper][Ivy]] (see below). Also, while Company does support completion styles directly, pressing =SPC= takes you out of completion, so comfortably using =orderless= with it takes a bit of configuration (see below).&lt;/p&gt; &#xA;&lt;p&gt;If you use ELPA or MELPA, the easiest way to install =orderless= is via =package-install=. If you use =use-package=, you can use:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package orderless :ensure t :custom (completion-styles &#39;(orderless basic)) (completion-category-overrides &#39;((file (styles basic partial-completion))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, put =orderless.el= somewhere on your =load-path=, and use the following configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;orderless) (setq completion-styles &#39;(orderless basic) completion-category-overrides &#39;((file (styles basic partial-completion)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. Furthermore the =basic= completion style needs to be tried /first/ (not as a fallback) for TRAMP hostname completion to work. In order to achieve that, we add an entry for the =file= completion category in the =completion-category-overrides= variable. In addition, the =partial-completion= style allows you to use wildcards for file completion and partial paths, e.g., &lt;del&gt;/u/s/l&lt;/del&gt; for &lt;del&gt;/usr/share/local&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bug reports are highly welcome and appreciated!&lt;/p&gt; &#xA;&lt;p&gt;:CONTENTS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#screenshot][Screenshot]]&lt;/li&gt; &#xA; &lt;li&gt;[[#customization][Customization]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#component-matching-styles][Component matching styles]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#style-dispatchers][Style dispatchers]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#component-separator-regexp][Component separator regexp]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#faces-for-component-matches][Faces for component matches]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#pattern-compiler][Pattern compiler]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#interactively-changing-the-configuration][Interactively changing the configuration]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#integration-with-other-completion-uis][Integration with other completion UIs]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#ivy][Ivy]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#company][Company]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#related-packages][Related packages]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#ivy-and-helm][Ivy and Helm]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#prescient][Prescient]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#restricting-to-current-matches-in-icicles-ido-and-ivy][Restricting to current matches: Icicles, Ido and Ivy]] :END:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Screenshot :noexport:&lt;/p&gt; &#xA;&lt;p&gt;This is what it looks like to use =describe-function= (bound by default to =C-h f=) to match =eis ff=. Notice that in this particular case =eis= matched as an initialism, and =ff= matched as a regexp. The completion UI in the screenshot is [[https://github.com/oantolin/icomplete-vertical][icomplete-vertical]] and the theme is Protesilaos Stavrou&#39;s lovely [[https://gitlab.com/protesilaos/modus-themes][modus-operandi]].&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/oantolin/orderless/blob/dispatcher/images/describe-function-eis-ff.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Component matching styles&lt;/p&gt; &#xA;&lt;p&gt;Each component of a pattern can match in any of several matching styles. A matching style is a function from strings to regexps or predicates, so it is easy to define new matching styles. The value returned by a matching style can be either a regexp as a string, an s-expression in =rx= syntax or a predicate function. The predefined matching styles are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;orderless-regexp :: the component is treated as a regexp that must match somewhere in the candidate.&lt;/p&gt; &lt;p&gt;If the component is not a valid regexp, it is ignored.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;orderless-literal :: the component is treated as a literal string that must occur in the candidate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;orderless-prefixes :: the component is split at word endings and each piece must match at a word boundary in the candidate, occurring in that order.&lt;/p&gt; &lt;p&gt;This is similar to the built-in =partial-completion= completion-style. For example, =re-re= matches =query-replace-regexp=, =recode-region= and =magit-remote-list-refs=; =f-d.t= matches =final-draft.txt=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;orderless-initialism :: each character of the component should appear as the beginning of a word in the candidate, in order.&lt;/p&gt; &lt;p&gt;This maps =abc= to =&amp;lt;a.&lt;em&gt;&amp;lt;b.&lt;/em&gt;\c=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;orderless-flex :: the characters of the component should appear in that order in the candidate, but not necessarily consecutively.&lt;/p&gt; &lt;p&gt;This maps =abc= to =a.*b.*c=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;orderless-without-literal&lt;/em&gt; :: the component is a treated as a literal string that must &lt;em&gt;not&lt;/em&gt; occur in the candidate.&lt;/p&gt; &lt;p&gt;Nothing is highlighted by this style. This style should not be used directly in =orderless-matching-styles= but with a style dispatcher instead. See also the more general style modifier =orderless-not=.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The variable =orderless-matching-styles= can be set to a list of the desired matching styles to use. By default it enables the literal and regexp styles.&lt;/p&gt; &#xA;&lt;p&gt;*** Style modifiers&lt;/p&gt; &#xA;&lt;p&gt;Style modifiers are functions which take a predicate function and a regular expression as a string and return a new predicate function. Style modifiers should not be used directly in =orderless-matching-styles= but with a style dispatcher instead.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;orderless-annotation :: this style modifier matches the pattern against the annotation string of the candidate, instead of against the candidate string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;orderless-not :: this style modifier inverts the pattern, such that candidates pass which do not match the pattern.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Style dispatchers&lt;/p&gt; &#xA;&lt;p&gt;For more fine-grained control on which matching styles to use for each component of the input string, you can customize the variable =orderless-style-dispatchers=. You can use this feature to define your own &#34;query syntax&#34;. For example, the default value of =orderless-style-dispatchers= lists a single dispatcher called =orderless-affix-dispatch= which enables a simple syntax based on special characters used as either a prefix or suffix:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;! modifies the component with =orderless-not=. Both =!bad= and =bad!= will match strings that do /not/ contain the pattern =bad=.&lt;/li&gt; &#xA; &lt;li&gt;@ modifies the component with =orderless-annotation=. The pattern will match against the candidate&#39;s annotation.&lt;/li&gt; &#xA; &lt;li&gt;, uses =orderless-initialism=.&lt;/li&gt; &#xA; &lt;li&gt;= uses =orderless-literal=.&lt;/li&gt; &#xA; &lt;li&gt;~ uses =orderless-flex=.&lt;/li&gt; &#xA; &lt;li&gt;% makes the string match ignoring diacritics and similar inflections on characters (it uses the function =char-fold-to-regexp= to do this).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can add, remove or change this mapping between affix characters and matching styles by customizing the user option =orderless-affix-dispatch-alist=. Most users will probably find this type of customization sufficient for their query syntax needs, but for those desiring further control the rest of this section explains how to implement your own style dispatchers.&lt;/p&gt; &#xA;&lt;p&gt;Style dispatchers are functions which take a component, its index in the list of components (starting from 0), and the total number of components, and are used to determine the matching styles used for that specific component, overriding the default matching styles.&lt;/p&gt; &#xA;&lt;p&gt;A style dispatcher can either decline to handle the input string or component, or it can return which matching styles to use. It can also, if desired, additionally return a new string to use in place of the given one. Consult the documentation of =orderless--dispatch= for full details.&lt;/p&gt; &#xA;&lt;p&gt;As an example of writing your own dispatchers, say you wanted the following setup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you normally want components to match as regexps,&lt;/li&gt; &#xA; &lt;li&gt;except for the first component, which should always match as an initialism ---this is pretty useful for, say, =execute-extended-command= (=M-x=) or =describe-function= (=C-h f=),&lt;/li&gt; &#xA; &lt;li&gt;later components ending in =&lt;del&gt;= should match (the characters other than the final =&lt;/del&gt;=) in the flex style, and&lt;/li&gt; &#xA; &lt;li&gt;later components starting with =!= should indicate the rest of the component is a literal string not contained in the candidate (this is part of the functionality of the default configuration).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can achieve this with the following configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun flex-if-twiddle (pattern _index _total) (when (string-suffix-p &#34;~&#34; pattern) `(orderless-flex . ,(substring pattern 0 -1))))&lt;/p&gt; &#xA;&lt;p&gt;(defun first-initialism (pattern index _total) (if (= index 0) &#39;orderless-initialism))&lt;/p&gt; &#xA;&lt;p&gt;(defun not-if-bang (pattern _index _total) (cond ((equal &#34;!&#34; pattern) &#39;(orderless-literal . &#34;&#34;)) ((string-prefix-p &#34;!&#34; pattern) `(orderless-not . ,(substring pattern 1)))))&lt;/p&gt; &#xA;&lt;p&gt;(setq orderless-matching-styles &#39;(orderless-regexp) orderless-style-dispatchers &#39;(first-initialism flex-if-twiddle not-if-bang)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Component separator regexp&lt;/p&gt; &#xA;&lt;p&gt;The pattern components are space-separated by default: this is controlled by the variable =orderless-component-separator=, which should be set either to a regexp that matches the desired component separator, or to a function that takes a string and returns the list of components. The default value is a regexp matches a non-empty sequence of spaces. It may be useful to add hyphens or slashes (or both), to match symbols or file paths, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Even if you want to split on spaces you might want to be able to escape those spaces or to enclose space in double quotes (as in shell argument parsing). For backslash-escaped spaces set =orderless-component-separator= to the function =orderless-escapable-split-on-space=; for shell-like double-quotable space, set it to the standard Emacs function =split-string-and-unquote=.&lt;/p&gt; &#xA;&lt;p&gt;If you are implementing a command for which you know you want a different separator for the components, bind =orderless-component-separator= in a =let= form.&lt;/p&gt; &#xA;&lt;p&gt;** Defining custom orderless styles&lt;/p&gt; &#xA;&lt;p&gt;Orderless allows the definition of custom completion styles using the &lt;del&gt;orderless-define-completion-style&lt;/del&gt; macro. Any Orderless configuration variable can be adjusted locally for the new style, e.g., &lt;del&gt;orderless-matching-styles&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default Orderless only enables the regexp and literal matching styles. In the following example an &lt;del&gt;orderless+initialism&lt;/del&gt; style is defined, which additionally enables initialism matching. This completion style can then used when matching candidates of the symbol or command completion category.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (orderless-define-completion-style orderless+initialism (orderless-matching-styles &#39;(orderless-initialism orderless-literal orderless-regexp))) (setq completion-category-overrides &#39;((command (styles orderless+initialism)) (symbol (styles orderless+initialism)) (variable (styles orderless+initialism)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that in order for the =orderless+initialism= style to kick-in with the above configuration, you&#39;d need to use commands whose metadata indicates that the completion candidates are commands or symbols. In Emacs 28, =execute-extended-command= has metadata indicating you are selecting a command, but earlier versions of Emacs lack this metadata. Activating =marginalia-mode= from the [[https://github.com/minad/marginalia][Marginalia]] package provides this metadata automatically for many built-in commands and is recommended if you use the above example configuration, or other similarly fine-grained control of completion styles according to completion category.&lt;/p&gt; &#xA;&lt;p&gt;** Faces for component matches&lt;/p&gt; &#xA;&lt;p&gt;The portions of a candidate matching each component get highlighted in one of four faces, =orderless-match-face-?= where =?= is a number from 0 to 3. If the pattern has more than four components, the faces get reused cyclically.&lt;/p&gt; &#xA;&lt;p&gt;If your =completion-styles= (or =completion-category-overrides= for some particular category) has more than one entry, remember than Emacs tries each completion style in turn and uses the first one returning matches. You will only see these particular faces when the =orderless= completion is the one that ends up being used, of course.&lt;/p&gt; &#xA;&lt;p&gt;** Pattern compiler&lt;/p&gt; &#xA;&lt;p&gt;The default mechanism for turning an input string into a predicate and a list of regexps to match against, configured using =orderless-matching-styles=, is probably flexible enough for the vast majority of users. The patterns are compiled by =orderless-compile=. Under special circumstances it may be useful to implement a custom pattern compiler by advising =orderless-compile=.&lt;/p&gt; &#xA;&lt;p&gt;** Interactively changing the configuration&lt;/p&gt; &#xA;&lt;p&gt;You might want to change the separator or the matching style configuration on the fly while matching. There many possible user interfaces for this: you could toggle between two chosen configurations, cycle among several, have a keymap where each key sets a different configurations, have a set of named configurations and be prompted (with completion) for one of them, popup a [[https://github.com/abo-abo/hydra][hydra]] to choose a configuration, etc. Since there are so many possible UIs and which to use is mostly a matter of taste, =orderless= does not provide any such commands. But it&#39;s easy to write your own!&lt;/p&gt; &#xA;&lt;p&gt;For example, say you want to use the keybinding =C-l= to make all components match literally. You could use the following code:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my/match-components-literally () &#34;Components match literally for the rest of the session.&#34; (interactive) (setq-local orderless-matching-styles &#39;(orderless-literal) orderless-style-dispatchers nil))&lt;/p&gt; &#xA;&lt;p&gt;(define-key minibuffer-local-completion-map (kbd &#34;C-l&#34;) #&#39;my/match-components-literally) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Using =setq-local= to assign to the configuration variables ensures the values are only used for that minibuffer completion session.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integration with other completion UIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Several excellent completion UIs exist for Emacs in third party packages. They do have a tendency to forsake standard Emacs APIs, so integration with them must be done on a case by case basis.&lt;/p&gt; &#xA;&lt;p&gt;If you manage to use =orderless= with a completion UI not listed here, please file an issue or make a pull request so others can benefit from your effort. The functions =orderless-filter=, =orderless-highlight-matches=, =orderless--highlight= and =orderless--component-regexps= are likely to help with the integration.&lt;/p&gt; &#xA;&lt;p&gt;** Ivy&lt;/p&gt; &#xA;&lt;p&gt;To use =orderless= from Ivy add this to your Ivy configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq ivy-re-builders-alist &#39;((t . orderless-ivy-re-builder))) (add-to-list &#39;ivy-highlight-functions-alist &#39;(orderless-ivy-re-builder . orderless-ivy-highlight)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Helm&lt;/p&gt; &#xA;&lt;p&gt;To use =orderless= from Helm, simply configure =orderless= as you would for completion UIs that use Emacs completion styles and add this to your Helm configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq helm-completion-style &#39;emacs) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Company&lt;/p&gt; &#xA;&lt;p&gt;Company comes with a =company-capf= backend that uses the completion-at-point functions, which in turn use completion styles. This means that the =company-capf= backend will automatically use =orderless=, no configuration necessary!&lt;/p&gt; &#xA;&lt;p&gt;But there are a couple of points of discomfort:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Pressing SPC takes you out of completion, so with the default separator you are limited to one component, which is no fun. To fix this add a separator that is allowed to occur in identifiers, for example, for Emacs Lisp code you could use an ampersand:&lt;/p&gt; &lt;p&gt;#+begin_src emacs-lisp (setq orderless-component-separator &#34;[ &amp;amp;]&#34;) #+end_src&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The matching portions of candidates aren&#39;t highlighted. That&#39;s because =company-capf= is hard-coded to look for the =completions-common-part= face, and it only use one face, =company-echo-common= to highlight candidates.&lt;/p&gt; &lt;p&gt;So, while you can&#39;t get different faces for different components, you can at least get the matches highlighted in the sole available face with this configuration:&lt;/p&gt; &lt;p&gt;#+begin_src emacs-lisp (defun just-one-face (fn &amp;amp;rest args) (let ((orderless-match-faces [completions-common-part])) (apply fn args)))&lt;/p&gt; &lt;p&gt;(advice-add &#39;company-capf--candidates :around #&#39;just-one-face) #+end_src&lt;/p&gt; &lt;p&gt;(Aren&#39;t dynamically scoped variables and the advice system nifty?)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you would like to use different =completion-styles= with =company-capf= instead, you can add this to your configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; We follow a suggestion by company maintainer u/hvis: ;; &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/nichkl/comment/gz1jr3s/&#34;&gt;https://www.reddit.com/r/emacs/comments/nichkl/comment/gz1jr3s/&lt;/a&gt; (defun company-completion-styles (capf-fn &amp;amp;rest args) (let ((completion-styles &#39;(basic partial-completion))) (apply capf-fn args))&lt;/p&gt; &#xA;&lt;p&gt;(advice-add &#39;company-capf :around #&#39;company-completion-styles) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Related packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Ivy and Helm&lt;/p&gt; &#xA;&lt;p&gt;The well-known and hugely powerful completion frameworks [[https://github.com/abo-abo/swiper][Ivy]] and [[https://github.com/emacs-helm/helm][Helm]] also provide for matching space-separated component regexps in any order. In Ivy, this is done with the =ivy--regex-ignore-order= matcher. In Helm, it is the default, called &#34;multi pattern matching&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This package is significantly smaller than either of those because it solely defines a completion style, meant to be used with any completion UI supporting completion styles while both of those provide their own completion UI (and many other cool features!).&lt;/p&gt; &#xA;&lt;p&gt;It is worth pointing out that Helm does provide its multi pattern matching as a completion style which could be used with default tab completion, Icomplete or other UIs supporting completion styles! (Ivy does not provide a completion style to my knowledge.) So, for example, Icomplete users could, instead of using this package, install Helm and configure Icomplete to use it as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;helm) (setq completion-styles &#39;(helm basic)) (icomplete-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;(Of course, if you install Helm, you might as well use the Helm UI in =helm-mode= rather than Icomplete.)&lt;/p&gt; &#xA;&lt;p&gt;** Prescient&lt;/p&gt; &#xA;&lt;p&gt;The [[https://github.com/radian-software/prescient.el][prescient.el]] library also provides matching of space-separated components in any order. It offers a completion-style that can be used with Emacs&#39; default completion UI, Mct, Vertico or with Icomplete. Furthermore Ivy is supported. The components can be matched literally, as regexps, as initialisms or in the flex style (called &#34;fuzzy&#34; in prescient). Prescient does not offer the same flexibility as Orderless with its style dispatchers. However in addition to matching, Prescient supports sorting of candidates, while Orderless leaves that up to the candidate source and the completion UI.&lt;/p&gt; &#xA;&lt;p&gt;** Restricting to current matches in Icicles, Ido and Ivy&lt;/p&gt; &#xA;&lt;p&gt;An effect equivalent to matching multiple components in any order can be achieved in completion frameworks that provide a way to restrict further matching to the current list of candidates. If you use the keybinding for restriction instead of =SPC= to separate your components, you get out of order matching!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://www.emacswiki.org/emacs/Icicles][Icicles]] calls this /progressive completion/ and uses the =icicle-apropos-complete-and-narrow= command, bound to =S-SPC=, to do it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ido has =ido-restrict-to-matches= and binds it to =C-SPC=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ivy has =ivy-restrict-to-matches=, bound to =S-SPC=, so you can get the effect of out of order matching without using =ivy--regex-ignore-order=.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>