<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-09T01:52:07Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dajva/rg.el</title>
    <updated>2023-04-09T01:52:07Z</updated>
    <id>tag:github.com,2023-04-09:/dajva/rg.el</id>
    <link href="https://github.com/dajva/rg.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs search tool based on ripgrep&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rg.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dajva/rg.el/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?style=flat&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/rg&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/rg-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/rg&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/rg-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dajva/rg.el/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/dajva/rg.el/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/dajva/rg.el&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/dajva/rg.el/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Ripgrep is a replacement for both grep like (search one file) and ag like (search many files) tools. It&#39;s fast and versatile and written in Rust. For some introduction and benchmarks, see &lt;a href=&#34;http://blog.burntsushi.net/ripgrep/&#34;&gt;ripgrep is faster than {grep, ag, git grep, ucg, pt, sift}&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dajva/rg.el/master/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This package is available on &lt;a href=&#34;https://stable.melpa.org/#/rg&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org/#/rg&#34;&gt;MELPA&lt;/a&gt;. Install with &lt;code&gt;M-x package-install&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt; &lt;code&gt;rg&lt;/code&gt; from within Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It is also available in GNU Guix as &lt;a href=&#34;https://guix.gnu.org/en/packages/emacs-rg-2.2.0/&#34;&gt;emacs-rg&lt;/a&gt;. Install with &lt;code&gt;guix package -i emacs-rg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to install manually just put &lt;code&gt;rg.el&lt;/code&gt; and the rest of the elisp files somewhere in your load path and add require the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(require &#39;rg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;rg&lt;/code&gt; and friends are autoloaded symbols which means it&#39;s also possible to defer loading if you have autoloading setup.&lt;/p&gt; &#xA;&lt;h3&gt;Setup key bindings&lt;/h3&gt; &#xA;&lt;p&gt;This will setup the default key bindings in a non lazy way. If you care about startup performance see the next example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(rg-enable-default-bindings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rgel.readthedocs.io&#34;&gt;documentation&lt;/a&gt; for how to handle lazy loading.&lt;/p&gt; &#xA;&lt;h3&gt;Use old defaults&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rg.el&lt;/code&gt; 2.0.0 will use new default settings to improve look and feel, more consistent key bindings etc. If you want to use the old defaults add this to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(rg-use-old-defaults)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rg-menu&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to use a &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;magit&lt;/a&gt; like interface as a complement to regular key maps, replace &lt;code&gt;(rg-enable-default-bindings)&lt;/code&gt; with &lt;code&gt;(rg-enable-menu)&lt;/code&gt;. The menus are built with &lt;a href=&#34;https://github.com/magit/transient&#34;&gt;transient&lt;/a&gt;, which means that the menus can be modified in the same way as in magit.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Info documentation is included in the package. Online documentation: &lt;a href=&#34;https://rgel.readthedocs.io&#34;&gt;https://rgel.readthedocs.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;http://cask.github.io/&#34;&gt;cask&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;make deps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run tests:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dajva/rg.el/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>akicho8/string-inflection</title>
    <updated>2023-04-09T01:52:07Z</updated>
    <id>tag:github.com,2023-04-09:/akicho8/string-inflection</id>
    <link href="https://github.com/akicho8/string-inflection" rel="alternate"></link>
    <summary type="html">&lt;p&gt;underscore -&gt; UPCASE -&gt; CamelCase conversion of names&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;underscore -&amp;gt; UPCASE -&amp;gt; CamelCase conversion of names&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://travis-ci.org/akicho8/string-inflection&#34;&gt;&lt;img src=&#34;https://travis-ci.org/akicho8/string-inflection.svg?branch=master&#34;&gt;&lt;/a&gt; #+html: &lt;br&gt; #+html: &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/akicho8/string-inflection/blob/master/HISTORY.org][Change History]]&lt;/p&gt; &#xA;&lt;p&gt;** Configuration Examples&lt;/p&gt; &#xA;&lt;p&gt;*** Example 1&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (require &#39;string-inflection)&lt;/p&gt; &#xA;&lt;p&gt;;; C-q C-u is similar to the keybinding used by Vz Editor. (global-unset-key (kbd &#34;C-q&#34;)) (global-set-key (kbd &#34;C-q C-u&#34;) &#39;my-string-inflection-cycle-auto)&lt;/p&gt; &#xA;&lt;p&gt;(defun my-string-inflection-cycle-auto () &#34;switching by major-mode&#34; (interactive) (cond ;; for emacs-lisp-mode ((eq major-mode &#39;emacs-lisp-mode) (string-inflection-all-cycle)) ;; for python ((eq major-mode &#39;python-mode) (string-inflection-python-style-cycle)) ;; for java ((eq major-mode &#39;java-mode) (string-inflection-java-style-cycle)) ;; for elixir ((eq major-mode &#39;elixir-mode) (string-inflection-elixir-style-cycle)) (t ;; default (string-inflection-ruby-style-cycle)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Example 2&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (require &#39;string-inflection)&lt;/p&gt; &#xA;&lt;p&gt;;; default (global-set-key (kbd &#34;C-c C-u&#34;) &#39;string-inflection-all-cycle)&lt;/p&gt; &#xA;&lt;p&gt;;; for ruby (add-hook &#39;ruby-mode-hook &#39;(lambda () (local-set-key (kbd &#34;C-c C-u&#34;) &#39;string-inflection-ruby-style-cycle)))&lt;/p&gt; &#xA;&lt;p&gt;;; for elixir (add-hook &#39;elixir-mode-hook &#39;(lambda () (local-set-key (kbd &#34;C-c C-u&#34;) &#39;string-inflection-elixir-style-cycle)))&lt;/p&gt; &#xA;&lt;p&gt;;; for java (add-hook &#39;java-mode-hook &#39;(lambda () (local-set-key (kbd &#34;C-c C-u&#34;) &#39;string-inflection-java-style-cycle)))&lt;/p&gt; &#xA;&lt;p&gt;;; for python (add-hook &#39;python-mode-hook &#39;(lambda () (local-set-key (kbd &#34;C-c C-u&#34;) &#39;string-inflection-python-style-cycle)))&lt;/p&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** How to Use&lt;/p&gt; &#xA;&lt;p&gt;For each of the following, place the cursor at =emacs_lisp= and type =C-q C-u=, the results will be as follows:&lt;/p&gt; &#xA;&lt;p&gt;In the case of =string-inflection-ruby-style-cycle=&lt;/p&gt; &#xA;&lt;p&gt;: emacs_lisp =&amp;gt; EMACS_LISP =&amp;gt; EmacsLisp =&amp;gt; emacs_lisp&lt;/p&gt; &#xA;&lt;p&gt;In the case of =string-inflection-elixir-style-cycle=&lt;/p&gt; &#xA;&lt;p&gt;: emacs_lisp =&amp;gt; EmacsLisp =&amp;gt; emacs_lisp&lt;/p&gt; &#xA;&lt;p&gt;In the case of =string-inflection-python-style-cycle=&lt;/p&gt; &#xA;&lt;p&gt;: emacs_lisp =&amp;gt; EMACS_LISP =&amp;gt; EmacsLisp =&amp;gt; emacs_lisp&lt;/p&gt; &#xA;&lt;p&gt;In the case of =string-inflection-java-style-cycle=&lt;/p&gt; &#xA;&lt;p&gt;: emacsLisp =&amp;gt; EMACS_LISP =&amp;gt; EmacsLisp =&amp;gt; emacsLisp&lt;/p&gt; &#xA;&lt;p&gt;In the case of =string-inflection-all-cycle=&lt;/p&gt; &#xA;&lt;p&gt;: emacs_lisp =&amp;gt; EMACS_LISP =&amp;gt; EmacsLisp =&amp;gt; emacsLisp =&amp;gt; emacs-lisp =&amp;gt; Emacs_Lisp =&amp;gt; emacs_lisp&lt;/p&gt; &#xA;&lt;p&gt;It is recommended that the major mode functions are used instead of =string-inflection-all-cycle=.&lt;/p&gt; &#xA;&lt;p&gt;** Standalone Functions&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (string-inflection-underscore-function &#34;EmacsLisp&#34;) ; =&amp;gt; &#34;emacs_lisp&#34; (string-inflection-pascal-case-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;EmacsLisp&#34; (string-inflection-camelcase-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;emacsLisp&#34; (string-inflection-upcase-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;EMACS_LISP&#34; (string-inflection-kebab-case-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;emacs-lisp&#34; (string-inflection-capital-underscore-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;Emacs_Lisp&#34;&lt;/p&gt; &#xA;&lt;p&gt;(string-inflection-pascal-case-p &#34;EmacsLisp&#34;) ; =&amp;gt; t (string-inflection-pascal-case-p &#34;emacs_lisp&#34;) ; =&amp;gt; nil ; etc... #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Region usage&lt;/p&gt; &#xA;&lt;p&gt;You can also use this library to convert a region&#39;s casing.&lt;/p&gt; &#xA;&lt;p&gt;For that, simply select a region and perform =M-x string-inflection-kebab-case= (or any such other function).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Fuco1/smartparens</title>
    <updated>2023-04-09T01:52:07Z</updated>
    <id>tag:github.com,2023-04-09:/Fuco1/smartparens</id>
    <link href="https://github.com/Fuco1/smartparens" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minor mode for Emacs that deals with parens pairs and tries to be smart about it.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Smartparens&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/smartparens/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/smartparens/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/smartparens/Lobby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/smartparens&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/smartparens-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://smartparens.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/smartparens/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/smartparens&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/smartparens-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://smartparens.readthedocs.io/en/latest/?badge=stable&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/smartparens/badge/?version=stable&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Fuco1/smartparens/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/Fuco1/smartparens/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/Fuco1/smartparens&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/Fuco1/smartparens/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=A5PMGVKCQBT88&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&#34; alt=&#34;Paypal logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/user?u=3282358&amp;amp;ty=h&#34;&gt;&lt;img src=&#34;https://c5.patreon.com/external/logo/logomarkOrange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-generate-toc again --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#smartparens&#34;&gt;Smartparens&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#language-support&#34;&gt;Language Support&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#supporting-smartparens&#34;&gt;Supporting Smartparens&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#related-projects&#34;&gt;Related Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;p&gt;Smartparens is a minor mode for dealing with pairs in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It can automatically insert pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/images/smartparens-insert.gif&#34; alt=&#34;smartparens insert&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;wrap, unwrap and rewrap pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/images/smartparens-wrap.gif&#34; alt=&#34;smartparens wrapping&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;expand and contract pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/images/smartparens-slurp.gif&#34; alt=&#34;smartparens slurping&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;navigate pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/images/smartparens-navigate.gif&#34; alt=&#34;smartparens navigating&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;and much more!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We generally target GNU Emacs version 24.3 and newer, however, everything should work mostly fine on anything newer than version 24.&lt;/p&gt; &#xA;&lt;p&gt;You can install smartparens from &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt;. Once installed, enable the &lt;a href=&#34;https://github.com/Fuco1/smartparens/wiki/Default-configuration&#34;&gt;default configuration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;smartparens-config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now use smartparens with &lt;code&gt;M-x smartparens-mode&lt;/code&gt;. To automatically enable smartparens in a programming mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Always start smartparens mode in js-mode.&#xA;(add-hook &#39;js-mode-hook #&#39;smartparens-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may want to try &lt;code&gt;smartparens-strict-mode&lt;/code&gt;. This enforces that pairs are always balanced, so commands like &lt;code&gt;kill-line&lt;/code&gt; keep your code well-formed.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Inside Emacs, &lt;code&gt;M-x sp-cheat-sheet&lt;/code&gt; will show you all the commands available, with examples.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a &lt;a href=&#34;https://ebzzry.com/en/emacs-pairs/&#34;&gt;great article demonstrating movement and editing in smartparens&lt;/a&gt; and &lt;a href=&#34;https://github.com/Fuco1/smartparens/wiki&#34;&gt;extensive documentation in the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We love pull requests. Please include tests. Smartparens uses &lt;a href=&#34;https://github.com/rejeep/ert-runner.el&#34;&gt;ert-runner&lt;/a&gt; for testing. To run all the tests, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cask exec ert-runner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can open the individual files in Emacs, then &lt;code&gt;M-x eval-buffer&lt;/code&gt; &lt;code&gt;M-x ert&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can learn more about how we test on the &lt;a href=&#34;https://github.com/Fuco1/smartparens/wiki/Testing&#34;&gt;testing&lt;/a&gt; wiki page.&lt;/p&gt; &#xA;&lt;h3&gt;Language Support&lt;/h3&gt; &#xA;&lt;p&gt;Smartparens has a default configuration that works well for most languages. For language-specific behaviour, smartparens has a separate &lt;code&gt;smartparens-FOO.el&lt;/code&gt; file for every language and &lt;code&gt;smartparens-config.el&lt;/code&gt; loads these automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Smartparens&lt;/h2&gt; &#xA;&lt;p&gt;If you want to support this project, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Contribute code. If you have an idea that is not yet implemented and will benefit this project, feel free to implement it and submit a pull request. If you have any concerns whether your contribution will be accepted, ask beforehand. You can email the author or &lt;a href=&#34;https://github.com/Fuco1/smartparens/issues/new&#34;&gt;start an issue&lt;/a&gt; on the tracker.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contribute ideas. Even if you can&#39;t code Emacs Lisp, you can still contribute valuable ideas for other programmers to implement. Simply &lt;a href=&#34;https://github.com/Fuco1/smartparens/issues/new&#34;&gt;start new issue&lt;/a&gt; on the tracker and submit your suggestion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can make a financial donation through &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=A5PMGVKCQBT88&#34;&gt;PayPal&lt;/a&gt; or &lt;a href=&#34;https://www.patreon.com/user?u=3282358&amp;amp;ty=h&#34;&gt;Patreon&lt;/a&gt;. If you like smartparens and can spare a modest amount on a donation, feel free to do so. These donations are expressions of your gratitude and are used for my personal &#34;rewards&#34; (books, games, music etc.). You can also gift me a game on &lt;a href=&#34;http://steamcommunity.com/profiles/76561198265034071/wishlist&#34;&gt;Steam&lt;/a&gt; or buy something on &lt;a href=&#34;http://www.amazon.com/gp/registry/wishlist/2I8DOQH8OZEUR&#34;&gt;Amazon&lt;/a&gt;. Regardless of the donations, smartparens will always be free both as in beer and as in speech.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;Other Emacs projects that deal with pairs include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/capitaomorte/autopair&#34;&gt;autopair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.google.com/p/emacs-textmate/&#34;&gt;textmate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rejeep/wrap-region&#34;&gt;wrap-region&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.emacswiki.org/emacs/ElectricPair&#34;&gt;electric-pair-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://emacswiki.org/emacs/ParEdit&#34;&gt;paredit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Smartparens aims to provide a superset of these features, in all programming languages.&lt;/p&gt;</summary>
  </entry>
</feed>