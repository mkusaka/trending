<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-05T08:37:54Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>szermatt/emacs-bash-completion</title>
    <updated>2023-02-05T08:37:54Z</updated>
    <id>tag:github.com,2023-02-05:/szermatt/emacs-bash-completion</id>
    <link href="https://github.com/szermatt/emacs-bash-completion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add programmable bash completion to Emacs shell-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bash-completion for Emacs &lt;a href=&#34;https://github.com/szermatt/emacs-bash-completion/actions&#34;&gt;&lt;img src=&#34;https://github.com/szermatt/emacs-bash-completion/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/bash-completion&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/bash-completion-badge.svg?sanitize=true&#34; alt=&#34;melpa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/bash-completion&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/bash-completion-badge.svg?sanitize=true&#34; alt=&#34;melpa-stable&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;bash-completion.el defines dynamic completion hooks for shell-mode and shell-command prompts that is based on bash completion.&lt;/p&gt; &#xA;&lt;p&gt;Bash completion for Emacs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;is aware of bash builtins, aliases and functions&lt;/li&gt; &#xA; &lt;li&gt;does file expansion inside of colon-separated variables and after redirections (&amp;gt; or &amp;lt;)&lt;/li&gt; &#xA; &lt;li&gt;escapes special characters when expanding file names&lt;/li&gt; &#xA; &lt;li&gt;is configurable through programmable bash completion&lt;/li&gt; &#xA; &lt;li&gt;works on remote shells, through TRAMP.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A simpler and more complete alternative to bash-completion.el is to run a bash shell in a buffer in term mode (&lt;code&gt;M-x ansi-term&lt;/code&gt;). Unfortunately, many Emacs editing features are not available when running in term mode. Also, term mode is not available in shell-command prompts.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;p&gt;Copy bash-completion.el into a directory that&#39;s on Emacs load-path. You can do that manually, or by installing it from &lt;a href=&#34;https://melpa.org/#/getting-started&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Shell completion&lt;/h3&gt; &#xA;&lt;p&gt;To enable bash completion in shell buffers as well as in command prompts, such as the prompt started by &lt;code&gt;compile&lt;/code&gt;, add the hook &lt;code&gt;bash-completion-dynamic-complete&lt;/code&gt; to &lt;code&gt;shell-dynamic-complete-functions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;        (autoload &#39;bash-completion-dynamic-complete&#xA;          &#34;bash-completion&#34;&#xA;          &#34;BASH completion hook&#34;)&#xA;        (add-hook &#39;shell-dynamic-complete-functions&#xA;          &#39;bash-completion-dynamic-complete)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or simpler, but forces you to load bash-completion at startup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;        (require &#39;bash-completion)&#xA;        (bash-completion-setup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that reload your .emacs (&lt;code&gt;M-x eval-buffer&lt;/code&gt;) or restart.&lt;/p&gt; &#xA;&lt;p&gt;When called from a bash shell buffer, &lt;code&gt;bash-completion-dynamic-complete&lt;/code&gt; communicates with the current shell to reproduce, as closely as possible the normal bash auto-completion, available on full terminals.&lt;/p&gt; &#xA;&lt;p&gt;When called from non-shell buffers, such as the prompt of M-x compile, &lt;code&gt;bash-completion-dynamic-complete&lt;/code&gt; creates a separate bash process just for doing completion. Such processes have the environment variable &lt;code&gt;EMACS_BASH_COMPLETE&lt;/code&gt; set to &lt;code&gt;t&lt;/code&gt;, to help distinguish them from normal shell processes.&lt;/p&gt; &#xA;&lt;h3&gt;Completion at point&lt;/h3&gt; &#xA;&lt;p&gt;Additionally, you can enable bash completion in any buffer that contains bash commands. To do that, call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(bash-completion-dynamic-complete-nocomint COMP-START COMP-POS DYNAMIC-TABLE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from a function added to &lt;code&gt;completion-at-point-functions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The trickiest part is setting COMP-START to where the bash command starts; It depends on the mode of the calling buffer and might, in some cases, span multiple lines.&lt;/p&gt; &#xA;&lt;p&gt;COMP-POS is usually the current position of the cursor.&lt;/p&gt; &#xA;&lt;p&gt;When calling from &lt;code&gt;completion-at-point&lt;/code&gt;, make sure to pass a non-nil value to the DYNAMIC-TABLE argument so it returns a function instead of a list of strings. This isn&#39;t just an optimization: returning a function instead of a list tells Emacs it should avoids post-filtering the results and possibly discarding useful completion from bash.&lt;/p&gt; &#xA;&lt;p&gt;For example, here&#39;s a function to to do bash completion from an eshell buffer. To try it out, add the function below to your init file and bind &lt;code&gt;bash-completion-from-eshell&lt;/code&gt; to a custom shortcut.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun bash-completion-from-eshell ()&#xA;  (interactive)&#xA;  (let ((completion-at-point-functions&#xA;         &#39;(bash-completion-eshell-capf)))&#xA;    (completion-at-point)))&#xA;&#xA;(defun bash-completion-eshell-capf ()&#xA;  (bash-completion-dynamic-complete-nocomint&#xA;   (save-excursion (eshell-bol) (point))&#xA;   (point) t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TROUBLESHOOTING&lt;/h2&gt; &#xA;&lt;p&gt;If completion in a bash shell doesn&#39;t behave as you think it should, check the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Does bash behave differently when run outside of Emacs? If not, check your shell configuration.&lt;/li&gt; &#xA; &lt;li&gt;Did you start a new bash process, with &lt;code&gt;exec bash&lt;/code&gt; or &lt;code&gt;sudo&lt;/code&gt; ? If yes, call &lt;code&gt;bash-completion-refresh&lt;/code&gt; to configure the new bash process.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;M-x bash-completion-debug&lt;/code&gt; and look at the completion table at the bottom. Does it match your expectation? If not, call &lt;code&gt;M-x bash-completion-refresh&lt;/code&gt; to refresh the copy of the completion table kept by Emacs, or if you&#39;re in a &lt;code&gt;M-x execute&lt;/code&gt; or &lt;code&gt;M-x compile&lt;/code&gt; prompt, call &lt;code&gt;M-x bash-completion-reset-all&lt;/code&gt;, then try again.&lt;/li&gt; &#xA; &lt;li&gt;Still on &lt;code&gt;M-x bash-completion-debug&lt;/code&gt;, does the &lt;code&gt;output-buffer&lt;/code&gt; section match the expected set of completion? If yes, it might be a display problem. Are you using a completion engine other than the default, such as ivy or helm? Try turning it off to confirm, then &lt;a href=&#34;https://github.com/szermatt/emacs-bash-completion/issues/new&#34;&gt;file a bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If all else fails, &lt;a href=&#34;https://github.com/szermatt/emacs-bash-completion/issues/new&#34;&gt;file a bug&lt;/a&gt;. Please include the output of &lt;code&gt;M-x bash-completion-debug&lt;/code&gt;, the command you&#39;re trying to use and the function or package providing completion for that command and where to download it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CONTRIBUTING&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs, features or even to ask questions, please open an &lt;a href=&#34;https://github.com/szermatt/emacs-bash-completion/issues&#34;&gt;issue&lt;/a&gt;. To contribute code or documentation, please open a &lt;a href=&#34;https://github.com/szermatt/emacs-bash-completion/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/szermatt/emacs-bash-completion/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;COMPATIBILITY&lt;/h2&gt; &#xA;&lt;p&gt;bash-completion.el is known to work with Bash 4 and 5, on Emacs, starting with version 25.3, under Linux and OSX. It does not work on XEmacs.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>polymode/polymode</title>
    <updated>2023-02-05T08:37:54Z</updated>
    <id>tag:github.com,2023-02-05:/polymode/polymode</id>
    <link href="https://github.com/polymode/polymode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Framework for Multiple Major Modes in Emacs (core library)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- [![Build Status](https://travis-ci.org/vspinu/polymode.svg?branch=master)](https://travis-ci.org/vspinu/polymode)  --&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/polymode&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/polymode-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://stable.melpa.org/#/polymode&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/polymode-badge.svg&#34;/&gt;&lt;/a&gt; --&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/polymode/polymode/master/docs/img/large-icon.png&#34; width=&#34;25%&#34; alt=&#34;Polymode Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Polymode is a framework for multiple major modes (MMM) inside a single Emacs buffer. It is fast and has a simple but flexible object oriented design. Creating new polymodes normally takes a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://polymode.github.io/installation/&#34;&gt;Installation&lt;/a&gt; instructions and the full documentation are available at &lt;a href=&#34;https://polymode.github.io/&#34;&gt;https://polymode.github.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/polymode/polymode/master/docs/img/Rmd.png&#34; width=&#34;500px&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gintas/emacs-config</title>
    <updated>2023-02-05T08:37:54Z</updated>
    <id>tag:github.com,2023-02-05:/gintas/emacs-config</id>
    <link href="https://github.com/gintas/emacs-config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs configuration files&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>