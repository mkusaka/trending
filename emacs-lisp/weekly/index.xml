<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-21T01:51:58Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rainstormstudio/nerd-icons.el</title>
    <updated>2023-05-21T01:51:58Z</updated>
    <id>tag:github.com,2023-05-21:/rainstormstudio/nerd-icons.el</id>
    <link href="https://github.com/rainstormstudio/nerd-icons.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: nerd-icons.el - A Library for Nerd Font icons #+AUTHOR: Hongyu Ding #+LANGUAGE: en&lt;/p&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/nerd-icons][file:https://melpa.org/packages/nerd-icons-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;Nerd-icons.el is a library for easily using [[https://github.com/ryanoasis/nerd-fonts][Nerd Font]] icons inside Emacs, an alternative to [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].&lt;/p&gt; &#xA;&lt;p&gt;It works on both GUI and terminal! You only need a [[https://www.nerdfonts.com/#home][Nerd Font]] installed on your system.&lt;/p&gt; &#xA;&lt;p&gt;It is inspired by [[https://github.com/domtronn/all-the-icons.el][all-the-icons]], [[https://github.com/seagle0128/icons-in-terminal.el][icons-in-terminal]], [[https://github.com/ryanoasis/vim-devicons][vim-devicons]], and [[https://github.com/nvim-tree/nvim-web-devicons][nvim-web-devicons]].&lt;/p&gt; &#xA;&lt;p&gt;in GUI: [[file:screenshots/demo.png]]&lt;/p&gt; &#xA;&lt;p&gt;in terminal: [[file:screenshots/demo-terminal.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installing Fonts Please go to [[https://www.nerdfonts.com/][Nerd Fonts website]] and get a Nerd font. After installing the font on your machine, you need to set &lt;del&gt;nerd-icons-font-family&lt;/del&gt; to match its font name so that the font can be properly used under GUI. If you want Nerd Fonts to work under a terminal, please change your terminal&#39;s font to a Nerd font.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the Nerd Font you installed does not display correctly (e.g. appear cut off), it is recommended to use =Symbols Nerd Fonts Mono= (Symbols Nerd Font). You can use &lt;del&gt;M-x nerd-icons-install-fonts&lt;/del&gt; to install &lt;del&gt;Symbols Nerd Fonts Mono&lt;/del&gt; for you. Note that for &lt;em&gt;Windows&lt;/em&gt; you&#39;ll need to manually install the font after you used this function.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage &lt;del&gt;nerd-icons&lt;/del&gt; is on [[https://melpa.org/#/nerd-icons-completion][Melpa]]. You can install it with built-in &lt;del&gt;M-x package-install&lt;/del&gt; #+begin_src emacs-lisp (require &#39;nerd-icons) #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or using &lt;del&gt;use-package&lt;/del&gt; #+BEGIN_SRC emacs-lisp (use-package nerd-icons ;; :custom ;; The Nerd Font you want to use in GUI ;; &#34;Symbols Nerd Font Mono&#34; is the default and is recommended ;; but you can use any other Nerd Font if you want ;; (nerd-icons-font-family &#34;Symbols Nerd Font Mono&#34;) ) #+END_SRC ** insert icons&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;use icon based on category&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-dir&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-file&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-extension&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-mode&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-url&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-buffer&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;example: #+BEGIN_SRC emacs-lisp (insert (nerd-icons-icon-for-file &#34;init.el&#34;)) ;; Inserts an icon for Emacs Lisp #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;use icon directly&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-ipsicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-octicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-pomicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-powerline&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-faicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-wicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-sucicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-devicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-codicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-flicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-mdicon&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;example: #+BEGIN_SRC emacs-lisp (insert (nerd-icons-faicon &#34;nf-fa-gitlab&#34;)) ;; Inserts a Gitlab icon #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;insert icon interactively (&lt;del&gt;M-x&lt;/del&gt; functions)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-ipsicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-octicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-pomicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-powerline&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-faicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-wicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-sucicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-devicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-codicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-flicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-mdicon&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Glyph Sets | Glyph Set | prefix | Point Range | insert function | |-------------------------+----------------------+--------------------------------------+----------------------| | Seti-UI + Custom | &lt;del&gt;nf-seti-&lt;/del&gt;, &lt;del&gt;nf-custom-&lt;/del&gt; | &lt;del&gt;e5fa&lt;/del&gt; - &lt;del&gt;e631&lt;/del&gt; | &lt;del&gt;nerd-icons-sucicon&lt;/del&gt; | | Devicons | &lt;del&gt;nf-dev-&lt;/del&gt; | &lt;del&gt;e700&lt;/del&gt; - &lt;del&gt;e7c5&lt;/del&gt; | &lt;del&gt;nerd-icons-devicon&lt;/del&gt; | | Font Awesome | &lt;del&gt;nf-fa-&lt;/del&gt; | &lt;del&gt;f000&lt;/del&gt; - &lt;del&gt;f2e0&lt;/del&gt; | &lt;del&gt;nerd-icons-faicon&lt;/del&gt; | | Font Awesome Extension | &lt;del&gt;nf-fae-&lt;/del&gt; | &lt;del&gt;e200&lt;/del&gt; - &lt;del&gt;e2a9&lt;/del&gt; | &lt;del&gt;nerd-icons-faicon&lt;/del&gt; | | Material Design Icons | &lt;del&gt;nf-md-&lt;/del&gt; | &lt;del&gt;f500&lt;/del&gt; - &lt;del&gt;fd46&lt;/del&gt; | &lt;del&gt;nerd-icons-mdicon&lt;/del&gt; | | Weather | &lt;del&gt;nf-weather-&lt;/del&gt; | &lt;del&gt;e300&lt;/del&gt; - &lt;del&gt;e3eb&lt;/del&gt; | &lt;del&gt;nerd-icons-wicon&lt;/del&gt; | | Octicons | &lt;del&gt;nf-oct-&lt;/del&gt; | &lt;del&gt;f400&lt;/del&gt; - &lt;del&gt;f4a9&lt;/del&gt;, &lt;del&gt;2665&lt;/del&gt;, &lt;del&gt;26A1&lt;/del&gt; | &lt;del&gt;nerd-icons-octicon&lt;/del&gt; | | Powerline Symbols | &lt;del&gt;nf-pl-&lt;/del&gt; | &lt;del&gt;e0a0&lt;/del&gt; - &lt;del&gt;e0a2&lt;/del&gt;, &lt;del&gt;e0b0&lt;/del&gt; - &lt;del&gt;e0b3&lt;/del&gt; | &lt;del&gt;nerd-icons-powerline&lt;/del&gt; | | Powerline Extra Symbols | &lt;del&gt;nf-ple-&lt;/del&gt; | &lt;del&gt;e0a3&lt;/del&gt;, &lt;del&gt;e0b4&lt;/del&gt; - &lt;del&gt;e0c8&lt;/del&gt;, &lt;del&gt;e0ca&lt;/del&gt;, &lt;del&gt;e0cc&lt;/del&gt; - &lt;del&gt;e0d4&lt;/del&gt; | &lt;del&gt;nerd-icons-powerline&lt;/del&gt; | | IEC Power Symbols | &lt;del&gt;nf-iec-&lt;/del&gt; | &lt;del&gt;23fb&lt;/del&gt; - &lt;del&gt;23fe&lt;/del&gt;, &lt;del&gt;2b58&lt;/del&gt; | &lt;del&gt;nerd-icons-ipsicon&lt;/del&gt; | | Font Logos | &lt;del&gt;nf-linux-&lt;/del&gt; | &lt;del&gt;f300&lt;/del&gt; - &lt;del&gt;f32d&lt;/del&gt; | &lt;del&gt;nerd-icons-flicon&lt;/del&gt; | | Pomicons | &lt;del&gt;nf-pom-&lt;/del&gt; | &lt;del&gt;e000&lt;/del&gt; - &lt;del&gt;e00a&lt;/del&gt; | &lt;del&gt;nerd-icons-pomicon&lt;/del&gt; | | Codicons | &lt;del&gt;nf-cod-&lt;/del&gt; | &lt;del&gt;ea60&lt;/del&gt; - &lt;del&gt;ebeb&lt;/del&gt; | &lt;del&gt;nerd-icons-codicon&lt;/del&gt; |&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check [[https://github.com/ryanoasis/nerd-fonts/wiki/Glyph-Sets-and-Code-Points][Nerd Fonts Glyph Sets and Code Points]] for more information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Related Packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/treemacs-nerd-icons][treemacs-nerd-icons]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/seagle0128/nerd-icons-ivy-rich][nerd-icons-ivy-rich]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/seagle0128/nerd-icons-ibuffer][nerd-icons-ibuffer]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/nerd-icons-completion][nerd-icons-completion]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use nerd-icons with Corfu If you use [[https://github.com/minad/corfu][corfu]] and [[https://github.com/jdtsmith/kind-icon][kind-icon]], you can use the following setting for icon mapping: #+BEGIN_SRC emacs-lisp (setq kind-icon-use-icons nil) (setq kind-icon-mapping `( (array ,(nerd-icons-codicon &#34;nf-cod-symbol_array&#34;) :face font-lock-type-face) (boolean ,(nerd-icons-codicon &#34;nf-cod-symbol_boolean&#34;) :face font-lock-builtin-face) (class ,(nerd-icons-codicon &#34;nf-cod-symbol_class&#34;) :face font-lock-type-face) (color ,(nerd-icons-codicon &#34;nf-cod-symbol_color&#34;) :face success) (command ,(nerd-icons-codicon &#34;nf-cod-terminal&#34;) :face default) (constant ,(nerd-icons-codicon &#34;nf-cod-symbol_constant&#34;) :face font-lock-constant-face) (constructor ,(nerd-icons-codicon &#34;nf-cod-triangle_right&#34;) :face font-lock-function-name-face) (enummember ,(nerd-icons-codicon &#34;nf-cod-symbol_enum_member&#34;) :face font-lock-builtin-face) (enum-member ,(nerd-icons-codicon &#34;nf-cod-symbol_enum_member&#34;) :face font-lock-builtin-face) (enum ,(nerd-icons-codicon &#34;nf-cod-symbol_enum&#34;) :face font-lock-builtin-face) (event ,(nerd-icons-codicon &#34;nf-cod-symbol_event&#34;) :face font-lock-warning-face) (field ,(nerd-icons-codicon &#34;nf-cod-symbol_field&#34;) :face font-lock-variable-name-face) (file ,(nerd-icons-codicon &#34;nf-cod-symbol_file&#34;) :face font-lock-string-face) (folder ,(nerd-icons-codicon &#34;nf-cod-folder&#34;) :face font-lock-doc-face) (interface ,(nerd-icons-codicon &#34;nf-cod-symbol_interface&#34;) :face font-lock-type-face) (keyword ,(nerd-icons-codicon &#34;nf-cod-symbol_keyword&#34;) :face font-lock-keyword-face) (macro ,(nerd-icons-codicon &#34;nf-cod-symbol_misc&#34;) :face font-lock-keyword-face) (magic ,(nerd-icons-codicon &#34;nf-cod-wand&#34;) :face font-lock-builtin-face) (method ,(nerd-icons-codicon &#34;nf-cod-symbol_method&#34;) :face font-lock-function-name-face) (function ,(nerd-icons-codicon &#34;nf-cod-symbol_method&#34;) :face font-lock-function-name-face) (module ,(nerd-icons-codicon &#34;nf-cod-file_submodule&#34;) :face font-lock-preprocessor-face) (numeric ,(nerd-icons-codicon &#34;nf-cod-symbol_numeric&#34;) :face font-lock-builtin-face) (operator ,(nerd-icons-codicon &#34;nf-cod-symbol_operator&#34;) :face font-lock-comment-delimiter-face) (param ,(nerd-icons-codicon &#34;nf-cod-symbol_parameter&#34;) :face default) (property ,(nerd-icons-codicon &#34;nf-cod-symbol_property&#34;) :face font-lock-variable-name-face) (reference ,(nerd-icons-codicon &#34;nf-cod-references&#34;) :face font-lock-variable-name-face) (snippet ,(nerd-icons-codicon &#34;nf-cod-symbol_snippet&#34;) :face font-lock-string-face) (string ,(nerd-icons-codicon &#34;nf-cod-symbol_string&#34;) :face font-lock-string-face) (struct ,(nerd-icons-codicon &#34;nf-cod-symbol_structure&#34;) :face font-lock-variable-name-face) (text ,(nerd-icons-codicon &#34;nf-cod-text_size&#34;) :face font-lock-doc-face) (typeparameter ,(nerd-icons-codicon &#34;nf-cod-list_unordered&#34;) :face font-lock-type-face) (type-parameter ,(nerd-icons-codicon &#34;nf-cod-list_unordered&#34;) :face font-lock-type-face) (unit ,(nerd-icons-codicon &#34;nf-cod-symbol_ruler&#34;) :face font-lock-constant-face) (value ,(nerd-icons-codicon &#34;nf-cod-symbol_field&#34;) :face font-lock-builtin-face) (variable ,(nerd-icons-codicon &#34;nf-cod-symbol_variable&#34;) :face font-lock-variable-name-face) (t ,(nerd-icons-codicon &#34;nf-cod-code&#34;) :face font-lock-warning-face))) #+END_SRC&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>snosov1/toc-org</title>
    <updated>2023-05-21T01:51:58Z</updated>
    <id>tag:github.com,2023-05-21:/snosov1/toc-org</id>
    <link href="https://github.com/snosov1/toc-org" rel="alternate"></link>
    <summary type="html">&lt;p&gt;toc-org is an Emacs utility to have an up-to-date table of contents in the org files without exporting (useful primarily for readme files on GitHub)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://travis-ci.org/snosov1/toc-org][file:https://api.travis-ci.org/snosov1/toc-org.svg?branch=master]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=toc-org= helps you to have an up-to-date table of contents in org files without exporting (useful primarily for readme files on GitHub).&lt;/p&gt; &#xA;&lt;p&gt;It is similar to the [[https://github.com/ardumont/markdown-toc][markdown-toc]] package, but works for org files. Since recently, =toc-org=, actually, works in [[#markdown-support][markdown]], too!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Previous name of the package is =org-toc=. It was changed because of a name conflict with one of the org contrib modules.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :TOC:QUOTE: #+BEGIN_QUOTE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#about][About]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#via-packageel][via package.el]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#manual][Manual]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#use][Use]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#follow-links][Follow links]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#exclude-headings][Exclude headings]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#quote-table-of-contents][Quote table of contents]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#shortcut-for-toc-tag][Shortcut for TOC tag]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#markdown-support][Markdown support]]&lt;/li&gt; &#xA; &lt;li&gt;[[#different-href-styles][Different href styles]]&lt;/li&gt; &#xA; &lt;li&gt;[[#example][Example]] #+END_QUOTE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation ** via package.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://elpa.nongnu.org/nongnu/toc-org.html][https://elpa.nongnu.org/nongnu/toc-org.svg]] [[http://melpa.org/#/toc-org][file:http://melpa.org/packages/toc-org-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This is the simplest method if you have the package.el module (built-in since Emacs 24.1) you can simply use =M-x package-install= after setting up the [[http://melpa.org/#/getting-started][MELPA]] repository and then put the following snippet in your ~/.emacs file&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (if (require &#39;toc-org nil t) (progn (add-hook &#39;org-mode-hook &#39;toc-org-mode)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ;; enable in markdown, too&#xA;    (add-hook &#39;markdown-mode-hook &#39;toc-org-mode)&#xA;    (define-key markdown-mode-map (kbd &#34;\C-c\C-o&#34;) &#39;toc-org-markdown-follow-thing-at-point))&#xA;(warn &#34;toc-org not found&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Manual&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create folder ~/.emacs.d if you don&#39;t have it&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to it and clone toc-org there #+BEGIN_SRC sh git clone &lt;a href=&#34;https://github.com/snosov1/toc-org.git&#34;&gt;https://github.com/snosov1/toc-org.git&lt;/a&gt; #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put this in your ~/.emacs file #+BEGIN_SRC elisp (if (require &#39;toc-org nil t) (progn (add-hook &#39;org-mode-hook &#39;toc-org-mode)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;    ;; enable in markdown, too&#xA;    (add-hook &#39;markdown-mode-hook &#39;toc-org-mode)&#xA;    (define-key markdown-mode-map (kbd &#34;\C-c\C-o&#34;) &#39;toc-org-markdown-follow-thing-at-point))&#xA;(warn &#34;toc-org not found&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After the installation, every time you&#39;ll be saving an org file, the first headline with a =:TOC:= tag will be updated with the current table of contents.&lt;/p&gt; &#xA;&lt;p&gt;To add a TOC tag, you can use the command =org-set-tags-command= (=C-c C-q=).&lt;/p&gt; &#xA;&lt;p&gt;In addition to the simple :TOC: tag, you can also use the following tag formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;:TOC_2: - sets the max depth of the headlines in the table of contents to 2 (the default)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;:TOC_2_gh: - sets the max depth as in above and also uses the GitHub-style hrefs in the table of contents (this style is default). The other supported href style is &#39;org&#39;, which is the default org style.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use =@= as separator, instead of =_=.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to set the default values of max depth and hrefify function with =toc-org-max-depth= and =toc-org-hrefify-default= variables. But, note, that if you do this outside of the org file itself, then you can face conflicts if you work on the same file collaboratively with someone else, as your default configs can vary.&lt;/p&gt; &#xA;&lt;p&gt;** Follow links&lt;/p&gt; &#xA;&lt;p&gt;If you call =M-x org-open-at-point= (=C-c C-o=) when you&#39;re at a TOC entry, the point will jump to the corresponding heading.&lt;/p&gt; &#xA;&lt;p&gt;Notice, that this functionality exploits the =org-link-translation-function= variable. So, it won&#39;t work if you use this variable for other purposes (i.e. it is not nil).&lt;/p&gt; &#xA;&lt;p&gt;You can manually disable this functionality by setting =toc-org-enable-links-opening= to nil.&lt;/p&gt; &#xA;&lt;p&gt;** Exclude headings&lt;/p&gt; &#xA;&lt;p&gt;Headings tagged with =:noexport:= will be excluded from the TOC. If you want to preserve the heading, but strip its children (for changelog entries, for example), you can tag it =:noexport_1:= (by analogy, you can use =:noexport_2:=, =:noexport_3:=, etc. for children of deeper levels). Note, though, =:noexport:= has a similar meaning in =org-mode=, which I hope is a Good Thing (tm). However, =:noexport_1:= and friends won&#39;t be recognized by =org-mode= as anything special. Look at =org-export-exclude-tags= variable for more details.&lt;/p&gt; &#xA;&lt;p&gt;** Quote table of contents&lt;/p&gt; &#xA;&lt;p&gt;For presentation purposes, you might want to put the table of contents in a quote block (i.e. =#+BEGIN_QUOTE= / =#+END_QUOTE=). In that case, GitHub, for example, will add a vertical line to the left of the TOC that makes it distinct from the main text. To do this, just add a =:QUOTE:= tag to the TOC heading.&lt;/p&gt; &#xA;&lt;p&gt;** Shortcut for TOC tag&lt;/p&gt; &#xA;&lt;p&gt;In your emacs&#39; setup, you can bind a tag =:TOC:= to a binding =T=:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-to-list &#39;org-tag-alist &#39;(&#34;TOC&#34; . ?T)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Now =C-c C-q T RET= and you are done putting the =:TOC:= entry.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Markdown support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also enable the mode in Markdown files and get pretty much the same functionality. The package will&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Look for &#39;#&#39;s instead of &#39;*&#39;s as heading markers.&lt;/li&gt; &#xA; &lt;li&gt;Expect the =:TOC:= tag to appear as comment, like, =&amp;lt;-- :TOC: --&amp;gt;=&lt;/li&gt; &#xA; &lt;li&gt;Format the links and the quote block according to Markdown syntax&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC markdown&lt;/p&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;h1&gt;Table of Contents &amp;lt;-- :TOC: --&amp;gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#via-packageel&#34;&gt;via package.el&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#use&#34;&gt;Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snosov1/toc-org/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;via package.el&lt;/h2&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;h1&gt;Use&lt;/h1&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Different href styles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, only 2 href styles are supported: =gh= and =org=. You can easily define your own styles. If you use the tag =:TOC_2_STYLE:= (=STYLE= being a style name), then the package will look for a function named =toc-org-hrefify-STYLE=.&lt;/p&gt; &#xA;&lt;p&gt;It should accept a heading string and a hash table of previously generated hrefs. The table can be used to maintain href uniqueness (see =toc-org-hrefify-gh=, for example). Return value should be a href corresponding to that heading.&lt;/p&gt; &#xA;&lt;p&gt;E.g. for =org= style it makes links to be the same as their visible text:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defun toc-org-hrefify-org (str &amp;amp;optional hash) &#34;Given a heading, transform it into a href using the org-mode rules.&#34; (toc-org-format-visible-link str)) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Example #+BEGIN_SRC org&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;About&lt;/li&gt; &#xA;   &lt;li&gt;Table of Contents :TOC:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#about][About]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#installation][Installation]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#via-packageel][via package.el]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#manual][Manual]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#use][Use]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#example][Example]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Installation ** via package.el ** Manual&lt;/li&gt; &#xA;   &lt;li&gt;Use&lt;/li&gt; &#xA;   &lt;li&gt;Example #+END_SRC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ardumont/markdown-toc</title>
    <updated>2023-05-21T01:51:58Z</updated>
    <id>tag:github.com,2023-05-21:/ardumont/markdown-toc</id>
    <link href="https://github.com/ardumont/markdown-toc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate a TOC in markdown file&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;markdown-toc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/ardumont/markdown-toc&#34;&gt;&lt;img src=&#34;https://travis-ci.com/ardumont/markdown-toc.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/ardumont/markdown-toc?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/ardumont/markdown-toc/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/markdown-toc&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/markdown-toc-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/markdown-toc&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/markdown-toc-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://archive.softwareheritage.org/browse/origin/?origin_url=https://github.com/ardumont/markdown-toc&#34;&gt;&lt;img src=&#34;https://archive.softwareheritage.org/badge/origin/https://github.com/ardumont/markdown-toc/&#34; alt=&#34;SWH&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#use&#34;&gt;Use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#create&#34;&gt;Create&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#user-toc-manipulation&#34;&gt;User toc manipulation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#update&#34;&gt;Update&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#create-elsewhere&#34;&gt;Create elsewhere&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#remove&#34;&gt;Remove&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#customize&#34;&gt;Customize&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#minor-mode&#34;&gt;Minor mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#emacs-package-repository&#34;&gt;emacs package repository&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#melpa-stable&#34;&gt;melpa stable&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#melpa&#34;&gt;melpa&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#install-1&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#emacs-lisp-file&#34;&gt;emacs-lisp file&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardumont/markdown-toc/master/#inspiration&#34;&gt;Inspiration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;p&gt;A simple mode to create TOC in a well-formed markdown file.&lt;/p&gt; &#xA;&lt;p&gt;Note that the TOC is well-formed if the markdown is (cf. #15).&lt;/p&gt; &#xA;&lt;h1&gt;Use&lt;/h1&gt; &#xA;&lt;h2&gt;Create&lt;/h2&gt; &#xA;&lt;p&gt;Inside a markdown file, the first time, place yourself where you want to insert the TOC:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x markdown-toc-generate-toc&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will compute the TOC and insert it at current position.&lt;/p&gt; &#xA;&lt;p&gt;You can also execute: &lt;kbd&gt;M-x markdown-toc-generate-or-refresh-toc&lt;/kbd&gt; to either gnerate a TOC when none exists or refresh the currently existing one.&lt;/p&gt; &#xA;&lt;p&gt;Here is one possible output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;&amp;lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&amp;gt;&#xA;**Table of Contents**&#xA;&#xA;- [Use](#use)&#xA;    - [Create](#create)&#xA;    - [Update](#update)&#xA;    - [Create elsewhere](#create-elsewhere)&#xA;- [Install](#install)&#xA;    - [emacs package repository](#emacs-package-repository)&#xA;        - [Setup](#setup)&#xA;            - [melpa stable](#melpa-stable)&#xA;            - [melpa](#melpa)&#xA;            - [marmalade](#marmalade)&#xA;        - [Install](#install)&#xA;    - [emacs-lisp file](#emacs-lisp-file)&#xA;- [Inspiration](#inspiration)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;User toc manipulation&lt;/h2&gt; &#xA;&lt;p&gt;If the user would want to enhance the generated toc, (s)he could use the following function markdown-toc-user-toc-structure-manipulation-fn:&lt;/p&gt; &#xA;&lt;p&gt;It expects as argument the toc-structure markdown-toc uses to generate the toc. The remaining code expects a similar structure.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#39;((0 . &#34;some markdown page title&#34;)&#xA;  (0 . &#34;main title&#34;)&#xA;  (1 . &#34;Sources&#34;)&#xA;  (2 . &#34;Marmalade (recommended)&#34;)&#xA;  (2 . &#34;Melpa-stable&#34;)&#xA;  (2 . &#34;Melpa (~snapshot)&#34;)&#xA;  (1 . &#34;Install&#34;)&#xA;  (2 . &#34;Load org-trello&#34;)&#xA;  (2 . &#34;Alternative&#34;)&#xA;  (3 . &#34;Git&#34;)&#xA;  (3 . &#34;Tar&#34;)&#xA;  (0 . &#34;another title&#34;)&#xA;  (1 . &#34;with&#34;)&#xA;  (1 . &#34;some&#34;)&#xA;  (1 . &#34;heading&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So for example, as asked in #16, one could drop the first element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables &#39;(markdown-toc-user-toc-structure-manipulation-fn &#39;cdr))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or drop all h1 titles... or whatever:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;dash)&#xA;(custom-set-variables &#39;(markdown-toc-user-toc-structure-manipulation-fn&#xA;  (lambda (toc-structure)&#xA;  (-filter (lambda (l) (let ((index (car l)))&#xA;                    (&amp;lt;= 1 index)))&#xA;           toc-structure)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Update&lt;/h2&gt; &#xA;&lt;p&gt;To update the existing TOC, simply execute: &lt;kbd&gt;M-x markdown-toc-refresh-toc&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will update the current TOC.&lt;/p&gt; &#xA;&lt;h2&gt;Create elsewhere&lt;/h2&gt; &#xA;&lt;p&gt;To create another updated TOC elsewhere, execute &lt;kbd&gt;M-x markdown-toc-generate-toc&lt;/kbd&gt; again, this will remove the old TOC and insert the updated one from where you stand.&lt;/p&gt; &#xA;&lt;h2&gt;Remove&lt;/h2&gt; &#xA;&lt;p&gt;To remove a TOC, execute &lt;kbd&gt;M-x markdown-toc-delete-toc&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;p&gt;Currently, you can customize the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;markdown-toc-header-toc-start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;markdown-toc-header-toc-title&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;markdown-toc-header-toc-end&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;markdown-toc-indentation-space&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Customize them as following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(markdown-toc-header-toc-start &#34;&amp;lt;!-- customized start--&amp;gt;&#34;)&#xA; &#39;(markdown-toc-header-toc-title &#34;**customized title**&#34;)&#xA; &#39;(markdown-toc-header-toc-end &#34;&amp;lt;!-- customized end --&amp;gt;&#34;)&#xA; &#39;(markdown-toc-indentation-space 4))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Minor mode&lt;/h2&gt; &#xA;&lt;p&gt;markdown-toc-mode provides a minor mode with the following default binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq markdown-toc-mode-map&#xA;      (let ((map (make-sparse-keymap)))&#xA;        (define-key map (kbd &#34;C-c m .&#34;) &#39;markdown-toc-follow-link-at-point)&#xA;        (define-key map (kbd &#34;C-c m t&#34;) &#39;markdown-toc-generate-or-refresh-toc)&#xA;        (define-key map (kbd &#34;C-c m d&#34;) &#39;markdown-toc-delete-toc)&#xA;        (define-key map (kbd &#34;C-c m v&#34;) &#39;markdown-toc-version)&#xA;        map))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To (de)activate this in an org file: /M-x markdown-toc-mode/&lt;/p&gt; &#xA;&lt;p&gt;You can also use emacs to setup your own bindings.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;emacs package repository&lt;/h2&gt; &#xA;&lt;p&gt;You need to add melpa or melpa-stable package repository before installing it.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;h4&gt;melpa stable&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa-stable&#34; .&#xA;                                 &#34;http://melpa-stable.milkbox.net/packages/&#34;))&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then hit &lt;kbd&gt;M-x eval-buffer&lt;/kbd&gt; to evaluate the buffer&#39;s contents.&lt;/p&gt; &#xA;&lt;h4&gt;melpa&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; .&#xA;                                 &#34;http://melpa.milkbox.net/packages/&#34;))&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then hit &lt;kbd&gt;M-x eval-buffer&lt;/kbd&gt; to evaluate the buffer&#39;s contents.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-install RET markdown-toc RET&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h2&gt;emacs-lisp file&lt;/h2&gt; &#xA;&lt;p&gt;Retrieve the markdown-toc.el &lt;a href=&#34;https://github.com/ardumont/markdown-toc/releases&#34;&gt;https://github.com/ardumont/markdown-toc/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then hit &lt;kbd&gt;M-x package-install-file RET markdown-toc.el RET&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Inspiration&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thlorenz/doctoc&#34;&gt;https://github.com/thlorenz/doctoc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The problem I had with doctoc is the installation process. I do not want to install the node tools just for this.&lt;/p&gt;</summary>
  </entry>
</feed>