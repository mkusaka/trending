<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:40:33Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joostkremers/parsebib</title>
    <updated>2022-09-25T01:40:33Z</updated>
    <id>tag:github.com,2022-09-25:/joostkremers/parsebib</id>
    <link href="https://github.com/joostkremers/parsebib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elisp library for reading .bib files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Parsebib&lt;/h1&gt; &#xA;&lt;p&gt;(c) 2014-2022 Joost Kremers&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Parsebib&lt;/code&gt; is an Elisp library for reading bibliographic database files. It supports both BibTeX / &lt;code&gt;biblatex&lt;/code&gt; (&lt;code&gt;.bib&lt;/code&gt;) files and CSL-JSON (&lt;code&gt;.json&lt;/code&gt;) files.&lt;/p&gt; &#xA;&lt;p&gt;The library provides functions that parse the current buffer. They are intended to be used inside a &lt;code&gt;with-temp-buffer&lt;/code&gt; combined with &lt;code&gt;insert-file-contents&lt;/code&gt;, but they can also be used in a buffer visiting a bibliography file, of course.&lt;/p&gt; &#xA;&lt;p&gt;The bibliographic data is returned as a hash table. To parse multiple files, you can either insert them all into one temp buffer, or pass the hash table obtained by parsing the first buffer as an argument when parsing the next buffer.&lt;/p&gt; &#xA;&lt;p&gt;The data in the bibliography file can be returned in two ways. The first option is for &lt;code&gt;parsebib&lt;/code&gt; to return the contents of the file accurately. This means that the field values as returned by &lt;code&gt;parsebib&lt;/code&gt; are literally the field values in the file. For various reasons, however, this representation is not ideal if you want to present the content of a bibliography file to the user with the aim of selecting one or more entries&lt;/p&gt; &#xA;&lt;p&gt;Therefore, the second option is for &lt;code&gt;parsebib&lt;/code&gt; to return the field values in such a way that they are suitable for display. For BibTeX / &lt;code&gt;biblatex&lt;/code&gt; files, this means that &lt;code&gt;@String&lt;/code&gt; abbreviations are expanded and cross-references are resolved. For CSL-JSON files, it means that field values that are not strings (notably name and date fields) are converted to strings in a sensible way.&lt;/p&gt; &#xA;&lt;h2&gt;BibTeX / &lt;code&gt;biblatex&lt;/code&gt; vs. CSL-JSON&lt;/h2&gt; &#xA;&lt;p&gt;Although both are bibliography file formats, there are obviously differences between BibTeX / &lt;code&gt;biblatex&lt;/code&gt; on the one hand and CSL-JSON on the other. The entry types and field names are different, and CSL-JSON does not have something similar to &lt;code&gt;@String&lt;/code&gt; abbreviations or cross-references.&lt;/p&gt; &#xA;&lt;p&gt;Especially relevant for the purpose of this library is that there are differences in the format of the data returned for the two types of files. The bibliographic data is returned as a hash table. In this hash table, each entry is stored under its entry key (which is the &lt;code&gt;id&lt;/code&gt; field in CSL-JSON) as an alist of &lt;code&gt;(&amp;lt;field&amp;gt; . &amp;lt;value&amp;gt;)&lt;/code&gt; pairs. In BibTeX data, &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt; is a string and field names are case-insensitive, so you may have &lt;code&gt;&#34;Author&#34;&lt;/code&gt; or &lt;code&gt;&#34;author&#34;&lt;/code&gt;, and both may occur in a single &lt;code&gt;.bib&lt;/code&gt; file. Furthermore, &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; is always a string.&lt;/p&gt; &#xA;&lt;p&gt;In CSL-JSON data, the format of the alist is slightly different: &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt; is not a string but a symbol and the symbol name is case-sensitive. The CSL-JSON standard describes which field names are lower case (most are) and which are upper case (&lt;code&gt;ISBN&lt;/code&gt;, &lt;code&gt;DOI&lt;/code&gt;, etc.) Furthermore, the &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; part of the alist items may be a string, a number or a vector, though when parsing a &lt;code&gt;.json&lt;/code&gt; file, you can have &lt;code&gt;parsebib&lt;/code&gt; convert all values to strings.&lt;/p&gt; &#xA;&lt;p&gt;You can access the data in an entry&#39;s alist with &lt;code&gt;assoc&lt;/code&gt; or &lt;code&gt;alist-get&lt;/code&gt;, but in order to accommodate for the differences in the type of field names, you may want to use &lt;code&gt;assoc-string&lt;/code&gt; instead, which generalises over symbols and strings and has a &lt;code&gt;case-fold&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;Another thing to note is that in BibTeX data, the type and key of an entry are stored in the entry&#39;s alist under &lt;code&gt;=type=&lt;/code&gt; and &lt;code&gt;=key=&lt;/code&gt;, while the same information is available in CSL-JSON data under &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;, respectively. While some of the core information on an entry is available in fields with the same name in both formats (esp. author, editor and title), most fields are named differently (i.e.., the &lt;code&gt;year&lt;/code&gt; field in BibTeX corresponds to the &lt;code&gt;issued&lt;/code&gt; field in CSL-JSON).&lt;/p&gt; &#xA;&lt;p&gt;One last difference to note is that the general buffer-parsing functions, &lt;code&gt;parsebib-parse-bib-buffer&lt;/code&gt; and &lt;code&gt;parsebib-parse-json-buffer&lt;/code&gt; do not have the same type of return value. See the function descriptions below for details.&lt;/p&gt; &#xA;&lt;p&gt;There is also a function &lt;code&gt;parsebib-parse&lt;/code&gt; that takes a list of files and returns the entries in them. It has a slightly simplified interface, but it is format-agnostic: it handles both &lt;code&gt;.bib&lt;/code&gt; and &lt;code&gt;.json&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h2&gt;BibTeX / &lt;code&gt;biblatex&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support for &lt;code&gt;.bib&lt;/code&gt; files comes in two different APIs, a higher-level one that reads all items in one go, and a lower-level one that reads one item at a time. &lt;code&gt;Parsebib&lt;/code&gt; supports &lt;code&gt;@Preamble&lt;/code&gt;, &lt;code&gt;@String&lt;/code&gt; and &lt;code&gt;@Comment&lt;/code&gt; items, and obviously actual bibliographic entries.&lt;/p&gt; &#xA;&lt;h3&gt;Returning entries for display&lt;/h3&gt; &#xA;&lt;p&gt;In order to return entries in a way that is suitable for display, &lt;code&gt;parsebib&lt;/code&gt; can expand &lt;code&gt;@string&lt;/code&gt; abbreviations and resolve cross-references while reading the contents of a &lt;code&gt;.bib&lt;/code&gt; file. When &lt;code&gt;@string&lt;/code&gt; abbreviations are expanded, abbreviations in field values (or &lt;code&gt;@string&lt;/code&gt; definitions) are replaced with their expansion. In addition, the braces or double quotes around field values are removed, and multiple spaces and newlines in sequence are reduced to a single space.&lt;/p&gt; &#xA;&lt;p&gt;Resolving cross-references means that if an entry that has a &lt;code&gt;crossref&lt;/code&gt; field, fields in the cross-referenced entry that are not already part of the cross-referencing entry are added to it. Both BibTeX&#39;s (rather simplistic) inheritance rule and BibLaTeX&#39;s more sophisticated inheritance schema are supported. It is also possible to specify a custom inheritance schema.&lt;/p&gt; &#xA;&lt;p&gt;Expanding &lt;code&gt;@Strings&lt;/code&gt; and resolving cross-references can also be done across files, if the result of parsing one file are passed as arguments when parsing the next file. Details are discussed below.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you wish to resolve cross-references, it is usually also necessary to expand &lt;code&gt;@String&lt;/code&gt; abbreviations, because the &lt;code&gt;crossref&lt;/code&gt; field may contain such an abbreviation. Resolving such a cross-reference will not work unless the abbreviation is expanded.&lt;/p&gt; &#xA;&lt;p&gt;When parsing a bibliography file for display, one may not be interested in all the data of each entry. The higher-level API functions can therefore take a list of fields to be read and included in the results. Fields not in this list are ignored, except for the &lt;code&gt;=key=&lt;/code&gt; and &lt;code&gt;=type=&lt;/code&gt; fields, which are always included.&lt;/p&gt; &#xA;&lt;p&gt;If you use this option and also want to resolve cross-references, you need to include the &lt;code&gt;crossref&lt;/code&gt; field in the list of requested fields. Without it, &lt;code&gt;parsebib&lt;/code&gt; is not able to determine which entries cross-reference another entry and no cross-references will be resolved. Also note that cross-referencing may add fields to an entry that are not on the list of requested fields. For example, in &lt;code&gt;biblatex&lt;/code&gt;, the &lt;code&gt;booktitle&lt;/code&gt; field of an &lt;code&gt;InBook&lt;/code&gt; entry is linked to the &lt;code&gt;title&lt;/code&gt; field of the cross-referenced &lt;code&gt;Book&lt;/code&gt; entry. In such a case, if &lt;code&gt;title&lt;/code&gt; is on the list of requested fields, the &lt;code&gt;booktitle&lt;/code&gt; field is added to the cross-referencing entry, even if &lt;code&gt;booktitle&lt;/code&gt; is not on the list of requested fields.&lt;/p&gt; &#xA;&lt;h3&gt;Higher-level API&lt;/h3&gt; &#xA;&lt;p&gt;The higher-level API consists of functions that read and return all items of a specific type in the current buffer. They do not move point. Note that the arguments in these functions (except in &lt;code&gt;parsebib-expand-xrefs&lt;/code&gt;) are keyword arguments.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-collect-bib-entries (&amp;amp;key entries strings inheritance fields)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Collect all entries in the current buffer and return them as a hash table, where the keys correspond to the BibTeX keys and the values are alists consisting of &lt;code&gt;(&amp;lt;field&amp;gt; . &amp;lt;value&amp;gt;)&lt;/code&gt; pairs of the relevant entry. In this alist, the BibTeX key and the entry type are stored under &lt;code&gt;=key=&lt;/code&gt; and &lt;code&gt;=type=&lt;/code&gt;, respectively. Note that both &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; are strings.&lt;/p&gt; &#xA;&lt;p&gt;The argument &lt;code&gt;entries&lt;/code&gt; can be used to pass a (possibly non-empty) hash table in which the entries are stored. This can be used to combine multiple &lt;code&gt;.bib&lt;/code&gt; files into a single hash table, or to update an existing hash table by rereading its &lt;code&gt;.bib&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If the argument &lt;code&gt;strings&lt;/code&gt; is present, &lt;code&gt;@string&lt;/code&gt; abbreviations are expanded. &lt;code&gt;strings&lt;/code&gt; should be a hash table of &lt;code&gt;@string&lt;/code&gt; definitions as returned by &lt;code&gt;parsebib-collect-strings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the argument &lt;code&gt;inheritance&lt;/code&gt; is present, cross-references among entries are resolved. It can be &lt;code&gt;t&lt;/code&gt;, in which case the file-local or global value of &lt;code&gt;bibtex-dialect&lt;/code&gt; is used to determine which inheritance schema is used. It can also be one of the symbols &lt;code&gt;BibTeX&lt;/code&gt; or &lt;code&gt;biblatex&lt;/code&gt;, or it can be a custom inheritance schema. Note that cross-references are resolved against the entries that appear in the buffer &lt;em&gt;above&lt;/em&gt; the current entry, and also against the entries in the hash table &lt;code&gt;entries&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The argument &lt;code&gt;fields&lt;/code&gt; is a list of names of the fields that should be included in the entries returned. Fields not in this list are ignored (except &lt;code&gt;=type=&lt;/code&gt; and &lt;code&gt;=key=&lt;/code&gt;, which are always included). Note that the field names should be strings; comparison is case-insensitive.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-collect-strings (&amp;amp;key strings expand-strings)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Collect all &lt;code&gt;@string&lt;/code&gt; definitions in the current buffer and return them as a hash table. The argument &lt;code&gt;strings&lt;/code&gt; can be used to provide a hash table to store the definitions in. If it is &lt;code&gt;nil&lt;/code&gt;, a new hash table is created.&lt;/p&gt; &#xA;&lt;p&gt;The argument &lt;code&gt;expand-strings&lt;/code&gt; is a boolean value. If non-nil, any abbreviations found in the string definitions are expanded against the &lt;code&gt;@string&lt;/code&gt; definitions appearing earlier in the &lt;code&gt;.bib&lt;/code&gt; file and against &lt;code&gt;@string&lt;/code&gt; definitions in &lt;code&gt;strings&lt;/code&gt;, if provided.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-collect-preambles&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Collect all &lt;code&gt;@preamble&lt;/code&gt; definitions in the current buffer and return them as a list.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-collect-comments&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Collect all &lt;code&gt;@comments&lt;/code&gt; in the current buffer and return them as a list.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-find-bibtex-dialect&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find and return the BibTeX dialect for the current buffer. The BibTeX dialect is either &lt;code&gt;BibTeX&lt;/code&gt; or &lt;code&gt;biblatex&lt;/code&gt; and can be defined in a local-variable block at the end of the file.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-parse-bib-buffer (&amp;amp;keys entries strings expand-strings inheritance fields replace-TeX)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Collect all BibTeX data in the current buffer. Return a five-element list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(&amp;lt;entries&amp;gt; &amp;lt;strings&amp;gt; &amp;lt;preambles&amp;gt; &amp;lt;comments&amp;gt; &amp;lt;BibTeX dialect&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;entries&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;strings&amp;gt;&lt;/code&gt; are hash tables, &lt;code&gt;&amp;lt;preambles&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;comments&amp;gt;&lt;/code&gt; are lists, &lt;code&gt;&amp;lt;BibTeX dialect&amp;gt;&lt;/code&gt; is a symbol (either &lt;code&gt;BibTeX&lt;/code&gt; or &lt;code&gt;biblatex&lt;/code&gt;) or &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the arguments &lt;code&gt;entries&lt;/code&gt; and &lt;code&gt;strings&lt;/code&gt; are present, they should be hash tables with &lt;code&gt;equal&lt;/code&gt; as the &lt;code&gt;:test&lt;/code&gt; function. They are then used to store the entries and strings, respectively.&lt;/p&gt; &#xA;&lt;p&gt;The argument &lt;code&gt;expand-strings&lt;/code&gt; functions as the same-name argument in &lt;code&gt;parsebib-collect-strings&lt;/code&gt;, and the arguments &lt;code&gt;inheritance&lt;/code&gt; and &lt;code&gt;fields&lt;/code&gt; function as the same-name arguments in &lt;code&gt;parsebib-collect-bib-entries&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;replace-TeX&lt;/code&gt; in set, (La)TeX markup in field values is replaced with text that is more suitable for display. The variable &lt;code&gt;parsebib-TeX-markup-replace-alist&lt;/code&gt; determines what exactly is replaced. This variable can be &lt;code&gt;let&lt;/code&gt;-bound around calls to the parsing functions, but note that its value is construed on the basis of the variables &lt;code&gt;parsebib-TeX-command-relacement-alist&lt;/code&gt;, &lt;code&gt;parsebib-TeX-accent-replacement-alist&lt;/code&gt; or &lt;code&gt;parsebib-TeX-literal-replacement-alist&lt;/code&gt;, so you may want to customise those instead. See their doc strings and the doc string of &lt;code&gt;parsebib-TeX-markup-replacement-alist&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;parsebib-parse-bib-buffer&lt;/code&gt; only makes one pass through the buffer. It is therefore a bit faster than calling all the &lt;code&gt;parsebib-collect-*&lt;/code&gt; functions above in a row, since that would require making four passes through the buffer.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-clean-TeX-markup-exclude-fields&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This variable is set to a list of fields in which no clean-up of TeX markup should take place when parsing a buffer. To customise this list, you can &lt;code&gt;let&lt;/code&gt;-bind it around a call to &lt;code&gt;parsebib-parse-bib-buffer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-expand-xrefs (entries inheritance)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Expand cross-references in &lt;code&gt;entries&lt;/code&gt; according to inheritance schema &lt;code&gt;inheritance&lt;/code&gt;. &lt;code&gt;entries&lt;/code&gt; should be a hash table as returned by &lt;code&gt;parsebib-collect-bib-entries&lt;/code&gt;. Each entry with a &lt;code&gt;crossref&lt;/code&gt; field is expanded as described above. The results are stored in the hash table &lt;code&gt;entries&lt;/code&gt; again, the return value of this function is always &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function can be useful if you use the lower-level API to parse &lt;code&gt;.bib&lt;/code&gt; files, because in that case, resolving cross-references cannot be done while reading entries.&lt;/p&gt; &#xA;&lt;h3&gt;Lower-level API&lt;/h3&gt; &#xA;&lt;p&gt;The lower-level API consists of functions that do the actual reading of a BibTeX item. Unlike the higher-level API, the functions here are dependent on the position of &lt;code&gt;point&lt;/code&gt;. They are meant to be used in a &lt;code&gt;while&lt;/code&gt; loop in which &lt;code&gt;parsebib-find-next-item&lt;/code&gt; is used to move &lt;code&gt;point&lt;/code&gt; to the next item and then use one of the &lt;code&gt;parsebib-read-*&lt;/code&gt; functions to read the contents of the item.&lt;/p&gt; &#xA;&lt;p&gt;All functions here take an optional position argument, which is the position in the buffer from which they should start reading. The default value is &lt;code&gt;(point)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-find-next-item (&amp;amp;optional pos)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find the first BibTeX item following &lt;code&gt;pos&lt;/code&gt;, where an item is either a BibTeX entry, or a &lt;code&gt;@Preamble&lt;/code&gt;, &lt;code&gt;@String&lt;/code&gt;, or &lt;code&gt;@Comment&lt;/code&gt;. This function returns the item&#39;s type as a string, i.e., either &lt;code&gt;&#34;preamble&#34;&lt;/code&gt;, &lt;code&gt;&#34;string&#34;&lt;/code&gt;, or &lt;code&gt;&#34;comment&#34;&lt;/code&gt;, or the entry type. Note that the &lt;code&gt;@&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; part of the returned string. This function moves point into the correct position to start reading the actual contents of the item, which is done by one of the following functions.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-read-entry (type &amp;amp;optional pos strings keep-fields replace-TeX)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-read-string (&amp;amp;optional pos strings)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-read-preamble (&amp;amp;optional pos)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-read-comment (&amp;amp;optional pos)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;These functions do what their names suggest: read one single item of the type specified. Each takes the &lt;code&gt;pos&lt;/code&gt; argument just mentioned. In addition, &lt;code&gt;parsebib-read-string&lt;/code&gt; and &lt;code&gt;parsebib-read-entry&lt;/code&gt; take an extra argument, a hash table of &lt;code&gt;@string&lt;/code&gt; definitions. When provided, abbreviations in the &lt;code&gt;@string&lt;/code&gt; definitions or in field values are expanded. Note that &lt;code&gt;parsebib-read-entry&lt;/code&gt; takes the entry type (as returned by &lt;code&gt;parsebib-find-next-entry&lt;/code&gt;) as argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;parsebib-read-entry&lt;/code&gt; takes two more optional arguments: &lt;code&gt;keep-fields&lt;/code&gt; and &lt;code&gt;replace-TeX&lt;/code&gt;. &lt;code&gt;keep-fields&lt;/code&gt; is a list of names of the fields that should be included in the entries returned. Fields not in this list are ignored (except for &lt;code&gt;=type=&lt;/code&gt; and &lt;code&gt;=key=&lt;/code&gt;, which are always included). Note that the field names should be strings; comparison is case-insensitive. &lt;code&gt;replace-TeX&lt;/code&gt; is a flag indicating whether TeX markup in field values should be replaced with something that&#39;s more suitable for display.&lt;/p&gt; &#xA;&lt;p&gt;The reading functions return the contents of the item they read: &lt;code&gt;parsebib-read-preamble&lt;/code&gt; and &lt;code&gt;parsebib-read-comment&lt;/code&gt; return the text as a string. &lt;code&gt;parsebib-read-string&lt;/code&gt; returns a cons cell of the form &lt;code&gt;(&amp;lt;abbrev&amp;gt; . &amp;lt;string&amp;gt;)&lt;/code&gt;, and &lt;code&gt;parsebib-read-entry&lt;/code&gt; returns the entry as an alist of &lt;code&gt;(&amp;lt;field&amp;gt; . &amp;lt;value&amp;gt;)&lt;/code&gt; pairs. One of these pairs contains the entry type &lt;code&gt;=type=&lt;/code&gt;, and one contains the entry key. These have the keys &lt;code&gt;&#34;=key=&#34;&lt;/code&gt; and &lt;code&gt;&#34;=type=&#34;&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Note that all &lt;code&gt;parsebib-read*&lt;/code&gt; functions move point to the end of the entry.&lt;/p&gt; &#xA;&lt;p&gt;The reading functions return &lt;code&gt;nil&lt;/code&gt; if they do not find the element they should be reading at the line point is on. Point is nonetheless moved, however. Similarly, &lt;code&gt;parsebib-read-entry&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; if it finds no next entry, leaving point at the end of the buffer. Additionally, it will signal an error of type &lt;code&gt;parsebib-entry-type-error&lt;/code&gt; if it finds something that it deems to be an invalid item name. What is considered to be a valid name is determined by the regexp &lt;code&gt;parsebib-bibtex-identifier&lt;/code&gt;, which is set to &lt;code&gt;&#34;[^^\&#34;@\\&amp;amp;$#%&#39;,={}() \t\n\f]*&#34;&lt;/code&gt;, meaning that any string not containing whitespace or any of the characters &lt;code&gt;^&#34;@\&amp;amp;$#%&#39;,={}()&lt;/code&gt; is considered a valid identifier.&lt;/p&gt; &#xA;&lt;h4&gt;parsebib-clean-TeX-markup (string)&lt;/h4&gt; &#xA;&lt;p&gt;Apply all replacements in &lt;code&gt;parsebib-TeX-markup-replace-alist&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt;. Note that this function ignores &lt;code&gt;parsebib-clean-TeX-markup-exclude-fields&lt;/code&gt;. (After all, it does not even know which field &lt;code&gt;string&lt;/code&gt; comes from.)&lt;/p&gt; &#xA;&lt;h2&gt;CSL-JSON&lt;/h2&gt; &#xA;&lt;p&gt;The support for CSL-JSON files comprises just one function: &lt;code&gt;parsebib-parse-json-buffer&lt;/code&gt;. The actual parsing of the JSON data is performed by Emacs itself, either by the native JSON parsing routines (starting with Emacs 27.1, if available), or the built-in Elisp library &lt;code&gt;json.el&lt;/code&gt;. &lt;code&gt;Parsebib&lt;/code&gt; makes sure that the data is returned in a format that is similar to what is returned for &lt;code&gt;.bib&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h3&gt;Returning entries for display&lt;/h3&gt; &#xA;&lt;p&gt;When returning entries in a form that is suitable for display, the most important issue in CSL-JSON files is the fact that certain fields do not have string values. For example, name fields (&lt;code&gt;author&lt;/code&gt;, &lt;code&gt;editor&lt;/code&gt;, etc.) and date fields (&lt;code&gt;issued&lt;/code&gt;, &lt;code&gt;submitted&lt;/code&gt; etc.) are JSON arrays. Parsebib can convert these to strings if requested.&lt;/p&gt; &#xA;&lt;p&gt;As with &lt;code&gt;.bib&lt;/code&gt; files, it is possible to have &lt;code&gt;parsebib&lt;/code&gt; only return specific fields when reading &lt;code&gt;.json&lt;/code&gt; files. Here, too, the fields that identify an entry, i.e., &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;, are always included and do not need to be requested explicitly.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-parse-json-buffer (&amp;amp;key entries stringify year-only fields)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Collect all CSL-JSON data in the current buffer and return the result. The return value is a hash table, where the keys correspond to the identifiers of the entries and the values are alists consisting of &lt;code&gt;(&amp;lt;field&amp;gt; . &amp;lt;value&amp;gt;)&lt;/code&gt; pairs of the relevant entry. In this alist, the identifier is stored under the key &lt;code&gt;id&lt;/code&gt; and the entry type is stored under &lt;code&gt;type&lt;/code&gt;. &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt; is a symbol, while &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; can be a string, a vector (array) or another alist.&lt;/p&gt; &#xA;&lt;p&gt;The argument &lt;code&gt;entries&lt;/code&gt; can be used to pass a (possibly non-empty) hash table in which the entries are stored. This can be used to combine multiple &lt;code&gt;.json&lt;/code&gt; files into a single hash table, or to update an existing hash table by rereading its &lt;code&gt;.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Some field values in CSL-JSON are not strings. These are primarily name and date fields, which in CSL-JSON are represented as JSON objects. The argument &lt;code&gt;stringify&lt;/code&gt; determines how they are returned. When &lt;code&gt;stringify&lt;/code&gt; is set to &lt;code&gt;nil&lt;/code&gt;, they are returned as alists; with &lt;code&gt;stringify&lt;/code&gt; set to &lt;code&gt;t&lt;/code&gt;, they are converted to strings.&lt;/p&gt; &#xA;&lt;p&gt;The argument &lt;code&gt;year-only&lt;/code&gt; controls the way dates are converted to strings. If it non-&lt;code&gt;nil&lt;/code&gt;, only the year part is returned. This argument only takes effect if &lt;code&gt;stringify&lt;/code&gt; is set to &lt;code&gt;t&lt;/code&gt;. See below for details.&lt;/p&gt; &#xA;&lt;p&gt;The way values are converted to strings can be customised to some extent by the use of certain special variables, discussed below.&lt;/p&gt; &#xA;&lt;p&gt;The argument &lt;code&gt;fields&lt;/code&gt; is a list of names of the fields that should be included in the entries returned. Fields not in this list are ignored (except &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;, which are always included). Note that the field names should be symbols; comparison is case-sensitive.&lt;/p&gt; &#xA;&lt;p&gt;Note that all arguments in this function are keyword arguments.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-stringify-json (entry &amp;amp;optional year-only)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Convert the CSL-JSON data in &lt;code&gt;entry&lt;/code&gt; to string form. &lt;code&gt;entry&lt;/code&gt; is an alist as stored in the hash table returned by &lt;code&gt;parsebib-parse-json-buffer&lt;/code&gt;. Return value is the modified &lt;code&gt;entry&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that this function modifies &lt;code&gt;entry&lt;/code&gt; &lt;em&gt;in place&lt;/em&gt;. If you need to keep the original entry, call this function on a copy.&lt;/p&gt; &#xA;&lt;p&gt;If the argument &lt;code&gt;year-only&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, date fields are shortened to just the year.&lt;/p&gt; &#xA;&lt;p&gt;For details on the conversion, see below.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-stringify-json-field (field &amp;amp;optional short)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Convert the value of &lt;code&gt;field&lt;/code&gt; to string form and return the result. &lt;code&gt;field&lt;/code&gt; is a cons cell of the form &lt;code&gt;(&amp;lt;field&amp;gt; . &amp;lt;value&amp;gt;)&lt;/code&gt;, i.e., an element in the alist of an entry in the hash table returned by &lt;code&gt;parsebib-parse-json-buffer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The return value is a string representation of &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt;. Note that unlike &lt;code&gt;parsebib-stringify-json&lt;/code&gt;, this function does not modify its argument.&lt;/p&gt; &#xA;&lt;p&gt;The following conversions are applied:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Strings are returned unchanged.&lt;/li&gt; &#xA; &lt;li&gt;Numbers are converted to strings using &lt;code&gt;(format &#34;%s&#34; number)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Name fields (as defined by &lt;code&gt;parsebib--json-name-fields&lt;/code&gt;) are converted using &lt;code&gt;parsebib-json-name-field-template&lt;/code&gt; and &lt;code&gt;parsebib-json-name-field-separator&lt;/code&gt;; see below for details.&lt;/li&gt; &#xA; &lt;li&gt;Date fields (as defined by &lt;code&gt;parsebib--json-date-fields&lt;/code&gt;) are converted to a format &lt;code&gt;2021-4-22&lt;/code&gt;. If only a year is present, the month and day parts are omitted. The &lt;code&gt;season&lt;/code&gt; and &lt;code&gt;circa&lt;/code&gt; fields are accounted for, and so are &lt;code&gt;literal&lt;/code&gt; and &lt;code&gt;raw&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fields with an array as value (currently, in v1.0 of CSL-JSON, this only applies to the &lt;code&gt;categories&lt;/code&gt; field), are converted to a string using &lt;code&gt;parsebib-json-field-separator&lt;/code&gt;; see below for details.&lt;/li&gt; &#xA; &lt;li&gt;Anything that doesn&#39;t match any of the categories above is converted to a string using &lt;code&gt;(format &#34;%s&#34; value)&lt;/code&gt;, after which any newlines are removed and replaced with a space. This is a catch-all that shouldn&#39;t be necessary in valid CSL-JSON files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The optional argument &lt;code&gt;short&lt;/code&gt; only applies to date fields. If &lt;code&gt;short&lt;/code&gt; is non-nil, a date field contains just the year; month and day parts are ignored. If no year part can be found, &lt;code&gt;short&lt;/code&gt; returns the string &lt;code&gt;XXXX&lt;/code&gt;. Note that with &lt;code&gt;short&lt;/code&gt;, other parts of the date field are ignored.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-json-name-field-template&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This variable holds the template used for converting name fields. Its default value is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;{non-dropping-particle }{family, }{given}{ dropping-particle}{, suffix}{literal}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The elements of a name field appear in the string in the order provided in the template. Elements that are not part of a particular name field are ignored, including any punctuation and white space contained inside the braces. So for example, if a name field does not have a &lt;code&gt;suffix&lt;/code&gt;, the comma-space appearing inside the &lt;code&gt;{, suffix}&lt;/code&gt; part of the template is not included in the final string.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to modify the form of the resulting string by &lt;code&gt;let&lt;/code&gt;-binding &lt;code&gt;parsebib-json-name-field-template&lt;/code&gt; before calling &lt;code&gt;parsebib-parse-json-buffer&lt;/code&gt;, &lt;code&gt;parsebib-stringify-json&lt;/code&gt; or &lt;code&gt;parsebib-stringify-json-field&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-json-name-field-separator&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If more than one name appears in a name field, they are separated by the value of this variable in the string. The default value is &lt;code&gt;&#34; and &#34;&lt;/code&gt; (note the spaces). It is possible to &lt;code&gt;let&lt;/code&gt;-bind this variable.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;parsebib-json-field-separator&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Field values that are arrays are converted to a string using the value of this variable as a separator. Currently (CSL-JSON v1.0), this only applies to the &lt;code&gt;categories&lt;/code&gt; field, which is an array of strings. The default value of this variable is &lt;code&gt;&#34;, &#34;&lt;/code&gt; (note the space). It can be &lt;code&gt;let&lt;/code&gt;-bound like the variables above.&lt;/p&gt; &#xA;&lt;h2&gt;General API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;parsebib-parse (files &amp;amp;key entries strings (display t) fields)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Parse a bibliography file or list of files and return the entries in them. This function can be used for both &lt;code&gt;.bib&lt;/code&gt; and for &lt;code&gt;.json&lt;/code&gt; files, and also for a combination thereof. It returns all entries in all files in a single hash table.&lt;/p&gt; &#xA;&lt;p&gt;This is a high-level function meant for retrieving bibliographic entries in such a way that they can be shown to a user. It is not possible to retrieve the &lt;code&gt;@Preamble&lt;/code&gt; or &lt;code&gt;@Comment&lt;/code&gt;s in a &lt;code&gt;.bib&lt;/code&gt; file using this function. Use &lt;code&gt;parsebib-parse-bib-buffer&lt;/code&gt; or one of the other functions for that.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;parsebib-parse&lt;/code&gt; basically just calls &lt;code&gt;parsebib-parse-bib-buffer&lt;/code&gt; or &lt;code&gt;parsebib-parse-json-buffer&lt;/code&gt; as appropriate and passes its arguments on to those functions. The argument &lt;code&gt;entries&lt;/code&gt; is passed to both, as is &lt;code&gt;fields&lt;/code&gt;. The field names in &lt;code&gt;fields&lt;/code&gt; need to be strings, regardless of the file format, though. &lt;code&gt;parsebib-parse&lt;/code&gt; converts the strings to symbols when it parses a &lt;code&gt;.json&lt;/code&gt; file. The &lt;code&gt;strings&lt;/code&gt; argument is only passed to &lt;code&gt;parsebib-parse-bib-buffer&lt;/code&gt;, since there are obviously no &lt;code&gt;@String&lt;/code&gt;s in a &lt;code&gt;.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;display&lt;/code&gt; argument controls the way in which the entry data is returned. By default, it returns the data in a way that is suitable for display. For &lt;code&gt;.bib&lt;/code&gt; files, this means that &lt;code&gt;@String&lt;/code&gt; abbreviations are expanded, cross-references are resolved and TeX markup in field values is removed or replaced with Unicode characters. For &lt;code&gt;.json&lt;/code&gt; files, it means that fields are returned as strings and that month and day parts in date fields are ignored.&lt;/p&gt; &#xA;&lt;p&gt;See the doc strings of &lt;code&gt;parsebib-parse&lt;/code&gt;, &lt;code&gt;parsebib-parse-bib-buffer&lt;/code&gt; and &lt;code&gt;parsebib-parse-json-buffer&lt;/code&gt; for details on the meaning of &lt;code&gt;display&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joaotavora/eglot</title>
    <updated>2022-09-25T01:40:33Z</updated>
    <id>tag:github.com,2022-09-25:/joaotavora/eglot</id>
    <link href="https://github.com/joaotavora/eglot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A client for Language Server Protocol servers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/joaotavora/eglot/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/joaotavora/eglot/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/eglot.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/eglot.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/eglot&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/eglot-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;M-x Eglot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;E&lt;/em&gt;macs Poly&lt;em&gt;glot&lt;/em&gt;: an Emacs &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;LSP&lt;/a&gt; client that stays out of your way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📽 Scroll down this README for some &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#animated_gifs&#34;&gt;pretty gifs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📚 Read about: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#connecting&#34;&gt;Connecting to a server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#commands&#34;&gt;Commands and keybindings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#workspace-configuration&#34;&gt;Workspace configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;📣 Read the &lt;a href=&#34;https://github.com/joaotavora/eglot/raw/master/NEWS.md&#34;&gt;NEWS&lt;/a&gt; file&lt;/li&gt; &#xA; &lt;li&gt;🏆 Folks over at Google &lt;a href=&#34;https://opensource.googleblog.com/2020/10/announcing-latest-google-open-source.html&#34;&gt;seem to like it&lt;/a&gt;. Thanks!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;em&gt;1-2-3&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Install from &lt;a href=&#34;https://elpa.gnu.org/packages/eglot.html&#34;&gt;GNU ELPA&lt;/a&gt; or &lt;a href=&#34;https://melpa.org/#/eglot&#34;&gt;MELPA&lt;/a&gt;. Just type &lt;code&gt;M-x package-install RET eglot RET&lt;/code&gt; into Emacs 26.1+.&lt;/p&gt; &#xA;&lt;p&gt;Now find some source file, any source file, and type &lt;code&gt;M-x eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;That&#39;s it&lt;/em&gt;. If you&#39;re lucky, this guesses the LSP program to start for the language you&#39;re using. Otherwise, it prompts you to enter one.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;1-2-3-pitfall!&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;By design, Eglot doesn&#39;t depend on anything but Emacs. But there &lt;em&gt;are&lt;/em&gt; ELPA dependencies to newer versions of so-called &#34;core packages&#34; developed &lt;em&gt;in the Emacs mainline&lt;/em&gt;. So unless you&#39;re using a bleeding-edge Emacs, where loading &lt;code&gt;eglot.el&lt;/code&gt; is all you&#39;d need to do, make sure your package system pulls in and loads the newest &lt;code&gt;project.el&lt;/code&gt;, &lt;code&gt;xref.el&lt;/code&gt;, &lt;code&gt;eldoc.el&lt;/code&gt;, etc... In case of trouble &lt;code&gt;M-x find-library&lt;/code&gt; can help you tell if that happened.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;connecting&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Connecting to a server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt; can guess and work out-of-the-box with these servers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ada&#39;s &lt;a href=&#34;https://github.com/AdaCore/ada_language_server&#34;&gt;ada_language_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bash&#39;s &lt;a href=&#34;https://github.com/mads-hartmann/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C/C++&#39;s &lt;a href=&#34;https://clang.llvm.org/extra/clangd.html&#34;&gt;clangd&lt;/a&gt; or &lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;ccls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C#&#39;s &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn&#34;&gt;omnisharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clojure&#39;s &lt;a href=&#34;https://clojure-lsp.io&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CMake&#39;s &lt;a href=&#34;https://github.com/regen100/cmake-language-server&#34;&gt;cmake-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CSS&#39;s &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;css-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dart&#39;s &lt;a href=&#34;https://github.com/dart-lang/sdk/raw/master/pkg/analysis_server/tool/lsp_spec/README.md&#34;&gt;analysis_server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dockerfile&#39;s &lt;a href=&#34;https://github.com/rcjsuen/dockerfile-language-server-nodejs&#34;&gt;docker-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elixir&#39;s &lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixir-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elm&#39;s &lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erlang&#39;s &lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang_ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fortran&#39;s &lt;a href=&#34;https://github.com/hansec/fortran-language-server&#34;&gt;fortls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Futhark&#39;s &lt;a href=&#34;https://futhark-lang.org&#34;&gt;futhark lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go&#39;s &lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Godot Engine&#39;s &lt;a href=&#34;https://godotengine.org&#34;&gt;built-in LSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTML &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;html-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haskell&#39;s &lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;haskell-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON&#39;s &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-json-languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java&#39;s &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;Eclipse JDT Language Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Javascript&#39;s &lt;a href=&#34;https://github.com/theia-ide/typescript-language-server&#34;&gt;TS &amp;amp; JS Language Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&#39;s &lt;a href=&#34;https://github.com/fwcd/KotlinLanguageServer&#34;&gt;kotlin-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lua&#39;s &lt;a href=&#34;https://github.com/Alloyed/lua-lsp&#34;&gt;lua-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Markdown&#39;s &lt;a href=&#34;https://github.com/artempyanykh/marksman&#34;&gt;marksman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mint&#39;s &lt;a href=&#34;https://www.mint-lang.com/&#34;&gt;mint-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nix&#39;s &lt;a href=&#34;https://github.com/nix-community/rnix-lsp&#34;&gt;rnix-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ocaml&#39;s &lt;a href=&#34;https://github.com/ocaml/ocaml-lsp/&#34;&gt;ocaml-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Perl&#39;s &lt;a href=&#34;https://github.com/richterger/Perl-LanguageServer&#34;&gt;Perl::LanguageServer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP&#39;s &lt;a href=&#34;https://github.com/felixfbecker/php-language-server&#34;&gt;php-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PureScript&#39;s &lt;a href=&#34;https://github.com/nwolverson/purescript-language-server&#34;&gt;purescript-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python&#39;s &lt;a href=&#34;https://github.com/python-lsp/python-lsp-server&#34;&gt;pylsp&lt;/a&gt;, &lt;a href=&#34;https://github.com/palantir/python-language-server&#34;&gt;pyls&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;, or &lt;a href=&#34;https://github.com/pappasam/jedi-language-server&#34;&gt;jedi-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;R&#39;s &lt;a href=&#34;https://cran.r-project.org/package=languageserver&#34;&gt;languageserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Racket&#39;s &lt;a href=&#34;https://github.com/jeapostrophe/racket-langserver&#34;&gt;racket-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby&#39;s &lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust&#39;s &lt;a href=&#34;https://github.com/rust-analyzer/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scala&#39;s &lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TeX/LaTeX&#39;s &lt;a href=&#34;https://github.com/astoff/digestif&#34;&gt;Digestif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VimScript&#39;s &lt;a href=&#34;https://github.com/iamcco/vim-language-server&#34;&gt;vim-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YAML&#39;s &lt;a href=&#34;https://github.com/redhat-developer/yaml-language-server&#34;&gt;yaml-language-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zig&#39;s &lt;a href=&#34;https://github.com/zigtools/zls&#34;&gt;zls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;ll add to this list as I test more servers. In the meantime you can customize &lt;code&gt;eglot-server-programs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs &#39;(foo-mode . (&#34;foo-language-server&#34; &#34;--args&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let me know how well it works and we can add it to the list.&lt;/p&gt; &#xA;&lt;p&gt;To skip the guess and always be prompted use &lt;code&gt;C-u M-x eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting automatically&lt;/h2&gt; &#xA;&lt;p&gt;You can also do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  (add-hook &#39;foo-mode-hook &#39;eglot-ensure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;, to attempt to start an eglot session automatically every time a &lt;code&gt;foo-mode&lt;/code&gt; buffer is visited.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting via TCP&lt;/h2&gt; &#xA;&lt;p&gt;The examples above use a &#34;pipe&#34; to talk to the server, which works fine on Linux and OSX but in some cases &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Subprocess-hang.html&#34;&gt;&lt;em&gt;may not work on Windows&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To circumvent this limitation, or if the server doesn&#39;t like pipes, you can use &lt;code&gt;C-u M-x eglot&lt;/code&gt; and give it &lt;code&gt;server:port&lt;/code&gt; pattern to connect to a previously started TCP server serving LSP information.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to start it manually every time, you can configure Eglot to start it and immediately connect to it. Ruby&#39;s &lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt; server already works this way out-of-the-box.&lt;/p&gt; &#xA;&lt;p&gt;For another example, suppose you also wanted start Python&#39;s &lt;code&gt;pyls&lt;/code&gt; this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs&#xA;             `(python-mode . (&#34;pyls&#34; &#34;-v&#34; &#34;--tcp&#34; &#34;--host&#34;&#xA;                              &#34;localhost&#34; &#34;--port&#34; :autoport)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see that the element associated with &lt;code&gt;python-mode&lt;/code&gt; is now a more complicated invocation of the &lt;code&gt;pyls&lt;/code&gt; program, which requests that it be started as a server. Notice the &lt;code&gt;:autoport&lt;/code&gt; symbol in there: it is replaced dynamically by a local port believed to be vacant, so that the ensuing TCP connection finds a listening server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;workspace-configuration&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;eglot-workspace-configuration&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Many servers can guess good defaults and operate nicely out-of-the-box, but some need to know project-specific settings, which LSP calls &#34;workspace configuration&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Within Eglot, these per-project settings are realized with the Elisp variable &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;. They are sent over to the server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;initially, as a &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_didChangeConfiguration&#34;&gt;&lt;code&gt;didChangeConfiguration&lt;/code&gt; notification&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;as the response to &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_configuration&#34;&gt;configuration request&lt;/a&gt; from the server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;How to set (and whether to set it at all)&lt;/h4&gt; &#xA;&lt;p&gt;Before considering what to set the variable to, one must understand how to set it and whether to set it at all.&lt;/p&gt; &#xA;&lt;p&gt;Most servers can be configured globally using some kind of global file in the user&#39;s home directory or in the project directory -- &lt;a href=&#34;https://github.com/python-lsp/python-lsp-server&#34;&gt;Pylsp&lt;/a&gt; reads &lt;code&gt;~/.config/pycodestyle&lt;/code&gt; and &lt;a href=&#34;https://clang.llvm.org/extra/clangd.html&#34;&gt;Clangd&lt;/a&gt; reads &lt;code&gt;.clangd&lt;/code&gt; anywhere up the current project tree.&lt;/p&gt; &#xA;&lt;p&gt;This type of configuration is done completely independently from Eglot and Emacs and has the advantage that it&#39;ll work with other LSP clients.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, one may find this not flexible enough or wish to consolidate all configuration within Emacs.&lt;/p&gt; &#xA;&lt;p&gt;In that case, the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html&#34;&gt;directory variable&lt;/a&gt; &lt;code&gt;eglot-workspace-configuration&lt;/code&gt; should be used.&lt;/p&gt; &#xA;&lt;p&gt;Note that while it is possible to set this variable globally or buffer-locally, doing so makes little sense. It is usually set via &lt;code&gt;.dir-locals.el&lt;/code&gt; or &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html&#34;&gt;special-purpose elisp functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Format of the value&lt;/h4&gt; &#xA;&lt;p&gt;The recommended format for this variable&#39;s value is a &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html&#34;&gt;&lt;em&gt;property list&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(SECTION-1 PARAM-OBJECT-1 ... SECTION-N PARAM-OBJECT-N)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Yes, earlier it used to be an association list, a format that is still supported, but discouraged.)&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;SECTION-N&lt;/code&gt; is an Elisp keyword naming a parameter section relevant to an LSP server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PARAM-OBJECT-N&lt;/code&gt; contains one or more settings pertaining to the server that is interested in &lt;code&gt;SECTION-N&lt;/code&gt;. Its value is an Elisp object serialized to JSON by &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-JSON.html&#34;&gt;&lt;code&gt;json-serialize&lt;/code&gt;&lt;/a&gt;. The recommended format is again a &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html&#34;&gt;plist&lt;/a&gt;, though &lt;code&gt;json-serialize&lt;/code&gt; also accepts other formats.&lt;/p&gt; &#xA;&lt;p&gt;In any case, the JSON values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;{}&lt;/code&gt; are represented by the Elisp values &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;:json-false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;When experimenting with settings, one may use &lt;code&gt;M-x eglot-show-workspace-configuration&lt;/code&gt; to inspect/debug the definite JSON value sent over to the server. This helper function works even before actually connecting to the server.&lt;/p&gt; &#xA;&lt;h4&gt;Simple example&lt;/h4&gt; &#xA;&lt;p&gt;To make a particular Python project always enable &lt;a href=&#34;https://github.com/python-lsp/python-lsp-server&#34;&gt;Pylsp&lt;/a&gt;&#39;s snippet support, put a file named &lt;code&gt;.dir-locals.el&lt;/code&gt; in the project&#39;s root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((python-mode&#xA;  . ((eglot-workspace-configuration&#xA;      .&#xA;      ;; the value in the format described above starts here&#xA;      (:pylsp (:plugins (:jedi_completion (:include_params t&#xA;                                           :fuzzy t)&#xA;                         :pylint (:enabled :json-false))))&#xA;      ;; and ends here&#xA;      ))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells Emacs that any &lt;code&gt;python-mode&lt;/code&gt; buffers in that directory should have a particular value of &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here, the value in question associates the parameter section &lt;code&gt;:pylsp&lt;/code&gt; with a parameter object that is a plist of plists. It is converted to JSON before being sent to the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;pylsp&#34;: {&#xA;    &#34;plugins&#34;: {&#xA;      &#34;jedi_completion&#34;: { &#34;include_params&#34;: true, &#34;fuzzy&#34;: true },&#xA;      &#34;pylint&#34;: { &#34;enabled&#34;: false }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multiple servers&lt;/h4&gt; &#xA;&lt;p&gt;Suppose one also has some Go code in the very same project, the &lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;Gopls&lt;/a&gt; server can be configured in the same &lt;code&gt;.dir-locals.el&lt;/code&gt; file. Adding a section for &lt;code&gt;go-mode&lt;/code&gt;, the file&#39;s contents now become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((python-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . (:pylsp (:plugins (:jedi_completion (:include_params t&#xA;                                             :fuzzy t)&#xA;                           :pylint (:enabled :json-false)))))))&#xA; (go-mode&#xA;  . ((eglot-workspace-configuration&#xA;      . (:gopls (:usePlaceholders t))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, as a matter of taste, one may choose to lay out &lt;code&gt;.dir-locals.el&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;((nil&#xA;  . ((eglot-workspace-configuration&#xA;      . (:pylsp (:plugins (:jedi_completion (:include_params t&#xA;                                             :fuzzy t)&#xA;                           :pylint (:enabled :json-false)))&#xA;         :gopls (:usePlaceholders t))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is an equivalent setup which sets the value in all major-modes inside the project: the major-mode specification is unneeded because the LSP server will retrieve only the parameter section it is interested in.&lt;/p&gt; &#xA;&lt;h4&gt;Setting the value without &lt;code&gt;.dir-locals.el&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If adding a &lt;code&gt;.dir-locals.el&lt;/code&gt; file isn&#39;t suitable, or if managing this file becomes cumbersome, the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html&#34;&gt;Emacs manual&lt;/a&gt; teaches you programmatic ways to leverage per-directory local variables. Look for the functions &lt;code&gt;dir-locals-set-directory-class&lt;/code&gt; and &lt;code&gt;dir-locals-set-class-variables&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Dynamically setting the value&lt;/h4&gt; &#xA;&lt;p&gt;If one needs to determine the workspace configuration based on some dynamic context, &lt;code&gt;eglot-workspace-configuration&lt;/code&gt; can be set to a function. It is passed the &lt;code&gt;eglot-lsp-server&lt;/code&gt; instance of the connected server (if any) and runs with &lt;code&gt;default-directory&lt;/code&gt; set to the root of your project. The function should return a value of the same form as described in the previous paragraphs.&lt;/p&gt; &#xA;&lt;h2&gt;Handling quirky servers&lt;/h2&gt; &#xA;&lt;p&gt;Some servers need even more special hand-holding to operate correctly. If your server has some quirk or non-conformity, it&#39;s possible to extend Eglot via Elisp to adapt to it. Here&#39;s an example on how to get &lt;a href=&#34;https://github.com/cquery-project/cquery&#34;&gt;cquery&lt;/a&gt; working:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs &#39;((c++ mode c-mode) . (eglot-cquery &#34;cquery&#34;)))&#xA;&#xA;(defclass eglot-cquery (eglot-lsp-server) ()&#xA;  :documentation &#34;A custom class for cquery&#39;s C/C++ langserver.&#34;)&#xA;&#xA;(cl-defmethod eglot-initialization-options ((server eglot-cquery))&#xA;  &#34;Passes through required cquery initialization options&#34;&#xA;  (let* ((root (car (project-roots (eglot--project server))))&#xA;         (cache (expand-file-name &#34;.cquery_cached_index/&#34; root)))&#xA;    (list :cacheDirectory (file-name-as-directory cache)&#xA;          :progressReportFrequencyMs -1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, some servers require the language identifier strings they are sent by &lt;code&gt;eglot&lt;/code&gt; to match the exact strings used by VSCode. &lt;code&gt;eglot&lt;/code&gt; usually guesses these identifiers from the major mode name (e.g. &lt;code&gt;elm-mode&lt;/code&gt; → &lt;code&gt;&#34;elm&#34;&lt;/code&gt;), but the mapping can be overridden using the &lt;code&gt;:LANGUAGE-ID&lt;/code&gt; element in the syntax of &lt;code&gt;eglot-server-programs&lt;/code&gt; if necessary.&lt;/p&gt; &#xA;&lt;h2&gt;TRAMP support&lt;/h2&gt; &#xA;&lt;p&gt;Should just work. Try &lt;code&gt;M-x eglot&lt;/code&gt; in a buffer visiting a remote file on a server where you&#39;ve also installed the language server. Only supported on Emacs 27.1 or later.&lt;/p&gt; &#xA;&lt;p&gt;Emacs 27 users may find some language servers &lt;a href=&#34;https://github.com/joaotavora/eglot/issues/662&#34;&gt;fail to start up over TRAMP&lt;/a&gt;. If you experience this issue, update TRAMP to 2.5.0.4 or later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;reporting bugs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Reporting bugs&lt;/h1&gt; &#xA;&lt;p&gt;Having trouble connecting to a server? Expected to have a certain capability supported by it (e.g. completion) but nothing happens? Or do you get spurious and annoying errors in an otherwise smooth operation? We may have help, so open a &lt;a href=&#34;https://github.com/joaotavora/eglot/issues&#34;&gt;new issue&lt;/a&gt; and try to be as precise and objective about the problem as you can:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Include the invaluable &lt;strong&gt;events transcript&lt;/strong&gt;. You can display that buffer with &lt;code&gt;M-x eglot-events-buffer&lt;/code&gt;. It contains the JSONRPC messages exchanged between client and server, as well as the messages the server prints to stderr.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If Emacs errored (you saw -- and possibly heard -- an error message), make sure you repeat the process using &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; so you &lt;strong&gt;get a backtrace&lt;/strong&gt; of the error that you should also attach to the bug report.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try to replicate the problem with &lt;strong&gt;as clean an Emacs run as possible&lt;/strong&gt;. This means an empty &lt;code&gt;.emacs&lt;/code&gt; init file or close to it (just loading &lt;code&gt;eglot.el&lt;/code&gt;, &lt;code&gt;company.el&lt;/code&gt; and &lt;code&gt;yasnippet.el&lt;/code&gt; for example, and you don&#39;t even need &lt;code&gt;use-package.el&lt;/code&gt; to do that).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Some more notes: it is often the case the you will have to report the problem to the LSP server&#39;s developers, too, though it&#39;s understandable that you report it Eglot first, since it is the user-facing frontend first. If the problem is indeed on Eglot&#39;s side, we &lt;em&gt;do&lt;/em&gt; want to fix it, but because Eglot&#39;s developers have limited resources and no way to test all the possible server combinations, you&#39;ll sometimes have to do most of the testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;commands&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Commands and keybindings&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s a summary of available commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt;, as described above;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-reconnect&lt;/code&gt; reconnects to current server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-shutdown&lt;/code&gt; says bye-bye to server of your choice;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-shutdown-all&lt;/code&gt; says bye-bye to every server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-rename&lt;/code&gt; ask the server to rename the symbol at point;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-format&lt;/code&gt; asks the server to format buffer or the active region;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-code-actions&lt;/code&gt; asks the server for any &#34;code actions&#34; at point. Can also be invoked by &lt;code&gt;mouse-1&lt;/code&gt;-clicking some diagnostics. Also &lt;code&gt;M-x eglot-code-action-&amp;lt;TAB&amp;gt;&lt;/code&gt; for shortcuts to specific actions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eldoc&lt;/code&gt; asks the Eldoc system for help at point (this command isn&#39;t specific to Eglot, by the way, it works in other contexts).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-events-buffer&lt;/code&gt; jumps to the events buffer for debugging communication with the server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-stderr-buffer&lt;/code&gt; if the LSP server is printing useful debug information in stderr, jumps to a buffer with these contents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M-x eglot-signal-didChangeConfiguration&lt;/code&gt; updates the LSP server configuration according to the value of the variable &lt;code&gt;eglot-workspace-configuration&lt;/code&gt;, which you may be set in a &lt;code&gt;.dir-locals&lt;/code&gt; file, for example.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are &lt;em&gt;no keybindings&lt;/em&gt; specific to Eglot, but you can bind stuff in &lt;code&gt;eglot-mode-map&lt;/code&gt;, which is active as long as Eglot is managing a file in your project. The commands don&#39;t need to be Eglot-specific, either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-key eglot-mode-map (kbd &#34;C-c r&#34;) &#39;eglot-rename)&#xA;(define-key eglot-mode-map (kbd &#34;C-c o&#34;) &#39;eglot-code-action-organize-imports)&#xA;(define-key eglot-mode-map (kbd &#34;C-c h&#34;) &#39;eldoc)&#xA;(define-key eglot-mode-map (kbd &#34;&amp;lt;f6&amp;gt;&#34;) &#39;xref-find-definitions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;customization&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s a quick summary of the customization options. In Eglot&#39;s customization group (&lt;code&gt;M-x customize-group&lt;/code&gt;) there is more documentation on what these do.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-autoreconnect&lt;/code&gt;: Control ability to reconnect automatically to the LSP server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-connect-timeout&lt;/code&gt;: Number of seconds before timing out LSP connection attempts;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-sync-connect&lt;/code&gt;: Control blocking of LSP connection attempts;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-events-buffer-size&lt;/code&gt;: Control the size of the Eglot events buffer;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-ignored-server-capabilities&lt;/code&gt;: LSP server capabilities that Eglot could use, but won&#39;t;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-confirm-server-initiated-edits&lt;/code&gt;: If non-nil, ask for confirmation before allowing server to edit the source buffer&#39;s text;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a couple more variables that you can customize via Emacs lisp:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-server-programs&lt;/code&gt;: as described &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/#connecting&#34;&gt;above&lt;/a&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-strict-mode&lt;/code&gt;: Set to &lt;code&gt;nil&lt;/code&gt; by default, meaning Eglot is generally lenient about non-conforming servers. Set this to &lt;code&gt;(disallow-non-standard-keys enforce-required-keys)&lt;/code&gt; when debugging servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-server-initialized-hook&lt;/code&gt;: Hook run after server is successfully initialized;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-managed-mode-hook&lt;/code&gt;: Hook run after Eglot started or stopped managing a buffer. Use &lt;code&gt;eglot-managed-p&lt;/code&gt; to tell if current buffer is still being managed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-stay-out-of&lt;/code&gt;: List of Emacs features that Eglot shouldn&#39;t automatically try to manage on users&#39; behalf. Useful when you need non-LSP Flymake or Company backends. See docstring for examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eglot-extend-to-xref&lt;/code&gt;: If non-nil and &lt;code&gt;xref-find-definitions&lt;/code&gt; lands you in a file outside your project -- like a system-installed library or header file -- transiently consider it managed by the same LSP server. That file is still outside your project (i.e. &lt;code&gt;project-find-file&lt;/code&gt; won&#39;t find it).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How does Eglot work?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x eglot&lt;/code&gt; starts a server via a shell-command guessed from &lt;code&gt;eglot-server-programs&lt;/code&gt;, using the current major-mode (for whatever language you&#39;re programming in) as a hint.&lt;/p&gt; &#xA;&lt;p&gt;If the connection is successful, you see an &lt;code&gt;[eglot:&amp;lt;server&amp;gt;]&lt;/code&gt; indicator pop up in your mode-line. More importantly, this means current &lt;em&gt;and future&lt;/em&gt; file buffers of that major mode &lt;em&gt;inside your current project&lt;/em&gt; automatically become &#34;managed&#34; by the LSP server, This means that information about these file&#39;s contents is exchanged periodically to provide enhanced coding assistance. Eglot works primarily with Emacs&#39; built-in libraries and &lt;em&gt;not&lt;/em&gt; with third-party replacements for those facilities.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;definitions can be found via &lt;code&gt;xref-find-definitions&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;on-the-fly diagnostics for the buffer or project are given by &lt;code&gt;flymake-mode&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;function signature hints are given by &lt;code&gt;eldoc-mode&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;completion can be summoned with &lt;code&gt;completion-at-point&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;projects are discovered via &lt;code&gt;project.el&lt;/code&gt;&#39;s API;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some extra features are provided if certain libraries are installed and enabled, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;completion dropdowns via &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;snippet completions via &lt;a href=&#34;https://elpa.gnu.org/packages/yasnippet.html&#34;&gt;yasnippet&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;marked-up documentation via &lt;a href=&#34;https://github.com/defunkt/markdown-mode&#34;&gt;markdown&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Eglot doesn&#39;t &lt;em&gt;require&lt;/em&gt; these libraries to work effectively, but will use them automatically if they are found to be active.&lt;/p&gt; &#xA;&lt;p&gt;To &#34;unmanage&#34; a project&#39;s buffers, shutdown the server with &lt;code&gt;M-x eglot-shutdown&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;animated_gifs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;Obligatory animated gif section&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Completion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-completions.gif&#34; alt=&#34;eglot-completions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The animation shows &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company-mode&lt;/a&gt; presenting the completion candidates to the user, but Eglot works with the built-in &lt;code&gt;completion-at-point&lt;/code&gt; function as well, which is usually bound to &lt;code&gt;C-M-i&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Snippet completion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-snippets-on-completion.gif&#34; alt=&#34;eglot-snippets-on-completion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot provides template based completion if the server supports snippet completion and &lt;a href=&#34;https://elpa.gnu.org/packages/yasnippet.html&#34;&gt;yasnippet&lt;/a&gt; is enabled &lt;em&gt;before&lt;/em&gt; Eglot connects to the server. The animation shows &lt;a href=&#34;https://elpa.gnu.org/packages/company.html&#34;&gt;company-mode&lt;/a&gt;, but &lt;code&gt;completion-at-point&lt;/code&gt; also works with snippets.&lt;/p&gt; &#xA;&lt;h2&gt;Diagnostics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-diagnostics.gif&#34; alt=&#34;eglot-diagnostics&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot relays the diagnostics information received from the LSP server to Emacs&#39;s &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;Flymake&lt;/a&gt;, which annotates/underlines the problematic parts of the buffer. The information is shared with the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt; system, meaning that the commands &lt;code&gt;eldoc&lt;/code&gt; and &lt;code&gt;eldoc-doc-buffer&lt;/code&gt; (the latter bound to &lt;code&gt;C-h-.&lt;/code&gt; for convenience) show diagnostics along with other documentation under point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;Flymake&lt;/a&gt; provides other convenient ways to view and manage diagnostic errors. These are described in its &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html#Top&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When Eglot manages a buffer, it disables pre-existing Flymake backends. See variable &lt;code&gt;eglot-stay-out-of&lt;/code&gt; to change that.&lt;/p&gt; &#xA;&lt;h2&gt;Code Actions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-code-actions.gif&#34; alt=&#34;eglot-code-actions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The LSP server may provide code actions, for example, to fix a diagnostic error or to suggest refactoring edits. The commands are frequently associating with Flymake diagnostic annotations, so that left-clicking them shows a menu. Additionally, the command &lt;code&gt;eglot-code-actions&lt;/code&gt; asks the server for any code spanning a given region.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes, these code actions are initiated by the server. See &lt;code&gt;eglot-confirm-server-initiated-edits&lt;/code&gt; to control that behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Hover on symbol /function signature&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-hover-on-symbol.gif&#34; alt=&#34;eglot-hover-on-symbol&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here, too, the LSP server&#39;s view of a given symbol or function signature is relayed to the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt; system. The commands &lt;code&gt;eldoc&lt;/code&gt; and &lt;code&gt;eldoc-doc-buffer&lt;/code&gt; commands access that information.&lt;/p&gt; &#xA;&lt;p&gt;There are customization variables to help adjust &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/eldoc.el&#34;&gt;ElDoc&lt;/a&gt;&#39;s liberal use of the lower &#34;echo area&#34;, among other options. If you still find the solicitous nature of this LSP feature too distracing, you can use &lt;code&gt;eglot-ignored-server-capabilities&lt;/code&gt; to turn it off.&lt;/p&gt; &#xA;&lt;h2&gt;Rename&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-rename.gif&#34; alt=&#34;eglot-rename&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;M-x eglot-rename RET&lt;/code&gt; to rename the symbol at point.&lt;/p&gt; &#xA;&lt;h2&gt;Find definition&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-xref-find-definition.gif&#34; alt=&#34;eglot-xref-find-definition&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To jump to the definition of a symbol, use the built-in &lt;code&gt;xref-find-definitions&lt;/code&gt; command, which is bound to &lt;code&gt;M-.&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Find references&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/eglot/master/gif-examples/eglot-xref-find-references.gif&#34; alt=&#34;eglot-xref-find-references&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eglot here relies on Emacs&#39; built-in functionality as well. &lt;code&gt;xref-find-references&lt;/code&gt; is bound to &lt;code&gt;M-?&lt;/code&gt;. Additionally, Eglot provides the following similar commands: &lt;code&gt;eglot-find-declaration&lt;/code&gt;, &lt;code&gt;eglot-find-implementation&lt;/code&gt;, &lt;code&gt;eglot-find-typeDefinition&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Historical differences to lsp-mode.el&lt;/h1&gt; &#xA;&lt;p&gt;Around May 2018, I wrote a comparison of Eglot to &lt;code&gt;lsp-mode.el&lt;/code&gt;, and was discussed with its then-maintainer. That mode has since been refactored/rewritten and now &lt;a href=&#34;https://github.com/joaotavora/eglot/issues/180&#34;&gt;purports to support&lt;/a&gt; a lot of features that differentiated Eglot from it. It may now be very different or very similar to Eglot, or even sing with the birds in the trees, so &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;go check it out&lt;/a&gt;. That said, here&#39;s the original comparison, which I will not be updating any more.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Eglot is considerably less code and hassle than lsp-mode.el. In most cases, there&#39;s nothing to configure. It&#39;s a minimalist approach focused on user experience and performance.&lt;/p&gt; &#xA;&lt;p&gt;User-visible differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The single most visible difference is the friendly entry point &lt;code&gt;M-x eglot&lt;/code&gt;, not &lt;code&gt;M-x eglot-&amp;lt;language&amp;gt;&lt;/code&gt;. Also, there are no &lt;code&gt;eglot-&amp;lt;language&amp;gt;&lt;/code&gt; extra packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s no &#34;whitelisting&#34; or &#34;blacklisting&#34; directories to languages. &lt;code&gt;M-x eglot&lt;/code&gt; starts servers to handle file of a major mode inside a specific project, using Emacs&#39;s built-in &lt;code&gt;project.el&lt;/code&gt; library to discover projects. Then it automatically detects current and future opened files under that project and syncs with server;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy way to quit/restart a server, just middle/right click on the connection name;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pretty interactive mode-line section for live tracking of server communication;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Automatically restarts frequently crashing servers;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slow-to-start servers start asynchronously in the background;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Server-initiated edits are confirmed with the user;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diagnostics work out-of-the-box (no &lt;code&gt;flycheck.el&lt;/code&gt; needed);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Smoother/more responsive (read below).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Under the hood:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Message parser is much simpler.&lt;/li&gt; &#xA; &lt;li&gt;Defers signature requests like &lt;code&gt;textDocument/hover&lt;/code&gt; until server is ready.&lt;/li&gt; &#xA; &lt;li&gt;Sends &lt;code&gt;textDocument/didChange&lt;/code&gt; for groups of edits, not one per each tiny change.&lt;/li&gt; &#xA; &lt;li&gt;Easier to read and maintain elisp. Yeah I know, &lt;em&gt;very subjective&lt;/em&gt;, so judge for yourself.&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t &lt;em&gt;require&lt;/em&gt; anything other than Emacs, but will automatically upgrade to work with stuff outside Emacs, like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;markdown-mode&lt;/code&gt;, if you happen to have these installed.&lt;/li&gt; &#xA; &lt;li&gt;Has automated tests that check against actual LSP servers.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Copyright Assignment&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Eglot&lt;/code&gt; is subject to the same &lt;a href=&#34;https://www.fsf.org/licensing/contributor-faq&#34;&gt;copyright assignment&lt;/a&gt; policy as &lt;code&gt;GNU Emacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;https://www.gnu.org/prep/maintain/html_node/Legally-Significant.html#Legally-Significant&#34;&gt;legally significant&lt;/a&gt; contributions can only be merged after the author has completed their paperwork. Please ask for the request form, and we&#39;ll send it to you.&lt;/p&gt; &#xA;&lt;!-- Language servers --&gt; &#xA;&lt;!-- Other references --&gt;</summary>
  </entry>
  <entry>
    <title>mmontone/emacs-inspector</title>
    <updated>2022-09-25T01:40:33Z</updated>
    <id>tag:github.com,2022-09-25:/mmontone/emacs-inspector</id>
    <link href="https://github.com/mmontone/emacs-inspector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Inspection tool for Emacs Lisp objects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EMACS-INSPECTOR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/inspector.svg?sanitize=true&#34; alt=&#34;elpa-badge&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Inspector tool for Emacs Lisp objects.&lt;/p&gt; &#xA;&lt;p&gt;Similar to inspectors available for Smalltalk and Common Lisp, but for Emacs Lisp.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mmontone/emacs-inspector/master/emacs-inspector.png&#34; alt=&#34;emacs-inspector.png&#34; title=&#34;Emacs Inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This package is available from ELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install RET inspector RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Invocation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-inspect-expression&lt;/code&gt; to evaluate an elisp expression and inspect the result.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-inspect-last-sexp&lt;/code&gt; to evaluate last sexp in current buffer and inspect the result.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inside the inspector&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-pop&lt;/code&gt; bound to letter &lt;code&gt;l&lt;/code&gt;, to navigate to previous object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-quit&lt;/code&gt; bound to letter &lt;code&gt;q&lt;/code&gt;, to exit the inspector.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, &lt;code&gt;M-x forward-button&lt;/code&gt; and &lt;code&gt;M-x backward-button&lt;/code&gt; are conveniently bound to &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt;. They can be used for fast navigation across the buttons that the inspector displays.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can use &lt;code&gt;M-x eval-expression&lt;/code&gt; bound to letter &lt;code&gt;e&lt;/code&gt;, to evaluate an elisp expression using the object currently being inspected (it is bound to &lt;code&gt;*&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;From the Emacs debugger&lt;/h3&gt; &#xA;&lt;p&gt;When on an Emacs debugging backtrace, press letter &lt;code&gt;i&lt;/code&gt; to inspect the pointed frame and its local variables.&lt;/p&gt; &#xA;&lt;p&gt;When on edebug-mode, use &lt;code&gt;C-c C-i&lt;/code&gt; for inspecting expressions in the debugger.&lt;/p&gt; &#xA;&lt;h1&gt;Tree Inspector&lt;/h1&gt; &#xA;&lt;p&gt;An inspector tool for Emacs Lisp objects that uses a tree view.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mmontone/emacs-inspector/master/tree-inspector.png&#34; alt=&#34;tree-inspector.png&#34; title=&#34;Tree Inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Works together with the &#34;normal&#34; inspector when it is loaded; when an object label is clicked on the tree, an inspector is opened on that object.&lt;/p&gt; &#xA;&lt;h2&gt;Install and usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;(require &#39;tree-inspector)&lt;/code&gt; to load.&lt;/p&gt; &#xA;&lt;p&gt;Then start the inspector with either &lt;code&gt;M-x tree-inspector-inspect-expression&lt;/code&gt; or &lt;code&gt;M-x tree-inspector-inspect-last-sexp&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>