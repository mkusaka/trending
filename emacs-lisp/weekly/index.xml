<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:44:49Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ananthakumaran/tide</title>
    <updated>2022-11-06T01:44:49Z</updated>
    <id>tag:github.com,2022-11-06:/ananthakumaran/tide</id>
    <link href="https://github.com/ananthakumaran/tide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tide - TypeScript Interactive Development Environment for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tide&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ananthakumaran/tide/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TypeScript Interactive Development Environment for Emacs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/jEwgPsd.gif&#34;&gt;screencast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tide requires Emacs 25 or later. We recommend Emacs 27 or later with native json support.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; v0.12.0 or greater.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;http://www.typescriptlang.org/docs/handbook/tsconfig-json.html&#34;&gt;tsconfig.json&lt;/a&gt; or &lt;a href=&#34;https://code.visualstudio.com/docs/languages/jsconfig&#34;&gt;jsconfig.json&lt;/a&gt; is present in the root folder of the project.&lt;/li&gt; &#xA; &lt;li&gt;Tide is available in &lt;a href=&#34;http://melpa.org/#/tide&#34;&gt;melpa&lt;/a&gt;. You can install tide via package-install &lt;kbd&gt;M-x package-install [ret] tide&lt;/kbd&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;TypeScript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun setup-tide-mode ()&#xA;  (interactive)&#xA;  (tide-setup)&#xA;  (flycheck-mode +1)&#xA;  (setq flycheck-check-syntax-automatically &#39;(save mode-enabled))&#xA;  (eldoc-mode +1)&#xA;  (tide-hl-identifier-mode +1)&#xA;  ;; company is an optional dependency. You have to&#xA;  ;; install it separately via package-install&#xA;  ;; `M-x package-install [ret] company`&#xA;  (company-mode +1))&#xA;&#xA;;; aligns annotation to the right hand side&#xA;(setq company-tooltip-align-annotations t)&#xA;&#xA;;; formats the buffer before saving&#xA;(add-hook &#39;before-save-hook &#39;tide-format-before-save)&#xA;&#xA;(add-hook &#39;typescript-mode-hook #&#39;setup-tide-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Format options&lt;/h4&gt; &#xA;&lt;p&gt;Format options can be specified in multiple ways.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;via elisp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq tide-format-options &#39;(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;via tsfmt.json (should be present in the root folder along with tsconfig.json)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;indentSize&#34;: 4,&#xA;  &#34;tabSize&#34;: 4,&#xA;  &#34;insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces&#34;: false,&#xA;  &#34;placeOpenBraceOnNewLineForFunctions&#34;: false,&#xA;  &#34;placeOpenBraceOnNewLineForControlBlocks&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/Microsoft/TypeScript/raw/v3.3.1/src/server/protocol.ts#L2858-L2890&#34;&gt;here&lt;/a&gt; for the full list of supported format options.&lt;/p&gt; &#xA;&lt;h4&gt;TSX&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;web-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.tsx\\&#39;&#34; . web-mode))&#xA;(add-hook &#39;web-mode-hook&#xA;          (lambda ()&#xA;            (when (string-equal &#34;tsx&#34; (file-name-extension buffer-file-name))&#xA;              (setup-tide-mode))))&#xA;;; enable typescript-tslint checker&#xA;(flycheck-add-mode &#39;typescript-tslint &#39;web-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tide also provides support for editing js &amp;amp; jsx files. Tide checkers &lt;code&gt;javascript-tide&lt;/code&gt; and &lt;code&gt;jsx-tide&lt;/code&gt; are not enabled by default for js &amp;amp; jsx files. It can be enabled by setting &lt;a href=&#34;http://www.flycheck.org/en/latest/user/syntax-checkers.html#variable-flycheck-checker&#34;&gt;&lt;code&gt;flycheck-checker&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;JavaScript&lt;/h4&gt; &#xA;&lt;p&gt;Create &lt;code&gt;jsconfig.json&lt;/code&gt; in the root folder of your project. &lt;code&gt;jsconfig.json&lt;/code&gt; is &lt;code&gt;tsconfig.json&lt;/code&gt; with &lt;code&gt;allowJs&lt;/code&gt; attribute set to true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;compilerOptions&#34;: {&#xA;    &#34;target&#34;: &#34;es2017&#34;,&#xA;    &#34;allowSyntheticDefaultImports&#34;: true,&#xA;    &#34;noEmit&#34;: true,&#xA;    &#34;checkJs&#34;: true,&#xA;    &#34;jsx&#34;: &#34;react&#34;,&#xA;    &#34;lib&#34;: [ &#34;dom&#34;, &#34;es2017&#34; ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;js2-mode-hook #&#39;setup-tide-mode)&#xA;;; configure javascript-tide checker to run after your default javascript checker&#xA;(flycheck-add-next-checker &#39;javascript-eslint &#39;javascript-tide &#39;append)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSX&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;web-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.jsx\\&#39;&#34; . web-mode))&#xA;(add-hook &#39;web-mode-hook&#xA;          (lambda ()&#xA;            (when (string-equal &#34;jsx&#34; (file-name-extension buffer-file-name))&#xA;              (setup-tide-mode))))&#xA;;; configure jsx-tide checker to run after your default jsx checker&#xA;(flycheck-add-mode &#39;javascript-eslint &#39;web-mode)&#xA;(flycheck-add-next-checker &#39;javascript-eslint &#39;jsx-tide &#39;append)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use Package&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package tide&#xA;  :ensure t&#xA;  :after (typescript-mode company flycheck)&#xA;  :hook ((typescript-mode . tide-setup)&#xA;         (typescript-mode . tide-hl-identifier-mode)&#xA;         (before-save . tide-format-before-save)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keyboard shortcuts&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;M-.&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the definition of the symbol at point. With a prefix arg, Jump to the type definition.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;M-,&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Return to your pre-jump position.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-restart-server&lt;/kbd&gt; Restart tsserver. This would come in handy after you edit tsconfig.json or checkout a different branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-documentation-at-point&lt;/kbd&gt; Load the documentation for the symbol at point to buffer &lt;code&gt;*tide-documentation*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-references&lt;/kbd&gt; List all references to the symbol at point in a buffer. References can be navigated using &lt;kbd&gt;n&lt;/kbd&gt; and &lt;kbd&gt;p&lt;/kbd&gt;. Press &lt;kbd&gt;enter&lt;/kbd&gt; to open the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-project-errors&lt;/kbd&gt; List all errors in the project. Errors can be navigated using &lt;kbd&gt;n&lt;/kbd&gt; and &lt;kbd&gt;p&lt;/kbd&gt;. Press &lt;kbd&gt;enter&lt;/kbd&gt; to open the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-error-at-point&lt;/kbd&gt; Load the details of the error at point to buffer &lt;code&gt;*tide-error*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-rename-symbol&lt;/kbd&gt; Rename all occurrences of the symbol at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-rename-file&lt;/kbd&gt; Rename current file and all it&#39;s references in other files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-format&lt;/kbd&gt; Format the current region or buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-fix&lt;/kbd&gt; Apply code fix for the error at point. When invoked with a prefix arg, apply code fix for all the errors in the file that are similar to the error at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-add-tslint-disable-next-line&lt;/kbd&gt; If the point is on one or more tslint errors, add a &lt;code&gt;tslint:disable-next-line&lt;/code&gt; flag on the previous line to silence the errors. Or, if a flag already exists on the previous line, modify the flag to silence the errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-refactor&lt;/kbd&gt; Refactor code at point or current region.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-jsdoc-template&lt;/kbd&gt; Insert JSDoc comment template at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-verify-setup&lt;/kbd&gt; Show the version of tsserver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-organize-imports&lt;/kbd&gt; Organize imports in the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-list-servers&lt;/kbd&gt; List the &lt;code&gt;tsserver&lt;/code&gt; processes launched by tide.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xref&lt;/li&gt; &#xA; &lt;li&gt;ElDoc&lt;/li&gt; &#xA; &lt;li&gt;Auto complete&lt;/li&gt; &#xA; &lt;li&gt;Flycheck&lt;/li&gt; &#xA; &lt;li&gt;Jump to definition, Jump to type definition&lt;/li&gt; &#xA; &lt;li&gt;Find occurrences&lt;/li&gt; &#xA; &lt;li&gt;Rename symbol&lt;/li&gt; &#xA; &lt;li&gt;Imenu&lt;/li&gt; &#xA; &lt;li&gt;Compile On Save&lt;/li&gt; &#xA; &lt;li&gt;Highlight Identifiers&lt;/li&gt; &#xA; &lt;li&gt;Code Fixes&lt;/li&gt; &#xA; &lt;li&gt;Code Refactor&lt;/li&gt; &#xA; &lt;li&gt;Organize Imports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ananthakumaran/tide/raw/master/doc/architecture.mmd.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tide uses &lt;a href=&#34;https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29&#34;&gt;tsserver&lt;/a&gt; as the backend for most of the features. It writes out a comprehensive log file which can be captured by setting &lt;code&gt;tide-tsserver-process-environment&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq tide-tsserver-process-environment &#39;(&#34;TSS_LOG=-level verbose -file /tmp/tss.log&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I configure tide to use a specific version of TypeScript compiler?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For TypeScript 2.0 and above, you can customize the &lt;code&gt;tide-tsserver-executable&lt;/code&gt; variable. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq tide-tsserver-executable &#34;node_modules/typescript/bin/tsserver&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sadly, this won&#39;t work for TypeScript &amp;lt; 2.0. You can clone the repo locally and checkout the old version though.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I copy the type information shown in the minibuffer?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tide has the command &lt;code&gt;tide-documentation-at-point&lt;/code&gt; to load the documentation for the symbol at point to buffer &lt;code&gt;*tide-documentation*&lt;/code&gt; from where it can be copied. By default, tide will not open this buffer if only type information is available. This behavior can be overridden by setting &lt;code&gt;(setq tide-always-show-documentation t)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Variables&lt;/h3&gt; &#xA;&lt;h5&gt;tide-sync-request-timeout &lt;code&gt;2&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The number of seconds to wait for a sync response.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-flags &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;List of additional flags to provide when starting tsserver.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-process-environment &lt;code&gt;&#39;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;List of extra environment variables to use when starting tsserver.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-executable &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of tsserver executable to run instead of the bundled tsserver.&lt;/p&gt; &#xA;&lt;p&gt;This may either be an absolute path or a relative path. Relative paths are resolved against the project root directory.&lt;/p&gt; &#xA;&lt;p&gt;Note that this option only works with TypeScript version 2.0 and above.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tscompiler-executable &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of tsc executable.&lt;/p&gt; &#xA;&lt;p&gt;This may either be an absolute path or a relative path. Relative paths are resolved against the project root directory.&lt;/p&gt; &#xA;&lt;h5&gt;tide-node-executable &lt;code&gt;&#34;node&#34;&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name or path of the node executable binary file.&lt;/p&gt; &#xA;&lt;h5&gt;tide-node-flags &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;List of flags to provide to node when starting tsserver.&lt;/p&gt; &#xA;&lt;p&gt;Useful for large TypeScript codebases which need to set max-old-space-size to a higher value.&lt;/p&gt; &#xA;&lt;h5&gt;tide-post-code-edit-hook &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Hook run after code edits are applied in a buffer.&lt;/p&gt; &#xA;&lt;h5&gt;tide-sort-completions-by-kind &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether completions should be sorted by kind.&lt;/p&gt; &#xA;&lt;h5&gt;tide-format-options &lt;code&gt;&#39;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Format options plist.&lt;/p&gt; &#xA;&lt;h5&gt;tide-user-preferences &lt;code&gt;&#39;(:includeCompletionsForModuleExports t :includeCompletionsWithInsertText t :allowTextChangesInNewFiles t :generateReturnInDocTemplate t)&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;User preference plist used on the configure request.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/Microsoft/TypeScript/raw/17eaf50b/src/server/protocol.ts#L2684&#34;&gt;https://github.com/Microsoft/TypeScript/blob/17eaf50b/src/server/protocol.ts#L2684&lt;/a&gt; for the full list of available options.&lt;/p&gt; &#xA;&lt;h5&gt;tide-disable-suggestions &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Disable suggestions.&lt;/p&gt; &#xA;&lt;p&gt;If set to non-nil, suggestions will not be shown in flycheck errors and tide-project-errors buffer.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-setup-company-backend &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Add &lt;code&gt;company-tide&lt;/code&gt; to &lt;code&gt;company-backends&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-ignore-case &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;CASE will be ignored in completion if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-show-source &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Completion dropdown will contain completion source if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-fuzzy &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Allow fuzzy completion.&lt;/p&gt; &#xA;&lt;p&gt;By default only candidates with exact prefix match are shown. If set to non-nil, candidates with match anywhere inside the name are shown.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-detailed &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Completion dropdown will contain detailed method information if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-enable-autoimport-suggestions &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether to include external module exports in completions.&lt;/p&gt; &#xA;&lt;h5&gt;tide-enable-xref &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether to enable xref integration.&lt;/p&gt; &#xA;&lt;h5&gt;tide-navto-item-filter &lt;code&gt;#&#39;tide-navto-item-filter-default&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The filter for items returned by tide-nav. Defaults to class, interface, type, enum&lt;/p&gt; &#xA;&lt;h5&gt;tide-jump-to-definition-reuse-window &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Reuse existing window when jumping to definition.&lt;/p&gt; &#xA;&lt;h5&gt;tide-imenu-flatten &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Imenu index will be flattened if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-allow-popup-select &lt;code&gt;&#39;(code-fix refactor)&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The list of commands where popup selection is allowed.&lt;/p&gt; &#xA;&lt;h5&gt;tide-always-show-documentation &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Show the documentation window even if only type information is available.&lt;/p&gt; &#xA;&lt;h5&gt;tide-server-max-response-length &lt;code&gt;102400&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Maximum allowed response length from tsserver. Any response greater than this would be ignored.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-locator-function &lt;code&gt;#&#39;tide-tsserver-locater-npmlocal-projectile-npmglobal&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Function used by tide to locate tsserver.&lt;/p&gt; &#xA;&lt;h5&gt;tide-project-cleanup-delay &lt;code&gt;60&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The number of idle seconds to wait before cleaning up unused tsservers. Use &lt;code&gt;nil&lt;/code&gt; to disable automatic cleanups. See also &lt;code&gt;tide-do-cleanups&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-start-method &lt;code&gt;&#39;immediate&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The method by which tide starts tsserver. &lt;code&gt;immediate&lt;/code&gt; causes tide to start a tsserver instance as soon as &lt;code&gt;tide-mode&lt;/code&gt; is turned on. &lt;code&gt;manual&lt;/code&gt; means that tide will start a tsserver only when the user manually starts one.&lt;/p&gt; &#xA;&lt;h5&gt;tide-default-mode &lt;code&gt;&#34;TS&#34;&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The default mode to open buffers not backed by files (e.g. Org source blocks) in.&lt;/p&gt; &#xA;&lt;h5&gt;tide-recenter-after-jump &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Recenter buffer after jumping to definition&lt;/p&gt; &#xA;&lt;h5&gt;tide-jump-to-fallback &lt;code&gt;#&#39;tide-jump-to-fallback-not-given&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The fallback jump function to use when implementations aren&#39;t available.&lt;/p&gt; &#xA;&lt;h5&gt;tide-filter-out-warning-completions &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Completions whose &lt;code&gt;:kind&lt;/code&gt; property is &#34;warning&#34; will be filtered out if set to non-nil. This option is useful for Javascript code completion, because tsserver often returns a lot of irrelevant completions whose &lt;code&gt;:kind&lt;/code&gt; property is &#34;warning&#34; for Javascript code. You can fix this behavior by setting this variable to non-nil value for Javascript buffers using &lt;code&gt;setq-local&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;h5&gt;tide-native-json-parsing `(and&lt;/h5&gt; &#xA;&lt;p&gt;(&amp;gt;= emacs-major-version 27) (functionp &#39;json-serialize) (functionp &#39;json-parse-buffer) (functionp &#39;json-parse-string))`&lt;/p&gt; &#xA;&lt;p&gt;Use native JSON parsing (only emacs &amp;gt;= 27).&lt;/p&gt; &#xA;&lt;h5&gt;tide-save-buffer-after-code-edit &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Save the buffer after applying code edits.&lt;/p&gt; &#xA;&lt;h5&gt;tide-hl-identifier-idle-time &lt;code&gt;0.5&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;How long to wait after user input before highlighting the current identifier.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dominikh/go-mode.el</title>
    <updated>2022-11-06T01:44:49Z</updated>
    <id>tag:github.com,2022-11-06:/dominikh/go-mode.el</id>
    <link href="https://github.com/dominikh/go-mode.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs mode for the Go programming language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is go-mode, the Emacs mode for editing Go code.&lt;/p&gt; &#xA;&lt;p&gt;It is a complete rewrite of the go-mode that shipped with Go 1.0.3 and before, and was part of Go 1.1 until Go 1.3. Beginning with Go 1.4, editor integration will not be part of the Go distribution anymore, making this repository the canonical place for go-mode.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;In addition to normal features, such as fontification and indentation, and close integration with familiar Emacs functionality (for example syntax-based navigation like &lt;code&gt;beginning-of-defun&lt;/code&gt;), go-mode comes with the following extra features to provide an improved experience:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Integration with &lt;code&gt;gofmt&lt;/code&gt; by providing a command of the same name, and &lt;code&gt;gofmt-before-save&lt;/code&gt;, which can be used in a hook to format Go buffers before saving them.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Setting the &lt;code&gt;gofmt-command&lt;/code&gt; variable also allows using &lt;code&gt;goimports&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Setting the &lt;code&gt;gofmt-args&lt;/code&gt; variable with a list of arguments allows using e.g. &lt;code&gt;gofmt -s&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Integration with &lt;code&gt;godoc&lt;/code&gt; via the functions &lt;code&gt;godoc&lt;/code&gt; and &lt;code&gt;godoc-at-point&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Integration with the Playground&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;go-play-buffer&lt;/code&gt; and &lt;code&gt;go-play-region&lt;/code&gt; to send code to the Playground&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;go-download-play&lt;/code&gt; to download a Playground entry into a new buffer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Managing imports&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A function for jumping to the file&#39;s imports (&lt;code&gt;go-goto-imports&lt;/code&gt; - &lt;code&gt;C-c C-f i&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;A function for adding imports, including tab completion (&lt;code&gt;go-import-add&lt;/code&gt;, bound to &lt;code&gt;C-c C-a&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;A function for removing or commenting unused imports (&lt;code&gt;go-remove-unused-imports&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;It is recommended that you use &lt;code&gt;goimports&lt;/code&gt; or the &lt;code&gt;organize-imports&lt;/code&gt; feature of &lt;code&gt;gopls&lt;/code&gt; to manage adding/removing/organizing imports automatically.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Integration with godef&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;godef-describe&lt;/code&gt; (&lt;code&gt;C-c C-d&lt;/code&gt;) to describe expressions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;godef-jump&lt;/code&gt; (&lt;code&gt;C-c C-j&lt;/code&gt;) and &lt;code&gt;godef-jump-other-window&lt;/code&gt; (&lt;code&gt;C-x 4 C-c C-j&lt;/code&gt;) to jump to declarations&lt;/li&gt; &#xA;   &lt;li&gt;This requires you to install godef via &lt;code&gt;go install github.com/rogpeppe/godef@latest&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Basic support for imenu (functions and variables)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Built-in support for displaying code coverage as calculated by &lt;code&gt;go test&lt;/code&gt; (&lt;code&gt;go-coverage&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Several functions for jumping to and manipulating the individual parts of function signatures. These functions support anonymous functions, but are smart enough to skip them when required (e.g. when jumping to a method receiver or docstring.)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Jump to the argument list (&lt;code&gt;go-goto-arguments&lt;/code&gt; - &lt;code&gt;C-c C-f a&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Jump to the docstring, create it if it does not exist yet (&lt;code&gt;go-goto-docstring&lt;/code&gt; - &lt;code&gt;C-c C-f d&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Jump to the function keyword (&lt;code&gt;go-goto-function&lt;/code&gt; - &lt;code&gt;C-c C-f f&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Jump to the function name (&lt;code&gt;go-goto-function-name&lt;/code&gt; - &lt;code&gt;C-c C-f n&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Jump to the return values (&lt;code&gt;go-goto-return-values&lt;/code&gt; - &lt;code&gt;C-c C-f r&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Jump to the method receiver, adding a pair of parentheses if no method receiver exists (&lt;code&gt;go-goto-method-receiver&lt;/code&gt; - &lt;code&gt;C-c C-f m&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;All of these functions accept a prefix argument (&lt;code&gt;C-u&lt;/code&gt;), causing them to skip anonymous functions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GOPATH detection – the function &lt;code&gt;go-guess-gopath&lt;/code&gt; will guess a suitable value for GOPATH, based on gb or wgo projects, Godeps and src folders for plain GOPATH workspaces. The command &lt;code&gt;go-set-project&lt;/code&gt; uses the return value of &lt;code&gt;go-guess-gopath&lt;/code&gt; to set the GOPATH environment variable.&lt;/p&gt; &lt;p&gt;You can either call &lt;code&gt;go-set-project&lt;/code&gt; manually, or integrate it with Projectile&#39;s project switching hooks, or any other means of switching projects you may employ.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;MELPA&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way of installing go-mode is via &lt;a href=&#34;http://www.emacswiki.org/emacs/ELPA&#34;&gt;ELPA&lt;/a&gt;, the Emacs package manager, and the &lt;a href=&#34;http://emacsredux.com/blog/2014/05/16/melpa-stable/&#34;&gt;MELPA Stable repository&lt;/a&gt;, which provides an up-to-date version of go-mode.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not familiar with ELPA yet, consider reading &lt;a href=&#34;http://ergoemacs.org/emacs/emacs_package_system.html&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;To install go-mode manually, check out the &lt;code&gt;go-mode.el&lt;/code&gt; repository in a directory of your choice, add it to your load path and configure Emacs to automatically load it when opening a &lt;code&gt;.go&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path &#34;/place/where/you/put/it/&#34;)&#xA;(autoload &#39;go-mode &#34;go-mode&#34; nil t)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.go\\&#39;&#34; . go-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either evaluate the statements with &lt;code&gt;C-x C-e&lt;/code&gt;, or restart Emacs.&lt;/p&gt; &#xA;&lt;h1&gt;Other extensions&lt;/h1&gt; &#xA;&lt;p&gt;There are several third party extensions that can enhance the Go experience in Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Gopls integration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/tools/raw/master/gopls/README.md&#34;&gt;Gopls&lt;/a&gt; is the official language server protocol (lsp) implementation provided by the Go team. It is intended to replace the existing third party tools for code formatting (gofmt), automatic imports (goimports), code navigation (godef/guru), type and function descriptions (godoc/godef), error checking, auto completion (gocode), variable and type renaming (rename), and more. Once gopls is stable the older tools will no longer be supported.&lt;/p&gt; &#xA;&lt;p&gt;Gopls is a supported backend for &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt;. It will be used automatically by lsp-mode if &lt;code&gt;gopls&lt;/code&gt; is found in your PATH. You can install gopls via: &lt;code&gt;go install golang.org/x/tools/gopls@latest&lt;/code&gt;. To enable lsp-mode for go buffers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;go-mode-hook &#39;lsp-deferred)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Syntax/error checking&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways of using flymake with Go:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dougm/goflymake&#34;&gt;goflymake&lt;/a&gt;, which internally uses &lt;code&gt;go build&lt;/code&gt; to capture all errors that a regular compilation would also produce&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://marmalade-repo.org/packages/flymake-go&#34;&gt;flymake-go&lt;/a&gt; for a more lightweight solution that only uses &lt;code&gt;gofmt&lt;/code&gt; and as such is only able to catch syntax errors. Unlike goflymake, however, it does not require an additional executable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Additionally, there is &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt;, a modern replacement for flymake, which comes with built-in support for Go. In addition to using &lt;code&gt;go build&lt;/code&gt; or &lt;code&gt;gofmt&lt;/code&gt;, it also has support for &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; and &lt;code&gt;errcheck&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Auto completion&lt;/h2&gt; &#xA;&lt;p&gt;For auto completion, take a look at &lt;a href=&#34;https://github.com/nsf/gocode&#34;&gt;gocode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;eldoc&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/syohex/emacs-go-eldoc&#34;&gt;https://github.com/syohex/emacs-go-eldoc&lt;/a&gt; provides eldoc functionality for go-mode.&lt;/p&gt; &#xA;&lt;h2&gt;Snippets&lt;/h2&gt; &#xA;&lt;p&gt;I maintain a set of YASnippet snippets for go-mode at &lt;a href=&#34;https://github.com/dominikh/yasnippet-go&#34;&gt;https://github.com/dominikh/yasnippet-go&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Integration with errcheck&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dominikh/go-errcheck.el&#34;&gt;https://github.com/dominikh/go-errcheck.el&lt;/a&gt; provides integration with &lt;a href=&#34;https://github.com/kisielk/errcheck&#34;&gt;errcheck&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Stability&lt;/h1&gt; &#xA;&lt;p&gt;go-mode.el has regular, tagged releases and is part of the MELPA Stable repository. These tagged releases are intended to provide a stable experience. APIs added in tagged releases will usually not be removed or changed in future releases.&lt;/p&gt; &#xA;&lt;p&gt;Changes made on the master branch, which is tracked by the normal MELPA repository, however, are under active development. New APIs are experimental and may be changed or removed before the next release. Furthermore, there is a higher chance for bugs.&lt;/p&gt; &#xA;&lt;p&gt;If you want a stable experience, use MELPA Stable. If you want cutting edge features, or &#34;beta-test&#34; future releases, use MELPA or the master branch.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/borg</title>
    <updated>2022-11-06T01:44:49Z</updated>
    <id>tag:github.com,2022-11-06:/emacscollective/borg</id>
    <link href="https://github.com/emacscollective/borg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Assimilate Emacs packages as Git submodules&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Assimilate Emacs packages as Git submodules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Borg is a bare-bones package manager for Emacs packages. It provides only a few essential features and should be combined with other tools such as [[https://github.com/magit/magit][Magit]], [[https://github.com/emacscollective/epkg][epkg]], [[https://github.com/jwiegley/use-package][use-package]], and [[https://github.com/tarsius/auto-compile][auto-compile]].&lt;/p&gt; &#xA;&lt;p&gt;Borg assimilates packages into the =&lt;del&gt;/.emacs.d= repository as Git submodules. An assimilated package is called a drone and a borg-based =&lt;/del&gt;/.emacs.d= repository is called a collective.&lt;/p&gt; &#xA;&lt;p&gt;/For more information see the [[https://emacsair.me/2016/05/17/assimilate-emacs-packages-as-git-submodules][announcement]] and the [[https://emacsmirror.net/manual/borg][manual]]./&lt;/p&gt;</summary>
  </entry>
</feed>