<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-31T02:08:04Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>org-roam/org-roam</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/org-roam/org-roam</id>
    <link href="https://github.com/org-roam/org-roam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rudimentary Roam replica with Org-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Org-roam &lt;a href=&#34;https://github.com/org-roam/org-roam/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/org-roam/org-roam&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/org-roam&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/org-roam-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;img src=&#34;https://www.orgroam.com/img/logo.svg?sanitize=true&#34; align=&#34;right&#34; alt=&#34;Org-roam Logo&#34; width=&#34;240&#34;&gt; &#xA;&lt;p&gt;Org-roam is a plain-text knowledge management system. It brings some of &lt;a href=&#34;https://www.roamresearch.com/&#34;&gt;Roam&#39;s&lt;/a&gt; more powerful features into the &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org-mode&lt;/a&gt; ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Private and Secure&lt;/strong&gt;: Edit your personal wiki completely offline, entirely in your control. Encrypt your notes with GPG. Take lasting notes in plain-text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Networked Thought&lt;/strong&gt;: Connect notes and thoughts together with ease using backlinks. Discover surprising and previously unseen connections in your notes with the built-in graph visualization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible and Powerful&lt;/strong&gt;: Leverage Emacs&#39; fantastic text-editing interface, and the mature Emacs and Org-mode ecosystem of packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and Open Source&lt;/strong&gt;: Org-roam is licensed under the GNU General Public License version 3 or later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://www.orgroam.com/img/screenshot.png&#34; alt=&#34;Org-roam Screenshot&#34; width=&#34;738&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.orgroam.com/manual.html&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.orgroam.com/manual.html#FAQ&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/org-roam/org-roam/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Down below you will find basic installation instructions for how to quickly install &lt;code&gt;org-roam&lt;/code&gt; using various environments for various purposes. For more detailed information, please read the &lt;a href=&#34;https://www.orgroam.com/manual.html&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;package.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;You can install &lt;code&gt;org-roam&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt; using &lt;code&gt;package.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;M-x package-install RET org-roam RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;straight.el&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;Installation from MELPA or MELPA Stable using &lt;code&gt;straight.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package &#39;org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight t&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you need to install the package directly from the source repository, instead of from MELPA, the next sample shows how to do so:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight (:host github :repo &#34;org-roam/org-roam&#34;&#xA;             :files (:defaults &#34;extensions/*&#34;))&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you plan to use your own local fork for the development and contribution, the next sample will get you there:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :straight (:local-repo &#34;/path/to/org-roam-fork&#34;&#xA;             :files (:defaults &#34;extensions/*&#34;)&#xA;             :build (:not compile))&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Using Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;Doom&#39;s &lt;code&gt;:lang org&lt;/code&gt; module comes with support for &lt;code&gt;org-roam&lt;/code&gt;, but it&#39;s not enabled by default. To activate it pass &lt;code&gt;+roam2&lt;/code&gt; flag to &lt;code&gt;org&lt;/code&gt; module in your &lt;code&gt;$DOOMDIR/init.el&lt;/code&gt; (e.g. &lt;code&gt;(org +roam2)&lt;/code&gt;), save the file and run &lt;code&gt;doom sync -u&lt;/code&gt; in your shell.&lt;/p&gt; &#xA; &lt;p&gt;To provide better stability, Doom pins the package to a specific commit. If you need to unpin it &lt;em&gt;(not recommended doing that, request Doom to bump the package instead)&lt;/em&gt; use the next in your &lt;code&gt;packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(unpin! org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If for some reasons you want to use a different recipe for &lt;code&gt;org-roam&lt;/code&gt;, you can use the next form in your &lt;code&gt;packages.el&lt;/code&gt; to install the package from a recipe repository (e.g. MELPA):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can pass &lt;code&gt;:pin &#34;commit hash&#34;&lt;/code&gt; to pin the package to a specific commit.&lt;/p&gt; &#xA; &lt;p&gt;With the next sample you can install the package directly from the source repository:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam&#xA;  :recipe (:host github :repo &#34;org-roam/org-roam&#34;&#xA;           :files (:defaults &#34;extensions/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And if you plan to use your own local fork for the development or contribution, the next sample will get you there:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(package! org-roam&#xA;  :recipe (:local-repo &#34;/path/to/org-roam-fork&#34;&#xA;           :files (:defaults &#34;extensions/*&#34;)&#xA;           :build (:not compile)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Without a package manager&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Toggle instructions&lt;/summary&gt; &#xA; &lt;p&gt;To install the package without using a package manager you have the next two options:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install the package by cloning it with &lt;code&gt;git&lt;/code&gt; from the source repository.&lt;/li&gt; &#xA;  &lt;li&gt;Or install the package by downloading the latest &lt;a href=&#34;https://github.com/org-roam/org-roam/releases&#34;&gt;release version&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;In both of the cases you will need to ensure that you have all the required dependencies. These include:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;dash&lt;/li&gt; &#xA;  &lt;li&gt;f&lt;/li&gt; &#xA;  &lt;li&gt;s&lt;/li&gt; &#xA;  &lt;li&gt;org (9.4 is the minimal required version!)&lt;/li&gt; &#xA;  &lt;li&gt;emacsql&lt;/li&gt; &#xA;  &lt;li&gt;emacsql-sqlite&lt;/li&gt; &#xA;  &lt;li&gt;magit-section&lt;/li&gt; &#xA;  &lt;li&gt;filenotify-recursive&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;After installing the package, you will need to properly setup &lt;code&gt;load-path&lt;/code&gt; to the package:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/org-roam/&#34;)&#xA;(add-to-list &#39;load-path &#34;/path/to-org-roam/extensions/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After which you should be able to resolve &lt;code&gt;(require &#39;org-roam)&lt;/code&gt; call without any problems.&lt;/p&gt; &#xA; &lt;p&gt;Org-roam also comes with &lt;code&gt;.texi&lt;/code&gt; files to integrate with Emacs&#39; built-in Info system. Read the manual to find more details for how to install them manually.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a very basic sample for configuration of &lt;code&gt;org-roam&lt;/code&gt; using &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package org-roam&#xA;  :ensure t&#xA;  :custom&#xA;  (org-roam-directory (file-truename &#34;/path/to/org-files/&#34;))&#xA;  :bind ((&#34;C-c n l&#34; . org-roam-buffer-toggle)&#xA;         (&#34;C-c n f&#34; . org-roam-node-find)&#xA;         (&#34;C-c n g&#34; . org-roam-graph)&#xA;         (&#34;C-c n i&#34; . org-roam-node-insert)&#xA;         (&#34;C-c n c&#34; . org-roam-capture)&#xA;         ;; Dailies&#xA;         (&#34;C-c n j&#34; . org-roam-dailies-capture-today))&#xA;  :config&#xA;  ;; If you&#39;re using a vertical completion framework, you might want a more informative completion interface&#xA;  (setq org-roam-node-display-template (concat &#34;${title:*} &#34; (propertize &#34;${tags:10}&#34; &#39;face &#39;org-tag)))&#xA;  (org-roam-db-autosync-mode)&#xA;  ;; If using org-roam-protocol&#xA;  (require &#39;org-roam-protocol))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;file-truename&lt;/code&gt; function is only necessary when you use symbolic link to &lt;code&gt;org-roam-directory&lt;/code&gt;. Org-roam won&#39;t automatically resolve symbolic link to the directory.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/daviwil&#34;&gt;David Wilson&lt;/a&gt; of &lt;a href=&#34;https://www.youtube.com/c/SystemCrafters&#34;&gt;System Crafters&lt;/a&gt; has produced an introductory video that covers the basic commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=AyhPmypHDEw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/AyhPmypHDEw/0.jpg&#34; alt=&#34;Getting Started with Org Roam - Build a Second Brain in Emacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;Before creating a new topic/issue, please be mindful of our time and ensure that it has not already been addressed on &lt;a href=&#34;https://github.com/org-roam/org-roam/issues&#34;&gt;GitHub&lt;/a&gt; or on &lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are new to Emacs and have problem setting up Org-roam, please ask your question on &lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack, channel #how-do-i&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For quick questions, please ask them on &lt;a href=&#34;https://join.slack.com/t/orgroam/shared_invite/zt-wuoize1z-x3UyQnQ0WHF0RhuEQ2NLnQ&#34;&gt;Slack, channel #troubleshooting&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If something is not working as it should, or if you would like to suggest a new feature, please &lt;a href=&#34;https://github.com/org-roam/org-roam/issues&#34;&gt;create a new issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you have questions about your workflow with the slip-box method, please find a relevant topic on &lt;a href=&#34;https://org-roam.discourse.group/&#34;&gt;Discourse&lt;/a&gt;, or create a new one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Knowledge Bases using Org-roam&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://braindump.jethro.dev/&#34;&gt;Jethro Kuan&lt;/a&gt; (&lt;a href=&#34;https://github.com/jethrokuan/braindump/tree/master/org&#34;&gt;Source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alexeyshmalko.com/&#34;&gt;Alexey Shmalko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sidhartharya.github.io/braindump/index.html&#34;&gt;Sidharth Arya&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs and suggest new feature use the issue tracker. If you have some code which you would like to be merged, then open a pull request. Please also see &lt;a href=&#34;https://raw.githubusercontent.com/org-roam/org-roam/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Jethro Kuan and contributors. Distributed under the GNU General Public License, Version 3.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/lsp-bridge</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/manateelazycat/lsp-bridge</id>
    <link href="https://github.com/manateelazycat/lsp-bridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fastest LSP client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;lsp-bridge&lt;/h1&gt; &#xA;&lt;p&gt;Lsp-bridge&#39;s goal is to become the fastest LSP client in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Lsp-bridge uses python&#39;s threading technology to build caches that bridge Emacs and LSP server. Lsp-bridge will provide smooth completion experience without compromise to slow down emacs&#39; performance.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/screenshot.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Python dependencies: &lt;a href=&#34;https://github.com/tkf/python-epc&#34;&gt;python-epc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Elisp dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/galeo/corfu-doc&#34;&gt;corfu-doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;orderless&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt; (need execute command &lt;code&gt;all-the-icons-install-fonts&lt;/code&gt; to install all-the-icons fonts)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tumashu/posframe&#34;&gt;posframe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrblevin/markdown-mode&#34;&gt;markdown-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;yasnippet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Clone or download this repository (path of the folder is the &lt;code&gt;&amp;lt;path-to-lsp-bridge&amp;gt;&lt;/code&gt; used below).&lt;/li&gt; &#xA; &lt;li&gt;Add following code in your ~/.emacs:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-lsp-bridge&amp;gt;&#34;)&#xA;&#xA;(require &#39;yasnippet)&#xA;(require &#39;lsp-bridge)&#xA;(require &#39;lsp-bridge-icon)        ;; show icons for completion items, optional&#xA;(require &#39;lsp-bridge-jdtls)       ;; provide Java third-party library jump and -data directory support, optional&#xA;(yas-global-mode 1)&#xA;&#xA;(require &#39;corfu-history)&#xA;(require &#39;lsp-bridge-orderless)   ;; make lsp-bridge support fuzzy match, optional&#xA;(corfu-history-mode t)&#xA;(global-lsp-bridge-mode)&#xA;(when (&amp;gt; (frame-pixel-width) 3000) (custom-set-faces &#39;(corfu-default ((t (:height 1.3))))))  ;; adjust default font height when running in HiDPI screen.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-def&lt;/code&gt;: jump to the definition&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-def-other-window&lt;/code&gt;: jump to the definition in other-window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-impl&lt;/code&gt;: jump to the implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-impl-other-window&lt;/code&gt;: jump to the implementation in other-window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-return-from-def&lt;/code&gt;: return to the location before calling &lt;code&gt;lsp-bridge-find-def&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-references&lt;/code&gt;: traverse across code references (forked from color-rg.el)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lookup-documentation&lt;/code&gt;: lookup documentation of symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-popup-documentation-scroll-up&lt;/code&gt;: scroll up popup document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-popup-documentation-scroll-down&lt;/code&gt;: scroll down popup document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-rename&lt;/code&gt;: rename symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-jump-to-next-diagnostic&lt;/code&gt;: Jump to the next diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-jump-to-prev-diagnostic&lt;/code&gt;: Jump to the previous diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-show-signature-help-in-minibuffer&lt;/code&gt;: show signature help in minibuffer manually (move cursor to parameters area will show signature help automatically)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-insert-common-prefix&lt;/code&gt;: insert common prefix of candidates&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-restart-process&lt;/code&gt;: restart lsp-bridge process (only used for development)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-popup-predicates&lt;/code&gt;: the predicate function for completion menu, completion menu popup after all the functions pass&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-stop-commands&lt;/code&gt;: completion menu will not popup if these commands are executed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-hide-characters&lt;/code&gt;: completion menu will not popup when cursor after those characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-diagnostics-fetch-idle&lt;/code&gt;: diagnostic delay, start pulling diagnostic information 1 second after stopping typing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-auto-import&lt;/code&gt;: automatic insert import code, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-candidate-doc-preview&lt;/code&gt;: preview of the candidate document, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-signature-help&lt;/code&gt;: show function parameter in minibufer, disable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-org-babel-lang-list&lt;/code&gt;: list of language to support org-mode code block completion&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-disable-backup&lt;/code&gt;: forbidden version manage of emacs, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-log&lt;/code&gt;: enable the LSP message log, disable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;: enable program debugging, disable by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize language server configuration&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration of for each language server is stored at &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/tree/master/langserver&#34;&gt;lsp-bridge/langserver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Anyway you can customize server configuration with the following priority:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-get-lang-server-by-project&lt;/code&gt;: write your own function to get server configuration based on project-path and file-path, this function is nil by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-extension-list&lt;/code&gt;: load server configuration based on file extension, such as, we launch &lt;code&gt;volar&lt;/code&gt; server instead &lt;code&gt;javascript&lt;/code&gt; server when open *.vue file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-mode-list&lt;/code&gt;: load server configuration based on major-mode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add support for new language?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create configuration file under lsp-bridge/langserver, such as &lt;code&gt;pyright.json&lt;/code&gt; for pyright (windows user please uses &lt;code&gt;pyright_windows.json&lt;/code&gt;, macOS user please uses &lt;code&gt;pyright_darwin.json&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(mode . server_name)&lt;/code&gt; in &lt;code&gt;lsp-bridge-lang-server-list&lt;/code&gt;, such as &lt;code&gt;(python-mode . &#34;pyright&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add new mode-hook to &lt;code&gt;lsp-bridge-default-mode-hooks&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Welcome to send PR to help us improve support for LSP servers, thanks for your contribution!&lt;/p&gt; &#xA;&lt;h2&gt;Supported language servers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Index&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;LSP Server&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clangd/clangd&#34;&gt;clangd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c, c++&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;pip install pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixirLS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that the &lt;code&gt;elixir-ls&lt;/code&gt; release directory is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;make sure gopls in PATH, please do &lt;code&gt;ln -s ~/go/bin/gopls ~/.local/bin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;hls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server&#34;&gt;dart-analysis-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scala&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/typescript&#34;&gt;typescript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;typescript, javascript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/ocaml/ocaml-lsp&#34;&gt;ocamllsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ocaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang-ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;erlang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/latex-lsp/texlab&#34;&gt;texlab&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;latex&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that &lt;code&gt;org.eclipse.jdt.ls.product/target/repository/bin&lt;/code&gt; is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clojure-lsp/clojure-lsp&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;clojure&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/bash-lsp/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/johnsoncodehk/volar&#34;&gt;volar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;vue&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server&#34;&gt;sumneko&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure &lt;code&gt;bin&lt;/code&gt; under sumneko installation is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/chemzqm/wxml-languageserver&#34;&gt;wxml-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;wxml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-html-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;html&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-css-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;css&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;TODO:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Code action&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Show signature help with eldoc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features that won&#39;t be supported&lt;/h3&gt; &#xA;&lt;p&gt;The goal of lsp-bridge is to become the fastest LSP client in Emacs, not a complete implementation of LSP protocol.&lt;/p&gt; &#xA;&lt;p&gt;Emacs can do better for the following tasks, we will not reinvent the wheel in lsp-bridge:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Code formatting: each LSP server has its own formatting specification, we can gain finer control using Emacs&#39; builtin formatting tool.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting: &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;Tree-sitter&lt;/a&gt; is a wonderful incremental parsing library for syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;Xref: Xref&#39;s mechanism is simultaneously. lsp-bridge is completely asynchronous, recommended to use wrap function to uniformly key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Join development&lt;/h2&gt; &#xA;&lt;p&gt;The following is the framework of lsp-bridge:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/framework.png&#34;&gt; &#xA;&lt;p&gt;The following is the directory structure of the lsp-bridge project:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elisp main logic part that provides custom options and elisp functions for python sub-process calls like code jumping, renaming, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-epc.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Communicating with lsp-bridge python sub-process, which mainly implements elisp IPC to connect to python EPC for data serialization, sending, receiving, and deserialization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-ref.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Framework of code referencing, providing references viewing, batch renames, regex filtering of reference results, etc. The core code is forked from color-rg.el&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-orderless.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fuzzy search for completion items, i.e. for long candidate you do not need to type the word in correct order to get the correct item&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-icon.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rendering the completion menu icons, which is used to distinguish different types of completion options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-jdtls.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provide java language third-party library jumping function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python main logic part that provides event loop, message scheduling and status management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/fileaction.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tracking the status of each file, processing LSP response messages, calling Emacs elisp function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/lspserver.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LSP message processing module, mainly to analyze, send and receive LSP messages, and ensure that the sequence of LSP requests conforms with the LSP protocol specification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/utils.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Utility functions of convenience for each module call&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/mergedeep.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON information merger is mainly used to send custom options to LSP server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/hanlder/&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The implementation of sending and receiving LSP message, where &lt;strong&gt;init&lt;/strong&gt;.py is a base class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;langserver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The configurations of the LSP servers, each server corresponding to a JSON file that defines the name of the server, language ID, starting command, options, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/&#34;&gt;LSP Specification&lt;/a&gt; and &lt;a href=&#34;https://manateelazycat.github.io/emacs/2022/05/12/lsp-bridge.html&#34;&gt;The Design of lsp-bridge&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;Then turn on option &lt;code&gt;lsp-bridge-enable-log&lt;/code&gt; and happy hacking! ;)&lt;/p&gt; &#xA;&lt;h2&gt;Report bug&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;emacs -q&lt;/code&gt; and load a minimal setup with only lsp-bridge to verify that the bug is reproducible. If &lt;code&gt;emacs -q&lt;/code&gt; works fine, probably something is wrong with your Emacs config.&lt;/p&gt; &#xA;&lt;p&gt;If the problem still exists, please report it &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/issues/new&#34;&gt;here&lt;/a&gt; with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content, it contains many clues that can help us locate the problem faster.&lt;/p&gt; &#xA;&lt;p&gt;If you get a segfault error, please use the following way to collect crash information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install gdb and turn on option &lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the command &lt;code&gt;lsp-bridge-stop-process&lt;/code&gt; to stop the current process&lt;/li&gt; &#xA; &lt;li&gt;Restart lsp-bridge, send issue with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content when next crash&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributor&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=manateelazycat/lsp-bridge&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>rougier/nano-emacs</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/rougier/nano-emacs</id>
    <link href="https://github.com/rougier/nano-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GNU Emacs / N Λ N O - Emacs made simple&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;GNU Emacs / N Λ N O&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GNU Emacs / N Λ N O&lt;/strong&gt; is a set of configuration files for GNU Emacs such as to provide a nice and consistent look and feel as shown below. It is based on design principles I described in the article &#34;&lt;a href=&#34;https://arxiv.org/abs/2008.06030&#34;&gt;On the design of text Editors&lt;/a&gt;&#34; that is available on arXiv. The light theme is based on &lt;a href=&#34;https://material.io/&#34;&gt;Material colors&lt;/a&gt; and the dark theme is based on &lt;a href=&#34;https://www.nordtheme.com/&#34;&gt;Nord colors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The philosophy of nano emacs is to stick as much as possible to vanilla emacs without introducing too much dependencies (or none if possible) and to keep it modular enough. The idea is for users to copy the part they are interested in such as to include them in their own configuration.&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-emacs-light.png&#34; width=&#34;47.5%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-emacs-dark.png&#34; width=&#34;47.5%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Nano Emacs is quite close to my other project &lt;a href=&#34;https://github.com/rougier/elegant-emacs&#34;&gt;Elegant Emacs&lt;/a&gt; which might be considered to be an early prototype.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You need a recent version of &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; and to have the &lt;a href=&#34;https://fonts.google.com/specimen/Roboto+Mono&#34;&gt;Roboto Mono&lt;/a&gt; and &lt;a href=&#34;https://fonts.google.com/specimen/Fira+Code&#34;&gt;Fira Code&lt;/a&gt; fonts installed on your system. There are no other dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Quick test&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to test nano emacs is to clone the directory on your desktop and to type (from inside the cloned repository):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ emacs -q -l nano.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;If you like the result, you can either manually merge the contents of &lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano.el&#34;&gt;nano.el&lt;/a&gt; into your emacs configuration file, or install nano through the &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;h4&gt;Manual Installation&lt;/h4&gt; &#xA;&lt;p&gt;To merge the &lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano.el&#34;&gt;nano.el&lt;/a&gt; contents with your emacs configuration, you&#39;ll need to modify the &lt;code&gt;load-path&lt;/code&gt; to include the nano emacs repository and then call for the different modules. The only mandatory module is &lt;code&gt;nano-faces&lt;/code&gt; that defines 6 faces that are used in other modules.&lt;/p&gt; &#xA;&lt;h4&gt;Installation through straight.el&lt;/h4&gt; &#xA;&lt;p&gt;To install nano through &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;, install straight.el, and then add the following snippet into your emacs configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(straight-use-package&#xA;  &#39;(nano-emacs :type git :host github :repo &#34;rougier/nano-emacs&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from here, you may either &lt;code&gt;(require &#39;nano)&lt;/code&gt; to pull in the default nano configuration, or call for the different modules. The only mandatory module is &lt;code&gt;nano-faces&lt;/code&gt; that defines 6 faces that are used in other modules.&lt;/p&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the default font, the proportional font and the font-size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nano-font-family-monospaced &#34;Roboto Mono&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the default monospaced font. Defaults to Roboto Mono. Note that if you set this to a font without proper light or bold weights you will lose many of the key design features of nano-emacs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nano-font-family-proportional nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set this to the name (as a string) of your favorite variable-width font to enable &lt;code&gt;variable-width-mode&lt;/code&gt; and &lt;code&gt;mixed-pitch-mode&lt;/code&gt;. If you have already set this somewhere else, you can use &lt;code&gt;(setq nano-font-family-proportional (face-attribute &#39;variable-width :family))&lt;/code&gt; to use the same one.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq nano-font-size 14)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the font-size of most faces in nano-emacs.&lt;/p&gt; &#xA;&lt;h4&gt;Note about load-order&lt;/h4&gt; &#xA;&lt;p&gt;Because of the way nano-emacs is set up, you need to set these variables &lt;em&gt;before&lt;/em&gt; you call &lt;code&gt;(nano-faces)&lt;/code&gt; and &lt;code&gt;(nano-theme)&lt;/code&gt;. If you change one of these variables after load/calling &lt;code&gt;(nano-faces)&lt;/code&gt; and &lt;code&gt;(nano-theme)&lt;/code&gt;, you will need to call them again for these changes to take effect.&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano.el&#34;&gt;nano.el&lt;/a&gt;&lt;/strong&gt; (optional)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module is mostly used to test nano emacs locally. Its content is supposed to be merged into an existing emacs configuration. See &lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/#Quick-test&#34;&gt;Quick test&lt;/a&gt; section above.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mandatory&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-base-colors.el&#34;&gt;nano-base-colors.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines the fundamental colors of nano theme. If your Emacs has a theme or color-scheme, make sure its loaded before you load nano-faces so that its colors are used by nano.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-faces.el&#34;&gt;nano-faces.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines the fundamental faces of nano theme. If your Emacs has a theme or color-scheme, make sure its loaded before you load nano-faces so that its colors are used by nano.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-theme-light.el&#34;&gt;nano-theme-light.el&lt;/a&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-theme-dark.el&#34;&gt;nano-theme-dark.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Theses modules define light and dark themes respectively by overriding the base colors. If your Emacs is not themed, you are encouraged to try one of these.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-theme.el&#34;&gt;nano-theme.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module derives faces for several popular emacs modes from the nano faces. You can either use them all by calling &lt;code&gt;(nano-theme)&lt;/code&gt;, or pick what you want by calling your selection of &lt;code&gt;(nano-theme--&lt;/code&gt; functions.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-help.el&#34;&gt;nano-help.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module provides a function to display a small help message in the echo area.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-splash.el&#34;&gt;nano-splash.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module provides a splash screen when emacs is started.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-modeline.el&#34;&gt;nano-modeline.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines a header line that is mode dependent and takes care of hiding the modeline when necessary.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-layout.el&#34;&gt;nano-layout.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module defines the overall layout of an emacs frame, defining default font, fringes, margins, etc.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-defaults.el&#34;&gt;nano-defaults.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules provides a set of sane default settings for Emacs.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-session.el&#34;&gt;nano-session.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules configures Emacs such that a session is saved from one run to the other.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-bindings.el&#34;&gt;nano-bindings.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules provides a reduced set of keybindings for a few common commands.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-counsel.el&#34;&gt;nano-counsel.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This modules configures the &lt;a href=&#34;https://elpa.gnu.org/packages/counsel.html&#34;&gt;counsel package&lt;/a&gt; that needs to have been &lt;strong&gt;installed&lt;/strong&gt; by user.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-colors.el&#34;&gt;nano-colors.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This module provides a collection of colors palettes (&lt;a href=&#34;https://yeun.github.io/open-color/&#34;&gt;open colors&lt;/a&gt;, &lt;a href=&#34;https://material.io/&#34;&gt;material colors&lt;/a&gt;, &lt;a href=&#34;https://www.nordtheme.com/&#34;&gt;nord colors&lt;/a&gt;) with functions for easily accessing them.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Experimental&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-mu4e.el&#34;&gt;nano-mu4e.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This package setup the look and feel of mu4e.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-mu4e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-minibuffer.el&#34;&gt;nano-minibuffer.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Minibuffer using &lt;a href=&#34;https://github.com/muffinmad/emacs-mini-frame&#34;&gt;mini-frame&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-minibuffer-light.png&#34; width=&#34;47.5%&#34;&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-minibuffer-dark.png&#34; width=&#34;47.5%&#34;&gt; &#xA;  &lt;/div&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-command.el&#34;&gt;nano-command.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This package provides an experimental command line prompt in the header line. It has not history nor completion but can be used for one line input such as org-capture.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-command.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/nano-agenda.el&#34;&gt;nano-agenda.el&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;An experimental interactive mini agenda that displays side by side a mini calendar on the left and timestamped org entries on the right.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-emacs/master/images/nano-agenda.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related works&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mclear-tools/bespoke-themes&#34;&gt;Bespoke theme&lt;/a&gt; Custom medium contrast light and dark themes inspired by nano emacs, elegant emacs, Nord and Solarized themes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/dap-mode</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/emacs-lsp/dap-mode</id>
    <link href="https://github.com/emacs-lsp/dap-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs ❤️ Debug Adapter Protocol&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://melpa.org/#/dap-mode][file:https://melpa.org/packages/dap-mode-badge.svg]] [[https://stable.melpa.org/#/dap-mode][file:https://stable.melpa.org/packages/dap-mode-badge.svg]] [[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]] [[https://github.com/emacs-lsp/dap-mode/actions][file:https://github.com/emacs-lsp/dap-mode/workflows/CI/badge.svg]] [[https://discord.gg/swuxy5AAgT][file:https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dap-mode ** Table of Contents :TOC_4_gh:noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#dap-mode][dap-mode]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#summary][Summary]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#project-status][Project status]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#features][Features]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#configuration][Configuration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#gallery][Gallery]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#extending-dap-with-new-debug-servers][Extending DAP with new Debug servers]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#links][Links]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#acknowledgments][Acknowledgments]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Summary Emacs client/library for [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]] is a wire protocol for communication between client and Debug Server. It&#39;s similar to the [[https://github.com/Microsoft/language-server-protocol][LSP]] but provides integration with debug server. *** Project status The API considered unstable until 1.0 release is out. It is tested against Java, Python, Ruby, Elixir and LLDB (C/C++/Objective-C/Swift). ** Usage The main entry points are &lt;del&gt;dap-debug&lt;/del&gt; and &lt;del&gt;dap-debug-edit-template&lt;/del&gt;. The first one asks for a registered debug template and starts the configuration using the default values for that particular configuration. The latter creates a debug template which could be customized before running. &lt;del&gt;dap-debug-edit-template&lt;/del&gt; will prepare a template declaration inside a temporary buffer. You should execute this code using &lt;del&gt;C-M-x&lt;/del&gt; for the changes to apply. You should also copy this code into your Emacs configuration if you wish to make it persistent.&lt;/p&gt; &#xA;&lt;p&gt;dap-mode also provides a [[https://github.com/abo-abo/hydra][hydra]] with &lt;del&gt;dap-hydra&lt;/del&gt;. You can automatically trigger the hydra when the program hits a breakpoint by using the following code.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (add-hook &#39;dap-stopped-hook (lambda (arg) (call-interactively #&#39;dap-hydra))) #+END_SRC ** [[https://emacs-lsp.github.io/dap-mode/page/features/][Features]] ** [[https://emacs-lsp.github.io/dap-mode/page/configuration/][Configuration]] ** [[https://emacs-lsp.github.io/dap-mode/page/gallery][Gallery]] ** [[https://emacs-lsp.github.io/dap-mode/page/adding-debug-server][Extending DAP with new Debug servers]] ** Links&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/emacs-lsp/lsp-java][LSP Java]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/][Debug Adapter Protocol Server Implementations]] ** Acknowledgments&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/danielmartin][Daniel Martin]] - LLDB integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/kiennq][Kien Nguyen]] - NodeJS debugger, Edge debuggers, automatic extension installation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Ladicle][Aya Igarashi]] - Go debugger integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/nbfalcon][Nikita Bloshchanevich]] - launch.json support (+ variable expansion), debugpy support, (with some groundwork by yyoncho) runInTerminal support, various bug fixes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>minad/cape</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/minad/cape</id>
    <link href="https://github.com/minad/cape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦸cape.el - Completion At Point Extensions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: cape.el - Let your completions fly! #+author: Daniel Mendler #+language: en #+export_file_name: cape.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Cape: (cape). #+texinfo_dir_desc: Completion At Point Extensions&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/cape.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/cape.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/cape.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/cape.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/cape&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/cape-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/cape&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/cape-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cape provides a bunch of Completion At Point Extensions which can be used in combination with my [[https://github.com/minad/corfu][Corfu]] completion UI or the default completion UI. The completion backends used by &lt;del&gt;completion-at-point&lt;/del&gt; are so called &lt;del&gt;completion-at-point-functions&lt;/del&gt; (Capfs). In principle, the Capfs provided by Cape can also be used by [[https://github.com/company-mode/company-mode][Company]].&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/minad/cape/raw/logo/cape.png?raw=true&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can register the &lt;del&gt;cape-*&lt;/del&gt; functions in the &lt;del&gt;completion-at-point-functions&lt;/del&gt; list. This makes the backends available for completion, which is usually invoked by pressing &lt;del&gt;TAB&lt;/del&gt; or &lt;del&gt;M-TAB&lt;/del&gt;. The functions can also be invoked interactively to trigger the respective completion at point. You can bind them directly to a key in your user configuration. Notable commands/capfs are &lt;del&gt;cape-line&lt;/del&gt; for completion of a line from the current buffer and &lt;del&gt;cape-file&lt;/del&gt; for completion of a file name. The command &lt;del&gt;cape-symbol&lt;/del&gt; is particularily useful for documentation of Elisp packages or configurations, since it completes elisp symbols anywhere.&lt;/p&gt; &#xA;&lt;p&gt;On the more experimental side, Cape has the super power to transform Company backends into Capfs and merge multiple Capfs into a Super-Capf! These transformers allow you to still take advantage of Company backends even if you are not using Company as frontend.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available Capfs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-dabbrev&lt;/del&gt;: Complete word from current buffers&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-file&lt;/del&gt;: Complete file name&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-history&lt;/del&gt;: Complete from Eshell, Comint or minibuffer history&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-keyword&lt;/del&gt;: Complete programming language keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-symbol&lt;/del&gt;: Complete Elisp symbol&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-abbrev&lt;/del&gt;: Complete abbreviation (&lt;del&gt;add-global-abbrev&lt;/del&gt;, &lt;del&gt;add-mode-abbrev&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-ispell&lt;/del&gt;: Complete word from Ispell dictionary&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-dict&lt;/del&gt;: Complete word from dictionary file&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-line&lt;/del&gt;: Complete entire line from current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-tex&lt;/del&gt;: Complete unicode char from TeX command, e.g. &lt;del&gt;\hbar&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-sgml&lt;/del&gt;: Complete unicode char from Sgml entity, e.g., &lt;del&gt;&amp;amp;alpha&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-rfc1345&lt;/del&gt;: Complete unicode char using RFC 1345 mnemonics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cape is available on GNU ELPA and MELPA. You can install the package with &lt;del&gt;package-install&lt;/del&gt;. In the long term some of the Capfs provided by this package could be upstreamed into Emacs itself.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable Corfu completion UI ;; See the Corfu README for more configuration tips. (use-package corfu :init (global-corfu-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; Add extensions (use-package cape ;; Bind dedicated completion commands ;; Alternative prefix keys: C-c p, M-p, M-+, ... :bind ((&#34;C-c p p&#34; . completion-at-point) ;; capf (&#34;C-c p t&#34; . complete-tag) ;; etags (&#34;C-c p d&#34; . cape-dabbrev) ;; or dabbrev-completion (&#34;C-c p h&#34; . cape-history) (&#34;C-c p f&#34; . cape-file) (&#34;C-c p k&#34; . cape-keyword) (&#34;C-c p s&#34; . cape-symbol) (&#34;C-c p a&#34; . cape-abbrev) (&#34;C-c p i&#34; . cape-ispell) (&#34;C-c p l&#34; . cape-line) (&#34;C-c p w&#34; . cape-dict) (&#34;C-c p \&#34; . cape-tex) (&#34;C-c p _&#34; . cape-tex) (&#34;C-c p ^&#34; . cape-tex) (&#34;C-c p &amp;amp;&#34; . cape-sgml) (&#34;C-c p r&#34; . cape-rfc1345)) :init ;; Add &lt;code&gt;completion-at-point-functions&#39;, used by &lt;/code&gt;completion-at-point&#39;. (add-to-list &#39;completion-at-point-functions #&#39;cape-file) (add-to-list &#39;completion-at-point-functions #&#39;cape-dabbrev) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-history) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-keyword) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-tex) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-sgml) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-rfc1345) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-abbrev) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-ispell) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-dict) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-symbol) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-line) ) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Experimental features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Company adapter&lt;/p&gt; &#xA;&lt;p&gt;/Wrap your Company backend in a Cape and turn it into a Capf!/&lt;/p&gt; &#xA;&lt;p&gt;Cape provides an adapter for Company backends &lt;del&gt;cape-company-to-capf&lt;/del&gt;. The adapter transforms Company backends to Capfs which are understood by the built-in Emacs completion mechanism. The function is approximately the inverse of the &lt;del&gt;company-capf&lt;/del&gt; backend from Company. The adapter is still experimental and may have certain edge cases. The adapter can be used as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use Company backends as Capfs. (setq-local completion-at-point-functions (mapcar #&#39;cape-company-to-capf (list #&#39;company-files #&#39;company-ispell #&#39;company-dabbrev))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that the adapter does not require Company to be installed. Backends implementing the Company specification do not necessarily have to depend on Company, however in practice most backends do. The following shows a small example completion backend, which can be used with both &lt;del&gt;completion-at-point&lt;/del&gt; (Corfu, default completion) and Company.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar emojis &#39;((&#34;:-D&#34; . &#34;😀&#34;) (&#34;;-)&#34; . &#34;😉&#34;) (&#34;:-/&#34; . &#34;😕&#34;) (&#34;:-(&#34; . &#34;🙁&#34;) (&#34;:-*&#34; . &#34;😙&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;(defun emoji-backend (action &amp;amp;optional arg &amp;amp;rest _) (pcase action (&#39;prefix (and (memq (char-before) &#39;(?: ?;)) (cons (string (char-before)) t))) (&#39;candidates (all-completions arg emojis)) (&#39;annotation (concat &#34; &#34; (cdr (assoc arg emojis)))) (&#39;post-completion (let ((str (buffer-substring (- (point) 3) (point)))) (delete-region (- (point) 3) (point)) (insert (cdr (assoc str emojis)))))))&lt;/p&gt; &#xA;&lt;p&gt;;; Register emoji backend with `completion-at-point&#39; (setq completion-at-point-functions (list (cape-company-to-capf #&#39;emoji-backend)))&lt;/p&gt; &#xA;&lt;p&gt;;; Register emoji backend with Company. (setq company-backends &#39;(emoji-backend)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;It is possible to merge/group multiple Company backends and use them as a single Capf using the &lt;del&gt;company--multi-backend-adapter&lt;/del&gt; function from Company. The adapter transforms multiple Company backends into a single Company backend, which can then be used as a Capf via &lt;del&gt;cape-company-to-capf&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;company) ;; Use the company-dabbrev and company-elisp backends together. (setq completion-at-point-functions (list (cape-company-to-capf (apply-partially #&#39;company--multi-backend-adapter &#39;(company-dabbrev company-elisp))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Super-Capf - Merging multiple Capfs&lt;/p&gt; &#xA;&lt;p&gt;/Throw multiple Capfs under the Cape and get a Super-Capf!/&lt;/p&gt; &#xA;&lt;p&gt;Cape supports merging multiple Capfs using the function &lt;del&gt;cape-super-capf&lt;/del&gt;. This feature is experimental and should only be used in special scenarios. &lt;em&gt;Don&#39;t use cape-super-capf if you are not 100% sure that you need it!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;del&gt;cape-super-capf&lt;/del&gt; is not needed if you want to use multiple Capfs which are tried one by one, e.g., it is perfectly possible to use &lt;del&gt;cape-file&lt;/del&gt; together with the lsp-mode Capf or other programming mode Capfs by adding &lt;del&gt;cape-file&lt;/del&gt; to the &lt;del&gt;completion-at-point-functions&lt;/del&gt; list. The file completion will be available in comments and string literals. &lt;del&gt;cape-super-capf&lt;/del&gt; is only needed if you want to combine multiple Capfs, such that the candidates from multiple sources appear /together/ in the completion list at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Completion table merging works only for tables which are sufficiently well-behaved and tables which do not define completion boundaries. &lt;del&gt;cape-super-capf&lt;/del&gt; has the same restrictions as &lt;del&gt;completion-table-merge&lt;/del&gt; and &lt;del&gt;completion-table-in-turn&lt;/del&gt;. As a simple rule of thumb, &lt;del&gt;cape-super-capf&lt;/del&gt; works only well for static completion functions like &lt;del&gt;cape-dabbrev&lt;/del&gt;, &lt;del&gt;cape-keyword&lt;/del&gt;, &lt;del&gt;cape-ispell&lt;/del&gt;, etc., but not for complex multi-step completions like &lt;del&gt;cape-file&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Merge the dabbrev, dict and keyword capfs, display candidates together. (setq-local completion-at-point-functions (list (cape-super-capf #&#39;cape-dabbrev #&#39;cape-dict #&#39;cape-keyword))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See also the aforementioned &lt;del&gt;company--multi-backend-adapter&lt;/del&gt; from Company, which allows you to merge multiple Company backends.&lt;/p&gt; &#xA;&lt;p&gt;** Capf-Buster - Cache busting&lt;/p&gt; &#xA;&lt;p&gt;/The Capf-Buster ensures that you always get a fresh set of candidates!/&lt;/p&gt; &#xA;&lt;p&gt;If a Capf caches the candidates for too long we can use a cache busting Capf-transformer. For example the Capf merging function &lt;del&gt;cape-super-capf&lt;/del&gt; creates a Capf, which caches the candidates for the whole lifetime of the Capf. Therefore you may want to combine a merged Capf with a cache buster under some circumstances. It is noteworthy that the &lt;del&gt;company-capf&lt;/del&gt; backend from Company refreshes the completion table frequently. With the &lt;del&gt;cape-capf-buster&lt;/del&gt; we can achieve a similarly refreshing strategy.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq-local completion-at-point-functions (list (cape-capf-buster #&#39;some-caching-capf))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Other Capf transformers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-interactive-capf&lt;/del&gt;: Create a Capf which can be called interactively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-accept-all&lt;/del&gt;, &lt;del&gt;cape-capf-accept-all&lt;/del&gt;: Create a Capf which accepts every input as valid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-silent&lt;/del&gt;, &lt;del&gt;cape-capf-silent&lt;/del&gt;: Wrap a chatty Capf and silence it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-purify&lt;/del&gt;, &lt;del&gt;cape-capf-purify&lt;/del&gt;: Purify a broken Capf and ensure that it does not modify the buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-noninterruptible&lt;/del&gt;, &lt;del&gt;cape-capf-noninterruptible:&lt;/del&gt; Protect a Capf which does not like to be interrupted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-case-fold&lt;/del&gt;, &lt;del&gt;cape-capf-case-fold&lt;/del&gt;: Create a Capf which is case insensitive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-properties&lt;/del&gt;, &lt;del&gt;cape-capf-properties&lt;/del&gt;: Add completion properties to a Capf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-predicate&lt;/del&gt;, &lt;del&gt;cape-capf-predicate&lt;/del&gt;: Add candidate predicate to a Capf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-prefix-length&lt;/del&gt;, &lt;del&gt;cape-capf-prefix-length&lt;/del&gt;: Enforce a minimal prefix length.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/cape.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>minad/consult</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/minad/consult</id>
    <link href="https://github.com/minad/consult" rel="alternate"></link>
    <summary type="html">&lt;p&gt;consult.el - Consulting completing-read&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: consult.el - Consulting completing-read #+author: Daniel Mendler #+language: en #+export_file_name: consult.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Consult: (consult). #+texinfo_dir_desc: Useful commands built on completing-read.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/consult.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/consult.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/consult.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/consult.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/consult&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/consult-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/consult&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/consult-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction :properties: :description: Why Consult? &lt;span&gt;🔚&lt;/span&gt; #+cindex: introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult provides practical commands based on the Emacs completion function [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][completing-read]]. Completion allows you to quickly select an item from a list of candidates. Consult offers in particular an advanced buffer switching command =consult-buffer= to switch between buffers and recently opened files. Furthermore Consult provides multiple search commands, an asynchronous =consult-grep= and =consult-ripgrep=, and the line-based search command =consult-line=. Some of the Consult commands are enhanced versions of built-in Emacs commands. For example the command =consult-imenu= presents a flat list of the Imenu with [[#live-previews][live preview]], [[#narrowing-and-grouping][grouping and narrowing]]. Please take a look at the [[#available-commands][full list of commands]].&lt;/p&gt; &#xA;&lt;p&gt;Consult is fully compatible with completion systems based on the standard Emacs =completing-read= API, notably the default completion system, [[https://github.com/minad/vertico][Vertico]], [[https://github.com/protesilaos/mct][Mct]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][Icomplete]] and [[https://github.com/raxod502/selectrum][Selectrum]].&lt;/p&gt; &#xA;&lt;p&gt;This package keeps the completion system specifics to a minimum. The ability of the Consult commands to work well with arbitrary completion systems is one of the main advantages of the package. Consult fits well into existing setups and it helps you to create a full completion environment out of small and independent components. Note that, if you use [[https://github.com/abo-abo/swiper#ivy][Ivy]] or [[https://github.com/emacs-helm/helm][Helm]], you probably don&#39;t need Consult, since both packages bring their own Consult-like functionality.&lt;/p&gt; &#xA;&lt;p&gt;You can combine the complementary packages [[https://github.com/minad/marginalia/][Marginalia]], [[https://github.com/oantolin/embark/][Embark]] and [[https://github.com/oantolin/orderless][Orderless]] with Consult. Marginalia enriches the completion display with annotations, e.g., documentation strings or file information. The versatile Embark package provides local actions, comparable to a context menu. These actions operate on the selected candidate in the minibuffer or at point in normal buffers. For example, when selecting from a list of files, Embark offers an action to delete the file. Additionally Embark offers a facility to collect completion candidates in a collect buffer. The section [[#embark-integration][Embark integration]] documents in greater detail how Consult and Embark work together.&lt;/p&gt; &#xA;&lt;p&gt;** Screenshots :noexport:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-grep [[https://github.com/minad/consult/blob/screenshots/consult-grep.gif?raw=true]] Fig. 1: Command =consult-git-grep=&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-imenu [[https://github.com/minad/consult/blob/screenshots/consult-imenu.png?raw=true]] Fig. 2: Command =consult-imenu=&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-line [[https://github.com/minad/consult/blob/screenshots/consult-line.png?raw=true]] Fig. 3: Command =consult-line=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available commands :properties: :custom_id: available-commands :description: Navigation, search, editing commands and more &lt;span&gt;🔚&lt;/span&gt; #+cindex: commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most Consult commands follow the meaningful naming scheme =consult-&#xA; &lt;thing&gt;&#xA;  =. Many commands implement a little known but convenient Emacs feature called &#34;future history&#34;, which guesses what input the user wants. At a command prompt type =M-n= and typically Consult will insert the symbol or thing at point into the input.&#xA; &lt;/thing&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP:&lt;/em&gt; If you have [[https://github.com/minad/marginalia][Marginalia]] annotators activated, type =M-x ^consult= to see all Consult commands with their abbreviated description. Alternatively, type =C-h a ^consult= to get an overview of all Consult variables and functions with their descriptions.&lt;/p&gt; &#xA;&lt;p&gt;** Virtual Buffers :properties: :description: Buffers, bookmarks and recent files &lt;span&gt;🔚&lt;/span&gt; #+cindex: virtual buffers&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-buffer #+findex: consult-buffer-other-window #+findex: consult-buffer-other-frame #+findex: consult-project-buffer #+findex: consult-recent-file #+findex: consult-bookmark&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-buffer= (=-other-window=, =-other-frame=): Enhanced version of =switch-to-buffer= with support for virtual buffers. Supports live preview of buffers and narrowing to the virtual buffer types. You can type =f SPC= in order to narrow to recent files. Press =SPC= to show ephemeral buffers. Supported narrowing keys: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;b Buffers&lt;/li&gt; &#xA;   &lt;li&gt;SPC Hidden buffers&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Modified buffers&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;f Files (Requires =recentf-mode=)&lt;/li&gt; &#xA;   &lt;li&gt;m Bookmarks&lt;/li&gt; &#xA;   &lt;li&gt;p Project&lt;/li&gt; &#xA;   &lt;li&gt;Custom [[#multiple-sources][other sources]] configured in =consult-buffer-sources=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=consult-project-buffer=: Variant of =consult-buffer= restricted to buffers and recent files of the current project. You can add custom sources to =consult-project-buffer-sources=. The command may prompt you for a project if you invoke it from outside a project.&lt;/li&gt; &#xA; &lt;li&gt;=consult-bookmark=: Select or create bookmark. To select bookmarks you might use the =consult-buffer= as an alternative, which can include a bookmark virtual buffer source. Note that =consult-bookmark= supports preview of bookmarks and narrowing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-recent-file=: Select from recent files with preview. You might prefer the powerful =consult-buffer= instead, which can include recent files as a virtual buffer source. The =recentf-mode= enables tracking of recent files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Editing :properties: :description: Commands useful for editing &lt;span&gt;🔚&lt;/span&gt; #+cindex: editing&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-yank-pop #+findex: consult-yank-from-kill-ring #+findex: consult-yank-replace #+findex: consult-kmacro&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-yank-from-kill-ring=: Enhanced version of =yank= to select an item from the =kill-ring=. The selected text previewed as overlay in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-yank-pop=: Enhanced version of =yank-pop= with DWIM-behavior, which either replaces the last =yank= by cycling through the =kill-ring=, or if there has not been a last =yank= consults the =kill-ring=. The selected text previewed as overlay in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-yank-replace=: Like =consult-yank-pop=, but always replaces the last =yank= with an item from the =kill-ring=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-kmacro=: Select macro from the macro ring and execute it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Register :properties: :description: Searching through registers and fast access &lt;span&gt;🔚&lt;/span&gt; #+cindex: register&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-register #+findex: consult-register-load #+findex: consult-register-store #+findex: consult-register-format #+findex: consult-register-window&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-register=: Select from list of registers. The command supports narrowing to register types and preview of marker positions. This command is useful to search the register contents. For quick access use the commands =consult-register-load=, =consult-register-store= or the built-in Emacs register commands.&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-format=: Set =register-preview-function= to this function for an enhanced register formatting. See the [[#use-package-example][example configuration]].&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-window=: Replace =register-preview= with this function for a better register window. See the [[#use-package-example][example configuration]].&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-load=: Utility command to quickly load a register. The command either jumps to the register value or inserts it.&lt;/li&gt; &#xA; &lt;li&gt;=consult-register-store=: Improved UI to store registers depending on the current context with an action menu. With an active region, store/append/prepend the contents, optionally deleting the region when a prefix argument is given. With a numeric prefix argument, store/add the number. Otherwise store point, frameset, window or kmacro. Usage examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=M-&#39; x=: If no region is active, store point in register =x=. If a region is active, store the region in register =x=.&lt;/li&gt; &#xA;   &lt;li&gt;=M-&#39; M-w x=: Store window configuration in register =x=.&lt;/li&gt; &#xA;   &lt;li&gt;=C-u 100 M-&#39; x=: Store number in register =x=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Navigation :properties: :description: Mark rings, outlines and imenu &lt;span&gt;🔚&lt;/span&gt; #+cindex: navigation&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-goto-line #+findex: consult-mark #+findex: consult-global-mark #+findex: consult-outline #+findex: consult-imenu #+findex: consult-imenu-multi&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-goto-line=: Jump to line number enhanced with live preview. This is a drop-in replacement for =goto-line=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-mark=: Jump to a marker in the =mark-ring=. Supports live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-global-mark=: Jump to a marker in the =global-mark-ring=. Supports live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-outline=: Jump to a heading of the outline. Supports narrowing to a heading level, live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-imenu=: Jump to imenu item in the current buffer. Supports live preview, recursive editing and narrowing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-imenu-multi=: Jump to imenu item in project buffers, with the same major mode as the current buffer. Supports live preview, recursive editing and narrowing. This feature has been inspired by [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Search :properties: :description: Line search, grep and file search &lt;span&gt;🔚&lt;/span&gt; #+cindex: search&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-line #+findex: consult-line-multi #+findex: consult-multi-occur #+findex: consult-keep-lines #+findex: consult-focus-lines&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-line=: Enter search string and select from matching lines. Supports live preview and recursive editing. The symbol at point and the recent Isearch string are added to the &#34;future history&#34; and can be accessed by pressing =M-n=. When =consult-line= is bound to the =isearch-mode-map= and is invoked during a running Isearch, it will use the current Isearch string.&lt;/li&gt; &#xA; &lt;li&gt;=consult-line-multi=: Search across multiple buffers. By default search across project buffers. If invoked with a prefix argument search across all buffers. Behaves like =consult-line=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-multi-occur=: Replacement for =multi-occur= which uses =completing-read-multiple=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-keep-lines=: Replacement for =keep/flush-lines= which uses the current completion style for filtering the buffer. The function updates the buffer while typing. In particular =consult-keep-lines= can narrow down an exported Embark collect buffer further, relying on the same completion filtering as &lt;del&gt;completing-read&lt;/del&gt;. If the input begins with the negation operator, i.e., &lt;del&gt;! SPC&lt;/del&gt;, the filter matches the complement. If a region is active, the region restricts the filtering.&lt;/li&gt; &#xA; &lt;li&gt;=consult-focus-lines=: Temporarily hide lines by filtering them using the current completion style. Call with =C-u= prefix argument in order to show the hidden lines again. If the input begins with the negation operator, i.e., &lt;del&gt;! SPC&lt;/del&gt;, the filter matches the complement. In contrast to =consult-keep-lines= this function does not edit the buffer. If a region is active, the region restricts the filtering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Grep and Find :properties: :description: Searching through the filesystem &lt;span&gt;🔚&lt;/span&gt; #+cindex: grep #+cindex: find #+cindex: locate&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-grep #+findex: consult-ripgrep #+findex: consult-git-grep #+findex: consult-find #+findex: consult-locate&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-grep=, =consult-ripgrep=, =consult-git-grep=: Search for regular expression in files. Consult invokes Grep asynchronously, while you enter the search term. After at least =consult-async-min-input= characters, the search gets started. Consult splits the input string into two parts, if the first character is a punctuation character, like =#=. For example =#regexps#filter-string=, is split at the second =#=. The string =regexps= is passed to Grep. Note that Consult transforms Emacs regular expressions to expressions understand by the search program. Always use Emacs regular expressions at the prompt. If you enter multiple regular expressions separated by space only lines matching all regular expressions are shown. In order to match space literally, escape the space with a backslash. The =filter-string= is passed to the /fast/ Emacs filtering to further narrow down the list of matches. This is particularly useful if you are using an advanced completion style like orderless. =consult-grep= supports preview. If the =consult-project-function= returns non-nil, =consult-grep= searches the current project directory. Otherwise the =default-directory= is searched. If =consult-grep= is invoked with prefix argument =C-u M-s g=, you can specify the directory manually.&lt;/li&gt; &#xA; &lt;li&gt;=consult-find=, =consult-locate=: Find file by matching the path against a regexp. Like for =consult-grep,= either the project root or the current directory is the root directory for the search. The input string is treated similarly to =consult-grep=, where the first part is passed to find, and the second part is used for Emacs filtering.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Compilation :properties: :description: Jumping to references and compilation errors &lt;span&gt;🔚&lt;/span&gt; #+cindex: compilation errors&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-compile-error #+findex: consult-flymake #+findex: consult-xref&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-compile-error=: Jump to a compilation error. Supports live preview narrowing and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-flymake=: Jump to flymake diagnostic. Supports live preview and recursive editing. The command supports narrowing. Press =e SPC=, =w SPC=, =n SPC= to only show errors, warnings and notes respectively.&lt;/li&gt; &#xA; &lt;li&gt;=consult-xref=: Integration with xref. This function can be set as =xref-show-xrefs-function= and =xref-show-definitions-function=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Histories :properties: :description: Navigating histories &lt;span&gt;🔚&lt;/span&gt; #+cindex: history&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-complex-command #+findex: consult-history #+findex: consult-isearch-history&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-complex-command=: Select a command from the =command-history=. This command is a =completing-read= version of =repeat-complex-command= and is also a replacement for the =command-history= command from chistory.el.&lt;/li&gt; &#xA; &lt;li&gt;=consult-history=: Insert a string from the current buffer history, for example the Eshell or Comint history. You can also invoke this command from the minibuffer. In that case =consult-history= uses the history stored in the =minibuffer-history-variable=. If you prefer =completion-at-point=, take a look at =cape-history= from the [[https://github.com/minad/cape][Cape]] package.&lt;/li&gt; &#xA; &lt;li&gt;=consult-isearch-history=: During an Isearch session, this command picks a search string from history and continues the search with the newly selected string. Outside of Isearch, the command allows you to pick a string from the history and starts a new Isearch. =consult-isearch-history= acts as a drop-in replacement for =isearch-edit-string=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Modes :properties: :description: Toggling minor modes and executing commands &lt;span&gt;🔚&lt;/span&gt; #+cindex: minor mode #+cindex: major mode&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-minor-mode-menu #+findex: consult-mode-command&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-minor-mode-menu=: Enable/disable minor mode. Supports narrowing to on/off/local/global modes by pressing =i/o/l/g SPC= respectively.&lt;/li&gt; &#xA; &lt;li&gt;=consult-mode-command=: Run a command from the currently active minor or major modes. Supports narrowing to local-minor/global-minor/major mode via the keys =l/g/m=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Org Mode :properties: :description: Org-specific commands &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-org-heading #+findex: consult-org-agenda&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-org-heading=: Similar to =consult-outline=, for Org buffers. Supports narrowing by heading level, priority and TODO state, as well as live preview and recursive editing.&lt;/li&gt; &#xA; &lt;li&gt;=consult-org-agenda=: Jump to an agenda heading. Supports narrowing by heading level, priority and TODO state, as well as live preview and recursive editing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Miscellaneous :properties: :description: Various other useful commands &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+findex: consult-apropos #+findex: consult-file-externally #+findex: consult-completion-in-region #+findex: consult-theme #+findex: consult-man #+findex: consult-preview-at-point #+findex: consult-preview-at-point-mode&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-apropos=: Replacement for =apropos= with completion. As a better alternative, you can run =embark-export= from commands like =M-x= or =describe-symbol=.&lt;/li&gt; &#xA; &lt;li&gt;=consult-man=: Find Unix man page, via Unix =apropos= or =man -k=. =consult-man= opens the selected man page using the Emacs =man= command.&lt;/li&gt; &#xA; &lt;li&gt;=consult-file-externally=: Select a file and open it externally, e.g.&amp;nbsp;using =xdg-open= on Linux.&lt;/li&gt; &#xA; &lt;li&gt;=consult-theme=: Select a theme and disable all currently enabled themes. Supports live preview of the theme while scrolling through the candidates.&lt;/li&gt; &#xA; &lt;li&gt;=consult-preview-at-point= and =consult-preview-at-point-mode=: Command and minor mode which previews the candidate at point in the =&lt;em&gt;Completions&lt;/em&gt;= buffer. This mode is relevant if you use [[https://git.sr.ht/~protesilaos/mct][Mct]] or the default =&lt;em&gt;Completions&lt;/em&gt;= UI.&lt;/li&gt; &#xA; &lt;li&gt;=consult-completion-in-region=: In case you don&#39;t use [[https://github.com/minad/corfu][Corfu]] as your in-buffer completion UI, this function can be set as =completion-in-region-function=. Then your minibuffer completion UI (e.g., Vertico or Icomplete) will be used for =completion-at-point=. Note that Selectrum provides its own variant of =consult-completion-in-region=. If you use Mct, you may want to try =mct-region-mode= instead. #+begin_src emacs-lisp ;; Use &lt;code&gt;consult-completion-in-region&#39; if Vertico is enabled. ;; Otherwise use the default &lt;/code&gt;completion--in-region&#39; function. (setq completion-in-region-function (lambda (&amp;amp;rest args) (apply (if vertico-mode #&#39;consult-completion-in-region #&#39;completion--in-region) args))) #+end_src Instead of =consult-completion-in-region=, you may prefer to see the completions directly in the buffer as a small popup. In that case, I recommend either the [[https://github.com/minad/corfu][Corfu]] or the [[https://github.com/company-mode/company-mode][Company]] package. There is a technical limitation of =consult-completion-in-region= in combination with Lsp-mode or Eglot. The Lsp server relies on the input at point, in order to generate refined candidate strings. Since the completion is transferred from the original buffer to the minibuffer, the server does not receive the updated input. LSP completion works with Corfu or Company though, which perform the completion directly in the original buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Special features :properties: :description: Enhancements over built-in `completing-read&#39; &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult enhances =completing-read= with live previews of candidates, additional narrowing capabilities to candidate groups and asynchronously generated candidate lists. The internal =consult--read= function, which is used by most Consult commands, is a thin wrapper around =completing-read= and provides the special functionality. In order to support multiple candidate sources there exists the high-level function =consult--multi=. The architecture of Consult allows it to work with different completion systems in the backend, while still offering advanced features.&lt;/p&gt; &#xA;&lt;p&gt;** Live previews :properties: :description: Preview the currently selected candidate :custom_id: live-previews &lt;span&gt;🔚&lt;/span&gt; #+cindex: preview&lt;/p&gt; &#xA;&lt;p&gt;Some Consult commands support live previews. For example when you scroll through the items of =consult-line=, the buffer will scroll to the corresponding position. It is possible to jump back and forth between the minibuffer and the buffer to perform recursive editing while the search is ongoing.&lt;/p&gt; &#xA;&lt;p&gt;Consult enables previews by default. You can disable them by adjusting the =consult-preview-key= variable. Furthermore it is possible to specify keybindings which trigger the preview manually as shown in the [[#use-package-example][example configuration]]. The default setting of =consult-preview-key= is =any= which means that Consult triggers the preview /immediately/ on any key press when the selected candidate changes. You can configure each command individually with its own =:preview-key=. The following settings are possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic and immediate =&#39;any=&lt;/li&gt; &#xA; &lt;li&gt;Automatic and delayed =(list :debounce 0.5 &#39;any)=&lt;/li&gt; &#xA; &lt;li&gt;Manual and immediate =(kbd &#34;M-.&#34;)=&lt;/li&gt; &#xA; &lt;li&gt;Manual and delayed =(list :debounce 0.5 (kbd &#34;M-.&#34;))=&lt;/li&gt; &#xA; &lt;li&gt;Disabled =nil=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A safe recommendation is to leave automatic immediate previews enabled in general and disable the automatic preview only for commands, where the preview may be expensive due to file loading.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-recent-file consult-xref consult--source-bookmark consult--source-recent-file consult--source-project-recent-file ;; :preview-key &#39;(:debounce 0.2 any) ;; Option 1: Delay preview :preview-key (kbd &#34;M-.&#34;)) ;; Option 2: Manual preview #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In this case one may wonder what the difference is between using an Embark action on the current candidate in comparison to a manually triggered preview. The main difference is that the files opened by manual preview are closed again after the completion session. Furthermore during preview some functionality is disabled to improve the performance, see for example the customization variables =consult-preview-allowed-hooks= and =consult-preview-variables=. Files larger than =consult-preview-raw-size= are previewed literally without syntax highlighting and without changing the major mode. Delaying the preview is also useful for =consult-theme=, since the theme preview is slow. The delay results in a smoother UI experience.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Preview on any key press, but delay 0.5s (consult-customize consult-theme :preview-key &#39;(:debounce 0.5 any)) ;; Preview immediately on M-., on up/down after 0.5s, on any other key after 1s (consult-customize consult-theme :preview-key (list (kbd &#34;M-.&#34;) :debounce 0.5 (kbd &#34;&#xA; &lt;up&gt;&#xA;  &#34;) (kbd &#34;&#xA;  &lt;down&gt;&#xA;   &#34;) :debounce 1 &#39;any)) #+end_src&#xA;  &lt;/down&gt;&#xA; &lt;/up&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Narrowing and grouping :properties: :description: Restricting the completion to a candidate group :custom_id: narrowing-and-grouping &lt;span&gt;🔚&lt;/span&gt; #+cindex: narrowing&lt;/p&gt; &#xA;&lt;p&gt;Consult has special support for candidate groups. If the completion UI supports the grouping functionality, the UI separates the groups with thin lines and shows group titles. Grouping is useful if the list of candidates consists of candidates of multiple types or candidates from [[#multiple-sources][multiple sources]], like the =consult-buffer= command, which shows both buffers and recently opened files. Note that you can disable the group titles by setting the =:group= property of the corresponding command to nil using the =consult-customize= macro.&lt;/p&gt; &#xA;&lt;p&gt;By entering a narrowing prefix or by pressing a narrowing key it is possible to restrict the completion candidates to a certain candidate group. When you use the =consult-buffer= command, you can enter the prefix =b SPC= to restrict list of candidates to buffers only. If you press =DEL= afterwards, the full candidate list will be shown again. Furthermore a narrowing prefix key and a widening key can be configured which can be pressed to achieve the same effect, see the configuration variables =consult-narrow-key= and =consult-widen-key=.&lt;/p&gt; &#xA;&lt;p&gt;After pressing =consult-narrow-key=, the possible narrowing keys can be shown by pressing =C-h=. When pressing =C-h= after some prefix key, the =prefix-help-command= is invoked, which shows the keybinding help window by default. As a more compact alternative, there is the =consult-narrow-help= command which can be bound to a key, for example =?= or =C-h= in the =consult-narrow-map=, as shown in the [[#use-package-example][example configuration]]. If [[https://github.com/justbur/emacs-which-key][which-key]] is installed, the narrowing keys are automatically shown in the which-key window after pressing the =consult-narrow-key=.&lt;/p&gt; &#xA;&lt;p&gt;** Asynchronous search :properties: :description: Filtering asynchronously generated candidate lists &lt;span&gt;🔚&lt;/span&gt; #+cindex: asynchronous search&lt;/p&gt; &#xA;&lt;p&gt;Consult has support for asynchronous generation of candidate lists. This feature is used for search commands like =consult-grep=, where the list of matches is generated dynamically while the user is typing a regular expression. The grep process is executed in the background. When modifying the regular expression, the background process is terminated and a new process is started with the modified regular expression.&lt;/p&gt; &#xA;&lt;p&gt;The matches, which have been found, can then be narrowed using the installed Emacs completion-style. This can be powerful if you are using for example the =orderless= completion style.&lt;/p&gt; &#xA;&lt;p&gt;This two-level filtering is possible by splitting the input string. Part of the input string is treated as input to grep and part of the input is used for filtering. There are multiple splitting styles available, configured in &lt;del&gt;consult-async-split-styles-alist&lt;/del&gt;: =nil=, =comma=, =semicolon= and =perl=. The default splitting style is configured with the variable &lt;del&gt;consult-async-split-style&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the =comma= and =semicolon= splitting styles, the first word before the comma or semicolon is passed to grep, the remaining string is used for filtering. The =nil= splitting style does not perform any splitting, the whole input is passed to grep.&lt;/p&gt; &#xA;&lt;p&gt;The =perl= splitting style splits the input string at a punctuation character, using a similar syntax as Perl regular expressions.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=#defun=: Search for &#34;defun&#34; using grep.&lt;/li&gt; &#xA; &lt;li&gt;=#consult embark=: Search for both &#34;consult&#34; and &#34;embark&#34; using grep in any order.&lt;/li&gt; &#xA; &lt;li&gt;=#first.*second=: Search for &#34;first&#34; followed by &#34;second&#34; using grep.&lt;/li&gt; &#xA; &lt;li&gt;=#(consult|embark)=: Search for &#34;consult&#34; or &#34;embark&#34; using grep. Note the usage of Emacs-style regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;=#defun#consult=: Search for &#34;defun&#34; using grep, filter with the word &#34;consult&#34;.&lt;/li&gt; &#xA; &lt;li&gt;=/defun/consult=: It is also possible to use other punctuation characters.&lt;/li&gt; &#xA; &lt;li&gt;=#to#=: Force searching for &#34;to&#34; using grep, since the grep pattern must be longer than =consult-async-min-input= characters by default.&lt;/li&gt; &#xA; &lt;li&gt;=#defun -- --invert-match#=: Pass argument =--invert-match= to grep.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Asynchronous processes like =find= and =grep= create an error log buffer =_&lt;em&gt;consult-async&lt;/em&gt;= (note the leading space), which is useful for troubleshooting. The prompt has a small indicator showing the process status:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:= the usual prompt colon, before input is provided.&lt;/li&gt; &#xA; &lt;li&gt;=*= with warning face, the process is running.&lt;/li&gt; &#xA; &lt;li&gt;=:= with success face, success, process exited with an error code of zero.&lt;/li&gt; &#xA; &lt;li&gt;=!= with error face, failure, process exited with a nonzero error code.&lt;/li&gt; &#xA; &lt;li&gt;=;= with error face, interrupted, for example if more input is provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Multiple sources :properties: :description: Combining candidates from different sources :custom_id: multiple-sources &lt;span&gt;🔚&lt;/span&gt; #+cindex: multiple sources&lt;/p&gt; &#xA;&lt;p&gt;Multiple synchronous candidate sources can be combined. This feature is used by the =consult-buffer= command to present buffer-like candidates in a single menu for quick access. By default =consult-buffer= includes buffers, bookmarks, recent files and project-specific buffers and files. It is possible to configure the list of sources via the =consult-buffer-sources= variable. Arbitrary custom sources can be defined.&lt;/p&gt; &#xA;&lt;p&gt;As an example, the bookmark source is defined as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar consult--source-bookmark `(:name &#34;Bookmark&#34; :narrow ?m :category bookmark :face consult-bookmark :history bookmark-history :items ,#&#39;bookmark-all-names :action ,#&#39;consult--bookmark-action)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Required source fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:category= Completion category.&lt;/li&gt; &#xA; &lt;li&gt;=:items= List of strings to select from or function returning list of strings. A list of cons cells is not supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional source fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:name= Name of the source, used for narrowing, group titles and annotations.&lt;/li&gt; &#xA; &lt;li&gt;=:narrow= Narrowing character or =(character . string)= pair.&lt;/li&gt; &#xA; &lt;li&gt;=:preview-key= Preview key or keys which trigger preview.&lt;/li&gt; &#xA; &lt;li&gt;=:enabled= Function which must return t if the source is enabled.&lt;/li&gt; &#xA; &lt;li&gt;=:hidden= When t candidates of this source are hidden by default.&lt;/li&gt; &#xA; &lt;li&gt;=:face= Face used for highlighting the candidates.&lt;/li&gt; &#xA; &lt;li&gt;=:annotate= Annotation function called for each candidate, returns string.&lt;/li&gt; &#xA; &lt;li&gt;=:history= Name of history variable to add selected candidate.&lt;/li&gt; &#xA; &lt;li&gt;=:default= Must be t if the first item of the source is the default value.&lt;/li&gt; &#xA; &lt;li&gt;=:action= Function called with the selected candidate.&lt;/li&gt; &#xA; &lt;li&gt;=:new= Function called with new candidate name, only if =:require-match= is nil.&lt;/li&gt; &#xA; &lt;li&gt;=:state= State constructor for the source, must return the state function.&lt;/li&gt; &#xA; &lt;li&gt;Other source fields can be added specifically to the use case.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The =:state= and =:action= fields of the sources deserve a longer explanation. The =:action= function takes a single argument and is only called after selection with the selected candidate, if the selection has not been aborted. This functionality is provided for convenience and easy definition of sources. The =:state= field is more general. The =:state= function is a constructor function without arguments, which can perform some setup necessary for the preview. It must return a closure which takes an ACTION and a CANDIDATE argument. See the docstring of =consult--with-preview= for more details about the ACTION argument.&lt;/p&gt; &#xA;&lt;p&gt;By default, =consult-buffer= previews buffers, bookmarks and files. Loading recent files, bookmarks or views can result in expensive operations. However it is possible to configure a manual preview as follows.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult--source-bookmark consult--source-recent-file consult--source-project-recent-file :preview-key (kbd &#34;M-.&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Sources can be added directly to the =consult-buffer-source= list for convenience. For example views can be added to the list of virtual buffers from a library like &lt;a href=&#34;https://github.com/minad/bookmark-view/&#34;&gt;https://github.com/minad/bookmark-view/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Configure new bookmark-view source (add-to-list &#39;consult-buffer-sources (list :name &#34;View&#34; :narrow ?v :category &#39;bookmark :face &#39;font-lock-keyword-face :history &#39;bookmark-view-history :action #&#39;consult--bookmark-action :items #&#39;bookmark-view-names) &#39;append)&lt;/p&gt; &#xA;&lt;p&gt;;; Modify bookmark source, such that views are hidden (setq consult--source-bookmark (plist-put consult--source-bookmark :items (lambda () (bookmark-maybe-load-default-file) (mapcar #&#39;car (seq-remove (lambda (x) (eq #&#39;bookmark-view-handler (alist-get &#39;handler (cdr x)))) bookmark-alist))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Another useful source lists all Org buffers and lets you create new ones. One can create similar sources for other major modes, e.g., for Eshell.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar org-source (list :name &#34;Org Buffer&#34; :category &#39;buffer :narrow ?o :face &#39;consult-buffer :history &#39;buffer-name-history :state #&#39;consult--buffer-state :new (lambda (name) (with-current-buffer (get-buffer-create name) (insert &#34;#+title: &#34; name &#34;\n\n&#34;) (org-mode) (consult--buffer-action (current-buffer)))) :items (lambda () (mapcar #&#39;buffer-name (seq-filter (lambda (x) (eq (buffer-local-value &#39;major-mode x) &#39;org-mode)) (buffer-list))))))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;consult-buffer-sources &#39;org-source &#39;append) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the documentation of =consult-buffer= and of the internal =consult--multi= API. The =consult--multi= function can be used to create new multi-source commands, but is part of the internal API as of now, since some details may still change.&lt;/p&gt; &#xA;&lt;p&gt;** Embark integration :properties: :description: Actions, Grep/Occur-buffer export :custom_id: embark-integration &lt;span&gt;🔚&lt;/span&gt; #+cindex: embark&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Install the =embark-consult= package from MELPA, which provides Consult-specific Embark actions and the Occur buffer export.&lt;/p&gt; &#xA;&lt;p&gt;Embark is a versatile package which offers context dependent actions, comparable to a context menu. See the [[https://github.com/oantolin/embark][Embark manual]] for an extensive description of its capabilities.&lt;/p&gt; &#xA;&lt;p&gt;Actions are commands which can operate on the currently selected candidate (or target in Embark terminology). When completing files, for example the =delete-file= command is offered. With Embark you can execute arbitrary commands on the currently selected candidate via =M-x=.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore Embark provides the =embark-collect= command, which collects candidates and presents them in an Embark collect buffer, where further actions can be applied to them. A related feature is the =embark-export= command, which exports candidate lists to a buffer of a special type. For example in the case of file completion, a Dired buffer is opened.&lt;/p&gt; &#xA;&lt;p&gt;In the context of Consult, particularly exciting is the possibility to export the matching lines from =consult-line=, =consult-outline=, =consult-mark= and =consult-global-mark=. The matching lines are exported to an Occur buffer where they can be edited via the =occur-edit-mode= (press key =e=). Similarly, Embark supports exporting the matches found by =consult-grep=, =consult-ripgrep= and =consult-git-grep= to a Grep buffer, where the matches across files can be edited, if the [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] package is installed. These three workflows are symmetric.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-line= -&amp;gt; =embark-export= to =occur-mode= buffer -&amp;gt; =occur-edit-mode= for editing of matches in buffer.&lt;/li&gt; &#xA; &lt;li&gt;=consult-grep= -&amp;gt; =embark-export= to =grep-mode= buffer -&amp;gt; =wgrep= for editing of all matches.&lt;/li&gt; &#xA; &lt;li&gt;=consult-find= -&amp;gt; =embark-export= to =dired-mode= buffer -&amp;gt; =wdired-change-to-wdired-mode= for editing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration :properties: :description: Example configuration and customization variables &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult can be installed from [[http://elpa.gnu.org/packages/consult.html][ELPA]] or [[https://melpa.org/#/consult][MELPA]] via the Emacs built-in package manager. Alternatively it can be directly installed from the development repository via other non-standard package managers.&lt;/p&gt; &#xA;&lt;p&gt;There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where additional configuration examples can be contributed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT:&lt;/em&gt; It is strongly recommended that you enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]] in your configuration. Consult relies on lambdas and lexical closures. For this reason many Consult-related snippets require lexical binding.&lt;/p&gt; &#xA;&lt;p&gt;** Use-package example :properties: :description: Configuration example based on use-package :custom_id: use-package-example &lt;span&gt;🔚&lt;/span&gt; #+cindex: use-package&lt;/p&gt; &#xA;&lt;p&gt;The Consult package only provides commands and does not add any keybindings or modes. Therefore the package is non-intrusive but requires a little setup effort. In order to use the Consult commands, it is advised to add keybindings for commands which are accessed often. Rarely used commands can be invoked via =M-x=. Feel free to only bind the commands you consider useful to your workflow. The configuration shown here relies on the =use-package= macro, which is a convenient tool to manage package configurations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where you can contribute additional configuration examples.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Example configuration for Consult (use-package consult ;; Replace bindings. Lazily loaded due by `use-package&#39;. :bind (;; C-c bindings (mode-specific-map) (&#34;C-c h&#34; . consult-history) (&#34;C-c m&#34; . consult-mode-command) (&#34;C-c k&#34; . consult-kmacro) ;; C-x bindings (ctl-x-map) (&#34;C-x M-:&#34; . consult-complex-command) ;; orig. repeat-complex-command (&#34;C-x b&#34; . consult-buffer) ;; orig. switch-to-buffer (&#34;C-x 4 b&#34; . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window (&#34;C-x 5 b&#34; . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame (&#34;C-x r b&#34; . consult-bookmark) ;; orig. bookmark-jump (&#34;C-x p b&#34; . consult-project-buffer) ;; orig. project-switch-to-buffer ;; Custom M-# bindings for fast register access (&#34;M-#&#34; . consult-register-load) (&#34;M-&#39;&#34; . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated) (&#34;C-M-#&#34; . consult-register) ;; Other custom bindings (&#34;M-y&#34; . consult-yank-pop) ;; orig. yank-pop (&#34;&#xA; &lt;help&gt;&#xA;   a&#34; . consult-apropos) ;; orig. apropos-command ;; M-g bindings (goto-map) (&#34;M-g e&#34; . consult-compile-error) (&#34;M-g f&#34; . consult-flymake) ;; Alternative: consult-flycheck (&#34;M-g g&#34; . consult-goto-line) ;; orig. goto-line (&#34;M-g M-g&#34; . consult-goto-line) ;; orig. goto-line (&#34;M-g o&#34; . consult-outline) ;; Alternative: consult-org-heading (&#34;M-g m&#34; . consult-mark) (&#34;M-g k&#34; . consult-global-mark) (&#34;M-g i&#34; . consult-imenu) (&#34;M-g I&#34; . consult-imenu-multi) ;; M-s bindings (search-map) (&#34;M-s d&#34; . consult-find) (&#34;M-s D&#34; . consult-locate) (&#34;M-s g&#34; . consult-grep) (&#34;M-s G&#34; . consult-git-grep) (&#34;M-s r&#34; . consult-ripgrep) (&#34;M-s l&#34; . consult-line) (&#34;M-s L&#34; . consult-line-multi) (&#34;M-s m&#34; . consult-multi-occur) (&#34;M-s k&#34; . consult-keep-lines) (&#34;M-s u&#34; . consult-focus-lines) ;; Isearch integration (&#34;M-s e&#34; . consult-isearch-history) :map isearch-mode-map (&#34;M-e&#34; . consult-isearch-history) ;; orig. isearch-edit-string (&#34;M-s e&#34; . consult-isearch-history) ;; orig. isearch-edit-string (&#34;M-s l&#34; . consult-line) ;; needed by consult-line to detect isearch (&#34;M-s L&#34; . consult-line-multi) ;; needed by consult-line to detect isearch ;; Minibuffer history :map minibuffer-local-map (&#34;M-s&#34; . consult-history) ;; orig. next-matching-history-element (&#34;M-r&#34; . consult-history)) ;; orig. previous-matching-history-element&#xA; &lt;/help&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Enable automatic preview at point in the *Completions* buffer. This is&#xA;;; relevant when you use the default completion UI.&#xA;:hook (completion-list-mode . consult-preview-at-point-mode)&#xA;&#xA;;; The :init configuration is always executed (Not lazy)&#xA;:init&#xA;&#xA;;; Optionally configure the register formatting. This improves the register&#xA;;; preview for `consult-register&#39;, `consult-register-load&#39;,&#xA;;; `consult-register-store&#39; and the Emacs built-ins.&#xA;(setq register-preview-delay 0.5&#xA;      register-preview-function #&#39;consult-register-format)&#xA;&#xA;;; Optionally tweak the register preview window.&#xA;;; This adds thin lines, sorting and hides the mode line of the window.&#xA;(advice-add #&#39;register-preview :override #&#39;consult-register-window)&#xA;&#xA;;; Use Consult to select xref locations with preview&#xA;(setq xref-show-xrefs-function #&#39;consult-xref&#xA;      xref-show-definitions-function #&#39;consult-xref)&#xA;&#xA;;; Configure other variables and modes in the :config section,&#xA;;; after lazily loading the package.&#xA;:config&#xA;&#xA;;; Optionally configure preview. The default value&#xA;;; is &#39;any, such that any key triggers the preview.&#xA;;; (setq consult-preview-key &#39;any)&#xA;;; (setq consult-preview-key (kbd &#34;M-.&#34;))&#xA;;; (setq consult-preview-key (list (kbd &#34;&amp;lt;S-down&amp;gt;&#34;) (kbd &#34;&amp;lt;S-up&amp;gt;&#34;)))&#xA;;; For some commands and buffer sources it is useful to configure the&#xA;;; :preview-key on a per-command basis using the `consult-customize&#39; macro.&#xA;(consult-customize&#xA; consult-theme&#xA; :preview-key &#39;(:debounce 0.2 any)&#xA; consult-ripgrep consult-git-grep consult-grep&#xA; consult-bookmark consult-recent-file consult-xref&#xA; consult--source-bookmark consult--source-recent-file&#xA; consult--source-project-recent-file&#xA; :preview-key (kbd &#34;M-.&#34;))&#xA;&#xA;;; Optionally configure the narrowing key.&#xA;;; Both &amp;lt; and C-+ work reasonably well.&#xA;(setq consult-narrow-key &#34;&amp;lt;&#34;) ;; (kbd &#34;C-+&#34;)&#xA;&#xA;;; Optionally make narrowing help available in the minibuffer.&#xA;;; You may want to use `embark-prefix-help-command&#39; or which-key instead.&#xA;;; (define-key consult-narrow-map (vconcat consult-narrow-key &#34;?&#34;) #&#39;consult-narrow-help)&#xA;&#xA;;; By default `consult-project-function&#39; uses `project-root&#39; from project.el.&#xA;;; Optionally configure a different project root function.&#xA;;; There are multiple reasonable alternatives to chose from.&#xA;;;;; 1. project.el (the default)&#xA;;; (setq consult-project-function #&#39;consult--default-project--function)&#xA;;;;; 2. projectile.el (projectile-project-root)&#xA;;; (autoload &#39;projectile-project-root &#34;projectile&#34;)&#xA;;; (setq consult-project-function (lambda (_) (projectile-project-root)))&#xA;;;;; 3. vc.el (vc-root-dir)&#xA;;; (setq consult-project-function (lambda (_) (vc-root-dir)))&#xA;;;;; 4. locate-dominating-file&#xA;;; (setq consult-project-function (lambda (_) (locate-dominating-file &#34;.&#34; &#34;.git&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Custom variables :properties: :description: Short description of all customization settings &lt;span&gt;🔚&lt;/span&gt; #+cindex: customization&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP:&lt;/em&gt; If you have [[https://github.com/minad/marginalia][Marginalia]] installed, type =M-x customize-variable RET ^consult= to see all Consult-specific customizable variables with their current values and abbreviated description. Alternatively, type =C-h a ^consult= to get an overview of all Consult variables and functions with their descriptions.&lt;/p&gt; &#xA;&lt;p&gt;| Variable | Description | |----------------------------------+-------------------------------------------------------| | consult-after-jump-hook | Functions to call after jumping to a location | | consult-async-input-debounce | Input debounce for asynchronous commands | | consult-async-input-throttle | Input throttle for asynchronous commands | | consult-async-min-input | Minimum numbers of letters needed for async process | | consult-async-refresh-delay | Refresh delay for asynchronous commands | | consult-async-split-style | Splitting style used for async commands | | consult-async-split-styles-alist | Available splitting styles used for async commands | | consult-bookmark-narrow | Narrowing configuration for =consult-bookmark= | | consult-buffer-filter | Filter for =consult-buffer= | | consult-buffer-sources | List of virtual buffer sources | | consult-find-args | Command line arguments for find | | consult-fontify-max-size | Buffers larger than this limit are not fontified | | consult-fontify-preserve | Preserve fontification for line-based commands. | | consult-git-grep-args | Command line arguments for git-grep | | consult-goto-line-numbers | Show line numbers for =consult-goto-line= | | consult-grep-max-columns | Maximal number of columns of the matching lines | | consult-grep-args | Command line arguments for grep | | consult-imenu-config | Mode-specific configuration for =consult-imenu= | | consult-line-numbers-widen | Show absolute line numbers when narrowing is active. | | consult-line-point-placement | Placement of the point used by =consult-line= | | consult-line-start-from-top | Start the =consult-line= search from the top | | consult-locate-args | Command line arguments for locate | | consult-man-args | Command line arguments for man | | consult-mode-command-filter | Filter for =consult-mode-command= | | consult-mode-histories | Mode-specific history variables | | consult-narrow-key | Narrowing prefix key during completion | | consult-preview-key | Keys which triggers preview | | consult-preview-allowed-hooks | List of =find-file= hooks to enable during preview | | consult-preview-max-count | Maximum number of files to keep open during preview | | consult-preview-max-size | Files larger than this size are not previewed | | consult-preview-raw-size | Files larger than this size are previewed in raw form | | consult-preview-variables | Alist of variables to bind during preview | | consult-project-buffer-sources | List of virtual project buffer sources | | consult-project-function | Function which returns current project root | | consult-register-prefix | Prefix string for register keys during completion | | consult-ripgrep-args | Command line arguments for ripgrep | | consult-themes | List of themes to be presented for selection | | consult-widen-key | Widening key during completion |&lt;/p&gt; &#xA;&lt;p&gt;** Fine-tuning of individual commands :properties: :alt_title: Fine-tuning :description: Fine-grained configuration for special requirements &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Consult supports fine-grained customization of individual commands. This configuration feature exists for experienced users with special requirements. There is the [[https://github.com/minad/consult/wiki][Consult wiki]], where we collect further configuration examples.&lt;/p&gt; &#xA;&lt;p&gt;Commands and buffer sources allow flexible, individual customization by using the =consult-customize= macro. You can override any option passed to the internal =consult--read= API. The [[https://github.com/minad/consult/wiki][Consult wiki]] already contains a numerous useful configuration examples. Note that since =consult--read= is part of the internal API, options could be removed, replaced or renamed in future versions of the package.&lt;/p&gt; &#xA;&lt;p&gt;Useful options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=:prompt= set the prompt string&lt;/li&gt; &#xA; &lt;li&gt;=:preview-key= set the preview key, default is =consult-preview-key=&lt;/li&gt; &#xA; &lt;li&gt;=:initial= set the initial input&lt;/li&gt; &#xA; &lt;li&gt;=:default= set the default value&lt;/li&gt; &#xA; &lt;li&gt;=:history= set the history variable symbol&lt;/li&gt; &#xA; &lt;li&gt;=:add-history= add items to the future history, for example symbol at point&lt;/li&gt; &#xA; &lt;li&gt;=:sort= enable or disable sorting&lt;/li&gt; &#xA; &lt;li&gt;=:group= set to nil to disable candidate grouping and titles.&lt;/li&gt; &#xA; &lt;li&gt;=:inherit-input-method= set to non-nil to inherit the input method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize ;; Disable preview for &lt;code&gt;consult-theme&#39; completely. consult-theme :preview-key nil ;; Set preview for &lt;/code&gt;consult-buffer&#39; to key &lt;code&gt;M-.&#39; consult-buffer :preview-key (kbd &#34;M-.&#34;) ;; For &lt;/code&gt;consult-line&#39; change the prompt and specify multiple preview ;; keybindings. Note that you should bind &#xA; &lt;s-up&gt;&#xA;   and &#xA;  &lt;s-down&gt;&#xA;    in the ;; &#xA;   &lt;code&gt;minibuffer-local-completion-map&#39; or &lt;/code&gt;vertico-map&#39; to the commands which ;; select the previous or next candidate. consult-line :prompt &#34;Search: &#34; :preview-key (list (kbd &#34;&#xA;   &lt;s-down&gt;&#xA;    &#34;) (kbd &#34;&#xA;    &lt;s-up&gt;&#xA;     &#34;))) #+end_src&#xA;    &lt;/s-up&gt;&#xA;   &lt;/s-down&gt;&#xA;  &lt;/s-down&gt;&#xA; &lt;/s-up&gt;&lt;/p&gt; &#xA;&lt;p&gt;The configuration values are evaluated at runtime, just before the completion session is started. Therefore you can use for example =thing-at-point= to adjust the initial input or the future hitory.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (consult-customize consult-line :add-history (seq-some #&#39;thing-at-point &#39;(region symbol)))&lt;/p&gt; &#xA;&lt;p&gt;(defalias &#39;consult-line-thing-at-point &#39;consult-line)&lt;/p&gt; &#xA;&lt;p&gt;(consult-customize consult-line-thing-at-point :initial (thing-at-point &#39;symbol)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Generally it is possible to modify commands for your individual needs by the following techniques:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use =consult-customize= in order to change the command or source settings.&lt;/li&gt; &#xA; &lt;li&gt;Create your own wrapper function which passes modified arguments to the Consult functions.&lt;/li&gt; &#xA; &lt;li&gt;Create your own buffer [[#multiple-sources][multi sources]] for =consult-buffer=.&lt;/li&gt; &#xA; &lt;li&gt;Create advices to modify some internal behavior.&lt;/li&gt; &#xA; &lt;li&gt;Write or propose a patch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recommended packages :properties: :description: Related packages recommended for installation &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I use and recommend this combination of packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;consult: This package&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico][vertico]]: Fast and minimal vertical completion system&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][marginalia]]: Annotations for the completion candidates&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][embark and embark-consult]]: Action commands, which can act on the completion candidates&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][orderless]]: Completion style which offers flexible candidate filtering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There exist many other fine completion UIs beside Vertico, which are supported by Consult. Give them a try and find out which interaction model fits best for you!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The builtin completion UI, which pops up the =&lt;em&gt;Completions&lt;/em&gt;= buffer.&lt;/li&gt; &#xA; &lt;li&gt;[[https://git.sr.ht/~protesilaos/mct][mct by Protesilaos Stavrou]]: Minibuffer and Completions in Tandem, which builds on the default completion UI.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/raxod502/selectrum][selectrum by Radon Rosborough]]: Alternative vertical completion system.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/icomplete-vertical][icomplete-vertical by Omar Antolín Camarena]]: Vertical completion system based on Icomplete. Icomplete-vertical is only needed for Emacs 27, built-in on Emacs 28.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can integrated Consult with special programs or with other packages in the wider Emacs ecosystem. You may want to install some of theses packages depending on your preferences and requirements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/yadex205/consult-ag][consult-ag]]: Support for the [[https://github.com/ggreer/the_silver_searcher][Silver Searcher]] in the style of =consult-grep=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-company][consult-company]]: Completion at point using the [[https://github.com/company-mode/company-mode][Company]] backends.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink/consult-dir][consult-dir]]: Directory jumper using Consult multi sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-eglot][consult-eglot]]: Integration with Eglot (LSP client).&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/consult-flycheck][consult-flycheck]]: Additional Flycheck integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]]: Additional Flyspell integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rcj/consult-ls-git][consult-ls-git]]: List files from git via Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/gagbo/consult-lsp][consult-lsp]]: Integration with Lsp-mode (LSP client).&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/consult-notmuch][consult-notmuch]]: Access the [[https://notmuchmail.org/][Notmuch]] email system using Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jgru/consult-org-roam][consult-org-roam]]: Integration with [[https://github.com/org-roam/org-roam][Org-roam]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler/consult-project-extra/][consult-project-extra]]: Additional project.el extras and buffer sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon/consult-projectile/][consult-projectile]]: Additional [[https://github.com/bbatsov/projectile][Projectile]] integration and buffer sources.&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/consult-recoll][consult-recoll]]: Access the [[https://www.lesbonscomptes.com/recoll/][Recoll]] desktop full-text search using Consult.&lt;/li&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/espotify][consult-spotify]]: Access the Spotify API and control your local music player.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale/consult-yasnippet][consult-yasnippet]]: Integration with Yasnippet.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/affe][affe]]: Asynchronous Fuzzy Finder for Emacs based on Consult.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not directly related to Consult, but maybe still of interest are the following packages. These packages should work well with Consult, follow a similar spirit or offer functionality based on &lt;del&gt;completing-read&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu][corfu]]: Completion systems for =completion-at-point= using small popups (Alternative to [[https://github.com/company-mode/company-mode][Company]]).&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/cape][cape]]: Completion At Point Extensions, which can be used with =consult-completion-in-region= and [[https://github.com/minad/corfu][Corfu]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/bookmark-view][bookmark-view]]: Store window configuration as bookmarks, possible integration with =consult-buffer=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bdarcus/citar][citar]]: Versatile package for citation insertion and bibliography management.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/astoff/devdocs.el][devdocs]]: Emacs viewer for [[https://devdocs.io/][DevDocs]] with a convenient completion interface.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/d12frosted/flyspell-correct][flyspell-correct]]: Apply spelling corrections by selecting via =completing-read=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]: Editing of grep buffers, use together with =consult-grep= via =embark-export=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]: Icons for the completion UI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that all packages are independent and can be exchanged with alternative components, since there exist no hard dependencies. Furthermore it is possible to get started with only default completion and Consult and add more components later to the mix. For example you can omit Marginalia if you don&#39;t need annotations. I highly recommend the Embark package, but in order to familarize yourself with the other components, you can first start without it - or you could use with Embark right away and add the other components later on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug reports :properties: :description: How to create reproducible bug reports &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you find a bug or suspect that there is a problem with Consult, please carry out the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Update all the relevant packages to the newest version&lt;/em&gt;. This includes Consult, Vertico or other completion UIs, Marginalia, Embark and Orderless.&lt;/li&gt; &#xA; &lt;li&gt;Either use the default completion UI or ensure that exactly one of =vertico-mode=, =mct-mode=, =selectrum-mode=, or =icomplete-mode= is enabled. The unsupported modes =ivy-mode=, =helm-mode= and =ido-ubiquitous-mode= must be disabled.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the =completion-styles= variable is properly configured. Try to set =completion-styles= to a list including =substring= or =orderless=.&lt;/li&gt; &#xA; &lt;li&gt;Try to reproduce the issue by starting a bare bone Emacs instance with =emacs -Q= on the command line. Execute the following minimal code snippets in the scratch buffer. This way we can exclude side effects due to configuration settings. If other packages are relevant to reproduce the issue, include them in the minimal configuration snippet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Minimal setup with Vertico for =emacs -Q=: #+begin_src emacs-lisp (package-initialize) (require &#39;consult) (require &#39;vertico) (vertico-mode) (setq completion-styles &#39;(substring basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Minimal setup with the default completion system for =emacs -Q=: #+begin_src emacs-lisp (package-initialize) (require &#39;consult) (setq completion-styles &#39;(substring basic)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Please provide the necessary important information with your bug report:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The minimal configuration snippet used to reproduce the issue.&lt;/li&gt; &#xA; &lt;li&gt;Your completion UI (Default completion, Vertico, Mct, Selectrum or Icomplete).&lt;/li&gt; &#xA; &lt;li&gt;A stack trace in case the bug triggers an exception.&lt;/li&gt; &#xA; &lt;li&gt;Your Emacs version, since bugs may be fixed or introduced in newer versions.&lt;/li&gt; &#xA; &lt;li&gt;Your operating system, since Emacs behavior varies between Linux, Mac and Windows.&lt;/li&gt; &#xA; &lt;li&gt;The package manager, e.g., straight.el or package.el, used to install the Emacs packages, in order to exclude update issues. Did you install Consult as part of the Doom or Spacemacs Emacs distributions?&lt;/li&gt; &#xA; &lt;li&gt;Do you use Evil or other packages which apply deep changes? Consult does not provide Evil integration out of the box, but there is some support in [[https://github.com/emacs-evil/evil-collection][evil-collection]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When evaluating Consult-related code snippets you should enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]]. Consult often relies on lambdas and lexical closures.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions :properties: :description: Feature requests and pull requests &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consult is a community effort, please participate in the discussions. Contributions are welcome, but you may want to discuss potential contributions first. Since this package is part of [[http://elpa.gnu.org/packages/consult.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt; &#xA;&lt;p&gt;If you have a proposal, take a look at the [[https://github.com/consult/issues][Consult issue tracker]] and the [[https://github.com/minad/consult/issues/6][Consult wishlist]]. There have been many prior feature discussions. Please search through the issue tracker, maybe your issue or feature request has already been discussed. You can contribute to the [[https://github.com/minad/consult/wiki][Consult wiki]], in case you want to share small configuration or command snippets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgments :properties: :description: Contributors and Sources of Inspiration &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You probably guessed from the name that this package took inspiration from [[https://github.com/abo-abo/swiper#counsel][Counsel]] by Oleh Krehel. Some of the Consult commands originated in the Counsel package or the [[https://github.com/raxod502/selectrum/wiki/Useful-Commands][Selectrum wiki]]. The commands have been rewritten and greatly enhanced in comparison to the original versions.&lt;/p&gt; &#xA;&lt;p&gt;Code contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/][Omar Antolín Camarena]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/s-kostyaev/][Sergey Kostyaev]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/okamsn/][okamsn]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tomfitzhenry/][Tom Fitzhenry]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jakanakaevangeli][jakanakaevangeli]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://hg.serna.eu][Iñigo Serna]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/aspiers/][Adam Spiers]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/omar-polo][Omar Polo]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/astoff][Augusto Stoffel]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/noctuid][Fox Kiester]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tecosaur][Tecosaur]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohamed-abdelnour][Mohamed Abdelnour]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/thisirs][Sylvain Rousseau]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][J.D. Smith]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advice and useful discussions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/clemera/][Clemens Radermacher]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/][Omar Antolín Camarena]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://protesilaos.com][Protesilaos Stavrou]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/purcell/][Steve Purcell]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/alphapapa/][Adam Porter]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/manuel-uberti/][Manuel Uberti]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tomfitzhenry/][Tom Fitzhenry]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/hmelman/][Howard Melman]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/monnier/][Stefan Monnier]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/dgutov/][Dmitry Gutov]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/iyefrat][Itai Y. Efrat]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bdarcus][Bruce d&#39;Arcus]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][J.D. Smith]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler][Enrique Kessler Martínez]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Authors of supplementary =consult-*= packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://codeberg.org/jao/][Jose A Ortega Ruiz]] ([[https://codeberg.org/jao/consult-notmuch][consult-notmuch]], [[https://codeberg.org/jao/consult-recoll][consult-recoll]], [[https://codeberg.org/jao/espotify][consult-spotify]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/gagbo/][Gerry Agbobada]] ([[https://github.com/gagbo/consult-lsp][consult-lsp]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink][Karthik Chikmagalur]] ([[https://github.com/karthink/consult-dir][consult-dir]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/mohkale][Mohsin Kaleem]] ([[https://github.com/mohkale/consult-company][consult-company]], [[https://github.com/mohkale/consult-eglot][consult-eglot]], [[https://github.com/mohkale/consult-yasnippet][consult-yasnippet]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://gitlab.com/OlMon][Marco Pawłowski]] ([[https://gitlab.com/OlMon/consult-flyspell][consult-flyspell]], [[https://gitlab.com/OlMon/consult-projectile][consult-projectile]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Qkessler][Enrique Kessler Martínez]] ([[https://github.com/Qkessler/consult-project-extra][consult-project-extra]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jgru][Jan Gru]] ([[https://github.com/jgru/consult-org-roam][consult-org-roam]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/yadex205][Kanon Kakuno]] ([[https://github.com/yadex205/consult-ag][consult-ag]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rcj][Robin Joy]] ([[https://github.com/rcj/consult-ls-git][consult-ls-git]])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html: &amp;lt;!--&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Indices :properties: :description: Indices of concepts and functions &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Function index :properties: :description: List of all Consult commands :index: fn &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Concept index :properties: :description: List of all Consult-specific concepts :index: cp &lt;span&gt;🔚&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+html: --&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/borg</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/emacscollective/borg</id>
    <link href="https://github.com/emacscollective/borg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Assimilate Emacs packages as Git submodules&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Assimilate Emacs packages as Git submodules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Borg is a bare-bones package manager for Emacs packages. It provides only a few essential features and should be combined with other tools such as [[https://github.com/magit/magit][Magit]], [[https://github.com/emacscollective/epkg][epkg]], [[https://github.com/jwiegley/use-package][use-package]], and [[https://github.com/tarsius/auto-compile][auto-compile]].&lt;/p&gt; &#xA;&lt;p&gt;Borg assimilates packages into the =&lt;del&gt;/.emacs.d= repository as Git submodules. An assimilated package is called a drone and a borg-based =&lt;/del&gt;/.emacs.d= repository is called a collective.&lt;/p&gt; &#xA;&lt;p&gt;/For more information see the [[https://emacsair.me/2016/05/17/assimilate-emacs-packages-as-git-submodules][announcement]] and the [[https://emacsmirror.net/manual/borg][manual]]./&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>melpa/melpa</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/melpa/melpa</id>
    <link href="https://github.com/melpa/melpa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recipes and build machinery for the biggest Emacs package repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MELPA&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/melpa/melpa/actions&#34;&gt;&lt;img src=&#34;https://github.com/melpa/melpa/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MELPA is a growing collection of &lt;code&gt;package.el&lt;/code&gt;-compatible Emacs Lisp packages built automatically on our server from the upstream source code using simple recipes. (Think of it as a server-side version of &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, or even &lt;a href=&#34;https://github.com/Homebrew/homebrew&#34;&gt;Homebrew&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Packages are updated at intervals throughout the day.&lt;/p&gt; &#xA;&lt;p&gt;To browse available packages, check out the &lt;a href=&#34;https://melpa.org/&#34;&gt;archive index page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adding packages is as simple as submitting a new recipe as a pull request; read on for details.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#build-scripts&#34;&gt;Build Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#mirrors&#34;&gt;Mirrors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the MELPA repository, you&#39;ll need an Emacs with &lt;code&gt;package.el&lt;/code&gt;, ie. Emacs 24.1 or greater. To test TLS support you can visit a HTTPS URL, for example with &lt;code&gt;M-x eww RET https://wikipedia.org RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enable installation of packages from MELPA by adding an entry to &lt;code&gt;package-archives&lt;/code&gt; after &lt;code&gt;(require &#39;package)&lt;/code&gt; and before the call to &lt;code&gt;package-initialize&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`&#xA;;; and `package-pinned-packages`. Most users will not need or want to do this.&#xA;;;(add-to-list &#39;package-archives &#39;(&#34;melpa-stable&#34; . &#34;https://stable.melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just use &lt;code&gt;M-x package-list-packages&lt;/code&gt; to browse and install packages from MELPA and elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Note that you&#39;ll need to run &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; or &lt;code&gt;M-x package-list-packages&lt;/code&gt; to ensure that Emacs has fetched the MELPA package list before you can install packages with &lt;code&gt;M-x package-install&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;h3&gt;MELPA Stable&lt;/h3&gt; &#xA;&lt;p&gt;Packages in MELPA are built directly from the latest package source code in the upstream repositories, but we also build and publish packages corresponding to the latest tagged code in those repositories, where version tags exist. These packages are published in a separate package archive called &lt;a href=&#34;https://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt;. Most users should prefer MELPA over MELPA Stable.&lt;/p&gt; &#xA;&lt;p&gt;Some notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you leave the original MELPA server in your &lt;code&gt;package-archives&lt;/code&gt; then by default you will get the &lt;em&gt;development&lt;/em&gt; versions of packages and not the stable ones, because the development versions are higher.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your Emacs has the variables &lt;code&gt;package-pinned-packages&lt;/code&gt; (available in 24.4 and later) and/or &lt;code&gt;package-archive-priorities&lt;/code&gt;, you can customize or modify those variables as needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use the &lt;a href=&#34;https://github.com/milkypostman/package-filter&#34;&gt;package-filter.el&lt;/a&gt; package which we provide.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will probably want to remove all packages and then reinstall them. Any packages you already have installed from MELPA will never get &#34;updated&#34; to the stable version because of the way version numbering is handled.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the MELPA maintainers do not use MELPA Stable themselves, and do not particularly recommend its use.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/CONTRIBUTING.org&#34;&gt;CONTRIBUTING.org&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Recipe Format&lt;/h2&gt; &#xA;&lt;p&gt;Packages are specified by files in the &lt;code&gt;recipes&lt;/code&gt; directory. You can contribute a new package by adding a new file under &lt;code&gt;recipes&lt;/code&gt; using the following form (&lt;code&gt;[...]&lt;/code&gt; denotes optional or conditional values),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&amp;lt;package-name&amp;gt;&#xA; :fetcher [git|github|gitlab|hg]&#xA; [:url &#34;&amp;lt;repo url&amp;gt;&#34;]&#xA; [:repo &#34;github-or-gitlab-user/repo-name&#34;]&#xA; [:commit &#34;commit&#34;]&#xA; [:branch &#34;branch&#34;]&#xA; [:version-regexp &#34;&amp;lt;regexp&amp;gt;&#34;]&#xA; [:files (&#34;&amp;lt;file1&amp;gt;&#34; ...)]&#xA; [:old-names (&amp;lt;old-name&amp;gt; ...)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-name&lt;/code&gt; a lisp symbol that has the same name as the package being specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:fetcher&lt;/code&gt; specifies the type of repository that &lt;code&gt;:url&lt;/code&gt; or &lt;code&gt;:repo&lt;/code&gt; points to. MELPA supports &lt;a href=&#34;http://git-scm.com/&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://gitlab.com/&#34;&gt;&lt;code&gt;gitlab&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;&lt;code&gt;hg&lt;/code&gt;&lt;/a&gt; (Mercurial).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:url&lt;/code&gt; specifies the URL of the version control repository. &lt;em&gt;required for the &lt;code&gt;git&lt;/code&gt;, and &lt;code&gt;hg&lt;/code&gt; fetchers.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt; specifies the github or gitlab repository and is of the form &lt;code&gt;user/repo-name&lt;/code&gt;. &lt;em&gt;required for the &lt;code&gt;github&lt;/code&gt; and &lt;code&gt;gitlab&lt;/code&gt; fetchers&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:commit&lt;/code&gt; specifies the commit of the git repo to checkout. The value will be passed to &lt;code&gt;git reset&lt;/code&gt; in a repo where &lt;code&gt;upstream&lt;/code&gt; is the original repository. Can therefore be either a SHA, if pointing at a specific commit, or a full ref prefixed with &#34;origin/&#34;. Only used by the &lt;code&gt;git&lt;/code&gt;-based fetchers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt; specifies the branch of the git repo to use. This is like &lt;code&gt;:commit&lt;/code&gt;, but it adds the &#34;origin/&#34; prefix automatically. This must be specified when using a branch other than the default branch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:version-regexp&lt;/code&gt; is a regular expression for extracting a version-string from the repository tags. The default matches typical version tags such as &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;R16&lt;/code&gt; or &lt;code&gt;v4.3.5&lt;/code&gt;, so you should not override it unless necessary. For an unusual tag like &#34;OTP-18.1.5&#34;, we might add &lt;code&gt;:version-regexp &#34;[^0-9]*\\(.*\\)&#34;&lt;/code&gt; to strip the &#34;OTP-&#34; prefix. The captured portion of the regexp must be parseable by Emacs&#39; &lt;code&gt;version-to-list&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt; optional property specifying the elisp and info files used to build the package. Please do not override this if the default value (below) is adequate, which it should usually be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;&#39;(&#34;*.el&#34; &#34;lisp/*.el&#34;&#xA;  &#34;dir&#34; &#34;*.info&#34; &#34;*.texi&#34; &#34;*.texinfo&#34;&#xA;  &#34;doc/dir&#34; &#34;doc/*.info&#34; &#34;doc/*.texi&#34; &#34;doc/*.texinfo&#34;&#xA;  &#34;docs/dir&#34; &#34;docs/*.info&#34; &#34;docs/*.texi&#34; &#34;docs/*.texinfo&#34;&#xA;  (:exclude&#xA;   &#34;.dir-locals.el&#34; &#34;lisp/.dir-locals.el&#34;&#xA;   &#34;test.el&#34; &#34;tests.el&#34; &#34;*-test.el&#34; &#34;*-tests.el&#34;&#xA;   &#34;lisp/test.el&#34; &#34;lisp/tests.el&#34; &#34;lisp/*-test.el&#34; &#34;lisp/*-tests.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that elisp in subdirectories is never included by default, so you might find it convenient to keep your package&#39;s elisp in the root of your repository, and separate auxiliary files such as tests into subdirectories to keep packaging simple.&lt;/p&gt; &lt;p&gt;The elements of the &lt;code&gt;:files&lt;/code&gt; list are glob-expanded and processed from left to right to make a list of paths that will be copied into the root of the new package, as if by using &lt;code&gt;cp -R [SRCPATHS] DEST&lt;/code&gt;. This means a directory like &#34;foo/bar&#34; would become &#34;bar&#34; in the new package. To specify a destination subdirectory, use a list element of the form &lt;code&gt;(SUBDIR SRCPATH ...)&lt;/code&gt;. Likewise, to filter out paths expanded earlier in the list, use &lt;code&gt;(:exclude SRCPATH ...)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If your package requires some additional files, but is otherwise fine with the defaults, it&#39;s recommended to use the special element &lt;code&gt;:defaults&lt;/code&gt; as the very first element of the &lt;code&gt;:files&lt;/code&gt; list, which causes the default value shown above to be prepended to the specified file list. For example &lt;code&gt;:files (:defaults &#34;snippets&#34;)&lt;/code&gt; would cause the &#34;snippets&#34; subdir to be copied in addition to the defaults.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:old-names&lt;/code&gt; specifies former names of the package, if any. The value is a list of symbols.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example: Single File Repository&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nonsequitur/smex&#34;&gt;smex&lt;/a&gt; is a repository that contains two files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;README.markdown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smex.el&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since there is only one &lt;code&gt;.el&lt;/code&gt; file, this package only needs the &lt;code&gt;:repo&lt;/code&gt; and &lt;code&gt;:fetcher&lt;/code&gt; specified,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(smex :repo &#34;nonsequitur/smex&#34; :fetcher github)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Packages in one Repository&lt;/h3&gt; &#xA;&lt;p&gt;Assume we have a repository containing three libraries &lt;code&gt;mypackage.el&lt;/code&gt;, &lt;code&gt;helm-mypackage.el&lt;/code&gt;, and &lt;code&gt;persp-mypackage.el&lt;/code&gt;. The latter two libraries are optional and users who don&#39;t want to use the packages &lt;code&gt;helm&lt;/code&gt; and/or &lt;code&gt;perspective&lt;/code&gt; should not be forced to install them just so they can install &lt;code&gt;mypackage&lt;/code&gt;. These libraries should therefore be distributed as separate packages.&lt;/p&gt; &#xA;&lt;p&gt;The three packages have to be declared in three separate files &lt;code&gt;recipes/mypackage&lt;/code&gt;, &lt;code&gt;recipes/helm-mypackage&lt;/code&gt;, and &lt;code&gt;recipes/persp-mypackage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(mypackage :repo &#34;someuser/mypackage&#34;&#xA;           :fetcher github&#xA;           :files (&#34;mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(helm-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                :fetcher github&#xA;                :files (&#34;helm-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(persp-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                 :fetcher github&#xA;                 :files (&#34;persp-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Files in Multiple Directories&lt;/h3&gt; &#xA;&lt;p&gt;There are special cases where creation of the package comes from many different sub-directories in the repository and the destination sub-directories need to be explicitly set.&lt;/p&gt; &#xA;&lt;p&gt;Consider the &lt;code&gt;flymake-perlcritic&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(flymake-perlcritic :repo &#34;illusori/emacs-flymake-perlcritic&#34;&#xA;                    :fetcher github&#xA;                    :files (&#34;*.el&#34; (&#34;bin&#34; &#34;bin/flymake_perlcritic&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will result in a package structure of,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flymake-perlcritic-YYYMMDD&#xA;|-- bin&#xA;|   `-- flymake_perlcritic&#xA;|-- flymake-perlcritic-pkg.el&#xA;`-- flymake-perlcritic.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that specifying an entry in &lt;code&gt;:files&lt;/code&gt; that is a list takes the first element to be the destination directory. These can be embedded further, such as the following---hypothetical---entry for &lt;code&gt;:files&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&#34;*.el&#34; (&#34;snippets&#34;&#xA;         (&#34;html-mode&#34; &#34;snippets/html-mode/*&#34;)&#xA;         (&#34;python-mode&#34; &#34;snippets/python-mode/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which would result in a package with &lt;code&gt;*.el&lt;/code&gt; in something like,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package-YYYYMMDD&#xA;|-- snippets&#xA;|   |-- html-mode&#xA;|   |   |-- div&#xA;|   |   `-- html&#xA;|   `-- python-mode&#xA;|       |-- for&#xA;|       `-- main&#xA;`-- package.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But a better solution, given that we probably want to copy the &lt;em&gt;entire&lt;/em&gt; &lt;code&gt;snippets&lt;/code&gt; directory to the root of the package, we could just specify that directory. Consider the &lt;code&gt;pony-mode&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(pony-mode&#xA; :repo &#34;davidmiller/pony-mode&#34;&#xA; :fetcher github&#xA; :files (&#34;src/*.el&#34; &#34;snippets&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which generates the package,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pony-mode-YYYYMMDD&#xA;|-- pony-mode-pkg.el&#xA;|-- pony-mode.el&#xA;|-- pony-tpl.el&#xA;`-- snippets&#xA;    |-- html-mode&#xA;    |   |-- bl&#xA;    |   |-- ex&#xA;    |   |-- for&#xA;    |   |-- if&#xA;    |   |-- loa&#xA;    |   |-- sup&#xA;    |   |-- testc&#xA;    |   `-- {{&#xA;    `-- python-mode&#xA;        |-- auth-view&#xA;        |-- bn&#xA;        |-- model&#xA;        |-- modelform&#xA;        |-- render-to&#xA;        |-- testc&#xA;        `-- view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Scripts&lt;/h2&gt; &#xA;&lt;p&gt;Building MELPA is all based around using the &lt;code&gt;Makefile&lt;/code&gt; included in the root repository directory. Described below are the actions that accepted by the &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all&lt;/code&gt; -- Builds all packages under the &lt;code&gt;recipes/&lt;/code&gt; directory and compiles the &lt;code&gt;index.html&lt;/code&gt; file for the &lt;a href=&#34;https://melpa.org&#34;&gt;melpa&lt;/a&gt; website.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes/&amp;lt;NAME&amp;gt;&lt;/code&gt; -- Build individual recipe &lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;. Built packages are put in the &lt;code&gt;packages/&lt;/code&gt; folder with version corresponding to the date of the latest commit that modified at least one of the files specified by the recipe; given according to the &lt;code&gt;%Y%m%d&lt;/code&gt; format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt; -- build all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;archive.json&lt;/code&gt; -- construct the &lt;code&gt;archive.json&lt;/code&gt; file that will contain a JSON object of all compiled packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes.json&lt;/code&gt; -- construct the &lt;code&gt;recipes.json&lt;/code&gt; file containing a JSON object of all packages available for building.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt; -- clean everything.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;html&lt;/code&gt; -- build &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-working&lt;/code&gt; -- remove all repositories that have been checked out to the &lt;code&gt;working/&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-packages&lt;/code&gt; -- remove all compiled packages from the &lt;code&gt;packages&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-json&lt;/code&gt; -- remove all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that these scripts require an Emacs with &lt;code&gt;package.el&lt;/code&gt; installed, such as Emacs 24. If you have an older version of Emacs, you can get a suitable &lt;code&gt;package.el&lt;/code&gt; &lt;a href=&#34;https://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;All repository code is contained in the file &lt;code&gt;package-build/package-build.el&lt;/code&gt;. That code is maintained in a &lt;a href=&#34;https://github.com/melpa/package-build&#34;&gt;separate repository&lt;/a&gt;: the version in the MELPA repository is imported using &lt;code&gt;git subtree&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-all)&lt;/code&gt; : build packages for all recipes in the directory specified by &lt;code&gt;package-build-recipes-dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-archive NAME)&lt;/code&gt; : interactive elisp function to build a single archive. NAME is a symbol for the package to be built. Packages are staged in the directory specified by &lt;code&gt;package-build-working-dir&lt;/code&gt; and built packages are placed in the directory specified by &lt;code&gt;package-build-archive-dir&lt;/code&gt;. Packages are versioned based on the most recent commit date to package files based on commits to upstream package repository. For multi-file packages, the file &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt; is automatically generated and contains &lt;em&gt;description&lt;/em&gt;, &lt;em&gt;version&lt;/em&gt;, and &lt;em&gt;requires&lt;/em&gt; information determined by searching &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt;, &lt;code&gt;&amp;lt;NAME&amp;gt;.el&lt;/code&gt;, and &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el.in&lt;/code&gt;, if they exist in the repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-working-dir&lt;/code&gt; : Staging area containing package repositories and package directories being built.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-archive-dir&lt;/code&gt; : Location to store &lt;code&gt;archive-contents&lt;/code&gt; and any built packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-recipes-dir&lt;/code&gt; : Directory containing MELPA compatible recipes. See &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt; section for more details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Packages end up in the &lt;code&gt;packages/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-archive-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;Repositories are checked out to the &lt;code&gt;working/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-working-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h2&gt;Mirrors&lt;/h2&gt; &#xA;&lt;p&gt;Official mirrors are available (with many thanks to mirrorservice.org) so that if melpa.org is down, packages can still be installed. The following are the HTTP/HTTPS URLs to use in &lt;code&gt;package-archives&lt;/code&gt; for MELPA and MELPA Stable respectively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only the packages are mirrored, not the web site front-end itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;We are NOT responsible for the contents of any UNOFFICIAL mirror of our packages.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;MELPA&lt;/em&gt; is &lt;em&gt;Milkypostman&#39;s ELPA&lt;/em&gt; or &lt;em&gt;Milkypostman&#39;s Experimental Lisp Package Archive&lt;/em&gt; if you&#39;re not into the whole brevity thing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-dashboard/emacs-dashboard</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/emacs-dashboard/emacs-dashboard</id>
    <link href="https://github.com/emacs-dashboard/emacs-dashboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extensible emacs dashboard&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPL%20v3-blue.svg]] [[https://melpa.org/#/dashboard][https://melpa.org/packages/dashboard-badge.svg]] [[https://stable.melpa.org/#/dashboard][https://stable.melpa.org/packages/dashboard-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs Dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/emacs-dashboard/emacs-dashboard/actions/workflows/ci.yml][https://github.com/emacs-dashboard/emacs-dashboard/workflows/CI/badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;An extensible emacs startup screen showing you what&#39;s most important.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Features&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Displays an awesome Emacs banner!&lt;/li&gt; &#xA;   &lt;li&gt;Recent files&lt;/li&gt; &#xA;   &lt;li&gt;Bookmarks list&lt;/li&gt; &#xA;   &lt;li&gt;Recent projects list (Depends on &lt;code&gt;projectile&lt;/code&gt; or &lt;code&gt;project.el&lt;/code&gt; package)&lt;/li&gt; &#xA;   &lt;li&gt;Org mode agenda&lt;/li&gt; &#xA;   &lt;li&gt;Register list&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Screenshot&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[./etc/screenshot.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependencies You will need the following packages which are all available on Melpa:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;(optional) page-break-lines - [[https://github.com/purcell/page-break-lines]]&lt;/li&gt; &#xA; &lt;li&gt;(optional) projectile - [[https://github.com/bbatsov/projectile]]&lt;/li&gt; &#xA; &lt;li&gt;(optional) all-the-icons - [[https://github.com/domtronn/all-the-icons.el]]&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell M-x package-install RET dashboard #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (require &#39;dashboard) (dashboard-setup-startup-hook) ;; Or if you use use-package (use-package dashboard :ensure t :config (dashboard-setup-startup-hook)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;By default, this will show three lists, recent files and bookmarks and org-agenda items.&lt;/p&gt; &#xA;&lt;p&gt;The widget “projects”, which shows a list of recent projects, is not enabled by default since it depends on packages that might not be available. To activate the widget, set the variable =dashboard-projects-backend= to either =&#39;projectile= (projectile, available from melpa) or =&#39;project-el= (project.el, available from GNU elpa), then add an entry like =(projects . 5)= to the variable =dashboard-items=.&lt;/p&gt; &#xA;&lt;p&gt;** Emacs Daemon&lt;/p&gt; &#xA;&lt;p&gt;In addition to the above, configure =initial-buffer-choice= to show Dashboard in frames created with =emacsclient -c= as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (setq initial-buffer-choice (lambda () (get-buffer &#34;&lt;em&gt;dashboard&lt;/em&gt;&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To update the banner or banner title&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp ;; Set the title (setq dashboard-banner-logo-title &#34;Welcome to Emacs Dashboard&#34;) ;; Set the banner (setq dashboard-startup-banner [VALUE]) ;; Value can be ;; &#39;official which displays the official emacs logo ;; &#39;logo which displays an alternative emacs logo ;; 1, 2 or 3 which displays one of the text banners ;; &#34;path/to/your/image.gif&#34;, &#34;path/to/your/image.png&#34; or &#34;path/to/your/text.txt&#34; which displays whatever gif/image/text you would prefer&lt;/p&gt; &#xA;&lt;p&gt;;; Content is not centered by default. To center, set (setq dashboard-center-content t)&lt;/p&gt; &#xA;&lt;p&gt;;; To disable shortcut &#34;jump&#34; indicators for each section, set (setq dashboard-show-shortcuts nil) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To customize which widgets are displayed, you can use the following snippet #+BEGIN_SRC elisp (setq dashboard-items &#39;((recents . 5) (bookmarks . 5) (projects . 5) (agenda . 5) (registers . 5))) #+END_SRC This will add the recent files, bookmarks, projects, org-agenda and registers widgets to your dashboard each displaying 5 items.&lt;/p&gt; &#xA;&lt;p&gt;To add your own custom widget is pretty easy, define your widget&#39;s callback function and add it to &lt;code&gt;dashboard-items&lt;/code&gt; as such: #+BEGIN_SRC elisp (defun dashboard-insert-custom (list-size) (insert &#34;Custom text&#34;)) (add-to-list &#39;dashboard-item-generators &#39;(custom . dashboard-insert-custom)) (add-to-list &#39;dashboard-items &#39;(custom) t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To modify the widget heading name: #+BEGIN_SRC elisp (setq dashboard-item-names &#39;((&#34;Recent Files:&#34; . &#34;Recently opened files:&#34;) (&#34;Agenda for today:&#34; . &#34;Today&#39;s agenda:&#34;) (&#34;Agenda for the coming week:&#34; . &#34;Agenda:&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To add icons to the widget headings and their items: #+BEGIN_SRC elisp (setq dashboard-set-heading-icons t) (setq dashboard-set-file-icons t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To modify heading icons with another icon from all-the-icons octicons: #+BEGIN_SRC elisp (dashboard-modify-heading-icons &#39;((recents . &#34;file-text&#34;) (bookmarks . &#34;book&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To show navigator below the banner: #+BEGIN_SRC emacs-lisp (setq dashboard-set-navigator t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To customize the buttons of the navigator like this: #+BEGIN_SRC emacs-lisp ;; Format: &#34;(icon title help action face prefix suffix)&#34; (setq dashboard-navigator-buttons `(;; line1 ((,(all-the-icons-octicon &#34;mark-github&#34; :height 1.1 :v-adjust 0.0) &#34;Homepage&#34; &#34;Browse homepage&#34; (lambda (&amp;amp;rest _) (browse-url &#34;homepage&#34;))) (&#34;★&#34; &#34;Star&#34; &#34;Show stars&#34; (lambda (&amp;amp;rest _) (show-stars)) warning) (&#34;?&#34; &#34;&#34; &#34;?/h&#34; #&#39;show-help nil &#34;&amp;lt;&#34; &#34;&amp;gt;&#34;)) ;; line 2 ((,(all-the-icons-faicon &#34;linkedin&#34; :height 1.1 :v-adjust 0.0) &#34;Linkedin&#34; &#34;&#34; (lambda (&amp;amp;rest _) (browse-url &#34;homepage&#34;))) (&#34;⚑&#34; nil &#34;Show flags&#34; (lambda (&amp;amp;rest _) (message &#34;flag&#34;)) error)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To show info about the packages loaded and the init time: #+BEGIN_SRC elisp (setq dashboard-set-init-info t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Also, the message can be customized like this: #+BEGIN_SRC elisp (setq dashboard-init-info &#34;This is an init message!&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;A randomly selected footnote will be displayed. To disable it: #+BEGIN_SRC elisp (setq dashboard-set-footer nil) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To customize it and customize its icon;&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (setq dashboard-footer-messages &#39;(&#34;Dashboard is pretty cool!&#34;)) (setq dashboard-footer-icon (all-the-icons-octicon &#34;dashboard&#34; :height 1.1 :v-adjust -0.05 :face &#39;font-lock-keyword-face)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To use it with [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] or [[https://github.com/bbatsov/persp-projectile][persp-projectile]]&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq dashboard-projects-switch-function &#39;counsel-projectile-switch-project-by-name) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq dashboard-projects-switch-function &#39;projectile-persp-switch-project) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Org mode’s agenda&lt;/p&gt; &#xA;&lt;p&gt;To display today’s agenda items on the dashboard, add &lt;del&gt;agenda&lt;/del&gt; to &lt;del&gt;dashboard-items&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (add-to-list &#39;dashboard-items &#39;(agenda) t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To show agenda for the upcoming seven days set the variable &lt;del&gt;dashboard-week-agenda&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;. #+BEGIN_SRC elisp (setq dashboard-week-agenda t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;By default org-agenda entries are filter by time, only showing those task with &lt;del&gt;DEADLINE&lt;/del&gt; or &lt;del&gt;SCHEDULE-TIME&lt;/del&gt;. To show all agenda entries (except &lt;del&gt;DONE&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq dashboard-filter-agenda-entry &#39;dashboard-no-filter-agenda) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To have an extra filter, &lt;del&gt;MATCH&lt;/del&gt; parameter is exposed as &lt;del&gt;dashboard-match-agenda-entry&lt;/del&gt; variable, by default is &lt;del&gt;nil&lt;/del&gt; #+begin_quote ‘MATCH’ is a tags/property/TODO match. Org iterates only matched headlines. Org iterates over all headlines when MATCH is nil or t. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;See [[https://orgmode.org/manual/Using-the-Mapping-API.html][Org Manual]] for more information.&lt;/p&gt; &#xA;&lt;p&gt;Once the agenda appears in the dashboard, &lt;del&gt;org-agenda-files&lt;/del&gt; stay open. With &lt;del&gt;(setq dashboard-agenda-release-buffers t)&lt;/del&gt; the org files are close. Note that this could slow down the dashboard buffer refreshment.&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda sort&lt;/p&gt; &#xA;&lt;p&gt;Agenda is now sorted with &lt;del&gt;dashboard-agenda-sort-strategy&lt;/del&gt; following the idea of [[https://orgmode.org/worg/doc.html#org-agenda-sorting-strategy][org-agenda-sorting-strategy]]. Suported strategies are &lt;del&gt;time-up&lt;/del&gt;, &lt;del&gt;time-down&lt;/del&gt;, &lt;del&gt;todo-state-up&lt;/del&gt; and &lt;del&gt;todo-state-down&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda format&lt;/p&gt; &#xA;&lt;p&gt;To personalize the aspect of each entry, there is &lt;del&gt;dashboard-agenda-prefix-format&lt;/del&gt; which initial value is &lt;del&gt;&#34; %i %-12:c %-10s &#34;&lt;/del&gt; where &lt;del&gt;%i&lt;/del&gt; is the icon category of the item (see [[https://orgmode.org/worg/doc.html#org-agenda-category-icon-alist][org-agenda-category-icon-alist]]), &lt;del&gt;%-12:c&lt;/del&gt; gives the category a 12 chars wide field and append a colon to the category. A similar padding but for a 10 wide field is &lt;del&gt;%-10s&lt;/del&gt; that is for the scheduling or deadline information. For more information see [[https://orgmode.org/worg/doc.html#org-agenda-prefix-format][org-agenda-prefix-format]].&lt;/p&gt; &#xA;&lt;p&gt;Deadline or Scheduling time will be formatted using &lt;del&gt;dashboard-agenda-time-string-format&lt;/del&gt; and the keywords (TODO, DONE) respect [[https://orgmode.org/worg/doc.html#org-agenda-todo-keyword-format][org-agenda-todo-keyword-format]].&lt;/p&gt; &#xA;&lt;p&gt;** Faces&lt;/p&gt; &#xA;&lt;p&gt;It is possible to customize Dashboard&#39;s appearance using the following faces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-banner-logo-title&lt;/del&gt; :: Highlights the banner title.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-text-banner&lt;/del&gt; :: Highlights text banners.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-heading&lt;/del&gt; :: Highlights widget headings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-items-face&lt;/del&gt; :: Highlights widget items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shortcuts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use any of the following shortcuts inside Dashboard&lt;/p&gt; &#xA;&lt;p&gt;|----------------------------+------------------| | Shortcut | Function | |----------------------------+------------------| | Tab Or C-i | Next Item | | Shift-Tab | Previous Item | | Return / Mouse Click / C-m | Open | | r | Recent files | | m | Bookmarks | | p | Projects | | a | Org-Mode Agenda | | e | Registers | | g | Refresh contents | | { | Previous section | | } | Next section | |----------------------------+------------------|&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Wish List&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Center content&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More banner options&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizing the list of widgets to display&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrate Org-mode&#39;s agenda&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Listing Perspectives&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contributions&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To contribute your changes to this package, please do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo&lt;/li&gt; &#xA; &lt;li&gt;Clone a local copy&lt;/li&gt; &#xA; &lt;li&gt;Make your changes&lt;/li&gt; &#xA; &lt;li&gt;Push and create your PR&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When working on this package, it&#39;s typical to uninstall dashboard, develop your changes and then install this as &#34;development version&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This is accomplished with the following steps:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell&lt;/p&gt; &#xA;&lt;h1&gt;In emacs:&lt;/h1&gt; &#xA;&lt;p&gt;M-x package-delete dashboard-&#xA; &lt;version&gt;&#xA;   RET #+END_SRC&#xA; &lt;/version&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell make build make install #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Prerequisites&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/cask/cask][Cask]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>purcell/emacs.d</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/purcell/emacs.d</id>
    <link href="https://github.com/purcell/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs configuration bundle with batteries included&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/purcell/emacs.d/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/emacs.d/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;A reasonable Emacs config&lt;/h1&gt; &#xA;&lt;p&gt;This is my emacs configuration tree, continually used and tweaked since 2000, and it may be a good starting point for other Emacs users, especially web developers. These days it&#39;s somewhat geared towards OS X, but it is known to also work on Linux and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Emacs itself comes with support for many programming languages. This config adds improved defaults and extended support for the following, listed in the approximate order of how much I use them, from most to least:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Haskell / Purescript / Elm / OCaml&lt;/li&gt; &#xA; &lt;li&gt;Ruby / Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;CSS / LESS / SASS / SCSS&lt;/li&gt; &#xA; &lt;li&gt;Javascript / Typescript / Coffeescript&lt;/li&gt; &#xA; &lt;li&gt;HTML / HAML / Markdown / Textile / ERB&lt;/li&gt; &#xA; &lt;li&gt;Common Lisp (with Slime)&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Clojure (with Cider and nRepl)&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Erlang&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In particular, there&#39;s a nice config for &lt;em&gt;autocompletion&lt;/em&gt; with &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company&lt;/a&gt;, and &lt;code&gt;flymake&lt;/code&gt; (re-using backends from &lt;a href=&#34;http://www.flycheck.org&#34;&gt;flycheck&lt;/a&gt;) is used to immediately highlight syntax errors in Ruby, Python, Javascript, Haskell and a number of other languages.&lt;/p&gt; &#xA;&lt;p&gt;LSP support is provided using &lt;code&gt;eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Emacs versions&lt;/h2&gt; &#xA;&lt;p&gt;The config should run on Emacs 25.1 or greater and is designed to degrade smoothly - see the CI build - but note that much newer versions are required for an increasing number of key packages, so to get full functionality you should use the latest Emacs version available to you.&lt;/p&gt; &#xA;&lt;p&gt;Some Windows users might need to follow &lt;a href=&#34;http://xn--9dbdkw.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html&#34;&gt;these instructions&lt;/a&gt; to get TLS (ie. SSL) support included in their Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Other requirements&lt;/h2&gt; &#xA;&lt;p&gt;To make the most of the programming language-specific support in this config, further programs will likely be required, particularly those that &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; uses to provide on-the-fly syntax checking.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install, clone this repo to &lt;code&gt;~/.emacs.d&lt;/code&gt;, i.e. ensure that the &lt;code&gt;init.el&lt;/code&gt; contained in this repo ends up at &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/purcell/emacs.d.git ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon starting up Emacs for the first time, further third-party packages will be automatically downloaded and installed. If you encounter any errors at that stage, try restarting Emacs, and possibly running &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; before doing so.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;Update the config with &lt;code&gt;git pull&lt;/code&gt;. You&#39;ll probably also want/need to update the third-party packages regularly too, because that&#39;s what I do, and the config assumes it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-list-packages&lt;/kbd&gt;, then &lt;kbd&gt;U&lt;/kbd&gt; followed by &lt;kbd&gt;x&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should usually restart Emacs after pulling changes or updating packages so that they can take effect. Emacs should usually restore your working buffers when you restart due to this configuration&#39;s use of the &lt;code&gt;desktop&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; packages.&lt;/p&gt; &#xA;&lt;h2&gt;Changing themes and adding your own customization&lt;/h2&gt; &#xA;&lt;p&gt;To add your own customization, use &lt;kbd&gt;M-x customize&lt;/kbd&gt;, &lt;kbd&gt;M-x customize-themes&lt;/kbd&gt; etc. and/or create a file &lt;code&gt;~/.emacs.d/lisp/init-local.el&lt;/code&gt; which looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;... your code here ...&#xA;&#xA;(provide &#39;init-local)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need initialisation code which executes earlier in the startup process, you can also create an &lt;code&gt;~/.emacs.d/lisp/init-preload-local.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to customize things more extensively, you should probably just fork the repo and hack away at the config to make it your own! Remember to regularly merge in changes from this repo, so that your config remains compatible with the latest package and Emacs versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that I cannot provide support for customised versions of this configuration.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support / issues&lt;/h2&gt; &#xA;&lt;p&gt;If you hit any problems, please first ensure that you are using the latest version of this code, and that you have updated your packages to the most recent available versions (see &#34;Updates&#34; above). If you still experience problems, go ahead and &lt;a href=&#34;https://github.com/purcell/emacs.d&#34;&gt;file an issue on the github project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;-Steve Purcell&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;💝 Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;💼 LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;✍ sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;🐦 @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doomemacs/doomemacs</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/doomemacs/doomemacs</id>
    <link href="https://github.com/doomemacs/doomemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Doom Emacs&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt; • &lt;a href=&#34;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&#34;&gt;Screenshots&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&#34; alt=&#34;Made with Doom Emacs&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Supports-Emacs_27.1--28.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Supports Emacs 27.1 - 28.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/doomemacs/doomemacs/master?style=flat-square&#34; alt=&#34;Latest commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square&#34; alt=&#34;Build status: master&#34;&gt; &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.doomemacs.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&#34; alt=&#34;Discourse server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&#34; alt=&#34;Doom Emacs Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&#34;&gt;Getting help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;a href=&#34;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer—envious of the features of modern text editors—spirals into despair before he succumbs to the &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Doom is a configuration framework for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; &#xA;&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; &#xA; &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; &#xA; &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; &#xA; &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; &#xA; &lt;li&gt;A declarative &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; &#xA; &lt;li&gt;Optional vim emulation powered by &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&#34;&gt;more&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; &#xA; &lt;li&gt;A Spacemacs-esque &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&#34;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; &#xA; &lt;li&gt;A rule-based &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&#34;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; &#xA; &lt;li&gt;Per-file indentation style detection and &lt;a href=&#34;http://editorconfig.org/&#34;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; &#xA; &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;ivy&lt;/a&gt; or &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; &#xA; &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; &#xA; &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git 2.23+&lt;/li&gt; &#xA; &lt;li&gt;Emacs 27.1+ (&lt;em&gt;27.2 is recommended&lt;/em&gt;, or &lt;a href=&#34;https://www.emacswiki.org/emacs/GccEmacs&#34;&gt;native-comp&lt;/a&gt;. &lt;strong&gt;29+ is not supported&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; &#xA; &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Doom is comprised of &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d&#xA;~/.emacs.d/bin/doom install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&#34;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.emacs.d/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom build&lt;/code&gt; to recompile all installed packages (use this if you up/downgrade Emacs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/6&#34;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/5&#34;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/7&#34;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting help&lt;/h1&gt; &#xA;&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Our documentation&lt;/a&gt; covers many use cases. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&#34;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&#34;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&#34;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&#34;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&#34;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; &#xA;   &lt;li&gt;Your issue may be documented in the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://discourse.doomemacs.org/t/doom-emacs-faq/45&#34;&gt;FAQ&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues&#34;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&#34; alt=&#34;Donate on liberapay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I &lt;span&gt;❤️&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&#34;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t hesitate to &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues/new&#34;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;liberapay&lt;/a&gt; or &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alezost/bui.el</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/alezost/bui.el</id>
    <link href="https://github.com/alezost/bui.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Buffer interface library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[http://www.gnu.org/licenses/gpl-3.0.txt][file:https://img.shields.io/badge/license-GPL_3-orange.svg]] [[http://melpa.org/#/bui][file:http://melpa.org/packages/bui-badge.svg]] [[http://stable.melpa.org/#/bui][file:http://stable.melpa.org/packages/bui-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=BUI= (=Buffer User Interface=) is an Emacs library that can be used to make user interfaces to display some kind of entries (like packages, buffers, functions, etc.).&lt;/p&gt; &#xA;&lt;p&gt;The intention of BUI is to be a high-level library which is convenient to be used both by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;package makers&lt;/em&gt;, as there is no need to bother about implementing routine details and usual features (like buffer history, filtering displayed entries, etc.);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;users&lt;/em&gt;, as it provides familiar and intuitive interfaces with usual keys (for moving by lines, marking, sorting, switching between buttons); and what is also important, the defined interfaces are highly configurable through various generated variables. A summary of available key bindings can be displayed by pressing =h=.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BUI provides means to display entries in 2 types of buffers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=list=: it is based on =tabulated-list-mode=, thus it looks similar to a list of Emacs packages (=M-x list-packages=);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=info=: it can be used to display more verbose info, like various buttons, text and other stuff related to the displayed entry (or entries).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In short, you define how a =list= / =info= interface looks like (using =bui-define-interface= macro), and then you can make some user commands that will display entries (using =bui-get-display-entries= and similar functions).&lt;/p&gt; &#xA;&lt;p&gt;For example, you can make a =list= interface to display buffers (similar to what =M-x list-buffers= do), like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (require &#39;bui)&lt;/p&gt; &#xA;&lt;p&gt;(defun buffers-buffer-&amp;gt;entry (buffer) (with-current-buffer buffer `((id . ,buffer) (name . ,(buffer-name)) (mode . ,major-mode) (size . ,(buffer-size)) (file-name . ,buffer-file-name))))&lt;/p&gt; &#xA;&lt;p&gt;(defun buffers-get-entries () (mapcar &#39;buffers-buffer-&amp;gt;entry (buffer-list)))&lt;/p&gt; &#xA;&lt;p&gt;(bui-define-interface buffers list :buffer-name &#34;&lt;em&gt;Buffers&lt;/em&gt;&#34; :get-entries-function &#39;buffers-get-entries :format &#39;((name nil 30 t) (mode nil 25 t) (size nil 8 bui-list-sort-numerically-2 :right-align t) (file-name bui-list-get-file-name 30 t)) :sort-key &#39;(name))&lt;/p&gt; &#xA;&lt;p&gt;(defun buffers () &#34;Display a list of buffers.&#34; (interactive) (bui-get-display-entries &#39;buffers &#39;list)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This is a simplified example just to demonstrate how =bui.el= can be used. For full example see [[file:examples/buffers.el]]. You can see how it looks like on the following screenshot. =M-x buffers= displays a list of buffers, then 2 buffers are marked (with =m= key) and &#34;described&#34; in =info= buffer (with =i= key).&lt;/p&gt; &#xA;&lt;p&gt;[[http://i.imgur.com/3dlBu2Y.png]]&lt;/p&gt; &#xA;&lt;p&gt;=bui-define-interface= macro takes the following arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ENTRY-TYPE: an arbitrary symbol to denote the entry type.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;BUFFER-TYPE: =list= or =info= symbol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keyword arguments: used to define various interface parameters and to set default values of user variables (like titles, buffer name, etc.). The main keywords that should be specified are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;=:get-entries-function=: this function should return a list of entries to display. Each entry is a usual association list with one required =id= key (it is used to fill =tabulated-list-entries= variable).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;=:format=: it specifies how the data is displayed; see docstrings of the generated =ENTRY-TYPE-BUFFER-TYPE-format= variables for details (in the current example: =buffers-list-format= and =buffers-info-format=).&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For real-world examples you may look at [[https://github.com/alezost/aurel][aurel]] or [[https://github.com/alezost/guix.el][guix]] packages.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zerolfx/copilot.el</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/zerolfx/copilot.el</id>
    <link href="https://github.com/zerolfx/copilot.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot.el&lt;/h1&gt; &#xA;&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This plugin is unofficial and based on binaries provided by &lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;copilot.vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to Copilot technical preview to use this plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; (only support 12.x to 17.x).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package! copilot&#xA;  :recipe (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;*.el&#34; &#34;dist&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(use-package! copilot&#xA;  :hook (prog-mode . copilot-mode)&#xA;  :bind ((&#34;C-TAB&#34; . &#39;copilot-accept-completion-by-word)&#xA;         (&#34;C-&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion-by-word)&#xA;         :map company-active-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)&#xA;         :map company-mode-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; ===================&#xA;;; dotspacemacs/layers&#xA;;; ===================&#xA;&#xA;;; add copilot.el to additional packages&#xA;dotspacemacs-additional-packages&#xA; &#39;((copilot :location (recipe&#xA;                       :fetcher github&#xA;                       :repo &#34;zerolfx/copilot.el&#34;&#xA;                       :files (&#34;*.el&#34; &#34;dist&#34;))))&#xA;&#xA;;; ========================&#xA;;; dotspacemacs/user-config&#xA;;; ========================&#xA;&#xA;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;  ;; enable tab completion&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&#xA;&#xA;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&#xA;(define-key evil-insert-state-map (kbd &#34;C-&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion-by-word)&#xA;(define-key evil-insert-state-map (kbd &#34;C-TAB&#34;) &#39;copilot-accept-completion-by-word)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;General Configurations&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Load via &lt;code&gt;straight.el&lt;/code&gt; (recommended)&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :straight (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))&#xA;  :ensure t)&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Option 2: Load manually&lt;/h5&gt; &#xA; &lt;p&gt;Please make sure you have these dependencies installed, and use &lt;code&gt;load-file&lt;/code&gt; or &lt;code&gt;load-path&lt;/code&gt; + &lt;code&gt;require&lt;/code&gt; to load it.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;2. Configure completion&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; &#xA; &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; &#xA; &lt;p&gt;In general, you need to bind &lt;code&gt;copilot-accept-completion&lt;/code&gt; to some key in order to accept the completion. Also, you may find &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; is useful.&lt;/p&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;company-mode&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then company-mode&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;; modify company-mode behaviors&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;auto-complete&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then auto-complete&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (ac-expand nil)))&#xA;&#xA;(with-eval-after-load &#39;auto-complete&#xA;  ; disable inline preview&#xA;  (setq ac-disable-inline t)&#xA;  ; show menu if have only one candidate&#xA;  (setq ac-candidate-menu-min 0)&#xA;&#xA;  (define-key ac-completing-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key ac-completing-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab))&#xA;&#xA;(define-key global-map [remap indent-for-tab-command] &#39;(lambda ()&#xA;                                                         (interactive)&#xA;                                                         (or (copilot-accept-completion)&#xA;                                                             (indent-for-tab-command))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-diagnose&lt;/h4&gt; &#xA;&lt;p&gt;Check the current status of the plugin. Also you can check error logs in the &lt;code&gt;*copilot-log*&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-login&lt;/h4&gt; &#xA;&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-mode&lt;/h4&gt; &#xA;&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-complete&lt;/h4&gt; &#xA;&lt;p&gt;Try to complete at the current point.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; &#xA;&lt;p&gt;Accept the current completion.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; &#xA;&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; &#xA;&lt;p&gt;Cycle through the completion list.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-node-executable&lt;/h4&gt; &#xA;&lt;p&gt;The executable path of Node.js.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; &#xA;&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be enabled only if all predicates return &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-disable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to disable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be disabled if any predicate returns &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-overlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; &#xA;&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-box.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cycle through suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;These projects helped me a lot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyX12/company-tabnine/&#34;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cryptobadger/flight-attendant.el&#34;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Malabarba/beacon</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/Malabarba/beacon</id>
    <link href="https://github.com/Malabarba/beacon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light that follows your cursor around so you don&#39;t lose it!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Beacon --- Never lose your cursor again&lt;/p&gt; &#xA;&lt;p&gt;This is a global minor-mode. Turn it on everywhere with: #+BEGIN_SRC emacs-lisp (beacon-mode 1) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;[[file:example-beacon.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Whenever the window scrolls a light will shine on top of your cursor so you know where it is.&lt;/p&gt; &#xA;&lt;p&gt;That’s it.&lt;/p&gt; &#xA;&lt;p&gt;** Customizations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The appearance of the beacon is configured by &lt;del&gt;beacon-size&lt;/del&gt; and &lt;del&gt;beacon-color&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The duration is configured by &lt;del&gt;beacon-blink-duration&lt;/del&gt; and &lt;del&gt;beacon-blink-delay&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To customize /when/ the beacon should blink at all, configure &lt;del&gt;beacon-blink-when-window-scrolls&lt;/del&gt;, &lt;del&gt;beacon-blink-when-window-changes&lt;/del&gt;, and &lt;del&gt;beacon-blink-when-point-moves&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To prevent the beacon from blinking only on specific situations configure &lt;del&gt;beacon-dont-blink-major-modes&lt;/del&gt;, &lt;del&gt;beacon-dont-blink-predicates&lt;/del&gt;, or &lt;del&gt;beacon-dont-blink-commands&lt;/del&gt;. You can also disable it only in specific buffers by doing &lt;del&gt;(setq-local beacon-mode nil)&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Beacon can also push the mark for you whenever point moves a long distance. For this, configure &lt;del&gt;beacon-push-mark&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/tsdh][Tassilo Horn]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you’d like to help too, just open a PR.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-mirror/emacs</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/emacs-mirror/emacs</id>
    <link href="https://github.com/emacs-mirror/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2022 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; &#xA;&lt;p&gt;This directory tree holds version 29.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; &#xA;&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; &#xA;&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; &#xA;&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&#34;mailto:bug-gnu-emacs@gnu.org&#34;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; &#xA;&lt;p&gt;See the &#34;Bugs&#34; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&#34;https://savannah.gnu.org/mail/?group=emacs&#34;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&#34;https://lists.gnu.org/&#34;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; &#xA;&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; &#xA;&lt;p&gt;There are several subdirectories:&lt;/p&gt; &#xA;&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script.&lt;/p&gt; &#xA;&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; &#xA;&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; &#xA;&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; &#xA;&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magit/magit</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/magit/magit</id>
    <link href="https://github.com/magit/magit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;It&#39;s Magit! A Git porcelain inside Emacs.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://magit.vc/assets/magit-168x200px.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;A Git Porcelain inside Emacs&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://magit.vc&#34;&gt;&lt;b&gt;homepage&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://magit.vc/manual&#34;&gt;&lt;b&gt;manual&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://magit.vc/manual/magit/FAQ.html&#34;&gt;&lt;b&gt;faq&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/magit/magit/wiki&#34;&gt;&lt;b&gt;wiki&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/magit_emacs&#34;&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;justify&#34;&gt; Magit is an interface to the version control system &lt;a href=&#34;https://git-scm.com&#34;&gt;Git&lt;/a&gt;, implemented as an &lt;a href=&#34;https://www.gnu.org/software/emacs&#34;&gt;Emacs&lt;/a&gt; package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Keeping its users &#xA; &lt;a href=&#34;https://magit.vc/quotes&#34;&gt;this excited&lt;/a&gt; is &#xA; &lt;a href=&#34;https://magit.vc/stats/magit/authors.html#cumulated_added_lines_of_code_per_author&#34;&gt; a lot of work &lt;/a&gt;. If Magit makes you &#xA; &lt;br&gt; more productive too, then &#xA; &lt;b&gt;please consider making a donation&lt;/b&gt;. &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;em&gt;Thank you! — Jonas Bernoulli&lt;/em&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/sponsors/tarsius&#34;&gt; &lt;img title=&#34;Donate using Github Sponsors&#34; alt=&#34;Donate using Github Sponsors&#34; src=&#34;https://magit.vc/assets/github-sponsors-50px.png&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/#iban&#34;&gt; &lt;img title=&#34;Donate using IBAN&#34; alt=&#34;Donate using IBAN&#34; src=&#34;https://magit.vc/assets/iban-50px.png&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://magit.vc/donate/#zelle&#34;&gt; &lt;img title=&#34;Donate using Zelle (USA bank transfer)&#34; alt=&#34;Donate using Zelle (USA bank transfer)&#34; src=&#34;https://magit.vc/assets/zelle-50px.png&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://www.paypal.me/JonasBernoulli/20&#34;&gt; &lt;img title=&#34;Donate using PayPal&#34; alt=&#34;Donate using PayPal&#34; src=&#34;https://magit.vc/assets/paypal.png&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Some alternative donation methods are &#xA; &lt;a href=&#34;https://magit.vc/donate&#34;&gt;available&lt;/a&gt;. &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;If you are new to Magit, then either one of the following two articles should help understanding how it differs from other Git clients.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://emacsair.me/2017/09/01/magit-walk-through&#34;&gt;Visual Magit walk-through&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you are completely new to Magit, then this article is a good visual introduction.&lt;/p&gt; &#xA;&lt;p&gt;Almost everything that you see in Magit can be acted on by pressing some key, but that&#39;s not obvious from just seeing how Magit looks. The screenshots and accompanying text of this article explain how to perform a variety of actions on Magit&#39;s output.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://emacsair.me/2017/09/01/the-magical-git-interface&#34;&gt;Magit, the magical Git interface&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Magit differs significantly from other Git interfaces, and its advantages are not immediately obvious simply from looking at a few screenshots as presented in the preceding article.&lt;/p&gt; &#xA;&lt;p&gt;This article discusses Magit&#39;s properties in somewhat more abstract terms.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Support and Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Magit has many users and very few maintainers, so we kindly ask to read the appropriate guidelines before getting in contact. — Thanks!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🆘 &lt;a href=&#34;https://github.com/magit/magit/discussions/4630&#34;&gt;How to ask for help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🪳 &lt;a href=&#34;https://github.com/magit/magit/wiki/How-to-report-a-bug&#34;&gt;How to report a bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💡 &lt;a href=&#34;https://github.com/magit/magit/discussions/4631&#34;&gt;How to suggest a feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🏗️ &lt;a href=&#34;https://github.com/magit/magit/wiki/Pull-request-guidelines&#34;&gt;Pull request guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ℹ️ &lt;a href=&#34;https://magit.vc/manual/magit/FAQ.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ℹ️ &lt;a href=&#34;https://magit.vc/manual/magit&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TL;DR We now use discussions for feature requests (not issues) and prefer if you ask the community for support instead of the overworked maintainers.&lt;/p&gt; &#xA;&lt;p&gt;Please also consider to contribute by supporting other users or by making a &lt;a href=&#34;https://magit.vc/donate&#34;&gt;monetary donation&lt;/a&gt;. — Thanks!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Acknowledgments&lt;/h3&gt; &#xA;&lt;p&gt;Magit was started by &lt;a href=&#34;https://github.com/mvollmer&#34;&gt;Marius Vollmer&lt;/a&gt;, and is now maintained by &lt;a href=&#34;https://emacsair.me&#34;&gt;Jonas Bernoulli&lt;/a&gt; and &lt;a href=&#34;https://kyleam.com&#34;&gt;Kyle Meyer&lt;/a&gt;. Former maintainers are &lt;a href=&#34;http://dudebout.com&#34;&gt;Nicolas Dudebout&lt;/a&gt;, &lt;a href=&#34;https://github.com/npostavs&#34;&gt;Noam Postavsky&lt;/a&gt;, &lt;a href=&#34;https://github.com/pjweisberg&#34;&gt;Peter J. Weisberg&lt;/a&gt;, &lt;a href=&#34;https://github.com/philjackson&#34;&gt;Phil Jackson&lt;/a&gt;, &lt;a href=&#34;https://github.com/vanicat&#34;&gt;Rémi Vanicat&lt;/a&gt; and &lt;a href=&#34;http://www.hodique.info&#34;&gt;Yann Hodique&lt;/a&gt;. Many more people have &lt;a href=&#34;https://magit.vc/stats/magit/authors.html&#34;&gt;contributed code&lt;/a&gt;, suggested features or made monetary contributions.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all of you, may (the history of) the source be with you!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xkcd.com/859&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%28-%20%20%20-red.svg?sanitize=true&#34; alt=&#34;Paren Xkcb&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_v3-green.svg?sanitize=true&#34; alt=&#34;GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/magit/magit/actions&#34;&gt;&lt;img src=&#34;https://github.com/magit/magit/workflows/test/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/magit.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/magit.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/magit&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/magit-badge.svg?sanitize=true&#34; alt=&#34;Melpa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/magit&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/magit-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://magit.vc/manual/magit&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/eierlegende-Wollmilchsau-green.svg?sanitize=true&#34; alt=&#34;Eierlegende Wollmilchsau&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Browser_wars&#34;&gt;&lt;img src=&#34;https://magit.vc/assets/netscape-20px.png&#34; alt=&#34;Netscape&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sshaw/git-link</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/sshaw/git-link</id>
    <link href="https://github.com/sshaw/git-link" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package to get the GitHub/Bitbucket/GitLab/... URL for a buffer location&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-link&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/git-link&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/git-link-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/sshaw/git-link&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sshaw/git-link.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Interactive Emacs functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link&lt;/code&gt; returns the URL for the current buffer&#39;s file location at the current line number or active region.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit&lt;/code&gt; returns the URL for the commit at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-homepage&lt;/code&gt; returns the URL for the repository&#39;s homepage.&lt;/p&gt; &#xA;&lt;p&gt;URLs are added to the kill ring.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Functions can be called interactively (&lt;code&gt;M-x git-link&lt;/code&gt;) or via a key binding of your choice. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(global-set-key (kbd &#34;C-c g l&#34;) &#39;git-link)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a prefix argument prompt for the remote&#39;s name. Defaults to &lt;code&gt;&#34;origin&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With a prefix argument of &lt;code&gt;-&lt;/code&gt;, generate a link without line numbers.&lt;/p&gt; &#xA;&lt;p&gt;Works with Dired, Magit, VC revisions, and Tramp too.&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Global setting are elisp variables. They can be set directly or via &lt;code&gt;M-x customize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Local settings are managed via the repository&#39;s git configuration. They can be set via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --local --add setting value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Local settings have precedence over global settings.&lt;/p&gt; &#xA;&lt;h4&gt;Global&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to, defaults to the current branch.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-open-in-browser&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; also open link in browser via &lt;code&gt;browse-url&lt;/code&gt;, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-commit&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; use the latest commit&#39;s hash in the link instead of the branch name, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-single-line-number&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If &lt;code&gt;nil&lt;/code&gt; line numbers are only added when the selection contains more than 1 line, defaults to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;git-link&lt;/code&gt; will exclude line numbers when invoked with the &lt;code&gt;-&lt;/code&gt; prefix argument.&lt;/p&gt; &#xA;&lt;h4&gt;Local&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Services&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/devops/&#34;&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/codecommit/&#34;&gt;AWS CodeCommit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bitbucket.com&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/&#34;&gt;Codeberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/Cgit&#34;&gt;cgit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com&#34;&gt;GitLab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gitorious.org&#34;&gt;Gitorious&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.savannah.gnu.org/cgit&#34;&gt;Savannah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcegraph.com&#34;&gt;Sourcegraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Git Timemachine&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://gitlab.com/pidu/git-timemachine&#34;&gt;&lt;code&gt;git-timemachine-mode&lt;/code&gt;&lt;/a&gt; is active &lt;code&gt;git-link&lt;/code&gt; generates a URL for the version of the file being visited.&lt;/p&gt; &#xA;&lt;h3&gt;Sourcegraph&lt;/h3&gt; &#xA;&lt;p&gt;To link to files on a Sourcegraph server add a git remote pointing to the repository&#39;s Sourcegraph page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git remote add sourcegraph https://sourcegraph.com/github.com/sshaw/copy-as-format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Links can be generated by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#usage&#34;&gt;specifying &lt;code&gt;sourcegraph&lt;/code&gt; as your remote&lt;/a&gt; when calling the desired link function or by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#settings&#34;&gt;setting &lt;code&gt;sourcegraph&lt;/code&gt; as the default remote&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that the remote can be named anything but its URL&#39;s host must match what&#39;s in the associated link function&#39;s alist. This defaults to &lt;code&gt;&#34;sourcegraph&#34;&lt;/code&gt; but can be changed. See &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#building-links-and-adding-services&#34;&gt;Building Links and Adding Services&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;URLs with ports or an http scheme will not work. It&#39;s a trivial fix so if it&#39;s a problem for you please open an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Building Links and Adding Services&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-remote-alist&lt;/code&gt; is an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. The FUNCTION creates URLs for file on remote host names that match the REGEXP. To add (or modify) how URLs are created for a given host, add appropriate elements to this list.&lt;/p&gt; &#xA;&lt;p&gt;As an example, one of the default elements in this alist is &lt;code&gt;(&#34;gitlab&#34; git-link-gitlab)&lt;/code&gt;. So the &lt;code&gt;git-link-gitlab&lt;/code&gt; function will be used to create URLs to files in remotes that match the &lt;em&gt;regexp&lt;/em&gt; &lt;code&gt;&#34;gitlab&#34;&lt;/code&gt;. That would cover common Gitlab host URLs like &lt;em&gt;&#34;gitlab.com&#34;&lt;/em&gt;, &lt;em&gt;&#34;gitlab.example.com&#34;&lt;/em&gt; and &lt;em&gt;&#34;gitlab.example.org&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit-remote-alist&lt;/code&gt; is also an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. Here, the FUNCTION creates URLs to the commit pages, for remote hosts matching REGEXP.&lt;/p&gt; &#xA;&lt;p&gt;If you use a self-hosted version of one of the supported services, but your remote URL does match with the defaults, you can configure these link function alists. For example, for a GitHub Enterprise instance at &lt;code&gt;gh.example.com&lt;/code&gt;, you could add the following to your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(eval-after-load &#39;git-link&#xA; &#39;(progn&#xA;   (add-to-list &#39;git-link-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-github))&#xA;   (add-to-list &#39;git-link-commit-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-commit-github))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME FILENAME BRANCH COMMIT START END&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FILENAME&lt;/code&gt; source file, relative to &lt;code&gt;DIRNAME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BRANCH&lt;/code&gt; active branch, may be &lt;code&gt;nil&lt;/code&gt; if the repo&#39;s in &#34;detached HEAD&#34; state&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the latest commit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;START&lt;/code&gt; starting line number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;END&lt;/code&gt; ending line number, &lt;code&gt;nil&lt;/code&gt; unless region is active&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link-commit&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME COMMIT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the commit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;See Also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/copy-as-format&#34;&gt;copy-as-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/output-as-format&#34;&gt;output-as-format&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More tests!&lt;/li&gt; &#xA; &lt;li&gt;Consolidate &lt;code&gt;git-link-*-alist&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git-link-grep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>e2r0r/joy-emacs</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/e2r0r/joy-emacs</id>
    <link href="https://github.com/e2r0r/joy-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;enjoy with emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#title README&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;mailto:breeze.guangfeng@googlemail.com&#34;&gt;breeze.guangfeng@googlemail.com&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;my .emacs and site-lisp backup here&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add .emacs for console&lt;/li&gt; &#xA; &lt;li&gt;fix .emacs with classic theme supporting&lt;/li&gt; &#xA; &lt;li&gt;add SML-Mode&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cmugang/dotemacs</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/cmugang/dotemacs</id>
    <link href="https://github.com/cmugang/dotemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;이맥스 설정 파일&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Read me.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rmloveland/zoom-to-point</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/rmloveland/zoom-to-point</id>
    <link href="https://github.com/rmloveland/zoom-to-point" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs functions that zoom in on the text at point.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Exposes a command, &lt;code&gt;zoom-toggle&#39;, which will increase or decrease the size of the text at point, and a variable, &lt;/code&gt;&lt;em&gt;default-zoom-level&lt;/em&gt;&#39;, which determines the change in size.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacscollective/epkg</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/emacscollective/epkg</id>
    <link href="https://github.com/emacscollective/epkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Browse the Emacsmirror package database&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Browse the Emacsmirror package database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides access to a local copy of the [[https://emacsmirror.net][Emacsmirror]] package database. It provides low-level functions for querying the database and a &lt;del&gt;package.el&lt;/del&gt;-like user interface for browsing the available packages.&lt;/p&gt; &#xA;&lt;p&gt;The Emacsmirror is a growing collection of Emacs Lisp packages. All mirrored packages are available as Git repositories. In most cases this is done by mirroring the upstream Git repository, but if upstream uses something else, then the mirror nevertheless makes the package available as a Git repository.&lt;/p&gt; &#xA;&lt;p&gt;One primary purpose of the Emacsmirror is to provide a comprehensive list of available Emacs packages, including packages which have gone out of fashion (but might later prove to be useful still).&lt;/p&gt; &#xA;&lt;p&gt;For more information see the [[https://emacsmirror.net/manual/epkg][manual]] and the [[https://emacsmirror.net][Emacsmirror]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsmirror/cmake-mode</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/emacsmirror/cmake-mode</id>
    <link href="https://github.com/emacsmirror/cmake-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major-mode for editing CMake sources&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>nelhage/elisp</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/nelhage/elisp</id>
    <link href="https://github.com/nelhage/elisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nelhage&#39;s emacs configuration&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>emacsmirror/compat</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/emacsmirror/compat</id>
    <link href="https://github.com/emacsmirror/compat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compatibility Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;COMPATibility Library for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;Find here the source for compat.el, a forwards-compatibility library for (GNU) Emacs Lisp, versions 24.3 and newer.&lt;/p&gt; &#xA;&lt;p&gt;The intended audience of this library aren&#39;t day-to-day users, but package developers that wish to make use of newer functionality, not provided in older versions of Emacs, without breaking compatibility for users bound to specific Emacs releases.&lt;/p&gt; &#xA;&lt;p&gt;Version 24.3 is chosen as the oldest version, because this is the newest version on CentOS 7. It is intended to preserve compatibility for at least as the Centos 7 reaches &lt;a href=&#34;https://wiki.centos.org/About/Product&#34;&gt;EOL&lt;/a&gt;, 2024.&lt;/p&gt; &#xA;&lt;p&gt;If you are developing a package with compat.el in mind, consider loading &lt;code&gt;compat-help&lt;/code&gt; (on your system, not in a package) to get relevant notes inserted into the help buffers of functions that are implemented or advised in compat.el.&lt;/p&gt; &#xA;&lt;p&gt;Note that compat.el provides a few prefixed function, ie. functions with a &lt;code&gt;compat-&lt;/code&gt; prefix. These are used to provide extended functionality for commands that are already defined (&lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;assoc&lt;/code&gt;, ...). It might be possible to transform these into advised functions later on, so that the modified functionality is accessible without a prefix. Feedback on this point is appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;compat.el shouldn&#39;t be installed directly, but downloaded from &lt;a href=&#34;http://elpa.gnu.org/packages/compat.html&#34;&gt;GNU ELPA&lt;/a&gt;. If necessary, this can be done using M-x package-install-file in the current working directory.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The intended use-case for this library is for package developers to add as a dependency in the header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Package-Requires: ((emacs &#34;24.3&#34;) (compat &#34;28.1.1.1&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and later on a&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;compat)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will load all non-prefixed definitions (functions and macros with a leading &lt;code&gt;compat-&lt;/code&gt;). To load these, an additional&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;compat-XY) ; e.g. 26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will be necessary, to load compatibility code for Emacs version XY.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to subscribe to the &lt;a href=&#34;https://lists.sr.ht/~pkal/compat-announce&#34;&gt;compat-announce&lt;/a&gt; mailing list to be notified when new versions are released or relevant changes are made.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;As compat.el is distribed as part of GNU ELPA, and therefore requires a &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Copyright-Assignment.html&#34;&gt;copyright assignment&lt;/a&gt; to the FSF, for all non-trivial code contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Source code&lt;/h2&gt; &#xA;&lt;p&gt;Compat is developed on &lt;a href=&#34;https://sr.ht/~pkal/compat&#34;&gt;SourceHut&lt;/a&gt;. A restricted &lt;a href=&#34;https://github.com/phikal/compat.el&#34;&gt;GitHub&lt;/a&gt; mirror is also provided.&lt;/p&gt; &#xA;&lt;h2&gt;Bug and patches&lt;/h2&gt; &#xA;&lt;p&gt;Patches and comments can be sent to the &lt;a href=&#34;https://lists.sr.ht/~pkal/compat-devel&#34;&gt;development mailing list&lt;/a&gt;. Bug reports and issues should be directed to the &lt;a href=&#34;https://todo.sr.ht/~pkal/compat&#34;&gt;issue tracker&lt;/a&gt; (also accessible via &lt;a href=&#34;mailto:~pkal/compat@todo.sr.ht&#34;&gt;Email&lt;/a&gt;). &lt;a href=&#34;https://github.com/phikal/compat.el&#34;&gt;GitHub&lt;/a&gt; can also be used to submit patches (&#34;Pull Request&#34;). These may include issues in the compatibility code, missing definitions or performance issues.&lt;/p&gt; &#xA;&lt;p&gt;When contributing, make sure to provide test and use the existing tests defined in compat-test.el. These can be easily executed using the bundled Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Distribution&lt;/h2&gt; &#xA;&lt;p&gt;compat.el and all other files in this directory are distributed under the GPL, Version 3 (like Emacs itself).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haskell/haskell-mode</title>
    <updated>2022-05-31T02:08:04Z</updated>
    <id>tag:github.com,2022-05-31:/haskell/haskell-mode</id>
    <link href="https://github.com/haskell/haskell-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs mode for Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://rawgithub.com/haskell/haskell-mode/master/images/haskell-mode.svg?sanitize=true&#34; width=&#34;35&#34; height=&#34;35&#34;&gt; Haskell Mode for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;This is an Emacs mode for editing, developing and debugging Haskell programs. &lt;a href=&#34;http://haskell.github.io/haskell-mode/&#34;&gt;Home page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/haskell/haskell-mode&#34;&gt;&lt;img src=&#34;https://travis-ci.org/haskell/haskell-mode.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/actions&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License GPL3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/HaskellMode&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/HaskellMode.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I just want to thank everybody involved in one way or another with the Haskell Emacs tooling. It is one of the best language experiences I had in Emacs. -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/2xjum3/haskellmode_february_2015_developments/cp0qa9a&#34;&gt;cocreature, 2015-03-01&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;ve been using it for a long time and love it. Great work on haskell-mode! Keep up the good work! -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/316hcm/month_in_haskell_mode_march_2015/cpyutph&#34;&gt;LukeHoersten, 2015-04-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This sounds wonderful. Does anything similar exist for Vim? -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/3bsa0f/month_in_haskell_mode_june_2015/cspdbb6&#34;&gt;earldouglas, 2015-07-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Users manual: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;latest version&lt;/a&gt;, older versions: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.12/&#34;&gt;13.12&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.14/&#34;&gt;13.14&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.16/&#34;&gt;13.16&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.18/&#34;&gt;13.18&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.20/&#34;&gt;13.20&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have this in your &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;init file&lt;/a&gt; (usually &lt;code&gt;~/.emacs&lt;/code&gt;). If you already have &lt;code&gt;custom-set-variables&lt;/code&gt;, merge its contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(custom-set-variables&#xA; ;; custom-set-variables was added by Custom.&#xA; ;; If you edit it by hand, you could mess it up, so be careful.&#xA; ;; Your init file should contain only one such instance.&#xA; ;; If there is more than one, they won&#39;t work right.&#xA; &#39;(package-archives&#xA;   (quote&#xA;    ((&#34;gnu&#34; . &#34;https://elpa.gnu.org/packages/&#34;)&#xA;     (&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;)))))&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run emacs, and evaluate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-refresh-contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then follow by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET haskell-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Voilà! &lt;code&gt;haskell-mode&lt;/code&gt; is installed! You should be able to edit Haskell source code in color now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Haskell-mode&lt;/code&gt; has much much more to offer but the above should get you going!&lt;/p&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;For setup instructions, please consult the integrated &lt;code&gt;haskell-mode&lt;/code&gt; Info manual which can be accessed after installation via &lt;code&gt;M-x info-display-manual [RET] haskell-mode&lt;/code&gt;. Alternatively, you can also direct your browser to the &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;the online haskell-mode manual&lt;/a&gt; for setup and user guide.&lt;/p&gt; &#xA;&lt;h2&gt;Installation - more information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; supports GNU Emacs version 25.1 or later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is available from &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; (releases) and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; (git snapshots). The latter will generally be considerably more up-to-date, and is recommended for most users.&lt;/p&gt; &#xA;&lt;p&gt;Other means of obtaining &lt;code&gt;haskell-mode&lt;/code&gt; include &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt; and &lt;a href=&#34;https://packages.debian.org/search?keywords=haskell-mode&#34;&gt;Debian package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation from git repository&lt;/h2&gt; &#xA;&lt;p&gt;Running &lt;code&gt;haskell-mode&lt;/code&gt; directly from sources is easy but requires a little preparation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/haskell/haskell-mode.git&lt;/code&gt; into a suitable directory, e.g. &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt; where &lt;code&gt;~&lt;/code&gt; stands for your home directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Assuming you have unpacked the various haskell-mode modules (&lt;code&gt;haskell-mode.el&lt;/code&gt; and the rest) in the directory &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt;, you need to generate various files, the autoloads file (&lt;code&gt;haskell-mode-autoloads.el&lt;/code&gt;) is one among them. Invoke:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make EMACS=/path/to/your/emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then adding the following command to your &lt;code&gt;.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-to-list &#39;load-path &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;(require &#39;haskell-mode-autoloads)&#xA;(add-to-list &#39;Info-default-directory-list &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation from git repository on macOS&lt;/h3&gt; &#xA;&lt;p&gt;There are a couple of things to note if you want to install directly from git on macOS systems, as of version 10.13 High Sierra:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The version of makeinfo that is installed by default in /usr/bin is quite old and will cause the above make command to exit with an error. Installing the texinfo package using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; will fix this. Be sure to follow the post-install instructions to add its bin directory to your shell&#39;s PATH variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are running an Emacs distribution packaged as a macOS application. such as the one available at &lt;a href=&#34;https://emacsformacosx.com/&#34;&gt;https://emacsformacosx.com/&lt;/a&gt;, you&#39;ll need to add its executable to your PATH before the system&#39;s default Emacs version. That project&#39;s &lt;a href=&#34;https://emacsformacosx.com/tips&#34;&gt;Tips and Tricks&lt;/a&gt; page has detailed instructions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you followed the above you are just a couple of steps away from contributing to &lt;code&gt;haskell-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is actively seeking contributions from users of &lt;code&gt;haskell-mode&lt;/code&gt;. For more information have a look at &lt;a href=&#34;https://github.com/haskell/haskell-mode/wiki/Contributing&#34;&gt;the wiki page on contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>