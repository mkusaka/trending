<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-12T01:54:19Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>renzmann/treesit-auto</title>
    <updated>2023-02-12T01:54:19Z</updated>
    <id>tag:github.com,2023-02-12:/renzmann/treesit-auto</id>
    <link href="https://github.com/renzmann/treesit-auto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic installation, usage, and fallback for tree-sitter major modes in Emacs 29&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: treesit-auto #+AUTHOR: Robb Enzmann&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; [[https://melpa.org/#/treesit-auto][file:https://melpa.org/packages/treesit-auto-badge.svg]] [[https://stable.melpa.org/#/treesit-auto][file:https://stable.melpa.org/packages/treesit-auto-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;Automatically install and use tree-sitter major modes in Emacs 29+. If the tree-sitter version can&#39;t be used, fall back to the original major mode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features Each of these behaviors are configurable and documented under the &#34;Configuration&#34; section. By activating =global-treesit-auto-mode=, Emacs will:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically switch to =&#xA;  &lt;name&gt;&#xA;   -ts-mode= when the grammar for =&#xA;   &lt;name&gt;&#xA;    = is installed&#xA;   &lt;/name&gt;&#xA;  &lt;/name&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stick with =&#xA;  &lt;name&gt;&#xA;   -mode= if the grammar isn&#39;t installed&#xA;  &lt;/name&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Optional) automatically install a grammar before opening a compatible file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is also a convenience function =M-x treesit-auto-install-all=, which will install all of the maintained and compatible grammars.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation &lt;del&gt;treesit-auto&lt;/del&gt; is available from [[https://melpa.org/][MELPA]]. After following [[https://melpa.org/#/getting-started][their setup]], you can use your preferred package manager. If that&#39;s the default =package.el=, simply =M-x package-refresh-contents= and then&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_example M-x package-install RET treesit-auto #+end_example&lt;/p&gt; &#xA;&lt;p&gt;If you want a local clone of the repository, rather than just a copy of the source, you might instead use =package-vc-install=&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src example M-x package-vc-install RET &lt;a href=&#34;https://github.com/renzmann/treesit-auto.git&#34;&gt;https://github.com/renzmann/treesit-auto.git&lt;/a&gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then, in your Emacs configuration file (=~/.emacs.d/init.el=),&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package treesit-auto :config (global-treesit-auto-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For most users, this will be enough. There are some nifty things you might want to enable, though, which are covered in the &#34;Configuration&#34; section below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What this package does Emacs 29, while featuring =treesit.el= and a convenient =treesit-install-language-grammar=, [[https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html][will not feature an intelligent way to choose]] between a default mode, such as =python-mode=, and its tree-sitter enhanced version, =python-ts-mode=. This package attempts to remedy that by adjusting the =major-mode-remap-alist= and =treesit-language-source-alist= variables in order to get the following behavior:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;1. If the grammar is installed, then switch to the appropriate tree-sitter mode:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this case, assuming we open a Python buffer, and the [[https://github.com/tree-sitter/tree-sitter-python][Python tree-sitter grammar]] is installed, then Emacs will use =python-ts-mode= instead of =python-mode=.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;2. The grammar is NOT installed and treesit-auto-install is non-nil:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When the grammar is not installed and &lt;del&gt;treesit-auto-install&lt;/del&gt; is t, then upon activating any major mode that has a corresponding tree-sitter mode, the grammar will be downloaded and compiled using &lt;del&gt;treesit-install-language-grammar&lt;/del&gt;. Emacs will then activate the tree-sitter major mode for that buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;prompt&lt;/del&gt; is like t, except a message will be displayed in the echo area asking for a yes/no response before attempting the installation.&lt;/p&gt; &#xA;&lt;p&gt;As an example for both cases: if I visit a Python file and didn&#39;t already have the grammar installed, I wind up with an installed grammar and a buffer using &lt;del&gt;python-ts-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, when &lt;del&gt;treesit-auto-install&lt;/del&gt; is nil, it will try to fall back to another major mode as described in the following two rules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;3. If the grammar is NOT installed, and a fallback is specified&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Most languages will have a fallback mode specified, such as =python-ts-mode= falling back to =python-mode=, if the grammar is not installed. If you ever need to double-check what that fallback will be, you can double check what&#39;s in the recipe for that language like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example (treesit-auto-recipe-remap (alist-get &#39;python treesit-auto-lang-recipe-alist)) â‡’ python-mode #+end_example&lt;/p&gt; &#xA;&lt;p&gt;See &#34;Configuration/Configuring behavior for a specific language&#34; in case you would like to specify different fallback modes than the default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;4. All other cases...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the most general case, where the grammar is not installed, &lt;del&gt;treesit-auto-install&lt;/del&gt; is nil, and no fallback mode is specified in the language recipe present on =treesit-auto-recipe-list=. In this case, we still gain the benefit of quickly installing grammars through =treesit-install-language-grammar= without having the build the recipe interactively, but =treesit-auto= will make no attempt to switch away from the tree-sitter mode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration If you have modified =treesit-language-source-alist= through =setq=, then it is recommended to put any configuration of this package AFTER that =setq=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Automatically install grammars if they are missing The =treesit-auto-install= variable controls whether a grammar should be installed automatically when activating a major mode compatible with tree-sitter.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;=nil=, the default, means =treesit-auto= won&#39;t try to install anything, and will rely on the fallback logic outlined above&lt;/li&gt; &#xA; &lt;li&gt;=t= means =treesit-auto= should always try to clone and install a grammar when missing&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;prompt&lt;/del&gt; will cause a yes/no prompt to appear in the minibuffer before attempting installation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq treesit-auto-install &#39;prompt) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then, supposing I don&#39;t have =libtree-sitter-python.so= (or its mac/Windows equivalent) under =~/.emacs.d/tree-sitter= (or anywhere else in =treesit-extra-load-path=), visiting a Python file or calling =M-x python-ts-mode= will generate this prompt:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example Tree-sitter grammar for python is missing. Would you like to install it from &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-python&#34;&gt;https://github.com/tree-sitter/tree-sitter-python&lt;/a&gt;? (y or n) #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Responding with &#34;yes&#34; will use =treesit-install-language-grammar= to go fetch and compile the missing grammar.&lt;/p&gt; &#xA;&lt;p&gt;The other function that respects this variable is =treesit-auto-install-all=. When =treesit-auto-install= is t, using =M-x treesit-auto-install-all= will skip all prompts. Otherwise, it will ask before attempting the installation.&lt;/p&gt; &#xA;&lt;p&gt;** Configuring behavior for a specific language The variable =treesit-auto-recipe-list= keeps track of all the language &#34;recipes.&#34; These control how =treesit-auto= decides which modes to upgrade/downgrade to/from, where the source code of the language grammar is hosted, and which C/C++ compiler to use. Each recipe can take these arguments:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example :lang :ts-mode :remap :url :revision :source-dir :cc :c++ #+end_example&lt;/p&gt; &#xA;&lt;p&gt;To create a recipe, use =make-treesit-auto-recipe=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq my-js-tsauto-config (make-treesit-auto-recipe :lang &#39;javascript :ts-mode &#39;js-ts-mode :remap &#39;(js2-mode js-mode javascript-mode) :url &#34;&lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-javascript&#34;&gt;https://github.com/tree-sitter/tree-sitter-javascript&lt;/a&gt;&#34; :revision &#34;master&#34; :source-dir &#34;src&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;treesit-auto-recipe-list my-js-tsauto-config) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here, we&#39;ve specified that the tree-sitter compiler will be creating a file named =libtree-sitter-javascript.so= (or =.dylib= or =.dll=), based on the =:lang= field. The corresponding tree-sitter mode in Emacs is called =js-ts-mode=, and all of =js2-mode=, =js-mode=, and =javascript-mode= should attempt switching to the =js-ts-mode=, if possible.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, since =js-2-mode= is first under the =:remap= section, that is the &#34;primary fallback.&#34; Meaning that if the tree-sitter grammar is not available, it will be the first mode tried. If that doesn&#39;t work, it will try =js-mode=, and =javascript-mode=, in that order, until one /does/ work. If only one fallback needs to be specified, a single quoted symbol is also acceptable. For instance, =python-ts-mode= just uses =:remap &#39;python= in this argument position.&lt;/p&gt; &#xA;&lt;p&gt;The =:url=, =:revision=, =:source-dir=, =:cc=, and =:c++= arguments are all documented under =treesit-language-source-alist=, which is part of base Emacs, not this package.&lt;/p&gt; &#xA;&lt;p&gt;** Keep track of your hooks This package does not modify any of your major mode hooks. That is, if you have functions in =python-mode-hook=, but not in =python-ts-mode-hook=, then your hook from =python-mode= will not be applied, assuming =python-ts-mode= is what gets loaded. For major modes in which this is a concern, the current recommendation is to address this as part of your configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq rust-ts-mode-hook rust-mode-hook) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Some modes have a shared base, such as =python-ts-mode= and =python-mode= both deriving from =python-base-mode=. For these languages, you can opt to hook into =python-base-mode-hook= instead of explicitly setting the tree-sitter mode&#39;s hook.&lt;/p&gt; &#xA;&lt;p&gt;** Full example This is how I configure =treesit-auto= for my own personal use.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package treesit-auto :demand t :config (setq treesit-auto-install &#39;prompt) (global-treesit-auto-mode)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Caveats This package is, admittedly, a hack. =treesit.el= provides an excellent foundation to incremental source code parsing for Emacs 29, and over time that foundation /will/ expand into an improved core editing experience. With that in mind, I fully expect this package to eventually be obsolesced by the default options in Emacs 30 and beyond. That does not preclude us from adding a few quality of life improvements to Emacs 29, though, and so it still seems prudent to have this plugin available in the meantime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contributing Bug reports, feature requests, and contributions are most welcome. Even though this is a small project, there is always room for improvement. I also appreciate &#34;nitpicky&#34; contributions, such as formatting, conventions, variable naming, code simplification, and improvements to language in documentation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Issues are tracked on [[https://github.com/renzmann/treesit-auto/issues][GitHub]], which is also where patches and pull requests should be submitted.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to submit a new language recipe to be distributed as part of this package, see [[CONTRIBUTING.md][CONTRIBUTING.md]] for a quick guide on how to write and submit the new recipe.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/evil-anzu</title>
    <updated>2023-02-12T01:54:19Z</updated>
    <id>tag:github.com,2023-02-12:/emacsorphanage/evil-anzu</id>
    <link href="https://github.com/emacsorphanage/evil-anzu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;anzu for Evil&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;evil-anzu &lt;a href=&#34;https://melpa.org/#/evil-anzu&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/evil-anzu-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/evil-anzu&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/evil-anzu-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/syohex/emacs-anzu&#34;&gt;anzu&lt;/a&gt; for &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screencast&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/evil-anzu/master/image/evil-anzu.gif&#34; alt=&#34;Screencast of evil-anzu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install evil-anzu.el from &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt; with package.el.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;evil-anzu.el&lt;/code&gt; only loading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Emacs 24.4 or higher&#xA;(with-eval-after-load &#39;evil&#xA;  (require &#39;evil-anzu))&#xA;&#xA;;; Emacs &amp;lt;= 24.3&#xA;(eval-after-load &#39;evil&#xA;  &#39;(progn&#xA;     (require &#39;evil-anzu)))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>edkolev/evil-lion</title>
    <updated>2023-02-12T01:54:19Z</updated>
    <id>tag:github.com,2023-02-12:/edkolev/evil-lion</id>
    <link href="https://github.com/edkolev/evil-lion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Evil align operator&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/edkolev/evil-lion&#34;&gt;&lt;img src=&#34;https://travis-ci.org/edkolev/evil-lion.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/evil-lion&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/evil-lion-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/23845388/6edda00c-07d0-11e7-9ea1-ffa945f03980.png&#34; alt=&#34;Emacs evil alignment operator&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;evil-lion&lt;/h1&gt; &#xA;&lt;p&gt;This package provides &lt;code&gt;gl&lt;/code&gt; and &lt;code&gt;gL&lt;/code&gt; align operators: &lt;code&gt;gl MOTION CHAR&lt;/code&gt; and right-align &lt;code&gt;gL MOTION CHAR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use CHAR &lt;code&gt;/&lt;/code&gt; to enter regular expression if a single character wouldn&#39;t suffice.&lt;/p&gt; &#xA;&lt;p&gt;Use CHAR &lt;code&gt;RET&lt;/code&gt; to align with align.el&#39;s default rules for the active major mode.&lt;/p&gt; &#xA;&lt;p&gt;Port of &lt;a href=&#34;https://github.com/tommcdo/vim-lion&#34;&gt;vim-lion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/23858247/7f33c4c6-0808-11e7-822c-e63c787c2f2b.png&#34; alt=&#34;scar&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;with &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package evil-lion&#xA;  :ensure t&#xA;  :config&#xA;  (evil-lion-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;without &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install RET evil-lion RET&lt;/code&gt;, then add in &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(evil-lion-mode)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Align with &lt;code&gt;gl MOTION CHAR&lt;/code&gt; or right-align with &lt;code&gt;gL MOTION CHAR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the align separator is &lt;code&gt;/&lt;/code&gt; you will be prompted for a regular expression instead of a plain character. If the align separator is &lt;code&gt;RET&lt;/code&gt; alignment will be performed with align.el&#39;s rules specific for the major mode.&lt;/p&gt; &#xA;&lt;p&gt;You can pass count &lt;code&gt;1&lt;/code&gt; to align on the first occurrence of &lt;code&gt;CHAR&lt;/code&gt;. To pass count, use: &lt;code&gt;COUNT gl MOTION CHAR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Example, left align &lt;code&gt;gl&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;After pressing &lt;code&gt;glip=&lt;/code&gt; (&lt;code&gt;gl&lt;/code&gt; is the operator, &lt;code&gt;ip&lt;/code&gt; text object paragraph, &lt;code&gt;=&lt;/code&gt; separator)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;one = 1&#xA;three = 3&#xA;fifteen = 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;one     = 1&#xA;three   = 3&#xA;fifteen = 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example, right align with &lt;code&gt;gL&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;After pressing &lt;code&gt;gLip,&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;one, two, three,&#xA;fifteen, sixteen, seventeen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;one,     two,     three,&#xA;fifteen, sixteen, seventeen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example, align with major mode&#39;s alignment rules:&lt;/h4&gt; &#xA;&lt;p&gt;In perl-mode, after pressing &lt;code&gt;glib RET&lt;/code&gt; (&lt;code&gt;RET&lt;/code&gt; is return key, not individal keys):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my %hash = (&#xA;   a =&amp;gt; 1,&#xA;   bbb =&amp;gt; 2,&#xA;   cccc =&amp;gt; 3,&#xA;&#xA;   a =&amp;gt; 1,&#xA;   bbb =&amp;gt; 2,&#xA;   cccccc =&amp;gt; 3&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $hash = (&#xA;   a    =&amp;gt; 1,&#xA;   bbb  =&amp;gt; 2,&#xA;   cccc =&amp;gt; 3,&#xA;&#xA;   a      =&amp;gt; 1,&#xA;   bbb    =&amp;gt; 2,&#xA;   cccccc =&amp;gt; 3&#xA;););&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example, align on the first occurrence of CHAR:&lt;/h4&gt; &#xA;&lt;p&gt;After pressing &lt;code&gt;1glip&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(red &#34;red&#34;&#xA;(teal-green &#34;#6fb593&#34;)&#xA;(wheat &#34;#b9c791&#34;)&#xA;(blue &#34;blue&#34;)&#xA;(cyan &#34;#54b6b6&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(red        &#34;red&#34;&#xA;(teal-green &#34;#6fb593&#34;)&#xA;(wheat      &#34;#b9c791&#34;)&#xA;(blue       &#34;blue&#34;)&#xA;(cyan       &#34;#54b6b6&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;Disable squeezing of spaces&lt;/h4&gt; &#xA;&lt;p&gt;By default, evil-lion will remove unnecessary spaces if there are any. To disable this behaviour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq evil-lion-squeeze-spaces nil) ;; default t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Change the default keys&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; use `g a` (mnemonic `align`)&#xA;;; these variables should be changed before (evil-lion-mode) is called&#xA;(setq evil-lion-left-align-key (kbd &#34;g a&#34;))&#xA;(setq evil-lion-right-align-key (kbd &#34;g A&#34;))&#xA;(evil-lion-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with&lt;code&gt;use-package&lt;/code&gt; and &lt;code&gt;bind-key&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(use-package evil-lion&#xA;  :ensure t&#xA;  :bind (:map evil-normal-state-map&#xA;         (&#34;g l &#34; . evil-lion-left)&#xA;         (&#34;g L &#34; . evil-lion-right)&#xA;         :map evil-visual-state-map&#xA;         (&#34;g l &#34; . evil-lion-left)&#xA;         (&#34;g L &#34; . evil-lion-right)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bind in prog modes only&lt;/h4&gt; &#xA;&lt;p&gt;Bind &lt;code&gt;evil-lion-left&lt;/code&gt; and &lt;code&gt;evil-lion-right&lt;/code&gt; to your liking. The &lt;code&gt;evil-lion-mode&lt;/code&gt; is just a convenience mode and should not be enalbed with this setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(evil-define-key &#39;normal prog-mode-map&#xA;  (kbd &#34;g l&#34;) &#39;evil-lion-left&#xA;  (kbd &#34;g L&#34;) &#39;evil-lion-right)&#xA;&#xA;(evil-define-key &#39;visual prog-mode-map&#xA;  (kbd &#34;g l&#34;) &#39;evil-lion-left&#xA;  (kbd &#34;g L&#34;) &#39;evil-lion-right)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>