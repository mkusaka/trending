<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-22T01:38:09Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>purcell/package-lint</title>
    <updated>2024-09-22T01:38:09Z</updated>
    <id>tag:github.com,2024-09-22:/purcell/package-lint</id>
    <link href="https://github.com/purcell/package-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A linting library for elisp package metadata&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/package-lint&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/package-lint-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/package-lint&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/package-lint-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/package-lint/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/purcell/package-lint/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;package-lint&lt;/h1&gt; &#xA;&lt;p&gt;This library provides a linter for the metadata in Emacs Lisp files which are intended to be packages. You can integrate it into your build process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;package-lint&lt;/code&gt; detects various issues that may make your package uninstallable or unusable for some users, and it warns about significant deviations from the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html&#34;&gt;Elisp coding conventions&lt;/a&gt;, such as non-compliant symbol naming, and use of reserved keybindings. Among other community uses, &lt;code&gt;package-lint&lt;/code&gt; is a prerequisite for submission of packages to MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;package-lint&lt;/code&gt; can be used standalone, but see also the &lt;a href=&#34;https://github.com/purcell/flycheck-package&#34;&gt;flycheck-package&lt;/a&gt; and &lt;code&gt;package-lint-flymake&lt;/code&gt; packages, which both use &lt;code&gt;package-lint&lt;/code&gt; to conveniently display packaging errors directly in the buffer while writing elisp packages.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to get &lt;code&gt;package-lint&lt;/code&gt; is as a package from the &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repository. The version of &lt;code&gt;package-lint&lt;/code&gt; there will always be up-to-date. There are also packages in &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt;, which track the &lt;a href=&#34;https://github.com/purcell/flycheck-package/tags&#34;&gt;latest numbered tag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use the command &lt;code&gt;package-lint-current-buffer&lt;/code&gt; interactively, or use &lt;code&gt;package-lint-buffer&lt;/code&gt; if linting programmatically.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a package author, you can include &lt;code&gt;package-lint&lt;/code&gt; in your build process by ensuring that the package is installed, and then using the function &lt;code&gt;package-lint-batch-and-exit&lt;/code&gt; to lint your files -- see &lt;code&gt;run-tests.sh&lt;/code&gt; in this repo for an example.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Additional checks for future versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WARN: header line formatting / capitalisation&lt;/li&gt; &#xA; &lt;li&gt;trailing line presence / formatting&lt;/li&gt; &#xA; &lt;li&gt;WARN: library is called *-mode but doesn&#39;t provide a major mode&lt;/li&gt; &#xA; &lt;li&gt;checkdoc failures for interactive functions / defcustoms&lt;/li&gt; &#xA; &lt;li&gt;trailing whitespace?&lt;/li&gt; &#xA; &lt;li&gt;themes which aren&#39;t in a matching *-theme.el file&lt;/li&gt; &#xA; &lt;li&gt;use of unsafe local variables&lt;/li&gt; &#xA; &lt;li&gt;local variable set in header line&lt;/li&gt; &#xA; &lt;li&gt;using commentary to talk about load[- ]path and installation&lt;/li&gt; &#xA; &lt;li&gt;lack of autoloads&lt;/li&gt; &#xA; &lt;li&gt;references to README files which won&#39;t be bundled in a package&lt;/li&gt; &#xA; &lt;li&gt;use of CamelCase identifiers&lt;/li&gt; &#xA; &lt;li&gt;Defining a &lt;code&gt;-mode&lt;/code&gt; function directly instead of using &lt;code&gt;define-derived-mode&lt;/code&gt; or &lt;code&gt;define-minor-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Referring to &lt;code&gt;display-graphic-p&lt;/code&gt; or &lt;code&gt;window-system&lt;/code&gt; in &lt;code&gt;-theme.el&lt;/code&gt; files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the file &lt;code&gt;LICENSE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;package-lint&lt;/code&gt; was written by &lt;a href=&#34;https://github.com/purcell&#34;&gt;Steve Purcell&lt;/a&gt; with significant contributions from &lt;a href=&#34;https://github.com/Fanael&#34;&gt;Fanael Linithien&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Author links:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;üíù Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;üíº LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;‚úç sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;üê¶ @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>