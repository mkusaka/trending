<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-18T01:51:54Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joshwnj/json-mode</title>
    <updated>2023-06-18T01:51:54Z</updated>
    <id>tag:github.com,2023-06-18:/joshwnj/json-mode</id>
    <link href="https://github.com/joshwnj/json-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major mode for editing JSON files with emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;json-mode.el&lt;/h1&gt; &#xA;&lt;p&gt;Major mode for editing JSON files.&lt;/p&gt; &#xA;&lt;p&gt;Extends the builtin js-mode to add better syntax highlighting for JSON and some nice editing keybindings.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install json-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to have the &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA repository&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable repository&lt;/a&gt; enabled in emacs for this to work.&lt;/p&gt; &#xA;&lt;h2&gt;Default Keybindings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-f&lt;/code&gt;: format the region/buffer with &lt;code&gt;json-reformat&lt;/code&gt; (&lt;a href=&#34;https://github.com/gongo/json-reformat&#34;&gt;https://github.com/gongo/json-reformat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: display a path to the object at point with &lt;code&gt;json-snatcher&lt;/code&gt; (&lt;a href=&#34;https://github.com/Sterlingg/json-snatcher&#34;&gt;https://github.com/Sterlingg/json-snatcher&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c P&lt;/code&gt;: copy a path to the object at point to the kill ring with &lt;code&gt;json-snatcher&lt;/code&gt; (&lt;a href=&#34;https://github.com/Sterlingg/json-snatcher&#34;&gt;https://github.com/Sterlingg/json-snatcher&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-t&lt;/code&gt;: Toggle between &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-k&lt;/code&gt;: Replace the sexp at point with &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-i&lt;/code&gt;: Increment the number at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-d&lt;/code&gt;: Decrement the number at point&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Indent Width&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/gongo/json-reformat#configuration&#34;&gt;https://github.com/gongo/json-reformat#configuration&lt;/a&gt; for details on setting the indent width.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hcl-emacs/terraform-mode</title>
    <updated>2023-06-18T01:51:54Z</updated>
    <id>tag:github.com,2023-06-18:/hcl-emacs/terraform-mode</id>
    <link href="https://github.com/hcl-emacs/terraform-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major mode of Terraform configuration file&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;terraform-mode.el &lt;img src=&#34;https://github.com/emacsorphanage/terraform-mode/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;a href=&#34;https://melpa.org/#/terraform-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/terraform-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/terraform-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/terraform-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Major mode of &lt;a href=&#34;http://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; configuration file&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hcl-emacs/terraform-mode/master/image/terraform-mode.png&#34; alt=&#34;terraform-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;imenu(&lt;code&gt;helm-imenu&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hcl-emacs/terraform-mode/master/image/terraform-mode-imenu.png&#34; alt=&#34;terraform-mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;terraform-mode.el&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; by &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlighting&lt;/li&gt; &#xA; &lt;li&gt;Indentation&lt;/li&gt; &#xA; &lt;li&gt;imenu&lt;/li&gt; &#xA; &lt;li&gt;Formatting using &lt;code&gt;terraform fmt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Block folding&lt;/li&gt; &#xA; &lt;li&gt;easier access to Terraform resource documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Block folding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;terraform-mode&lt;/code&gt; sets up &lt;code&gt;outline-mode&lt;/code&gt; variables for block folding. To use &lt;code&gt;outline-mode&lt;/code&gt; for block folding, enable &lt;code&gt;outline-minor-mode&lt;/code&gt; in &lt;code&gt;terraform-mode-hook&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;terraform-mode-hook #&#39;outline-minor-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;outline-toggle-children&lt;/code&gt; bound to &lt;code&gt;C-c C-f&lt;/code&gt; to toggle visibility of a block at point.&lt;/p&gt; &#xA;&lt;p&gt;We also provide function &lt;code&gt;terraform-toggle-or-indent&lt;/code&gt; which folds-or-indents. It is not bound by default, but you can bind it to &lt;code&gt;TAB&lt;/code&gt; or any other key.&lt;/p&gt; &#xA;&lt;h3&gt;Access to Terraform resource documentation&lt;/h3&gt; &#xA;&lt;p&gt;Within a &lt;code&gt;resource&lt;/code&gt; or a &lt;code&gt;data&lt;/code&gt; block, type &lt;code&gt;C-c C-d C-w&lt;/code&gt; to open a new browser tab with the resource or data documentation page.&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;C-c C-d C-c&lt;/code&gt; to kill the URL (i.e. copy it to the clipboard) for the documentation page rather than directly open it in the browser.&lt;/p&gt; &#xA;&lt;p&gt;You can also type &lt;code&gt;C-c C-d C-r&lt;/code&gt; to insert a comment containing a link to this documentation right above the resource or data block.&lt;/p&gt; &#xA;&lt;h2&gt;Customize Variables&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;code&gt;terraform-indent-level&lt;/code&gt;(Default: &lt;code&gt;2&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Indentation size. You need to call &lt;code&gt;revert-buffer&lt;/code&gt; if you change this value outer of hook such as &lt;code&gt;eval-expression&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;terraform-format-on-save&lt;/code&gt;(Default &lt;code&gt;nil&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Set to &lt;code&gt;t&lt;/code&gt; to automatically format the buffer on save.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(custom-set-variables&#xA; &#39;(terraform-indent-level 4))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;use-package&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package terraform-mode&#xA;  ;; if using straight&#xA;  ;; :straight t&#xA;&#xA;  ;; if using package.el&#xA;  ;; :ensure t&#xA;  :custom (terraform-indent-level 4)&#xA;  :config&#xA;  (defun my-terraform-mode-init ()&#xA;    ;; if you want to use outline-minor-mode&#xA;    ;; (outline-minor-mode 1)&#xA;    )&#xA;&#xA;  (add-hook &#39;terraform-mode-hook &#39;my-terraform-mode-init))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/syohex/emacs-hcl-mode&#34;&gt;hcl-mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This major-mode inherits from hcl-mode. Most of syntax features, like highlighting, indentation are implemented in hcl-mode.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>immerrr/lua-mode</title>
    <updated>2023-06-18T01:51:54Z</updated>
    <id>tag:github.com,2023-06-18:/immerrr/lua-mode</id>
    <link href="https://github.com/immerrr/lua-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs major mode for editing Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lua mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/immerrr/lua-mode&#34;&gt;&lt;img src=&#34;https://travis-ci.org/immerrr/lua-mode.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/lua-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lua-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/lua-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/lua-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/lua-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/lua-mode.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;lua-mode&lt;/strong&gt; is a major mode for editing Lua sources in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem or a suggestion about &lt;strong&gt;lua-mode&lt;/strong&gt;, please, let me know about it via github&#39;s &lt;a href=&#34;https://github.com/immerrr/lua-mode/issues&#34;&gt;Issue Tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;h3&gt;MELPA INSTALLATION&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;lua-mode&lt;/strong&gt;&#39;s officially supported installation method is from &lt;a href=&#34;https://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt; archive.&lt;/p&gt; &#xA;&lt;p&gt;To get started, enable installing packages from MELPA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fetch the list of packages you can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;M-x&amp;gt; package-refresh-contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And after that &lt;strong&gt;lua-mode&lt;/strong&gt; can be installed with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;M-x&amp;gt; package-install &#34;lua-mode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please, refer to &lt;a href=&#34;https://melpa.org/#/getting-started&#34;&gt;MELPA documentation&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html&#34;&gt;Emacs documentation on packages&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h3&gt;EL-GET INSTALLATION&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;El-get&lt;/a&gt; is a package manager which greatly simplifies adding modules to your Emacs and keeping them up-to-date. Once you have &lt;strong&gt;el-get&lt;/strong&gt; set up, &lt;strong&gt;lua-mode&lt;/strong&gt; can also be installed with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;M-x&amp;gt; el-get-install &#34;lua-mode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and updating is no more than&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;M-x&amp;gt; el-get-update &#34;lua-mode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please, consult with &lt;a href=&#34;https://github.com/dimitri/el-get/raw/master/README.md&#34;&gt;el-get documentation&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h3&gt;MANUAL INSTALLATION&lt;/h3&gt; &#xA;&lt;p&gt;To install, you need to make sure that &lt;code&gt;lua-mode.el&lt;/code&gt; is on your load-path (and optionally byte-compile it) and to set up Emacs to automatically enable &lt;strong&gt;lua-mode&lt;/strong&gt; for &lt;code&gt;*.lua&lt;/code&gt; files or ones that contain lua hash-bang line (&lt;code&gt;#!/usr/bin/lua&lt;/code&gt;). Putting this snippet to &lt;code&gt;.emacs&lt;/code&gt; should be enough in most cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;    ;;;; This snippet enables lua-mode&#xA;&#xA;    ;; This line is not necessary, if lua-mode.el is already on your load-path&#xA;    (add-to-list &#39;load-path &#34;/path/to/directory/where/lua-mode-el/resides&#34;)&#xA;&#xA;    (autoload &#39;lua-mode &#34;lua-mode&#34; &#34;Lua editing mode.&#34; t)&#xA;    (add-to-list &#39;auto-mode-alist &#39;(&#34;\\.lua$&#34; . lua-mode))&#xA;    (add-to-list &#39;interpreter-mode-alist &#39;(&#34;lua&#34; . lua-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FEATURES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;syntactic indentation &amp;amp; highlighting (including multiline literals/comments)&lt;/li&gt; &#xA; &lt;li&gt;evaluation of lines/regions/functions/files in Lua subprocess or direct interaction with its REPL&lt;/li&gt; &#xA; &lt;li&gt;documentation lookup (using online/offline reference manual, e.g. &lt;a href=&#34;http://www.lua.org/manual/5.1/manual.html#pdf-string.find&#34;&gt;string.find&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&#34;&gt;imenu&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Hideshow.html&#34;&gt;HideShow&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_mono/flymake.html&#34;&gt;Flymake&lt;/a&gt; integration for on-the-fly linting. The &lt;a href=&#34;https://github.com/lunarmodules/luacheck&#34;&gt;luacheck&lt;/a&gt; program is required for this. It can be installed e.g. via luarocks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CUSTOMIZATION&lt;/h2&gt; &#xA;&lt;p&gt;The following variables are available for customization (see more via &lt;code&gt;M-x customize-group lua&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-indent-level&lt;/code&gt; (default &lt;code&gt;3&lt;/code&gt;): indentation offset in spaces&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-indent-string-contents&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;): set to &lt;code&gt;t&lt;/code&gt; if you like to have contents of multiline strings to be indented like comments&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-indent-nested-block-content-align&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) set to &lt;code&gt;nil&lt;/code&gt; to stop aligning the content of nested blocks with the open parenthesis&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-indent-close-paren-align&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) set to &lt;code&gt;t&lt;/code&gt; to align close parenthesis with the open parenthesis rather than with the beginning of the line&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-mode-hook&lt;/code&gt;: list of functions to execute when lua-mode is initialized&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-documentation-url&lt;/code&gt; (default &lt;code&gt;&#34;http://www.lua.org/manual/5.1/manual.html#pdf-&#34;&lt;/code&gt;): base URL for documentation lookup&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-documentation-function&lt;/code&gt; (default &lt;code&gt;browse-url&lt;/code&gt;): function used to show documentation (&lt;code&gt;eww&lt;/code&gt; is a viable alternative for Emacs 25)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LUA SUBPROCESS CREATION&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-default-application&lt;/code&gt; (default &lt;code&gt;&#34;lua&#34;&lt;/code&gt;): command to start up the subprocess (REPL)&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-default-command-switches&lt;/code&gt; (default &lt;code&gt;&#34;-i&#34;&lt;/code&gt;): arguments to pass to the subprocess on startup (make sure &lt;code&gt;-i&lt;/code&gt; is there if you expect working with Lua shell interactively)&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-start-process&lt;/code&gt;: start new REPL process, usually happens automatically&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-kill-process&lt;/code&gt;: kill current REPL process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LUA SUBPROCESS INTERACTION&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-show-process-buffer&lt;/code&gt;: switch to REPL buffer&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-hide-process-buffer&lt;/code&gt;: hide window showing REPL buffer&lt;/li&gt; &#xA; &lt;li&gt;Var &lt;code&gt;lua-always-show&lt;/code&gt;: show REPL buffer after sending something&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-send-buffer&lt;/code&gt;: send whole buffer&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-send-current-line&lt;/code&gt;: send current line&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-send-defun&lt;/code&gt;: send current top-level function&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-send-region&lt;/code&gt;: send active region&lt;/li&gt; &#xA; &lt;li&gt;Cmd &lt;code&gt;lua-restart-with-whole-file&lt;/code&gt;: restart REPL and send whole buffer&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>