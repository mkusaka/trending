<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-29T01:54:15Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>plexus/chemacs2</title>
    <updated>2023-01-29T01:54:15Z</updated>
    <id>tag:github.com,2023-01-29:/plexus/chemacs2</id>
    <link href="https://github.com/plexus/chemacs2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs version switcher, improved&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+BEGIN_SRC ___ ___ ___ ___ ___ ___ ___ / /\ /&lt;strong&gt;/\ / /\ /&lt;/strong&gt;/\ / /\ / /\ / /&lt;br&gt; / /:/ \ :\ / /:/_ | |::\ / /::\ / /:/ / /:/_ / /:/ _&lt;em&gt;:\ / /:/ /\ | |:|:\ / /:/:\ / /:/ / /:/ /&lt;br&gt; / /:/ ___ ___ / /::\ / /:/ /:/&lt;/em&gt; &lt;strong&gt;|&lt;/strong&gt;|:|:\ / /:/&lt;del&gt;/::\ / /:/ ___ / /:/ /::&lt;br&gt; /&lt;strong&gt;/:/ / /\ /&lt;/strong&gt;/\ /:/:\ /&lt;strong&gt;/:/ /:/ /\ /&lt;/strong&gt;/::::| :\ /&lt;strong&gt;/:/ /:/:\ /&lt;/strong&gt;/:/ / /\ /&lt;strong&gt;/:/ /:/:&lt;br&gt; \ :\ / /:/ \ :/:/&lt;/strong&gt;/ \ :/:/ /:/ \ :~&lt;/del&gt;_&lt;em&gt;/ \ :/:/__/ \ :\ / /:/ \ :/:/~/:/ \ :\ /:/ \ ::/ \ ::/ /:/ \ :\ \ ::/ \ :\ /:/ \ \2.0 /:/ \ :/:/ \ :\ \ :/:/ \ :\ \ :\ \ :/:/ _&lt;/em&gt;/ /:/ \ ::/ \ :\ \ ::/ \ :\ \ :\ \ ::/ /__/:/ _&lt;em&gt;/ _&lt;/em&gt;/ _&lt;em&gt;/ _&lt;/em&gt;/ _&lt;em&gt;/ _&lt;/em&gt;/ __/&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                      222222222222222&#xA;                                     2:::::::::::::::22&#xA;                                     2::::::222222:::::2&#xA;                                     2222222     2:::::2&#xA;                                                 2:::::2&#xA;                                                 2:::::2&#xA;                                              2222::::2&#xA;                                         22222::::::22&#xA;                                       22::::::::222&#xA;                                      2:::::22222&#xA;                                     2:::::2&#xA;                                     2:::::2&#xA;                                     2:::::2       222222&#xA;                                     2::::::2222222:::::2&#xA;                                     2::::::::::::::::::2&#xA;                                     22222222222222222222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chemacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Chemacs 2 is an Emacs profile switcher, it makes it easy to run multiple Emacs configurations side by side.&lt;/p&gt; &#xA;&lt;p&gt;Think of it as a bootloader for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;** Differences from Chemacs 1&lt;/p&gt; &#xA;&lt;p&gt;Emacs intialization used to have a single entry point, either =&lt;del&gt;/.emacs= or =&lt;/del&gt;/.emacs.d/init.el=. More recent Emacsen have introduced a second startup script, =~/.emacs.d/early-init.el=, which runs earlier in the boot process, and can be used for things that should happen very early on, like tweaking the GC, or disabling UI elements.&lt;/p&gt; &#xA;&lt;p&gt;Chemacs 2 supports =early-init.el=, Chemacs 1 does not. This does also imply that Chemacs 2 needs to be installed as =&lt;del&gt;/.emacs.d= (a directory), rather than simply linking it to =&lt;/del&gt;/.emacs= (a single file).&lt;/p&gt; &#xA;&lt;p&gt;** Rationale&lt;/p&gt; &#xA;&lt;p&gt;Emacs configuration is either kept in a =&lt;del&gt;/.emacs= file or, more commonly, in a =&lt;/del&gt;/.emacs.d= directory. These paths are hard-coded. If you want to try out someone else&#39;s configuration, or run different distributions like Prelude or Spacemacs, then you either need to swap out =~/.emacs.d=, or run Emacs with a different =$HOME= directory set.&lt;/p&gt; &#xA;&lt;p&gt;This last approach is quite common, but has some real drawbacks, since now packages will no longer know where your actual home directory is.&lt;/p&gt; &#xA;&lt;p&gt;All of these makes trying out different Emacs configurations and distributions needlessly cumbersome.&lt;/p&gt; &#xA;&lt;p&gt;Various approaches to solving this have been floated over the years. There&#39;s an Emacs patch around that adds an extra command line option, and various examples of how to add a command line option in userspace from Emacs Lisp.&lt;/p&gt; &#xA;&lt;p&gt;Chemacs tries to implement this idea in a user-friendly way, taking care of the various edge cases and use cases that come up.&lt;/p&gt; &#xA;&lt;p&gt;** Alternatives&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 29 introduces &lt;a href=&#34;https://git.savannah.gnu.org/cgit/emacs.git/log/?qt=grep&amp;amp;q=init-directory&#34;&gt;--init-directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alphapapa/with-emacs.sh&#34;&gt;with-emacs.sh&lt;/a&gt; Emacs sandboxing shell script, works by adding a number of &lt;code&gt;--eval&lt;/code&gt; flags to Emacs startup.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;Clone the Chemacs 2 repository as =$HOME/.emacs.d=. Note that if you already have an Emacs setup in =&lt;del&gt;/.emacs.d= you need to move it out of the way first. If you have an =&lt;/del&gt;/.emacs= startup script then move that out of the way as well.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell [ -f ~/.emacs ] &amp;amp;&amp;amp; mv ~/.emacs ~/.emacs.bak [ -d ~/.emacs.d ] &amp;amp;&amp;amp; mv ~/.emacs.d ~/.emacs.default git clone &lt;a href=&#34;https://github.com/plexus/chemacs2.git&#34;&gt;https://github.com/plexus/chemacs2.git&lt;/a&gt; ~/.emacs.d #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Note that this is different from Chemacs 1. Before Chemacs installed itself as =&lt;del&gt;/.emacs= and you could have your own default setup in =&lt;/del&gt;/.emacs.d=. This approach no longer works because of =&lt;del&gt;/.emacs.d/early-init.el=, so Chemacs 2 needs to be installed as =&lt;/del&gt;/.emacs.d=.&lt;/p&gt; &#xA;&lt;p&gt;Next you will need to create a =~/.emacs-profiles.el= file, for details see below.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ((&#34;default&#34; . ((user-emacs-directory . &#34;~/.emacs.default&#34;)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;Chemacs adds an extra command line option to Emacs, =--with-profile=. Profiles are configured in =~/.emacs-profiles.el=.&lt;/p&gt; &#xA;&lt;p&gt;If no profile is given at the command line then the environment variable CHEMACS_PROFILE is used. If this environment variables isn&#39;t set then the =default= profile is used.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell $ emacs --with-profile my-profile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;There is an option for using profile that is not preconfigured in =~/.emacs-profiles.el=. To accomplish that you can directly provide the profile via the command line, like so #+BEGIN_SRC shell $ emacs --with-profile &#39;((user-emacs-directory . &#34;/path/to/config&#34;))&#39; #+END_SRC This method supports all the profile options given below.&lt;/p&gt; &#xA;&lt;p&gt;** .emacs-profiles.el&lt;/p&gt; &#xA;&lt;p&gt;This file contains an association list, with the keys/cars being the profile names, and the values/cdrs their configuration.&lt;/p&gt; &#xA;&lt;p&gt;The main thing to configure is the =user-emacs-directory=&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ((&#34;default&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/.emacs.default&#34;))) (&#34;spacemacs&#34; . ((user-emacs-directory . &#34;&lt;/del&gt;/spacemacs&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Chemacs will set this to be the =user-emacs-directory= in use, and load =init.el= from that directory.&lt;/p&gt; &#xA;&lt;p&gt;Other things you can configure&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=custom-file= : The file where Customize stores its customizations. If this isn&#39;t configured, and the =custom-file= variable is still unset after loading the profile&#39;s =init.el=, then this will get set to the profile&#39;s =init.el=&lt;/li&gt; &#xA; &lt;li&gt;=server-name= : Sets the =server-name= variable, so you can distinguish multiple instances with =emacsclient -s &#xA;  &lt;server-name&gt;&#xA;   =.&#xA;  &lt;/server-name&gt;&lt;/li&gt; &#xA; &lt;li&gt;=env= An association list of environment variables. These will get set before loading the profile, so they can influence the initialization, and they are visible to any subprocesses spawned from Emacs.&lt;/li&gt; &#xA; &lt;li&gt;=straight-p= Enable the [[https://github.com/raxod502/straight.el][Straight]] functional package manager.&lt;/li&gt; &#xA; &lt;li&gt;=nix-elisp-bundle= A directory containing elisp dependencies bundled by the nix package manager. The bundle path can be produced by nix using an expression like =(emacs.pkgs.withPackages (p: [ p.avy â€¦ ])).deps=. Because the bundle path is in the nix store, if it is specified in =.emacs-profiles.el= then that file should also be maintained by nix, to prevent the path from being garbage-collected. Alternatively, a nix-generated script or alias could specify =nix-elisp-bundle= as a command-line argument.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Store =.emacs-profiles.el= together with your dotfiles. If you&#39;re not yet keeping a version controlled directory of dotfiles, then check out [[https://github.com/plexus/dotfiles/blob/master/connect-the-dots][connect-the-dots]] for a helpful script to do that.&lt;/p&gt; &#xA;&lt;p&gt;** Changing the default profile (e.g. for GUI editors)&lt;/p&gt; &#xA;&lt;p&gt;Where it is not possible to use the =--with-profile= flag or the CHEMACS_PROFILE environment variable, the default profile can be set using a =~/.emacs-profile= file.&lt;/p&gt; &#xA;&lt;p&gt;If your =~/.emacs-profiles.el= file contains the following:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ((&#34;default&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/.emacs.default&#34;))) (&#34;spacemacs&#34; . ((user-emacs-directory . &#34;&lt;/del&gt;/spacemacs&#34;))) (&#34;prelude&#34; . ((user-emacs-directory . &#34;~/prelude&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;you can create a file called =~/.emacs-profile=, containing the name of the profile you&#39;d like to be used when none is given on the command line:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell $ echo &#39;spacemacs&#39; &amp;gt; ~/.emacs-profile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This will set the default profile to be the &#34;spacemacs&#34; profile, instead of &#34;default&#34;. You can change the default by simply changing the contents of this file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell $ echo &#39;prelude&#39; &amp;gt; ~/.emacs-profile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;If this file doesn&#39;t exist, then &#34;default&#34; will be used, as before.&lt;/p&gt; &#xA;&lt;p&gt;** Spacemacs&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs is typically installed by cloning the Spacemacs repo to =&lt;del&gt;/.emacs.d=, and doing extra customization from =&lt;/del&gt;/.spacemacs= or =~/.spacemacs.d/init.el=. This makes it tedious to switch between version of Spacemacs, or between different Spacemacs configurations.&lt;/p&gt; &#xA;&lt;p&gt;With Chemacs you can point your =user-emacs-directory= to wherever you have Spacemacs installed, and use the =SPACEMACSDIR= environment variable to point at a directory with customizations that are applied on top of the base install.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ((&#34;spacemacs&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/spacemacs&#34;) (env . ((&#34;SPACEMACSDIR&#34; . &#34;&lt;/del&gt;/.spacemacs.d&#34;)))))&lt;/p&gt; &#xA;&lt;p&gt;(&#34;spacemacs-develop&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/spacemacs/develop&#34;) (env . ((&#34;SPACEMACSDIR&#34; . &#34;&lt;/del&gt;/.spacemacs.d&#34;)))))&lt;/p&gt; &#xA;&lt;p&gt;(&#34;new-config&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/spacemacs/develop&#34;) (env . ((&#34;SPACEMACSDIR&#34; . &#34;&lt;/del&gt;/my-spacemacs-config&#34;)))))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** DOOM emacs&lt;/p&gt; &#xA;&lt;p&gt;You can add an entry similar to the following to your =.emacs-profiles.el=&lt;/p&gt; &#xA;&lt;p&gt;In the following snippet =~/doom-emacs= is where you have cloned doom emacs.&lt;/p&gt; &#xA;&lt;p&gt;(Depending on when you read this) =DOOMDIR= support is only in =develop= branch of doom emacs. Check commit history of =master= branch of doom emacs&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (&#34;doom&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/doom-emacs&#34;) (env . ((&#34;DOOMDIR&#34; . &#34;&lt;/del&gt;/doom-config&#34;))))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Please refer to [[https://github.com/plexus/chemacs/issues/5][this]] discussion for details.&lt;/p&gt; &#xA;&lt;p&gt;** FreeDesktop Directories&lt;/p&gt; &#xA;&lt;p&gt;Both =&lt;del&gt;/.emacs-profiles.el= and =&lt;/del&gt;/.emacs-profile= can also be stored under =$XDG_CONFIG_HOME/chemacs= (typically =~/.config/chemacs=) as =$XGD_CONFIG_HOME/chemacs/profiles.el= and =$XDG_CONFIG_HOME/chemacs/profile= respectively.&lt;/p&gt; &#xA;&lt;p&gt;Further, as indicated by the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS?h=emacs-27][Emacs 27.1 changelog]], Emacs is now compatible with XDG Standards, looking for its configuration files in =${XDG_CONFIG_HOME}/emacs= directory too (provided the traditional =&lt;del&gt;/.emacs.d= and =&lt;/del&gt;/.emacs= does not exist). Therefore, it is perfectly viable to install Chemacs 2 in =${XDG_CONFIG_HOME}/emacs= (usually =&lt;del&gt;/.config/emacs=) directory - with the aforementioned caveat: _the directory =&lt;/del&gt;/.emacs.d&#34;= and the file =&#34;~/.emacs&#34;= does not exist_.&lt;/p&gt; &#xA;&lt;p&gt;** Example: emacs as daemon&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Profiles You can add an entry similar to the following to your =.emacs-profiles.el= #+BEGIN_SRC emacs-lisp ;; your custom or vanilla emacs profile ((&#34;default&#34; . ((user-emacs-directory . &#34;~/.gnu-emacs&#34;) (server-name . &#34;gnu&#34;) ))&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;;; emacs distribution: DOOM-emacs (&#34;doom&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/.doom-emacs&#34;) (server-name . &#34;doom&#34;) (env . ((&#34;DOOMDIR&#34; . &#34;&lt;/del&gt;/.doom.d&#34;))) )) ) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;daemon Set emacs daemon to always run in background #+begin_src bash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;vanilla&lt;/h1&gt; &#xA;&lt;p&gt;emacs --daemon &amp;amp;&lt;/p&gt; &#xA;&lt;h1&gt;Doom emacs&lt;/h1&gt; &#xA;&lt;p&gt;emacs --with-profile doom --daemon &amp;amp; #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;emacsclient create a new frame, connect to the socket and use vanilla emacs as fallback #+begin_src bash emacsclient -c -s gnu -a emacs emacsclient -c -s doom -a emacs #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Troubleshooting&lt;/p&gt; &#xA;&lt;p&gt;*** Emacs cannot find packages installed by straight Some users have [[https://github.com/plexus/chemacs2/issues/31][reported issues]] where packages installed by &lt;code&gt;straight.el&lt;/code&gt; can no longer be found after switching to using &lt;code&gt;chemacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, make sure you haven&#39;t hardcoded filepaths to &#34;emacs.d&#34; in your configuration. You should reference files inside a profile-specific emacs folder like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq some-var (expand-file-name &#34;path/to/file&#34; user-emacs-directory)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Second, if the issue persists you should delete the &lt;code&gt;build&lt;/code&gt; folder in your &lt;code&gt;straight&lt;/code&gt; directory and rebuild your dependencies.&lt;/p&gt; &#xA;&lt;p&gt;If the issue persists please [[https://github.com/plexus/chemacs2/issues/31][comment on the issue]], because we are still trying to figure out the exact source of this problem, but this has solved the problem for some users.&lt;/p&gt; &#xA;&lt;p&gt;** LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright Â© Arne Brasseur and contributors, 2018-2022&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the terms of the GPL v3.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>minad/marginalia</title>
    <updated>2023-01-29T01:54:15Z</updated>
    <id>tag:github.com,2023-01-29:/minad/marginalia</id>
    <link href="https://github.com/minad/marginalia" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ“œ marginalia.el - Marginalia in the minibuffer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: marginalia.el - Marginalia in the minibuffer #+author: Omar AntolÃ­n Camarena, Daniel Mendler #+language: en #+export_file_name: marginalia.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Marginalia: (marginalia). #+texinfo_dir_desc: Marginalia in the minibuffer&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/packages/marginalia.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/marginalia.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/devel/marginalia.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/marginalia.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/marginalia&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/marginalia-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/marginalia&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/marginalia-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/4/4f/Marginalia_%285095211566%29.jpg&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package provides =marginalia-mode= which adds marginalia to the minibuffer completions. [[https://en.wikipedia.org/wiki/Marginalia][Marginalia]] are marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates. Marginalia can only add annotations to the completion candidates. It cannot modify the appearance of the candidates themselves, which are shown unaltered as supplied by the original command.&lt;/p&gt; &#xA;&lt;p&gt;The annotations are added based on the completion category. For example =find-file= reports the =file= category and =M-x= reports the =command= category. You can cycle between more or less detailed annotators or even disable the annotator with command =marginalia-cycle=.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/minad/marginalia/raw/screenshots/marginalia-mode.png?raw=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+toc: headlines 8&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use Marginalia together with either the [[https://github.com/minad/vertico][Vertico]], [[https://github.com/protesilaos/mct][Mct]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][Icomplete]] or the default completion UI. Furthermore Marginalia can be combined with [[https://github.com/oantolin/embark][Embark]] for action support and [[https://github.com/minad/consult][Consult]], which provides many useful commands.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable rich annotations using the Marginalia package (use-package marginalia ;; Either bind `marginalia-cycle&#39; globally or only in the minibuffer :bind ((&#34;M-A&#34; . marginalia-cycle) :map minibuffer-local-map (&#34;M-A&#34; . marginalia-cycle))&lt;/p&gt; &#xA;&lt;p&gt;;; The :init configuration is always executed (Not lazy!) :init&lt;/p&gt; &#xA;&lt;p&gt;;; Must be in the :init section of use-package such that the mode gets ;; enabled right away. Note that this forces loading the package. (marginalia-mode)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Information shown by the annotators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In general, to learn more about what different annotations mean, a good starting point is to look at &lt;del&gt;marginalia-annotator-registry&lt;/del&gt;, and follow up to the annotation function of the category you are interested in.&lt;/p&gt; &#xA;&lt;p&gt;For example the annotations for elisp symbols include their symbol class - =v= for variable, =f= for function, =c= for command, etc. For more information on what the different classifications mean, see the docstring of &lt;del&gt;marginalia--symbol-class&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adding custom annotators or classifiers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT NOTICE FOR PACKAGE AUTHORS&lt;/em&gt;: The intention of the Marginalia package is to give the user means to overwrite completion categories and to add custom annotators for existing commands in their user configuration. &lt;em&gt;Marginalia is a user facing package and is not intended to be used as a library&lt;/em&gt;. Therefore Marginalia does not expose library functions as part of its public API. If you add your own completion commands to your package we recommend to specify an =annotation-function= or an =affixation-function=, avoiding the Marginalia dependency this way. The =annotation-function= and =affixation-function= are documented in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]]. If you use =consult--read=, you can specify an =:annotate= keyword argument. There is an exception to our recommendation: If you want to implement annotations for an existing package =hypothetic.el=, which does not have annotations and where annotations cannot be added, then the creation of a =marginalia-hypothetic.el= package is a good idea, since Marginalia provides the facilities to enhance existing commands from the outside. If you have questions feel free to ask on the Marginalia issue tracker.&lt;/p&gt; &#xA;&lt;p&gt;Commands that support minibuffer completion use a completion table of all the available candidates. Candidates are associated with a &lt;em&gt;category&lt;/em&gt; such as =command=, =file=, =face=, or =variable= depending on what the candidates are. Based on the category of the candidates, Marginalia selects an &lt;em&gt;annotator&lt;/em&gt; to generate annotations for display for each candidate.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, not all commands (including Emacs&#39; builtin ones) specify the category of their candidates. To compensate for this shortcoming, Marginalia hooks into the emacs completion framework and runs the &lt;em&gt;classifiers&lt;/em&gt; listed in the variable =marginalia-classifiers=, which use the command&#39;s prompt or other properties of the candidates to specify the completion category.&lt;/p&gt; &#xA;&lt;p&gt;For example, the =marginalia-classify-by-prompt= classifier checks the minibuffer prompt against regexps listed in the =marginalia-prompt-categories= alist to determine a category. The following is already included but would be a way to assign the category =face= to all candidates from commands with prompts that include the word &#34;face&#34;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;marginalia-prompt-categories &#39;(&#34;\&amp;lt;face\&amp;gt;&#34; . face)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =marginalia-classify-by-command-name= classifier uses the alist =marginalia-command-categories= to specify the completion category based on the command name. This is particularly useful if the prompt classifier yields a false positive.&lt;/p&gt; &#xA;&lt;p&gt;Completion categories are also important for [[https://github.com/oantolin/embark][Embark]], which associates actions based on the completion category and benefits from Marginalia&#39;s classifiers.&lt;/p&gt; &#xA;&lt;p&gt;Once the category of the candidates is known, Marginalia looks in the =marginalia-annotator-registry= to find the associated annotator to use. An annotator is a function that takes a completion candidate string as an argument and returns an annotation string to be displayed after the candidate in the minibuffer. More than one annotator can be assigned to each each category, displaying more, less or different information. Use the =marginalia-cycle= command to cycle between the annotations of different annotators defined for the current category.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of a basic face annotator:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun my-face-annotator (cand) (when-let (sym (intern-soft cand)) (concat (propertize &#34; &#34; &#39;display &#39;(space :align-to center)) (propertize &#34;The quick brown fox jumps over the lazy dog&#34; &#39;face sym)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Look at Marginalia&#39;s various annotators for examples of formatting annotations. In particular, the helper function =marginalia--fields= can be used to format information into columns.&lt;/p&gt; &#xA;&lt;p&gt;After defining a new annotator, associate it with a category in the annotator registry as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;marginalia-annotator-registry &#39;(face my-face-annotator marginalia-annotate-face builtin none)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This makes the =my-face-annotator= the first of four annotators for the face category. The others are the annotator provided by Marginalia (=marginalia-annotate-face=), the =builtin= annotator as defined by Emacs and the =none= annotator, which disables the annotations. With this setting, after invoking =M-x describe-face RET= you can cycle between all of these annotators using =marginalia-cycle=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disabling annotators, builtin or lightweight annotators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Marginalia activates rich annotators by default. Depending on your preference you may want to use the builtin annotators or even no annotators by default and only activate the annotators on demand by invoking &lt;del&gt;marginalia-cycle&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to use the builtin annotators by default, you can use the following command. Replace =builtin= by =none= to disable annotators by default.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun marginalia-use-builtin () (interactive) (mapc (lambda (x) (setcdr x (cons &#39;builtin (remq &#39;builtin (cdr x))))) marginalia-annotator-registry)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If a completion category supports two annotators, you can toggle between those using this command.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun marginalia-toggle () (interactive) (mapc (lambda (x) (setcdr x (append (reverse (remq &#39;none (remq &#39;builtin (cdr x)))) &#39;(builtin none)))) marginalia-annotator-registry)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;After cycling the annotators you may want to automatically save the configuration. This can be achieved using an advice which calls &lt;del&gt;customize-save-variable&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (advice-add #&#39;marginalia-cycle :after (lambda () (let ((inhibit-message t)) (customize-save-variable &#39;marginalia-annotator-registry marginalia-annotator-registry)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In order to disable an annotator permanently, the &lt;del&gt;marginalia-annotator-registry&lt;/del&gt; can be modified. For example if you prefer to never see file annotations, you can delete all file annotators from the registry.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq marginalia-annotator-registry (assq-delete-all &#39;file marginalia-annotator-registry)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[https://elpa.gnu.org/packages/marginalia.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>karthink/consult-dir</title>
    <updated>2023-01-29T01:54:15Z</updated>
    <id>tag:github.com,2023-01-29:/karthink/consult-dir</id>
    <link href="https://github.com/karthink/consult-dir" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Insert paths into the minibuffer prompt in Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: consult-dir: insert paths into minibuffer prompts in Emacs&lt;/p&gt; &#xA;&lt;p&gt;:BADGE: [[https://melpa.org/#/consult-dir][file:https://melpa.org/packages/consult-dir-badge.svg]] :END:&lt;/p&gt; &#xA;&lt;p&gt;#+attr_html: :width 800px :align center [[file:media/consult-dir.png]]&lt;/p&gt; &#xA;&lt;p&gt;Consult-dir allows you to easily insert directory paths into the minibuffer prompt in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;When using the minibuffer, you can switch - with completion and filtering provided by your completion setup - to any directory you&#39;ve visited recently, or to a project, a bookmarked directory or even a remote host via tramp. The minibuffer prompt will be replaced with the directory you choose.&lt;/p&gt; &#xA;&lt;h1&gt;You can do this at any time, including when using the minibuffer.&lt;/h1&gt; &#xA;&lt;p&gt;Why would you want to do this?&lt;/p&gt; &#xA;&lt;p&gt;To avoid &#34;navigating&#34; long distances when picking a file or directory in any Emacs command that requires one. Here I use it to select a distant directory when copying a file with dired:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/128619960-a89b578c-b627-417b-b045-06bcbb178b71.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/128619960-a89b578c-b627-417b-b045-06bcbb178b71.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/128617436-63aeafcb-02c5-4ae8-894f-9a1f6c240267.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/128617436-63aeafcb-02c5-4ae8-894f-9a1f6c240267.mp4&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Think of it like the shell tools [[https://github.com/wting/autojump][autojump]], [[https://github.com/clvv/fasd][fasd]] or z but for Emacs. See the demos section below for many more examples. =consult-dir= works with all Emacs commands that require you to specify file paths, and with [[https://github.com/oantolin/embark][Embark actions]] on files.&lt;/p&gt; &#xA;&lt;p&gt;The directory candidates are collected from user bookmarks, Projectile project roots (if available), project.el project roots (if available) and recentf file locations. The =default-directory= variable is not changed in the process.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :TOC_3:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#installation][Installation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#with-use-package][With =use-package=]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#general-method][General method]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#demos][Demos]]&lt;/li&gt; &#xA; &lt;li&gt;[[#configuration][Configuration]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#directory-sources][Directory sources]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#bookmarks][Bookmarks]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#recent-directories][Recent directories]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#project-directories-projectel][Project directories (Project.el)]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#project-directories-projectile][Project directories (Projectile)]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#remote-hosts][Remote hosts]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#docker-hosts][Docker hosts]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#writing-your-own-directory-source][Writing your own directory source]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#default-consult-dir-action][Default =consult-dir= action]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#file-name-shadowing][File name shadowing]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#alternatives][Alternatives]]&lt;/li&gt; &#xA; &lt;li&gt;[[#acknowledgements][Acknowledgements]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation =consult-dir= is on MELPA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** With =use-package= #+BEGIN_SRC emacs-lisp (use-package consult-dir :ensure t :bind ((&#34;C-x C-d&#34; . consult-dir) :map minibuffer-local-completion-map (&#34;C-x C-d&#34; . consult-dir) (&#34;C-x C-j&#34; . consult-dir-jump-file))) #+END_SRC Replace =minibuffer-local-completion-map= above with&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=vertico-map= if you use Vertico,&lt;/li&gt; &#xA; &lt;li&gt;=selectrum-minibuffer-map= if you use Selectrum.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** General method After adding MELPA to your package archives, #+BEGIN_SRC emacs-lisp (add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;&lt;a href=&#34;http://melpa.org/packages/&#34;&gt;http://melpa.org/packages/&lt;/a&gt;&#34;)) #+END_SRC you can install it with =M-x package-install consult-dir= and bind =consult-dir= as convenient: #+begin_src emacs-lisp (define-key global-map (kbd &#34;C-x C-d&#34;) #&#39;consult-dir) (define-key minibuffer-local-completion-map (kbd &#34;C-x C-d&#34;) #&#39;consult-dir) #+end_src If you want to use the file-jump functionality, you can bind =consult-dir-jump-file= in the =minibuffer-local-completion-map=. #+BEGIN_SRC emacs-lisp (define-key minibuffer-local-completion-map (kbd &#34;C-x C-j&#34;) #&#39;consult-dir-jump-file) #+END_SRC Replace =minibuffer-local-completion-map= above with&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=vertico-map= if you use Vertico,&lt;/li&gt; &#xA; &lt;li&gt;=selectrum-minibuffer-map= if you use Selectrum.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Call =consult-dir= when in the minibuffer to choose a directory with completion and insert it into the minibuffer prompt, shadowing or replacing the directory path showing currently. The file name part of the text is retained. This lets the user switch to distant directories very quickly when finding files, for instance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Call =consult-dir= from a regular buffer to choose a directory with completion and then interactively find a file in that directory. The command run with this directory is configurable via =consult-dir-default-command= and defaults to =find-file=.&lt;/p&gt; &#xA;&lt;p&gt;Call =consult-dir-jump-file= from the minibuffer to asynchronously find a file anywhere under the directory that is currently in the prompt. This can be used with =consult-dir= to quickly switch directories and find files at an arbitrary depth under them. =consult-dir-jump-file= uses =consult-find= under the hood.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demos Here I show the different directory sources using Consult&#39;s narrowing feature, then use =consult-dir= to easily jump around the filesystem and open files. I also use =consult-dir-jump-file= to quickly drill down a directory when I don&#39;t find the file I&#39;m looking for at the top level:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/127817864-57ca9ec5-af67-4ee8-9410-4758c8450c4b.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/127817864-57ca9ec5-af67-4ee8-9410-4758c8450c4b.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/127790046-309df054-3e89-4e3c-adcf-16ec5028ad80.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/127790046-309df054-3e89-4e3c-adcf-16ec5028ad80.mp4&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;In this demo I call =consult-grep= with a prefix argument. This requires me to specify a directory to grep inside of, so I use =consult-dir= to specify that directory:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/127790057-1fa9f81b-2c3f-412d-be36-925773451c71.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/127790057-1fa9f81b-2c3f-412d-be36-925773451c71.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here I use =consult-dir= to jump to one of my project directories when attaching a file to an email:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/127790065-39ddc117-5e1a-4580-a009-bc0cebd71ad8.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/127790065-39ddc117-5e1a-4580-a009-bc0cebd71ad8.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this example I combine =consult-dir= with Embark. I use =consult-dir= to specify a directory, then Embark to spawn an eshell there. I then use =consult-dir= again when tab-completing inside eshell to specify a distant directory to copy files from. Finally I use =consult-dir= with Embark to jump to a bookmark in a window-split:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/127790071-4f98d212-c127-48e1-84cd-01701cd63d64.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/127790071-4f98d212-c127-48e1-84cd-01701cd63d64.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(In these demos I am using Vertico as my completion system.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration =consult-dir= should work out of the box with no configuration needed beyond binding it to a key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, only bookmarked directories and Project.el projects are displayed by default. if you use Projectile or want finer control over the directories that are offered as candidates to jump to, read on.&lt;/p&gt; &#xA;&lt;p&gt;** Directory sources *** Bookmarks Enabled by default. To disable, customize =consult-dir-sources=.&lt;/p&gt; &#xA;&lt;p&gt;*** Recent directories To enable, turn on recentf-mode. (=M-x recentf-mode=). Note that if you don&#39;t already use recentf-mode, the recentf directory cache will start out empty and build up over time as you use Emacs.&lt;/p&gt; &#xA;&lt;p&gt;*** Project directories (Project.el) Enabled by default. To disable, customize =consult-dir-project-list-function= or #+BEGIN_SRC emacs-lisp (setq consult-dir-project-list-function nil) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Project directories (Projectile) To enable, customize =consult-dir-project-list-function= or #+BEGIN_SRC emacs-lisp (setq consult-dir-project-list-function #&#39;consult-dir-projectile-dirs) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Remote hosts Also included are a number of sources for interacting with remote hosts via tramp, principally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=consult-dir--source-tramp-local= for a set list of local/custom hosts (see =consult-dir-tramp-local-hosts= to customize)&lt;/li&gt; &#xA; &lt;li&gt;=consult-dir--source-tramp-ssh= for a list of parsed hosts from your =~/.ssh/config=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default consult-dir does not display known SSH hosts as a separate directory source. If you wish to enable it, customize =consult-dir-sources= or use the following:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;consult-dir-sources &#39;consult-dir--source-tramp-ssh t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Docker hosts&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible to define a source to switch to Docker containers using consult-dir. Note that this requires the [[https://github.com/emacs-pe/docker-tramp.el][docker-tramp]] package to be installed:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun consult-dir--tramp-docker-hosts () &#34;Get a list of hosts from docker.&#34; (when (require &#39;docker-tramp nil t) (let ((hosts) (docker-tramp-use-names t)) (dolist (cand (docker-tramp--parse-running-containers)) (let ((user (unless (string-empty-p (car cand)) (concat (car cand) &#34;@&#34;))) (host (car (cdr cand)))) (push (concat &#34;/docker:&#34; user host &#34;:/&#34;) hosts))) hosts)))&lt;/p&gt; &#xA;&lt;p&gt;(defvar consult-dir--source-tramp-docker &lt;code&gt;(:name &#34;Docker&#34; :narrow ?d :category file :face consult-file :history file-name-history :items ,#&#39;consult-dir--tramp-docker-hosts) &#34;Docker candiadate source for &lt;/code&gt;consult-dir&#39;.&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; Adding to the list of consult-dir sources (add-to-list &#39;consult-dir-sources &#39;consult-dir--source-tramp-docker t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then amend =consult-dir-sources= as in the above snippet to include the source you defined.&lt;/p&gt; &#xA;&lt;p&gt;*** Writing your own directory source If none of the above include directories you want to jump to, you can write your own source. As a template, here is a source that adds paths provided by the shell tool [[https://github.com/clvv/fasd][Fasd]] to consult-dir:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ;; A function that returns a list of directories (defun consult-dir--fasd-dirs () &#34;Return list of fasd dirs.&#34; (split-string (shell-command-to-string &#34;fasd -ld&#34;) &#34;\n&#34; t))&lt;/p&gt; &#xA;&lt;p&gt;;; A consult source that calls this function (defvar consult-dir--source-fasd &lt;code&gt;(:name &#34;Fasd dirs&#34; :narrow ?f :category file :face consult-file :history file-name-history :enabled ,(lambda () (executable-find &#34;fasd&#34;)) :items ,#&#39;consult-dir--fasd-dirs) &#34;Fasd directory source for &lt;/code&gt;consult-dir&#39;.&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; Adding to the list of consult-dir sources (add-to-list &#39;consult-dir-sources &#39;consult-dir--source-fasd t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;For additional directory sources, check out the [[https://github.com/karthink/consult-dir/wiki#additional-directory-sources][wiki]].&lt;/p&gt; &#xA;&lt;p&gt;** Default =consult-dir= action When called from a regular buffer (/i.e/ not the minibuffer), =consult-dir= defaults to calling =find-file= after you choose a directory. To set it to open the directory in dired instead or to run a custom command, customize =consult-dir-default-command=.&lt;/p&gt; &#xA;&lt;p&gt;** File name shadowing By default, choosing a directory using =consult-dir= when in the minibuffer results in the text already in the prompt being &#34;shadowed&#34; or made inactive, but you can still delete the new text to recover it. You can make the new text replace the old instead by setting =consult-dir-shadow-filenames= to =nil=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives =consult-dir= is akin to shell tools like [[https://github.com/wting/autojump][autojump]] or [[https://github.com/clvv/fasd][fasd]] but for all file/directory contexts in Emacs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=consult-buffer= (part of Consult) already allows you to switch to bookmarks and recentf files, so this might be sufficient for you if you need to visit a proximal set of files quickly. =consult-dir= is different in that it is composable with all Emacs commands that require you to specify a directory and thus works in more contexts.&lt;/p&gt; &#xA;&lt;p&gt;Projectile and the built-in project.el have extensive support for listing and quickly switching projects and running actions on them. =consult-dir= is more of a one-stop shop (&#34;just get me there&#34;) for switching directories as it includes recent directories and bookmarks in the mix, allows jumping to files with =consult-dir-jump-file=, and supports running arbitrary actions on directories using Embark. Of course, it also allows for fast directory selection when using any Emacs command that requires specifying a directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/dmendler][Daniel Mendler]] for writing Consult and help with the code&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin][Omar Antolin Camarena]] for many suggestions on the design of consult-dir&lt;/li&gt; &#xA; &lt;li&gt;[[https://old.reddit.com/r/emacs/comments/p4wk1u/consultdir_switch_directories_in_emacs_at_any_time/h936s3t/][u/harizvi]] for the code to include Fasd directories.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/elken][Ellis KenyÅ‘]] for the TRAMP directory sources.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;eval: (when (featurep &#39;toc-org) (toc-org-mode))&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
</feed>