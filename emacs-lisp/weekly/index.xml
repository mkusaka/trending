<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-07T01:54:21Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>clojure-emacs/parseclj</title>
    <updated>2023-05-07T01:54:21Z</updated>
    <id>tag:github.com,2023-05-07:/clojure-emacs/parseclj</id>
    <link href="https://github.com/clojure-emacs/parseclj" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clojure Parser for Emacs Lisp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/clojure-emacs/parseclj&#34;&gt;&lt;img src=&#34;https://travis-ci.org/clojure-emacs/parseclj.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Clojure parser for Emacs Lisp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;parseclj&lt;/code&gt; is an Emacs Lisp library for parsing Clojure code and &lt;a href=&#34;https://github.com/edn-format/edn&#34;&gt;EDN data&lt;/a&gt;. It supports several input and output formats, all powered by the same shift-reduce parser function.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/parseclj/main/DESIGN.md&#34;&gt;design document&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;parseclj&lt;/code&gt; is in &lt;strong&gt;alpha&lt;/strong&gt; state right now, its API might be subject to change.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Available on the major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repos.&lt;/p&gt; &#xA;&lt;p&gt;MELPA Stable is the recommended repo as it has the latest stable version. MELPA has a development snapshot for users who don&#39;t mind (infrequent) breakage but don&#39;t want to run from a git checkout.&lt;/p&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;parseclj&lt;/code&gt; using the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-install [RET] parseclj [RET]&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;or if you&#39;d rather keep it in your dotfiles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(unless (package-installed-p &#39;parseclj)&#xA;  (package-install &#39;parseclj))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the installation doesn&#39;t work try refreshing the package list:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-refresh-contents&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;parseclj&lt;/code&gt; contains function that return an &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;&gt;AST&lt;/a&gt; that, for example, given as input &lt;code&gt;(1 2 [:a :b :c])&lt;/code&gt;, it looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;((:node-type . :root)&#xA; (:position . 1)&#xA; (:children ((:node-type . :list)&#xA;             (:position . 1)&#xA;             (:children ((:node-type . :number)&#xA;                         (:position . 2)&#xA;                         (:form . &#34;1&#34;)&#xA;                         (:value . 1))&#xA;                        ((:node-type . :number)&#xA;                         (:position . 4)&#xA;                         (:form . &#34;2&#34;)&#xA;                         (:value . 2))&#xA;                        ((:node-type . :vector)&#xA;                         (:position . 6)&#xA;                         (:children ((:node-type . :keyword)&#xA;                                     (:position . 7)&#xA;                                     (:form . &#34;:a&#34;)&#xA;                                     (:value . :a))&#xA;                                    ((:node-type . :keyword)&#xA;                                     (:position . 10)&#xA;                                     (:form . &#34;:b&#34;)&#xA;                                     (:value . :b))&#xA;                                    ((:node-type . :keyword)&#xA;                                     (:position . 13)&#xA;                                     (:form . &#34;:c&#34;)&#xA;                                     (:value . :c))))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to use any of these functions, you first need to require it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;parseclj)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you will have the following functions at your disposal:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;parseclj-parse-clojure&lt;/code&gt; &amp;amp;rest string-and-options&lt;/p&gt; &lt;p&gt;When no arguments, parses Clojure source code into an AST and returns it. When given a string as a first argument, parses it and returns the corresponding AST.&lt;/p&gt; &lt;p&gt;A list of options can be passed down to the parsing process, particularly:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;:lexical-preservation&lt;/code&gt;: a boolean value to retain whitespace, comments, and discards. Defaults to nil.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;:fail-fast&lt;/code&gt;: a boolean value to raise an error when encountering invalid syntax. Defaults to t.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Examples:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(parseclj-parse-clojure) ;; will parse clojure code in the current buffer and return an AST&#xA;(parseclj-parse-clojure &#34;(1 2 3)&#34;)  ;; =&amp;gt; ((:node-type . :root) ... )&#xA;(parseclj-parse-clojure :lexical-preservation t) ;; will parse clojure code in current buffer preserving whitespaces, comments and discards&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Note: there&#39;s an open issue to extend this API to &lt;a href=&#34;https://github.com/clojure-emacs/parseclj/issues/13&#34;&gt;parse clojure code within some boundaries of a buffer&lt;/a&gt;. Pull requests are welcome.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;parseclj-unparse-clojure&lt;/code&gt; ast&lt;/p&gt; &lt;p&gt;Transform the given AST into Clojure source code and inserts it into the current buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;parseclj-unparse-clojure-to-string&lt;/code&gt; ast&lt;/p&gt; &lt;p&gt;Transfrom the given AST into Clojure source code and returns it as a string.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Â© 2017-2021 Arne Brasseur and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the terms of the GNU General Public License 3.0 or later. See &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/parseclj/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-dashboard/emacs-dashboard</title>
    <updated>2023-05-07T01:54:21Z</updated>
    <id>tag:github.com,2023-05-07:/emacs-dashboard/emacs-dashboard</id>
    <link href="https://github.com/emacs-dashboard/emacs-dashboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extensible emacs dashboard&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPL%20v3-blue.svg]] [[https://jcs-emacs.github.io/jcs-elpa/#/dashboard][https://raw.githubusercontent.com/jcs-emacs/badges/master/elpa/v/dashboard.svg]] [[https://melpa.org/#/dashboard][https://melpa.org/packages/dashboard-badge.svg]] [[https://stable.melpa.org/#/dashboard][https://stable.melpa.org/packages/dashboard-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs Dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/emacs-dashboard/emacs-dashboard/actions/workflows/test.yml][https://github.com/emacs-dashboard/emacs-dashboard/workflows/CI/badge.svg]] [[https://github.com/emacs-dashboard/emacs-dashboard/actions/workflows/activate.yml][https://github.com/emacs-dashboard/emacs-dashboard/workflows/Activate/badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;An extensible emacs startup screen showing you what&#39;s most important.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Features&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Displays an awesome Emacs banner!&lt;/li&gt; &#xA;   &lt;li&gt;Recent files&lt;/li&gt; &#xA;   &lt;li&gt;Bookmarks list&lt;/li&gt; &#xA;   &lt;li&gt;Recent projects list (Depends on &lt;code&gt;projectile&lt;/code&gt; or &lt;code&gt;project.el&lt;/code&gt; package)&lt;/li&gt; &#xA;   &lt;li&gt;Org mode agenda&lt;/li&gt; &#xA;   &lt;li&gt;Register list&lt;/li&gt; &#xA;   &lt;li&gt;Supports both [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] and [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]]&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Screenshot&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[./etc/screenshot.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependencies You will need the following packages which are all available on Melpa:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;(optional) page-break-lines - [[https://github.com/purcell/page-break-lines]]&lt;/li&gt; &#xA; &lt;li&gt;(optional) projectile - [[https://github.com/bbatsov/projectile]]&lt;/li&gt; &#xA; &lt;li&gt;(optional) all-the-icons - [[https://github.com/domtronn/all-the-icons.el]]&lt;/li&gt; &#xA; &lt;li&gt;(optional) nerd-icons - [[https://github.com/rainstormstudio/nerd-icons.el]]&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell M-x package-install RET dashboard #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Open the Dashboard You can set up the dashboard to open automatically at startup using =dashboard-setup-startup-hook=: #+BEGIN_SRC elisp (require &#39;dashboard) (dashboard-setup-startup-hook) ;; Or if you use use-package (use-package dashboard :ensure t :config (dashboard-setup-startup-hook)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you don&#39;t want the dashboard to open by default, you can use the interactive function =dashboard-open= to open it when you do want it.&lt;/p&gt; &#xA;&lt;p&gt;By default, the dashboard will show three lists, recent files and bookmarks and org-agenda items.&lt;/p&gt; &#xA;&lt;p&gt;The widget âprojectsâ, which shows a list of recent projects, is not enabled by default since it depends on packages that might not be available. To activate the widget, set the variable =dashboard-projects-backend= to either =&#39;projectile= (projectile, available from melpa) or =&#39;project-el= (project.el, available from GNU elpa), then add an entry like =(projects . 5)= to the variable =dashboard-items=.&lt;/p&gt; &#xA;&lt;p&gt;The function =dashboard-refresh-buffer= (an alias for =dashboard-open=) can be used to visit and refresh the dashboard.&lt;/p&gt; &#xA;&lt;p&gt;** Emacs Daemon&lt;/p&gt; &#xA;&lt;p&gt;In addition to the above, configure =initial-buffer-choice= to show Dashboard in frames created with =emacsclient -c= as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (setq initial-buffer-choice (lambda () (get-buffer-create &#34;&lt;em&gt;dashboard&lt;/em&gt;&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To update the banner or banner title&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp ;; Set the title (setq dashboard-banner-logo-title &#34;Welcome to Emacs Dashboard&#34;) ;; Set the banner (setq dashboard-startup-banner [VALUE]) ;; Value can be ;; - nil to display no banner ;; - &#39;official which displays the official emacs logo ;; - &#39;logo which displays an alternative emacs logo ;; - 1, 2 or 3 which displays one of the text banners ;; - &#34;path/to/your/image.gif&#34;, &#34;path/to/your/image.png&#34; or &#34;path/to/your/text.txt&#34; which displays whatever gif/image/text you would prefer ;; - a cons of &#39;(&#34;path/to/your/image.png&#34; . &#34;path/to/your/text.txt&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; Content is not centered by default. To center, set (setq dashboard-center-content t)&lt;/p&gt; &#xA;&lt;p&gt;;; To disable shortcut &#34;jump&#34; indicators for each section, set (setq dashboard-show-shortcuts nil) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To customize which widgets are displayed, you can use the following snippet #+BEGIN_SRC elisp (setq dashboard-items &#39;((recents . 5) (bookmarks . 5) (projects . 5) (agenda . 5) (registers . 5))) #+END_SRC This will add the recent files, bookmarks, projects, org-agenda and registers widgets to your dashboard each displaying 5 items.&lt;/p&gt; &#xA;&lt;p&gt;To add your own custom widget is pretty easy, define your widget&#39;s callback function and add it to &lt;code&gt;dashboard-items&lt;/code&gt; as such: #+BEGIN_SRC elisp (defun dashboard-insert-custom (list-size) (insert &#34;Custom text&#34;)) (add-to-list &#39;dashboard-item-generators &#39;(custom . dashboard-insert-custom)) (add-to-list &#39;dashboard-items &#39;(custom) t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To add an icon to a custom widget, insert it with &lt;code&gt;dashboard-insert-heading&lt;/code&gt; in your custom function. In this example, there is an icon but no shortcut. #+BEGIN_SRC elisp (defun dashboard-insert-custom (list-size) (dashboard-insert-heading &#34;News:&#34; nil (all-the-icons-faicon &#34;newspaper-o&#34; :height 1.2 :v-adjust 0.0 :face &#39;dashboard-heading)) (insert &#34;\n&#34;) (insert &#34; Custom text&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To modify the widget heading name: #+BEGIN_SRC elisp (setq dashboard-item-names &#39;((&#34;Recent Files:&#34; . &#34;Recently opened files:&#34;) (&#34;Agenda for today:&#34; . &#34;Today&#39;s agenda:&#34;) (&#34;Agenda for the coming week:&#34; . &#34;Agenda:&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;del&gt;all-the-icons&lt;/del&gt; package: #+BEGIN_SRC emacs-lisp (setq dashboard-icon-type &#39;all-the-icons) ;; use `all-the-icons&#39; package #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;del&gt;nerd-icons&lt;/del&gt; package: #+BEGIN_SRC emacs-lisp (setq dashboard-display-icons-p t) ;; display icons on both GUI and terminal (setq dashboard-icon-type &#39;nerd-icons) ;; use `nerd-icons&#39; package #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To add icons to the widget headings and their items: #+BEGIN_SRC elisp (setq dashboard-set-heading-icons t) (setq dashboard-set-file-icons t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To modify heading icons with another icon from all-the-icons octicons: #+BEGIN_SRC elisp (dashboard-modify-heading-icons &#39;((recents . &#34;file-text&#34;) (bookmarks . &#34;book&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To modify heading icons with another icon from nerd-icons octicons: #+BEGIN_SRC emacs-lisp (dashboard-modify-heading-icons &#39;((recents . &#34;nf-oct-file_text&#34;) (bookmarks . &#34;nf-oct-book&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To show navigator below the banner: #+BEGIN_SRC emacs-lisp (setq dashboard-set-navigator t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To customize the buttons of the navigator like this: #+BEGIN_SRC emacs-lisp ;; Format: &#34;(icon title help action face prefix suffix)&#34; (setq dashboard-navigator-buttons `(;; line1 ((,(all-the-icons-octicon &#34;mark-github&#34; :height 1.1 :v-adjust 0.0) &#34;Homepage&#34; &#34;Browse homepage&#34; (lambda (&amp;amp;rest _) (browse-url &#34;homepage&#34;))) (&#34;â&#34; &#34;Star&#34; &#34;Show stars&#34; (lambda (&amp;amp;rest _) (show-stars)) warning) (&#34;?&#34; &#34;&#34; &#34;?/h&#34; #&#39;show-help nil &#34;&amp;lt;&#34; &#34;&amp;gt;&#34;)) ;; line 2 ((,(all-the-icons-faicon &#34;linkedin&#34; :height 1.1 :v-adjust 0.0) &#34;Linkedin&#34; &#34;&#34; (lambda (&amp;amp;rest _) (browse-url &#34;homepage&#34;))) (&#34;â&#34; nil &#34;Show flags&#34; (lambda (&amp;amp;rest _) (message &#34;flag&#34;)) error)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To show info about the packages loaded and the init time: #+BEGIN_SRC elisp (setq dashboard-set-init-info t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Also, the message can be customized like this: #+BEGIN_SRC elisp (setq dashboard-init-info &#34;This is an init message!&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;A randomly selected footnote will be displayed. To disable it: #+BEGIN_SRC elisp (setq dashboard-set-footer nil) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To customize it and customize its icon;&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (setq dashboard-footer-messages &#39;(&#34;Dashboard is pretty cool!&#34;)) (setq dashboard-footer-icon (all-the-icons-octicon &#34;dashboard&#34; :height 1.1 :v-adjust -0.05 :face &#39;font-lock-keyword-face)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To use it with [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] or [[https://github.com/bbatsov/persp-projectile][persp-projectile]]&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq dashboard-projects-switch-function &#39;counsel-projectile-switch-project-by-name) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq dashboard-projects-switch-function &#39;projectile-persp-switch-project) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Org modeâs agenda&lt;/p&gt; &#xA;&lt;p&gt;To display todayâs agenda items on the dashboard, add &lt;del&gt;agenda&lt;/del&gt; to &lt;del&gt;dashboard-items&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (add-to-list &#39;dashboard-items &#39;(agenda) t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To show agenda for the upcoming seven days set the variable &lt;del&gt;dashboard-week-agenda&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;. #+BEGIN_SRC elisp (setq dashboard-week-agenda t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;By default org-agenda entries are filter by time, only showing those task with &lt;del&gt;DEADLINE&lt;/del&gt;, &lt;del&gt;SCHEDULE-TIME&lt;/del&gt; or &lt;del&gt;TIMESTAMP&lt;/del&gt; . To show all agenda entries (except &lt;del&gt;DONE&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq dashboard-filter-agenda-entry &#39;dashboard-no-filter-agenda) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To have an extra filter, &lt;del&gt;MATCH&lt;/del&gt; parameter is exposed as &lt;del&gt;dashboard-match-agenda-entry&lt;/del&gt; variable, by default is &lt;del&gt;nil&lt;/del&gt; #+begin_quote âMATCHâ is a tags/property/TODO match. Org iterates only matched headlines. Org iterates over all headlines when MATCH is nil or t. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;See [[https://orgmode.org/manual/Using-the-Mapping-API.html][Org Manual]] for more information.&lt;/p&gt; &#xA;&lt;p&gt;Once the agenda appears in the dashboard, &lt;del&gt;org-agenda-files&lt;/del&gt; stay open. With &lt;del&gt;(setq dashboard-agenda-release-buffers t)&lt;/del&gt; the org files are close. Note that this could slow down the dashboard buffer refreshment.&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda sort&lt;/p&gt; &#xA;&lt;p&gt;Agenda is now sorted with &lt;del&gt;dashboard-agenda-sort-strategy&lt;/del&gt; following the idea of [[https://orgmode.org/worg/doc.html#org-agenda-sorting-strategy][org-agenda-sorting-strategy]]. Suported strategies are &lt;del&gt;priority-up&lt;/del&gt;, &lt;del&gt;priority-down&lt;/del&gt;, &lt;del&gt;time-up&lt;/del&gt;, &lt;del&gt;time-down&lt;/del&gt;, &lt;del&gt;todo-state-up&lt;/del&gt; and &lt;del&gt;todo-state-down&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda format&lt;/p&gt; &#xA;&lt;p&gt;To personalize the aspect of each entry, there is &lt;del&gt;dashboard-agenda-prefix-format&lt;/del&gt; which initial value is &lt;del&gt;&#34; %i %-12:c %-10s &#34;&lt;/del&gt; where &lt;del&gt;%i&lt;/del&gt; is the icon category of the item (see [[https://orgmode.org/worg/doc.html#org-agenda-category-icon-alist][org-agenda-category-icon-alist]]), &lt;del&gt;%-12:c&lt;/del&gt; gives the category a 12 chars wide field and append a colon to the category. A similar padding but for a 10 wide field is &lt;del&gt;%-10s&lt;/del&gt; that is for the scheduling or deadline information. For more information see [[https://orgmode.org/worg/doc.html#org-agenda-prefix-format][org-agenda-prefix-format]].&lt;/p&gt; &#xA;&lt;p&gt;Deadline or Scheduling time will be formatted using &lt;del&gt;dashboard-agenda-time-string-format&lt;/del&gt; and the keywords (TODO, DONE) respect [[https://orgmode.org/worg/doc.html#org-agenda-todo-keyword-format][org-agenda-todo-keyword-format]].&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda tags&lt;/p&gt; &#xA;&lt;p&gt;To customize the tags format there is a variable &lt;del&gt;dashboard-agenda-tags-format&lt;/del&gt;. This variable could be any function that receives the tags directly from &lt;del&gt;org-get-tags&lt;/del&gt;. By default &lt;del&gt;dashboard-agenda-tags-format&lt;/del&gt; is set to &lt;del&gt;identity&lt;/del&gt;. To hide the tags set the variable to &lt;del&gt;ignore&lt;/del&gt;: &lt;del&gt;(setq dashboard-agenda-tags-format &#39;ignore)&lt;/del&gt; or to &lt;del&gt;nil&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Faces&lt;/p&gt; &#xA;&lt;p&gt;It is possible to customize Dashboard&#39;s appearance using the following faces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-banner-logo-title&lt;/del&gt; :: Highlights the banner title.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-text-banner&lt;/del&gt; :: Highlights text banners.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-heading&lt;/del&gt; :: Highlights widget headings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-items-face&lt;/del&gt; :: Highlights widget items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shortcuts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use any of the following shortcuts inside Dashboard&lt;/p&gt; &#xA;&lt;p&gt;|----------------------------+------------------| | Shortcut | Function | |----------------------------+------------------| | Tab Or C-i | Next Item | | Shift-Tab | Previous Item | | Return / Mouse Click / C-m | Open | | r | Recent files | | m | Bookmarks | | p | Projects | | a | Org-Mode Agenda | | e | Registers | | g | Refresh contents | | { | Previous section | | } | Next section | |----------------------------+------------------|&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Wish List&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Center content&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More banner options&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizing the list of widgets to display&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrate Org-mode&#39;s agenda&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Listing Perspectives&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contributions&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To contribute your changes to this package, please do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo&lt;/li&gt; &#xA; &lt;li&gt;Clone a local copy&lt;/li&gt; &#xA; &lt;li&gt;Make your changes&lt;/li&gt; &#xA; &lt;li&gt;Push and create your PR&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When working on this package, it&#39;s typical to uninstall dashboard, develop your changes and then install this as &#34;development version&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This is accomplished with the following steps:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell&lt;/p&gt; &#xA;&lt;h1&gt;In emacs:&lt;/h1&gt; &#xA;&lt;p&gt;M-x package-delete dashboard-&#xA; &lt;version&gt;&#xA;   RET #+END_SRC&#xA; &lt;/version&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell make package make install #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Prerequisites&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/emacs-eask/cli][Eask]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nicferrier/emacs-kv</title>
    <updated>2023-05-07T01:54:21Z</updated>
    <id>tag:github.com,2023-05-07:/nicferrier/emacs-kv</id>
    <link href="https://github.com/nicferrier/emacs-kv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Key/Value collection type functions: for alists, hashtables and plists. Useful stuff.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;A collection of tools for dealing with key/value data structures such as plists, alists and hash-tables.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;filter-keys alist &amp;amp;rest keys ===&lt;/p&gt; &#xA;&lt;p&gt;Return the //alist// filtered to the //keys// list.&lt;/p&gt; &#xA;&lt;p&gt;Only pairs where the car is a [[member]] of //keys// will be returned.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;hash alist &amp;amp;rest hash-table-args ===&lt;/p&gt; &#xA;&lt;p&gt;Convert //alist// to a HASH.&lt;/p&gt; &#xA;&lt;p&gt;//hash-table-args// are passed to the hash-table creation.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;keys alist ===&lt;/p&gt; &#xA;&lt;p&gt;Get just the keys from the alist.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;plist alist ===&lt;/p&gt; &#xA;&lt;p&gt;Convert an alist to a plist.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-&amp;gt;values alist ===&lt;/p&gt; &#xA;&lt;p&gt;Get just the values from the alist.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-keys-&amp;gt;* alist fn ===&lt;/p&gt; &#xA;&lt;p&gt;Convert the keys of //alist// through //fn//.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-keys-&amp;gt;symbols alist ===&lt;/p&gt; &#xA;&lt;p&gt;Convert the keys of //alist// into symbols.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-sort alist pred ===&lt;/p&gt; &#xA;&lt;p&gt;Sort //alist// (by key) with //pred//.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist-sort-by-value alist pred ===&lt;/p&gt; &#xA;&lt;p&gt;Sort //alist// by value with //pred//.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist2-&amp;gt;alist alist2 car-key cdr-key &amp;amp;optional proper ===&lt;/p&gt; &#xA;&lt;p&gt;Reduce the //alist2// (a list of alists) to a single alist.&lt;/p&gt; &#xA;&lt;p&gt;//car-key// is the key of each alist to use as the resulting key and //cdr-key// is the key of each alist to user as the resulting cdr.&lt;/p&gt; &#xA;&lt;p&gt;If //proper// is [[t]] then the alist is a list of proper lists, not cons cells.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist2-&amp;gt;filter-keys alist2 &amp;amp;rest keys ===&lt;/p&gt; &#xA;&lt;p&gt;Return the //alist2// (a list of alists) filtered to the //keys//.&lt;/p&gt; &#xA;&lt;p&gt;=== kvalist2-&amp;gt;plist alist2 ===&lt;/p&gt; &#xA;&lt;p&gt;Convert a list of alists too a list of plists.&lt;/p&gt; &#xA;&lt;p&gt;=== kvcmp a b ===&lt;/p&gt; &#xA;&lt;p&gt;Do a comparison of the two values using printable syntax.&lt;/p&gt; &#xA;&lt;p&gt;Use this as the function to pass to [[sort]].&lt;/p&gt; &#xA;&lt;p&gt;=== kvdotassoc expr table ===&lt;/p&gt; &#xA;&lt;p&gt;Dotted expression handling with [[assoc]].&lt;/p&gt; &#xA;&lt;p&gt;=== kvdotassoc-fn expr table func ===&lt;/p&gt; &#xA;&lt;p&gt;Use the dotted //expr// to access deeply nested data in //table//.&lt;/p&gt; &#xA;&lt;p&gt;//expr// is a dot separated expression, either a symbol or a string. For example:&lt;/p&gt; &#xA;&lt;p&gt;{{{ &#34;a.b.c&#34; }}}&lt;/p&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;p&gt;{{{ &#39;a.b.c }}}&lt;/p&gt; &#xA;&lt;p&gt;If the //expr// is a symbol then the keys of the alist are also expected to be symbols.&lt;/p&gt; &#xA;&lt;p&gt;//table// is expected to be an alist currently.&lt;/p&gt; &#xA;&lt;p&gt;//func// is some sort of [[assoc]] like function.&lt;/p&gt; &#xA;&lt;p&gt;=== kvdotassq expr table ===&lt;/p&gt; &#xA;&lt;p&gt;Dotted expression handling with [[assq]].&lt;/p&gt; &#xA;&lt;p&gt;=== kvhash-&amp;gt;alist hash ===&lt;/p&gt; &#xA;&lt;p&gt;Convert //hash// to an ALIST.&lt;/p&gt; &#xA;&lt;p&gt;=== kvmap-bind args sexp seq ===&lt;/p&gt; &#xA;&lt;p&gt;A hybrid of [[destructuring-bind]] and [[mapcar]] //args// shall be of the form used with [[destructuring-bind]]&lt;/p&gt; &#xA;&lt;p&gt;Unlike most other mapping forms this is a macro intended to be used for structural transformations, so the expected usage will be that //args// describes the structure of the items in //seq//, and //sexp// will describe the structure desired.&lt;/p&gt; &#xA;&lt;p&gt;=== kvplist-&amp;gt;alist plist ===&lt;/p&gt; &#xA;&lt;p&gt;Convert //plist// to an alist.&lt;/p&gt; &#xA;&lt;p&gt;The keys are expected to be :prefixed and the colons are removed. The keys in the resulting alist are symbols.&lt;/p&gt; &#xA;&lt;p&gt;=== kvplist-&amp;gt;filter-keys plist &amp;amp;rest keys ===&lt;/p&gt; &#xA;&lt;p&gt;Filter the plist to just those matching //keys//.&lt;/p&gt; &#xA;&lt;p&gt;//keys// must actually be :-less symbols.&lt;/p&gt; &#xA;&lt;p&gt;[[kvalist-&amp;gt;filter-keys]] is actually used to do this work.&lt;/p&gt; &#xA;&lt;p&gt;=== kvplist-&amp;gt;merge &amp;amp;rest plists ===&lt;/p&gt; &#xA;&lt;p&gt;Merge the 2nd and subsequent plists into the first, clobbering values set by lists to the left.&lt;/p&gt; &#xA;&lt;p&gt;=== kvplist2-&amp;gt;filter-keys plist2 &amp;amp;rest keys ===&lt;/p&gt; &#xA;&lt;p&gt;Return the //plist2// (a list of plists) filtered to the //keys//.&lt;/p&gt;</summary>
  </entry>
</feed>