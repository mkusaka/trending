<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-08T01:41:59Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-tree-sitter/treesit-fold</title>
    <updated>2025-06-08T01:41:59Z</updated>
    <id>tag:github.com,2025-06-08:/emacs-tree-sitter/treesit-fold</id>
    <link href="https://github.com/emacs-tree-sitter/treesit-fold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code folding using treesit.el&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;This package is code folding support for built-in &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Language-Grammar.html&#34;&gt;treesit.el&lt;/a&gt; (&lt;strong&gt;since Emacs 29.1&lt;/strong&gt;).&lt;/p&gt; &#xA; &lt;p&gt;For external &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter&#34;&gt;tree-sitter.el&lt;/a&gt; (&lt;strong&gt;support Emacs 26.1+&lt;/strong&gt;), please use &lt;a href=&#34;https://github.com/emacs-tree-sitter/ts-fold&#34;&gt;ts-fold&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/treesit-fold.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/treesit-fold.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jcs-emacs.github.io/jcs-elpa/#/treesit-fold&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jcs-emacs/badges/master/elpa/v/treesit-fold.svg?sanitize=true&#34; alt=&#34;JCS-ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;treesit-fold&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Code-folding using treesit&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-tree-sitter/treesit-fold/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-tree-sitter/treesit-fold/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;treesit-fold&lt;/code&gt; builds on top of &lt;code&gt;treesit.el&lt;/code&gt; to provide code folding based on the tree-sitter syntax tree.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/etc/screenshot.png&#34; width=&#34;60%&#34;&gt; &lt;/p&gt; &#xA;&lt;!-- Markdown is not able to render links with unicode so after refreshing the toc, select it and:&#xA;    `M-x replace-regexp #[^-a-zA-Z] &lt;ret&gt; # &lt;ret&gt;` --&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-installation&#34;&gt;💾 Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-method-1-with-straightel-and-use-package&#34;&gt;🔍 Method 1. with &lt;code&gt;straight.el&lt;/code&gt; and &lt;code&gt;use-package&lt;/code&gt;:&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-method-2-manual&#34;&gt;🔍 Method 2. Manual&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-usage&#34;&gt;🖥 Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-commands&#34;&gt;📇 Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-supported-languages&#34;&gt;🔨 Supported languages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-add-support-for-non-ts-modes&#34;&gt;🚀 Add support for non-ts modes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-customization&#34;&gt;📝 Customization&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-folding-on-new-nodes&#34;&gt;⚪ Folding on new nodes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-example&#34;&gt;❔ Example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-offset&#34;&gt;↔ Offset&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-writing-new-fold-functions&#34;&gt;🔍 Writing new fold functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-line-count-display&#34;&gt;🔢 Line Count Display&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-plugins&#34;&gt;🔌 Plugins&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-indicators-mode&#34;&gt;⚖ Indicators Mode&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-installation-1&#34;&gt;💾 Installation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-usage-1&#34;&gt;🖥 Usage&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-summary&#34;&gt;📝 Summary&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-usage-2&#34;&gt;🖥 Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-customization-1&#34;&gt;📝 Customization&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-line-comment-folding&#34;&gt;🌫 Line-Comment folding&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-usage-3&#34;&gt;🖥 Usage&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-contribute&#34;&gt;🔰 Contribute&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-development&#34;&gt;🔬 Development&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-how-to-add-a-folding-parser&#34;&gt;❓ How to add a folding parser?&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-where-can-i-look-for-tree-sitter-node&#34;&gt;🔍 Where can I look for tree-sitter node?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-how-to-create-a-summary-parser&#34;&gt;❓ How to create a summary parser?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-license&#34;&gt;⚜️ License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;💾 Installation&lt;/h2&gt; &#xA;&lt;h3&gt;🔍 Method 1. with &lt;code&gt;straight.el&lt;/code&gt; and &lt;code&gt;use-package&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package treesit-fold&#xA;  :straight (treesit-fold :type git :host github :repo &#34;emacs-tree-sitter/treesit-fold&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔍 Method 2. Manual&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/emacs-tree-sitter/treesit-fold /path/to/lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then in Emacs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/lib&#34;)&#xA;(require treesit-fold)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package treesit-fold&#xA;  :load-path &#34;/path/to/lib&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🖥 Usage&lt;/h2&gt; &#xA;&lt;h3&gt;📇 Commands&lt;/h3&gt; &#xA;&lt;p&gt;The following are the functions provided by &lt;code&gt;treesit-fold-mode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Commands for enabling &lt;code&gt;treesit-fold&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Commands&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;treesit-fold-mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enable &lt;code&gt;treesit-fold-mode&lt;/code&gt; in the current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;global-treesit-fold-mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enable &lt;code&gt;treesit-fold-mode&lt;/code&gt; whenever tree-sitter is turned on and the major mode is supported by treesit-fold.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;treesit-fold-indicators-mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enable &lt;code&gt;treesit-fold&lt;/code&gt; with indicators in the current buffer. See &lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-indicators-mode&#34;&gt;plugins section&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;global-treesit-fold-indicators-mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enable &lt;code&gt;treesit-fold&lt;/code&gt; with indicators globally. See &lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/#-indicators-mode&#34;&gt;plugins section&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;treesit-fold-line-comment-mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enable line comment folding.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Commands for using &lt;code&gt;treesit-fold&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Commands&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;treesit-fold-close&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fold the current syntax node.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;treesit-fold-open&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open the outermost fold of the current syntax node. Keep the sub-folds close.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;treesit-fold-open-recursively&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open all folds inside the current syntax node.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;treesit-fold-close-all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;close all foldable syntax nodes in the current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;treesit-fold-open-all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open all folded syntax nodes in the current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;treesit-fold-toggle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle the syntax node at `point&#39;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If evil mode is loaded, then these commands are also added to the evil folding list.&lt;/p&gt; &#xA;&lt;h3&gt;🔨 Supported languages&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Please sort these two lists alphabetically!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;These languages are fairly complete:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ActionScript / Arduino / Assembly&lt;/li&gt; &#xA; &lt;li&gt;Bash / Beancount&lt;/li&gt; &#xA; &lt;li&gt;C / C++ / C# / Clojure / CMake / CSS&lt;/li&gt; &#xA; &lt;li&gt;Dart&lt;/li&gt; &#xA; &lt;li&gt;Elisp / Elixir / Erlang&lt;/li&gt; &#xA; &lt;li&gt;Fish&lt;/li&gt; &#xA; &lt;li&gt;GDScript / Gleam / GLSL / Go / Groovy (Jenkinsfile)&lt;/li&gt; &#xA; &lt;li&gt;Haskell / Haxe / HEEx / HLSL / HTML&lt;/li&gt; &#xA; &lt;li&gt;Jai / Janet / Java / JavaScript / JSX / JSON / Jsonnet / Julia&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&lt;/li&gt; &#xA; &lt;li&gt;LaTex / Lisp / Lua&lt;/li&gt; &#xA; &lt;li&gt;Make / MATLAB / Markdown / Mermaid&lt;/li&gt; &#xA; &lt;li&gt;Ninja / Nix / Noir&lt;/li&gt; &#xA; &lt;li&gt;OCaml / Org&lt;/li&gt; &#xA; &lt;li&gt;Perl / PHP / Python&lt;/li&gt; &#xA; &lt;li&gt;R / Ruby / Rust / reStructuredText&lt;/li&gt; &#xA; &lt;li&gt;Scala / Scheme / SQL / Svelte / Swift&lt;/li&gt; &#xA; &lt;li&gt;TOML / TypeScript / TSX&lt;/li&gt; &#xA; &lt;li&gt;Verilog / VHDL / Vimscript&lt;/li&gt; &#xA; &lt;li&gt;XML&lt;/li&gt; &#xA; &lt;li&gt;YAML&lt;/li&gt; &#xA; &lt;li&gt;Zig&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These languages are in development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ada&lt;/li&gt; &#xA; &lt;li&gt;Agda&lt;/li&gt; &#xA; &lt;li&gt;Elm&lt;/li&gt; &#xA; &lt;li&gt;Fortran&lt;/li&gt; &#xA; &lt;li&gt;Magik&lt;/li&gt; &#xA; &lt;li&gt;Pascal&lt;/li&gt; &#xA; &lt;li&gt;Smithy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;P.S. We don&#39;t list trivial languages here. e.g., LLVM IR (&lt;code&gt;.ll&lt;/code&gt;) files, etc. Please see the variable &lt;code&gt;treesit-fold-range-alist&lt;/code&gt; for the fully supported list!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;🚀 Add support for non-ts modes&lt;/h4&gt; &#xA;&lt;p&gt;You can add folding support for non-ts modes (such as c-mode or emacs-lisp-mode), this requires you have the parser library for the mode. After, you can enable folding adding these code snippets to your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; For `treesit-parser-create&#39; you need to ensure the language fits with&#xA;;; the parser library (e.g `libtree-sitter-cpp.dll&#39; is &#39;cpp).&#xA;&#xA;(add-hook &#39;emacs-lisp-mode-hook (lambda () (treesit-parser-create &#39;elisp)))&#xA;&#xA;;; For use-package users&#xA;(use-package treesit-fold&#xA;  :hook (c-mode . (lambda () (treesit-parser-create &#39;c)))&#xA;  ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📝 Customization&lt;/h2&gt; &#xA;&lt;p&gt;Although treesit-fold aims to have good folding out of the box for all supported definitions, people will indubitably have their own preferences or desired functionality. The following section outlines how to add your own folding definitions and folding functions to make treesit-fold work for you. If there are any improvements you find for existing or new languages, please do raise a PR so that others may benefit from better folding in the future!&lt;/p&gt; &#xA;&lt;h3&gt;⚪ Folding on new nodes&lt;/h3&gt; &#xA;&lt;p&gt;Treesit-fold defines all its folding definitions in the variable &lt;code&gt;treesit-fold-range-alist&lt;/code&gt; which is an alist with the key of the alist being the mode and the value being another alist of fold definitions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Example of treesit-fold-range-alist&#39;s structure&#xA;&#39;((c-mode     . c-folding-definitions) ;; &amp;lt;language&amp;gt;-folding-definitions is structured as shown below&#xA;  (css-mode   . css-folding-definitions)&#xA;  (go-mode    . go-folding-definitions)&#xA;  (scala-mode . scala-folding-definitions)&#xA;  ...)&#xA;&#xA;;; Examle of a folding definition alist&#xA;(setq css-folding-definitions&#xA;    (block   . treesit-fold-range-seq)&#xA;    (comment . treesit-fold-range-c-like-comment))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So you can select whatever node that you want to fold on it.&lt;/p&gt; &#xA;&lt;p&gt;To find what node you&#39;ll want to fold closed, refer to the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern-Matching.html&#34;&gt;Emacs tree-sitter documentation&lt;/a&gt; about viewing nodes. &lt;code&gt;treesit-inspect-mode&lt;/code&gt; and &lt;code&gt;treesit-explore-mode&lt;/code&gt; are both very useful for this.&lt;/p&gt; &#xA;&lt;p&gt;For the folding functions, treesit-fold provides some default&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;treesit-fold-range-seq&lt;/code&gt; - Folds from the start of the node to the end of the node leaving a buffer of one character on each side. Usually used for code blocks that have bracketing delimiters.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int main() { // &amp;lt;-- start of tree-sitter block node&#xA;    printf(&#34;Hello, World\n&#34;);&#xA;    return 0;&#xA;} // &amp;lt;-- end of tree-sitter block node&#xA;&#xA;// |&#xA;// | &#39;(block . treesit-fold-range-seq)&#xA;// V&#xA;&#xA;int main() {...} // Folded node&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;treesit-fold-range-markers&lt;/code&gt; - Folds the node starting from a giving delimiter character. Useful if tree-sitter&#39;s node definition doesn&#39;t align with the start of the desired folding section.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This folding function requires a lambda (or an externally defined function wrapper) so that the delimiter can be specified. You usually don&#39;t need to worry about the &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; variables, so just pass them through.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Dog interface {&#xA;    Bark() (string, error)&#xA;    Beg() (bool, error)&#xA;}&#xA;&#xA;/* | Note: The tree-sitter node starts at the word interface, not at the &#39;{&#39;.&#xA; * | &#39;(interface_type . (lambda (node offset)&#xA; * |                      (treesit-fold-range-markers node offset &#34;{&#34; &#34;}&#34;)))&#xA; * V&#xA; */&#xA;&#xA;type Dog interface {...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;treesit-fold-range-block-comment&lt;/code&gt; - Folds multi-line comments that are of the form &lt;code&gt;/*...*/&lt;/code&gt;. Should show a summary if the commentary plugin is turned on.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/*&#xA; * The main function that gets run after program is compiled&#xA; * Doesn&#39;t take any parameters&#xA; */&#xA;int main() {&#xA;    printf(&#34;Hello, World\n&#34;);&#xA;    return 0;&#xA;}&#xA;&#xA;// |&#xA;// | &#39;(comment . treesit-fold-range-block-comment)&#xA;// V&#xA;&#xA;/* &amp;lt;S&amp;gt; The main function that gets run after program is compiled */&#xA;int main() {&#xA;    printf(&#34;Hello, World\n&#34;);&#xA;    return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;treesit-fold-range-line-comment&lt;/code&gt; - For languages that have one line comment blocks with the comment delimiter starting each line. Condenses all the comment nodes into a single fold.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This folding function requires a lambda (or an externally defined function wrapper) so that the delimiter can be specified. You usually don&#39;t need to worry about the &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; variables, so just pass them through.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# show the long form of ls&#xA;# and also display hidden files&#xA;alias ll=&#39;ls -lah&#39;&#xA;&#xA;# |&#xA;# | (comment (lambda (node offset) (treesit-fold-range-line-comment node offset &#34;#&#34;))))&#xA;# V&#xA;&#xA;# show the long form of ls...&#xA;alias ll=&#39;ls -lah&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;treesit-fold-range-c-like-comment&lt;/code&gt; - A shortcut for the large number of languages that have the c style comment structures &lt;code&gt;/*...*/&lt;/code&gt; and &lt;code&gt;// ...&lt;/code&gt;. Smartly picks the correct folding style for the comment on the line.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/*&#xA; * The main function that gets run after program is compiled&#xA; * Doesn&#39;t take any parameters&#xA; */&#xA;int main() {&#xA;    // print hello world&#xA;    // and a new line&#xA;    printf(&#34;Hello, World\n&#34;);&#xA;    return 0;&#xA;}&#xA;&#xA;// |&#xA;// | &#39;(comment . treesit-fold-range-c-like-comment)&#xA;// V&#xA;&#xA;/* &amp;lt;S&amp;gt; The main function that gets run after program is compiled */&#xA;int main() {&#xA;    // &amp;lt;S&amp;gt; print hello world&#xA;    printf(&#34;Hello, World\n&#34;);&#xA;    return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now that you know what kinds of folds are easily available in treesit-fold, you can go ahead and add new fold definitions to &lt;code&gt;treesit-fold-range-alist&lt;/code&gt; and be good to go!&lt;/p&gt; &#xA;&lt;h4&gt;❔ Example&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s look at a quick example of adding a new folding definition. Let&#39;s say you want to add folding to &lt;code&gt;go-mode&lt;/code&gt;&#39;s &lt;code&gt;field_declaration_list&lt;/code&gt;. The folding definition that is needed will be &lt;code&gt;&#39;(field_declaration_list . treesit-fold-range-seq)&lt;/code&gt;. To add this to the &lt;code&gt;treesit-fold-range-alist&lt;/code&gt;, you can do something like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(push &#39;(field_declaration_list . treesit-fold-range-seq) (alist-get &#39;go-mode treesit-fold-range-alist))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the new fold definition should be usable by treesit-fold!&lt;/p&gt; &#xA;&lt;h4&gt;↔ Offset&lt;/h4&gt; &#xA;&lt;p&gt;With the functions listed above you&#39;ll be able to define most folding behavior that you&#39;ll want for most languages. However, sometimes you&#39;ll have a language where the delimiter is a word instead of a single character bracket and you want to offset your fold by a certain amount to accommodate it. That&#39;s where offsets come in. When adding a fold definition to a a language&#39;s fold alist, you can either provide the folding function directly as you&#39;ve seen so far:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;&#39;(block . treesit-fold-range-seq)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can provide the folding function with an offset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;&#39;(block . (treesit-fold-range-seq 1 -3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a range is provided, it provides extra room on the ends of a fold. The way this works is most easily shown using an example. Lets say we want to write a fold for bash&#39;s &lt;code&gt;for...do...done&lt;/code&gt; construct to look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;for i in 1 2 3 4 5&#xA;do&#xA;   echo &#34;Welcome $i times&#34;&#xA;done&#xA;&#xA;# |&#xA;# | &#39;(do_group . &amp;lt;some folding function&amp;gt;)&#xA;# V&#xA;&#xA;for i in 1 2 3 4 5&#xA;do...done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;do...done&lt;/code&gt; block is represented in tree-sitter as the node named &lt;code&gt;do_group&lt;/code&gt;. However, if we just use &lt;code&gt;&#39;(do_group . treesit-fold-range-seq)&lt;/code&gt;, then we&#39;ll get results like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;for i in 1 2 3 4 5&#xA;d...e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which is hard to read. Instead, we can use the definition &lt;code&gt;&#39;(do_group . (treesit-fold-range-seq 1 -3))&lt;/code&gt; to offset the fold a bit to get our desired result!&lt;/p&gt; &#xA;&lt;h3&gt;🔍 Writing new fold functions&lt;/h3&gt; &#xA;&lt;p&gt;If the built in functions don&#39;t fit your needs, you can write your own fold parser! Folding functions take two parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;node&lt;/code&gt; - the targeted tree-sitter node; in this example, &lt;code&gt;block&lt;/code&gt; will be the targeting node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;offset&lt;/code&gt; - (optional) a cons of two integers. This is handy when you have a similar rule with little of positioning adjustment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then the function needs to return a position range for the fold overlay in the form &lt;code&gt;&#39;(start-of-fold . end-of-fold)&lt;/code&gt;. If &lt;code&gt;nil&lt;/code&gt; is returned instead of a range, then no fold is created. This can be useful if you want to add extra conditional logic onto your fold.&lt;/p&gt; &#xA;&lt;p&gt;As an example of a folding function, take a look at the definition of the basic &lt;code&gt;treesit-fold-range-seq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun treesit-fold-range-seq (node offset)&#xA;  &#34;...&#34;&#xA;  (let ((beg (1+ (treesit-node-start node)))  ; node beginning position&#xA;        (end (1- (treesit-node-end node))))   ; node end position&#xA;    (treesit-fold--cons-add (cons beg end) offset)))    ; return fold range&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔢 Line Count Display&lt;/h3&gt; &#xA;&lt;p&gt;The following variables let you toggle and customize the display of the line count for folded regions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;treesit-fold-line-count-show&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This variable controls whether or not the number of lines in a folded text region is displayed.&lt;/p&gt; &lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;nil&lt;/code&gt; (line count is not shown)&lt;/p&gt; &lt;p&gt;If set to &lt;code&gt;t&lt;/code&gt;, the number of lines in folded regions will be shown.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq treesit-fold-line-count-show t)  ; Show line count in folded regions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/etc/line-count-default.png&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;treesit-fold-line-count-format&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This variable defines the format string used for displaying the line count in folded text. The &lt;code&gt;%d&lt;/code&gt; will be replaced with the actual number of lines in the folded region.&lt;/p&gt; &lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;(concat (truncate-string-ellipsis) &#34; %d &#34; (truncate-string-ellipsis))&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq treesit-fold-line-count-format &#34; &amp;lt;%d lines&amp;gt; &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/etc/line-count-custom.png&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔌 Plugins&lt;/h2&gt; &#xA;&lt;p&gt;treesit-fold comes with a couple of useful little additions that can be used or turned off as desired.&lt;/p&gt; &#xA;&lt;h3&gt;⚖ Indicators Mode&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/etc/indicators.png&#34; width=&#34;40%&#34; height=&#34;480%&amp;quot;/&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This plugin adds interactive visual markers in the gutter that show where folds can be made. They can be clicked on to fold or unfold given nodes.&lt;/p&gt; &#xA;&lt;h4&gt;💾 Installation&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;treesit-fold-indicator-mode&lt;/code&gt; is loaded when &lt;code&gt;treesit-fold-mode&lt;/code&gt; is and the functionality should be auto-loaded in, however if that&#39;s not working then you may want to explicitly declare the package in in your config.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package treesit-fold-indicators&#xA;:straight (treesit-fold-indicators :type git :host github :repo &#34;emacs-tree-sitter/treesit-fold&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/lib&#34;)&#xA;(require treesit-fold)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package treesit-fold-indicators&#xA;   :load-path &#34;/path/to/lib&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;🖥 Usage&lt;/h4&gt; &#xA;&lt;p&gt;You can then enable this manually by doing either of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x treesit-fold-indicators-mode&#xA;&#xA;M-x global-treesit-fold-indicators-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that turning on &lt;code&gt;treesit-fold-indicators-mode&lt;/code&gt; automatically turns on &lt;code&gt;treesit-fold-mode&lt;/code&gt; as well. Though, turning off &lt;code&gt;treesit-fold-indicators-mode&lt;/code&gt; does not turn off &lt;code&gt;treesit-fold-mode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To enable this automatically whenever a buffer has a tree-sitter parser, use the global indicator mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(global-treesit-fold-indicators-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Else, you can add a hook directly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;c-ts-mode-hook #&#39;treesit-fold-indicators-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To switch to left/right fringe: (Default is &lt;code&gt;left-fringe&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq treesit-fold-indicators-fringe &#39;right-fringe)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To lower/higher the fringe overlay&#39;s priority: (Default is &lt;code&gt;30&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq treesit-fold-indicators-priority 30)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To apply different faces depending on some conditions: (Default is &lt;code&gt;nil&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;For example, to coordinate &lt;a href=&#34;https://github.com/emacs-vs/line-reminder&#34;&gt;line-reminder&lt;/a&gt; with this plugin.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq treesit-fold-indicators-face-function&#xA;      (lambda (pos &amp;amp;rest _)&#xA;        ;; Return the face of it&#39;s function.&#xA;        (line-reminder--get-face (line-number-at-pos pos t))))&#xA;&#xA;(setq line-reminder-add-line-function&#xA;      (lambda (&amp;amp;rest _)&#xA;        (null (treesit-fold--overlays-in treesit-fold-indicators-window (selected-window)&#xA;                                    (line-beginning-position) (line-end-position)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📝 Summary&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/etc/summary.gif&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This plugin automatically extracts summary from the comment/document string, so you can have a nice way to peek at what&#39;s inside the fold range.&lt;/p&gt; &#xA;&lt;h4&gt;🖥 Usage&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t want this to happen, do: (Default is &lt;code&gt;t&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq treesit-fold-summary-show nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Summary are truncated by length: (Default is &lt;code&gt;60&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq treesit-fold-summary-max-length 60)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The exceeding string are replace by: (Default is &lt;code&gt;&#34;...&#34;&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq treesit-fold-summary-exceeded-string &#34;...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change summary format: (Default is &lt;code&gt;&#34; &amp;lt;S&amp;gt; %s &#34;&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq treesit-fold-summary-format &#34; &amp;lt;S&amp;gt; %s &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;📝 Customization&lt;/h4&gt; &#xA;&lt;p&gt;Just like with fold definitions, you can create your own summary definitions. Summary definitions are defined in &lt;code&gt;treesit-fold-summary-parsers-alist&lt;/code&gt; and has one summary function per major mode &lt;code&gt;&#39;(java-mode . fold-summary-function)&lt;/code&gt;. The summary function takes in the doc string which is all the text from a doc node and then returns a string to be displayed in its stead. Unlike with the folding functions, there aren&#39;t a set of general summary functions to fall back on. However, there are lots of examples and helper functions present in &lt;code&gt;treesit-fold-summary.el&lt;/code&gt;. Let&#39;s look at one example here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun treesit-fold-summary-javadoc (doc-str)&#xA;  &#34;Extract summary from DOC-STR in Javadoc.&#34;&#xA;  (treesit-fold-summary--generic doc-str &#34;*&#34;)) ;; strip the &#39;*&#39; and returns the first line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As can be seen &lt;code&gt;treesit-fold-summary--generic&lt;/code&gt; is a very helpful function since it removes the provided delimiter and returns the first line. often this will be enough.&lt;/p&gt; &#xA;&lt;h3&gt;🌫 Line-Comment folding&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/etc/line-comment.gif&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This plugin makes line comment into foldable range.&lt;/p&gt; &#xA;&lt;h4&gt;🖥 Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x treesit-fold-line-comment-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔰 Contribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/jcs090218&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/jcs090218&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-become%20a%20patron-orange.svg?logo=patreon&#34; alt=&#34;Become a patron&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ensure your buffer has a tree-sitter parser first, then &lt;code&gt;treesit-explore-mode&lt;/code&gt; is useful to test out queries that determine what syntax nodes should be foldable and how to fold them. &lt;a href=&#34;https://git.savannah.gnu.org/cgit/emacs.git/tree/admin/notes/tree-sitter/starter-guide#n130&#34;&gt;Emacs repository&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern-Matching.html&#34;&gt;Emacs tree-sitter manual&lt;/a&gt; has an excellent documentation on how to write &lt;code&gt;tree-sitter&lt;/code&gt; queries.&lt;/p&gt; &#xA;&lt;h3&gt;🔬 Development&lt;/h3&gt; &#xA;&lt;p&gt;To run the test locally, you will need the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-eask.github.io/&#34;&gt;Eask&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install all dependencies and development dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;eask install-deps --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test the package&#39;s installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;eask package&#xA;eask install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test compilation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;eask compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;🪧 The following steps are optional, but we recommend you follow these lint results!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The built-in &lt;code&gt;checkdoc&lt;/code&gt; linter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;eask lint checkdoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The standard &lt;code&gt;package&lt;/code&gt; linter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;eask lint package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;📝 P.S. For more information, find the Eask manual at &lt;a href=&#34;https://emacs-eask.github.io/&#34;&gt;https://emacs-eask.github.io/&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;❓ How to add a folding parser?&lt;/h3&gt; &#xA;&lt;p&gt;When adding a new folding parser, add the folding definition function to &lt;code&gt;treesit-fold.el&lt;/code&gt; itself near where the other range functions live and then add the parser to &lt;code&gt;treesit-fold-parsers.el&lt;/code&gt; file. Finally, if you are adding support for a new language, remember to add it to the &lt;code&gt;treesit-fold-range-alist&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;When creating a new parser, name it &lt;code&gt;treesit-fold-parsers-&amp;lt;language&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When creating a new folding function, name it &lt;code&gt;treesit-fold-range-&amp;lt;language&amp;gt;-&amp;lt;feature&amp;gt;&lt;/code&gt; or something similar.&lt;/p&gt; &#xA;&lt;h4&gt;🔍 Where can I look for tree-sitter node?&lt;/h4&gt; &#xA;&lt;p&gt;Here are some techniques for finding your desired nodes in tree-sitter.&lt;/p&gt; &#xA;&lt;p&gt;To look for the correct node you have three options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;look at the &lt;code&gt;tree-sitter-[lang]/grammar.js&lt;/code&gt; implementation. In the above example, &lt;code&gt;block&lt;/code&gt; node is defined in the &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-c-sharp&#34;&gt;tree-sitter-c-sharp&lt;/a&gt;&#39;s &lt;code&gt;grammar.js&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;open a file of your language choice (ensure that it has a tree-sitter parser) in emacs and &lt;code&gt;M-x treesit-explore-mode&lt;/code&gt;. This will display a buffer with the whole s-expr representing nodes at point from the current file/buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x treesit-inspect-node-at-point&lt;/code&gt; in your function to display what your function is seeing.&lt;/li&gt; &#xA; &lt;li&gt;use &lt;code&gt;M-x treesit-inspect-mode&lt;/code&gt; which diplay in the mode-line the current node at point.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;Make sure you look into the correct repository. Some repositories are managed under &lt;a href=&#34;https://github.com/tree-sitter/%5Blang%5D&#34;&gt;https://github.com/tree-sitter/[lang]&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;❓ How to create a summary parser?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;treesit-fold-summary.el&lt;/code&gt; module is used to extract and display a short description from the comment/docstring.&lt;/p&gt; &#xA;&lt;p&gt;To create a summary parser, you just have to create a function that could extract comment syntax correctly then register this function to &lt;code&gt;treesit-fold-summary-parsers-alist&lt;/code&gt; defined in &lt;code&gt;treesit-fold-summary.el&lt;/code&gt;. The display and shortening will be handled by the module itself.&lt;/p&gt; &#xA;&lt;p&gt;Functions should be named with the prefix &lt;code&gt;treesit-fold-summary-&lt;/code&gt; followed by &lt;code&gt;style name&lt;/code&gt;. For example, to create a summary parser for Javadoc style, then it should be named &lt;code&gt;treesit-fold-summary-javadoc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;⚜️ License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/treesit-fold/master/LICENSE.txt&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;!-- Links --&gt;</summary>
  </entry>
</feed>