<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-13T01:48:49Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>justbur/emacs-which-key</title>
    <updated>2023-08-13T01:48:49Z</updated>
    <id>tag:github.com,2023-08-13:/justbur/emacs-which-key</id>
    <link href="https://github.com/justbur/emacs-which-key" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package that displays available keybindings in popup&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;which-key [[https://elpa.gnu.org/packages/which-key.html][https://elpa.gnu.org/packages/which-key.svg]] [[http://melpa.org/#/which-key][http://melpa.org/packages/which-key-badge.svg]] [[http://stable.melpa.org/#/which-key][file:http://stable.melpa.org/packages/which-key-badge.svg]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Introduction =which-key= is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter =C-x= and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow =C-x= (or as many as space allows given your settings). This includes prefixes like =C-x 8= which are shown in a different face. Screenshots of what the popup will look like are included below. =which-key= started as a rewrite of [[https://github.com/kai2nenobu/guide-key][guide-key-mode]], but the feature sets have diverged to a certain extent.&lt;/p&gt; &#xA;&lt;p&gt;** Table of Contents :TOC_3:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#which-key][which-key]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#introduction][Introduction]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#install][Install]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#melpa][MELPA]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#manually][Manually]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#initial-setup][Initial Setup]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#side-window-bottom-option][Side Window Bottom Option]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#side-window-right-option][Side Window Right Option]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#side-window-right-then-bottom][Side Window Right then Bottom]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#minibuffer-option][Minibuffer Option]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#manual-activation][Manual Activation]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#additional-commands][Additional Commands]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#special-features-and-configuration-options][Special Features and Configuration Options]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#popup-type-options][Popup Type Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#custom-string-replacement-options][Custom String Replacement Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#sorting-options][Sorting Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#paging-options][Paging Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#face-customization-options][Face Customization Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#other-options][Other Options]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#support-for-third-party-libraries][Support for Third-Party Libraries]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#key-chord][Key-chord]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#evil-operators][Evil operators]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#god-mode][God-mode]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#more-examples][More Examples]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#nice-display-with-split-frame][Nice Display with Split Frame]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#known-issues][Known Issues]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#thanks][Thanks]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Install *** MELPA After setting up [[http://melpa.org][MELPA]] as a repository, use =M-x package-install which-key= or your preferred method. You will need to call =which-key-mode= to enable the minor mode of course.&lt;/p&gt; &#xA;&lt;p&gt;*** Manually Add which-key.el to your =load-path= and require. Something like #+BEGIN_SRC emacs-lisp (add-to-list &#39;load-path &#34;path/to/which-key.el&#34;) (require &#39;which-key) (which-key-mode) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Initial Setup No further setup is required if you are happy with the default setup. To try other options, there are 3 choices of default configs that are preconfigured (then customize to your liking). The main choice is where you want the which-key buffer to display. Screenshots of the default options are shown in the next sections.&lt;/p&gt; &#xA;&lt;p&gt;In each case, we show as many key bindings as we can fit in the buffer within the constraints. The constraints are determined by several factors, including your Emacs settings, the size of the current Emacs frame, and the which-key settings, most of which are described below.&lt;/p&gt; &#xA;&lt;p&gt;There are many substitution abilities included, which are quite flexible (ability to use regexp for example). This makes which-key very customizable.&lt;/p&gt; &#xA;&lt;p&gt;*** Side Window Bottom Option Popup side window on bottom. This is the current default. To restore this setup use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(which-key-setup-side-window-bottom) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[./img/which-key-bottom.png]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Side Window Right Option Popup side window on right. For defaults use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(which-key-setup-side-window-right) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Note the defaults are fairly conservative and will tend to not display on&#xA;narrower frames. If you get a message saying which-key can&#39;t display the&#xA;keys, try making your frame wider or adjusting the defaults related to the&#xA;maximum width (see =M-x customize-group which-key=).&#xA;&#xA;[[./img/which-key-right.png]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Side Window Right then Bottom This is a combination of the previous two choices. It will try to use the right side, but if there is no room it will switch to using the bottom, which is usually easier to fit keys into. This setting can be helpful if the size of the Emacs frame changes frequently, which might be the case if you are using a dynamic/tiling window manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;(which-key-setup-side-window-right-bottom)&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Minibuffer Option Take over the minibuffer. For the recommended configuration use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;(which-key-setup-minibuffer)&#xA;#+END_SRC&#xA;&#xA;[[./img/which-key-minibuffer.png]]&#xA;&#xA;Note the maximum height of the minibuffer is controlled through the built-in&#xA;variable =max-mini-window-height=. Also, the paging commands do not work&#xA;reliably with the minibuffer option. Use the side window on the bottom&#xA;option if you need paging.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Manual Activation #+NAME: #manual-activation If you only want the =which-key= popup when you need it, you can try a setup along the following lines&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ;; Allow C-h to trigger which-key before it is done automatically (setq which-key-show-early-on-C-h t) ;; make sure which-key doesn&#39;t show normally but refreshes quickly after it is ;; triggered. (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05) (which-key-mode) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This will prevent which-key from showing automatically, and allow you to use =C-h= in the middle of a key sequence to show the =which-key= buffer and keep it open for the remainder of the key sequence.&lt;/p&gt; &#xA;&lt;p&gt;** Additional Commands&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=which-key-show-top-level= will show most key bindings without a prefix. It is most and not all, because many are probably not interesting to most users.&lt;/li&gt; &#xA; &lt;li&gt;=which-key-show-major-mode= will show the currently active major-mode bindings. It&#39;s similar to =C-h m= but in a which-key format. It is also aware of evil commands defined using =evil-define-key=.&lt;/li&gt; &#xA; &lt;li&gt;=which-key-show-next-page-cycle= / =which-key-show-previous-page-cycle= will flip pages in a circle.&lt;/li&gt; &#xA; &lt;li&gt;=which-key-show-next-page-no-cycle= / =which-key-show-previous-page-no-cycle= will flip pages and stop at first/last page.&lt;/li&gt; &#xA; &lt;li&gt;=which-key-undo= can be used to undo the last keypress when in the middle of a key sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Special Features and Configuration Options There are more options than the ones described here. All of the configurable variables are available through =M-x customize-group which-key=. *** Popup Type Options There are three different popup types that which-key can use by default to display the available keys. The variable =which-key-popup-type= decides which one is used. **** minibuffer #+BEGIN_SRC emacs-lisp (setq which-key-popup-type &#39;minibuffer) #+END_SRC Show keys in the minibuffer. **** side window #+BEGIN_SRC emacs-lisp (setq which-key-popup-type &#39;side-window) #+END_SRC Show keys in a side window. This popup type has further options: #+BEGIN_SRC emacs-lisp ;; location of which-key window. valid values: top, bottom, left, right, ;; or a list of any of the two. If it&#39;s a list, which-key will always try ;; the first location first. It will go to the second location if there is ;; not enough room to display any keys in the first location (setq which-key-side-window-location &#39;bottom)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ;; max width of which-key window, when displayed at left or right.&#xA; ;; valid values: number of columns (integer), or percentage out of current&#xA; ;; frame&#39;s width (float larger than 0 and smaller than 1)&#xA; (setq which-key-side-window-max-width 0.33)&#xA;&#xA; ;; max height of which-key window, when displayed at top or bottom.&#xA; ;; valid values: number of lines (integer), or percentage out of current&#xA; ;; frame&#39;s height (float larger than 0 and smaller than 1)&#xA; (setq which-key-side-window-max-height 0.25)&#xA; #+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** frame&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp&#xA; (setq which-key-popup-type &#39;frame)&#xA; #+END_SRC&#xA; Show keys in a popup frame. This popup won&#39;t work very well in a terminal,&#xA; where only one frame can be shown at any given moment. This popup type has&#xA; further options:&#xA; #+BEGIN_SRC emacs-lisp&#xA; ;; max width of which-key frame: number of columns (an integer)&#xA; (setq which-key-frame-max-width 60)&#xA;&#xA; ;; max height of which-key frame: number of lines (an integer)&#xA; (setq which-key-frame-max-height 20)&#xA; #+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** custom Write your own display functions! This requires you to write three functions, =which-key-custom-popup-max-dimensions-function=, =which-key-custom-show-popup-function=, and =which-key-custom-hide-popup-function=. Refer to the documentation for those variables for more information, but here is a working example (this is the current implementation of side-window bottom).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp&#xA;   (setq which-key-popup-type &#39;custom)&#xA;   (defun which-key-custom-popup-max-dimensions-function (ignore)&#xA;     (cons&#xA;      (which-key-height-or-percentage-to-height&#xA;       which-key-side-window-max-height)&#xA;      (frame-width)))&#xA;   (defun fit-horizonatally ()&#xA;     (let ((fit-window-to-buffer-horizontally t))&#xA;       (fit-window-to-buffer)))&#xA;   (defun which-key-custom-show-popup-function (act-popup-dim)&#xA;     (let* ((alist &#39;((window-width . fit-horizontally)&#xA;                     (window-height . fit-window-to-buffer))))&#xA;       (if (get-buffer-window which-key--buffer)&#xA;           (display-buffer-reuse-window which-key--buffer alist)&#xA;         (display-buffer-in-major-side-window which-key--buffer&#xA;                                              &#39;bottom 0 alist))))&#xA;   (defun which-key-custom-hide-popup-function ()&#xA;     (when (buffer-live-p which-key--buffer)&#xA;       (quit-windows-on which-key--buffer)))&#xA; #+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Custom String Replacement Options #+NAME: #custom-string-replacement-options You can customize the way the keys show in the buffer using three different replacement methods. The first, keymap-based replacement, is preferred and will take precedence over the others. The remaining methods are still available, because they pre-date the first and are more flexible in what they can accomplish.&lt;/p&gt; &#xA;&lt;p&gt;**** Keymap-based replacement Using this method, which-key can display a custom string for a key definition in some keymap. There are two ways to define a keymap-based replacement. The preferred way is to use =define-key= (or a command that uses =define-key= internally) with a cons cell as the definition. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp&#xA;   (define-key some-map &#34;f&#34; &#39;(&#34;foo&#34; . command-foo))&#xA;   (define-key some-map &#34;b&#34; &#39;(&#34;bar-prefix&#34; . (keymap)))&#xA;   (setq my-map (make-sparse-keymap))&#xA;   (define-key some-map &#34;b&#34; (cons &#34;bar-prefix&#34; my-map))&#xA; #+END_SRC&#xA;&#xA; binds =command-foo= to =f= in =some-map=, but also stores the string &#34;foo&#34;&#xA; which which-key will extract to use to describe this command. The second&#xA; example binds an empty keymap to =b= in =some-map= and uses &#34;bar-prefix&#34; to&#xA; describe it. The last two lines replicate the functionality of the second&#xA; line, while assigning the new keymap to the symbol =my-map= (note the use&#xA; of =cons= to ensure that =my-map= is evaluated for =define-key=). These&#xA; bindings are accepted by =define-key= natively (i.e., with or without&#xA; which-key being loaded). Since many key-binding utilities use =define-key=&#xA; internally, this functionality should be available with your favorite&#xA; method of defining keys as well.&#xA;&#xA; The second method is to use =which-key-add-keymap-based-replacements=. The&#xA; statement&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA;   (define-key some-map &#34;f&#34; &#39;long-command-name-foo)&#xA;   (define-key some-map &#34;b&#34; some-prefix-map)&#xA;   (which-key-add-keymap-based-replacements some-map&#xA;     &#34;f&#34; &#39;(&#34;foo&#34; . long-command-name-foo)&#xA;     &#34;b&#34; &#39;(&#34;bar-prefix&#34; . (keymap)))&#xA; #+END_SRC&#xA;&#xA; uses =define-key= to add two bindings and tells which-key to use the string&#xA; &#34;foo&#34; in place of &#34;command-foo&#34; and the string &#34;bar-prefix&#34; for an empty&#xA; prefix map. =which-key-add-keymap-based-replacements= just uses&#xA; =define-key= to bind (or rebind) the command.&#xA;&#xA; There are other methods of telling which-key to replace command names,&#xA; which are described next. The keymap-based replacements should be the most&#xA; performant since they use built-in functionality of emacs. However, the&#xA; alternatives can be more flexible in telling which-key how and when to&#xA; replace text. They can be used simultaneously, but which-key will give&#xA; precedence to the keymap-based replacement when it exists.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** Key-Based replacement Using this method, the description of a key is replaced using a string that you provide. Here&#39;s an example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp&#xA; (which-key-add-key-based-replacements&#xA;   &#34;C-x C-f&#34; &#34;find files&#34;)&#xA; #+END_SRC&#xA;&#xA; where the first string is the key combination whose description you want to&#xA; replace, in a form suitable for =kbd=. For that key combination, which-key&#xA; overwrites the description with the second string, &#34;find files&#34;. In the&#xA; second type of entry you can restrict the replacements to a major-mode. For&#xA; example,&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (which-key-add-major-mode-key-based-replacements &#39;org-mode&#xA;   &#34;C-c C-c&#34; &#34;Org C-c C-c&#34;&#xA;   &#34;C-c C-a&#34; &#34;Org Attach&#34;)&#xA; #+END_SRC&#xA;&#xA; Here the first entry is the major-mode followed by a list of the first type&#xA; of entries. In case the same key combination is listed under a major-mode&#xA; and by itself, the major-mode version takes precedence.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** Key and Description replacement&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; The second and third methods target the text used for the keys and the&#xA; descriptions directly. The relevant variable is&#xA; =which-key-replacement-alist=.  Here&#39;s an example of one of the default key&#xA; replacements&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (push &#39;((&#34;&amp;lt;\\([[:alnum:]-]+\\)&amp;gt;&#34; . nil) . (&#34;\\1&#34; . nil))&#xA;       which-key-replacement-alist)&#xA; #+END_SRC&#xA;&#xA; Each element of the outer cons cell is a cons cell of the form =(KEY&#xA; . BINDING)=. The =car= of the outer cons determines how to match key&#xA; bindings while the =cdr= determines how those matches are replaced. See the&#xA; docstring of =which-key-replacement-alist= for more information.&#xA;&#xA; The next example shows how to replace the description.&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (push &#39;((nil . &#34;left&#34;) . (nil . &#34;lft&#34;)) which-key-replacement-alist)&#xA; #+END_SRC&#xA;&#xA; Here is an example of using key replacement to include Unicode characters&#xA; in the results. Unfortunately, using Unicode characters may upset the&#xA; alignment of the which-key buffer, because Unicode characters can have&#xA; different widths even in a monospace font and alignment is based on&#xA; character width.&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (add-to-list &#39;which-key-replacement-alist &#39;((&#34;TAB&#34; . nil) . (&#34;↹&#34; . nil)))&#xA; (add-to-list &#39;which-key-replacement-alist &#39;((&#34;RET&#34; . nil) . (&#34;⏎&#34; . nil)))&#xA; (add-to-list &#39;which-key-replacement-alist &#39;((&#34;DEL&#34; . nil) . (&#34;⇤&#34; . nil)))&#xA; (add-to-list &#39;which-key-replacement-alist &#39;((&#34;SPC&#34; . nil) . (&#34;␣&#34; . nil)))&#xA; #+END_SRC&#xA;&#xA; The =cdr= may also be a function that receives a =cons= of the form =(KEY&#xA; . BINDING)= and produces a =cons= of the same form. This allows for&#xA; interesting ideas like this one suggested by [[https://github.com/pdcawley][@pdcawley]] in [[https://github.com/justbur/emacs-which-key/pull/147][PR #147]].&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (push (cons &#39;(nil . &#34;paredit-mode&#34;)&#xA;             (lambda (kb)&#xA;               (cons (car kb)&#xA;                     (if paredit-mode&#xA;                         &#34;[x] paredit-mode&#34;&#xA;                       &#34;[ ] paredit-mode&#34;))))&#xA;       which-key-replacement-alist)&#xA; #+END_SRC&#xA;&#xA; The box will be checked if =paredit-mode= is currently active.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Sorting Options By default the output is sorted by the key in a custom order. The default order is to sort lexicographically within each &#34;class&#34; of key, where the classes and their order are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=Special (SPC, TAB, ...) &amp;lt; Single Character (ASCII) (a, ...) &amp;lt; Modifier (C-, M-, ...) &amp;lt; Other=&#xA;&#xA;You can control the order by setting this variable. This also shows the&#xA;other available options.&#xA;&#xA;#+BEGIN_SRC emacs-lisp&#xA;;; default&#xA;(setq which-key-sort-order &#39;which-key-key-order)&#xA;;; same as default, except single characters are sorted alphabetically&#xA;;; (setq which-key-sort-order &#39;which-key-key-order-alpha)&#xA;;; same as default, except all prefix keys are grouped together at the end&#xA;;; (setq which-key-sort-order &#39;which-key-prefix-then-key-order)&#xA;;; same as default, except all keys from local maps shown first&#xA;;; (setq which-key-sort-order &#39;which-key-local-then-key-order)&#xA;;; sort based on the key description ignoring case&#xA;;; (setq which-key-sort-order &#39;which-key-description-order)&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Paging Options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;There are at least several prefixes that have many keys bound to them, like&#xA;=C-x=. which-key displays as many keys as it can given your settings, but&#xA;for these prefixes this may not be enough. The paging feature gives you the&#xA;ability to bind a key to the function =which-key-C-h-dispatch= which will&#xA;allow you to cycle through the pages without changing the key sequence you&#xA;were in the middle of typing. There are two slightly different ways of doing&#xA;this.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** Method 1 (default): Using C-h (or =help-char=) This is the easiest way, and is turned on by default. Use #+BEGIN_SRC emacs-lisp (setq which-key-use-C-h-commands nil) #+END_SRC to disable the behavior (this will only take effect after toggling which-key-mode if it is already enabled). =C-h= can be used with any prefix to switch pages when there are multiple pages of keys. This changes the default behavior of Emacs which is to show a list of key bindings that apply to a prefix. For example, if you were to type =C-x C-h= you would get a list of commands that follow =C-x=. This uses which-key instead to show those keys, and unlike the Emacs default saves the incomplete prefix that you just entered so that the next keystroke can complete the command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; The commands are:&#xA; - Cycle through the pages forward with =n= (or =C-n=)&#xA; - Cycle backwards with =p= (or =C-p=)&#xA; - Undo the last entered key (!) with =u= (or =C-u=)&#xA; - Call the default command bound to =C-h=, usually&#xA;   =describe-prefix-bindings=, with =h= (or =C-h=)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is especially useful for those who like =helm-descbinds= but also want to use =C-h= as their which-key paging key.&lt;/p&gt; &#xA;&lt;p&gt;Note =C-h= is by default equivalent to =?= in this context.&lt;/p&gt; &#xA;&lt;p&gt;Note also that using =C-h= will not work with the =C-h= prefix, unless you make further adjustments. See Issues [[https://github.com/justbur/emacs-which-key/issues/93][#93]] and [[https://github.com/justbur/emacs-which-key/issues/175][#175]] for example.&lt;/p&gt; &#xA;&lt;p&gt;**** Method 2: Bind your own keys&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Essentially, all you need to do for a prefix like =C-x= is the following&#xA; which will bind =&amp;lt;f5&amp;gt;= to the relevant command.&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(define-key which-key-mode-map (kbd &#34;C-x &#xA; &lt;f5&gt;&#xA;  &#34;) &#39;which-key-C-h-dispatch) #+END_SRC&#xA; &lt;/f5&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; This is completely equivalent to&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(setq which-key-paging-prefixes &#39;(&#34;C-x&#34;)) (setq which-key-paging-key &#34;&#xA; &lt;f5&gt;&#xA;  &#34;) #+END_SRC&#xA; &lt;/f5&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; where the latter are provided for convenience if you have a lot of&#xA; prefixes.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Face Customization Options The faces that which-key uses are | Face | Applied To | Default Definition | |----------------------------------------+-------------------------------+-------------------------------------------------------------| | =which-key-key-face= | Every key sequence | =:inherit font-lock-constant-face= | | =which-key-separator-face= | The separator (→) | =:inherit font-lock-comment-face= | | =which-key-note-face= | Hints and notes | =:inherit which-key-separator-face= | | =which-key-special-key-face= | User-defined special keys | =:inherit which-key-key-face :inverse-video t :weight bold= | | =which-key-group-description-face= | Command groups (i.e, keymaps) | =:inherit font-lock-keyword-face= | | =which-key-command-description-face= | Commands not in local-map | =:inherit font-lock-function-name-face= | | =which-key-local-map-description-face= | Commands in local-map | =:inherit which-key-command-description-face= |&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The last two deserve some explanation. A command lives in one of many possible&#xA;keymaps. You can distinguish between local maps, which depend on the buffer you&#xA;are in, which modes are active, etc., and the global map which applies&#xA;everywhere. It might be useful for you to distinguish between the two. One way&#xA;to do this is to remove the default face from&#xA;=which-key-command-description-face= like this&#xA;&#xA;#+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(set-face-attribute &#39;which-key-command-description-face nil :inherit nil) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;another is to make the local map keys appear in bold&#xA;&#xA;#+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(set-face-attribute &#39;which-key-local-map-description-face nil :weight &#39;bold) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can also use =M-x customize-face= to customize any of the above faces to&#xA;your liking.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Other Options #+NAME: #other-options The options below are also available through customize. Their defaults are shown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;  ;; Set the time delay (in seconds) for the which-key popup to appear. A value of&#xA;  ;; zero might cause issues so a non-zero value is recommended.&#xA;  (setq which-key-idle-delay 1.0)&#xA;&#xA;  ;; Set the maximum length (in characters) for key descriptions (commands or&#xA;  ;; prefixes). Descriptions that are longer are truncated and have &#34;..&#34; added.&#xA;  ;; This can also be a float (fraction of available width) or a function.&#xA;  (setq which-key-max-description-length 27)&#xA;&#xA;  ;; Use additional padding between columns of keys. This variable specifies the&#xA;  ;; number of spaces to add to the left of each column.&#xA;  (setq which-key-add-column-padding 0)&#xA;&#xA;  ;; The maximum number of columns to display in the which-key buffer. nil means&#xA;  ;; don&#39;t impose a maximum.&#xA;  (setq which-key-max-display-columns nil)&#xA;&#xA;  ;; Set the separator used between keys and descriptions. Change this setting to&#xA;  ;; an ASCII character if your font does not show the default arrow. The second&#xA;  ;; setting here allows for extra padding for Unicode characters. which-key uses&#xA;  ;; characters as a means of width measurement, so wide Unicode characters can&#xA;  ;; throw off the calculation.&#xA;  (setq which-key-separator &#34; → &#34; )&#xA;  (setq which-key-unicode-correction 3)&#xA;&#xA;  ;; Set the prefix string that will be inserted in front of prefix commands&#xA;  ;; (i.e., commands that represent a sub-map).&#xA;  (setq which-key-prefix-prefix &#34;+&#34; )&#xA;&#xA;  ;; Set the special keys. These are automatically truncated to one character and&#xA;  ;; have which-key-special-key-face applied. Disabled by default. An example&#xA;  ;; setting is&#xA;  ;; (setq which-key-special-keys &#39;(&#34;SPC&#34; &#34;TAB&#34; &#34;RET&#34; &#34;ESC&#34; &#34;DEL&#34;))&#xA;  (setq which-key-special-keys nil)&#xA;&#xA;  ;; Show the key prefix on the left, top, or bottom (nil means hide the prefix).&#xA;  ;; The prefix consists of the keys you have typed so far. which-key also shows&#xA;  ;; the page information along with the prefix.&#xA;  (setq which-key-show-prefix &#39;left)&#xA;&#xA;  ;; Set to t to show the count of keys shown vs. total keys in the mode line.&#xA;  (setq which-key-show-remaining-keys nil)&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Support for Third-Party Libraries Some support is provided for third-party libraries which don&#39;t use standard methods of looking up commands. Some of these need to be enabled explicitly. This code includes some hacks, so please report any problems. *** Key-chord Enabled by default. *** Evil operators Evil motions and text objects following an operator like =d= are not all looked up in a standard way. Support is controlled through =which-key-allow-evil-operators= which should be non-nil if evil is loaded before which-key and through =which-key-show-operator-state-maps= which needs to be enabled explicitly because it is more of a hack. The former allows for the inner and outer text object maps to show, while the latter shows motions as well. *** God-mode Call =(which-key-enable-god-mode-support)= after loading god-mode to enable support for god-mode key sequences. This is new and experimental, so please report any issues. ** More Examples *** Nice Display with Split Frame Unlike guide-key, which-key looks good even if the frame is split into several windows. #+CAPTION: which-key in a frame with 3 horizontal splits [[./img/which-key-right-split.png]]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+CAPTION: which-key in a frame with 2 vertical splits&#xA;[[./img/which-key-bottom-split.png]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Known Issues&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A few users have reported crashes related to which-key popups when quitting a key sequence with =C-g=. A possible fix is discussed in [[https://github.com/justbur/emacs-which-key/issues/130][this issue]]. ** Thanks Special thanks to&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bmag][@bmag]] for helping with the initial development and finding many bugs.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github/iqbalansari][@iqbalansari]] who among other things adapted the code to make =which-key-show-top-level= possible.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>joaotavora/yasnippet</title>
    <updated>2023-08-13T01:48:49Z</updated>
    <id>tag:github.com,2023-08-13:/joaotavora/yasnippet</id>
    <link href="https://github.com/joaotavora/yasnippet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A template system for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/joaotavora/yasnippet&#34;&gt;&lt;img src=&#34;https://travis-ci.org/joaotavora/yasnippet.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Intro&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;YASnippet&lt;/strong&gt; is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from &lt;a href=&#34;http://manual.macromates.com/en/snippets&#34;&gt;TextMate&#39;s&lt;/a&gt; syntax, you can even &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/yasnippet/master/#import&#34;&gt;import&lt;/a&gt; most TextMate templates to YASnippet. Watch &lt;a href=&#34;http://www.youtube.com/watch?v=ZCGmZK4V7Sg&#34;&gt;a demo on YouTube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Install the most recent version&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repository somewhere&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd ~/.emacs.d/plugins&#xA;$ git clone --recursive https://github.com/joaotavora/yasnippet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following in your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path&#xA;              &#34;~/.emacs.d/plugins/yasnippet&#34;)&#xA;(require &#39;yasnippet)&#xA;(yas-global-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add your own snippets to &lt;code&gt;~/.emacs.d/snippets&lt;/code&gt; by placing files there or invoking &lt;code&gt;yas-new-snippet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install with &lt;code&gt;package-install&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;In a recent emacs &lt;code&gt;M-x list-packages&lt;/code&gt; is the recommended way to list and install packages. &lt;a href=&#34;http://melpa.milkbox.net/&#34;&gt;MELPA&lt;/a&gt; keeps a very recent snapshot of YASnippet, see &lt;a href=&#34;http://melpa.org/#installing&#34;&gt;http://melpa.org/#installing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install with el-get&lt;/h2&gt; &#xA;&lt;p&gt;El-get is a nice way to get the most recent version, too. See &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;https://github.com/dimitri/el-get&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Use &lt;code&gt;yas-minor-mode&lt;/code&gt; on a per-buffer basis&lt;/h2&gt; &#xA;&lt;p&gt;To use YASnippet as a non-global minor mode, don&#39;t call &lt;code&gt;yas-global-mode&lt;/code&gt;; instead call &lt;code&gt;yas-reload-all&lt;/code&gt; to load the snippet tables and then call &lt;code&gt;yas-minor-mode&lt;/code&gt; from the hooks of major-modes where you want YASnippet enabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(yas-reload-all)&#xA;(add-hook &#39;prog-mode-hook #&#39;yas-minor-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Where are the snippets?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a name=&#34;import&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;YASnippet no longer bundles snippets directly, but it&#39;s very easy to get some!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://github.com/AndreaCrotti/yasnippet-snippets&#34;&gt;yasnippet-snippets&lt;/a&gt; - a snippet collection package maintained by &lt;a href=&#34;https://github.com/AndreaCrotti&#34;&gt;AndreaCrotti&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;It can be installed with &lt;code&gt;M-x package-install RET yasnippet-snippets&lt;/code&gt; if you have added MELPA to your package sources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://github.com/joaotavora/yasmate&#34;&gt;yasmate&lt;/a&gt; a tool which is dedicated to converting textmate bundles into yasnippet snippets.&lt;/p&gt; &lt;p&gt;To use these snippets you have to run the tool first, so &lt;a href=&#34;http://github.com/joaotavora/yasmate&#34;&gt;see its doc&lt;/a&gt;), and then point the &lt;code&gt;yas-snippet-dirs&lt;/code&gt; variable to the &lt;code&gt;.../yasmate/snippets&lt;/code&gt; subdir.&lt;/p&gt; &lt;p&gt;If you have a working ruby environment, you can probably get lucky directly with &lt;code&gt;rake convert-bundles&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mattfidler/textmate-to-yas.el&#34;&gt;textmate-to-yas.el&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This is another textmate bundle converting tool using Elisp instead of Ruby.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Naturally, you can point &lt;code&gt;yas-snippet-dirs&lt;/code&gt; to good snippet collections out there. If you have created snippets for a mode, or multiple modes, consider creating a repository to host them, then tell users that it should be added like this to &lt;code&gt;yas-snippet-dirs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq yas-snippet-dirs&#xA;      &#39;(&#34;~/.emacs.d/snippets&#34;                 ;; personal snippets&#xA;        &#34;/path/to/some/collection/&#34;           ;; foo-mode and bar-mode snippet collection&#xA;        &#34;/path/to/yasnippet/yasmate/snippets&#34; ;; the yasmate collection&#xA;        ))&#xA;&#xA;(yas-global-mode 1) ;; or M-x yas-reload-all if you&#39;ve started YASnippet already.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Manual, issues etc&lt;/h1&gt; &#xA;&lt;p&gt;There&#39;s comprehensive &lt;a href=&#34;http://joaotavora.github.io/yasnippet/&#34;&gt;documentation&lt;/a&gt; on using and customising YASnippet.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a &lt;a href=&#34;https://github.com/joaotavora/yasnippet/issues?q=label%3Asupport&#34;&gt;list of support issues&lt;/a&gt;, with solutions to common problems and practical snippet examples.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/joaotavora/yasnippet/issues&#34;&gt;Github issue tracker&lt;/a&gt; is where most YASnippet-related discussion happens. Nevertheless, since YASnippet is a part of Emacs, you may alternatively report bugs to the main Emacs bug list, &lt;a href=&#34;mailto:bug-gnu-emacs@gnu.org&#34;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;, putting &#34;yasnippet&#34; somewhere in the subject.&lt;/p&gt; &#xA;&lt;h2&gt;Important note regarding bug reporting&lt;/h2&gt; &#xA;&lt;p&gt;Your bug reports are very valuable.&lt;/p&gt; &#xA;&lt;p&gt;The most important thing when reporting bugs is making sure that we have a way to reproduce the problem exactly like it happened to you.&lt;/p&gt; &#xA;&lt;p&gt;To do this, we need to rule out interference from external factors like other Emacs extensions or your own customisations.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example report that &#34;sandboxes&#34; an Emacs session just for reproducing a bug.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ emacs --version&#xA;Emacs 24.3&#xA;$ cd /tmp/&#xA;$ git clone https://github.com/joaotavora/yasnippet.git yasnippet-bug&#xA;$ cd yasnippet-bug&#xA;$ git log -1 --oneline&#xA;6053db0 Closes #527: Unbreak case where yas-fallback-behaviour is a list&#xA;$ HOME=$PWD emacs -L . # This &#34;sandboxes&#34; your emacs, melpa configuration, etc&#xA;&#xA;(require &#39;yasnippet)&#xA;(yas-global-mode 1)&#xA;&#xA;When I open a foo-mode file I don&#39;t see foo-mode under the &#34;YASnippet&#34; menu!&#xA;OR&#xA;When loading yasnippet I see &#34;Error: failed to frobnicate&#34;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;emacs -Q&lt;/code&gt; or temporarily moving your &lt;code&gt;.emacs&lt;/code&gt; init file to the side is another way to achieve good reproducibility.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/joaotavora/yasnippet/issues/318&#34;&gt;another example&lt;/a&gt; of a bug report. It has everything needed for a successful analysis and speedy resolution.&lt;/p&gt; &#xA;&lt;p&gt;Also, don&#39;t forget to state the Emacs version (use &lt;code&gt;M-x emacs-version&lt;/code&gt;) and the yasnippet version you are using (if using the latest from github, do &lt;code&gt;git log -1&lt;/code&gt; in the dir).&lt;/p&gt; &#xA;&lt;p&gt;Any more info is welcome, but don&#39;t just paste a backtrace or an error message string you got, unless we ask for it.&lt;/p&gt; &#xA;&lt;p&gt;Finally, thank you very much for using YASnippet!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aki2o/log4e</title>
    <updated>2023-08-13T01:48:49Z</updated>
    <id>tag:github.com,2023-08-13:/aki2o/log4e</id>
    <link href="https://github.com/aki2o/log4e" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provide a logging framework for elisp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/aki2o/log4e&#34;&gt;&lt;img src=&#34;https://travis-ci.org/aki2o/log4e.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s this?&lt;/h1&gt; &#xA;&lt;p&gt;This is a extension of Emacs provides logging framework for Elisp.&lt;/p&gt; &#xA;&lt;h1&gt;Feature&lt;/h1&gt; &#xA;&lt;h3&gt;Define function for logging automatically&lt;/h3&gt; &#xA;&lt;p&gt;Write the following sexp in your elisp file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(log4e:deflogger &#34;hoge&#34; &#34;%t [%l] %m&#34; &#34;%H:%M:%S&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can use the following function/command.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hoge–log-fatal&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-error&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-warn&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-info&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-debug&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-trace&lt;/li&gt; &#xA; &lt;li&gt;hoge–log&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-fatal*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-error*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-warn*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-info*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-debug*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-trace*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log*&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-set-level&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-enable-logging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-disable-logging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-enable-debugging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-disable-debugging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-enable-messaging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-disable-messaging&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-debugging-p&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-set-coding-system&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-set-author-mail-address&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-clear-log&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-open-log&lt;/li&gt; &#xA; &lt;li&gt;hoge–log-open-log-if-debug&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For detail, see Usage section.&lt;/p&gt; &#xA;&lt;h3&gt;font-lock on logging buffer&lt;/h3&gt; &#xA;&lt;p&gt;Here is the image of logging buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aki2o/log4e/master/image/demo1.png&#34; alt=&#34;demo1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following face is used for font-lock on logging buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;font-lock-doc-face&lt;/li&gt; &#xA; &lt;li&gt;font-lock-keyword-face&lt;/li&gt; &#xA; &lt;li&gt;font-lock-string-face&lt;/li&gt; &#xA; &lt;li&gt;font-lock-warning-face&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;key binding on logging buffer&lt;/h3&gt; &#xA;&lt;p&gt;The mode of logging buffer is log4e-mode which is based view-mode.&lt;br&gt; The following binding is added.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;J&lt;/code&gt; log4e:next-log … move to head of next log&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;K&lt;/code&gt; log4e:previous-log … move to head of previous log&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h3&gt;If use package.el&lt;/h3&gt; &#xA;&lt;p&gt;2013/07/19 It&#39;s available by using melpa.&lt;/p&gt; &#xA;&lt;h3&gt;If use el-get.el&lt;/h3&gt; &#xA;&lt;p&gt;2013/07/26 It&#39;s available. But, master branch only.&lt;/p&gt; &#xA;&lt;h3&gt;If use auto-install.el&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(auto-install-from-url &#34;https://raw.github.com/aki2o/log4e/master/log4e.el&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Download log4e.el and put it on your load-path.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;For example, develop elisp with prefix &#34;hoge&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Initially&lt;/h3&gt; &#xA;&lt;p&gt;Write the following in the elisp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;log4e)&#xA;(log4e:deflogger &#34;hoge&#34; &#34;%t [%l] %m&#34; &#34;%H:%M:%S&#34; &#39;((fatal . &#34;fatal&#34;)&#xA;                                                  (error . &#34;error&#34;)&#xA;                                                  (warn  . &#34;warn&#34;)&#xA;                                                  (info  . &#34;info&#34;)&#xA;                                                  (debug . &#34;debug&#34;)&#xA;                                                  (trace . &#34;trace&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;log4e:deflogger&lt;/code&gt; receives the following arguments.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The elisp prefix.&lt;/li&gt; &#xA; &lt;li&gt;Format of log. The following words has a special meaning in it. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;%t … Replaced with the 3rd argument.&lt;/li&gt; &#xA;   &lt;li&gt;%l … Replaced with LogLevel.&lt;/li&gt; &#xA;   &lt;li&gt;%m … Replaced with given message by the logging function. About them, see Coding section below.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Format of time. This value is passed to `format-time-string` and replaced with its returend.&lt;/li&gt; &#xA; &lt;li&gt;Alist of the logging function name. This is optional. If nil, This value is `log4e-default-logging-function-name-alist`.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Coding&lt;/h3&gt; &#xA;&lt;p&gt;Develop the elisp with logging.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun hoge-do-hoge (hoge)&#xA;  (if (not (stringp hoge))&#xA;      (progn (hoge--fatal &#34;failed do hoge : hoge is &#39;%s&#39;&#34; hoge)&#xA;             (hoge--log-open-log-if-debug))&#xA;    (hoge--debug &#34;start do hoge about &#39;%s&#39;&#34; hoge)&#xA;    (message &#34;hoge!&#34;)&#xA;    (hoge--info &#34;done hoge about &#39;%s&#39;&#34; hoge)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The logging functions are named by the 4th argument of &lt;code&gt;log4e:deflogger&lt;/code&gt;.&lt;br&gt; The arguments of them are passed to &lt;code&gt;format&lt;/code&gt; and its returned is used for the message part of log.&lt;br&gt; The returned of them is always nil.&lt;/p&gt; &#xA;&lt;h3&gt;Enable/Disable logging&lt;/h3&gt; &#xA;&lt;p&gt;By default, logging is disabled.&lt;br&gt; For doing logging, use &lt;code&gt;hoge--log-enable-logging&lt;/code&gt;.&lt;br&gt; If you want to do logging anytime, write &lt;code&gt;hoge--log-enable-logging&lt;/code&gt; in the elisp.&lt;br&gt; For stopping logging, use &lt;code&gt;hoge--log-disable-logging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Set range of logging level&lt;/h3&gt; &#xA;&lt;p&gt;By default, The logging range is from &#39;info&#39; to &#39;fatal&#39;.&lt;br&gt; So, eval the following …&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge-do-hoge &#34;HOGEGE&#34;)&#xA;(hoge--log-open-log)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the buffer is displayed that named &#39; \*log4e-hoge\*&#39;. And the string is like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;12:34:56 [INFO ] done hoge about &#39;HOGEGE&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you change the logging range, eval the following sexp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge--log-set-level &#39;debug &#39;fatal)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, eval the following …&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge-do-hoge &#34;FUGAGA&#34;)&#xA;(hoge--log-open-log)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the buffer is displayed that named &#39; \*log4e-hoge\*&#39;. And the string is like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;12:34:56 [INFO ] done hoge about &#39;HOGEGE&#39;&#xA;12:35:43 [DEBUG] start do hoge about &#39;FUGAGA&#39;&#xA;12:35:43 [INFO ] done hoge about &#39;FUGAGA&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you change the logging range anytime, write &lt;code&gt;hoge--log-set-level&lt;/code&gt; in the elisp.&lt;br&gt; &lt;code&gt;hoge--log-set-level&lt;/code&gt; receive the following arguments.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The lowest level for doing logging. Its list is &#39;trace&#39;, &#39;debug&#39;, &#39;info&#39;, &#39;warn&#39;, &#39;error&#39; and &#39;fatal&#39;.&lt;/li&gt; &#xA; &lt;li&gt;The highest level for doing logging. This is optional. If nil, This value is &#39;fatal&#39;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;For debug&lt;/h3&gt; &#xA;&lt;p&gt;When you debug the elisp, eval the following …&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge--log-enable-debugging)&#xA;(hoge-do-hoge &#39;hogege)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the buffer is displayed that named &#39; \*log4e-hoge\*&#39;. And the string is like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;12:34:56 [INFO ] done hoge about &#39;HOGEGE&#39;&#xA;12:35:43 [DEBUG] start do hoge about &#39;FUGAGA&#39;&#xA;12:35:43 [INFO ] done hoge about &#39;FUGAGA&#39;&#xA;12:54:32 [FATAL] failed do hoge : hoge is &#39;hogege&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to stop debugging, use &lt;code&gt;hoge--log-disable-debugging&lt;/code&gt;.&lt;br&gt; If you want to verify activity of debugging in the elisp, use &lt;code&gt;hoge--log-debugging-p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By using &lt;code&gt;hoge--log-enable-debugging&lt;/code&gt;, logging is enabled too.&lt;/p&gt; &#xA;&lt;h3&gt;Dump log into other buffer&lt;/h3&gt; &#xA;&lt;p&gt;You are able to dump the same log into other area with logging to standard log buffer by &lt;code&gt;hoge--log-enable-messaging&lt;/code&gt;.&lt;br&gt; The command receives an argument as a buffer. In default, it&#39;s echo area.&lt;br&gt; For stopping to dump, use &lt;code&gt;hoge--log-disable-messaging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Inhibit logging statement evaluation&lt;/h3&gt; &#xA;&lt;p&gt;Arguments of logging function are evaluated even if the logging level is not a logging range or logging is disabled like the following code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge--log-set-level &#39;info &#39;fatal)&#xA;(hoge--log-disable-logging)&#xA;(hoge--debug &#34;%s&#34; (very-big-cost-function)) ; &amp;lt;= This is done in any situation&#xA;(some-action)                               ; &amp;lt;= This will be not started until very-big-cost-function is finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the case, you are able to inhibit the evaluation using a macro version of the logging function like the following code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hoge--log-set-level &#39;info &#39;fatal)&#xA;(hoge--log-disable-logging)&#xA;(hoge--debug* &#34;%s&#34; (very-big-cost-function)) ; &amp;lt;= This is done only if this should be logged&#xA;(some-action)                                ; &amp;lt;= This will be started soon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But, if the macro version is used frequently, the compiled file size might come big.&lt;/p&gt; &#xA;&lt;h3&gt;Free log level function&lt;/h3&gt; &#xA;&lt;p&gt;If you want to do logging with changing log level by some condition locally, use &lt;code&gt;hoge--log&lt;/code&gt;.&lt;br&gt; &lt;code&gt;hoge--log&lt;/code&gt; is base of the logging function. About them, see Coding section above.&lt;br&gt; It receive a log level as 1st argument.&lt;/p&gt; &#xA;&lt;h3&gt;Insert logging statement quickly&lt;/h3&gt; &#xA;&lt;p&gt;You are able to insert logging statement quickly using &lt;code&gt;log4e:insert-start-log-quickly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aki2o/log4e/master/image/insert1.png&#34; alt=&#34;insert1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aki2o/log4e/master/image/insert2.png&#34; alt=&#34;insert2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to bind some key to the command, write like the following in your .emacs or site-start.el file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-key emacs-lisp-mode-map (kbd &#34;C-\\&#34;) &#39;log4e:insert-start-log-quickly)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clean log buffer&lt;/h3&gt; &#xA;&lt;p&gt;If you want to clear the log buffer named &#39; \*log4e-hoge\*&#39;, use &lt;code&gt;hoge--log-clear-log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tested On&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs … GNU Emacs 23.3.1 (i386-mingw-nt5.1.2600) of 2011-08-15 on GNUPACK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enjoy!!!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>