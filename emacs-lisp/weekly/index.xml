<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T02:11:40Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>minad/org-modern</title>
    <updated>2022-06-05T02:11:40Z</updated>
    <id>tag:github.com,2022-06-05:/minad/org-modern</id>
    <link href="https://github.com/minad/org-modern" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ¦„ Modern Org Style&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Modern Org Style #+author: Daniel Mendler #+language: en&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/org-modern.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/org-modern.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/org-modern.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/org-modern.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/org-modern&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/org-modern-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/org-modern&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/org-modern-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package implements a &#34;modern&#34; style for your Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks. The styling is configurable, you can enable, disable or modify the style of each syntax element individually via the =org-modern= customization group.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/org-modern/blob/screenshots/example.gif?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;The screenshots shows [[file:example.org][example.org]] with =org-modern-mode= turned on and off. The elegant theme featured in the screenshot is [[https://protesilaos.com/emacs/modus-themes][modus-operandi]].&lt;/p&gt; &#xA;&lt;p&gt;This package is still early in its development, so expect bugs and issues in particular due to unfortunate interactions of the =variable-pitch= and =fixed-pitch= fonts. You should ensure that your fonts combine harmonically and have approximately the same height. =org-modern-mode= tries to adjust the tag label display based on the value of =line-spacing=. This looks best if =line-spacing= has a value between 0.1 and 0.4 in the Org buffer. Note that =org-indent-mode= interferes with some of the style elements applied by =org-modern-mode=, e.g., the block brackets in the fringe.&lt;/p&gt; &#xA;&lt;p&gt;Bug reports, improvement or style proposals are welcome! Maybe some more Org elements deserve styling or alternative stylings should be offered?&lt;/p&gt; &#xA;&lt;p&gt;The tag style of =org-modern= is a poor Emacsien&#39;s ripoff from Nicholas Rougier&#39;s beautiful [[https://github.com/rougier/svg-tag-mode][svg-tag-mode]]. In contrast to =svg-tag-mode=, this package avoids images and uses cheap and fast Emacs box text properties. By only styling the text via text properties, the styled text, e.g., dates or tags stay editable and are easy to interact with.&lt;/p&gt; &#xA;&lt;p&gt;On the downside, this restricts our flexibility and may lead to font-dependent issues. We do our best, but for example there is no way we can get round corners. Combining =org-modern-mode= with =svg-tag-mode= is possible. You can use SVG tags and use the table and block styling from =org-modern=. If you are interested in further tweaks, Emacs comes with the builtin =prettify-symbols-mode= which can be used for individual styling of custom keywords.&lt;/p&gt; &#xA;&lt;p&gt;Another popular alternative is [[https://github.com/integral-dw/org-superstar-mode][org-superstar]], which has a more restricted feature set and mainly adjusts headlines and lists. =org-superstar= relies on character composition, while =org-modern= uses text properties, which are considered more future-proof.&lt;/p&gt; &#xA;&lt;p&gt;The package is available on GNU ELPA and MELPA. You can install the package with =package-install=. Then =org-modern= can be enabled manually in an Org buffer by invoking =M-x org-modern-mode=. In order to enable =org-modern= for all your Org buffers, add =org-modern-mode= to the Org mode hooks.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Option 1: Per buffer (add-hook &#39;org-mode-hook #&#39;org-modern-mode) (add-hook &#39;org-agenda-finalize-hook #&#39;org-modern-agenda)&lt;/p&gt; &#xA;&lt;p&gt;;; Option 2: Globally (global-org-modern-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Try the following minimal setup in =emacs -Q= to emulate the looks of the screenshot above.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Minimal UI (package-initialize) (menu-bar-mode -1) (tool-bar-mode -1) (scroll-bar-mode -1) (modus-themes-load-operandi)&lt;/p&gt; &#xA;&lt;p&gt;;; Choose some fonts ;; (set-face-attribute &#39;default nil :family &#34;Iosevka&#34;) ;; (set-face-attribute &#39;variable-pitch nil :family &#34;Iosevka Aile&#34;) ;; (set-face-attribute &#39;org-modern-symbol nil :family &#34;Iosevka&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; Add frame borders and window dividers (modify-all-frames-parameters &#39;((right-divider-width . 40) (internal-border-width . 40))) (dolist (face &#39;(window-divider window-divider-first-pixel window-divider-last-pixel)) (face-spec-reset-face face) (set-face-foreground face (face-attribute &#39;default :background))) (set-face-background &#39;fringe (face-attribute &#39;default :background))&lt;/p&gt; &#xA;&lt;p&gt;(setq ;; Edit settings org-auto-align-tags nil org-tags-column 0 org-catch-invisible-edits &#39;show-and-error org-special-ctrl-a/e t org-insert-heading-respect-content t&lt;/p&gt; &#xA;&lt;p&gt;;; Org styling, hide markup etc. org-hide-emphasis-markers t org-pretty-entities t org-ellipsis &#34;â€¦&#34;&lt;/p&gt; &#xA;&lt;p&gt;;; Agenda styling org-agenda-block-separator ?â”€ org-agenda-time-grid &#39;((daily today require-timed) (800 1000 1200 1400 1600 1800 2000) &#34; â”„â”„â”„â”„â”„ &#34; &#34;â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„&#34;) org-agenda-current-time-string &#34;â­  now â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(global-org-modern-mode) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/org-modern.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zerolfx/copilot.el</title>
    <updated>2022-06-05T02:11:40Z</updated>
    <id>tag:github.com,2022-06-05:/zerolfx/copilot.el</id>
    <link href="https://github.com/zerolfx/copilot.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot.el&lt;/h1&gt; &#xA;&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This plugin is unofficial and based on binaries provided by &lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;copilot.vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to Copilot technical preview to use this plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; (only support 12.x to 17.x).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package! copilot&#xA;  :recipe (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;*.el&#34; &#34;dist&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(use-package! copilot&#xA;  :hook (prog-mode . copilot-mode)&#xA;  :bind ((&#34;C-TAB&#34; . &#39;copilot-accept-completion-by-word)&#xA;         (&#34;C-&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion-by-word)&#xA;         :map company-active-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)&#xA;         :map company-mode-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; ===================&#xA;;; dotspacemacs/layers&#xA;;; ===================&#xA;&#xA;;; add copilot.el to additional packages&#xA;dotspacemacs-additional-packages&#xA; &#39;((copilot :location (recipe&#xA;                       :fetcher github&#xA;                       :repo &#34;zerolfx/copilot.el&#34;&#xA;                       :files (&#34;*.el&#34; &#34;dist&#34;))))&#xA;&#xA;;; ========================&#xA;;; dotspacemacs/user-config&#xA;;; ========================&#xA;&#xA;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;  ;; enable tab completion&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&#xA;&#xA;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&#xA;(define-key evil-insert-state-map (kbd &#34;C-&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion-by-word)&#xA;(define-key evil-insert-state-map (kbd &#34;C-TAB&#34;) &#39;copilot-accept-completion-by-word)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;General Configurations&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Load via &lt;code&gt;straight.el&lt;/code&gt; (recommended)&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :straight (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))&#xA;  :ensure t)&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Option 2: Load manually&lt;/h5&gt; &#xA; &lt;p&gt;Please make sure you have these dependencies installed, and use &lt;code&gt;load-file&lt;/code&gt; or &lt;code&gt;load-path&lt;/code&gt; + &lt;code&gt;require&lt;/code&gt; to load it.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;2. Configure completion&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; &#xA; &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; &#xA; &lt;p&gt;In general, you need to bind &lt;code&gt;copilot-accept-completion&lt;/code&gt; to some key in order to accept the completion. Also, you may find &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; is useful.&lt;/p&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;company-mode&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then company-mode&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;; modify company-mode behaviors&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;auto-complete&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then auto-complete&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (ac-expand nil)))&#xA;&#xA;(with-eval-after-load &#39;auto-complete&#xA;  ; disable inline preview&#xA;  (setq ac-disable-inline t)&#xA;  ; show menu if have only one candidate&#xA;  (setq ac-candidate-menu-min 0)&#xA;&#xA;  (define-key ac-completing-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key ac-completing-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab))&#xA;&#xA;(define-key global-map [remap indent-for-tab-command] &#39;(lambda ()&#xA;                                                         (interactive)&#xA;                                                         (or (copilot-accept-completion)&#xA;                                                             (indent-for-tab-command))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-diagnose&lt;/h4&gt; &#xA;&lt;p&gt;Check the current status of the plugin. Also you can check logs in the &lt;code&gt;*copilot events*&lt;/code&gt; buffer and stderr output in the &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-login&lt;/h4&gt; &#xA;&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-mode&lt;/h4&gt; &#xA;&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-complete&lt;/h4&gt; &#xA;&lt;p&gt;Try to complete at the current point.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; &#xA;&lt;p&gt;Accept the current completion.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; &#xA;&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; &#xA;&lt;p&gt;Cycle through the completion list.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-logout&lt;/h4&gt; &#xA;&lt;p&gt;Logout from GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-node-executable&lt;/h4&gt; &#xA;&lt;p&gt;The executable path of Node.js.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; &#xA;&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be enabled only if all predicates return &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-disable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to disable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be disabled if any predicate returns &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-overlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; &#xA;&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-box.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have restarted your Emacs (and rebuild the plugin if necessary) after updating the plugin.&lt;/li&gt; &#xA; &lt;li&gt;Please paste related logs in the &lt;code&gt;*copilot events*&lt;/code&gt; and &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/li&gt; &#xA; &lt;li&gt;If an exception is thrown, please also paste the stack trace (use &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; to enable stack trace).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cycle through suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;These projects helped me a lot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyX12/company-tabnine/&#34;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cryptobadger/flight-attendant.el&#34;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>daviwil/emacs-from-scratch</title>
    <updated>2022-06-05T02:11:40Z</updated>
    <id>tag:github.com,2022-06-05:/daviwil/emacs-from-scratch</id>
    <link href="https://github.com/daviwil/emacs-from-scratch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An example of a fully custom Emacs configuration developed live on YouTube!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Emacs From Scratch&lt;/p&gt; &#xA;&lt;p&gt;This is an example of a fully custom Emacs configuration that you can use as inspiration when building your own!&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re developing this configuration live on YouTube, subscribe to [[https://www.youtube.com/c/SystemCrafters?sub_confirmation=1][System Crafters]] (make sure to click the bell!) so that you&#39;re notified of future streams.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re enjoying the videos and benefitting from the examples in this repo, please &lt;em&gt;consider [[https://github.com/sponsors/daviwil][becoming a sponsor]]&lt;/em&gt; to support the development of future content!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to Use This Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo is meant to be a companion to the Emacs From Scratch video series, serving as an example of a custom configuration build on top of vanilla Emacs. I give instructions below for how to set it up to try it out, but it isn&#39;t meant to be used as your main configuration! My goal here is to provide a working configuration that you can take inspiration from (and copy from directly).&lt;/p&gt; &#xA;&lt;p&gt;Just keep in mind that this repo isn&#39;t set up to be used directly as your own configuration! Copy the code to your own dotfiles repository and have fun :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Episodes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo now contains configuration from multiple series on the channel!&lt;/p&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch]]&lt;/p&gt; &#xA;&lt;p&gt;Here is a list of all the episode videos with links to the configuration we built for each one:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=74zOY-vgkyw][Live-Coding a Custom Emacs Configuration from Scratch]] ([[https://github.com/daviwil/emacs-from-scratch/tree/c0266ff684f670ecc5e41615c0282912e6615214][Code]], [[file:show-notes/Emacs-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=IspAZtNTslY][Adding Helpful UI Improvements]] ([[https://github.com/daviwil/emacs-from-scratch/tree/43c0401355c7971cb4491690ee4b8449505a5d58][Code]], [[file:show-notes/Emacs-02.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=xaZMwNELaJY][Key Bindings and Evil]] ([[https://github.com/daviwil/emacs-from-scratch/tree/29e542c79632853d85124019e47506cc0571cd05][Code]], [[file:show-notes/Emacs-03.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/INTu30BHZGk][Projectile and Magit]] ([[https://github.com/daviwil/emacs-from-scratch/tree/500370fa06889dad313e60473d73090fcfbe106d][Code]], [[file:show-notes/Emacs-04.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=VcgjTEa0kU4][Org Mode Basics]] ([[https://github.com/daviwil/emacs-from-scratch/tree/1a13fcf0dd6afb41fce71bf93c5571931999fed8][Code]], [[file:show-notes/Emacs-05.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/PNE-mgkZ6HM][Organizing Your Life with Org Mode]] ([[https://github.com/daviwil/emacs-from-scratch/tree/c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4][Code]], [[file:show-notes/Emacs-06.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/kkqVTDbfYp4][Configure Everything with Org Babel]] ([[https://github.com/daviwil/emacs-from-scratch/tree/9388cf6ecd9b44c430867a5c3dad5f050fdc0ee1][Code]], [[file:show-notes/Emacs-07.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/E-NAM9U5JYE][Build Your Own IDE with lsp-mode]] ([[https://github.com/daviwil/emacs-from-scratch/tree/6d078217a41134cc667f969430d150c50d03f448][Code]], [[file:show-notes/Emacs-08.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/wa_wZIuT9Vw][Learn to Love the Terminal Modes]] ([[https://github.com/daviwil/emacs-from-scratch/tree/bbfbc77b3afab0c14149e07d0ab08d275d4ba575][Code]], [[file:show-notes/Emacs-09.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/PMWwM8QJAtU][Effortless File Management with Dired]] ([[https://github.com/daviwil/emacs-from-scratch/blob/8c302a79bf5700f6ef0279a3daeeb4123ae8bd59/Emacs.org#dired][Code]], [[file:show-notes/Emacs-10.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/dtjq68F2dXw][Keeping Your Emacs Packages Up to Date]] ([[https://github.com/daviwil/emacs-from-scratch/blob/4e921ccbe603d5fdd9c7f16c2418ac7322c8ab71/Emacs.org#automatic-package-updates][Code]], [[file:show-notes/Emacs-Scratch-11.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/9i_9hse_Y08][How to Cut Emacs Start Up Time in Half!]] (Code, [[file:show-notes/Emacs-Scratch-12.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPZvSdewHG8uApD7THlLLCV][Emacs Essentials]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/48JlgiBpw_I][The Absolute Beginner&#39;s Guide to Emacs]] ([[file:show-notes/Emacs-Beginners-01.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/watch?v=RQK_DaaX34Q&amp;amp;list=PLEoMzSkcN8oPQtn7FQEF3D7sroZbXuPZ7][Learning Emacs Lisp]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/RQK_DaaX34Q][Introduction to Emacs Lisp]] ([[file:show-notes/Emacs-Lisp-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/XXpgzyeYh_4][Types, Conditionals, and Loops]] ([[file:show-notes/Emacs-Lisp-02.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/EqgkAUHw0Yc][Defining Functions and Commands]] ([[file:show-notes/Emacs-Lisp-03.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/tq4kTNL1VD8][Defining Variables and Scopes]] ([[file:show-notes/Emacs-Lisp-04.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/J7d2LmivyyM][Reading and Writing Buffers in Practice]] ([[file:show-notes/Emacs-Lisp-05.org][Notes]], [[https://github.com/daviwil/dotcrafter.el/blob/8d507eda31e08a789c38a5d729866eb4cda6abaf/dotcrafter.el][Code]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oNPbEMYEtswOVTvq7CVddCS][Emacs Desktop Environment]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=f7xB2fFk1tQ][Getting Started with EXWM]] ([[https://github.com/daviwil/emacs-from-scratch/blob/219c060e1bd695948c7691955a12a5dcaf3a9530/Emacs.org#window-management][Code]], [[file:show-notes/Emacs-Desktop-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/9gfKrrTtyOk][Improving the EXWM Experience]] ([[https://github.com/daviwil/emacs-from-scratch/blob/2805904966dbd5810ee735e25c4b427014761be5/Desktop.org][Code]], [[file:show-notes/Emacs-Desktop-02.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/HGGU5Zvljj8][Optimizing Window Placement in EXWM]] ([[https://github.com/daviwil/emacs-from-scratch/blob/39f63fe133cd4c41e13bbd1551c6517162851411/Desktop.org#exwm-configuration][Code]], [[file:show-notes/Emacs-Desktop-03.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/eF5NfVN411Q][Using Multiple Monitors in EXWM]] ([[https://github.com/daviwil/emacs-from-scratch/blob/5ebd390119a48cac6258843c7d5e570f4591fdd4/Desktop.org#exwm-configuration][Code]], [[file:show-notes/Emacs-Desktop-04.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/usCfMstCZ7E][The Perfect Panel: Integrating Polybar with Emacs]] ([[https://github.com/daviwil/emacs-from-scratch/blob/75f1d4e08512c49ea073c26058df6d4cca3a0d6b/Desktop.org#panel-with-polybar][Code]], [[file:show-notes/Emacs-Desktop-05.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/GX_LGfuojcE][Enabling Desktop Notifications with Dunst]] ([[https://github.com/daviwil/emacs-from-scratch/blob/b927109521b4b8a7e701709dabbdd9c1ea2fc27c/Desktop.org#desktop-notifications-with-dunst][Code]], [[file:show-notes/Emacs-Desktop-06.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN][Emacs IDE]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/0bilcQVSlbM][How to Debug Your Code with dap-mode]] ([[https://github.com/daviwil/emacs-from-scratch/blob/210e517353abf4ed669bc40d4c7daf0fabc10a5c/Emacs.org#debugging-with-dap-mode][Code]], [[file:show-notes/Emacs-IDE-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/jPXIP46BnNA][Python Development Configuration]] ([[https://github.com/daviwil/emacs-from-scratch/blob/dd9320769f3041ac1edca139496f14abe147d010/Emacs.org#python][Code]], [[file:show-notes/Emacs-IDE-02.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/watch?v=wKTKmE1wLyw&amp;amp;list=PLEoMzSkcN8oMHJ6Xil1YdnYtlWd5hHZql][Emacs Tips]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/gbdE7oZEdtA][How to Create and Manage Multiple Windows]] ([[file:show-notes/Emacs-Tips-05.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/C7ZlNRbWdVI][Organize Your Windows with the Tab Bar in Emacs 27]] ([[file:show-notes/Emacs-Tips-06.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/_qXZNfRcNnw][Dynamic Tiling Windows in Emacs with Edwina]] ([[file:show-notes/Emacs-Tips-07.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/ZjCRxAMPdNc][Unlock the Power of the Daemon with emacsclient]] ([[file:show-notes/Emacs-Tips-08.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/T9kygXveEz0][Give Emacs Psychic Completion Powers with prescient.el]] ([[file:show-notes/Emacs-Tips-Prescient.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/XZjyJG-sFZI][Teach Emacs to Keep Your Folders Clean]] ([[https://github.com/daviwil/emacs-from-scratch/blob/a57d99ba80276926a2b68521f9a9d23dc173a628/Emacs.org][Code]], [[file:show-notes/Emacs-Tips-Cleaning.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/nZ_T7Q49B8Y][Managing Encrypted Passwords with Emacs]] ([[file:show-notes/Emacs-Tips-Pass.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/-H2nU0rsUMY][Hey Emacs, Don&#39;t Move My Windows!]] ([[file:show-notes/Emacs-Tips-DisplayBuffer-1.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** [[https://www.youtube.com/watch?v=yZRyEhi4y44&amp;amp;list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ][Emacs Mail]]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://youtu.be/yZRyEhi4y44][Streamline Your E-mail Management with mu4e]] ([[file:show-notes/Emacs-Mail-01.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/olXpfaSnf0o][Managing Multiple Email Accounts with mu4e and mbsync]] ([[file:show-notes/Emacs-Mail-02.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/WiyqU7gmKsk][Compose and Send Email with Emacs]] ([[file:show-notes/Emacs-Mail-03.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/aml36yZ-ANc][Enhance Your Emails with Org Mode]] ([[file:show-notes/Emacs-Mail-04.org][Notes]])&lt;/li&gt; &#xA; &lt;li&gt;[[https://youtu.be/dSZu4jwvaSs][Craft an Email Workflow with Org Mode]] ([[file:show-notes/Emacs-Mail-05.org][Notes]])&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Instructions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT:&lt;/em&gt; Be sure to read the commentary in [[file:Emacs.org][Emacs.org]] in case anything unexpected happens when you load this configuration. Feel free to [[https://github.com/daviwil/runemacs/issues][file an issue]] to discuss any questions or problems you have so we can discuss it in a future stream!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Linux and macOS&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Linux, Emacs can be found in every major Linux distribution&#39;s package manager. On macOS you can install Emacs using [[https://brew.sh/][Homebrew]] via =brew install emacs=.&lt;/p&gt; &#xA;&lt;p&gt;You can easily get started with this configuration on Linux and macOS by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to a folder on your system: =git clone &lt;a href=&#34;https://github.com/daviwil/emacs-from-scratch=&#34;&gt;https://github.com/daviwil/emacs-from-scratch=&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Back up any existing Emacs configuration you may already have in your home directory in the =.emacs.d= folder (you could try moving it to =.emacs.d-old=)&lt;/li&gt; &#xA; &lt;li&gt;Rename the directory for the clone of this repo to =~/.emacs.d=.&lt;/li&gt; &#xA; &lt;li&gt;Start Emacs!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Windows&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can download the latest Emacs version (27.1 at the time of this writing) for Windows by heading to the [[https://ftp.gnu.org/gnu/emacs/windows/emacs-27/][GNU FTP site]]. Downloading and running the [[https://ftp.gnu.org/gnu/emacs/windows/emacs-27/emacs-27.1-x86_64-installer.exe][installer package]] will likely be the easiest way to get started. You can also [[https://chocolatey.org/packages/Emacs][install Emacs via Chocolatey]] if you prefer a more automated approach.&lt;/p&gt; &#xA;&lt;p&gt;The location where the Emacs configuration folder lives may vary based on your version of Windows. If you have trouble getting this to work, check the [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html#Location-of-init-file][official FAQ]] on the topic. If you still can&#39;t get it to work, feel free to file an issue and I can help investigate.&lt;/p&gt; &#xA;&lt;p&gt;For most modern Windows versions (Windows 7+), these steps should work:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to a folder on your system: =git clone &lt;a href=&#34;https://github.com/daviwil/emacs-from-scratch=&#34;&gt;https://github.com/daviwil/emacs-from-scratch=&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Back up any existing Emacs configuration you may already have in your home directory (likely =C:\Users\yourusername=) in the =.emacs.d= folder (you could try moving it to =.emacs.d-old=)&lt;/li&gt; &#xA; &lt;li&gt;Rename the directory for the clone of this repo to =C:\Users\yourusername.emacs.d=.&lt;/li&gt; &#xA; &lt;li&gt;Start Emacs!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Installing the Fira Code Font&lt;/p&gt; &#xA;&lt;p&gt;This configuration uses the [[https://github.com/tonsky/FiraCode][Fira Code]] font by [[https://github.com/tonsky][@tonsky]] and installation instructions can be found on [[https://github.com/tonsky/FiraCode/wiki/Installing][this wiki page]].&lt;/p&gt; &#xA;&lt;p&gt;However, since this is meant to be /your/ configuration, feel free to choose your own font!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recommendations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some general recommendations on Emacs usage that you might find helpful:&lt;/p&gt; &#xA;&lt;p&gt;** Replace CapsLock with CTRL&lt;/p&gt; &#xA;&lt;p&gt;Most people don&#39;t use the CapsLock key (unless you like YELLING ON THE INTERNET) so you can use this simple fix to replace it with the CTRL to make your Emacs life easier. Doing this will prevent you from having to bend your pinky down all day long to hit all those fabled Emacs keybindings, allowing you to keep your hands on the home row of the keyboard.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to do it across all 3 major operating systems:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Linux X11&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are [[https://askubuntu.com/questions/33774/how-do-i-remap-the-caps-lock-and-ctrl-keys][many ways]] to accomplish this in Linux, but the easiest (and most repeatable) I&#39;ve found is to use [[https://wiki.archlinux.org/index.php/Xmodmap][xmodmap]]. First, create a file named =.Xmodmap= in your home folder and populate it like so:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src&lt;/p&gt; &#xA;&lt;p&gt;clear lock clear control keycode 66 = Control_L add control = Control_L add Lock = Control_R&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;This replaces CapsLock with control and also replaces the Ctrl key on the right side with CapsLock just in case you ever need to use it. Most login systems (GDM, KDM, etc) will load this file when you log in so you might not need to do anything extra for it to take effect, just log out and log back in again. If that doesn&#39;t seem to work, you can add this line to one of your startup files (=.xinitrc=, =.profile=, window manager configuration, etc):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh&lt;/p&gt; &#xA;&lt;p&gt;xmodmap ~/.Xmodmap&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Linux sway&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In your =~/.config/sway/config= file add this stanza and reload the config (usually $mod-Shift-c) or =swaymsg reload=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src input * { xkb_options caps:ctrl_modifier } #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Windows&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Approach #1: Change the binding in the Windows registry&lt;/p&gt; &#xA;&lt;p&gt;On Windows you can use a simple registry file to tweak the CapsLock mapping. Save the following text to a file called =CapsLockHack.reg=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src&lt;/p&gt; &#xA;&lt;p&gt;REGEDIT4 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout] &#34;Scancode Map&#34;=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Now double-click on this file in Windows Explorer and allow Windows to apply it to your registry settings. After you log out of your current session and log back in the new key mapping should be in effect. Note that this change will affect &lt;em&gt;all&lt;/em&gt; users on your system.&lt;/p&gt; &#xA;&lt;p&gt;Approach #2: Use Microsoft&#39;s PowerToys&lt;/p&gt; &#xA;&lt;p&gt;You can use PowerToys&#39; Keyboard Manager to easily remap the keys. Download the tool from their [[https://github.com/microsoft/PowerToys/releases][github]] page and install it. Then open the powertoys settings (you sould find it in the taskbar), go to keyboard manager, enable it if it isn&#39;t already enabled and remap your keys. Once finished you should see something like:&lt;/p&gt; &#xA;&lt;p&gt;=Caps Lock= âžž =Ctrl (Left)=&lt;/p&gt; &#xA;&lt;p&gt;=Ctrl (left)= âžž =Caps Lock=&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;macOS&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thankfully Apple saw fit to make this a first-class option in macOS. You can follow the [[https://support.apple.com/guide/mac-help/change-the-behavior-of-the-modifier-keys-mchlp1011/mac][official documentation]] for your version of macOS to find the Modifier Keys settings and then switch Caps Lock to Control on that page.&lt;/p&gt;</summary>
  </entry>
</feed>