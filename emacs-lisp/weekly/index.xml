<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-24T01:49:30Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>domtronn/all-the-icons.el</title>
    <updated>2023-12-24T01:49:30Z</updated>
    <id>tag:github.com,2023-12-24:/domtronn/all-the-icons.el</id>
    <link href="https://github.com/domtronn/all-the-icons.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A utility package to collect various Icon Fonts and propertize them within Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/logo.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#resource-fonts&#34;&gt;Fonts&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://melpa.org/#/all-the-icons&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/all-the-icons-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/all-the-icons&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/all-the-icons-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/domtronn/all-the-icons.el.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/domtronn/all-the-icons.el&#34;&gt;&lt;img src=&#34;https://travis-ci.org/domtronn/all-the-icons.el.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You should be able to install this package in the standard way, add it to the load path and then calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(when (display-graphic-p)&#xA;  (require &#39;all-the-icons))&#xA;;; or&#xA;(use-package all-the-icons&#xA;  :if (display-graphic-p))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing Fonts&lt;/h3&gt; &#xA;&lt;p&gt;In order for the icons to work it is &lt;strong&gt;very important&lt;/strong&gt; that you install the Resource Fonts included in this package, they are available in the &lt;a href=&#34;file:///fonts&#34;&gt; &lt;code&gt;fonts&lt;/code&gt; &lt;/a&gt; directory. You can also install the &lt;em&gt;latest&lt;/em&gt; fonts for this package in the &lt;em&gt;(guessed?)&lt;/em&gt; based on the OS by calling the following function;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x all-the-icons-install-fonts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bear in mind, this will also run &lt;code&gt;fc-cache -f -v&lt;/code&gt; on &lt;strong&gt;MacOS&lt;/strong&gt; and &lt;strong&gt;Linux&lt;/strong&gt; which &lt;em&gt;can take some time&lt;/em&gt; to complete. For &lt;strong&gt;Windows&lt;/strong&gt;, this function will prompt for a &lt;em&gt;download&lt;/em&gt; directory for you to install them manually.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The simplest usage for this package is to use the following functions;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-buffer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-dir&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-icon-for-url&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Which can be used to get a formatted icon which you can insert into buffers, &lt;em&gt;e.g.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(insert (all-the-icons-icon-for-file &#34;foo.js&#34;))&#xA;    ;; Inserts a javascript icon&#xA;    ;; #(&#34;js-icon&#34; 0 1 (display (raise -0.24) face (:family &#34;alltheicon&#34; :height 1.08 :foreground &#34;#FFD446&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inserting Icons Directly&lt;/h2&gt; &#xA;&lt;p&gt;The above is fine if you want this package to automatically decide on the icon you want for files and things, however, to insert the icons directly you will want to use these icons functions;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-alltheicon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-faicon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-fileicon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-octicon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-wicon&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can then call these functions with the icon you want to insert, &lt;em&gt;e.g.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(all-the-icons-octicon &#34;file-binary&#34;)  ;; GitHub Octicon for Binary File&#xA;(all-the-icons-faicon  &#34;cogs&#34;)         ;; FontAwesome icon for cogs&#xA;(all-the-icons-wicon   &#34;tornado&#34;)      ;; Weather Icon for tornado&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A list of all the icon names for a font family can be found in the &lt;code&gt;data&lt;/code&gt; directory, or by inspecting the alist variables.&lt;/p&gt; &#xA;&lt;p&gt;The alist variables are all prefixed with&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;all-the-icons-data/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example &lt;code&gt;C-h v all-the-icons-data/ &amp;lt;TAB&amp;gt;&lt;/code&gt; will give a list of all the data alist you can describe &lt;em&gt;(and the icon fonts they&#39;re associated with)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inserting icons with properties&lt;/h2&gt; &#xA;&lt;p&gt;Each of the above icon functions can also be given different properties to slightly adjust the way they&#39;re formatted, these are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:height&lt;/code&gt; - The height of the icon&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:v-adjust&lt;/code&gt; - Vertical adjust (&lt;em&gt;positive is up, negative is down&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:face&lt;/code&gt; - The face to apply to the icon, defaults to &lt;code&gt;\&#39;default&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So you would call, for example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(all-the-icons-wicon &#34;tornado&#34; :face &#39;all-the-icons-blue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These properties can also be used on the &lt;code&gt;all-the-icons-icon-for-file&lt;/code&gt; and &lt;code&gt;all-the-icons-icon-for-mode&lt;/code&gt; functions as well, &lt;em&gt;i.e.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(insert (all-the-icons-icon-for-file &#34;foo.js&#34; :height 2 :face &#39;all-the-icons-lred))&#xA;    ;; Inserts a RED Javascript icon with height 2&#xA;    ;; #(&#34;js-icon&#34; 0 1 (display (raise -0.24) face (:family &#34;alltheicon&#34; :height 2.0 :foreground &#34;red&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default icon &lt;code&gt;:height&lt;/code&gt; and &lt;code&gt;:v-adjust&lt;/code&gt; properties can be set with the &lt;code&gt;all-the-icons-scale-factor&lt;/code&gt; and &lt;code&gt;all-the-icons-default-adjust&lt;/code&gt; variables. Additional adjustments can be made per font family via the &lt;code&gt;all-the-icons-{familyname}-scale-factor&lt;/code&gt; and &lt;code&gt;all-the-icons-default-{familyname}-adjust&lt;/code&gt; variables, where &lt;code&gt;{familyname}&lt;/code&gt; is any member of &lt;code&gt;all-the-icons-font-families&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Propertizing icons yourself&lt;/h2&gt; &#xA;&lt;p&gt;However, sometimes when propertizing these icons &lt;em&gt;(for example if you were customising your mode line)&lt;/em&gt; you &lt;em&gt;may&lt;/em&gt; sometimes have to know the font family to add in to override the current font family being used, &lt;em&gt;e.g.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(propertize (all-the-icons-octicon &#34;package&#34;)&#xA;            &#39;face `(:family ,(all-the-icons-octicon-family) :height 1.2)&#xA;            &#39;display &#39;(raise -0.1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you see placeholders (AKA tofus) being rendered, or the wrong icons being displayed, the underlying cause generally falls into one of three categories:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Font installation failed due to networking issues. Check your OS&#39; and Emacs&#39; networking (&lt;code&gt;M-x customize-group RET gnutls/nsm/url/network RET&lt;/code&gt;) and security settings (i.e. proxy, firewall, antivirus software...)&lt;/li&gt; &#xA; &lt;li&gt;On *nix systems, make sure the font cache has been updated. &lt;code&gt;all-the-icons-install-fonts&lt;/code&gt; should do this for you automatically, but sometimes it may fail due to misconfiguration.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ve misconfigured your font settings in Emacs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To check if you&#39;ve misconfigured your Emacs font settings, you can try the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Print out all of the icons in an icon set and their corresponding id/name.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;&#xA;;; Valid font families are &#39;material &#39;wicon &#39;octicon &#39;faicon &#39;fileicon and &#39;alltheicon&#xA;&#xA;(all-the-icons-insert-icons-for &#39;alltheicon)   ;; Prints all the icons for `alltheicon&#39; font set&#xA;&#xA;(all-the-icons-insert-icons-for &#39;octicon 10)   ;; Prints all the icons for the `octicon&#39; family&#xA;                                               ;; and makes the icons height 10&#xA;&#xA;(all-the-icons-insert-icons-for &#39;faicon 1 0.5) ;; Prints all the icons for the `faicon&#39; family&#xA;                                               ;; and also waits 0.5s between printing each one&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Now that you are certain which icon set is not displaying properly, check the fontset currently in effect.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look up the hex code of the icon from the &lt;code&gt;data/data-[font-family].el&lt;/code&gt; file. Write it down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x describe-fontset RET RET&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now you are looking at the fontset for the current frame, search for the hex range for that icon. Usually it&#39;s &lt;code&gt;#xE000&lt;/code&gt;, or &lt;code&gt;#xF0&lt;/code&gt; &lt;code&gt;#xF2&lt;/code&gt;, but there are a few outside of these offsets.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t see the font family in question in the list of fontspecs (i.e. &lt;code&gt;[-*-file-icons-...]&lt;/code&gt;) below the range, or some other fontspecs in front of the one in question, you will have to add the families back to the fontset (scroll to the top to see which one is in effect), or arrange the fontspec order. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Use &#39;prepend for the NS and Mac ports or Emacs will crash.&#xA;(set-fontset-font t &#39;unicode (font-spec :family &#34;all-the-icons&#34;) nil &#39;append)&#xA;(set-fontset-font t &#39;unicode (font-spec :family &#34;file-icons&#34;) nil &#39;append)&#xA;(set-fontset-font t &#39;unicode (font-spec :family &#34;Material Icons&#34;) nil &#39;append)&#xA;(set-fontset-font t &#39;unicode (font-spec :family &#34;github-octicons&#34;) nil &#39;append)&#xA;(set-fontset-font t &#39;unicode (font-spec :family &#34;FontAwesome&#34;) nil &#39;append)&#xA;(set-fontset-font t &#39;unicode (font-spec :family &#34;Weather Icons&#34;) nil &#39;append)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Resource Fonts&lt;/h1&gt; &#xA;&lt;p&gt;All of the fonts provided in this packages as resources come with either the SIL Open Font License &lt;em&gt;(OFL)&lt;/em&gt; or an MIT License, below I will link to each of the fonts Sources and their Licenses.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Font Name&lt;/th&gt; &#xA;   &lt;th&gt;Font&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file-icons.ttf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://atom.io/packages/file-icons&#34;&gt;Atom File Icons Plugin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DanBrooker/file-icons/raw/master/LICENSE.md&#34;&gt;MIT LICENSE&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fontawesome.ttf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://fontawesome.io/&#34;&gt;FontAwesome Icons&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/FortAwesome/Font-Awesome#license&#34;&gt;SIL OFL LICENSE&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocitcons.ttf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://octicons.github.com&#34;&gt;GitHub OctIcons&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/primer/octicons/raw/master/LICENSE&#34;&gt;SIL OFL LICENSE&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;weathericons.ttf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://erikflowers.github.io/weather-icons/&#34;&gt;Weather Icons&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/primer/octicons/raw/master/LICENSE&#34;&gt;SIL OFL LICENSE&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;material-design-icons.ttf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://google.github.io/material-design-icons/&#34;&gt;Material Icons&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;APACHE LICENSE v2.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;all-the-icons.ttf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom Made Font&lt;/td&gt; &#xA;   &lt;td&gt;MIT LICENSE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The fonts provided with this packages are locked down to a version for unicode character mapping values. In the future, these may be automatically generated.&lt;/p&gt; &#xA;&lt;p&gt;I would like to thank all the authors for the creation and use of these fantastic fonts.&lt;/p&gt; &#xA;&lt;h1&gt;Wiki&lt;/h1&gt; &#xA;&lt;p&gt;Lastly, there is a &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el/wiki&#34;&gt;Wiki Page&lt;/a&gt; which should give you some ideas of ways to use this library to spruce up other Emacs packages.&lt;/p&gt; &#xA;&lt;h3&gt;Slow Rendering&lt;/h3&gt; &#xA;&lt;p&gt;If you experience a slow down in performance when rendering multiple icons simultaneously, you can try setting the following variable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setq inhibit-compacting-font-caches t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some people have found that this &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el/issues/28&#34;&gt;fixes the problem&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/#readme&#34;&gt;▲ back to top&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chetanvaity/envo</title>
    <updated>2023-12-24T01:49:30Z</updated>
    <id>tag:github.com,2023-12-24:/chetanvaity/envo</id>
    <link href="https://github.com/chetanvaity/envo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Environment files - emacs, tmux etc&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;envo&lt;/h1&gt; &#xA;&lt;p&gt;Environment files&lt;/p&gt; &#xA;&lt;h1&gt;Mac setup&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3 finger swipe up and add more &#34;Spaces&#34;&lt;/li&gt; &#xA; &lt;li&gt;System Preferences -&amp;gt; Keyboard shortcuts -&amp;gt; Mission Control section -&amp;gt; Add shortcuts for switching to all spaces&lt;/li&gt; &#xA; &lt;li&gt;Install iterm2&lt;/li&gt; &#xA; &lt;li&gt;Install brew&lt;/li&gt; &#xA; &lt;li&gt;git For different SSH keys for githib, gitlab, etc, in ~/.ssh/config, add: &lt;pre&gt;&lt;code&gt;Host github.com&#xA;HostName github.com&#xA;IdentityFile ~/.ssh/id_rsa_github&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;VSCode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Login with Github&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Useful one-liners&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ffmpeg -i MVI_6451.MOV -s 640x360 Rewa_dance_photosong.mp4&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yoshiki/yaml-mode</title>
    <updated>2023-12-24T01:49:30Z</updated>
    <id>tag:github.com,2023-12-24:/yoshiki/yaml-mode</id>
    <link href="https://github.com/yoshiki/yaml-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The emacs major mode for editing files in the YAML data serialization format.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;RECRUITMENTS I have not used emacs and this library for a long time, so I recruit maintainers or collaborators for all yaml-mode users. If you are interested in maintaining or collaborating with this library, please contact me.&lt;/p&gt; &#xA;&lt;p&gt;NAME yaml-mode - Simple major mode to edit YAML file for emacs&lt;/p&gt; &#xA;&lt;p&gt;REQUIREMENTS Emacs 24.1&lt;/p&gt; &#xA;&lt;p&gt;SYNOPSIS To install, just drop this file into a directory in your `load-path&#39; and (optionally) byte-compile it. To automatically handle files ending in &#39;.yml&#39;, add something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;yaml-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.yml\\&#39;&#34; . yaml-mode))&#xA;&#xA;to your .emacs file.&#xA;&#xA;Unlike python-mode, this mode follows the Emacs convention of not&#xA;binding the ENTER key to `newline-and-indent&#39;.  To get this&#xA;behavior, add the key definition to `yaml-mode-hook&#39;:&#xA;&#xA;(add-hook &#39;yaml-mode-hook&#xA;  &#39;(lambda ()&#xA;    (define-key yaml-mode-map &#34;\C-m&#34; &#39;newline-and-indent)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DESCRIPTION yaml-mode is major mode for emacs.&lt;/p&gt; &#xA;&lt;p&gt;INSTALL You can install yaml-mode typing below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    % make&#xA;    % make install&#xA;&#xA;    or&#xA;&#xA;    % make PREFIX=/your/home/dir&#xA;    % make install PREFIX=/your/home/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SETTING see SYNOPSIS.&lt;/p&gt; &#xA;&lt;p&gt;AUTHOR Yoshiki Kurihara &lt;a href=&#34;mailto:kurihara@cpan.org&#34;&gt;kurihara@cpan.org&lt;/a&gt; Copyright (C) 2010 by Free Software Foundation, Inc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This file is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This file is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with GNU Emacs.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>