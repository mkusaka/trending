<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:42:18Z</updated>
  <subtitle>Weekly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-php/php-mode</title>
    <updated>2022-10-16T01:42:18Z</updated>
    <id>tag:github.com,2022-10-16:/emacs-php/php-mode</id>
    <link href="https://github.com/emacs-php/php-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful and flexible Emacs major mode for editing PHP scripts&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Emacs PHP Mode&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Emacs-28.1-blue.svg?sanitize=true&#34; alt=&#34;Emacs: 28.1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://php.net/manual/migration81.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lang-PHP%208.1-brightgreen.svg?sanitize=true&#34; alt=&#34;lang: PHP 8.1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://php.net/downloads.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lang-PHP%207-green.svg?sanitize=true&#34; alt=&#34;lang: PHP 7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-php/php-mode/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacs-php/php-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_v3-green.svg?sanitize=true&#34; alt=&#34;GPL v3&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/php-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/php-mode.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/php-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/php-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;A powerful and flexible Emacs major mode for editing PHP scripts&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Please submit any bug reports or feature requests by creating issues on &lt;a href=&#34;https://github.com/emacs-php/php-mode&#34;&gt;the GitHub page for PHP Mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PHP Mode works on Emacs 25.2 or later.&lt;/strong&gt; PHP Mode may work with older versions of Emacs but this is not guaranteed. Bug reports for problems related to using PHP Mode with older versions of Emacs will most like &lt;em&gt;not&lt;/em&gt; be addressed.&lt;/p&gt; &#xA;&lt;p&gt;The current support policy can be found on the &lt;a href=&#34;https://github.com/emacs-php/php-mode/wiki/Supported-Version&#34;&gt;Supported Version&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;(RECOMMENDED)&lt;/strong&gt; Install from NonGNU ELPA&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.nongnu.org/nongnu/php-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/php-mode.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu-devel/php-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu-devel/php-mode.svg?sanitize=true&#34; alt=&#34;NonGNU-devel ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emacs 28 (latest stable release) includes &lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; as the default package repository.&lt;/p&gt; &#xA;&lt;h3&gt;Install from MELPA&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/php-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/php-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/php-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/php-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;With GNU Emacs 24 or later then you can use its &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html&#34;&gt;package&lt;/a&gt; feature (or &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt;) to install PHP Mode from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install using OS package system&lt;/h3&gt; &#xA;&lt;p&gt;PHP Mode is available from &lt;a href=&#34;https://repology.org/project/emacs:php-mode/versions&#34;&gt;package systems provided by several OSs&lt;/a&gt;. On Debian, and operating systems derived from it, such as Ubuntu, the easiest way to add PHP support to Emacs is &lt;code&gt;sudo apt install elpa-php-mode&lt;/code&gt;. &#34;Stable&#34; releases of these operating systems include a well-tested frozen version of this package that is always older than the latest upstream version of PHP Mode. Autoloads and byte-compilation are automatic.&lt;/p&gt; &#xA;&lt;p&gt;Please consider installing the package provided in &lt;code&gt;sid&lt;/code&gt; (aka: &#34;unstable&#34;, a rolling release) in order to benefit from the latest PHP Mode features and performance improvements. The latest version can be found here: &lt;a href=&#34;https://packages.debian.org/sid/elpa-php-mode&#34;&gt;&lt;code&gt;elpa-php-mode&lt;/code&gt;&lt;/a&gt;. Investigate &#34;apt-pinning&#34; to make tracking this update stream automatic.&lt;/p&gt; &#xA;&lt;p&gt;Also, the &lt;code&gt;php-elisp&lt;/code&gt; package provided by &lt;a href=&#34;https://packages.debian.org/stretch/php-elisp&#34;&gt;Debian 9 (stretch)&lt;/a&gt; and &lt;a href=&#34;https://packages.ubuntu.com/cosmic/php-elisp&#34;&gt;Ubuntu 18.10&lt;/a&gt; and earlier is &lt;a href=&#34;https://github.com/emacs-php/php-mode/issues/430&#34;&gt;extremely old&lt;/a&gt;, so &lt;strong&gt;PLEASE DO NOT INSTALL IT&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to depend on a package manager, you can install Lisp files directly in the traditional way. See &lt;a href=&#34;https://github.com/emacs-php/php-mode/wiki/Manual-installation&#34;&gt;Manual installation&lt;/a&gt; for our recommended setup method.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;PHP Mode&#39;s default style might not be what you expect. Before filing a bug, please try the following: &lt;code&gt;C-h v php-mode-coding-style&lt;/code&gt;, to get the list of available styles. Then use &lt;code&gt;M-x php-set-style&lt;/code&gt; for each of these, to check to see if one of them is to your liking. Use &lt;code&gt;TODO: Please comment on what config method you&#39;d like to recommend to users&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;p&gt;When reporting a bug please run the function &lt;code&gt;M-x php-mode-debug&lt;/code&gt; and include its output in your bug report. This helps up reproduce any problem you may have.&lt;/p&gt; &#xA;&lt;h2&gt;Experimental and In-Progress Features&lt;/h2&gt; &#xA;&lt;h3&gt;CC Mode, CEDET, EDE, and Semantic&lt;/h3&gt; &#xA;&lt;p&gt;In 2013 Daniel Haxney began rewriting parts of PHP Mode in terms of Emacs&#39; built-in CC Mode. This laid the foundation for incorporating some of the inherit IDE-ish features of Emacs, such as CEDET, EDE, and Semantic. Support for these tools continues to improve thanks to the work of Andrea Turso, Steven Rémot, Joris Steyn, and others. If you wish to test, contribute to, or simply experiment with such features then &lt;a href=&#34;https://github.com/emacs-php/php-mode/issues/256&#34;&gt;this thread is a good place to start&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;PHP 7 Support&lt;/h3&gt; &#xA;&lt;p&gt;PHP 7 has been released. PHP Mode supports the following features and changes from PHP 7:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Type-hints for return values in functions and methods receive syntax highlighting in the same way as type-hints for function and method parameters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PHP Mode treats &lt;code&gt;yield from&lt;/code&gt; as keyword in the same way it already does for a sole &lt;code&gt;yield&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It recognizes &lt;code&gt;strict_types&lt;/code&gt; as a special declaration in the same way as &lt;code&gt;ticks&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;New Keywords&lt;/h3&gt; &#xA;&lt;p&gt;Now PHP Mode supports syntax highlighting for new keywords which PHP 5.4 introduced, e.g. those related to traits, such as &lt;code&gt;insteadof&lt;/code&gt;. Also supported are the older keywords &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Constants&lt;/h3&gt; &#xA;&lt;p&gt;Syntax highlighting includes every magic constant and predefined constant listed on the official PHP site. However, some constants from specific extensions are not currently included.&lt;/p&gt; &#xA;&lt;h3&gt;Traits, Interfaces, and Namespaces&lt;/h3&gt; &#xA;&lt;p&gt;Traits, interfaces, and namespaces now appear under Imenu listings. Fontification behaves properly for namespaces as well, so that code like &lt;code&gt;namespace Foo\Bar\Baz&lt;/code&gt; no longer looks like a warning. This is also true for namespace aliases, e.g. &lt;code&gt;use &amp;lt;namespace&amp;gt; as &amp;lt;alias&amp;gt;&lt;/code&gt;; currently the aliased name is not listed in Imenu, but future versions will address this.&lt;/p&gt; &#xA;&lt;h3&gt;Treatment of Underscores&lt;/h3&gt; &#xA;&lt;p&gt;PHP Mode treats underscores as ‘symbol constituents’ (in Emacs terminology) so that you can use keys like &lt;code&gt;M-f&lt;/code&gt; and &lt;code&gt;M-b&lt;/code&gt; to move through the individual parts of a variable name like &lt;code&gt;$foo_bar_baz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chained Method Calls&lt;/h3&gt; &#xA;&lt;p&gt;PHP Mode can align method calls over multiple lines anchored around the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$object-&amp;gt;foo()&#xA;       -&amp;gt;bar()&#xA;       -&amp;gt;baz();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This behaviour is off by default, but you can customize the variable &lt;code&gt;php-mode-lineup-cascaded-calls&lt;/code&gt; to enable this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Alignment will only work if you use one of the php-mode coding styles or inherit one of the styles.&lt;/p&gt; &#xA;&lt;h3&gt;Nested Array Formatting&lt;/h3&gt; &#xA;&lt;p&gt;Nested function calls and &lt;code&gt;array()&lt;/code&gt; structures now look better by default (or at least in my opinion). Here is an example of the style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$results = Post::model()-&amp;gt;find(&#xA;    array(&#xA;        &#39;select&#39; =&amp;gt; &#39;title&#39;,&#xA;        &#39;condition&#39; =&amp;gt; &#39;postID=:postID&#39;,&#xA;        &#39;params&#39; =&amp;gt; array(&#39;:postID&#39; =&amp;gt; 10),&#xA;    )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Anonymous Functions&lt;/h3&gt; &#xA;&lt;p&gt;Anonymous functions such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$greet = function($name) { ... };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will now appear on Imenu; in this case the name will be &lt;code&gt;$greet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Flymake Support&lt;/h3&gt; &#xA;&lt;p&gt;By customizing the variable &lt;code&gt;php-executable&lt;/code&gt; you can enable Flymake mode in order to see warnings and errors in real-time as you write code.&lt;/p&gt; &#xA;&lt;h3&gt;Search Local Documentation&lt;/h3&gt; &#xA;&lt;p&gt;The key command &lt;code&gt;C-c C-f&lt;/code&gt; will search the PHP website for documentation on the word under the cursor. However, if you have a &lt;a href=&#34;http://us2.php.net/download-docs.php&#34;&gt;local copy of the PHP documentation&lt;/a&gt; then PHP Mode will try searching that documentation first. All you need to do is customize the variable &lt;code&gt;php-manual-path&lt;/code&gt; and give it the path to your copy of the documentation. If PHP Mode cannot find something locally then it will still fallback on searching the PHP website.&lt;/p&gt; &#xA;&lt;h3&gt;Executing Regions of PHP&lt;/h3&gt; &#xA;&lt;p&gt;The command &lt;code&gt;php-send-region&lt;/code&gt;, which is bound to &lt;code&gt;C-c C-r&lt;/code&gt; by default, will execute the selected region of PHP code. In conjunction with the Emacs command &lt;code&gt;C-x h&lt;/code&gt; you can use this to execute an entire file. Any output will appear in a buffer called &lt;code&gt;*PHP*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;PHPDoc Tag / Annotation Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;PHPDoc is a documentation format similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/Javadoc&#34;&gt;JavaDoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are &lt;code&gt;@param&lt;/code&gt;, &lt;code&gt;@return&lt;/code&gt;, &lt;code&gt;@var&lt;/code&gt;... etc in the notation called &lt;strong&gt;tag&lt;/strong&gt;, look at &lt;a href=&#34;https://phpdoc.org/docs/latest/references/phpdoc/tags/index.html&#34;&gt;list of tags defined by phpDocumentor2&lt;/a&gt;. (These tags are compatible with static type checkers like PhpStorm and &lt;a href=&#34;https://github.com/etsy/phan&#34;&gt;Phan&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;In addition, it also partially supports notation called &lt;strong&gt;annotation&lt;/strong&gt;. Annotation has a slightly different grammar from tag, and the example is &lt;code&gt;@Annotation(attr1=&#34;vvv&#34;, attr2=&#34;zzz&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://symfony.com/&#34;&gt;Symfony&lt;/a&gt; project and &lt;a href=&#34;https://github.com/goaop/framework&#34;&gt;Go! AOP&lt;/a&gt; and some projects/frameworks use annotation grammer based on &lt;a href=&#34;https://www.doctrine-project.org/projects/doctrine-annotations/en/latest/index.html&#34;&gt;Doctrine Annotations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * Summary of Product class&#xA; *&#xA; * @copyright 2112 John Doe&#xA; * @license https://spdx.org/licenses/Apache-2.0.html Apache License 2.0&#xA; * @ORM\Entity&#xA; * @ORM\Table(name=&#34;product&#34;)&#xA; */&#xA;class Product&#xA;{&#xA;    /**&#xA;     * @ORM\Id&#xA;     * @ORM\Column(type=&#34;integer&#34;)&#xA;     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;)&#xA;     */&#xA;    protected $id;&#xA;&#xA;    /**&#xA;     * @ORM\Column(type=&#34;string&#34;, length=100)&#xA;     */&#xA;    protected $name;&#xA;&#xA;    /**&#xA;     * @ORM\Column(type=&#34;decimal&#34;, scale=2)&#xA;     */&#xA;    protected $price;&#xA;&#xA;    /**&#xA;     * @ORM\Column(type=&#34;text&#34;)&#xA;     */&#xA;    protected $description;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The annotations are the lines that begin with the &lt;code&gt;@&lt;/code&gt; character, and PHP Mode will give these special highlighting to help them stand out.&lt;/p&gt; &#xA;&lt;p&gt;PHP Mode has not fully supported &lt;a href=&#34;https://github.com/phpDocumentor/fig-standards/raw/master/proposed/phpdoc.md&#34;&gt;PSR-5: PHPDoc (Draft)&lt;/a&gt; yet. We want to support them, but the current implementation still limited. See issue &lt;a href=&#34;https://github.com/emacs-php/php-mode/issues/478&#34;&gt;#478&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Coding Styles&lt;/h3&gt; &#xA;&lt;p&gt;By default PHP Mode tries to provide a reasonable style for indentation and formatting, which you can use via the function &lt;code&gt;php-enable-default-coding-style&lt;/code&gt;. However, it provides other options suited for particular projects which you may find useful. Other coding styles are available through these functions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-pear-coding-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-drupal-coding-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-wordpress-coding-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-symfony2-coding-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-psr2-coding-style&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;They will help format your code for PEAR/PSR-2 projects, or work on Drupal, WordPress, and Symfony2 software, respectively. You may enable any of them by default by running &lt;code&gt;M-x customize-group &amp;lt;RET&amp;gt; php&lt;/code&gt; and looking for the ‘PHP Mode Coding Style’ option. You may also enable any of these via a hook, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;php-mode-hook &#39;php-enable-default-coding-style)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Symfony2 Style&lt;/h4&gt; &#xA;&lt;p&gt;With this style method call chains can be formatted with indented continuation and a hanging semi-colon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    $user1&#xA;        -&amp;gt;setCreateDate(new \DateTime(&#39;2007-05-07 01:34:45&#39;))&#xA;        -&amp;gt;setLastDate(new \DateTime(&#39;2012-08-18 19:03:02&#39;))&#xA;        -&amp;gt;setUsername(&#39;jay&#39;)&#xA;    ;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This style is used widely throughout Symfony2 source code even if it is not explicitly mentioned in their conventions documents.&lt;/p&gt; &#xA;&lt;h3&gt;Avoid HTML Template Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Many developers use PHP Mode to edit pure PHP scripts (e.g. files with only PHP and no HTML). A basic compatibility layer with HTML has historically been part of PHP Mode but it does not work perfectly and can cause some bad side effects such as slowness and incorrect font locking. Configuring the &lt;code&gt;php-template-compatibility&lt;/code&gt; property with a &lt;code&gt;nil&lt;/code&gt; will cancel any attempt of HTML compatibility. &lt;a href=&#34;http://web-mode.org/&#34;&gt;Web Mode&lt;/a&gt; is a great alternative to PHP Mode if you need to work with PHP scripts that do contain HTML and other markup.&lt;/p&gt; &#xA;&lt;h3&gt;Subword Mode&lt;/h3&gt; &#xA;&lt;p&gt;GNU Emacs comes with &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/ccmode/Subword-Movement.html&#34;&gt;Subword Mode&lt;/a&gt;, a minor mode that allows you to navigate the parts of a &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9&#34;&gt;camelCase&lt;/a&gt; as if they were separate words. For example, PHP Mode treats the variable &lt;code&gt;$fooBarBaz&lt;/code&gt; as a whole name by default. But if you enable Subword Mode then Emacs will treat the variable name as three separate words, and therefore word-related commands (e.g. &lt;code&gt;M-f&lt;/code&gt;, &lt;code&gt;M-b&lt;/code&gt;, &lt;code&gt;M-d&lt;/code&gt;) will only affect the camelCase part of the name under the cursor.&lt;/p&gt; &#xA;&lt;p&gt;If you want to always use Subword Mode for PHP files then you can add this to your Emacs configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;php-mode-hook (lambda () (subword-mode 1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key-binding &lt;code&gt;C-c C-w&lt;/code&gt; will also toggle Subword Mode on and off.&lt;/p&gt; &#xA;&lt;h3&gt;Insert current class/namespace&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(with-eval-after-load &#39;php-mode&#xA;  (define-key php-mode-map (kbd &#34;C-c C--&#34;) &#39;php-current-class)&#xA;  (define-key php-mode-map (kbd &#34;C-c C-=&#34;) &#39;php-current-namespace))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other Packages for PHP programming&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Completions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/xcwen/ac-php&#34;&gt;ac-php&lt;/a&gt;: &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;company-mode&lt;/a&gt; and &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;auto-complete&lt;/a&gt; for PHP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Syntax checking &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/flycheck/flycheck/&#34;&gt;flycheck&lt;/a&gt;: On the fly syntax checker&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/purcell/flymake-php&#34;&gt;flymake-php&lt;/a&gt;: flymake for PHP files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Snippet &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ejmr/php-auto-yasnippets&#34;&gt;php-auto-yasnippets&lt;/a&gt;: Dynamically Generated YASnippets for PHP Code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Documentation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/leoliu/ggtags&#34;&gt;ggtags&lt;/a&gt;: eldoc by using GNU global tags&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sabof/php-eldoc&#34;&gt;php-eldoc&lt;/a&gt;: eldoc backend for PHP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Testing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nlamirault/phpunit.el&#34;&gt;phpunit&lt;/a&gt;: phpunit test command tool&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Style &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nishimaki10/emacs-phpcbf&#34;&gt;phpcbf&lt;/a&gt;: PHP_CodeSniffer for Emacs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Semantic &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/stevenremot/ede-php-autoload&#34;&gt;ede-php-autoload&lt;/a&gt;: Semantic for PHP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Framework &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/k1LoW/emacs-cake&#34;&gt;cake&lt;/a&gt;: minor-mode for CakePHP&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/k1LoW/emacs-cake2&#34;&gt;cake2&lt;/a&gt;: minor-mode for CakePHP2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/emacs-php/php-mode/master/CONTRIBUTING.md#english&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The Wiki&lt;/h2&gt; &#xA;&lt;p&gt;The GitHub project page has a &lt;a href=&#34;https://github.com/emacs-php/php-mode/wiki&#34;&gt;wiki&lt;/a&gt; that you should feel free to edit. The wiki lists the features and bugs that are on plan to include in upcoming versions of PHP Mode. It is also a place to add any tips to make the mode more useful.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;PHP Mode is licensed under &lt;a href=&#34;https://www.gnu.org/licenses/quick-guide-gplv3.html&#34;&gt;GNU General Public License Version 3&lt;/a&gt; (GPLv3).&lt;/p&gt; &#xA;&lt;p&gt;This project originated in &lt;code&gt;php-mode.el&lt;/code&gt; written by &lt;a href=&#34;https://github.com/turadg&#34;&gt;Turadg Aleahmad&lt;/a&gt; in 1999. In 2013 &lt;a href=&#34;https://github.com/haxney&#34;&gt;Daniel Hackney&lt;/a&gt; began rewriting parts of PHP Mode in terms of Emacs&#39; built-in CC Mode. Other contributors are listed in &lt;a href=&#34;https://github.com/emacs-php/php-mode/wiki/Authors&#34;&gt;Authors&lt;/a&gt; and &lt;a href=&#34;https://github.com/emacs-php/php-mode/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project was maintained by &lt;a href=&#34;https://github.com/ejmr&#34;&gt;Eric James Michael Ritz&lt;/a&gt; until 2017. Currently, the &lt;a href=&#34;https://github.com/emacs-php&#34;&gt;Friends of Emacs-PHP Development&lt;/a&gt; community inherits PHP Mode.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code&gt;Copyright (C) 2022  Friends of Emacs-PHP development&#xA;Copyright (C) 1999, 2000, 2001, 2003, 2004 Turadg Aleahmad&#xA;              2008 Aaron S. Hawley&#xA;              2011, 2012, 2013, 2014, 2015, 2016, 2017 Eric James Michael Ritz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA; &lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA; &lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>stonebk/dotemacs</title>
    <updated>2022-10-16T01:42:18Z</updated>
    <id>tag:github.com,2022-10-16:/stonebk/dotemacs</id>
    <link href="https://github.com/stonebk/dotemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Version my emacs config&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>rmloveland/zoom-to-point</title>
    <updated>2022-10-16T01:42:18Z</updated>
    <id>tag:github.com,2022-10-16:/rmloveland/zoom-to-point</id>
    <link href="https://github.com/rmloveland/zoom-to-point" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs functions that zoom in on the text at point.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Exposes a command, &lt;code&gt;zoom-toggle&#39;, which will increase or decrease the size of the text at point, and a variable, &lt;/code&gt;&lt;em&gt;default-zoom-level&lt;/em&gt;&#39;, which determines the change in size.&lt;/p&gt;</summary>
  </entry>
</feed>