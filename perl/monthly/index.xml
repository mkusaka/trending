<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-01T02:18:54Z</updated>
  <subtitle>Monthly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>percona/percona-toolkit</title>
    <updated>2023-04-01T02:18:54Z</updated>
    <id>tag:github.com,2023-04-01:/percona/percona-toolkit</id>
    <link href="https://github.com/percona/percona-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Percona Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Percona Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cla-assistant.percona.com/percona/percona-toolkit&#34;&gt;&lt;img src=&#34;https://cla-assistant.percona.com/readme/badge/percona/percona-toolkit&#34; alt=&#34;CLA assistant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Percona Toolkit&lt;/em&gt; is a collection of advanced command-line tools used by &lt;a href=&#34;http://www.percona.com/&#34;&gt;Percona&lt;/a&gt; support staff to perform a variety of MySQL and system tasks that are too difficult or complex to perform manually.&lt;/p&gt; &#xA;&lt;p&gt;These tools are ideal alternatives to private or &#34;one-off&#34; scripts because they are professionally developed, formally tested, and fully documented. They are also fully self-contained, so installation is quick and easy and no libraries are installed.&lt;/p&gt; &#xA;&lt;p&gt;Percona Toolkit is developed and supported by Percona Inc. For more information and other free, open-source software developed by Percona, visit &lt;a href=&#34;http://www.percona.com/software/&#34;&gt;http://www.percona.com/software/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;To install all tools, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You probably need to be root to &lt;code&gt;make install&lt;/code&gt;. On most systems, the tools are installed in /usr/local/bin. See the INSTALL file for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;man percona-toolkit&lt;/code&gt; to see a list of installed tools, then &lt;code&gt;man tool&lt;/code&gt; to read the embedded documentation for a specific tool. You can also read the documentation online at &lt;a href=&#34;http://www.percona.com/software/percona-toolkit/&#34;&gt;http://www.percona.com/software/percona-toolkit/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GuidoBartoli/sherloq</title>
    <updated>2023-04-01T02:18:54Z</updated>
    <id>tag:github.com,2023-04-01:/GuidoBartoli/sherloq</id>
    <link href="https://github.com/GuidoBartoli/sherloq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source digital image forensic toolset&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/logo/sherloq.png&#34; width=&#34;600px&#34; alt=&#34;Sherloq&#34;&gt; &lt;br&gt;&lt;b&gt;An open source image forensic toolset&lt;/b&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;Forensic Image Analysis is the application of image science and domain expertise to interpret the content of an image and/or the image itself in legal matters. Major subdisciplines of Forensic Image Analysis with law enforcement applications include: Photogrammetry, Photographic Comparison, Content Analysis, and Image Authentication.&lt;/em&gt;&#34; (Scientific Working Group on Imaging Technologies)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sherloq&lt;/strong&gt; is a personal research project about implementing a fully integrated environment for digital image forensics. It is not meant as an automatic tool that decide if an image is forged or not (that tool probably will never exist...), but as a companion in experimenting with various algorithms found in the latest research papers and workshops.&lt;/p&gt; &#xA;&lt;p&gt;While many commercial solutions have high retail prices and often reserved to law enforcement and government agencies only,&amp;nbsp;this toolset aims to be a both an extensible framework and a starting point for anyone interested in making experiments in this particular application of digital signal processing.&lt;/p&gt; &#xA;&lt;p&gt;I strongly believe that &lt;em&gt;security-by-obscurity&lt;/em&gt;&amp;nbsp;is the wrong&amp;nbsp;way to offer any kind of forensic service&amp;nbsp;(i.e. &#34;Using this proprietary software I guarantee you that this photo &lt;em&gt;is&lt;/em&gt; pristine... and you have to trust me!&#34;). Following the open-source philosophy, everyone should be able to try various techniques on their own,&amp;nbsp;gain knowledge and share it to the community... even better if they contribute with code improvements! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#historry&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#updates&#34;&gt;Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#bibliography&#34;&gt;Bibliography&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;History&lt;/h1&gt; &#xA;&lt;p&gt;The first version was written in 2015 using C++11 to build a command line utility with many options, but soon it turned to be too cumbersome and not much interactive. That version could be compiled with CMake after installing OpenCV, Boost and AlgLib libraries. This first proof of concept offered about 80% of planned features (see below for the full list).&lt;/p&gt; &#xA;&lt;p&gt;While also including novel algorithms, the 2017 version mainly added a Qt-based multi-window GUI to provide a better user experience. Multiple analyses could be shown on screen and a fast zoom/scroll viewer was implemented for easier image navigation. That project could be compiled with Qt Creator with Qt 5 and OpenCV 3 and covered about 70% of planned features.&lt;/p&gt; &#xA;&lt;p&gt;Fast-forward to 2020 when I decided to port everything in Python (PySide2 + Matplotlib + OpenCV) for easier development and deployment. While this iteration is just begun and I have yet to port all the previous code on the new platform, I think this will be the final &#34;form&#34; of the project (as long as someone does not volunteer up to develop a nice web application!).&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m happy to share my code and get in contact with anyone interested to improve or test it, but please keep in mind that this repository is &lt;em&gt;not&lt;/em&gt; intended for distributing a final product, my aim is just to publicly track development of an &lt;em&gt;unpretentious educational tool&lt;/em&gt;, so expect bugs, unpolished code and missing features! ;)&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;This list contains the functions that the toolkit will (hopefully) provide once beta stage is reached (&lt;strong&gt;NOTE:&lt;/strong&gt; functions displayed in &lt;em&gt;italics&lt;/em&gt; inside the program are not yet implemented!).&lt;/p&gt; &#xA;&lt;h2&gt;Interface&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modern Qt-based GUI with multiple tool window management&lt;/li&gt; &#xA; &lt;li&gt;Support for many formats (JPEG, PNG, TIFF, BMP, WebP, PGM, PFM, GIF)&lt;/li&gt; &#xA; &lt;li&gt;Highly responsive image viewer with real-time pan and zoom&lt;/li&gt; &#xA; &lt;li&gt;Many state-of-the-art algorithms to try out interactively&lt;/li&gt; &#xA; &lt;li&gt;Export both visual and textual results of the analysis&lt;/li&gt; &#xA; &lt;li&gt;Extensive online help with explanations and tutorials&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Original Image&lt;/strong&gt;: display the unaltered reference image for visual inspection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File Digest&lt;/strong&gt;: retrieve physical file information, crypto and perceptual hashes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hex Editor&lt;/strong&gt;:&amp;nbsp;open an external hexadecimal editor to show and edit raw bytes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Similar Search&lt;/strong&gt;:&amp;nbsp;browse online search services to find visually similar images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Metadata&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Header Structure&lt;/strong&gt;:&amp;nbsp;dump the file header structure and display an interactive view&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EXIF Full Dump&lt;/strong&gt;:&amp;nbsp;scan through file metadata and gather all available information&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Thumbnail Analysis&lt;/strong&gt;:&amp;nbsp;extract optional embedded thumbnail and compare with original&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Geolocation Data&lt;/strong&gt;:&amp;nbsp;retrieve optional geolocation data and show it on a world map&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inspection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhancing Magnifier&lt;/strong&gt;:&amp;nbsp;magnifying glass with enhancements for better identifying forgeries&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Channel Histogram&lt;/strong&gt;: display single color channels or RGB composite interactive histogram&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Adjustments&lt;/strong&gt;:&amp;nbsp;apply standard image adjustments (brightness, hue, saturation, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reference Comparison&lt;/strong&gt;:&amp;nbsp;open a synchronized double view for comparison with another picture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Detail&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Luminance Gradient&lt;/strong&gt;: analyze horizontal/vertical brightness variations across the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Echo Edge Filter&lt;/strong&gt;: use derivative filters to reveal artificial out-of-focus regions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wavelet Threshold&lt;/strong&gt;: reconstruct image with different wavelet coefficient thresholds&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Frequency Split&lt;/strong&gt;: split image luminance into high and low frequency components&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Colors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RGB/HSV Plots&lt;/strong&gt;:&amp;nbsp;display interactive 2D and 3D plots of RGB and HSV pixel values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Space Conversion&lt;/strong&gt;:&amp;nbsp;convert RGB channels into HSV/YCbCr/Lab/Luv/CMYK/Gray spaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PCA Projection&lt;/strong&gt;:&amp;nbsp;use color PCA to project pixel onto most salient components&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pixel Statistics&lt;/strong&gt;:&amp;nbsp;compute minimum/maximum/average RGB values for every pixel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Noise&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Noise Separation&lt;/strong&gt;: estimate and extract different kind of image noise components&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Min/Max Deviation&lt;/strong&gt;: highlight pixels deviating from block-based min/max statistics&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bit Planes Values&lt;/strong&gt;: show individual bit planes to find inconsistent noise patterns&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PRNU Identification&lt;/strong&gt;: exploit sensor pattern noise introduced by different cameras&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JPEG&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quality Estimation&lt;/strong&gt;:&amp;nbsp;extract quantization&amp;nbsp;tables and estimate last saved JPEG quality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Level Analysis&lt;/strong&gt;: show pixel-level difference against fixed compression levels&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple Compression&lt;/strong&gt;: use a machine learning model to detect multiple compression&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JPEG Ghost Maps&lt;/strong&gt;:&amp;nbsp;highlight traces of different compression levels in difference images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tampering&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contrast Enhancement&lt;/strong&gt;: analyze color distribution to detect contrast enhancements&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy-Move Forgery&lt;/strong&gt;: use invariant feature descriptors for cloned area detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composite Splicing&lt;/strong&gt;: exploit DCT statistics for automatic splicing zone detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image Resampling&lt;/strong&gt;: estimate 2D pixel interpolation for detecting resampling traces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Various&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Median Filtering&lt;/strong&gt;: detect processing traces left by nonlinear median filtering&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Illuminant Map&lt;/strong&gt;: estimate scene local light direction on estimated 3D surfaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dead/Hot Pixels&lt;/strong&gt;: detect and fix dead/hot pixels caused by sensor imperfections&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stereogram Decoder&lt;/strong&gt;: decode 3D images concealed in crossed-eye autostereograms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/0_general.png&#34; alt=&#34;General&#34;&gt; &lt;br&gt;&lt;b&gt;General&lt;/b&gt;: Original Image, Hex Editor, File Digest, Similar Search &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/1_metadata.png&#34; alt=&#34;Metadata&#34;&gt; &lt;br&gt;&lt;b&gt;Metadata&lt;/b&gt;: EXIF Full Dump, Header Structure &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/2_inspection.png&#34; alt=&#34;Inspection&#34;&gt; &lt;br&gt;&lt;b&gt;Inspection&lt;/b&gt;: Enhancing Magnifier, Channel Histogram, Reference Comparison &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/3_detail.png&#34; alt=&#34;Detail&#34;&gt; &lt;br&gt;&lt;b&gt;Detail&lt;/b&gt;: Luminance Gradient, Echo Edge Filter, Wavelet Threshold, Frequency Split &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/4_colors.png&#34; alt=&#34;Colors&#34;&gt; &lt;br&gt;&lt;b&gt;Colors&lt;/b&gt;: RGB/HSV Plots, Space Conversion, PCA Projection, Pixel Statistics &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/5_noise.png&#34; alt=&#34;Noise&#34;&gt; &lt;br&gt;&lt;b&gt;Noise&lt;/b&gt;: Signal Separation, Min/Max Deviation, Bit Plane Values &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/6_jpeg.png&#34; alt=&#34;JPEG&#34;&gt; &lt;br&gt;&lt;b&gt;JPEG&lt;/b&gt;: Quality Estimation, Error Level Analysis &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/7_tampering.png&#34; alt=&#34;Tampering&#34;&gt; &lt;br&gt;&lt;b&gt;Tampering&lt;/b&gt;: Contrast Enhancement, Copy/Move Forgery, Composite Splicing, Median Filtering &lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;For more information about Python Virtual Environments, you can read &lt;a href=&#34;https://realpython.com/python-virtual-environments-a-primer/&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;[1/2] Virtual environment&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt install python3-distutils python3-dev python3-testresources subversion&#xA;$ wget https://bootstrap.pypa.io/get-pip.py&#xA;$ sudo python3 get-pip.py&#xA;$ rm get-pip.py&#xA;$ sudo pip install virtualenv virtualenvwrapper&#xA;$ echo -e &#34;\n# Python Virtual Environments&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#34;export WORKON_HOME=$HOME/.virtualenvs&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#34;export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#34;source /usr/local/bin/virtualenvwrapper.sh&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ source ~/.bashrc&#xA;$ mkvirtualenv sq -p python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Terminal and enter &lt;code&gt;python3 --version&lt;/code&gt; to install the interpreter and other command line tools&lt;/li&gt; &#xA; &lt;li&gt;Once installed, proceed similarly to Linux installation:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;   $ wget https://bootstrap.pypa.io/get-pip.py&#xA;   $ sudo python3 get-pip.py&#xA;   $ sudo pip install virtualenv virtualenvwrapper&#xA;   $ echo -e &#34;\n# Python Virtual Environments&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ echo &#34;export WORKON_HOME=$HOME/.virtualenvs&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ echo &#34;export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ echo &#34;source /usr/local/bin/virtualenvwrapper.sh&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create a new Python 3 virtual environment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkvirtualenv sq -p python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Install &lt;code&gt;libmagic&lt;/code&gt; via &lt;code&gt;brew&lt;/code&gt; (thanks to @thmsl):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;   $ /bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;   $ brew install libmagic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest &lt;em&gt;Python&lt;/em&gt; setup package from &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;official site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install ensuring that &#34;Add Python to PATH&#34; and &#34;PIP installation&#34; are enabled&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;em&gt;Command Prompt&lt;/em&gt; and enter the following commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; pip install virtualenv virtualenvwrapper-win&#xA;&amp;gt; mkvirtualenv sq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;[2/2] Launch program&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository content into a local folder&lt;/li&gt; &#xA; &lt;li&gt;Change current directory to the &lt;code&gt;gui&lt;/code&gt; folder inside &lt;code&gt;sherloq&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; to install required packages (use &lt;code&gt;pip install -r requirements_win.txt&lt;/code&gt; on Windows)&lt;/li&gt; &#xA; &lt;li&gt;Launch the GUI with &lt;code&gt;python sherloq.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Updates&lt;/h1&gt; &#xA;&lt;p&gt;When a new version is released, update the local working copy using Git, SVN or manually downloading from this repository and (if necessary) update the packages in the virtual environment following &lt;a href=&#34;https://www.activestate.com/resources/quick-reads/how-to-update-all-python-packages/&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Bibliography&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;A Picture&#39;s Worth: Digital Image Analysis and Forensics&#34; (Neal Krawetz) [&lt;a href=&#34;http://blackhat.com/presentations/bh-dc-08/Krawetz/Whitepaper/bh-dc-08-krawetz-WP.pdf&#34;&gt;paper&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&#34;Noiseprint: a CNN-based camera model fingerprint&#34; (Davide Cozzolino, Luisa Verdoliva) [&lt;a href=&#34;http://www.grip.unina.it/research/83-multimedia_forensics/107-noiseprint.html&#34;&gt;website&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&#34;Exposing Digital Forgeries by Detecting Traces of Re-sampling&#34; (Alin C. Popescu and Hany Farid) [&lt;a href=&#34;https://farid.berkeley.edu/downloads/publications/sp05.pdf&#34;&gt;paper&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&#34;Two Improved Forensic Methods of Detecting Contrast Enhancement in Digital Images&#34; (Xufeng Lin, Xingjie Wei and Chang-Tsun Li) [&lt;a href=&#34;https://d1wqtxts1xzle7.cloudfront.net/45863267/Two_Improved_Forensic_Methods_of_Detecti20160522-6998-1xf1cu.pdf?1463954131=&amp;amp;response-content-disposition=inline%3B+filename%3DTwo_improved_forensic_methods_of_detecti.pdf&amp;amp;Expires=1598306603&amp;amp;Signature=dYuKum8UF2NJS~2Jz2pFObtzdjKfYIcYD4GksLVNN0izhm2k10TVPV~UHKS0DbMLXKaurZPq7uvG~qQwQwwF4JKbY0zoCqZI-p9KZsEMYhlRJrYM8nNQL0V7sHMTLd3aYjNLWup~-i1RzJcJdRqzjU9doGxRJvHdsX6tbwIxNRq3JiYyldaXei4xJSJAbX7EoUOut2uh~jsPnsAbDOIrYpwUhebut-XsN2c5MXargD2UhKxZ3Ifwo4hJvz8Bl2sPys~E8P6vDlqOeEHoeByZms6JQON97EGsCTT5GYF98rQLDbqj0NroYE2zDMGcu9IUp8VV1Fotqci1G6eELTXx6w__&amp;amp;Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA&#34;&gt;paper&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>inverse-inc/packetfence</title>
    <updated>2023-04-01T02:18:54Z</updated>
    <id>tag:github.com,2023-04-01:/inverse-inc/packetfence</id>
    <link href="https://github.com/inverse-inc/packetfence" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PacketFence is a fully supported, trusted, Free and Open Source network access control (NAC) solution. Boasting an impressive feature set including a captive-portal for registration and remediation, centralized wired and wireless management, powerful BYOD management options, 802.1X support, layer-2 isolation of problematic devices; PacketFence c…&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PacketFence&lt;/h1&gt; &#xA;&lt;h2&gt;What is PacketFence?&lt;/h2&gt; &#xA;&lt;p&gt;PacketFence is a fully supported, trusted, Free and Open Source network access control (NAC) system. Boasting an impressive feature set including a captive-portal for registration and remediation, centralized wired and wireless management, 802.1X support, layer-2 isolation of problematic devices, integration with IDS solutions and vulnerability scanners; PacketFence can be used to effectively secure networks - from small to very large heterogeneous networks.&lt;/p&gt; &#xA;&lt;p&gt;You want to know who is on your network? You want to give different access to your network based on who is connecting? PacketFence is for you!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Follow the instructions provided in the &lt;a href=&#34;https://packetfence.org/support/index.html#/documentation&#34;&gt;Administration Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More Information&lt;/h2&gt; &#xA;&lt;p&gt;Noteworthy changes since the last release see the &lt;a href=&#34;https://github.com/inverse-inc/packetfence/raw/devel/NEWS.asciidoc&#34;&gt;NEWS file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Upgrading? See the &lt;a href=&#34;https://github.com/inverse-inc/packetfence/raw/devel/docs/PacketFence_Upgrade_Guide.asciidoc&#34;&gt;Upgrade Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more details and developer visible changes see the &lt;a href=&#34;https://github.com/inverse-inc/packetfence&#34;&gt;project&#39;s page on Github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://packetfence.org/support/index.html#/community&#34;&gt;community&lt;/a&gt; or request &lt;a href=&#34;https://packetfence.org/support/index.html#/commercial&#34;&gt;commercial support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;PacketFence is a collaborative effort in order to create the best Open Source NAC solution. There are multiple ways you can contribute to the project.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a network vendor&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Provide Inverse with switches, access points, wireless controllers, etc. so we can support even more equipment.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a security software vendor&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Provide Inverse with licenses of your software so we can integrate your IDS, Netflow analyzer, IPS, Web filter, etc. directly into PacketFence and its captive portal technology.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a PacketFence user&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation reviews, enhancements and translations&lt;/li&gt; &#xA; &lt;li&gt;Share your ideas and participate to the discussion in &lt;a href=&#34;https://packetfence.org/support/index.html#/community&#34; title=&#34;Community Mailing Lists&#34;&gt;mailing lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Provide Inverse with switches, access points, wireless controllers, etc. so we can support even more equipment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a developer&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation reviews, enhancements and translations&lt;/li&gt; &#xA; &lt;li&gt;Share your ideas and participate to the discussion in &lt;a href=&#34;https://packetfence.org/support/index.html#/community&#34; title=&#34;Community Mailing Lists&#34;&gt;mailing lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patches for bugs or enhancements&lt;/li&gt; &#xA; &lt;li&gt;Write tests&lt;/li&gt; &#xA; &lt;li&gt;Handle tasks in our Roadmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a security researcher&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Push PacketFence into new areas by leveraging the extensibility built into PacketFence. A lot of the low-level plumbing is done for you so you can focus on demoing your ideas.&lt;/p&gt; &#xA;&lt;p&gt;Get in touch with us on the developer &lt;a href=&#34;https://packetfence.org/support/index.html#/community&#34; title=&#34;Community Mailing Lists&#34;&gt;mailing list&lt;/a&gt; with your ideas!&lt;/p&gt; &#xA;&lt;h2&gt;Source&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to fork our &lt;a href=&#34;https://github.com/inverse-inc/packetfence&#34;&gt;github repository&lt;/a&gt; if you are willing to contribute.&lt;/p&gt; &#xA;&lt;p&gt;Most of the development happens in branches. Once ready for integration into &lt;a href=&#34;https://github.com/inverse-inc/packetfence/tree/devel&#34;&gt;devel&lt;/a&gt;, a pull request is opened and a code review takes place. See the list of &lt;a href=&#34;https://github.com/inverse-inc/packetfence/branches&#34;&gt;all branches in the works&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;PacketFence is available in various languages. The following list describes the official translations alongside their maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English - Inverse inc.&lt;/li&gt; &#xA; &lt;li&gt;Brazilian Portuguese - Diego de Souza Lopes&lt;/li&gt; &#xA; &lt;li&gt;French - Inverse inc.&lt;/li&gt; &#xA; &lt;li&gt;Norwegian&lt;/li&gt; &#xA; &lt;li&gt;Polish - Maciej Uhlig&lt;/li&gt; &#xA; &lt;li&gt;Spanish (Spain) - Dominique Couot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you would like to translate the software in an other language, please consult the &lt;a href=&#34;https://packetfence.org/support/faq/article/how-to-translate-packetfence-in-another-language.html&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the GNU General Public License v2.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://inverse.ca/&#34;&gt;Inverse inc.&lt;/a&gt; leads the development of the solution. Over the years, numerous people and organizations have contributed to the project and we would like to thank them all !&lt;/p&gt;</summary>
  </entry>
</feed>