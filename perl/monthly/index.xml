<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T02:49:56Z</updated>
  <subtitle>Monthly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kamipo/dbix-class-timestamp-auto</title>
    <updated>2022-08-01T02:49:56Z</updated>
    <id>tag:github.com,2022-08-01:/kamipo/dbix-class-timestamp-auto</id>
    <link href="https://github.com/kamipo/dbix-class-timestamp-auto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is Perl module DBIx::Class::TimeStamp::Auto.&lt;/p&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;DBIx::Class::TimeStamp::Auto installation is straightforward. If your CPAN shell is set up, you should just be able to do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cpan DBIx::Class::TimeStamp::Auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download it, unpack it, then build it as per the usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% perl Makefile.PL&#xA;% make &amp;amp;&amp;amp; make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DOCUMENTATION&lt;/p&gt; &#xA;&lt;p&gt;DBIx::Class::TimeStamp::Auto documentation is available as in POD. So you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% perldoc DBIx::Class::TimeStamp::Auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to read the documentation online with your favorite pager.&lt;/p&gt; &#xA;&lt;p&gt;Ryuta Kamizono&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AlDanial/cloc</title>
    <updated>2022-08-01T02:49:56Z</updated>
    <id>tag:github.com,2022-08-01:/AlDanial/cloc</id>
    <link href="https://github.com/AlDanial/cloc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;___top&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;cloc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Count Lines of Code&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.&lt;/p&gt; &#xA;&lt;p&gt;Latest release: v1.94 (July 4, 2022)&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/AlDanial/cloc/graphs/contributors&#34; alt=&#34;Contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/AlDanial/cloc&#34;&gt;&lt;/a&gt; &#xA;&lt;a href=&#34;https://zenodo.org/badge/latestdoi/42029482&#34;&gt; &lt;img src=&#34;https://zenodo.org/badge/42029482.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg&gt;&#34;&gt; &#xA;&lt;p&gt;cloc moved to GitHub in September 2015 after being hosted at &lt;a href=&#34;http://cloc.sourceforge.net/&#34;&gt;http://cloc.sourceforge.net/&lt;/a&gt; since August 2006.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#quick-start-&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#overview-&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AlDanial/cloc/releases/latest&#34;&gt;Download&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#install-via-package-manager&#34;&gt;Install via package manager&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#stable-release&#34;&gt;Stable release&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#development-version&#34;&gt;Development version&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#license-&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#why-use-cloc-&#34;&gt;Why Use cloc?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#other-counters-&#34;&gt;Other Counters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#building-a-windows-executable-&#34;&gt;Building a Windows Executable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#basic-use-&#34;&gt;Basic Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#options-&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#recognized-languages-&#34;&gt;Recognized Languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#how-it-works-&#34;&gt;How it Works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#advanced-use-&#34;&gt;Advanced Use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#remove-comments-from-source-code-&#34;&gt;Remove Comments from Source Code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#work-with-compressed-archives-&#34;&gt;Work with Compressed Archives&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#differences-&#34;&gt;Differences&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#create-custom-language-definitions-&#34;&gt;Create Custom Language Definitions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#combine-reports-&#34;&gt;Combine Reports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#sql-&#34;&gt;SQL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#custom-column-output-&#34;&gt;Custom Column Output&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#wrapping-cloc-in-other-scripts-&#34;&gt;Wrapping cloc in other scripts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#git-and-UTF8-pathnames-&#34;&gt;git and UTF8 pathnames&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#third-generation-language-scale-factors-&#34;&gt;Third Generation Language Scale Factors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#optionstxt-configuration-file-&#34;&gt;options.txt configuration file&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#complex-regular-subexpression-recursion-limit-&#34;&gt;Complex regular subexpression recursion limit &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#limitations-&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#requesting-support-for-additional-languages-&#34;&gt;Requesting Support for Additional Languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#reporting-problems-&#34;&gt;Reporting Problems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#citation-&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#acknowledgments-&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#copyright-&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Quick_Start&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Quick Start â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Step 1: Download cloc (several methods, see below) or run cloc&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#Docker-&#34;&gt;docker image&lt;/a&gt;. The Windows executable has no requirements. The source version of cloc requires a Perl interpreter, and the Docker version of cloc requires a Docker installation.&lt;/p&gt; &#xA;&lt;p&gt;Step 2: Open a terminal (&lt;code&gt;cmd.exe&lt;/code&gt; on Windows).&lt;/p&gt; &#xA;&lt;p&gt;Step 3: Invoke cloc to count your source files, directories, archives, or git commits. The executable name differs depending on whether you use the development source version (&lt;code&gt;cloc&lt;/code&gt;), source for a released version (&lt;code&gt;cloc-1.94.pl&lt;/code&gt;) or a Windows executable (&lt;code&gt;cloc-1.94.exe&lt;/code&gt;). On this page, &lt;code&gt;cloc&lt;/code&gt; is the generic term used to refer to any of these.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;a file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; cloc hello.c&#xA;       1 text file.&#xA;       1 unique file.&#xA;       0 files ignored.&#xA;&#xA;https://github.com/AlDanial/cloc v 1.65  T=0.04 s (28.3 files/s, 340.0 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;C                                1              0              7              5&#xA;-------------------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;a directory&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; cloc gcc-5.2.0/gcc/c&#xA;      16 text files.&#xA;      15 unique files.&#xA;       3 files ignored.&#xA;&#xA;https://github.com/AlDanial/cloc v 1.65  T=0.23 s (57.1 files/s, 188914.0 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;C                               10           4680           6621          30812&#xA;C/C++ Header                     3             99            286            496&#xA;-------------------------------------------------------------------------------&#xA;SUM:                            13           4779           6907          31308&#xA;-------------------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;an archive&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll pull cloc&#39;s source zip file from GitHub, then count the contents:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; wget https://github.com/AlDanial/cloc/archive/master.zip&#xA;&#xA;prompt&amp;gt; cloc master.zip&#xA;https://github.com/AlDanial/cloc v 1.65  T=0.07 s (26.8 files/s, 141370.3 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;Perl                             2            725           1103           8713&#xA;-------------------------------------------------------------------------------&#xA;SUM:                             2            725           1103           8713&#xA;-------------------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;a git repository, using a specific commit&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This example uses code from &lt;a href=&#34;https://pypi.python.org/pypi/pudb&#34;&gt;PuDB&lt;/a&gt;, a fantastic Python debugger.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; git clone http://git.tiker.net/trees/pudb.git&#xA;&#xA;prompt&amp;gt; cd pudb&#xA;&#xA;prompt&amp;gt; cloc 6be804e07a5db&#xA;      48 text files.&#xA;      48 unique files.&#xA;      15 files ignored.&#xA;&#xA;github.com/AlDanial/cloc v 1.73  T=0.15 s (223.1 files/s, 46159.0 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;Python                          28           1519            728           4659&#xA;YAML                             2              9              2             75&#xA;Bourne Shell                     3              6              0             17&#xA;make                             1              4              6             10&#xA;-------------------------------------------------------------------------------&#xA;SUM:                            34           1538            736           4761&#xA;-------------------------------------------------------------------------------&#xA;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;each subdirectory of a particular directory&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Say you have a directory with three different git-managed projects, Project0, Project1, and Project2. You can use your shell&#39;s looping capability to count the code in each. This example uses bash (scroll down for cmd.exe example):&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; for d in ./*/ ; do (cd &#34;$d&#34; &amp;amp;&amp;amp; echo &#34;$d&#34; &amp;amp;&amp;amp; cloc --vcs git); done&#xA;./Project0/&#xA;7 text files.&#xA;       7 unique files.&#xA;       1 file ignored.&#xA;&#xA;github.com/AlDanial/cloc v 1.71  T=0.02 s (390.2 files/s, 25687.6 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;D                                4             61             32            251&#xA;Markdown                         1              9              0             38&#xA;make                             1              0              0              4&#xA;-------------------------------------------------------------------------------&#xA;SUM:                             6             70             32            293&#xA;-------------------------------------------------------------------------------&#xA;./Project1/&#xA;       7 text files.&#xA;       7 unique files.&#xA;       0 files ignored.&#xA;&#xA;github.com/AlDanial/cloc v 1.71  T=0.02 s (293.0 files/s, 52107.1 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;Go                               7            165            282            798&#xA;-------------------------------------------------------------------------------&#xA;SUM:                             7            165            282            798&#xA;-------------------------------------------------------------------------------&#xA;./Project2/&#xA;      49 text files.&#xA;      47 unique files.&#xA;      13 files ignored.&#xA;&#xA;github.com/AlDanial/cloc v 1.71  T=0.10 s (399.5 files/s, 70409.4 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;Python                          33           1226           1026           3017&#xA;C                                4            327            337            888&#xA;Markdown                         1             11              0             28&#xA;YAML                             1              0              2             12&#xA;-------------------------------------------------------------------------------&#xA;SUM:                            39           1564           1365           3945&#xA;-------------------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;each subdirectory of a particular directory (Windows/cmd.exe)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;for /D %I in (.\*) do cd %I &amp;amp;&amp;amp; cloc --vcs git &amp;amp;&amp;amp; cd ..&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;Overview&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Overview â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;cloc counts blank lines, comment lines, and physical lines of source code in &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#Languages&#34;&gt;many programming languages&lt;/a&gt;. Given two versions of a code base, cloc can compute differences in blank, comment, and source lines. It is written entirely in Perl with no dependencies outside the standard distribution of Perl v5.6 and higher (code from some external modules is &lt;a href=&#34;https://github.com/AlDanial/cloc#regexp_common&#34;&gt;embedded within cloc&lt;/a&gt;) and so is quite portable. cloc is known to run on many flavors of Linux, FreeBSD, NetBSD, OpenBSD, macOS, AIX, HP-UX, Solaris, IRIX, z/OS, and Windows. (To run the Perl source version of cloc on Windows one needs &lt;a href=&#34;http://www.activestate.com/activeperl&#34;&gt;ActiveState Perl&lt;/a&gt; 5.6.1 or higher, &lt;a href=&#34;http://strawberryperl.com/&#34;&gt;Strawberry Perl&lt;/a&gt;, Windows Subsystem for Linux, &lt;a href=&#34;http://www.cygwin.com/&#34;&gt;Cygwin&lt;/a&gt;, &lt;a href=&#34;http://mobaxterm.mobatek.net/&#34;&gt;MobaXTerm&lt;/a&gt; with the Perl plug-in installed, or a mingw environment and terminal such as provided by &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt;. Alternatively one can use the Windows binary of cloc generated with &lt;a href=&#34;http://search.cpan.org/~rschupp/PAR-Packer-1.019/lib/pp.pm&#34;&gt;PAR::Packer&lt;/a&gt; to run on Windows computers that have neither Perl nor Cygwin.)&lt;/p&gt; &#xA;&lt;p&gt;In addition to counting code in individual text files, directories, and git repositories, cloc can also count code in archive files such as &lt;code&gt;.tar&lt;/code&gt; (including compressed versions), &lt;code&gt;.zip&lt;/code&gt;, Python wheel &lt;code&gt;.whl&lt;/code&gt;, Jupyter notebook &lt;code&gt;.ipynb&lt;/code&gt;, source RPMs &lt;code&gt;.rpm&lt;/code&gt; or &lt;code&gt;.src&lt;/code&gt; (requires &lt;code&gt;rpm2cpio&lt;/code&gt;), and Debian &lt;code&gt;.deb&lt;/code&gt; files (requires &lt;code&gt;dpkg-deb&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;cloc contains code from David Wheeler&#39;s &lt;a href=&#34;http://www.dwheeler.com/sloccount/&#34;&gt;SLOCCount&lt;/a&gt;, Damian Conway and Abigail&#39;s Perl module &lt;a href=&#34;http://search.cpan.org/%7Eabigail/Regexp-Common-2.120/lib/Regexp/Common.pm&#34;&gt;Regexp::Common&lt;/a&gt;, Sean M. Burke&#39;s Perl module &lt;a href=&#34;http://search.cpan.org/%7Esburke/Win32-Autoglob-1.01/Autoglob.pm&#34;&gt;Win32::Autoglob&lt;/a&gt;, and Tye McQueen&#39;s Perl module &lt;a href=&#34;http://search.cpan.org/%7Etyemq/Algorithm-Diff-1.1902/lib/Algorithm/Diff.pm&#34;&gt;Algorithm::Diff&lt;/a&gt;. Language scale factors were derived from Mayes Consulting, LLC web site &lt;a href=&#34;http://softwareestimator.com/IndustryData2.htm&#34;&gt;http://softwareestimator.com/IndustryData2.htm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;New releases nominally appear every six months. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run via docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -v $PWD:/tmp aldanial/cloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install via package manager&lt;/h2&gt; &#xA;&lt;p&gt;Depending your operating system, one of these installation methods may work for you (all but the last two entries for Windows require a Perl interpreter):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g cloc              # https://www.npmjs.com/package/cloc&#xA;sudo apt install cloc            # Debian, Ubuntu&#xA;sudo yum install cloc            # Red Hat, Fedora&#xA;sudo dnf install cloc            # Fedora 22 or later&#xA;sudo pacman -S cloc              # Arch&#xA;sudo emerge -av dev-util/cloc    # Gentoo https://packages.gentoo.org/packages/dev-util/cloc&#xA;sudo apk add cloc                # Alpine Linux&#xA;doas pkg_add cloc                # OpenBSD&#xA;sudo pkg install cloc            # FreeBSD&#xA;sudo port install cloc           # macOS with MacPorts&#xA;brew install cloc                # macOS with Homebrew&#xA;choco install cloc               # Windows with Chocolatey&#xA;scoop install cloc               # Windows with Scoop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I don&#39;t control any of these packages. If you encounter a bug in cloc using one of the above packages, try with cloc pulled from the latest stable release here on GitHub (link follows below) before submitting a problem report. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stable release&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlDanial/cloc/releases/latest&#34;&gt;https://github.com/AlDanial/cloc/releases/latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Dev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlDanial/cloc/raw/master/cloc&#34;&gt;https://github.com/AlDanial/cloc/raw/master/cloc&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;License â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;cloc is licensed under the &lt;a href=&#34;http://www.gnu.org/licenses/gpl-2.0.html&#34;&gt;GNU General Public License, v 2&lt;/a&gt;, excluding portions which are copied from other sources. Code copied from the Regexp::Common, Win32::Autoglob, and Algorithm::Diff Perl modules is subject to the &lt;a href=&#34;http://www.opensource.org/licenses/artistic-license-2.0.php&#34;&gt;Artistic License&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;why_use&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Why Use cloc? â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;cloc has many features that make it easy to use, thorough, extensible, and portable:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Exists as a single, self-contained file that requires minimal installation effort---just download the file and run it.&lt;/li&gt; &#xA; &lt;li&gt;Can read language comment definitions from a file and thus potentially work with computer languages that do not yet exist.&lt;/li&gt; &#xA; &lt;li&gt;Allows results from multiple runs to be summed together by language and by project.&lt;/li&gt; &#xA; &lt;li&gt;Can produce results in a variety of formats: plain text, SQL, JSON, XML, YAML, comma separated values.&lt;/li&gt; &#xA; &lt;li&gt;Can count code within compressed archives (tar balls, Zip files, Java .ear files).&lt;/li&gt; &#xA; &lt;li&gt;Has numerous troubleshooting options.&lt;/li&gt; &#xA; &lt;li&gt;Handles file and directory names with spaces and other unusual characters.&lt;/li&gt; &#xA; &lt;li&gt;Has no dependencies outside the standard Perl distribution.&lt;/li&gt; &#xA; &lt;li&gt;Runs on Linux, FreeBSD, NetBSD, OpenBSD, macOS, AIX, HP-UX, Solaris, IRIX, and z/OS systems that have Perl 5.6 or higher. The source version runs on Windows with either ActiveState Perl, Strawberry Perl, Cygwin, or MobaXTerm+Perl plugin. Alternatively on Windows one can run the Windows binary which has no dependencies. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Other_Counters&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Other Counters â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;If cloc does not suit your needs here are other freely available counters to consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cgag/loc/&#34;&gt;loc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JoaoDanielRufino/gcloc&#34;&gt;gcloc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hhatto/gocloc/&#34;&gt;gocloc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blackducksoftware/ohcount/&#34;&gt;Ohcount&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boyter/scc/&#34;&gt;scc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/archive/p/sclc/&#34;&gt;sclc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.dwheeler.com/sloccount/&#34;&gt;SLOCCount&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sonarsource.org/&#34;&gt;Sonar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Aaronepower/tokei/&#34;&gt;tokei&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://csse.usc.edu/ucc_new/wordpress/&#34;&gt;Unified Code Count&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other references:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QSM&#39;s &lt;a href=&#34;http://www.qsm.com/CodeCounters.html&#34;&gt;directory&lt;/a&gt; of code counting tools.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Source_lines_of_code&#34;&gt;Wikipedia entry&lt;/a&gt; for source code line counts. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a name=&#34;regexp_common&#34;&gt;Regexp::Common, Digest::MD5, Win32::Autoglob, Algorithm::Diff&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Although cloc does not need Perl modules outside those found in the standard distribution, cloc does rely on a few external modules. Code from three of these external modules--Regexp::Common, Win32::Autoglob, and Algorithm::Diff--is embedded within cloc. A fourth module, Digest::MD5, is used only if it is available. If cloc finds Regexp::Common or Algorithm::Diff installed locally it will use those installation. If it doesn&#39;t, cloc will install the parts of Regexp::Common and/or Algorithm:Diff it needs to temporary directories that are created at the start of a cloc run then removed when the run is complete. The necessary code from Regexp::Common v2.120 and Algorithm::Diff v1.1902 are embedded within the cloc source code (see subroutines &lt;code&gt;Install_Regexp_Common()&lt;/code&gt; and &lt;code&gt;Install_Algorithm_Diff()&lt;/code&gt; ). Only three lines are needed from Win32::Autoglob and these are included directly in cloc.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, cloc will use Digest::MD5 to validate uniqueness among equally-sized input files if Digest::MD5 is installed locally.&lt;/p&gt; &#xA;&lt;p&gt;A parallel processing option, &lt;tt&gt;--processes=&lt;i&gt;N&lt;/i&gt;&lt;/tt&gt;, was introduced with cloc version 1.76 to enable faster runs on multi-core machines. However, to use it, one must have the module Parallel::ForkManager installed. This module does not work reliably on Windows so parallel processing will only work on Unix-like operating systems.&lt;/p&gt; &#xA;&lt;p&gt;The Windows binary is built on a computer that has both Regexp::Common and Digest::MD5 installed locally. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;building_exe&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Building a Windows Executable â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The Windows downloads &lt;tt&gt;cloc-1.94.exe&lt;/tt&gt;, &lt;tt&gt;cloc-1.92.exe&lt;/tt&gt;, &lt;tt&gt;cloc-1.90.exe&lt;/tt&gt; and &lt;tt&gt;cloc-1.88.exe&lt;/tt&gt; were built on a 64 bit Windows 10 computer using &lt;a href=&#34;http://strawberryperl.com/&#34;&gt;Strawberry Perl&lt;/a&gt; 5.30.2 and &lt;a href=&#34;http://search.cpan.org/~rschupp/PAR-Packer-1.050/lib/pp.pm&#34;&gt;PAR::Packer&lt;/a&gt; to build the &lt;code&gt;.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Release 1.86 was built on a 64 bit Windows 10 virtual machine downloaded from &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&#34;&gt;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&lt;/a&gt;; releases 1.74 through 1.84 were was built on a 32 bit Windows 7 virtual machine using Strawberry Perl 5.26.1.1, while 1.70 and 1.72 were built with Strawberry Perl 5.24.0.1 on an Amazon Web Services t2.micro instance running Microsoft Windows Server 2008 (32 bit for 1.70 and 1.72; 64 bit for 1.74). Release 1.66 was built on a 32 bit Windows 7 VirtualBox image. Windows executables of cloc versions 1.60 and earlier were built with &lt;a href=&#34;http://www.indigostar.com/perl2exe/&#34;&gt;perl2exe&lt;/a&gt; on a 32 bit Windows XP computer. A small modification was made to the cloc source code before passing it to perl2exe; lines 87 and 88 were uncommented:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&lt;font color=&#34;gray&#34;&gt;85&lt;/font&gt;  # Uncomment next two lines when building Windows executable with perl2exe&#xA;&lt;font color=&#34;gray&#34;&gt;86&lt;/font&gt;  # or if running on a system that already has Regexp::Common.&#xA;&lt;font color=&#34;gray&#34;&gt;87&lt;/font&gt;  &lt;font color=&#34;red&#34;&gt;#use Regexp::Common;&lt;/font&gt;&#xA;&lt;font color=&#34;gray&#34;&gt;88&lt;/font&gt;  &lt;font color=&#34;red&#34;&gt;#$HAVE_Rexexp_Common = 1;&lt;/font&gt;&#xA;&lt;/pre&gt; &#xA;&lt;h4&gt;Is the Windows executable safe to run? Does it have malware?&lt;/h4&gt; &#xA;&lt;p&gt;Ideally, no one would need the Windows executable because they have a Perl interpreter installed on their machines and can run the cloc source file. On centrally-managed corporate Windows machines, however, this this may be difficult or impossible.&lt;/p&gt; &#xA;&lt;p&gt;The Windows executable distributed with cloc is provided as a best-effort of a virus and malware-free &lt;code&gt;.exe&lt;/code&gt;. You are encouraged to run your own virus scanners against the executable and also check sites such &lt;a href=&#34;https://www.virustotal.com/&#34;&gt;https://www.virustotal.com/&lt;/a&gt; . The entries for recent versions are:&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.94.exe: &lt;a href=&#34;https://www.virustotal.com/gui/file/b48a6002fb75fa66ec5d0c05a5c4d51f2ad22b5b025b7eb4e3945d18419c0952?nocache=1&#34;&gt;https://www.virustotal.com/gui/file/b48a6002fb75fa66ec5d0c05a5c4d51f2ad22b5b025b7eb4e3945d18419c0952?nocache=1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.92.exe: &lt;a href=&#34;https://www.virustotal.com/gui/file/2668fcf8609c431e8934fe9e1866bc620c58d198c4eb262f1d3ef31ef4a690f7&#34;&gt;https://www.virustotal.com/gui/file/2668fcf8609c431e8934fe9e1866bc620c58d198c4eb262f1d3ef31ef4a690f7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.90.exe: &lt;a href=&#34;https://www.virustotal.com/gui/file/d655caae55486f9bac39f7e3c7b7553bcfcfe2b88914c79bfc328055f22b8a37/detection&#34;&gt;https://www.virustotal.com/gui/file/d655caae55486f9bac39f7e3c7b7553bcfcfe2b88914c79bfc328055f22b8a37/detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.88.exe: &lt;a href=&#34;https://www.virustotal.com/gui/file/97d5d2631d1cccdbfd99267ab8a4cf5968816bbe52c0f9324e72e768857f642d/detection&#34;&gt;https://www.virustotal.com/gui/file/97d5d2631d1cccdbfd99267ab8a4cf5968816bbe52c0f9324e72e768857f642d/detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.86.exe: &lt;a href=&#34;https://www.virustotal.com/gui/file/1b2e189df1834411b34534db446330d1c379b4bc008af3042ee9ade818c6a1c8/detection&#34;&gt;https://www.virustotal.com/gui/file/1b2e189df1834411b34534db446330d1c379b4bc008af3042ee9ade818c6a1c8/detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.84.exe: &lt;a href=&#34;https://www.virustotal.com/gui/file/e73d490c1e4ae2f50ee174005614029b4fa2610dcb76988714839d7be68479af/detection&#34;&gt;https://www.virustotal.com/gui/file/e73d490c1e4ae2f50ee174005614029b4fa2610dcb76988714839d7be68479af/detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.82.exe: &lt;a href=&#34;https://www.virustotal.com/#/file/2e5fb443fdefd776d7b6b136a25e5ee2048991e735042897dbd0bf92efb16563/detection&#34;&gt;https://www.virustotal.com/#/file/2e5fb443fdefd776d7b6b136a25e5ee2048991e735042897dbd0bf92efb16563/detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.80.exe: &lt;a href=&#34;https://www.virustotal.com/#/file/9e547b01c946aa818ffad43b9ebaf05d3da08ed6ca876ef2b6847be3bf1cf8be/detection&#34;&gt;https://www.virustotal.com/#/file/9e547b01c946aa818ffad43b9ebaf05d3da08ed6ca876ef2b6847be3bf1cf8be/detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.78.exe: &lt;a href=&#34;https://www.virustotal.com/#/file/256ade3df82fa92febf2553853ed1106d96c604794606e86efd00d55664dd44f/detection&#34;&gt;https://www.virustotal.com/#/file/256ade3df82fa92febf2553853ed1106d96c604794606e86efd00d55664dd44f/detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.76.exe: &lt;a href=&#34;https://www.virustotal.com/#/url/c1b9b9fe909f91429f95d41e9a9928ab7c58b21351b3acd4249def2a61acd39d/detection&#34;&gt;https://www.virustotal.com/#/url/c1b9b9fe909f91429f95d41e9a9928ab7c58b21351b3acd4249def2a61acd39d/detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc-1.74_x86.exe: &lt;a href=&#34;https://www.virustotal.com/#/file/b73dece71f6d3199d90d55db53a588e1393c8dbf84231a7e1be2ce3c5a0ec75b/detection&#34;&gt;https://www.virustotal.com/#/file/b73dece71f6d3199d90d55db53a588e1393c8dbf84231a7e1be2ce3c5a0ec75b/detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc 1.72 exe: &lt;a href=&#34;https://www.virustotal.com/en/url/8fd2af5cd972f648d7a2d7917bc202492012484c3a6f0b48c8fd60a8d395c98c/analysis/&#34;&gt;https://www.virustotal.com/en/url/8fd2af5cd972f648d7a2d7917bc202492012484c3a6f0b48c8fd60a8d395c98c/analysis/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc 1.70 exe: &lt;a href=&#34;https://www.virustotal.com/en/url/63edef209099a93aa0be1a220dc7c4c7ed045064d801e6d5daa84ee624fc0b4a/analysis/&#34;&gt;https://www.virustotal.com/en/url/63edef209099a93aa0be1a220dc7c4c7ed045064d801e6d5daa84ee624fc0b4a/analysis/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc 1.68 exe: &lt;a href=&#34;https://www.virustotal.com/en/file/c484fc58615fc3b0d5569b9063ec1532980281c3155e4a19099b11ef1c24443b/analysis/&#34;&gt;https://www.virustotal.com/en/file/c484fc58615fc3b0d5569b9063ec1532980281c3155e4a19099b11ef1c24443b/analysis/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;cloc 1.66 exe: &lt;a href=&#34;https://www.virustotal.com/en/file/54d6662e59b04be793dd10fa5e5edf7747cf0c0cc32f71eb67a3cf8e7a171d81/analysis/1453601367/&#34;&gt;https://www.virustotal.com/en/file/54d6662e59b04be793dd10fa5e5edf7747cf0c0cc32f71eb67a3cf8e7a171d81/analysis/1453601367/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why is the Windows executable so large?&lt;/h4&gt; &#xA;&lt;p&gt;Windows executables of cloc versions 1.60 and earlier, created with perl2exe as noted above, are about 1.6 MB, while versions 1.62 and 1.54, created with &lt;code&gt;PAR::Packer&lt;/code&gt;, are 11 MB. Version 1.66, built with a newer version of &lt;code&gt;PAR::Packer&lt;/code&gt;, is about 5.5 MB. Why are the &lt;code&gt;PAR::Packer&lt;/code&gt;, executables so much larger than those built with perl2exe? My theory is that perl2exe uses smarter tree pruning logic than &lt;code&gt;PAR::Packer&lt;/code&gt;, but that&#39;s pure speculation.&lt;/p&gt; &#xA;&lt;h4&gt;Create your own executable&lt;/h4&gt; &#xA;&lt;p&gt;The most robust option for creating a Windows executable of cloc is to use &lt;a href=&#34;http://www.activestate.com/perl-dev-kit&#34;&gt;ActiveState&#39;s Perl Development Kit&lt;/a&gt;. It includes a utility, &lt;code&gt;perlapp&lt;/code&gt;, which can build stand-alone Windows, Mac, and Linux binaries of Perl source code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.indigostar.com/perl2exe/&#34;&gt;perl2exe&lt;/a&gt; will also do the trick. If you do have &lt;code&gt;perl2exe&lt;/code&gt;, modify lines 84-87 in the cloc source code for a minor code modification that is necessary to make a cloc Windows executable.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, to build a Windows executable with &lt;code&gt;pp&lt;/code&gt; from &lt;code&gt;PAR::Packer&lt;/code&gt;, first install a Windows-based Perl distribution (for example Strawberry Perl or ActivePerl) following their instructions. Next, open a command prompt, aka a DOS window and install the PAR::Packer module. Finally, invoke the newly installed &lt;code&gt;pp&lt;/code&gt; command with the cloc source code to create an &lt;code&gt;.exe&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;C:&amp;gt; cpan -i Digest::MD5&#xA;C:&amp;gt; cpan -i Regexp::Common&#xA;C:&amp;gt; cpan -i Algorithm::Diff&#xA;C:&amp;gt; cpan -i PAR::Packer&#xA;C:&amp;gt; pp -M Digest::MD5 -c -x -o cloc-1.94.exe cloc-1.94.pl&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;A variation on the instructions above is if you installed the portable version of Strawberry Perl, you will need to run &lt;code&gt;portableshell.bat&lt;/code&gt; first to properly set up your environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;Basic_Use&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Basic Use â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;cloc is a command line program that takes file, directory, and/or archive names as inputs. Here&#39;s an example of running cloc against the Perl v5.22.0 source distribution:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; cloc perl-5.22.0.tar.gz&#xA;    5605 text files.&#xA;    5386 unique files.&#xA;    2176 files ignored.&#xA;&#xA;https://github.com/AlDanial/cloc v 1.65  T=25.49 s (134.7 files/s, 51980.3 lines/s)&#xA;-----------------------------------------------------------------------------------&#xA;Language                         files          blank        comment           code&#xA;-----------------------------------------------------------------------------------&#xA;Perl                              2892         136396         184362         536445&#xA;C                                  130          24676          33684         155648&#xA;C/C++ Header                       148           9766          16569         147858&#xA;Bourne Shell                       112           4044           6796          42668&#xA;Pascal                               8            458           1603           8592&#xA;XML                                 33            142              0           2410&#xA;YAML                                49             20             15           2078&#xA;C++                                 10            313            277           2033&#xA;make                                 4            426            488           1986&#xA;Prolog                              12            438              2           1146&#xA;JSON                                14              1              0           1037&#xA;yacc                                 1             85             76            998&#xA;Windows Message File                 1            102             11            489&#xA;DOS Batch                           14             92             41            389&#xA;Windows Resource File                3             10              0             85&#xA;D                                    1              5              7              8&#xA;Lisp                                 2              0              3              4&#xA;-----------------------------------------------------------------------------------&#xA;SUM:                              3434         176974         243934         903874&#xA;-----------------------------------------------------------------------------------&#xA;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;To run cloc on Windows computers, open up a command (aka DOS) window and invoke cloc.exe from the command line there. Alternatively, try ClocViewer, the GUI wrapper around cloc found at &lt;a href=&#34;https://github.com/Roemer/ClocViewer&#34;&gt;https://github.com/Roemer/ClocViewer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/jmensch1/codeflower&#34;&gt;https://github.com/jmensch1/codeflower&lt;/a&gt; for a graphical rendering of cloc results. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;Options&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Options â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; cloc --help&#xA;&#xA;Usage: cloc [options] &amp;lt;file(s)/dir(s)/git hash(es)&amp;gt; | &amp;lt;set 1&amp;gt; &amp;lt;set 2&amp;gt; | &amp;lt;report files&amp;gt;&#xA;&#xA; Count, or compute differences of, physical lines of source code in the&#xA; given files (may be archives such as compressed tarballs or zip files,&#xA; or git commit hashes or branch names) and/or recursively below the&#xA; given directories.&#xA;&#xA; Input Options&#xA;   --extract-with=&amp;lt;cmd&amp;gt;      This option is only needed if cloc is unable&#xA;                             to figure out how to extract the contents of&#xA;                             the input file(s) by itself.&#xA;                             Use &amp;lt;cmd&amp;gt; to extract binary archive files (e.g.:&#xA;                             .tar.gz, .zip, .Z).  Use the literal &#39;&amp;gt;FILE&amp;lt;&#39; as&#xA;                             a stand-in for the actual file(s) to be&#xA;                             extracted.  For example, to count lines of code&#xA;                             in the input files&#xA;                                gcc-4.2.tar.gz  perl-5.8.8.tar.gz&#xA;                             on Unix use&#xA;                               --extract-with=&#39;gzip -dc &amp;gt;FILE&amp;lt; | tar xf -&#39;&#xA;                             or, if you have GNU tar,&#xA;                               --extract-with=&#39;tar zxf &amp;gt;FILE&amp;lt;&#39;&#xA;                             and on Windows use, for example:&#xA;                               --extract-with=&#34;\&#34;c:\Program Files\WinZip\WinZip32.exe\&#34; -e -o &amp;gt;FILE&amp;lt; .&#34;&#xA;                             (if WinZip is installed there).&#xA;   --list-file=&amp;lt;file&amp;gt;        Take the list of file and/or directory names to&#xA;                             process from &amp;lt;file&amp;gt;, which has one file/directory&#xA;                             name per line.  Only exact matches are counted;&#xA;                             relative path names will be resolved starting from&#xA;                             the directory where cloc is invoked.  Set &amp;lt;file&amp;gt;&#xA;                             to - to read file names from a STDIN pipe.&#xA;                             See also --exclude-list-file.&#xA;   --diff-list-file=&amp;lt;file&amp;gt;   Take the pairs of file names to be diff&#39;ed from&#xA;                             &amp;lt;file&amp;gt;, whose format matches the output of&#xA;                             --diff-alignment.  (Run with that option to&#xA;                             see a sample.)  The language identifier at the&#xA;                             end of each line is ignored.  This enables --diff&#xA;                             mode and bypasses file pair alignment logic.&#xA;   --vcs=&amp;lt;VCS&amp;gt;               Invoke a system call to &amp;lt;VCS&amp;gt; to obtain a list of&#xA;                             files to work on.  If &amp;lt;VCS&amp;gt; is &#39;git&#39;, then will&#xA;                             invoke &#39;git ls-files&#39; to get a file list and&#xA;                             &#39;git submodule status&#39; to get a list of submodules&#xA;                             whose contents will be ignored.  See also --git&#xA;                             which accepts git commit hashes and branch names.&#xA;                             If &amp;lt;VCS&amp;gt; is &#39;svn&#39; then will invoke &#39;svn list -R&#39;.&#xA;                             The primary benefit is that cloc will then skip&#xA;                             files explicitly excluded by the versioning tool&#xA;                             in question, ie, those in .gitignore or have the&#xA;                             svn:ignore property.&#xA;                             Alternatively &amp;lt;VCS&amp;gt; may be any system command&#xA;                             that generates a list of files.&#xA;                             Note:  cloc must be in a directory which can read&#xA;                             the files as they are returned by &amp;lt;VCS&amp;gt;.  cloc will&#xA;                             not download files from remote repositories.&#xA;                             &#39;svn list -R&#39; may refer to a remote repository&#xA;                             to obtain file names (and therefore may require&#xA;                             authentication to the remote repository), but&#xA;                             the files themselves must be local.&#xA;                             Setting &amp;lt;VCS&amp;gt; to &#39;auto&#39; selects between &#39;git&#39;&#xA;                             and &#39;svn&#39; (or neither) depending on the presence&#xA;                             of a .git or .svn subdirectory below the directory&#xA;                             where cloc is invoked.&#xA;   --unicode                 Check binary files to see if they contain Unicode&#xA;                             expanded ASCII text.  This causes performance to&#xA;                             drop noticeably.&#xA;&#xA; Processing Options&#xA;   --autoconf                Count .in files (as processed by GNU autoconf) of&#xA;                             recognized languages.  See also --no-autogen.&#xA;   --by-file                 Report results for every source file encountered.&#xA;   --by-file-by-lang         Report results for every source file encountered&#xA;                             in addition to reporting by language.&#xA;   --config &amp;lt;file&amp;gt;           Read command line switches from &amp;lt;file&amp;gt; instead of&#xA;                             the default location of /home/al/.config/cloc/options.txt.&#xA;                             The file should contain one switch, along with&#xA;                             arguments (if any), per line.  Blank lines and lines&#xA;                             beginning with &#39;#&#39; are skipped.  Options given on&#xA;                             the command line take priority over entries read from&#xA;                             the file.&#xA;   --count-and-diff &amp;lt;set1&amp;gt; &amp;lt;set2&amp;gt;&#xA;                             First perform direct code counts of source file(s)&#xA;                             of &amp;lt;set1&amp;gt; and &amp;lt;set2&amp;gt; separately, then perform a diff&#xA;                             of these.  Inputs may be pairs of files, directories,&#xA;                             or archives.  If --out or --report-file is given,&#xA;                             three output files will be created, one for each&#xA;                             of the two counts and one for the diff.  See also&#xA;                             --diff, --diff-alignment, --diff-timeout,&#xA;                             --ignore-case, --ignore-whitespace.&#xA;   --diff &amp;lt;set1&amp;gt; &amp;lt;set2&amp;gt;      Compute differences in code and comments between&#xA;                             source file(s) of &amp;lt;set1&amp;gt; and &amp;lt;set2&amp;gt;.  The inputs&#xA;                             may be any mix of files, directories, archives,&#xA;                             or git commit hashes.  Use --diff-alignment to&#xA;                             generate a list showing which file pairs where&#xA;                             compared.  When comparing git branches, only files&#xA;                             which have changed in either commit are compared.&#xA;                             See also --git, --count-and-diff, --diff-alignment,&#xA;                             --diff-list-file, --diff-timeout, --ignore-case,&#xA;                             --ignore-whitespace.&#xA;   --diff-timeout &amp;lt;N&amp;gt;        Ignore files which take more than &amp;lt;N&amp;gt; seconds&#xA;                             to process.  Default is 10 seconds.  Setting &amp;lt;N&amp;gt;&#xA;                             to 0 allows unlimited time.  (Large files with many&#xA;                             repeated lines can cause Algorithm::Diff::sdiff()&#xA;                             to take hours.) See also --timeout.&#xA;   --docstring-as-code       cloc considers docstrings to be comments, but this is&#xA;                             not always correct as docstrings represent regular&#xA;                             strings when they appear on the right hand side of an&#xA;                             assignment or as function arguments.  This switch&#xA;                             forces docstrings to be counted as code.&#xA;   --follow-links            [Unix only] Follow symbolic links to directories&#xA;                             (sym links to files are always followed).&#xA;                             See also --stat.&#xA;   --force-lang=&amp;lt;lang&amp;gt;[,&amp;lt;ext&amp;gt;]&#xA;                             Process all files that have a &amp;lt;ext&amp;gt; extension&#xA;                             with the counter for language &amp;lt;lang&amp;gt;.  For&#xA;                             example, to count all .f files with the&#xA;                             Fortran 90 counter (which expects files to&#xA;                             end with .f90) instead of the default Fortran 77&#xA;                             counter, use&#xA;                               --force-lang=&#34;Fortran 90&#34;,f&#xA;                             If &amp;lt;ext&amp;gt; is omitted, every file will be counted&#xA;                             with the &amp;lt;lang&amp;gt; counter.  This option can be&#xA;                             specified multiple times (but that is only&#xA;                             useful when &amp;lt;ext&amp;gt; is given each time).&#xA;                             See also --script-lang, --lang-no-ext.&#xA;   --force-lang-def=&amp;lt;file&amp;gt;   Load language processing filters from &amp;lt;file&amp;gt;,&#xA;                             then use these filters instead of the built-in&#xA;                             filters.  Note:  languages which map to the same&#xA;                             file extension (for example:&#xA;                             MATLAB/Mathematica/Objective-C/MUMPS/Mercury;&#xA;                             Pascal/PHP; Lisp/OpenCL; Lisp/Julia; Perl/Prolog)&#xA;                             will be ignored as these require additional&#xA;                             processing that is not expressed in language&#xA;                             definition files.  Use --read-lang-def to define&#xA;                             new language filters without replacing built-in&#xA;                             filters (see also --write-lang-def,&#xA;                             --write-lang-def-incl-dup).&#xA;   --git                     Forces the inputs to be interpreted as git targets&#xA;                             (commit hashes, branch names, et cetera) if these&#xA;                             are not first identified as file or directory&#xA;                             names.  This option overrides the --vcs=git logic&#xA;                             if this is given; in other words, --git gets its&#xA;                             list of files to work on directly from git using&#xA;                             the hash or branch name rather than from&#xA;                             &#39;git ls-files&#39;.  This option can be used with&#xA;                             --diff to perform line count diffs between git&#xA;                             commits, or between a git commit and a file,&#xA;                             directory, or archive.  Use -v/--verbose to see&#xA;                             the git system commands cloc issues.&#xA;   --git-diff-rel            Same as --git --diff, or just --diff if the inputs&#xA;                             are recognized as git targets.  Only files which&#xA;                             have changed in either commit are compared.&#xA;   --git-diff-all            Git diff strategy #2:  compare all files in the&#xA;                             repository between the two commits.&#xA;   --ignore-whitespace       Ignore horizontal white space when comparing files&#xA;                             with --diff.  See also --ignore-case.&#xA;   --ignore-case             Ignore changes in case within file contents;&#xA;                             consider upper- and lowercase letters equivalent&#xA;                             when comparing files with --diff.  See also&#xA;                             --ignore-whitespace.&#xA;   --ignore-case-ext         Ignore case of file name extensions.  This will&#xA;                             cause problems counting some languages&#xA;                             (specifically, .c and .C are associated with C and&#xA;                             C++; this switch would count .C files as C rather&#xA;                             than C++ on *nix operating systems).  File name&#xA;                             case insensitivity is always true on Windows.&#xA;   --lang-no-ext=&amp;lt;lang&amp;gt;      Count files without extensions using the &amp;lt;lang&amp;gt;&#xA;                             counter.  This option overrides internal logic&#xA;                             for files without extensions (where such files&#xA;                             are checked against known scripting languages&#xA;                             by examining the first line for #!).  See also&#xA;                             --force-lang, --script-lang.&#xA;   --max-file-size=&amp;lt;MB&amp;gt;      Skip files larger than &amp;lt;MB&amp;gt; megabytes when&#xA;                             traversing directories.  By default, &amp;lt;MB&amp;gt;=100.&#xA;                             cloc&#39;s memory requirement is roughly twenty times&#xA;                             larger than the largest file so running with&#xA;                             files larger than 100 MB on a computer with less&#xA;                             than 2 GB of memory will cause problems.&#xA;                             Note:  this check does not apply to files&#xA;                             explicitly passed as command line arguments.&#xA;   --no-autogen[=list]       Ignore files generated by code-production systems&#xA;                             such as GNU autoconf.  To see a list of these files&#xA;                             (then exit), run with --no-autogen list&#xA;                             See also --autoconf.&#xA;   --original-dir            [Only effective in combination with&#xA;                             --strip-comments]  Write the stripped files&#xA;                             to the same directory as the original files.&#xA;   --read-binary-files       Process binary files in addition to text files.&#xA;                             This is usually a bad idea and should only be&#xA;                             attempted with text files that have embedded&#xA;                             binary data.&#xA;   --read-lang-def=&amp;lt;file&amp;gt;    Load new language processing filters from &amp;lt;file&amp;gt;&#xA;                             and merge them with those already known to cloc.&#xA;                             If &amp;lt;file&amp;gt; defines a language cloc already knows&#xA;                             about, cloc&#39;s definition will take precedence.&#xA;                             Use --force-lang-def to over-ride cloc&#39;s&#xA;                             definitions (see also --write-lang-def,&#xA;                             --write-lang-def-incl-dup).&#xA;   --script-lang=&amp;lt;lang&amp;gt;,&amp;lt;s&amp;gt;  Process all files that invoke &amp;lt;s&amp;gt; as a #!&#xA;                             scripting language with the counter for language&#xA;                             &amp;lt;lang&amp;gt;.  For example, files that begin with&#xA;                                #!/usr/local/bin/perl5.8.8&#xA;                             will be counted with the Perl counter by using&#xA;                                --script-lang=Perl,perl5.8.8&#xA;                             The language name is case insensitive but the&#xA;                             name of the script language executable, &amp;lt;s&amp;gt;,&#xA;                             must have the right case.  This option can be&#xA;                             specified multiple times.  See also --force-lang,&#xA;                             --lang-no-ext.&#xA;   --sdir=&amp;lt;dir&amp;gt;              Use &amp;lt;dir&amp;gt; as the scratch directory instead of&#xA;                             letting File::Temp chose the location.  Files&#xA;                             written to this location are not removed at&#xA;                             the end of the run (as they are with File::Temp).&#xA;   --skip-uniqueness         Skip the file uniqueness check.  This will give&#xA;                             a performance boost at the expense of counting&#xA;                             files with identical contents multiple times&#xA;                             (if such duplicates exist).&#xA;   --stat                    Some file systems (AFS, CD-ROM, FAT, HPFS, SMB)&#xA;                             do not have directory &#39;nlink&#39; counts that match&#xA;                             the number of its subdirectories.  Consequently&#xA;                             cloc may undercount or completely skip the&#xA;                             contents of such file systems.  This switch forces&#xA;                             File::Find to stat directories to obtain the&#xA;                             correct count.  File search speed will decrease.&#xA;                             See also --follow-links.&#xA;   --stdin-name=&amp;lt;file&amp;gt;       Give a file name to use to determine the language&#xA;                             for standard input.  (Use - as the input name to&#xA;                             receive source code via STDIN.)&#xA;   --strip-comments=&amp;lt;ext&amp;gt;    For each file processed, write to the current&#xA;                             directory a version of the file which has blank&#xA;                             and commented lines removed (in-line comments&#xA;                             persist).  The name of each stripped file is the&#xA;                             original file name with .&amp;lt;ext&amp;gt; appended to it.&#xA;                             It is written to the current directory unless&#xA;                             --original-dir is on.&#xA;   --strip-str-comments      Replace comment markers embedded in strings with&#xA;                             &#39;xx&#39;.  This attempts to work around a limitation&#xA;                             in Regexp::Common::Comment where comment markers&#xA;                             embedded in strings are seen as actual comment&#xA;                             markers and not strings, often resulting in a&#xA;                             &#39;Complex regular subexpression recursion limit&#39;&#xA;                             warning and incorrect counts.  There are two&#xA;                             disadvantages to using this switch:  1/code count&#xA;                             performance drops, and 2/code generated with&#xA;                             --strip-comments will contain different strings&#xA;                             where ever embedded comments are found.&#xA;   --sum-reports             Input arguments are report files previously&#xA;                             created with the --report-file option in plain&#xA;                             format (eg. not JSON, YAML, XML, or SQL).&#xA;                             Makes a cumulative set of results containing the&#xA;                             sum of data from the individual report files.&#xA;   --timeout &amp;lt;N&amp;gt;             Ignore files which take more than &amp;lt;N&amp;gt; seconds&#xA;                             to process at any of the language&#39;s filter stages.&#xA;                             The default maximum number of seconds spent on a&#xA;                             filter stage is the number of lines in the file&#xA;                             divided by one thousand.  Setting &amp;lt;N&amp;gt; to 0 allows&#xA;                             unlimited time.  See also --diff-timeout.&#xA;   --processes=NUM           [Available only on systems with a recent version&#xA;                             of the Parallel::ForkManager module.  Not&#xA;                             available on Windows.] Sets the maximum number of&#xA;                             cores that cloc uses.  The default value of 0&#xA;                             disables multiprocessing.&#xA;   --unix                    Override the operating system autodetection&#xA;                             logic and run in UNIX mode.  See also&#xA;                             --windows, --show-os.&#xA;   --use-sloccount           If SLOCCount is installed, use its compiled&#xA;                             executables c_count, java_count, pascal_count,&#xA;                             php_count, and xml_count instead of cloc&#39;s&#xA;                             counters.  SLOCCount&#39;s compiled counters are&#xA;                             substantially faster than cloc&#39;s and may give&#xA;                             a performance improvement when counting projects&#xA;                             with large files.  However, these cloc-specific&#xA;                             features will not be available: --diff,&#xA;                             --count-and-diff, --strip-comments, --unicode.&#xA;   --windows                 Override the operating system autodetection&#xA;                             logic and run in Microsoft Windows mode.&#xA;                             See also --unix, --show-os.&#xA;&#xA; Filter Options&#xA;   --exclude-content=&amp;lt;regex&amp;gt; Exclude files containing text that matches the given&#xA;                             regular expression.&#xA;   --exclude-dir=&amp;lt;D1&amp;gt;[,D2,]  Exclude the given comma separated directories&#xA;                             D1, D2, D3, et cetera, from being scanned.  For&#xA;                             example  --exclude-dir=.cache,test  will skip&#xA;                             all files and subdirectories that have /.cache/&#xA;                             or /test/ as their parent directory.&#xA;                             Directories named .bzr, .cvs, .hg, .git, .svn,&#xA;                             and .snapshot are always excluded.&#xA;                             This option only works with individual directory&#xA;                             names so including file path separators is not&#xA;                             allowed.  Use --fullpath and --not-match-d=&amp;lt;regex&amp;gt;&#xA;                             to supply a regex matching multiple subdirectories.&#xA;   --exclude-ext=&amp;lt;ext1&amp;gt;[,&amp;lt;ext2&amp;gt;[...]]&#xA;                             Do not count files having the given file name&#xA;                             extensions.&#xA;   --exclude-lang=&amp;lt;L1&amp;gt;[,L2[...]]&#xA;                             Exclude the given comma separated languages&#xA;                             L1, L2, L3, et cetera, from being counted.&#xA;   --exclude-list-file=&amp;lt;file&amp;gt;  Ignore files and/or directories whose names&#xA;                             appear in &amp;lt;file&amp;gt;.  &amp;lt;file&amp;gt; should have one file&#xA;                             name per line.  Only exact matches are ignored;&#xA;                             relative path names will be resolved starting from&#xA;                             the directory where cloc is invoked.&#xA;                             See also --list-file.&#xA;   --fullpath                Modifies the behavior of --match-f, --not-match-f,&#xA;                             and --not-match-d to include the file&#39;s path&#xA;                             in the regex, not just the file&#39;s basename.&#xA;                             (This does not expand each file to include its&#xA;                             absolute path, instead it uses as much of&#xA;                             the path as is passed in to cloc.)&#xA;                             Note:  --match-d always looks at the full&#xA;                             path and therefore is unaffected by --fullpath.&#xA;   --include-ext=&amp;lt;ext1&amp;gt;[,ext2[...]]&#xA;                             Count only languages having the given comma&#xA;                             separated file extensions.  Use --show-ext to&#xA;                             see the recognized extensions.&#xA;   --include-lang=&amp;lt;L1&amp;gt;[,L2[...]]&#xA;                             Count only the given comma separated languages&#xA;                             L1, L2, L3, et cetera.  Use --show-lang to see&#xA;                             the list of recognized languages.&#xA;   --match-d=&amp;lt;regex&amp;gt;         Only count files in directories matching the Perl&#xA;                             regex.  For example&#xA;                               --match-d=&#39;/(src|include)/&#39;&#xA;                             only counts files in directories containing&#xA;                             /src/ or /include/.  Unlike --not-match-d,&#xA;                             --match-f, and --not-match-f, --match-d always&#xA;                             compares the fully qualified path against the&#xA;                             regex.&#xA;   --not-match-d=&amp;lt;regex&amp;gt;     Count all files except those in directories&#xA;                             matching the Perl regex.  Only the trailing&#xA;                             directory name is compared, for example, when&#xA;                             counting in /usr/local/lib, only &#39;lib&#39; is&#xA;                             compared to the regex.&#xA;                             Add --fullpath to compare parent directories to&#xA;                             the regex.&#xA;                             Do not include file path separators at the&#xA;                             beginning or end of the regex.&#xA;   --match-f=&amp;lt;regex&amp;gt;         Only count files whose basenames match the Perl&#xA;                             regex.  For example&#xA;                               --match-f=&#39;^[Ww]idget&#39;&#xA;                             only counts files that start with Widget or widget.&#xA;                             Add --fullpath to include parent directories&#xA;                             in the regex instead of just the basename.&#xA;   --not-match-f=&amp;lt;regex&amp;gt;     Count all files except those whose basenames&#xA;                             match the Perl regex.  Add --fullpath to include&#xA;                             parent directories in the regex instead of just&#xA;                             the basename.&#xA;   --skip-archive=&amp;lt;regex&amp;gt;    Ignore files that end with the given Perl regular&#xA;                             expression.  For example, if given&#xA;                               --skip-archive=&#39;(zip|tar(.(gz|Z|bz2|xz|7z))?)&#39;&#xA;                             the code will skip files that end with .zip,&#xA;                             .tar, .tar.gz, .tar.Z, .tar.bz2, .tar.xz, and&#xA;                             .tar.7z.&#xA;   --skip-win-hidden         On Windows, ignore hidden files.&#xA;&#xA; Debug Options&#xA;   --categorized=&amp;lt;file&amp;gt;      Save names of categorized files to &amp;lt;file&amp;gt;.&#xA;   --counted=&amp;lt;file&amp;gt;          Save names of processed source files to &amp;lt;file&amp;gt;.&#xA;   --diff-alignment=&amp;lt;file&amp;gt;   Write to &amp;lt;file&amp;gt; a list of files and file pairs&#xA;                             showing which files were added, removed, and/or&#xA;                             compared during a run with --diff.  This switch&#xA;                             forces the --diff mode on.&#xA;   --explain=&amp;lt;lang&amp;gt;          Print the filters used to remove comments for&#xA;                             language &amp;lt;lang&amp;gt; and exit.  In some cases the&#xA;                             filters refer to Perl subroutines rather than&#xA;                             regular expressions.  An examination of the&#xA;                             source code may be needed for further explanation.&#xA;   --help                    Print this usage information and exit.&#xA;   --found=&amp;lt;file&amp;gt;            Save names of every file found to &amp;lt;file&amp;gt;.&#xA;   --ignored=&amp;lt;file&amp;gt;          Save names of ignored files and the reason they&#xA;                             were ignored to &amp;lt;file&amp;gt;.&#xA;   --print-filter-stages     Print processed source code before and after&#xA;                             each filter is applied.&#xA;   --show-ext[=&amp;lt;ext&amp;gt;]        Print information about all known (or just the&#xA;                             given) file extensions and exit.&#xA;   --show-lang[=&amp;lt;lang&amp;gt;]      Print information about all known (or just the&#xA;                             given) languages and exit.&#xA;   --show-os                 Print the value of the operating system mode&#xA;                             and exit.  See also --unix, --windows.&#xA;   -v[=&amp;lt;n&amp;gt;]                  Verbose switch (optional numeric value).&#xA;   -verbose[=&amp;lt;n&amp;gt;]            Long form of -v.&#xA;   --version                 Print the version of this program and exit.&#xA;   --write-lang-def=&amp;lt;file&amp;gt;   Writes to &amp;lt;file&amp;gt; the language processing filters&#xA;                             then exits.  Useful as a first step to creating&#xA;                             custom language definitions. Note: languages which&#xA;                             map to the same file extension will be excluded.&#xA;                             (See also --force-lang-def, --read-lang-def).&#xA;   --write-lang-def-incl-dup=&amp;lt;file&amp;gt;&#xA;                             Same as --write-lang-def, but includes duplicated&#xA;                             extensions.  This generates a problematic language&#xA;                             definition file because cloc will refuse to use&#xA;                             it until duplicates are removed.&#xA;&#xA; Output Options&#xA;   --3                       Print third-generation language output.&#xA;                             (This option can cause report summation to fail&#xA;                             if some reports were produced with this option&#xA;                             while others were produced without it.)&#xA;   --by-percent  X           Instead of comment and blank line counts, show&#xA;                             these values as percentages based on the value&#xA;                             of X in the denominator:&#xA;                                X = &#39;c&#39;   -&amp;gt; # lines of code&#xA;                                X = &#39;cm&#39;  -&amp;gt; # lines of code + comments&#xA;                                X = &#39;cb&#39;  -&amp;gt; # lines of code + blanks&#xA;                                X = &#39;cmb&#39; -&amp;gt; # lines of code + comments + blanks&#xA;                             For example, if using method &#39;c&#39; and your code&#xA;                             has twice as many lines of comments as lines&#xA;                             of code, the value in the comment column will&#xA;                             be 200%.  The code column remains a line count.&#xA;   --csv                     Write the results as comma separated values.&#xA;   --csv-delimiter=&amp;lt;C&amp;gt;       Use the character &amp;lt;C&amp;gt; as the delimiter for comma&#xA;                             separated files instead of ,.  This switch forces --csv to be on.&#xA;   --file-encoding=&amp;lt;E&amp;gt;       Write output files using the &amp;lt;E&amp;gt; encoding instead of&#xA;                             the default ASCII (&amp;lt;E&amp;gt; = &#39;UTF-7&#39;).  Examples: &#39;UTF-16&#39;,&#xA;                             &#39;euc-kr&#39;, &#39;iso-8859-16&#39;.  Known encodings can be&#xA;                             printed with&#xA;                               perl -MEncode -e &#39;print join(&#34;\n&#34;, Encode-&amp;gt;encodings(&#34;:all&#34;)), &#34;\n&#34;&#39;&#xA;   --hide-rate               Do not show line and file processing rates in the&#xA;                             output header. This makes output deterministic.&#xA;   --json                    Write the results as JavaScript Object Notation&#xA;                             (JSON) formatted output.&#xA;   --md                      Write the results as Markdown-formatted text.&#xA;   --out=&amp;lt;file&amp;gt;              Synonym for --report-file=&amp;lt;file&amp;gt;.&#xA;   --progress-rate=&amp;lt;n&amp;gt;       Show progress update after every &amp;lt;n&amp;gt; files are&#xA;                             processed (default &amp;lt;n&amp;gt;=100).  Set &amp;lt;n&amp;gt; to 0 to&#xA;                             suppress progress output (useful when redirecting&#xA;                             output to STDOUT).&#xA;   --quiet                   Suppress all information messages except for&#xA;                             the final report.&#xA;   --report-file=&amp;lt;file&amp;gt;      Write the results to &amp;lt;file&amp;gt; instead of STDOUT.&#xA;   --sql=&amp;lt;file&amp;gt;              Write results as SQL create and insert statements&#xA;                             which can be read by a database program such as&#xA;                             SQLite.  If &amp;lt;file&amp;gt; is -, output is sent to STDOUT.&#xA;   --sql-append              Append SQL insert statements to the file specified&#xA;                             by --sql and do not generate table creation&#xA;                             statements.  Only valid with the --sql option.&#xA;   --sql-project=&amp;lt;name&amp;gt;      Use &amp;lt;name&amp;gt; as the project identifier for the&#xA;                             current run.  Only valid with the --sql option.&#xA;   --sql-style=&amp;lt;style&amp;gt;       Write SQL statements in the given style instead&#xA;                             of the default SQLite format.  Styles include&#xA;                             &#39;Oracle&#39; and &#39;Named_Columns&#39;.&#xA;   --sum-one                 For plain text reports, show the SUM: output line&#xA;                             even if only one input file is processed.&#xA;   --xml                     Write the results in XML.&#xA;   --xsl=&amp;lt;file&amp;gt;              Reference &amp;lt;file&amp;gt; as an XSL stylesheet within&#xA;                             the XML output.  If &amp;lt;file&amp;gt; is 1 (numeric one),&#xA;                             writes a default stylesheet, cloc.xsl (or&#xA;                             cloc-diff.xsl if --diff is also given).&#xA;                             This switch forces --xml on.&#xA;   --yaml                    Write the results in YAML.&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;Languages&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Recognized Languages â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; cloc --show-lang&#xA;&#xA;ABAP                       (abap)&#xA;ActionScript               (as)&#xA;Ada                        (ada, adb, ads, pad)&#xA;ADSO/IDSM                  (adso)&#xA;Agda                       (agda, lagda)&#xA;AMPLE                      (ample, dofile, startup)&#xA;Ant                        (build.xml, build.xml)&#xA;ANTLR Grammar              (g, g4)&#xA;Apex Class                 (cls)&#xA;Apex Trigger               (trigger)&#xA;APL                        (apl, apla, aplc, aplf, apli, apln, aplo, dyalog, dyapp, mipage)&#xA;Arduino Sketch             (ino, pde)&#xA;AsciiDoc                   (adoc, asciidoc)&#xA;ASP                        (asa, ashx, asp, axd)&#xA;ASP.NET                    (asax, ascx, asmx, aspx, master, sitemap, webinfo)&#xA;AspectJ                    (aj)&#xA;Assembly                   (a51, asm, nasm, S, s)&#xA;AutoHotkey                 (ahk, ahkl)&#xA;awk                        (auk, awk, gawk, mawk, nawk)&#xA;Bazel                      (BUILD)&#xA;BizTalk Orchestration      (odx)&#xA;BizTalk Pipeline           (btp)&#xA;Blade                      (blade, blade.php)&#xA;Bourne Again Shell         (bash)&#xA;Bourne Shell               (sh)&#xA;BrightScript               (brs)&#xA;builder                    (xml.builder)&#xA;C                          (c, cats, ec, idc, pgc)&#xA;C Shell                    (csh, tcsh)&#xA;C#                         (cs)&#xA;C# Designer                (designer.cs)&#xA;C++                        (C, c++, cc, CPP, cpp, cxx, h++, inl, ipp, pcc, tcc, tpp)&#xA;C/C++ Header               (H, h, hh, hpp, hxx)&#xA;Cake Build Script          (cake)&#xA;CCS                        (ccs)&#xA;Chapel                     (chpl)&#xA;Clean                      (dcl, icl)&#xA;Clojure                    (boot, cl2, clj, cljs.hl, cljscm, cljx, hic, riemann.config)&#xA;ClojureC                   (cljc)&#xA;ClojureScript              (cljs)&#xA;CMake                      (cmake, cmake.in, CMakeLists.txt)&#xA;COBOL                      (CBL, cbl, ccp, COB, cob, cobol, cpy)&#xA;CoffeeScript               (_coffee, cakefile, cjsx, coffee, iced)&#xA;ColdFusion                 (cfm, cfml)&#xA;ColdFusion CFScript        (cfc)&#xA;Coq                        (v)&#xA;Crystal                    (cr)&#xA;CSON                       (cson)&#xA;CSS                        (css)&#xA;CSV                        (csv)&#xA;Cucumber                   (feature)&#xA;CUDA                       (cu, cuh)&#xA;Cython                     (pxd, pxi, pyx)&#xA;D                          (d)&#xA;DAL                        (da)&#xA;Dart                       (dart)&#xA;Delphi Form                (dfm)&#xA;DenizenScript              (dsc)&#xA;Derw                       (derw)&#xA;dhall                      (dhall)&#xA;DIET                       (dt)&#xA;diff                       (diff, patch)&#xA;DITA                       (dita)&#xA;Dockerfile                 (Dockerfile, dockerfile)&#xA;DOORS Extension Language   (dxl)&#xA;DOS Batch                  (BAT, bat, BTM, btm, CMD, cmd)&#xA;Drools                     (drl)&#xA;DTD                        (dtd)&#xA;dtrace                     (d)&#xA;ECPP                       (ecpp)&#xA;EEx                        (eex)&#xA;EJS                        (ejs)&#xA;Elixir                     (ex, exs)&#xA;Elm                        (elm)&#xA;Embedded Crystal           (ecr)&#xA;ERB                        (ERB, erb)&#xA;Erlang                     (app.src, emakefile, erl, hrl, rebar.config, rebar.config.lock, rebar.lock, xrl, yrl)&#xA;Expect                     (exp)&#xA;F#                         (fsi, fs, fs)&#xA;F# Script                  (fsx)&#xA;Fennel                     (fnl)&#xA;Finite State Language      (fsl, jssm)&#xA;Fish Shell                 (fish)&#xA;Flatbuffers                (fbs)&#xA;Focus                      (focexec)&#xA;Forth                      (4th, e4, f83, fb, forth, fpm, fr, frt, ft, fth, rx, fs, f, for)&#xA;Fortran 77                 (F, F77, f77, FOR, FTN, ftn, pfo, f, for)&#xA;Fortran 90                 (F90, f90)&#xA;Fortran 95                 (F95, f95)&#xA;Freemarker Template        (ftl)&#xA;Futhark                    (fut)&#xA;FXML                       (fxml)&#xA;GDScript                   (gd)&#xA;Gencat NLS                 (msg)&#xA;Glade                      (glade, ui)&#xA;Gleam                      (gleam)&#xA;GLSL                       (comp, fp, frag, frg, fsh, fshader, geo, geom, glsl, glslv, gshader, tesc, tese, vert, vrx, vsh, vshader)&#xA;Go                         (go)&#xA;Godot Resource             (tres)&#xA;Godot Scene                (tscn)&#xA;Godot Shaders              (gdshader)&#xA;Gradle                     (gradle, gradle.kts)&#xA;Grails                     (gsp)&#xA;GraphQL                    (gql, graphql, graphqls)&#xA;Groovy                     (gant, groovy, grt, gtpl, gvy, jenkinsfile)&#xA;Haml                       (haml, haml.deface)&#xA;Handlebars                 (handlebars, hbs)&#xA;Harbour                    (hb)&#xA;Haskell                    (hs, hsc, lhs)&#xA;Haxe                       (hx, hxsl)&#xA;HCL                        (hcl, nomad, tf, tfvars)&#xA;HLSL                       (cg, cginc, fxh, hlsl, hlsli, shader)&#xA;Hoon                       (hoon)&#xA;HTML                       (htm, html, html.hl, xht)&#xA;HTML EEx                   (heex)&#xA;IDL                        (dlm, idl, pro)&#xA;Idris                      (idr)&#xA;Igor Pro                   (ipf)&#xA;Imba                       (imba)&#xA;INI                        (buildozer.spec, ini, lektorproject, prefs)&#xA;InstallShield              (ism)&#xA;IPL                        (ipl)&#xA;Java                       (java)&#xA;JavaScript                 (_js, bones, cjs, es6, jake, jakefile, js, jsb, jscad, jsfl, jsm, jss, mjs, njs, pac, sjs, ssjs, xsjs, xsjslib)&#xA;JavaServer Faces           (jsf)&#xA;JCL                        (jcl)&#xA;Jinja Template             (jinja, jinja2)&#xA;JSON                       (arcconfig, avsc, composer.lock, geojson, gltf, har, htmlhintrc, json, json-tmlanguage, jsonl, mcmeta, mcmod.info, tern-config, tern-project, tfstate, tfstate.backup, topojson, watchmanconfig, webapp, webmanifest, yyp)&#xA;JSON5                      (json5)&#xA;JSP                        (jsp, jspf)&#xA;JSX                        (jsx)&#xA;Julia                      (jl)&#xA;Juniper Junos              (junos)&#xA;Jupyter Notebook           (ipynb)&#xA;kvlang                     (kv)&#xA;Kermit                     (ksc)&#xA;Korn Shell                 (ksh)&#xA;Kotlin                     (kt, ktm, kts)&#xA;Lean                       (hlean, lean)&#xA;Lem                        (lem)&#xA;LESS                       (less)&#xA;lex                        (l, lex)&#xA;LFE                        (lfe)&#xA;liquid                     (liquid)&#xA;Lisp                       (asd, el, lisp, lsp, cl, jl)&#xA;Literate Idris             (lidr)&#xA;LiveLink OScript           (oscript)&#xA;LLVM IR                    (ll)&#xA;Logos                      (x, xm)&#xA;Logtalk                    (lgt, logtalk)&#xA;Lua                        (lua, nse, p8, pd_lua, rbxs, wlua)&#xA;m4                         (ac, m4)&#xA;make                       (am, Gnumakefile, gnumakefile, Makefile, makefile, mk)&#xA;Mako                       (mako, mao)&#xA;Markdown                   (contents.lr, markdown, md, mdown, mdwn, mdx, mkd, mkdn, mkdown, ronn, workbook)&#xA;Mathematica                (cdf, ma, mathematica, mt, nbp, wl, wlt, m)&#xA;MATLAB                     (m)&#xA;Maven                      (pom, pom.xml)&#xA;Meson                      (meson.build)&#xA;Metal                      (metal)&#xA;Modula3                    (i3, ig, m3, mg)&#xA;Mojo                       (mojom)&#xA;MSBuild script             (btproj, csproj, msbuild, vcproj, wdproj, wixproj)&#xA;MUMPS                      (mps, m)&#xA;Mustache                   (mustache)&#xA;MXML                       (mxml)&#xA;NAnt script                (build)&#xA;NASTRAN DMAP               (dmap)&#xA;Nemerle                    (n)&#xA;Nim                        (nim, nim.cfg, nimble, nimrod, nims)&#xA;Nix                        (nix)&#xA;Objective-C                (m)&#xA;Objective-C++              (mm)&#xA;OCaml                      (eliom, eliomi, ml, ml4, mli, mll, mly)&#xA;Odin                       (odin)&#xA;OpenCL                     (cl)&#xA;Oracle Forms               (fmt)&#xA;Oracle PL/SQL              (bod, fnc, prc, spc, trg)&#xA;Oracle Reports             (rex)&#xA;Pascal                     (dpr, lpr, p, pas, pascal)&#xA;Pascal/Puppet              (pp)&#xA;Patran Command Language    (pcl, ses)&#xA;PEG                        (peg)&#xA;peg.js                     (pegjs)&#xA;peggy                      (peggy)&#xA;Perl                       (ack, al, cpanfile, makefile.pl, perl, ph, plh, plx, pm, psgi, rexfile, pl, p6)&#xA;PHP                        (aw, ctp, phakefile, php, php3, php4, php5, php_cs, php_cs.dist, phps, phpt, phtml)&#xA;PHP/Pascal                 (inc)&#xA;Pig Latin                  (pig)&#xA;PL/I                       (pl1)&#xA;PL/M                       (lit, plm)&#xA;PlantUML                   (puml)&#xA;PO File                    (po)&#xA;PowerBuilder               (pbt, sra, srf, srm, srs, sru, srw)&#xA;PowerShell                 (ps1, psd1, psm1)&#xA;ProGuard                   (pro)&#xA;Prolog                     (P, prolog, yap, pl, p6, pro)&#xA;Properties                 (properties)&#xA;Protocol Buffers           (proto)&#xA;Pug                        (jade, pug)&#xA;PureScript                 (purs)&#xA;Python                     (buck, build.bazel, gclient, gyp, gypi, lmi, py, py3, pyde, pyi, pyp, pyt, pyw, sconscript, sconstruct, snakefile, tac, workspace, wscript, wsgi, xpy)&#xA;QML                        (qbs, qml)&#xA;Qt                         (ui)&#xA;Qt Linguist                (ts)&#xA;Qt Project                 (pro)&#xA;R                          (expr-dist, R, r, rd, rprofile, rsx)&#xA;Racket                     (rkt, rktd, rktl, scrbl)&#xA;Raku                       (pm6, raku, rakumod)&#xA;Raku/Prolog                (P6, p6)&#xA;RAML                       (raml)&#xA;RapydScript                (pyj)&#xA;Razor                      (cshtml, razor)&#xA;ReasonML                   (re, rei)&#xA;ReScript                   (res, resi)&#xA;reStructuredText           (rest, rest.txt, rst, rst.txt)&#xA;Rexx                       (pprx, rexx)&#xA;Ring                       (rform, rh, ring)&#xA;Rmd                        (Rmd)&#xA;RobotFramework             (robot)&#xA;Ruby                       (appraisals, berksfile, brewfile, builder, buildfile, capfile, dangerfile, deliverfile, eye, fastfile, gemfile, gemfile.lock, gemspec, god, guardfile, irbrc, jarfile, jbuilder, mavenfile, mspec, podfile, podspec, pryrc, puppetfile, rabl, rake, rb, rbuild, rbw, rbx, ru, snapfile, thor, thorfile, vagrantfile, watchr)&#xA;Ruby HTML                  (rhtml)&#xA;Rust                       (rs, rs.in)&#xA;SaltStack                  (sls)&#xA;SAS                        (sas)&#xA;Sass                       (sass)&#xA;Scala                      (kojo, sbt, scala)&#xA;Scheme                     (sc, sch, scm, sld, sps, ss, sls)&#xA;SCSS                       (scss)&#xA;sed                        (sed)&#xA;SKILL                      (il)&#xA;SKILL++                    (ils)&#xA;Slice                      (ice)&#xA;Slim                       (slim)&#xA;Smalltalk                  (st, cs)&#xA;Smarty                     (smarty, tpl)&#xA;Softbridge Basic           (SBL, sbl)&#xA;Solidity                   (sol)&#xA;SparForte                  (sp)&#xA;Specman e                  (e)&#xA;SQL                        (cql, mysql, psql, SQL, sql, tab, udf, viw)&#xA;SQL Data                   (data.sql)&#xA;SQL Stored Procedure       (spc.sql, spoc.sql, sproc.sql, udf.sql)&#xA;Squirrel                   (nut)&#xA;Standard ML                (fun, sig, sml)&#xA;Starlark                   (bazel, bzl)&#xA;Stata                      (ado, DO, do, doh, ihlp, mata, matah, sthlp)&#xA;Stylus                     (styl)&#xA;SugarSS                    (sss)&#xA;Svelte                     (svelte)&#xA;SVG                        (SVG, svg)&#xA;Swift                      (swift)&#xA;SWIG                       (i)&#xA;TableGen                   (td)&#xA;Tcl/Tk                     (itk, tcl, tk)&#xA;Teamcenter met             (met)&#xA;Teamcenter mth             (mth)&#xA;TeX                        (aux, bbx, bib, bst, cbx, dtx, ins, lbx, ltx, mkii, mkiv, mkvi, sty, tex, cls)&#xA;Text                       (text, txt)&#xA;Thrift                     (thrift)&#xA;TITAN Project File Information (tpd)&#xA;Titanium Style Sheet       (tss)&#xA;TNSDL                      (cii, cin, in1, in2, in3, in4, inf, interface, rou, sdl, sdt, spd, ssc, sst)&#xA;TOML                       (toml)&#xA;tspeg                      (jspeg, tspeg)&#xA;TTCN                       (ttcn, ttcn2, ttcn3, ttcnpp)&#xA;Twig                       (twig)&#xA;TypeScript                 (tsx, ts)&#xA;Umka                       (um)&#xA;Unity-Prefab               (mat, prefab)&#xA;Vala                       (vala)&#xA;Vala Header                (vapi)&#xA;VB for Applications        (VBA, vba)&#xA;Velocity Template Language (vm)&#xA;Verilog-SystemVerilog      (sv, svh, v)&#xA;VHDL                       (VHD, vhd, VHDL, vhdl, vhf, vhi, vho, vhs, vht, vhw)&#xA;vim script                 (vim)&#xA;Visual Basic               (BAS, bas, ctl, dsr, frm, FRX, frx, VBHTML, vbhtml, vbp, vbw, cls)&#xA;Visual Basic .NET          (VB, vb, vbproj)&#xA;Visual Basic Script        (VBS, vbs)&#xA;Visual Fox Pro             (SCA, sca)&#xA;Visual Studio Module       (ixx)&#xA;Visual Studio Solution     (sln)&#xA;Visualforce Component      (component)&#xA;Visualforce Page           (page)&#xA;Vuejs Component            (vue)&#xA;Web Services Description   (wsdl)&#xA;WebAssembly                (wast, wat)&#xA;Windows Message File       (mc)&#xA;Windows Module Definition  (def)&#xA;Windows Resource File      (rc, rc2)&#xA;WiX include                (wxi)&#xA;WiX source                 (wxs)&#xA;WiX string localization    (wxl)&#xA;WXML                       (wxml)&#xA;WXSS                       (wxss)&#xA;X++                        (xpo)&#xA;XAML                       (xaml)&#xA;xBase                      (prg, prw)&#xA;xBase Header               (ch)&#xA;XHTML                      (xhtml)&#xA;XMI                        (XMI, xmi)&#xA;XML                        (adml, admx, ant, app.config, axml, builds, ccproj, ccxml, classpath, clixml, cproject, cscfg, csdef, csl, ct, depproj, ditamap, ditaval, dll.config, dotsettings, filters, fsproj, gmx, grxml, iml, ivy, jelly, jsproj, kml, launch, mdpolicy, mjml, natvis, ndproj, nproj, nuget.config, nuspec, odd, osm, packages.config, pkgproj, plist, proj, project, props, ps1xml, psc1, pt, rdf, resx, rss, scxml, settings.stylecop, sfproj, shproj, srdf, storyboard, sttheme, sublime-snippet, targets, tmcommand, tml, tmlanguage, tmpreferences, tmsnippet, tmtheme, urdf, ux, vcxproj, vsixmanifest, vssettings, vstemplate, vxml, web.config, web.debug.config, web.release.config, wsf, x3d, xacro, xib, xlf, xliff, XML, xml, xml.dist, xproj, xspec, xul, zcml)&#xA;XQuery                     (xq, xql, xqm, xquery, xqy)&#xA;XSD                        (XSD, xsd)&#xA;XSLT                       (XSL, xsl, XSLT, xslt)&#xA;Xtend                      (xtend)&#xA;yacc                       (y, yacc)&#xA;YAML                       (clang-format, clang-tidy, gemrc, glide.lock, mir, reek, rviz, sublime-syntax, syntax, yaml, yaml-tmlanguage, yml, yml.mysql)&#xA;Zig                        (zig)&#xA;zsh                        (zsh)&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The above list can be customized by reading language definitions from a file with the &lt;code&gt;--read-lang-def&lt;/code&gt; or &lt;code&gt;--force-lang-def&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;p&gt;These file extensions map to multiple languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cl&lt;/code&gt; files could be Lisp or OpenCL&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cls&lt;/code&gt; files could be Visual Basic, TeX or Apex Class&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cs&lt;/code&gt; files could be C# or Smalltalk&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d&lt;/code&gt; files could be D or dtrace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;f&lt;/code&gt; files could be Fortran 77 or Forth&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fnc&lt;/code&gt; files could be Oracle PL or SQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for&lt;/code&gt; files could be Fortran 77 or Forth&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fs&lt;/code&gt; files could be F# or Forth&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;inc&lt;/code&gt; files could be PHP or Pascal&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;itk&lt;/code&gt; files could be Tcl or Tk&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jl&lt;/code&gt; files could be Lisp or Julia&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lit&lt;/code&gt; files could be PL or M&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;m&lt;/code&gt; files could be MATLAB, Mathematica, Objective-C, MUMPS or Mercury&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p6&lt;/code&gt; files could be Perl or Prolog&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pl&lt;/code&gt; files could be Perl or Prolog&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PL&lt;/code&gt; files could be Perl or Prolog&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pp&lt;/code&gt; files could be Pascal or Puppet&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pro&lt;/code&gt; files could be IDL, Qt Project, Prolog or ProGuard&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ts&lt;/code&gt; files could be TypeScript or Qt Linguist&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ui&lt;/code&gt; files could be Qt or Glade&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v&lt;/code&gt; files could be Verilog-SystemVerilog or Coq&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;cloc has subroutines that attempt to identify the correct language based on the file&#39;s contents for these special cases. Language identification accuracy is a function of how much code the file contains; .m files with just one or two lines for example, seldom have enough information to correctly distinguish between MATLAB, Mercury, MUMPS, or Objective-C.&lt;/p&gt; &#xA;&lt;p&gt;Languages with file extension collisions are difficult to customize with &lt;code&gt;--read-lang-def&lt;/code&gt; or &lt;code&gt;--force-lang-def&lt;/code&gt; as they have no mechanism to identify languages with common extensions. In this situation one must modify the cloc source code. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;How_it_works&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;How It Works â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;cloc&#39;s method of operation resembles SLOCCount&#39;s: First, create a list of files to consider. Next, attempt to determine whether or not found files contain recognized computer language source code. Finally, for files identified as source files, invoke language-specific routines to count the number of source lines.&lt;/p&gt; &#xA;&lt;p&gt;A more detailed description:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If the input file is an archive (such as a .tar.gz or .zip file), create a temporary directory and expand the archive there using a system call to an appropriate underlying utility (tar, bzip2, unzip, etc) then add this temporary directory as one of the inputs. (This works more reliably on Unix than on Windows.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use File::Find to recursively descend the input directories and make a list of candidate file names. Ignore binary and zero-sized files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the files in the candidate list have unique contents (first by comparing file sizes, then, for similarly sized files, compare MD5 hashes of the file contents with Digest::MD5). For each set of identical files, remove all but the first copy, as determined by a lexical sort, of identical files from the set. The removed files are not included in the report. (The &lt;code&gt;--skip-uniqueness&lt;/code&gt; switch disables the uniqueness tests and forces all copies of files to be included in the report.) See also the &lt;code&gt;--ignored=&lt;/code&gt; switch to see which files were ignored and why.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scan the candidate file list for file extensions which cloc associates with programming languages (see the &lt;code&gt;--show-lang&lt;/code&gt; and &lt;code&gt;--show-ext&lt;/code&gt; options). Files which match are classified as containing source code for that language. Each file without an extensions is opened and its first line read to see if it is a Unix shell script (anything that begins with #!). If it is shell script, the file is classified by that scripting language (if the language is recognized). If the file does not have a recognized extension or is not a recognized scripting language, the file is ignored.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All remaining files in the candidate list should now be source files for known programming languages. For each of these files:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Read the entire file into memory.&lt;/li&gt; &#xA;   &lt;li&gt;Count the number of lines (= L&lt;sub&gt;original&lt;/sub&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Remove blank lines, then count again (= L&lt;sub&gt;non_blank&lt;/sub&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Loop over the comment filters defined for this language. (For example, C++ has two filters: (1) remove lines that start with optional whitespace followed by // and (2) remove text between /* and */) Apply each filter to the code to remove comments. Count the left over lines (= L&lt;sub&gt;code&lt;/sub&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Save the counts for this language: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;blank lines = L&lt;sub&gt;original&lt;/sub&gt; - L&lt;sub&gt;non_blank&lt;/sub&gt;&lt;/li&gt; &#xA;     &lt;li&gt;comment lines = L&lt;sub&gt;non_blank&lt;/sub&gt; - L&lt;sub&gt;code&lt;/sub&gt;&lt;/li&gt; &#xA;     &lt;li&gt;code lines = L&lt;sub&gt;code&lt;/sub&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The options modify the algorithm slightly. The &lt;code&gt;--read-lang-def&lt;/code&gt; option for example allows the user to read definitions of comment filters, known file extensions, and known scripting languages from a file. The code for this option is processed between Steps 2 and 3. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;Advanced_Use&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Advanced Use â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;strip_comments&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Remove Comments from Source Code â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;How can you tell if cloc correctly identifies comments? One way to convince yourself cloc is doing the right thing is to use its &lt;code&gt;--strip-comments&lt;/code&gt; option to remove comments and blank lines from files, then compare the stripped-down files to originals.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s try this out with the SQLite amalgamation, a C file containing all code needed to build the SQLite library along with a header file:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; tar zxf sqlite-amalgamation-3.5.6.tar.gz&#xA;prompt&amp;gt; cd sqlite-3.5.6/&#xA;prompt&amp;gt; cloc --strip-comments=nc sqlite.c&#xA;       1 text file.&#xA;       1 unique file.&#xA;Wrote sqlite3.c.nc&#xA;       0 files ignored.&#xA;&#xA;http://cloc.sourceforge.net v 1.03  T=1.0 s (1.0 files/s, 82895.0 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language          files     blank   comment      code    scale   3rd gen. equiv&#xA;-------------------------------------------------------------------------------&#xA;C                     1      5167     26827     50901 x   0.77 =       39193.77&#xA;-------------------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The extension argument given to --strip-comments is arbitrary; here nc was used as an abbreviation for &#34;no comments&#34;.&lt;/p&gt; &#xA;&lt;p&gt;cloc removed over 31,000 lines from the file:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; wc -l sqlite3.c sqlite3.c.nc&#xA;  82895 sqlite3.c&#xA;  50901 sqlite3.c.nc&#xA; 133796 total&#xA;prompt&amp;gt; echo &#34;82895 - 50901&#34; | bc&#xA;31994&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;We can now compare the original file, sqlite3.c and the one stripped of comments, sqlite3.c.nc with tools like diff or vimdiff and see what exactly cloc considered comments and blank lines. A rigorous proof that the stripped-down file contains the same C code as the original is to compile these files and compare checksums of the resulting object files.&lt;/p&gt; &#xA;&lt;p&gt;First, the original source file:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; gcc -c sqlite3.c&#xA;prompt&amp;gt; md5sum sqlite3.o&#xA;cce5f1a2ea27c7e44b2e1047e2588b49  sqlite3.o&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Next, the version without comments:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; mv sqlite3.c.nc sqlite3.c&#xA;prompt&amp;gt; gcc -c sqlite3.c&#xA;prompt&amp;gt; md5sum sqlite3.o&#xA;cce5f1a2ea27c7e44b2e1047e2588b49  sqlite3.o&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;cloc removed over 31,000 lines of comments and blanks but did not modify the source code in any significant way since the resulting object file matches the original. &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;compressed_arch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Work with Compressed Archives â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Versions of cloc before v1.07 required an &lt;code&gt;--extract-with=CMD&lt;/code&gt; option to tell cloc how to expand an archive file. Beginning with v1.07 this is extraction is attempted automatically. At the moment the automatic extraction method works reasonably well on Unix-type OS&#39;s for the following file types: &lt;code&gt;.tar.gz&lt;/code&gt;, &lt;code&gt;.tar.bz2&lt;/code&gt;, &lt;code&gt;.tar.xz&lt;/code&gt;, &lt;code&gt;.tgz&lt;/code&gt;, &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.ear&lt;/code&gt;, &lt;code&gt;.deb&lt;/code&gt;. Some of these extensions work on Windows if one has WinZip installed in the default location (&lt;code&gt;C:\Program Files\WinZip\WinZip32.exe&lt;/code&gt;). Additionally, with newer versions of WinZip, the [http://www.winzip.com/downcl.htm](command line add-on) is needed for correct operation; in this case one would invoke cloc with something like &lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA; --extract-with=&#34;\&#34;c:\Program Files\WinZip\wzunzip\&#34; -e -o &amp;gt;FILE&amp;lt; .&#34;&#xA; &#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Ref. &lt;a href=&#34;http://sourceforge.net/projects/cloc/forums/forum/600963/topic/4021070?message=8938196&#34;&gt;http://sourceforge.net/projects/cloc/forums/forum/600963/topic/4021070?message=8938196&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In situations where the automatic extraction fails, one can try the &lt;code&gt;--extract-with=CMD&lt;/code&gt; option to count lines of code within tar files, Zip files, or other compressed archives for which one has an extraction tool. cloc takes the user-provided extraction command and expands the archive to a temporary directory (created with File::Temp), counts the lines of code in the temporary directory, then removes that directory. While not especially helpful when dealing with a single compressed archive (after all, if you&#39;re going to type the extraction command anyway why not just manually expand the archive?) this option is handy for working with several archives at once.&lt;/p&gt; &#xA;&lt;p&gt;For example, say you have the following source tarballs on a Unix machine&lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl-5.8.5.tar.gz&#xA;Python-2.4.2.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and you want to count all the code within them. The command would be&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;cloc --extract-with=&#39;gzip -dc &amp;gt;FILE&amp;lt; | tar xf -&#39; perl-5.8.5.tar.gz Python-2.4.2.tar.gz&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;If that Unix machine has GNU tar (which can uncompress and extract in one step) the command can be shortened to&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;cloc --extract-with=&#39;tar zxf &amp;gt;FILE&amp;lt;&#39; perl-5.8.5.tar.gz Python-2.4.2.tar.gz&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;On a Windows computer with WinZip installed in &lt;code&gt;c:\Program Files\WinZip&lt;/code&gt; the command would look like&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;cloc.exe --extract-with=&#34;\&#34;c:\Program Files\WinZip\WinZip32.exe\&#34; -e -o &amp;gt;FILE&amp;lt; .&#34; perl-5.8.5.tar.gz Python-2.4.2.tar.gz&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Java &lt;code&gt;.ear&lt;/code&gt; files are Zip files that contain additional Zip files. cloc can handle nested compressed archives without difficulty--provided all such files are compressed and archived in the same way. Examples of counting a Java &lt;code&gt;.ear&lt;/code&gt; file in Unix and Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --extract-with=&#34;unzip -d . &amp;gt;FILE&amp;lt; &#34; Project.ear&#xA;&lt;i&gt;DOS&amp;gt;&lt;/i&gt; cloc.exe --extract-with=&#34;\&#34;c:\Program Files\WinZip\WinZip32.exe\&#34; -e -o &amp;gt;FILE&amp;lt; .&#34; Project.ear&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;diff&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Differences â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;--diff&lt;/code&gt; switch allows one to measure the relative change in source code and comments between two versions of a file, directory, or archive. Differences reveal much more than absolute code counts of two file versions. For example, say a source file has 100 lines and its developer delivers a newer version with 102 lines. Did the developer add two comment lines, or delete seventeen source lines and add fourteen source lines and five comment lines, or did the developer do a complete rewrite, discarding all 100 original lines and adding 102 lines of all new source? The diff option tells how many lines of source were added, removed, modified or stayed the same, and how many lines of comments were added, removed, modified or stayed the same.&lt;/p&gt; &#xA;&lt;p&gt;Differences in blank lines are handled much more coarsely because these are stripped by cloc early on. Unless a file pair is identical, cloc will report only differences in absolute counts of blank lines. In other words, one can expect to see only entries for &#39;added&#39; if the second file has more blanks than the first, and &#39;removed&#39; if the situation is reversed. The entry for &#39;same&#39; will be non-zero only when the two files are identical.&lt;/p&gt; &#xA;&lt;p&gt;In addition to file pairs, one can give cloc pairs of directories, or pairs of file archives, or a file archive and a directory. cloc will try to align file pairs within the directories or archives and compare diffs for each pair. For example, to see what changed between GCC 4.4.0 and 4.5.0 one could do&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;cloc --diff gcc-4.4.0.tar.bz2  gcc-4.5.0.tar.bz2&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Be prepared to wait a while for the results though; the &lt;code&gt;--diff&lt;/code&gt; option runs much more slowly than an absolute code count.&lt;/p&gt; &#xA;&lt;p&gt;To see how cloc aligns files between the two archives, use the &lt;code&gt;--diff-alignment&lt;/code&gt; option&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;cloc --diff-alignment=align.txt gcc-4.4.0.tar.bz2  gcc-4.5.0.tar.bz2&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;to produce the file &lt;code&gt;align.txt&lt;/code&gt; which shows the file pairs as well as files added and deleted. The symbols &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; before each file pair indicate if the files are identical (&lt;code&gt;==&lt;/code&gt;) or if they have different content (&lt;code&gt;!=&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s sample output showing the difference between the Python 2.6.6 and 2.7 releases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;i&gt;prompt&amp;gt;&lt;/i&gt; cloc --diff Python-2.7.9.tgz Python-2.7.10.tar.xz&#xA;    4315 text files.&#xA;    4313 text files.s&#xA;    2173 files ignored.&#xA;&#xA;4 errors:&#xA;Diff error, exceeded timeout:  /tmp/8ToGAnB9Y1/Python-2.7.9/Mac/Modules/qt/_Qtmodule.c&#xA;Diff error, exceeded timeout:  /tmp/M6ldvsGaoq/Python-2.7.10/Mac/Modules/qt/_Qtmodule.c&#xA;Diff error (quoted comments?):  /tmp/8ToGAnB9Y1/Python-2.7.9/Mac/Modules/qd/qdsupport.py&#xA;Diff error (quoted comments?):  /tmp/M6ldvsGaoq/Python-2.7.10/Mac/Modules/qd/qdsupport.py&#xA;&#xA;https://github.com/AlDanial/cloc v 1.65  T=298.59 s (0.0 files/s, 0.0 lines/s)&#xA;-----------------------------------------------------------------------------&#xA;Language                   files          blank        comment           code&#xA;-----------------------------------------------------------------------------&#xA;Visual Basic&#xA; same                          2              0              1             12&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;make&#xA; same                         11              0            340           2952&#xA; modified                      1              0              0              1&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;diff&#xA; same                          1              0             87            105&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;CSS&#xA; same                          0              0             19            327&#xA; modified                      1              0              0              1&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;Objective-C&#xA; same                          7              0             61            635&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;NAnt script&#xA; same                          2              0              0             30&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;XML&#xA; same                          3              0              2             72&#xA; modified                      1              0              0              1&#xA; added                         0              0              0              1&#xA; removed                       0              1              0              0&#xA;Windows Resource File&#xA; same                          3              0             56            206&#xA; modified                      1              0              0              1&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;Expect&#xA; same                          6              0            161            565&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;HTML&#xA; same                         14              0             11           2344&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;vim script&#xA; same                          1              0              7            106&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;C++&#xA; same                          2              0             18            128&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;Windows Module Definition&#xA; same                          7              0            187           2080&#xA; modified                      2              0              0              0&#xA; added                         0              0              0              1&#xA; removed                       0              1              0              2&#xA;Prolog&#xA; same                          1              0              0             24&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;Javascript&#xA; same                          3              0             49            229&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;Assembly&#xA; same                         51              0           6794          12298&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;Bourne Shell&#xA; same                         41              0           7698          45024&#xA; modified                      1              0              0              3&#xA; added                         0             13              2             64&#xA; removed                       0              0              0              0&#xA;DOS Batch&#xA; same                         29              0            107            494&#xA; modified                      1              0              0              9&#xA; added                         0              1              0              3&#xA; removed                       0              0              0              0&#xA;MSBuild script&#xA; same                         77              0              3          38910&#xA; modified                      0              0              0              0&#xA; added                         0              0              0              0&#xA; removed                       0              0              0              0&#xA;Python&#xA; same                       1947              0         109012         430335&#xA; modified                    192              0             94            950&#xA; added                         2            323            283           2532&#xA; removed                       2             55             58            646&#xA;m4&#xA; same                         18              0            191          15352&#xA; modified                      1              0              0              2&#xA; added                         1             31              0            205&#xA; removed                       0              0              0              0&#xA;C&#xA; same                        505              0          37439         347837&#xA; modified                     45              0             13            218&#xA; added                         0             90             33            795&#xA; removed                       0              9              2            148&#xA;C/C++ Header&#xA; same                        255              0          10361          66635&#xA; modified                      5              0              5              7&#xA; added                         0              1              3            300&#xA; removed                       0              0              0              0&#xA;---------------------------------------------------------------------&#xA;SUM:&#xA; same                       2986              0         172604         966700&#xA; modified                    251              0            112           1193&#xA; added                         3            459            321           3901&#xA; removed                       2             66             60            796&#xA;---------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;A pair of errors occurred. The first pair was caused by timing out when computing diffs of the file &lt;code&gt;Python-X/Mac/Modules/qt/_Qtmodule.c&lt;/code&gt; in each Python version. This file has &amp;gt; 26,000 lines of C code and takes more than 10 seconds--the default maximum duration for diff&#39;ing a single file--on my slow computer. (Note: this refers to performing differences with the &lt;code&gt;sdiff()&lt;/code&gt; function in the Perl &lt;code&gt;Algorithm::Diff&lt;/code&gt; module, not the command line &lt;code&gt;diff&lt;/code&gt; utility.) This error can be overcome by raising the time to, say, 20 seconds with &lt;code&gt;--diff-timeout 20&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The second error is more problematic. The files &lt;code&gt;Python-X/Mac/Modules/qd/qdsupport.py&lt;/code&gt; include Python docstring (text between pairs of triple quotes) containing C comments. cloc treats docstrings as comments and handles them by first converting them to C comments, then using the C comment removing regular expression. Nested C comments yield erroneous results however.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;custom_lang&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Create Custom Language Definitions â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;cloc can write its language comment definitions to a file or can read comment definitions from a file, overriding the built-in definitions. This can be useful when you want to use cloc to count lines of a language not yet included, to change association of file extensions to languages, or to modify the way existing languages are counted.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to create a custom language definition file is to make cloc write its definitions to a file, then modify that file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --write-lang-def=my_definitions.txt&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;creates the file &lt;code&gt;my_definitions.txt&lt;/code&gt; which can be modified then read back in with either the &lt;code&gt;--read-lang-def&lt;/code&gt; or &lt;code&gt;--force-lang-def&lt;/code&gt; option. The difference between the options is former merges language definitions from the given file in with cloc&#39;s internal definitions with cloc&#39;s taking precedence if there are overlaps. The &lt;code&gt;--force-lang-def&lt;/code&gt; option, on the other hand, replaces cloc&#39;s definitions completely. This option has a disadvantage in preventing cloc from counting &lt;a class=&#34;u&#34; href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#extcollision&#34; name=&#34;extcollision&#34;&gt; languages whose extensions map to multiple languages &lt;/a&gt; as these languages require additional logic that is not easily expressed in a definitions file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --read-lang-def=my_definitions.txt  &lt;i&gt;file1 file2 dir1 ...&lt;/i&gt;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Each language entry has four parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The language name starting in column 1.&lt;/li&gt; &#xA; &lt;li&gt;One or more comment &lt;em&gt;filters&lt;/em&gt; starting in column 5.&lt;/li&gt; &#xA; &lt;li&gt;One or more filename extensions starting in column 5.&lt;/li&gt; &#xA; &lt;li&gt;A 3rd generation scale factor starting in column 5. This entry must be provided but its value is not important unless you want to compare your language to a hypothetical third generation programming language.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A filter defines a method to remove comment text from the source file. For example the entry for C++ looks like this&lt;/p&gt; &#xA;&lt;pre&gt;C++&#xA;    filter call_regexp_common C++&#xA;    filter remove_inline //.*$&#xA;    extension C&#xA;    extension c++&#xA;    extension cc&#xA;    extension cpp&#xA;    extension cxx&#xA;    extension pcc&#xA;    3rd_gen_scale 1.51&#xA;    end_of_line_continuation \\$&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;C++ has two filters: first, remove lines matching Regexp::Common&#39;s C++ comment regex. The second filter using remove_inline is currently unused. Its intent is to identify lines with both code and comments and it may be implemented in the future.&lt;/p&gt; &#xA;&lt;p&gt;A more complete discussion of the different filter options may appear here in the future. The output of cloc&#39;s &lt;code&gt;--write-lang-def&lt;/code&gt; option should provide enough examples for motivated individuals to modify or extend cloc&#39;s language definitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;combine_reports&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Combine Reports â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you manage multiple software projects you might be interested in seeing line counts by project, not just by language. Say you manage three software projects called MariaDB, PostgreSQL, and SQLite. The teams responsible for each of these projects run cloc on their source code and provide you with the output. For example MariaDB team does&lt;/p&gt; &#xA;&lt;pre&gt;cloc --out mariadb-10.1.txt mariadb-server-10.1.zip&lt;/pre&gt; &#xA;&lt;p&gt;and provides you with the file &lt;code&gt;mariadb-10.1.txt&lt;/code&gt;. The contents of the three files you get are&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat mariadb-10.1.txt&#xA;https://github.com/AlDanial/cloc v 1.65  T=45.36 s (110.5 files/s, 66411.4 lines/s)&#xA;-----------------------------------------------------------------------------------&#xA;Language                         files          blank        comment           code&#xA;-----------------------------------------------------------------------------------&#xA;C++                               1613         225338         290077         983026&#xA;C                                  853          62442          73017         715018&#xA;C/C++ Header                      1327          48300         114577         209394&#xA;Bourne Shell                       256          10224          10810          61943&#xA;Perl                               147          10342           8305          35562&#xA;Pascal                             107           4907           5237          32541&#xA;HTML                                56            195              6          16489&#xA;Javascript                           5           3309           3019          15540&#xA;m4                                  30           1599            359          14215&#xA;CMake                              190           1919           4097          12206&#xA;XML                                 35            648             56           5210&#xA;Ruby                                59            619            184           4998&#xA;Puppet                              10              0              1           3848&#xA;make                               134            724            360           3631&#xA;SQL                                 23            306            377           3405&#xA;Python                              34            371            122           2545&#xA;Bourne Again Shell                  27            299            380           1604&#xA;Windows Module Definition           37             27             13           1211&#xA;lex                                  4            394            166            991&#xA;yacc                                 2            152             64            810&#xA;DOS Batch                           19             89             82            700&#xA;Prolog                               1              9             40            448&#xA;RobotFramework                       1              0              0            441&#xA;CSS                                  2             33            155            393&#xA;JSON                                 5              0              0            359&#xA;dtrace                               9             59            179            306&#xA;Windows Resource File               10             61             89            250&#xA;Assembly                             2             70            284            237&#xA;WiX source                           1             18             10            155&#xA;Visual Basic                         6              0              0             88&#xA;YAML                                 2              4              4             65&#xA;PHP                                  1             11              2             24&#xA;SKILL                                1              8             15             16&#xA;sed                                  2              0              0             16&#xA;Windows Message File                 1              2              8              6&#xA;diff                                 1              1              4              4&#xA;D                                    1              4             11              4&#xA;-----------------------------------------------------------------------------------&#xA;SUM:                              5014         372484         512110        2127699&#xA;-----------------------------------------------------------------------------------&#xA;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat sqlite-3081101.txt&#xA;https://github.com/AlDanial/cloc v 1.65  T=1.22 s (3.3 files/s, 143783.6 lines/s)&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;C                                2          11059          53924         101454&#xA;C/C++ Header                     2            211           6630           1546&#xA;-------------------------------------------------------------------------------&#xA;SUM:                             4          11270          60554         103000&#xA;-------------------------------------------------------------------------------&#xA;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat postgresql-9.4.4.txt&#xA;https://github.com/AlDanial/cloc v 1.65  T=22.46 s (172.0 files/s, 96721.6 lines/s)&#xA;-----------------------------------------------------------------------------------&#xA;Language                         files          blank        comment           code&#xA;-----------------------------------------------------------------------------------&#xA;HTML                              1254           3725              0         785991&#xA;C                                 1139         139289         244045         736519&#xA;C/C++ Header                       667          12277          32488          57014&#xA;SQL                                410          13400           8745          51926&#xA;yacc                                 8           3163           2669          28491&#xA;Bourne Shell                        41           2647           2440          17170&#xA;Perl                                81           1702           1308           9456&#xA;lex                                  9            792           1631           4285&#xA;make                               205           1525           1554           4114&#xA;m4                                  12            218             25           1642&#xA;Windows Module Definition           13              4             17           1152&#xA;XSLT                                 5             76             55            294&#xA;DOS Batch                            7             29             30             92&#xA;CSS                                  1             20              7             69&#xA;Assembly                             3             17             38             69&#xA;D                                    1             14             14             66&#xA;Windows Resource File                3              4              0             62&#xA;Lisp                                 1              1              1             16&#xA;sed                                  1              1              7             15&#xA;Python                               1              5              0             13&#xA;Bourne Again Shell                   1              8              6             10&#xA;Windows Message File                 1              0              0              5&#xA;-----------------------------------------------------------------------------------&#xA;SUM:                              3864         178917         295080        1698471&#xA;-----------------------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;While these three files are interesting, you also want to see the combined counts from all projects. That can be done with cloc&#39;s &lt;code&gt;--sum_reports&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --sum-reports --out=databases mariadb-10.1.txt  sqlite-3081101.txt  postgresql-9.4.4.txt&#xA;Wrote databases.lang&#xA;Wrote databases.file&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The report combination produces two output files, one for sums by programming language (&lt;code&gt;databases.lang&lt;/code&gt;) and one by project (&lt;code&gt;databases.file&lt;/code&gt;). Their contents are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat databases.lang&#xA;https://github.com/AlDanial/cloc v 1.65&#xA;--------------------------------------------------------------------------------&#xA;Language                      files          blank        comment           code&#xA;--------------------------------------------------------------------------------&#xA;C                              1994         212790         370986        1552991&#xA;C++                            1613         225338         290077         983026&#xA;HTML                           1310           3920              6         802480&#xA;C/C++ Header                   1996          60788         153695         267954&#xA;Bourne Shell                    297          12871          13250          79113&#xA;SQL                             433          13706           9122          55331&#xA;Perl                            228          12044           9613          45018&#xA;Pascal                          107           4907           5237          32541&#xA;yacc                             10           3315           2733          29301&#xA;m4                               42           1817            384          15857&#xA;Javascript                        5           3309           3019          15540&#xA;CMake                           190           1919           4097          12206&#xA;make                            339           2249           1914           7745&#xA;lex                              13           1186           1797           5276&#xA;XML                              35            648             56           5210&#xA;Ruby                             59            619            184           4998&#xA;Puppet                           10              0              1           3848&#xA;Python                           35            376            122           2558&#xA;Windows Module Definition        50             31             30           2363&#xA;Bourne Again Shell               28            307            386           1614&#xA;DOS Batch                        26            118            112            792&#xA;CSS                               3             53            162            462&#xA;Prolog                            1              9             40            448&#xA;RobotFramework                    1              0              0            441&#xA;JSON                              5              0              0            359&#xA;Windows Resource File            13             65             89            312&#xA;Assembly                          5             87            322            306&#xA;dtrace                            9             59            179            306&#xA;XSLT                              5             76             55            294&#xA;WiX source                        1             18             10            155&#xA;Visual Basic                      6              0              0             88&#xA;D                                 2             18             25             70&#xA;YAML                              2              4              4             65&#xA;sed                               3              1              7             31&#xA;PHP                               1             11              2             24&#xA;SKILL                             1              8             15             16&#xA;Lisp                              1              1              1             16&#xA;Windows Message File              2              2              8             11&#xA;diff                              1              1              4              4&#xA;--------------------------------------------------------------------------------&#xA;SUM:                           8882         562671         867744        3929170&#xA;--------------------------------------------------------------------------------&#xA;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat databases.file&#xA;----------------------------------------------------------------------------------&#xA;File                            files          blank        comment           code&#xA;----------------------------------------------------------------------------------&#xA;mariadb-10.1.txt                 5014         372484         512110        2127699&#xA;postgresql-9.4.4.txt             3864         178917         295080        1698471&#xA;sqlite-3081101.txt                  4          11270          60554         103000&#xA;----------------------------------------------------------------------------------&#xA;SUM:                             8882         562671         867744        3929170&#xA;----------------------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Report files themselves can be summed together. Say you also manage development of Perl and Python and you want to keep track of those line counts separately from your database projects. First create reports for Perl and Python separately:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;cloc --out perl-5.22.0.txt   perl-5.22.0.tar.gz&#xA;cloc --out python-2.7.10.txt Python-2.7.10.tar.xz&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;then sum these together with&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --sum-reports --out script_lang perl-5.22.0.txt python-2.7.10.txt&#xA;Wrote script_lang.lang&#xA;Wrote script_lang.file&#xA;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat script_lang.lang&#xA;https://github.com/AlDanial/cloc v 1.65&#xA;-------------------------------------------------------------------------------&#xA;Language                     files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;Perl                          2892         136396         184362         536445&#xA;C                              680          75566          71211         531203&#xA;Python                        2141          89642         109524         434015&#xA;C/C++ Header                   408          16433          26938         214800&#xA;Bourne Shell                   154          11088          14496          87759&#xA;MSBuild script                  77              0              3          38910&#xA;m4                              20           1604            191          15559&#xA;Assembly                        51           3775           6794          12298&#xA;Pascal                           8            458           1603           8592&#xA;make                            16            897            828           4939&#xA;XML                             37            198              2           2484&#xA;HTML                            14            393             11           2344&#xA;C++                             12            338            295           2161&#xA;Windows Module Definition        9            171            187           2081&#xA;YAML                            49             20             15           2078&#xA;Prolog                          12            438              2           1146&#xA;JSON                            14              1              0           1037&#xA;yacc                             1             85             76            998&#xA;DOS Batch                       44            199            148            895&#xA;Objective-C                      7             98             61            635&#xA;Expect                           6            104            161            565&#xA;Windows Message File             1            102             11            489&#xA;CSS                              1             98             19            328&#xA;Windows Resource File            7             55             56            292&#xA;Javascript                       3             31             49            229&#xA;vim script                       1             36              7            106&#xA;diff                             1             17             87            105&#xA;NAnt script                      2              1              0             30&#xA;IDL                              1              0              0             24&#xA;Visual Basic                     2              1              1             12&#xA;D                                1              5              7              8&#xA;Lisp                             2              0              3              4&#xA;-------------------------------------------------------------------------------&#xA;SUM:                          6674         338250         417148        1902571&#xA;-------------------------------------------------------------------------------&#xA;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat script_lang.file&#xA;-------------------------------------------------------------------------------&#xA;File                         files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;python-2.7.10.txt             3240         161276         173214         998697&#xA;perl-5.22.0.txt               3434         176974         243934         903874&#xA;-------------------------------------------------------------------------------&#xA;SUM:                          6674         338250         417148        1902571&#xA;-------------------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, combine the combination files:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cloc --sum-reports --report_file=everything databases.lang script_lang.lang&#xA;Wrote everything.lang&#xA;Wrote everything.file&#xA;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat everything.lang&#xA;https://github.com/AlDanial/cloc v 1.65&#xA;---------------------------------------------------------------------------------&#xA;Language                       files          blank        comment           code&#xA;---------------------------------------------------------------------------------&#xA;C                               2674         288356         442197        2084194&#xA;C++                             1625         225676         290372         985187&#xA;HTML                            1324           4313             17         804824&#xA;Perl                            3120         148440         193975         581463&#xA;C/C++ Header                    2404          77221         180633         482754&#xA;Python                          2176          90018         109646         436573&#xA;Bourne Shell                     451          23959          27746         166872&#xA;SQL                              433          13706           9122          55331&#xA;Pascal                           115           5365           6840          41133&#xA;MSBuild script                    77              0              3          38910&#xA;m4                                62           3421            575          31416&#xA;yacc                              11           3400           2809          30299&#xA;Javascript                         8           3340           3068          15769&#xA;make                             355           3146           2742          12684&#xA;Assembly                          56           3862           7116          12604&#xA;CMake                            190           1919           4097          12206&#xA;XML                               72            846             58           7694&#xA;lex                               13           1186           1797           5276&#xA;Ruby                              59            619            184           4998&#xA;Windows Module Definition         59            202            217           4444&#xA;Puppet                            10              0              1           3848&#xA;YAML                              51             24             19           2143&#xA;DOS Batch                         70            317            260           1687&#xA;Bourne Again Shell                28            307            386           1614&#xA;Prolog                            13            447             42           1594&#xA;JSON                              19              1              0           1396&#xA;CSS                                4            151            181            790&#xA;Objective-C                        7             98             61            635&#xA;Windows Resource File             20            120            145            604&#xA;Expect                             6            104            161            565&#xA;Windows Message File               3            104             19            500&#xA;RobotFramework                     1              0              0            441&#xA;dtrace                             9             59            179            306&#xA;XSLT                               5             76             55            294&#xA;WiX source                         1             18             10            155&#xA;diff                               2             18             91            109&#xA;vim script                         1             36              7            106&#xA;Visual Basic                       8              1              1            100&#xA;D                                  3             23             32             78&#xA;sed                                3              1              7             31&#xA;NAnt script                        2              1              0             30&#xA;IDL                                1              0              0             24&#xA;PHP                                1             11              2             24&#xA;Lisp                               3              1              4             20&#xA;SKILL                              1              8             15             16&#xA;---------------------------------------------------------------------------------&#xA;SUM:                           15556         900921        1284892        5831741&#xA;---------------------------------------------------------------------------------&#xA;&#xA;&lt;i&gt;Unix&amp;gt;&lt;/i&gt; cat everything.file&#xA;-------------------------------------------------------------------------------&#xA;File                         files          blank        comment           code&#xA;-------------------------------------------------------------------------------&#xA;databases.lang                8882         562671         867744        3929170&#xA;script_lang.lang              6674         338250         417148        1902571&#xA;-------------------------------------------------------------------------------&#xA;SUM:                         15556         900921        1284892        5831741&#xA;-------------------------------------------------------------------------------&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;One limitation of the &lt;code&gt;--sum-reports&lt;/code&gt; feature is that the individual counts must be saved in the plain text format. Counts saved as XML, JSON, YAML, or SQL will produce errors if used in a summation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;sql&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;SQL â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Cloc can write results in the form of SQL table create and insert statements for use with relational database programs such as SQLite, MySQL, PostgreSQL, Oracle, or Microsoft SQL. Once the code count information is in a database, the information can be interrogated and displayed in interesting ways.&lt;/p&gt; &#xA;&lt;p&gt;A database created from cloc SQL output has two tables, &lt;strong&gt;metadata&lt;/strong&gt; and &lt;strong&gt;t&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Table &lt;strong&gt;metadata&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timestamp&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;elapsed_s&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Table &lt;strong&gt;t&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;language&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;file&lt;/td&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nBlank&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nComment&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nCode&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nScaled&lt;/td&gt; &#xA;   &lt;td&gt;real&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The &lt;strong&gt;metadata&lt;/strong&gt; table contains information about when the cloc run was made. The &lt;code&gt;--sql-append&lt;/code&gt; switch allows one to combine many runs in a single database; each run adds a row to the metadata table. The code count information resides in table &lt;strong&gt;t&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s repeat the code count examples of Perl, Python, SQLite, MySQL and PostgreSQL tarballs shown in the &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#combine_reports&#34;&gt;Combine Reports&lt;/a&gt; example above, this time using the SQL output options and the &lt;a href=&#34;http://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; database engine.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--sql&lt;/code&gt; switch tells cloc to generate output in the form of SQL table &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt; commands. The switch takes an argument of a file name to write these SQL statements into, or, if the argument is 1 (numeric one), streams output to STDOUT. Since the SQLite command line program, &lt;code&gt;sqlite3&lt;/code&gt;, can read commands from STDIN, we can dispense with storing SQL statements to a file and use &lt;code&gt;--sql 1&lt;/code&gt; to pipe data directly into the SQLite executable:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;cloc --sql 1 --sql-project mariadb mariadb-server-10.1.zip | sqlite3 code.db&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--sql-project mariadb&lt;/code&gt; part is optional; there&#39;s no need to specify a project name when working with just one code base. However, since we&#39;ll be adding code counts from four other tarballs, we&#39;ll only be able to identify data by input source if we supply a project name for each run.&lt;/p&gt; &#xA;&lt;p&gt;Now that we have a database we will need to pass in the &lt;code&gt;--sql-append&lt;/code&gt; switch to tell cloc not to wipe out this database but instead add more data:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;cloc --sql 1 --sql-project postgresql --sql-append postgresql-9.4.4.tar.bz2        | sqlite3 code.db&#xA;cloc --sql 1 --sql-project sqlite     --sql-append sqlite-amalgamation-3081101.zip | sqlite3 code.db&#xA;cloc --sql 1 --sql-project python     --sql-append Python-2.7.10.tar.xz            | sqlite3 code.db&#xA;cloc --sql 1 --sql-project perl       --sql-append perl-5.22.0.tar.gz              | sqlite3 code.db&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Now the fun begins--we have a database, &lt;code&gt;code.db&lt;/code&gt;, with lots of information about the five projects and can query it for all manner of interesting facts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Which is the longest file over all projects?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; sqlite3 code.db &#39;select project,file,nBlank+nComment+nCode as nL from t&#xA;                                 where nL = (select max(nBlank+nComment+nCode) from t)&#39;&#xA;&#xA;sqlite|sqlite-amalgamation-3081101/sqlite3.c|161623&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sqlite3&lt;/code&gt;&#39;s default output format leaves a bit to be desired. We can add an option to the program&#39;s rc file, &lt;code&gt;~/.sqliterc&lt;/code&gt;, to show column headers:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;  .header on&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;One might be tempted to also include&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;  .mode column&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;in &lt;code&gt;~/.sqliterc&lt;/code&gt; but this causes problems when the output has more than one row since the widths of entries in the first row govern the maximum width for all subsequent rows. Often this leads to truncated output--not at all desirable. One option is to write a custom SQLite output formatter such as &lt;code&gt;sqlite_formatter&lt;/code&gt;, included with cloc.&lt;/p&gt; &#xA;&lt;p&gt;To use it, simply pass &lt;code&gt;sqlite3&lt;/code&gt;&#39;s STDOUT into &lt;code&gt;sqlite_formatter&lt;/code&gt; via a pipe:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; sqlite3 code.db &#39;select project,file,nBlank+nComment+nCode as nL from t&#xA;                         where nL = (select max(nBlank+nComment+nCode) from t)&#39; | ./sqlite_formatter&#xA;  &lt;font color=&#34;darkgreen&#34;&gt;&#xA;  -- Loading resources from ~/.sqliterc&#xA;  Project File                                  nL&#xA;  _______ _____________________________________ ______&#xA;  sqlite  sqlite-amalgamation-3081101/sqlite3.c 161623&#xA;  &lt;/font&gt;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;If the &#34;Project File&#34; line doesn&#39;t appear, add &lt;code&gt;.header on&lt;/code&gt; to your &lt;code&gt;~/.sqliterc&lt;/code&gt; file as explained above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What is the longest file over all projects?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; sqlite3 code.db &#39;select project,file,nBlank+nComment+nCode as nL from t&#xA;                         where nL = (select max(nBlank+nComment+nCode) from t)&#39; | sqlite_formatter&#xA;&#xA;Project File                                  nL&#xA;_______ _____________________________________ ______&#xA;sqlite  sqlite-amalgamation-3081101/sqlite3.c 161623&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;What is the longest file in each project?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; sqlite3 code.db &#39;select project,file,max(nBlank+nComment+nCode) as nL from t&#xA;                          group by project order by nL;&#39; | sqlite_formatter&#xA;&#xA;Project    File                                                             nL&#xA;__________ ________________________________________________________________ ______&#xA;python     Python-2.7.10/Mac/Modules/qt/_Qtmodule.c                          28091&#xA;postgresql postgresql-9.4.4/src/interfaces/ecpg/preproc/preproc.c            54623&#xA;mariadb    server-10.1/storage/mroonga/vendor/groonga/lib/nfkc.c             80246&#xA;perl       perl-5.22.0/cpan/Locale-Codes/lib/Locale/Codes/Language_Codes.pm 100747&#xA;sqlite     sqlite-amalgamation-3081101/sqlite3.c                            161623&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Which files in each project have the most code lines?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; sqlite3 code.db &#39;select project,file,max(nCode) as nL from t&#xA;                         group by project order by nL desc;&#39; | sqlite_formatter&#xA;&#xA;Project    File                                                             nL&#xA;__________ ________________________________________________________________ ______&#xA;perl       perl-5.22.0/cpan/Locale-Codes/lib/Locale/Codes/Language_Codes.pm 100735&#xA;sqlite     sqlite-amalgamation-3081101/sqlite3.c                             97469&#xA;mariadb    server-10.1/storage/mroonga/vendor/groonga/lib/nfkc.c             80221&#xA;postgresql postgresql-9.4.4/src/interfaces/ecpg/preproc/preproc.c            45297&#xA;python     Python-2.7.10/Mac/Modules/qt/_Qtmodule.c                          26705&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Which C source files with more than 300 lines have a comment ratio below 1%?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; sqlite3 code.db &#39;select project, file, nCode, nComment,&#xA;                         (100.0*nComment)/(nComment+nCode) as comment_ratio from t&#xA;                         where language=&#34;C&#34; and nCode &amp;gt; 300 and&#xA;                         comment_ratio &amp;lt; 1 order by comment_ratio;&#39; | sqlite_formatter&#xA;&#xA;Project    File                                                                                            nCode nComment comment_ratio&#xA;__________ _______________________________________________________________________________________________ _____ ________ __________________&#xA;mariadb    server-10.1/storage/mroonga/vendor/groonga/lib/nfkc.c                                           80221       14 0.0174487443135789&#xA;python     Python-2.7.10/Python/graminit.c                                                                  2175        1 0.0459558823529412&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_turkish.c                            2095        1 0.0477099236641221&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_french.c                             1211        1 0.0825082508250825&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_french.c                        1201        1 0.0831946755407654&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_hungarian.c                          1182        1 0.084530853761623&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_hungarian.c                     1178        1 0.0848176420695505&#xA;mariadb    server-10.1/strings/ctype-eucjpms.c                                                             67466       60 0.0888546633889169&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_english.c                            1072        1 0.0931966449207828&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_english.c                       1064        1 0.0938967136150235&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_spanish.c                            1053        1 0.094876660341556&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_spanish.c                       1049        1 0.0952380952380952&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_italian.c                            1031        1 0.0968992248062016&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_italian.c                       1023        1 0.09765625&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_portuguese.c                          981        1 0.10183299389002&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_portuguese.c                     975        1 0.102459016393443&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_romanian.c                            967        1 0.103305785123967&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_2_romanian.c                       961        1 0.103950103950104&#xA;mariadb    server-10.1/strings/ctype-ujis.c                                                                67177       79 0.117461639110265&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_finnish.c                             720        1 0.13869625520111&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_porter.c                              717        1 0.139275766016713&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_finnish.c                        714        1 0.13986013986014&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_porter.c                         711        1 0.140449438202247&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_KOI8_R_russian.c                            660        1 0.151285930408472&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_russian.c                             654        1 0.152671755725191&#xA;python     Python-2.7.10/Mac/Modules/qt/_Qtmodule.c                                                        26705       42 0.157026956294164&#xA;python     Python-2.7.10/Mac/Modules/icn/_Icnmodule.c                                                       1521        3 0.196850393700787&#xA;mariadb    server-10.1/strings/ctype-extra.c                                                                8282       18 0.216867469879518&#xA;postgresql postgresql-9.4.4/src/bin/psql/sql_help.c                                                         3576        8 0.223214285714286&#xA;mariadb    server-10.1/strings/ctype-sjis.c                                                                34006       86 0.252258594391646&#xA;python     Python-2.7.10/Python/Python-ast.c                                                                6554       17 0.258712524729874&#xA;mariadb    server-10.1/strings/ctype-cp932.c                                                               34609       92 0.265122042592432&#xA;perl       perl-5.22.0/keywords.c                                                                           2815        8 0.283386468296139&#xA;python     Python-2.7.10/Mac/Modules/menu/_Menumodule.c                                                     3263       10 0.305530094714329&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_dutch.c                               596        2 0.334448160535117&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_dutch.c                          586        2 0.340136054421769&#xA;mariadb    server-10.1/strings/ctype-gbk.c                                                                 10684       38 0.354411490393583&#xA;python     Python-2.7.10/Mac/Modules/qd/_Qdmodule.c                                                         6694       24 0.357249181303959&#xA;python     Python-2.7.10/Mac/Modules/win/_Winmodule.c                                                       3056       11 0.358656667753505&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_german.c                              476        2 0.418410041841004&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_german.c                         470        2 0.423728813559322&#xA;mariadb    server-10.1/strings/ctype-euc_kr.c                                                               9956       44 0.44&#xA;postgresql postgresql-9.4.4/src/backend/utils/fmgrtab.c                                                     4815       23 0.475403059115337&#xA;python     Python-2.7.10/Mac/Modules/ctl/_Ctlmodule.c                                                       5442       28 0.511882998171846&#xA;python     Python-2.7.10/Mac/Modules/ae/_AEmodule.c                                                         1347        7 0.51698670605613&#xA;python     Python-2.7.10/Mac/Modules/app/_Appmodule.c                                                       1712        9 0.52295177222545&#xA;mariadb    server-10.1/strings/ctype-gb2312.c                                                               6377       35 0.54585152838428&#xA;mariadb    server-10.1/storage/tokudb/ft-index/third_party/xz-4.999.9beta/src/liblzma/lzma/fastpos_table.c   516        3 0.578034682080925&#xA;python     Python-2.7.10/Mac/Modules/evt/_Evtmodule.c                                                        504        3 0.591715976331361&#xA;python     Python-2.7.10/Modules/expat/xmlrole.c                                                            1256        8 0.632911392405063&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_UTF_8_danish.c                              312        2 0.636942675159236&#xA;postgresql postgresql-9.4.4/src/backend/snowball/libstemmer/stem_ISO_8859_1_danish.c                         310        2 0.641025641025641&#xA;python     Python-2.7.10/Mac/Modules/res/_Resmodule.c                                                       1621       12 0.734843845682792&#xA;python     Python-2.7.10/Mac/Modules/drag/_Dragmodule.c                                                     1046        8 0.759013282732448&#xA;python     Python-2.7.10/Mac/Modules/list/_Listmodule.c                                                     1021        8 0.777453838678329&#xA;python     Python-2.7.10/Mac/Modules/te/_TEmodule.c                                                         1198       10 0.827814569536424&#xA;python     Python-2.7.10/Mac/Modules/cg/_CGmodule.c                                                         1190       10 0.833333333333333&#xA;python     Python-2.7.10/Modules/clmodule.c                                                                 2379       23 0.957535387177352&#xA;python     Python-2.7.10/Mac/Modules/folder/_Foldermodule.c                                                  306        3 0.970873786407767&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;What are the ten longest files (based on code lines) that have no comments at all? Exclude header, .html, and YAML files.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; sqlite3 code.db &#39;select project, file, nCode from t&#xA;                         where nComment = 0 and&#xA;                         language not in (&#34;C/C++ Header&#34;, &#34;YAML&#34;, &#34;HTML&#34;)&#xA;                         order by nCode desc limit 10;&#39; | sqlite_formatter&#xA;&#xA;Project File                                                                 nCode&#xA;_______ ____________________________________________________________________ _____&#xA;perl    perl-5.22.0/cpan/Unicode-Collate/Collate/Locale/ja.pl                 1938&#xA;python  Python-2.7.10/PCbuild/pythoncore.vcproj                               1889&#xA;python  Python-2.7.10/PC/VS8.0/pythoncore.vcproj                              1889&#xA;mariadb server-10.1/mysql-test/extra/binlog_tests/mysqlbinlog_row_engine.inc  1862&#xA;perl    perl-5.22.0/cpan/Unicode-Collate/Collate/Locale/zh_strk.pl            1589&#xA;perl    perl-5.22.0/cpan/Unicode-Collate/Collate/Locale/zh_zhu.pl             1563&#xA;mariadb server-10.1/storage/mroonga/vendor/groonga/configure.ac               1526&#xA;perl    perl-5.22.0/cpan/Unicode-Collate/Collate/Locale/zh_pin.pl             1505&#xA;mariadb server-10.1/mysql-test/suite/funcs_1/storedproc/storedproc_02.inc     1465&#xA;python  Python-2.7.10/PC/VS8.0/_bsddb.vcproj                                  1463&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;What are the most popular languages (in terms of lines of code) in each project?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;prompt&amp;gt; sqlite3 code.db &#39;select project, language, sum(nCode) as SumCode from t&#xA;                         group by project,language&#xA;                         order by project,SumCode desc;&#39; | sqlite_formatter&#xA;Project    Language                  SumCode&#xA;__________ _________________________ _______&#xA;mariadb    C++                        983026&#xA;mariadb    C                          715018&#xA;mariadb    C/C++ Header               209394&#xA;mariadb    Bourne Shell                61943&#xA;mariadb    Perl                        35562&#xA;mariadb    Pascal                      32541&#xA;mariadb    HTML                        16489&#xA;mariadb    Javascript                  15540&#xA;mariadb    m4                          14215&#xA;mariadb    CMake                       12206&#xA;mariadb    XML                          5210&#xA;mariadb    Ruby                         4998&#xA;mariadb    Puppet                       3848&#xA;mariadb    make                         3631&#xA;mariadb    SQL                          3405&#xA;mariadb    Python                       2545&#xA;mariadb    Bourne Again Shell           1604&#xA;mariadb    Windows Module Definition    1211&#xA;mariadb    lex                           991&#xA;mariadb    yacc                          810&#xA;mariadb    DOS Batch                     700&#xA;mariadb    Prolog                        448&#xA;mariadb    RobotFramework                441&#xA;mariadb    CSS                           393&#xA;mariadb    JSON                          359&#xA;mariadb    dtrace                        306&#xA;mariadb    Windows Resource File         250&#xA;mariadb    Assembly                      237&#xA;mariadb    WiX source                    155&#xA;mariadb    Visual Basic                   88&#xA;mariadb    YAML                           65&#xA;mariadb    PHP                            24&#xA;mariadb    SKILL                          16&#xA;mariadb    sed                            16&#xA;mariadb    Windows Message File            6&#xA;mariadb    D                               4&#xA;mariadb    diff                            4&#xA;perl       Perl                       536445&#xA;perl       C                          155648&#xA;perl       C/C++ Header               147858&#xA;perl       Bourne Shell                42668&#xA;perl       Pascal                       8592&#xA;perl       XML                          2410&#xA;perl       YAML                         2078&#xA;perl       C++                          2033&#xA;perl       make                         1986&#xA;perl       Prolog                       1146&#xA;perl       JSON                         1037&#xA;perl       yacc                          998&#xA;perl       Windows Message File          489&#xA;perl       DOS Batch                     389&#xA;perl       Windows Resource File          85&#xA;perl       D                               8&#xA;perl       Lisp                            4&#xA;postgresql HTML                       785991&#xA;postgresql C                          736519&#xA;postgresql C/C++ Header                57014&#xA;postgresql SQL                         51926&#xA;postgresql yacc                        28491&#xA;postgresql Bourne Shell                17170&#xA;postgresql Perl                         9456&#xA;postgresql lex                          4285&#xA;postgresql make                         4114&#xA;postgresql m4                           1642&#xA;postgresql Windows Module Definition    1152&#xA;postgresql XSLT                          294&#xA;postgresql DOS Batch                      92&#xA;postgresql Assembly                       69&#xA;postgresql CSS                            69&#xA;postgresql D                              66&#xA;postgresql Windows Resource File          62&#xA;postgresql Lisp                           16&#xA;postgresql sed                            15&#xA;postgresql Python                         13&#xA;postgresql Bourne Again Shell             10&#xA;postgresql Windows Message File            5&#xA;python     Python                     434015&#xA;python     C                          375555&#xA;python     C/C++ Header                66942&#xA;python     Bourne Shell                45091&#xA;python     MSBuild script              38910&#xA;python     m4                          15559&#xA;python     Assembly                    12298&#xA;python     make                         2953&#xA;python     HTML                         2344&#xA;python     Windows Module Definition    2081&#xA;python     Objective-C                   635&#xA;python     Expect                        565&#xA;python     DOS Batch                     506&#xA;python     CSS                           328&#xA;python     Javascript                    229&#xA;python     Windows Resource File         207&#xA;python     C++                           128&#xA;python     vim script                    106&#xA;python     diff                          105&#xA;python     XML                            74&#xA;python     NAnt script                    30&#xA;python     Prolog                         24&#xA;python     Visual Basic                   12&#xA;sqlite     C                          101454&#xA;sqlite     C/C++ Header                 1546&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;custom_column_output&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Custom Column Output â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Cloc&#39;s default output is a text table with five columns: language, file count, number of blank lines, number of comment lines and number of code lines. The switches &lt;code&gt;--by-file&lt;/code&gt;, &lt;code&gt;--3&lt;/code&gt;, and &lt;code&gt;--by-percent&lt;/code&gt; generate additional information but sometimes even those are insufficient.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--sql&lt;/code&gt; option described in the previous section offers the ability to create custom output. This section has a pair of examples that show how to create custom columns. The first example includes an extra column, &lt;strong&gt;Total&lt;/strong&gt;, which is the sum of the numbers of blank, comment, and code lines. The second shows how to include the language name when running with &lt;code&gt;--by-file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1: Add a &#34;Totals&#34; column.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first step is to run cloc and save the output to a relational database, SQLite in this case:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;cloc --sql 1 --sql-project x yaml-cpp-yaml-cpp-0.5.3.tar.gz | sqlite3 counts.db&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;(the tar file comes from the &lt;a href=&#34;https://github.com/jbeder/yaml-cpp&#34;&gt;YAML-C++&lt;/a&gt; project).&lt;/p&gt; &#xA;&lt;p&gt;Second, we craft an SQL query that returns the regular cloc output plus an extra column for totals, then save the SQL statement to a file, &lt;code&gt;query_with_totals.sql&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;-- file query_with_totals.sql&#xA;select Language, count(File)   as files                       ,&#xA;                 sum(nBlank)   as blank                       ,&#xA;                 sum(nComment) as comment                     ,&#xA;                 sum(nCode)    as code                        ,&#xA;                 sum(nBlank)+sum(nComment)+sum(nCode) as Total&#xA;    from t group by Language order by code desc;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Third, we run this query through SQLite using the &lt;code&gt;counts.db&lt;/code&gt; database. We&#39;ll include the &lt;code&gt;-header&lt;/code&gt; switch so that SQLite prints the column names:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&amp;gt; cat query_with_totals.sql | sqlite3 -header counts.db&#xA;Language|files|blank|comment|code|Total&#xA;C++|141|12786|17359|60378|90523&#xA;C/C++ Header|110|8566|17420|51502|77488&#xA;Bourne Shell|10|6351|6779|38264|51394&#xA;m4|11|2037|260|17980|20277&#xA;Python|30|1613|2486|4602|8701&#xA;MSBuild script|11|0|0|1711|1711&#xA;CMake|7|155|285|606|1046&#xA;make|5|127|173|464|764&#xA;Markdown|2|30|0|39|69&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The extra column for &lt;strong&gt;Total&lt;/strong&gt; is there but the format is unappealing. Running the output through &lt;code&gt;sqlite_formatter&lt;/code&gt; yields the desired result:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&amp;gt; cat query_with_totals.sql | sqlite3 -header counts.db | sqlite_formatter&#xA;Language       files blank comment code  Total&#xA;______________ _____ _____ _______ _____ _____&#xA;C++              141 12786   17359 60378 90523&#xA;C/C++ Header     110  8566   17420 51502 77488&#xA;Bourne Shell      10  6351    6779 38264 51394&#xA;m4                11  2037     260 17980 20277&#xA;Python            30  1613    2486  4602  8701&#xA;MSBuild script    11     0       0  1711  1711&#xA;CMake              7   155     285   606  1046&#xA;make               5   127     173   464   764&#xA;Markdown           2    30       0    39    69&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The next section, &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#wrapping-cloc-in-other-scripts-&#34;&gt;Wrapping cloc in other scripts&lt;/a&gt;, shows one way these commands can be combined into a new utility program.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2: Include a column for &#34;Language&#34; when running with &lt;code&gt;--by-file&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Output from &lt;code&gt;--by-file&lt;/code&gt; omits each file&#39;s language to save screen real estate; file paths for large projects can be long and including an extra 20 or so characters for a Language column can be excessive.&lt;/p&gt; &#xA;&lt;p&gt;As an example, here are the first few lines of output using the same code base as in Example 1:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&amp;gt; cloc --by-file yaml-cpp-yaml-cpp-0.5.3.tar.gz&#xA;github.com/AlDanial/cloc v 1.81  T=1.14 s (287.9 files/s, 221854.9 lines/s)&#xA;--------------------------------------------------------------------------------------------------------------------------------------------&#xA;File                                                                                                     blank        comment           code&#xA;--------------------------------------------------------------------------------------------------------------------------------------------&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/configure                                                        2580           2264          13691&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/configure                                                  2541           2235          13446&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/fused-src/gtest/gtest.h                                    1972           4681          13408&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/fused-src/gmock/gmock.h                                          1585           3397           9216&#xA;yaml-cpp-yaml-cpp-0.5.3/test/integration/gen_emitter_test.cpp                                              999              0           8760&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/aclocal.m4                                                        987            100           8712&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/m4/libtool.m4                                               760             65           7176&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/build-aux/ltmain.sh                                         959           1533           7169&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/fused-src/gmock-gtest-all.cc                                     1514           3539           6390&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/fused-src/gtest/gtest-all.cc                               1312           2896           5384&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/test/gtest_unittest.cc                                     1226           1091           5098&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/include/gtest/internal/gtest-param-util-generated.h         349            235           4559&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The absence of language identification for each file is a bit disappointing, but this can be remedied with a custom column solution.&lt;/p&gt; &#xA;&lt;p&gt;The first step, creating a database, matches that from Example 1 so we&#39;ll go straight to the second step of creating the desired SQL query. We&#39;ll store this one in the file &lt;code&gt;by_file_with_language.sql&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;-- file by_file_with_language.sql&#xA;select File, Language, nBlank   as blank  ,&#xA;                       nComment as comment,&#xA;                       nCode    as code&#xA;    from t order by code desc;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Our desired extra column appears when we pass this custom SQL query through our database:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&amp;gt; cat by_file_with_language.sql | sqlite3 -header counts.db | sqlite_formatter&#xA;File                                                                                               Language       blank comment code&#xA;__________________________________________________________________________________________________ ______________ _____ _______ _____&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/configure                                                 Bourne Shell    2580    2264 13691&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/configure                                           Bourne Shell    2541    2235 13446&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/fused-src/gtest/gtest.h                             C/C++ Header    1972    4681 13408&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/fused-src/gmock/gmock.h                                   C/C++ Header    1585    3397  9216&#xA;yaml-cpp-yaml-cpp-0.5.3/test/integration/gen_emitter_test.cpp                                      C++              999       0  8760&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/aclocal.m4                                                m4               987     100  8712&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/m4/libtool.m4                                       m4               760      65  7176&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/build-aux/ltmain.sh                                 Bourne Shell     959    1533  7169&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/fused-src/gmock-gtest-all.cc                              C++             1514    3539  6390&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/fused-src/gtest/gtest-all.cc                        C++             1312    2896  5384&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/test/gtest_unittest.cc                              C++             1226    1091  5098&#xA;yaml-cpp-yaml-cpp-0.5.3/test/gmock-1.7.0/gtest/include/gtest/internal/gtest-param-util-generated.h C/C++ Header     349     235  4559&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;wrapping_cloc_in_other_scripts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt; * &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#wrapping-cloc-in-other-scripts-&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Wrapping cloc in other scripts â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;More complex code counting solutions are possible by wrapping cloc in scripts or programs. The &#34;total lines&#34; column from example 1 of &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#custom-column-output-&#34;&gt;Custom Column Output&lt;/a&gt; could be simplified to a single command with this shell script (on Linux):&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;#!/bin/sh&#xA;#&#xA;# These commands must be in the user&#39;s $PATH:&#xA;#   cloc&#xA;#   sqlite3&#xA;#   sqlite_formatter&#xA;#&#xA;if test $# -eq 0 ; then&#xA;    echo &#34;Usage: $0  [cloc arguments]&#34;&#xA;    echo &#34;       Run cloc to count lines of code with an additional&#34;&#xA;    echo &#34;       output column for total lines (code+comment+blank).&#34;&#xA;    exit&#xA;fi&#xA;DBFILE=`tempfile`&#xA;cloc --sql 1 --sql-project x $@ | sqlite3 ${DBFILE}&#xA;SQL=&#34;select Language, count(File)   as files                       ,&#xA;                      sum(nBlank)   as blank                       ,&#xA;                      sum(nComment) as comment                     ,&#xA;                      sum(nCode)    as code                        ,&#xA;                      sum(nBlank)+sum(nComment)+sum(nCode) as Total&#xA;         from t group by Language order by code desc;&#xA;&#34;&#xA;echo ${SQL} | sqlite3 -header ${DBFILE} | sqlite_formatter&#xA;rm ${DBFILE}&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Saving the lines above to &lt;code&gt;total_columns.sh&lt;/code&gt; and making it executable (&lt;code&gt;chmod +x total_columns.sh&lt;/code&gt;) would let us do&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;./total_columns.sh yaml-cpp-yaml-cpp-0.5.3.tar.gz&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;to directly get&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;Language       files blank comment code  Total&#xA;______________ _____ _____ _______ _____ _____&#xA;C++              141 12786   17359 60378 90523&#xA;C/C++ Header     110  8566   17420 51502 77488&#xA;Bourne Shell      10  6351    6779 38264 51394&#xA;m4                11  2037     260 17980 20277&#xA;Python            30  1613    2486  4602  8701&#xA;MSBuild script    11     0       0  1711  1711&#xA;CMake              7   155     285   606  1046&#xA;make               5   127     173   464   764&#xA;Markdown           2    30       0    39    69&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Other examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Count code from a specific branch of a web-hosted git repository and send the results as a .csv email attachment: &lt;a href=&#34;https://github.com/dannyloweatx/checkmarx&#34;&gt;https://github.com/dannyloweatx/checkmarx&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;git_and_UTF8_pathnames&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;git and UTF8 pathnames â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;cloc&#39;s &lt;code&gt;--git&lt;/code&gt; option may fail if you work with directory or file names with UTF-8 characters (for example, see &lt;a href=&#34;https://github.com/AlDanial/cloc/issues/457&#34;&gt;issue 457&lt;/a&gt;). The solution, &lt;a href=&#34;https://stackoverflow.com/questions/22827239/how-to-make-git-properly-display-utf-8-encoded-pathnames-in-the-console-window&#34;&gt;https://stackoverflow.com/questions/22827239/how-to-make-git-properly-display-utf-8-encoded-pathnames-in-the-console-window&lt;/a&gt;, is to apply this git configuration command:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;git config --global core.quotepath off&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Your console&#39;s font will need to be capable of displaying Unicode characters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;scale_factors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Third Generation Language Scale Factors â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;cloc versions before 1.50 by default computed, for the provided inputs, a rough estimate of how many lines of code would be needed to write the same code in a hypothetical third-generation computer language. To produce this output one must now use the &lt;code&gt;--3&lt;/code&gt; switch.&lt;/p&gt; &#xA;&lt;p&gt;Scale factors were derived from the 2006 version of language gearing ratios listed at Mayes Consulting web site, &lt;a href=&#34;http://softwareestimator.com/IndustryData2.htm&#34;&gt;http://softwareestimator.com/IndustryData2.htm&lt;/a&gt;, using this equation:&lt;/p&gt; &#xA;&lt;p&gt;cloc scale factor for language X = 3rd generation default gearing ratio / language X gearing ratio&lt;/p&gt; &#xA;&lt;p&gt;For example, cloc 3rd generation scale factor for DOS Batch = 80 / 128 = 0.625.&lt;/p&gt; &#xA;&lt;p&gt;The biggest flaw with this approach is that gearing ratios are defined for logical lines of source code not physical lines (which cloc counts). The values in cloc&#39;s &#39;scale&#39; and &#39;3rd gen. equiv.&#39; columns should be taken with a large grain of salt.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;options_txt&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;options.txt configuration file â–²&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you find yourself using the same command line switches every time you invoke cloc, you can save some typing by adding those switches to the &lt;code&gt;options.txt&lt;/code&gt; runtime configuration file. cloc will look for this file in the following default locations:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;# Linux, NetBSD, FreeBSD, macOS:&#xA;/home/USERNAME/.config/cloc/options.txt&#xA;&#xA;# Windows&#xA;C:\Users\USERNAME\AppData\cloc\options.txt&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Place each switch and arguments, if any, on a line by itself. Lines prefixed with &lt;code&gt;#&lt;/code&gt; symbol are ignored as comments and blank lines are skipped. Leading hyphens on the switches are optional. Here&#39;s a sample file:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;# options.txt&#xA;--vcs git&#xA;v      # verbose level 1&#xA;exclude-ext svg,html&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The path to the &lt;code&gt;options.txt&lt;/code&gt; file can also be specified with the &lt;code&gt;--config FILE&lt;/code&gt; switch.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if cloc finds an &lt;code&gt;options.txt&lt;/code&gt; file in the same directory as files given by any of these switches (in the listed priority), it will use that configuration file from that location:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;--list-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--exclude-list-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--read-lang-def&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--force-lang-def&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--diff-list-file&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Run with &lt;code&gt;--verbose&lt;/code&gt; to have cloc tell you which, if any, &lt;code&gt;options.txt&lt;/code&gt; file it uses.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;complex_regex_recursion&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Complex regular subexpression recursion limit â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;cloc relies on the Regexp::Common module&#39;s regular expressions to remove comments from source code. If comments are malformed, for example the &lt;code&gt;/*&lt;/code&gt; start comment marker appears in a C program without a corresponding &lt;code&gt;*/&lt;/code&gt; marker, the regular expression engine could enter a recursive loop, eventually triggering the warning &lt;code&gt;Complex regular subexpression recursion limit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The most common cause for this warning is the existence of comment markers in string literals. While language compilers and interpreters are smart enough to recognize that &lt;code&gt;&#34;/*&#34;&lt;/code&gt; (for example) is a string and not a comment, cloc is fooled. File path globs, as in this line of JavaScript&lt;/p&gt; &#xA;&lt;pre&gt;var paths = globArray(&#34;**/*.js&#34;, {cwd: srcPath});&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;are frequent culprits.&lt;/p&gt; &#xA;&lt;p&gt;In an attempt to overcome this problem, a different algorithm which removes comment markers in strings can be enabled with the &lt;code&gt;--strip-str-comments&lt;/code&gt; switch. Doing so, however, has drawbacks: cloc will run more slowly and the output of &lt;code&gt;--strip-comments&lt;/code&gt; will contain strings that no longer match the input source.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;Limitations&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Limitations â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Identifying comments within source code is trickier than one might expect. Many languages would need a complete parser to be counted correctly. cloc does not attempt to parse any of the languages it aims to count and therefore is an imperfect tool. The following are known problems:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; Lines containing both source code and comments are counted as lines of code. &lt;/li&gt; &#xA; &lt;li&gt; Comment markers within strings or &lt;a href=&#34;http://www.faqs.org/docs/abs/HTML/here-docs.html&#34;&gt;here-documents&lt;/a&gt; are treated as actual comment markers and not string literals. For example the following lines of C code &lt;pre&gt;printf(&#34; /* &#34;);&#xA;for (i = 0; i &amp;lt; 100; i++) {&#xA;    a += i;&#xA;}&#xA;printf(&#34; */ &#34;);&#xA;&lt;/pre&gt; look to cloc like this: &lt;pre&gt;printf(&#34; xxxxxxx&#xA;xxxxxxx&#xA;xxxxxxx&#xA;xxxxxxx&#xA;xxxxxxx     &#34;);&#xA;&lt;/pre&gt; where &lt;tt&gt;xxxxxxx&lt;/tt&gt; represents cloc&#39;s view of commented text. Therefore cloc counts the five lines as two lines of C code and three lines of comments (lines with both code and comment are counted as code). &lt;p&gt;If you suspect your code has such strings, use the switch &lt;code&gt;--strip-str-comments&lt;/code&gt; to switch to the algorithm which removes embedded comment markers. Its use will render the five lines above as&lt;/p&gt; &lt;pre&gt;printf(&#34;  &#34;);&#xA;for (i = 0; i &amp;lt; 100; i++) {&#xA;    a += i;&#xA;}&#xA;printf(&#34;  &#34;);&#xA;&lt;/pre&gt; &lt;p&gt;and therefore return a count of five lines of code. See the &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#complex-regular-subexpression-recursion-limit-&#34;&gt;previous section&lt;/a&gt; on drawbacks to using &lt;code&gt;--strip-str-comments&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; Embedded languages are not recognized. For example, an HTML file containing JavaScript will be counted entirely as HTML. &lt;/li&gt; &#xA; &lt;li&gt; Python docstrings can serve several purposes. They may contain documentation, comment out blocks of code, or they can be regular strings (when they appear on the right hand side of an assignment or as a function argument). cloc is unable to infer the meaning of docstrings by context; by default cloc treats all docstrings as comments. The switch &lt;tt&gt;--docstring-as-code&lt;/tt&gt; treats all docstrings as code. &lt;/li&gt; &#xA; &lt;li&gt; Language definition files read with &lt;tt&gt;--read-lang-def&lt;/tt&gt; or &lt;tt&gt;--force-lang-def&lt;/tt&gt; must be plain ASCII text files. &lt;/li&gt; &#xA; &lt;li&gt; cloc treats compiler pragma&#39;s, for example &lt;tt&gt;#if&lt;/tt&gt; / &lt;tt&gt;#endif&lt;/tt&gt;, as code even if these are used to block lines of source from being compiled; the blocked lines still contribute to the code count. &lt;/li&gt; &#xA; &lt;li&gt; On Windows, cloc will fail with &lt;tt&gt;Can&#39;t cd to ... No such file or directory at &#xA;   &lt;embedded&gt;&#xA;    /File/Find.pm&#xA;   &lt;/embedded&gt;&lt;/tt&gt; if the code being scanned has file paths longer than 255 characters. A work-around is to run cloc from the Windows Subsystem for Linux (WSL). &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;AdditionalLanguages&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Requesting Support for Additional Languages â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;If cloc does not recognize a language you are interested in counting, create a &lt;a href=&#34;https://github.com/AlDanial/cloc/issues&#34;&gt;GitHub issue&lt;/a&gt; requesting support for your language. Include this information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; File extensions associated with the language. If the language does not rely on file extensions and instead works with fixed file names or with `#!` style program invocations, explain what those are.&lt;/li&gt; &#xA; &lt;li&gt; A description of how comments are defined.&lt;/li&gt; &#xA; &lt;li&gt; Links to sample code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;reporting_problems&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Reporting Problems â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;If you encounter a problem with cloc, first check to see if you&#39;re running with the latest version of the tool:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;  cloc --version&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;If the version is older than the most recent release at &lt;a href=&#34;https://github.com/AlDanial/cloc/releases&#34;&gt;https://github.com/AlDanial/cloc/releases&lt;/a&gt;, download the latest version and see if it solves your problem.&lt;/p&gt; &#xA;&lt;p&gt;If the problem happens with the latest release, submit a new issue at &lt;a href=&#34;https://github.com/AlDanial/cloc/issues&#34;&gt;https://github.com/AlDanial/cloc/issues&lt;/a&gt; &lt;em&gt;only&lt;/em&gt; if you can supply enough information for anyone reading the issue report to reproduce the problem. That means providing&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; the operating system you&#39;re running on&lt;/li&gt; &#xA; &lt;li&gt; the cloc command with all options&lt;/li&gt; &#xA; &lt;li&gt; the code you are counting (URL to a public git repo or zip file or tar file, et cetera)&lt;/li&gt; &#xA;&lt;/ol&gt; The last item is generally problematic. If the code base is proprietary or amounts to more than a few dozen kilobytes, you&#39;ll need to try to reconstruct similar inputs or demonstrate the problem with an existing public code base. &#xA;&lt;p&gt;Problem reports that cannot be reproduced will be ignored and eventually closed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;citation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Citation â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Please use the following bibtex entry to cite cloc in a publication:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;@software{adanial_cloc,&#xA;  author       = {Albert Danial},&#xA;  title        = {cloc: v1.92},&#xA;  month        = dec,&#xA;  year         = 2021,&#xA;  publisher    = {Zenodo},&#xA;  version      = {v1.92},&#xA;  doi          = {10.5281/zenodo.5760077},&#xA;  url          = {https://doi.org/10.5281/zenodo.5760077}&#xA;}&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;(Update the version number and corresponding year if this entry is outdated.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;Acknowledgments&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Acknowledgments â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wolframroesler&#34;&gt;Wolfram RÃ¶sler&lt;/a&gt; provided most of the code examples in the test suite. These examples come from his &lt;a href=&#34;http://helloworldcollection.de/&#34;&gt;Hello World collection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ismet Kursunoglu found errors with the MUMPS counter and provided access to a computer with a large body of MUMPS code to test cloc.&lt;/p&gt; &#xA;&lt;p&gt;Tod Huggins gave helpful suggestions for the Visual Basic filters.&lt;/p&gt; &#xA;&lt;p&gt;Anton Demichev found a flaw with the JSP counter in cloc v0.76 and wrote the XML output generator for the &lt;code&gt;--xml&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;Reuben Thomas pointed out that ISO C99 allows &lt;code&gt;//&lt;/code&gt; as a comment marker, provided code for the &lt;code&gt;--no3&lt;/code&gt; and &lt;code&gt;--stdin-name&lt;/code&gt; options, counting the m4 language, and suggested several user-interface enhancements.&lt;/p&gt; &#xA;&lt;p&gt;Michael Bello provided code for the &lt;code&gt;--opt-match-f&lt;/code&gt;, &lt;code&gt;--opt-not-match-f&lt;/code&gt;, &lt;code&gt;--opt-match-d&lt;/code&gt;, and &lt;code&gt;--opt-not-match-d&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;p&gt;Mahboob Hussain inspired the &lt;code&gt;--original-dir&lt;/code&gt; and &lt;code&gt;--skip-uniqueness&lt;/code&gt; options, found a bug in the duplicate file detection logic and improved the JSP filter.&lt;/p&gt; &#xA;&lt;p&gt;Randy Sharo found and fixed an uninitialized variable bug for shell scripts having only one line.&lt;/p&gt; &#xA;&lt;p&gt;Steven Baker found and fixed a problem with the YAML output generator.&lt;/p&gt; &#xA;&lt;p&gt;Greg Toth provided code to improve blank line detection in COBOL.&lt;/p&gt; &#xA;&lt;p&gt;Joel Oliveira provided code to let &lt;code&gt;--exclude-list-file&lt;/code&gt; handle directory name exclusion.&lt;/p&gt; &#xA;&lt;p&gt;Blazej Kroll provided code to produce an XSLT file, &lt;code&gt;cloc-diff.xsl&lt;/code&gt;, when producing XML output for the &lt;code&gt;--diff&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;Denis Silakov enhanced the code which generates &lt;code&gt;cloc.xsl&lt;/code&gt; when using &lt;code&gt;--by-file&lt;/code&gt; and &lt;code&gt;--by-file-by-lang&lt;/code&gt; options, and provided an XSL file that works with &lt;code&gt;--diff&lt;/code&gt; output.&lt;/p&gt; &#xA;&lt;p&gt;Andy (&lt;a href=&#34;mailto:awalshe@sf.net&#34;&gt;awalshe@sf.net&lt;/a&gt;) provided code to fix several bugs: correct output of &lt;code&gt;--counted&lt;/code&gt; so that only files that are used in the code count appear and that results are shown by language rather than file name; allow &lt;code&gt;--diff&lt;/code&gt; output from multiple runs to be summed together with &lt;code&gt;--sum-reports&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Jari Aalto created the initial version of &lt;code&gt;cloc.1.pod&lt;/code&gt; and maintains the Debian package for cloc.&lt;/p&gt; &#xA;&lt;p&gt;Mikkel Christiansen (&lt;a href=&#34;mailto:mikkels@gmail.com&#34;&gt;mikkels@gmail.com&lt;/a&gt;) provided counter definitions for Clojure and ClojureScript.&lt;/p&gt; &#xA;&lt;p&gt;Vera Djuraskovic from &lt;a href=&#34;http://webhostinggeeks.com/&#34;&gt;Webhostinggeeks.com&lt;/a&gt; provided the &lt;a href=&#34;http://science.webhostinggeeks.com/cloc&#34;&gt;Serbo-Croatian&lt;/a&gt; translation.&lt;/p&gt; &#xA;&lt;p&gt;Gill Ajoft of &lt;a href=&#34;http://www.ajoft.com&#34;&gt;Ajoft Softwares&lt;/a&gt; provided the &lt;a href=&#34;http://www.ajoft.com/wpaper/aj-cloc.html&#34;&gt;Bulgarian&lt;/a&gt; translation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://newknowledgez.com/&#34;&gt;Knowledge Team&lt;/a&gt; provided the &lt;a href=&#34;http://newknowledgez.com/cloc.html&#34;&gt;Slovakian&lt;/a&gt; translation.&lt;/p&gt; &#xA;&lt;p&gt;Erik Gooven Arellano Casillas provided an update to the MXML counter to recognize ActionScript comments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://g14n.info&#34;&gt;Gianluca Casati&lt;/a&gt; created the &lt;a href=&#34;https://metacpan.org/pod/App::cloc&#34;&gt;cloc CPAN package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- broken link&#xA;Mary Stefanova provided the&#xA;[Polish](http://www.trevister.com/blog/cloc.html)&#xA;translation. ---&gt; &#xA;&lt;p&gt;Ryan Lindeman implemented the &lt;code&gt;--by-percent&lt;/code&gt; feature.&lt;/p&gt; &#xA;&lt;p&gt;Kent C. Dodds, &lt;a href=&#34;https://twitter.com/kentcdodd&#34;&gt;@kentcdodds&lt;/a&gt;, created and maintains the npm package of cloc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://kudoybook.com&#34;&gt;Viktoria Parnak&lt;/a&gt; provided the &lt;a href=&#34;http://blog.kudoybook.com/cloc/&#34;&gt;Ukrainian&lt;/a&gt; translation.&lt;/p&gt; &#xA;&lt;p&gt;Natalie Harmann provided the &lt;a href=&#34;http://www.besteonderdelen.nl/blog/?p=5426&#34;&gt;Belarussian&lt;/a&gt; translation.&lt;/p&gt; &#xA;&lt;p&gt;Nithyal at &lt;a href=&#34;http://healthcareadministrationdegree.co/&#34;&gt;Healthcare Administration Portal&lt;/a&gt; provided the &lt;a href=&#34;http://healthcareadministrationdegree.co/socialwork/aldanial-cloc/&#34;&gt;Tamil&lt;/a&gt; translation.&lt;/p&gt; &#xA;&lt;p&gt;Patricia Motosan provided the &lt;a href=&#34;http://www.bildelestore.dk/blog/cloc-contele-de-linii-de-cod/&#34;&gt;Romanian&lt;/a&gt; translation.&lt;/p&gt; &#xA;&lt;!-- broken link&#xA;The [Garcinia Cambogia Review Team](http://www.garciniacambogiareviews.ca/)&#xA;provided the&#xA;[Arabic translation](http://www.garciniacambogiareviews.ca/translations/aldanial-cloc/). ---&gt; &#xA;&lt;p&gt;Gajk Melikyan provided the provided the &lt;a href=&#34;http://students.studybay.com/?p=34&#34;&gt;Armenian translation&lt;/a&gt; for &lt;a href=&#34;http://studybay.com&#34;&gt;http://studybay.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.forallworld.com/cloc-grof-sornyi-kodot/&#34;&gt;Hungarian translation&lt;/a&gt; courtesy of &lt;a href=&#34;http://www.forallworld.com/&#34;&gt;Zsolt Boros&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stsnel&#34;&gt;Sietse Snel&lt;/a&gt; implemented the parallel processing capability available with the &lt;tt&gt;--processes=&lt;i&gt;N&lt;/i&gt;&lt;/tt&gt; switch.&lt;/p&gt; &#xA;&lt;p&gt;The development of cloc was partially funded by the Northrop Grumman Corporation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt; &lt;a name=&#34;Copyright&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/%7B%7B%7B1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/#___top&#34; title=&#34;click to go to top of document&#34;&gt;Copyright â–²&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2006-2018, &lt;a href=&#34;https://github.com/AlDanial&#34;&gt;Al Danial&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlDanial/cloc/master/1%7D%7D%7D&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qt/qtrepotools</title>
    <updated>2022-08-01T02:49:56Z</updated>
    <id>tag:github.com,2022-08-01:/qt/qtrepotools</id>
    <link href="https://github.com/qt/qtrepotools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Qt Repository Tools - git commands and hooks, etc.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>