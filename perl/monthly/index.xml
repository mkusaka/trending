<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-01T02:09:13Z</updated>
  <subtitle>Monthly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>trinityrnaseq/trinityrnaseq</title>
    <updated>2024-03-01T02:09:13Z</updated>
    <id>tag:github.com,2024-03-01:/trinityrnaseq/trinityrnaseq</id>
    <link href="https://github.com/trinityrnaseq/trinityrnaseq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Trinity RNA-Seq de novo transcriptome assembly&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;trinityrnaseq&lt;/h1&gt; &#xA;&lt;p&gt;Trinity RNA-Seq de novo transcriptome assembly see the Trinity &lt;a href=&#34;https://github.com/trinityrnaseq/trinityrnaseq/wiki&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to contribute to Trinity! Please check out the &lt;a href=&#34;https://github.com/trinityrnaseq/trinityrnaseq/wiki/Contributing&#34;&gt;Contributing&lt;/a&gt; for the guidelines.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Logitech/slimserver</title>
    <updated>2024-03-01T02:09:13Z</updated>
    <id>tag:github.com,2024-03-01:/Logitech/slimserver</id>
    <link href="https://github.com/Logitech/slimserver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Server for Logitech Squeezebox players. This server is also called Logitech Media Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Logitech Media Server&lt;/h1&gt; &#xA;&lt;p&gt;Logitech Media Server (aka. LMS, fka. SlimServer, SqueezeCenter, SqueezeboxServer, SliMP3) is the server software that powers audio players from &lt;a href=&#34;https://www.logi.com&#34;&gt;Logitech&lt;/a&gt; (formerly known as SlimDevices), including &lt;a href=&#34;http://wiki.slimdevices.com/index.php/Squeezebox_Family_Overview&#34;&gt;Squeezebox 3rd Generation, Squeezebox Boom, Squeezebox Receiver, Transporter, Squeezebox2, Squeezebox and SLIMP3&lt;/a&gt;, and many software emulators like &lt;a href=&#34;https://sourceforge.net/projects/lmsclients/files/&#34;&gt;Squeezelite and SqueezePlay&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the help of many plugins, Logitech Media Server can stream not only your local music collection, but content from many music services and internet radio stations to your players.&lt;/p&gt; &#xA;&lt;p&gt;Logitech Media Server is written in Perl. It runs on pretty much any platform that Perl runs on, including Linux, Mac OSX, Solaris and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy the music on your Squeezebox!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yaml/yaml-test-suite</title>
    <updated>2024-03-01T02:09:13Z</updated>
    <id>tag:github.com,2024-03-01:/yaml/yaml-test-suite</id>
    <link href="https://github.com/yaml/yaml-test-suite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Comprehensive, language independent Test Suite for YAML&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YAML Test Suite&lt;/h1&gt; &#xA;&lt;p&gt;Comprehensive Test Suite for YAML&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains data for testing the correctness of YAML processors.&lt;/p&gt; &#xA;&lt;p&gt;The types of data include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Metadata about the test &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Name (short phrase)&lt;/li&gt; &#xA;   &lt;li&gt;Tags&lt;/li&gt; &#xA;   &lt;li&gt;Description&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Input YAML&lt;/li&gt; &#xA; &lt;li&gt;Canonical output YAML&lt;/li&gt; &#xA; &lt;li&gt;Matching JSON&lt;/li&gt; &#xA; &lt;li&gt;Token stream notation&lt;/li&gt; &#xA; &lt;li&gt;Event stream notation&lt;/li&gt; &#xA; &lt;li&gt;Error data&lt;/li&gt; &#xA; &lt;li&gt;etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get a quick overview of the tests you can have a look at the &lt;a href=&#34;http://matrix.yaml.info/&#34;&gt;YAML Test Matrix&lt;/a&gt;, made from &lt;a href=&#34;https://github.com/perlpunk/yaml-test-matrix&#34;&gt;https://github.com/perlpunk/yaml-test-matrix&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also view the latest test results from 15 different parsers in &lt;a href=&#34;https://tinyurl.com/2p97ah8a&#34;&gt;this Google sheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The tests are available in 2 forms. Files in the &lt;code&gt;src&lt;/code&gt; directory encode all the data for YAML using YAML. The data from these tests is also available in a form where each test has its own directory.&lt;/p&gt; &#xA;&lt;p&gt;For that, use the latest data release under &lt;a href=&#34;https://github.com/yaml/yaml-test-suite/releases&#34;&gt;https://github.com/yaml/yaml-test-suite/releases&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/yaml/yaml-test-suite -b data-YYYY-MM-DD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are tests which have multiple similar subtests. Those subtests are in their own numeric directories under the parent id, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;VJP3/&#xA;VJP3/00&#xA;VJP3/00/===&#xA;VJP3/00/error&#xA;VJP3/00/in.yaml&#xA;VJP3/00/test.event&#xA;VJP3/01&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The releases are made from the &lt;code&gt;data&lt;/code&gt; branch, which is made from the data in the YAML in the &lt;code&gt;main&lt;/code&gt; branch. You shouldn&#39;t use the data branch directly as the branch contains unreleased commits which might be wrong, and it is squashed and force pushed from time to time.&lt;/p&gt; &#xA;&lt;h3&gt;Special Characters&lt;/h3&gt; &#xA;&lt;p&gt;The YAML files use a number of non-ascii unicode characters to indicate the presence of certain characters that would be otherwise hard to read.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;␣&lt;/code&gt; is used for trailing space characters&lt;/li&gt; &#xA; &lt;li&gt;Hard tabs are reresented by one of: (expanding to 4 spaces) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;———»&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;——»&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;—»&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;»&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;↵&lt;/code&gt; us used to show trailing newline characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;∎&lt;/code&gt; is used at the end when there is no final newline character&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;←&lt;/code&gt; indicates a carriage return character&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;⇔&lt;/code&gt; indicates a byte order mark (BOM) character&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also these are used in test event output:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;SPC&amp;gt;&lt;/code&gt; for a space character&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; for a tab character&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The &lt;code&gt;data&lt;/code&gt; branch files&lt;/h2&gt; &#xA;&lt;p&gt;The YAML test files in the &lt;code&gt;src/&lt;/code&gt; dir are turned into data files in the &lt;code&gt;data&lt;/code&gt; branch. The &lt;code&gt;make data-update&lt;/code&gt; command generates the &lt;code&gt;data&lt;/code&gt; branch files under the &lt;code&gt;./data/&lt;/code&gt; directory. For instance, a file &lt;code&gt;src/AB3D.yaml&lt;/code&gt; will generate a &lt;code&gt;data/AB3D/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;A YAML test file can have 1 or more tests. Originally each file had one test, and all the data files were under &lt;code&gt;data/AB3D/&lt;/code&gt;. If a YAML test file has more than one test, subdirectories are created: &lt;code&gt;data/AB3D/00/&lt;/code&gt;, &lt;code&gt;data/AB3D/01/&lt;/code&gt;, &lt;code&gt;data/AB3D/02/&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;The test files are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;===&lt;/code&gt; -- The name/label of the test&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;in.yaml&lt;/code&gt; -- The YAML input to be parsed or loaded&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test.event&lt;/code&gt; -- The event DSL produced by the parser test program&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;in.json&lt;/code&gt; -- The JSON value that shoiuld load the same as &lt;code&gt;in.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;out.yaml&lt;/code&gt; -- The most normal output a dumper would produce&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;error&lt;/code&gt; -- This file indicates the YAML should fail to parse&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;emit.yaml&lt;/code&gt; -- Output an emitter would produce&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Makefile Targets&lt;/h2&gt; &#xA;&lt;p&gt;The Makefile has a number of targets for automating the process of adding new tests and also preprocessing them into the &lt;code&gt;data&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;make data&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Create a &lt;code&gt;data&lt;/code&gt; worktree subdirectory with all the tests as data files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;make data-update&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Update the &lt;code&gt;data&lt;/code&gt; branch directory with the latest info in the &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;make export&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Creates an &lt;code&gt;export.tsv&lt;/code&gt; file with all the data from the &lt;code&gt;src&lt;/code&gt; test files. This tsv data can be copied into a google spreadsheet. The &lt;a href=&#34;https://play.yaml.io/main/parser&#34;&gt;YAML parser playground&lt;/a&gt; has a button to copy a test to the same tsv form.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;make import&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Make a directory called &lt;code&gt;new&lt;/code&gt; from a file named &lt;code&gt;import.tsv&lt;/code&gt;. The &lt;code&gt;import.tsv&lt;/code&gt; file should have data copied from a google spreadsheet.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;make add-new&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Copy the new tests under &lt;code&gt;new/&lt;/code&gt; into &lt;code&gt;src/&lt;/code&gt; to make a PR for new tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;make testml&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Generate &lt;code&gt;.tml&lt;/code&gt; files under a &lt;code&gt;testml/&lt;/code&gt; directory for all the suite tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Remove generated files and directories.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Libaries using this test suite&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yaml/libyaml&#34;&gt;libyaml&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/pantoniou/libfyaml&#34;&gt;libfyaml&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;C++ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/biojppm/rapidyaml&#34;&gt;rapidyaml&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;C# &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/aaubry/YamlDotNet&#34;&gt;YamlDotNet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;D &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dlang-community/D-YAML&#34;&gt;dyaml&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Delphi &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/neslib/Neslib.Yaml&#34;&gt;Neslib.Yaml&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Haskell &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/haskell-hvr/HsYAML&#34;&gt;HsYAML&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Java &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asomov/snakeyaml-engine&#34;&gt;SnakeYAML Engine&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Javascript &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/eemeli/yaml&#34;&gt;yaml&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Nim &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/flyx/NimYAML&#34;&gt;NimYAML&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Perl 5 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/perlpunk/YAML-PP-p5&#34;&gt;YAML::PP&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Scala &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/VirtusLab/scala-yaml&#34;&gt;Scala-Yaml&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your library is using the test suite, drop us a line and we can add it here. It would also be nice if you could add a link back to this test suite.&lt;/p&gt;</summary>
  </entry>
</feed>