<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T02:49:01Z</updated>
  <subtitle>Monthly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sullo/nikto</title>
    <updated>2022-07-01T02:49:01Z</updated>
    <id>tag:github.com,2022-07-01:/sullo/nikto</id>
    <link href="https://github.com/sullo/nikto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nikto web server scanner&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nikto&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sullo&#34;&gt;&lt;img src=&#34;https://cirt.net/images/patreon.png&#34; alt=&#34;alt text&#34; title=&#34;Become a patron of Nikto!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nikto web server scanner - &lt;a href=&#34;https://cirt.net/Nikto2&#34;&gt;https://cirt.net/Nikto2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Full documentation - &lt;a href=&#34;https://github.com/sullo/nikto/wiki&#34;&gt;https://github.com/sullo/nikto/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run normally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/sullo/nikto&#xA;# Main script is in program/&#xA;cd nikto/program&#xA;# Run using the shebang interpreter&#xA;./nikto.pl -h http://www.example.com&#xA;# Run using perl (if you forget to chmod)&#xA;perl nikto.pl -h http://www.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run as a Docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sullo/nikto.git&#xA;cd nikto&#xA;docker build -t sullo/nikto .&#xA;# Call it without arguments to display the full help&#xA;docker run --rm sullo/nikto&#xA;# Basic usage&#xA;docker run --rm sullo/nikto -h http://www.example.com&#xA;# To save the report in a specific format, mount /tmp as a volume:&#xA;docker run --rm -v $(pwd):/tmp sullo/nikto -h http://www.example.com -o /tmp/out.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basic usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   Options:&#xA;       -ask+               Whether to ask about submitting updates&#xA;                               yes   Ask about each (default)&#xA;                               no    Don&#39;t ask, don&#39;t send&#xA;                               auto  Don&#39;t ask, just send&#xA;       -Cgidirs+           Scan these CGI dirs: &#34;none&#34;, &#34;all&#34;, or values like &#34;/cgi/ /cgi-a/&#34;&#xA;       -config+            Use this config file&#xA;       -Display+           Turn on/off display outputs:&#xA;                               1     Show redirects&#xA;                               2     Show cookies received&#xA;                               3     Show all 200/OK responses&#xA;                               4     Show URLs which require authentication&#xA;                               D     Debug output&#xA;                               E     Display all HTTP errors&#xA;                               P     Print progress to STDOUT&#xA;                               S     Scrub output of IPs and hostnames&#xA;                               V     Verbose output&#xA;       -dbcheck           Check database and other key files for syntax errors&#xA;       -evasion+          Encoding technique:&#xA;                               1     Random URI encoding (non-UTF8)&#xA;                               2     Directory self-reference (/./)&#xA;                               3     Premature URL ending&#xA;                               4     Prepend long random string&#xA;                               5     Fake parameter&#xA;                               6     TAB as request spacer&#xA;                               7     Change the case of the URL&#xA;                               8     Use Windows directory separator (\)&#xA;                               A     Use a carriage return (0x0d) as a request spacer&#xA;                               B     Use binary value 0x0b as a request spacer&#xA;        -Format+           Save file (-o) format:&#xA;                               csv   Comma-separated-value&#xA;                               htm   HTML Format&#xA;                               msf+  Log to Metasploit&#xA;                               nbe   Nessus NBE format&#xA;                               txt   Plain text&#xA;                               xml   XML Format&#xA;                               (if not specified the format will be taken from the file extension passed to -output)&#xA;       -Help              Extended help information&#xA;       -host+             Target host&#xA;       -IgnoreCode        Ignore Codes--treat as negative responses&#xA;       -id+               Host authentication to use, format is id:pass or id:pass:realm&#xA;       -key+              Client certificate key file&#xA;       -list-plugins      List all available plugins, perform no testing&#xA;       -maxtime+          Maximum testing time per host&#xA;       -mutate+           Guess additional file names:&#xA;                               1     Test all files with all root directories&#xA;                               2     Guess for password file names&#xA;                               3     Enumerate user names via Apache (/~user type requests)&#xA;                               4     Enumerate user names via cgiwrap (/cgi-bin/cgiwrap/~user type requests)&#xA;                               5     Attempt to brute force sub-domain names, assume that the host name is the parent domain&#xA;                               6     Attempt to guess directory names from the supplied dictionary file&#xA;       -mutate-options    Provide information for mutates&#xA;       -nointeractive     Disables interactive features&#xA;       -nolookup          Disables DNS lookups&#xA;       -nossl             Disables the use of SSL&#xA;       -no404             Disables nikto attempting to guess a 404 page&#xA;       -output+           Write output to this file (&#39;.&#39; for auto-name)&#xA;       -Pause+            Pause between tests (seconds, integer or float)&#xA;       -Plugins+          List of plugins to run (default: ALL)&#xA;       -port+             Port to use (default 80)&#xA;       -RSAcert+          Client certificate file&#xA;       -root+             Prepend root value to all requests, format is /directory&#xA;       -Save              Save positive responses to this directory (&#39;.&#39; for auto-name)&#xA;       -ssl               Force ssl mode on port&#xA;       -Tuning+           Scan tuning:&#xA;                               1     Interesting File / Seen in logs&#xA;                               2     Misconfiguration / Default File&#xA;                               3     Information Disclosure&#xA;                               4     Injection (XSS/Script/HTML)&#xA;                               5     Remote File Retrieval - Inside Web Root&#xA;                               6     Denial of Service&#xA;                               7     Remote File Retrieval - Server Wide&#xA;                               8     Command Execution / Remote Shell&#xA;                               9     SQL Injection&#xA;                               0     File Upload&#xA;                               a     Authentication Bypass&#xA;                               b     Software Identification&#xA;                               c     Remote Source Inclusion&#xA;                               x     Reverse Tuning Options (i.e., include all except specified)&#xA;       -timeout+          Timeout for requests (default 10 seconds)&#xA;       -Userdbs           Load only user databases, not the standard databases&#xA;                               all   Disable standard dbs and load only user dbs&#xA;                               tests Disable only db_tests and load udb_tests&#xA;       -until             Run until the specified time or duration&#xA;       -update            Update databases and plugins from CIRT.net&#xA;       -useproxy          Use the proxy defined in nikto.conf&#xA;       -Version           Print plugin and database versions&#xA;       -vhost+            Virtual host (for Host header)&#xA;              + requires a value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (C) 2001 Chris Sullo&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; version 2 of the License only.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program; if not, write to Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>major/MySQLTuner-perl</title>
    <updated>2022-07-01T02:49:01Z</updated>
    <id>tag:github.com,2022-07-01:/major/MySQLTuner-perl</id>
    <link href="https://github.com/major/MySQLTuner-perl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MySQLTuner is a script written in Perl that will assist you with your MySQL configuration and make recommendations for increased performance and stability.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/major/MySQLTuner-perl/raw/master/mtlogo.png&#34; alt=&#34;MySQLTuner-perl&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/major/MySQLTuner-perl&#34;&gt;&lt;img src=&#34;https://travis-ci.org/major/MySQLTuner-perl.svg?branch=master&#34; alt=&#34;Build Status - Master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.box.com/badges&#34;&gt;&lt;img src=&#34;http://opensource.box.com/badges/active.svg?sanitize=true&#34; alt=&#34;Project Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.box.com/badges&#34;&gt;&lt;img src=&#34;http://opensource.box.com/badges/maintenance.svg?sanitize=true&#34; alt=&#34;Project Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/major/MySQLTuner-perl&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/major/MySQLTuner-perl.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/major/MySQLTuner-perl&#34; title=&#34;Percentage of issues still open&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/open/major/MySQLTuner-perl.svg?sanitize=true&#34; alt=&#34;Percentage of open issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/GPL-3.0/&#34;&gt;&lt;img src=&#34;https://badges.frapsoft.com/os/gpl/gpl.png?v=103&#34; alt=&#34;GPL License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; is a script written in Perl that allows you to review a MySQL installation quickly and make adjustments to increase performance and stability. The current configuration variables and status data is retrieved and presented in a brief format along with some basic performance suggestions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; supports ~300 indicators for MySQL/MariaDB/Percona Server in this last version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; is maintained and indicator collect is increasing week after week supporting a lot of configuration such as &lt;a href=&#34;http://galeracluster.com/&#34;&gt;Galera Cluster&lt;/a&gt;, &lt;a href=&#34;https://www.percona.com/software/mysql-database/percona-tokudb&#34;&gt;TokuDB&lt;/a&gt;, &lt;a href=&#34;https://github.com/mysql/mysql-sys&#34;&gt;Performance schema&lt;/a&gt;, Linux OS metrics, &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html&#34;&gt;InnoDB&lt;/a&gt;, &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.7/en/myisam-storage-engine.html&#34;&gt;MyISAM&lt;/a&gt;, &lt;a href=&#34;https://mariadb.com/kb/en/mariadb/aria/&#34;&gt;Aria&lt;/a&gt;, ...&lt;/p&gt; &#xA;&lt;p&gt;You can find more details on these indicators here: &lt;a href=&#34;https://github.com/major/MySQLTuner-perl/raw/master/INTERNALS.md&#34;&gt;Indicators description&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/major/MySQLTuner-perl/raw/master/mysqltuner.png&#34; alt=&#34;MysqlTuner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MySQLTuner needs you:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; needs contributors for documentation, code and feedback..&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please join us on issue track at &lt;a href=&#34;https://github.com/major/MySQLTuner-perl/issues&#34;&gt;GitHub tracker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Contribution guide is available following &lt;a href=&#34;https://github.com/major/MySQLTuner-perl/raw/master/CONTRIBUTING.md&#34;&gt;MySQLTuner contributing guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Star &lt;strong&gt;MySQLTuner project&lt;/strong&gt; at &lt;a href=&#34;https://github.com/major/MySQLTuner-perl&#34;&gt;MySQLTuner Git Hub Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paid support for Releem available here: &lt;a href=&#34;https://releem.com/&#34;&gt;Releem App&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starcharts.herokuapp.com/major/MySQLTuner-perl&#34;&gt;&lt;img src=&#34;https://starcharts.herokuapp.com/major/MySQLTuner-perl.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;Test result are available here: &lt;a href=&#34;https://travis-ci.org/major/MySQLTuner-perl&#34;&gt;Travis CI/MySQLTuner-perl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;MySQL 8.0 (partial support, password checks don&#39;t work)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Percona Server 8.0 (partial support, password checks don&#39;t work)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MySQL 5.7 (full support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Percona Server 5.7 (full support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MariaDB 10.6 (full support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MariaDB 10.5 (full support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MariaDB 10.4 (full support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MariaDB 10.3 (full support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Galera replication (full support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Percona XtraDB cluster (full support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mysql Replications (partial support, no test environment)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MySQL 5.6 (no support, deprecated version)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Percona Server 5.6 (no support, deprecated version)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MySQL 5.5 (no support, deprecated version)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MariaDB 5.5 (no support, deprecated version)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MariaDB 10.2 (no support, deprecated version)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MariaDB 10.1 (no support, deprecated version)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MariaDB 10.0 (no support, deprecated version)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MySQL 3.23, 4.0, 4.1, 5.0, 5.1 (no support - deprecated version)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Windows Support is partial ***&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows is now supported at this time&lt;/li&gt; &#xA; &lt;li&gt;Successfully run MySQLtuner across WSL2 (Windows Subsystem Linux )&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/&#34;&gt;https://docs.microsoft.com/en-us/windows/wsl/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** UNSUPPORTED ENVIRONMENTS - NEED HELP FOR THAT :) ***&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cloud based is not supported at this time (Help wanted !!!!! GCP, AWS, Azure support asked)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Unsupported storage engines: PRs welcome ***&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;NDB is not supported feel free to Pull Request code :)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MyISAM is to old is no longer active&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RockDB&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Archive&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Spider&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ColummStore&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TokuDB&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;XtraDB&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CVE vulnerabilities detection support from &lt;a href=&#34;https://cve.mitre.org&#34;&gt;https://cve.mitre.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** MINIMAL REQUIREMENTS ***&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Perl 5.6 or later (with &lt;a href=&#34;http://search.cpan.org/~dapm/perl-5.14.4/pod/perldoc.pod&#34;&gt;perl-doc&lt;/a&gt; package)&lt;/li&gt; &#xA; &lt;li&gt;Unix/Linux based operating system (tested on Linux, BSD variants, and Solaris variants)&lt;/li&gt; &#xA; &lt;li&gt;Unrestricted read access to the MySQL server (OS root access recommended for MySQL &amp;lt; 5.1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;strong&gt;WARNING&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;It is &lt;strong&gt;extremely important&lt;/strong&gt; for you to fully understand each change you make to a MySQL database server. If you don&#39;t understand portions of the script&#39;s output, or if you don&#39;t understand the recommendations, &lt;strong&gt;you should consult&lt;/strong&gt; a knowledgeable DBA or system administrator that you trust. &lt;strong&gt;Always&lt;/strong&gt; test your changes on staging environments, and always keep in mind that improvements in one area can &lt;strong&gt;negatively affect&lt;/strong&gt; MySQL in other areas.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s &lt;strong&gt;also important&lt;/strong&gt; to wait at least a day of uptime to get accurate results. In fact, running &lt;strong&gt;mysqltuner&lt;/strong&gt; on a fresh restarted server is completely useless.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Seriously - please review the FAQ section below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security recommendations&lt;/h2&gt; &#xA;&lt;p&gt;Hi directadmin user! We detected that you run mysqltuner with da_admin&#39;s credentials taken from &lt;code&gt;/usr/local/directadmin/conf/my.cnf&lt;/code&gt;, which might bring to a password discovery! Read link for more details &lt;a href=&#34;https://github.com/major/MySQLTuner-perl/issues/289&#34;&gt;Issue #289&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What MySQLTuner is checking exactly ?&lt;/h2&gt; &#xA;&lt;p&gt;All checks done by &lt;strong&gt;MySQLTuner&lt;/strong&gt; are documented in &lt;a href=&#34;https://github.com/major/MySQLTuner-perl/raw/master/INTERNALS.md&#34;&gt;MySQLTuner Internals&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Download/Installation&lt;/h2&gt; &#xA;&lt;p&gt;Choose one of these methods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Script direct download (the simplest and shortest method):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget http://mysqltuner.pl/ -O mysqltuner.pl&#xA;wget https://raw.githubusercontent.com/major/MySQLTuner-perl/master/basic_passwords.txt -O basic_passwords.txt&#xA;wget https://raw.githubusercontent.com/major/MySQLTuner-perl/master/vulnerabilities.csv -O vulnerabilities.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;You can download the entire repository by using &lt;code&gt;git clone&lt;/code&gt; or &lt;code&gt;git clone --depth 1 -b master&lt;/code&gt; followed by the cloning URL above.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Optional Sysschema installation for MySQL 5.6&lt;/h2&gt; &#xA;&lt;p&gt;Sysschema is installed by default under MySQL 5.7 and MySQL 8 from Oracle. By default, on MySQL 5.6/5.7/8, performance schema is enabled by default. For previous MySQL 5.6 version, you can follow this command to create a new database sys containing very useful view on Performance schema:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl &#34;https://codeload.github.com/mysql/mysql-sys/zip/master&#34; &amp;gt; sysschema.zip&#xA;# check zip file&#xA;unzip -l sysschema.zip&#xA;unzip sysschema.zip&#xA;cd mysql-sys-master&#xA;mysql -uroot -p &amp;lt; sys_56.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Optional Performance schema and Sysschema installation for MariaDB 10.x&lt;/h2&gt; &#xA;&lt;p&gt;Sysschema is not installed by default under MariaDB prior to 10.6 By default, on MariaDB, performance schema is disabled by default. consider activating performance schema across your my.cnf configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[mysqld]&#xA;performance_schema = on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can follow this command to create a new database sys containing very useful view on Performance schema:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl &#34;https://codeload.github.com/FromDual/mariadb-sys/zip/master&#34; &amp;gt; mariadb-sys.zip&#xA;# check zip file&#xA;unzip -l mariadb-sys.zip&#xA;unzip mariadb-sys.zip&#xA;cd mariadb-sys-master/&#xA;mysql -u root -p &amp;lt; ./sys_10.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Errors &amp;amp; solutions for performance schema installation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ERROR at line 21: Failed to open file &#39;./tables/sys_config_data_10.sql -- ported&#39;, error: 2&#xA; Have a look at #452 solution given by @ericx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Performance tips&lt;/h2&gt; &#xA;&lt;p&gt;Metadata statistic updates can impact strongly performance of database servers and MySQLTuner. Be sure that innodb_stats_on_metadata is disabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set global innodb_stats_on_metadata = 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Specific usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Minimal usage locally&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --host 127.0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you can add the execute bit (&lt;code&gt;chmod +x mysqltuner.pl&lt;/code&gt;) so you can execute it without calling perl directly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Minimal usage remotely&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --host targetDNS_IP --user admin_user --pass admin_password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Enable maximum output information around MySQL/MariaDb without debugging&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --verbose&#xA;perl mysqltuner.pl --buffers --dbstat --idxstat --sysstat --pfstat --tbstat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Enable CVE vulnerabilities check for your MariaDB or MySQL version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --cvefile=vulnerabilities.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Write your result in a file with information displayed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --outputfile /tmp/result_mysqltuner.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Write your result in a file &lt;strong&gt;without outputting information&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --silent --outputfile /tmp/result_mysqltuner.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Using template model to customize your reporting file based on &lt;a href=&#34;https://metacpan.org/pod/Text::Template&#34;&gt;Text::Template&lt;/a&gt; syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --silent --reportfile /tmp/result_mysqltuner.txt --template=/tmp/mymodel.tmpl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Enable debugging information&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Update MySQLTuner and data files (password and cve) if needed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --checkversion --updateversion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTML reports based on Python Jinja2&lt;/h2&gt; &#xA;&lt;p&gt;HTML generation is based on Python/Jinja2&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HTML generation Procedure&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate mysqltuner.pl report using JSON format (--json)&lt;/li&gt; &#xA; &lt;li&gt;Generate HTML report using j2 python tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Jinja2 Templates are located under templates sub directory&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A basic example is called basic.html.j2&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation Python j2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -mvenv j2&#xA;source ./j2/bin/activate&#xA;(j2) pip install j2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using Html report generation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --verbose --json &amp;gt; reports.json&#xA;cat reports.json  j2 -f json MySQLTuner-perl/templates/basic.html.j2 &amp;gt; variables.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --verbose --json | j2 -f json MySQLTuner-perl/templates/basic.html.j2 &amp;gt; variables.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTML reports based on AHA&lt;/h2&gt; &#xA;&lt;p&gt;HTML generation is based on AHA&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HTML generation Procedure&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate mysqltuner.pl report using standard text reports&lt;/li&gt; &#xA; &lt;li&gt;Generate HTML report using aha&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation Aha&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow instructions from Github repo&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/theZiz/aha&#34;&gt;GitHub AHA main repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using AHA Html report generation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --verbose --color &amp;gt; reports.txt&#xA;aha --black --title &#34;MySQLTuner&#34; -f &#34;reports.txt&#34; &amp;gt; &#34;reports.html&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl mysqltuner.pl --verbose --color | aha --black --title &#34;MySQLTuner&#34; &amp;gt; reports.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question: Will MySQLTuner fix my slow MySQL server?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt; MySQLTuner is a read only script. It won&#39;t write to any configuration files, change the status of any daemons, or call your mother to wish her a happy birthday. It will give you an overview of your server&#39;s performance and make some basic recommendations for improvements that you can make after it completes. &lt;em&gt;Make sure you read the warning above prior to following any recommendations.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question: Can I fire my DBA now?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySQLTuner will not replace your DBA in any form or fashion.&lt;/strong&gt; If your DBA constantly takes your parking spot and steals your lunch from the fridge, then you may want to consider it - but that&#39;s your call.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question: Why does MySQLTuner keep asking me the login credentials for MySQL over and over?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The script will try its best to log in via any means possible. It will check for ~/.my.cnf files, Plesk password files, and empty password root logins. If none of those are available, then you&#39;ll be prompted for a password. If you&#39;d like the script to run in an automated fashion without user intervention, then create a .my.cnf file in your home directory which contains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[client]&#xA;user=someusername&#xA;password=thatuserspassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you create it, make sure it&#39;s owned by your user and the mode on the file is 0600. This should prevent the prying eyes from getting your database login credentials under normal conditions. If a &lt;a href=&#34;https://en.wikipedia.org/wiki/T-1000&#34;&gt;T-1000 shows up in a LAPD uniform&lt;/a&gt; and demands your database credentials, you won&#39;t have much of an option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question: Is there another way to secure credentials on latest MySQL and MariaDB distributions ?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You could use mysql_config_editor utilities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#x9;$ mysql_config_editor set --login-path=client --user=someusername --password --host=localhost&#xA;&#x9;Enter password: ********&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After which, &lt;code&gt;~/.mylogin.cnf&lt;/code&gt; will be created with the appropriate access.&lt;/p&gt; &#xA;&lt;p&gt;To get information about stored credentials, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$mysql_config_editor print&#xA;[client]&#xA;user = someusername&#xA;password = *****&#xA;host = localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question: What&#39;s minimum privileges needed by a specific mysqltuner user in database ?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    mysql&amp;gt;GRANT SELECT, PROCESS,EXECUTE, REPLICATION CLIENT,SHOW DATABASES,SHOW VIEW ON *.* TO &#39;mysqltuner&#39;@&#39;localhost&#39; identified by pwd1234;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question: It&#39;s not working on my OS! What gives?!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;These kinds of things are bound to happen. Here are the details I need from you in order to research the problem thoroughly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS and OS version&lt;/li&gt; &#xA; &lt;li&gt;Architecture (x86, x86_64, IA64, Commodore 64)&lt;/li&gt; &#xA; &lt;li&gt;Exact MySQL version&lt;/li&gt; &#xA; &lt;li&gt;Where you obtained your MySQL version (OS package, source, etc)&lt;/li&gt; &#xA; &lt;li&gt;The full text of the error&lt;/li&gt; &#xA; &lt;li&gt;A copy of SHOW VARIABLES and SHOW GLOBAL STATUS output (if possible)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question: How to perform CVE vulnerability checks?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download vulnerabilities.csv from this repository.&lt;/li&gt; &#xA; &lt;li&gt;use option --cvefile to perform CVE checks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question: How to use mysqltuner from a remote host?&lt;/strong&gt; Thanks to &lt;a href=&#34;http://dba.stackexchange.com/users/877/rolandomysqldba&#34;&gt;@rolandomysqldba&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You will still have to connect like a mysql client:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Connection and Authentication&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--host &amp;lt;hostname&amp;gt; Connect to a remote host to perform tests (default: localhost)&#xA;--socket &amp;lt;socket&amp;gt; Use a different socket for a local connection&#xA;--port &amp;lt;port&amp;gt;     Port to use for connection (default: 3306)&#xA;--user &amp;lt;username&amp;gt; Username to use for authentication&#xA;--pass &amp;lt;password&amp;gt; Password to use for authentication&#xA;--defaults-file &amp;lt;path&amp;gt; defaults file for credentials&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you are using a remote host, use parameters to supply values from the OS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--forcemem &amp;lt;size&amp;gt;  Amount of RAM installed in megabytes&#xA;--forceswap &amp;lt;size&amp;gt; Amount of swap memory configured in megabytes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You may have to contact your remote SysAdmin to ask how much RAM and swap you have&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the database has too many tables, or very large table, use this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--skipsize           Don&#39;t enumerate tables and their types/sizes (default: on)&#xA;                     (Recommended for servers with many tables)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Question: Can I install this project using homebrew on Apple Macintosh?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yes! &lt;code&gt;brew install mysqltuner&lt;/code&gt; can be used to install this application using &lt;a href=&#34;https://brew.sh/&#34;&gt;homebrew&lt;/a&gt; on Apple Macintosh.&lt;/p&gt; &#xA;&lt;h2&gt;MySQLTuner and Vagrant&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; contains following Vagrant configurations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fedora Core 30 / Docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vagrant File&lt;/strong&gt; is stored in Vagrant subdirectory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow following step after vagrant installation: $ vagrant up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; contains a Vagrant configurations for test purpose and development&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install VirtualBox and Vagrant &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;https://www.vagrantup.com/downloads.html&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone repository &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;git clone &lt;a href=&#34;https://github.com/major/MySQLTuner-perl.git&#34;&gt;https://github.com/major/MySQLTuner-perl.git&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Vagrant plugins vagrant-hostmanager and vagrant-vbguest &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;vagrant plugin install vagrant-hostmanager&lt;/li&gt; &#xA;   &lt;li&gt;vagrant plugin install vagrant-vbguest&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add Fedora Core 30 box for official Fedora Download Website &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;vagrant box add --name generic/fedora30&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a data directory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;mkdir data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;setup test environments&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sh build/createTestEnvs.sh&#xA;&#xA;$ source build/bashrc&#xA;$ mysql_percona80 sakila&#xA;sakila&amp;gt; ...&#xA;&#xA;$ docker images&#xA;mariadb                  10.1                fc612450e1f1        12 days ago         352MB&#xA;mariadb                  10.2                027b7c57b8c6        12 days ago         340MB&#xA;mariadb                  10.3                47dff68107c4        12 days ago         343MB&#xA;mariadb                  10.4                92495405fc36        12 days ago         356MB&#xA;mysql                    5.6                 95e0fc47b096        2 weeks ago         257MB&#xA;mysql                    5.7                 383867b75fd2        2 weeks ago         373MB&#xA;mysql                    8.0                 b8fd9553f1f0        2 weeks ago         445MB&#xA;percona/percona-server   5.7                 ddd245ed3496        5 weeks ago         585MB&#xA;percona/percona-server   5.6                 ed0a36e0cf1b        6 weeks ago         421MB&#xA;percona/percona-server   8.0                 390ae97d57c6        6 weeks ago         697MB&#xA;mariadb                  5.5                 c7bf316a4325        4 months ago        352MB&#xA;mariadb                  10.0                d1bde56970c6        4 months ago        353MB&#xA;mysql                    5.5                 d404d78aa797        4 months ago        205MB&#xA;&#xA;$ docker ps&#xA;CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS              PORTS                               NAMES&#xA;da2be9b050c9        mariadb:5.5                  &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          0.0.0.0:5311-&amp;gt;3306/tcp              mariadb55&#xA;5deca25d5ac8        mariadb:10.0                 &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          0.0.0.0:5310-&amp;gt;3306/tcp              mariadb100&#xA;73aaeb37e2c2        mariadb:10.1                 &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          0.0.0.0:5309-&amp;gt;3306/tcp              mariadb101&#xA;72ffa77e01ec        mariadb:10.2                 &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          0.0.0.0:5308-&amp;gt;3306/tcp              mariadb102&#xA;f5996f2041df        mariadb:10.3                 &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          0.0.0.0:5307-&amp;gt;3306/tcp              mariadb103&#xA;4890c52372bb        mariadb:10.4                 &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          0.0.0.0:5306-&amp;gt;3306/tcp              mariadb104&#xA;6b9dc078e921        percona/percona-server:5.6   &#34;/docker-entrypoint.…&#34;   7 hours ago         Up 7 hours          0.0.0.0:4308-&amp;gt;3306/tcp              percona56&#xA;3a4c7c826d4c        percona/percona-server:5.7   &#34;/docker-entrypoint.…&#34;   7 hours ago         Up 7 hours          0.0.0.0:4307-&amp;gt;3306/tcp              percona57&#xA;3dda408c91b0        percona/percona-server:8.0   &#34;/docker-entrypoint.…&#34;   7 hours ago         Up 7 hours          33060/tcp, 0.0.0.0:4306-&amp;gt;3306/tcp   percona80&#xA;600a4e7e9dcd        mysql:5.5                    &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          0.0.0.0:3309-&amp;gt;3306/tcp              mysql55&#xA;4bbe54342e5d        mysql:5.6                    &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          0.0.0.0:3308-&amp;gt;3306/tcp              mysql56&#xA;a49783249a11        mysql:5.7                    &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          33060/tcp, 0.0.0.0:3307-&amp;gt;3306/tcp   mysql57&#xA;d985820667c2        mysql:8.0                    &#34;docker-entrypoint.s…&#34;   7 hours ago         Up 7 hours          0.0.0.0:3306-&amp;gt;3306/tcp, 33060/tcp   mysql 8    0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MySQLTuner needs you&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySQLTuner&lt;/strong&gt; needs contributors for documentation, code and feedback..&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please join us on issue track at &lt;a href=&#34;https://github.com/major/MySQLTuner-perl/issues&#34;&gt;GitHub tracker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Contribution guide is available following &lt;a href=&#34;https://github.com/major/MySQLTuner-perl/raw/master/CONTRIBUTING.md&#34;&gt;MySQLTuner contributing guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Star &lt;strong&gt;MySQLTuner project&lt;/strong&gt; at &lt;a href=&#34;https://github.com/major/MySQLTuner-perl&#34;&gt;MySQLTuner Git Hub Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions welcome !&lt;/h2&gt; &#xA;&lt;p&gt;How to contribute using Pull Request ? Follow this guide : &lt;a href=&#34;https://opensource.com/article/19/7/create-pull-request-github&#34;&gt;Pull request creation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Simple steps to create a pull request:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this Github project&lt;/li&gt; &#xA; &lt;li&gt;Clone it to your local system&lt;/li&gt; &#xA; &lt;li&gt;Make a new branch&lt;/li&gt; &#xA; &lt;li&gt;Make your changes&lt;/li&gt; &#xA; &lt;li&gt;Push it back to your repo&lt;/li&gt; &#xA; &lt;li&gt;Click the Compare &amp;amp; pull request button&lt;/li&gt; &#xA; &lt;li&gt;Click Create pull request to open a new pull request&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>brendangregg/FlameGraph</title>
    <updated>2022-07-01T02:49:01Z</updated>
    <id>tag:github.com,2022-07-01:/brendangregg/FlameGraph</id>
    <link href="https://github.com/brendangregg/FlameGraph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stack trace visualizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flame Graphs visualize profiled code&lt;/h1&gt; &#xA;&lt;p&gt;Main Website: &lt;a href=&#34;http://www.brendangregg.com/flamegraphs.html&#34;&gt;http://www.brendangregg.com/flamegraphs.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example (click to zoom):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg&#34;&gt;&lt;img src=&#34;http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click a box to zoom the Flame Graph to this stack frame only. To search and highlight all stack frames matching a regular expression, click the &lt;em&gt;search&lt;/em&gt; button in the upper right corner or press Ctrl-F. By default, search is case sensitive, but this can be toggled by pressing Ctrl-I or by clicking the &lt;em&gt;ic&lt;/em&gt; button in the upper right corner.&lt;/p&gt; &#xA;&lt;p&gt;Other sites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Flame Graph article in ACMQ and CACM: &lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2927301&#34;&gt;http://queue.acm.org/detail.cfm?id=2927301&lt;/a&gt; &lt;a href=&#34;http://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/abstract&#34;&gt;http://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/abstract&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU profiling using Linux perf_events, DTrace, SystemTap, or ktap: &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html&#34;&gt;http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU profiling using XCode Instruments: &lt;a href=&#34;http://schani.wordpress.com/2012/11/16/flame-graphs-for-instruments/&#34;&gt;http://schani.wordpress.com/2012/11/16/flame-graphs-for-instruments/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU profiling using Xperf.exe: &lt;a href=&#34;http://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/&#34;&gt;http://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Memory profiling: &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html&#34;&gt;http://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other examples, updates, and news: &lt;a href=&#34;http://www.brendangregg.com/flamegraphs.html#Updates&#34;&gt;http://www.brendangregg.com/flamegraphs.html#Updates&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Flame graphs can be created in three steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Capture stacks&lt;/li&gt; &#xA; &lt;li&gt;Fold stacks&lt;/li&gt; &#xA; &lt;li&gt;flamegraph.pl&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;1. Capture stacks&lt;/h1&gt; &#xA;&lt;p&gt;Stack samples can be captured using Linux perf_events, FreeBSD pmcstat (hwpmc), DTrace, SystemTap, and many other profilers. See the stackcollapse-* converters.&lt;/p&gt; &#xA;&lt;h3&gt;Linux perf_events&lt;/h3&gt; &#xA;&lt;p&gt;Using Linux perf_events (aka &#34;perf&#34;) to capture 60 seconds of 99 Hertz stack samples, both user- and kernel-level stacks, all processes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# perf record -F 99 -a -g -- sleep 60&#xA;# perf script &amp;gt; out.perf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now only capturing PID 181:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# perf record -F 99 -p 181 -g -- sleep 60&#xA;# perf script &amp;gt; out.perf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DTrace&lt;/h3&gt; &#xA;&lt;p&gt;Using DTrace to capture 60 seconds of kernel stacks at 997 Hertz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# dtrace -x stackframes=100 -n &#39;profile-997 /arg0/ { @[stack()] = count(); } tick-60s { exit(0); }&#39; -o out.kern_stacks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using DTrace to capture 60 seconds of user-level stacks for PID 12345 at 97 Hertz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# dtrace -x ustackframes=100 -n &#39;profile-97 /pid == 12345 &amp;amp;&amp;amp; arg1/ { @[ustack()] = count(); } tick-60s { exit(0); }&#39; -o out.user_stacks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;60 seconds of user-level stacks, including time spent in-kernel, for PID 12345 at 97 Hertz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# dtrace -x ustackframes=100 -n &#39;profile-97 /pid == 12345/ { @[ustack()] = count(); } tick-60s { exit(0); }&#39; -o out.user_stacks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Switch &lt;code&gt;ustack()&lt;/code&gt; for &lt;code&gt;jstack()&lt;/code&gt; if the application has a ustack helper to include translated frames (eg, node.js frames; see: &lt;a href=&#34;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time/&#34;&gt;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time/&lt;/a&gt;). The rate for user-level stack collection is deliberately slower than kernel, which is especially important when using &lt;code&gt;jstack()&lt;/code&gt; as it performs additional work to translate frames.&lt;/p&gt; &#xA;&lt;h1&gt;2. Fold stacks&lt;/h1&gt; &#xA;&lt;p&gt;Use the stackcollapse programs to fold stack samples into single lines. The programs provided are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse.pl&lt;/code&gt;: for DTrace stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-perf.pl&lt;/code&gt;: for Linux perf_events &#34;perf script&#34; output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-pmc.pl&lt;/code&gt;: for FreeBSD pmcstat -G stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-stap.pl&lt;/code&gt;: for SystemTap stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-instruments.pl&lt;/code&gt;: for XCode Instruments&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-vtune.pl&lt;/code&gt;: for Intel VTune profiles&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-ljp.awk&lt;/code&gt;: for Lightweight Java Profiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-jstack.pl&lt;/code&gt;: for Java jstack(1) output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-gdb.pl&lt;/code&gt;: for gdb(1) stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-go.pl&lt;/code&gt;: for Golang pprof stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-vsprof.pl&lt;/code&gt;: for Microsoft Visual Studio profiles&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-wcp.pl&lt;/code&gt;: for wallClockProfiler output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;For perf_events:&#xA;$ ./stackcollapse-perf.pl out.perf &amp;gt; out.folded&#xA;&#xA;For DTrace:&#xA;$ ./stackcollapse.pl out.kern_stacks &amp;gt; out.kern_folded&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;unix`_sys_sysenter_post_swapgs 1401&#xA;unix`_sys_sysenter_post_swapgs;genunix`close 5&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf 85&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;c2audit`audit_closef 26&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;c2audit`audit_setf 5&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`audit_getstate 6&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`audit_unfalloc 2&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`closef 48&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;3. flamegraph.pl&lt;/h1&gt; &#xA;&lt;p&gt;Use flamegraph.pl to render a SVG.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./flamegraph.pl out.kern_folded &amp;gt; kernel.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An advantage of having the folded input file (and why this is separate to flamegraph.pl) is that you can use grep for functions of interest. Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ grep cpuid out.kern_folded | ./flamegraph.pl &amp;gt; cpuid.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Provided Examples&lt;/h1&gt; &#xA;&lt;h3&gt;Linux perf_events&lt;/h3&gt; &#xA;&lt;p&gt;An example output from Linux &#34;perf script&#34; is included, gzip&#39;d, as example-perf-stacks.txt.gz. The resulting flame graph is example-perf.svg:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/example-perf.svg&#34;&gt;&lt;img src=&#34;http://www.brendangregg.com/FlameGraphs/example-perf.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can create this using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gunzip -c example-perf-stacks.txt.gz | ./stackcollapse-perf.pl --all | ./flamegraph.pl --color=java --hash &amp;gt; example-perf.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This shows my typical workflow: I&#39;ll gzip profiles on the target, then copy them to my laptop for analysis. Since I have hundreds of profiles, I leave them gzip&#39;d!&lt;/p&gt; &#xA;&lt;p&gt;Since this profile included Java, I used the flamegraph.pl --color=java palette. I&#39;ve also used stackcollapse-perf.pl --all, which includes all annotations that help flamegraph.pl use separate colors for kernel and user level code. The resulting flame graph uses: green == Java, yellow == C++, red == user-mode native, orange == kernel.&lt;/p&gt; &#xA;&lt;p&gt;This profile was from an analysis of vert.x performance. The benchmark client, wrk, is also visible in the flame graph.&lt;/p&gt; &#xA;&lt;h3&gt;DTrace&lt;/h3&gt; &#xA;&lt;p&gt;An example output from DTrace is also included, example-dtrace-stacks.txt, and the resulting flame graph, example-dtrace.svg:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/example-dtrace.svg&#34;&gt;&lt;img src=&#34;http://www.brendangregg.com/FlameGraphs/example-dtrace.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can generate this using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./stackcollapse.pl example-stacks.txt | ./flamegraph.pl &amp;gt; example.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This was from a particular performance investigation: the Flame Graph identified that CPU time was spent in the lofs module, and quantified that time.&lt;/p&gt; &#xA;&lt;h1&gt;Options&lt;/h1&gt; &#xA;&lt;p&gt;See the USAGE message (--help) for options:&lt;/p&gt; &#xA;&lt;p&gt;USAGE: ./flamegraph.pl [options] infile &amp;gt; outfile.svg&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--title TEXT     # change title text&#xA;--subtitle TEXT  # second level title (optional)&#xA;--width NUM      # width of image (default 1200)&#xA;--height NUM     # height of each frame (default 16)&#xA;--minwidth NUM   # omit smaller functions (default 0.1 pixels)&#xA;--fonttype FONT  # font type (default &#34;Verdana&#34;)&#xA;--fontsize NUM   # font size (default 12)&#xA;--countname TEXT # count type label (default &#34;samples&#34;)&#xA;--nametype TEXT  # name type label (default &#34;Function:&#34;)&#xA;--colors PALETTE # set color palette. choices are: hot (default), mem,&#xA;                 # io, wakeup, chain, java, js, perl, red, green, blue,&#xA;                 # aqua, yellow, purple, orange&#xA;--bgcolors COLOR # set background colors. gradient choices are yellow&#xA;                 # (default), blue, green, grey; flat colors use &#34;#rrggbb&#34;&#xA;--hash           # colors are keyed by function name hash&#xA;--cp             # use consistent palette (palette.map)&#xA;--reverse        # generate stack-reversed flame graph&#xA;--inverted       # icicle graph&#xA;--flamechart     # produce a flame chart (sort by time, do not merge stacks)&#xA;--negate         # switch differential hues (blue&amp;lt;-&amp;gt;red)&#xA;--notes TEXT     # add notes comment in SVG (for debugging)&#xA;--help           # this message&#xA;&#xA;eg,&#xA;./flamegraph.pl --title=&#34;Flame Graph: malloc()&#34; trace.txt &amp;gt; graph.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As suggested in the example, flame graphs can process traces of any event, such as malloc()s, provided stack traces are gathered.&lt;/p&gt; &#xA;&lt;h1&gt;Consistent Palette&lt;/h1&gt; &#xA;&lt;p&gt;If you use the &lt;code&gt;--cp&lt;/code&gt; option, it will use the $colors selection and randomly generate the palette like normal. Any future flamegraphs created using the &lt;code&gt;--cp&lt;/code&gt; option will use the same palette map. Any new symbols from future flamegraphs will have their colors randomly generated using the $colors selection.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t like the palette, just delete the palette.map file.&lt;/p&gt; &#xA;&lt;p&gt;This allows your to change your colorscheme between flamegraphs to make the differences REALLY stand out.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Say we have 2 captures, one with a problem, and one when it was working (whatever &#34;it&#34; is):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat working.folded | ./flamegraph.pl --cp &amp;gt; working.svg&#xA;# this generates a palette.map, as per the normal random generated look.&#xA;&#xA;cat broken.folded | ./flamegraph.pl --cp --colors mem &amp;gt; broken.svg&#xA;# this svg will use the same palette.map for the same events, but a very&#xA;# different colorscheme for any new events.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at the demo directory for an example:&lt;/p&gt; &#xA;&lt;p&gt;palette-example-working.svg&lt;br&gt; palette-example-broken.svg&lt;/p&gt;</summary>
  </entry>
</feed>