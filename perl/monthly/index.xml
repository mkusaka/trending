<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:48:15Z</updated>
  <subtitle>Monthly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ocpi/ocpi</title>
    <updated>2024-05-01T01:48:15Z</updated>
    <id>tag:github.com,2024-05-01:/ocpi/ocpi</id>
    <link href="https://github.com/ocpi/ocpi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Open Charge Point Interface (OCPI) allows for a scalable, automated roaming setup between Charge Point Operators and e-Mobility Service Providers. It supports authorisation, charge point information exchange (incl transaction events), charge detail record exchange and finally, the exchange of smart-charging commands between parties.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This repository contains the OCPI specification, latest release: &lt;a href=&#34;https://evroaming.org/app/uploads/2021/11/OCPI-2.2.1.pdf&#34;&gt;&lt;code&gt;OCPI 2.2.1&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The branch with the latest fixes to the 2.2.1 documentation is &lt;a href=&#34;https://github.com/ocpi/ocpi/tree/release-2.2.1-bugfixes&#34;&gt;&lt;code&gt;release-2.2.1-bugfixes&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;-The branch with the latest fixes to the 2.2 documentation is &lt;a href=&#34;https://github.com/ocpi/ocpi/tree/release-2.2-bugfixes&#34;&gt;&lt;code&gt;release-2.2-bugfixes&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The branch with the latest fixes to the 2.1.1 documentation is &lt;a href=&#34;https://github.com/ocpi/ocpi/tree/release-2.1.1-bugfixes&#34;&gt;&lt;code&gt;release-2.1.1-bugfixes&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch always contains the latest official release.&lt;/p&gt; &#xA;&lt;p&gt;Development of the next version of OCPI, new functionality, is done in the &lt;a href=&#34;https://github.com/ocpi/ocpi-3/&#34;&gt;ocpi-3 repository&lt;/a&gt;, which is only accessible to Contributors of the &lt;a href=&#34;https://evroaming.org/how-to-join/&#34;&gt;EV Roaming Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/version_history.asciidoc&#34;&gt;&lt;strong&gt;Version History&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/introduction.asciidoc&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/terminology.asciidoc&#34;&gt;Terminology and Definitions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/topology.asciidoc&#34;&gt;Supported Topologies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Protocol Meta Information&lt;/strong&gt;, describes the connections between the parties&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/transport_and_format.asciidoc&#34;&gt;Transport and Format&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/status_codes.asciidoc&#34;&gt;Status codes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/version_information_endpoint.asciidoc&#34;&gt;Version information endpoint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/credentials.asciidoc&#34;&gt;Credentials &amp;amp; registration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Overview of Modules&lt;/strong&gt;, each section describes one module.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_locations.asciidoc&#34;&gt;Locations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_sessions.asciidoc&#34;&gt;Sessions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_cdrs.asciidoc&#34;&gt;CDRs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_tariffs.asciidoc&#34;&gt;Tariffs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_tokens.asciidoc&#34;&gt;Tokens&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_commands.asciidoc&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_charging_profiles.asciidoc&#34;&gt;Charging Profiles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/mod_hub_client_info.asciidoc&#34;&gt;Hub Client Info&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generic Types&lt;/strong&gt;, describing all data types that are used by multiple objects&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/types.asciidoc&#34;&gt;Types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/changelog.asciidoc&#34;&gt;&lt;strong&gt;Changelog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Current versions&lt;/h3&gt; &#xA;&lt;h4&gt;Release 2.2.1&lt;/h4&gt; &#xA;&lt;p&gt;Only minor changes, but breaking compatibility with 2.2 in order to support signed data exchange so that parties using OCPI can comply with consumer protection legislation. A more detailed overview is inside &lt;a href=&#34;https://evroaming.org/app/uploads/2021/11/OCPI-2.2.1.pdf&#34;&gt;the specification document itself&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Release 2.2-d2&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Hubs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Message routing headers&lt;/li&gt; &#xA;   &lt;li&gt;Hub Client Info&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support Platforms with multiple/different roles, additional roles&lt;/li&gt; &#xA; &lt;li&gt;Charging Profiles&lt;/li&gt; &#xA; &lt;li&gt;based Smart Charging&lt;/li&gt; &#xA; &lt;li&gt;Improvements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CDRs: Credit CDRs, VAT, Calibration law/Eichrecht support, Session_id, AuthorizationReference, CdrLocation, CdrToken&lt;/li&gt; &#xA;   &lt;li&gt;Sessions: VAT, CdrToken, How to add a Charging Period&lt;/li&gt; &#xA;   &lt;li&gt;Tariffs: Tariff types, Min/Max price, reservation tariff, Much more examples&lt;/li&gt; &#xA;   &lt;li&gt;Locations: Multiple Tariffs, Lost of small improvements&lt;/li&gt; &#xA;   &lt;li&gt;Tokens: Group_id, energy contract&lt;/li&gt; &#xA;   &lt;li&gt;Commands: Cancel Reservation added&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;fixes some bugs of 2.1.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Release 2.1.1-d2&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improvements from rel. 2.0&lt;/li&gt; &#xA; &lt;li&gt;Chargepoint commands&lt;/li&gt; &#xA; &lt;li&gt;realtime authorization&lt;/li&gt; &#xA; &lt;li&gt;fixes some bugs of 2.1 (2.1 is now deprecated)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Release 2.0&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Charge Point Exchange Static &amp;amp; Dynamic (with tariffing covering only start/kWh/time)&lt;/li&gt; &#xA; &lt;li&gt;Authorization &amp;amp; token data exchange&lt;/li&gt; &#xA; &lt;li&gt;Tariffing&lt;/li&gt; &#xA; &lt;li&gt;Session Info exchange (cdr &amp;amp; ndr)&lt;/li&gt; &#xA; &lt;li&gt;Registration (How to connect) &amp;amp; Security&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Planned releases&lt;/h3&gt; &#xA;&lt;h4&gt;Release 3.0&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ISO 15118 Plug&amp;amp;Charge&lt;/li&gt; &#xA; &lt;li&gt;Eichrecht support&lt;/li&gt; &#xA; &lt;li&gt;Performance improvements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Process&lt;/h2&gt; &#xA;&lt;p&gt;The OCPI Build Process has been improved. OCPI 2.0/2.1.1 was in markdown format, and diagrams where Plantuml.&lt;/p&gt; &#xA;&lt;p&gt;For OCPI 2.2, the text of OCPI has been converted to asciidoc. Asciidoc is easier to format the output, and chapter numbering and internal links are much easier to work with.&lt;/p&gt; &#xA;&lt;p&gt;The Plantuml is no longer converted to PNG images, but the SVG, making them much better readable, and even searchable in the PDF.&lt;/p&gt; &#xA;&lt;p&gt;In OCPI 2.0 and 2.1.1, the JSON examples contained a lot of mistakes, where outdated compared to the text, or not even valid JSON. To prevent issues with the examples in the specification, the examples are not placed in separate JSON files. At the moment, the JSON files are check if they are valid JSON.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;1 Dec 2014 &lt;a href=&#34;https://raw.githubusercontent.com/ocpi/ocpi/master/releases/old/OCPI-Draftv4.pdf&#34;&gt;Draft v4&lt;/a&gt; is published 17 June 2015 [Draft v5] is moved to a new branch that will be used as a reference as the OCPI specifications are being redefined and the specifications are restructured in different files, a file per chapter&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>darold/ora2pg</title>
    <updated>2024-05-01T01:48:15Z</updated>
    <id>tag:github.com,2024-05-01:/darold/ora2pg</id>
    <link href="https://github.com/darold/ora2pg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ora2Pg is a free tool used to migrate an Oracle database to a PostgreSQL compatible schema. It connects your Oracle database, scan it automatically and extracts its structure or data, it then generates SQL scripts that you can load into PostgreSQL.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;NAME Ora2Pg - Oracle to PostgreSQL database schema converter&lt;/p&gt; &#xA;&lt;p&gt;DESCRIPTION Ora2Pg is a free tool used to migrate an Oracle database to a PostgreSQL compatible schema. It connects your Oracle database, scans it automatically and extracts its structure or data, then generates SQL scripts that you can load into your PostgreSQL database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ora2Pg can be used for anything from reverse engineering Oracle database&#xA;to huge enterprise database migration or simply replicating some Oracle&#xA;data into a PostgreSQL database. It is really easy to use and doesn&#39;t&#xA;require any Oracle database knowledge other than providing the&#xA;parameters needed to connect to the Oracle database.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FEATURES Ora2Pg consist of a Perl script (ora2pg) and a Perl module (Ora2Pg.pm), the only thing you have to modify is the configuration file ora2pg.conf by setting the DSN to the Oracle database and optionally the name of a schema. Once that&#39;s done you just have to set the type of export you want: TABLE with constraints, VIEW, MVIEW, TABLESPACE, SEQUENCE, INDEXES, TRIGGER, GRANT, FUNCTION, PROCEDURE, PACKAGE, PARTITION, TYPE, INSERT or COPY, FDW, QUERY, KETTLE, SYNONYM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;By default Ora2Pg exports to a file that you can load into PostgreSQL&#xA;with the psql client, but you can also import directly into a PostgreSQL&#xA;database by setting its DSN into the configuration file. With all&#xA;configuration options of ora2pg.conf you have full control of what&#xA;should be exported and how.&#xA;&#xA;Features included:&#xA;&#xA;        - Export full database schema (tables, views, sequences, indexes), with&#xA;          unique, primary, foreign key and check constraints.&#xA;        - Export grants/privileges for users and groups.&#xA;        - Export range/list partitions and sub partitions.&#xA;        - Export a table selection (by specifying the table names).&#xA;        - Export Oracle schema to a PostgreSQL 8.4+ schema.&#xA;        - Export predefined functions, triggers, procedures, packages and&#xA;          package bodies.&#xA;        - Export full data or following a WHERE clause.&#xA;        - Full support of Oracle BLOB object as PG BYTEA.&#xA;        - Export Oracle views as PG tables.&#xA;        - Export Oracle user defined types.&#xA;        - Provide some basic automatic conversion of PLSQL code to PLPGSQL.&#xA;        - Works on any platform.&#xA;        - Export Oracle tables as foreign data wrapper tables.&#xA;        - Export materialized view.&#xA;        - Show a  report of an Oracle database content.&#xA;        - Migration cost assessment of an Oracle database.&#xA;        - Migration difficulty level assessment of an Oracle database.&#xA;        - Migration cost assessment of PL/SQL code from a file.&#xA;        - Migration cost assessment of Oracle SQL queries stored in a file.&#xA;        - Generate XML ktr files to be used with Penthalo Data Integrator (Kettle)&#xA;        - Export Oracle locator and spatial geometries into PostGis.&#xA;        - Export DBLINK as Oracle FDW.&#xA;        - Export SYNONYMS as views.&#xA;        - Export DIRECTORY as external table or directory for external_file extension.&#xA;        - Dispatch a list of SQL orders over multiple PostgreSQL connections&#xA;        - Perform a diff between Oracle and PostgreSQL database for test purpose.&#xA;        - MySQL/MariaDB and Microsoft SQL Server migration.&#xA;&#xA;Ora2Pg does its best to automatically convert your Oracle database to&#xA;PostgreSQL but there&#39;s still manual works to do. The Oracle specific&#xA;PL/SQL code generated for functions, procedures, packages and triggers&#xA;has to be reviewed to match the PostgreSQL syntax. You will find some&#xA;useful recommendations on porting Oracle PL/SQL code to PostgreSQL&#xA;PL/PGSQL at &#34;Converting from other Databases to PostgreSQL&#34;, section:&#xA;Oracle (http://wiki.postgresql.org/wiki/Main_Page).&#xA;&#xA;See http://ora2pg.darold.net/report.html for a HTML sample of an Oracle&#xA;database migration report.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;INSTALLATION All Perl modules can always be found at CPAN (&lt;a href=&#34;http://search.cpan.org/&#34;&gt;http://search.cpan.org/&lt;/a&gt;). Just type the full name of the module (ex: DBD::Oracle) into the search input box, it will brings you the page for download.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Releases of Ora2Pg stay at SF.net&#xA;(https://sourceforge.net/projects/ora2pg/).&#xA;&#xA;Under Windows you should install Strawberry Perl&#xA;(http://strawberryperl.com/) and the OSes corresponding Oracle clients.&#xA;Since version 5.32 this Perl distribution include pre-compiled driver of&#xA;DBD::Oracle and DBD::Pg.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirement The Oracle Instant Client or a full Oracle installation must be installed on the system. You can download the RPM from Oracle download center:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    rpm -ivh oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm&#xA;    rpm -ivh oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm&#xA;    rpm -ivh oracle-instantclient12.2-jdbc-12.2.0.1.0-1.x86_64.rpm&#xA;    rpm -ivh oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm&#xA;&#xA;or simply download the corresponding ZIP archives from Oracle download&#xA;center and install them where you want, for example:&#xA;/opt/oracle/instantclient_12_2/&#xA;&#xA;You also need a modern Perl distribution (perl 5.10 and more). To&#xA;connect to a database and proceed to his migration you need the DBI Perl&#xA;module &amp;gt; 1.614. To migrate an Oracle database you need the DBD::Oracle&#xA;Perl modules to be installed.&#xA;&#xA;To install DBD::Oracle and have it working you need to have the Oracle&#xA;client libraries installed and the ORACLE_HOME environment variable must&#xA;be defined.&#xA;&#xA;If you plan to export a MySQL database you need to install the Perl&#xA;module DBD::MySQL which requires that the mysql client libraries are&#xA;installed.&#xA;&#xA;If you plan to export a SQL Server database you need to install the Perl&#xA;module DBD::ODBC which requires that the unixODBC package is installed.&#xA;&#xA;On some Perl distribution you may need to install the Time::HiRes Perl&#xA;module.&#xA;&#xA;If your distribution doesn&#39;t include these Perl modules you can install&#xA;them using CPAN:&#xA;&#xA;        perl -MCPAN -e &#39;install DBD::Oracle&#39;&#xA;        perl -MCPAN -e &#39;install DBD::MySQL&#39;&#xA;        perl -MCPAN -e &#39;install DBD::ODBC&#39;&#xA;        perl -MCPAN -e &#39;install Time::HiRes&#39;&#xA;&#xA;otherwise use the packages provided by your distribution.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional By default Ora2Pg dumps export to flat files, to load them into your PostgreSQL database you need the PostgreSQL client (psql). If you don&#39;t have it on the host running Ora2Pg you can always transfer these files to a host with the psql client installed. If you prefer to load export &#39;on the fly&#39;, the perl module DBD::Pg is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ora2Pg allows you to dump all output in a compressed gzip file, to do&#xA;that you need the Compress::Zlib Perl module or if you prefer using&#xA;bzip2 compression, the program bzip2 must be available in your PATH.&#xA;&#xA;If your distribution doesn&#39;t include these Perl modules you can install&#xA;them using CPAN:&#xA;&#xA;        perl -MCPAN -e &#39;install DBD::Pg&#39;&#xA;        perl -MCPAN -e &#39;install Compress::Zlib&#39;&#xA;&#xA;otherwise use the packages provided by your distribution.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instruction for SQL Server For SQL Server you need to install the unixodbc package and the Perl DBD::ODBC driver:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        sudo apt install unixodbc&#xA;        sudo apt install libdbd-odbc-perl&#xA;&#xA;or&#xA;&#xA;        sudo yum install unixodbc&#xA;        sudo yum install perl-DBD-ODBC&#xA;        sudo yum install perl-DBD-Pg&#xA;&#xA;then install the Microsoft ODBC Driver for SQL Server. Follow the&#xA;instructions relative to your operating system from here:&#xA;&#xA;        https://docs.microsoft.com/fr-fr/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver16&#xA;&#xA;Once it is done set the following in the /etc/odbcinst.ini file by&#xA;adjusting the SQL Server ODBC driver version:&#xA;&#xA;        [msodbcsql18]&#xA;        Description=Microsoft ODBC Driver 18 for SQL Server&#xA;        Driver=/opt/microsoft/msodbcsql18/lib64/libmsodbcsql-18.0.so.1.1&#xA;        UsageCount=1&#xA;&#xA;See ORACLE_DSN to know how to use the driver to connect to your MSSQL&#xA;database.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installing Ora2Pg Like any other Perl Module Ora2Pg can be installed with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        tar xjf ora2pg-x.x.tar.bz2&#xA;        cd ora2pg-x.x/&#xA;        perl Makefile.PL&#xA;        make &amp;amp;&amp;amp; make install&#xA;&#xA;This will install Ora2Pg.pm into your site Perl repository, ora2pg into&#xA;/usr/local/bin/ and ora2pg.conf into /etc/ora2pg/.&#xA;&#xA;On Windows(tm) OSes you may use instead:&#xA;&#xA;        perl Makefile.PL&#xA;        gmake &amp;amp;&amp;amp; gmake install&#xA;&#xA;This will install scripts and libraries into your Perl site installation&#xA;directory and the ora2pg.conf file as well as all documentation files&#xA;into C:\ora2pg\&#xA;&#xA;To install ora2pg in a different directory than the default one, simply&#xA;use this command:&#xA;&#xA;        perl Makefile.PL PREFIX=&amp;lt;your_install_dir&amp;gt;&#xA;        make &amp;amp;&amp;amp; make install&#xA;&#xA;then set PERL5LIB to the path to your installation directory before&#xA;using Ora2Pg.&#xA;&#xA;        export PERL5LIB=&amp;lt;your_install_dir&amp;gt;&#xA;        ora2pg -c config/ora2pg.conf -t TABLE -b outdir/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Packaging If you want to build the binary package for your preferred Linux distribution take a look at the packaging/ directory of the source tarball. There is everything to build RPM, Slackware and Debian packages. See README file in that directory.&lt;/p&gt; &#xA;&lt;p&gt;Installing DBD::Oracle Ora2Pg needs the Perl module DBD::Oracle for connectivity to an Oracle database from perl DBI. To get DBD::Oracle get it from CPAN a perl module repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;After setting ORACLE_HOME and LD_LIBRARY_PATH environment variables as&#xA;root user, install DBD::Oracle. Proceed as follow:&#xA;&#xA;        export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib&#xA;        export ORACLE_HOME=/usr/lib/oracle/12.2/client64&#xA;        perl -MCPAN -e &#39;install DBD::Oracle&#39;&#xA;&#xA;If you are running for the first time it will ask many questions; you&#xA;can keep defaults by pressing ENTER key, but you need to give one&#xA;appropriate mirror site for CPAN to download the modules. Install&#xA;through CPAN manually if the above doesn&#39;t work:&#xA;&#xA;        #perl -MCPAN -e shell&#xA;        cpan&amp;gt; get DBD::Oracle&#xA;        cpan&amp;gt; quit&#xA;        cd ~/.cpan/build/DBD-Oracle*&#xA;        export LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client64/lib&#xA;        export ORACLE_HOME=/usr/lib/oracle/11.2/client64&#xA;        perl Makefile.PL&#xA;        make&#xA;        make install&#xA;&#xA;Installing DBD::Oracle require that the three Oracle packages:&#xA;instant-client, SDK and SQLplus are installed as well as the libaio1&#xA;library.&#xA;&#xA;If you are using Instant Client from ZIP archives, the LD_LIBRARY_PATH&#xA;and ORACLE_HOME will be the same and must be set to the directory where&#xA;you have installed the files. For example:&#xA;/opt/oracle/instantclient_12_2/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CONFIGURATION Ora2Pg configuration can be as simple as choosing the Oracle database to export and choose the export type. This can be done in a minute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;By reading this documentation you will also be able to:&#xA;&#xA;        - Select only certain tables and/or column for export.&#xA;        - Rename some tables and/or column during export.&#xA;        - Select data to export following a WHERE clause per table.&#xA;        - Delay database constraints during data loading.&#xA;        - Compress exported data to save disk space.&#xA;        - and much more.&#xA;&#xA;The full control of the Oracle database migration is taken though a&#xA;single configuration file named ora2pg.conf. The format of this file&#xA;consist in a directive name in upper case followed by tab character and&#xA;a value. Comments are lines beginning with a #.&#xA;&#xA;There&#39;s no specific order to place the configuration directives, they&#xA;are set at the time they are read in the configuration file.&#xA;&#xA;For configuration directives that just take a single value, you can use&#xA;them multiple time in the configuration file but only the last&#xA;occurrence found in the file will be used. For configuration directives&#xA;that allow a list of value, you can use it multiple time, the values&#xA;will be appended to the list. If you use the IMPORT directive to load a&#xA;custom configuration file, directives defined in this file will be&#xA;stores from the place the IMPORT directive is found, so it is better to&#xA;put it at the end of the configuration file.&#xA;&#xA;Values set in command line options will override values from the&#xA;configuration file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ora2Pg usage First of all be sure that libraries and binaries path include the Oracle Instant Client installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        export LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client64/lib&#xA;        export PATH=&#34;/usr/lib/oracle/11.2/client64/bin:$PATH&#34;&#xA;&#xA;By default Ora2Pg will look for /etc/ora2pg/ora2pg.conf configuration&#xA;file, if the file exist you can simply execute:&#xA;&#xA;        /usr/local/bin/ora2pg&#xA;&#xA;or under Windows(tm) run ora2pg.bat file, located in your perl bin&#xA;directory. Windows(tm) users may also find a template configuration file&#xA;in C:\ora2pg&#xA;&#xA;If you want to call another configuration file, just give the path as&#xA;command line argument:&#xA;&#xA;        /usr/local/bin/ora2pg -c /etc/ora2pg/new_ora2pg.conf&#xA;&#xA;Here are all command line parameters available when using ora2pg:&#xA;&#xA;Usage: ora2pg [-dhpqv --estimate_cost --dump_as_html] [--option value]&#xA;&#xA;    -a | --allow str  : Comma separated list of objects to allow from export.&#xA;                        Can be used with SHOW_COLUMN too.&#xA;    -b | --basedir dir: Set the default output directory, where files&#xA;                        resulting from exports will be stored.&#xA;    -c | --conf file  : Set an alternate configuration file other than the&#xA;                        default /etc/ora2pg/ora2pg.conf.&#xA;    -C | --cdc_file file: File used to store/read SCN per table during export.&#xA;                        default: TABLES_SCN.log in the current directory. This&#xA;                        is the file written by the --cdc_ready option.&#xA;    -d | --debug      : Enable verbose output.&#xA;    -D | --data_type str : Allow custom type replacement at command line.&#xA;    -e | --exclude str: Comma separated list of objects to exclude from export.&#xA;                        Can be used with SHOW_COLUMN too.&#xA;    -h | --help       : Print this short help.&#xA;    -g | --grant_object type : Extract privilege from the given object type.&#xA;                        See possible values with GRANT_OBJECT configuration.&#xA;    -i | --input file : File containing Oracle PL/SQL code to convert with&#xA;                        no Oracle database connection initiated.&#xA;    -j | --jobs num   : Number of parallel process to send data to PostgreSQL.&#xA;    -J | --copies num : Number of parallel connections to extract data from Oracle.&#xA;    -l | --log file   : Set a log file. Default is stdout.&#xA;    -L | --limit num  : Number of tuples extracted from Oracle and stored in&#xA;                        memory before writing, default: 10000.&#xA;    -m | --mysql      : Export a MySQL database instead of an Oracle schema.&#xA;    -M | --mssql      : Export a Microsoft SQL Server database.&#xA;    -n | --namespace schema : Set the Oracle schema to extract from.&#xA;    -N | --pg_schema schema : Set PostgreSQL&#39;s search_path.&#xA;    -o | --out file   : Set the path to the output file where SQL will&#xA;                        be written. Default: output.sql in running directory.&#xA;    -p | --plsql      : Enable PLSQL to PLPGSQL code conversion.&#xA;    -P | --parallel num: Number of parallel tables to extract at the same time.&#xA;    -q | --quiet      : Disable progress bar.&#xA;    -r | --relative   : use \ir instead of \i in the psql scripts generated.&#xA;    -s | --source DSN : Allow to set the Oracle DBI datasource.&#xA;    -S | --scn    SCN : Allow to set the Oracle System Change Number (SCN) to&#xA;                        use to export data. It will be used in the WHERE clause&#xA;                        to get the data. It is used with action COPY or INSERT.&#xA;    -t | --type export: Set the export type. It will override the one&#xA;                        given in the configuration file (TYPE).&#xA;    -T | --temp_dir dir: Set a distinct temporary directory when two&#xA;                        or more ora2pg are run in parallel.&#xA;    -u | --user name  : Set the Oracle database connection user.&#xA;                        ORA2PG_USER environment variable can be used instead.&#xA;    -v | --version    : Show Ora2Pg Version and exit.&#xA;    -w | --password pwd : Set the password of the Oracle database user.&#xA;                        ORA2PG_PASSWD environment variable can be used instead.&#xA;    -W | --where clause : Set the WHERE clause to apply to the Oracle query to&#xA;                        retrieve data. Can be used multiple time.&#xA;    --forceowner      : Force ora2pg to set tables and sequences owner like in&#xA;                  Oracle database. If the value is set to a username this one&#xA;                  will be used as the objects owner. By default it&#39;s the user&#xA;                  used to connect to the Pg database that will be the owner.&#xA;    --nls_lang code: Set the Oracle NLS_LANG client encoding.&#xA;    --client_encoding code: Set the PostgreSQL client encoding.&#xA;    --view_as_table str: Comma separated list of views to export as table.&#xA;    --estimate_cost   : Activate the migration cost evaluation with SHOW_REPORT&#xA;    --cost_unit_value minutes: Number of minutes for a cost evaluation unit.&#xA;                  default: 5 minutes, corresponds to a migration conducted by a&#xA;                  PostgreSQL expert. Set it to 10 if this is your first migration.&#xA;   --dump_as_html     : Force ora2pg to dump report in HTML, used only with&#xA;                        SHOW_REPORT. Default is to dump report as simple text.&#xA;   --dump_as_csv      : As above but force ora2pg to dump report in CSV.&#xA;   --dump_as_json     : As above but force ora2pg to dump report in JSON.&#xA;   --dump_as_sheet    : Report migration assessment with one CSV line per database.&#xA;   --init_project name: Initialise a typical ora2pg project tree. Top directory&#xA;                        will be created under project base dir.&#xA;   --project_base dir : Define the base dir for ora2pg project trees. Default&#xA;                        is current directory.&#xA;   --print_header     : Used with --dump_as_sheet to print the CSV header&#xA;                        especially for the first run of ora2pg.&#xA;   --human_days_limit num : Set the number of person-days limit where the migration&#xA;                        assessment level switch from B to C. Default is set to&#xA;                        5 person-days.&#xA;   --audit_user list  : Comma separated list of usernames to filter queries in&#xA;                        the DBA_AUDIT_TRAIL table. Used only with SHOW_REPORT&#xA;                        and QUERY export type.&#xA;   --pg_dsn DSN       : Set the datasource to PostgreSQL for direct import.&#xA;   --pg_user name     : Set the PostgreSQL user to use.&#xA;   --pg_pwd password  : Set the PostgreSQL password to use.&#xA;   --count_rows       : Force ora2pg to perform a real row count in TEST,&#xA;                        TEST_COUNT and SHOW_TABLE actions.&#xA;   --no_header        : Do not append Ora2Pg header to output file&#xA;   --oracle_speed     : Use to know at which speed Oracle is able to send&#xA;                        data. No data will be processed or written.&#xA;   --ora2pg_speed     : Use to know at which speed Ora2Pg is able to send&#xA;                        transformed data. Nothing will be written.&#xA;   --blob_to_lo       : export BLOB as large objects, can only be used with&#xA;                        action SHOW_COLUMN, TABLE and INSERT.&#xA;   --cdc_ready        : use current SCN per table to export data and register&#xA;                        them into a file named TABLES_SCN.log per default. It&#xA;                        can be changed using -C | --cdc_file.&#xA;   --lo_import        : use psql \lo_import command to import BLOB as large&#xA;                        object. Can be use to import data with COPY and import&#xA;                        large object manually in a second pass. It is recquired&#xA;                        for BLOB &amp;gt; 1GB. See documentation for more explanation.&#xA;   --mview_as_table str: Comma separated list of materialized views to export&#xA;                        as regular table.&#xA;   --drop_if_exists   : Drop the object before creation if it exists.&#xA;   --delete clause    : Set the DELETE clause to apply to the Oracle query to&#xA;                        be applied before importing data. Can be used multiple&#xA;                        time.&#xA;   --oracle_fdw_prefetch: Set the oracle_fdw prefetch value. Larger values&#xA;                        generally result in faster data transfer at the cost&#xA;                        of greater memory utilisation at the destination.&#xA;&#xA;See full documentation at https://ora2pg.darold.net/ for more help or&#xA;see manpage with &#39;man ora2pg&#39;.&#xA;&#xA;ora2pg will return 0 on success, 1 on error. It will return 2 when a&#xA;child process has been interrupted and you&#39;ve gotten the warning&#xA;message: &#34;WARNING: an error occurs during data export. Please check&#xA;what&#39;s happen.&#34; Most of the time this is an OOM issue, first try&#xA;reducing DATA_LIMIT value.&#xA;&#xA;For developers, it is possible to add your own custom option(s) in the&#xA;Perl script ora2pg as any configuration directive from ora2pg.conf can&#xA;be passed in lower case to the new Ora2Pg object instance. See ora2pg&#xA;code on how to add your own option.&#xA;&#xA;Note that performance might be improved by updating stats on oracle:&#xA;&#xA;        BEGIN&#xA;        DBMS_STATS.GATHER_SCHEMA_STATS&#xA;        DBMS_STATS.GATHER_DATABASE_STATS &#xA;        DBMS_STATS.GATHER_DICTIONARY_STATS&#xA;        END;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate a migration template The two options --project_base and --init_project when used indicate to ora2pg that he has to create a project template with a work tree, a configuration file and a script to export all objects from the Oracle database. Here a sample of the command usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        ora2pg --project_base /app/migration/ --init_project test_project&#xA;        Creating project test_project.&#xA;        /app/migration/test_project/&#xA;                schema/&#xA;                        dblinks/&#xA;                        directories/&#xA;                        functions/&#xA;                        grants/&#xA;                        mviews/&#xA;                        packages/&#xA;                        partitions/&#xA;                        procedures/&#xA;                        sequences/&#xA;                        synonyms/&#xA;                        tables/&#xA;                        tablespaces/&#xA;                        triggers/&#xA;                        types/&#xA;                        views/&#xA;                sources/&#xA;                        functions/&#xA;                        mviews/&#xA;                        packages/&#xA;                        partitions/&#xA;                        procedures/&#xA;                        triggers/&#xA;                        types/&#xA;                        views/&#xA;                data/&#xA;                config/&#xA;                reports/&#xA;&#xA;        Generating generic configuration file&#xA;        Creating script export_schema.sh to automate all exports.&#xA;        Creating script import_all.sh to automate all imports.&#xA;&#xA;It create a generic config file where you just have to define the Oracle&#xA;database connection and a shell script called export_schema.sh. The&#xA;sources/ directory will contains the Oracle code, the schema/ will&#xA;contains the code ported to PostgreSQL. The reports/ directory will&#xA;contains the html reports with the migration cost assessment.&#xA;&#xA;If you want to use your own default config file, use the -c option to&#xA;give the path to that file. Rename it with .dist suffix if you want&#xA;ora2pg to apply the generic configuration values otherwise, the&#xA;configuration file will be copied untouched.&#xA;&#xA;Once you have set the connection to the Oracle Database you can execute&#xA;the script export_schema.sh that will export all object type from your&#xA;Oracle database and output DDL files into the schema&#39;s subdirectories.&#xA;At end of the export it will give you the command to export data later&#xA;when the import of the schema will be done and verified.&#xA;&#xA;You can choose to load the DDL files generated manually or use the&#xA;second script import_all.sh to import those file interactively. If this&#xA;kind of migration is not something current for you it&#39;s recommended you&#xA;to use those scripts.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Oracle database connection There&#39;s 5 configuration directives to control the access to the Oracle database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ORACLE_HOME&#xA;    Used to set ORACLE_HOME environment variable to the Oracle libraries&#xA;    required by the DBD::Oracle Perl module.&#xA;&#xA;ORACLE_DSN&#xA;    This directive is used to set the data source name in the form&#xA;    standard DBI DSN. For example:&#xA;&#xA;            dbi:Oracle:host=oradb_host.myhost.com;sid=DB_SID;port=1521&#xA;&#xA;    or&#xA;&#xA;            dbi:Oracle:DB_SID&#xA;&#xA;    On 18c this could be for example:&#xA;&#xA;            dbi:Oracle:host=192.168.1.29;service_name=pdb1;port=1521&#xA;&#xA;    for the second notation the SID should be declared in the well known&#xA;    file $ORACLE_HOME/network/admin/tnsnames.ora or in the path given to&#xA;    the TNS_ADMIN environment variable.&#xA;&#xA;    For MySQL the DSN will lool like this:&#xA;&#xA;            dbi:mysql:host=192.168.1.10;database=sakila;port=3306&#xA;&#xA;    the &#39;sid&#39; part is replaced by &#39;database&#39;.&#xA;&#xA;    For MS SQL Server it will look like this:&#xA;&#xA;            dbi:ODBC:driver=msodbcsql18;server=mydb.database.windows.net;database=testdb;TrustServerCertificate=yes&#xA;&#xA;ORACLE_USER et ORACLE_PWD&#xA;    These two directives are used to define the user and password for&#xA;    the Oracle database connection. Note that if you can it is better to&#xA;    login as Oracle super admin to avoid grants problem during the&#xA;    database scan and be sure that nothing is missing.&#xA;&#xA;    If you do not supply a credential with ORACLE_PWD and you have&#xA;    installed the Term::ReadKey Perl module, Ora2Pg will ask for the&#xA;    password interactively. If ORACLE_USER is not set it will be asked&#xA;    interactively too.&#xA;&#xA;    To connect to a local ORACLE instance with connections &#34;as sysdba&#34;&#xA;    you have to set ORACLE_USER to &#34;/&#34; and an empty password.&#xA;&#xA;    To make a connection using an Oracle Secure External Password Store&#xA;    (SEPS), first configure the Oracle Wallet and then set both the&#xA;    ORACLE_USER and ORACLE_PWD directives to the special value of&#xA;    &#34;__SEPS__&#34; (without the quotes but with the double underscore).&#xA;&#xA;USER_GRANTS&#xA;    Set this directive to 1 if you connect the Oracle database as simple&#xA;    user and do not have enough grants to extract things from the&#xA;    DBA_... tables. It will use tables ALL_... instead.&#xA;&#xA;    Warning: if you use export type GRANT, you must set this&#xA;    configuration option to 0 or it will not work.&#xA;&#xA;TRANSACTION&#xA;    This directive may be used if you want to change the default&#xA;    isolation level of the data export transaction. Default is now to&#xA;    set the level to a serializable transaction to ensure data&#xA;    consistency. The allowed values for this directive are:&#xA;&#xA;            readonly: &#39;SET TRANSACTION READ ONLY&#39;,&#xA;            readwrite: &#39;SET TRANSACTION READ WRITE&#39;,&#xA;            serializable: &#39;SET TRANSACTION ISOLATION LEVEL SERIALIZABLE&#39;&#xA;            committed: &#39;SET TRANSACTION ISOLATION LEVEL READ COMMITTED&#39;,&#xA;&#xA;    Releases before 6.2 used to set the isolation level to READ ONLY&#xA;    transaction but in some case this was breaking data consistency so&#xA;    now default is set to SERIALIZABLE.&#xA;&#xA;INPUT_FILE&#xA;    This directive did not control the Oracle database connection or&#xA;    unless it purely disables the use of any Oracle database by&#xA;    accepting a file as argument. Set this directive to a file&#xA;    containing PL/SQL Oracle Code like function, procedure or full&#xA;    package body to prevent Ora2Pg from connecting to an Oracle database&#xA;    and just apply his conversion tool to the content of the file. This&#xA;    can be used with the most of export types: TABLE, TRIGGER,&#xA;    PROCEDURE, VIEW, FUNCTION or PACKAGE, etc.&#xA;&#xA;ORA_INITIAL_COMMAND&#xA;    This directive can be used to send an initial command to Oracle,&#xA;    just after the connection. For example to unlock a policy before&#xA;    reading objects or to set some session parameters. This directive&#xA;    can be used multiple times.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Data encryption with Oracle server If your Oracle Client config file already includes the encryption method, then DBD:Oracle uses those settings to encrypt the connection while you extract the data. For example if you have configured the Oracle Client config file (sqlnet.ora or .sqlnet) with the following information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        # Configure encryption of connections to Oracle&#xA;        SQLNET.ENCRYPTION_CLIENT = required&#xA;        SQLNET.ENCRYPTION_TYPES_CLIENT = (AES256, RC4_256)&#xA;        SQLNET.CRYPTO_SEED = &#39;should be 10-70 random characters&#39;&#xA;&#xA;Any tool that uses the Oracle client to talk to the database will be&#xA;encrypted if you setup session encryption like above.&#xA;&#xA;For example, Perl&#39;s DBI uses DBD-Oracle, which uses the Oracle client&#xA;for actually handling database communication. If the installation of&#xA;Oracle client used by Perl is setup to request encrypted connections,&#xA;then your Perl connection to an Oracle database will also be encrypted.&#xA;&#xA;Full details at&#xA;https://kb.berkeley.edu/jivekb/entry.jspa?externalID=1005&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing connection Once you have set the Oracle database DSN you can execute ora2pg to see if it works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        ora2pg -t SHOW_VERSION -c config/ora2pg.conf&#xA;&#xA;will show the Oracle database server version. Take some time here to&#xA;test your installation as most problems take place here, the other&#xA;configuration steps are more technical.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Troubleshooting If the output.sql file has not exported anything other than the Pg transaction header and footer there&#39;s two possible reasons. The perl script ora2pg dump an ORA-XXX error, that mean that your DSN or login information are wrong, check the error and your settings and try again. The perl script says nothing and the output file is empty: the user lacks permission to extract something from the database. Try to connect to Oracle as super user or take a look at directive USER_GRANTS above and at next section, especially the SCHEMA directive.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LOGFILE&#xA;    By default all messages are sent to the standard output. If you give&#xA;    a file path to that directive, all output will be appended to this&#xA;    file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Oracle schema to export The Oracle database export can be limited to a specific Schema or Namespace, this can be mandatory following the database connection user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SCHEMA&#xA;    This directive is used to set the schema name to use during export.&#xA;    For example:&#xA;&#xA;            SCHEMA  APPS&#xA;&#xA;    will extract objects associated to the APPS schema.&#xA;&#xA;    When no schema name is provided and EXPORT_SCHEMA is enabled, Ora2Pg&#xA;    will export all objects from all schema of the Oracle instance with&#xA;    their names prefixed with the schema name.&#xA;&#xA;EXPORT_SCHEMA&#xA;    By default the Oracle schema is not exported into the PostgreSQL&#xA;    database and all objects are created under the default Pg namespace.&#xA;    If you want to also export this schema and create all objects under&#xA;    this namespace, set the EXPORT_SCHEMA directive to 1. This will set&#xA;    the schema search_path at top of export SQL file to the schema name&#xA;    set in the SCHEMA directive with the default pg_catalog schema. If&#xA;    you want to change this path, use the directive PG_SCHEMA.&#xA;&#xA;CREATE_SCHEMA&#xA;    Enable/disable the CREATE SCHEMA SQL order at starting of the output&#xA;    file. It is enable by default and concern on TABLE export type.&#xA;&#xA;COMPILE_SCHEMA&#xA;    By default Ora2Pg will only export valid PL/SQL code. You can force&#xA;    Oracle to compile again the invalidated code to get a chance to have&#xA;    it obtain the valid status and then be able to export it.&#xA;&#xA;    Enable this directive to force Oracle to compile schema before&#xA;    exporting code. When this directive is enabled and SCHEMA is set to&#xA;    a specific schema name, only invalid objects in this schema will be&#xA;    recompiled. If SCHEMA is not set then all schema will be recompiled.&#xA;    To force recompile invalid object in a specific schema, set&#xA;    COMPILE_SCHEMA to the schema name you want to recompile.&#xA;&#xA;    This will ask to Oracle to validate the PL/SQL that could have been&#xA;    invalidate after a export/import for example. The &#39;VALID&#39; or&#xA;    &#39;INVALID&#39; status applies to functions, procedures, packages and user&#xA;    defined types. It also concern disabled triggers.&#xA;&#xA;EXPORT_INVALID&#xA;    If the above configuration directive is not enough to validate your&#xA;    PL/SQL code enable this configuration directive to allow export of&#xA;    all PL/SQL code even if it is marked as invalid. The &#39;VALID&#39; or&#xA;    &#39;INVALID&#39; status applies to functions, procedures, packages,&#xA;    triggers and user defined types.&#xA;&#xA;PG_SCHEMA&#xA;    Allow you to defined/force the PostgreSQL schema to use. By default&#xA;    if you set EXPORT_SCHEMA to 1 the PostgreSQL search_path will be set&#xA;    to the schema name exported set as value of the SCHEMA directive.&#xA;&#xA;    The value can be a comma delimited list of schema name but not when&#xA;    using TABLE export type because in this case it will generate the&#xA;    CREATE SCHEMA statement and it doesn&#39;t support multiple schema name.&#xA;    For example, if you set PG_SCHEMA to something like &#34;user_schema,&#xA;    public&#34;, the search path will be set like this:&#xA;&#xA;            SET search_path = user_schema, public;&#xA;&#xA;    forcing the use of an other schema (here user_schema) than the one&#xA;    from Oracle schema set in the SCHEMA directive.&#xA;&#xA;    You can also set the default search_path for the PostgreSQL user you&#xA;    are using to connect to the destination database by using:&#xA;&#xA;            ALTER ROLE username SET search_path TO user_schema, public;&#xA;&#xA;    in this case you don&#39;t have to set PG_SCHEMA.&#xA;&#xA;SYSUSERS&#xA;    Without explicit schema, Ora2Pg will export all objects that not&#xA;    belongs to system schema or role:&#xA;&#xA;            SYSTEM,CTXSYS,DBSNMP,EXFSYS,LBACSYS,MDSYS,MGMT_VIEW,&#xA;            OLAPSYS,ORDDATA,OWBSYS,ORDPLUGINS,ORDSYS,OUTLN,&#xA;            SI_INFORMTN_SCHEMA,SYS,SYSMAN,WK_TEST,WKSYS,WKPROXY,&#xA;            WMSYS,XDB,APEX_PUBLIC_USER,DIP,FLOWS_020100,FLOWS_030000,&#xA;            FLOWS_040100,FLOWS_010600,FLOWS_FILES,MDDATA,ORACLE_OCM,&#xA;            SPATIAL_CSW_ADMIN_USR,SPATIAL_WFS_ADMIN_USR,XS$NULL,PERFSTAT,&#xA;            SQLTXPLAIN,DMSYS,TSMSYS,WKSYS,APEX_040000,APEX_040200,&#xA;            DVSYS,OJVMSYS,GSMADMIN_INTERNAL,APPQOSSYS,DVSYS,DVF,&#xA;            AUDSYS,APEX_030200,MGMT_VIEW,ODM,ODM_MTR,TRACESRV,MTMSYS,&#xA;            OWBSYS_AUDIT,WEBSYS,WK_PROXY,OSE$HTTP$ADMIN,&#xA;            AURORA$JIS$UTILITY$,AURORA$ORB$UNAUTHENTICATED,&#xA;            DBMS_PRIVILEGE_CAPTURE,CSMIG,MGDSYS,SDE,DBSFWUSER&#xA;&#xA;    Following your Oracle installation you may have several other system&#xA;    role defined. To append these users to the schema exclusion list,&#xA;    just set the SYSUSERS configuration directive to a comma-separated&#xA;    list of system user to exclude. For example:&#xA;&#xA;            SYSUSERS        INTERNAL,SYSDBA,BI,HR,IX,OE,PM,SH&#xA;&#xA;    will add users INTERNAL and SYSDBA to the schema exclusion list.&#xA;&#xA;FORCE_OWNER&#xA;    By default the owner of the database objects is the one you&#39;re using&#xA;    to connect to PostgreSQL using the psql command. If you use an other&#xA;    user (postgres for example) you can force Ora2Pg to set the object&#xA;    owner to be the one used in the Oracle database by setting the&#xA;    directive to 1, or to a completely different username by setting the&#xA;    directive value to that username.&#xA;&#xA;FORCE_SECURITY_INVOKER&#xA;    Ora2Pg use the function&#39;s security privileges set in Oracle and it&#xA;    is often defined as SECURITY DEFINER. If you want to override those&#xA;    security privileges for all functions and use SECURITY DEFINER&#xA;    instead, enable this directive.&#xA;&#xA;USE_TABLESPACE&#xA;    When enabled this directive force ora2pg to export all tables,&#xA;    indexes constraint and indexes using the tablespace name defined in&#xA;    Oracle database. This works only with tablespace that are not TEMP,&#xA;    USERS and SYSTEM.&#xA;&#xA;WITH_OID&#xA;    Activating this directive will force Ora2Pg to add WITH (OIDS) when&#xA;    creating tables or views as tables. Default is same as PostgreSQL,&#xA;    disabled.&#xA;&#xA;LOOK_FORWARD_FUNCTION&#xA;    List of schema to get functions/procedures meta information that are&#xA;    used in the current schema export. When replacing call to function&#xA;    with OUT parameters, if a function is declared in an other package&#xA;    then the function call rewriting can not be done because Ora2Pg only&#xA;    knows about functions declared in the current schema. By setting a&#xA;    comma separated list of schema as value of this directive, Ora2Pg&#xA;    will look forward in these packages for all&#xA;    functions/procedures/packages declaration before proceeding to&#xA;    current schema export.&#xA;&#xA;NO_FUNCTION_METADATA&#xA;    Force Ora2Pg to not look for function declaration. Note that this&#xA;    will prevent Ora2Pg to rewrite function replacement call if needed.&#xA;    Do not enable it unless looking forward at function breaks other&#xA;    export.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export type The export action is perform following a single configuration directive &#39;TYPE&#39;, some other add more control on what should be really exported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TYPE&#xA;    Here are the different values of the TYPE directive, default is&#xA;    TABLE:&#xA;&#xA;            - TABLE: Extract all tables with indexes, primary keys, unique keys,&#xA;              foreign keys and check constraints.&#xA;            - VIEW: Extract only views.&#xA;            - GRANT: Extract roles converted to Pg groups, users and grants on all&#xA;              objects.&#xA;            - SEQUENCE: Extract all sequence and their last position.&#xA;            - TABLESPACE: Extract storage spaces for tables and indexes (Pg &amp;gt;= v8).&#xA;            - TRIGGER: Extract triggers defined following actions.&#xA;            - FUNCTION: Extract functions.&#xA;            - PROCEDURE: Extract procedures.&#xA;            - PACKAGE: Extract packages and package bodies.&#xA;            - INSERT: Extract data as INSERT statement.&#xA;            - COPY: Extract data as COPY statement.&#xA;            - PARTITION: Extract range and list Oracle partitions with subpartitions.&#xA;            - TYPE: Extract user defined Oracle type.&#xA;            - FDW: Export Oracle tables as foreign table for Oracle, MySQL and SQL Server FDW.&#xA;            - MVIEW: Export materialized view.&#xA;            - QUERY: Try to automatically convert Oracle SQL queries.&#xA;            - KETTLE: Generate XML ktr template files to be used by Kettle.&#xA;            - DBLINK: Generate oracle foreign data wrapper server to use as dblink.&#xA;            - SYNONYM: Export Oracle&#39;s synonyms as views on other schema&#39;s objects.&#xA;            - DIRECTORY: Export Oracle&#39;s directories as external_file extension objects.&#xA;            - LOAD: Dispatch a list of queries over multiple PostgreSQl connections.&#xA;            - TEST: perform a diff between Oracle and PostgreSQL database.&#xA;            - TEST_COUNT: perform a row count diff between Oracle and PostgreSQL table.&#xA;            - TEST_VIEW: perform a count on both side of number of rows returned by views.&#xA;            - TEST_DATA: perform data validation check on rows at both sides.&#xA;            - SEQUENCE_VALUES: export DDL to set the last values of sequences&#xA;&#xA;    Only one type of export can be perform at the same time so the TYPE&#xA;    directive must be unique. If you have more than one only the last&#xA;    found in the file will be registered.&#xA;&#xA;    Some export type can not or should not be load directly into the&#xA;    PostgreSQL database and still require little manual editing. This is&#xA;    the case for GRANT, TABLESPACE, TRIGGER, FUNCTION, PROCEDURE, TYPE,&#xA;    QUERY and PACKAGE export types especially if you have PLSQL code or&#xA;    Oracle specific SQL in it.&#xA;&#xA;    For TABLESPACE you must ensure that file path exist on the system&#xA;    and for SYNONYM you may ensure that the object&#39;s owners and schemas&#xA;    correspond to the new PostgreSQL database design.&#xA;&#xA;    Note that you can chained multiple export by giving to the TYPE&#xA;    directive a comma-separated list of export type, but in this case&#xA;    you must not use COPY or INSERT with other export type.&#xA;&#xA;    Ora2Pg will convert Oracle partition using table inheritance,&#xA;    trigger and functions. See document at Pg site:&#xA;    http://www.postgresql.org/docs/current/interactive/ddl-partitioning.&#xA;    html&#xA;&#xA;    The TYPE export allow export of user defined Oracle type. If you&#xA;    don&#39;t use the --plsql command line parameter it simply dump Oracle&#xA;    user type asis else Ora2Pg will try to convert it to PostgreSQL&#xA;    syntax.&#xA;&#xA;    The KETTLE export type requires that the Oracle and PostgreSQL DNS&#xA;    are defined.&#xA;&#xA;    Since Ora2Pg v8.1 there&#39;s three new export types:&#xA;&#xA;            SHOW_VERSION : display Oracle version&#xA;            SHOW_SCHEMA  : display the list of schema available in the database.&#xA;            SHOW_TABLE   : display the list of tables available.&#xA;            SHOW_COLUMN  : display the list of tables columns available and the&#xA;                    Ora2PG conversion type from Oracle to PostgreSQL that will be&#xA;                    applied. It will also warn you if there&#39;s PostgreSQL reserved&#xA;                    words in Oracle object names.&#xA;&#xA;    Here is an example of the SHOW_COLUMN output:&#xA;&#xA;            [2] TABLE CURRENT_SCHEMA (1 rows) (Warning: &#39;CURRENT_SCHEMA&#39; is a reserved word in PostgreSQL)&#xA;                    CONSTRAINT : NUMBER(22) =&amp;gt; bigint (Warning: &#39;CONSTRAINT&#39; is a reserved word in PostgreSQL)&#xA;                    FREEZE : VARCHAR2(25) =&amp;gt; varchar(25) (Warning: &#39;FREEZE&#39; is a reserved word in PostgreSQL)&#xA;            ...&#xA;            [6] TABLE LOCATIONS (23 rows)&#xA;                    LOCATION_ID : NUMBER(4) =&amp;gt; smallint&#xA;                    STREET_ADDRESS : VARCHAR2(40) =&amp;gt; varchar(40)&#xA;                    POSTAL_CODE : VARCHAR2(12) =&amp;gt; varchar(12)&#xA;                    CITY : VARCHAR2(30) =&amp;gt; varchar(30)&#xA;                    STATE_PROVINCE : VARCHAR2(25) =&amp;gt; varchar(25)&#xA;                    COUNTRY_ID : CHAR(2) =&amp;gt; char(2)&#xA;&#xA;    Those extraction keywords are use to only display the requested&#xA;    information and exit. This allows you to quickly know on what you&#xA;    are going to work.&#xA;&#xA;    The SHOW_COLUMN allow an other ora2pg command line option: &#39;--allow&#xA;    relname&#39; or &#39;-a relname&#39; to limit the displayed information to the&#xA;    given table.&#xA;&#xA;    The SHOW_ENCODING export type will display the NLS_LANG and&#xA;    CLIENT_ENCODING values that Ora2Pg will used and the real encoding&#xA;    of the Oracle database with the corresponding client encoding that&#xA;    could be used with PostgreSQL&#xA;&#xA;    Ora2Pg allow you to export your Oracle, MySQL or MSSQL table&#xA;    definition to be use with the oracle_fdw, mysql_fdw or tds_fdw&#xA;    foreign data wrapper. By using type FDW your tables will be exported&#xA;    as follow:&#xA;&#xA;            CREATE FOREIGN TABLE oratab (&#xA;                    id        integer           NOT NULL,&#xA;                    text      character varying(30),&#xA;                    floating  double precision  NOT NULL&#xA;            ) SERVER oradb OPTIONS (table &#39;ORATAB&#39;);&#xA;&#xA;    Now you can use the table like a regular PostgreSQL table.&#xA;&#xA;    Release 10 adds a new export type destined to evaluate the content&#xA;    of the database to migrate, in terms of objects and cost to end the&#xA;    migration:&#xA;&#xA;            SHOW_REPORT  : show a detailed report of the Oracle database content.&#xA;&#xA;    Here is a sample of report: http://ora2pg.darold.net/report.html&#xA;&#xA;    There also a more advanced report with migration cost. See the&#xA;    dedicated chapter about Migration Cost Evaluation.&#xA;&#xA;ESTIMATE_COST&#xA;    Activate the migration cost evaluation. Must only be used with&#xA;    SHOW_REPORT, FUNCTION, PROCEDURE, PACKAGE and QUERY export type.&#xA;    Default is disabled. You may want to use the --estimate_cost command&#xA;    line option instead to activate this functionality. Note that&#xA;    enabling this directive will force PLSQL_PGSQL activation.&#xA;&#xA;COST_UNIT_VALUE&#xA;    Set the value in minutes of the migration cost evaluation unit.&#xA;    Default is five minutes per unit. See --cost_unit_value to change&#xA;    the unit value at command line.&#xA;&#xA;DUMP_AS_HTML&#xA;    By default when using SHOW_REPORT the migration report is generated&#xA;    as simple text, enabling this directive will force ora2pg to create&#xA;    a report in HTML format.&#xA;&#xA;    See http://ora2pg.darold.net/report.html for a sample report.&#xA;&#xA;HUMAN_DAYS_LIMIT&#xA;    Use this directive to redefined the number of person-days limit&#xA;    where the migration assessment level must switch from B to C.&#xA;    Default is set to 10 person-days.&#xA;&#xA;JOBS&#xA;    This configuration directive adds multiprocess support to COPY,&#xA;    FUNCTION and PROCEDURE export type, the value is the number of&#xA;    process to use. Default is multiprocess disable.&#xA;&#xA;    This directive is used to set the number of cores to used to&#xA;    parallelize data import into PostgreSQL. During FUNCTION or&#xA;    PROCEDURE export type each function will be translated to plpgsql&#xA;    using a new process, the performances gain can be very important&#xA;    when you have tons of function to convert.&#xA;&#xA;    There&#39;s no limitation in parallel processing than the number of&#xA;    cores and the PostgreSQL I/O performance capabilities.&#xA;&#xA;    Doesn&#39;t work under Windows Operating System, it is simply disabled.&#xA;&#xA;ORACLE_COPIES&#xA;    This configuration directive adds multiprocess support to extract&#xA;    data from Oracle. The value is the number of process to use to&#xA;    parallelize the select query. Default is parallel query disable.&#xA;&#xA;    The parallelism is built on splitting the query following of the&#xA;    number of cores given as value to ORACLE_COPIES as follow:&#xA;&#xA;            SELECT * FROM MYTABLE WHERE ABS(MOD(COLUMN, ORACLE_COPIES)) = CUR_PROC&#xA;&#xA;    where COLUMN is a technical key like a primary or unique key where&#xA;    split will be based and the current core used by the query&#xA;    (CUR_PROC). You can also force the column name to use using the&#xA;    DEFINED_PK configuration directive.&#xA;&#xA;    Doesn&#39;t work under Windows Operating System, it is simply disabled.&#xA;&#xA;DEFINED_PK&#xA;    This directive is used to defined the technical key to used to split&#xA;    the query between number of cores set with the ORACLE_COPIES&#xA;    variable. For example:&#xA;&#xA;            DEFINED_PK      EMPLOYEES:employee_id&#xA;&#xA;    The parallel query that will be used supposing that -J or&#xA;    ORACLE_COPIES is set to 8:&#xA;&#xA;            SELECT * FROM EMPLOYEES WHERE ABS(MOD(employee_id, 8)) = N&#xA;&#xA;    where N is the current process forked starting from 0.&#xA;&#xA;PARALLEL_TABLES&#xA;    This directive is used to defined the number of tables that will be&#xA;    processed in parallel for data extraction. The limit is the number&#xA;    of cores on your machine. Ora2Pg will open one database connection&#xA;    for each parallel table extraction. This directive, when upper than&#xA;    1, will invalidate ORACLE_COPIES but not JOBS, so the real number of&#xA;    process that will be used is PARALLEL_TABLES * JOBS.&#xA;&#xA;    Note that this directive when set upper that 1 will also&#xA;    automatically enable the FILE_PER_TABLE directive if your are&#xA;    exporting to files. This is used to export tables and views in&#xA;    separate files.&#xA;&#xA;    Use PARALLEL_TABLES to use parallelism with COPY, INSERT and&#xA;    TEST_DATA actions. It is also useful with TEST, TEST_COUNT, and&#xA;    SHOW_TABLE if --count_rows is used for real row count.&#xA;&#xA;DEFAULT_PARALLELISM_DEGREE&#xA;    You can force Ora2Pg to use /*+ PARALLEL(tbname, degree) */ hint in&#xA;    each query used to export data from Oracle by setting a value upper&#xA;    than 1 to this directive. A value of 0 or 1 disable the use of&#xA;    parallel hint. Default is disabled.&#xA;&#xA;FDW_SERVER&#xA;    This directive is used to set the name of the foreign data server&#xA;    that is used in the &#34;CREATE SERVER name FOREIGN DATA WRAPPER&#xA;    &amp;lt;fdw_extension&amp;gt; ...&#34; command. This name will then be used in the&#xA;    &#34;CREATE FOREIGN TABLE ...&#34; SQL commands and to import data using&#xA;    oracle_fdw. Default is no foreign server defined. This only concerns&#xA;    export type FDW, COPY and INSERT. For export type FDW the default&#xA;    value is orcl.&#xA;&#xA;FDW_IMPORT_SCHEMA&#xA;    Schema where foreign tables for data migration will be created. If&#xA;    you use several instances of ora2pg for data migration through the&#xA;    foreign data wrapper, you might need to change the name of the&#xA;    schema for each instance. Default: ora2pg_fdw_import&#xA;&#xA;ORACLE_FDW_PREFETCH&#xA;    The default behaviour of Ora2Pg is to NOT set the &#34;prefetch&#34; option&#xA;    for oracle_fdw when used for COPY and INSERT. This directive allows&#xA;    the prefetch to be set. See oracle_fdw documentation for the current&#xA;    default.&#xA;&#xA;DROP_FOREIGN_SCHEMA&#xA;    By default Ora2Pg drops the temporary schema ora2pg_fdw_import used&#xA;    to import the Oracle foreign schema before each new import. If you&#xA;    want to preserve the existing schema because of modifications or the&#xA;    use of a third party server, disable this directive.&#xA;&#xA;EXTERNAL_TO_FDW&#xA;    This directive, enabled by default, allow to export Oracle&#39;s&#xA;    External Tables as file_fdw foreign tables. To not export these&#xA;    tables at all, set the directive to 0.&#xA;&#xA;INTERNAL_DATE_MAX&#xA;    Internal timestamp retrieves from custom type are extracted in the&#xA;    following format: 01-JAN-77 12.00.00.000000 AM. It is impossible to&#xA;    know the exact century that must be used, so by default any year&#xA;    below 49 will be added to 2000 and others to 1900. You can use this&#xA;    directive to change the default value 49. this is only relevant if&#xA;    you have user defined type with a column timestamp.&#xA;&#xA;AUDIT_USER&#xA;    Set the comma separated list of username that must be used to filter&#xA;    queries from the DBA_AUDIT_TRAIL table. Default is to not scan this&#xA;    table and to never look for queries. This parameter is used only&#xA;    with SHOW_REPORT and QUERY export type with no input file for&#xA;    queries. Note that queries will be normalized before output unlike&#xA;    when a file is given at input using the -i option or INPUT&#xA;    directive.&#xA;&#xA;FUNCTION_CHECK&#xA;    Disable this directive if you want to disable check_function_bodies.&#xA;&#xA;            SET check_function_bodies = false;&#xA;&#xA;    It disables validation of the function body string during CREATE&#xA;    FUNCTION. Default is to use de postgresql.conf setting that enable&#xA;    it by default.&#xA;&#xA;ENABLE_BLOB_EXPORT&#xA;    Exporting BLOB takes time, in some circumstances you may want to&#xA;    export all data except the BLOB columns. In this case disable this&#xA;    directive and the BLOB columns will not be included into data&#xA;    export. Take care that the target bytea column do not have a NOT&#xA;    NULL constraint.&#xA;&#xA;ENABLE_CLOB_EXPORT&#xA;    Same behavior as ENABLE_BLOB_EXPORT but for CLOB.&#xA;&#xA;DATA_EXPORT_ORDER&#xA;    By default data export order will be done by sorting on table name.&#xA;    If you have huge tables at end of alphabetic order and you are using&#xA;    multiprocess, it can be better to set the sort order on size so that&#xA;    multiple small tables can be processed before the largest tables&#xA;    finish. In this case set this directive to size. Possible values are&#xA;    name and size. Note that export type SHOW_TABLE and SHOW_COLUMN will&#xA;    use this sort order too, not only COPY or INSERT export type. If you&#xA;    want to give you custom export order, just give a filename as value&#xA;    that contains the ordered list of table to export. Must be a list of&#xA;    one table per line, in uppercase for Oracle.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Limiting objects to export You may want to export only a part of an Oracle database, here are a set of configuration directives that will allow you to control what parts of the database should be exported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ALLOW&#xA;    This directive allows you to set a list of objects on which the&#xA;    export must be limited, excluding all other objects in the same type&#xA;    of export. The value is a space or comma-separated list of objects&#xA;    name to export. You can include valid regex into the list. For&#xA;    example:&#xA;&#xA;            ALLOW           EMPLOYEES SALE_.* COUNTRIES .*_GEOM_SEQ&#xA;&#xA;    will export objects with name EMPLOYEES, COUNTRIES, all objects&#xA;    beginning with &#39;SALE_&#39; and all objects with a name ending by&#xA;    &#39;_GEOM_SEQ&#39;. The object depends of the export type. Note that regex&#xA;    will not works with 8i database, you must use the % placeholder&#xA;    instead, Ora2Pg will use the LIKE operator.&#xA;&#xA;    This is the manner to declare global filters that will be used with&#xA;    the current export type. You can also use extended filters that will&#xA;    be applied on specific objects or only on their related export type.&#xA;    For example:&#xA;&#xA;            ora2pg -p -c ora2pg.conf -t TRIGGER -a &#39;TABLE[employees]&#39;&#xA;&#xA;    will limit export of trigger to those defined on table employees. If&#xA;    you want to extract all triggers but not some INSTEAD OF triggers:&#xA;&#xA;            ora2pg -c ora2pg.conf -t TRIGGER -e &#39;VIEW[trg_view_.*]&#39;&#xA;&#xA;    Or a more complex form:&#xA;&#xA;            ora2pg -p -c ora2pg.conf -t TABLE -a &#39;TABLE[EMPLOYEES]&#39; \&#xA;                    -e &#39;INDEX[emp_.*];CKEY[emp_salary_min]&#39;&#xA;&#xA;    This command will export the definition of the employee table but&#xA;    will exclude all index beginning with &#39;emp_&#39; and the CHECK&#xA;    constraint called &#39;emp_salary_min&#39;.&#xA;&#xA;    When exporting partition you can exclude some partition tables by&#xA;    using&#xA;&#xA;            ora2pg -p -c ora2pg.conf -t PARTITION -e &#39;PARTITION[PART_199.* PART_198.*]&#39;&#xA;&#xA;    This will exclude partitioned tables for year 1980 to 1999 from the&#xA;    export but not the main partition table. The trigger will also be&#xA;    adapted to exclude those table.&#xA;&#xA;    With GRANT export you can use this extended form to exclude some&#xA;    users from the export or limit the export to some others:&#xA;&#xA;            ora2pg -p -c ora2pg.conf -t GRANT -a &#39;USER1 USER2&#39;&#xA;&#xA;    or&#xA;&#xA;            ora2pg -p -c ora2pg.conf -t GRANT -a &#39;GRANT[USER1 USER2]&#39;&#xA;&#xA;    will limit export grants to users USER1 and USER2. But if you don&#39;t&#xA;    want to export grants on some functions for these users, for&#xA;    example:&#xA;&#xA;            ora2pg -p -c ora2pg.conf -t GRANT -a &#39;USER1 USER2&#39; -e &#39;FUNCTION[adm_.*];PROCEDURE[adm_.*]&#39;&#xA;&#xA;    Advanced filters may need some learning.&#xA;&#xA;    Oracle doesn&#39;t allow the use of lookahead expression so you may want&#xA;    to exclude some object that match the ALLOW regexp you have defined.&#xA;    For example if you want to export all table starting with E but not&#xA;    those starting with EXP it is not possible to do that in a single&#xA;    expression. This is why you can start a regular expression with the&#xA;    ! character to exclude object matching the regexp given just after.&#xA;    Our previous example can be written as follow:&#xA;&#xA;            ALLOW   E.* !EXP.*&#xA;&#xA;    it will be translated into:&#xA;&#xA;             REGEXP_LIKE(..., &#39;^E.*$&#39;) AND NOT REGEXP_LIKE(..., &#39;^EXP.*$&#39;)&#xA;&#xA;    in the object search expression.&#xA;&#xA;EXCLUDE&#xA;    This directive is the opposite of the previous, it allow you to&#xA;    define a space or comma-separated list of object name to exclude&#xA;    from the export. You can include valid regex into the list. For&#xA;    example:&#xA;&#xA;            EXCLUDE         EMPLOYEES TMP_.* COUNTRIES&#xA;&#xA;    will exclude object with name EMPLOYEES, COUNTRIES and all tables&#xA;    beginning with &#39;tmp_&#39;.&#xA;&#xA;    For example, you can ban from export some unwanted function with&#xA;    this directive:&#xA;&#xA;            EXCLUDE         write_to_.* send_mail_.*&#xA;&#xA;    this example will exclude all functions, procedures or functions in&#xA;    a package with the name beginning with those regex. Note that regex&#xA;    will not work with 8i database, you must use the % placeholder&#xA;    instead, Ora2Pg will use the NOT LIKE operator.&#xA;&#xA;    See above (directive &#39;ALLOW&#39;) for the extended syntax.&#xA;&#xA;NO_EXCLUDED_TABLE&#xA;    By default Ora2Pg exclude from export some Oracle &#34;garbage&#34; tables&#xA;    that should never be part of an export. This behavior generates a&#xA;    lot of REGEXP_LIKE expressions which are slowing down the export&#xA;    when looking at tables. To disable this behavior enable this&#xA;    directive, you will have to exclude or clean up later by yourself&#xA;    the unwanted tables. The regexp used to exclude the table are&#xA;    defined in the array @EXCLUDED_TABLES in lib/Ora2Pg.pm. Note this is&#xA;    behavior is independant to the EXCLUDE configuration directive.&#xA;&#xA;VIEW_AS_TABLE&#xA;    Set which view to export as table. By default none. Value must be a&#xA;    list of view name or regexp separated by space or comma. If the&#xA;    object name is a view and the export type is TABLE, the view will be&#xA;    exported as a create table statement. If export type is COPY or&#xA;    INSERT, the corresponding data will be exported.&#xA;&#xA;    See chapter &#34;Exporting views as PostgreSQL table&#34; for more details.&#xA;&#xA;MVIEW_AS_TABLE&#xA;    Set which materialized view to export as table. By default none.&#xA;    Value must be a list of materialized view name or regexp separated&#xA;    by space or comma. If the object name is a materialized view and the&#xA;    export type is TABLE, the view will be exported as a create table&#xA;    statement. If export type is COPY or INSERT, the corresponding data&#xA;    will be exported.&#xA;&#xA;NO_VIEW_ORDERING&#xA;    By default Ora2Pg try to order views to avoid error at import time&#xA;    with nested views. With a huge number of views this can take a very&#xA;    long time, you can bypass this ordering by enabling this directive.&#xA;&#xA;GRANT_OBJECT&#xA;    When exporting GRANTs you can specify a comma separated list of&#xA;    objects for which privilege will be exported. Default is export for&#xA;    all objects. Here are the possibles values TABLE, VIEW, MATERIALIZED&#xA;    VIEW, SEQUENCE, PROCEDURE, FUNCTION, PACKAGE BODY, TYPE, SYNONYM,&#xA;    DIRECTORY. Only one object type is allowed at a time. For example&#xA;    set it to TABLE if you just want to export privilege on tables. You&#xA;    can use the -g option to overwrite it.&#xA;&#xA;    When used this directive prevent the export of users unless it is&#xA;    set to USER. In this case only users definitions are exported.&#xA;&#xA;WHERE&#xA;    This directive allows you to specify a WHERE clause filter when&#xA;    dumping the contents of tables. Value is constructs as follows:&#xA;    TABLE_NAME[WHERE_CLAUSE], or if you have only one where clause for&#xA;    each table just put the where clause as the value. Both are possible&#xA;    too. Here are some examples:&#xA;&#xA;            # Global where clause applying to all tables included in the export&#xA;            WHERE  1=1&#xA;&#xA;            # Apply the where clause only on table TABLE_NAME&#xA;            WHERE  TABLE_NAME[ID1=&#39;001&#39;]&#xA;&#xA;            # Applies two different clause on tables TABLE_NAME and OTHER_TABLE&#xA;            # and a generic where clause on DATE_CREATE to all other tables&#xA;            WHERE  TABLE_NAME[ID1=&#39;001&#39; OR ID1=&#39;002] DATE_CREATE &amp;gt; &#39;2001-01-01&#39; OTHER_TABLE[NAME=&#39;test&#39;]&#xA;&#xA;    Any where clause not included into a table name bracket clause will&#xA;    be applied to all exported table including the tables defined in the&#xA;    where clause. These WHERE clauses are very useful if you want to&#xA;    archive some data or at the opposite only export some recent data.&#xA;&#xA;    To be able to quickly test data import it is useful to limit data&#xA;    export to the first thousand tuples of each table. For Oracle define&#xA;    the following clause:&#xA;&#xA;            WHERE   ROWNUM &amp;lt; 1000&#xA;&#xA;    and for MySQL, use the following:&#xA;&#xA;            WHERE   1=1 LIMIT 1,1000&#xA;&#xA;    This can also be restricted to some tables data export.&#xA;&#xA;    Command line option -W or --where will override this directive for&#xA;    the global part and per table if the table names is the same.&#xA;&#xA;TOP_MAX&#xA;    This directive is used to limit the number of item shown in the top&#xA;    N lists like the top list of tables per number of rows and the top&#xA;    list of largest tables in megabytes. By default it is set to 10&#xA;    items.&#xA;&#xA;LOG_ON_ERROR&#xA;    Enable this directive if you want to continue direct data import on&#xA;    error. When Ora2Pg received an error in the COPY or INSERT statement&#xA;    from PostgreSQL it will log the statement to a file called&#xA;    TABLENAME_error.log in the output directory and continue to next&#xA;    bulk of data. Like this you can try to fix the statement and&#xA;    manually reload the error log file. Default is disabled: abort&#xA;    import on error.&#xA;&#xA;REPLACE_QUERY&#xA;    Sometime you may want to extract data from an Oracle table but you&#xA;    need a custom query for that. Not just a &#34;SELECT * FROM table&#34; like&#xA;    Ora2Pg do but a more complex query. This directive allows you to&#xA;    overwrite the query used by Ora2Pg to extract data. The format is&#xA;    TABLENAME[SQL_QUERY]. If you have multiple table to extract by&#xA;    replacing the Ora2Pg query, you can define multiple REPLACE_QUERY&#xA;    lines.&#xA;&#xA;            REPLACE_QUERY   EMPLOYEES[SELECT e.id,e.fisrtname,lastname FROM EMPLOYEES e JOIN EMP_UPDT u ON (e.id=u.id AND u.cdate&amp;gt;&#39;2014-08-01 00:00:00&#39;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Control of Full Text Search export Several directives can be used to control the way Ora2Pg will export the Oracle&#39;s Text search indexes. By default CONTEXT indexes will be exported to PostgreSQL FTS indexes but CTXCAT indexes will be exported as indexes using the pg_trgm extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CONTEXT_AS_TRGM&#xA;    Force Ora2Pg to translate Oracle Text indexes into PostgreSQL&#xA;    indexes using pg_trgm extension. Default is to translate CONTEXT&#xA;    indexes into FTS indexes and CTXCAT indexes using pg_trgm. Most of&#xA;    the time using pg_trgm is enough, this is why this directive stand&#xA;    for. You need to create the pg_trgm extension into the destination&#xA;    database before importing the objects:&#xA;&#xA;            CREATE EXTENSION pg_trgm;&#xA;&#xA;FTS_INDEX_ONLY&#xA;    By default Ora2Pg creates a function-based index to translate Oracle&#xA;    Text indexes.&#xA;&#xA;            CREATE INDEX ON t_document&#xA;                    USING gin(to_tsvector(&#39;pg_catalog.french&#39;, title));&#xA;&#xA;    You will have to rewrite the CONTAIN() clause using to_tsvector(),&#xA;    example:&#xA;&#xA;            SELECT id,title FROM t_document&#xA;                    WHERE to_tsvector(title)) @@ to_tsquery(&#39;search_word&#39;);&#xA;&#xA;    To force Ora2Pg to create an extra tsvector column with a dedicated&#xA;    triggers for FTS indexes, disable this directive. In this case,&#xA;    Ora2Pg will add the column as follow: ALTER TABLE t_document ADD&#xA;    COLUMN tsv_title tsvector; Then update the column to compute FTS&#xA;    vectors if data have been loaded before UPDATE t_document SET&#xA;    tsv_title = to_tsvector(&#39;pg_catalog.french&#39;, coalesce(title,&#39;&#39;)); To&#xA;    automatically update the column when a modification in the title&#xA;    column appears, Ora2Pg adds the following trigger:&#xA;&#xA;            CREATE FUNCTION tsv_t_document_title() RETURNS trigger AS $$&#xA;            BEGIN&#xA;                   IF TG_OP = &#39;INSERT&#39; OR new.title != old.title THEN&#xA;                           new.tsv_title :=&#xA;                           to_tsvector(&#39;pg_catalog.french&#39;, coalesce(new.title,&#39;&#39;));&#xA;                   END IF;&#xA;                   return new;&#xA;            END&#xA;            $$ LANGUAGE plpgsql;&#xA;            CREATE TRIGGER trig_tsv_t_document_title BEFORE INSERT OR UPDATE&#xA;             ON t_document&#xA;             FOR EACH ROW EXECUTE PROCEDURE tsv_t_document_title();&#xA;&#xA;    When the Oracle text index is defined over multiple column, Ora2Pg&#xA;    will use setweight() to set a weight in the order of the column&#xA;    declaration.&#xA;&#xA;FTS_CONFIG&#xA;    Use this directive to force text search configuration to use. When&#xA;    it is not set, Ora2Pg will autodetect the stemmer used by Oracle for&#xA;    each index and pg_catalog.english if the information is not found.&#xA;&#xA;USE_UNACCENT&#xA;    If you want to perform your text search in an accent insensitive&#xA;    way, enable this directive. Ora2Pg will create an helper function&#xA;    over unaccent() and creates the pg_trgm indexes using this function.&#xA;    With FTS Ora2Pg will redefine your text search configuration, for&#xA;    example:&#xA;&#xA;          CREATE TEXT SEARCH CONFIGURATION fr (COPY = french); &#xA;          ALTER TEXT SEARCH CONFIGURATION fr&#xA;                  ALTER MAPPING FOR hword, hword_part, word WITH unaccent, french_stem;&#xA;&#xA;    then set the FTS_CONFIG ora2pg.conf directive to fr instead of&#xA;    pg_catalog.english.&#xA;&#xA;    When enabled, Ora2pg will create the wrapper function:&#xA;&#xA;          CREATE OR REPLACE FUNCTION unaccent_immutable(text)&#xA;          RETURNS text AS&#xA;          $$&#xA;              SELECT public.unaccent(&#39;public.unaccent&#39;, $1);&#xA;          $$ LANGUAGE sql IMMUTABLE&#xA;             COST 1;&#xA;&#xA;    the indexes are exported as follow:&#xA;&#xA;          CREATE INDEX t_document_title_unaccent_trgm_idx ON t_document &#xA;              USING gin (unaccent_immutable(title) gin_trgm_ops);&#xA;&#xA;    In your queries you will need to use the same function in the search&#xA;    to be able to use the function-based index. Example:&#xA;&#xA;            SELECT * FROM t_document&#xA;                    WHERE unaccent_immutable(title) LIKE &#39;%donnees%&#39;;&#xA;&#xA;USE_LOWER_UNACCENT&#xA;    Same as above but call lower() in the unaccent_immutable() function:&#xA;&#xA;          CREATE OR REPLACE FUNCTION unaccent_immutable(text)&#xA;          RETURNS text AS&#xA;          $$&#xA;              SELECT lower(public.unaccent(&#39;public.unaccent&#39;, $1));&#xA;          $$ LANGUAGE sql IMMUTABLE;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modifying object structure One of the great usage of Ora2Pg is its flexibility to replicate Oracle database into PostgreSQL database with a different structure or schema. There&#39;s three configuration directives that allow you to map those differences.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;REORDERING_COLUMNS&#xA;    Enable this directive to reordering columns and minimized the&#xA;    footprint on disc, so that more rows fit on a data page, which is&#xA;    the most important factor for speed. Default is disabled, that mean&#xA;    the same order than in Oracle tables definition, that&#39;s should be&#xA;    enough for most usage. This directive is only used with TABLE&#xA;    export.&#xA;&#xA;MODIFY_STRUCT&#xA;    This directive allows you to limit the columns to extract for a&#xA;    given table. The value consist in a space-separated list of table&#xA;    name with a set of column between parenthesis as follow:&#xA;&#xA;            MODIFY_STRUCT   NOM_TABLE(nomcol1,nomcol2,...) ...&#xA;&#xA;    for example:&#xA;&#xA;            MODIFY_STRUCT   T_TEST1(id,dossier) T_TEST2(id,fichier)&#xA;&#xA;    This will only extract columns &#39;id&#39; and &#39;dossier&#39; from table T_TEST1&#xA;    and columns &#39;id&#39; and &#39;fichier&#39; from the T_TEST2 table. This&#xA;    directive can only be used with TABLE, COPY or INSERT export. With&#xA;    TABLE export create table DDL will respect the new list of columns&#xA;    and all indexes or foreign key pointing to or from a column removed&#xA;    will not be exported.&#xA;&#xA;EXCLUDE_COLUMNS&#xA;    Instead of redefining the table structure with MODIFY_STRUCT you may&#xA;    want to exclude some columns from the table export. The value&#xA;    consist in a space-separated list of table name with a set of column&#xA;    between parenthesis as follow:&#xA;&#xA;            EXCLUDE_COLUMNS NOM_TABLE(nomcol1,nomcol2,...) ...&#xA;&#xA;    for example:&#xA;&#xA;            EXCLUDE_COLUMNS T_TEST1(id,dossier) T_TEST2(id,fichier)&#xA;&#xA;    This will exclude from the export columns &#39;id&#39; and &#39;dossier&#39; from&#xA;    table T_TEST1 and columns &#39;id&#39; and &#39;fichier&#39; from the T_TEST2 table.&#xA;    This directive can only be used with TABLE, COPY or INSERT export.&#xA;    With TABLE export create table DDL will respect the new list of&#xA;    columns and all indexes or foreign key pointing to or from a column&#xA;    removed will not be exported.&#xA;&#xA;REPLACE_TABLES&#xA;    This directive allows you to remap a list of Oracle table name to a&#xA;    PostgreSQL table name during export. The value is a list of&#xA;    space-separated values with the following structure:&#xA;&#xA;            REPLACE_TABLES  ORIG_TBNAME1:DEST_TBNAME1 ORIG_TBNAME2:DEST_TBNAME2&#xA;&#xA;    Oracle tables ORIG_TBNAME1 and ORIG_TBNAME2 will be respectively&#xA;    renamed into DEST_TBNAME1 and DEST_TBNAME2&#xA;&#xA;REPLACE_COLS&#xA;    Like table name, the name of the column can be remapped to a&#xA;    different name using the following syntax:&#xA;&#xA;            REPLACE_COLS    ORIG_TBNAME(ORIG_COLNAME1:NEW_COLNAME1,ORIG_COLNAME2:NEW_COLNAME2)&#xA;&#xA;    For example:&#xA;&#xA;            REPLACE_COLS    T_TEST(dico:dictionary,dossier:folder)&#xA;&#xA;    will rename Oracle columns &#39;dico&#39; and &#39;dossier&#39; from table T_TEST&#xA;    into new name &#39;dictionary&#39; and &#39;folder&#39;.&#xA;&#xA;REPLACE_AS_BOOLEAN&#xA;    If you want to change the type of some Oracle columns into&#xA;    PostgreSQL boolean during the export you can define here a list of&#xA;    tables and column separated by space as follow.&#xA;&#xA;            REPLACE_AS_BOOLEAN     TB_NAME1:COL_NAME1 TB_NAME1:COL_NAME2 TB_NAME2:COL_NAME2&#xA;&#xA;    The values set in the boolean columns list will be replaced with the&#xA;    &#39;t&#39; and &#39;f&#39; following the default replacement values and those&#xA;    additionally set in directive BOOLEAN_VALUES.&#xA;&#xA;    Note that if you have modified the table name with REPLACE_TABLES&#xA;    and/or the column&#39;s name, you need to use the name of the original&#xA;    table and/or column.&#xA;&#xA;            REPLACE_COLS            TB_NAME1(OLD_COL_NAME1:NEW_COL_NAME1)&#xA;            REPLACE_AS_BOOLEAN      TB_NAME1:OLD_COL_NAME1&#xA;&#xA;    You can also give a type and a precision to automatically convert&#xA;    all fields of that type as a boolean. For example:&#xA;&#xA;            REPLACE_AS_BOOLEAN      NUMBER:1 CHAR:1 TB_NAME1:COL_NAME1 TB_NAME1:COL_NAME2&#xA;&#xA;    will also replace any field of type number(1) or char(1) as a&#xA;    boolean in all exported tables.&#xA;&#xA;BOOLEAN_VALUES&#xA;    Use this to add additional definition of the possible boolean values&#xA;    used in Oracle fields. You must set a space-separated list of&#xA;    TRUE:FALSE values. By default here are the values recognized by&#xA;    Ora2Pg:&#xA;&#xA;            BOOLEAN_VALUES          yes:no y:n 1:0 true:false enabled:disabled&#xA;&#xA;    Any values defined here will be added to the default list.&#xA;&#xA;REPLACE_ZERO_DATE&#xA;    When Ora2Pg find a &#34;zero&#34; date: 0000-00-00 00:00:00 it is replaced&#xA;    by a NULL. This could be a problem if your column is defined with&#xA;    NOT NULL constraint. If you can not remove the constraint, use this&#xA;    directive to set an arbitral date that will be used instead. You can&#xA;    also use -INFINITY if you don&#39;t want to use a fake date.&#xA;&#xA;INDEXES_SUFFIX&#xA;    Add the given value as suffix to indexes names. Useful if you have&#xA;    indexes with same name as tables. For example:&#xA;&#xA;            INDEXES_SUFFIX          _idx&#xA;&#xA;    will add _idx at ed of all index name. Not so common but can help.&#xA;&#xA;INDEXES_RENAMING&#xA;    Enable this directive to rename all indexes using&#xA;    tablename_columns_names. Could be very useful for database that have&#xA;    multiple time the same index name or that use the same name than a&#xA;    table, which is not allowed by PostgreSQL Disabled by default.&#xA;&#xA;USE_INDEX_OPCLASS&#xA;    Operator classes text_pattern_ops, varchar_pattern_ops, and&#xA;    bpchar_pattern_ops support B-tree indexes on the corresponding&#xA;    types. The difference from the default operator classes is that the&#xA;    values are compared strictly character by character rather than&#xA;    according to the locale-specific collation rules. This makes these&#xA;    operator classes suitable for use by queries involving pattern&#xA;    matching expressions (LIKE or POSIX regular expressions) when the&#xA;    database does not use the standard &#34;C&#34; locale. If you enable, with&#xA;    value 1, this will force Ora2Pg to export all indexes defined on&#xA;    varchar2() and char() columns using those operators. If you set it&#xA;    to a value greater than 1 it will only change indexes on columns&#xA;    where the character limit is greater or equal than this value. For&#xA;    example, set it to 128 to create these kind of indexes on columns of&#xA;    type varchar2(N) where N &amp;gt;= 128.&#xA;&#xA;RENAME_PARTITION&#xA;    Enable this directive if you want that your partition tables will be&#xA;    renamed. Disabled by default. If you have multiple partitioned&#xA;    table, when exported to PostgreSQL some partitions could have the&#xA;    same name but different parent tables. This is not allowed, table&#xA;    name must be unique, in this case enable this directive. A partition&#xA;    will be renamed following the rule: &#34;tablename&#34;_part&#34;pos&#34; where&#xA;    &#34;pos&#34; is the partition number. For subpartition this is:&#xA;    &#34;tablename&#34;_part&#34;pos&#34;_subpart&#34;pos&#34; If this is partition/subpartition&#xA;    default: &#34;tablename&#34;_part_default&#xA;    &#34;tablename&#34;_part&#34;pos&#34;_subpart_default&#xA;&#xA;DISABLE_PARTITION&#xA;    If you don&#39;t want to reproduce the partitioning like in Oracle and&#xA;    want to export all partitioned Oracle data into the main single&#xA;    table in PostgreSQL enable this directive. Ora2Pg will export all&#xA;    data into the main table name. Default is to use partitioning,&#xA;    Ora2Pg will export data from each partition and import them into the&#xA;    PostgreSQL dedicated partition table.&#xA;&#xA;PARTITION_BY_REFERENCE&#xA;    How to export partition by reference. Possible values are none,&#xA;    duplicate or the number of hash partition to create. Default is none&#xA;    to not export the partitions by reference.&#xA;&#xA;    Value none mean no translation and export of partition by reference&#xA;    like before. Value &#39;duplicate&#39; will duplicate the referenced column&#xA;    in the partitioned table and apply the same partitioning from the&#xA;    referenced table to the partitioned table. If the value is a number,&#xA;    the table will be partitioned with the HASH method using the value&#xA;    as the modulo. For example if you set it to 4 it will create 4 HASH&#xA;    partitions.&#xA;&#xA;DISABLE_UNLOGGED&#xA;    By default Ora2Pg export Oracle tables with the NOLOGGING attribute&#xA;    as UNLOGGED tables. You may want to fully disable this feature&#xA;    because you will lose all data from unlogged tables in case of a&#xA;    PostgreSQL crash. Set it to 1 to export all tables as normal tables.&#xA;&#xA;DOUBLE_MAX_VARCHAR&#xA;    Increase varchar max character constraints to support PostgreSQL two&#xA;    bytes character encoding when the source database applies the length&#xA;    constraint on characters not bytes. Default disabled.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Oracle Spatial to PostGis Ora2Pg fully export Spatial object from Oracle database. There&#39;s some configuration directives that could be used to control the export.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AUTODETECT_SPATIAL_TYPE&#xA;    By default Ora2Pg is looking at indexes to see the spatial&#xA;    constraint type and dimensions defined under Oracle. Those&#xA;    constraints are passed as at index creation using for example:&#xA;&#xA;            CREATE INDEX ... INDEXTYPE IS MDSYS.SPATIAL_INDEX&#xA;            PARAMETERS(&#39;sdo_indx_dims=2, layer_gtype=point&#39;);&#xA;&#xA;    If those Oracle constraints parameters are not set, the default is&#xA;    to export those columns as generic type GEOMETRY to be able to&#xA;    receive any spatial type.&#xA;&#xA;    The AUTODETECT_SPATIAL_TYPE directive allows to force Ora2Pg to&#xA;    autodetect the real spatial type and dimension used in a spatial&#xA;    column otherwise a non- constrained &#34;geometry&#34; type is used.&#xA;    Enabling this feature will force Ora2Pg to scan a sample of 50000&#xA;    column to look at the GTYPE used. You can increase or reduce the&#xA;    sample size by setting the value of AUTODETECT_SPATIAL_TYPE to the&#xA;    desired number of line to scan. The directive is enabled by default.&#xA;&#xA;    For example, in the case of a column named shape and defined with&#xA;    Oracle type SDO_GEOMETRY, with AUTODETECT_SPATIAL_TYPE disabled it&#xA;    will be converted as:&#xA;&#xA;        shape geometry(GEOMETRY) or shape geometry(GEOMETRYZ, 4326)&#xA;&#xA;    and if the directive is enabled and the column just contains a&#xA;    single geometry type that use a single dimension:&#xA;&#xA;        shape geometry(POLYGON, 4326) or shape geometry(POLYGONZ, 4326)&#xA;&#xA;    with a two or three dimensional polygon.&#xA;&#xA;CONVERT_SRID&#xA;    This directive allows you to control the automatically conversion of&#xA;    Oracle SRID to standard EPSG. If enabled, Ora2Pg will use the Oracle&#xA;    function sdo_cs.map_oracle_srid_to_epsg() to convert all SRID.&#xA;    Enabled by default.&#xA;&#xA;    If the SDO_SRID returned by Oracle is NULL, it will be replaced by&#xA;    the default value 8307 converted to its EPSG value: 4326 (see&#xA;    DEFAULT_SRID).&#xA;&#xA;    If the value is upper than 1, all SRID will be forced to this value,&#xA;    in this case DEFAULT_SRID will not be used when Oracle returns a&#xA;    null value and the value will be forced to CONVERT_SRID.&#xA;&#xA;    Note that it is also possible to set the EPSG value on Oracle side&#xA;    when sdo_cs.map_oracle_srid_to_epsg() return NULL if your want to&#xA;    force the value:&#xA;&#xA;      system@db&amp;gt; UPDATE sdo_coord_ref_sys SET legacy_code=41014 WHERE srid = 27572;&#xA;&#xA;DEFAULT_SRID&#xA;    Use this directive to override the default EPSG SRID to used: 4326.&#xA;    Can be overwritten by CONVERT_SRID, see above.&#xA;&#xA;GEOMETRY_EXTRACT_TYPE&#xA;    This directive can take three values: WKT (default), WKB and&#xA;    INTERNAL. When it is set to WKT, Ora2Pg will use&#xA;    SDO_UTIL.TO_WKTGEOMETRY() to extract the geometry data. When it is&#xA;    set to WKB, Ora2Pg will use the binary output using&#xA;    SDO_UTIL.TO_WKBGEOMETRY(). If those two extract type are calls at&#xA;    Oracle side, they are slow and you can easily reach Out Of Memory&#xA;    when you have lot of rows. Also WKB is not able to export 3D&#xA;    geometry and some geometries like CURVEPOLYGON. In this case you may&#xA;    use the INTERNAL extraction type. It will use a Pure Perl library to&#xA;    convert the SDO_GEOMETRY data into a WKT representation, the&#xA;    translation is done on Ora2Pg side. This is a work in progress,&#xA;    please validate your exported data geometries before use. Default&#xA;    spatial object extraction type is INTERNAL.&#xA;&#xA;POSTGIS_SCHEMA&#xA;    Use this directive to add a specific schema to the search path to&#xA;    look for PostGis functions.&#xA;&#xA;ST_SRID_FUNCTION&#xA;    Oracle function to use to extract the srid from ST_Geometry meta&#xA;    information. Default: ST_SRID, for example it should be set to&#xA;    sde.st_srid for ArcSDE.&#xA;&#xA;ST_DIMENSION_FUNCTION&#xA;    Oracle function to use to extract the dimension from ST_Geometry&#xA;    meta information. Default: ST_DIMENSION, for example it should be&#xA;    set to sde.st_dimention for ArcSDE.&#xA;&#xA;ST_GEOMETRYTYPE_FUNCTION&#xA;    Oracle function to use to extract the geometry type from a&#xA;    ST_Geometry column Default: ST_GEOMETRYTYPE, for example it should&#xA;    be set to sde.st_geometrytype for ArcSDE.&#xA;&#xA;ST_ASBINARY_FUNCTION&#xA;    Oracle function to used to convert an ST_Geometry value into WKB&#xA;    format. Default: ST_ASBINARY, for example it should be set to&#xA;    sde.st_asbinary for ArcSDE.&#xA;&#xA;ST_ASTEXT_FUNCTION&#xA;    Oracle function to used to convert an ST_Geometry value into WKT&#xA;    format. Default: ST_ASTEXT, for example it should be set to&#xA;    sde.st_astext for ArcSDE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PostgreSQL Import By default conversion to PostgreSQL format is written to file &#39;output.sql&#39;. The command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        psql mydb &amp;lt; output.sql&#xA;&#xA;will import content of file output.sql into PostgreSQL mydb database.&#xA;&#xA;DATA_LIMIT&#xA;    When you are performing INSERT/COPY export Ora2Pg proceed by chunks&#xA;    of DATA_LIMIT tuples for speed improvement. Tuples are stored in&#xA;    memory before being written to disk, so if you want speed and have&#xA;    enough system resources you can grow this limit to an upper value&#xA;    for example: 100000 or 1000000. Before release 7.0 a value of 0 mean&#xA;    no limit so that all tuples are stored in memory before being&#xA;    flushed to disk. In 7.x branch this has been remove and chunk will&#xA;    be set to the default: 10000&#xA;&#xA;BLOB_LIMIT&#xA;    When Ora2Pg detect a table with some BLOB it will automatically&#xA;    reduce the value of this directive by dividing it by 10 until his&#xA;    value is below 1000. You can control this value by setting&#xA;    BLOB_LIMIT. Exporting BLOB use lot of resources, setting it to a too&#xA;    high value can produce OOM.&#xA;&#xA;CLOB_AS_BLOB&#xA;    Apply same behavior on CLOB than BLOB with BLOB_LIMIT settings. This&#xA;    is especially useful if you have large CLOB data. Default: enabled&#xA;&#xA;OUTPUT&#xA;    The Ora2Pg output filename can be changed with this directive.&#xA;    Default value is output.sql. if you set the file name with extension&#xA;    .gz or .bz2 the output will be automatically compressed. This&#xA;    require that the Compress::Zlib Perl module is installed if the&#xA;    filename extension is .gz and that the bzip2 system command is&#xA;    installed for the .bz2 extension.&#xA;&#xA;OUTPUT_DIR&#xA;    Since release 7.0, you can define a base directory where the file&#xA;    will be written. The directory must exists.&#xA;&#xA;BZIP2&#xA;    This directive allows you to specify the full path to the bzip2&#xA;    program if it can not be found in the PATH environment variable.&#xA;&#xA;FILE_PER_CONSTRAINT&#xA;    Allow object constraints to be saved in a separate file during&#xA;    schema export. The file will be named CONSTRAINTS_OUTPUT, where&#xA;    OUTPUT is the value of the corresponding configuration directive.&#xA;    You can use .gz xor .bz2 extension to enable compression. Default is&#xA;    to save all data in the OUTPUT file. This directive is usable only&#xA;    with TABLE export type.&#xA;&#xA;    The constraints can be imported quickly into PostgreSQL using the&#xA;    LOAD export type to parallelize their creation over multiple (-j or&#xA;    JOBS) connections.&#xA;&#xA;FILE_PER_INDEX&#xA;    Allow indexes to be saved in a separate file during schema export.&#xA;    The file will be named INDEXES_OUTPUT, where OUTPUT is the value of&#xA;    the corresponding configuration directive. You can use .gz xor .bz2&#xA;    file extension to enable compression. Default is to save all data in&#xA;    the OUTPUT file. This directive is usable only with TABLE AND&#xA;    TABLESPACE export type. With the TABLESPACE export, it is used to&#xA;    write &#34;ALTER INDEX ... TABLESPACE ...&#34; into a separate file named&#xA;    TBSP_INDEXES_OUTPUT that can be loaded at end of the migration after&#xA;    the indexes creation to move the indexes.&#xA;&#xA;    The indexes can be imported quickly into PostgreSQL using the LOAD&#xA;    export type to parallelize their creation over multiple (-j or JOBS)&#xA;    connections.&#xA;&#xA;FILE_PER_FKEYS&#xA;    Allow foreign key declaration to be saved in a separate file during&#xA;    schema export. By default foreign keys are exported into the main&#xA;    output file or in the CONSTRAINT_output.sql file. When enabled&#xA;    foreign keys will be exported into a file named FKEYS_output.sql&#xA;&#xA;FILE_PER_TABLE&#xA;    Allow data export to be saved in one file per table/view. The files&#xA;    will be named as tablename_OUTPUT, where OUTPUT is the value of the&#xA;    corresponding configuration directive. You can still use .gz xor&#xA;    .bz2 extension in the OUTPUT directive to enable compression.&#xA;    Default 0 will save all data in one file, set it to 1 to enable this&#xA;    feature. This is usable only during INSERT or COPY export type.&#xA;&#xA;FILE_PER_FUNCTION&#xA;    Allow functions, procedures and triggers to be saved in one file per&#xA;    object. The files will be named as objectname_OUTPUT. Where OUTPUT&#xA;    is the value of the corresponding configuration directive. You can&#xA;    still use .gz xor .bz2 extension in the OUTPUT directive to enable&#xA;    compression. Default 0 will save all in one single file, set it to 1&#xA;    to enable this feature. This is usable only during the corresponding&#xA;    export type, the package body export has a special behavior.&#xA;&#xA;    When export type is PACKAGE and you&#39;ve enabled this directive,&#xA;    Ora2Pg will create a directory per package, named with the lower&#xA;    case name of the package, and will create one file per&#xA;    function/procedure into that directory. If the configuration&#xA;    directive is not enabled, it will create one file per package as&#xA;    packagename_OUTPUT, where OUTPUT is the value of the corresponding&#xA;    directive.&#xA;&#xA;TRUNCATE_TABLE&#xA;    If this directive is set to 1, a TRUNCATE TABLE instruction will be&#xA;    add before loading data. This is usable only during INSERT or COPY&#xA;    export type.&#xA;&#xA;    When activated, the instruction will be added only if there&#39;s no&#xA;    global DELETE clause or not one specific to the current table (see&#xA;    below).&#xA;&#xA;DELETE&#xA;    Support for include a DELETE FROM ... WHERE clause filter before&#xA;    importing data and perform a delete of some lines instead of&#xA;    truncating tables. Value is construct as follow:&#xA;    TABLE_NAME[DELETE_WHERE_CLAUSE], or if you have only one where&#xA;    clause for all tables just put the delete clause as single value.&#xA;    Both are possible too. Here are some examples:&#xA;&#xA;            DELETE  1=1    # Apply to all tables and delete all tuples&#xA;            DELETE  TABLE_TEST[ID1=&#39;001&#39;]   # Apply only on table TABLE_TEST&#xA;            DELETE  TABLE_TEST[ID1=&#39;001&#39; OR ID1=&#39;002] DATE_CREATE &amp;gt; &#39;2001-01-01&#39; TABLE_INFO[NAME=&#39;test&#39;]&#xA;&#xA;    The last applies two different delete where clause on tables&#xA;    TABLE_TEST and TABLE_INFO and a generic delete where clause on&#xA;    DATE_CREATE to all other tables. If TRUNCATE_TABLE is enabled it&#xA;    will be applied to all tables not covered by the DELETE definition.&#xA;&#xA;    These DELETE clauses might be useful with regular &#34;updates&#34;.&#xA;&#xA;STOP_ON_ERROR&#xA;    Set this parameter to 0 to not include the call to \set&#xA;    ON_ERROR_STOP ON in all SQL scripts generated by Ora2Pg. By default&#xA;    this order is always present so that the script will immediately&#xA;    abort when an error is encountered.&#xA;&#xA;COPY_FREEZE&#xA;    Enable this directive to use COPY FREEZE instead of a simple COPY to&#xA;    export data with rows already frozen. This is intended as a&#xA;    performance option for initial data loading. Rows will be frozen&#xA;    only if the table being loaded has been created or truncated in the&#xA;    current sub-transaction. This will only work with export to file and&#xA;    when -J or ORACLE_COPIES is not set or default to 1. It can be used&#xA;    with direct import into PostgreSQL under the same condition but -j&#xA;    or JOBS must also be unset or default to 1.&#xA;&#xA;CREATE_OR_REPLACE&#xA;    By default Ora2Pg uses CREATE OR REPLACE in functions and views DDL,&#xA;    if you need not to override existing functions or views disable this&#xA;    configuration directive, DDL will not include OR REPLACE.&#xA;&#xA;DROP_IF_EXISTS&#xA;    To add a DROP &amp;lt;OBJECT&amp;gt; IF EXISTS before creating the object, enable&#xA;    this directive. Can be useful in an iterative work. Default is&#xA;    disabled.&#xA;&#xA;EXPORT_GTT&#xA;    PostgreSQL do not supports Global Temporary Table natively but you&#xA;    can use the pgtt extension to emulate this behavior. Enable this&#xA;    directive to export global temporary table.&#xA;&#xA;PGTT_NOSUPERUSER&#xA;    By default the pgtt extension is loaded using the superuser&#xA;    privilege. Enabled it if you run the SQL scripts generated using a&#xA;    non superuser user. It will use:&#xA;&#xA;        LOAD &#39;$libdir/plugins/pgtt&#39;;&#xA;&#xA;    instead of default:&#xA;&#xA;        LOAD &#39;pgtt&#39;;&#xA;&#xA;NO_HEADER&#xA;    Enabling this directive will prevent Ora2Pg to print his header into&#xA;    output files. Only the translated code will be written.&#xA;&#xA;PSQL_RELATIVE_PATH&#xA;    By default Ora2Pg use \i psql command to execute generated SQL files&#xA;    if you want to use a relative path following the script execution&#xA;    file enabling this option will use \ir. See psql help for more&#xA;    information.&#xA;&#xA;DATA_VALIDATION_ROWS&#xA;    Number of rows that must be retrieved on both side for data&#xA;    validation. Default it to compare the 10000 first rows. A value of 0&#xA;    mean compare all rows.&#xA;&#xA;DATA_VALIDATION_ORDERING&#xA;    Order of rows between both sides are different once the data have&#xA;    been modified. In this case data must be ordered using a primary key&#xA;    or a unique index, that mean that a table without such object can&#xA;    not be compared. If the validation is done just after the data&#xA;    migration without any data modification the validation can be done&#xA;    on all tables without any ordering.&#xA;&#xA;DATA_VALIDATION_ERROR&#xA;    Stop validating data from a table after a certain amount of row&#xA;    mistmatch. Default is to stop after 10 rows validation errors.&#xA;&#xA;TRANSFORM_VALUE&#xA;    Use this directive to precise which transformation should be applied&#xA;    to a column when exporting data. Value must be a semicolon separated&#xA;    list of&#xA;&#xA;       TABLE[COLUMN_NAME, &amp;lt;replace code in SELECT target list&amp;gt;]&#xA;&#xA;    For example to replace string &#39;Oracle&#39; by &#39;PostgreSQL&#39; in a varchar2&#xA;    column use the following.&#xA;&#xA;       TRANSFORM_VALUE   ERROR_LOG_SAMPLE[DBMS_TYPE:regexp_replace(&#34;DBMS_TYPE&#34;,&#39;Oracle&#39;,&#39;PostgreSQL&#39;)]&#xA;&#xA;    or to replace all Oracle char(0) in a string by a space character:&#xA;&#xA;        TRANSFORM_VALUE   CLOB_TABLE[CHARDATA:translate(&#34;CHARDATA&#34;, chr(0), &#39; &#39;)]&#xA;&#xA;    The expression will be applied in the SQL statemeent used to extract&#xA;    data from the source database.&#xA;&#xA;When using Ora2Pg export type INSERT or COPY to dump data to file and&#xA;that FILE_PER_TABLE is enabled, you will be warned that Ora2Pg will not&#xA;export data again if the file already exists. This is to prevent&#xA;downloading twice table with huge amount of data. To force the download&#xA;of data from these tables you have to remove the existing output file&#xA;first.&#xA;&#xA;If you want to import data on the fly to the PostgreSQL database you&#xA;have three configuration directives to set the PostgreSQL database&#xA;connection. This is only possible with COPY or INSERT export type as for&#xA;database schema there&#39;s no real interest to do that.&#xA;&#xA;PG_DSN&#xA;    Use this directive to set the PostgreSQL data source namespace using&#xA;    DBD::Pg Perl module as follow:&#xA;&#xA;            dbi:Pg:dbname=pgdb;host=localhost;port=5432&#xA;&#xA;    will connect to database &#39;pgdb&#39; on localhost at tcp port 5432.&#xA;&#xA;    Note that this directive is only used for data export, other export&#xA;    need to be imported manually through the use og psql or any other&#xA;    PostgreSQL client.&#xA;&#xA;    To use SSL encrypted connection you must add sslmode=require to the&#xA;    connection string like follow:&#xA;&#xA;            dbi:Pg:dbname=pgdb;host=localhost;port=5432;sslmode=require&#xA;&#xA;PG_USER and PG_PWD&#xA;    These two directives are used to set the login user and password.&#xA;&#xA;    If you do not supply a credential with PG_PWD and you have installed&#xA;    the Term::ReadKey Perl module, Ora2Pg will ask for the password&#xA;    interactively. If PG_USER is not set it will be asked interactively&#xA;    too.&#xA;&#xA;SYNCHRONOUS_COMMIT&#xA;    Specifies whether transaction commit will wait for WAL records to be&#xA;    written to disk before the command returns a &#34;success&#34; indication to&#xA;    the client. This is the equivalent to set synchronous_commit&#xA;    directive of postgresql.conf file. This is only used when you load&#xA;    data directly to PostgreSQL, the default is off to disable&#xA;    synchronous commit to gain speed at writing data. Some modified&#xA;    version of PostgreSQL, like greenplum, do not have this setting, so&#xA;    in this set this directive to 1, ora2pg will not try to change the&#xA;    setting.&#xA;&#xA;PG_INITIAL_COMMAND&#xA;    This directive can be used to send an initial command to PostgreSQL,&#xA;    just after the connection. For example to set some session&#xA;    parameters. This directive can be used multiple times.&#xA;&#xA;INSERT_ON_CONFLICT&#xA;    When enabled this instruct Ora2Pg to add an ON CONFLICT DO NOTHING&#xA;    clause to all INSERT statements generated for this type of data&#xA;    export.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Column type control PG_NUMERIC_TYPE If set to 1 replace portable numeric type into PostgreSQL internal type. Oracle data type NUMBER(p,s) is approximatively converted to real and float PostgreSQL data type. If you have monetary fields or don&#39;t want rounding issues with the extra decimals you should preserve the same numeric(p,s) PostgreSQL data type. Do that only if you need exactness because using numeric(p,s) is slower than using real or double.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PG_INTEGER_TYPE&#xA;    If set to 1 replace portable numeric type into PostgreSQL internal&#xA;    type. Oracle data type NUMBER(p) or NUMBER are converted to&#xA;    smallint, integer or bigint PostgreSQL data type following the value&#xA;    of the precision. If NUMBER without precision are set to&#xA;    DEFAULT_NUMERIC (see below).&#xA;&#xA;DEFAULT_NUMERIC&#xA;    NUMBER without precision are converted by default to bigint only if&#xA;    PG_INTEGER_TYPE is true. You can overwrite this value to any PG&#xA;    type, like integer or float.&#xA;&#xA;DATA_TYPE&#xA;    If you&#39;re experiencing any problem in data type schema conversion&#xA;    with this directive you can take full control of the correspondence&#xA;    between Oracle and PostgreSQL types to redefine data type&#xA;    translation used in Ora2pg. The syntax is a comma-separated list of&#xA;    &#34;Oracle datatype:Postgresql datatype&#34;. Here are the default list&#xA;    used:&#xA;&#xA;            DATA_TYPE       VARCHAR2:varchar,NVARCHAR2:varchar,NVARCHAR:varchar,NCHAR:char,DATE:timestamp(0),LONG:text,LONG RAW:bytea,CLOB:text,NCLOB:text,BLOB:bytea,BFILE:bytea,RAW(16):uuid,RAW(32):uuid,RAW:bytea,UROWID:oid,ROWID:oid,FLOAT:double precision,DEC:decimal,DECIMAL:decimal,DOUBLE PRECISION:double precision,INT:integer,INTEGER:integer,REAL:real,SMALLINT:smallint,BINARY_FLOAT:double precision,BINARY_DOUBLE:double precision,TIMESTAMP:timestamp,XMLTYPE:xml,BINARY_INTEGER:integer,PLS_INTEGER:integer,TIMESTAMP WITH TIME ZONE:timestamp with time zone,TIMESTAMP WITH LOCAL TIME ZONE:timestamp with time zone&#xA;&#xA;    The directive and the list definition must be a single line.&#xA;&#xA;    Note that when a RAW(16) and RAW(32) columns is found or that the&#xA;    RAW column has &#34;SYS_GUID()&#34; as default value Ora2Pg will&#xA;    automatically translate the type of the column into uuid which might&#xA;    be the right translation in most of the case. In this case data will&#xA;    be automatically migrated as PostgreSQL uuid data type provided by&#xA;    the &#34;uuid-ossp&#34; extension.&#xA;&#xA;    If you want to replace a type with a precision and scale you need to&#xA;    escape the coma with a backslash. For example, if you want to&#xA;    replace all NUMBER(*,0) into bigint instead of numeric(38) add the&#xA;    following:&#xA;&#xA;           DATA_TYPE       NUMBER(*\,0):bigint&#xA;&#xA;    You don&#39;t have to recopy all default type conversion but just the&#xA;    one you want to rewrite.&#xA;&#xA;    There&#39;s a special case with BFILE when they are converted to type&#xA;    TEXT, they will just contains the full path to the external file. If&#xA;    you set the destination type to BYTEA, the default, Ora2Pg will&#xA;    export the content of the BFILE as bytea. The third case is when you&#xA;    set the destination type to EFILE, in this case, Ora2Pg will export&#xA;    it as an EFILE record: (DIRECTORY, FILENAME). Use the DIRECTORY&#xA;    export type to export the existing directories as well as privileges&#xA;    on those directories.&#xA;&#xA;    There&#39;s no SQL function available to retrieve the path to the BFILE.&#xA;    Ora2Pg have to create one using the DBMS_LOB package.&#xA;&#xA;            CREATE OR REPLACE FUNCTION ora2pg_get_bfilename( p_bfile IN BFILE )&#xA;            RETURN VARCHAR2&#xA;            AS&#xA;                l_dir   VARCHAR2(4000);&#xA;                l_fname VARCHAR2(4000);&#xA;                l_path  VARCHAR2(4000);&#xA;            BEGIN&#xA;                dbms_lob.FILEGETNAME( p_bfile, l_dir, l_fname );&#xA;                SELECT directory_path INTO l_path FROM all_directories&#xA;                    WHERE directory_name = l_dir;&#xA;                l_dir := rtrim(l_path,&#39;/&#39;);&#xA;                RETURN l_dir || &#39;/&#39; || l_fname;&#xA;            END;&#xA;&#xA;    This function is only created if Ora2Pg found a table with a BFILE&#xA;    column and that the destination type is TEXT. The function is&#xA;    dropped at the end of the export. This concern both, COPY and INSERT&#xA;    export type.&#xA;&#xA;    There&#39;s no SQL function available to retrieve BFILE as an EFILE&#xA;    record, then Ora2Pg have to create one using the DBMS_LOB package.&#xA;&#xA;            CREATE OR REPLACE FUNCTION ora2pg_get_efile( p_bfile IN BFILE )&#xA;            RETURN VARCHAR2&#xA;            AS&#xA;                l_dir   VARCHAR2(4000);&#xA;                l_fname VARCHAR2(4000);&#xA;            BEGIN&#xA;                dbms_lob.FILEGETNAME( p_bfile, l_dir, l_fname );&#xA;                RETURN &#39;(&#39; || l_dir || &#39;,&#39; || l_fnamei || &#39;)&#39;;&#xA;            END;&#xA;&#xA;    This function is only created if Ora2Pg found a table with a BFILE&#xA;    column and that the destination type is EFILE. The function is&#xA;    dropped at the end of the export. This concern both, COPY and INSERT&#xA;    export type.&#xA;&#xA;    To set the destination type, use the DATA_TYPE configuration&#xA;    directive:&#xA;&#xA;            DATA_TYPE       BFILE:EFILE&#xA;&#xA;    for example.&#xA;&#xA;    The EFILE type is a user defined type created by the PostgreSQL&#xA;    extension external_file that can be found here:&#xA;    https://github.com/darold/external_file This is a port of the BFILE&#xA;    Oracle type to PostgreSQL.&#xA;&#xA;    There&#39;s no SQL function available to retrieve the content of a&#xA;    BFILE. Ora2Pg have to create one using the DBMS_LOB package.&#xA;&#xA;            CREATE OR REPLACE FUNCTION ora2pg_get_bfile( p_bfile IN BFILE ) RETURN&#xA;            BLOB&#xA;              AS&#xA;                    filecontent BLOB := NULL;&#xA;                    src_file BFILE := NULL;&#xA;                    l_step PLS_INTEGER := 12000;&#xA;                    l_dir   VARCHAR2(4000);&#xA;                    l_fname VARCHAR2(4000);&#xA;                    offset NUMBER := 1;&#xA;              BEGIN&#xA;                IF p_bfile IS NULL THEN&#xA;                  RETURN NULL;&#xA;                END IF;&#xA;&#xA;                DBMS_LOB.FILEGETNAME( p_bfile, l_dir, l_fname );&#xA;                src_file := BFILENAME( l_dir, l_fname );&#xA;                IF src_file IS NULL THEN&#xA;                    RETURN NULL;&#xA;                END IF;&#xA;&#xA;                DBMS_LOB.FILEOPEN(src_file, DBMS_LOB.FILE_READONLY);&#xA;                DBMS_LOB.CREATETEMPORARY(filecontent, true);&#xA;                DBMS_LOB.LOADBLOBFROMFILE (filecontent, src_file, DBMS_LOB.LOBMAXSIZE, offset, offset);&#xA;                DBMS_LOB.FILECLOSE(src_file);&#xA;                RETURN filecontent;&#xA;            END;&#xA;&#xA;    This function is only created if Ora2Pg found a table with a BFILE&#xA;    column and that the destination type is bytea (the default). The&#xA;    function is dropped at the end of the export. This concern both,&#xA;    COPY and INSERT export type.&#xA;&#xA;    About the ROWID and UROWID, they are converted into OID by &#34;logical&#34;&#xA;    default but this will through an error at data import. There is no&#xA;    equivalent data type so you might want to use the DATA_TYPE&#xA;    directive to change the corresponding type in PostgreSQL. You should&#xA;    consider replacing this data type by a bigserial (autoincremented&#xA;    sequence), text or uuid data type.&#xA;&#xA;MODIFY_TYPE&#xA;    Sometimes you need to force the destination type, for example a&#xA;    column exported as timestamp by Ora2Pg can be forced into type date.&#xA;    Value is a comma-separated list of TABLE:COLUMN:TYPE structure. If&#xA;    you need to use comma or space inside type definition you will have&#xA;    to backslash them.&#xA;&#xA;            MODIFY_TYPE     TABLE1:COL3:varchar,TABLE1:COL4:decimal(9\,6)&#xA;&#xA;    Type of table1.col3 will be replaced by a varchar and table1.col4 by&#xA;    a decimal with precision and scale.&#xA;&#xA;    If the column&#39;s type is a user defined type Ora2Pg will autodetect&#xA;    the composite type and will export its data using ROW(). Some Oracle&#xA;    user defined types are just array of a native type, in this case you&#xA;    may want to transform this column in simple array of a PostgreSQL&#xA;    native type. To do so, just redefine the destination type as wanted&#xA;    and Ora2Pg will also transform the data as an array. For example,&#xA;    with the following definition in Oracle:&#xA;&#xA;            CREATE OR REPLACE TYPE mem_type IS VARRAY(10) of VARCHAR2(15);&#xA;            CREATE TABLE club (Name VARCHAR2(10),&#xA;                    Address VARCHAR2(20),&#xA;                    City VARCHAR2(20),&#xA;                    Phone VARCHAR2(8),&#xA;                    Members mem_type&#xA;            );&#xA;&#xA;    custom type &#34;mem_type&#34; is just a string array and can be translated&#xA;    into the following in PostgreSQL:&#xA;&#xA;            CREATE TABLE club (&#xA;                    name varchar(10),&#xA;                    address varchar(20),&#xA;                    city varchar(20),&#xA;                    phone varchar(8),&#xA;                    members text[]&#xA;            ) ;&#xA;&#xA;    To do so, just use the directive as follow:&#xA;&#xA;            MODIFY_TYPE     CLUB:MEMBERS:text[]&#xA;&#xA;    Ora2Pg will take care to transform all data of this column in the&#xA;    correct format. Only arrays of characters and numerics types are&#xA;    supported.&#xA;&#xA;TO_NUMBER_CONVERSION&#xA;    By default Oracle call to function TO_NUMBER will be translated as a&#xA;    cast into numeric. For example, TO_NUMBER(&#39;10.1234&#39;) is converted&#xA;    into PostgreSQL call to_number(&#39;10.1234&#39;)::numeric. If you want you&#xA;    can cast the call to integer or bigint by changing the value of the&#xA;    configuration directive. If you need better control of the format,&#xA;    just set it as value, for example: TO_NUMBER_CONVERSION&#xA;    99999999999999999999.9999999999 will convert the code above as:&#xA;    TO_NUMBER(&#39;10.1234&#39;, &#39;99999999999999999999.9999999999&#39;) Any value of&#xA;    the directive that it is not numeric, integer or bigint will be&#xA;    taken as a mask format. If set to none, no conversion will be done.&#xA;&#xA;VARCHAR_TO_TEXT&#xA;    By default varchar2 without size constraint are tranlated into text.&#xA;    If you want to keep the varchar name, disable this directive.&#xA;&#xA;FORCE_IDENTITY_BIGINT&#xA;    Usually identity column must be bigint to correspond to an auto&#xA;    increment sequence so Ora2Pg always force it to be a bigint. If, for&#xA;    any reason you want Ora2Pg to respect the DATA_TYPE you have set for&#xA;    identity column then disable this directive.&#xA;&#xA;TO_CHAR_NOTIMEZONE&#xA;    If you want Ora2Pg to remove any timezone information into the&#xA;    format part of the TO_CHAR() function, enable this directive.&#xA;    Disabled by default.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Taking export under control The following other configuration directives interact directly with the export process and give you fine granularity in database export control.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SKIP&#xA;    For TABLE export you may not want to export all schema constraints,&#xA;    the SKIP configuration directive allows you to specify a&#xA;    space-separated list of constraints that should not be exported.&#xA;    Possible values are:&#xA;&#xA;            - fkeys: turn off foreign key constraints&#xA;            - pkeys: turn off primary keys&#xA;            - ukeys: turn off unique column constraints&#xA;            - indexes: turn off all other index types&#xA;            - checks: turn off check constraints&#xA;&#xA;    For example:&#xA;&#xA;            SKIP    indexes,checks&#xA;&#xA;    will removed indexes and check constraints from export.&#xA;&#xA;PKEY_IN_CREATE&#xA;    Enable this directive if you want to add primary key definition&#xA;    inside the create table statement. If disabled (the default) primary&#xA;    key definition will be added with an alter table statement. Enable&#xA;    it if you are exporting to GreenPlum PostgreSQL database.&#xA;&#xA;KEEP_PKEY_NAMES&#xA;    By default names of the primary and unique key in the source Oracle&#xA;    database are ignored and key names are autogenerated in the target&#xA;    PostgreSQL database with the PostgreSQL internal default naming&#xA;    rules. If you want to preserve Oracle primary and unique key names&#xA;    set this option to 1.&#xA;&#xA;FKEY_ADD_UPDATE&#xA;    This directive allows you to add an ON UPDATE CASCADE option to a&#xA;    foreign key when a ON DELETE CASCADE is defined or always. Oracle do&#xA;    not support this feature, you have to use trigger to operate the ON&#xA;    UPDATE CASCADE. As PostgreSQL has this feature, you can choose how&#xA;    to add the foreign key option. There are three values to this&#xA;    directive: never, the default that mean that foreign keys will be&#xA;    declared exactly like in Oracle. The second value is delete, that&#xA;    mean that the ON UPDATE CASCADE option will be added only if the ON&#xA;    DELETE CASCADE is already defined on the foreign Keys. The last&#xA;    value, always, will force all foreign keys to be defined using the&#xA;    update option.&#xA;&#xA;FKEY_DEFERRABLE&#xA;    When exporting tables, Ora2Pg normally exports constraints as they&#xA;    are, if they are non-deferrable they are exported as non-deferrable.&#xA;    However, non-deferrable constraints will probably cause problems&#xA;    when attempting to import data to Pg. The FKEY_DEFERRABLE option set&#xA;    to 1 will cause all foreign key constraints to be exported as&#xA;    deferrable.&#xA;&#xA;DEFER_FKEY&#xA;    In addition to exporting data when the DEFER_FKEY option set to 1,&#xA;    it will add a command to defer all foreign key constraints during&#xA;    data export and the import will be done in a single transaction.&#xA;    This will work only if foreign keys have been exported as deferrable&#xA;    and you are not using direct import to PostgreSQL (PG_DSN is not&#xA;    defined). Constraints will then be checked at the end of the&#xA;    transaction.&#xA;&#xA;    This directive can also be enabled if you want to force all foreign&#xA;    keys to be created as deferrable and initially deferred during&#xA;    schema export (TABLE export type).&#xA;&#xA;DROP_FKEY&#xA;    If deferring foreign keys is not possible due to the amount of data&#xA;    in a single transaction, you&#39;ve not exported foreign keys as&#xA;    deferrable or you are using direct import to PostgreSQL, you can use&#xA;    the DROP_FKEY directive.&#xA;&#xA;    It will drop all foreign keys before all data import and recreate&#xA;    them at the end of the import.&#xA;&#xA;DROP_INDEXES&#xA;    This directive allows you to gain lot of speed improvement during&#xA;    data import by removing all indexes that are not an automatic index&#xA;    (indexes of primary keys) and recreate them at the end of data&#xA;    import. Of course it is far better to not import indexes and&#xA;    constraints before having imported all data.&#xA;&#xA;DISABLE_TRIGGERS&#xA;    This directive is used to disable triggers on all tables in COPY or&#xA;    INSERT export modes. Available values are USER (disable user-defined&#xA;    triggers only) and ALL (includes RI system triggers). Default is 0:&#xA;    do not add SQL statements to disable trigger before data import.&#xA;&#xA;    If you want to disable triggers during data migration, set the value&#xA;    to USER if your are connected as non superuser and ALL if you are&#xA;    connected as PostgreSQL superuser. A value of 1 is equal to USER.&#xA;&#xA;DISABLE_SEQUENCE&#xA;    If set to 1 it disables alter of sequences on all tables during COPY&#xA;    or INSERT export mode. This is used to prevent the update of&#xA;    sequence during data migration. Default is 0, alter sequences.&#xA;&#xA;NOESCAPE&#xA;    By default all data that are not of type date or time are escaped.&#xA;    If you experience any problem with that you can set it to 1 to&#xA;    disable character escaping during data export. This directive is&#xA;    only used during a COPY export. See STANDARD_CONFORMING_STRINGS for&#xA;    enabling/disabling escape with INSERT statements.&#xA;&#xA;STANDARD_CONFORMING_STRINGS&#xA;    This controls whether ordinary string literals (&#39;...&#39;) treat&#xA;    backslashes literally, as specified in SQL standard. This was the&#xA;    default before Ora2Pg v8.5 so that all strings was escaped first,&#xA;    now this is currently on, causing Ora2Pg to use the escape string&#xA;    syntax (E&#39;...&#39;) if this parameter is not set to 0. This is the exact&#xA;    behavior of the same option in PostgreSQL. This directive is only&#xA;    used during data export to build INSERT statements. See NOESCAPE for&#xA;    enabling/disabling escape in COPY statements.&#xA;&#xA;TRIM_TYPE&#xA;    If you want to convert CHAR(n) from Oracle into varchar(n) or text&#xA;    on PostgreSQL using directive DATA_TYPE, you might want to do some&#xA;    trimming on the data. By default Ora2Pg will auto-detect this&#xA;    conversion and remove any whitespace at both leading and trailing&#xA;    position. If you just want to remove the leadings character set the&#xA;    value to LEADING. If you just want to remove the trailing character,&#xA;    set the value to TRAILING. Default value is BOTH.&#xA;&#xA;TRIM_CHAR&#xA;    The default trimming character is space, use this directive if you&#xA;    need to change the character that will be removed. For example, set&#xA;    it to - if you have leading - in the char(n) field. To use space as&#xA;    trimming charger, comment this directive, this is the default value.&#xA;&#xA;PRESERVE_CASE&#xA;    If you want to preserve the case of Oracle object name set this&#xA;    directive to 1. By default Ora2Pg will convert all Oracle object&#xA;    names to lower case. I do not recommend to enable this unless you&#xA;    will always have to double-quote object names on all your SQL&#xA;    scripts.&#xA;&#xA;ORA_RESERVED_WORDS&#xA;    Allow escaping of column name using Oracle reserved words. Value is&#xA;    a list of comma-separated reserved word. Default:&#xA;    audit,comment,references.&#xA;&#xA;USE_RESERVED_WORDS&#xA;    Enable this directive if you have table or column names that are a&#xA;    reserved word for PostgreSQL. Ora2Pg will double quote the name of&#xA;    the object.&#xA;&#xA;GEN_USER_PWD&#xA;    Set this directive to 1 to replace default password by a random&#xA;    password for all extracted user during a GRANT export.&#xA;&#xA;PG_SUPPORTS_MVIEW&#xA;    Since PostgreSQL 9.3, materialized view are supported with the SQL&#xA;    syntax &#39;CREATE MATERIALIZED VIEW&#39;. To force Ora2Pg to use the native&#xA;    PostgreSQL support you must enable this configuration - enable by&#xA;    default. If you want to use the old style with table and a set of&#xA;    function, you should disable it.&#xA;&#xA;PG_SUPPORTS_IFEXISTS&#xA;    PostgreSQL version below 9.x do not support IF EXISTS in DDL&#xA;    statements. Disabling the directive with value 0 will prevent Ora2Pg&#xA;    to add those keywords in all generated statements. Default value is&#xA;    1, enabled.&#xA;&#xA;PG_VERSION&#xA;    Set the PostgreSQL major version number of the target database. Ex:&#xA;    9.6 or 13 Default is current major version at time of a new release.&#xA;    This replace the old and deprecadted PG_SUPPORTS_* configuration&#xA;    directives described bellow.&#xA;&#xA;PG_SUPPORTS_ROLE (Deprecated)&#xA;    This option is deprecated since Ora2Pg release v7.3.&#xA;&#xA;    By default Oracle roles are translated into PostgreSQL groups. If&#xA;    you have PostgreSQL 8.1 or more consider the use of ROLES and set&#xA;    this directive to 1 to export roles.&#xA;&#xA;PG_SUPPORTS_INOUT (Deprecated)&#xA;    This option is deprecated since Ora2Pg release v7.3.&#xA;&#xA;    If set to 0, all IN, OUT or INOUT parameters will not be used into&#xA;    the generated PostgreSQL function declarations (disable it for&#xA;    PostgreSQL database version lower than 8.1), This is now enable by&#xA;    default.&#xA;&#xA;PG_SUPPORTS_DEFAULT&#xA;    This directive enable or disable the use of default parameter value&#xA;    in function export. Until PostgreSQL 8.4 such a default value was&#xA;    not supported, this feature is now enable by default.&#xA;&#xA;PG_SUPPORTS_WHEN (Deprecated)&#xA;    Add support to WHEN clause on triggers as PostgreSQL v9.0 now&#xA;    support it. This directive is enabled by default, set it to 0&#xA;    disable this feature.&#xA;&#xA;PG_SUPPORTS_INSTEADOF (Deprecated)&#xA;    Add support to INSTEAD OF usage on triggers (used with PG &amp;gt;= 9.1),&#xA;    if this directive is disabled the INSTEAD OF triggers will be&#xA;    rewritten as Pg rules.&#xA;&#xA;PG_SUPPORTS_CHECKOPTION&#xA;    When enabled, export views with CHECK OPTION. Disable it if you have&#xA;    PostgreSQL version prior to 9.4. Default: 1, enabled.&#xA;&#xA;PG_SUPPORTS_IFEXISTS&#xA;    If disabled, do not export object with IF EXISTS statements. Enabled&#xA;    by default.&#xA;&#xA;PG_SUPPORTS_PARTITION&#xA;    PostgreSQL version prior to 10.0 do not have native partitioning.&#xA;    Enable this directive if you want to use declarative partitioning.&#xA;    Enable by default.&#xA;&#xA;PG_SUPPORTS_SUBSTR&#xA;    Some versions of PostgreSQL like Redshift doesn&#39;t support substr()&#xA;    and it need to be replaced by a call to substring(). In this case,&#xA;    disable it.&#xA;&#xA;PG_SUPPORTS_NAMED_OPERATOR&#xA;    Disable this directive if you are using PG &amp;lt; 9.5, PL/SQL operator&#xA;    used in named parameter =&amp;gt; will be replaced by PostgreSQL&#xA;    proprietary operator := Enable by default.&#xA;&#xA;PG_SUPPORTS_IDENTITY&#xA;    Enable this directive if you have PostgreSQL &amp;gt;= 10 to use IDENTITY&#xA;    columns instead of serial or bigserial data type. If&#xA;    PG_SUPPORTS_IDENTITY is disabled and there is IDENTITY column in the&#xA;    Oracle table, they are exported as serial or bigserial columns. When&#xA;    it is enabled they are exported as IDENTITY columns like:&#xA;&#xA;          CREATE TABLE identity_test_tab (&#xA;                  id bigint GENERATED ALWAYS AS IDENTITY,&#xA;                  description varchar(30)&#xA;          ) ;&#xA;&#xA;    If there is non default sequence options set in Oracle, they will be&#xA;    appended after the IDENTITY keyword. Additionally in both cases,&#xA;    Ora2Pg will create a file AUTOINCREMENT_output.sql with a embedded&#xA;    function to update the associated sequences with the restart value&#xA;    set to &#34;SELECT max(colname)+1 FROM tablename&#34;. Of course this file&#xA;    must be imported after data import otherwise sequence will be kept&#xA;    to start value. Enabled by default.&#xA;&#xA;PG_SUPPORTS_PROCEDURE&#xA;    PostgreSQL v11 adds support of PROCEDURE, enable it if you use such&#xA;    version.&#xA;&#xA;BITMAP_AS_GIN&#xA;    Use btree_gin extension to create bitmap like index with pg &amp;gt;= 9.4&#xA;    You will need to create the extension by yourself: create extension&#xA;    btree_gin; Default is to create GIN index, when disabled, a btree&#xA;    index will be created&#xA;&#xA;PG_BACKGROUND&#xA;    Use pg_background extension to create an autonomous transaction&#xA;    instead of using a dblink wrapper. With pg &amp;gt;= 9.5 only. Default is&#xA;    to use dblink. See https://github.com/vibhorkum/pg_background about&#xA;    this extension.&#xA;&#xA;DBLINK_CONN&#xA;    By default if you have an autonomous transaction translated using&#xA;    dblink extension instead of pg_background the connection is defined&#xA;    using the values set with PG_DSN, PG_USER and PG_PWD. If you want to&#xA;    fully override the connection string use this directive as follow to&#xA;    set the connection in the autonomous transaction wrapper function.&#xA;    For example:&#xA;&#xA;            DBLINK_CONN    port=5432 dbname=pgdb host=localhost user=pguser password=pgpass&#xA;&#xA;LONGREADLEN&#xA;    Use this directive to set the database handle&#39;s &#39;LongReadLen&#39;&#xA;    attribute to a value that will be the larger than the expected size&#xA;    of the LOBs. The default is 1MB witch may not be enough to extract&#xA;    BLOBs or CLOBs. If the size of the LOB exceeds the &#39;LongReadLen&#39;&#xA;    DBD::Oracle will return a &#39;ORA-24345: A Truncation&#39; error. Default:&#xA;    1023*1024 bytes.&#xA;&#xA;    Take a look at this page to learn more:&#xA;    http://search.cpan.org/~pythian/DBD-Oracle-1.22/Oracle.pm#Data_Inter&#xA;    face_for_Persistent_LOBs&#xA;&#xA;    Important note: If you increase the value of this directive take&#xA;    care that DATA_LIMIT will probably needs to be reduced. Even if you&#xA;    only have a 1MB blob, trying to read 10000 of them (the default&#xA;    DATA_LIMIT) all at once will require 10GB of memory. You may extract&#xA;    data from those table separately and set a DATA_LIMIT to 500 or&#xA;    lower, otherwise you may experience some out of memory.&#xA;&#xA;LONGTRUNKOK&#xA;    If you want to bypass the &#39;ORA-24345: A Truncation&#39; error, set this&#xA;    directive to 1, it will truncate the data extracted to the&#xA;    LongReadLen value. Disable by default so that you will be warned if&#xA;    your LongReadLen value is not high enough.&#xA;&#xA;USE_LOB_LOCATOR&#xA;    Disable this if you want to load full content of BLOB and CLOB and&#xA;    not use LOB locators. In this case you will have to set LONGREADLEN&#xA;    to the right value. Note that this will not improve speed of BLOB&#xA;    export as most of the time is always consumed by the bytea escaping&#xA;    and in this case export is done line by line and not by chunk of&#xA;    DATA_LIMIT rows. For more information on how it works, see&#xA;    http://search.cpan.org/~pythian/DBD-Oracle-1.74/lib/DBD/Oracle.pm#Da&#xA;    ta_Interface_for_LOB_Locators&#xA;&#xA;    Default is enabled, it use LOB locators.&#xA;&#xA;LOB_CHUNK_SIZE&#xA;    Oracle recommends reading from and writing to a LOB in batches using&#xA;    a multiple of the LOB chunk size. This chunk size defaults to 8k&#xA;    (8192). Recent tests shown that the best performances can be reach&#xA;    with higher value like 512K or 4Mb.&#xA;&#xA;    A quick benchmark with 30120 rows with different size of BLOB&#xA;    (200x5Mb, 19800x212k, 10000x942K, 100x17Mb, 20x156Mb), with&#xA;    DATA_LIMIT=100, LONGREADLEN=170Mb and a total table size of 20GB&#xA;    gives:&#xA;&#xA;           no lob locator  : 22m46,218s (1365 sec., avg: 22 recs/sec)&#xA;           chunk size 8k   : 15m50,886s (951 sec., avg: 31 recs/sec)&#xA;           chunk size 512k : 1m28,161s (88 sec., avg: 342 recs/sec)&#xA;           chunk size 4Mb  : 1m23,717s (83 sec., avg: 362 recs/sec)&#xA;&#xA;    In conclusion it can be more than 10 time faster with LOB_CHUNK_SIZE&#xA;    set to 4Mb. Depending of the size of most BLOB you may want to&#xA;    adjust the value here. For example if you have a majority of small&#xA;    lobs bellow 8K, using 8192 is better to not waste space. Default&#xA;    value for LOB_CHUNK_SIZE is 512000.&#xA;&#xA;XML_PRETTY&#xA;    Force the use getStringVal() instead of getClobVal() for XML data&#xA;    export. Default is 1, enabled for backward compatibility. Set it to&#xA;    0 to use extract method a la CLOB. Note that XML value extracted&#xA;    with getStringVal() must not exceed VARCHAR2 size limit (4000)&#xA;    otherwise it will return an error.&#xA;&#xA;ENABLE_MICROSECOND&#xA;    Set it to O if you want to disable export of millisecond from Oracle&#xA;    timestamp columns. By default milliseconds are exported with the use&#xA;    of following format:&#xA;&#xA;            &#39;YYYY-MM-DD HH24:MI:SS.FF&#39;&#xA;&#xA;    Disabling will force the use of the following Oracle format:&#xA;&#xA;            to_char(..., &#39;YYYY-MM-DD HH24:MI:SS&#39;)&#xA;&#xA;    By default milliseconds are exported.&#xA;&#xA;DISABLE_COMMENT&#xA;    Set this to 1 if you don&#39;t want to export comment associated to&#xA;    tables and columns definition. Default is enabled.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Control MySQL export behavior MYSQL_PIPES_AS_CONCAT Enable this if double pipe and double ampersand (|| and &amp;amp;&amp;amp;) should not be taken as equivalent to OR and AND. It depend of the variable @sql_mode, Use it only if Ora2Pg fail on auto detecting this behavior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MYSQL_INTERNAL_EXTRACT_FORMAT&#xA;    Enable this directive if you want EXTRACT() replacement to use the&#xA;    internal format returned as an integer, for example DD HH24:MM:SS&#xA;    will be replaced with format; DDHH24MMSS::bigint, this depend of&#xA;    your apps usage.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Control SQL Server export behavior DROP_ROWVERSION PostgreSQL has no equivalent to rowversion datatype and feature, if you want to remove these useless columns, enable this directive. Columns of datatype &#39;rowversion&#39; or &#39;timestamp&#39; will not be exported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CASE_INSENSITIVE_SEARCH&#xA;    Emulate the same behavior of MSSQL with case insensitive search. If&#xA;    the value is citext it will use the citext data type instead of&#xA;    char/varchar/text in tables DDL (Ora2Pg will add a CHECK constraint&#xA;    for columns with a precision). Instead of citext you can also set a&#xA;    collation name that will be used in the columns definitions. To&#xA;    disable case insensitive search set it to: none.&#xA;&#xA;SELECT_TOP&#xA;    Append a TOP N clause to the SELECT command used to extract the data&#xA;    from SQL Server. This is the equivalent to a WHERE ROWNUM &amp;lt; 1000&#xA;    clause for Oracle.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Special options to handle character encoding NLS_LANG and NLS_NCHAR By default Ora2Pg will set NLS_LANG to AMERICAN_AMERICA.AL32UTF8 and NLS_NCHAR to AL32UTF8. It is not recommended to change those settings but in some case it could be useful. Using your own settings with those configuration directive will change the client encoding at Oracle side by setting the environment variables $ENV{NLS_LANG} and $ENV{NLS_NCHAR}.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BINMODE&#xA;    By default Ora2Pg will force Perl to use utf8 I/O encoding. This is&#xA;    done through a call to the Perl pragma:&#xA;&#xA;            use open &#39;:utf8&#39;;&#xA;&#xA;    You can override this encoding by using the BINMODE directive, for&#xA;    example you can set it to :locale to use your locale or iso-8859-7,&#xA;    it will respectively use&#xA;&#xA;            use open &#39;:locale&#39;;&#xA;            use open &#39;:encoding(iso-8859-7)&#39;;&#xA;&#xA;    If you have change the NLS_LANG in non UTF8 encoding, you might want&#xA;    to set this directive. See http://perldoc.perl.org/5.14.2/open.html&#xA;    for more information. Most of the time, leave this directive&#xA;    commented.&#xA;&#xA;CLIENT_ENCODING&#xA;    By default PostgreSQL client encoding is automatically set to UTF8&#xA;    to avoid encoding issue. If you have changed the value of NLS_LANG&#xA;    you might have to change the encoding of the PostgreSQL client.&#xA;&#xA;    You can take a look at the PostgreSQL supported character sets here:&#xA;    http://www.postgresql.org/docs/9.0/static/multibyte.html&#xA;&#xA;FORCE_PLSQL_ENCODING&#xA;    To force utf8 encoding of the PL/SQL code exported, enable this&#xA;    directive. Could be helpful in some rare condition.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PLSQL to PLPGSQL conversion Automatic code conversion from Oracle PLSQL to PostgreSQL PLPGSQL is a work in progress in Ora2Pg and surely you will always have manual work. The Perl code used for automatic conversion is all stored in a specific Perl Module named Ora2Pg/PLSQL.pm feel free to modify/add you own code and send me patches. The main work in on function, procedure, package and package body headers and parameters rewrite.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PLSQL_PGSQL&#xA;    Enable/disable PLSQL to PLPGSQL conversion. Enabled by default.&#xA;&#xA;NULL_EQUAL_EMPTY&#xA;    Ora2Pg can replace all conditions with a test on NULL by a call to&#xA;    the coalesce() function to mimic the Oracle behavior where empty&#xA;    string are considered equal to NULL.&#xA;&#xA;            (field1 IS NULL) is replaced by (coalesce(field1::text, &#39;&#39;) = &#39;&#39;)&#xA;            (field2 IS NOT NULL) is replaced by (field2 IS NOT NULL AND field2::text &amp;lt;&amp;gt; &#39;&#39;)&#xA;&#xA;    You might want this replacement to be sure that your application&#xA;    will have the same behavior but if you have control on you&#xA;    application a better way is to change it to transform empty string&#xA;    into NULL because PostgreSQL makes the difference.&#xA;&#xA;EMPTY_LOB_NULL&#xA;    Force empty_clob() and empty_blob() to be exported as NULL instead&#xA;    as empty string for the first one and &#39;\x&#39; for the second. If NULL&#xA;    is allowed in your column this might improve data export speed if&#xA;    you have lot of empty lob. Default is to preserve the exact data&#xA;    from Oracle.&#xA;&#xA;PACKAGE_AS_SCHEMA&#xA;    If you don&#39;t want to export package as schema but as simple&#xA;    functions you might also want to replace all call to&#xA;    package_name.function_name. If you disable the PACKAGE_AS_SCHEMA&#xA;    directive then Ora2Pg will replace all call to&#xA;    package_name.function_name() by package_name_function_name().&#xA;    Default is to use a schema to emulate package.&#xA;&#xA;    The replacement will be done in all kind of DDL or code that is&#xA;    parsed by the PLSQL to PLPGSQL converter. PLSQL_PGSQL must be&#xA;    enabled or -p used in command line.&#xA;&#xA;REWRITE_OUTER_JOIN&#xA;    Enable this directive if the rewrite of Oracle native syntax (+) of&#xA;    OUTER JOIN is broken. This will force Ora2Pg to not rewrite such&#xA;    code, default is to try to rewrite simple form of right outer join&#xA;    for the moment.&#xA;&#xA;UUID_FUNCTION&#xA;    By default Ora2Pg will convert call to SYS_GUID() Oracle function&#xA;    with a call to uuid_generate_v4 from uuid-ossp extension. You can&#xA;    redefined it to use the gen_random_uuid function from pgcrypto&#xA;    extension by changing the function name. Default to&#xA;    uuid_generate_v4.&#xA;&#xA;    Note that when a RAW(16) and RAW(32) columns is found or that the&#xA;    RAW column has &#34;SYS_GUID()&#34; as default value Ora2Pg will&#xA;    automatically translate the type of the column into uuid which might&#xA;    be the right translation in most of the case. In this case data will&#xA;    be automatically migrated as PostgreSQL uuid data type provided by&#xA;    the &#34;uuid-ossp&#34; extension.&#xA;&#xA;FUNCTION_STABLE&#xA;    By default Oracle functions are marked as STABLE as they can not&#xA;    modify data unless when used in PL/SQL with variable assignment or&#xA;    as conditional expression. You can force Ora2Pg to create these&#xA;    function as VOLATILE by disabling this configuration directive.&#xA;&#xA;COMMENT_COMMIT_ROLLBACK&#xA;    By default call to COMMIT/ROLLBACK are kept untouched by Ora2Pg to&#xA;    force the user to review the logic of the function. Once it is fixed&#xA;    in Oracle source code or you want to comment this calls enable the&#xA;    following directive.&#xA;&#xA;COMMENT_SAVEPOINT&#xA;    It is common to see SAVEPOINT call inside PL/SQL procedure together&#xA;    with a ROLLBACK TO savepoint_name. When COMMENT_COMMIT_ROLLBACK is&#xA;    enabled you may want to also comment SAVEPOINT calls, in this case&#xA;    enable it.&#xA;&#xA;STRING_CONSTANT_REGEXP&#xA;    Ora2Pg replace all string constant during the pl/sql to plpgsql&#xA;    translation, string constant are all text include between single&#xA;    quote. If you have some string placeholder used in dynamic call to&#xA;    queries you can set a list of regexp to be temporary replaced to not&#xA;    break the parser. For example:&#xA;&#xA;            STRING_CONSTANT_REGEXP         &amp;lt;placeholder value=&#34;.*&#34;&amp;gt;&#xA;&#xA;    The list of regexp must use the semi colon as separator.&#xA;&#xA;ALTERNATIVE_QUOTING_REGEXP&#xA;    To support the Alternative Quoting Mechanism (&#39;Q&#39; or &#39;q&#39;) for String&#xA;    Literals set the regexp with the text capture to use to extract the&#xA;    text part. For example with a variable declared as&#xA;&#xA;            c_sample VARCHAR2(100 CHAR) := q&#39;{This doesn&#39;t work.}&#39;;&#xA;&#xA;    the regexp to use must be:&#xA;&#xA;            ALTERNATIVE_QUOTING_REGEXP     q&#39;{(.*)}&#39;&#xA;&#xA;    ora2pg will use the $$ delimiter, with the example the result will&#xA;    be:&#xA;&#xA;            c_sample varchar(100) := $$This doesn&#39;t work.$$;&#xA;&#xA;    The value of this configuration directive can be a list of regexp&#xA;    separated by a semi colon. The capture part (between parenthesis) is&#xA;    mandatory in each regexp if you want to restore the string constant.&#xA;&#xA;USE_ORAFCE&#xA;    If you want to use functions defined in the Orafce library and&#xA;    prevent Ora2Pg to translate call to these functions, enable this&#xA;    directive. The Orafce library can be found here:&#xA;    https://github.com/orafce/orafce&#xA;&#xA;    By default Ora2pg rewrite add_month(), add_year(), date_trunc() and&#xA;    to_char() functions, but you may prefer to use the orafce version of&#xA;    these function that do not need any code transformation.&#xA;&#xA;AUTONOMOUS_TRANSACTION&#xA;    Enable translation of autonomous transactions into a wrapper&#xA;    function using dblink or pg_background extension. If you don&#39;t want&#xA;    to use this translation and just want the function to be exported as&#xA;    a normal one without the pragma call, disable this directive.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Materialized view Materialized views are exported as snapshot &#34;Snapshot Materialized Views&#34; as PostgreSQL only supports full refresh.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If you want to import the materialized views in PostgreSQL prior to 9.3&#xA;you have to set configuration directive PG_SUPPORTS_MVIEW to 0. In this&#xA;case Ora2Pg will export all materialized views as explain in this&#xA;document:&#xA;&#xA;        http://tech.jonathangardner.net/wiki/PostgreSQL/Materialized_Views.&#xA;&#xA;When exporting materialized view Ora2Pg will first add the SQL code to&#xA;create the &#34;materialized_views&#34; table:&#xA;&#xA;        CREATE TABLE materialized_views (&#xA;                mview_name text NOT NULL PRIMARY KEY,&#xA;                view_name text NOT NULL,&#xA;                iname text,&#xA;                last_refresh TIMESTAMP WITH TIME ZONE&#xA;        );&#xA;&#xA;all materialized views will have an entry in this table. It then adds&#xA;the plpgsql code to create tree functions:&#xA;&#xA;        create_materialized_view(text, text, text) used to create a materialized view&#xA;        drop_materialized_view(text) used to delete a materialized view&#xA;        refresh_full_materialized_view(text) used to refresh a view&#xA;&#xA;then it adds the SQL code to create the view and the materialized view:&#xA;&#xA;        CREATE VIEW mviewname_mview AS&#xA;        SELECT ... FROM ...;&#xA;&#xA;        SELECT create_materialized_view(&#39;mviewname&#39;,&#39;mviewname_mview&#39;, change with the name of the column to used for the index);&#xA;&#xA;The first argument is the name of the materialized view, the second the&#xA;name of the view on which the materialized view is based and the third&#xA;is the column name on which the index should be build (aka most of the&#xA;time the primary key). This column is not automatically deduced so you&#xA;need to replace its name.&#xA;&#xA;As said above Ora2Pg only supports snapshot materialized views so the&#xA;table will be entirely refreshed by issuing first a truncate of the&#xA;table and then by load again all data from the view:&#xA;&#xA;         refresh_full_materialized_view(&#39;mviewname&#39;);&#xA;&#xA;To drop the materialized view you just have to call the&#xA;drop_materialized_view() function with the name of the materialized view&#xA;as parameter.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other configuration directives DEBUG Set it to 1 will enable verbose output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IMPORT&#xA;    You can define common Ora2Pg configuration directives into a single&#xA;    file that can be imported into other configuration files with the&#xA;    IMPORT configuration directive as follow:&#xA;&#xA;            IMPORT  commonfile.conf&#xA;&#xA;    will import all configuration directives defined into&#xA;    commonfile.conf into the current configuration file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exporting views as PostgreSQL tables You can export any Oracle view as a PostgreSQL table simply by setting TYPE configuration option to TABLE to have the corresponding create table statement. Or use type COPY or INSERT to export the corresponding data. To allow that you have to specify your views in the VIEW_AS_TABLE configuration option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Then if Ora2Pg finds the view it will extract its schema (if TYPE=TABLE)&#xA;into a PG create table form, then it will extract the data (if TYPE=COPY&#xA;or INSERT) following the view schema.&#xA;&#xA;For example, with the following view:&#xA;&#xA;        CREATE OR REPLACE VIEW product_prices (category_id, product_count, low_price, high_price) AS&#xA;        SELECT  category_id, COUNT(*) as product_count,&#xA;            MIN(list_price) as low_price,&#xA;            MAX(list_price) as high_price&#xA;         FROM   product_information&#xA;        GROUP BY category_id;&#xA;&#xA;Setting VIEW_AS_TABLE to product_prices and using export type TABLE,&#xA;will force Ora2Pg to detect columns returned types and to generate a&#xA;create table statement:&#xA;&#xA;        CREATE TABLE product_prices (&#xA;                category_id bigint,&#xA;                product_count integer,&#xA;                low_price numeric,&#xA;                high_price numeric&#xA;        );&#xA;&#xA;Data will be loaded following the COPY or INSERT export type and the&#xA;view declaration.&#xA;&#xA;You can use the ALLOW and EXCLUDE directive in addition to filter other&#xA;objects to export.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export as Kettle transformation XML files The KETTLE export type is useful if you want to use Penthalo Data Integrator (Kettle) to import data to PostgreSQL. With this type of export Ora2Pg will generate one XML Kettle transformation files (.ktr) per table and add a line to manually execute the transformation in the output.sql file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        ora2pg -c ora2pg.conf -t KETTLE -j 12 -a MYTABLE -o load_mydata.sh&#xA;&#xA;will generate one file called &#39;HR.MYTABLE.ktr&#39; and add a line to the&#xA;output file (load_mydata.sh):&#xA;&#xA;        #!/bin/sh&#xA;&#xA;        KETTLE_TEMPLATE_PATH=&#39;.&#39;&#xA;&#xA;        JAVAMAXMEM=4096 ./pan.sh -file $KETTLE_TEMPLATE_PATH/HR.MYTABLE.ktr -level Detailed&#xA;&#xA;The -j 12 option will create a template with 12 processes to insert data&#xA;into PostgreSQL. It is also possible to specify the number of parallel&#xA;queries used to extract data from the Oracle with the -J command line&#xA;option as follow:&#xA;&#xA;        ora2pg -c ora2pg.conf -t KETTLE -J 4 -j 12 -a EMPLOYEES -o load_mydata.sh&#xA;&#xA;This is only possible if there is a unique key defined on a numeric&#xA;column or that you have defined the technical key to used to split the&#xA;query between cores in the DEFINED_PKEY configuration directive. For&#xA;example:&#xA;&#xA;        DEFINED_PK      EMPLOYEES:employee_id&#xA;&#xA;will force the number of Oracle connection copies to 4 and defined the&#xA;SQL query as follow in the Kettle XML transformation file:&#xA;&#xA;        &amp;lt;sql&amp;gt;SELECT * FROM HR.EMPLOYEES WHERE ABS(MOD(employee_id,${Internal.Step.Unique.Count}))=${Internal.Step.Unique.Number}&amp;lt;/sql&amp;gt;&#xA;&#xA;The KETTLE export type requires that the Oracle and PostgreSQL DSN are&#xA;defined. You can also activate the TRUNCATE_TABLE directive to force a&#xA;truncation of the table before data import.&#xA;&#xA;The KETTLE export type is an original work of Marc Cousin.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Migration cost assessment Estimating the cost of a migration process from Oracle to PostgreSQL is not easy. To obtain a good assessment of this migration cost, Ora2Pg will inspect all database objects, all functions and stored procedures to detect if there&#39;s still some objects and PL/SQL code that can not be automatically converted by Ora2Pg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ora2Pg has a content analysis mode that inspect the Oracle database to&#xA;generate a text report on what the Oracle database contains and what can&#xA;not be exported.&#xA;&#xA;To activate the &#34;analysis and report&#34; mode, you have to use the export&#xA;de type SHOW_REPORT like in the following command:&#xA;&#xA;        ora2pg -t SHOW_REPORT&#xA;&#xA;Here is a sample report obtained with this command:&#xA;&#xA;        --------------------------------------&#xA;        Ora2Pg: Oracle Database Content Report&#xA;        --------------------------------------&#xA;        Version Oracle Database 10g Enterprise Edition Release 10.2.0.1.0&#xA;        Schema  HR&#xA;        Size  880.00 MB&#xA;     &#xA;        --------------------------------------&#xA;        Object  Number  Invalid Comments&#xA;        --------------------------------------&#xA;        CLUSTER   2 0 Clusters are not supported and will not be exported.&#xA;        FUNCTION  40  0 Total size of function code: 81992.&#xA;        INDEX     435 0 232 index(es) are concerned by the export, others are automatically generated and will&#xA;                                        do so on PostgreSQL. 1 bitmap index(es). 230 b-tree index(es). 1 reversed b-tree index(es)&#xA;                                        Note that bitmap index(es) will be exported as b-tree index(es) if any. Cluster, domain,&#xA;                                        bitmap join and IOT indexes will not be exported at all. Reverse indexes are not exported&#xA;                                        too, you may use a trigram-based index (see pg_trgm) or a reverse() function based index&#xA;                                        and search. You may also use &#39;varchar_pattern_ops&#39;, &#39;text_pattern_ops&#39; or &#39;bpchar_pattern_ops&#39;&#xA;                                        operators in your indexes to improve search with the LIKE operator respectively into&#xA;                                        varchar, text or char columns.&#xA;        MATERIALIZED VIEW 1 0 All materialized view will be exported as snapshot materialized views, they&#xA;                                        are only updated when fully refreshed.&#xA;        PACKAGE BODY  2 1 Total size of package code: 20700.&#xA;        PROCEDURE 7 0 Total size of procedure code: 19198.&#xA;        SEQUENCE  160 0 Sequences are fully supported, but all call to sequence_name.NEXTVAL or sequence_name.CURRVAL&#xA;                                        will be transformed into NEXTVAL(&#39;sequence_name&#39;) or CURRVAL(&#39;sequence_name&#39;).&#xA;        TABLE     265 0 1 external table(s) will be exported as standard table. See EXTERNAL_TO_FDW configuration&#xA;                                        directive to export as file_fdw foreign tables or use COPY in your code if you just&#xA;                                        want to load data from external files. 2 binary columns. 4 unknown types.&#xA;        TABLE PARTITION 8 0 Partitions are exported using table inheritance and check constraint. 1 HASH partitions.&#xA;                                        2 LIST partitions. 6 RANGE partitions. Note that Hash partitions are not supported.&#xA;        TRIGGER   30  0 Total size of trigger code: 21677.&#xA;        TYPE      7 1 5 type(s) are concerned by the export, others are not supported. 2 Nested Tables.&#xA;                                        2 Object type. 1 Subtype. 1 Type Boby. 1 Type inherited. 1 Varrays. Note that Type&#xA;                                        inherited and Subtype are converted as table, type inheritance is not supported.&#xA;        TYPE BODY 0 3 Export of type with member method are not supported, they will not be exported.&#xA;        VIEW      7 0 Views are fully supported, but if you have updatable views you will need to use&#xA;                                        INSTEAD OF triggers.&#xA;        DATABASE LINK 1 0 Database links will not be exported. You may try the dblink perl contrib module or use&#xA;                                        the SQL/MED PostgreSQL features with the different Foreign Data Wrapper (FDW) extensions.&#xA;                                    &#xA;        Note: Invalid code will not be exported unless the EXPORT_INVALID configuration directive is activated.&#xA;&#xA;Once the database can be analysed, Ora2Pg, by his ability to convert SQL&#xA;and PL/SQL code from Oracle syntax to PostgreSQL, can go further by&#xA;estimating the code difficulties and estimate the time necessary to&#xA;operate a full database migration.&#xA;&#xA;To estimate the migration cost in person-days, Ora2Pg allow you to use a&#xA;configuration directive called ESTIMATE_COST that you can also enabled&#xA;at command line:&#xA;&#xA;        --estimate_cost&#xA;&#xA;This feature can only be used with the SHOW_REPORT, FUNCTION, PROCEDURE,&#xA;PACKAGE and QUERY export type.&#xA;&#xA;        ora2pg -t SHOW_REPORT  --estimate_cost&#xA;&#xA;The generated report is same as above but with a new &#39;Estimated cost&#39;&#xA;column as follow:&#xA;&#xA;        --------------------------------------&#xA;        Ora2Pg: Oracle Database Content Report&#xA;        --------------------------------------&#xA;        Version Oracle Database 10g Express Edition Release 10.2.0.1.0&#xA;        Schema  HR&#xA;        Size  890.00 MB&#xA;     &#xA;        --------------------------------------&#xA;        Object  Number  Invalid Estimated cost  Comments&#xA;        --------------------------------------&#xA;        DATABASE LINK  3 0 9 Database links will be exported as SQL/MED PostgreSQL&#39;s Foreign Data Wrapper (FDW) extensions&#xA;                                        using oracle_fdw.&#xA;        FUNCTION  2 0 7 Total size of function code: 369 bytes. HIGH_SALARY: 2, VALIDATE_SSN: 3.&#xA;        INDEX 21  0 11  11 index(es) are concerned by the export, others are automatically generated and will do so&#xA;                                        on PostgreSQL. 11 b-tree index(es). Note that bitmap index(es) will be exported as b-tree&#xA;                                        index(es) if any. Cluster, domain, bitmap join and IOT indexes will not be exported at all.&#xA;                                        Reverse indexes are not exported too, you may use a trigram-based index (see pg_trgm) or a&#xA;                                        reverse() function based index and search. You may also use &#39;varchar_pattern_ops&#39;, &#39;text_pattern_ops&#39;&#xA;                                        or &#39;bpchar_pattern_ops&#39; operators in your indexes to improve search with the LIKE operator&#xA;                                        respectively into varchar, text or char columns.&#xA;        JOB 0 0 0 Job are not exported. You may set external cron job with them.&#xA;        MATERIALIZED VIEW 1 0 3 All materialized view will be exported as snapshot materialized views, they&#xA;                                                are only updated when fully refreshed.&#xA;        PACKAGE BODY  0 2 54  Total size of package code: 2487 bytes. Number of procedures and functions found&#xA;                                                inside those packages: 7. two_proc.get_table: 10, emp_mgmt.create_dept: 4,&#xA;                                                emp_mgmt.hire: 13, emp_mgmt.increase_comm: 4, emp_mgmt.increase_sal: 4,&#xA;                                                emp_mgmt.remove_dept: 3, emp_mgmt.remove_emp: 2.&#xA;        PROCEDURE 4 0 39  Total size of procedure code: 2436 bytes. TEST_COMMENTAIRE: 2, SECURE_DML: 3,&#xA;                                                PHD_GET_TABLE: 24, ADD_JOB_HISTORY: 6.&#xA;        SEQUENCE  3 0 0 Sequences are fully supported, but all call to sequence_name.NEXTVAL or sequence_name.CURRVAL&#xA;                                                will be transformed into NEXTVAL(&#39;sequence_name&#39;) or CURRVAL(&#39;sequence_name&#39;).&#xA;        SYNONYM   3 0 4 SYNONYMs will be exported as views. SYNONYMs do not exists with PostgreSQL but a common workaround&#xA;                                                is to use views or set the PostgreSQL search_path in your session to access&#xA;                                                object outside the current schema.&#xA;                                                user1.emp_details_view_v is an alias to hr.emp_details_view.&#xA;                                                user1.emp_table is an alias to hr.employees@other_server.&#xA;                                                user1.offices is an alias to hr.locations.&#xA;        TABLE 17  0 8.5 1 external table(s) will be exported as standard table. See EXTERNAL_TO_FDW configuration&#xA;                                        directive to export as file_fdw foreign tables or use COPY in your code if you just want to&#xA;                                        load data from external files. 2 binary columns. 4 unknown types.&#xA;        TRIGGER 1 1 4 Total size of trigger code: 123 bytes. UPDATE_JOB_HISTORY: 2.&#xA;        TYPE  7 1 5 5 type(s) are concerned by the export, others are not supported. 2 Nested Tables. 2 Object type.&#xA;                                        1 Subtype. 1 Type Boby. 1 Type inherited. 1 Varrays. Note that Type inherited and Subtype are&#xA;                                        converted as table, type inheritance is not supported.&#xA;        TYPE BODY 0 3 30  Export of type with member method are not supported, they will not be exported.&#xA;        VIEW  1 1 1 Views are fully supported, but if you have updatable views you will need to use INSTEAD OF triggers.&#xA;        --------------------------------------&#xA;        Total 65  8 162.5 162.5 cost migration units means approximatively 2 man day(s).&#xA;&#xA;The last line shows the total estimated migration cost in person-days&#xA;following the number of migration units estimated for each object. This&#xA;migration unit represent around five minutes for a PostgreSQL expert. If&#xA;this is your first migration you can get it higher with the&#xA;configuration directive COST_UNIT_VALUE or the --cost_unit_value command&#xA;line option:&#xA;&#xA;        ora2pg -t SHOW_REPORT  --estimate_cost --cost_unit_value 10&#xA;&#xA;Ora2Pg is also able to give you a migration difficulty level assessment,&#xA;here a sample:&#xA;&#xA;Migration level: B-5&#xA;&#xA;    Migration levels:&#xA;        A - Migration that might be run automatically&#xA;        B - Migration with code rewrite and a person-days cost up to 5 days&#xA;        C - Migration with code rewrite and a person-days cost above 5 days&#xA;    Technical levels:&#xA;        1 = trivial: no stored functions and no triggers&#xA;        2 = easy: no stored functions but with triggers, no manual rewriting&#xA;        3 = simple: stored functions and/or triggers, no manual rewriting&#xA;        4 = manual: no stored functions but with triggers or views with code rewriting&#xA;        5 = difficult: stored functions and/or triggers with code rewriting&#xA;&#xA;This assessment consist in a letter A or B to specify if the migration&#xA;needs manual rewriting or not. And a number from 1 up to 5 to give you a&#xA;technical difficulty level. You have an additional option&#xA;--human_days_limit to specify the number of person-days limit where the&#xA;migration level should be set to C to indicate that it need a huge&#xA;amount of work and a full project management with migration support.&#xA;Default is 10 person-days. You can use the configuration directive&#xA;HUMAN_DAYS_LIMIT to change this default value permanently.&#xA;&#xA;This feature has been developed to help you or your boss to decide which&#xA;database to migrate first and the team that must be mobilized to operate&#xA;the migration.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Global Oracle and MySQL migration assessment Ora2Pg come with a script ora2pg_scanner that can be used when you have a huge number of instances and schema to scan for migration assessment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: ora2pg_scanner -l CSVFILE [-o OUTDIR]&#xA;&#xA;   -b | --binpath DIR: full path to directory where the ora2pg binary stays.&#xA;                Might be useful only on Windows OS.&#xA;   -c | --config FILE: set custom configuration file to use otherwise ora2pg&#xA;                will use the default: /etc/ora2pg/ora2pg.conf.&#xA;   -l | --list FILE : CSV file containing a list of databases to scan with&#xA;                all required information. The first line of the file&#xA;                can contain the following header that describes the&#xA;                format that must be used:&#xA;&#xA;                &#34;type&#34;,&#34;schema/database&#34;,&#34;dsn&#34;,&#34;user&#34;,&#34;password&#34;&#xA;&#xA;   -o | --outdir DIR : (optional) by default all reports will be dumped to a&#xA;                directory named &#39;output&#39;, it will be created automatically.&#xA;                If you want to change the name of this directory, set the name&#xA;                at second argument.&#xA;&#xA;   -t | --test : just try all connections by retrieving the required schema&#xA;                 or database name. Useful to validate your CSV list file.&#xA;   -u | --unit MIN : redefine globally the migration cost unit value in minutes.&#xA;                 Default is taken from the ora2pg.conf (default 5 minutes).&#xA;&#xA;   Here is a full example of a CSV databases list file:&#xA;&#xA;        &#34;type&#34;,&#34;schema/database&#34;,&#34;dsn&#34;,&#34;user&#34;,&#34;password&#34;&#xA;        &#34;MYSQL&#34;,&#34;sakila&#34;,&#34;dbi:mysql:host=192.168.1.10;database=sakila;port=3306&#34;,&#34;root&#34;,&#34;secret&#34;&#xA;        &#34;ORACLE&#34;,&#34;HR&#34;,&#34;dbi:Oracle:host=192.168.1.10;sid=XE;port=1521&#34;,&#34;system&#34;,&#34;manager&#34;&#xA;        &#34;MSSQL&#34;,&#34;HR&#34;,&#34;dbi:ODBC:driver=msodbcsql18;server=srv.database.windows.net;database=testdb&#34;,&#34;system&#34;,&#34;manager&#34;&#xA;&#xA;   The CSV field separator must be a comma.&#xA;&#xA;   Note that if you want to scan all schemas from an Oracle instance you just&#xA;   have to leave the schema field empty, Ora2Pg will automatically detect all&#xA;   available schemas and generate a report for each one. Of course you need to&#xA;   use a connection user with enough privileges to be able to scan all schemas.&#xA;   For example:&#xA;&#xA;        &#34;ORACLE&#34;,&#34;&#34;,&#34;dbi:Oracle:host=192.168.1.10;sid=XE;port=1521&#34;,&#34;system&#34;,&#34;manager&#34;&#xA;        &#34;MSSQL&#34;,&#34;&#34;,&#34;dbi:ODBC:driver=msodbcsql18;server=srv.database.windows.net;database=testdb&#34;,&#34;usrname&#34;,&#34;passwd&#34;&#xA;&#xA;   will generate a report for all schema in the XE instance. Note that in this&#xA;   case the SCHEMA directive in ora2pg.conf must not be set.&#xA;&#xA;It will generate a CSV file with the assessment result, one line per&#xA;schema or database and a detailed HTML report for each database scanned.&#xA;&#xA;Hint: Use the -t | --test option before to test all your connections in&#xA;your CSV file.&#xA;&#xA;For Windows users you must use the -b command line option to set the&#xA;directory where ora2pg_scanner stays otherwise the ora2pg command calls&#xA;will fail.&#xA;&#xA;In the migration assessment details about functions Ora2Pg always&#xA;include per default 2 migration units for TEST and 1 unit for SIZE per&#xA;1000 characters in the code. This mean that by default it will add 15&#xA;minutes in the migration assessment per function. Obviously if you have&#xA;unitary tests or very simple functions this will not represent the real&#xA;migration time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Migration assessment method Migration unit scores given to each type of Oracle database object are defined in the Perl library lib/Ora2Pg/PLSQL.pm in the %OBJECT_SCORE variable definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The number of PL/SQL lines associated to a migration unit is also&#xA;defined in this file in the $SIZE_SCORE variable value.&#xA;&#xA;The number of migration units associated to each PL/SQL code&#xA;difficulties can be found in the same Perl library lib/Ora2Pg/PLSQL.pm&#xA;in the hash %UNCOVERED_SCORE initialization.&#xA;&#xA;This assessment method is a work in progress so I&#39;m expecting feedbacks&#xA;on migration experiences to polish the scores/units attributed in those&#xA;variables.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Improving indexes and constraints creation speed Using the LOAD export type and a file containing SQL orders to perform, it is possible to dispatch those orders over multiple PostgreSQL connections. To be able to use this feature, the PG_DSN, PG_USER and PG_PWD must be set. Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        ora2pg -t LOAD -c config/ora2pg.conf -i schema/tables/INDEXES_table.sql -j 4&#xA;&#xA;will dispatch indexes creation over 4 simultaneous PostgreSQL&#xA;connections.&#xA;&#xA;This will considerably accelerate this part of the migration process&#xA;with huge data size.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exporting LONG RAW If you still have columns defined as LONG RAW, Ora2Pg will not be able to export these kind of data. The OCI library fail to export them and always return the same first record. To be able to export the data you need to transform the field as BLOB by creating a temporary table before migrating data. For example, the Oracle table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        SQL&amp;gt; DESC TEST_LONGRAW&#xA;         Name                 NULL ?   Type&#xA;         -------------------- -------- ----------------------------&#xA;         ID                            NUMBER&#xA;         C1                            LONG RAW&#xA;&#xA;need to be &#34;translated&#34; into a table using BLOB as follow:&#xA;&#xA;        CREATE TABLE test_blob (id NUMBER, c1 BLOB);&#xA;&#xA;And then copy the data with the following INSERT query:&#xA;&#xA;        INSERT INTO test_blob SELECT id, to_lob(c1) FROM test_longraw;&#xA;&#xA;Then you just have to exclude the original table from the export (see&#xA;EXCLUDE directive) and to renamed the new temporary table on the fly&#xA;using the REPLACE_TABLES configuration directive.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Global variables Oracle allow the use of global variables defined in packages. Ora2Pg will export these variables for PostgreSQL as user defined custom variables available in a session. Oracle variables assignment are exported as call to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    PERFORM set_config(&#39;pkgname.varname&#39;, value, false);&#xA;&#xA;Use of these variables in the code is replaced by:&#xA;&#xA;    current_setting(&#39;pkgname.varname&#39;)::global_variables_type;&#xA;&#xA;where global_variables_type is the type of the variable extracted from&#xA;the package definition.&#xA;&#xA;If the variable is a constant or have a default value assigned at&#xA;declaration, Ora2Pg will create a file global_variables.conf with the&#xA;definition to include in the postgresql.conf file so that their values&#xA;will already be set at database connection. Note that the value can&#xA;always modified by the user so you can not have exactly a constant.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hints Converting your queries with Oracle style outer join (+) syntax to ANSI standard SQL at the Oracle side can save you lot of time for the migration. You can use TOAD Query Builder can re-write these using the proper ANSI syntax, see: &lt;a href=&#34;http://www.toadworld.com/products/toad-for-oracle/f/10/t/9518.aspx&#34;&gt;http://www.toadworld.com/products/toad-for-oracle/f/10/t/9518.aspx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;There&#39;s also an alternative with SQL Developer Data Modeler, see&#xA;http://www.thatjeffsmith.com/archive/2012/01/sql-developer-data-modeler-&#xA;quick-tip-use-oracle-join-syntax-or-ansi/&#xA;&#xA;Toad is also able to rewrite the native Oracle DECODE() syntax into ANSI&#xA;standard SQL CASE statement. You can find some slide about this in a&#xA;presentation given at PgConf.RU:&#xA;http://ora2pg.darold.net/slides/ora2pg_the_hard_way.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test the migration The type of action called TEST allow you to check that all objects from Oracle database have been created under PostgreSQL. Of course PG_DSN must be set to be able to check PostgreSQL side.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Note that this feature respect the schema name limitation if&#xA;EXPORT_SCHEMA and SCHEMA or PG_SCHEMA are defined. If only EXPORT_SCHEMA&#xA;is set all schemes from Oracle and PostgreSQL are scanned. You can&#xA;filter to a single schema using SCHEMA and/or PG_SCHEMA but you can not&#xA;filter on a list of schema. To test a list of schema you will have to&#xA;repeat the calls to Ora2Pg by specifying a single schema each time.&#xA;&#xA;For example command:&#xA;&#xA;        ora2pg -t TEST -c config/ora2pg.conf &amp;gt; migration_diff.txt&#xA;&#xA;Will create a file containing the report of all object and row count on&#xA;both side, Oracle and PostgreSQL, with an error section giving you the&#xA;detail of the differences for each kind of object. Here is a sample&#xA;result:&#xA;&#xA;        [TEST INDEXES COUNT]&#xA;        ORACLEDB:DEPARTMENTS:2&#xA;        POSTGRES:departments:1&#xA;        ORACLEDB:EMPLOYEES:6&#xA;        POSTGRES:employees:6&#xA;        [ERRORS INDEXES COUNT]&#xA;        Table departments doesn&#39;t have the same number of indexes in Oracle (2) and in PostgreSQL (1).&#xA;&#xA;        [TEST UNIQUE CONSTRAINTS COUNT]&#xA;        ORACLEDB:DEPARTMENTS:1&#xA;        POSTGRES:departments:1&#xA;        ORACLEDB:EMPLOYEES:1&#xA;        POSTGRES:employees:1&#xA;        [ERRORS UNIQUE CONSTRAINTS COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of unique constraints.&#xA;&#xA;        [TEST PRIMARY KEYS COUNT]&#xA;        ORACLEDB:DEPARTMENTS:1&#xA;        POSTGRES:departments:1&#xA;        ORACLEDB:EMPLOYEES:1&#xA;        POSTGRES:employees:1&#xA;        [ERRORS PRIMARY KEYS COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of primary keys.&#xA;&#xA;        [TEST CHECK CONSTRAINTS COUNT]&#xA;        ORACLEDB:DEPARTMENTS:1&#xA;        POSTGRES:departments:1&#xA;        ORACLEDB:EMPLOYEES:1&#xA;        POSTGRES:employees:1&#xA;        [ERRORS CHECK CONSTRAINTS COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of check constraints.&#xA;&#xA;        [TEST NOT NULL CONSTRAINTS COUNT]&#xA;        ORACLEDB:DEPARTMENTS:1&#xA;        POSTGRES:departments:1&#xA;        ORACLEDB:EMPLOYEES:1&#xA;        POSTGRES:employees:1&#xA;        [ERRORS NOT NULL CONSTRAINTS COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of not null constraints.&#xA;&#xA;        [TEST COLUMN DEFAULT VALUE COUNT]&#xA;        ORACLEDB:DEPARTMENTS:1&#xA;        POSTGRES:departments:1&#xA;        ORACLEDB:EMPLOYEES:1&#xA;        POSTGRES:employees:1&#xA;        [ERRORS COLUMN DEFAULT VALUE COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of column default value.&#xA;&#xA;        [TEST IDENTITY COLUMN COUNT]&#xA;        ORACLEDB:DEPARTMENTS:1&#xA;        POSTGRES:departments:1&#xA;        ORACLEDB:EMPLOYEES:0&#xA;        POSTGRES:employees:0&#xA;        [ERRORS IDENTITY COLUMN COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of identity column.&#xA;&#xA;        [TEST FOREIGN KEYS COUNT]&#xA;        ORACLEDB:DEPARTMENTS:0&#xA;        POSTGRES:departments:0&#xA;        ORACLEDB:EMPLOYEES:1&#xA;        POSTGRES:employees:1&#xA;        [ERRORS FOREIGN KEYS COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of foreign keys.&#xA;&#xA;        [TEST TABLE COUNT]&#xA;        ORACLEDB:TABLE:2&#xA;        POSTGRES:TABLE:2&#xA;        [ERRORS TABLE COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of TABLE.&#xA;&#xA;        [TEST TABLE TRIGGERS COUNT]&#xA;        ORACLEDB:DEPARTMENTS:0&#xA;        POSTGRES:departments:0&#xA;        ORACLEDB:EMPLOYEES:1&#xA;        POSTGRES:employees:1&#xA;        [ERRORS TABLE TRIGGERS COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of table triggers.&#xA;&#xA;        [TEST TRIGGER COUNT]&#xA;        ORACLEDB:TRIGGER:2&#xA;        POSTGRES:TRIGGER:2&#xA;        [ERRORS TRIGGER COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of TRIGGER.&#xA;&#xA;        [TEST VIEW COUNT]&#xA;        ORACLEDB:VIEW:1&#xA;        POSTGRES:VIEW:1&#xA;        [ERRORS VIEW COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of VIEW.&#xA;&#xA;        [TEST MVIEW COUNT]&#xA;        ORACLEDB:MVIEW:0&#xA;        POSTGRES:MVIEW:0&#xA;        [ERRORS MVIEW COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of MVIEW.&#xA;&#xA;        [TEST SEQUENCE COUNT]&#xA;        ORACLEDB:SEQUENCE:1&#xA;        POSTGRES:SEQUENCE:0&#xA;        [ERRORS SEQUENCE COUNT]&#xA;        SEQUENCE does not have the same count in Oracle (1) and in PostgreSQL (0).&#xA;&#xA;        [TEST TYPE COUNT]&#xA;        ORACLEDB:TYPE:1&#xA;        POSTGRES:TYPE:0&#xA;        [ERRORS TYPE COUNT]&#xA;        TYPE does not have the same count in Oracle (1) and in PostgreSQL (0).&#xA;&#xA;        [TEST FDW COUNT]&#xA;        ORACLEDB:FDW:0&#xA;        POSTGRES:FDW:0&#xA;        [ERRORS FDW COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of FDW.&#xA;&#xA;        [TEST FUNCTION COUNT]&#xA;        ORACLEDB:FUNCTION:3&#xA;        POSTGRES:FUNCTION:3&#xA;        [ERRORS FUNCTION COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of functions.&#xA;&#xA;        [TEST SEQUENCE VALUES]&#xA;        ORACLEDB:EMPLOYEES_NUM_SEQ:1285&#xA;        POSTGRES:employees_num_seq:1285&#xA;        [ERRORS SEQUENCE VALUES COUNT]&#xA;        OK, Oracle and PostgreSQL have the same values for sequences&#xA;&#xA;        [TEST ROWS COUNT]&#xA;        ORACLEDB:DEPARTMENTS:27&#xA;        POSTGRES:departments:27&#xA;        ORACLEDB:EMPLOYEES:854&#xA;        POSTGRES:employees:854&#xA;        [ERRORS ROWS COUNT]&#xA;        OK, Oracle and PostgreSQL have the same number of rows.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Data validation Data validation consists in comparing data retrieved from a foreign table pointing to the source Oracle table and a local PostgreSQL table resulting from the data export.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To run data validation you can use a direct connection like any other&#xA;Ora2Pg action but you can also use the oracle_fdw, mysql_fdw ior tds_fdw&#xA;extension provided that FDW_SERVER and PG_DSN configuration directives&#xA;are set.&#xA;&#xA;By default Ora2Pg will extract the 10000 first rows from both side, you&#xA;can change this value using directive DATA_VALIDATION_ROWS. When it is&#xA;set to zero all rows of the tables will be compared.&#xA;&#xA;Data validation requires that the table has a primary key or unique&#xA;index and that the key columns is not a LOB. Rows will be sorted using&#xA;this unique key. Due to differences in sort behavior between Oracle and&#xA;PostgreSQL, if the collation of unique key columns in PostgreSQL is not&#xA;&#39;C&#39;, the sort order can be different compared to Oracle. In this case&#xA;the data validation will fail.&#xA;&#xA;Data validation must be done before any data is modified.&#xA;&#xA;Ora2Pg will stop comparing two tables after DATA_VALIDATION_ROWS is&#xA;reached or that 10 errors has been encountered, result is dumped in a&#xA;file named &#34;data_validation.log&#34; written in the current directory by&#xA;default. The number of error before stopping the diff between rows can&#xA;be controlled using the configuration directive DATA_VALIDATION_ERROR.&#xA;All rows in errors are printed to the output file for your analyze.&#xA;&#xA;It is possible to parallelize data validation by using -P option or the&#xA;corresponding configuration directive PARALLEL_TABLES in ora2pg.conf.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use of System Change Number (SCN) Ora2Pg is able to export data as of a specific SCN. You can set it at command line using the -S or --scn option. You can give a specific SCN or if you want to use the current SCN at first connection time set the value to &#39;current&#39;. In this last case the connection user has the &#34;SELECT ANY DICTIONARY&#34; or the &#34;SELECT_CATALOG_ROLE&#34; role, the current SCN is looked at the v$database view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Example of use:&#xA;&#xA;    ora2pg -c ora2pg.conf -t COPY --scn 16605281&#xA;&#xA;This adds the following clause to the query used to retrieve data for&#xA;example:&#xA;&#xA;    AS OF SCN 16605281&#xA;&#xA;You can also use th --scn option to use the Oracle flashback capabality&#xA;by specifying a timestamp expression instead of a SCN. For example:&#xA;&#xA;    ora2pg -c ora2pg.conf -t COPY --scn &#34;TO_TIMESTAMP(&#39;2021-12-01 00:00:00&#39;, &#39;YYYY-MM-DD HH:MI:SS&#39;)&#34;&#xA;&#xA;This will add the following clause to the query used to retrieve data:&#xA;&#xA;    AS OF TIMESTAMP TO_TIMESTAMP(&#39;2021-12-01 00:00:00&#39;, &#39;YYYY-MM-DD HH:MI:SS&#39;)&#xA;&#xA;or for example to only retrive yesterday&#39;s data:&#xA;&#xA;    ora2pg -c ora2pg.conf -t COPY --scn &#34;SYSDATE - 1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change Data Capture (CDC) Ora2Pg do not have such feature which allow to import data and to only apply changes after the first import. But you can use the --cdc_ready option to export data with registration of the SCN at the time of the table export. All SCN per tables are written to a file named TABLES_SCN.log by default, it can be changed using -C | --cdc_file option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;These SCN registered per table during COPY or INSERT export can be used&#xA;with a CDC tool. The format of the file is tablename:SCN per line.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Importing BLOB as large objects By default Ora2Pg imports Oracle BLOB as bytea, the destination column is created using the bytea data type. If you want to use large object instead of bytea, just add the --blob_to_lo option to the ora2pg command. It will create the destination column as data type Oid and will save the BLOB as a large object using the lo_from_bytea() function. The Oid returned by the call to lo_from_bytea() is inserted in the destination column instead of a bytea. Because of the use of the function this option can only be used with actions SHOW_COLUMN, TABLE and INSERT. Action COPY is not allowed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If you want to use COPY or have huge size BLOB ( &amp;gt; 1GB) than can not be&#xA;imported using lo_from_bytea() you can add option --lo_import to the&#xA;ora2pg command. This will allow to import data in two passes.&#xA;&#xA;1) Export data using COPY or INSERT will set the Oid destination column&#xA;for BLOB to value 0 and save the BLOB value into a dedicated file. It&#xA;will also create a Shell script to import the BLOB files into the&#xA;database using psql command \lo_import and to update the table Oid&#xA;column to the returned large object Oid. The script is named&#xA;lo_import-TABLENAME.sh&#xA;&#xA;2) Execute all scripts lo_import-TABLENAME.sh after setting the&#xA;environment variables PGDATABASE and optionally PGHOST, PGPORT, PGUSER,&#xA;etc. if they do not correspond to the default values for libpq.&#xA;&#xA;You might also execute manually a VACUUM FULL on the table to remove the&#xA;bloat created by the table update.&#xA;&#xA;Limitation: the table must have a primary key, it is used to set the&#xA;WHERE clause to update the Oid column after the large object import.&#xA;Importing BLOB using this second method (--lo_import) is very slow so it&#xA;should be reserved to rows where the BLOB &amp;gt; 1GB for all other rows use&#xA;the option --blob_to_lo. To filter the rows you can use the WHERE&#xA;configuration directive in ora2pg.conf.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SUPPORT Author / Maintainer Gilles Darold &#xA; &lt;gilles at darold dot net&gt;&lt;/gilles&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Please report any bugs, patches, help, etc. to &amp;lt;gilles AT darold DOT&#xA;net&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feature request If you need new features let me know at &#xA; &lt;gilles at darold dot net&gt;&#xA;  . This help a lot to develop a better/useful tool.&#xA; &lt;/gilles&gt;&lt;/p&gt; &#xA;&lt;p&gt;How to contribute ? Any contribution to build a better tool is welcome, you just have to send me your ideas, features request or patches and there will be applied.&lt;/p&gt; &#xA;&lt;p&gt;LICENSE Copyright (c) 2000-2024 Gilles Darold - All rights reserved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        This program is free software: you can redistribute it and/or modify&#xA;        it under the terms of the GNU General Public License as published by&#xA;        the Free Software Foundation, either version 3 of the License, or&#xA;        any later version.&#xA;&#xA;        This program is distributed in the hope that it will be useful,&#xA;        but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;        GNU General Public License for more details.&#xA;&#xA;        You should have received a copy of the GNU General Public License&#xA;        along with this program.  If not, see &amp;lt; http://www.gnu.org/licenses/ &amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ACKNOWLEDGEMENT I must thanks a lot all the great contributors, see changelog for all acknowledgments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spacebat/perl-apache-logregex</title>
    <updated>2024-05-01T01:48:15Z</updated>
    <id>tag:github.com,2024-05-01:/spacebat/perl-apache-logregex</id>
    <link href="https://github.com/spacebat/perl-apache-logregex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parse lines from Apache webserver log files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache::LogRegex&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Parse a line from an Apache logfile into a hash&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Designed as a simple class to parse Apache log files. It will construct a regex that will parse the given log file format and can then parse lines from the log file line by line returning a hash of each line.&lt;/p&gt; &#xA;&lt;p&gt;The field names of the hash are derived from the log file format. Thus if the format is &#39;%a %t &#34;%r&#34; %s %b %T &#34;%{Referer}i&#34; ...&#39; then the keys of the hash will be %a, %t, %r, %s, %b, %T and %{Referer}i.&lt;/p&gt; &#xA;&lt;p&gt;Should these key names be unusable, as I guess they probably are, then subclass and provide an override rename_this_name() method that can rename the keys before they are added in the array of field names.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;% perl Makefile.PL&#xA;% make&#xA;% make test&#xA;% sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TEST FAILURES&lt;/h2&gt; &#xA;&lt;p&gt;The tests are there to make sure that nothing breaks when the code changes but may teach you little about how to use the code.&lt;/p&gt; &#xA;&lt;h2&gt;TO DO&lt;/h2&gt; &#xA;&lt;p&gt;More efficient and flexible API while maintaining the old one&lt;/p&gt; &#xA;&lt;h2&gt;BUGS&lt;/h2&gt; &#xA;&lt;p&gt;There was a test failure in Perl versions &amp;gt; 5.13 but that should be fixed now.&lt;/p&gt; &#xA;&lt;h2&gt;REQUIREMENTS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Developed under 5.6.1 but should work on anything 5+.&lt;/li&gt; &#xA; &lt;li&gt;Written completely in Perl. XS is not required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;THANKS&lt;/h2&gt; &#xA;&lt;p&gt;Peter Hickman wrote the original module and maintained it for several years. He kindly passed maintainership on to me. Most of the features of this module are the fruits of his work. If you find any bugs they are my doing.&lt;/p&gt; &#xA;&lt;h2&gt;AUTHOR&lt;/h2&gt; &#xA;&lt;p&gt;Original code by Peter Hickman &lt;a href=&#34;mailto:peterhi@ntlworld.com&#34;&gt;peterhi@ntlworld.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additional code by Andrew Kirkpatrick &lt;a href=&#34;mailto:ubermonk@gmail.com&#34;&gt;ubermonk@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE AND COPYRIGHT&lt;/h2&gt; &#xA;&lt;p&gt;Original code copyright (c) 2004-2006 Peter Hickman. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Additional code copyright (c) 2013 Andrew Kirkpatrick. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.&lt;/p&gt;</summary>
  </entry>
</feed>