<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-01T01:48:02Z</updated>
  <subtitle>Monthly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rjust/defects4j</title>
    <updated>2024-06-01T01:48:02Z</updated>
    <id>tag:github.com,2024-06-01:/rjust/defects4j</id>
    <link href="https://github.com/rjust/defects4j" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Database of Real Faults and an Experimental Infrastructure to Enable Controlled Experiments in Software Engineering Research&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Defects4J -- version 2.0.1 &lt;a href=&#34;https://github.com/rjust/defects4j/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/rjust/defects4j/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;.github/workflows/ci.yml&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Defects4J is a collection of reproducible bugs and a supporting infrastructure with the goal of advancing software engineering research.&lt;/p&gt; &#xA;&lt;h1&gt;Contents of Defects4J&lt;/h1&gt; &#xA;&lt;h2&gt;The projects&lt;/h2&gt; &#xA;&lt;p&gt;Defects4J contains 835 bugs (plus 29 deprecated bugs) from the following open-source projects:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Identifier&lt;/th&gt; &#xA;   &lt;th&gt;Project name&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Number of active bugs&lt;/th&gt; &#xA;   &lt;th&gt;Active bug ids&lt;/th&gt; &#xA;   &lt;th&gt;Deprecated bug ids (*)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chart&lt;/td&gt; &#xA;   &lt;td&gt;jfreechart&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;26&lt;/td&gt; &#xA;   &lt;td&gt;1-26&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cli&lt;/td&gt; &#xA;   &lt;td&gt;commons-cli&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;39&lt;/td&gt; &#xA;   &lt;td&gt;1-5,7-40&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Closure&lt;/td&gt; &#xA;   &lt;td&gt;closure-compiler&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;174&lt;/td&gt; &#xA;   &lt;td&gt;1-62,64-92,94-176&lt;/td&gt; &#xA;   &lt;td&gt;63,93&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Codec&lt;/td&gt; &#xA;   &lt;td&gt;commons-codec&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;1-18&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Collections&lt;/td&gt; &#xA;   &lt;td&gt;commons-collections&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;25-28&lt;/td&gt; &#xA;   &lt;td&gt;1-24&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compress&lt;/td&gt; &#xA;   &lt;td&gt;commons-compress&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;47&lt;/td&gt; &#xA;   &lt;td&gt;1-47&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Csv&lt;/td&gt; &#xA;   &lt;td&gt;commons-csv&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;1-16&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gson&lt;/td&gt; &#xA;   &lt;td&gt;gson&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;1-18&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JacksonCore&lt;/td&gt; &#xA;   &lt;td&gt;jackson-core&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;26&lt;/td&gt; &#xA;   &lt;td&gt;1-26&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JacksonDatabind&lt;/td&gt; &#xA;   &lt;td&gt;jackson-databind&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;112&lt;/td&gt; &#xA;   &lt;td&gt;1-112&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JacksonXml&lt;/td&gt; &#xA;   &lt;td&gt;jackson-dataformat-xml&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;1-6&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jsoup&lt;/td&gt; &#xA;   &lt;td&gt;jsoup&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;93&lt;/td&gt; &#xA;   &lt;td&gt;1-93&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JxPath&lt;/td&gt; &#xA;   &lt;td&gt;commons-jxpath&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;1-22&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lang&lt;/td&gt; &#xA;   &lt;td&gt;commons-lang&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;1,3-65&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Math&lt;/td&gt; &#xA;   &lt;td&gt;commons-math&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;106&lt;/td&gt; &#xA;   &lt;td&gt;1-106&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mockito&lt;/td&gt; &#xA;   &lt;td&gt;mockito&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;1-38&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Time&lt;/td&gt; &#xA;   &lt;td&gt;joda-time&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;26&lt;/td&gt; &#xA;   &lt;td&gt;1-20,22-27&lt;/td&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;* Due to behavioral changes introduced under Java 8, some bugs are no longer reproducible. Hence, Defects4J distinguishes between active and deprecated bugs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Active bugs can be accessed through &lt;code&gt;active-bugs.csv&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deprecated bugs are removed from &lt;code&gt;active-bugs.csv&lt;/code&gt;, but their metadata is retained in the project directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deprecated bugs can be accessed through &lt;code&gt;deprecated-bugs.csv&lt;/code&gt;, which also details when and why a bug was deprecated.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We do not re-enumerate active bugs because publications using Defects4J artifacts usually refer to bugs by their specific bug id.&lt;/p&gt; &#xA;&lt;h2&gt;The bugs&lt;/h2&gt; &#xA;&lt;p&gt;Each bug has the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Issue filed in the corresponding issue tracker, and issue tracker identifier mentioned in the fixing commit message.&lt;/li&gt; &#xA; &lt;li&gt;Fixed in a single commit.&lt;/li&gt; &#xA; &lt;li&gt;Minimized: the Defects4J maintainers manually pruned out irrelevant changes in the commit (e.g., refactorings or feature additions).&lt;/li&gt; &#xA; &lt;li&gt;Fixed by modifying the source code (as opposed to configuration files, documentation, or test files).&lt;/li&gt; &#xA; &lt;li&gt;A triggering test exists that failed before the fix and passes after the fix -- the test failure is not random or dependent on test execution order.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The (b)uggy and (f)ixed program revisions are labelled with &lt;code&gt;&amp;lt;id&amp;gt;b&lt;/code&gt; and &lt;code&gt;&amp;lt;id&amp;gt;f&lt;/code&gt;, respectively (&lt;code&gt;&amp;lt;id&amp;gt;&lt;/code&gt; is an integer).&lt;/p&gt; &#xA;&lt;h1&gt;Setting up Defects4J&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 1.8&lt;/li&gt; &#xA; &lt;li&gt;Git &amp;gt;= 1.9&lt;/li&gt; &#xA; &lt;li&gt;SVN &amp;gt;= 1.8&lt;/li&gt; &#xA; &lt;li&gt;Perl &amp;gt;= 5.0.12&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Defects4J version 1.x and 0.x required Java 1.7.&lt;/p&gt; &#xA;&lt;h4&gt;Java version&lt;/h4&gt; &#xA;&lt;p&gt;All bugs have been reproduced and triggering tests verified, using the latest version of Java 1.8. Using a different version of Java might result in unexpected failing tests on a fixed program version.&lt;/p&gt; &#xA;&lt;h4&gt;Timezone&lt;/h4&gt; &#xA;&lt;p&gt;Defects4J generates and executes tests in the timezone &lt;code&gt;America/Los_Angeles&lt;/code&gt;. If you are using the bugs outside of the Defects4J framework, set the &lt;code&gt;TZ&lt;/code&gt; environment variable to &lt;code&gt;America/Los_Angeles&lt;/code&gt; and export it.&lt;/p&gt; &#xA;&lt;h4&gt;Perl dependencies&lt;/h4&gt; &#xA;&lt;p&gt;All required Perl modules are listed in &lt;a href=&#34;https://github.com/rjust/defects4j/raw/master/cpanfile&#34;&gt;cpanfile&lt;/a&gt;. On many Unix platforms, these required Perl modules are installed by default. If this is not the case, see instructions below for how to install them.&lt;/p&gt; &#xA;&lt;h2&gt;Steps to set up Defects4J&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone Defects4J:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/rjust/defects4j&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initialize Defects4J (download the project repositories and external libraries, which are not included in the git repository for size purposes and to avoid redundancies): If you do not have &lt;code&gt;cpanm&lt;/code&gt; installed, use cpan or a cpan wrapper to install the perl modules listed in &lt;code&gt;cpanfile&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd defects4j&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cpanm --installdeps .&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;./init.sh&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Defects4J&#39;s executables to your PATH:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;export PATH=$PATH:&#34;path2defects4j&#34;/framework/bin&lt;/code&gt; (&#34;path2defects4j&#34; points to the directory to which you cloned Defects4J; it looks like &#34;/user/yourComputerUserName/desktop/defects4j&#34;.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check installation:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;defects4j info -p Lang&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;On some platforms such as Windows, you might need to use &lt;code&gt;perl &#34;fullpath&#34;\defects4j&lt;/code&gt; where these instructions say to use &lt;code&gt;defects4j&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Using Defects4J&lt;/h1&gt; &#xA;&lt;h4&gt;Example commands&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Get information for a specific project (commons lang):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;defects4j info -p Lang&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get information for a specific bug (commons lang, bug 1):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;defects4j info -p Lang -b 1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checkout a buggy source code version (commons lang, bug 1, buggy version):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;defects4j checkout -p Lang -v 1b -w /tmp/lang_1_buggy&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change to the working directory, compile sources and tests, and run tests:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd /tmp/lang_1_buggy&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;defects4j compile&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;defects4j test&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Some Defects4J commands take the project id as a command-line argument (possibly along with other arguments). Examples include &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;checkout&lt;/code&gt;, and &lt;code&gt;query&lt;/code&gt;. Note that &lt;code&gt;info&lt;/code&gt; and &lt;code&gt;query&lt;/code&gt; report infromation that is derived from the Defects4J metadata and do not require access to project files that are in the project&#39;s VCS.&lt;/p&gt; &lt;p&gt;Other commands require a working directory, either set explicitly (&lt;code&gt;-w&lt;/code&gt; command-line argument) or implicitly (executed from within a working directory). Examples include any command that requires access to files under version control, including source code and build files. This includes all commands that build or test the code (&lt;code&gt;compile&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;coverage&lt;/code&gt;, &lt;code&gt;mutation&lt;/code&gt;) and commands that return version-specific information (&lt;code&gt;export&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The scripts in &lt;a href=&#34;https://raw.githubusercontent.com/rjust/defects4j/master/framework/test/&#34;&gt;&lt;code&gt;framework/test/&lt;/code&gt;&lt;/a&gt; are examples of how to use Defects4J, which you might find useful as inspiration when you are writing your own scripts that use Defects4J.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Command-line interface: defects4j command&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;http://defects4j.org/html_doc/defects4j.html&#34;&gt;&lt;code&gt;framework/bin/defects4j&lt;/code&gt;&lt;/a&gt; to execute any of the following commands:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-info.html&#34;&gt;info&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;View configuration of a specific project or summary of a specific bug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-env.html&#34;&gt;env&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print the environment of defects4j executions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-checkout.html&#34;&gt;checkout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checkout a buggy or a fixed project version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-compile.html&#34;&gt;compile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Compile sources and developer-written tests of a buggy or a fixed project version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-test.html&#34;&gt;test&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run a single test method or a test suite on a buggy or a fixed project version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-mutation.html&#34;&gt;mutation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run mutation analysis on a buggy or a fixed project version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-coverage.html&#34;&gt;coverage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run code coverage analysis on a buggy or a fixed project version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-monitor.test.html&#34;&gt;monitor.test&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Monitor the class loader during the execution of a single test or a test suite&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-bids.html&#34;&gt;bids&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print the list of active or deprecated bug IDs for a specific project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-pids.html&#34;&gt;pids&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print a list of available project IDs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-export.html&#34;&gt;export&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Export version-specific properties such as classpaths, directories, or lists of tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/d4j/d4j-query.html&#34;&gt;query&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Query the metadata to generate a CSV file of requested information for a specific project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Export version-specific properties&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;defects4j export -p &amp;lt;property_name&amp;gt; [-o output_file]&lt;/code&gt; in the working directory to export a version-specific property:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;classes.modified&lt;/td&gt; &#xA;   &lt;td&gt;Classes modified by the bug fix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;classes.relevant&lt;/td&gt; &#xA;   &lt;td&gt;Classes loaded by the JVM when executing all triggering tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cp.compile&lt;/td&gt; &#xA;   &lt;td&gt;Classpath to compile and run the project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cp.test&lt;/td&gt; &#xA;   &lt;td&gt;Classpath to compile and run the developer-written tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dir.src.classes&lt;/td&gt; &#xA;   &lt;td&gt;Source directory of classes (relative to working directory)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dir.bin.classes&lt;/td&gt; &#xA;   &lt;td&gt;Target directory of classes (relative to working directory)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dir.src.tests&lt;/td&gt; &#xA;   &lt;td&gt;Source directory of tests (relative to working directory)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dir.bin.tests&lt;/td&gt; &#xA;   &lt;td&gt;Target directory of test classes (relative to working directory)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tests.all&lt;/td&gt; &#xA;   &lt;td&gt;List of all developer-written test classes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tests.relevant&lt;/td&gt; &#xA;   &lt;td&gt;List of relevant tests classes (a test class is relevant if, when executed, the JVM loads at least one of the modified classes)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tests.trigger&lt;/td&gt; &#xA;   &lt;td&gt;List of test methods that trigger (expose) the bug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Export project-specific metadata&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;defects4j query -p &amp;lt;pid&amp;gt; -q &amp;lt;field_list&amp;gt; [-o &amp;lt;output_file&amp;gt;] [-D|-A]&lt;/code&gt; to generate a CSV file containing a set of requested metadata for each bug in a specific project.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;defects4j query&lt;/code&gt; returns a list of active bug IDs for a project. To request specific metadata, the &lt;code&gt;-q&lt;/code&gt; flag should be provided with a comma-separated list of variables from the list below. For example, &lt;code&gt;defects4j query -p Chart -q &#34;report.id,report.url&#34;&lt;/code&gt; will provide the a list of all active bug IDs, along with the bug report ID and bug report URL for each.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bug.id&lt;/td&gt; &#xA;   &lt;td&gt;Assigned bug IDs (included in all results)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project.id&lt;/td&gt; &#xA;   &lt;td&gt;Assigned project ID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project.name&lt;/td&gt; &#xA;   &lt;td&gt;Original project name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project.build.file&lt;/td&gt; &#xA;   &lt;td&gt;Location of the Defects4J build file for the project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project.vcs&lt;/td&gt; &#xA;   &lt;td&gt;Version control system used by the project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project.repository&lt;/td&gt; &#xA;   &lt;td&gt;Location of the project repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project.bugs.csv&lt;/td&gt; &#xA;   &lt;td&gt;Location of the CSV containing information on that bug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;revision.id.buggy&lt;/td&gt; &#xA;   &lt;td&gt;Commit hashes for the buggy version of each bug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;revision.id.fixed&lt;/td&gt; &#xA;   &lt;td&gt;Commit hashes for the fixed version of each bug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;revision.date.buggy&lt;/td&gt; &#xA;   &lt;td&gt;Date of the buggy commit for each bug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;revision.date.fixed&lt;/td&gt; &#xA;   &lt;td&gt;Date of the fixed commit for each bug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;report.id&lt;/td&gt; &#xA;   &lt;td&gt;Bug report ID from the version tracker for each bug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;report.url&lt;/td&gt; &#xA;   &lt;td&gt;Bug report URL from the version tracker for each bug&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;classes.modified&lt;/td&gt; &#xA;   &lt;td&gt;Classes modified by the bug fix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;classes.relevant.src&lt;/td&gt; &#xA;   &lt;td&gt;Source classes loaded by the JVM when executing all triggering tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;classes.relevant.test&lt;/td&gt; &#xA;   &lt;td&gt;Test classes loaded by the JVM when executing all triggering tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tests.relevant&lt;/td&gt; &#xA;   &lt;td&gt;List of relevant tests classes (a test class is relevant if, when executed, the JVM loads at least one of the modified classes)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tests.trigger&lt;/td&gt; &#xA;   &lt;td&gt;List of test methods that trigger (expose) the bug, separated by semicolons (&lt;code&gt;;&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tests.trigger.cause&lt;/td&gt; &#xA;   &lt;td&gt;List of test methods that trigger (expose) the bug, along with the exception thrown. Each list element has the form &#34;methodName --&amp;gt; exceptionClass[: message]&#34;, and list elements are separated by semicolons (&lt;code&gt;;&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deprecated.version&lt;/td&gt; &#xA;   &lt;td&gt;(for deprecated bugs only) Version of Defects4J where a bug was deprecated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deprecated.reason&lt;/td&gt; &#xA;   &lt;td&gt;(for deprecated bugs only) Reason for deprecation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;defects4j query&lt;/code&gt; returns information on active bugs. The &lt;code&gt;[-D]&lt;/code&gt; flag returns information only on deprecated bugs, while the &lt;code&gt;[-A]&lt;/code&gt; flag returns information for all active and deprecated bugs.&lt;/p&gt; &#xA;&lt;p&gt;To determine the methods that are changed between the buggy and fixed version of the code:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add this line to your user-level git attributes file: &lt;code&gt;*.java diff=java&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;git diff --no-index&lt;/code&gt;, for example &lt;code&gt;git diff --no-index /tmp/lang_1_buggy /tmp/lang_1_fixed&lt;/code&gt;. In the output, every line starting with &#34;@&#34; gives the method name of a changed method.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Test execution framework&lt;/h2&gt; &#xA;&lt;p&gt;The test execution framework for generated test suites (&lt;code&gt;framework/bin&lt;/code&gt;) provides the following scripts:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Script&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/defects4j.html&#34;&gt;defects4j&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main script, described above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/gen_tests.html&#34;&gt;gen_tests&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generate test suites using EvoSuite or Randoop&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/run_bug_detection.html&#34;&gt;run_bug_detection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine the real fault detection rate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/run_mutation.html&#34;&gt;run_mutation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine the mutation score&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://defects4j.org/html_doc/run_coverage.html&#34;&gt;run_coverage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine code coverage ratios (statement and branch coverage)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Mining and contributing additional bugs to Defects4J&lt;/h1&gt; &#xA;&lt;p&gt;We welcome your contributions to Defects4J! The bug-mining &lt;a href=&#34;https://raw.githubusercontent.com/rjust/defects4j/master/framework/bug-mining/README.md&#34;&gt;README&lt;/a&gt; details the bug-mining process.&lt;/p&gt; &#xA;&lt;h1&gt;Additional resources&lt;/h1&gt; &#xA;&lt;h2&gt;Scripts built on Defects4J&lt;/h2&gt; &#xA;&lt;h4&gt;Fault localization (FL)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/rjust/fault-localization-data&#34;&gt;Scripts and annotations for evaluating FL techniques&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Automated program repair (APR)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LASER-UMASS/AutomatedRepairApplicabilityData&#34;&gt;Scripts and annotations for evaluating APR techniques&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Spirals-Team/defects4j-repair&#34;&gt;Patches generated with the Nopol, jGenProg, and jKali APR systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://program-repair.org/defects4j-dissection/&#34;&gt;Repair actions and patterns for Defects4J v1.2.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;Defects4J: A Database of Existing Faults to Enable Controlled Testing Studies for Java Programs&#34; René Just, Darioush Jalali, and Michael D. Ernst, ISSTA 2014 &lt;a href=&#34;https://people.cs.umass.edu/~rjust/publ/defects4j_issta_2014.pdf&#34;&gt;[download]&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;Are Mutants a Valid Substitute for Real Faults in Software Testing?&#34; René Just, Darioush Jalali, Laura Inozemtseva, Michael D. Ernst, Reid Holmes, and Gordon Fraser, FSE 2014 &lt;a href=&#34;https://people.cs.umass.edu/~rjust/publ/mutants_real_faults_fse_2014.pdf&#34;&gt;[download]&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;Challenges in Using Search-Based Test Generation to Identify Real Faults in Mockito&#34; Gregory Gay, SSBSE 2016 &lt;a href=&#34;https://greg4cr.github.io/pdf/16mockito.pdf&#34;&gt;[download]&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;Detecting Real Faults in the Gson Library Through Search-Based Unit Test Generation&#34; Gregory Gay, SSBSE 2018 &lt;a href=&#34;https://greg4cr.github.io/pdf/18gson.pdf&#34;&gt;[download]&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;Defects4J as a Challenge Case for the Search-Based Software Engineering Community&#34; Gregory Gay and René Just, SSBSE 2020 &lt;a href=&#34;https://greg4cr.github.io/pdf/20d4j.pdf&#34;&gt;[download]&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scholar.google.com/scholar?q=defects4j&#34;&gt;More publications&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Implementation details&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for any script or module is available as &lt;a href=&#34;http://defects4j.org/html_doc/index.html&#34;&gt;HTML documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The directory structure of Defects4J is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;defects4j&#xA;   |&#xA;   |--- project_repos:     The version control repositories of the provided projects.&#xA;   |&#xA;   |--- major:             The Major mutation framework.&#xA;   |&#xA;   |--- framework:         Libraries and executables of the core, test execution,&#xA;       |                   and bug-mining frameworks.&#xA;       |&#xA;       |--- bin:           Command line interface to Defects4J.&#xA;       |&#xA;       |--- bug-mining:    Bug-mining framework.&#xA;       |&#xA;       |--- core:          The modules of the core framework.&#xA;       |&#xA;       |--- lib:           Libraries used in the core framework.&#xA;       |&#xA;       |--- util:          Util scripts used by Defects4J.&#xA;       |&#xA;       |--- projects:      Project-specific resource files.&#xA;       |&#xA;       |--- test:          Scripts to test the framework.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning information&lt;/h2&gt; &#xA;&lt;p&gt;Defects4J uses a semantic versioning scheme (&lt;code&gt;major&lt;/code&gt;.&lt;code&gt;minor&lt;/code&gt;.&lt;code&gt;patch&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Change&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;major&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;minor&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;patch&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Addition/Deletion of bugs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;X&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;New/upgraded internal or external tools&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;X&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fixes and documentation changes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;X&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License, see &lt;a href=&#34;https://github.com/rjust/defects4j/raw/master/license.txt&#34;&gt;&lt;code&gt;license.txt&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>holzschu/a-shell</title>
    <updated>2024-06-01T01:48:02Z</updated>
    <id>tag:github.com,2024-06-01:/holzschu/a-shell</id>
    <link href="https://github.com/holzschu/a-shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A terminal for iOS, with multiple windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;a-shell: A terminal for iOS, with multiple windows&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-iOS%2014.0+-lightgrey.svg?sanitize=true&#34; alt=&#34;Platform: iOS&#34;&gt; &lt;a href=&#34;https://twitter.com/a_Shell_iOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-@a__Shell__iOS-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/cvYnZm69Gy&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/935519150305050644?color=5865f2&amp;amp;label=Discord&amp;amp;style=flat&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;The goal in this project is to provide a simple Unix-like terminal on iOS. It uses &lt;a href=&#34;https://github.com/holzschu/ios_system/&#34;&gt;ios_system&lt;/a&gt; for command interpretation, and includes all commands from the &lt;a href=&#34;https://github.com/holzschu/ios_system/&#34;&gt;ios_system&lt;/a&gt; ecosystem (nslookup, whois, python3, lua, pdflatex, lualatex...)&lt;/p&gt; &#xA;&lt;p&gt;The project uses iPadOS 13 ability to create and manage multiple windows. Each window has its own context, appearance, command history and current directory. &lt;code&gt;newWindow&lt;/code&gt; opens a new window, &lt;code&gt;exit&lt;/code&gt; closes the current window.&lt;/p&gt; &#xA;&lt;p&gt;For help, type &lt;code&gt;help&lt;/code&gt; in the command line. &lt;code&gt;help -l&lt;/code&gt; lists all the available commands. &lt;code&gt;help -l | grep command&lt;/code&gt; will tell you if your favorite command is already installed.&lt;/p&gt; &#xA;&lt;p&gt;You can change the appearance of a-Shell using &lt;code&gt;config&lt;/code&gt;. It lets you change the font, the font size, the background color, the text color and the cursor color and shape. Each window can have its own appearance. &lt;code&gt;config -p&lt;/code&gt; will make the settings for the current window permanent, that is used for all future windows. With &lt;code&gt;config -t&lt;/code&gt; you can also configure the toolbar.&lt;/p&gt; &#xA;&lt;p&gt;When opening a new window, a-Shell executes the file &lt;code&gt;.profile&lt;/code&gt; if it exists. You can use this mechanism to customize further, e.g. have custom environment variables or cleanup temporary files.&lt;/p&gt; &#xA;&lt;p&gt;For more tips on how to use a-Shell, see &lt;a href=&#34;https://bianshen00009.gitbook.io/a-guide-to-a-shell/&#34;&gt;the document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;AppStore&lt;/h2&gt; &#xA;&lt;p&gt;a-Shell is now &lt;a href=&#34;https://holzschu.github.io/a-Shell_iOS/&#34;&gt;available on the AppStore&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to compile it?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to compile the project yourself, you will need the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download the entire project and its sub-modules: &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;download all the xcFrameworks: &lt;code&gt;downloadFrameworks.sh&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;this will download the standard Apple frameworks (in &lt;code&gt;xcfs/.build/artefacts/xcfs&lt;/code&gt;, with checksum control).&lt;/li&gt; &#xA;   &lt;li&gt;There are too many Python frameworks (more than 2000) for automatic download. You can either remove them from the &#34;Embed&#34; step in the project, or compile them: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You&#39;ll need the Xcode command line tools, if you don&#39;t already have them: &lt;code&gt;sudo xcode-select --install&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;You also need the OpenSSL libraries (libssl and libcrypto), XQuartz (freetype), and Node.js (npm) for macOS (we provide the versions for iOS and simulator).&lt;/li&gt; &#xA;     &lt;li&gt;change directory to &lt;code&gt;cpython&lt;/code&gt;: &lt;code&gt;cd cpython&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;build Python 3.11 and all the associated libraries / frameworks: &lt;code&gt;sh ./downloadAndCompile.sh&lt;/code&gt; (this step takes several hours on a 2GHz i5 MBP, YMMV).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;a-Shell now runs on the devices. a-Shell mini can run on the devices and the simulator.&lt;/p&gt; &#xA;&lt;p&gt;Because Python 3.x uses functions that are only available on the iOS 14 SDK, I&#39;ve set the minimum iOS version to 14.0. It also reduces the size of the binaries, so &lt;code&gt;ios_system&lt;/code&gt; and the other frameworks have the same settings. If you need to run it on an iOS 13 device, you&#39;ll have to recompile most frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Home directory&lt;/h2&gt; &#xA;&lt;p&gt;In iOS, you cannot write in the &lt;code&gt;~&lt;/code&gt; directory, only in &lt;code&gt;~/Documents/&lt;/code&gt;, &lt;code&gt;~/Library/&lt;/code&gt; and &lt;code&gt;~/tmp&lt;/code&gt;. Most Unix programs assume the configuration files are in &lt;code&gt;$HOME&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So a-Shell changes several environment variables so that they point to &lt;code&gt;~/Documents&lt;/code&gt;. Type &lt;code&gt;env&lt;/code&gt; to see them.&lt;/p&gt; &#xA;&lt;p&gt;Most configuration files (Python packages, TeX files, Clang SDK...) are in &lt;code&gt;~/Library&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sandbox and Bookmarks&lt;/h2&gt; &#xA;&lt;p&gt;a-Shell uses iOS 13 ability to access directories in other Apps sandbox. Type &lt;code&gt;pickFolder&lt;/code&gt; to access a directory inside another App. Once you have selected a directory, you can do pretty much anything you want here, so be careful.&lt;/p&gt; &#xA;&lt;p&gt;All the directories you access with &lt;code&gt;pickFolder&lt;/code&gt; are bookmarked, so you can return to them later without &lt;code&gt;pickFolder&lt;/code&gt;. You can also bookmark the current directory with &lt;code&gt;bookmark&lt;/code&gt;. &lt;code&gt;showmarks&lt;/code&gt; will list all the existing bookmarks, &lt;code&gt;jump mark&lt;/code&gt; and &lt;code&gt;cd ~mark&lt;/code&gt; will change the current directory to this specific bookmark, &lt;code&gt;renamemark&lt;/code&gt; will let you change the name of a specific bookmark and &lt;code&gt;deletemark&lt;/code&gt; will delete a bookmark.&lt;/p&gt; &#xA;&lt;p&gt;A user-configurable option in Settings lets you use the commands &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; instead or as well.&lt;/p&gt; &#xA;&lt;p&gt;If you are lost, &lt;code&gt;cd&lt;/code&gt; will always bring you back to &lt;code&gt;~/Documents/&lt;/code&gt;. &lt;code&gt;cd -&lt;/code&gt; will change to the previous directory.&lt;/p&gt; &#xA;&lt;h2&gt;Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;a-Shell is compatible with Apple Shortcuts, giving users full control of the Shell. You can write complex Shortcuts to download, process and release files using a-Shell commands. There are three shortcuts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Execute Command&lt;/code&gt;, which takes a list of commands and executes them in order. The input can also be a file or a text node, in which case the commands inside the node are executed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Put File&lt;/code&gt; and &lt;code&gt;Get File&lt;/code&gt; are used to transfer files to and from a-Shell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Shortcuts can be executed either &#34;In Extension&#34; or &#34;In App&#34;. &#34;In Extension&#34; means the shortcut runs in a lightweight version of the App, without no graphical user interface. It is good for light commands that do not require configuration files or system libraries (mkdir, nslookup, whois, touch, cat, echo...). &#34;In App&#34; opens the main application to execute the shortcut. It has access to all the commands, but will take longer. Once a shortcut has opened the App, you can return to the Shortcuts app by calling the command &lt;code&gt;open shortcuts://&lt;/code&gt;. The default behaviour is to try to run the commands &#34;in Extension&#34; as much as possible, based on the content of the commands. You can force a specific shortcut to run &#34;in App&#34; or &#34;in Extension&#34;, with the warning that it won&#39;t always work.&lt;/p&gt; &#xA;&lt;p&gt;Both kind of shortcuts run by default in the same specific directory, &lt;code&gt;$SHORTCUTS&lt;/code&gt; or &lt;code&gt;~shortcuts&lt;/code&gt;. Of course, since you can run the commands &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;jump&lt;/code&gt; in a shortcut, you can pretty much go anywhere.&lt;/p&gt; &#xA;&lt;h2&gt;Programming / add more commands:&lt;/h2&gt; &#xA;&lt;p&gt;a-Shell has several programming languages installed: Python, Lua, JS, C, C++ and TeX.&lt;/p&gt; &#xA;&lt;p&gt;For C and C++, you compile your programs with &lt;code&gt;clang program.c&lt;/code&gt; and it produces a webAssembly file. You can then execute it with &lt;code&gt;wasm a.out&lt;/code&gt;. You can also link multiple object files together, make a static library with &lt;code&gt;ar&lt;/code&gt;, etc. Once you are satisfied with your program, if you move it to a directory in the &lt;code&gt;$PATH&lt;/code&gt; (e.g. &lt;code&gt;~/Documents/bin&lt;/code&gt;) and rename it &lt;code&gt;program.wasm&lt;/code&gt;, it will be executed if you type &lt;code&gt;program&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;p&gt;You can also cross-compile programs on your main computer using our specific &lt;a href=&#34;https://github.com/holzschu/wasi-sdk&#34;&gt;WASI-sdk&lt;/a&gt;, and transfer the WebAssembly file to your iPad or iPhone.&lt;/p&gt; &#xA;&lt;p&gt;Precompiled WebAssembly commands specific for a-Shell are available here: &lt;a href=&#34;https://github.com/holzschu/a-Shell-commands&#34;&gt;https://github.com/holzschu/a-Shell-commands&lt;/a&gt; These include &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, &lt;code&gt;xz&lt;/code&gt;, &lt;code&gt;ffmpeg&lt;/code&gt;... You install them on your iPad by downloading them and placing them in the &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have the limitations of WebAssembly: no sockets, no forks, no interactive user input (piping input from other commands with &lt;code&gt;command | wasm program.wasm&lt;/code&gt; works fine).&lt;/p&gt; &#xA;&lt;p&gt;For Python, you can install more packages with &lt;code&gt;pip install packagename&lt;/code&gt;, but only if they are pure Python. The C compiler is not yet able to produce dynamic libraries that could be used by Python.&lt;/p&gt; &#xA;&lt;p&gt;TeX files are not installed by default. Type any TeX command and the system will prompt you to download them. Same with LuaTeX files.&lt;/p&gt; &#xA;&lt;h2&gt;VoiceOver&lt;/h2&gt; &#xA;&lt;p&gt;If you enable VoiceOver in Settings, a-Shell will work with VoiceOver: reading commands as you type them, reading the result, letting you read the screen with your finger...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>owasp-modsecurity/ModSecurity-nginx</title>
    <updated>2024-06-01T01:48:02Z</updated>
    <id>tag:github.com,2024-06-01:/owasp-modsecurity/ModSecurity-nginx</id>
    <link href="https://github.com/owasp-modsecurity/ModSecurity-nginx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ModSecurity v3 Nginx Connector&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/SpiderLabs/ModSecurity/raw/v3/master/others/modsec.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SpiderLabs/ModSecurity-nginx&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SpiderLabs/ModSecurity-nginx.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zenhub.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZenHubIO/support/master/zenhub-badge.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The ModSecurity-nginx connector is the connection point between nginx and libmodsecurity (ModSecurity v3). Said another way, this project provides a communication channel between nginx and libmodsecurity. This connector is required to use LibModSecurity with nginx.&lt;/p&gt; &#xA;&lt;p&gt;The ModSecurity-nginx connector takes the form of an nginx module. The module simply serves as a layer of communication between nginx and ModSecurity.&lt;/p&gt; &#xA;&lt;p&gt;Notice that this project depends on libmodsecurity rather than ModSecurity (version 2.9 or less).&lt;/p&gt; &#xA;&lt;h3&gt;What is the difference between this project and the old ModSecurity add-on for nginx?&lt;/h3&gt; &#xA;&lt;p&gt;The old version uses ModSecurity standalone, which is a wrapper for Apache internals to link ModSecurity to nginx. This current version is closer to nginx, consuming the new libmodsecurity which is no longer dependent on Apache. As a result, this current version has less dependencies, fewer bugs, and is faster. In addition, some new functionality is also provided - such as the possibility of use of global rules configuration with per directory/location customizations (e.g. SecRuleRemoveById).&lt;/p&gt; &#xA;&lt;h1&gt;Compilation&lt;/h1&gt; &#xA;&lt;p&gt;Before compile this software make sure that you have libmodsecurity installed. You can download it from the &lt;a href=&#34;https://github.com/SpiderLabs/ModSecurity&#34;&gt;ModSecurity git repository&lt;/a&gt;. For information pertaining to the compilation and installation of libmodsecurity please consult the documentation provided along with it.&lt;/p&gt; &#xA;&lt;p&gt;With libmodsecurity installed, you can proceed with the installation of the ModSecurity-nginx connector, which follows the nginx third-party module installation procedure. From the nginx source directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --add-module=/path/to/ModSecurity-nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, to build a dynamic module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./configure --add-dynamic-module=/path/to/ModSecurity-nginx --with-compat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when building a dynamic module, your nginx source version needs to match the version of nginx you&#39;re compiling this for.&lt;/p&gt; &#xA;&lt;p&gt;Further information about nginx third-party add-ons support are available here: &lt;a href=&#34;http://wiki.nginx.org/3rdPartyModules&#34;&gt;http://wiki.nginx.org/3rdPartyModules&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;ModSecurity for nginx extends your nginx configuration directives. It adds four new directives and they are:&lt;/p&gt; &#xA;&lt;h2&gt;modsecurity&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;modsecurity on | off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;off&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Turns on or off ModSecurity functionality. Note that this configuration directive is no longer related to the SecRule state. Instead, it now serves solely as an nginx flag to enable or disable the module.&lt;/p&gt; &#xA;&lt;h2&gt;modsecurity_rules_file&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;modsecurity_rules_file &amp;lt;path to rules file&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;no&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the location of the modsecurity configuration file, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {&#xA;    modsecurity on;&#xA;    location / {&#xA;        root /var/www/html;&#xA;        modsecurity_rules_file /etc/my_modsecurity_rules.conf;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;modsecurity_rules_remote&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;modsecurity_rules_remote &amp;lt;key&amp;gt; &amp;lt;URL to rules&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;no&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies from where (on the internet) a modsecurity configuration file will be downloaded. It also specifies the key that will be used to authenticate to that server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {&#xA;    modsecurity on;&#xA;    location / {&#xA;        root /var/www/html;&#xA;        modsecurity_rules_remote my-server-key https://my-own-server/rules/download;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;modsecurity_rules&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;modsecurity_rules &amp;lt;modsecurity rule&amp;gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;no&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Allows for the direct inclusion of a ModSecurity rule into the nginx configuration. The following example is loading rules from a file and injecting specific configurations per directory/alias:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {&#xA;    modsecurity on;&#xA;    location / {&#xA;        root /var/www/html;&#xA;        modsecurity_rules_file /etc/my_modsecurity_rules.conf;&#xA;    }&#xA;    location /ops {&#xA;        root /var/www/html/opts;&#xA;        modsecurity_rules &#39;&#xA;          SecRuleEngine On&#xA;          SecDebugLog /tmp/modsec_debug.log&#xA;          SecDebugLogLevel 9&#xA;          SecRuleRemoveById 10&#xA;        &#39;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;modsecurity_transaction_id&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;modsecurity_transaction_id string&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http, server, location&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;default:&lt;/strong&gt; &lt;em&gt;no&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Allows to pass transaction ID from nginx instead of generating it in the library. This can be useful for tracing purposes, e.g. consider this configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;log_format extended &#39;$remote_addr - $remote_user [$time_local] &#39;&#xA;                    &#39;&#34;$request&#34; $status $body_bytes_sent &#39;&#xA;                    &#39;&#34;$http_referer&#34; &#34;$http_user_agent&#34; $request_id&#39;;&#xA;&#xA;server {&#xA;    server_name host1;&#xA;    modsecurity on;&#xA;    modsecurity_transaction_id &#34;host1-$request_id&#34;;&#xA;    access_log logs/host1-access.log extended;&#xA;    error_log logs/host1-error.log;&#xA;    location / {&#xA;        ...&#xA;    }&#xA;}&#xA;&#xA;server {&#xA;    server_name host2;&#xA;    modsecurity on;&#xA;    modsecurity_transaction_id &#34;host2-$request_id&#34;;&#xA;    access_log logs/host2-access.log extended;&#xA;    error_log logs/host2-error.log;&#xA;    location / {&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a combination of log_format and modsecurity_transaction_id you will be able to find correlations between access log and error log entries using the same unique identificator.&lt;/p&gt; &#xA;&lt;p&gt;String can contain variables.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;As an open source project we invite (and encourage) anyone from the community to contribute to our project. This may take the form of: new functionality, bug fixes, bug reports, beginners user support, and anything else that you are willing to help with. Thank you.&lt;/p&gt; &#xA;&lt;h2&gt;Providing Patches&lt;/h2&gt; &#xA;&lt;p&gt;We prefer to have your patch within the GitHub infrastructure to facilitate our review work, and our QA integration. GitHub provides an excellent documentation on how to perform “Pull Requests”. More information available here: &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;https://help.github.com/articles/using-pull-requests/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please respect the coding style in use. Pull requests can include various commits, so provide one fix or one functionality per commit. Do not change anything outside the scope of your target work (e.g. coding style in a function that you have passed by).&lt;/p&gt; &#xA;&lt;h3&gt;Don’t know where to start?&lt;/h3&gt; &#xA;&lt;p&gt;Within our code there are various items marked as TODO or FIXME that may need your attention. Check the list of items by performing a grep:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/modsecurity-nginx&#xA;$ egrep -Rin &#34;TODO|FIXME&#34; -R *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also take a look at recent bug reports and open issues to get an idea of what kind of help we are looking for.&lt;/p&gt; &#xA;&lt;h3&gt;Testing your patch&lt;/h3&gt; &#xA;&lt;p&gt;Along with the manual testing, we strongly recommend that you to use the nginx test utility to make sure that you patch does not adversely affect the behavior or performance of nginx.&lt;/p&gt; &#xA;&lt;p&gt;The nginx tests are available on: &lt;a href=&#34;http://hg.nginx.org/nginx-tests/&#34;&gt;http://hg.nginx.org/nginx-tests/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use those tests, make sure you have the Perl utility prove (part of Perl 5) and proceed with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cp /path/to/ModSecurity-nginx/tests/* /path/to/nginx/test/repository&#xA;$ cd /path/to/nginx/test/repository&#xA;$ TEST_NGINX_BINARY=/path/to/your/nginx prove .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are facing problems getting your added functionality to pass all the nginx tests, feel free to contact us or the nginx mailing list at: &lt;a href=&#34;http://nginx.org/en/support.html&#34;&gt;http://nginx.org/en/support.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;We respect the nginx debugging schema. By using the configuration option &#34;--with-debug&#34; during the nginx configuration you will also be enabling the connector&#39;s debug messages. Core dumps and crashes are expected to be debugged in the same fashion that is used to debug nginx. For further information, please check the nginx debugging information: &lt;a href=&#34;http://wiki.nginx.org/Debugging&#34;&gt;http://wiki.nginx.org/Debugging&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are facing a configuration issue or if something is not working as you expect it to be, please use ModSecurity user’s mailing list. Issues on GitHub are also welcome, but we prefer to have users question on the mailing list first, where you can reach an entire community. Also don’t forget to look for an existing issue before opening a new one.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, If you are planning to open an issue on GitHub, please don’t forget to tell us the version of your libmodsecurity and the version of the nginx connector you are running.&lt;/p&gt; &#xA;&lt;h3&gt;Security issue&lt;/h3&gt; &#xA;&lt;p&gt;Please do not publicly report any security issue. Instead, contact us at: &lt;a href=&#34;mailto:security@modsecurity.org&#34;&gt;security@modsecurity.org&lt;/a&gt; to report the issue. Once the problem is fixed we will provide you with credit for the discovery.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Request&lt;/h2&gt; &#xA;&lt;p&gt;We would love to discuss any ideas that you may have for a new feature. Please keep in mind this is a community driven project so be sure to contact the community via the mailing list to get feedback first. Alternatively, feel free to open GitHub issues requesting for new features. Before opening a new issue, please check if there is an existing feature request for the desired functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;p&gt;Having our packages in distros on time is something we highly desire. Let us know if there is anything we can do to facilitate your work as a packager.&lt;/p&gt;</summary>
  </entry>
</feed>