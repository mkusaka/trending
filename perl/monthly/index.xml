<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-01T02:09:34Z</updated>
  <subtitle>Monthly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LMS-Community/slimserver</title>
    <updated>2024-04-01T02:09:34Z</updated>
    <id>tag:github.com,2024-04-01:/LMS-Community/slimserver</id>
    <link href="https://github.com/LMS-Community/slimserver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Server for Logitech Squeezebox players. This server is also called Logitech Media Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lyrion Music Server&lt;/h1&gt; &#xA;&lt;p&gt;Lyrion Music Server (aka. LMS, fka. Logitech Mediaserver, SlimServer, SqueezeCenter, SqueezeboxServer, SliMP3) is the server software that powers audio players from &lt;a href=&#34;https://www.logi.com&#34;&gt;Logitech&lt;/a&gt; (formerly known as SlimDevices), including &lt;a href=&#34;https://lms-community.github.io/players-and-controllers/hardware-comparison/&#34;&gt;Squeezebox 3rd Generation, Squeezebox Boom, Squeezebox Receiver, Transporter, Squeezebox2, Squeezebox and SLIMP3&lt;/a&gt;, and many software emulators like &lt;a href=&#34;https://sourceforge.net/projects/lmsclients/files/&#34;&gt;Squeezelite and SqueezePlay&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the help of many plugins, Lyrion Music Server can stream not only your local music collection, but content from many music services and internet radio stations to your players.&lt;/p&gt; &#xA;&lt;p&gt;Lyrion Music Server is written in Perl. It runs on pretty much any platform that Perl runs on, including Linux, Mac OSX, Solaris and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy the music on your Squeezebox!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tseemann/prokka</title>
    <updated>2024-04-01T02:09:34Z</updated>
    <id>tag:github.com,2024-04-01:/tseemann/prokka</id>
    <link href="https://github.com/tseemann/prokka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡ ♒ Rapid prokaryotic genome annotation&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/tseemann/prokka&#34;&gt;&lt;img src=&#34;https://travis-ci.org/tseemann/prokka.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btu153&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.1093/bioinformatics/btu153.svg?sanitize=true&#34; alt=&#34;DOI:10.1093/bioinformatics/btu153&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Language-Perl_5-steelblue.svg?sanitize=true&#34; alt=&#34;Don&#39;t judge me&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Prokka: rapid prokaryotic genome annotation&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Whole genome annotation is the process of identifying features of interest in a set of genomic DNA sequences, and labelling them with useful information. Prokka is a software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Bioconda&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://conda.io/docs/install/quick.html&#34;&gt;Conda&lt;/a&gt; you can use the &lt;a href=&#34;https://bioconda.github.io/&#34;&gt;Bioconda channel&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge -c bioconda -c defaults prokka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Brew&lt;/h3&gt; &#xA;&lt;p&gt;If you are using the &lt;a href=&#34;http://brew.sh/&#34;&gt;MacOS Brew&lt;/a&gt; or &lt;a href=&#34;http://brew.sh/linuxbrew/&#34;&gt;LinuxBrew&lt;/a&gt; packaging system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install brewsci/bio/prokka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Maintained by &lt;a href=&#34;https://hub.docker.com/u/staphb&#34;&gt;https://hub.docker.com/u/staphb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;docker pull staphb/prokka:latest&#xA;docker run staphb/prokka:latest prokka -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Singularity&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;singularity build prokka.sif docker://staphb/prokka:latest&#xA;singularity exec prokka.sif prokka -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ubuntu/Debian/Mint&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libdatetime-perl libxml-simple-perl libdigest-md5-perl git default-jre bioperl&#xA;sudo cpan Bio::Perl&#xA;git clone https://github.com/tseemann/prokka.git $HOME/prokka&#xA;$HOME/prokka/bin/prokka --setupdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Centos/Fedora/RHEL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install git perl-Time-Piece perl-XML-Simple perl-Digest-MD5 perl-App-cpanminus git java perl-CPAN perl-Module-Build&#xA;sudo cpanm Bio::Perl&#xA;git clone https://github.com/tseemann/prokka.git $HOME/prokka&#xA;$HOME/prokka/bin/prokka --setupdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo cpan Time::Piece XML::Simple Digest::MD5 Bio::Perl&#xA;git clone https://github.com/tseemann/prokka.git $HOME/prokka&#xA;$HOME/prokka/bin/prokka --setupdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type &lt;code&gt;prokka&lt;/code&gt; and it should output its help screen.&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;prokka --version&lt;/code&gt; and you should see an output like &lt;code&gt;prokka 1.x&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;prokka --listdb&lt;/code&gt; and it will show you what databases it has installed to use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Invoking Prokka&lt;/h2&gt; &#xA;&lt;h3&gt;Beginner&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Vanilla (but with free toppings)&#xA;% prokka contigs.fa&#xA;&#xA;# Look for a folder called PROKKA_yyyymmdd (today&#39;s date) and look at stats&#xA;% cat PROKKA_yyyymmdd/*.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Moderate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Choose the names of the output files&#xA;% prokka --outdir mydir --prefix mygenome contigs.fa&#xA;&#xA;# Visualize it in Artemis&#xA;% art mydir/mygenome.gff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specialist&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Have curated genomes I want to use to annotate from&#xA;% prokka --proteins MG1655.gbk --outdir mutant --prefix K12_mut contigs.fa&#xA;&#xA;# Look at tabular features&#xA;% less -S mutant/K12_mut.tsv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expert&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# It&#39;s not just for bacteria, people&#xA;% prokka --kingdom Archaea --outdir mydir --genus Pyrococcus --locustag PYCC&#xA;&#xA;# Search for your favourite gene&#xA;% exonerate --bestn 1 zetatoxin.fasta mydir/PYCC_06072012.faa | less&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wizard&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Watch and learn&#xA;% prokka --outdir mydir --locustag EHEC --proteins NewToxins.faa --evalue 0.001 --gram neg --addgenes contigs.fa&#xA;&#xA;# Check to see if anything went really wrong&#xA;% less mydir/EHEC_06072012.err&#xA;&#xA;# Add final details using Sequin&#xA;% sequin mydir/EHEC_0607201.sqn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NCBI Genbank submitter&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Register your BioProject (e.g. PRJNA123456) and your locus_tag prefix (e.g. EHEC) first!&#xA;% prokka --compliant --centre UoN --outdir PRJNA123456 --locustag EHEC --prefix EHEC-Chr1 contigs.fa&#xA;&#xA;# Check to see if anything went really wrong&#xA;% less PRJNA123456/EHEC-Chr1.err&#xA;&#xA;# Add final details using Sequin&#xA;% sequin PRJNA123456/EHEC-Chr1.sqn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;European Nucleotide Archive (ENA) submitter&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Register your BioProject (e.g. PRJEB12345) and your locus_tag (e.g. EHEC) prefix first!&#xA;% prokka --compliant --centre UoN --outdir PRJEB12345 --locustag EHEC --prefix EHEC-Chr1 contigs.fa&#xA;&#xA;# Check to see if anything went really wrong&#xA;% less PRJNA123456/EHEC-Chr1.err&#xA;&#xA;# Install and run Sanger Pathogen group&#39;s Prokka GFF3 to EMBL converter&#xA;# available from https://github.com/sanger-pathogens/gff3toembl&#xA;# Find the closest NCBI taxonomy id (e.g. 562 for Escherichia coli)&#xA;% gff3_to_embl -i &#34;Submitter, A.&#34; \&#xA;    -m &#34;Escherichia coli EHEC annotated using Prokka.&#34; \&#xA;    -g linear -c PROK -n 11 -f PRJEB12345/EHEC-Chr1.embl \&#xA;    &#34;Escherichia coli&#34; 562 PRJEB12345 &#34;Escherichia coli strain EHEC&#34; PRJEB12345/EHEC-Chr1.gff&#xA;&#xA;# Download and run the latest EMBL validator prior to submitting the EMBL flat file&#xA;# from http://central.maven.org/maven2/uk/ac/ebi/ena/sequence/embl-api-validator/&#xA;# which at the time of writing is v1.1.129&#xA;% curl -L -O http://central.maven.org/maven2/uk/ac/ebi/ena/sequence/embl-api-validator/1.1.129/embl-api-validator-1.1.129.jar&#xA;% java -jar embl-api-validator-1.1.129.jar -r PRJEB12345/EHEC-Chr1.embl&#xA;&#xA;# Compress the file ready to upload to ENA, and calculate MD5 checksum&#xA;% gzip PRJEB12345/EHEC-Chr1.embl&#xA;% md5sum PRJEB12345/EHEC-Chr1.embl.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Crazy Person&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# No stinking Perl script is going to control me&#xA;% prokka \&#xA;        --outdir $HOME/genomes/Ec_POO247 --force \&#xA;        --prefix Ec_POO247 --addgenes --locustag ECPOOp \&#xA;        --increment 10 --gffver 2 --centre CDC  --compliant \&#xA;        --genus Escherichia --species coli --strain POO247 --plasmid pECPOO247 \&#xA;        --kingdom Bacteria --gcode 11 --usegenus \&#xA;        --proteins /opt/prokka/db/trusted/Ecocyc-17.6 \&#xA;        --evalue 1e-9 --rfam \&#xA;        plasmid-closed.fna&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Output Files&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Extension&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.gff&lt;/td&gt; &#xA;   &lt;td&gt;This is the master annotation in GFF3 format, containing both sequences and annotations. It can be viewed directly in Artemis or IGV.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.gbk&lt;/td&gt; &#xA;   &lt;td&gt;This is a standard Genbank file derived from the master .gff. If the input to prokka was a multi-FASTA, then this will be a multi-Genbank, with one record for each sequence.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.fna&lt;/td&gt; &#xA;   &lt;td&gt;Nucleotide FASTA file of the input contig sequences.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.faa&lt;/td&gt; &#xA;   &lt;td&gt;Protein FASTA file of the translated CDS sequences.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.ffn&lt;/td&gt; &#xA;   &lt;td&gt;Nucleotide FASTA file of all the prediction transcripts (CDS, rRNA, tRNA, tmRNA, misc_RNA)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.sqn&lt;/td&gt; &#xA;   &lt;td&gt;An ASN1 format &#34;Sequin&#34; file for submission to Genbank. It needs to be edited to set the correct taxonomy, authors, related publication etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.fsa&lt;/td&gt; &#xA;   &lt;td&gt;Nucleotide FASTA file of the input contig sequences, used by &#34;tbl2asn&#34; to create the .sqn file. It is mostly the same as the .fna file, but with extra Sequin tags in the sequence description lines.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.tbl&lt;/td&gt; &#xA;   &lt;td&gt;Feature Table file, used by &#34;tbl2asn&#34; to create the .sqn file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.err&lt;/td&gt; &#xA;   &lt;td&gt;Unacceptable annotations - the NCBI discrepancy report.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.log&lt;/td&gt; &#xA;   &lt;td&gt;Contains all the output that Prokka produced during its run. This is a record of what settings you used, even if the --quiet option was enabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.txt&lt;/td&gt; &#xA;   &lt;td&gt;Statistics relating to the annotated features found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.tsv&lt;/td&gt; &#xA;   &lt;td&gt;Tab-separated file of all features: locus_tag,ftype,len_bp,gene,EC_number,COG,product&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Command line options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;General:&#xA;  --help            This help&#xA;  --version         Print version and exit&#xA;  --citation        Print citation for referencing Prokka&#xA;  --quiet           No screen output (default OFF)&#xA;  --debug           Debug mode: keep all temporary files (default OFF)&#xA;Setup:&#xA;  --listdb          List all configured databases&#xA;  --setupdb         Index all installed databases&#xA;  --cleandb         Remove all database indices&#xA;  --depends         List all software dependencies&#xA;Outputs:&#xA;  --outdir [X]      Output folder [auto] (default &#39;&#39;)&#xA;  --force           Force overwriting existing output folder (default OFF)&#xA;  --prefix [X]      Filename output prefix [auto] (default &#39;&#39;)&#xA;  --addgenes        Add &#39;gene&#39; features for each &#39;CDS&#39; feature (default OFF)&#xA;  --locustag [X]    Locus tag prefix (default &#39;PROKKA&#39;)&#xA;  --increment [N]   Locus tag counter increment (default &#39;1&#39;)&#xA;  --gffver [N]      GFF version (default &#39;3&#39;)&#xA;  --compliant       Force Genbank/ENA/DDJB compliance: --genes --mincontiglen 200 --centre XXX (default OFF)&#xA;  --centre [X]      Sequencing centre ID. (default &#39;&#39;)&#xA;Organism details:&#xA;  --genus [X]       Genus name (default &#39;Genus&#39;)&#xA;  --species [X]     Species name (default &#39;species&#39;)&#xA;  --strain [X]      Strain name (default &#39;strain&#39;)&#xA;  --plasmid [X]     Plasmid name or identifier (default &#39;&#39;)&#xA;Annotations:&#xA;  --kingdom [X]     Annotation mode: Archaea|Bacteria|Mitochondria|Viruses (default &#39;Bacteria&#39;)&#xA;  --gcode [N]       Genetic code / Translation table (set if --kingdom is set) (default &#39;0&#39;)&#xA;  --prodigaltf [X]  Prodigal training file (default &#39;&#39;)&#xA;  --gram [X]        Gram: -/neg +/pos (default &#39;&#39;)&#xA;  --usegenus        Use genus-specific BLAST databases (needs --genus) (default OFF)&#xA;  --proteins [X]    Fasta file of trusted proteins to first annotate from (default &#39;&#39;)&#xA;  --hmms [X]        Trusted HMM to first annotate from (default &#39;&#39;)&#xA;  --metagenome      Improve gene predictions for highly fragmented genomes (default OFF)&#xA;  --rawproduct      Do not clean up /product annotation (default OFF)&#xA;Computation:&#xA;  --fast            Fast mode - skip CDS /product searching (default OFF)&#xA;  --cpus [N]        Number of CPUs to use [0=all] (default &#39;8&#39;)&#xA;  --mincontiglen [N] Minimum contig size [NCBI needs 200] (default &#39;1&#39;)&#xA;  --evalue [n.n]    Similarity e-value cut-off (default &#39;1e-06&#39;)&#xA;  --rfam            Enable searching for ncRNAs with Infernal+Rfam (SLOW!) (default &#39;0&#39;)&#xA;  --norrna          Don&#39;t run rRNA search (default OFF)&#xA;  --notrna          Don&#39;t run tRNA search (default OFF)&#xA;  --rnammer         Prefer RNAmmer over Barrnap for rRNA prediction (default OFF)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Option: --proteins&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;--proteins&lt;/code&gt; option is recommended when you have good quality reference genomes and want to ensure gene naming is consistent. Some species use specific terminology which will be often lost if you rely on the default Swiss-Prot database included with Prokka.&lt;/p&gt; &#xA;&lt;p&gt;If you have Genbank or Protein FASTA file(s) that you want to annotate genes from as the first priority, use the &lt;code&gt;--proteins myfile.gbk&lt;/code&gt;. Please make sure it has a recognisable file extension like &lt;code&gt;.gb&lt;/code&gt; or &lt;code&gt;.gbk&lt;/code&gt; or auto-detect will fail. The use of Genbank is recommended over FASTA, because it will provide &lt;code&gt;/gene&lt;/code&gt; and &lt;code&gt;/EC_number&lt;/code&gt; annotations that a typical &lt;code&gt;.faa&lt;/code&gt; file will not provide, unless you have specially formatted it for Prokka.&lt;/p&gt; &#xA;&lt;h3&gt;Option: --prodigaltf&lt;/h3&gt; &#xA;&lt;p&gt;Instead of letting &lt;code&gt;prodigal&lt;/code&gt; train its gene model on the contigs you provide, you can pre-train it on some good closed reference genomes first using the &lt;code&gt;prodigal -t&lt;/code&gt; option. Once you&#39;ve done that, provide &lt;code&gt;prokka&lt;/code&gt; the training file using the &lt;code&gt;--prodgialtf&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h3&gt;Option: --rawproduct&lt;/h3&gt; &#xA;&lt;p&gt;Prokka annotates proteins by using sequence similarity to other proteins in its database, or the databases the user provides via &lt;code&gt;--proteins&lt;/code&gt;. By default, Prokka tries to &#34;cleans&#34; the &lt;code&gt;/product&lt;/code&gt; names to ensure they are compliant with Genbank/ENA conventions. Some of the main things it does is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;set vague names to &lt;code&gt;hypothetical protein&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;consistifies terms like &lt;code&gt;possible&lt;/code&gt;, &lt;code&gt;probable&lt;/code&gt;, &lt;code&gt;predicted&lt;/code&gt;, ... to &lt;code&gt;putative&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;removes EC, COG and locus_tag identifiers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full details can be found in the &lt;code&gt;cleanup_product()&lt;/code&gt; function in the &lt;code&gt;prokka&lt;/code&gt; script. If you feel your annotations are being ruined, try using the &lt;code&gt;--rawproduct&lt;/code&gt; option, and please &lt;a href=&#34;https://github.com/tseemann/prokka/issues/&#34;&gt;file an issue&lt;/a&gt; if you find an example of where it is &#34;behaving badly&#34; and I will fix it.&lt;/p&gt; &#xA;&lt;h2&gt;Databases&lt;/h2&gt; &#xA;&lt;h3&gt;The Core (BLAST+) Databases&lt;/h3&gt; &#xA;&lt;p&gt;Prokka uses a variety of databases when trying to assign function to the predicted CDS features. It takes a hierarchical approach to make it fast.&lt;br&gt; A small, core set of well characterized proteins are first searched using BLAST+. This combination of small database and fast search typically completes about 70% of the workload. Then a series of slower but more sensitive HMM databases are searched using HMMER3.&lt;/p&gt; &#xA;&lt;p&gt;The three core databases, applied in order, are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://isfinder.biotoul.fr/&#34;&gt;ISfinder&lt;/a&gt;: Only the tranposase (protein) sequences; the whole transposon is not annotated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/bioproject/313047&#34;&gt;NCBI Bacterial Antimicrobial Resistance Reference Gene Database&lt;/a&gt;: Antimicrobial resistance genes curated by NCBI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.uniprot.org/uniprot/?query=reviewed:yes&#34;&gt;UniProtKB (SwissProt)&lt;/a&gt;: For each &lt;code&gt;--kingdom&lt;/code&gt; we include curated proteins with evidence that (i) from Bacteria (or Archaea or Viruses); (ii) not be &#34;Fragment&#34; entries; and (iii) have an evidence level (&#34;PE&#34;) of 2 or lower, which corresponds to experimental mRNA or proteomics evidence.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Making a Core Databases&lt;/h4&gt; &#xA;&lt;p&gt;If you want to modify these core databases, the included script &lt;code&gt;prokka-uniprot_to_fasta_db&lt;/code&gt;, along with the official &lt;code&gt;uniprot_sprot.dat&lt;/code&gt;, can be used to generate a new database to put in &lt;code&gt;/opt/prokka/db/kingdom/&lt;/code&gt;. If you add new ones, the command &lt;code&gt;prokka --listdb&lt;/code&gt; will show you whether it has been detected properly.&lt;/p&gt; &#xA;&lt;h4&gt;The Genus Databases&lt;/h4&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This is no longer recommended. Please use &lt;code&gt;--proteins&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;If you enable &lt;code&gt;--usegenus&lt;/code&gt; and also provide a Genus via &lt;code&gt;--genus&lt;/code&gt; then it will first use a BLAST database which is Genus specific. Prokka comes with a set of databases for the most common Bacterial genera; type prokka &lt;code&gt;--listdb&lt;/code&gt; to see what they are.&lt;/p&gt; &#xA;&lt;h4&gt;Adding a Genus Databases&lt;/h4&gt; &#xA;&lt;p&gt;If you have a set of Genbank files and want to create a new Genus database, Prokka comes with a tool called &lt;code&gt;prokka-genbank_to_fasta_db&lt;/code&gt; to help. For example, if you had four annotated &#34;Coccus&#34; genomes, you could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% prokka-genbank_to_fasta_db Coccus1.gbk Coccus2.gbk Coccus3.gbk Coccus4.gbk &amp;gt; Coccus.faa&#xA;% cd-hit -i Coccus.faa -o Coccus -T 0 -M 0 -g 1 -s 0.8 -c 0.9&#xA;% rm -fv Coccus.faa Coccus.bak.clstr Coccus.clstr&#xA;% makeblastdb -dbtype prot -in Coccus&#xA;% mv Coccus.p* /path/to/prokka/db/genus/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The HMM Databases&lt;/h3&gt; &#xA;&lt;p&gt;Prokka comes with a bunch of HMM libraries for HMMER3. They are mostly Bacteria-specific. They are searched after the core and genus databases. You can add more simply by putting them in &lt;code&gt;/opt/prokka/db/hmm&lt;/code&gt;. Type &lt;code&gt;prokka --listdb&lt;/code&gt; to confirm they are recognised.&lt;/p&gt; &#xA;&lt;h3&gt;FASTA database format&lt;/h3&gt; &#xA;&lt;p&gt;Prokka understands two annotation tag formats, a plain one and a detailed one.&lt;/p&gt; &#xA;&lt;p&gt;The plain one is a standard FASTA-like line with the ID after the &lt;code&gt;&amp;gt;&lt;/code&gt; sign, and the protein &lt;code&gt;/product&lt;/code&gt; after the ID (the &#34;description&#34; part of the line):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;SeqID product&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The detailed one consists of a special encoded three-part description line. The parts are the &lt;code&gt;/EC_number&lt;/code&gt;, the &lt;code&gt;/gene&lt;/code&gt; code, then the &lt;code&gt;/product&lt;/code&gt; - and they are separated by a special &#34;~~~&#34; sequence:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;SeqID EC_number~~~gene~~~product~~~COG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are some examples. Note that not all parts need to be present, but the &#34;~~~&#34; should still be there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;YP_492693.1 2.1.1.48~~~ermC~~~rRNA adenine N-6-methyltransferase~~~COG1234&#xA;MNEKNIKHSQNFITSKHNIDKIMTNIRLNEHDNIFEIGSGKGHFTLELVQRCNFVTAIEI&#xA;DHKLCKTTENKLVDHDNFQVLNKDILQFKFPKNQSYKIFGNIPYNISTDIIRKIVF*&#xA;&amp;gt;YP_492697.1 ~~~traB~~~transfer complex protein TraB~~~&#xA;MIKKFSLTTVYVAFLSIVLSNITLGAENPGPKIEQGLQQVQTFLTGLIVAVGICAGVWIV&#xA;LKKLPGIDDPMVKNEMFRGVGMVLAGVAVGAALVWLVPWVYNLFQ*&#xA;&amp;gt;YP_492694.1 ~~~~~~transposase~~~&#xA;MNYFRYKQFNKDVITVAVGYYLRYALSYRDISEILRGRGVNVHHSTVYRWVQEYAPILYQ&#xA;QSINTAKNTLKGIECIYALYKKNRRSLQIYGFSPCHEISIMLAS*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same description lines apply to HMM models, except the &#34;NAME&#34; and &#34;DESC&#34; fields are used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NAME  PRK00001&#xA;ACC   PRK00001&#xA;DESC  2.1.1.48~~~ermC~~~rRNA adenine N-6-methyltransferase~~~COG1234&#xA;LENG  284&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Where does the name &#34;Prokka&#34; come from?&lt;/strong&gt;&lt;br&gt; Prokka is a contraction of &#34;prokaryotic annotation&#34;. It&#39;s also relatively unique within Google, and also rhymes with a native Australian marsupial called the quokka.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Can I annotate by eukaryote genome with Prokka?&lt;/strong&gt;&lt;br&gt; No. Prokka is specifically designed for Bacteria, Archaea and Viruses. It can&#39;t handle multi-exon gene models; I would recommend using MAKER 2 for that purpose.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why does Prokka keeps on crashing when it gets to the &#34;tbl2asn&#34; stage?&lt;/strong&gt;&lt;br&gt; It seems that the tbl2asn program from NCBI &#34;expires&#34; after 6-12 months, and refuses to run. Unfortunately you need to install a newer version which you can download from &lt;a href=&#34;http://www.ncbi.nlm.nih.gov/genbank/tbl2asn2/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The hmmscan step seems to hang and do nothing?&lt;/strong&gt;&lt;br&gt; The problem here is GNU Parallel. It seems the Debian package for hmmer has modified it to require the &lt;code&gt;--gnu&lt;/code&gt; option to behave in the &#39;default&#39; way. There is no clear reason for this. The only way to restore normal behaviour is to edit the prokka script and change &lt;code&gt;parallel&lt;/code&gt; to &lt;code&gt;parallel --gnu&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why does prokka fail when it gets to hmmscan?&lt;/strong&gt;&lt;br&gt; Unfortunately HMMER keeps changing its database format, and they aren&#39;t upward compatible. If you upgraded HMMER (from 3.0 to 3.1 say) then you need to &#34;re-press&#34; the files. This can be done as follows:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /path/to/prokka/db/hmm&#xA;mkdir new&#xA;for D in *.hmm ; do hmmconvert $D &amp;gt; new/$D ; done&#xA;cd new&#xA;for D in *.hmm ; do hmmpress $D ; done&#xA;mv * ..&#xA;rmdir new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why can&#39;t I load Prokka .GBK files into Mauve?&lt;/strong&gt;&lt;br&gt; Mauve uses BioJava to parse GenBank files, and it is very picky about Genbank files. It does not like long contig names, like those from Velvet or Spades. One solution is to use &lt;code&gt;--centre XXX&lt;/code&gt; in Prokka and it will rename all your contigs to be NCBI (and Mauve) compliant. It does not like the ACCESSION and VERSION strings that Prokka produces via the &#34;tbl2asn&#34; tool. The following Unix command will fix them: &lt;code&gt;egrep -v &#39;^(ACCESSION|VERSION)&#39; prokka.gbk &amp;gt; mauve.gbk&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;How can I make my GFF not have the contig sequences in it?&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sed &#39;/^##FASTA/Q&#39; prokka.gff &amp;gt; nosequence.gff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Submit problems or requests to the &lt;a href=&#34;https://github.com/tseemann/prokka/issues&#34;&gt;Issue Tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/tseemann/prokka/releases&#34;&gt;release notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/tseemann/prokka/master/doc/ChangeLog.txt&#34;&gt;ChangeLog.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Look at the &lt;a href=&#34;https://github.com/tseemann/prokka/commits/master&#34;&gt;Github commits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Seemann T.&lt;br&gt; &lt;em&gt;Prokka: rapid prokaryotic genome annotation&lt;/em&gt;&lt;br&gt; &lt;strong&gt;Bioinformatics&lt;/strong&gt; 2014 Jul 15;30(14):2068-9. &lt;a href=&#34;http://www.ncbi.nlm.nih.gov/pubmed/24642063&#34;&gt;PMID:24642063&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;Mandatory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;BioPerl&lt;/strong&gt;&lt;br&gt; Used for input/output of various file formats&lt;br&gt; &lt;em&gt;Stajich et al, The Bioperl toolkit: Perl modules for the life sciences. Genome Res. 2002 Oct;12(10):1611-8.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GNU Parallel&lt;/strong&gt;&lt;br&gt; A shell tool for executing jobs in parallel using one or more computers&lt;br&gt; &lt;em&gt;O. Tange, GNU Parallel - The Command-Line Power Tool, ;login: The USENIX Magazine, Feb 2011:42-47.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;BLAST+&lt;/strong&gt;&lt;br&gt; Used for similarity searching against protein sequence libraries&lt;br&gt; &lt;em&gt;Camacho C et al. BLAST+: architecture and applications. BMC Bioinformatics. 2009 Dec 15;10:421.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Prodigal&lt;/strong&gt;&lt;br&gt; Finds protein-coding features (CDS)&lt;br&gt; &lt;em&gt;Hyatt D et al. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinformatics. 2010 Mar 8;11:119.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TBL2ASN&lt;/strong&gt; Prepare sequence records for Genbank submission &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/genbank/tbl2asn2/&#34;&gt;Tbl2asn home page&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recommended&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Aragorn&lt;/strong&gt;&lt;br&gt; Finds transfer RNA features (tRNA)&lt;br&gt; &lt;em&gt;Laslett D, Canback B. ARAGORN, a program to detect tRNA genes and tmRNA genes in nucleotide sequences. Nucleic Acids Res. 2004 Jan 2;32(1):11-6.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Barrnap&lt;/strong&gt;&lt;br&gt; Used to predict ribosomal RNA features (rRNA). My licence-free replacement for RNAmmmer.&lt;br&gt; &lt;em&gt;Manuscript under preparation.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;HMMER3&lt;/strong&gt;&lt;br&gt; Used for similarity searching against protein family profiles&lt;br&gt; &lt;em&gt;Finn RD et al. HMMER web server: interactive sequence similarity searching. Nucleic Acids Res. 2011 Jul;39(Web Server issue):W29-37.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;minced&lt;/strong&gt;&lt;br&gt; Finds CRISPR arrays &lt;a href=&#34;https://github.com/ctSkennerton/minced&#34;&gt;Minced home page&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;RNAmmer&lt;/strong&gt;&lt;br&gt; Finds ribosomal RNA features (rRNA)&lt;br&gt; &lt;em&gt;Lagesen K et al. RNAmmer: consistent and rapid annotation of ribosomal RNA genes. Nucleic Acids Res. 2007;35(9):3100-8.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SignalP&lt;/strong&gt;&lt;br&gt; Finds signal peptide features in CDS (sig_peptide)&lt;br&gt; &lt;em&gt;Petersen TN et al. SignalP 4.0: discriminating signal peptides from transmembrane regions. Nat Methods. 2011 Sep 29;8(10):785-6.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infernal&lt;/strong&gt;&lt;br&gt; Used for similarity searching against ncRNA family profiles&lt;br&gt; &lt;em&gt;D. L. Kolbe, S. R. Eddy. Fast Filtering for RNA Homology Search. Bioinformatics, 27:3102-3109, 2011.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Licence&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tseemann/prokka/master/doc/LICENSE.Prokka&#34;&gt;GPL v3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Torsten Seemann&lt;/li&gt; &#xA; &lt;li&gt;Web: &lt;a href=&#34;https://tseemann.github.io/&#34;&gt;https://tseemann.github.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/torstenseemann&#34;&gt;@torstenseemann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blog: &lt;a href=&#34;https://thegenomefactory.blogspot.com/&#34;&gt;The Genome Factory&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>darold/pgbadger</title>
    <updated>2024-04-01T02:09:34Z</updated>
    <id>tag:github.com,2024-04-01:/darold/pgbadger</id>
    <link href="https://github.com/darold/pgbadger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast PostgreSQL Log Analyzer&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;TABLE OF CONTENTS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#NAME&#34;&gt;NAME&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#SYNOPSIS&#34;&gt;SYNOPSIS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#DESCRIPTION&#34;&gt;DESCRIPTION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#FEATURE&#34;&gt;FEATURE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#REQUIREMENT&#34;&gt;REQUIREMENT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#INSTALLATION&#34;&gt;INSTALLATION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#POSTGRESQL-CONFIGURATION&#34;&gt;POSTGRESQL-CONFIGURATION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#LOG-STATEMENTS&#34;&gt;LOG-STATEMENTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#PARALLEL-PROCESSING&#34;&gt;PARALLEL-PROCESSING&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#INCREMENTAL-REPORTS&#34;&gt;INCREMENTAL-REPORTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#BINARY-FORMAT&#34;&gt;BINARY-FORMAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#JSON-FORMAT&#34;&gt;JSON-FORMAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#AUTHORS&#34;&gt;AUTHORS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NAME&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger - a fast PostgreSQL log analysis report&lt;/p&gt; &#xA;&lt;h3&gt;SYNOPSIS&lt;/h3&gt; &#xA;&lt;p&gt;Usage: pgbadger [options] logfile [...]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PostgreSQL log analyzer with fully detailed reports and graphs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;logfile can be a single log file, a list of files, or a shell command&#xA;returning a list of files. If you want to pass log content from stdin&#xA;use - as filename. Note that input from stdin will not work with csvlog.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-a | --average minutes : number of minutes to build the average graphs of&#xA;                         queries and connections. Default 5 minutes.&#xA;-A | --histo-average min: number of minutes to build the histogram graphs&#xA;                         of queries. Default 60 minutes.&#xA;-b | --begin datetime  : start date/time for the data to be parsed in log&#xA;                         (either a timestamp or a time)&#xA;-c | --dbclient host   : only report on entries for the given client host.&#xA;-C | --nocomment       : remove comments like /* ... */ from queries.&#xA;-d | --dbname database : only report on entries for the given database.&#xA;-D | --dns-resolv      : client ip addresses are replaced by their DNS name.&#xA;                         Be warned that this can really slow down pgBadger.&#xA;-e | --end datetime    : end date/time for the data to be parsed in log&#xA;                         (either a timestamp or a time)&#xA;-E | --explode         : explode the main report by generating one report&#xA;                         per database. Global information not related to a&#xA;                         database is added to the postgres database report.&#xA;-f | --format logtype  : possible values: syslog, syslog2, stderr, jsonlog,&#xA;                         csv, pgbouncer, logplex, rds and redshift. Use this&#xA;                         option when pgBadger is not able to detect the log&#xA;                         format.&#xA;-G | --nograph         : disable graphs on HTML output. Enabled by default.&#xA;-h | --help            : show this message and exit.&#xA;-H | --html-outdir path: path to directory where HTML report must be written&#xA;                         in incremental mode, binary files stay on directory&#xA;                         defined with -O, --outdir option.&#xA;-i | --ident name      : programname used as syslog ident. Default: postgres&#xA;-I | --incremental     : use incremental mode, reports will be generated by&#xA;                         days in a separate directory, --outdir must be set.&#xA;-j | --jobs number     : number of jobs to run at same time for a single log&#xA;                         file. Run as single by default or when working with&#xA;                         csvlog format.&#xA;-J | --Jobs number     : number of log files to parse in parallel. Process&#xA;                         one file at a time by default.&#xA;-l | --last-parsed file: allow incremental log parsing by registering the&#xA;                         last datetime and line parsed. Useful if you want&#xA;                         to watch errors since last run or if you want one&#xA;                         report per day with a log rotated each week.&#xA;-L | --logfile-list file:file containing a list of log files to parse.&#xA;-m | --maxlength size  : maximum length of a query, it will be restricted to&#xA;                         the given size. Default truncate size is 100000.&#xA;-M | --no-multiline    : do not collect multiline statements to avoid garbage&#xA;                         especially on errors that generate a huge report.&#xA;-N | --appname name    : only report on entries for given application name&#xA;-o | --outfile filename: define the filename for the output. Default depends&#xA;                         on the output format: out.html, out.txt, out.bin,&#xA;                         or out.json. This option can be used multiple times&#xA;                         to output several formats. To use json output, the&#xA;                         Perl module JSON::XS must be installed, to dump&#xA;                         output to stdout, use - as filename.&#xA;-O | --outdir path     : directory where out files must be saved.&#xA;-p | --prefix string   : the value of your custom log_line_prefix as&#xA;                         defined in your postgresql.conf. Only use it if you&#xA;                         aren&#39;t using one of the standard prefixes specified&#xA;                         in the pgBadger documentation, such as if your&#xA;                         prefix includes additional variables like client ip&#xA;                         or application name. See examples below.&#xA;-P | --no-prettify     : disable SQL queries prettify formatter.&#xA;-q | --quiet           : don&#39;t print anything to stdout, not even a progress&#xA;                         bar.&#xA;-Q | --query-numbering : add numbering of queries to the output when using&#xA;                         options --dump-all-queries or --normalized-only.&#xA;-r | --remote-host ip  : set the host where to execute the cat command on&#xA;                         remote log file to parse the file locally.&#xA;-R | --retention N     : number of weeks to keep in incremental mode. Defaults&#xA;                         to 0, disabled. Used to set the number of weeks to&#xA;                         keep in output directory. Older weeks and days&#xA;                         directories are automatically removed.&#xA;-s | --sample number   : number of query samples to store. Default: 3.&#xA;-S | --select-only     : only report SELECT queries.&#xA;-t | --top number      : number of queries to store/display. Default: 20.&#xA;-T | --title string    : change title of the HTML page report.&#xA;-u | --dbuser username : only report on entries for the given user.&#xA;-U | --exclude-user username : exclude entries for the specified user from&#xA;                         report. Can be used multiple time.&#xA;-v | --verbose         : enable verbose or debug mode. Disabled by default.&#xA;-V | --version         : show pgBadger version and exit.&#xA;-w | --watch-mode      : only report errors just like logwatch could do.&#xA;-W | --wide-char       : encode html output of queries into UTF8 to avoid&#xA;                         Perl message &#34;Wide character in print&#34;.&#xA;-x | --extension       : output format. Values: text, html, bin or json.&#xA;                         Default: html&#xA;-X | --extra-files     : in incremental mode allow pgBadger to write CSS and&#xA;                         JS files in the output directory as separate files.&#xA;-z | --zcat exec_path  : set the full path to the zcat program. Use it if&#xA;                         zcat, bzcat or unzip is not in your path.&#xA;-Z | --timezone +/-XX  : Set the number of hours from GMT of the timezone.&#xA;                         Use this to adjust date/time in JavaScript graphs.&#xA;                         The value can be an integer, ex.: 2, or a float,&#xA;                         ex.: 2.5.&#xA;--pie-limit num        : pie data lower than num% will show a sum instead.&#xA;--exclude-query regex  : any query matching the given regex will be excluded&#xA;                         from the report. For example: &#34;^(VACUUM|COMMIT)&#34;&#xA;                         You can use this option multiple times.&#xA;--exclude-file filename: path of the file that contains each regex to use&#xA;                         to exclude queries from the report. One regex per&#xA;                         line.&#xA;--include-query regex  : any query that does not match the given regex will&#xA;                         be excluded from the report. You can use this&#xA;                         option multiple times. For example: &#34;(tbl1|tbl2)&#34;.&#xA;--include-file filename: path of the file that contains each regex to the&#xA;                         queries to include from the report. One regex per&#xA;                         line.&#xA;--disable-error        : do not generate error report.&#xA;--disable-hourly       : do not generate hourly report.&#xA;--disable-type         : do not generate report of queries by type, database&#xA;                         or user.&#xA;--disable-query        : do not generate query reports (slowest, most&#xA;                         frequent, queries by users, by database, ...).&#xA;--disable-session      : do not generate session report.&#xA;--disable-connection   : do not generate connection report.&#xA;--disable-lock         : do not generate lock report.&#xA;--disable-temporary    : do not generate temporary report.&#xA;--disable-checkpoint   : do not generate checkpoint/restartpoint report.&#xA;--disable-autovacuum   : do not generate autovacuum report.&#xA;--charset              : used to set the HTML charset to be used.&#xA;                         Default: utf-8.&#xA;--csv-separator        : used to set the CSV field separator, default: ,&#xA;--exclude-time  regex  : any timestamp matching the given regex will be&#xA;                         excluded from the report. Example: &#34;2013-04-12 .*&#34;&#xA;                         You can use this option multiple times.&#xA;--include-time  regex  : only timestamps matching the given regex will be&#xA;                         included in the report. Example: &#34;2013-04-12 .*&#34;&#xA;                         You can use this option multiple times.&#xA;--exclude-db name      : exclude entries for the specified database from&#xA;                         report. Example: &#34;pg_dump&#34;. Can be used multiple&#xA;                         times.&#xA;--exclude-appname name : exclude entries for the specified application name&#xA;                         from report.  Example: &#34;pg_dump&#34;.  Can be used&#xA;                         multiple times.&#xA;--exclude-line regex   : exclude any log entry that will match the given&#xA;                         regex. Can be used multiple times.&#xA;--exclude-client name  : exclude log entries for the specified client ip.&#xA;                         Can be used multiple times.&#xA;--anonymize            : obscure all literals in queries, useful to hide&#xA;                         confidential data.&#xA;--noreport             : no reports will be created in incremental mode.&#xA;--log-duration         : force pgBadger to associate log entries generated&#xA;                         by both log_duration = on and log_statement = &#39;all&#39;&#xA;--enable-checksum      : used to add an md5 sum under each query report.&#xA;--journalctl command   : command to use to replace PostgreSQL logfile by&#xA;                         a call to journalctl. Basically it might be:&#xA;                            journalctl -u postgresql-9.5&#xA;--pid-dir path         : set the path where the pid file must be stored.&#xA;                         Default /tmp&#xA;--pid-file file        : set the name of the pid file to manage concurrent&#xA;                         execution of pgBadger. Default: pgbadger.pid&#xA;--rebuild              : used to rebuild all html reports in incremental&#xA;                         output directories where there&#39;s binary data files.&#xA;--pgbouncer-only       : only show PgBouncer-related menus in the header.&#xA;--start-monday         : in incremental mode, calendar weeks start on&#xA;                         Sunday. Use this option to start on a Monday.&#xA;--iso-week-number      : in incremental mode, calendar weeks start on&#xA;                         Monday and respect the ISO 8601 week number, range&#xA;                         01 to 53, where week 1 is the first week that has&#xA;                         at least 4 days in the new year.&#xA;--normalized-only      : only dump all normalized queries to out.txt&#xA;--log-timezone +/-XX   : Set the number of hours from GMT of the timezone&#xA;                         that must be used to adjust date/time read from&#xA;                         log file before beeing parsed. Using this option&#xA;                         makes log search with a date/time more difficult.&#xA;                         The value can be an integer, ex.: 2, or a float,&#xA;                         ex.: 2.5.&#xA;--prettify-json        : use it if you want json output to be prettified.&#xA;--month-report YYYY-MM : create a cumulative HTML report over the specified&#xA;                         month. Requires incremental output directories and&#xA;                         the presence of all necessary binary data files&#xA;--day-report YYYY-MM-DD: create an HTML report over the specified day.&#xA;                         Requires incremental output directories and the&#xA;                         presence of all necessary binary data files&#xA;--noexplain            : do not process lines generated by auto_explain.&#xA;--command CMD          : command to execute to retrieve log entries on&#xA;                         stdin. pgBadger will open a pipe to the command&#xA;                         and parse log entries generated by the command.&#xA;--no-week              : inform pgbadger to not build weekly reports in&#xA;                         incremental mode. Useful if it takes too much time.&#xA;--explain-url URL      : use it to override the url of the graphical explain&#xA;                         tool. Default: https://explain.depesz.com/&#xA;--tempdir DIR          : set directory where temporary files will be written&#xA;                         Default: File::Spec-&amp;gt;tmpdir() || &#39;/tmp&#39;&#xA;--no-process-info      : disable changing process title to help identify&#xA;                         pgbadger process, some system do not support it.&#xA;--dump-all-queries     : dump all queries found in the log file replacing&#xA;                         bind parameters included in the queries at their&#xA;                         respective placeholders positions.&#xA;--keep-comments        : do not remove comments from normalized queries. It&#xA;                         can be useful if you want to distinguish between&#xA;                         same normalized queries.&#xA;--no-progressbar       : disable progressbar.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pgBadger is able to parse a remote log file using a passwordless ssh connection. Use -r or --remote-host to set the host IP address or hostname. There are also some additional options to fully control the ssh connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--ssh-program ssh        path to the ssh program to use. Default: ssh.&#xA;--ssh-port port          ssh port to use for the connection. Default: 22.&#xA;--ssh-user username      connection login name. Defaults to running user.&#xA;--ssh-identity file      path to the identity file to use.&#xA;--ssh-timeout second     timeout to ssh connection failure. Default: 10 sec.&#xA;--ssh-option  options    list of -o options to use for the ssh connection.&#xA;                         Options always used:&#xA;                             -o ConnectTimeout=$ssh_timeout&#xA;                             -o PreferredAuthentications=hostbased,publickey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log file to parse can also be specified using an URI, supported protocols are http[s] and [s]ftp. The curl command will be used to download the file, and the file will be parsed during download. The ssh protocol is also supported and will use the ssh command like with the remote host use. See examples bellow.&lt;/p&gt; &#xA;&lt;p&gt;Return codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0: on success&#xA;1: die on error&#xA;2: if it has been interrupted using ctr+c for example&#xA;3: the pid file already exists or can not be created&#xA;4: no log file was given at command line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger /var/log/postgresql.log&#xA;pgbadger /var/log/postgres.log.2.gz /var/log/postgres.log.1.gz /var/log/postgres.log&#xA;pgbadger /var/log/postgresql/postgresql-2012-05-*&#xA;pgbadger --exclude-query=&#34;^(COPY|COMMIT)&#34; /var/log/postgresql.log&#xA;pgbadger -b &#34;2012-06-25 10:56:11&#34; -e &#34;2012-06-25 10:59:11&#34; /var/log/postgresql.log&#xA;cat /var/log/postgres.log | pgbadger -&#xA;# Log line prefix with stderr log output&#xA;pgbadger --prefix &#39;%t [%p]: user=%u,db=%d,client=%h&#39; /pglog/postgresql-2012-08-21*&#xA;pgbadger --prefix &#39;%m %u@%d %p %r %a : &#39; /pglog/postgresql.log&#xA;# Log line prefix with syslog log output&#xA;pgbadger --prefix &#39;user=%u,db=%d,client=%h,appname=%a&#39; /pglog/postgresql-2012-08-21*&#xA;# Use my 8 CPUs to parse my 10GB file faster, much faster&#xA;pgbadger -j 8 /pglog/postgresql-10.1-main.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use URI notation for remote log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger http://172.12.110.1//var/log/postgresql/postgresql-10.1-main.log&#xA;pgbadger ftp://username@172.12.110.14/postgresql-10.1-main.log&#xA;pgbadger ssh://username@172.12.110.14:2222//var/log/postgresql/postgresql-10.1-main.log*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use together a local PostgreSQL log and a remote pgbouncer log file to parse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger /var/log/postgresql/postgresql-10.1-main.log ssh://username@172.12.110.14/pgbouncer.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reporting errors every week by cron job:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;30 23 * * 1 /usr/bin/pgbadger -q -w /var/log/postgresql.log -o /var/reports/pg_errors.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate report every week using incremental behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 4 * * 1 /usr/bin/pgbadger -q `find /var/log/ -mtime -7 -name &#34;postgresql.log*&#34;` -o /var/reports/pg_errors-`date +\%F`.html -l /var/reports/pgbadger_incremental_file.dat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This supposes that your log file and HTML report are also rotated every week.&lt;/p&gt; &#xA;&lt;p&gt;Or better, use the auto-generated incremental reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 4 * * * /usr/bin/pgbadger -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will generate a report per day and per week.&lt;/p&gt; &#xA;&lt;p&gt;In incremental mode, you can also specify the number of weeks to keep in the reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/bin/pgbadger --retention 2 -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a pg_dump at 23:00 and 13:00 each day during half an hour, you can use pgBadger as follow to exclude these periods from the report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --exclude-time &#34;2013-09-.* (23|13):.*&#34; postgresql.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will help avoid having COPY statements, as generated by pg_dump, on top of the list of slowest queries. You can also use --exclude-appname &#34;pg_dump&#34; to solve this problem in a simpler way.&lt;/p&gt; &#xA;&lt;p&gt;You can also parse journalctl output just as if it was a log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --journalctl &#39;journalctl -u postgresql-9.5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or worst, call it from a remote host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -r 192.168.1.159 --journalctl &#39;journalctl -u postgresql-9.5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you don&#39;t need to specify any log file at command line, but if you have other PostgreSQL log files to parse, you can add them as usual.&lt;/p&gt; &#xA;&lt;p&gt;To rebuild all incremental html reports after, proceed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm /path/to/reports/*.js&#xA;rm /path/to/reports/*.css&#xA;pgbadger -X -I -O /path/to/reports/ --rebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will also update all resource files (JS and CSS). Use -E or --explode if the reports were built using this option.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger also supports Heroku PostgreSQL logs using logplex format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;heroku logs -p postgres | pgbadger -f logplex -o heroku.html -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will stream Heroku PostgreSQL log to pgbadger through stdin.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger can auto detect RDS and cloudwatch PostgreSQL logs using rds format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -f rds -o rds_out.html rds.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each CloudSQL Postgresql log is a fairly normal PostgreSQL log, but encapsulated in JSON format. It is autodetected by pgBadger but in case you need to force the log format use `jsonlog`:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -f jsonlog -o cloudsql_out.html cloudsql.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the same as with the jsonlog extension, the json format is different but pgBadger can parse both formats.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger also supports logs produced by CloudNativePG Postgres operator for Kubernetes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -f jsonlog -o cnpg_out.html cnpg.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a cumulative report over a month use command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --month-report 2919-05 /path/to/incremental/reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will add a link to the month name into the calendar view in incremental reports to look at report for month 2019 May. Use -E or --explode if the reports were built using this option.&lt;/p&gt; &#xA;&lt;h3&gt;DESCRIPTION&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger is a PostgreSQL log analyzer built for speed providing fully detailed reports based on your PostgreSQL log files. It&#39;s a small standalone Perl script that outperforms any other PostgreSQL log analyzer.&lt;/p&gt; &#xA;&lt;p&gt;It is written in pure Perl and uses a JavaScript library (flotr2) to draw graphs so that you don&#39;t need to install any additional Perl modules or other packages. Furthermore, this library gives us more features such as zooming. pgBadger also uses the Bootstrap JavaScript library and the FontAwesome webfont for better design. Everything is embedded.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger is able to autodetect your log file format (syslog, stderr, csvlog or jsonlog) if the file is long enough. It is designed to parse huge log files as well as compressed files. Supported compressed formats are gzip, bzip2, lz4, xz, zip and zstd. For the xz format you must have an xz version higher than 5.05 that supports the --robot option. lz4 files must be compressed with the --content-size option for pgbadger to determine the uncompressed file size. For the complete list of features, see below.&lt;/p&gt; &#xA;&lt;p&gt;All charts are zoomable and can be saved as PNG images.&lt;/p&gt; &#xA;&lt;p&gt;You can also limit pgBadger to only report errors or remove any part of the report using command-line options.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger supports any custom format set in the log_line_prefix directive of your postgresql.conf file as long as it at least specifies the %t and %p patterns.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger allows parallel processing of a single log file or multiple files through the use of the -j option specifying the number of CPUs.&lt;/p&gt; &#xA;&lt;p&gt;If you want to save system performance you can also use log_duration instead of log_min_duration_statement to have reports on duration and number of queries only.&lt;/p&gt; &#xA;&lt;h3&gt;FEATURE&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger reports everything about your SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Overall statistics.&#xA;    The most frequent waiting queries.&#xA;    Queries that waited the most.&#xA;    Queries generating the most temporary files.&#xA;    Queries generating the largest temporary files.&#xA;    The slowest queries.&#xA;    Queries that took up the most time.&#xA;    The most frequent queries.&#xA;    The most frequent errors.&#xA;    Histogram of query times.&#xA;    Histogram of sessions times.&#xA;    Users involved in top queries.&#xA;    Applications involved in top queries.&#xA;    Queries generating the most cancellation.&#xA;    Queries most cancelled.&#xA;    The most time consuming prepare/bind queries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following reports are also available with hourly charts divided into periods of five minutes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    SQL queries statistics.&#xA;    Temporary file statistics.&#xA;    Checkpoints statistics.&#xA;    Autovacuum and autoanalyze statistics.&#xA;    Cancelled queries.&#xA;    Error events (panic, fatal, error and warning).&#xA;    Error class distribution.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also some pie charts about distribution of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Locks statistics.&#xA;    Queries by type (select/insert/update/delete).&#xA;    Distribution of queries type per database/application&#xA;    Sessions per database/user/client/application.&#xA;    Connections per database/user/client/application.&#xA;    Autovacuum and autoanalyze per table.&#xA;    Queries per user and total duration per user.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All charts are zoomable and can be saved as PNG images. SQL queries reported are highlighted and beautified automatically.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger is also able to parse PgBouncer log files and to create the following reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Request Throughput&#xA;    Bytes I/O Throughput&#xA;    Average Query Duration&#xA;    Simultaneous sessions&#xA;    Histogram of sessions times&#xA;    Sessions per database&#xA;    Sessions per user&#xA;    Sessions per host&#xA;    Established connections&#xA;    Connections per database&#xA;    Connections per user&#xA;    Connections per host&#xA;    Most used reserved pools&#xA;    Most Frequent Errors/Events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also have incremental reports with one report per day and a cumulative report per week. Two multiprocess modes are available to speed up log parsing, one using one core per log file, and the second using multiple cores to parse a single file. These modes can be combined.&lt;/p&gt; &#xA;&lt;p&gt;Histogram granularity can be adjusted using the -A command-line option. By default, they will report the mean of each top queries/errors occurring per hour, but you can specify the granularity down to the minute.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger can also be used in a central place to parse remote log files using a passwordless SSH connection. This mode can be used with compressed files and in the multiprocess per file mode (-J), but cannot be used with the CSV log format.&lt;/p&gt; &#xA;&lt;p&gt;Examples of reports can be found here: &lt;a href=&#34;https://pgbadger.darold.net/#reports&#34;&gt;https://pgbadger.darold.net/#reports&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;REQUIREMENT&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger comes as a single Perl script - you do not need anything other than a modern Perl distribution. Charts are rendered using a JavaScript library, so you don&#39;t need anything other than a web browser. Your browser will do all the work.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to parse PostgreSQL CSV log files, you might need some Perl Modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Text::CSV_XS - to parse PostgreSQL CSV log files.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module is optional, if you don&#39;t have PostgreSQL log in the CSV format, you don&#39;t need to install it.&lt;/p&gt; &#xA;&lt;p&gt;If you want to export statistics as JSON file, you need an additional Perl module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    JSON::XS - JSON serialising/deserialising, done correctly and fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module is optional, if you don&#39;t select the json output format, you don&#39;t need to install it. You can install it on a Debian-like system using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    sudo apt-get install libjson-xs-perl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and on RPM-like system using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    sudo yum install perl-JSON-XS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compressed log file format is autodetected from the file extension. If pgBadger finds a gz extension, it will use the zcat utility; with a bz2 extension, it will use bzcat; with lz4, it will use lz4cat; with zst, it will use zstdcat; if the file extension is zip or xz, then the unzip or xz utility will be used.&lt;/p&gt; &#xA;&lt;p&gt;If those utilities are not found in the PATH environment variable, then use the --zcat command-line option to change this path. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    --zcat=&#34;/usr/local/bin/gunzip -c&#34; or --zcat=&#34;/usr/local/bin/bzip2 -dc&#34;&#xA;    --zcat=&#34;C:\tools\unzip -p&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, pgBadger will use the zcat, bzcat, lz4cat, zstdcat and unzip utilities following the file extension. If you use the default autodetection of compression format, you can mix gz, bz2, lz4, xz, zip or zstd files. Specifying a custom value of --zcat option will remove the possibility of mixed compression format.&lt;/p&gt; &#xA;&lt;p&gt;Note that multiprocessing cannot be used with compressed files or CSV files as well as under Windows platform.&lt;/p&gt; &#xA;&lt;h3&gt;INSTALLATION&lt;/h3&gt; &#xA;&lt;p&gt;Download the tarball from GitHub and unpack the archive as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    tar xzf pgbadger-11.x.tar.gz&#xA;    cd pgbadger-11.x/&#xA;    perl Makefile.PL&#xA;    make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will copy the Perl script pgbadger to /usr/local/bin/pgbadger by default and the man page into /usr/local/share/man/man1/pgbadger.1. Those are the default installation directories for &#39;site&#39; install.&lt;/p&gt; &#xA;&lt;p&gt;If you want to install all under /usr/ location, use INSTALLDIRS=&#39;perl&#39; as an argument of Makefile.PL. The script will be installed into /usr/bin/pgbadger and the manpage into /usr/share/man/man1/pgbadger.1.&lt;/p&gt; &#xA;&lt;p&gt;For example, to install everything just like Debian does, proceed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    perl Makefile.PL INSTALLDIRS=vendor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, INSTALLDIRS is set to site.&lt;/p&gt; &#xA;&lt;h3&gt;POSTGRESQL CONFIGURATION&lt;/h3&gt; &#xA;&lt;p&gt;You must enable and set some configuration directives in your postgresql.conf before starting.&lt;/p&gt; &#xA;&lt;p&gt;You must first enable SQL query logging to have something to parse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_min_duration_statement = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here every statement will be logged, on a busy server you may want to increase this value to only log queries with a longer duration. Note that if you have log_statement set to &#39;all&#39;, nothing will be logged through the log_min_duration_statement directive. See the next chapter for more information.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger supports any custom format set in the log_line_prefix directive of your postgresql.conf file as long as it at least specifies a time escape sequence (%t, %m or %n) and a process-related escape sequence (%p or %c).&lt;/p&gt; &#xA;&lt;p&gt;For example, with &#39;stderr&#39; log format, log_line_prefix must be at least:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;%t [%p]: &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log line prefix could add user, database name, application name and client ip address as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;%t [%p]: user=%u,db=%d,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for syslog log file format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;user=%u,db=%d,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log line prefix for stderr output could also be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;%t [%p]: db=%d,user=%u,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for syslog output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;db=%d,user=%u,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to enable other parameters in postgresql.conf to get more information from your log files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_checkpoints = on&#xA;    log_connections = on&#xA;    log_disconnections = on&#xA;    log_lock_waits = on&#xA;    log_temp_files = 0&#xA;    log_autovacuum_min_duration = 0&#xA;    log_error_verbosity = default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do not enable log_statement as its log format will not be parsed by pgBadger.&lt;/p&gt; &#xA;&lt;p&gt;Of course your log messages should be in English with or without locale support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    lc_messages=&#39;en_US.UTF-8&#39;&#xA;    lc_messages=&#39;C&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pgBadger parser does not support other locales, like &#39;fr_FR.UTF-8&#39; for example.&lt;/p&gt; &#xA;&lt;h3&gt;LOG STATEMENTS&lt;/h3&gt; &#xA;&lt;p&gt;Considerations about log_min_duration_statement, log_duration and log_statement configuration directives.&lt;/p&gt; &#xA;&lt;p&gt;If you want the query statistics to include the actual query strings, you must set log_min_duration_statement to 0 or more milliseconds.&lt;/p&gt; &#xA;&lt;p&gt;If you just want to report duration and number of queries and don&#39;t want all details about queries, set log_min_duration_statement to -1 to disable it and enable log_duration in your postgresql.conf file. If you want to add the most common query report, you can either choose to set log_min_duration_statement to a higher value or to enable log_statement.&lt;/p&gt; &#xA;&lt;p&gt;Enabling log_min_duration_statement will add reports about slowest queries and queries that took up the most time. Take care that if you have log_statement set to &#39;all&#39;, nothing will be logged with log_min_duration_statement.&lt;/p&gt; &#xA;&lt;p&gt;Warning: Do not enable both log_min_duration_statement, log_duration and log_statement all together, this will result in wrong counter values. Note that this will also increase drastically the size of your log. log_min_duration_statement should always be preferred.&lt;/p&gt; &#xA;&lt;h3&gt;PARALLEL PROCESSING&lt;/h3&gt; &#xA;&lt;p&gt;To enable parallel processing you just have to use the -j N option where N is the number of cores you want to use.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger will then proceed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    for each log file&#xA;        chunk size = int(file size / N)&#xA;        look at start/end offsets of these chunks&#xA;        fork N processes and seek to the start offset of each chunk&#xA;            each process will terminate when the parser reach the end offset&#xA;            of its chunk&#xA;            each process write stats into a binary temporary file&#xA;        wait for all children processes to terminate&#xA;    All binary temporary files generated will then be read and loaded into&#xA;    memory to build the html output.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With that method, at start/end of chunks pgBadger may truncate or omit a maximum of N queries per log file, which is an insignificant gap if you have millions of queries in your log file. The chance that the query that you were looking for is lost is near 0, this is why I think this gap is livable. Most of the time the query is counted twice but truncated.&lt;/p&gt; &#xA;&lt;p&gt;When you have many small log files and many CPUs, it is speedier to dedicate one core to one log file at a time. To enable this behavior, you have to use option -J N instead. With 200 log files of 10MB each, the use of the -J option starts being really interesting with 8 cores. Using this method you will be sure not to lose any queries in the reports.&lt;/p&gt; &#xA;&lt;p&gt;Here is a benchmark done on a server with 8 CPUs and a single file of 9.5GB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     Option |  1 CPU  | 2 CPU | 4 CPU | 8 CPU&#xA;    --------+---------+-------+-------+------&#xA;       -j   | 1h41m18 | 50m25 | 25m39 | 15m58&#xA;       -J   | 1h41m18 | 54m28 | 41m16 | 34m45&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With 200 log files of 10MB each, so 2GB in total, the results are slightly different:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     Option | 1 CPU | 2 CPU | 4 CPU | 8 CPU&#xA;    --------+-------+-------+-------+------&#xA;       -j   | 20m15 |  9m56 |  5m20 | 4m20&#xA;       -J   | 20m15 |  9m49 |  5m00 | 2m40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So it is recommended to use -j unless you have hundreds of small log files and can use at least 8 CPUs.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT: when you are using parallel parsing, pgBadger will generate a lot of temporary files in the /tmp directory and will remove them at the end, so do not remove those files unless pgBadger is not running. They are all named with the following template tmp_pgbadgerXXXX.bin so they can be easily identified.&lt;/p&gt; &#xA;&lt;h3&gt;INCREMENTAL REPORTS&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger includes an automatic incremental report mode using option -I or --incremental. When running in this mode, pgBadger will generate one report per day and a cumulative report per week. Output is first done in binary format into the mandatory output directory (see option -O or --outdir), then in HTML format for daily and weekly reports with a main index file.&lt;/p&gt; &#xA;&lt;p&gt;The main index file will show a dropdown menu per week with a link to each week report and links to daily reports of each week.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you run pgBadger as follows based on a daily rotated file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 4 * * * /usr/bin/pgbadger -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you will have all daily and weekly reports for the full running period.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, pgBadger will create an automatic incremental file in the output directory, so you don&#39;t have to use the -l option unless you want to change the path of that file. This means that you can run pgBadger in this mode each day on a log file rotated each week, and it will not count the log entries twice.&lt;/p&gt; &#xA;&lt;p&gt;To save disk space, you may want to use the -X or --extra-files command-line option to force pgBadger to write JavaScript and CSS to separate files in the output directory. The resources will then be loaded using script and link tags.&lt;/p&gt; &#xA;&lt;h4&gt;Rebuilding reports&lt;/h4&gt; &#xA;&lt;p&gt;Incremental reports can be rebuilt after a pgbadger report fix or a new feature to update all HTML reports. To rebuild all reports where a binary file is still present, proceed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm /path/to/reports/*.js&#xA;rm /path/to/reports/*.css&#xA;pgbadger -X -I -O /path/to/reports/ --rebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will also update all resource files (JS and CSS). Use -E or --explode if the reports were built using this option.&lt;/p&gt; &#xA;&lt;h4&gt;Monthly reports&lt;/h4&gt; &#xA;&lt;p&gt;By default, pgBadger in incremental mode only computes daily and weekly reports. If you want monthly cumulative reports, you will have to use a separate command to specify the report to build. For example, to build a report for August 2019:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -X --month-report 2019-08 /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will add a link to the month name into the calendar view of incremental reports to look at monthly report. The report for a current month can be run every day, it is entirely rebuilt each time. The monthly report is not built by default because it could take a lot of time following the amount of data.&lt;/p&gt; &#xA;&lt;p&gt;If reports were built with the per-database option ( -E | --explode ), it must be used too when calling pgbadger to build monthly report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -E -X --month-report 2019-08 /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the same when using the rebuild option ( -R | --rebuild ).&lt;/p&gt; &#xA;&lt;h3&gt;BINARY FORMAT&lt;/h3&gt; &#xA;&lt;p&gt;Using the binary format it is possible to create custom incremental and cumulative reports. For example, if you want to refresh a pgBadger report each hour from a daily PostgreSQL log file, you can proceed by running the following commands each hour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --last-parsed .pgbadger_last_state_file -o sunday/hourX.bin /var/log/pgsql/postgresql-Sun.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to generate the incremental data files in binary format. And to generate the fresh HTML report from that binary file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger sunday/*.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or as another example, if you generate one log file per hour and you want reports to be rebuilt each time the log file is rotated, proceed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    pgbadger -o day1/hour01.bin /var/log/pgsql/pglog/postgresql-2012-03-23_10.log&#xA;    pgbadger -o day1/hour02.bin /var/log/pgsql/pglog/postgresql-2012-03-23_11.log&#xA;    pgbadger -o day1/hour03.bin /var/log/pgsql/pglog/postgresql-2012-03-23_12.log&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to refresh the HTML report, for example, each time after a new binary file is generated, just do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    pgbadger -o day1_report.html day1/*.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust the commands to suit your particular needs.&lt;/p&gt; &#xA;&lt;h3&gt;JSON FORMAT&lt;/h3&gt; &#xA;&lt;p&gt;JSON format is good for sharing data with other languages, which makes it easy to integrate pgBadger result into other monitoring tools, like Cacti or Graphite.&lt;/p&gt; &#xA;&lt;h3&gt;AUTHORS&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger is an original work from Gilles Darold.&lt;/p&gt; &#xA;&lt;p&gt;The pgBadger logo is an original creation of Damien Cazeils.&lt;/p&gt; &#xA;&lt;p&gt;The pgBadger v4.x design comes from the &#34;Art is code&#34; company.&lt;/p&gt; &#xA;&lt;p&gt;This web site is a work of Gilles Darold.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger is maintained by Gilles Darold and everyone who wants to contribute.&lt;/p&gt; &#xA;&lt;p&gt;Many people have contributed to pgBadger, they are all quoted in the Changelog file.&lt;/p&gt; &#xA;&lt;h3&gt;LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger is free software distributed under the PostgreSQL Licence.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2023, Gilles Darold&lt;/p&gt; &#xA;&lt;p&gt;A modified version of the SQL::Beautify Perl Module is embedded in pgBadger with copyright (C) 2009 by Jonas Kramer and is published under the terms of the Artistic License 2.0.&lt;/p&gt;</summary>
  </entry>
</feed>