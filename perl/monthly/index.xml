<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-01T02:16:23Z</updated>
  <subtitle>Monthly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kablamo/Term-Vspark</title>
    <updated>2023-09-01T02:16:23Z</updated>
    <id>tag:github.com,2023-09-01:/kablamo/Term-Vspark</id>
    <link href="https://github.com/kablamo/Term-Vspark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Term::Vspark Package&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kablamo/Term-Vspark&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kablamo/Term-Vspark.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/kablamo/Term-Vspark?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/kablamo/Term-Vspark/master.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Term::Vspark - Displays a graph in the terminal&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Term::Vspark qw/vspark/;&#xA;binmode STDOUT, &#39;:encoding(UTF-8)&#39;;&#xA;print vspark(&#xA;    values  =&amp;gt; [0,1,2,3,4,5], # required&#xA;    labels  =&amp;gt; [0,1,2,3,4,5],&#xA;    max     =&amp;gt; 7,   # max value&#xA;    columns =&amp;gt; 80,  # width of the graph including labels&#xA;);&#xA;&#xA;# The output looks like this:&#xA;# 0 &#xA;# 1 ███████████&#xA;# 2 ██████████████████████&#xA;# 3 █████████████████████████████████&#xA;# 4 ████████████████████████████████████████████&#xA;# 5 ███████████████████████████████████████████████████████&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;This module displays beautiful graphs in the terminal. It is a companion to Term::Spark but instead of displaying normal sparklines it displays &#34;vertical&#34; sparklines.&lt;/p&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;vspark(%params)&lt;/h2&gt; &#xA;&lt;p&gt;show_graph() returns a string.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;values&#39; parameter should be an ArrayRef of numbers. This is required.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;labels&#39; parameter should be an ArrayRef of strings. This is optional. Each label will be used with the corresponding value.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;max&#39; parameter is the maximum value of the graph. Without this parameter you cannot compare graphs because the scaling changes depending on the data. This parameter is optional.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;columns&#39; parameter is the maximum width of the graph. This defaults to your terminal width or 80 characters -- whichever is smaller. Set &#39;columns&#39; to &#39;max&#39; if you want to use the full width of your terminal.&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Eric Johnson (kablamo)&lt;/p&gt; &#xA;&lt;p&gt;Gil Gonçalves &lt;a href=&#34;mailto:lurst@cpan.org&#34;&gt;lurst@cpan.org&lt;/a&gt; (original author)&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Term::Spark&#34;&gt;Term::Spark&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Zimbra/zm-build</title>
    <updated>2023-09-01T02:16:23Z</updated>
    <id>tag:github.com,2023-09-01:/Zimbra/zm-build</id>
    <link href="https://github.com/Zimbra/zm-build" rel="alternate"></link>
    <summary type="html">&lt;p&gt;zm-build for Zimbra Collaboration Suite, FOSS Edition&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zm-build&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the build script and supporting files required to create a &lt;a href=&#34;https://en.wikipedia.org/wiki/Free_and_open-source_software&#34;&gt;FOSS&lt;/a&gt; build of the &lt;a href=&#34;https://www.zimbra.com/&#34;&gt;Zimbra Collaboration Suite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;build.pl&lt;/code&gt; - Invoke this script to produce a build. See the &lt;em&gt;Building&lt;/em&gt; section below for an example.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;instructions/&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;FOSS_remote_list.pl&lt;/code&gt; - Maps between remote label and URL&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FOSS_repo_list.pl&lt;/code&gt; - Specifies which branches (or tags) are checked out to build each component repository.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FOSS_staging_list.pl&lt;/code&gt; - defines the staging order and details.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup with Zimbra Development Images (used for building)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up docker on your box&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can then pull and run using development images (built from Zimbra/zm-base-os.git)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In case you need to customize the images for your purposes, you could maintain your own Dockerfile such as this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ cat Dockerfile&#xA;  FROM zimbra/zm-base-os:devcore-ubuntu-16.04&#xA;  RUN sudo apt-get install emacs my-special-tool etc..&#xA;  RUN ...&#xA;&#xA;  $ docker build -t myuser/my-devcore-ubuntu-16 .&#xA;  $ docker run -it myuser/my-devcore-ubuntu-16 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ubuntu 16.04&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it zimbra/zm-base-os:devcore-ubuntu-16.04 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 7&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it zimbra/zm-base-os:devcore-centos-7 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 6&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it zimbra/zm-base-os:devcore-centos-6 bash&#xA;&#xA;# some tools are installed inside /home/build/.zm-dev-tools/, zm-build automatically sources this path.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup (traditional)&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu 16.04&lt;/h3&gt; &#xA;&lt;p&gt;The following steps assume that your are starting with a clean VM and are logged in as a non-root user with &lt;code&gt;sudo&lt;/code&gt; privileges.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get install software-properties-common openjdk-8-jdk ant ant-optional ant-contrib ruby git maven build-essential debhelper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 7&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum groupinstall &#39;Development Tools&#39;&#xA;sudo yum install java-1.8.0-openjdk ant ant-junit ruby git maven cpan wget perl-IPC-Cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 6&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum groupinstall &#39;Development Tools&#39;&#xA;sudo yum remove java-1.7.0-openjdk java-1.6.0-openjdk ant&#xA;sudo yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel ruby git cpan wget&#xA;# install specific perl modules&#xA;sudo cpan IPC::Cmd&#xA;cd /tmp&#xA;# install maven&#xA;wget http://mirror.metrocast.net/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz&#xA;sudo tar -xf apache-maven-3.3.9-bin.tar.gz&#xA;sudo mv apache-maven-3.3.9 /opt&#xA;echo &#39;export PATH=&#34;/opt/apache-maven-3.3.9/bin:$PATH&#34;&#39; | sudo tee -a /etc/profile.d/maven.sh&#xA;# install current version of ant&#xA;wget https://www.apache.org/dist/ant/binaries/apache-ant-1.9.9-bin.zip&#xA;sudo unzip apache-ant-1.9.9-bin.zip&#xA;sudo mv apache-ant-1.9.9 /opt&#xA;echo &#39;export PATH=&#34;/opt/apache-ant-1.9.9/bin:$PATH&#34;&#39; | sudo tee -a /etc/profile.d/ant.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Create a directory for your build and check-out the &lt;code&gt;zm-build&lt;/code&gt; repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir installer-build&#xA;cd installer-build&#xA;git clone https://github.com/Zimbra/zm-build.git&#xA;cd zm-build&#xA;git checkout origin/develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a specific patch example 10.0.2 run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir installer-build&#xA;cd installer-build&#xA;git clone --depth 1 --branch 10.0.1 git@github.com:Zimbra/zm-build.git&#xA;cd zm-build&#xA;ENV_CACHE_CLEAR_FLAG=true ./build.pl --ant-options -DskipTests=true --git-default-tag=10.0.2,10.0.1,10.0.0-GA,10.0.0 --build-release-no=10.0.0 --build-type=FOSS --build-release=NIKOLATESLA --build-release-candidate=GA --build-thirdparty-server=files.zimbra.com --build-no=3969 --no-interactive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for example 9.0.0.p25 run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir installer-build&#xA;cd installer-build&#xA;git clone --depth 1 --branch 9.0.0.p25 git@github.com:Zimbra/zm-build.git&#xA;cd zm-build&#xA;ENV_CACHE_CLEAR_FLAG=true ./build.pl --ant-options -DskipTests=true --git-default-tag=9.0.0.p25,9.0.0.p24.1,9.0.0.p24,9.0.0.p23,9.0.0.p22,9.0.0.p21,9.0.0.p20,9.0.0.p19,9.0.0.p18,9.0.0.p17,9.0.0.p16,9.0.0.p15,9.0.0.p14,9.0.0.p13,9.0.0.p12,9.0.0.p11,9.0.0.p10,9.0.0.p9,9.0.0.p8,9.0.0.p7,9.0.0.p6.1,9.0.0.p6,9.0.0.p5,9.0.0.p4,9.0.0.p3,9.0.0.p2,9.0.0.p1,9.0.0 --build-release-no=9.0.0 --build-type=FOSS --build-release=NIKOLATESLA --build-release-candidate=GA --build-thirdparty-server=files.zimbra.com --build-no=3969 --no-interactive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;build.pl&lt;/code&gt; command is used to build the product. Run it with the &lt;code&gt;-h&lt;/code&gt; option for help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: ./build.pl &amp;lt;options&amp;gt;&#xA;Supported options:&#xA;   --build-no=i&#xA;   --build-ts=i&#xA;   --build-artifacts-base-dir=s&#xA;   --build-sources-base-dir=s&#xA;   --build-release=s&#xA;   --build-release-no=s&#xA;   --build-release-candidate=s&#xA;   --build-type=s&#xA;   --build-thirdparty-server=s&#xA;   --build-prod-flag!&#xA;   --build-debug-flag!&#xA;   --build-dev-tool-base-dir=s&#xA;   --interactive!&#xA;   --git-overrides=s%&#xA;   --git-default-tag=s&#xA;   --git-default-remote=s&#xA;   --git-default-branch=s&#xA;   --stop-after-checkout!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; specify all the options on the command-line, as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.pl --build-no=1713 --build-ts=`date +&#39;%Y%m%d%H%M%S&#39;` \&#xA;  --build-release=JUDASPRIEST --build-release-no=8.7.6 \&#xA;  --build-release-candidate=GA --build-type=FOSS \&#xA;  --build-thirdparty-server=files.zimbra.com --no-interactive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The completed build will be archived into a &lt;code&gt;*.tgz&lt;/code&gt; file that is stored in the appropriate platform and release-specific subdirectory of the &lt;code&gt;BUILDS&lt;/code&gt; directory. The above command, run on an Ubuntu 16.04 machine, created the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$HOME/installer_build/BUILDS/UBUNTU16_64/JUDASPRIEST-876/20170322153033_FOSS/zm-build/zcs-8.7.6_1713.UBUNTU16_64.20170322153033.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify any or all of the required options by placing them in a file called &lt;code&gt;config.build&lt;/code&gt;. This file should be at the top level of the &lt;code&gt;zm-build&lt;/code&gt; directory. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BUILD_NO                    = 1713&#xA;BUILD_RELEASE               = JUDASPRIEST&#xA;BUILD_RELEASE_NO            = 8.7.6&#xA;BUILD_RELEASE_CANDIDATE     = GA&#xA;BUILD_TYPE                  = FOSS&#xA;BUILD_THIRDPARTY_SERVER     = files.zimbra.com&#xA;INTERACTIVE                 = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just run &lt;code&gt;./build.pl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The above command, run on a CentOS 7 machine with the options as shown in &lt;code&gt;config.build&lt;/code&gt;, created the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$HOME/installer-build/BUILDS/RHEL7_64/JUDASPRIEST-876/20170323061131_FOSS/zm-build/zcs-8.7.6_GA_1713.RHEL7_64.20170323061131.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The following is a walk-through of the basic steps required to do ZCS development. The first step is to simply install a current FOSS build on the machine that you wish to use. The instructions that follow assume that this has been done.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;/home/zimbra&lt;/code&gt; and make &lt;code&gt;zimbra&lt;/code&gt; the owner.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo mkdir /home/zimbra&#xA; sudo chown zimbra:zimbra /home/zimbra&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;ant&lt;/code&gt;, and &lt;code&gt;ant-contrib&lt;/code&gt; by whichever method is appropriate for your distro:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo apt-get install git ant ant-contrib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo yum install git ant ant-contrib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure &lt;code&gt;/opt/zimbra/.ssh/config&lt;/code&gt; to use your ssh key for the git remotes that you need to access.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Perform the following edits on &lt;code&gt;/opt/zimbra/.bash_profile&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Comment-out &lt;code&gt;export LANG=C&lt;/code&gt; and &lt;code&gt;export LC_ALL=C&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Add export &lt;code&gt;LANG=en_US.UTF-8&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add export &lt;code&gt;ANT_OPTS=-Ddev.home=/home/zimbra&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change permissions on files and folders that you will be updating; e.g.,&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo chmod -R o+w /opt/zimbra/lib/&#xA; sudo chmod -R o+w /opt/zimbra/jetty/&#xA; sudo chown zimbra:zimbra /opt/zimbra&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you run &lt;code&gt;zmfixperms&lt;/code&gt;, some of these permissions will be overwritten.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add file &lt;code&gt;/opt/zimbra/.gitconfig&lt;/code&gt; and update as needed. At a minimum:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; [user]&#xA; &#x9;email = YOUR-EMAIL-ADDRESS&#xA; &#x9;name = YOUR-FIRST-AND-LAST-NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As the &lt;code&gt;zimbra&lt;/code&gt; user, create a base directory under &lt;code&gt;/home/zimbra&lt;/code&gt; from which to work.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; cd /home/zimbra&#xA; mkdir zcs&#xA; cd zcs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you can clone any repositories that you require and get to work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Email Delivery&lt;/h2&gt; &#xA;&lt;p&gt;If you want email delivery to work, set up a DNS server on your host machine or another VM and configure &lt;code&gt;zimbraDNSMasterIP&lt;/code&gt; to point to it. To configure &lt;code&gt;zimbraDNSMasterIP&lt;/code&gt;, do the following as the &lt;code&gt;zimbra&lt;/code&gt; user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zmprov ms `zmhostname` zimbraDNSMasterIP DNS-SERVER-IP-ADDRESS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may receive the following error when trying to send email:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;No SMTP hosts available for domain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this occurs, you need to manually configure &lt;code&gt;zimbraSmtpHostname&lt;/code&gt; for your domain(s). To configure &lt;code&gt;zimbraSmtpHostname&lt;/code&gt;, do the following as the &lt;code&gt;zimbra&lt;/code&gt; user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zmprov md DOMAIN-NAME zimbraSmtpHostname `zmhostname`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;zm-mailbox example&lt;/h2&gt; &#xA;&lt;p&gt;As the &lt;code&gt;zimbra&lt;/code&gt; user, &lt;code&gt;cd /home/zimbra/zcs&lt;/code&gt;. Then clone the &lt;code&gt;zm-mailbox&lt;/code&gt; repository from github&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:Zimbra/zm-mailbox.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following sub-directories &lt;code&gt;zm-mailbox&lt;/code&gt; build and deploy separately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;client&#xA;common&#xA;milter-conf&#xA;native&#xA;soap&#xA;store&#xA;store-conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The top-level &lt;code&gt;build.xml&lt;/code&gt; is used by the &lt;code&gt;zm-build&lt;/code&gt; scripts to create an installer package. You will not use that for normal development. There are build-order dependencies between the above-listed deployment targets. These can be determined by inspection of the &lt;code&gt;ivy.xml&lt;/code&gt; files within each subdirectory.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grep &#39;org=&#34;zimbra&#34;&#39; store/ivy.xml&#xA;&#xA;&amp;lt;dependency org=&#34;zimbra&#34; name=&#34;zm-common&#34; rev=&#34;latest.integration&#34;/&amp;gt;&#xA;&amp;lt;dependency org=&#34;zimbra&#34; name=&#34;zm-soap&#34; rev=&#34;latest.integration&#34;/&amp;gt;&#xA;&amp;lt;dependency org=&#34;zimbra&#34; name=&#34;zm-client&#34; rev=&#34;latest.integration&#34;/&amp;gt;&#xA;&amp;lt;dependency org=&#34;zimbra&#34; name=&#34;zm-native&#34; rev=&#34;latest.integration&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here you can see that the deployment target, &lt;code&gt;zm-store&lt;/code&gt; (the &lt;code&gt;store&lt;/code&gt; subdirectory), depends upon &lt;code&gt;common&lt;/code&gt;, &lt;code&gt;soap&lt;/code&gt;, &lt;code&gt;client&lt;/code&gt;, and &lt;code&gt;native&lt;/code&gt;. Here is the current ordering dependencies among all of the &lt;code&gt;zm-mailbox&lt;/code&gt; deployment targets. The higher-numbered deployment targets depend upon the lower-numbered ones. Note that &lt;code&gt;milter-conf&lt;/code&gt; and &lt;code&gt;store-conf&lt;/code&gt; have no cross-dependencies.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;native&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;common&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;soap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;client&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;store&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;So, from the &lt;code&gt;native&lt;/code&gt; sub-directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ant -Dzimbra.buildinfo.version=8.7.6_GA clean compile publish-local deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Comments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The requirement to include &lt;code&gt;-Dzimbra.buildinfo.version=8.7.6_GA&lt;/code&gt; to ant is due to a change that was made when the FOSS code was moved to GitHub. You can also just add that option to your &lt;code&gt;ANT_OPTS&lt;/code&gt; enviroment variable that you defined in &lt;code&gt;$HOME/.bash_profile&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export ANT_OPTS=&#34;-Ddev.home=/home/zimbra -Dzimbra.buildinfo.version=8.7.6_GA&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you do that, then you can omit that &lt;code&gt;-D...&lt;/code&gt; argument to the &lt;code&gt;ant&lt;/code&gt; command and future examples will reflect that.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;publish-local&lt;/code&gt; target adds the artifact to &lt;code&gt;/home/zimbra/.zcs-deps&lt;/code&gt;, which is included in the Ivy resolution path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;deploy&lt;/code&gt; target installs the artifact to its run-time location and restarts the appropriate service(s). This will allow you to test your changes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, from the &lt;code&gt;common&lt;/code&gt;, &lt;code&gt;soap&lt;/code&gt;, &lt;code&gt;client&lt;/code&gt;, and &lt;code&gt;store&lt;/code&gt; sub-directories (in that order):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ant clean compile publish-local deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding a new LDAP Attribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING:It is absolutely imperative to avoid duplicate IDs for attributes. Unfortunately, that currently isn&#39;t a trivial thing to do. Need to check Zimbra 8 and Zimbra X along with all development branches. If customers get different setups using different IDs, this makes future upgrade scenarios a complete nightmare&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start by cloning &lt;em&gt;both&lt;/em&gt; the &lt;code&gt;zm-ldap-utilites&lt;/code&gt; and the &lt;code&gt;zm-mailbox&lt;/code&gt; repositories from GitHub. Check out the appropriate branch of each. Then proceed as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your new attribute to &lt;code&gt;zm-mailbox/store/conf/attrs/zimbra-attrs.xml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;From &lt;code&gt;zm-common/store&lt;/code&gt; invoke the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  ant generate-getters&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Do the following as &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  chmod -R o+w /opt/zimbra/common/etc/openldap/schema&#xA;  chmod o+w /opt/zimbra/conf/zimbra.ldif&#xA;  chmod +w /opt/zimbra/conf/attrs/zimbra-attrs.xml&#xA;  chmod -R o+w /opt/zimbra/common/etc/openldap/zimbra&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Back as the &lt;code&gt;zimbra&lt;/code&gt; user, invoke the following command from &lt;code&gt;zm-mailbox/common&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  ant deploy publish-local&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then from the &lt;code&gt;zm-mailbox/store&lt;/code&gt; directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  ant deploy update-ldap-schema&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your ZCS development server should now be running with the new attribute(s). You can test that by querying them and modifying them with &lt;code&gt;zmprov&lt;/code&gt;. You can &lt;code&gt;git add ...&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; your changes now.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mongodb-forks/flamegraph</title>
    <updated>2023-09-01T02:16:23Z</updated>
    <id>tag:github.com,2023-09-01:/mongodb-forks/flamegraph</id>
    <link href="https://github.com/mongodb-forks/flamegraph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo is a fork from https://github.com/brendangregg/FlameGraph&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flame Graphs visualize profiled code&lt;/h1&gt; &#xA;&lt;p&gt;This repo is a fork from &lt;a href=&#34;https://github.com/brendangregg/FlameGraph&#34;&gt;https://github.com/brendangregg/FlameGraph&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Main Website: &lt;a href=&#34;http://www.brendangregg.com/flamegraphs.html&#34;&gt;http://www.brendangregg.com/flamegraphs.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example (click to zoom):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg&#34;&gt;&lt;img src=&#34;http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click a box to zoom the Flame Graph to this stack frame only. To search and highlight all stack frames matching a regular expression, click the &lt;em&gt;search&lt;/em&gt; button in the upper right corner or press Ctrl-F. By default, search is case sensitive, but this can be toggled by pressing Ctrl-I or by clicking the &lt;em&gt;ic&lt;/em&gt; button in the upper right corner.&lt;/p&gt; &#xA;&lt;p&gt;Other sites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Flame Graph article in ACMQ and CACM: &lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2927301&#34;&gt;http://queue.acm.org/detail.cfm?id=2927301&lt;/a&gt; &lt;a href=&#34;http://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/abstract&#34;&gt;http://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/abstract&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU profiling using Linux perf_events, DTrace, SystemTap, or ktap: &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html&#34;&gt;http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU profiling using XCode Instruments: &lt;a href=&#34;http://schani.wordpress.com/2012/11/16/flame-graphs-for-instruments/&#34;&gt;http://schani.wordpress.com/2012/11/16/flame-graphs-for-instruments/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU profiling using Xperf.exe: &lt;a href=&#34;http://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/&#34;&gt;http://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Memory profiling: &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html&#34;&gt;http://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other examples, updates, and news: &lt;a href=&#34;http://www.brendangregg.com/flamegraphs.html#Updates&#34;&gt;http://www.brendangregg.com/flamegraphs.html#Updates&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Flame graphs can be created in three steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Capture stacks&lt;/li&gt; &#xA; &lt;li&gt;Fold stacks&lt;/li&gt; &#xA; &lt;li&gt;flamegraph.pl&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;1. Capture stacks&lt;/h1&gt; &#xA;&lt;p&gt;Stack samples can be captured using Linux perf_events, FreeBSD pmcstat (hwpmc), DTrace, SystemTap, and many other profilers. See the stackcollapse-* converters.&lt;/p&gt; &#xA;&lt;h3&gt;Linux perf_events&lt;/h3&gt; &#xA;&lt;p&gt;Using Linux perf_events (aka &#34;perf&#34;) to capture 60 seconds of 99 Hertz stack samples, both user- and kernel-level stacks, all processes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# perf record -F 99 -a -g -- sleep 60&#xA;# perf script &amp;gt; out.perf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now only capturing PID 181:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# perf record -F 99 -p 181 -g -- sleep 60&#xA;# perf script &amp;gt; out.perf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DTrace&lt;/h3&gt; &#xA;&lt;p&gt;Using DTrace to capture 60 seconds of kernel stacks at 997 Hertz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# dtrace -x stackframes=100 -n &#39;profile-997 /arg0/ { @[stack()] = count(); } tick-60s { exit(0); }&#39; -o out.kern_stacks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using DTrace to capture 60 seconds of user-level stacks for PID 12345 at 97 Hertz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# dtrace -x ustackframes=100 -n &#39;profile-97 /pid == 12345 &amp;amp;&amp;amp; arg1/ { @[ustack()] = count(); } tick-60s { exit(0); }&#39; -o out.user_stacks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;60 seconds of user-level stacks, including time spent in-kernel, for PID 12345 at 97 Hertz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# dtrace -x ustackframes=100 -n &#39;profile-97 /pid == 12345/ { @[ustack()] = count(); } tick-60s { exit(0); }&#39; -o out.user_stacks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Switch &lt;code&gt;ustack()&lt;/code&gt; for &lt;code&gt;jstack()&lt;/code&gt; if the application has a ustack helper to include translated frames (eg, node.js frames; see: &lt;a href=&#34;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time/&#34;&gt;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time/&lt;/a&gt;). The rate for user-level stack collection is deliberately slower than kernel, which is especially important when using &lt;code&gt;jstack()&lt;/code&gt; as it performs additional work to translate frames.&lt;/p&gt; &#xA;&lt;h1&gt;2. Fold stacks&lt;/h1&gt; &#xA;&lt;p&gt;Use the stackcollapse programs to fold stack samples into single lines. The programs provided are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse.pl&lt;/code&gt;: for DTrace stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-perf.pl&lt;/code&gt;: for Linux perf_events &#34;perf script&#34; output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-pmc.pl&lt;/code&gt;: for FreeBSD pmcstat -G stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-stap.pl&lt;/code&gt;: for SystemTap stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-instruments.pl&lt;/code&gt;: for XCode Instruments&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-vtune.pl&lt;/code&gt;: for Intel VTune profiles&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-ljp.awk&lt;/code&gt;: for Lightweight Java Profiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-jstack.pl&lt;/code&gt;: for Java jstack(1) output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-gdb.pl&lt;/code&gt;: for gdb(1) stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-go.pl&lt;/code&gt;: for Golang pprof stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-vsprof.pl&lt;/code&gt;: for Microsoft Visual Studio profiles&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-wcp.pl&lt;/code&gt;: for wallClockProfiler output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;For perf_events:&#xA;$ ./stackcollapse-perf.pl out.perf &amp;gt; out.folded&#xA;&#xA;For DTrace:&#xA;$ ./stackcollapse.pl out.kern_stacks &amp;gt; out.kern_folded&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;unix`_sys_sysenter_post_swapgs 1401&#xA;unix`_sys_sysenter_post_swapgs;genunix`close 5&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf 85&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;c2audit`audit_closef 26&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;c2audit`audit_setf 5&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`audit_getstate 6&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`audit_unfalloc 2&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`closef 48&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;3. flamegraph.pl&lt;/h1&gt; &#xA;&lt;p&gt;Use flamegraph.pl to render a SVG.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./flamegraph.pl out.kern_folded &amp;gt; kernel.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An advantage of having the folded input file (and why this is separate to flamegraph.pl) is that you can use grep for functions of interest. Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ grep cpuid out.kern_folded | ./flamegraph.pl &amp;gt; cpuid.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Provided Examples&lt;/h1&gt; &#xA;&lt;h3&gt;Linux perf_events&lt;/h3&gt; &#xA;&lt;p&gt;An example output from Linux &#34;perf script&#34; is included, gzip&#39;d, as example-perf-stacks.txt.gz. The resulting flame graph is example-perf.svg:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/example-perf.svg&#34;&gt;&lt;img src=&#34;http://www.brendangregg.com/FlameGraphs/example-perf.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can create this using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gunzip -c example-perf-stacks.txt.gz | ./stackcollapse-perf.pl --all | ./flamegraph.pl --color=java --hash &amp;gt; example-perf.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This shows my typical workflow: I&#39;ll gzip profiles on the target, then copy them to my laptop for analysis. Since I have hundreds of profiles, I leave them gzip&#39;d!&lt;/p&gt; &#xA;&lt;p&gt;Since this profile included Java, I used the flamegraph.pl --color=java palette. I&#39;ve also used stackcollapse-perf.pl --all, which includes all annotations that help flamegraph.pl use separate colors for kernel and user level code. The resulting flame graph uses: green == Java, yellow == C++, red == user-mode native, orange == kernel.&lt;/p&gt; &#xA;&lt;p&gt;This profile was from an analysis of vert.x performance. The benchmark client, wrk, is also visible in the flame graph.&lt;/p&gt; &#xA;&lt;h3&gt;DTrace&lt;/h3&gt; &#xA;&lt;p&gt;An example output from DTrace is also included, example-dtrace-stacks.txt, and the resulting flame graph, example-dtrace.svg:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/example-dtrace.svg&#34;&gt;&lt;img src=&#34;http://www.brendangregg.com/FlameGraphs/example-dtrace.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can generate this using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./stackcollapse.pl example-stacks.txt | ./flamegraph.pl &amp;gt; example.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This was from a particular performance investigation: the Flame Graph identified that CPU time was spent in the lofs module, and quantified that time.&lt;/p&gt; &#xA;&lt;h1&gt;Options&lt;/h1&gt; &#xA;&lt;p&gt;See the USAGE message (--help) for options:&lt;/p&gt; &#xA;&lt;p&gt;USAGE: ./flamegraph.pl [options] infile &amp;gt; outfile.svg&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--title TEXT     # change title text&#xA;--subtitle TEXT  # second level title (optional)&#xA;--width NUM      # width of image (default 1200)&#xA;--height NUM     # height of each frame (default 16)&#xA;--minwidth NUM   # omit smaller functions (default 0.1 pixels)&#xA;--fonttype FONT  # font type (default &#34;Verdana&#34;)&#xA;--fontsize NUM   # font size (default 12)&#xA;--countname TEXT # count type label (default &#34;samples&#34;)&#xA;--nametype TEXT  # name type label (default &#34;Function:&#34;)&#xA;--colors PALETTE # set color palette. choices are: hot (default), mem,&#xA;                 # io, wakeup, chain, java, js, perl, red, green, blue,&#xA;                 # aqua, yellow, purple, orange&#xA;--bgcolors COLOR # set background colors. gradient choices are yellow&#xA;                 # (default), blue, green, grey; flat colors use &#34;#rrggbb&#34;&#xA;--hash           # colors are keyed by function name hash&#xA;--cp             # use consistent palette (palette.map)&#xA;--reverse        # generate stack-reversed flame graph&#xA;--inverted       # icicle graph&#xA;--flamechart     # produce a flame chart (sort by time, do not merge stacks)&#xA;--negate         # switch differential hues (blue&amp;lt;-&amp;gt;red)&#xA;--notes TEXT     # add notes comment in SVG (for debugging)&#xA;--help           # this message&#xA;&#xA;eg,&#xA;./flamegraph.pl --title=&#34;Flame Graph: malloc()&#34; trace.txt &amp;gt; graph.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As suggested in the example, flame graphs can process traces of any event, such as malloc()s, provided stack traces are gathered.&lt;/p&gt; &#xA;&lt;h1&gt;Consistent Palette&lt;/h1&gt; &#xA;&lt;p&gt;If you use the &lt;code&gt;--cp&lt;/code&gt; option, it will use the $colors selection and randomly generate the palette like normal. Any future flamegraphs created using the &lt;code&gt;--cp&lt;/code&gt; option will use the same palette map. Any new symbols from future flamegraphs will have their colors randomly generated using the $colors selection.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t like the palette, just delete the palette.map file.&lt;/p&gt; &#xA;&lt;p&gt;This allows your to change your colorscheme between flamegraphs to make the differences REALLY stand out.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Say we have 2 captures, one with a problem, and one when it was working (whatever &#34;it&#34; is):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat working.folded | ./flamegraph.pl --cp &amp;gt; working.svg&#xA;# this generates a palette.map, as per the normal random generated look.&#xA;&#xA;cat broken.folded | ./flamegraph.pl --cp --colors mem &amp;gt; broken.svg&#xA;# this svg will use the same palette.map for the same events, but a very&#xA;# different colorscheme for any new events.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at the demo directory for an example:&lt;/p&gt; &#xA;&lt;p&gt;palette-example-working.svg&lt;br&gt; palette-example-broken.svg&lt;/p&gt;</summary>
  </entry>
</feed>