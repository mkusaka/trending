<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-03T01:40:21Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>truongkma/ctf-tools</title>
    <updated>2022-10-03T01:40:21Z</updated>
    <id>tag:github.com,2022-10-03:/truongkma/ctf-tools</id>
    <link href="https://github.com/truongkma/ctf-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;tổng hợp tool ctf&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>mrash/fwknop</title>
    <updated>2022-10-03T01:40:21Z</updated>
    <id>tag:github.com,2022-10-03:/mrash/fwknop</id>
    <link href="https://github.com/mrash/fwknop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Single Packet Authorization &gt; Port Knocking&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fwknop - Single Packet Authorization&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;fwknop implements an authorization scheme known as Single Packet Authorization (SPA) for strong service concealment. SPA requires only a single packet which is encrypted, non-replayable, and authenticated via an HMAC in order to communicate desired access to a service that is hidden behind a firewall in a default-drop filtering stance. The main application of SPA is to use a firewall to drop all attempts to connect to services such as SSH in order to make the exploitation of vulnerabilities (both 0-day and unpatched code) more difficult. Because there are no open ports, any service that is concealed by SPA naturally cannot be scanned for with Nmap. The fwknop project supports four different firewalls: iptables, firewalld, PF, and ipfw across Linux, OpenBSD, FreeBSD, and Mac OS X. There is also support for custom scripts so that fwknop can be made to support other infrastructure such as ipset or nftables.&lt;/p&gt; &#xA;&lt;p&gt;SPA is essentially next generation Port Knocking (PK), but solves many of the limitations exhibited by PK while retaining its core benefits. PK limitations include a general difficulty in protecting against replay attacks, asymmetric ciphers and HMAC schemes are not usually possible to reliably support, and it is trivially easy to mount a DoS attack against a PK server just by spoofing an additional packet into a PK sequence as it traverses the network (thereby convincing the PK server that the client doesn&#39;t know the proper sequence). All of these shortcomings are solved by SPA. At the same time, SPA hides services behind a default-drop firewall policy, acquires SPA data passively (usually via libpcap or other means), and implements standard cryptographic operations for SPA packet authentication and encryption/decryption.&lt;/p&gt; &#xA;&lt;p&gt;SPA packets generated by fwknop leverage HMAC for authenticated encryption in the encrypt-then-authenticate model. Although the usage of an HMAC is currently optional (enabled via the &lt;code&gt;--use-hmac&lt;/code&gt; command line switch), it is highly recommended for three reasons:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Without an HMAC, cryptographically strong authentication is not possible with fwknop unless GnuPG is used, but even then an HMAC should still be applied.&lt;/li&gt; &#xA; &lt;li&gt;An HMAC applied after encryption protects against cryptanalytic CBC-mode padding oracle attacks such as the Vaudenay attack and related trickery (like the more recent &#34;Lucky 13&#34; attack against SSL).&lt;/li&gt; &#xA; &lt;li&gt;The code required by the fwknopd daemon to verify an HMAC is much more simplistic than the code required to decrypt an SPA packet, so an SPA packet without a proper HMAC isn&#39;t even sent through the decryption routines.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The final reason above is why an HMAC should still be used even when SPA packets are encrypted with GnuPG due to the fact that SPA data is not sent through libgpgme functions unless the HMAC checks out first. GnuPG and libgpgme are relatively complex bodies of code, and therefore limiting the ability of a potential attacker to interact with this code through an HMAC operation helps to maintain a stronger security stance. Generating an HMAC for SPA communications requires a dedicated key in addition to the normal encryption key, and both can be generated with the &lt;code&gt;--key-gen&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;fwknop encrypts SPA packets either with the Rijndael block cipher or via GnuPG and associated asymmetric cipher. If the symmetric encryption method is chosen, then as usual the encryption key is shared between the client and server (see the &lt;code&gt;/etc/fwknop/access.conf&lt;/code&gt; file for details). The actual encryption key used for Rijndael encryption is generated via the standard PBKDF1 key derivation algorithm, and CBC mode is set. If the GnuPG method is chosen, then the encryption keys are derived from GnuPG key rings.&lt;/p&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;People who use Single Packet Authorization (SPA) or its security-challenged cousin Port Knocking (PK) usually access SSHD running on the same system where the SPA/PK software is deployed. That is, a firewall running on a host has a default-drop policy against all incoming SSH connections so that SSHD cannot be scanned, but a SPA daemon reconfigures the firewall to temporarily grant access to a passively authenticated SPA client:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mrash/fwknop/master/doc/images/SPA_basic.png&#34; alt=&#34;SPA-basic-access-SSHD&#34;&gt; &#34;Basic SPA usage to access SSHD&#34;&lt;/p&gt; &#xA;&lt;p&gt;fwknop supports the above, but also goes much further and makes robust usage of NAT (for iptables/firewalld firewalls). After all, &lt;em&gt;important&lt;/em&gt; firewalls are usually gateways between networks as opposed to just being deployed on standalone hosts. NAT is commonly used on such firewalls (at least for IPv4 communications) to provide Internet access to internal networks that are on RFC 1918 address space, and also to allow external hosts access to services hosted on internal systems.&lt;/p&gt; &#xA;&lt;p&gt;Because fwknop integrates with NAT, SPA can be leveraged to access internal services &lt;em&gt;through&lt;/em&gt; the firewall by users on the external Internet. Although this has plenty of applications on modern traditional networks, it also allows fwknop to support cloud computing environments such as Amazon&#39;s AWS:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mrash/fwknop/master/doc/images/SPA_AWS_network_setup.png&#34; alt=&#34;SPA-Amazon-AWS-cloud&#34;&gt; &#34;SPA usage on Amazon AWS cloud environments&#34;&lt;/p&gt; &#xA;&lt;h2&gt;User Interface&lt;/h2&gt; &#xA;&lt;p&gt;The official cross-platform fwknop client user interface &lt;em&gt;fwknop-gui&lt;/em&gt; (&lt;a href=&#34;https://incomsystems.biz/fwknop-gui/&#34;&gt;download&lt;/a&gt;, &lt;a href=&#34;https://github.com/jp-bennett/fwknop-gui&#34;&gt;github&lt;/a&gt;) is developed by Jonathan Bennett. Most major client-side SPA modes are supported including NAT requests, HMAC and Rijndael keys (GnuPG is not yet supported), fwknoprc stanza saving, and more. Currently fwknop-gui runs on Linux, Mac OS X, and Windows - here is a screenshot from OS X: &lt;img src=&#34;https://raw.githubusercontent.com/mrash/fwknop/master/doc/images/fwknop-gui-OSX.png&#34; alt=&#34;fwknop-gui-OS-X-screenshot&#34;&gt; &#34;fwknop-gui on Mac OS X&#34; Similarly, an updated &lt;a href=&#34;https://github.com/jp-bennett/Fwknop2&#34;&gt;Android client&lt;/a&gt; is &lt;a href=&#34;https://incomsystems.biz/fwknop-gui/android.php&#34;&gt;available&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;A comprehensive tutorial on fwknop can be found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.cipherdyne.org/fwknop/docs/fwknop-tutorial.html&#34;&gt;http://www.cipherdyne.org/fwknop/docs/fwknop-tutorial.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The following is a complete list of features supported by the fwknop project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implements Single Packet Authorization around iptables and firewalld firewalls on Linux, ipfw firewalls on *BSD and Mac OS X, and PF on OpenBSD.&lt;/li&gt; &#xA; &lt;li&gt;The fwknop client runs on Linux, Mac OS X, *BSD, and Windows under Cygwin. In addition, there is an &lt;a href=&#34;https://github.com/jp-bennett/Fwknop2/releases&#34;&gt;Android app&lt;/a&gt; to generate SPA packets.&lt;/li&gt; &#xA; &lt;li&gt;Supports both Rijndael and GnuPG methods for the encryption/decryption of SPA packets.&lt;/li&gt; &#xA; &lt;li&gt;Supports HMAC authenticated encryption for both Rijndael and GnuPG. The order of operation is encrypt-then-authenticate to avoid various cryptanalytic problems.&lt;/li&gt; &#xA; &lt;li&gt;Replay attacks are detected and thwarted by SHA-256 digest comparison of valid incoming SPA packets. Other digest algorithms are also supported, but SHA-256 is the default.&lt;/li&gt; &#xA; &lt;li&gt;SPA packets are passively sniffed from the wire via libpcap. The fwknopd server can also acquire packet data from a file that is written to by a separate Ethernet sniffer (such as with &lt;code&gt;tcpdump -w &amp;lt;file&amp;gt;&lt;/code&gt;), from the iptables ULOG pcap writer, or directly via a UDP socket in &lt;code&gt;--udp-server&lt;/code&gt; mode.&lt;/li&gt; &#xA; &lt;li&gt;For iptables firewalls, ACCEPT rules added by fwknop are added and deleted (after a configurable timeout) from custom iptables chains so that fwknop does not interfere with any existing iptables policy that may already be loaded on the system.&lt;/li&gt; &#xA; &lt;li&gt;Supports inbound NAT connections for authenticated SPA communications (iptables firewalls only for now). This means fwknop can be configured to create DNAT rules so that you can reach a service (such as SSH) running on an internal system on an RFC 1918 IP address from the open Internet. SNAT rules are also supported which essentially turns fwknopd into a &lt;a href=&#34;https://www.cipherdyne.org/blog/2015/04/nat-and-single-packet-authorization.html&#34;&gt;SPA-authenticating gateway&lt;/a&gt; to access the Internet from an internal network.&lt;/li&gt; &#xA; &lt;li&gt;Multiple users are supported by the fwknop server, and each user can be assigned their own symmetric or asymmetric encryption key via the /etc/fwknop/access.conf file.&lt;/li&gt; &#xA; &lt;li&gt;Automatic resolution of external IP address via &lt;a href=&#34;https://www.cipherdyne.org/cgi-bin/myip&#34;&gt;https://www.cipherdyne.org/cgi-bin/myip&lt;/a&gt; (this is useful when the fwknop client is run from behind a NAT device). Because the external IP address is encrypted within each SPA packet in this mode, Man-in-the-Middle (MITM) attacks where an inline device intercepts an SPA packet and only forwards it from a different IP in an effort to gain access are thwarted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cipherdyne.org/blog/2008/06/single-packet-authorization-with-port-randomization.html&#34;&gt;Port randomization&lt;/a&gt; is supported for the destination port of SPA packets as well as the port over which the follow-on connection is made via the iptables NAT capabilities. The later applies to forwarded connections to internal services and to access granted to local sockets on the system running fwknopd.&lt;/li&gt; &#xA; &lt;li&gt;Integration with Tor (as described in this &lt;a href=&#34;http://www.cipherdyne.org/fwknop/docs/talks/dc14_fwknop_slides.pdf&#34;&gt;DefCon 14&lt;/a&gt; presentation). Note that because Tor uses TCP for transport, sending SPA packets through the Tor network requires that each SPA packet is sent over an established TCP connection, so technically this breaks the &#34;single&#34; aspect of &#34;Single Packet Authorization&#34;. However, Tor provides anonymity benefits that can outweigh this consideration in some deployments.&lt;/li&gt; &#xA; &lt;li&gt;Implements a versioned protocol for SPA communications, so it is easy to extend the protocol to offer new SPA message types and maintain backwards compatibility with older fwknop clients at the same time.&lt;/li&gt; &#xA; &lt;li&gt;Supports the execution of shell commands on behalf of valid SPA packets.&lt;/li&gt; &#xA; &lt;li&gt;The fwknop server can be configured to place multiple restrictions on inbound SPA packets beyond those enforced by encryption keys and replay attack detection. Namely, packet age, source IP address, remote user, access to requested ports, and more.&lt;/li&gt; &#xA; &lt;li&gt;Bundled with fwknop is a comprehensive test suite that issues a series of tests designed to verify that both the client and server pieces of fwknop work properly. These tests involve sniffing SPA packets over the local loopback interface, building temporary firewall rules that are checked for the appropriate access based on the testing config, and parsing output from both the fwknop client and fwknopd server for expected markers for each test. Test suite output can easily be anonymized for communication to third parties for analysis.&lt;/li&gt; &#xA; &lt;li&gt;fwknop was the first program to integrate port knocking with passive OS fingerprinting. However, Single Packet Authorization offers many security benefits beyond port knocking, so the port knocking mode of operation is generally deprecated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The fwknop project is released as open source software under the terms of the &lt;strong&gt;GNU General Public License (GPL v2)&lt;/strong&gt; or (at your option) any later version. The latest release can be found at &lt;a href=&#34;http://www.cipherdyne.org/fwknop/&#34;&gt;http://www.cipherdyne.org/fwknop/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current State&lt;/h2&gt; &#xA;&lt;p&gt;This README file describes the present state of the fwknop project as of the 2.5 release made in July, 2013. At present, we have an implementation of the Firewall Knock Operator library; &lt;code&gt;libfko&lt;/code&gt;, as well as the fwknop client and server applications. The library provides the API and back-end functionality for managing the Single Packet Authorization (SPA) data that the other fwknop components employ. It also can be used by other programs that need SPA functionality (see the &lt;code&gt;perl&lt;/code&gt; directory for the FKO perl module as an example, and there are python bindings as well in the &lt;code&gt;python&lt;/code&gt; directory).&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;If you are upgrading from an older version of fwknop (and this includes the original perl implementation as well), then you will want to read the following link to ensure a smooth transition to fwknop-2.5 or later:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.cipherdyne.org/fwknop/docs/fwknop-tutorial.html#backwards-compatibility&#34;&gt;http://www.cipherdyne.org/fwknop/docs/fwknop-tutorial.html#backwards-compatibility&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Questions or comments about fwknop will be fielded on the &lt;a href=&#34;http://lists.sourceforge.net/lists/listinfo/fwknop-discuss%5D&#34;&gt;fwknop mailing list&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For static analysis, fwknop uses the CLANG static analyzer and also the powerful Coverity Scan tool: &lt;a href=&#34;https://scan.coverity.com/projects/fwknop&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/403/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building fwknop&lt;/h2&gt; &#xA;&lt;p&gt;This distribution uses GNU autoconf for setting up the build. Please see the &lt;code&gt;INSTALL&lt;/code&gt; file for the general basics on using autoconf.&lt;/p&gt; &#xA;&lt;p&gt;There are some &#34;configure&#34; options that are specific to fwknop. They are (extracted from &lt;em&gt;./configure --help&lt;/em&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  --disable-client        Do not build the fwknop client component. The&#xA;                          default is to build the client.&#xA;  --disable-server        Do not build the fwknop server component. The&#xA;                          default is to build the server.&#xA;  --with-gpgme            support for gpg encryption using libgpgme&#xA;                          [default=check]&#xA;  --with-gpgme-prefix=PFX prefix where GPGME is installed (optional)&#xA;  --with-gpg=/path/to/gpg Specify path to the gpg executable that gpgme will&#xA;                          use [default=check path]&#xA;  --with-firewalld=/path/to/firewalld&#xA;                          Specify path to the firewalld executable&#xA;                          [default=check path]&#xA;  --with-iptables=/path/to/iptables&#xA;                          Specify path to the iptables executable&#xA;                          [default=check path]&#xA;  --with-ipfw=/path/to/ipfw&#xA;                          Specify path to the ipfw executable [default=check&#xA;                          path]&#xA;  --with-pf=/path/to/pfctl&#xA;                          Specify path to the pf executable [default=check&#xA;                          path]&#xA;  --with-ipf=/path/to/ipf Specify path to the ipf executable [default=check&#xA;                          path]&#xA;&#xA;Examples:&#xA;&#xA;./configure --disable-client --with-firewalld=/bin/firewall-cmd&#xA;./configure --disable-client --with-iptables=/sbin/iptables --with-firewalld=no&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Migrating from the Perl version of fwknop&lt;/h3&gt; &#xA;&lt;p&gt;For those of you who are currently using the Perl version and plan to migrate to this version, there are some things to be aware of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Not all of the features and functionality of the Perl-based fwknop were ported to this implementation. We felt it important to keep the C version as lean and lightweight as possible. Most of the omitted feature/functions (like email alerts) can be accomplished through other means (i.e. use an external script to monitor log files and alert based on appropriate log messages).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are some differences in the fwknop configuration and access file directives and values. Some of these are fairly subtle. You should pay careful attention to the documentation and comments in those files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For fwknop developers&lt;/h3&gt; &#xA;&lt;p&gt;If you are pulling this distribution from git, you should run the &lt;code&gt;autogen.sh&lt;/code&gt; script to generate the autoconf files. If you get errors about missing directories or files, try running &lt;code&gt;autogen.sh&lt;/code&gt; again. After that you can run the &lt;code&gt;autoreconf -i&lt;/code&gt; when you want to regenerate the configuration. If, for some reason, autoreconf does not work for you, the &lt;code&gt;autogen.sh&lt;/code&gt; script should suffice.&lt;/p&gt; &#xA;&lt;p&gt;The fwknop and fwknopd man page nroff sources are included in their respective directories (client and server). These nroff files are derived from the asciidoc sources in the &#39;docs&#39; directory. See the README in docs for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tokuhirom/Teng-Plugin-TextTable</title>
    <updated>2022-10-03T01:40:21Z</updated>
    <id>tag:github.com,2022-10-03:/tokuhirom/Teng-Plugin-TextTable</id>
    <link href="https://github.com/tokuhirom/Teng-Plugin-TextTable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;package Teng::Plugin::TextTable; use strict; use warnings; use 5.010001; our $VERSION = &#39;0.03&#39;; use Text::SimpleTable; use Carp (); use List::Util ();&lt;/p&gt; &#xA;&lt;p&gt;our @EXPORT = qw/draw_text_table/;&lt;/p&gt; &#xA;&lt;p&gt;sub draw_text_table { my ($self, $table_name, $where, $opts, $cols) = @_; my $table = $self-&amp;gt;schema-&amp;gt;get_table($table_name) or Carp::croak(&#34;Unknown table: $table_name&#34;); unless ($cols) { $cols = $table-&amp;gt;columns(); }&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $iter = $self-&amp;gt;search($table_name, $where, $opts);&#xA;$iter-&amp;gt;suppress_object_creation(1);&#xA;my @rows = $iter-&amp;gt;all;&#xA;&#xA;my @headers = map { [length($_) || 1, $_] } @$cols;&#xA;for my $i (0..@$cols-1) {&#xA;    for my $row (@rows) {&#xA;        $headers[$i]-&amp;gt;[0] = List::Util::max($headers[$i]-&amp;gt;[0], length($row-&amp;gt;{$cols-&amp;gt;[$i]}) || 1);&#xA;    }&#xA;}&#xA;my $tt = Text::SimpleTable-&amp;gt;new(@headers);&#xA;for my $row (@rows) {&#xA;    $tt-&amp;gt;row(map { $row-&amp;gt;{$_} || &#39;&#39; } @$cols);&#xA;}&#xA;return $tt-&amp;gt;draw;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;}&lt;/p&gt; &#xA;&lt;p&gt;1; &lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;=encoding utf8&lt;/p&gt; &#xA;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;Teng::Plugin::TextTable - Make text table from database.&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package My::DB;&#xA;__PACKAGE__-&amp;gt;load_plugin(&#39;TextTable&#39;);&#xA;&#xA;package main;&#xA;my $db = My::DB-&amp;gt;new(...);&#xA;print $db-&amp;gt;draw_text_table(&#39;user&#39;, {id =&amp;gt; { &#39;&amp;gt;&#39;, 50 }});&#xA;&#xA;# or, you want to use this plugin for just debugging...&#xA;# You can use without load to db class.&#xA;sub dump_table {&#xA;    my $table_name = shift;&#xA;    require Teng::Plugin::TextTable;&#xA;    return c-&amp;gt;db-&amp;gt;Teng::Plugin::TextTable::draw_text_table($table_name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;Teng::Plugin::TextTable is text table renderer plugin for L&#xA; &lt;teng&gt;&#xA;  .&#xA; &lt;/teng&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Tokuhiro Matsuno E&#xA; &lt;lt&gt;&#xA;  tokuhirom AAJKLFJEF@ GMAIL COME&#xA;  &lt;gt&gt;&lt;/gt&gt;&#xA; &lt;/lt&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;L&#xA; &lt;teng&gt;&lt;/teng&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) Tokuhiro Matsuno&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
</feed>