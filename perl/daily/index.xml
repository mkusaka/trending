<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-24T01:30:48Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hayajo/Mojolicious-Plugin-AccessControl</title>
    <updated>2024-02-24T01:30:48Z</updated>
    <id>tag:github.com,2024-02-24:/hayajo/Mojolicious-Plugin-AccessControl</id>
    <link href="https://github.com/hayajo/Mojolicious-Plugin-AccessControl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Mojolicious::Plugin::AccessControl - Access control&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Mojolicious&#xA;sub stratup {&#xA;  my $self = shift;&#xA;  $self-&amp;gt;plugin(&#39;AccessControl&#39;);&#xA;  my $r = $self-&amp;gt;routes;&#xA;  $r-&amp;gt;get(&#39;/&#39;)-&amp;gt;to(&#39;example#welcome&#39;)-&amp;gt;over( &#39;access&#39; =&amp;gt; [&#xA;      allow =&amp;gt; &#39;allowhost.com&#39;,&#xA;      allow =&amp;gt; &#39;127.0.0.1&#39;,&#xA;      allow =&amp;gt; &#39;192.168.0.3&#39;,&#xA;      deny  =&amp;gt; &#39;192.168.0.0/24&#39;,&#xA;      allow =&amp;gt; sub { $_[0]-&amp;gt;req-&amp;gt;headers-&amp;gt;user_agent =~ /Firefox/ },&#xA;      deny  =&amp;gt; &#39;all&#39;,&#xA;  ] )-&amp;gt;name(&#39;index&#39;);&#xA;}&#xA;&#xA;# Mojolicious::Lite&#xA;plugin &#39;AccessControl&#39;;&#xA;&#xA;get &#39;/&#39; =&amp;gt; ( &#39;access&#39; =&amp;gt; [&#xA;    allow =&amp;gt; &#39;allowhost.com&#39;,&#xA;    allow =&amp;gt; &#39;127.0.0.1&#39;,&#xA;    allow =&amp;gt; &#39;192.168.0.3&#39;,&#xA;    deny  =&amp;gt; &#39;192.168.0.0/24&#39;,&#xA;    allow =&amp;gt; sub { $_[0]-&amp;gt;req-&amp;gt;headers-&amp;gt;user_agent =~ /Firefox/ },&#xA;    deny  =&amp;gt; &#39;all&#39;,&#xA;] ) =&amp;gt; sub {&#xA;    my $self = shift;&#xA;    # do something&#xA;} =&amp;gt; &#39;index&#39;;&#xA;&#xA;# if access was denined, run &#39;on_deny&#39; which is a code reference.&#xA;get &#39;/deny_all&#39; =&amp;gt; ( &#39;access&#39; =&amp;gt; [&#xA;    { on_deny =&amp;gt; sub {&#xA;        my $self = shift; # Mojolicious::Controller&#xA;        $self-&amp;gt;res-&amp;gt;code(403);&#xA;        $self-&amp;gt;render( text =&amp;gt; &#39;Forbidden&#39; );&#xA;    } },&#xA;    deny  =&amp;gt; &#39;all&#39;,&#xA;] ) =&amp;gt; sub {&#xA;    my $self = shift;&#xA;    # do something&#xA;} =&amp;gt; &#39;index&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;Mojolicious::Plugin::AccessControl is intended for restricting access to app routes.&lt;/p&gt; &#xA;&lt;p&gt;This adds the condition to Mojolicious::Routes, which is named &#39;access&#39;.&lt;/p&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::AccessControl&#34;&gt;Mojolicious::Plugin::AccessControl&lt;/a&gt; inherits all methods from &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin&#34;&gt;Mojolicious::Plugin&lt;/a&gt; and implements the following new ones.&lt;/p&gt; &#xA;&lt;h2&gt;register&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$plugin-&amp;gt;register(Mojolicious-&amp;gt;new);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Register condition in &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt; application.&lt;/p&gt; &#xA;&lt;h1&gt;ARGUMENTS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;get &#39;/&#39; =&amp;gt; ( &#39;access&#39; =&amp;gt; [&#xA;    allow =&amp;gt; &#39;allowhost.com&#39;,&#xA;    allow =&amp;gt; &#39;127.0.0.1&#39;,&#xA;    allow =&amp;gt; &#39;192.168.0.3&#39;,&#xA;    deny  =&amp;gt; &#39;192.168.0.0/24&#39;,&#xA;    allow =&amp;gt; sub { $_[0]-&amp;gt;req-&amp;gt;headers-&amp;gt;user_agent =~ /Firefox/ },&#xA;    deny  =&amp;gt; &#39;all&#39;,&#xA;] ) =&amp;gt; sub {&#xA;    my $self = shift;&#xA;    # do something&#xA;} =&amp;gt; &#39;index&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&#39;access&#39; takes an arrayref of rules.&lt;/p&gt; &#xA;&lt;p&gt;Each rule consists of directive allow or deny and their argument. Rules are checked in the order of their record to the first match. Code rules always match if they return a defined non-zero value. Access is granted if no rule matched.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;all&#34;&lt;/p&gt; &lt;p&gt;always matched.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ip&lt;/p&gt; &lt;p&gt;matches on one ip or ip range.&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://metacpan.org/pod/Net::CIDR::Lite&#34;&gt;Net::CIDR::Lite&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;remote_host&lt;/p&gt; &lt;p&gt;matches on domain or subdomain of remote_host if it can be resolved.&lt;/p&gt; &lt;p&gt;If Mojo::Message::Request#env-&amp;gt;{REMOTE_HOST} is not set, the rule is skipped.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;code&lt;/p&gt; &lt;p&gt;an arbitrary code reference for checking arbitrary properties of the request.&lt;/p&gt; &lt;p&gt;this function takes Mojolicious::Controller as parameter. The rule is skipped if the code returns undef.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;OPTIONS&lt;/h1&gt; &#xA;&lt;p&gt;&#39;access&#39; takes an arrayref of rules. If there is a hashref to the top, it considered options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;get &#39;/only_local&#39; =&amp;gt; ( &#39;access&#39; =&amp;gt; [&#xA;    # options&#xA;    {&#xA;      on_deny =&amp;gt; sub {&#xA;          my $self = shift; # Mojolicious::Controller&#xA;          $self-&amp;gt;res-&amp;gt;code(403);&#xA;          $self-&amp;gt;render( text =&amp;gt; &#39;Forbidden&#39; );&#xA;      },&#xA;    },&#xA;    # rules&#xA;    allow =&amp;gt; &#39;127.0.0.1&#39;,&#xA;    deny  =&amp;gt; &#39;all&#39;,&#xA;] ) =&amp;gt; sub {&#xA;    my $self = shift;&#xA;    # do something&#xA;} =&amp;gt; &#39;index&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;on_deny&#34;&lt;/p&gt; &lt;p&gt;an arbitrary code reference.&lt;/p&gt; &lt;p&gt;if access was denied, run this callback.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;hayajo &lt;a href=&#34;mailto:hayajo@cpan.org&#34;&gt;hayajo@cpan.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CONTRIBUTORS&lt;/h1&gt; &#xA;&lt;p&gt;Many thanks to the contributors for their work.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oliverguenther@github&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Guides::Routing&#34;&gt;Mojolicious::Guides::Routing&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::Access&#34;&gt;Plack::Middleware::Access&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Plack::Builder::Conditionals&#34;&gt;Plack::Builder::Conditionals&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt;</summary>
  </entry>
</feed>