<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-18T01:35:32Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>socallinuxexpo/scale-network</title>
    <updated>2024-03-18T01:35:32Z</updated>
    <id>tag:github.com,2024-03-18:/socallinuxexpo/scale-network</id>
    <link href="https://github.com/socallinuxexpo/scale-network" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SCaLE&#39;s on-site expo network configurations, wifi, tooling, and scripts&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://sarcasticadmin.com/scale/imgs/tux-scale-tech-2018.png&#34; width=&#34;360&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/socallinuxexpo/scale-network/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/socallinuxexpo/scale-network/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/socallinuxexpo/scale-network/actions/workflows/openwrt-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/socallinuxexpo/scale-network/actions/workflows/openwrt-build.yml/badge.svg?branch=master&#34; alt=&#34;Openwrt Build Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;scale-network&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.socallinuxexpo.org/&#34;&gt;SCaLE&#39;s&lt;/a&gt; on-site expo network configurations, tooling and scripts&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/CI.md&#34;&gt;CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/MAPS.md&#34;&gt;MAPS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/switch-configuration/README.md&#34;&gt;SWITCH CONFIG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/openwrt/README.md&#34;&gt;OPENWRT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/nix/README.md&#34;&gt;NIX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/tests/README.md&#34;&gt;TESTING&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/.kermit/README.md&#34;&gt;KERMIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/RELEASE.md&#34;&gt;RELEASE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/pi/README.md&#34;&gt;PI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/docs/checklists/PRECONF-CHECKLIST.md&#34;&gt;PRE CONF CHECKLIST&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;SCaLE happens once a year but the team has ongoing projects and prep year round. If you are interesting in volunteering please request to join our mailing list: &lt;a href=&#34;https://lists.linuxfests.org/cgi-bin/mailman/listinfo/tech&#34;&gt;https://lists.linuxfests.org/cgi-bin/mailman/listinfo/tech&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information checkout: &lt;a href=&#34;https://raw.githubusercontent.com/socallinuxexpo/scale-network/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>t0ey/SoundCloud-Profile-Dumper</title>
    <updated>2024-03-18T01:35:32Z</updated>
    <id>tag:github.com,2024-03-18:/t0ey/SoundCloud-Profile-Dumper</id>
    <link href="https://github.com/t0ey/SoundCloud-Profile-Dumper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dump a SoundCloud profile into a database / directory structure&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#--------------------------------------------------------------------------#&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Author:  Toey Jammer&#xA;Contact:  toey@toey.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#--------------------------------------------------------------------------#&lt;/p&gt; &#xA;&lt;p&gt;Description:&lt;/p&gt; &#xA;&lt;p&gt;Script used to extract SoundCloud profile data into local file structure as follows:&lt;/p&gt; &#xA;&lt;p&gt;$baseDIR = current directory $profile = SoundCloud profile&lt;/p&gt; &#xA;&lt;p&gt;$baseDIR/$profile/tracklist.csv = Comma Seperated Values that contain relevant track info... Current column headings are:&lt;/p&gt; &#xA;&lt;p&gt;Name Shortname SoundCloud ID Release Date Plays Favoritings Length SoudCloud URL Artwork Path Download Path Purchase URL&lt;/p&gt; &#xA;&lt;p&gt;$baseDIR/$profile/rawData = folder containing the raw data used to extract the info $baseDIR/$profile/art = folder containing relevant artwork for each track $baseDIR/$profile/music = folder containing downloadable songs&lt;/p&gt; &#xA;&lt;p&gt;Script variable $hash{rawDataAge} defines the maxium age (in seconds) that the data can be before checking for updates. The default is 42000 (~1/2 a day)&lt;/p&gt; &#xA;&lt;p&gt;Script will check and ensure it doesnt already have artwork and music files before proceeding to download&lt;/p&gt; &#xA;&lt;p&gt;#--------------------------------------------------------------------------#&lt;/p&gt; &#xA;&lt;p&gt;Script Dependancies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;User Variables:&#xA;- $profile = the soundcloud profile you want to download&#xA;&#xA;Perl Modules&#xA;- perl module File::stat -- included as of Perl 5.004;&#xA;&#xA;GNU Tools&#xA;- wget  (GNU Wget 1.13)&#xA;- lynx (Lynx version 2.8.8dev.9)&#xA;- awk (GNU Awk 3.1.8)&#xA;- egrep (egrep (GNU grep) 2.9)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(GNU Tools should be availible to the scripts environment on execution) Older versions than the GNU Tools used to build this script Should work...&lt;/p&gt; &#xA;&lt;p&gt;#--------------------------------------------------------------------------#&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>darold/pgcluu</title>
    <updated>2024-03-18T01:35:32Z</updated>
    <id>tag:github.com,2024-03-18:/darold/pgcluu</id>
    <link href="https://github.com/darold/pgcluu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PostgreSQL Cluster performances monitoring and auditing tool&lt;/p&gt;&lt;hr&gt;&lt;p&gt;NAME pgCluu - PostgreSQL Cluster utilization&lt;/p&gt; &#xA;&lt;p&gt;DESCRIPTION pgCluu is a PostgreSQL performance monitoring and auditing tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;It is a Perl program used to perform a full audit of a PostgreSQL&#xA;Cluster and System performance. It is divided in two parts:&#xA;&#xA;- A collector used to grab statistics on the PostgreSQL cluster using&#xA;the psql command line utility and sar from the sysstat package.&#xA;&#xA;- A pure Perl grapher that will generate all HTML and charts output&#xA;without any requirements.&#xA;&#xA;If you don&#39;t need system utilization reports or don&#39;t want to install&#xA;the sysstat package, you can disable it at command line. You will only&#xA;have reports about your PostgreSQL Cluster. If you are running pgCluu&#xA;from a central server using option -h to monitor remotely a PostgreSQL&#xA;Cluster, the call to sar is automatically disabled.&#xA;&#xA;If you just want to have system utilization reports or generate graphs&#xA;from a sar data file, it&#39;s also possible.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SYNOPSIS PostgreSQL and System metrics collector.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        pgcluu_collectd [options] output_dir&#xA;&#xA;Report generator.&#xA;&#xA;        pgcluu [options] -o report_dir input_dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;REQUIREMENT pgCluu comes with two Perl scripts. You need a modern Perl distribution, the psql client and the sar command line utility (sysstat). The sysstat package is optional, you can still use pgCluu to generate reports about your PostgreSQL Cluster without it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Charts are rendered using a Javascript library so you don&#39;t need&#xA;anything else. Your browser will do all the work.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;INSTALLATION Installation from package Installation of pgCluu can be done through the PostgreSQL Global Development Group (PGDG) repositories. See how to install the PGDG repositories at the following URLs for Debian and Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        https://wiki.postgresql.org/wiki/Apt&#xA;&#xA;and Redhat, CentOs, Fedora, Scientific Linux and Oracle Enterprise&#xA;Linux:&#xA;&#xA;        https://yum.postgresql.org/&#xA;&#xA;Once it is done you can simply install pgCluu with commands:&#xA;&#xA;        sudo apt install pgcluu&#xA;        sudo yum install pgcluu&#xA;&#xA;Look at the package information to know where files are specifically&#xA;installed. See next two chapters to see which default installation paths&#xA;are used.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installation from sources Download the tarball from GitHub and unpack the archive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        tar xzf pgcluu-3.x.tar.gz&#xA;        cd pgcluu-3.x/&#xA;        perl Makefile.PL&#xA;        make &amp;amp;&amp;amp; sudo make install&#xA;&#xA;This will copy the Perl scripts pgcluu_collectd and pgcluu into&#xA;/usr/local/bin directory and the man page to&#xA;/usr/local/share/man/man1/pgcluu.1p.gz. Those are the default&#xA;installation directories for &#39;site&#39; install on some well-known&#xA;distribution but the path could change.&#xA;&#xA;If you want to install all under /usr location, use INSTALLDIRS=&#39;vendor&#39;&#xA;as an argument of Makefile.PL. The script will be installed into&#xA;/usr/bin/pgcluu and the manpage into /usr/share/man/man1/pgcluu.1p.gz.&#xA;&#xA;For example, to install everything just like Debian does, proceed as&#xA;follows:&#xA;&#xA;        perl Makefile.PL INSTALLDIRS=vendor&#xA;&#xA;By default INSTALLDIRS is set to site.&#xA;&#xA;The directory where statistics will be saved is /var/lib/pgcluu/data and&#xA;the default directory for reports is /var/lib/pgcluu/report.&#xA;&#xA;The CGI script is installed into /var/lib/cgi-bin/pgcluu.cgi and the&#xA;Apache configuration file into /etc/apache/conf-available/pgcluu.conf.&#xA;This file allow acces to resources files (CSS and JS files) from&#xA;installation directory /usr/local/share/pgcluu/rsc/. Access is granted&#xA;to local user only by default.&#xA;&#xA;All scripts (pgcluu_collectd, pgcluu and pgcluu.cgi) are reading&#xA;configuration file from /usr/local/etc/pgcluu.conf. This file is mainly&#xA;use by the CGI script but some directives are dedicated to&#xA;pgcluu_collectd and pgcluu script to define the retention days for&#xA;example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom installation The installation of pgCluu can be fully customized through environment variables (RSCDIR,CGIDIR,CONFDIR,PIDDIR,STATDIR,APACHECONF,MANDIR, DOCDIR,SYSTEMDDIR,RETENTION). These variables are passed to Makefile.PL as command line arguments or can be exported as environment variables before running &#34;perl Makefile.PL&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The default values for these variables are:&#xA;&#xA;    DESTDIR     =&amp;gt; /usr/local&#xA;    INSTALLDIRS =&amp;gt; site&#xA;    CONFDIR     =&amp;gt; DESTDIR/etc&#xA;    PIDDIR      =&amp;gt; /var/run/postgres&#xA;    STATDIR     =&amp;gt; /var/lib/pgcluu/data&#xA;    REPORTDIR   =&amp;gt; /var/lib/pgcluu/data&#xA;    RSCDIR      =&amp;gt; DESTDIR/share/pgcluu&#xA;    CGIDIR      =&amp;gt; /usr/lib/cgi-bin&#xA;    APACHECONF  =&amp;gt; /etc/apache2/conf-available&#xA;    MANDIR      =&amp;gt; DESTDIR/share/man&#xA;    DOCDIR      =&amp;gt; DESTDIR/share/doc&#xA;    SYSTEMDIR   =&amp;gt; DESTDIR/lib/systemd/system&#xA;    RETENTION   =&amp;gt; 0&#xA;&#xA;If INSTALLDIRS is set to &#39;vendor&#39;:&#xA;&#xA;    CONFDIR     =&amp;gt; /etc&#xA;    DESTDIR     =&amp;gt; /usr&#xA;&#xA;The configuration file is auto-generated by the Makefile.PL script and&#xA;saved into CONFDIR/pgcluu.conf. If the destination file exists it is not&#xA;overridden. The file is also saved as example in the directory&#xA;DOCDIR/pgcluu/examples/pgcluu.conf.dist&#xA;&#xA;The directory where pgcluu_collectd will store statistics is defined&#xA;with STATDIR which is by default /var/lib/pgcluu/data. The directory&#xA;where pgcluu will generate static html reports is defined by REPORTDIR.&#xA;The default is /var/lib/pgcluu/report. Both directory must be owned by&#xA;the postgres user.&#xA;&#xA;The man page is saved as DESTDIR/share/man/pgcluu.1p.gz and a symbolic&#xA;link pgcluu_collectd.1p.gz is created to this file. The documentation,&#xA;README, changelog.gz, LICENSE files are saved under DESTDIR/share/doc/.&#xA;&#xA;For the CGI mode, the resources (css and js files from the cgi-bin/rsc)&#xA;are saved under the DESTDIR/share/pgcluu/rsc directory. The CGI script&#xA;is saved under /usr/lib/cgi-bin/pgcluu.cgi. The Apache configuration&#xA;file under /etc/apache2/conf-available/pgcluu.conf with a symbolic link&#xA;/etc/apache2/conf-enabled/pgcluu.conf created to this file. Its content:&#xA;&#xA;    Alias /pgcluu RSCDIR/&#xA;    &amp;lt;Directory RSCDIR/&amp;gt;&#xA;        Options FollowSymLinks MultiViews&#xA;        AllowOverride None&#xA;        Require local&#xA;        #Require ip 192.1.168.0/24&#xA;    &amp;lt;/Directory&amp;gt;&#xA;&#xA;The systemd files (pgcluu_collectd.service,pgcluu.service,pgcluu.timer)&#xA;are saved as examples into DOCDIR/pgcluu/examples/ and into the systemd&#xA;directory SYSTEMDDIR/&#xA;&#xA;The right path to the configuration file is set into all scripts pgcluu,&#xA;pgcluu_collectd and pgcluu.cgi. The path where the pid file must be&#xA;saved is replaced into pgcluu_collectd with the value of PIDFILE&#xA;variable.&#xA;&#xA;Paths to scripts, pid directory, statistics and reports are replaced in&#xA;all systemd service files following the values of the environment&#xA;variable explain here.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;USAGE Manually See next two chapters for a complete description of the command line options. For the impatient, here some simple commands that could be run as postgres user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        mkdir /tmp/stat_db1/&#xA;        pgcluu_collectd -D -i 60 /tmp/stat_db1/&#xA;        LOG: Detach from terminal with pid: 11323&#xA;&#xA;or with more options&#xA;&#xA;        pgcluu_collectd -D -i 60 /tmp/stat_db1/ -h 10.10.1.1 -U postgres -d mydb&#xA;        LOG: Detach from terminal with pid: 14671&#xA;&#xA;wait some time and activity on your PostgreSQL Cluster... Then stop the&#xA;pgcluu_collectd daemon and generate the report:&#xA;&#xA;        pgcluu_collectd -k&#xA;        LOG: Received terminating signal.&#xA;        mkdir /tmp/report_db1/&#xA;        pgcluu -o /tmp/report_db1/ /tmp/stat_db1/&#xA;&#xA;You should obtain something like example at&#xA;http://pgcluu.darold.net/example/&#xA;&#xA;By default all javascript, css and the webfont fontawesome are&#xA;automatically generated into the output directory if those files does&#xA;not already exits.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using systemd unit files pgcluu comes with systemd service files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    - pgcluu_collectd.service: execute pgcluu_collectd as a daemon to collect statistics.&#xA;    - pgcluu.service: execute pgcluu to generate reports.&#xA;    - pgcluu.timer: run periodically pgcluu.service&#xA;&#xA;These files are installed automatically by the install script or the&#xA;package into /lib/systemd/system/. To activate these services proceed as&#xA;follow:&#xA;&#xA;        systemctl daemon-reload&#xA;        systemctl enable pgcluu_collectd.service&#xA;        systemctl enable pgcluu.service&#xA;        systemctl enable pgcluu.timer&#xA;        systemctl start pgcluu_collectd.service&#xA;        systemctl start pgcluu.timer&#xA;&#xA;Be warn that storing indefinitely statistics with pgcluu_collectd can&#xA;fill you disk space in the short or medium term. You have to remove&#xA;obsolete statistics manually using a cron job or using the embedded&#xA;retention feature by adding option &#39;--retention ndays&#39; to&#xA;pgcluu_collectd call or by changing the value of&#xA;STATS_COLLECTD_RETENTION configuration directive in file&#xA;/usr/local/etc/pgcluu.conf or /etc/pgcluu.conf file following your&#xA;installation. You can also set STATS_REPORT_RETENTION to limit the&#xA;retention of reports directories or use option &#39;--retention ndays&#39; with&#xA;pgcluu. Default is to preserve collected data for the past 30 days.&#xA;&#xA;If you want to use the CGI mode you also have activate pgcluu caching by&#xA;enabling value STATS_REPORT_CACHING in the configuration file and using&#xA;pgcluu.service+pgcluu.timer. If you don&#34;t want to use systemd you can&#xA;simply run pgcluu script with the -C option and execute it periodically&#xA;through a cron job.&#xA;&#xA;Note that the systemd service files set the privilege to the data and&#xA;report directory to user postgres and group www-data. By this way&#xA;reports are readable through an httpd server for static reports and data&#xA;are readable through the CGI if enabled. Command executed by the&#xA;pgcluu_collectd.service file (daemon part) are:&#xA;&#xA;        /bin/mkdir -p $STATDIR&#xA;        /bin/chown postgres:www-data $STATDIR&#xA;        /bin/chmod u=rwX,g=rsX,o= $STATDIR&#xA;&#xA;The pgcluu.service file (client part) execute commands:&#xA;&#xA;        /bin/mkdir -p $REPORTDIR&#xA;        /bin/chown postgres:www-data $REPORTDIR&#xA;        /bin/chmod u=rwX,g=rsX,o= $REPORTDIR&#xA;&#xA;In case you don&#39;t want to use systemd service files you will have to&#xA;execute these commands manually before tunning pgCluu.&#xA;&#xA;For pgcluu reports, the output directory can be defined in the&#xA;configuration file using the STATS_REPORT_OUTDIR directive.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;COLLECTING STATISTICS To generate reports about your PostgreSQL Cluster Utilization you must collect statistics before. pgcluu_collectd is here for that. It can be run in a daemon mode (option -D) or in interactive mode for debugging purpose. All you need is to provide a directory where data will be stored. Statistics will be pooled at a default interval of 60 seconds, using option -i you can customize it. See below for a complete list of command line options.&lt;/p&gt; &#xA;&lt;p&gt;pgcluu_collectd usage usage: pgcluu_collectd [options] output_dir&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        output_dir: full path to directory where pgcluu_collectd will&#xA;                    store statistics.&#xA;&#xA;options:&#xA;&#xA;  -B, --enable-buffercache enable buffercache statistics if pg_buffercache&#xA;                           extension is installed.&#xA;  -c, --capture            create a snapshot of the PostgreSQL installation&#xA;                           into tmp/pgcluu_capture.tar.gz.&#xA;  -C, --end-counter=NUM    terminate program after NUM reports.&#xA;  -d, --dbname=DATABASE    database name to connect to. Default to current user.&#xA;  -D, --daemonize          detach from console and enter in daemon mode.&#xA;  -E, --end-after=NUM      self terminate the program after a given number of&#xA;                           seconds. Can be written: 7200 or 120M or 2H, for&#xA;                           days use 7D for example to stop collecting data&#xA;                           after seven days.&#xA;  -f, --pid-file=FILE      path to pid file. Default: /var/run/postgresql/pgcluu_collectd.pid.&#xA;  -h, --host=HOSTNAME      database server host or socket directory&#xA;  -i, --interval=NUM       time to wait between runs&#xA;  -k, --kill               stop current pgcluu_collectd running daemon.&#xA;  -m, --metric=METRIC      set a coma separated list of metrics to perform.&#xA;  -M, --max-size=SIZE      self terminate program when the size of the output&#xA;                           directory exceed a given size. Can be written: 2GB&#xA;                           or 2000MB.&#xA;  -n, --no-pg_stats-dump   don&#39;t collect statistics from the pg_stats view.&#xA;  -p, --port=PORT          database port(s) to connect to. Defaults to 5432.&#xA;  -P, --psql=BIN           path to the psql command. Default: psql.&#xA;  -Q, --no-statement       do not collect statistics from pg_stat_statements.&#xA;  -r, --rotate-daily       force daily rotation of data files.&#xA;  -R, --rotate-hourly      force hourly rotation of data files.&#xA;  -s, --sar=BIN            path to sar sysstat command. Default: sar.&#xA;  -S, --disable-sar        disable collect of system statistics with sar.&#xA;  -t, --lock-timeout=NUM   terminate metric SQL query after N second in case it&#xA;                           wait too much time because of a lock. Default: 3&#xA;  -T, --no-tablespace      disable lookup at tablespace when the connect user&#xA;                           is not superuser to avoid printing an error message.&#xA;  -U, --dbuser=USERNAME    database user to connect as. Default to current user.&#xA;  -v, --verbose            Print out debug informations.&#xA;  -V, --version            Show pgcluu_collectd version and exit.&#xA;  -w, --no-waitevent       don&#39;t collect wait event stats from pg_wait_sampling.&#xA;  -W, --password=pass      database password.&#xA;  -z, --compress           force compression of rotated data files.&#xA;  --included-db=DATABASE   collect statistics only for those databases present&#xA;                           in a comma separated list of database names.&#xA;  --list-metric            list available metrics actions that can be performed.&#xA;  --sysinfo                get operating system infos and exit (sysinfo.txt).&#xA;  --no-sysinfo             do not collect operating system information at all.&#xA;  --no-database            do not collect database statistics at all.&#xA;  --pgbouncer-args=OPTIONS Option to used to connect to the pgbouncer system&#xA;                           database. Ex: -p 6432 -U postgres -h 192.168.1.100&#xA;                           You must at least give one parameter to enable&#xA;                           pgbouncer monitoring.&#xA;  --sar-file=FILE          path to sar output data file for sysstat stats&#xA;                           Default to output_dir/sar_stats.dat.&#xA;  --stat-type all|user     Set stats tables to read. Values: &#39;all&#39; or &#39;user&#39; to&#xA;                           look at pg_stat_(all|user) tables. Default: user.&#xA;  --pgversion X.Y          force the PostgreSQL version to the given value.&#xA;  --pgservice NAME         Name of service inside of the pg_service.conf file.&#xA;  --exclude-time RANGE     exclude a laps of time by giving the start and end&#xA;                           hours.&#xA;  --cron-user=USERNAME     collect crontab settings for the given username (in&#xA;                           this case pgcluu_collectd need to be run as root).&#xA;                           Default is to use USERNAME environment variable or&#xA;                           postgres when it is not defined.&#xA;  --package-list=CMD       command to list PostgreSQL packages. Default is to&#xA;                           autodetect package type and using command &#39;rpm -qa&#39;&#xA;                           or &#39;dpkg -l&#39;. If you have an other system you can&#xA;                           set a custom command. A filter on keyword &#39;postgres&#39;&#xA;                           is appended to the command: &#39; | grep postgres&#39;.&#xA;  --retention NDAYS        number of rolling days to keep in data directory in&#xA;                           incremental mode. Default is to store indefinitely.&#xA;  --disable-pidstat        do not collect metrics from pidstat command.&#xA;  --help                   print usage&#xA;&#xA;Use those options to execute sar on the remote host defined by the -h&#xA;option, otherwise it will be executed locally:&#xA;&#xA;  --enable-ssh             activate the use of ssh to run sysstat remotely.&#xA;  --ssh-program ssh        path to the ssh program to use. Default: ssh.&#xA;  --ssh-user username      connection login name. Default to running user.&#xA;  --ssh-identity file      path to the identity file to use.&#xA;  --ssh-timeout second     timeout to ssh connection failure. Default 10.&#xA;  --ssh-options  options   list of -o options to use for the ssh connection.&#xA;                           Options always used:&#xA;                             -o ConnectTimeout=$ssh_timeout&#xA;                             -o PreferredAuthentications=hostbased,publickey&#xA;&#xA;For example, as postgres user to monitor locally a full PostgreSQL&#xA;cluster:&#xA;&#xA;  mkdir /tmp/stat_db1/&#xA;  pgcluu_collectd -D -i 60 /tmp/stat_db1/&#xA;&#xA;to collect statistics from pgbouncer too, and limit database statistics&#xA;to a single database:&#xA;&#xA;  pgcluu_collectd -D -i 60 /tmp/stat_db1/ -h 10.10.1.1 -U postgres -d mydb &#xA;                --pgbouncer-args=&#39;-p 5342&#39;&#xA;&#xA;to disable statistics collect between 22:30 and 06:30 the next day:&#xA;&#xA;  pgcluu_collectd -D -i 60 /tmp/stat_db1/ --exclude-time &#34;22:30-06:30&#34;&#xA;&#xA;to collect statistics from a remote server:&#xA;&#xA;    pgcluu_collectd -D -i 60 /tmp/statdb1/ -h 10.0.0.1 -U postgres --disable-sar&#xA;&#xA;the same but with collecting system statistics using remote sar calls:&#xA;&#xA;  pgcluu_collectd -D -i 60 /tmp/statdb1/ -h 10.0.0.1 -U postgres --enable-ssh &#xA;        --ssh-user postgres --ssh-identity /var/lib/postgresql/.ssh/id_rsa.pub&#xA;&#xA;You may need a .pgpass and be able to establish passwordless ssh&#xA;connections to be able to collect statistics from remote hosts.&#xA;&#xA;Then after some time and activities on the database, stop the daemon as&#xA;follow:&#xA;&#xA;  pgcluu_collectd -k&#xA;&#xA;or by sending sigterm to the pgcluu_collectd&#39;s pid.&#xA;&#xA;You can run the collector in incremental mode using a daily or a hourly&#xA;statistics rotation:&#xA;&#xA;  pgcluu_collectd -D -i 60 /tmp/stat_db1/ --rotate-daily&#xA;&#xA;On a server with huge activity you may want to use --rotate-hourly and&#xA;compression mode with --compress option. If you have limited disk space&#xA;you can restrict the retention time of statistics files using option&#xA;--retention with the storage day limit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Statistics files The output directory with all statistics collected should look likes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        /tmp/stat_db1/&#xA;        |-- commit_memory.csv&#xA;        |-- end-pg_statio_user_indexes.csv&#xA;        |-- end-pg_statio_user_sequences.csv&#xA;        |-- end-pg_statio_user_tables.csv&#xA;        |-- end-pg_stat_user_functions.csv&#xA;        |-- end-pg_stat_user_indexes.csv&#xA;        |-- end-pg_stat_user_tables.csv&#xA;        |-- end-pg_stat_xact_user_functions.csv&#xA;        |-- end-pg_stat_xact_user_tables.csv&#xA;        |-- fs_stat_use.csv&#xA;        |-- pg_class_size.csv&#xA;        |-- pg_database_size.csv&#xA;        |-- pg_db_role_setting.csv&#xA;        |-- pg_hba.conf&#xA;        |-- pg_ident.conf&#xA;        |-- pg_nondefault_settings.csv&#xA;        |-- pg_prepared_xact.csv&#xA;        |-- pg_settings.csv&#xA;        |-- pg_stat_archiver.csv&#xA;        |-- pg_stat_bgwriter.csv&#xA;        |-- pg_stat_connections.csv&#xA;        |-- pg_stat_count_indexes.csv&#xA;        |-- pg_stat_database_conflicts.csv&#xA;        |-- pg_stat_database.csv&#xA;        |-- pg_stat_hash_indexes.csv&#xA;        |-- pg_stat_invalid_indexes.csv&#xA;        |-- pg_statio_user_indexes.csv&#xA;        |-- pg_statio_user_sequences.csv&#xA;        |-- pg_statio_user_tables.csv&#xA;        |-- pg_stat_locks.csv&#xA;        |-- pg_stat_missing_fkindexes.csv&#xA;        |-- pg_stat_redundant_indexes.csv&#xA;        |-- pg_stat_replication.csv&#xA;        |-- pg_stat_unlogged.csv&#xA;        |-- pg_stat_unused_indexes.csv&#xA;        |-- pg_stat_user_functions.csv&#xA;        |-- pg_stat_user_indexes.csv&#xA;        |-- pg_stat_user_tables.csv&#xA;        |-- pg_stat_xact_user_functions.csv&#xA;        |-- pg_stat_xact_user_tables.csv&#xA;        |-- pg_tablespace_size.csv&#xA;        |-- pg_xlog_stat.csv&#xA;        |-- postgresql.auto.conf&#xA;        |-- postgresql.conf&#xA;        |-- sar_stats.dat&#xA;        |-- sysinfo.txt&#xA;&#xA;Then now you can proceed with pgcluu to generate reports.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional statistics from extensions To be able to report top statements, wait events and subxact statistics you need to create the related extensions into a single database and use this database for primary connection to pgcluu_collectd using the -d option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The related extension are pg_stat_statements, pg_wait_sampling and&#xA;pg_subxact_counters.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rotation and compression When used the --rotate-daily or --rotate-hourly commands line option will force pgcluu_collectd to rotate daily or hourly all statistic&#39;s files. In this case, statistics files will be created in a subdirectory based on rotation frequency, output_dir/year/month/day[/hour]. This is called the incremental mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To save filesystem space it is possible to enable compression of all&#xA;rotated files during the rotation process. Just activate the -z or&#xA;--compress command line option. You can also use the --retention option&#xA;to set the storage time limit in days.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Incremental mode This mode is enabled when --rotate-daily or --rotate-hourly command line options are used. It allow pgcluu to build reports incrementally by days or hours. In this mode you don&#39;t have to build reports per day or hour pgcluu will do the work automatically, just give it the top statistics directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        pgcluu -o /var/www/pgcluu/reports/ /var/lib/pgcluu/data/&#xA;&#xA;pgcluu will detect that --rotate-daily or --rotate-hourly have been used&#xA;to collect data and generate reports for each day or hours stored.&#xA;Previous directories already processed will not be processed again&#xA;unless this was the the last one.&#xA;&#xA;The daily or hourly basis statistic storage also allow the use of the&#xA;CGI script pgcluu.cgi to have dynamic reports and temporal search. See&#xA;&#34;Using dynamic mode&#34; chapter.&#xA;&#xA;When used the --rotate-daily or --rotate-hourly commands line option&#xA;will force pgcluu_collectd to rotate daily or hourly all statistic&#39;s&#xA;files. In this case, statistics files will be created in a subdirectory&#xA;based on rotation frequency, output_dir/year/month/day[/hour]. This is&#xA;called the incremental mode.&#xA;&#xA;To save filesystem space it is possible to enable compression of all&#xA;rotated files during the rotation process. Just activate the -z or&#xA;--compress command line option. You can also use the --retention option&#xA;to set the storage time limit in days.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Capture mode The goal of this mode is to be able to obtain a simple report about the PostgreSQL installation without collected metrics others than database and tablespace size. This report can be use by ITs to better understand the configuration and things that need to be tuned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To enable this mode, just run pgcluu_collectd with the single option -c&#xA;or --capture. Other command line options will not be taken in account.&#xA;pgcluu_collectd will create e temporary directory /tmp/pgcluu_capture to&#xA;store temporary data and will removed if after building a compressed tar&#xA;archive: /tmp/pgcluu_capture.tar.gz. This is this archive that can be&#xA;used with pgcluu to build a snapshot report of the instance. pgcluu will&#xA;automatically detect this mode.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GENERATING REPORTS Static HTML reports To generate a pgCluu report about a PostgreSQL Cluster you must, at least, have a directory that contains all data files generated by pgcluu_collectd or pgstats. In this directory, if you have a file named sar_stats.dat or sadc_stats.dat for binary sadc data file, it will be taken to build report about system utilization. If you just want to make a report from a sar file use the -i or -I options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: pgcluu [options] [-i sar_file | -I sadc_file] [input_dir]&#xA;&#xA;        input_dir: directory where pgcluu_collectd or pgstats and sar data&#xA;                   files are stored.&#xA;&#xA;options: -b, --begin datetime start date/time for the data to be parsed&#xA;(time of current timezone). -C, --cache generate cache files only&#xA;(.bin), no html output. -d, --db-only dbname only report for the whole&#xA;cluster and the given database name. You can use it multiple time or&#xA;give a comma separated list of database name. -D, --device-only dev only&#xA;report I/O stats for a particular device You can use it multiple time or&#xA;give a comma separated list of device name, ex: sda,sdc. -e, --end&#xA;datetime end date/time for the data to be parsed (time of current&#xA;timezone). -i, --sar-file=FILE path to the sar text data file to read to&#xA;generate system reports. Default to input_dir/sar_stats.dat. -I,&#xA;--sadc-file=FILE sadc binary data file to read to generate system&#xA;reports. Default to input_dir/sadc_stats.dat. -n, --top-number Top&#xA;number of tables or indexes I/O stats to show. Default is set to top 10.&#xA;Set it to 0 to show all. -N, --network-only iface only report stats for&#xA;a particular network interface. You can use it multiple times or give a&#xA;comma separated list of network interfaces, ex: eth0,eth1. -o,&#xA;--output=DIR output directory -r, --reverse-date By default pgcluu look&#xA;at mm/dd/yy format in sar file. When enabled pgcluu will look at&#xA;dd/mm/yy format. -s, --sadf=BIN path to the sadf sysstat command used to&#xA;read the sadc binary data file. Default: /usr/bin/sadf. -S,&#xA;--disable-sar disable collect of system statistics with sar. -t,&#xA;--with-table table Only report for the whole tables and the given table&#xA;name. You can use it multiple time or give a comma separated list of&#xA;database name. -T, --no-table Do not report statistics related to&#xA;tables. -v, --verbose Print out debug informations. -V, --version Show&#xA;pgcluu version and exit. -x, --external-menu Save menu in menu.html and&#xA;load it into each report using w3-include-html attribut from w3.js. This&#xA;will only work if acces to HTML reports is through a Web server, not&#xA;using the file:// protocol. -z, --timezone +/-XX Set the number of&#xA;hour(s) from GMT of the timezone, Eg: -z +02 Usually autodetected. Use&#xA;this to adjust date/time from the sar output, pgcluu use GMT time to&#xA;draw charts. -Z, --stats-timezone +/-XX Set the number of hour(s) from&#xA;GMT of the timezone. Eg: -Z +02 Usually autodetected. Use this to adjust&#xA;date/time from the cluster and system stats output, pgcluu use GMT time.&#xA;--from-sa-file instruct pgcluu that file specified by the -i option uses&#xA;the standard system activity daily data file. --charset used to set the&#xA;HTML charset to be used. Default: utf-8. --retention NDAYS number of&#xA;rolling days to keep in report directory. Default is to store&#xA;indefinitely. --help print usage&#xA;&#xA;For example, you can generate all HTML reports from data files stored&#xA;into /tmp/stat_db1/ with the following commands:&#xA;&#xA;        mkdir /tmp/report_db1/&#xA;        pgcluu -o /tmp/report_db1/ /tmp/stat_db1/&#xA;&#xA;If you just want reports of some databases, use the following:&#xA;&#xA;        pgcluu -o /tmp/report_db1/ /tmp/stat_db1/ --db-only &#34;db1,db2,db3&#34;&#xA;&#xA;If you just want to create a report from a sar output file:&#xA;&#xA;        sar -p -A 10 60 &amp;gt; /root/my_sar_file.txt&#xA;        pgcluu -o /tmp/report_sar/ -i /root/my_sar_file.txt&#xA;&#xA;or from a daily sa file:&#xA;&#xA;        sar -p -A -f /var/log/sa/sa18 &amp;gt; /root/my_sar_file.txt&#xA;        pgcluu -o /tmp/report_sar/ -i /root/my_sar_file.txt --from-sa-file&#xA;&#xA;and from a sa binary file:&#xA;&#xA;        pgcluu -o /tmp/report_sar/ -i /var/log/sysstat/sa22&#xA;&#xA;or the sa text file if you don&#39;t have the same version of sysstat:&#xA;&#xA;        pgcluu -o /tmp/report_sar/ -i /var/log/sysstat/sar23 --from-sa-file&#xA;&#xA;If pgcluu_collectd have been run in incremental mode you can limit the&#xA;number of retention days used for the reports:&#xA;&#xA;        pgcluu -o /tmp/report_sar/ /tmp/stat_db1/ --retention 30&#xA;&#xA;A static report will be built for each day or hour following the&#xA;rotation used with pgcluu_collectd.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dynamic reports (CGI) Dynamics reports are build by a CGI script named pgcluu.cgi that can be found in the cgi-bin repository of the source code. It allow you to select the time period to build reports and to look at all differents reports for this period just as with static HTML reports. After installation from sources or binary packages the CGI might be found in /usr/lib/cgi-bin/pgcluu.cgi or /var/www/cgi-bin/pgcluu.cgi following your distribution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To use pgCluu in CGI mode, you need a Web server (here we use Apache)&#xA;and a cron task to build the cache periodically.&#xA;&#xA;First enable CGI mode.&#xA;&#xA;        sudo a2enmod cgi&#xA;        sudo service apache2 restart&#xA;&#xA;Then the CGI need to find the statistics directory where pgcluu_collectd&#xA;mostly /var/lib/pgcluu/data/. The content of this repository must be&#xA;readable by the Apache user (www-data).&#xA;&#xA;Take care to restrict access to your server and the CGI as information&#xA;about your database and server are exposed in the reports.&#xA;&#xA;The CGI script, pgcluu.cgi, use resources files (CSS and javascript).&#xA;They are stored in the cgi-bin/rsc/ directory of the source&#xA;distribution. Install this repository onto the DocumentRoot of your Web&#xA;server, for example:&#xA;&#xA;        sudo mkdir /var/www/pgcluu/&#xA;        sudo cp -rf cgi-bin/rsc /var/www/pgcluu/&#xA;&#xA;Then edit /etc/pgcluu.conf, copy it from sources cgi-bin/pgcluu.conf if&#xA;it doesn&#39;t exists. Change the RSC_BASE and INPUT_DIR configuration&#xA;directive to match your installation. Here in our example:&#xA;&#xA;        RSC_BASE        /pgcluu/rsc/&#xA;        INPUT_DIR       /var/lib/pgcluu/data&#xA;&#xA;Now we can start the data collection. For the moment pgcluu.conf is only&#xA;read by the CGI pgcluu.cgi but this might change in the future.&#xA;&#xA;To let pgCluu start collecting data, you can use the following command&#xA;(you can change it to however you like). We will need postgres user for&#xA;this.&#xA;&#xA;        sudo su - postgres&#xA;        /usr/local/bin/pgcluu_collectd -D -i 60 --rotate-daily /var/lib/pgcluu/data&#xA;&#xA;This will rotate you data daily. This is also the default in the systemd&#xA;service file.&#xA;&#xA;Plugging the CGI directly to the CSV statistics files will result in&#xA;very slow generation reports. To improve speed caching must be used, you&#xA;must execute periodically pgcluu in cache mode. Run it manually the&#xA;first time&#xA;&#xA;        /usr/local/bin/pgcluu --cache /var/lib/pgcluu/data&#xA;&#xA;then add a cron task to execute the command each five or ten minutes:&#xA;&#xA;        */5 * * * * /usr/local/bin/pgcluu --cache /var/lib/pgcluu/data&#xA;&#xA;If you are using systemd pgcluu.timer service then caching can be&#xA;enabled using STATS_REPORT_CACHING directive. Enabling this mode&#xA;generate cache files (*.bin) in the statistics directory and disable&#xA;static HTML reports generation.&#xA;&#xA;To see your reports, go to the following URL:&#xA;&#xA;        http://localhost/cgi-bin/pgcluu.cgi&#xA;&#xA;Or change localhost by your fqdn server name.&#xA;&#xA;Note that here pgcluu_collectd and pgcluu scripts are found in&#xA;/usr/local/bin/ which is the default for an installation from sources&#xA;but with an installation from binary package you might find them into&#xA;/usr/bin/.&#xA;&#xA;The CGI mode allow you to select the period of time used to generate the&#xA;statistics reports. Using default pgcluu_collectd 60 seconds interval, a&#xA;daily graph will have 1440 points. Having too much timeseries to render&#xA;is not a good point for performances so we are limiting to the first&#xA;seven days of the selected period. This mean a maximum of 10080 points&#xA;for one week, this seems a safe limit. Feel free to increase or reduce&#xA;the limit following the server and client resources. This is controlled&#xA;by&#xA;&#xA;        MAX_RENDERED_DAYS       7&#xA;&#xA;configuration directive in pgcluu.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LICENSE Copyright (c) 2012-2024, Gilles Darold&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgCluu is licenced under the PostgreSQL Licence a liberal Open Source&#xA;license, similar to the BSD or MIT licenses. That mean that all parts of&#xA;the program are open source and free of charge.&#xA;&#xA;        Permission to use, copy, modify, and distribute this software and its&#xA;        documentation for any purpose, without fee, and without a written agreement&#xA;        is hereby granted, provided that the above copyright notice and this&#xA;        paragraph and the following two paragraphs appear in all copies.&#xA;&#xA;        IN NO EVENT SHALL Dalibo BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,&#xA;        SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,&#xA;        ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#xA;        Dalibo HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#xA;&#xA;        Gilles Darold SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT&#xA;        LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#xA;        PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN &#34;AS IS&#34; BASIS,&#xA;        AND Gilles Darold HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,&#xA;        UPDATES, ENHANCEMENTS, OR MODIFICATIONS.&#xA;&#xA;This is the case for both, pgcluu_collectd and the grapher pgcluu&#xA;programs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AUTHORS pgCluu is an original development of Gilles Darold.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Some parts of the collector are taken from pgstats a C program writen by&#xA;Guillaume Lelarge and especially the SQL queries including the&#xA;compatibility with all PostgreSQL versions. See&#xA;https://github.com/gleu/pgstats&#xA;&#xA;Btw pgCluu grapher is compatible with files generated by pgstats, sar&#xA;and sadc so you can use it independantly to graph those data. Some part&#xA;of the sar output parser are taken from SysUsage. See&#xA;http://sysusage.darold.net/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>