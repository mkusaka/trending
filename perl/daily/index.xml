<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-15T01:41:42Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hewm2008/NGenomeSyn</title>
    <updated>2023-03-15T01:41:42Z</updated>
    <id>tag:github.com,2023-03-15:/hewm2008/NGenomeSyn</id>
    <link href="https://github.com/hewm2008/NGenomeSyn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Any Way to Show Multi genomic Synteny&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NGenomeSyn&lt;/h1&gt; &#xA;&lt;p&gt;An easy-to-use and flexible tool for publication-ready visualization of syntenic relationships on multiple genomes&lt;/p&gt; &#xA;&lt;p&gt;The &lt;i&gt;&lt;b&gt;&lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btad121&#34;&gt;NGenomeSyn article&lt;/a&gt;&lt;/b&gt;&lt;/i&gt; has been published in &lt;b&gt; &lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btad121&#34;&gt;Bioinformatics&lt;/a&gt; Journal&lt;/b&gt;, please cited this article if possible&lt;/p&gt; &#xA;&lt;p&gt;PMID: &lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/36883694/&#34;&gt;36883694&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DOI:&lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btad121&#34;&gt;10.1093/bioinformatics/btad121&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1 Introduction&lt;/h3&gt; &#xA;&lt;p&gt;&lt;b&gt;NGenomeSyn&lt;/b&gt;, an easy-to-use and flexible tool, for publication-quality visualization of syntenic relationships (user-defined or generated by our custom script) and genomic features (e.g. repeats, structural variations, genes) on tens of genomes with high customization. NGenomeSyn allows its user to adjust default options for genome and link styles defined in the configuration file and simply adjusts options of moving, scaling, and rotation of target genomes, yielding a rich layout and publication-ready figure. A state-to-the-art figure enables users and readers to quickly catch key points hidden in the large-amount data at a galance. Moreover, NGenomeSyn could be applied on the visualization of relationships among other data with a similar input format (similar to sankey diagram).&lt;/p&gt; &#xA;&lt;p&gt;In addition, &lt;b&gt;NGenomeSyn&lt;/b&gt; has been cited to visualize genome synteny or other relationship by &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S2590346222002590&#34;&gt;Yin X et al 2022&lt;/a&gt; , &lt;a href=&#34;https://doi.org/10.1016/j.molp.2022.05.014&#34;&gt;X Hou et al 2022&lt;/a&gt;, &lt;a href=&#34;https://www.nature.com/articles/s41467-022-33515-2&#34;&gt;J Guan et al 2022&lt;/a&gt;, &lt;a href=&#34;https://www.nature.com/articles/s41597-022-01783-8&#34;&gt;lian xu et 2022&lt;/a&gt;, &lt;a href=&#34;https://www.frontiersin.org/articles/10.3389/fpls.2023.1124046/full&#34;&gt;G Cheng et al 2023&lt;/a&gt; ect&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;The advantages of this tool include&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tens of customizable genomes (&amp;gt;=2)&lt;/li&gt; &#xA; &lt;li&gt;flexible and customizable layout&lt;/li&gt; &#xA; &lt;li&gt;high customization for order, colors or other settings for each genome&lt;/li&gt; &#xA; &lt;li&gt;allow setting for movement, rotation, scaling etc for each genome, which could generate particular layouts, such as triangle, quadrangle, pentagon etc&lt;/li&gt; &#xA; &lt;li&gt;high customization for color, transparency etc for link information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;2 Download and Install&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;b&gt;new version&lt;/b&gt; will be updated and maintained in &lt;b&gt;&lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn&#34;&gt;hewm2008/NGenomeSyn&lt;/a&gt;&lt;/b&gt;, please click below website to download the latest version &lt;br&gt;&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;&lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn&#34;&gt;hewm2008/NGenomeSyn&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;linux/MaxOS&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn/archive/v1.41.tar.gz&#34;&gt;Download&lt;/a&gt;&lt;/b&gt; &lt;br&gt;&lt;b&gt;Install&lt;/b&gt; &lt;br&gt; &lt;b&gt;2.2 Pre-install&lt;/b&gt; &lt;br&gt; The prerequisites for NGenomeSyn include &lt;br&gt; 1) &lt;a href=&#34;https://www.perl.org/&#34;&gt;Perl&lt;/a&gt; with the &lt;a href=&#34;https://metacpan.org/release/SVG&#34;&gt;SVG.pm&lt;/a&gt; in Perl should be installed.(Note: SVG module is optional because related modules have been included in &lt;a href=&#34;&#34;&gt;bin/svg-kit&lt;/a&gt; directory) &lt;br&gt; 2) &lt;a href=&#34;https://linux.die.net/man/1/convert&#34;&gt;convert&lt;/a&gt; is recommended to be pre-installed if requiered converting &lt;code&gt;svg&lt;/code&gt; to &lt;code&gt;png&lt;/code&gt; image format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;Users can install it with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;        git clone https://github.com/hewm2008/NGenomeSyn.git&#xA;        cd NGenomeSyn;&#x9;chmod -R 755 bin/*&#xA;        ./bin/NGenomeSyn  -h &#xA;&lt;/pre&gt; &#xA;&lt;h3&gt;3 Parameter description&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;b&gt;3.1 NGenomeSyn&lt;/b&gt; &lt;br&gt;&lt;b&gt;3.1.1 Main parameter&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;        Usage: NGenomeSyn  -InConf  in.conf -OutPut OUT&#xA;&#xA;                -InConf      &amp;lt;s&amp;gt; : InPut Configuration File&#xA;                -OutPut      &amp;lt;s&amp;gt; : OutPut svg file result&#xA;&#xA;                -help              See more help *Manual.pdf&#xA;                                   [hewm2008 v1.41]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;br&gt;Comments: we also provide a custom perl script &lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/bin/GetTwoGenomeSyn.pl&#34;&gt;bin/GetTwoGenomeSyn.pl&lt;/a&gt; for link preparation information (see &lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example1/run2.sh&#34;&gt;exmaple1/run2.sh&lt;/a&gt;) &lt;br&gt; &lt;br&gt;See more detailed usage in the&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;b&gt;&lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/NGenomeSyn_manual_Chinese.pdf&#34;&gt;Chinese Documentation&lt;/a&gt;&lt;/b&gt; &lt;br&gt;See more detailed usage in the&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;b&gt;&lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/NGenomeSyn_manual_English.pdf&#34;&gt;English Documentation&lt;/a&gt;&lt;/b&gt; &lt;br&gt;See the &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;b&gt;&lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn/tree/main/Example&#34;&gt;Example Directory&lt;/a&gt;&lt;/b&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; and for more details. such as : input file format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;b&gt;3.1.2 Other parameters&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;###  # Detailed parameters please see  at the  NGenomeSyn_manual_English.pdf &#xA;&#xA;SetParaFor = global&#xA;########## global and required parameters ######&#xA;GenomeInfoFile1=./RefA.len ### set path for Genome1, GenomeInfoFileX, X is the number of Genome&#xA;GenomeInfoFile2=./RefB.len ### set path for Genome2, Format(chr start End ...)&#xA;&#xA;LinkFileRef1VsRef2=./RefA_RefB.link ### link information between Genome1 and Genome2&#xA;                                    ### LinkFileRefXXVsRefYY : link info between GenomeXX and GenomeYY&#xA;                                    ### Format (chrA StartA EndA chrB StartB EndB ...&#xA;&#xA;&#xA;############ canvas and figure[optional] ######&#xA;#body=1200                 ### size of canvas with width and height. plot region:  (up/down/left/right)=(55,25,100,120)&#xA;#up=55&#xA;#down=25&#xA;#left=100&#xA;#right=120&#xA;#CanvasHeightRitao=1.0     ## adjust height of the plot&#xA;#CanvasWidthRitao=1.0      ## adjust width of the plot&#xA;#NoPng=1                   ## No OutPut the png File&#xA;&#xA;&#xA;############# adjust genome setting [optional]##########&#xA;SetParaFor = Genome1       ## GenomeALL/GenomeX&#xA;#ZoomChr=1.0               ## adjust chr length, 1 for equal; &amp;gt;1 for enlarge; &amp;lt;1  for&#xA;#RotateChr=30              ## rotate the chr with 30 degrees&#xA;#ShiftX=0&#xA;#ShiftY=0                  ## move the start of chr to (X,Y)&#xA;#MoveToX                   ## MoveToY   ## similar to ShiftX and ShiftY&#xA;&#xA;&#xA;#ChrWidth=20               ## chr width&#xA;#LinkWidth=180             ## link height between this genome and next genome&#xA;#ChrSpacing=10             ## spacing width of chr/scaffolds&#xA;#NormalizedScale=0         ## custom scale for the geome relative the  default.&#xA;#SpeRegionFile=Spe.bed     ## input file for highlighted regions[chr start end key1=value1] in the genome.&#xA;#ZoomRegion                ## Zoom the specific Region,format (ZoomRegion=chr2:1000:5000)&#xA;&#xA;&#xA;#GenomeNameRatio&#xA;#GenomeName&#xA;## GenomeName  GenomeNameSizeRatio  GenomeNameColor  GenomeNameShiftX GenomeNameShiftY&#xA;## ChrNameShow ChrNameShiftX ChrNameShiftY ChrNameSizeRatio ChrNameColor ChrNameRotate&#xA;## ShowCoordinates=1     ## Show Coordinates with other para [ScaleNum=10 ScaleUpDown ScaleUnit LabelUnit  LablefontsizeRatio  RotateAxisText NoShowLabel ]&#xA;&#xA;&#xA;SetParaFor = Genome2       ##&#xA;&#xA;############# adjust link setting [optional]##########&#xA;SetParaFor=Link1           ### LinkALL/LinkX  setting for link X&#xA;#StyleUpDown=UpDown        ## UpDown DownUp UpUp DownDown line&#xA;#Reverse=1                 ## reverse links&#xA;#HeightRatio=1.0           ## ratio of link height relative to the default&#xA;## other attributes:  fill|stroke|stroke-opacity|fill-opacity|stroke-width&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;b&gt;3.2 Output files&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;out.svg: Output plot in SVG format&#xA;out.png: Output plot in png format # convert should be installed&#xA;&lt;/pre&gt; &#xA;&lt;h3&gt;4 Examples&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;br&gt; ## directory [&lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn/tree/main/Example&#34;&gt;Example/example*/&lt;/a&gt;] has input and output file and script usage. &lt;br&gt;&lt;br&gt; ../../bin/NGenomeSyn -InConf in.conf -OutPut OUT &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;i&gt;&lt;b&gt;example1&lt;/b&gt;&lt;/i&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An integrating &lt;b&gt;pipeline&lt;/b&gt; including data preparation and visualizing of two genomes for the simplest usage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;i&gt;&lt;b&gt;example2&lt;/b&gt;&lt;/i&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Horizontal layout of 3 or more genomes, genome layout adjustment and special region &lt;b&gt;highlight&lt;/b&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;i&gt;&lt;b&gt;example3 &lt;/b&gt;&lt;/i&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Link settings, five link styles, genome layout adjustment for particular shape (triangle)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;i&gt;&lt;b&gt;example4&lt;/b&gt;&lt;/i&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;ZoomRegion&lt;/b&gt; function of local &lt;b&gt;gene structure&lt;/b&gt;(CDS mRNA) collinearity&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;i&gt;&lt;b&gt;example5&lt;/b&gt;&lt;/i&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The comprehensive configuration for horizontal layout of more than three genomes (&amp;gt;3)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;i&gt;&lt;b&gt;example6&lt;/b&gt;&lt;/i&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quick identification of genetic deletion in some breeds (pan-genome frequently analysis) to &lt;b&gt;solve biological issues&lt;/b&gt; problems&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Example 1)two genomes &lt;br&gt;For the simplest usage, only two genomic locus files and link file are required to be provided(Minimap2). &lt;br&gt;the Minimap2 genome method &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example1/Minimap2.png&#34; alt=&#34;Minimap2.png&#34;&gt; &lt;br&gt;the MCScanX gene method &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example1/MCScanX.png&#34; alt=&#34;MCScanX.png&#34;&gt; &lt;br&gt;Also the link file can be provided by &lt;a href=&#34;https://schneebergerlab.github.io/syri/&#34;&gt;syri&lt;/a&gt;, see the run3.sh &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example1/Syri.png&#34; alt=&#34;Syri.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Example 2) Horizontal layout of 3 or more genomes&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example2/OUT1.png&#34; alt=&#34;out.png&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example 2)Horizontal layout of 3 or more genomes with rotation of the third genome&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example2/OUT2.png&#34; alt=&#34;out.png&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Example 2)move the three genomes MoveX Y to the middle of the canvas, and rotate the genomes at -135, -45 and 90 degrees respectively. &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example2/OUT3.png&#34; alt=&#34;out3.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Example 3)any layout of three genomes for link setting &lt;br&gt; trilateral layout :Five link styles were designed in this tools, &#34;DownDown&#34;, &#34;UpUp&#34;, &#34;DownUp&#34;,&#34;UpDown&#34;,&#34;line&#34;. &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example3/OUT1.png&#34; alt=&#34;out.png&#34;&gt; &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example3/OUT3.png&#34; alt=&#34;out.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Example 4) publication-ready and flexible layout for multiple genomes &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example4/OUT.png&#34; alt=&#34;out.png&#34;&gt; &lt;br&gt; we could generate a similar figure presented by &lt;a href=&#34;https://onlinelibrary.wiley.com/doi/10.1111/jipb.13217&#34;&gt;Zheng et al&lt;/a&gt; as follows &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example4/PMID34990066Fig2.png&#34; alt=&#34;out.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Example 5) local synteny in gene structure and ZoomRegion &lt;br&gt;we provide a parameter (SpeRegionWidthRatio) for controlling width of SpeRegion, supporting highlight gene structures (e.g. CDS, UTR etc) &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example5/OUT1.png&#34; alt=&#34;out.png&#34;&gt; &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example5/OUT2.png&#34; alt=&#34;out.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Example 6) practical application (solve biological issues) &lt;br&gt; In the pan-genome study, multiple genomes are de novo assembled from different individuals (accessions) independently, and it is often important to identify genetic structural variation (insertion and deletion) of different individuals (accessions) in a certain region to investigate whether link genetic variations to candidate genes that are responsible for important traits. The following example is an identification of some structural variations (insertion, deletion) in several rice accessions compared to the chromosome 12 of the reference rice genome (&#34;IRGSP&#34;). For example, a segment insertion occurs in the accessions of &#34;9311&#34; and &#34;ZH11&#34;. &lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/example6/OUT.png&#34; alt=&#34;out.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;br&gt; In fact, NGenomeSyn is not only designed for the visualization of genomic synteny and genomic features, but also for other relationships among any data with a similar input format. For example, a user (&lt;a href=&#34;https://www.nature.com/articles/s41597-022-01783-8&#34;&gt;lian xu et 2022&lt;/a&gt;) used NGenomeSyn for visualization clusters with similar gene expression patterns (generated by Mfuzz software) between other four datasets and the reference dataset and revealed conserved expression patterns of differential expression genes among different datasets.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/hewm2008/NGenomeSyn/raw/main/Example/RealData/Other/realityData.png&#34; alt=&#34;realityData.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5 Citation&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;please cited this &lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btad121&#34;&gt;article&lt;/a&gt; if possible &lt;br&gt;Weiming He, Jian Yang, Yi Jing, Lian Xu, Kang Yu, Xiaodong Fang, NGenomeSyn: an easy-to-use and flexible tool for publication-ready visualization of syntenic relationships across multiple genomes, Bioinformatics, 2023;, btad121, &lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btad121&#34;&gt;https://doi.org/10.1093/bioinformatics/btad121&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;6 Contact&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hewm2008/NGenomeSyn&#34;&gt;&lt;span&gt;📧&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;mailto:hewm2008@gmail.com&#34;&gt;hewm2008@gmail.com&lt;/a&gt; / &lt;a href=&#34;mailto:hewm2008@qq.com&#34;&gt;hewm2008@qq.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;join the&lt;b&gt;&lt;i&gt; QQ Group : 125293663&lt;/i&gt;&lt;/b&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;######################swimming in the sky and flying in the sea #############################&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mfs/husk</title>
    <updated>2023-03-15T01:41:42Z</updated>
    <id>tag:github.com,2023-03-15:/mfs/husk</id>
    <link href="https://github.com/mfs/husk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iptables firewall compiler&lt;/p&gt;&lt;hr&gt;&lt;p&gt;husk %VERSION% &lt;a href=&#34;http://www.huskfw.info&#34;&gt;http://www.huskfw.info&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;husk is a natural language wrapper around the Linux iptables packet filtering. It is designed to abstract the sometimes confusing syntax of iptables into a format that is easier and friendlier to read and understand.&lt;/p&gt; &#xA;&lt;p&gt;husk can be used on either firewall/router computers (with multiple network interfaces), or standalone systems (with one network interface)&lt;/p&gt; &#xA;&lt;p&gt;Each interface (real or virtual) is called a &#39;zone&#39; in husk. Zones are given a friendly name which is what is used in the rule definitions. This abstracts the Linux device names (eg, eth0, ppp0, bond0 etc) into much more intuitive names such as NET, LAN and DMZ. This has the added benefit of moving interfaces in the future can be done simply by changing the name-to-device mapping.&lt;/p&gt; &#xA;&lt;p&gt;===============================================================================&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;INSTALLATION.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Husk can be installed using standard &#39;make&#39; commands. You must be root to install correctly.&lt;/p&gt; &#xA;&lt;p&gt;Install everything: make all&lt;/p&gt; &#xA;&lt;p&gt;Install only the script: make bin&lt;/p&gt; &#xA;&lt;p&gt;Install only the docs: make docs&lt;/p&gt; &#xA;&lt;p&gt;Install only the configuration examples: make config&lt;/p&gt; &#xA;&lt;p&gt;Uninstallation is also catered for: make uninstall&lt;/p&gt; &#xA;&lt;p&gt;===============================================================================&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SETUP.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, give your interfaces friendly names in the file &#39;interfaces.conf&#39;. An example file might look like: zone ME is lo zone NET is eth0 zone LAN is eth1 zone DMZ is eth2 I recommend simple 3 letter friendly names for your zones.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT NOTE: loopback (&#39;lo&#39;) &lt;em&gt;must&lt;/em&gt; be called the special name &#39;ME&#39;.&lt;/p&gt; &#xA;&lt;p&gt;===============================================================================&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;WRITING RULES.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;===============================================================================&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Common Firewalling husk has built-in &#39;common&#39; firewall rules, prefixed with the keyword &#39;common&#39; NAT: common nat ZONE Apply a Source NAT to traffic going out ZONE, usually &#39;NET&#39; eg: common nat NET SPOOF: common spoof ZONE ADDRESS/PREFIX Prevent address spoofing on the specified ZONE. ADDRESS/PREFIX defines the addresses that are expected to be seen on the given ZONE. You can add multiple &#39;spoof&#39; rules per interface. eg: common spoof LAN 10.0.0.0/24 common spoof LAN 10.0.1.0/24 common spoof DMZ 192.168.100.0/29 BOGON: common bogon ZONE Block bogon traffic on the specified ZONE. Bogon traffic is packets with source addresses that should never be seen outside private networks such as RFC1918 addresses, 127.0.0.0/8 etc. PORTSCAN: common portscan ZONE Attempt to detect, log and drop portscans coming from the given zone. This is only rudimentary, but it&#39;s better than nothing. XMAS: common xmas ZONE Block xmas packets on the specified ZONE. Xmas packets are packets with all flags set, or the packet &#34;is lit up like a Christmas tree&#34; SYN: common syn All packets that the kernel detects as belonging to a &#34;NEW&#34; connection should have the &#34;SYN&#34; flag set. If they don&#39;t, then we DROP them. LOOPBACK: common loopback Create a rule to accept traffic in/out the &#39;lo&#39; interface&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;=============================================================================== 2. define rules ZONE to ZONE Traffic passing between zones is known as cross-zone traffic - eg LAN to NET Defining rules for this cross-zone traffic is done in a &#39;define rules&#39; block: define rules LAN to NET &#xA; &lt;rules go here&gt;&#xA;   end define&#xA; &lt;/rules&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is a special in-built interface called &#39;ANY&#39; which as the name suggests. allows you to write a match calls that ignores one (or both) of the IN and OUT interfaces. For example:&lt;/p&gt; &#xA;&lt;p&gt;Allow the whole world to access Secure POP3 on our mail server. define rules ANY to DMZ accept protocol tcp port pop3s destination address mail.example.com end define&lt;/p&gt; &#xA;&lt;p&gt;This is effectively the same as the FORWARD table, but only NEW connections are passed through here: define rules ANY to ANY accept protocol tcp port 873 # rsync anywhere is fine end define&lt;/p&gt; &#xA;&lt;p&gt;NOTE: &#39;ANY&#39; &lt;em&gt;excludes&lt;/em&gt; the other interface to avoid bounce routing issues. So a match calls for &#39;ANY to LAN&#39; doesn&#39;t include traffic &#39;LAN to LAN&#39;. If you need to allow bounce routing, then add a rule such as: define rules FORWARD accept incoming LAN outgoing LAN accept incoming DMZ outgoing DMZ &#xA; &lt;etc&gt;&#xA;   end define&#xA; &lt;/etc&gt;&lt;/p&gt; &#xA;&lt;p&gt;=============================================================================== 3. define rules &#xA; &lt;user defined&gt;&#xA;   You can create your own user-defined chains (UDC) using &#39;define rules&#39; block. These user-defined chains can then be called from cross-zone blocks. define rules SMB_PORTS &#xA;  &lt;rules go here&gt;&#xA;    end define&#xA;  &lt;/rules&gt;&#xA; &lt;/user&gt;&lt;/p&gt; &#xA;&lt;p&gt;=============================================================================== 4. define rules (INPUT|OUTPUT|FORWARD) To add rules to the standard iptables filter table chains (INPUT, FORWARD and OUTPUT), write a &#39;define rules&#39; UDC block for the appropriate chain: define rules INPUT &#xA; &lt;rules go here&gt;&#xA;   end define&#xA; &lt;/rules&gt;&lt;/p&gt; &#xA;&lt;p&gt;=============================================================================== 5. Rule Keywords Example rules are below. I think this will be the easiest way to explain the keywords and functions of husk. All keywords can be mixed and matched to suit the rule(s) you require.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;accept source address 192.168.100.100&#xA;    Accept anything from source address 192.168.100.100&#xA;&#xA;accept proto tcp port http destination address google.com.au&#xA;    Allow TCP port 80 to whatever &#39;google.com.au&#39; resolves to via DNS.&#xA;&#xA;accept proto tcp ports http,https source range 192.168.0.1 to 192.168.0.10&#xA;    Allow any TCP port 80 and 443 traffic from addresses .1 to .10&#xA;&#xA;accept mac 00:14:22:d8:f9:55&#xA;    Anything from the given MAC Address is allowed.&#xA;&#xA;reject source address 169.254.53.0/24&#xA;    Reject with ICMP unreachable packet any traffic from the given IP&#xA;&#xA;SMB_PORTS destination address 192.168.1.100&#xA;    Jump to the user-defined chain &#34;SMB_PORTS&#34; for traffic to 192.168.1.100&#xA;&#xA;accept all&#xA;    Accept everything.&#xA;&#xA;accept proto icmp type echo-request limit 4/sec burst 8&#xA;    Allow 4 ICMP &#39;echo-request&#39; packets per second, bursting to 8pps&#xA;&#xA;accept proto icmp type echo-reply limit 4/sec burst 12&#xA;    Allow 4 ICMP &#39;echo-reply&#39; packets per second, bursting to 12pps&#xA;&#xA;drop&#xA;    Just drop all packets.&#xA;&#xA;accept in LAN protocol icmp&#xA;    Accept any icmp packets that come in the LAN interface.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=============================================================================== 6. Port Forwarding (DNAT) If you need to forward incoming traffic from one interface to another using the NAT feature of the kernel, you can use the &#39;map&#39; rule. For example, to NAT port 80 traffic coming in the &#34;NET&#34; interface to an internal server: map in NET destination address protocol tcp port 80 74.132.12.56 to 172.16.1.1&lt;/p&gt; &#xA;&lt;p&gt;You can also translate the ports from one to another by appending to the destination address: map in NET destination address 74.132.12.56:80 to 172.16.1.1:8080&lt;/p&gt; &#xA;&lt;p&gt;=============================================================================== 7. Intercepting / Redirection Using the &#39;trap&#39; or &#39;redirect&#39; keyword, you can silently redirect traffic to the local computer. This is useful for example to intercept all outgoing SMTP traffic to force it through the local SMTP gateway: trap in LAN protocol tcp port 25&lt;/p&gt; &#xA;&lt;p&gt;Redirecting to alternative ports is also possible: redirect incoming NET protocol tcp port 80 to 8080 redirect incoming NET protocol tcp port 2222 to 22&lt;/p&gt; &#xA;&lt;p&gt;=============================================================================== 8. Raw iptables rules Directly writing iptables rules is also supported for putting your own rules in using iptables syntax: iptables -t raw -A OUTPUT -d 10.0.0.0/8 -j NOTRACK&lt;/p&gt; &#xA;&lt;p&gt;=============================================================================== 9. Includes If your ruleset is complicated, you can spread the rules over multiple files then consoldate them all together at compile time by using the &#39;include&#39; keyword: include outbound.rules include inbound.rules&lt;/p&gt; &#xA;&lt;p&gt;Includes can be either relative paths (to the conf dir) or absolute paths. You should be able to nest indefintiely, but be careful not to create loops such as: [rule-one.conf] include rules-two.conf&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[rules-two.conf]&#xA;include rules-one.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is NO PROTECTION against this.&lt;/p&gt; &#xA;&lt;p&gt;===============================================================================&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;COPYRIGHT and LICENSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;husk is Copyright 2010 Phillip Smith &amp;lt;fukawi2 (at) gmail (dot) com&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>