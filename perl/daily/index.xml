<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-29T01:37:11Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rurban/List-MoreUtils</title>
    <updated>2022-09-29T01:37:11Z</updated>
    <id>tag:github.com,2022-09-29:/rurban/List-MoreUtils</id>
    <link href="https://github.com/rurban/List-MoreUtils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Perl module implementing the utilities not found in List::Util.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;List::MoreUtils - Provide the stuff missing in List::Util&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;# import specific functions&#xA;&#xA;use List::MoreUtils qw(any uniq);&#xA;&#xA;if ( any { /foo/ } uniq @has_duplicates ) {&#xA;    # do stuff&#xA;}&#xA;&#xA;# import everything&#xA;&#xA;use List::MoreUtils &#39;:all&#39;;&#xA;&#xA;# import by API&#xA;&#xA;# has &#34;original&#34; any/all/none/notall behavior&#xA;use List::MoreUtils &#39;:like_0.22&#39;;&#xA;# 0.22 + bsearch&#xA;use List::MoreUtils &#39;:like_0.24&#39;;&#xA;# has &#34;simplified&#34; any/all/none/notall behavior + (n)sort_by&#xA;use List::MoreUtils &#39;:like_0.33&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;List::MoreUtils&lt;/strong&gt; provides some trivial but commonly needed functionality on lists which is not going to go into &lt;a href=&#34;https://metacpan.org/pod/List::Util&#34;&gt;List::Util&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All of the below functions are implementable in only a couple of lines of Perl code. Using the functions from this module however should give slightly better performance as everything is implemented in C. The pure-Perl implementation of these functions only serves as a fallback in case the C portions of this module couldn&#39;t be compiled on this machine.&lt;/p&gt; &#xA;&lt;h1&gt;EXPORTS&lt;/h1&gt; &#xA;&lt;h2&gt;Default behavior&lt;/h2&gt; &#xA;&lt;p&gt;Nothing by default. To import all of this module&#39;s symbols use the &lt;code&gt;:all&lt;/code&gt; tag. Otherwise functions can be imported by name as usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use List::MoreUtils &#39;:all&#39;;&#xA;&#xA;use List::MoreUtils qw{ any firstidx };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because historical changes to the API might make upgrading List::MoreUtils difficult for some projects, the legacy API is available via special import tags.&lt;/p&gt; &#xA;&lt;h2&gt;Like version 0.22 (last release with original API)&lt;/h2&gt; &#xA;&lt;p&gt;This API was available from 2006 to 2009, returning undef for empty lists on &lt;code&gt;all&lt;/code&gt;/&lt;code&gt;any&lt;/code&gt;/&lt;code&gt;none&lt;/code&gt;/&lt;code&gt;notall&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use List::MoreUtils &#39;:like_0.22&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This import tag will import all functions available as of version 0.22. However, it will import &lt;code&gt;any_u&lt;/code&gt; as &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;all_u&lt;/code&gt; as &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none_u&lt;/code&gt; as &lt;code&gt;none&lt;/code&gt;, and &lt;code&gt;notall_u&lt;/code&gt; as &lt;code&gt;notall&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Like version 0.24 (first incompatible change)&lt;/h2&gt; &#xA;&lt;p&gt;This API was available from 2010 to 2011. It changed the return value of &lt;code&gt;none&lt;/code&gt; and added the &lt;code&gt;bsearch&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use List::MoreUtils &#39;:like_0.24&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This import tag will import all functions available as of version 0.24. However it will import &lt;code&gt;any_u&lt;/code&gt; as &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;all_u&lt;/code&gt; as &lt;code&gt;all&lt;/code&gt;, and &lt;code&gt;notall_u&lt;/code&gt; as &lt;code&gt;notall&lt;/code&gt;. It will import &lt;code&gt;none&lt;/code&gt; as described in the documentation below (true for empty list).&lt;/p&gt; &#xA;&lt;h2&gt;Like version 0.33 (second incompatible change)&lt;/h2&gt; &#xA;&lt;p&gt;This API was available from 2011 to 2014. It is widely used in several CPAN modules and thus it&#39;s closest to the current API. It changed the return values of &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;, and &lt;code&gt;notall&lt;/code&gt;. It added the &lt;code&gt;sort_by&lt;/code&gt; and &lt;code&gt;nsort_by&lt;/code&gt; functions and the &lt;code&gt;distinct&lt;/code&gt; alias for &lt;code&gt;uniq&lt;/code&gt;. It omitted &lt;code&gt;bsearch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use List::MoreUtils &#39;:like_0.33&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This import tag will import all functions available as of version 0.33. Note: it will not import &lt;code&gt;bsearch&lt;/code&gt; for consistency with the 0.33 API.&lt;/p&gt; &#xA;&lt;h1&gt;FUNCTIONS&lt;/h1&gt; &#xA;&lt;h2&gt;Junctions&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;em&gt;Treatment of an empty list&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There are two schools of thought for how to evaluate a junction on an empty list:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reduction to an identity (boolean)&lt;/li&gt; &#xA; &lt;li&gt;Result is undefined (three-valued)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the first case, the result of the junction applied to the empty list is determined by a mathematical reduction to an identity depending on whether the underlying comparison is &#34;or&#34; or &#34;and&#34;. Conceptually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                &#34;any are true&#34;      &#34;all are true&#34;&#xA;                --------------      --------------&#xA;2 elements:     A || B || 0         A &amp;amp;&amp;amp; B &amp;amp;&amp;amp; 1&#xA;1 element:      A || 0              A &amp;amp;&amp;amp; 1&#xA;0 elements:     0                   1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the second case, three-value logic is desired, in which a junction applied to an empty list returns &lt;code&gt;undef&lt;/code&gt; rather than true or false&lt;/p&gt; &#xA;&lt;p&gt;Junctions with a &lt;code&gt;_u&lt;/code&gt; suffix implement three-valued logic. Those without are boolean.&lt;/p&gt; &#xA;&lt;h3&gt;all BLOCK LIST&lt;/h3&gt; &#xA;&lt;h3&gt;all_u BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns a true value if all items in LIST meet the criterion given through BLOCK. Sets &lt;code&gt;$_&lt;/code&gt; for each item in LIST in turn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;print &#34;All values are non-negative&#34;&#xA;  if all { $_ &amp;gt;= 0 } ($x, $y, $z);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an empty LIST, &lt;code&gt;all&lt;/code&gt; returns true (i.e. no values failed the condition) and &lt;code&gt;all_u&lt;/code&gt; returns &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thus, &lt;code&gt;all_u(@list)&lt;/code&gt; is equivalent to &lt;code&gt;@list ? all(@list) : undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: because Perl treats &lt;code&gt;undef&lt;/code&gt; as false, you must check the return value of &lt;code&gt;all_u&lt;/code&gt; with &lt;code&gt;defined&lt;/code&gt; or you will get the opposite result of what you expect.&lt;/p&gt; &#xA;&lt;h3&gt;any BLOCK LIST&lt;/h3&gt; &#xA;&lt;h3&gt;any_u BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns a true value if any item in LIST meets the criterion given through BLOCK. Sets &lt;code&gt;$_&lt;/code&gt; for each item in LIST in turn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;print &#34;At least one non-negative value&#34;&#xA;  if any { $_ &amp;gt;= 0 } ($x, $y, $z);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an empty LIST, &lt;code&gt;any&lt;/code&gt; returns false and &lt;code&gt;any_u&lt;/code&gt; returns &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thus, &lt;code&gt;any_u(@list)&lt;/code&gt; is equivalent to &lt;code&gt;@list ? any(@list) : undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;none BLOCK LIST&lt;/h3&gt; &#xA;&lt;h3&gt;none_u BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Logically the negation of &lt;code&gt;any&lt;/code&gt;. Returns a true value if no item in LIST meets the criterion given through BLOCK. Sets &lt;code&gt;$_&lt;/code&gt; for each item in LIST in turn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;print &#34;No non-negative values&#34;&#xA;  if none { $_ &amp;gt;= 0 } ($x, $y, $z);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an empty LIST, &lt;code&gt;none&lt;/code&gt; returns true (i.e. no values failed the condition) and &lt;code&gt;none_u&lt;/code&gt; returns &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thus, &lt;code&gt;none_u(@list)&lt;/code&gt; is equivalent to &lt;code&gt;@list ? none(@list) : undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: because Perl treats &lt;code&gt;undef&lt;/code&gt; as false, you must check the return value of &lt;code&gt;none_u&lt;/code&gt; with &lt;code&gt;defined&lt;/code&gt; or you will get the opposite result of what you expect.&lt;/p&gt; &#xA;&lt;h3&gt;notall BLOCK LIST&lt;/h3&gt; &#xA;&lt;h3&gt;notall_u BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Logically the negation of &lt;code&gt;all&lt;/code&gt;. Returns a true value if not all items in LIST meet the criterion given through BLOCK. Sets &lt;code&gt;$_&lt;/code&gt; for each item in LIST in turn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;print &#34;Not all values are non-negative&#34;&#xA;  if notall { $_ &amp;gt;= 0 } ($x, $y, $z);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an empty LIST, &lt;code&gt;notall&lt;/code&gt; returns false and &lt;code&gt;notall_u&lt;/code&gt; returns &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thus, &lt;code&gt;notall_u(@list)&lt;/code&gt; is equivalent to &lt;code&gt;@list ? notall(@list) : undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Transformation&lt;/h2&gt; &#xA;&lt;h3&gt;apply BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Applies BLOCK to each item in LIST and returns a list of the values after BLOCK has been applied. In scalar context, the last element is returned. This function is similar to &lt;code&gt;map&lt;/code&gt; but will not modify the elements of the input list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @list = (1 .. 4);&#xA;my @mult = apply { $_ *= 2 } @list;&#xA;print &#34;\@list = @list\n&#34;;&#xA;print &#34;\@mult = @mult\n&#34;;&#xA;__END__&#xA;@list = 1 2 3 4&#xA;@mult = 2 4 6 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Think of it as syntactic sugar for&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for (my @mult = @list) { $_ *= 2 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;insert_after BLOCK VALUE LIST&lt;/h3&gt; &#xA;&lt;p&gt;Inserts VALUE after the first item in LIST for which the criterion in BLOCK is true. Sets &lt;code&gt;$_&lt;/code&gt; for each item in LIST in turn.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @list = qw/This is a list/;&#xA;insert_after { $_ eq &#34;a&#34; } &#34;longer&#34; =&amp;gt; @list;&#xA;print &#34;@list&#34;;&#xA;__END__&#xA;This is a longer list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;insert_after_string STRING VALUE LIST&lt;/h3&gt; &#xA;&lt;p&gt;Inserts VALUE after the first item in LIST which is equal to STRING.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @list = qw/This is a list/;&#xA;insert_after_string &#34;a&#34;, &#34;longer&#34; =&amp;gt; @list;&#xA;print &#34;@list&#34;;&#xA;__END__&#xA;This is a longer list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pairwise BLOCK ARRAY1 ARRAY2&lt;/h3&gt; &#xA;&lt;p&gt;Evaluates BLOCK for each pair of elements in ARRAY1 and ARRAY2 and returns a new list consisting of BLOCK&#39;s return values. The two elements are set to &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt;. Note that those two are aliases to the original value so changing them will modify the input arrays.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@a = (1 .. 5);&#xA;@b = (11 .. 15);&#xA;@x = pairwise { $a + $b } @a, @b;     # returns 12, 14, 16, 18, 20&#xA;&#xA;# mesh with pairwise&#xA;@a = qw/a b c/;&#xA;@b = qw/1 2 3/;&#xA;@x = pairwise { ($a, $b) } @a, @b;    # returns a, 1, b, 2, c, 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;mesh ARRAY1 ARRAY2 [ ARRAY3 ... ]&lt;/h3&gt; &#xA;&lt;h3&gt;zip ARRAY1 ARRAY2 [ ARRAY3 ... ]&lt;/h3&gt; &#xA;&lt;p&gt;Returns a list consisting of the first elements of each array, then the second, then the third, etc, until all arrays are exhausted.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@x = qw/a b c d/;&#xA;@y = qw/1 2 3 4/;&#xA;@z = mesh @x, @y;         # returns a, 1, b, 2, c, 3, d, 4&#xA;&#xA;@a = (&#39;x&#39;);&#xA;@b = (&#39;1&#39;, &#39;2&#39;);&#xA;@c = qw/zip zap zot/;&#xA;@d = mesh @a, @b, @c;   # x, 1, zip, undef, 2, zap, undef, undef, zot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;zip&lt;/code&gt; is an alias for &lt;code&gt;mesh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;uniq LIST&lt;/h3&gt; &#xA;&lt;h3&gt;distinct LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns a new list by stripping duplicate values in LIST. The order of elements in the returned list is the same as in LIST. In scalar context, returns the number of unique elements in LIST.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @x = uniq 1, 1, 2, 2, 3, 5, 3, 4; # returns 1 2 3 5 4&#xA;my $x = uniq 1, 1, 2, 2, 3, 5, 3, 4; # returns 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;distinct&lt;/code&gt; is an alias for &lt;code&gt;uniq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Partitioning&lt;/h2&gt; &#xA;&lt;h3&gt;after BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns a list of the values of LIST after (and not including) the point where BLOCK returns a true value. Sets &lt;code&gt;$_&lt;/code&gt; for each element in LIST in turn.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@x = after { $_ % 5 == 0 } (1..9);    # returns 6, 7, 8, 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;after_incl BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;after&lt;/code&gt; but also includes the element for which BLOCK is true.&lt;/p&gt; &#xA;&lt;h3&gt;before BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns a list of values of LIST up to (and not including) the point where BLOCK returns a true value. Sets &lt;code&gt;$_&lt;/code&gt; for each element in LIST in turn.&lt;/p&gt; &#xA;&lt;h3&gt;before_incl BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;before&lt;/code&gt; but also includes the element for which BLOCK is true.&lt;/p&gt; &#xA;&lt;h3&gt;part BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Partitions LIST based on the return value of BLOCK which denotes into which partition the current value is put.&lt;/p&gt; &#xA;&lt;p&gt;Returns a list of the partitions thusly created. Each partition created is a reference to an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $i = 0;&#xA;my @part = part { $i++ % 2 } 1 .. 8;   # returns [1, 3, 5, 7], [2, 4, 6, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can have a sparse list of partitions as well where non-set partitions will be undef:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @part = part { 2 } 1 .. 10;            # returns undef, undef, [ 1 .. 10 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be careful with negative values, though:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @part = part { -1 } 1 .. 10;&#xA;__END__&#xA;Modification of non-creatable array value attempted, subscript -1 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Negative values are only ok when they refer to a partition previously created:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @idx  = ( 0, 1, -1 );&#xA;my $i    = 0;&#xA;my @part = part { $idx[$++ % 3] } 1 .. 8; # [1, 4, 7], [2, 3, 5, 6, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Iteration&lt;/h2&gt; &#xA;&lt;h3&gt;each_array ARRAY1 ARRAY2 ...&lt;/h3&gt; &#xA;&lt;p&gt;Creates an array iterator to return the elements of the list of arrays ARRAY1, ARRAY2 throughout ARRAYn in turn. That is, the first time it is called, it returns the first element of each array. The next time, it returns the second elements. And so on, until all elements are exhausted.&lt;/p&gt; &#xA;&lt;p&gt;This is useful for looping over more than one array at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $ea = each_array(@a, @b, @c);&#xA;while ( my ($a, $b, $c) = $ea-&amp;gt;() )   { .... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The iterator returns the empty list when it reached the end of all arrays.&lt;/p&gt; &#xA;&lt;p&gt;If the iterator is passed an argument of &#39;&lt;code&gt;index&lt;/code&gt;&#39;, then it returns the index of the last fetched set of values, as a scalar.&lt;/p&gt; &#xA;&lt;h3&gt;each_arrayref LIST&lt;/h3&gt; &#xA;&lt;p&gt;Like each_array, but the arguments are references to arrays, not the plain arrays.&lt;/p&gt; &#xA;&lt;h3&gt;natatime EXPR, LIST&lt;/h3&gt; &#xA;&lt;p&gt;Creates an array iterator, for looping over an array in chunks of &lt;code&gt;$n&lt;/code&gt; items at a time. (n at a time, get it?). An example is probably a better explanation than I could give in words.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @x = (&#39;a&#39; .. &#39;g&#39;);&#xA;my $it = natatime 3, @x;&#xA;while (my @vals = $it-&amp;gt;())&#xA;{&#xA;  print &#34;@vals\n&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This prints&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a b c&#xA;d e f&#xA;g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Searching&lt;/h2&gt; &#xA;&lt;h3&gt;bsearch BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Performs a binary search on LIST which must be a sorted list of values. BLOCK must return a negative value if the current element (stored in &lt;code&gt;$_&lt;/code&gt;) is smaller, a positive value if it is bigger and zero if it matches.&lt;/p&gt; &#xA;&lt;p&gt;Returns a boolean value in scalar context. In list context, it returns the element if it was found, otherwise the empty list.&lt;/p&gt; &#xA;&lt;h3&gt;firstval BLOCK LIST&lt;/h3&gt; &#xA;&lt;h3&gt;first_value BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns the first element in LIST for which BLOCK evaluates to true. Each element of LIST is set to &lt;code&gt;$_&lt;/code&gt; in turn. Returns &lt;code&gt;undef&lt;/code&gt; if no such element has been found.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;first_value&lt;/code&gt; is an alias for &lt;code&gt;firstval&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;lastval BLOCK LIST&lt;/h3&gt; &#xA;&lt;h3&gt;last_value BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns the last value in LIST for which BLOCK evaluates to true. Each element of LIST is set to &lt;code&gt;$_&lt;/code&gt; in turn. Returns &lt;code&gt;undef&lt;/code&gt; if no such element has been found.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;last_value&lt;/code&gt; is an alias for &lt;code&gt;lastval&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;indexes BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Evaluates BLOCK for each element in LIST (assigned to &lt;code&gt;$_&lt;/code&gt;) and returns a list of the indices of those elements for which BLOCK returned a true value. This is just like &lt;code&gt;grep&lt;/code&gt; only that it returns indices instead of values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@x = indexes { $_ % 2 == 0 } (1..10);   # returns 1, 3, 5, 7, 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;firstidx BLOCK LIST&lt;/h3&gt; &#xA;&lt;h3&gt;first_index BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns the index of the first element in LIST for which the criterion in BLOCK is true. Sets &lt;code&gt;$_&lt;/code&gt; for each item in LIST in turn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @list = (1, 4, 3, 2, 4, 6);&#xA;printf &#34;item with index %i in list is 4&#34;, firstidx { $_ == 4 } @list;&#xA;__END__&#xA;item with index 1 in list is 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;-1&lt;/code&gt; if no such item could be found.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;first_index&lt;/code&gt; is an alias for &lt;code&gt;firstidx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;lastidx BLOCK LIST&lt;/h3&gt; &#xA;&lt;h3&gt;last_index BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns the index of the last element in LIST for which the criterion in BLOCK is true. Sets &lt;code&gt;$_&lt;/code&gt; for each item in LIST in turn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @list = (1, 4, 3, 2, 4, 6);&#xA;printf &#34;item with index %i in list is 4&#34;, lastidx { $_ == 4 } @list;&#xA;__END__&#xA;item with index 4 in list is 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;-1&lt;/code&gt; if no such item could be found.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;last_index&lt;/code&gt; is an alias for &lt;code&gt;lastidx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sorting&lt;/h2&gt; &#xA;&lt;h3&gt;sort_by BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Returns the list of values sorted according to the string values returned by the KEYFUNC block or function. A typical use of this may be to sort objects according to the string value of some accessor, such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sort_by { $_-&amp;gt;name } @people&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key function is called in scalar context, being passed each value in turn as both $_ and the only argument in the parameters, @_. The values are then sorted according to string comparisons on the values returned. This is equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sort { $a-&amp;gt;name cmp $b-&amp;gt;name } @people&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;except that it guarantees the name accessor will be executed only once per value. One interesting use-case is to sort strings which may have numbers embedded in them &#34;naturally&#34;, rather than lexically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sort_by { s/(\d+)/sprintf &#34;%09d&#34;, $1/eg; $_ } @strings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sorts strings by generating sort keys which zero-pad the embedded numbers to some level (9 digits in this case), helping to ensure the lexical sort puts them in the correct order.&lt;/p&gt; &#xA;&lt;h3&gt;nsort_by BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Similar to sort_by but compares its key values numerically.&lt;/p&gt; &#xA;&lt;h2&gt;Counting and calculation&lt;/h2&gt; &#xA;&lt;h3&gt;true BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Counts the number of elements in LIST for which the criterion in BLOCK is true. Sets &lt;code&gt;$_&lt;/code&gt; for each item in LIST in turn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;printf &#34;%i item(s) are defined&#34;, true { defined($_) } @list;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;false BLOCK LIST&lt;/h3&gt; &#xA;&lt;p&gt;Counts the number of elements in LIST for which the criterion in BLOCK is false. Sets &lt;code&gt;$_&lt;/code&gt; for each item in LIST in turn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;printf &#34;%i item(s) are not defined&#34;, false { defined($_) } @list;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;minmax LIST&lt;/h3&gt; &#xA;&lt;p&gt;Calculates the minimum and maximum of LIST and returns a two element list with the first element being the minimum and the second the maximum. Returns the empty list if LIST was empty.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;minmax&lt;/code&gt; algorithm differs from a naive iteration over the list where each element is compared to two values being the so far calculated min and max value in that it only requires 3n/2 - 2 comparisons. Thus it is the most efficient possible algorithm.&lt;/p&gt; &#xA;&lt;p&gt;However, the Perl implementation of it has some overhead simply due to the fact that there are more lines of Perl code involved. Therefore, LIST needs to be fairly big in order for &lt;code&gt;minmax&lt;/code&gt; to win over a naive implementation. This limitation does not apply to the XS version.&lt;/p&gt; &#xA;&lt;h1&gt;ENVIRONMENT&lt;/h1&gt; &#xA;&lt;p&gt;When &lt;code&gt;LIST_MOREUTILS_PP&lt;/code&gt; is set, the module will always use the pure-Perl implementation and not the XS one. This environment variable is really just there for the test-suite to force testing the Perl implementation, and possibly for reporting of bugs. I don&#39;t see any reason to use it in a production environment.&lt;/p&gt; &#xA;&lt;h1&gt;MAINTENANCE&lt;/h1&gt; &#xA;&lt;p&gt;The maintenance goal is to preserve the documented semantics of the API; bug fixes that bring actual behavior in line with semantics are allowed. New API functions may be added over time. If a backwards incompatible change is unavoidable, we will attempt to provide support for the legacy API using the same export tag mechanism currently in place.&lt;/p&gt; &#xA;&lt;p&gt;This module attempts to use few non-core dependencies. Non-core configuration and testing modules will be bundled when reasonable; run-time dependencies will be added only if they deliver substantial benefit.&lt;/p&gt; &#xA;&lt;h1&gt;BUGS&lt;/h1&gt; &#xA;&lt;p&gt;There is a problem with a bug in 5.6.x perls. It is a syntax error to write things like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @x = apply { s/foo/bar/ } qw{ foo bar baz };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It has to be written as either&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @x = apply { s/foo/bar/ } &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @x = apply { s/foo/bar/ } my @dummy = qw/foo bar baz/;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Perl 5.5.x and Perl 5.8.x don&#39;t suffer from this limitation.&lt;/p&gt; &#xA;&lt;p&gt;If you have a functionality that you could imagine being in this module, please drop me a line. This module&#39;s policy will be less strict than &lt;a href=&#34;https://metacpan.org/pod/List::Util&#34;&gt;List::Util&lt;/a&gt;&#39;s when it comes to additions as it isn&#39;t a core module.&lt;/p&gt; &#xA;&lt;p&gt;When you report bugs, it would be nice if you could additionally give me the output of your program with the environment variable &lt;code&gt;LIST_MOREUTILS_PP&lt;/code&gt; set to a true value. That way I know where to look for the problem (in XS, pure-Perl or possibly both).&lt;/p&gt; &#xA;&lt;h1&gt;SUPPORT&lt;/h1&gt; &#xA;&lt;p&gt;Bugs should always be submitted via the CPAN bug tracker.&lt;/p&gt; &#xA;&lt;p&gt;You can find documentation for this module with the perldoc command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perldoc List::MoreUtils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also look for information at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;RT: CPAN&#39;s request tracker&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://rt.cpan.org/NoAuth/Bugs.html?Dist=List-MoreUtils&#34;&gt;http://rt.cpan.org/NoAuth/Bugs.html?Dist=List-MoreUtils&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;AnnoCPAN: Annotated CPAN documentation&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://annocpan.org/dist/List-MoreUtils&#34;&gt;http://annocpan.org/dist/List-MoreUtils&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CPAN Ratings&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://cpanratings.perl.org/l/List-MoreUtils&#34;&gt;http://cpanratings.perl.org/l/List-MoreUtils&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CPAN Search&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://search.cpan.org/dist/List-MoreUtils/&#34;&gt;http://search.cpan.org/dist/List-MoreUtils/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Git Repository&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/perl5-utils/List-MoreUtils&#34;&gt;https://github.com/perl5-utils/List-MoreUtils&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where can I go for help?&lt;/h2&gt; &#xA;&lt;p&gt;If you have a bug report, a patch or a suggestion, please open a new report ticket at CPAN (but please check previous reports first in case your issue has already been addressed) or open an issue on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Report tickets should contain a detailed description of the bug or enhancement request and at least an easily verifiable way of reproducing the issue or fix. Patches are always welcome, too - and it&#39;s cheap to send pull-requests on GitHub. Please keep in mind that code changes are more likely accepted when they&#39;re bundled with an approving test.&lt;/p&gt; &#xA;&lt;p&gt;If you think you&#39;ve found a bug then please read &#34;How to Report Bugs Effectively&#34; by Simon Tatham: &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/bugs.html&#34;&gt;http://www.chiark.greenend.org.uk/~sgtatham/bugs.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Where can I go for help with a concrete version?&lt;/h2&gt; &#xA;&lt;p&gt;Bugs and feature requests are accepted against the latest version only. To get patches for earlier versions, you need to get an agreement with a developer of your choice - who may or not report the issue and a suggested fix upstream (depends on the license you have chosen).&lt;/p&gt; &#xA;&lt;h2&gt;Business support and maintenance&lt;/h2&gt; &#xA;&lt;p&gt;Generally, in volunteered projects, there is no right for support. While every maintainer is happy to improve the provided software, spare time is limited.&lt;/p&gt; &#xA;&lt;p&gt;For those who have a use case which requires guaranteed support, one of the maintainers should be hired or contracted. For business support you can contact Jens via his CPAN email address rehsackATcpan.org. Please keep in mind that business support is neither available for free nor are you eligible to receive any support based on the license distributed with this package.&lt;/p&gt; &#xA;&lt;h1&gt;THANKS&lt;/h1&gt; &#xA;&lt;h2&gt;Tassilo von Parseval&lt;/h2&gt; &#xA;&lt;p&gt;Credits go to a number of people: Steve Purkis for giving me namespace advice and James Keenan and Terrence Branno for their effort of keeping the CPAN tidier by making &lt;a href=&#34;https://metacpan.org/pod/List::Utils&#34;&gt;List::Utils&lt;/a&gt; obsolete.&lt;/p&gt; &#xA;&lt;p&gt;Brian McCauley suggested the inclusion of apply() and provided the pure-Perl implementation for it.&lt;/p&gt; &#xA;&lt;p&gt;Eric J. Roode asked me to add all functions from his module &lt;code&gt;List::MoreUtil&lt;/code&gt; into this one. With minor modifications, the pure-Perl implementations of those are by him.&lt;/p&gt; &#xA;&lt;p&gt;The bunch of people who almost immediately pointed out the many problems with the glitchy 0.07 release (Slaven Rezic, Ron Savage, CPAN testers).&lt;/p&gt; &#xA;&lt;p&gt;A particularly nasty memory leak was spotted by Thomas A. Lowery.&lt;/p&gt; &#xA;&lt;p&gt;Lars Thegler made me aware of problems with older Perl versions.&lt;/p&gt; &#xA;&lt;p&gt;Anno Siegel de-orphaned each_arrayref().&lt;/p&gt; &#xA;&lt;p&gt;David Filmer made me aware of a problem in each_arrayref that could ultimately lead to a segfault.&lt;/p&gt; &#xA;&lt;p&gt;Ricardo Signes suggested the inclusion of part() and provided the Perl-implementation.&lt;/p&gt; &#xA;&lt;p&gt;Robin Huston kindly fixed a bug in perl&#39;s MULTICALL API to make the XS-implementation of part() work.&lt;/p&gt; &#xA;&lt;h2&gt;Jens Rehsack&lt;/h2&gt; &#xA;&lt;p&gt;Credits goes to all people contributing feedback during the v0.400 development releases.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks goes to David Golden who spent a lot of effort to develop a design to support current state of CPAN as well as ancient software somewhere in the dark. He also contributed a lot of patches to refactor the API frontend to welcome any user of List::MoreUtils - from ancient past to recently last used.&lt;/p&gt; &#xA;&lt;p&gt;Toby Inkster provided a lot of useful feedback for sane importer code and was a nice sounding board for API discussions.&lt;/p&gt; &#xA;&lt;p&gt;Peter Rabbitson provided a sane git repository setup containing entire package history.&lt;/p&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;p&gt;A pile of requests from other people is still pending further processing in my mailbox. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;List::Util export pass-through&lt;/p&gt; &lt;p&gt;Allow &lt;strong&gt;List::MoreUtils&lt;/strong&gt; to pass-through the regular &lt;a href=&#34;https://metacpan.org/pod/List::Util&#34;&gt;List::Util&lt;/a&gt; functions to end users only need to &lt;code&gt;use&lt;/code&gt; the one module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;uniq_by(&amp;amp;@)&lt;/p&gt; &lt;p&gt;Use code-reference to extract a key based on which the uniqueness is determined. Suggested by Aaron Crane.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;delete_index&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;random_item&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;random_item_delete_index&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;list_diff_hash&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;list_diff_inboth&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;list_diff_infirst&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;list_diff_insecond&lt;/p&gt; &lt;p&gt;These were all suggested by Dan Muey.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;listify&lt;/p&gt; &lt;p&gt;Always return a flat list when either a simple scalar value was passed or an array-reference. Suggested by Mark Summersault.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/List::Util&#34;&gt;List::Util&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/List::AllUtils&#34;&gt;List::AllUtils&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/List::UtilsBy&#34;&gt;List::UtilsBy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Jens Rehsack &#xA; &lt;rehsack at cpan.org&gt;&lt;/rehsack&gt;&lt;/p&gt; &#xA;&lt;p&gt;Adam Kennedy &lt;a href=&#34;mailto:adamk@cpan.org&#34;&gt;adamk@cpan.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tassilo von Parseval &lt;a href=&#34;mailto:tassilo.von.parseval@rwth-aachen.de&#34;&gt;tassilo.von.parseval@rwth-aachen.de&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;COPYRIGHT AND LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;Some parts copyright 2011 Aaron Crane.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2004 - 2010 by Tassilo von Parseval&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2013 - 2015 by Jens Rehsack&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, either Perl version 5.8.4 or, at your option, any later version of Perl 5 you may have available.&lt;/p&gt;</summary>
  </entry>
</feed>