<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-02T01:42:15Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>finance-quote/finance-quote</title>
    <updated>2023-06-02T01:42:15Z</updated>
    <id>tag:github.com,2023-06-02:/finance-quote/finance-quote</id>
    <link href="https://github.com/finance-quote/finance-quote" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Finance::Quote module for Perl&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Finance::Quote - Get stock and mutual fund quotes from various exchanges&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Finance::Quote;&#xA;&#xA;$q = Finance::Quote-&amp;gt;new;&#xA;%quotes  = $q-&amp;gt;fetch(&#34;nasdaq&#34;, @stocks);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;This module gets stock quotes from various internet sources all over the world. Quotes are obtained by constructing a quoter object and using the fetch method to gather data, which is returned as a two-dimensional hash (or a reference to such a hash, if called in a scalar context). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$q = Finance::Quote-&amp;gt;new;&#xA;%info = $q-&amp;gt;fetch(&#34;australia&#34;, &#34;CML&#34;);&#xA;print &#34;The price of CML is &#34;.$info{&#34;CML&#34;, &#34;price&#34;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first part of the hash (eg, &#34;CML&#34;) is referred to as the stock. The second part (in this case, &#34;price&#34;) is referred to as the label.&lt;/p&gt; &#xA;&lt;h2&gt;LABELS&lt;/h2&gt; &#xA;&lt;p&gt;When information about a stock is returned, the following standard labels may be used. Some custom-written modules may use labels not mentioned here. If you wish to be certain that you obtain a certain set of labels for a given stock, you can specify that using require_labels().&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ask          Ask&#xA;avg_vol      Average Daily Vol&#xA;bid          Bid&#xA;cap          Market Capitalization&#xA;close        Previous Close&#xA;currency     Currency code for the returned data&#xA;date         Last Trade Date  (MM/DD/YY format)&#xA;day_range    Day&#39;s Range&#xA;div          Dividend per Share&#xA;div_date     Dividend Pay Date&#xA;div_yield    Dividend Yield&#xA;eps          Earnings per Share&#xA;errormsg     If success is false, this field may contain the reason why.&#xA;ex_div       Ex-Dividend Date.&#xA;exchange     The exchange the information was obtained from.&#xA;high         Highest trade today&#xA;isin         International Securities Identification Number&#xA;isodate      ISO 8601 formatted date &#xA;last         Last Price&#xA;low          Lowest trade today&#xA;method       The module (as could be passed to fetch) which found this information.&#xA;name         Company or Mutual Fund Name&#xA;nav          Net Asset Value&#xA;net          Net Change&#xA;open         Today&#39;s Open&#xA;p_change     Percent Change from previous day&#39;s close&#xA;pe           P/E Ratio&#xA;success      Did the stock successfully return information? (true/false)&#xA;time         Last Trade Time&#xA;type         The type of equity returned&#xA;volume       Volume&#xA;year_range   52-Week Range&#xA;yield        Yield (usually 30 day avg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all stock lookups fail (possibly because of a failed connection) then the empty list may be returned, or undef in a scalar context.&lt;/p&gt; &#xA;&lt;h1&gt;INSTALLATION&lt;/h1&gt; &#xA;&lt;p&gt;Please note that the Github repository is not meant for general users of Finance::Quote for installation.&lt;/p&gt; &#xA;&lt;p&gt;If you downloaded the Finance-Quote-N.NN.tar.gz tarball from CPAN (N.NN is the version number, ex: Finance-Quote-1.50.tar.gz), run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tar xzf Finance-Quote-1.50.tar.gz&#xA;cd Finance-Quote-1.50.tar.gz&#xA;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have the CPAN module installed: Using cpanm (Requires App::cpanminus)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cpanm Finance::Quote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or Using CPAN shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl -MCPAN -e shell&#xA;install Finance::Quote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;SUPPORT AND DOCUMENTATION&lt;/h1&gt; &#xA;&lt;p&gt;After installing, you can find documentation for this module with the perldoc command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perldoc Finance::Quote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also look for information at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Finance::Quote GitHub project&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/finance-quote/finance-quote&#34;&gt;https://github.com/finance-quote/finance-quote&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Search CPAN&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://search.cpan.org/dist/Finance-Quote&#34;&gt;http://search.cpan.org/dist/Finance-Quote&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Finance::Quote home page&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://finance-quote.sourceforge.net/&#34;&gt;http://finance-quote.sourceforge.net/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Finance::YahooQuote home page&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://www.padz.net/~djpadz/YahooQuote/&#34;&gt;http://www.padz.net/~djpadz/YahooQuote/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The GnuCash home page&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://www.gnucash.org/&#34;&gt;http://www.gnucash.org/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;PUBLIC CLASS METHODS&lt;/h1&gt; &#xA;&lt;p&gt;Finance::Quote implements public class methods for constructing a quoter object, getting or setting default class values, and for listing available methods.&lt;/p&gt; &#xA;&lt;h2&gt;new&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $q = Finance::Quote-&amp;gt;new()&#xA;my $q = Finance::Quote-&amp;gt;new(&#39;-defaults&#39;)&#xA;my $q = Finance::Quote-&amp;gt;new(&#39;AEX&#39;, &#39;Fool&#39;)&#xA;my $q = Finance::Quote-&amp;gt;new(timeout =&amp;gt; 30)&#xA;my $q = Finance::Quote-&amp;gt;new(&#39;YahooJSON&#39;, fetch_currency =&amp;gt; &#39;EUR&#39;)&#xA;my $q = Finance::Quote-&amp;gt;new(&#39;alphavantage&#39; =&amp;gt; {API_KEY =&amp;gt; &#39;...&#39;})&#xA;my $q = Finance::Quote-&amp;gt;new(&#39;IEXCloud&#39;, &#39;iexcloud&#39; =&amp;gt; {API_KEY =&amp;gt; &#39;...&#39;});&#xA;my $q = Finance::Quote-&amp;gt;new(currency_rates =&amp;gt; {order =&amp;gt; [&#39;ECB&#39;, &#39;Fixer&#39;], &#39;fixer&#39; =&amp;gt; {API_KEY =&amp;gt; &#39;...&#39;}});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finance::Quote modules access a wide range of sources to provide quotes. A module provides one or more methods to fetch quotes. One method is usually the name of the module in lower case. Other methods, if provided, are descriptive names, such as &#39;canada&#39;, &#39;nasdaq&#39;, or &#39;nyse&#39;.&lt;/p&gt; &#xA;&lt;p&gt;A Finance::Quote object uses one or more methods to fetch quotes for securities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;new&lt;/code&gt; constructs a Finance::Quote object and enables the caller to load only specific modules, set parameters that control the behavior of the fetch method, and pass method specific parameters.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout =&lt;/code&gt; T&amp;gt; sets the web request timeout to &lt;code&gt;T&lt;/code&gt; seconds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;failover =&lt;/code&gt; B&amp;gt; where &lt;code&gt;B&lt;/code&gt; is a boolean value indicating if failover in fetch is permitted&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetch_currency =&lt;/code&gt; C&amp;gt; sets the desired currency code to &lt;code&gt;C&lt;/code&gt; for fetch results&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;currency_rates =&lt;/code&gt; H&amp;gt; configures the order currency rate modules are consulted for exchange rates and currency rate module options&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;required_labels =&lt;/code&gt; A&amp;gt; sets the required labels for fetch results to array &lt;code&gt;A&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;ModuleName&lt;/code&gt;&amp;gt; as a string is the name of a specific Finance::Quote::Module to load&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;methodname&lt;/code&gt; =&amp;gt; H&amp;gt; passes hash &lt;code&gt;H&lt;/code&gt; to methodname during fetch to configure the method&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With no arguments, &lt;code&gt;new&lt;/code&gt; creates a Finance::Quote object with the default methods. If the environment variable FQ_LOAD_QUOTELET is set, then the contents of FQ_LOAD_QUOTELET (split on whitespace) will be used as the argument list. This allows users to load their own custom modules without having to change existing code. If any method names are passed to &lt;code&gt;new&lt;/code&gt; or the flag &#39;-defaults&#39; is included in the argument list, then FQ_LOAD_QUOTELET is ignored.&lt;/p&gt; &#xA;&lt;p&gt;When new() is passed one or more class name arguments, an object is created with only the specified modules loaded. If the first argument is &#39;-defaults&#39;, then the default modules will be loaded first, followed by any other specified modules. Note that the FQ_LOAD_QUOTELET environment variable must begin with &#39;-defaults&#39; if you wish the default modules to be loaded.&lt;/p&gt; &#xA;&lt;p&gt;Method names correspond to the Perl module in the Finance::Quote module space. For example, &lt;code&gt;Finance::Quote-&lt;/code&gt;new(&#39;ASX&#39;)&amp;gt; will load the module Finance::Quote::ASX, which provides the method &#34;asx&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Some methods require API keys or have unique options. Passing &#39;method =&amp;gt; HASH&#39; to new() enables the caller to provide a configuration HASH to the corresponding method.&lt;/p&gt; &#xA;&lt;p&gt;The key &#39;currency_rates&#39; configures the Finanace::Quote currency rate conversion. By default, to maintain backward compatibility, Finance::Quote::CurrencyRates::AlphaVantage is used for currency conversion. This end point requires an API key, which can either be set in the environment or included in the configuration hash. To specify a different primary currency conversion method or configure fallback methods, include the &#39;order&#39; key, which points to an array of Finance::Quote::CurrencyRates module names. Setting the environment variable FQ_CURRENCY will change the default endpoint used for currency conversion. See the documentation for the individual Finance::Quote::CurrencyRates to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;get_default_currency_fields&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @fields = Finance::Quote::get_default_currency_fields();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;get_default_currency_fields&lt;/code&gt; returns the standard list of fields in a quote that are automatically converted during currency conversion. Individual modules may override this list.&lt;/p&gt; &#xA;&lt;h2&gt;get_default_timeout&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $value = Finance::Quote::get_default_timeout();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;get_default_timeout&lt;/code&gt; returns the current Finance::Quote default timeout in seconds for web requests. Finance::Quote does not specify a default timeout, deferring to the underlying user agent for web requests. So this function will return undef unless &lt;code&gt;set_default_timeout&lt;/code&gt; was previously called.&lt;/p&gt; &#xA;&lt;h2&gt;set_default_timeout&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Finance::Quote::set_default_timeout(45);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;set_default_timeout&lt;/code&gt; sets the Finance::Quote default timeout to a new value.&lt;/p&gt; &#xA;&lt;h2&gt;get_methods&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @methods = Finance::Quote::get_methods();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;get_methods&lt;/code&gt; returns the list of methods that can be passed to &lt;code&gt;new&lt;/code&gt; when creating a quoter object and as the first argument to &lt;code&gt;fetch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;get_features&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my %features = Finance::Quote::get_features();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;get_features&lt;/code&gt; returns a hash with three keys: quote_methods, quote_modules, and currency_modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$features{quote_methods} is a hash with key/value pairs of method_name =&amp;gt; [array of module names]&#xA;$features{quote_modules} is a hash with key/value pairs of module_name =&amp;gt; [array of parameter names]&#xA;$features{currency_modules} is a hash with key/value pairs of currency_module_name =&amp;gt; [array of paramater names]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parameter names are values that the module needs to function, such as API_KEY. Most modules will have an empty list. Modules with a parameter are configured when creating the Finance::Quote by passing the argument&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;module_name_in_lower_case&#39; =&amp;gt; {paramter =&amp;gt; value}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to Finance::Quote-&amp;gt;new().&lt;/p&gt; &#xA;&lt;p&gt;The keys of the $features{currency_modules} hash are the names of currency modules that can be used for currency conversion and the order in which the modules are used is controlled by the argument&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;currency_rates =&amp;gt; {order =&amp;gt; [subset of $features{currency_modules}]} &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to Finance::Quote-&amp;gt;new(). By default, only AlphaVantage in used for currency conversion, so &#34;order&#34; must be set to use other currency modules.&lt;/p&gt; &#xA;&lt;h1&gt;PUBLIC OBJECT METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;B_to_billions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $value = $q-&amp;gt;B_to_billions(&#34;20B&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;B_to_billions&lt;/code&gt; is a utility function that expands a numeric string with a &#34;B&#34; suffix to the corresponding multiple of 1000000000.&lt;/p&gt; &#xA;&lt;h2&gt;decimal_shiftup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $value = $q-&amp;gt;decimal_shiftup(&#34;123.45&#34;, 1);  # returns 1234.5&#xA;my $value = $q-&amp;gt;decimal_shiftup(&#34;0.25&#34;, 1);    # returns 2.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;decimal_shiftup&lt;/code&gt; moves a the decimal point in a numeric string the specified number of places to the right.&lt;/p&gt; &#xA;&lt;h2&gt;fetch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my %stocks  = $q-&amp;gt;fetch(&#34;alphavantage&#34;, &#34;IBM&#34;, &#34;MSFT&#34;, &#34;LNUX&#34;);&#xA;my $hashref = $q-&amp;gt;fetch(&#34;nasdaq&#34;, &#34;IBM&#34;, &#34;MSFT&#34;, &#34;LNUX&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt; takes a method as its first argument and the remaining arguments are treated as securities. If the quoter &lt;code&gt;$q&lt;/code&gt; was constructed with a specific method or methods, then only those methods are available.&lt;/p&gt; &#xA;&lt;p&gt;When called in an array context, a hash is returned. In a scalar context, a reference to a hash will be returned. The keys for the returned hash are &lt;code&gt;{SECURITY,LABEL}&lt;/code&gt;. For the above example call, &lt;code&gt;$stocks{&#34;IBM&#34;,&#34;high&#34;}&lt;/code&gt; is the high value for IBM.&lt;/p&gt; &#xA;&lt;p&gt;$q-&amp;gt;get_methods() returns the list of valid methods for quoter object $q. Some methods specify a specific Finance::Quote module, such as &#39;alphavantage&#39;. Other methods are available from multiple Finance::Quote modules, such as &#39;nasdaq&#39;. The quoter failover over option determines if multiple modules are consulted for methods such as &#39;nasdaq&#39; that more than one implementation.&lt;/p&gt; &#xA;&lt;h2&gt;get_failover&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $failover = $q-&amp;gt;get_failover();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Failover is when the &lt;code&gt;fetch&lt;/code&gt; method attempts to retrieve quote information for a security from alternate sources when the requested method fails. &lt;code&gt;get_failover&lt;/code&gt; returns a boolean value indicating if the quoter object will use failover or not.&lt;/p&gt; &#xA;&lt;h2&gt;set_failover&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$q-&amp;gt;set_failover(False);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;set_failover&lt;/code&gt; sets the failover flag on the quoter object.&lt;/p&gt; &#xA;&lt;h2&gt;get_fetch_currency&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $currency = $q-&amp;gt;get_fetch_currency();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;get_fetch_currency&lt;/code&gt; returns either the desired currency code for the quoter object or undef if no target currency was set during construction or with the &lt;code&gt;set_fetch_currency&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h2&gt;set_fetch_currency&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$q-&amp;gt;set_fetch_currency(&#34;FRF&#34;);  # Get results in French Francs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;set_fetch_currency&lt;/code&gt; method is used to request that all information be returned in the specified currency. Note that this increases the chance stock-lookup failure, as remote requests must be made to fetch both the stock information and the currency rates. In order to improve reliability and speed performance, currency conversion rates are cached and are assumed not to change for the duration of the Finance::Quote object.&lt;/p&gt; &#xA;&lt;p&gt;See the introduction to this page for information on how to configure the source of currency conversion rates.&lt;/p&gt; &#xA;&lt;h2&gt;get_required_labels&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @labels = $q-&amp;gt;get_required_labels();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;get_required_labels&lt;/code&gt; returns the list of labels that must be populated for a security quote to be considered valid and returned by &lt;code&gt;fetch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;set_required_labels&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $labels = [&#39;close&#39;, &#39;isodate&#39;, &#39;last&#39;];&#xA;$q-&amp;gt;set_required_labels($labels);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;set_required_labels&lt;/code&gt; updates the list of required labels for the quoter object.&lt;/p&gt; &#xA;&lt;h2&gt;get_timeout&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $timeout = $q-&amp;gt;get_timeout();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;get_timeout&lt;/code&gt; returns the timeout in seconds the quoter object is using for web requests.&lt;/p&gt; &#xA;&lt;h2&gt;set_timeout&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$q-&amp;gt;set_timeout(45);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;set_timeout&lt;/code&gt; updated the timeout in seconds for the quoter object.&lt;/p&gt; &#xA;&lt;h2&gt;store_date&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$quoter-&amp;gt;store_date(\%info, $stocks, {eurodate =&amp;gt; &#39;06/11/2020&#39;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;store_date&lt;/code&gt; is used by modules to consistent store date information about securities. Given the various pieces of a date, this function figures out how to construct a ISO date (yyyy-mm-dd) and US date (mm/dd/yyyy) and stores those values in &lt;code&gt;%info&lt;/code&gt; for security &lt;code&gt;$stock&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;get_user_agent&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $ua = $q-&amp;gt;get_user_agent();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;get_user_agent&lt;/code&gt; returns the LWP::UserAgent the quoter object is using for web requests.&lt;/p&gt; &#xA;&lt;h2&gt;isoTime&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$q-&amp;gt;isoTime(&#34;11:39PM&#34;);    # returns &#34;23:39&#34;&#xA;$q-&amp;gt;isoTime(&#34;9:10 AM&#34;);    # returns &#34;09:10&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;isoTime&lt;/code&gt; returns an ISO formatted time.&lt;/p&gt; &#xA;&lt;h1&gt;PUBLIC CLASS OR OBJECT METHODS&lt;/h1&gt; &#xA;&lt;p&gt;The following methods are available as class methods, but can also be called from Finance::Quote objects.&lt;/p&gt; &#xA;&lt;h2&gt;scale_field&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $value = Finance::Quote-&amp;gt;scale_field(&#39;1023&#39;, &#39;0.01&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;scale_field&lt;/code&gt; is a utility function that scales the first argument by the second argument. In the above example, &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&#39;10.23&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;currency&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $value = $q-&amp;gt;currency(&#39;15.95 USD&#39;, &#39;AUD&#39;);&#xA;my $value = Finance::Quote-&amp;gt;currency(&#39;23.45 EUR&#39;, &#39;RUB&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;currency&lt;/code&gt; converts a value with a currency code suffix to another currency using the current exchange rate as determined by the Finance::Quote::CurrencyRates method or methods configured for the quoter $q. When called as a class method, only Finance::Quote::AlphaVantage is used, which requires an API key. See the introduction for information on configuring currency rate conversions and see Finance::Quote::CurrencyRates::AlphaVantage for information about the API key.&lt;/p&gt; &#xA;&lt;h2&gt;currency_lookup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $currency = $quoter-&amp;gt;currency_lookup();&#xA;my $currency = $quoter-&amp;gt;currency_lookup( name =&amp;gt; &#34;Caribbean&#34;);&#xA;my $currency = $quoter-&amp;gt;currency_loopup( country =&amp;gt; qw/denmark/i );&#xA;my $currency = $q-&amp;gt;currency_lookup(country =&amp;gt; qr/united states/i, number =&amp;gt; 840);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;currency_lookup&lt;/code&gt; takes zero or more constraints and filters the list of currencies known to Finance::Quote. It returns a hash reference where the keys are ISO currency codes and the values are hash references containing metadata about the currency.&lt;/p&gt; &#xA;&lt;p&gt;A constraint is a key name and either a scalar or regular expression. A currency satisfies the constraint if its metadata hash contains the constraint key and the value of that metadata field matches the regular expression or contains the constraint value as a substring. If the metadata field is an array, then it satisfies the constraint if any value in the array satisfies the constraint.&lt;/p&gt; &#xA;&lt;h2&gt;parse_csv&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @list = Finance::Quote::parse_csv($string);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;parse_csv&lt;/code&gt; is a utility function for splitting a comma separated value string into a list of terms, treating double-quoted strings that contain commas as a single value.&lt;/p&gt; &#xA;&lt;h2&gt;parse_csv_semicolon&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @list = Finance::Quote::parse_csv_semicolon($string);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;parse_csv&lt;/code&gt; is a utility function for splitting a semicolon separated value string into a list of terms, treating double-quoted strings that contain semicolons as a single value.&lt;/p&gt; &#xA;&lt;h1&gt;LEGACY METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;default_currency_fields&lt;/h2&gt; &#xA;&lt;p&gt;Replaced with get_default_currency_fields().&lt;/p&gt; &#xA;&lt;h2&gt;sources&lt;/h2&gt; &#xA;&lt;p&gt;Replaced with get_methods().&lt;/p&gt; &#xA;&lt;h2&gt;failover&lt;/h2&gt; &#xA;&lt;p&gt;Replaced with get_failover() and set_failover().&lt;/p&gt; &#xA;&lt;h2&gt;require_labels&lt;/h2&gt; &#xA;&lt;p&gt;Replaced with get_required_labels() and set_required_labels().&lt;/p&gt; &#xA;&lt;h2&gt;user_agent&lt;/h2&gt; &#xA;&lt;p&gt;Replaced with get_user_agent().&lt;/p&gt; &#xA;&lt;h2&gt;set_currency&lt;/h2&gt; &#xA;&lt;p&gt;Replaced with get_fetch_currency() and set_fetch_currency().&lt;/p&gt; &#xA;&lt;h1&gt;ENVIRONMENT&lt;/h1&gt; &#xA;&lt;p&gt;Finance::Quote respects all environment that your installed version of LWP::UserAgent respects. Most importantly, it respects the http_proxy environment variable.&lt;/p&gt; &#xA;&lt;h1&gt;BUGS&lt;/h1&gt; &#xA;&lt;p&gt;The caller cannot control the fetch failover order.&lt;/p&gt; &#xA;&lt;p&gt;The two-dimensional hash is a somewhat unwieldly method of passing around information when compared to references&lt;/p&gt; &#xA;&lt;h1&gt;COPYRIGHT &amp;amp; LICENSE&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 1998, Dj Padzensky&#xA;Copyright 1998, 1999 Linas Vepstas&#xA;Copyright 2000, Yannick LE NY (update for Yahoo Europe and YahooQuote)&#xA;Copyright 2000-2001, Paul Fenwick (updates for ASX, maintenance and release)&#xA;Copyright 2000-2001, Brent Neal (update for TIAA-CREF)&#xA;Copyright 2000 Volker Stuerzl (DWS)&#xA;Copyright 2001 Rob Sessink (AEX support)&#xA;Copyright 2001 Leigh Wedding (ASX updates)&#xA;Copyright 2001 Tobias Vancura (Fool support)&#xA;Copyright 2001 James Treacy (TD Waterhouse support)&#xA;Copyright 2008 Erik Colson (isoTime)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;Currency information fetched through this module is bound by the terms and conditons of the data source.&lt;/p&gt; &#xA;&lt;p&gt;Other copyrights and conditions may apply to data fetched through this module. Please refer to the sub-modules for further information.&lt;/p&gt; &#xA;&lt;h1&gt;AUTHORS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Dj Padzensky &amp;lt;djpadz@padz.net&amp;gt;, PadzNet, Inc.&#xA;Linas Vepstas &amp;lt;linas@linas.org&amp;gt;&#xA;Yannick LE NY &amp;lt;y-le-ny@ifrance.com&amp;gt;&#xA;Paul Fenwick &amp;lt;pjf@cpan.org&amp;gt;&#xA;Brent Neal &amp;lt;brentn@users.sourceforge.net&amp;gt;&#xA;Volker Stuerzl &amp;lt;volker.stuerzl@gmx.de&amp;gt;&#xA;Keith Refson &amp;lt;Keith.Refson#earth.ox.ac.uk&amp;gt;&#xA;Rob Sessink &amp;lt;rob_ses@users.sourceforge.net&amp;gt;&#xA;Leigh Wedding &amp;lt;leigh.wedding@telstra.com&amp;gt;&#xA;Tobias Vancura &amp;lt;tvancura@altavista.net&amp;gt;&#xA;James Treacy &amp;lt;treacy@debian.org&amp;gt;&#xA;Bradley Dean &amp;lt;bjdean@bjdean.id.au&amp;gt;&#xA;Erik Colson &amp;lt;eco@ecocode.net&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Finance::Quote home page can be found at &lt;a href=&#34;http://finance-quote.sourceforge.net/&#34;&gt;http://finance-quote.sourceforge.net/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Finance::YahooQuote home page can be found at &lt;a href=&#34;http://www.padz.net/~djpadz/YahooQuote/&#34;&gt;http://www.padz.net/~djpadz/YahooQuote/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The GnuCash home page can be found at &lt;a href=&#34;http://www.gnucash.org/&#34;&gt;http://www.gnucash.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Finance::Quote::CurrencyRates::AlphaVantage,&#xA;Finance::Quote::CurrencyRates::ECB,&#xA;Finance::Quote::CurrencyRates::Fixer,&#xA;Finance::Quote::CurrencyRates::OpenExchange,&#xA;Finance::Quote::CurrencyRates::YahooJSON,&#xA;Finance::Quote::AEX,&#xA;Finance::Quote::ASEGR,&#xA;Finance::Quote::ASX,&#xA;Finance::Quote::Bloomberg,&#xA;Finance::Quote::BSEIndia,&#xA;Finance::Quote::Bourso,&#xA;Finance::Quote::BVB,&#xA;Finance::Quote::CSE,&#xA;Finance::Quote::Cdnfundlibrary,&#xA;Finance::Quote::Comdirect,&#xA;Finance::Quote::Currencies,&#xA;Finance::Quote::DWS,&#xA;Finance::Quote::Deka,&#xA;Finance::Quote::FTfunds,&#xA;Finance::Quote::Fidelity,&#xA;Finance::Quote::Finanzpartner,&#xA;Finance::Quote::Fondsweb,&#xA;Finance::Quote::Fool,&#xA;Finance::Quote::Fundata&#xA;Finance::Quote::GoldMoney,&#xA;Finance::Quote::HU,&#xA;Finance::Quote::IEXCloud,&#xA;Finance::Quote::IndiaMutual,&#xA;Finance::Quote::MorningstarAU,&#xA;Finance::Quote::MorningstarCH,&#xA;Finance::Quote::MorningstarJP,&#xA;Finance::Quote::MorningstarUK,&#xA;Finance::Quote::NSEIndia,&#xA;Finance::Quote::NZX,&#xA;Finance::Quote::OnVista,&#xA;Finance::Quote::Oslobors,&#xA;Finance::Quote::SEB,&#xA;Finance::Quote::SIX,&#xA;Finance::Quote::TSP,&#xA;Finance::Quote::TMX,&#xA;Finance::Quote::Tiaacref,&#xA;Finance::Quote::TesouroDireto,&#xA;Finance::Quote::TreasuryDirect,&#xA;Finance::Quote::Troweprice,&#xA;Finance::Quote::TwelveData,&#xA;Finance::Quote::Union,&#xA;Finance::Quote::YahooJSON,&#xA;Finance::Quote::ZA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should have received the Finance::Quote hacker&#39;s guide with this package. Please read it if you are interested in adding extra methods to this package. The latest hacker&#39;s guide can also be found on GitHub at &lt;a href=&#34;https://github.com/finance-quote/finance-quote/raw/master/Documentation/Hackers-Guide&#34;&gt;https://github.com/finance-quote/finance-quote/blob/master/Documentation/Hackers-Guide&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>