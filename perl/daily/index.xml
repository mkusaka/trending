<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-12T01:39:26Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jwilk/url.sh</title>
    <updated>2022-09-12T01:39:26Z</updated>
    <id>tag:github.com,2022-09-12:/jwilk/url.sh</id>
    <link href="https://github.com/jwilk/url.sh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;this URL is also malicious(?!) shell script&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://example.com/;&#39;$(gt=$(perl$IFS-E$IFS&#39;s//62/;s/62/chr/e;say&#39;);eval$IFS&#39;&#39;cowsay$IFS&#39;&#39;pwned$IFS$gt/dev/tty)&#39;;cowsay$IFS&#39;&#39;pwned&#34;&gt;http://example.com/;&#39;$(gt=$(perl$IFS-E$IFS&#39;s//62/;s/62/chr/e;say&#39;);eval$IFS&#39;&#39;cowsay$IFS&#39;&#39;pwned$IFS$gt/dev/tty)&#39;;cowsay$IFS&#39;&#39;pwned&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The above (completely valid) URL is also a shell script that executes some malicious(?!) code::&lt;/p&gt; &#xA;&lt;p&gt;$ wget -q &lt;a href=&#34;http://example.com/;&#39;$(gt=$(perl$IFS-E$IFS&#39;s//62/;s/62/chr/e;say&#39;);eval$IFS&#39;&#39;cowsay$IFS&#39;&#39;pwned$IFS$gt/dev/tty)&#39;;cowsay$IFS&#39;&#39;pwned&#34;&gt;http://example.com/;&#39;$(gt=$(perl$IFS-E$IFS&#39;s//62/;s/62/chr/e;say&#39;);eval$IFS&#39;&#39;cowsay$IFS&#39;&#39;pwned$IFS$gt/dev/tty)&#39;;cowsay$IFS&#39;&#39;pwned&lt;/a&gt; bash: $(gt=$(perl$IFS-E$IFSs//62/: No such file or directory bash: s/62/chr/e: No such file or directory bash: say);eval$IFScowsay$IFSpwned$IFS$gt/dev/tty): No such file or directory _______ &amp;lt; pwned &amp;gt; ------- \ ^&lt;strong&gt;^ \ (oo)_&lt;/strong&gt;____ (__)\ )/&lt;br&gt; ||----w | || ||&lt;/p&gt; &#xA;&lt;p&gt;It does so even when you add double quotes around it::&lt;/p&gt; &#xA;&lt;p&gt;$ wget -q &#34;&lt;a href=&#34;http://example.com/;&#39;$(gt=$(perl$IFS-E$IFS&#39;s//62/;s/62/chr/e;say&#39;);eval$IFS&#39;&#39;cowsay$IFS&#39;&#39;pwned$IFS$gt/dev/tty)&#39;;cowsay$IFS&#39;&#39;pwned&#34;&gt;http://example.com/;&#39;$(gt=$(perl$IFS-E$IFS&#39;s//62/;s/62/chr/e;say&#39;);eval$IFS&#39;&#39;cowsay$IFS&#39;&#39;pwned$IFS$gt/dev/tty)&#39;;cowsay$IFS&#39;&#39;pwned&lt;/a&gt;&#34; _______ &amp;lt; pwned &amp;gt; ------- \ ^&lt;strong&gt;^ \ (oo)_&lt;/strong&gt;____ (__)\ )/&lt;br&gt; ||----w | || ||&lt;/p&gt; &#xA;&lt;p&gt;Single quotes don&#39;t help either::&lt;/p&gt; &#xA;&lt;p&gt;$ wget -q &#39;&lt;a href=&#34;http://example.com/;&#39;$(gt=$(perl$IFS-E$IFS&#39;s//62/;s/62/chr/e;say&#39;);eval$IFS&#39;&#39;cowsay$IFS&#39;&#39;pwned$IFS$gt/dev/tty)&#39;;cowsay$IFS&#39;&#39;pwned&#34;&gt;http://example.com/;&#39;$(gt=$(perl$IFS-E$IFS&#39;s//62/;s/62/chr/e;say&#39;);eval$IFS&#39;&#39;cowsay$IFS&#39;&#39;pwned$IFS$gt/dev/tty)&#39;;cowsay$IFS&#39;&#39;pwned&lt;/a&gt;&#39; _______ &amp;lt; pwned &amp;gt; ------- \ ^&lt;strong&gt;^ \ (oo)_&lt;/strong&gt;____ (__)\ )/&lt;br&gt; ||----w | || ||&lt;/p&gt; &#xA;&lt;p&gt;.. vim:ft=rst ts=3 sts=3 sw=3 et&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-JSON-Validator</title>
    <updated>2022-09-12T01:39:26Z</updated>
    <id>tag:github.com,2022-09-12:/binary-com/perl-JSON-Validator</id>
    <link href="https://github.com/binary-com/perl-JSON-Validator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fork of JSON::Validator Perl module&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSON::Validator &lt;a href=&#34;https://travis-ci.org/mojolicious/json-validator&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/mojolicious/json-validator.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A module for validating data against a &lt;a href=&#34;https://json-schema.org/&#34;&gt;JSON Schema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use Mojolicious::Lite -signatures;&#xA;use JSON::Validator &#39;joi&#39;;&#xA;use Mojo::JSON qw(false to_json true);&#xA;&#xA;post &#39;/users&#39; =&amp;gt; sub ($c) {&#xA;  my $user = $c-&amp;gt;req-&amp;gt;json;&#xA;&#xA;  # Validate input JSON document&#xA;  my @errors = joi(&#xA;    $user,&#xA;    joi-&amp;gt;object-&amp;gt;props(&#xA;      email    =&amp;gt; joi-&amp;gt;email-&amp;gt;required,&#xA;      username =&amp;gt; joi-&amp;gt;string-&amp;gt;min(1)-&amp;gt;required,&#xA;      password =&amp;gt; joi-&amp;gt;string-&amp;gt;min(12)-&amp;gt;required,&#xA;    )&#xA;  );&#xA;&#xA;  # Report back on invalid input&#xA;  return $c-&amp;gt;render(json =&amp;gt; {errors =&amp;gt; \@errors}, status =&amp;gt; 400) if @errors;&#xA;&#xA;  # Handle the $user in some way&#xA;  $c-&amp;gt;app-&amp;gt;log-&amp;gt;info(to_json $user);&#xA;&#xA;  # Report back the status&#xA;  return $c-&amp;gt;render(json =&amp;gt; {accepted =&amp;gt; true}, status =&amp;gt; 201);&#xA;};&#xA;&#xA;app-&amp;gt;start;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;All you need is a one-liner, it takes seconds to install.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -L https://cpanmin.us | perl - -M https://cpan.metacpan.org -n JSON::Validator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend the use of a &lt;a href=&#34;http://perlbrew.pl&#34;&gt;Perlbrew&lt;/a&gt; environment.&lt;/p&gt; &#xA;&lt;h2&gt;Want to know more?&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at our excellent &lt;a href=&#34;https://mojolicious.org/perldoc/JSON/Validator&#34;&gt;documentation&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
</feed>