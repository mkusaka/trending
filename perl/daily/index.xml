<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-18T01:31:11Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mamod/JavaScript-Shell</title>
    <updated>2024-05-18T01:31:11Z</updated>
    <id>tag:github.com,2024-05-18:/mamod/JavaScript-Shell</id>
    <link href="https://github.com/mamod/JavaScript-Shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Spidermonkey shell from Perl&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=pod&lt;/p&gt; &#xA;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;JavaScript::Shell - Run Spidermonkey shell from Perl&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use JavaScript::Shell;&#xA;use strict;&#xA;use warnings;&#xA;&#xA;my $js = JavaScript::Shell-&amp;gt;new();&#xA;&#xA;##create context&#xA;my $ctx = $js-&amp;gt;createContext();&#xA;&#xA;$ctx-&amp;gt;Set(&#39;str&#39; =&amp;gt; &#39;Hello&#39;);&#xA;&#xA;$ctx-&amp;gt;Set(&#39;getName&#39; =&amp;gt; sub {&#xA;    my $context = shift;&#xA;    my $args    = shift;&#xA;    my $firstname = $args-&amp;gt;[0];&#xA;    my $lastname  = $args-&amp;gt;[1];&#xA;    return $firstname . &#39; &#39; . $lastname;&#xA;});&#xA;&#xA;$ctx-&amp;gt;eval(qq!&#xA;    function message (){&#xA;        var name = getName.apply(this,arguments);&#xA;        var welcome_message = str;&#xA;        return welcome_message + &#39; &#39; + name;&#xA;    }&#xA;!);&#xA;&#xA;&#xA;my $val = $ctx-&amp;gt;get(&#39;message&#39; =&amp;gt; &#39;Mamod&#39;, &#39;Mehyar&#39;)-&amp;gt;value;&#xA;&#xA;print $val . &#34;\n&#34;; ## prints &#39;Hello Mamod Mehyar&#39;&#xA;&#xA;$js-&amp;gt;destroy();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;JavaScript::Shell will turn Spidermonkey shell to an interactive environment by connecting it to perl&lt;/p&gt; &#xA;&lt;p&gt;With JavaScript::Shell you can bind functions from perl and call them from javascript or create functions in javascript then call them from perl&lt;/p&gt; &#xA;&lt;p&gt;=head1 WHY&lt;/p&gt; &#xA;&lt;p&gt;While I was working on a project where I needed to connect perl with javascript I had a lot of problems with existing javascript modules, they were eaither hard to compile or out of date, so I thought of this approach as an alternative.&lt;/p&gt; &#xA;&lt;p&gt;Even though this sounds crazy to do, to my surprise it worked as expected - at least in my usgae cases&lt;/p&gt; &#xA;&lt;p&gt;=head1 SPEED&lt;/p&gt; &#xA;&lt;p&gt;JavaScript::Shell connect spidermonkey with perl through IPC bridge using L&lt;a href=&#34;IPC::Open2&#34;&gt;IPC::Open2&lt;/a&gt; so execution speed will never be as fast as using C/C++ bindings ported to perl directly&lt;/p&gt; &#xA;&lt;p&gt;There is another over head when translating data types to/from perl, since it converts perl data to JSON &amp;amp; javascript JSON to perl data back again.&lt;/p&gt; &#xA;&lt;p&gt;Saying that, the over all speed is acceptable and you can take some steps to improve speed like&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item Data Transfer&lt;/p&gt; &#xA;&lt;p&gt;Try to transfer small data chunks between processes when possible, sending large data will be very slow&lt;/p&gt; &#xA;&lt;p&gt;=item Buffer Data&lt;/p&gt; &#xA;&lt;p&gt;As of version 0.02 JavaScript::shell has a new method for dealing with large strings passed to/from javascript, use this feature when ever you want to send large data &#34;strings&#34; -- see C&#xA; &lt;buffer&gt;&lt;/buffer&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item Minimize calls&lt;/p&gt; &#xA;&lt;p&gt;Minimize number of calls to both ends, let each part do it&#39;s processing. for eaxmple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;##instead of&#xA;&#xA;$js-&amp;gt;eval(qq!&#xA;    function East (){}&#xA;    function West (){}&#xA;    function North (){}&#xA;    function South (){}&#xA;!);&#xA;&#xA;$js-&amp;gt;call(&#39;East&#39;);&#xA;$js-&amp;gt;call(&#39;West&#39;);&#xA;$js-&amp;gt;call(&#39;North&#39;);&#xA;$js-&amp;gt;call(&#39;South&#39;);&#xA;&#xA;##do this&#xA;&#xA;$js-&amp;gt;eval(qq!&#xA;    function all () {&#xA;        &#xA;        East();&#xA;        West();&#xA;        North();&#xA;        South();&#xA;        &#xA;    }&#xA;    &#xA;    function East (){}&#xA;    function west (){}&#xA;    function North (){}&#xA;    function South (){}&#xA;    &#xA;!);&#xA;&#xA;$js-&amp;gt;call(&#39;all&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 CONTEXT&lt;/p&gt; &#xA;&lt;p&gt;Once you intiate JavaScript::Shell you can create as many contexts as you want, each context will has it&#39;s own scope and will not overlap with other created contexts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $js = JavaScript::Shell-&amp;gt;new();&#xA;my $ctx = $js-&amp;gt;createContext();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass a hash ref with simple data to C&#xA; &lt;createcontext&gt;&#xA;   method as a sandbox object and will be copied to the context immediately&#xA; &lt;/createcontext&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $ctx-&amp;gt;createContext({&#xA;    Foo =&amp;gt; &#39;Bar&#39;,&#xA;    Foo2 =&amp;gt; &#39;Bar2&#39;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head1 FUNCTIONS&lt;/p&gt; &#xA;&lt;p&gt;=head2 new&lt;/p&gt; &#xA;&lt;p&gt;Initiates SpiderMonkey Shell&lt;/p&gt; &#xA;&lt;p&gt;=head2 createContext&lt;/p&gt; &#xA;&lt;p&gt;creates a new context&lt;/p&gt; &#xA;&lt;p&gt;=head2 run&lt;/p&gt; &#xA;&lt;p&gt;This will run javascript code in a blocking loop until you call jshell.endLoop() from your javascript code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$js-&amp;gt;Set(&#39;Name&#39; =&amp;gt; &#39;XXX&#39;);&#xA;$js-&amp;gt;eval(qq!&#xA;    for (var i = 0; i &amp;lt; 100; i++){&#xA;        &#xA;    }&#xA;    &#xA;    jshell.endLoop();&#xA;    &#xA;!);&#xA;&#xA;$js-&amp;gt;run();&#xA;&#xA;##will never reach this point unless we call&#xA;## jshell.endLoop(); in javascript code as above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head2 Set&lt;/p&gt; &#xA;&lt;p&gt;Sets/Defines javascript variables, objects and functions from perl&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;## set variable &#39;str&#39; with Hello vales&#xA;$ctx-&amp;gt;Set(&#39;str&#39; =&amp;gt; &#39;Hello&#39;);&#xA;&#xA;## set &#39;arr&#39; Array Object [1,2,3,4]&#xA;$ctx-&amp;gt;Set(&#39;arr&#39; =&amp;gt; [1,2,3,4]);&#xA;&#xA;## set Associated Array Object&#xA;$ctx-&amp;gt;Set(&#39;obj&#39; =&amp;gt; {&#xA;    str1 =&amp;gt; &#39;something&#39;,&#xA;    str2 =&amp;gt; &#39;something ..&#39;&#xA;});&#xA;&#xA;## set &#39;test&#39; function&#xA;## caller will pass 2 arguments&#xA;## 1- context object&#xA;## 2- array ref of all passed arguments&#xA;$ctx-&amp;gt;Set(&#39;test&#39; =&amp;gt; sub {&#xA;    my $context = shift;&#xA;    my $args = shift;&#xA;    &#xA;    return $args-&amp;gt;[0] . &#39; &#39; . $args-&amp;gt;[1];&#xA;});&#xA;&#xA;## javascript object creation style&#xA;&#xA;$ctx-&amp;gt;Set(&#39;obj&#39; =&amp;gt; {});&#xA;&#xA;#then&#xA;$ctx-&amp;gt;Set(&#39;obj.name&#39; =&amp;gt; &#39;XXX&#39;);&#xA;$ctx-&amp;gt;Set(&#39;obj.get&#39; =&amp;gt; sub { });&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head2 get&lt;/p&gt; &#xA;&lt;p&gt;get values from javascript code, returns a C&lt;a href=&#34;JavaScript::Shell::Value&#34;&gt;JavaScript::Shell::Value&lt;/a&gt; Object&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $ret = $ctx-&amp;gt;get(&#39;str&#39;);&#xA;print $ret-&amp;gt;value; ## Hello&#xA;&#xA;## remember to call value to get the returned string/object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;get method will search your context for a matched variable/object/function and return it&#39;s value, if the name was detected for a function it will run this function first and then returns it&#39;s return value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ctx-&amp;gt;get(&#39;obj.name&#39;)-&amp;gt;value; ## XXX&#xA;&#xA;##you can pass variables when trying to get a function&#xA;$ctx-&amp;gt;get(&#39;test&#39; =&amp;gt; &#39;Hi&#39;,&#39;Bye&#39;)-&amp;gt;value; ## Hi Bye&#xA;&#xA;##get an evaled script values&#xA;&#xA;$ctx-&amp;gt;get(&#39;eval&#39; =&amp;gt; qq!&#xA;    var n = 2;&#xA;    var x = 3;&#xA;    n+x;&#xA;!)-&amp;gt;value;  #--&amp;gt; 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head2 call&lt;/p&gt; &#xA;&lt;p&gt;Calling javascript functions from perl, same as C&#xA; &lt;get&gt;&#xA;   but doesn&#39;t return any value&#xA; &lt;/get&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ctx-&amp;gt;call(&#39;test&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head2 eval&lt;/p&gt; &#xA;&lt;p&gt;eval javascript code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ctx-&amp;gt;eval(qq!&#xA;    &#xA;    //javascript code&#xA;    var n = 10;&#xA;    for(var i = 0; i&amp;lt;100; i++){&#xA;        n += 10;&#xA;    }&#xA;    ...&#xA;!);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head2 buffer&lt;/p&gt; &#xA;&lt;p&gt;This function should be used only when dealing with passing large strings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$js-&amp;gt;Set(&#39;largeStr&#39; =&amp;gt; sub{&#xA;    &#xA;    my $js = shift;&#xA;    my $args = shift;&#xA;    &#xA;    ##we have a very large string we need to pass to&#xA;    ##javascript&#xA;    &#xA;    return $js-&amp;gt;buffer(&#39;large string&#39;);&#xA;    &#xA;});&#xA;&#xA;&#xA;##javascript&#xA;var str = largeStr();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same thing can be done when sending large strings from javascript to perl&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;//javascript&#xA;&#xA;var str = &#39;very large string we need to pass to perl&#39;;&#xA;jshell.sendBuffer(str);&#xA;&#xA;##perl&#xA;##to consume this string from perl just get it&#xA;my $str = $js-&amp;gt;getBuffer();    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head2 onError&lt;/p&gt; &#xA;&lt;p&gt;set error handler method, this method accepts a code ref only. When an error raised from javascript this code ref will be called with 2 arguments&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item * JavaScript::Shell instance&lt;/p&gt; &#xA;&lt;p&gt;=item * error object - Hash ref&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;Error Hash has the folloing keys&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item * B&#xA; &lt;message&gt;&#xA;   I&#xA;  &lt;error message&gt;&lt;/error&gt;&#xA; &lt;/message&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item * B&#xA; &lt;type&gt;&#xA;   I&amp;lt;javascript error type: Error, TypeError, ReferenceError ..&amp;gt;&#xA; &lt;/type&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item * B&#xA; &lt;file&gt;&#xA;   I&#xA;  &lt;file name wich raised this error&gt;&lt;/file&gt;&#xA; &lt;/file&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item * B&#xA; &lt;line&gt;&#xA;   I&#xA;  &lt;line number&gt;&lt;/line&gt;&#xA; &lt;/line&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item * B&#xA; &lt;stack&gt;&#xA;   I&#xA;  &lt;string of the full stack trace&gt;&lt;/string&gt;&#xA; &lt;/stack&gt;&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;Setting error hnadler example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $js = JavaScript::Shell-&amp;gt;new();&#xA;$js-&amp;gt;onError(sub{&#xA;    my $self = shift;&#xA;    my $error = shift;&#xA;    print STDERR $error-&amp;gt;{message} . &#39; at &#39; . $error-&amp;gt;{line}&#xA;    exit(0);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head2 destroy&lt;/p&gt; &#xA;&lt;p&gt;Destroy javascript shell / clear context&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $js = JavaScript::Shell-&amp;gt;new();&#xA;my $ctx-&amp;gt;createContext();&#xA;&#xA;##clear context;&#xA;$ctx-&amp;gt;destroy();&#xA;&#xA;##close spidermonkey shell&#xA;$js-&amp;gt;destroy();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, either Perl version 5.16.2 or, at your option, any later version of Perl 5 you may have available.&lt;/p&gt; &#xA;&lt;p&gt;=head1 COPYRIGHTS&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2013 by Mamod A. Mehyar &lt;a href=&#34;mailto:mamod.mehyar@gmail.com&#34;&gt;mamod.mehyar@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tonytamsf/mysql-utils</title>
    <updated>2024-05-18T01:31:11Z</updated>
    <id>tag:github.com,2024-05-18:/tonytamsf/mysql-utils</id>
    <link href="https://github.com/tonytamsf/mysql-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Utilities for mysql&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mysql-utils&lt;/h1&gt; &#xA;&lt;p&gt;Utilities for mysql&lt;/p&gt;</summary>
  </entry>
</feed>