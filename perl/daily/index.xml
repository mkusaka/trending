<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-05T01:49:08Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PerlAlien/Alien-Build</title>
    <updated>2022-08-05T01:49:08Z</updated>
    <id>tag:github.com,2022-08-05:/PerlAlien/Alien-Build</id>
    <link href="https://github.com/PerlAlien/Alien-Build" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build external dependencies for use in CPAN&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alien::Build &lt;a href=&#34;https://cirrus-ci.com/github/PerlAlien/Alien-Build&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/PerlAlien/Alien-Build.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/PerlAlien/Alien-Build/workflows/static/badge.svg?sanitize=true&#34; alt=&#34;static&#34;&gt; &lt;img src=&#34;https://github.com/PerlAlien/Alien-Build/workflows/linux/badge.svg?sanitize=true&#34; alt=&#34;linux&#34;&gt; &lt;img src=&#34;https://github.com/PerlAlien/Alien-Build/workflows/macos/badge.svg?sanitize=true&#34; alt=&#34;macos&#34;&gt; &lt;img src=&#34;https://github.com/PerlAlien/Alien-Build/workflows/windows/badge.svg?sanitize=true&#34; alt=&#34;windows&#34;&gt; &lt;img src=&#34;https://github.com/PerlAlien/Alien-Build/workflows/cygwin/badge.svg?sanitize=true&#34; alt=&#34;cygwin&#34;&gt; &lt;img src=&#34;https://github.com/PerlAlien/Alien-Build/workflows/msys2-mingw/badge.svg?sanitize=true&#34; alt=&#34;msys2-mingw&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Build external dependencies for use in CPAN&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $build = Alien::Build-&amp;gt;load(&#39;./alienfile&#39;);&#xA;$build-&amp;gt;load_requires(&#39;configure&#39;);&#xA;$build-&amp;gt;set_prefix(&#39;/usr/local&#39;);&#xA;$build-&amp;gt;set_stage(&#39;/foo/mystage&#39;);  # needs to be absolute&#xA;$build-&amp;gt;load_requires($build-&amp;gt;install_type);&#xA;$build-&amp;gt;download;&#xA;$build-&amp;gt;build;&#xA;# files are now in /foo/mystage, it is your job (or&#xA;# ExtUtils::MakeMaker, Module::Build, etc) to copy&#xA;# those files into /usr/local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;This module provides tools for building external (non-CPAN) dependencies for CPAN. It is mainly designed to be used at install time of a CPAN client, and work closely with &lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt; which is used at runtime.&lt;/p&gt; &#xA;&lt;p&gt;This is the detailed documentation for the &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; class. If you are starting out you probably want to do so from one of these documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::Alien&#34;&gt;Alien::Build::Manual::Alien&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A broad overview of &lt;code&gt;Alien-Build&lt;/code&gt; and its ecosystem.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::AlienUser&#34;&gt;Alien::Build::Manual::AlienUser&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For users of an &lt;code&gt;Alien::libfoo&lt;/code&gt; that is implemented using &lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt;. (The developer of &lt;code&gt;Alien::libfoo&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; provide the documentation necessary, but if not, this is the place to start).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::AlienAuthor&#34;&gt;Alien::Build::Manual::AlienAuthor&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you are writing your own &lt;a href=&#34;https://metacpan.org/pod/Alien&#34;&gt;Alien&lt;/a&gt; based on &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::FAQ&#34;&gt;Alien::Build::Manual::FAQ&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you have a common question that has already been answered, like &#34;How do I use &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; with some build system&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::PluginAuthor&#34;&gt;Alien::Build::Manual::PluginAuthor&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This is for the brave souls who want to write plugins that will work with &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; + &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that you will not usually create a &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; instance directly, but rather be using a thin installer layer, such as &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::MM&#34;&gt;Alien::Build::MM&lt;/a&gt; (for use with &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;ExtUtils::MakeMaker&lt;/a&gt;) or &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::MB&#34;&gt;Alien::Build::MB&lt;/a&gt; (for use with &lt;a href=&#34;https://metacpan.org/pod/Module::Build&#34;&gt;Module::Build&lt;/a&gt;). One of the goals of this project is to remain installer agnostic.&lt;/p&gt; &#xA;&lt;h1&gt;CONSTRUCTORS&lt;/h1&gt; &#xA;&lt;h2&gt;new&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $build = Alien::Build-&amp;gt;new;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a new empty instance of &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt;. Normally you will want to use &lt;code&gt;load&lt;/code&gt; below to create an instance of &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; from an &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; recipe.&lt;/p&gt; &#xA;&lt;h2&gt;load&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $build = Alien::Build-&amp;gt;load($alienfile);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates an &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; instance with the given &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; recipe.&lt;/p&gt; &#xA;&lt;h2&gt;resume&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $build = Alien::Build-&amp;gt;resume($alienfile, $root);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load a checkpointed &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; instance. You will need the original &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; and the build root (usually &lt;code&gt;_alien&lt;/code&gt;), and a build that had been properly checkpointed using the &lt;code&gt;checkpoint&lt;/code&gt; method below.&lt;/p&gt; &#xA;&lt;h1&gt;PROPERTIES&lt;/h1&gt; &#xA;&lt;p&gt;There are three main properties for &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt;. There are a number of properties documented here with a specific usage. Note that these properties may need to be serialized into something primitive like JSON that does not support: regular expressions, code references of blessed objects.&lt;/p&gt; &#xA;&lt;p&gt;If you are writing a plugin (&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Plugin&#34;&gt;Alien::Build::Plugin&lt;/a&gt;) you should use a prefix like &#34;plugin_&lt;em&gt;name&lt;/em&gt;&#34; (where &lt;em&gt;name&lt;/em&gt; is the name of your plugin) so that it does not interfere with other plugin or future versions of &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt;. For example, if you were writing &lt;code&gt;Alien::Build::Plugin::Fetch::NewProtocol&lt;/code&gt;, please use the prefix &lt;code&gt;plugin_fetch_newprotocol&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;sub init&#xA;{&#xA;  my($self, $meta) = @_;&#xA;&#xA;  $meta-&amp;gt;prop( plugin_fetch_newprotocol_foo =&amp;gt; &#39;some value&#39; );&#xA;&#xA;  $meta-&amp;gt;register_hook(&#xA;    some_hook =&amp;gt; sub {&#xA;      my($build) = @_;&#xA;      $build-&amp;gt;install_prop-&amp;gt;{plugin_fetch_newprotocol_bar} = &#39;some other value&#39;;&#xA;      $build-&amp;gt;runtime_prop-&amp;gt;{plugin_fetch_newprotocol_baz} = &#39;and another value&#39;;&#xA;    }&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are writing a &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; recipe please use the prefix &lt;code&gt;my_&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use alienfile;&#xA;&#xA;meta_prop-&amp;gt;{my_foo} = &#39;some value&#39;;&#xA;&#xA;probe sub {&#xA;  my($build) = @_;&#xA;  $build-&amp;gt;install_prop-&amp;gt;{my_bar} = &#39;some other value&#39;;&#xA;  $build-&amp;gt;install_prop-&amp;gt;{my_baz} = &#39;and another value&#39;;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any property may be used from a command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;probe [ &#39;some command %{.meta.plugin_fetch_newprotocol_foo}&#39; ];&#xA;probe [ &#39;some command %{.install.plugin_fetch_newprotocol_bar}&#39; ];&#xA;probe [ &#39;some command %{.runtime.plugin_fetch_newprotocol_baz}&#39; ];&#xA;probe [ &#39;some command %{.meta.my_foo}&#39; ];&#xA;probe [ &#39;some command %{.install.my_bar}&#39; ];&#xA;probe [ &#39;some command %{.runtime.my_baz}&#39; ];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;meta_prop&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $href = $build-&amp;gt;meta_prop;&#xA;my $href = Alien::Build-&amp;gt;meta_prop;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Meta properties have to do with the recipe itself, and not any particular instance that probes or builds that recipe. Meta properties can be changed from within an &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; using the &lt;code&gt;meta_prop&lt;/code&gt; directive, or from a plugin from its &lt;code&gt;init&lt;/code&gt; method (though should NOT be modified from any hooks registered within that &lt;code&gt;init&lt;/code&gt; method). This is not strictly enforced, but if you do not follow this rule your recipe will likely be broken.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;arch&lt;/p&gt; &lt;p&gt;This is a hint to an installer like &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::MM&#34;&gt;Alien::Build::MM&lt;/a&gt; or &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::MB&#34;&gt;Alien::Build::MB&lt;/a&gt;, that the library or tool contains architecture dependent files and so should be stored in an architecture dependent location. If not specified by your &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; then it will be set to true.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;destdir&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;DESTDIR&lt;/code&gt; environment variable to stage your install before copying the files into &lt;code&gt;blib&lt;/code&gt;. This is the preferred method of installing libraries because it improves reliability. This technique is supported by &lt;code&gt;autoconf&lt;/code&gt; and others.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;destdir_filter&lt;/p&gt; &lt;p&gt;Regular expression for the files that should be copied from the &lt;code&gt;DESTDIR&lt;/code&gt; into the stage directory. If not defined, then all files will be copied.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;destdir_ffi_filter&lt;/p&gt; &lt;p&gt;Same as &lt;code&gt;destdir_filter&lt;/code&gt; except applies to &lt;code&gt;build_ffi&lt;/code&gt; instead of &lt;code&gt;build&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;env&lt;/p&gt; &lt;p&gt;Environment variables to override during the build stage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;env_interpolate&lt;/p&gt; &lt;p&gt;Environment variable values will be interpolated with helpers. Example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;meta-&amp;gt;prop-&amp;gt;{env_interpolate} = 1;&#xA;meta-&amp;gt;prop-&amp;gt;{env}-&amp;gt;{PERL} = &#39;%{perl}&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;local_source&lt;/p&gt; &lt;p&gt;Set to true if source code package is available locally. (that is not fetched over the internet). This is computed by default based on the &lt;code&gt;start_url&lt;/code&gt; property. Can be set by an &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; or plugin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;platform&lt;/p&gt; &lt;p&gt;Hash reference. Contains information about the platform beyond just &lt;code&gt;$^O&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;compiler_type&lt;/p&gt; &lt;p&gt;Refers to the type of flags that the compiler accepts. May be expanded in the future, but for now, will be one of:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;microsoft&lt;/p&gt; &lt;p&gt;On Windows when using Microsoft Visual C++&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;unix&lt;/p&gt; &lt;p&gt;Virtually everything else, including gcc on windows.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;The main difference is that with Visual C++ &lt;code&gt;-LIBPATH&lt;/code&gt; should be used instead of &lt;code&gt;-L&lt;/code&gt;, and static libraries should have the &lt;code&gt;.LIB&lt;/code&gt; suffix instead of &lt;code&gt;.a&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;system_type&lt;/p&gt; &lt;p&gt;&lt;code&gt;$^O&lt;/code&gt; is frequently good enough to make platform specific logic in your &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;, this handles the case when $^O can cover platforms that provide multiple environments that Perl might run under. The main example is windows, but others may be added in the future.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;unix&lt;/li&gt; &#xA;     &lt;li&gt;vms&lt;/li&gt; &#xA;     &lt;li&gt;windows-activestate&lt;/li&gt; &#xA;     &lt;li&gt;windows-microsoft&lt;/li&gt; &#xA;     &lt;li&gt;windows-mingw&lt;/li&gt; &#xA;     &lt;li&gt;windows-strawberry&lt;/li&gt; &#xA;     &lt;li&gt;windows-unknown&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;Note that &lt;code&gt;cygwin&lt;/code&gt; and &lt;code&gt;msys&lt;/code&gt; are considered &lt;code&gt;unix&lt;/code&gt; even though they run on windows!&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;out_of_source&lt;/p&gt; &lt;p&gt;Build in a different directory from the where the source code is stored. In autoconf this is referred to as a &#34;VPATH&#34; build. Everyone else calls this an &#34;out-of-source&#34; build. When this property is true, instead of extracting to the source build root, the downloaded source will be extracted to an source extraction directory and the source build root will be empty. You can use the &lt;code&gt;extract&lt;/code&gt; install property to get the location of the extracted source.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;network&lt;/p&gt; &lt;p&gt;True if a network fetch is available. This should NOT be set by an &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; or plugin. This is computed based on the &lt;code&gt;ALIEN_INSTALL_NETWORK&lt;/code&gt; environment variables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;start_url&lt;/p&gt; &lt;p&gt;The default or start URL used by fetch plugins.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;install_prop&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $href = $build-&amp;gt;install_prop;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install properties are used during the install phase (either under &lt;code&gt;share&lt;/code&gt; or &lt;code&gt;system&lt;/code&gt; install). They are remembered for the entire install phase, but not kept around during the runtime phase. Thus they cannot be accessed from your &lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt; based module.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;autoconf_prefix&lt;/p&gt; &lt;p&gt;The prefix as understood by autoconf. This is only different on Windows Where MSYS is used and paths like &lt;code&gt;C:/foo&lt;/code&gt; are represented as &lt;code&gt;/C/foo&lt;/code&gt; which are understood by the MSYS tools, but not by Perl. You should only use this if you are using &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Plugin::Autoconf&#34;&gt;Alien::Build::Plugin::Autoconf&lt;/a&gt; in your &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;download&lt;/p&gt; &lt;p&gt;The location of the downloaded archive (tar.gz, or similar) or directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;env&lt;/p&gt; &lt;p&gt;Environment variables to override during the build stage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;extract&lt;/p&gt; &lt;p&gt;The location of the last source extraction. For a &#34;out-of-source&#34; build (see the &lt;code&gt;out_of_source&lt;/code&gt; meta property above), this will only be set once. For other types of builds, the source code may be extracted multiple times, and thus this property may change.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;old&lt;/p&gt; &lt;p&gt;Hash containing information on a previously installed Alien of the same name, if available. This may be useful in cases where you want to reuse the previous install if it is still sufficient.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;prefix&lt;/p&gt; &lt;p&gt;The prefix for the previous install. Versions prior to 1.42 unfortunately had this in typo form of &lt;code&gt;preifx&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;runtime&lt;/p&gt; &lt;p&gt;The runtime properties from the previous install.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;patch&lt;/p&gt; &lt;p&gt;Directory with patches.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;prefix&lt;/p&gt; &lt;p&gt;The install time prefix. Under a &lt;code&gt;destdir&lt;/code&gt; install this is the same as the runtime or final install location. Under a non-&lt;code&gt;destdir&lt;/code&gt; install this is the &lt;code&gt;stage&lt;/code&gt; directory (usually the appropriate share directory under &lt;code&gt;blib&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;root&lt;/p&gt; &lt;p&gt;The build root directory. This will be an absolute path. It is the absolute form of &lt;code&gt;./_alien&lt;/code&gt; by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;stage&lt;/p&gt; &lt;p&gt;The stage directory where files will be copied. This is usually the root of the blib share directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;system_probe_class&lt;/p&gt; &lt;p&gt;After the probe step this property may contain the plugin class that performed the system probe. It shouldn&#39;t be filled in directly by the plugin (instead if should use the hook property &lt;code&gt;probe_class&lt;/code&gt;, see below). This is optional, and not all probe plugins will provide this information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;system_probe_instance_id&lt;/p&gt; &lt;p&gt;After the probe step this property may contain the plugin instance id that performed the system probe. It shouldn&#39;t be filled in directly by the plugin (instead if should use the hook property &lt;code&gt;probe_instance_id&lt;/code&gt;, see below). This is optional, and not all probe plugins will provide this information.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;plugin_instance_prop&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $href = $build-&amp;gt;plugin_instance_prop($plugin);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns the private plugin instance properties for a given plugin. This method should usually only be called internally by plugins themselves to keep track of internal state. Because the content can be used arbitrarily by the owning plugin because it is private to the plugin, and thus is not part of the &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; spec.&lt;/p&gt; &#xA;&lt;h2&gt;runtime_prop&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $href = $build-&amp;gt;runtime_prop;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Runtime properties are used during the install and runtime phases (either under &lt;code&gt;share&lt;/code&gt; or &lt;code&gt;system&lt;/code&gt; install). This should include anything that you will need to know to use the library or tool during runtime, and shouldn&#39;t include anything that is no longer relevant once the install process is complete.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;alien_build_version&lt;/p&gt; &lt;p&gt;The version of &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; used to install the library or tool.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;alt&lt;/p&gt; &lt;p&gt;Alternate configurations. If the alienized package has multiple libraries this could be used to store the different compiler or linker flags for each library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cflags&lt;/p&gt; &lt;p&gt;The compiler flags&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cflags_static&lt;/p&gt; &lt;p&gt;The static compiler flags&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;command&lt;/p&gt; &lt;p&gt;The command name for tools where the name my differ from platform to platform. For example, the GNU version of make is usually &lt;code&gt;make&lt;/code&gt; in Linux and &lt;code&gt;gmake&lt;/code&gt; on FreeBSD.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ffi_name&lt;/p&gt; &lt;p&gt;The name DLL or shared object &#34;name&#34; to use when searching for dynamic libraries at runtime. This is passed into &lt;a href=&#34;https://metacpan.org/pod/FFI::CheckLib&#34;&gt;FFI::CheckLib&lt;/a&gt;, so if your library is something like &lt;code&gt;libarchive.so&lt;/code&gt; or &lt;code&gt;archive.dll&lt;/code&gt; you would set this to &lt;code&gt;archive&lt;/code&gt;. This may be a string or an array of strings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ffi_checklib&lt;/p&gt; &lt;p&gt;This property contains two sub properties:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;share&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$build-&amp;gt;runtime_prop-&amp;gt;{ffi_checklib}-&amp;gt;{share} = [ ... ];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Array of additional &lt;a href=&#34;https://metacpan.org/pod/FFI::CheckLib&#34;&gt;FFI::CheckLib&lt;/a&gt; flags to pass in to &lt;code&gt;find_lib&lt;/code&gt; for a &lt;code&gt;share&lt;/code&gt; install.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;system&lt;/p&gt; &lt;p&gt;Array of additional &lt;a href=&#34;https://metacpan.org/pod/FFI::CheckLib&#34;&gt;FFI::CheckLib&lt;/a&gt; flags to pass in to &lt;code&gt;find_lib&lt;/code&gt; for a &lt;code&gt;system&lt;/code&gt; install.&lt;/p&gt; &lt;p&gt;Among other things, useful for specifying the &lt;code&gt;try_linker_script&lt;/code&gt; flag:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;$build-&amp;gt;runtime_prop-&amp;gt;{ffi_checklib}-&amp;gt;{system} = [ try_linker_script =&amp;gt; 1 ];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;install_type&lt;/p&gt; &lt;p&gt;The install type. Is one of:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;system&lt;/p&gt; &lt;p&gt;For when the library or tool is provided by the operating system, can be detected by &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt;, and is considered satisfactory by the &lt;code&gt;alienfile&lt;/code&gt; recipe.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;share&lt;/p&gt; &lt;p&gt;For when a system install is not possible, the library source will be downloaded from the internet or retrieved in another appropriate fashion and built.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;libs&lt;/p&gt; &lt;p&gt;The library flags&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;libs_static&lt;/p&gt; &lt;p&gt;The static library flags&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;perl_module_version&lt;/p&gt; &lt;p&gt;The version of the Perl module used to install the alien (if available). For example if &lt;a href=&#34;https://metacpan.org/pod/Alien::curl&#34;&gt;Alien::curl&lt;/a&gt; is installing &lt;code&gt;libcurl&lt;/code&gt; this would be the version of &lt;a href=&#34;https://metacpan.org/pod/Alien::curl&#34;&gt;Alien::curl&lt;/a&gt; used during the install step.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;prefix&lt;/p&gt; &lt;p&gt;The final install root. This is usually they share directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;version&lt;/p&gt; &lt;p&gt;The version of the library or tool&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;hook_prop&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $href = $build-&amp;gt;hook_prop;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hook properties are for the currently running (if any) hook. They are used only during the execution of each hook and are discarded after. If no hook is currently running then &lt;code&gt;hook_prop&lt;/code&gt; will return &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;name&lt;/p&gt; &lt;p&gt;The name of the currently running hook.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;version (probe)&lt;/p&gt; &lt;p&gt;Probe and PkgConfig plugins &lt;em&gt;may&lt;/em&gt; set this property indicating the version of the alienized package. Not all plugins and configurations may be able to provide this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;probe_class (probe)&lt;/p&gt; &lt;p&gt;Probe and PkgConfig plugins &lt;em&gt;may&lt;/em&gt; set this property indicating the plugin class that made the probe. If the probe results in a system install this will be propagated to &lt;code&gt;system_probe_class&lt;/code&gt; for later use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;probe_instance_id (probe)&lt;/p&gt; &lt;p&gt;Probe and PkgConfig plugins &lt;em&gt;may&lt;/em&gt; set this property indicating the plugin instance id that made the probe. If the probe results in a system install this will be propagated to &lt;code&gt;system_probe_instance_id&lt;/code&gt; for later use.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;checkpoint&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;checkpoint;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save any install or runtime properties so that they can be reloaded on a subsequent run in a separate process. This is useful if your build needs to be done in multiple stages from a &lt;code&gt;Makefile&lt;/code&gt;, such as with &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;ExtUtils::MakeMaker&lt;/a&gt;. Once checkpointed you can use the &lt;code&gt;resume&lt;/code&gt; constructor (documented above) to resume the probe/build/install] process.&lt;/p&gt; &#xA;&lt;h2&gt;root&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $dir = $build-&amp;gt;root;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is just a shortcut for:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $root = $build-&amp;gt;install_prop-&amp;gt;{root};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Except that it will be created if it does not already exist.&lt;/p&gt; &#xA;&lt;h2&gt;install_type&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $type = $build-&amp;gt;install_type;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return the install type. (See the like named install property above for details). This method will call &lt;code&gt;probe&lt;/code&gt; if it has not already been called.&lt;/p&gt; &#xA;&lt;h2&gt;set_prefix&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;set_prefix($prefix);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the final (unstaged) prefix. This is normally only called by &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::MM&#34;&gt;Alien::Build::MM&lt;/a&gt; and similar modules. It is not intended for use from plugins or from an &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;set_stage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;set_stage($dir);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sets the stage directory. This is normally only called by &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::MM&#34;&gt;Alien::Build::MM&lt;/a&gt; and similar modules. It is not intended for use from plugins or from an &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;requires&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $hash = $build-&amp;gt;requires($phase);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns a hash reference of the modules required for the given phase. Phases include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;configure&lt;/p&gt; &lt;p&gt;These modules must already be available when the &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; is read.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;any&lt;/p&gt; &lt;p&gt;These modules are used during either a &lt;code&gt;system&lt;/code&gt; or &lt;code&gt;share&lt;/code&gt; install.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;share&lt;/p&gt; &lt;p&gt;These modules are used during the build phase of a &lt;code&gt;share&lt;/code&gt; install.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;system&lt;/p&gt; &lt;p&gt;These modules are used during the build phase of a &lt;code&gt;system&lt;/code&gt; install.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;load_requires&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;load_requires($phase);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This loads the appropriate modules for the given phase (see &lt;code&gt;requires&lt;/code&gt; above for a description of the phases).&lt;/p&gt; &#xA;&lt;h2&gt;probe&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $install_type = $build-&amp;gt;probe;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attempts to determine if the operating system has the library or tool already installed. If so, then the string &lt;code&gt;system&lt;/code&gt; will be returned and a system install will be performed. If not, then the string &lt;code&gt;share&lt;/code&gt; will be installed and the tool or library will be downloaded and built from source.&lt;/p&gt; &#xA;&lt;p&gt;If the environment variable &lt;code&gt;ALIEN_INSTALL_TYPE&lt;/code&gt; is set, then that will force a specific type of install. If the detection logic cannot accommodate the install type requested then it will fail with an exception.&lt;/p&gt; &#xA;&lt;h2&gt;download&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;download;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the source, usually as a tarball, usually from the internet.&lt;/p&gt; &#xA;&lt;p&gt;Under a &lt;code&gt;system&lt;/code&gt; install this does not do anything.&lt;/p&gt; &#xA;&lt;h2&gt;fetch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $res = $build-&amp;gt;fetch;&#xA;my $res = $build-&amp;gt;fetch($url, %options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fetch a resource using the fetch hook. Returns the same hash structure described below in the hook documentation.&lt;/p&gt; &#xA;&lt;p&gt;[version 2.39]&lt;/p&gt; &#xA;&lt;p&gt;As of &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; 2.39, these options are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;http_headers&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $res = $build-&amp;gt;fetch($url, http_headers =&amp;gt; [ $key1 =&amp;gt; $value1, $key2 =&amp;gt; $value 2, ... ]);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Set the HTTP request headers on all outgoing HTTP requests. Note that not all protocols or fetch plugins support setting request headers, but the ones that do not &lt;em&gt;should&lt;/em&gt; issue a warning if you try to set request headers and they are not supported.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;decode&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $decoded_res = $build-&amp;gt;decode($res);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Decode the HTML or file listing returned by &lt;code&gt;fetch&lt;/code&gt;. Returns the same hash structure described below in the hook documentation.&lt;/p&gt; &#xA;&lt;h2&gt;prefer&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $sorted_res = $build-&amp;gt;prefer($res);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Filter and sort candidates. The preferred candidate will be returned first in the list. The worst candidate will be returned last. Returns the same hash structure described below in the hook documentation.&lt;/p&gt; &#xA;&lt;h2&gt;extract&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $dir = $build-&amp;gt;extract;&#xA;my $dir = $build-&amp;gt;extract($archive);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extracts the given archive into a fresh directory. This is normally called internally to &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt;, and for normal usage is not needed from a plugin or &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;build;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the build step. It is expected that &lt;code&gt;probe&lt;/code&gt; and &lt;code&gt;download&lt;/code&gt; have already been performed. What it actually does depends on the type of install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;share&lt;/p&gt; &lt;p&gt;The source is extracted, and built as determined by the &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; recipe. If there is a &lt;code&gt;gather_share&lt;/code&gt; that will be executed last.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;system&lt;/p&gt; &lt;p&gt;The &lt;code&gt;gather_system&lt;/code&gt; hook will be executed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;test&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;test;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the test phase&lt;/p&gt; &#xA;&lt;h2&gt;clean_install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;clean_install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clean files from the final install location. The default implementation removes all files recursively except for the &lt;code&gt;_alien&lt;/code&gt; directory. This is helpful when you have an old install with files that may break the new build.&lt;/p&gt; &#xA;&lt;p&gt;For a non-share install this doesn&#39;t do anything.&lt;/p&gt; &#xA;&lt;h2&gt;system&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;system($command);&#xA;$build-&amp;gt;system($command, @args);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Interpolates the command and arguments and run the results using the Perl &lt;code&gt;system&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;log&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;log($message);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Send a message to the log. By default this prints to &lt;code&gt;STDOUT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;meta&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $meta = Alien::Build-&amp;gt;meta;&#xA;my $meta = $build-&amp;gt;meta;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns the meta object for your &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; class or instance. The meta object is a way to manipulate the recipe, and so any changes to the meta object should be made before the &lt;code&gt;probe&lt;/code&gt;, &lt;code&gt;download&lt;/code&gt; or &lt;code&gt;build&lt;/code&gt; steps.&lt;/p&gt; &#xA;&lt;h1&gt;META METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;prop&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $href = $build-&amp;gt;meta-&amp;gt;prop;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Meta properties. This is the same as calling &lt;code&gt;meta_prop&lt;/code&gt; on the class or &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; instance.&lt;/p&gt; &#xA;&lt;h2&gt;add_requires&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;Alien::Build-&amp;gt;meta-&amp;gt;add_requires($phase, $module =&amp;gt; $version, ...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the requirement to the given phase. Phase should be one of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;configure&lt;/li&gt; &#xA; &lt;li&gt;any&lt;/li&gt; &#xA; &lt;li&gt;share&lt;/li&gt; &#xA; &lt;li&gt;system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;interpolator&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $interpolator = $build-&amp;gt;meta-&amp;gt;interpolator;&#xA;my $interpolator = Alien::Build-&amp;gt;interpolator;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns the &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Interpolate&#34;&gt;Alien::Build::Interpolate&lt;/a&gt; instance for the &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; class.&lt;/p&gt; &#xA;&lt;h2&gt;has_hook&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $bool = $build-&amp;gt;meta-&amp;gt;has_hook($name);&#xA;my $bool = Alien::Build-&amp;gt;has_hook($name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns if there is a usable hook registered with the given name.&lt;/p&gt; &#xA;&lt;h2&gt;register_hook&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;meta-&amp;gt;register_hook($name, $instructions);&#xA;Alien::Build-&amp;gt;meta-&amp;gt;register_hook($name, $instructions);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Register a hook with the given name. &lt;code&gt;$instruction&lt;/code&gt; should be either a code reference, or a command sequence, which is an array reference.&lt;/p&gt; &#xA;&lt;h2&gt;default_hook&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;meta-&amp;gt;default_hook($name, $instructions);&#xA;Alien::Build-&amp;gt;meta-&amp;gt;default_hook($name, $instructions);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Register a default hook, which will be used if the &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; does not register its own hook with that name.&lt;/p&gt; &#xA;&lt;h2&gt;around_hook&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$build-&amp;gt;meta-&amp;gt;around_hook($hook, $code);&#xA;Alien::Build-&amp;gt;meta-&amp;gt;around_hook($name, $code);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wrap the given hook with a code reference. This is similar to a &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; method modifier, except that it wraps around the given hook instead of a method. For example, this will add a probe system requirement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;$build-&amp;gt;meta-&amp;gt;around_hook(&#xA;  probe =&amp;gt; sub {&#xA;    my $orig = shift;&#xA;    my $build = shift;&#xA;    my $type = $orig-&amp;gt;($build, @_);&#xA;    return $type unless $type eq &#39;system&#39;;&#xA;    # also require a configuration file&#xA;    if(-f &#39;/etc/foo.conf&#39;)&#xA;    {&#xA;      return &#39;system&#39;;&#xA;    }&#xA;    else&#xA;    {&#xA;      return &#39;share&#39;;&#xA;    }&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;apply_plugin&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Alien::Build-&amp;gt;meta-&amp;gt;apply_plugin($name);&#xA;Alien::Build-&amp;gt;meta-&amp;gt;apply_plugin($name, @args);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Apply the given plugin with the given arguments.&lt;/p&gt; &#xA;&lt;h1&gt;ENVIRONMENT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; responds to these environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ALIEN_INSTALL_NETWORK&lt;/p&gt; &lt;p&gt;If set to true (the default), then network fetch will be allowed. If set to false, then network fetch will not be allowed.&lt;/p&gt; &lt;p&gt;What constitutes a local vs. network fetch is determined based on the &lt;code&gt;start_url&lt;/code&gt; and &lt;code&gt;local_source&lt;/code&gt; meta properties. An &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt; or plugin &lt;code&gt;could&lt;/code&gt; override this detection (possibly inappropriately), so this variable is not a substitute for properly auditing of Perl modules for environments that require that.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ALIEN_INSTALL_TYPE&lt;/p&gt; &lt;p&gt;If set to &lt;code&gt;share&lt;/code&gt; or &lt;code&gt;system&lt;/code&gt;, it will override the system detection logic. If set to &lt;code&gt;default&lt;/code&gt;, it will use the default setting for the &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;. The behavior of other values is undefined.&lt;/p&gt; &lt;p&gt;Although the recommended way for a consumer to use an &lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt; based &lt;a href=&#34;https://metacpan.org/pod/Alien&#34;&gt;Alien&lt;/a&gt; is to declare it as a static configure and build-time dependency, some consumers may prefer to fallback on using an &lt;a href=&#34;https://metacpan.org/pod/Alien&#34;&gt;Alien&lt;/a&gt; only when the consumer itself cannot detect the necessary package. In some cases the consumer may want the user to opt-in to using an &lt;a href=&#34;https://metacpan.org/pod/Alien&#34;&gt;Alien&lt;/a&gt; before requiring it.&lt;/p&gt; &lt;p&gt;To keep the interface consistent among Aliens, the consumer of the fallback opt-in &lt;a href=&#34;https://metacpan.org/pod/Alien&#34;&gt;Alien&lt;/a&gt; may fallback on the &lt;a href=&#34;https://metacpan.org/pod/Alien&#34;&gt;Alien&lt;/a&gt; if the environment variable &lt;code&gt;ALIEN_INSTALL_TYPE&lt;/code&gt; is set to any value. The rationale is that by setting this environment variable the user is aware that &lt;a href=&#34;https://metacpan.org/pod/Alien&#34;&gt;Alien&lt;/a&gt; modules may be installed and have indicated consent. The actual implementation of this, by its nature would have to be in the consuming CPAN module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ALIEN_BUILD_LOG&lt;/p&gt; &lt;p&gt;The default log class used. See &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Log&#34;&gt;Alien::Build::Log&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Log::Default&#34;&gt;Alien::Build::Log::Default&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ALIEN_BUILD_RC&lt;/p&gt; &lt;p&gt;Perl source file which can override some global defaults for &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt;, by, for example, setting preload and postload plugins.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ALIEN_BUILD_PKG_CONFIG&lt;/p&gt; &lt;p&gt;Override the logic in &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Plugin::PkgConfig::Negotiate&#34;&gt;Alien::Build::Plugin::PkgConfig::Negotiate&lt;/a&gt; which chooses the best &lt;code&gt;pkg-config&lt;/code&gt; plugin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ALIEN_BUILD_PRELOAD&lt;/p&gt; &lt;p&gt;semicolon separated list of plugins to automatically load before parsing your &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ALIEN_BUILD_POSTLOAD&lt;/p&gt; &lt;p&gt;semicolon separated list of plugins to automatically load after parsing your &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DESTDIR&lt;/p&gt; &lt;p&gt;This environment variable will be manipulated during a destdir install.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PKG_CONFIG&lt;/p&gt; &lt;p&gt;This environment variable can be used to override the program name for &lt;code&gt;pkg-config&lt;/code&gt; when using the command line plugin: &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Plugin::PkgConfig::CommandLine&#34;&gt;Alien::Build::Plugin::PkgConfig::CommandLine&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ftp_proxy, all_proxy&lt;/p&gt; &lt;p&gt;If these environment variables are set, it may influence the Download negotiation plugin &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Plugin::Downaload::Negotiate&#34;&gt;Alien::Build::Plugin::Downaload::Negotiate&lt;/a&gt;. Other proxy variables may be used by some Fetch plugins, if they support it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;SUPPORT&lt;/h1&gt; &#xA;&lt;p&gt;The intent of the &lt;code&gt;Alien-Build&lt;/code&gt; team is to support as best as possible all Perls from 5.8.4 to the latest production version. So long as they are also supported by the Perl toolchain.&lt;/p&gt; &#xA;&lt;p&gt;Please feel encouraged to report issues that you encounter to the project GitHub Issue tracker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PerlAlien/Alien-Build/issues&#34;&gt;https://github.com/PerlAlien/Alien-Build/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Better if you can fix the issue yourself, please feel encouraged to open pull-request on the project GitHub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PerlAlien/Alien-Build/pulls&#34;&gt;https://github.com/PerlAlien/Alien-Build/pulls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are confounded and have questions, join us on the &lt;code&gt;#native&lt;/code&gt; channel on irc.perl.org. The &lt;code&gt;Alien-Build&lt;/code&gt; developers frequent this channel and can probably help point you in the right direction. If you don&#39;t have an IRC client handy, you can use this web interface:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chat.mibbit.com/?channel=%23native&amp;amp;server=irc.perl.org&#34;&gt;https://chat.mibbit.com/?channel=%23native&amp;amp;server=irc.perl.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::AlienAuthor&#34;&gt;Alien::Build::Manual::AlienAuthor&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::AlienUser&#34;&gt;Alien::Build::Manual::AlienUser&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::Contributing&#34;&gt;Alien::Build::Manual::Contributing&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::FAQ&#34;&gt;Alien::Build::Manual::FAQ&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Manual::PluginAuthor&#34;&gt;Alien::Build::Manual::PluginAuthor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::MM&#34;&gt;Alien::Build::MM&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Plugin&#34;&gt;Alien::Build::Plugin&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Alien&#34;&gt;Alien&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;THANKS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt; was originally written by Joel Berger, the rest of this project would not have been possible without him getting the project started. Thanks to his support I have been able to augment the original &lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt; system with a reliable set of tools (&lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/alienfile&#34;&gt;alienfile&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Test::Alien&#34;&gt;Test::Alien&lt;/a&gt;), which make up this toolset.&lt;/p&gt; &#xA;&lt;p&gt;The original &lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt; is still copyright (c) 2012-2020 Joel Berger. It has the same license as the rest of the Alien::Build and related tools distributed as &lt;code&gt;Alien-Build&lt;/code&gt;. Joel Berger thanked a number of people who helped in in the development of &lt;a href=&#34;https://metacpan.org/pod/Alien::Base&#34;&gt;Alien::Base&lt;/a&gt;, in the documentation for that module.&lt;/p&gt; &#xA;&lt;p&gt;I would also like to acknowledge the other members of the PerlAlien github organization, Zakariyya Mughal (sivoais, ZMUGHAL) and mohawk (ETJ). Also important in the early development of &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; were the early adopters Chase Whitener (genio, CAPOEIRAB, author of &lt;a href=&#34;https://metacpan.org/pod/Alien::libuv&#34;&gt;Alien::libuv&lt;/a&gt;), William N. Braswell, Jr (willthechill, WBRASWELL, author of &lt;a href=&#34;https://metacpan.org/pod/Alien::JPCRE2&#34;&gt;Alien::JPCRE2&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Alien::PCRE2&#34;&gt;Alien::PCRE2&lt;/a&gt;) and Ahmad Fatoum (a3f, ATHREEF, author of &lt;a href=&#34;https://metacpan.org/pod/Alien::libudev&#34;&gt;Alien::libudev&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Alien::LibUSB&#34;&gt;Alien::LibUSB&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The Alien ecosystem owes a debt to Dan Book, who goes by Grinnz on IRC, for answering question about how to use &lt;a href=&#34;https://metacpan.org/pod/Alien::Build&#34;&gt;Alien::Build&lt;/a&gt; and friends.&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Author: Graham Ollis &lt;a href=&#34;mailto:plicease@cpan.org&#34;&gt;plicease@cpan.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Contributors:&lt;/p&gt; &#xA;&lt;p&gt;Diab Jerius (DJERIUS)&lt;/p&gt; &#xA;&lt;p&gt;Roy Storey (KIWIROY)&lt;/p&gt; &#xA;&lt;p&gt;Ilya Pavlov&lt;/p&gt; &#xA;&lt;p&gt;David Mertens (run4flat)&lt;/p&gt; &#xA;&lt;p&gt;Mark Nunberg (mordy, mnunberg)&lt;/p&gt; &#xA;&lt;p&gt;Christian Walde (Mithaldu)&lt;/p&gt; &#xA;&lt;p&gt;Brian Wightman (MidLifeXis)&lt;/p&gt; &#xA;&lt;p&gt;Zaki Mughal (zmughal)&lt;/p&gt; &#xA;&lt;p&gt;mohawk (mohawk2, ETJ)&lt;/p&gt; &#xA;&lt;p&gt;Vikas N Kumar (vikasnkumar)&lt;/p&gt; &#xA;&lt;p&gt;Flavio Poletti (polettix)&lt;/p&gt; &#xA;&lt;p&gt;Salvador Fandiño (salva)&lt;/p&gt; &#xA;&lt;p&gt;Gianni Ceccarelli (dakkar)&lt;/p&gt; &#xA;&lt;p&gt;Pavel Shaydo (zwon, trinitum)&lt;/p&gt; &#xA;&lt;p&gt;Kang-min Liu (劉康民, gugod)&lt;/p&gt; &#xA;&lt;p&gt;Nicholas Shipp (nshp)&lt;/p&gt; &#xA;&lt;p&gt;Juan Julián Merelo Guervós (JJ)&lt;/p&gt; &#xA;&lt;p&gt;Joel Berger (JBERGER)&lt;/p&gt; &#xA;&lt;p&gt;Petr Písař (ppisar)&lt;/p&gt; &#xA;&lt;p&gt;Lance Wicks (LANCEW)&lt;/p&gt; &#xA;&lt;p&gt;Ahmad Fatoum (a3f, ATHREEF)&lt;/p&gt; &#xA;&lt;p&gt;José Joaquín Atria (JJATRIA)&lt;/p&gt; &#xA;&lt;p&gt;Duke Leto (LETO)&lt;/p&gt; &#xA;&lt;p&gt;Shoichi Kaji (SKAJI)&lt;/p&gt; &#xA;&lt;p&gt;Shawn Laffan (SLAFFAN)&lt;/p&gt; &#xA;&lt;p&gt;Paul Evans (leonerd, PEVANS)&lt;/p&gt; &#xA;&lt;p&gt;Håkon Hægland (hakonhagland, HAKONH)&lt;/p&gt; &#xA;&lt;p&gt;nick nauwelaerts (INPHOBIA)&lt;/p&gt; &#xA;&lt;h1&gt;COPYRIGHT AND LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This software is copyright (c) 2011-2022 by Graham Ollis.&lt;/p&gt; &#xA;&lt;p&gt;This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-Test-Pod-CoverageChange</title>
    <updated>2022-08-05T01:49:08Z</updated>
    <id>tag:github.com,2022-08-05:/binary-com/perl-Test-Pod-CoverageChange</id>
    <link href="https://github.com/binary-com/perl-Test-Pod-CoverageChange" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wraps Test::Pod::Coverage to support undocumented subs and statistics on changed coverage&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Perl test POD coverage change&lt;/p&gt; &#xA;&lt;h1&gt;VERSION&lt;/h1&gt; &#xA;&lt;p&gt;version 0.001&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Test::Pod::CoverageChange qw(pod_coverage_syntax_ok);&#xA;&#xA;pod_coverage_syntax_ok(&#39;lib&#39;, {&#xA;    MyModule::Bar =&amp;gt; 3,  ## expected to have 3 naked subs&#xA;    MyModule::Foo =&amp;gt; 10, ## expected to have 10 naked subs&#xA;    MyModule::Baz =&amp;gt; 1,  ## expected to have 1 naked subs&#xA;    MyModule::Qux =&amp;gt; 5,  ## expected to have 5 naked subs&#xA;}, [&#xA;    We::Ignore::ThisModule,&#xA;    We::Also::Ignore::This::Module&#xA;],[&#xA;    &#39;a_sub_name_to_ignore&#39;&#xA;    qr/regexes are also acceptable/&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;Wraps Test::Pod::Coverage and Pod::Checker modules to support undocumented subs and statistics on changed coverage.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;passes&lt;/strong&gt; if the file have no POD syntax or coverage error.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;fails&lt;/strong&gt; if latest changes increased/decreased numbers of naked sub for the packages that have allowed naked subs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;fails&lt;/strong&gt; if a package allowed to have naked subs has 100% POD coverage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;fails&lt;/strong&gt; if a file in a given path has POD syntax error or has no POD.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Deriv Services Ltd. C&amp;lt;&amp;lt; &lt;a href=&#34;mailto:DERIV@cpan.org&#34;&gt;DERIV@cpan.org&lt;/a&gt; &amp;gt;&amp;gt;.&lt;/p&gt; &#xA;&lt;h1&gt;COPYRIGHT AND LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This software is copyright (c) 2020 by deriv.com.&lt;/p&gt; &#xA;&lt;p&gt;This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.&lt;/p&gt;</summary>
  </entry>
</feed>