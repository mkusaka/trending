<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-09T01:36:48Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Debian/debhelper</title>
    <updated>2022-12-09T01:36:48Z</updated>
    <id>tag:github.com,2022-12-09:/Debian/debhelper</id>
    <link href="https://github.com/Debian/debhelper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Debian/devscripts</title>
    <updated>2022-12-09T01:36:48Z</updated>
    <id>tag:github.com,2022-12-09:/Debian/devscripts</id>
    <link href="https://github.com/Debian/devscripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of https://salsa.debian.org/debian/devscripts.git&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Debian devscripts package&lt;/h1&gt; &#xA;&lt;p&gt;Devscripts provides several scripts which may be of use to Debian developers. The following gives a summary of the available scripts -- please read the manpages for full details about the use of these scripts. They are contributed by multiple developers; for details of the authors, please see the code or manpages.&lt;/p&gt; &#xA;&lt;p&gt;Also, many of these scripts have dependencies on other packages, but rather than burden the package with a large number of dependencies, most of which will not be needed by most people, the individual dependencies are listed as &#34;Recommends&#34; in the control file; lastly, scripts that are unlikely to be used by many people have their dependencies categorized as &#34;Suggests&#34; in the control file. This ensures that the packages will be installed by default but allows users to remove them if desired. The dependencies and recommendations are listed in square brackets in the description below, as well as in the Description field in the control file. The scripts marked with an asterisk (&#39;*&#39;) are considered &#34;core&#34;, and as such have their dependencies all listed as hard &#34;Depends&#34;.&lt;/p&gt; &#xA;&lt;p&gt;And now, in alphabetical order, the scripts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;annotate-output: run a command and prepend time and stream (O for stdout, E for stderr) for every line of output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;archpath: Prints arch (tla/Bazaar) package names. Also supports calculating the package names for other branches. [tla | bazaar]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;bts: A command-line tool for accessing the Debian Bug Tracking System, both to send mails to &lt;a href=&#34;mailto:control@bts.debian.org&#34;&gt;control@bts.debian.org&lt;/a&gt; and to access the web pages and SOAP interface of the BTS. [www-browser, libauthen-sasl-perl, libnet-smtps-perl, libsoap-lite-perl, liburi-perl, libwww-perl, bsd-mailx | mailx]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;build-rdeps: Searches for all packages that build-depend on a given package. [dctrl-tools, dose-extra, libdpkg-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;chdist: tool to easily play with several distributions. [dctrl-tools]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;checkbashisms: check whether a /bin/sh script contains any common bash-specific constructs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cowpoke: upload a Debian source package to a cowbuilder host and build it, optionally also signing and uploading the result to an incoming queue. [ssh-client]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cvs-debi, cvs-debc: wrappers around debi and debc respectively (see below) which allow them to be called from the CVS working directory. [cvs-buildpackage]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cvs-debrelease: wrapper around debrelease which allows it to be called from the CVS working directory. [cvs-buildpackage, dupload | dput, ssh-client]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cvs-debuild: A wrapper for cvs-buildpackage to use debuild as its package building program. [cvs-buildpackage, fakeroot, lintian, gnupg |gnupg2]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dcmd: run a given command replacing the name of a .changes or .dsc file with each of the files referenced therein. *&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dd-list: given a list of packages, pretty-print it ordered by maintainer. *&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debbisect: bisect snapshot.debian.org to find which change in the archive introduced a certain problem. [mmdebstrap, python3-debian]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debc: List contents of current package. Do this after a successful &#34;debuild&#34; to see if the package looks all right.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debchange (abbreviation dch): Modifies debian/changelog and manages version numbers for you. It will either increment the version number or add an entry for the current version, depending upon the options given to it. [libdistro-info-perl, libsoap-lite-perl]*&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debcheckout: checkout the development repository of a Debian package. *&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debclean: Clean a Debian source tree. Debclean will clean all Debian source trees below the current directory, and if requested, also remove all files that were generated from these source trees (that is .deb, .dsc and .changes files). It will keep the .diffs and original files, though, so that the binaries and other files can be rebuilt if necessary. [fakeroot]*&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debcommit: Commits changes to cvs, darcs, svn, svk, tla, bzr, git, or hg, using new entries in debian/changelog as the commit message. Also supports tagging Debian package releases. [cvs | darcs | subversion | svk | tla | bzr | git-core | mercurial, libtimedate-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debdiff: A program which examines two .deb files or two .changes files and reports on any difference found in their file lists. Useful for ensuring that no files were inadvertently lost between versions. Can also examine two .dsc files and report on the changes between source versions. For a deeper comparison one can use the diffoscope package. [wdiff, patchutils]*&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debdiff-apply: Apply unified diffs of two Debian source packages, such as those generated by debdiff, to a target Debian source package. Any changes to debian/changelog are dealt with specially, to avoid the conflicts that changelog diffs typically produce when applied naively. May be used to check that old patches still apply to newer versions of those packages. [python3-debian, python3-unidiff, quilt]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debi: Installs the current package by using the setuid root debpkg script described below. It assumes that the current package has just been built (for example by debuild), and the .deb lives in the parent directory, and will effectively run dpkg -i on the .deb. The ability to install the package with a very short command is very useful when troubleshooting packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debootsnap: Combines debootstrap and snapshot.debian.org to create a chroot containing exactly the requested selection of packages. This can be used to re-create a chroot from the past, for example to reproduce a bug. The tool is also used by debrebuild to build a package in a chroot with build dependencies in the same version as recorded in the buildinfo file. [python3-pycurl, mmdebstrap]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debpkg: A wrapper for dpkg used by debi to allow convenient testing of packages. For debpkg to work, it needs to be made setuid root, and this needs to be performed by the sysadmin -- it is not installed as setuid root by default. (Note that being able to run a setuid root debpkg is effectively the same as having root access to the system, so this should be done with caution.) Having debpkg as a wrapper for dpkg can be a Good Thing (TM), as it decreases the potential for damage by accidental wrong use of commands in superuser mode (e.g., an inadvertent rm -rf * in the wrong directory is disastrous as many can attest to).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debrelease: A wrapper around dupload or dput which figures out which version to upload, and then calls dupload or dput to actually perform the upload. [dupload | dput, ssh-client]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debrebuild: A script that provided a .buildinfo file reports the instructions on how to try to reproduce the reported build. [sbuild | mmdebstrap, python3-pycurl, libdpkg-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debrepro: A script that tests reproducibility of Debian packages. It will build a given source directory twice, with a set of variation between the first and second build, and compare the binary packages produced. If diffoscope is installed, it is used to compare non-matching binaries. If disorderfs is installed, it is used during the build to inject non-determinism in filesystem listing operations. [faketime, diffoscope, disorderfs]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debrsign: This transfers a .changes/.dsc pair to a remote machine for signing, and runs debsign on the remote machine over an SSH connection. [gnupg | gnupg2, debian-keyring, ssh-client]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debsign: Use GNU Privacy Guard to sign the changes (and possibly dsc) files created by running dpkg-buildpackage with no-sign options. Useful if you are building a package on a remote machine and wish to sign it on a local one. This script is capable of automatically downloading the .changes and .dsc files from a remote machine. [gnupg |gnupg2, debian-keyring, ssh-client]*&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debsnap: grab packages from &lt;a href=&#34;https://snapshot.debian.org&#34;&gt;https://snapshot.debian.org&lt;/a&gt; [libwww-perl, libjson-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;debuild: A wrapper for building a package (i.e., dpkg-buildpackage) to avoid problems with insufficient permissions and wrong paths etc. Debuild will set up the proper environment for building a package. Debuild will use the fakeroot program to build the package by default, but can be instructed to use any other gain-root command, or can even be installed setuid root. Debuild can also be used to run various of the debian/rules operations with the same root-gaining procedure. Debuild will also run lintian to check that the package does not have any major policy violations. [fakeroot, lintian, gnupg | gnupg2]*&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;deb-janitor: command-line client for interacting with the Debian Janitor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;deb-reversion: increases a binary package version number and repacks the package, useful for porters and the like.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;deb-why-removed: shows the reason a package was removed from the archive. [libdpkg-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dep3changelog: generate a changelog entry from a DEP3-style patch header.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;desktop2menu: given a freedesktop.org desktop file, generate a skeleton for a menu file. [libfile-desktopentry-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dget: Downloads Debian source and binary packages. Point at a .changes or .dsc to download all references files. Specify a package name to download it from the configured apt repository. [wget | curl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;diff2patches: extracts patches from a .diff.gz file placing them under debian/ or, if present, debian/patches. [patchutils]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dpkg-depcheck, dpkg-genbuilddeps: Runs a specified command (such as debian/rules build) or dpkg-buildpackage, respectively, to determine the packages used during the build process. This information can be helpful when trying to determine the packages needed in the Build-Depends etc. lines in the debian/control file. [build-essential, strace]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dscextract: extract a single file from a Debian source package. [patchutils]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;dscverify: check the signature and MD5 sums of a dsc file against the most current Debian keyring on your system. [gnupg | gnupg2, debian-keyring]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;edit-patch: add/edit a patch for a source package and commit the changes. [quilt | dpatch | cdbs]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;getbuildlog: download package build logs from Debian auto-builders. [wget]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;git-deborig: try to produce Debian orig.tar using git-archive(1). [libdpkg-perl, libgit-wrapper-perl, liblist-compare-perl, libstring-shellquote-perl, libtry-tiny-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;grep-excuses: grep britney&#39;s excuses to find out what is happening to your packages. [libdbd-pg-perl, libterm-size-perl, libyaml-syck-perl, wget, w3m]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;hardening-check: report the hardening characteristics of a set of binaries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;list-unreleased: searches for packages marked UNRELEASED in their changelog.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ltnu (Long Time No Upload): List all uploads of packages by the given uploader or maintainer and display them ordered by the last upload of that package, oldest uploads first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;manpage-alert: locate binaries without corresponding manpages. [man-db]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;mass-bug: mass-file bug reports. [bsd-mailx | mailx]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;mergechanges: merge .changes files from the same release but built on different architectures.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;mk-build-deps: Given a package name and/or control file, generate a binary package which may be installed to satisfy the build-dependencies of the given package. [equivs]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;mk-origtargz: Rename upstream tarball, optionally changing the compression and removing unwanted files. [libfile-which-perl, unzip, xz-utils, file]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;namecheck: Check project names are not already taken.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;nmudiff: prepare a diff of this version (presumably an NMU against the previously released version (as per the changelog) and submit the diff to the BTS. [patchutils, mutt]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;origtargz: fetch the orig tarball of a Debian package from various sources, and unpack it. [pristine-tar, pristine-lfs]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;plotchangelog: display information from a changelog graphically using gnuplot. [libtimedate-perl, gnuplot]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pts-subscribe: subscribe to the PTS (Package Tracking System) for a limited period of time. [bsd-mailx | mailx, at]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rc-alert: list installed packages which have release-critical bugs. [wget | curl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;reproducible-check: reports on the reproducible status of installed packages. For more details please see &lt;a href=&#34;https://reproducible-builds.org&#34;&gt;https://reproducible-builds.org&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rmadison: remotely query the Debian archive database about packages. [liburi-perl, wget | curl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;sadt: run DEP-8 tests. [python3-debian]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;salsa: manipulates salsa.debian.org repositories and users [libgitlab-api-v4-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;suspicious-source: output a list of files which are not common source files. [python3-magic]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;svnpath: Prints the path to the Subversion repository of a Subversion checkout. Also supports calculating the paths for branches and tags in a repository independent fashion. Used by debcommit to generate svn tags. [subversion]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;tagpending: runs from a Debian source tree and tags bugs that are to be closed in the latest changelog as pending. [libsoap-lite-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;transition-check: Check a list of source packages for involvement in transitions for which uploads to unstable are currently blocked. [libwww-perl, libyaml-syck-perl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;uscan: Automatically scan for and download upstream updates. Uscan can also call a program such as uupdate to attempt to update the Debianised version based on the new update. Whilst uscan could be used to release the updated version automatically, it is probably better not to without testing it first. Uscan can also verify detached OpenPGP signatures if upstream&#39;s signing key is known. [file, gpgv | gpgv2, gnupg | gnupg2, libfile-dirlist-perl, libfile-touch-perl, libfile-which-perl, liblwp-protocol-https-perl, libmoo-perl, libwww-perl, unzip, xz-utils]*&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;uupdate: Update the package with an archive or patches from an upstream author. This will be of help if you have to update your package. It will try to apply the latest diffs to your package and tell you how successful it was. [patch]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;what-patch: determine what patch system, if any, a source package is using. [patchutils]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;whodepends: check which maintainers&#39; packages depend on a package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;who-permits-upload: Retrieve information about Debian Maintainer access control lists. [gnupg | gnupg2, libencode-locale-perl, libwww-perl, debian-keyring]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;who-uploads: determine the most recent uploaders of a package to the Debian archive. [gnupg | gnupg2, debian-keyring, debian-maintainers, wget]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;wnpp-alert: list installed packages which are orphaned or up for adoption. [wget | curl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;wnpp-check: check whether there is an open request for packaging or intention to package bug for a package. [wget | curl]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;wrap-and-sort: wrap long lines and sort items in packaging files. [python3-debian]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;/usr/share/doc/devscripts/examples: This directory contains examples of procmail and exim scripts for sorting mail arriving to Debian mailing lists.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Typical Maintenance cycle with devscripts&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;cd &lt;source directory of package&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Editing of files&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Log the changes with: dch -i &#34;I changed this&#34; If desired, use debcommit to commit changes to cvs, svn, arch or git.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run debuild to compile it. If it fails, return to 2. (You could also just test the compilation by running the appropriate part of debian/rules.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check if package contents appear to be ok with &#34;debc&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the package with &#34;debi&#34; and test the functionality it should provide. (Note that this step requires debpkg to be setuid root, or you to be logged in as root or similar.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If all is ok release it by running debrelease.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optionally, use debcommit --release to commit and tag the release in revision control.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Wrapper scripts&lt;/h2&gt; &#xA;&lt;p&gt;Devscripts includes two wrappers (the above mentioned &#34;debuild&#34; and &#34;debpkg&#34;) that are intended to make life easier for Debian developers. These wrappers unset most environment variables for security reasons, set a secure PATH and then run the appropriate program (such as dpkg). Processing Makefiles is inherently dangerous though, since any UNIX command can be executed. The fakeroot command makes it possible to build a package in a secure way: it does not require any genuine root access, but rather pretends that it has it. It is strongly recommended that you install the &#34;fakeroot&#34; package! Installation of a package with dpkg always requires superuser mode and is therefore inherently dangerous. Debi aims to reduce the possibility of typos by only performing a dpkg -i as root. This does not, however, do anything for security, as there is no problem creating a package with a setuid-root shell using fakeroot and then installing it with debpkg. So only allow trusted users access to a setuid root debpkg, if at all!&lt;/p&gt; &#xA;&lt;p&gt;The wrappers have to be manually equipped to gain the necessary privileges to do their jobs because of security concerns. You have to equip &#34;debpkg&#34; with superuser privileges. &#34;debuild&#34; needs superuser privileges only if fakeroot or another gain-root command is not available.&lt;/p&gt; &#xA;&lt;p&gt;You can either:&lt;/p&gt; &#xA;&lt;p&gt;(a) invoke these wrappers from &#34;sudo&#34; or &#34;super&#34; or any other way you have to control superuser access, or&lt;/p&gt; &#xA;&lt;p&gt;(b) you can set them up to be accessible only to a group of users. (Some people suggest that this is highly dangerous since it creates another executable that runs with the setuid root bit set and which won&#39;t ever ask you for a password!) If you choose this method, it can be done by issuing the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  dpkg-statoverride --update --add root root_group 4754 /usr/bin/debpkg&#xA;&#xA;once (and similarly for debuild if you really need it).  This will&#xA;enable access to debpkg for all users who are members of the group&#xA;&#34;root_group&#34;.  Remember that you are in effect giving those users&#xA;superuser access to your system!  This information will be stored&#xA;in the dpkg database and remembered across upgrades.&#xA;&#xA;Because of the security implications, only do this on your home&#xA;Linux box, NOT on a busy internet server (and possibly not even&#xA;there).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Originally by Christoph Lameter &lt;a href=&#34;mailto:clameter@waterf.org&#34;&gt;clameter@waterf.org&lt;/a&gt; Modified extensively by Julian Gilbey &lt;a href=&#34;mailto:jdg@debian.org&#34;&gt;jdg@debian.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>