<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-14T01:50:24Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>riywo/Acme-Anime</title>
    <updated>2022-07-14T01:50:24Z</updated>
    <id>tag:github.com,2022-07-14:/riywo/Acme-Anime</id>
    <link href="https://github.com/riywo/Acme-Anime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is Perl module Acme::Anime.&lt;/p&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;Type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -L http://cpanmin.us | perl - Acme::Anime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install cpanm and then run the following command to install Acme::Anime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cpanm Acme::Anime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get an archive of this distribution, unpack it and build it as per the usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tar xzf Acme-Anime-$version.tar.gz&#xA;$ cd Acme-Anime-$version&#xA;$ perl Makefile.PL&#xA;$ make &amp;amp;&amp;amp; make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DOCUMENTATION&lt;/p&gt; &#xA;&lt;p&gt;Acme::Anime documentation is available as in POD. So you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ perldoc Acme::Anime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to read the documentation online with your favorite pager.&lt;/p&gt; &#xA;&lt;p&gt;LICENSE AND COPYRIGHT&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012, &amp;lt;&#xA; &lt;your name here&gt;&#xA;  &amp;gt;. All rights reserved.&#xA; &lt;/your&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jlord/git-it-electron</title>
    <updated>2022-07-14T01:50:24Z</updated>
    <id>tag:github.com,2022-07-14:/jlord/git-it-electron</id>
    <link href="https://github.com/jlord/git-it-electron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ’» ðŸŽ“ Git-it is a (Mac, Win, Linux) Desktop App for Learning Git and GitHub&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Git-it (Desktop App)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/jlord/git-it-electron&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jlord/git-it-electron.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://standardjs.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;js-standard-style&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1305617/14594613/23873f64-04ed-11e6-9d3b-72f424dd0842.png&#34; alt=&#34;screen shot 2016-04-17 at 10 37 55 pm&#34;&gt; Git-it is a desktop (Mac, Windows and Linux) app that teaches you how to use Git and GitHub on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Command-line_interface&#34;&gt;command line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ðŸš©The app includes translations in these languages: Spanish (ES), Spanish (CO), French, Portugese (BR), Ukrainian, Traditional Chinese, Japanese, and Korean. ðŸš©&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Previously it ran &lt;em&gt;in&lt;/em&gt; terminal (the command line application) with a guide online but now the guide &lt;em&gt;is&lt;/em&gt; the app and it runs on your desktop on its own &lt;span&gt;âœ¨&lt;/span&gt; &lt;strong&gt;This will be the only maintained version going forward&lt;/strong&gt; &lt;span&gt;âž¡&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Hello future Forkers, Branchers and Pull Requesters!&lt;/h2&gt; &#xA;&lt;p&gt;This application contains challenges for learning Git and GitHubâ€”by using &lt;em&gt;real&lt;/em&gt; Git and GitHub, not emulators. You&#39;ll be learning the awesome (and not so scary) command line and GitHub which means when you finish all of the challenges you&#39;ll have &lt;em&gt;real&lt;/em&gt; repositories on your GitHub account and green squares on your &lt;a href=&#34;https://github.com/blog/1360-introducing-contributions&#34;&gt;contribution chart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jlord/git-it/master/ghcc.png&#34; alt=&#34;contributions&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What to Install&lt;/h2&gt; &#xA;&lt;p&gt;You will need this app, Git-it as well as a text editor. You&#39;ll also of course need Git and the first challenge in Git-it helps you get that set up. But if you want to get a head start, go for it! You&#39;ll continue to use Git and your text editor throughout your bright social coding future.&lt;/p&gt; &#xA;&lt;p&gt;As a part of the challenges you&#39;ll also create a (free) account on GitHub. If you&#39;ve already got one, high-five!&lt;/p&gt; &#xA;&lt;h4&gt;Git&lt;/h4&gt; &#xA;&lt;p&gt;We recommend installing &lt;a href=&#34;http://desktop.github.com&#34;&gt;GitHub Desktop&lt;/a&gt; (free) because it installs Git in the most consistent way across supported operating systems (Windows and Mac). We won&#39;t use the app itself in the challenges (but it is really useful once you get going in Git!), just the Git that it install for you.&lt;/p&gt; &#xA;&lt;p&gt;Noteâ€”If you&#39;re using Windows, you should use the &lt;strong&gt;Git Shell&lt;/strong&gt; app as your terminalâ€”it is installed with GitHub Desktop. In Mac and Linux you can use the app &lt;strong&gt;Terminal&lt;/strong&gt;, which is already on your computer.&lt;/p&gt; &#xA;&lt;h4&gt;Text Editor&lt;/h4&gt; &#xA;&lt;p&gt;I&#39;m quite partial (I&#39;m on the team!) but &lt;a href=&#34;http://atom.io&#34;&gt;Atom&lt;/a&gt; is a great text editor (also free) and it is built on &lt;a href=&#34;http://electron.atom.io&#34;&gt;Electron.js&lt;/a&gt;, just like Git-it. Visit the website and download the version for your operating system. &lt;a href=&#34;https://www.sublimetext.com&#34;&gt;Sublime&lt;/a&gt;, &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Microsoft VS Code&lt;/a&gt; and &lt;a href=&#34;http://brackets.io&#34;&gt;Adobe Brackets&lt;/a&gt; are other options.&lt;/p&gt; &#xA;&lt;h4&gt;Git-it&lt;/h4&gt; &#xA;&lt;p&gt;You can view the &lt;a href=&#34;http://github.com/jlord/git-it-electron/releases&#34;&gt;releases&lt;/a&gt; section of this repository to find the download for your operating system. Click to download your version. Once it has downloaded to your default Downloads directory, unzip the folder and run the Git-it executable. The executables for Mac, Windows and Linux:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1305617/14696588/2b10abf8-0731-11e6-945e-f3d57114bce9.png&#34; alt=&#34;executables&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mac&lt;/strong&gt; Right (control) click the Git-it icon, select Open and then Open again. You can drag the icon into your Applications directory if you want, but it&#39;s not required. If needed, more &lt;a href=&#34;https://github.com/jlord/git-it-electron/issues/121#issue-149747488&#34;&gt;detailed installation instructions&lt;/a&gt; can be found in this issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt; Double-click the executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt; Double-click the executable. If the app isn&#39;t running, &lt;a href=&#34;https://github.com/jlord/git-it-electron/issues/182&#34;&gt;see this issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started!&lt;/h2&gt; &#xA;&lt;p&gt;Open Git-it and click the button to begin the first challenge. Have your terminal and text editor open, too. Follow along with the instructions in each challenge and use the terminal or editor as instructed.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;ve completed the steps in a challenge click &#39;Verify&#39;. Depending on the challenge you may need to also select the folder you did your work in for Git-it to verify.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Questions?&lt;/strong&gt; &lt;a href=&#34;http://github.com/jlord/git-it-electron/issues/new&#34;&gt;Open an issue&lt;/a&gt; on this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to contribute or build locally?&lt;/strong&gt; See the &lt;a href=&#34;https://raw.githubusercontent.com/jlord/git-it-electron/master/CONTRIBUTING.md&#34;&gt;contributing documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Tips For Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code snippets&lt;/strong&gt; often times look like &lt;code&gt;$ some code-stuff --here&lt;/code&gt;. The dollar sign identifies the line as one a user would enter into the command line, but you don&#39;t actually include it when you type it into terminal. In this case, you&#39;d actually just type &lt;code&gt;some code-stuff --here&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt; are indicated by &lt;code&gt;&amp;lt;VARIABLENAME&amp;gt;&lt;/code&gt; in code snippets. When you actually use the line of code, replace &lt;code&gt;&amp;lt;VARIABLENAME&amp;gt;&lt;/code&gt;, with your variable. For instance to make a new folder in terminal the format is, &lt;code&gt;mkdir &amp;lt;FOLDERNAME&amp;gt;&lt;/code&gt;, so if you wanted to make a folder named &#39;octocat&#39;, you&#39;d type: &lt;code&gt;mkdir octocat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Command line, terminal and bash&lt;/strong&gt; all basically mean the same thing: the MS-DOS, Doogie Howser looking screen full of words and numbers. It&#39;s awesomely powerful and allows you to control your computer with text commands.&lt;/p&gt; &#xA;&lt;p&gt;You can do a lot of things from your terminal like delete, rename, copy or create files and folders; run scripts and send things back and forth between servers (like the ones storing things on GitHub.com) and your computer (also a server!).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lilt/tec</title>
    <updated>2022-07-14T01:50:24Z</updated>
    <id>tag:github.com,2022-07-14:/lilt/tec</id>
    <link href="https://github.com/lilt/tec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lilt/tec/main/assets/tec.png&#34; alt=&#34;TEC header image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This repository contains the official data and evaluation code for the NAACL 2022 paper:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Automatic Correction of Human Translations&lt;/strong&gt;&lt;br&gt; Jessy Lin, Geza Kovacs, Aditya Shastry, Joern Wuebker, and John DeNero&lt;br&gt; &lt;a href=&#34;https://arxiv.org/abs/2206.08593&#34;&gt;[arXiv]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The ACED Corpus&lt;/h2&gt; &#xA;&lt;p&gt;You can load the corpus directly from the &lt;code&gt;data/&lt;/code&gt; directory. The corpus consists of three translation error correction datasets from different domains: &lt;code&gt;asics&lt;/code&gt; (marketing), &lt;code&gt;emerson&lt;/code&gt; (technical), and &lt;code&gt;digitalocean&lt;/code&gt; (technical). For more information on the data, please refer to our paper.&lt;/p&gt; &#xA;&lt;p&gt;Each directory contains the train, dev, test data, with the following files for each:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  .src: English source sentence (s)&#xA;  .pert: original German translation (t)&#xA;  .tgt: corrected German translation (t&#39;) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;To install the (minimal) dependencies for evaluation, we recommend setting up a virtualenv:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n tec python=3.8&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Precision, Recall, and F-scores with MaxMatch&lt;/h4&gt; &#xA;&lt;p&gt;To calculate precision, recall, and F-scores, we use the &lt;code&gt;errant&lt;/code&gt; toolkit to generate and compare MaxMatch (M2) files.&lt;/p&gt; &#xA;&lt;p&gt;You can evaluate a model output file (one sentence per line) by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh eval_m2.sh &amp;lt;dataset&amp;gt; &amp;lt;split&amp;gt; /path/to/model/output.tgt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where dataset is one of &lt;code&gt;{asics, cricut, digitalocean}&lt;/code&gt; and split is one of &lt;code&gt;{dev, test}&lt;/code&gt;. This script generates the gold and hypothesis m2 files and outputs the precision, recall, and F-0.5 scores with &lt;code&gt;errant_compare&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;GLEU&lt;/h4&gt; &#xA;&lt;p&gt;The scripts to evaluate models on the GLEU metric were adapted from the following repo: &lt;a href=&#34;https://github.com/cnap/gec-ranking&#34;&gt;https://github.com/cnap/gec-ranking&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can evaluate a model output file (one sentence per line) by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh eval_gleu.sh &amp;lt;dataset&amp;gt; &amp;lt;split&amp;gt; /path/to/model/output.tgt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sentence-level Accuracy&lt;/h4&gt; &#xA;&lt;p&gt;Error labels are provided for the ASICS test set. You can evaluate the per-category sentence-level accuracy by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh eval_sentence_level.sh /path/to/model/output.tgt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{lin2022automatic,&#xA;  title={Automatic Correction of Human Translations},&#xA;  author={Lin, Jessy and Kovacs, Geza and Shastry, Aditya and Wuebker, Joern and DeNero, John},&#xA;  booktitle={{NAACL}},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We use code from the following repositories for our evaluation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moses-smt/mosesdecoder&#34;&gt;moses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrisjbryant/errant&#34;&gt;errant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cnap/gec-ranking&#34;&gt;gec-ranking&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>