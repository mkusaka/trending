<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:37:03Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jacobtolar/xmobar-stocks</title>
    <updated>2022-10-16T01:37:03Z</updated>
    <id>tag:github.com,2022-10-16:/jacobtolar/xmobar-stocks</id>
    <link href="https://github.com/jacobtolar/xmobar-stocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;quick and dirty perl script to show market info in xmobar&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xmobar-stocks&lt;/h1&gt; &#xA;&lt;p&gt;quick and dirty perl script to show market info in xmobar.&lt;/p&gt; &#xA;&lt;h2&gt;Synopsis&lt;/h2&gt; &#xA;&lt;p&gt;To run on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xmobar-stocks &#34;jpm$&#34; &#34;^ixic=NASDAQ%&#34;&#xA;&#xA;JPM:&amp;lt;fc=#00ff00&amp;gt;34.37&amp;lt;/fc&amp;gt; | NASDAQ:&amp;lt;fc=#ff0000&amp;gt;-0.86%&amp;lt;/fc&amp;gt; | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thus, you can stick (something like) the following in your xmobarrc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Config { &#xA;    -- ... &#xA;    , commands = [&#xA;      -- obviously you can include other commands...&#xA;      , Run Com &#34;/usr/bin/perl&#34; [&#34;/path/to/xmobar-stocks&#34;, &#34;jpm$&#34;, &#34;wf%&#34;, &#34;gs+&#34;] &#34;stocks&#34; 60&#xA;    ]&#xA;    , sepChar = &#34;`&#34;&#xA;    , template = &#34; [ ... ]  `stocks` [ ... ] &#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Why not show some info about the markets in xmobar? This script lets you easily keep track of all the money you&#39;re losing. I cannot be held responsible for any sadness that may arise from this realization (that you&#39;re losing lots of money).&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m really not sure why this isn&#39;t built into xmobar, but oh well. This script exists because I didn&#39;t want to have to recompile xmobar from source to add this functionality. Unless I&#39;m missing something (likely: most things in Haskell are a bit over my head), it seems like you need to recompile xmobar to add another plugin. This seems a little silly to me...&lt;/p&gt; &#xA;&lt;h3&gt;Syntax&lt;/h3&gt; &#xA;&lt;p&gt;The syntax is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xmobar-stocks [ ... ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It accepts a list of arguments in the following form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SYM[=alias]{$%+}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SYM = stock symbol&lt;/li&gt; &#xA; &lt;li&gt;alias -- optional -- an optional alias to print instead of the symbol&lt;/li&gt; &#xA; &lt;li&gt;{$%+}: Choose one (and only one) of these modifiers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;$: ask [realtime]&lt;/li&gt; &#xA;   &lt;li&gt;%: price change (%)&lt;/li&gt; &#xA;   &lt;li&gt;+: price change (absolute)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;^ixic=NASDAQ%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will yield the percentage change of NASDAQ and will be renamed to &lt;code&gt;NASDAQ&lt;/code&gt; instead of &lt;code&gt;^ixic&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing&lt;/h3&gt; &#xA;&lt;p&gt;The script is pretty short and self-explanatory. See the following for a reference on the Yahoo finance API: &lt;a href=&#34;http://www.gummy-stuff.org/Yahoo_data.htm&#34;&gt;http://www.gummy-stuff.org/Yahoo_data.htm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For convenience a few are listed here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;s = symbol&lt;/li&gt; &#xA; &lt;li&gt;o = open price&lt;/li&gt; &#xA; &lt;li&gt;b2 = ask (realtime)&lt;/li&gt; &#xA; &lt;li&gt;k2 = change % (realtime)&lt;/li&gt; &#xA; &lt;li&gt;c = change and % change&lt;/li&gt; &#xA; &lt;li&gt;p = previous close&lt;/li&gt; &#xA; &lt;li&gt;c1 = change&lt;/li&gt; &#xA; &lt;li&gt;p2 = percent change&lt;/li&gt; &#xA; &lt;li&gt;a = ask&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kawanet/Plack-Middleware-ContentOverride</title>
    <updated>2022-10-16T01:37:03Z</updated>
    <id>tag:github.com,2022-10-16:/kawanet/Plack-Middleware-ContentOverride</id>
    <link href="https://github.com/kawanet/Plack-Middleware-ContentOverride" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Override Request Content Body by File Uploading or Query Parameter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;NAME Plack::Middleware::ContentOverride - Override Request Content Body by File Uploading or Query Parameter&lt;/p&gt; &#xA;&lt;p&gt;SYNOPSIS In your Plack app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    use Plack::Request;&#xA;&#xA;    my $app = sub {&#xA;        my $env  = shift;&#xA;        my $req  = Plack::Request-&amp;gt;new($env);&#xA;        my $type = $req-&amp;gt;content_type;&#xA;        my $body = $req-&amp;gt;content;&#xA;        ...;&#xA;    }&#xA;&#xA;    use Plack::Builder;&#xA;&#xA;    builder {&#xA;        enable &#39;ContentOverride&#39;;&#xA;        $app;&#xA;    };&#xA;&#xA;Payload as an uploaded file overrides the request content body:&#xA;&#xA;    &amp;lt;form method=&#34;POST&#34; enctype=&#34;multipart/form-data&#34; action=&#34;...&#34;&amp;gt;&#xA;        &amp;lt;input type=&#34;file&#34; name=&#34;payload&#34;&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&#xA;&#xA;Payload as a query parameter overrides the request content body:&#xA;&#xA;    &amp;lt;form enctype=&#34;application/x-www-form-urlencoded&#34; action=&#34;...&#34;&amp;gt;&#xA;        &amp;lt;textarea name=&#34;payload&#34;&amp;gt;&amp;lt;/textarea&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DESCRIPTION This allows a payload sent from a HTML form to override &#34;Plack&#34;&#39;s request content body. This would help you to run a RESTful app through traditional HTML forms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;A couple of payload styles are available: 1. file uploading and 2. query&#xA;parameter.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;File Uploading For an app which receives a binary content of JPEG, PNG, etc. including a larger content, use &#34;method=&#34;POST&#34;&#34; and &#34;enctype=&#34;multipart/form-data&#34;&#34; to perform a file uploading.&lt;/p&gt; &#xA;&lt;p&gt;Query Parameter For an app which receives a text content of JSON, XML, etc., &#34;textarea&#34; element would work fine.&lt;/p&gt; &#xA;&lt;p&gt;CONFIGURATION This middleware accepts the following configuration keys.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    enable &#39;ContentOverride&#39;, payload =&amp;gt; &#39;body&#39;, content_type =&amp;gt; &#39;application/xml&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;payload This specifies a request query parameter which contains a new content body. Default name is &#34;payload&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    enable &#39;ContentOverride&#39;, payload =&amp;gt; &#39;payload&#39;; # default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;content_type This specifies a new content type. Default type is &#34;application/octet-stream&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    enable &#39;ContentOverride&#39;, content_type =&amp;gt; &#39;application/octet-stream&#39;; # default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AUTHOR Yusuke Kawasaki &lt;a href=&#34;http://www.kawa.net/&#34;&gt;http://www.kawa.net/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;COPYRIGHT The following copyright notice applies to all the files provided in this distribution, including binary files, unless explicitly noted otherwise.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2012 Yusuke Kawasaki&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LICENSE This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;SEE ALSO Plack::Middleware::MethodOverride - Override REST methods to Plack apps via POST&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Catalyst::Action::DeserializeMultiPart - Deserialize Data in a Multipart&#xA;Request&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>