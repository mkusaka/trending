<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:51:18Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wtsi-npg/npg_seq_pipeline</title>
    <updated>2022-08-02T01:51:18Z</updated>
    <id>tag:github.com,2022-08-02:/wtsi-npg/npg_seq_pipeline</id>
    <link href="https://github.com/wtsi-npg/npg_seq_pipeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Processing and analysis of data coming from Illumina sequencing machines&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Pipelines for Processing Sequencing Data&lt;/h2&gt; &#xA;&lt;h3&gt;Analysis Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;Processes data coming from Illumina sequencing instruments. Input data - bcl files, output - CRAM files. In most cases CRAM files are aligned.&lt;/p&gt; &#xA;&lt;h3&gt;Archival Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;Archives sequencing data (CRAM files) and other related artefacts.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring Pipeline&#39;s Steps&lt;/h3&gt; &#xA;&lt;p&gt;Steps of each of the pipelines and dependencies between the steps are defined in JSON input files located in data/config_files directory. The files follow &lt;a href=&#34;https://github.com/jsongraph/json-graph-specification&#34;&gt;JSON Graph Format&lt;/a&gt; systax. Individual pipeline steps are defined as graph nodes, dependencies between them as directed graph edges. If step B should be executed after step A finishes, step B is is considered to be dependant on step A.&lt;/p&gt; &#xA;&lt;p&gt;The graph represented by the input file should be a directed acyclic graph (DAG). Each graph node should have an id, which should be unique, and a label, which is the name of the pipeline step.&lt;/p&gt; &#xA;&lt;h3&gt;Visualizing Input Graphs&lt;/h3&gt; &#xA;&lt;p&gt;JSON Graph Format (JGF) is relatively new, with little support for visualization. Convert JGF to GML &lt;a href=&#34;http://www.fim.uni-passau.de/fileadmin/files/lehrstuhl/brandenburg/projekte/gml/gml-technical-report.pdf&#34;&gt;Graph Modeling Language&lt;/a&gt; format using a simple script supplied with this package, scripts/jgf2gml. Many graph visualization tools, for example &lt;a href=&#34;http://www.cytoscape.org/&#34;&gt;Cytoscape&lt;/a&gt;, support the GML format.&lt;/p&gt; &#xA;&lt;h3&gt;Pipeline Script Outputs&lt;/h3&gt; &#xA;&lt;p&gt;Log file - in the run folder (as in the current pipeline). Example: /nfs/sf55/IL_seq_data/outgoing/path_to_runfolder/bin_npg_pipeline_central_25438_20180321-080455-2214166102.log&lt;/p&gt; &#xA;&lt;p&gt;File with JSON serialization of definition objects - in the analysis directory directory. Example: /path_to_runfolder/bin_npg_pipeline_central_25438_20180321-080455-2214166102.log.json&lt;/p&gt; &#xA;&lt;p&gt;File with saved commands hashed by function name, LSF job id and array index - in the analysis directory. Example: /path_to_runfolder/Data/Intensities/BAM_basecalls_20180321-075511/bin_npg_pipeline_central_25438_20180321-080455-2214166102.log.commands4jobs.json&lt;/p&gt; &#xA;&lt;h3&gt;Batch Processing and Dependencies Tracking with LSF&lt;/h3&gt; &#xA;&lt;p&gt;In this package the pipeline steps are submitted for execution to the LSF batch processing system. The LSF job representing the start point of a graph is submitted to LSF in a suspended state and is resumed once all other LSF jobs have been submitted thus ensuring that the execution starts only if all steps are successfully submitted to LSF. If an error occurs at any point, all submitted jobs, apart from the start job, are killed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-Machine-Epsilon</title>
    <updated>2022-08-02T01:51:18Z</updated>
    <id>tag:github.com,2022-08-02:/binary-com/perl-Machine-Epsilon</id>
    <link href="https://github.com/binary-com/perl-Machine-Epsilon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;http://en.wikipedia.org/wiki/Machine_epsilon&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Machine::Epsilon&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-Machine-Epsilon&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-Machine-Epsilon.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-Machine-Epsilon&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-Machine-Epsilon/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find the maximum relative error while rounding a floating point number&lt;/p&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;To install this module, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SUPPORT AND DOCUMENTATION&lt;/p&gt; &#xA;&lt;p&gt;After installing, you can find documentation for this module with the perldoc command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perldoc Machine::Epsilon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also look for information at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RT, CPAN&#39;s request tracker (report bugs here)&#xA;    http://rt.cpan.org/NoAuth/Bugs.html?Dist=Machine-Epsilon&#xA;&#xA;AnnoCPAN, Annotated CPAN documentation&#xA;    http://annocpan.org/dist/Machine-Epsilon&#xA;&#xA;CPAN Ratings&#xA;    http://cpanratings.perl.org/d/Machine-Epsilon&#xA;&#xA;Search CPAN&#xA;    http://search.cpan.org/dist/Machine-Epsilon/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LICENSE AND COPYRIGHT&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2014 binary.com&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of either: the GNU General Public License as published by the Free Software Foundation; or the Artistic License.&lt;/p&gt; &#xA;&lt;p&gt;See L&lt;a href=&#34;http://dev.perl.org/licenses/&#34;&gt;http://dev.perl.org/licenses/&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-Locale-Maketext-ManyPluralForms</title>
    <updated>2022-08-02T01:51:18Z</updated>
    <id>tag:github.com,2022-08-02:/binary-com/perl-Locale-Maketext-ManyPluralForms</id>
    <link href="https://github.com/binary-com/perl-Locale-Maketext-ManyPluralForms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;perl-Locale-Maketext-ManyPluralForms&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-Locale-Maketext-ManyPluralForms&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-Locale-Maketext-ManyPluralForms.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-Locale-Maketext-ManyPluralForms&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-Locale-Maketext-ManyPluralForms/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;INSTALLATION&lt;/h4&gt; &#xA;&lt;p&gt;To install this module, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Locale::Maketext::ManyPluralForms&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Locale::Maketext::ManyPluralForms {&#39;*&#39; =&amp;gt; [&#39;Gettext&#39; =&amp;gt; &#39;i18n/*.po&#39;]};&#xA;my $lh = Locale::Maketext::ManyPluralForms-&amp;gt;get_handle(&#39;en&#39;);&#xA;$lh-&amp;gt;maketext(&#34;Hello&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;The implementation supporting internationalisation with many plural forms using Plural-Forms header from .po file to add plural method to Locale::Maketext based class. As described there &lt;a href=&#34;http://www.perlmonks.org/index.pl?node_id=898687&#34;&gt;http://www.perlmonks.org/index.pl?node_id=898687&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;Locale::Maketext::ManyPluralForms-&amp;gt;import({&#39;*&#39; =&amp;gt; [&#39;Gettext&#39; =&amp;gt; &#39;i18n/*.po&#39;]})&lt;/h2&gt; &#xA;&lt;p&gt;This method to specify languages.&lt;/p&gt; &#xA;&lt;h2&gt;$self-&amp;gt;plural($num, @strings)&lt;/h2&gt; &#xA;&lt;p&gt;This method handles plural forms. You can invoke it using Locale::Maketext&#39;s bracket notation, like &#34;[plural,_1,string1,string2,...]&#34;. Depending on value of &lt;em&gt;$num&lt;/em&gt; and language function returns one of the strings. If string contain %d it will be replaced with &lt;em&gt;$num&lt;/em&gt; value.&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Locale::Maketext&#34;&gt;Locale::Maketext&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Locale::Maketext::Lexicon&#34;&gt;Locale::Maketext::Lexicon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;COPYRIGHT AND LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (C) 2016 binary.com&lt;/p&gt;</summary>
  </entry>
</feed>