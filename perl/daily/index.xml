<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-20T01:43:21Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>perlancar/perl-Data-Format-Pretty-YAML</title>
    <updated>2023-02-20T01:43:21Z</updated>
    <id>tag:github.com,2023-02-20:/perlancar/perl-Data-Format-Pretty-YAML</id>
    <link href="https://github.com/perlancar/perl-Data-Format-Pretty-YAML" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>kost/dvcs-ripper</title>
    <updated>2023-02-20T01:43:21Z</updated>
    <id>tag:github.com,2023-02-20:/kost/dvcs-ripper</id>
    <link href="https://github.com/kost/dvcs-ripper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rip web accessible (distributed) version control systems: SVN/GIT/HG...&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://inventory.rawsec.ml/tools.html#dvcs-ripper&#34;&gt;&lt;img src=&#34;https://inventory.rawsec.ml/img/badges/Rawsec-inventoried-FF5050_flat.svg?sanitize=true&#34; alt=&#34;Rawsec&#39;s CyberSecurity Inventory&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kost/dvcs-ripper/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/kost/dvcs-ripper.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kost/dvcs-ripper/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kost/dvcs-ripper.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;dvcs-ripper&lt;/h1&gt; &#xA;&lt;p&gt;Rip web accessible (distributed) version control systems: SVN, GIT, Mercurial/hg, bzr, ...&lt;/p&gt; &#xA;&lt;p&gt;It can rip repositories even when directory browsing is turned off.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to position yourself in empty directory where you want repositories to be downloaded/cloned.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Perl&lt;/li&gt; &#xA; &lt;li&gt;Perl modules: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;required: LWP, IO::Socket::SSL&lt;/li&gt; &#xA;   &lt;li&gt;for newer SVN: DBD::SQlite and DBI&lt;/li&gt; &#xA;   &lt;li&gt;for faster GIT: Parallel::ForkManager, Redis and Algorithm::Combinatorics&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;(D)VCS client of what you want to rip (cvs, svn, git, hg, bzr, ...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements on Debian/Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;You can easily install perl requirements:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Optional requirements (faster git rip): &lt;code&gt;sudo apt-get install libparallel-forkmanager-perl libredis-perl libalgorithm-combinatorics-perl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And if you need all clients supported:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo apt-get install cvs subversion git bzr mercurial&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;In case you just want docker version, it is here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kost/docker-webscan/tree/master/alpine-dvcs-ripper&#34;&gt;https://github.com/kost/docker-webscan/tree/master/alpine-dvcs-ripper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just say something like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run --rm -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-git.pl -v -u http://www.example.org/.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GIT&lt;/h1&gt; &#xA;&lt;p&gt;Example run (for git):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-git.pl -v -u http://www.example.com/.git/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will automatically do &lt;code&gt;git checkout -f&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or if you would like to ignore SSL certification verification (with -s):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-git.pl -s -v -u http://www.example.com/.git/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mercurial/HG&lt;/h1&gt; &#xA;&lt;p&gt;Example run (for hg):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-hg.pl -v -u http://www.example.com/.hg/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will automatically do &lt;code&gt;hg revert &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or if you would like to ignore SSL certification verification (with -s):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-hg.pl -s -v -u http://www.example.com/.hg/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Bazaar/bzr&lt;/h1&gt; &#xA;&lt;p&gt;Example run (for bzr):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-bzr.pl -v -u http://www.example.com/.bzr/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will automatically do &lt;code&gt;bzr revert&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or if you would like to ignore SSL certification verification (with -s):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-bzr.pl -s -v -u http://www.example.com/.bzr/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SVN&lt;/h1&gt; &#xA;&lt;p&gt;It supports OLDER and NEWER version of svn client formats. Older is with .svn files in every directory, while newer version have single .svn directory and wc.db in .svn directory. It will automatically detect which format is used on the target.&lt;/p&gt; &#xA;&lt;p&gt;Example run (for SVN):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-svn.pl -v -u http://www.example.com/.svn/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will automatically do &lt;code&gt;svn revert -R .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CVS&lt;/h1&gt; &#xA;&lt;p&gt;Example run (for CVS):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-cvs.pl -v -u http://www.example.com/CVS/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will not rip CVS, but it will display useful info.&lt;/p&gt; &#xA;&lt;h2&gt;Advance usage examples&lt;/h2&gt; &#xA;&lt;p&gt;Some examples how it can be used&lt;/p&gt; &#xA;&lt;h3&gt;Output handling&lt;/h3&gt; &#xA;&lt;p&gt;Download git tree to specific output dir:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-git.pl -o /my/previously/made/dir -v -u http://www.example.com/.git/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download git tree to specific output dir (creating dir &lt;code&gt;http__www.example.com_.git_&lt;/code&gt; for url):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rip-git.pl -m -o /dir -v -u http://www.example.com/.git/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Redis usage with docker&lt;/h3&gt; &#xA;&lt;p&gt;Create Redis docker container:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run --rm --name myredis -it -v /my/host/dir/data:/data:rw k0st/alpine-redis&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In another terminal, just link redis container and say something like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run --rm --link=myredis:redis -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-git.pl -e docker -v -u http://www.example.org/.git -m -o /work&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using redis for resuming work of ripping&lt;/h3&gt; &#xA;&lt;p&gt;Create Redis docker container:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run --name redisdvcs -it -v /my/host/dir/data:/data:rw k0st/alpine-redis&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In another terminal, just link redis container and say something like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run --link=redisdvcs:redis -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-git.pl -n -e docker -v -u http://www.example.org/.git -m -o /work&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Abusing redis for massive parallel tasks&lt;/h3&gt; &#xA;&lt;p&gt;Create global NFS and mount /work on each client. Create global Redis docker container:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run --name redisdvcs -it -v /my/host/dir/data:/data:rw k0st/alpine-redis&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In another terminal, just link redis container and say something like this on 1st client&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-git.pl -n -e global.docker.ip -v -u http://www.example.org/.git -t 10 -c -m -o /work&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In another terminal, just link redis container and say something like this on 2nd client:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-git.pl -n -e global.docker.ip -v -u http://www.example.org/.git -t 10 -c -m -o /work&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;and so on...&lt;/p&gt; &#xA;&lt;p&gt;You need to perform &lt;code&gt;git checkout -f&lt;/code&gt; yourself on the end - of course!&lt;/p&gt; &#xA;&lt;h2&gt;Future&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to implement something and send pull request. Feel free to suggest any feature. Lot of features actually were implemented by request&lt;/p&gt; &#xA;&lt;h3&gt;ToDo&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Recognize 404 pages which return 200 in SVN/CVS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Try to repeat each trick after previous trick was successful&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Progress bars&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Done&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for brute forcing pack names&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Intelligent guessing of packed refs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for objects/info/packs from &lt;a href=&#34;https://www.kernel.org/pub/software/scm/git/docs/gitrepository-layout.html&#34;&gt;https://www.kernel.org/pub/software/scm/git/docs/gitrepository-layout.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Recognize 404 pages which return 200&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Introduce ignore SSL/TLS verification in SVN/CVS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bzr support&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>