<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-07T01:34:59Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>karenetheridge/Test-Deep-Type</title>
    <updated>2023-09-07T01:34:59Z</updated>
    <id>tag:github.com,2023-09-07:/karenetheridge/Test-Deep-Type</id>
    <link href="https://github.com/karenetheridge/Test-Deep-Type" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Test::Deep plugin for validating type constraints&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=pod&lt;/p&gt; &#xA;&lt;p&gt;=encoding UTF-8&lt;/p&gt; &#xA;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;Test::Deep::Type - A Test::Deep plugin for validating type constraints&lt;/p&gt; &#xA;&lt;p&gt;=head1 VERSION&lt;/p&gt; &#xA;&lt;p&gt;version 0.008&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Test::More;&#xA;use Test::Deep;&#xA;use Test::Deep::Type;&#xA;use MooseX::Types::Moose &#39;Str&#39;;&#xA;&#xA;cmp_deeply(&#xA;    {&#xA;        message =&amp;gt; &#39;ack I am slain&#39;,&#xA;        counter =&amp;gt; 123,&#xA;    },&#xA;    {&#xA;        message =&amp;gt; is_type(Str),&#xA;        counter =&amp;gt; is_type(sub { die &#34;not an integer&#34; unless int($_[0]) eq $_[0] }),&#xA;    },&#xA;    &#39;message is a plain string, counter is a number&#39;,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;This is a L&lt;a href=&#34;Test::Deep&#34;&gt;Test::Deep&lt;/a&gt; plugin that provides the sub C&amp;lt;is_type&amp;gt; to indicate that the data being tested must validate against the passed type. This is an actual type I&lt;object&gt;, not a string name -- for example something provided via L&lt;a href=&#34;MooseX::Types&#34;&gt;MooseX::Types&lt;/a&gt;, or a plain old coderef that returns a bool (such as what might be used in a L&#xA;  &lt;moo&gt;&#xA;    type constraint).&#xA;   &lt;p&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=head1 FUNCTIONS&lt;/p&gt; &#xA;   &lt;p&gt;=head2 C&amp;lt;is_type&amp;gt;&lt;/p&gt; &#xA;   &lt;p&gt;Exported by default; to be used within a L&lt;a href=&#34;Test::Deep&#34;&gt;Test::Deep&lt;/a&gt; comparison function such as L&amp;lt;cmp_deeply|Test::Deep/COMPARISON FUNCTIONS&amp;gt;. As this module aims to be a solution for many popular type systems, we attempt to use the type in multiple ways:&lt;/p&gt; &#xA;   &lt;p&gt;=over 4&lt;/p&gt; &#xA;   &lt;p&gt;=item L&lt;a href=&#34;MooseX::Types&#34;&gt;MooseX::Types&lt;/a&gt;/L&lt;a href=&#34;Moose::Meta::TypeConstraint&#34;&gt;Moose::Meta::TypeConstraint&lt;/a&gt;-style types:&lt;/p&gt; &#xA;   &lt;p&gt;If the C&#xA;    &lt;validate&gt;&#xA;      method exists, it is invoked on the type object with the data as its parameter (which should return C&#xA;     &lt;undef&gt;&#xA;       on success, and the error message on failure).&#xA;     &lt;/undef&gt;&#xA;    &lt;/validate&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=item coderef/L&#xA;    &lt;moo&gt;&#xA;     -style types:&#xA;    &lt;/moo&gt;&lt;/p&gt; &#xA;   &lt;p&gt;If the type appears to be or act like a coderef (either a coderef, blessed or unblessed, or possesses a coderef overload) the type is invoked as a sub, with the data as its parameter. Its return value is treated as a boolean; if it also dies with a message describing the failure, this message is used in the failure diagnostics.&lt;/p&gt; &#xA;   &lt;p&gt;L&lt;a href=&#34;Type::Tiny&#34;&gt;Type::Tiny&lt;/a&gt; types fall into this category, and are fully supported.&lt;/p&gt; &#xA;   &lt;p&gt;=back&lt;/p&gt; &#xA;   &lt;p&gt;=for Pod::Coverage descend diag_message init renderExp renderGot&lt;/p&gt; &#xA;   &lt;p&gt;=head1 CAVEATS&lt;/p&gt; &#xA;   &lt;p&gt;Regular strings describing a type under a particular system (e.g. L&#xA;    &lt;moose&gt;&#xA;     , L&#xA;     &lt;a href=&#34;Params::Validate&#34;&gt;Params::Validate&lt;/a&gt;) are not currently supported.&#xA;    &lt;/moose&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;   &lt;p&gt;=over 4&lt;/p&gt; &#xA;   &lt;p&gt;=item *&lt;/p&gt; &#xA;   &lt;p&gt;L&lt;a href=&#34;Test::Deep&#34;&gt;Test::Deep&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=item *&lt;/p&gt; &#xA;   &lt;p&gt;L&lt;a href=&#34;Test::TypeConstraints&#34;&gt;Test::TypeConstraints&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=item *&lt;/p&gt; &#xA;   &lt;p&gt;L&lt;a href=&#34;Test::Type&#34;&gt;Test::Type&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=item *&lt;/p&gt; &#xA;   &lt;p&gt;L&lt;a href=&#34;Test::Deep::Matcher&#34;&gt;Test::Deep::Matcher&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=item *&lt;/p&gt; &#xA;   &lt;p&gt;L&lt;a href=&#34;MooseX::Types&#34;&gt;MooseX::Types&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=item *&lt;/p&gt; &#xA;   &lt;p&gt;L&lt;a href=&#34;Moose::Meta::TypeConstraint&#34;&gt;Moose::Meta::TypeConstraint&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=item *&lt;/p&gt; &#xA;   &lt;p&gt;L&#xA;    &lt;moo&gt;&lt;/moo&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=item *&lt;/p&gt; &#xA;   &lt;p&gt;L&lt;a href=&#34;Type::Tiny&#34;&gt;Type::Tiny&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=back&lt;/p&gt; &#xA;   &lt;p&gt;=head1 SUPPORT&lt;/p&gt; &#xA;   &lt;p&gt;Bugs may be submitted through L&amp;lt;the RT bug tracker|&lt;a href=&#34;https://rt.cpan.org/Public/Dist/Display.html?Name=Test-Deep-Type%3E&#34;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=Test-Deep-Type&amp;gt;&lt;/a&gt; (or L&amp;lt;&lt;a href=&#34;mailto:bug-Test-Deep-Type@rt.cpan.org&#34;&gt;bug-Test-Deep-Type@rt.cpan.org&lt;/a&gt;|mailto:&lt;a href=&#34;mailto:bug-Test-Deep-Type@rt.cpan.org&#34;&gt;bug-Test-Deep-Type@rt.cpan.org&lt;/a&gt;&amp;gt;).&lt;/p&gt; &#xA;   &lt;p&gt;There is also a mailing list available for users of this distribution, at L&lt;a href=&#34;http://lists.perl.org/list/perl-qa.html&#34;&gt;http://lists.perl.org/list/perl-qa.html&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;p&gt;There is also an irc channel available for users of this distribution, at L&amp;lt;C&amp;lt;#perl&amp;gt; on C&amp;lt;irc.perl.org&amp;gt;|irc://irc.perl.org/#perl-qa&amp;gt;.&lt;/p&gt; &#xA;   &lt;p&gt;I am also usually active on irc, as &#39;ether&#39; at C&amp;lt;irc.perl.org&amp;gt;.&lt;/p&gt; &#xA;   &lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;   &lt;p&gt;Karen Etheridge &lt;a href=&#34;mailto:ether@cpan.org&#34;&gt;ether@cpan.org&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=head1 CONTRIBUTOR&lt;/p&gt; &#xA;   &lt;p&gt;=for stopwords Graham Knop&lt;/p&gt; &#xA;   &lt;p&gt;Graham Knop &lt;a href=&#34;mailto:haarg@haarg.org&#34;&gt;haarg@haarg.org&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;p&gt;=head1 COPYRIGHT AND LICENCE&lt;/p&gt; &#xA;   &lt;p&gt;This software is copyright (c) 2013 by Karen Etheridge.&lt;/p&gt; &#xA;   &lt;p&gt;This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.&lt;/p&gt; &#xA;   &lt;p&gt;=cut&lt;/p&gt; &#xA;  &lt;/moo&gt;&lt;/object&gt;&lt;/p&gt;</summary>
  </entry>
</feed>