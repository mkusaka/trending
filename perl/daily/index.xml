<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T01:50:37Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MiningCryptoLive/proprietary_vendor_htc_ruby</title>
    <updated>2022-07-01T01:50:37Z</updated>
    <id>tag:github.com,2022-07-01:/MiningCryptoLive/proprietary_vendor_htc_ruby</id>
    <link href="https://github.com/MiningCryptoLive/proprietary_vendor_htc_ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ruby vendor blobs&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-Finance-YieldCurve</title>
    <updated>2022-07-01T01:50:37Z</updated>
    <id>tag:github.com,2022-07-01:/binary-com/perl-Finance-YieldCurve</id>
    <link href="https://github.com/binary-com/perl-Finance-YieldCurve" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Finance::YieldCurve - provides methods for interpolation on interest rates or dividends&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Finance::YieldCurve;&#xA;&#xA;my $rates = Finance::YieldCurve-&amp;gt;new(&#xA; data =&amp;gt; {&#xA;  1  =&amp;gt; 0.014,&#xA;  7  =&amp;gt; 0.011,&#xA;  14 =&amp;gt; 0.012,&#xA; },&#xA; asset =&amp;gt; &#39;USD&#39;,&#xA;);&#xA;# For dividends, we return the closest value with no interpolation&#xA;my $dividend_rate = $rates-&amp;gt;find_closest_to(7 * 24 * 60 * 60);&#xA;# For interest rates, we interpolate linearly between the points&#xA;my $interest_rate = $rates-&amp;gt;interpolate(7 * 24 * 60 * 60);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;Handles interpolation methods for different types of yield curve.&lt;/p&gt; &#xA;&lt;p&gt;Instantiate with a set of data points, then use either the &lt;a href=&#34;https://raw.githubusercontent.com/binary-com/perl-Finance-YieldCurve/master/#find_closest_to&#34;&gt;&#34;find_closest_to&#34;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/binary-com/perl-Finance-YieldCurve/master/#interpolate&#34;&gt;&#34;interpolate&#34;&lt;/a&gt; methods to find the appropriate value for a given time (measured in years).&lt;/p&gt; &#xA;&lt;h1&gt;ATTRIBUTES&lt;/h1&gt; &#xA;&lt;h2&gt;data&lt;/h2&gt; &#xA;&lt;p&gt;The data points, as a hashref of days =&amp;gt; value.&lt;/p&gt; &#xA;&lt;h2&gt;asset&lt;/h2&gt; &#xA;&lt;p&gt;String representing the currency, stock or index, for example &lt;code&gt;USD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;interpolate&lt;/h2&gt; &#xA;&lt;p&gt;Get the interpolated rate for this yield curve over the given time period (fractional years).&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $rate = $curve-&amp;gt;interpolate(7 * 24 * 60 * 60);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;find_closest_to&lt;/h2&gt; &#xA;&lt;p&gt;Returns the closest point to the request value.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $rate = $curve-&amp;gt;find_closest_to(7 * 24 * 60 * 60);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;day_count&lt;/h2&gt; &#xA;&lt;p&gt;Returns the day count for our asset.&lt;/p&gt; &#xA;&lt;p&gt;This is an integer value, and will either be 365 or 360.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sensepost/go</title>
    <updated>2022-07-01T01:50:37Z</updated>
    <id>tag:github.com,2022-07-01:/sensepost/go</id>
    <link href="https://github.com/sensepost/go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seriously primitive portscanner using Squid proxy.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#1. Name Go #2. Author Roelof Temmingh #3. License, version &amp;amp; release date License : GPLv2&lt;br&gt; Version : v0.1&lt;br&gt; Release Date : 2000/12&lt;/p&gt; &#xA;&lt;p&gt;#4. Description Seriously primitive portscanner using Squid proxy. Can be used to scan ports &amp;gt; 1024 using a &#34;victim&#34; Squid proxy that is not well configured. For this to work the proxy needs you to allow to use it. Used to scan machines that are located behind a firewall, but that is accessible from the proxy #5. Usage&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;. perl go.pl 160.124.19.103:3128:160.124.19.98:1430:1435 #6. Requirements Perl Poorly configured Squid proxy&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>