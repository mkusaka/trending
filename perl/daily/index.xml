<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-12T01:34:59Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kisvegabor/abbreviations-in-code</title>
    <updated>2022-12-12T01:34:59Z</updated>
    <id>tag:github.com,2022-12-12:/kisvegabor/abbreviations-in-code</id>
    <link href="https://github.com/kisvegabor/abbreviations-in-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;List of common abbreviation in program codes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Abbreviations in code&lt;/h1&gt; &#xA;&lt;p&gt;The list of the abbreviations you can find and use in software environments.&lt;/p&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#goal&#34;&gt;Goal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#guide&#34;&gt;Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#list&#34;&gt;List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A good abbreviation is:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;global&lt;/code&gt; â€¢ understood by everyone&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;significant&lt;/code&gt; â€¢ seen for the first time you still know what it means&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;absolute&lt;/code&gt; â€¢ not related to the context&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;short&lt;/code&gt; â€¢ taking out one letter is not an abbreviation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goal&lt;/h2&gt; &#xA;&lt;p&gt;Give good names to variables, functions, classes, files can be difficult. Long names are always clear, but need time to read, take up space and are hard to remember. Choose a shorter form is better.&lt;/p&gt; &#xA;&lt;p&gt;If you will use the abbreviations below your naming will become more coherent, logical and understandable to other (even newbies) programmers.&lt;/p&gt; &#xA;&lt;h2&gt;Guide&lt;/h2&gt; &#xA;&lt;p&gt;Abbreviations are in key value format. Multiple choices are sorted from the most used one. Dots specify how much recommended is it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ Recommended&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ Context sensitive&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ Not recommended&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can consider using the not recommended ones. The most important thing is to remain consistent in your code.&lt;/p&gt; &#xA;&lt;h2&gt;List&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#numbers&#34;&gt;Numbers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#a&#34;&gt;A&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#b&#34;&gt;B&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#c&#34;&gt;C&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#d&#34;&gt;D&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#e&#34;&gt;E&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#f&#34;&gt;F&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#g&#34;&gt;G&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#h&#34;&gt;H&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#i&#34;&gt;I&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#j&#34;&gt;J&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#k&#34;&gt;K&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#l&#34;&gt;L&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#m&#34;&gt;M&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#n&#34;&gt;N&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#o&#34;&gt;O&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#p&#34;&gt;P&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#q&#34;&gt;Q&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#r&#34;&gt;R&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#s&#34;&gt;S&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#t&#34;&gt;T&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#u&#34;&gt;U&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#v&#34;&gt;V&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#w&#34;&gt;W&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#x&#34;&gt;X&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#y&#34;&gt;Y&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#z&#34;&gt;Z&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#symbols&#34;&gt;Symbols&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Numbers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸ”´ 2 â€¢ to&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;A&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ abbr â€¢ abbreviation&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ abs â€¢ absolute number&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ act â€¢ action / active / actual&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ addr â€¢ address&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ alloc â€¢ allocate {memory}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ alt â€¢ alternative / alternate&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ app â€¢ application&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ arg â€¢ argument {memory}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ arr â€¢ array&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ async â€¢ asynchronous&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ attr â€¢ attribute&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ auth â€¢ authentication / authenticate&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ avg â€¢ average&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;B&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ bat â€¢ battery {power}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ bg â€¢ background&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ bin â€¢ binary&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ bl â€¢ breakline {encoding}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ bool â€¢ boolean&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ brk â€¢ break&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ btn â€¢ button&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ buf â€¢ buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;C&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ calc â€¢ calculate / calculator&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ cb â€¢ callback&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ cert â€¢ certificate&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ ch â€¢ channel {connection}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ chk â€¢ check&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ char â€¢ character&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ circ â€¢ circle {shape}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ clr â€¢ clear&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ cmd â€¢ command&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ cmp â€¢ compare {conditional operator}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ cnt â€¢ counter&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ concat â€¢ concatenate&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ conf / config â€¢ configuration&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ conn â€¢ connection {connection}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ cont â€¢ continue&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ conv â€¢ conversation&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ col â€¢ column&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ coll â€¢ collection&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ com â€¢ commercial / common / communication&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ coord â€¢ coordinate&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ cos â€¢ cosine&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ cot â€¢ cotangent&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ csum â€¢ checksum {operation}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ctrl â€¢ control&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ctx â€¢ context&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ cur / curr â€¢ current&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ cpy â€¢ copy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;D&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ db â€¢ databasa&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ dbg â€¢ debug&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ dec â€¢ decimal / decrease&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ def â€¢ default / define&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ del â€¢ delete&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ dest â€¢ destination&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ dev â€¢ development / device / developer&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ diff â€¢ difference {operation}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ dir â€¢ directory / direction&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ dis â€¢ disable&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ disp â€¢ display&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ doc â€¢ document&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ drv â€¢ driver&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ dsc â€¢ descriptor&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ dt â€¢ delta time {calculation}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ dyn â€¢ dynamic&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;E&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ e â€¢ event&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ e.g. â€¢ example&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ en â€¢ enable&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ env â€¢ environment&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ eq â€¢ equal {binary operation}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ err â€¢ error&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ exe â€¢ executable&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ expr â€¢ expression&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ext â€¢ extension&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ etc â€¢ etcetera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;F&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ f / func â€¢ function&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ fac â€¢ factory&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ fig â€¢ figure&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ fmt â€¢ format&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ fp â€¢ function pointer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;G&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ ge â€¢ greater or equal {binary operation}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ gen â€¢ generate&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ gt â€¢ greater than {binary operation}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;H&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ h â€¢ height {shape}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ hex â€¢ hexadecimal&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ hdr â€¢ header&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ hor â€¢ horizontal {shape}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ hw â€¢ hardware {computer science}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;I&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ id â€¢ identifier&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ idx â€¢ index&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ iface â€¢ interface&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ img â€¢ image&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ in â€¢ input&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ inc â€¢ include / increase&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ info â€¢ information&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ init â€¢ initialize&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ins â€¢ insert&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ intf â€¢ interface&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ int â€¢ integer&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ iter â€¢ iterator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;J&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ js â€¢ javascript&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;K&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ key â€¢ object key {only with &lt;strong&gt;val&lt;/strong&gt;}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;L&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ lang â€¢ language&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ lat â€¢ latitude {only with &lt;strong&gt;coord&lt;/strong&gt;}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ lib â€¢ library&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ le â€¢ less or equal {binary operator}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ len â€¢ length&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ll â€¢ linked list&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ lon â€¢ longitude {only with &lt;strong&gt;coord&lt;/strong&gt;}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ lt â€¢ less than {binary operators}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;M&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ max â€¢ maximum&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ mcu â€¢ microcontroller&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ mem â€¢ memory&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ meta â€¢ metadata {data science}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ mid â€¢ middle&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ min â€¢ minimum&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ misc â€¢ miscellaneous&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ mng â€¢ manager&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ mod â€¢ modulo&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ msg â€¢ message&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ mut â€¢ mutable {variables}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;N&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸ”´ n â€¢ no {only with &lt;strong&gt;yes&lt;/strong&gt;}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ nav â€¢ navigation&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ ne â€¢ not equal {binary operator}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ net â€¢ network&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ nl â€¢ newline {endcoding}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ num â€¢ number&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;O&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ obj â€¢ object&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ ord â€¢ order {data science}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ op â€¢ operation {binary operation}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ opt â€¢ option / optional&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ os â€¢ operating system&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ out â€¢ output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;P&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ p â€¢ pointer {memory}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ param â€¢ parameter&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ perf â€¢ performance&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ pic â€¢ picture&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ pos â€¢ position&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ pred â€¢ prediction&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ pref â€¢ preference&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ prev â€¢ previous&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ proc â€¢ process {thread}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ prod â€¢ production&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ prof â€¢ profiler&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ptr â€¢ pointer&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ pr â€¢ pull request&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ pwr â€¢ power {energy}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ px â€¢ pixel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Q&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ q / qry â€¢ query&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;R&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ r â€¢ radius {circle / shape}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ rand â€¢ random&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ rec â€¢ record&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ rect â€¢ rectangle {shape}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ recv â€¢ receive&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ref â€¢ reference&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ regex / rgx â€¢ regular expression&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ rem â€¢ remove&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ repo â€¢ repository&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ req â€¢ required / requested&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ res â€¢ response / result&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ret â€¢ return&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ rev â€¢ revision&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ rng â€¢ range&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;S&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ s â€¢ signed as prefix {modifier}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ sem â€¢ semaphore {conditional operator}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ sel â€¢ selected / selection&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ sin â€¢ sine&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ seq â€¢ sequence&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ sqrt â€¢ square root&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ src â€¢ source&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ sw â€¢ software {computer science}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ stat â€¢ statistic&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ std â€¢ standard&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ str â€¢ string&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ sum â€¢ addition&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ sync â€¢ synchronize&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;T&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ t â€¢ time / type (e.g. uint8_t) {type modifier}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ temp â€¢ temperature&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ temp / tmp â€¢ temporary&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ tgl â€¢ toggle&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ tmr â€¢ timer&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ts â€¢ timestamp&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ txt â€¢ text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;U&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ u â€¢ user {URLs}&lt;/li&gt; &#xA; &lt;li&gt;ğŸ”´ usr â€¢ user&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;V&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¢ v â€¢ value {only with &lt;strong&gt;k&lt;/strong&gt;}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ v â€¢ vector / version&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ val â€¢ value&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ var â€¢ variable&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ ver â€¢ version / vertical&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;W&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ w â€¢ width {shape}&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¢ win â€¢ window&lt;/li&gt; &#xA; &lt;li&gt;ğŸŸ¡ ws â€¢ white space {encoding}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;X&lt;/h2&gt; &#xA;&lt;h2&gt;Y&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ y â€¢ yes {only with &lt;strong&gt;n&lt;/strong&gt;}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Z&lt;/h2&gt; &#xA;&lt;h3&gt;Symbols&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ğŸŸ¡ $... â€¢ node ($btn) {jQuery selector / DOM}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kisvegabor/abbreviations-in-code/master/#index&#34;&gt;Go to index&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>exoscale/megaraid-collectd</title>
    <updated>2022-12-12T01:34:59Z</updated>
    <id>tag:github.com,2022-12-12:/exoscale/megaraid-collectd</id>
    <link href="https://github.com/exoscale/megaraid-collectd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;collectd exec module to watch over megaraid status&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;megaraid-collectd&lt;/h1&gt; &#xA;&lt;p&gt;Braindead script to watch megaraid status. This script makes three assumptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the megaclisas-status command is available&lt;/li&gt; &#xA; &lt;li&gt;the sudo command is available&lt;/li&gt; &#xA; &lt;li&gt;the user under which you will run it has sudo access to megaclisas-status&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Slap this in your collectd config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Loadplugin exec&#xA;&#xA;&amp;lt;Plugin exec&amp;gt;&#xA;  Exec &#34;user:group&#34; &#34;/path/to/megaraid-collectd.pl&#34;&#xA;&amp;lt;/Plugin&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>