<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-08T01:34:14Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>darlinghq/darling-perl</title>
    <updated>2023-09-08T01:34:14Z</updated>
    <id>tag:github.com,2023-09-08:/darlinghq/darling-perl</id>
    <link href="https://github.com/darlinghq/darling-perl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;darling-perl&lt;/h1&gt; &#xA;&lt;p&gt;perl-131&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Hopper262/classic-mac-utils</title>
    <updated>2023-09-08T01:34:14Z</updated>
    <id>tag:github.com,2023-09-08:/Hopper262/classic-mac-utils</id>
    <link href="https://github.com/Hopper262/classic-mac-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Perl scripts to handle resource forks and other old Mac formats.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;classic-mac-utils&lt;/h1&gt; &#xA;&lt;p&gt;Perl scripts to handle resource forks and other old Mac formats.&lt;/p&gt; &#xA;&lt;p&gt;These are all command-line tools. Usually the input is expected on stdin and output is written to stdout. Tools dealing with resource forks expect the resource data on stdin; on Mac OS X, you can do this like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./extract_rsrc.pl &amp;lt; &#34;My Mac File&#34;/..namedfork/rsrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you can use the &#34;macbin2rsrc.pl&#34; and &#34;macbin2data.pl&#34; scripts to unpack a MacBinary file for use with these tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;macbin2rsrc.pl &amp;lt; My_Mac_File.bin &amp;gt; My_Mac_File.resources&#xA;extract_rsrc.pl &amp;lt; My_Mac_File.resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some of these files are modifications of others&#39; code. I should send patches upstream, but I&#39;m extremely lazy so I probably haven&#39;t done so. Feel free to do so in my stead; I don&#39;t even mind if you take credit. I just wanted the bugs fixed.&lt;/p&gt; &#xA;&lt;h3&gt;extract_rsrc.pl&lt;/h3&gt; &#xA;&lt;p&gt;Unpacks a resource fork into separate files in the current directory. Command-line arguments can filter by type or ID. Good for hex inspection or processing of custom resource types.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking at string resources specifically, check out &#34;strings2xml.pl&#34; in my &#34;marathon-utils&#34; repository.&lt;/p&gt; &#xA;&lt;h3&gt;snd2wav.pl&lt;/h3&gt; &#xA;&lt;p&gt;Converts a &#39;snd &#39; resource, as unpacked by extract_rsrc.pl, into a WAV file.&lt;/p&gt; &#xA;&lt;h3&gt;pict2png.pl&lt;/h3&gt; &#xA;&lt;p&gt;Converts (some) &#39;PICT&#39; resources into PNG files using Image::Magick.&lt;/p&gt; &#xA;&lt;h3&gt;pat2png.pl, ppat2png.pl&lt;/h3&gt; &#xA;&lt;p&gt;Converts &#39;PAT &#39; and &#39;ppat&#39; resources, as unpacked by extract_rsrc.pl, into PNG files using Image::Magick.&lt;/p&gt; &#xA;&lt;h3&gt;LittleSingleDouble.pm&lt;/h3&gt; &#xA;&lt;p&gt;The &#34;applesingle&#34; tool on Mac OS X produces invalid files; the tool fails to write values in big-endian order. This Perl module is a quick hack of Mac::AppleSingleDouble, to read the broken little-endian files.&lt;/p&gt; &#xA;&lt;h3&gt;Macbinary.pm&lt;/h3&gt; &#xA;&lt;p&gt;I found some serious problems with Mac::Macbinary 0.07. In particular, it doesn&#39;t handle files that lack a data fork, such as the vast majority of classic Mac applications.&lt;/p&gt; &#xA;&lt;h3&gt;nfnt2txt.pl, faux_bold.pl, faux_italic.pl&lt;/h3&gt; &#xA;&lt;p&gt;The first script converts an &#39;NFNT&#39; or &#39;FONT&#39; resource, as unpacked by extract_rsrc.pl, into a machine-readable (and somewhat human-readable) text file. The latter two scripts take a font in that text format and produce a bold or italic font using the same technique as the classic Mac toolbox.&lt;/p&gt; &#xA;&lt;h3&gt;font_ids.txt&lt;/h3&gt; &#xA;&lt;p&gt;A list of classic Mac font IDs. Mac &#39;styl&#39; resources store font IDs instead of names, so this can be useful if you&#39;re reconstructing rich text from a Mac format. Compiled from various sources on the web.&lt;/p&gt; &#xA;&lt;h3&gt;rfork.subs&lt;/h3&gt; &#xA;&lt;p&gt;Various snippets of code for dealing with Mac resources. Includes code for extracting Mac icons into images using Image::Magick, and building the Apple icon color tables necessary. Also includes parsing of &#39;styl&#39; and &#39;clut&#39; resources.&lt;/p&gt; &#xA;&lt;h3&gt;unpack_mpw_data.pl&lt;/h3&gt; &#xA;&lt;p&gt;Bungie&#39;s Marathon and Pathways Into Darkness are two classic Mac applications that compressed global data structures in the 68k CODE resources. I think this was a built-in feature of Apple&#39;s MPW compiler. I haven&#39;t been able to reverse-engineer the compression, but MPW provided a textual listing of the data chunks. This script reads MPW&#39;s output and reassembles the binary data.&lt;/p&gt; &#xA;&lt;h3&gt;macbin2rsrc.pl, macbin2data.pl&lt;/h3&gt; &#xA;&lt;p&gt;Unpacks the resource or data fork from a MacBinary file. Takes the MacBinary file on standard input and writes the data to standard out.&lt;/p&gt;</summary>
  </entry>
</feed>