<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-07T01:40:19Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jkeys089/lua-resty-hmac</title>
    <updated>2022-11-07T01:40:19Z</updated>
    <id>tag:github.com,2022-11-07:/jkeys089/lua-resty-hmac</id>
    <link href="https://github.com/jkeys089/lua-resty-hmac" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HMAC functions for ngx_lua and LuaJIT&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Name&lt;/h1&gt; &#xA;&lt;p&gt;lua-resty-hmac - HMAC functions for ngx_lua and LuaJIT&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#name&#34;&gt;Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#methods&#34;&gt;Methods&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#new&#34;&gt;new&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#update&#34;&gt;update&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#final&#34;&gt;final&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#reset&#34;&gt;reset&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#copyright-and-license&#34;&gt;Copyright and License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#see-also&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;p&gt;This library is still under active development and is considered production ready.&lt;/p&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;This library requires an nginx build with OpenSSL, the &lt;a href=&#34;http://wiki.nginx.org/HttpLuaModule&#34;&gt;ngx_lua module&lt;/a&gt;, and &lt;a href=&#34;http://luajit.org/luajit.html&#34;&gt;LuaJIT 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Synopsis&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    # nginx.conf:&#xA;&#xA;    lua_package_path &#34;/path/to/lua-resty-hmac/lib/?.lua;;&#34;;&#xA;&#xA;    server {&#xA;        location = /test {&#xA;            content_by_lua_file conf/test.lua;&#xA;        }&#xA;    }&#xA;&#xA;    -- conf/test.lua:&#xA;&#xA;    local hmac = require &#34;resty.hmac&#34;&#xA;&#xA;    local hmac_sha1 = hmac:new(&#34;secret_key&#34;, hmac.ALGOS.SHA1)&#xA;    if not hmac_sha1 then&#xA;        ngx.say(&#34;failed to create the hmac_sha1 object&#34;)&#xA;        return&#xA;    end&#xA;&#xA;    local ok = hmac_sha1:update(&#34;he&#34;)&#xA;    if not ok then&#xA;        ngx.say(&#34;failed to add data&#34;)&#xA;        return&#xA;    end&#xA;&#xA;    ok = hmac_sha1:update(&#34;llo&#34;)&#xA;    if not ok then&#xA;        ngx.say(&#34;failed to add data&#34;)&#xA;        return&#xA;    end&#xA;&#xA;    local mac = hmac_sha1:final()  -- binary mac&#xA;&#xA;    local str = require &#34;resty.string&#34;&#xA;    ngx.say(&#34;hmac_sha1: &#34;, str.to_hex(mac))&#xA;        -- output: &#34;hmac_sha1: aee4b890b574ea8fa4f6a66aed96c3e590e5925a&#34;&#xA;&#xA;    -- dont forget to reset after final!&#xA;    if not hmac_sha1:reset() then&#xA;        ngx.say(&#34;failed to reset hmac_sha1&#34;)&#xA;        return&#xA;    end&#xA;&#xA;    -- short version&#xA;    ngx.say(&#34;hmac_sha1: &#34;, hmac_sha1:final(&#34;world&#34;, true))&#xA;        -- output: &#34;hmac_sha1: 4e9538f1efbe565c522acfb72fce6092ea6b15e0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Methods&lt;/h1&gt; &#xA;&lt;p&gt;To load this library,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;you need to specify this library&#39;s path in ngx_lua&#39;s &lt;a href=&#34;https://github.com/openresty/lua-nginx-module#lua_package_path&#34;&gt;lua_package_path&lt;/a&gt; directive. For example, &lt;code&gt;lua_package_path &#34;/path/to/lua-resty-hmac/lib/?.lua;;&#34;;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;you use &lt;code&gt;require&lt;/code&gt; to load the library into a local Lua variable:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    local hmac = require &#34;resty.hmac&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;new&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;syntax: local hmac_sha256 = hmac:new(key [, hash_algorithm])&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Creates a new hmac instance. If failed, returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;key&lt;/code&gt; argument specifies the key to use when calculating the message authentication code (MAC). &lt;code&gt;key&lt;/code&gt; is a lua string which may contain printable characters or binary data.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;hash_algorithm&lt;/code&gt; argument specifies which hashing algorithm to use (&lt;code&gt;hmac.ALGOS.MD5&lt;/code&gt;, &lt;code&gt;hmac.ALGOS.SHA1&lt;/code&gt;, &lt;code&gt;hmac.ALGOS.SHA256&lt;/code&gt;, &lt;code&gt;hmac.ALGOS.SHA512&lt;/code&gt;). The default value is &lt;code&gt;hmac.ALGOS.MD5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;update&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;syntax: hmac_sha256:update(data)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Updates the MAC calculation to include new data. If failed, returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; argument specifies the additional data to include in the MAC. &lt;code&gt;data&lt;/code&gt; is a lua string which may contain printable characters or binary data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;final&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;syntax: local mac = hmac_sha256:final([data, output_hex])&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finalizes the MAC calculation and returns the final MAC value. If failed, returns &lt;code&gt;nil&lt;/code&gt;. When &lt;code&gt;output_hex&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt; returns a lua string containing the raw, binary MAC. When &lt;code&gt;output_hex&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; returns a lua string containing the hexadecimal representation of the MAC.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; argument specifies the additional data to include in the MAC before finalizing the calculation. The default value is &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;output_hex&lt;/code&gt; argument specifies wether the MAC should be returned as hex or binary. If &lt;code&gt;true&lt;/code&gt; the MAC will be returned as hex. The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;reset&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;syntax: hmac_sha256:reset()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Resets the internal hmac context so it can be re-used to calculate a new MAC. If failed, returns &lt;code&gt;false&lt;/code&gt;. If successful, the &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;hash_algorithm&lt;/code&gt; remain the same but all other information is cleared.&lt;/p&gt; &#xA;&lt;p&gt;This MUST be called after &lt;code&gt;hmac_sha256:final()&lt;/code&gt; in order to calculate a new MAC using the same hmac instance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://luajit.org&#34;&gt;LuaJIT&lt;/a&gt; 2.0+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/HttpLuaModule&#34;&gt;ngx_lua module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-string&#34;&gt;lua-resty-string&lt;/a&gt; 0.8+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; 1.0.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;It is recommended to use the latest &lt;a href=&#34;http://openresty.org&#34;&gt;ngx_openresty bundle&lt;/a&gt; directly. You&#39;ll need to enable LuaJIT when building your ngx_openresty bundle by passing the &lt;code&gt;--with-luajit&lt;/code&gt; option to its &lt;code&gt;./configure&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;Also, You need to configure the &lt;a href=&#34;https://github.com/openresty/lua-nginx-module#lua_package_path&#34;&gt;lua_package_path&lt;/a&gt; directive to add the path of your lua-resty-hmac source tree to ngx_lua&#39;s Lua module search path, as in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;    # nginx.conf&#xA;    http {&#xA;        lua_package_path &#34;/path/to/lua-resty-hmac/lib/?.lua;;&#34;;&#xA;        ...&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then load the library in Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    local hmac = require &#34;resty.hmac&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Copyright and License&lt;/h1&gt; &#xA;&lt;p&gt;This module is licensed under the BSD license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2012-2021, Thought Foundry Inc.&lt;/p&gt; &#xA;&lt;p&gt;All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;See Also&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the ngx_lua module: &lt;a href=&#34;http://wiki.nginx.org/HttpLuaModule&#34;&gt;http://wiki.nginx.org/HttpLuaModule&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wuneiii/sysadmin-script</title>
    <updated>2022-11-07T01:40:19Z</updated>
    <id>tag:github.com,2022-11-07:/wuneiii/sysadmin-script</id>
    <link href="https://github.com/wuneiii/sysadmin-script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;some tools for linux sysadmin&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>dagolden/Path-Tiny</title>
    <updated>2022-11-07T01:40:19Z</updated>
    <id>tag:github.com,2022-11-07:/dagolden/Path-Tiny</id>
    <link href="https://github.com/dagolden/Path-Tiny" rel="alternate"></link>
    <summary type="html">&lt;p&gt;File path utility&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;HOW TO CONTRIBUTE&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to this distribution. This file contains instructions that will help you work with the source code.&lt;/p&gt; &#xA;&lt;p&gt;The distribution is managed with Dist::Zilla. This means that many of the usual files you might expect are not in the repository, but are generated at release time, as is much of the documentation. Some generated files are kept in the repository as a convenience (e.g. Makefile.PL or cpanfile).&lt;/p&gt; &#xA;&lt;p&gt;Generally, &lt;strong&gt;you do not need Dist::Zilla to contribute patches&lt;/strong&gt;. You do need Dist::Zilla to create a tarball. See below for guidance.&lt;/p&gt; &#xA;&lt;h3&gt;Getting dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If you have App::cpanminus 1.6 or later installed, you can use &lt;code&gt;cpanm&lt;/code&gt; to satisfy dependencies like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cpanm --installdeps .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, look for either a &lt;code&gt;Makefile.PL&lt;/code&gt; or &lt;code&gt;cpanfile&lt;/code&gt; file for a list of dependencies to satisfy.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;You can run tests directly using the &lt;code&gt;prove&lt;/code&gt; tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ prove -l&#xA;$ prove -lv t/some_test_file.t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For most of my distributions, &lt;code&gt;prove&lt;/code&gt; is entirely sufficient for you to test any patches you have. I use &lt;code&gt;prove&lt;/code&gt; for 99% of my testing during development.&lt;/p&gt; &#xA;&lt;h3&gt;Code style and tidying&lt;/h3&gt; &#xA;&lt;p&gt;Please try to match any existing coding style. If there is a &lt;code&gt;.perltidyrc&lt;/code&gt; file, please install Perl::Tidy and use perltidy before submitting patches.&lt;/p&gt; &#xA;&lt;p&gt;If there is a &lt;code&gt;tidyall.ini&lt;/code&gt; file, you can also install Code::TidyAll and run &lt;code&gt;tidyall&lt;/code&gt; on a file or &lt;code&gt;tidyall -a&lt;/code&gt; to tidy all files.&lt;/p&gt; &#xA;&lt;h3&gt;Patching documentation&lt;/h3&gt; &#xA;&lt;p&gt;Much of the documentation Pod is generated at release time. Some is generated boilerplate; other documentation is built from pseudo-POD directives in the source like C&amp;lt;=method&amp;gt; or C&amp;lt;=func&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to submit a documentation edit, please limit yourself to the documentation you see.&lt;/p&gt; &#xA;&lt;p&gt;If you see typos or documentation issues in the generated docs, please email or open a bug ticket instead of patching.&lt;/p&gt; &#xA;&lt;h3&gt;Where to send patches and pull requests&lt;/h3&gt; &#xA;&lt;p&gt;If you found this distribution on Github, sending a pull-request is the best way to contribute.&lt;/p&gt; &#xA;&lt;p&gt;If a pull-request isn&#39;t possible, a bug ticket with a patch file is the next best option.&lt;/p&gt; &#xA;&lt;p&gt;As a last resort, an email to the author(s) is acceptable.&lt;/p&gt; &#xA;&lt;h2&gt;Installing and using Dist::Zilla&lt;/h2&gt; &#xA;&lt;p&gt;Dist::Zilla is not required for contributing, but if you&#39;d like to learn more, this section will get you up to speed.&lt;/p&gt; &#xA;&lt;p&gt;Dist::Zilla is a very powerful authoring tool, optimized for maintaining a large number of distributions with a high degree of automation, but it has a large dependency chain, a bit of a learning curve and requires a number of author-specific plugins.&lt;/p&gt; &#xA;&lt;p&gt;To install it from CPAN, I recommend one of the following approaches for the quickest installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# using CPAN.pm, but bypassing non-functional pod tests&#xA;$ cpan TAP::Harness::Restricted&#xA;$ PERL_MM_USE_DEFAULT=1 HARNESS_CLASS=TAP::Harness::Restricted cpan Dist::Zilla&#xA;&#xA;# using cpanm, bypassing *all* tests&#xA;$ cpanm -n Dist::Zilla&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In either case, it&#39;s probably going to take about 10 minutes. Go for a walk, go get a cup of your favorite beverage, take a bathroom break, or whatever. When you get back, Dist::Zilla should be ready for you.&lt;/p&gt; &#xA;&lt;p&gt;Then you need to install any plugins specific to this distribution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cpan `dzil authordeps`&#xA;$ dzil authordeps | cpanm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once installed, here are some dzil commands you might try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dzil build&#xA;$ dzil test&#xA;$ dzil xtest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can learn more about Dist::Zilla at &lt;a href=&#34;http://dzil.org/&#34;&gt;http://dzil.org/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>