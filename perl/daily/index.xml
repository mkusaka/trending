<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-23T01:40:12Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thibaultcha/lua-resty-jit-uuid</title>
    <updated>2024-01-23T01:40:12Z</updated>
    <id>tag:github.com,2024-01-23:/thibaultcha/lua-resty-jit-uuid</id>
    <link href="https://github.com/thibaultcha/lua-resty-jit-uuid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and dependency-free UUID library for LuaJIT/ngx_lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lua-resty-jit-uuid&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://luarocks.org/modules/thibaultcha/lua-resty-jit-uuid&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-0.0.7-blue.svg?style=flat&#34; alt=&#34;Module Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/thibaultcha/lua-resty-jit-uuid&#34;&gt;&lt;img src=&#34;https://travis-ci.org/thibaultcha/lua-resty-jit-uuid.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/thibaultcha/lua-resty-jit-uuid?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/thibaultcha/lua-resty-jit-uuid/badge.svg?branch=master&amp;amp;style=flat&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A pure LuaJIT (no dependencies) UUID library tuned for performance.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#contributions&#34;&gt;Contributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Motivation&lt;/h3&gt; &#xA;&lt;p&gt;This module is aimed at being a free of dependencies, performant and complete UUID library for LuaJIT and ngx_lua.&lt;/p&gt; &#xA;&lt;p&gt;Unlike FFI and C bindings, it does not depend on libuuid being available in your system. On top of that, it performs &lt;strong&gt;better&lt;/strong&gt; than most (all?) of the generators it was benchmarked against, FFI bindings included.&lt;/p&gt; &#xA;&lt;p&gt;Finally, it provides additional features such as UUID v3/v4/v5 generation and UUID validation.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt; section for comparisons between other UUID libraries for Lua/LuaJIT.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;LuaJIT:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local uuid = require &#39;resty.jit-uuid&#39;&#xA;&#xA;uuid.seed()        ---&amp;gt; automatic seeding with os.time(), LuaSocket, or ngx.time()&#xA;&#xA;uuid()             ---&amp;gt; v4 UUID (random)&#xA;uuid.generate_v4() ---&amp;gt; v4 UUID&#xA;&#xA;uuid.generate_v3() ---&amp;gt; v3 UUID (name-based with MD5)&#xA;uuid.generate_v5() ---&amp;gt; v5 UUID (name-based with SHA-1)&#xA;&#xA;uuid.is_valid()    ---&amp;gt; true/false (automatic JIT PCRE or Lua patterns)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OpenResty:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;http {&#xA;    init_worker_by_lua_block {&#xA;        local uuid = require &#39;resty.jit-uuid&#39;&#xA;        uuid.seed() -- very important!&#xA;    }&#xA;&#xA;    server {&#xA;        location / {&#xA;            content_by_lua_block {&#xA;                local uuid = require &#39;resty.jit-uuid&#39;&#xA;                ngx.say(uuid())&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: when generating v4 (random) UUIDs in ngx_lua, it is &lt;strong&gt;very important&lt;/strong&gt; that you seed this module in the &lt;code&gt;init_worker&lt;/code&gt; phase. If you do not, your workers will generate identical UUID sequences, which could lead to serious issues in your application. The seeding requirement also applies in uses outside of ngx_lua, although seeding is less delicate in such cases. Additionally, you should be weary about the usage of the &lt;a href=&#34;https://github.com/openresty/lua-nginx-module#lua_code_cache&#34;&gt;&lt;code&gt;lua_code_cache&lt;/code&gt;&lt;/a&gt; directive: if Lua code cache is disabled, all sequences of UUIDs generated during subsequent requests will be identical, unless this module is seeded for every request. Just like disabling Lua code cache, such behavior would be considered an ngx_lua anti-pattern and you should avoid it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;This module can be installed through Luarocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ luarocks install lua-resty-jit-uuid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via &lt;a href=&#34;https://github.com/openresty/opm&#34;&gt;opm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ opm get thibaultcha/lua-resty-jit-uuid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or can be manually copied in your &lt;code&gt;LUA_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Documentation is available online at &lt;a href=&#34;http://thibaultcha.github.io/lua-resty-jit-uuid/&#34;&gt;http://thibaultcha.github.io/lua-resty-jit-uuid/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;This module has been carefully benchmarked on each step of its implementation to ensure the best performance for OpenResty and plain LuaJIT. For example, UUID validation will use JIT PCRE over Lua patterns when possible.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;bench.lua&lt;/code&gt; file provides benchmarks of UUID generation for several popular UUID libraries.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;make bench&lt;/code&gt; to run them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LuaJIT 2.1.0-beta1 with 1e+06 UUIDs&#xA;UUID v4 (random) generation&#xA;1. resty-jit-uuid   took:   0.064228s    0%&#xA;2. FFI binding      took:   0.093374s   +45%&#xA;3. C binding        took:   0.220542s   +243%&#xA;4. Pure Lua         took:   2.051905s   +3094%&#xA;&#xA;UUID v3 (name-based and MD5) generation if supported&#xA;1. resty-jit-uuid   took:   1.306127s&#xA;&#xA;UUID v5 (name-based and SHA-1) generation if supported&#xA;1. resty-jit-uuid   took:   4.834929s&#xA;&#xA;UUID validation if supported (set of 70% valid, 30% invalid)&#xA;1. resty-jit-uuid (JIT PCRE enabled)    took:   0.223060s&#xA;2. FFI binding                          took:   0.256580s&#xA;3. resty-jit-uuid (Lua patterns)        took:   0.444174s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FFI binding: &lt;a href=&#34;https://github.com/bungle/lua-resty-uuid&#34;&gt;https://github.com/bungle/lua-resty-uuid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C binding: &lt;a href=&#34;https://github.com/Mashape/lua-uuid&#34;&gt;https://github.com/Mashape/lua-uuid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pure Lua: &lt;a href=&#34;https://github.com/Tieske/uuid&#34;&gt;https://github.com/Tieske/uuid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;resty-jit-uuid: this module (base reference for generation % comparison)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: UUID validation performance in ngx_lua (JIT PCRE) can be greatly improved by enabling &lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributions&lt;/h3&gt; &#xA;&lt;p&gt;Suggestions improving this module&#39;s or the benchmarks&#39; performance (of any benchmarked library) are particularly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Work licensed under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thibaultcha/lua-resty-jit-uuid/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>