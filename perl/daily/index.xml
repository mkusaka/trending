<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-02T01:34:04Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mla/pg_sample</title>
    <updated>2024-12-02T01:34:04Z</updated>
    <id>tag:github.com,2024-12-02:/mla/pg_sample</id>
    <link href="https://github.com/mla/pg_sample" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PostgreSQL utility for creating a small, sample database from a larger one&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;pg_sample - extract a small, sample dataset from a larger PostgreSQL database while maintaining referential integrity.&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;p&gt;pg_sample [ option... ] [ dbname ]&lt;/p&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;pg_sample is a utility for exporting a small, sample dataset from a larger PostgreSQL database. The output and command-line options closely resemble the pg_dump backup utility (although only the plain-text format is supported).&lt;/p&gt; &#xA;&lt;p&gt;The sample database produced includes all tables from the original, maintains referential integrity, and supports circular dependencies.&lt;/p&gt; &#xA;&lt;p&gt;To build an actual instance of the sample database, the output of this script can be piped to the psql utility. For example, assuming we have an existing PostgreSQL database named &#34;mydb&#34;, a sample database could be constructed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb sampledb&#xA;$ pg_sample mydb | psql -v ON_ERROR_STOP=1 sampledb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;-v ON_ERROR_STOP=1&#34; option is not required but is recommended to catch any import errors.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PostgreSQL 8.1 or later&lt;/li&gt; &#xA; &lt;li&gt;pg_dump should be in your search path (in order to dump the schema)&lt;/li&gt; &#xA; &lt;li&gt;Perl DBI and DBD::Pg (&amp;gt;= 2.0) modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mla/pg_sample/master/#using-with-docker&#34;&gt;Docker section&lt;/a&gt; for details on how to run pg_sample with Docker.&lt;/p&gt; &#xA;&lt;p&gt;To install locally:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo. e.g., &lt;pre&gt;&lt;code&gt;$ git clone git@github.com:mla/pg_sample.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install dependencies. For Ubuntu / Mint, try: &lt;pre&gt;&lt;code&gt;$ sudo apt install perl libdbi-perl libdbd-pg-perl&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run it. &lt;pre&gt;&lt;code&gt;$ cd pg_sample&#xA;$ ./pg_sample ... # See below for options&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Command-line Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;dbname&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Specifies the database to sample. If not specified, uses the&#xA;environment variable PGDATABASE, if defined; otherwise, uses&#xA;the username of the user executing the script.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-a&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;--data-only&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Output only the data, not the schema (data definitions).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--help&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Output detailed options and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-E&lt;/strong&gt; &lt;em&gt;encoding&lt;/em&gt;&lt;br&gt; &lt;strong&gt;--encoding=&lt;/strong&gt;&lt;em&gt;encoding&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Use the specified character set encoding. If not specified, uses the&#xA;environment variable PGCLIENTENCODING, if defined; otherwise, uses&#xA;the encoding of the database.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-f&lt;/strong&gt; &lt;em&gt;file&lt;/em&gt;&lt;br&gt; &lt;strong&gt;--file=&lt;/strong&gt;&lt;em&gt;file&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Send output to the specified file. If omitted, standard output is used.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--force&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Drop the sample schema if it exists.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--keep&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Don&#39;t delete the sample schema when the script finishes.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--limit=&lt;/strong&gt;&lt;em&gt;limit&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;As a numeric value, specifies the default number of rows to copy from&#xA;each table (defaults to 100). Note that sample tables may end up with&#xA;significantly more rows in order to satisfy foreign key constraints.&#xA;&#xA;If the value is a string, it is interpreted as a pattern/rule pair to&#xA;apply to matching tables. Examples:&#xA;&#xA;     # include all rows from the users table&#xA;     --limit=&#34;users = *&#34;&#xA;&#xA;    # include 1,000 rows from users table&#xA;    --limit=&#34;users = 1000&#34;&#xA;&#xA;    # include 10% of the total rows from users table&#xA;    --limit=&#34;users = 10%&#34;&#xA;&#xA;    # include all users where deactivated column is false&#xA;    --limit=&#34;users = NOT deactivated&#34;&#xA;&#xA;    # include all rows from all tables in the forums schema&#xA;    --limit=&#34;forums.* = *&#34;&#xA;&#xA;    # include 5% of total rows from each table in log schema&#xA;    # and 50% to the rest of tables&#xA;    --limit=&#34;log.* = 5%, * = 50%&#34;&#xA;&#xA;The limit option may be specified multiple times. Multiple pattern/rule&#xA;pairs can also be specified as a single comma-separated value. For example:&#xA;&#xA;    # include all rows from the ads table; otherwise default to 300 rows&#xA;    --limit=&#34;ads=*,*=300&#34;&#xA;&#xA;Rules are applied in order with the first match taking precedence.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--ordered&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Guarantees deterministic row ordering in the generated scripts by ordering&#xA;by primary key.&#xA;&#xA;--ordered-desc and --ordered-asc are also available to &#xA;control whether sort is descending or ascending, respectively.&#xA;Results are in descending order by default (newest records first) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--random&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Randomize the rows initially selected from each table. May significantly&#xA;increase the running time of the script.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--schema=&lt;/strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The schema name to export (defaults to all).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--sample-schema=&lt;/strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The schema name to use for the sample database (defaults to _pg_sample).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--trace&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Turn on Perl DBI tracing. See the DBI module documentation for details.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;--verbose&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Output status information to standard error.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following options control the database connection parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;-h&lt;/strong&gt; &lt;em&gt;host&lt;/em&gt;&lt;br&gt; &lt;strong&gt;--host=&lt;/strong&gt;&lt;em&gt;host&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The host name to connect to. Defaults to the PGHOST environment&#xA;variable if not specified.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-p&lt;/strong&gt; &lt;em&gt;port&lt;/em&gt;&lt;br&gt; &lt;strong&gt;--port=&lt;/strong&gt;&lt;em&gt;port&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The database port to connect to. Defaults to the PGPORT environment&#xA;variable, if set; otherwise, the default port is used.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-U&lt;/strong&gt; &lt;em&gt;username&lt;/em&gt;&lt;br&gt; &lt;strong&gt;--username=&lt;/strong&gt;&lt;em&gt;username&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;User name to connect as.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-W&lt;/strong&gt; &lt;em&gt;password&lt;/em&gt;&lt;br&gt; &lt;strong&gt;-password=&lt;/strong&gt;&lt;em&gt;password&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Password to connect with.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using with Docker&lt;/h2&gt; &#xA;&lt;p&gt;We support running &lt;code&gt;pg_sample&lt;/code&gt; as a &lt;code&gt;docker&lt;/code&gt; container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker run --network=host -v &#34;$(pwd):/io&#34; mla12/pg_sample -v [option ...] --file /io/myfile.sql &amp;lt;dbname&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;TROUBLESHOOTING&lt;/h1&gt; &#xA;&lt;h2&gt;Working with JSON Fields&lt;/h2&gt; &#xA;&lt;p&gt;If you get the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;could not identify an equality operator for type json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have one or more tables that have &lt;code&gt;json&lt;/code&gt; column types. This error exists because &lt;code&gt;json&lt;/code&gt; column types cannot execute equality comparisons natively. To solve this problem, you can convert these &lt;code&gt;json&lt;/code&gt; columns into &lt;code&gt;jsonb&lt;/code&gt; columns. However, if that is not feasible in your situation, an alternate solution is to run the &lt;a href=&#34;https://github.com/mla/pg_sample/raw/master/contrib/add_json_equality_operator.sql&#34;&gt;contrib/add_json_equality_operator.sql&lt;/a&gt; script against the database you are sampling and it will create helper functions for comparing &lt;code&gt;json&lt;/code&gt; columns.&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This code is released under the Artistic License. See &lt;a href=&#34;http://search.cpan.org/perldoc?perlartistic&#34;&gt;perlartistic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;createdb(1), pg_dump(1), psql(1)&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Maurice Aubrey &lt;a href=&#34;mailto:maurice.aubrey@gmail.com&#34;&gt;maurice.aubrey@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>