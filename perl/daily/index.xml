<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-17T01:41:57Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nigelhorne/ged2site</title>
    <updated>2023-04-17T01:41:57Z</updated>
    <id>tag:github.com,2023-04-17:/nigelhorne/ged2site</id>
    <link href="https://github.com/nigelhorne/ged2site" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create a family tree website from a Gedcom file&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ged2site&lt;/h1&gt; &#xA;&lt;p&gt;Convert a Gedcom file to HTML to create a family tree website.&lt;/p&gt; &#xA;&lt;p&gt;An example genealogy website that was produced by ged2site is available at &lt;a href=&#34;https://genealogy.nigelhorne.com&#34;&gt;https://genealogy.nigelhorne.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is quite complex software, so if you are a genealogist looking to create a website and aren&#39;t an IT guru, it would be better to e-mail me on &lt;code&gt;&amp;lt;njh at nigelhorne.com&amp;gt;&lt;/code&gt; for professional help. If you contact me, please let me know the program you&#39;re using to create your Gedcom file, and the operating system you are using.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s been tested more extensively with Gedcoms exported and downloaded from FindMyPast and Family Tree Maker, though it should work fine with other systems such as GenesReunited and Ancestry.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ged2site -cFdh &#39;Your Name&#39; gedfile.ged&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will then have two sites created in sub directories&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;static-site is static HTML,&lt;/li&gt; &#xA; &lt;li&gt;dynamic-site is a &lt;a href=&#34;https://raw.githubusercontent.com/github.com/nigelhorne/vwf&#34;&gt;VWF&lt;/a&gt; based website which uses templates to support more than one language and present different content to mobile/web/search-engine clients. This is much more easily customisable by you to create the look and feel of the website that you want.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you decide to use the static site, just copy files in the static-site directory to your web-server.&lt;/p&gt; &#xA;&lt;p&gt;If you decide to use the dynamic site first. create a $hostname.com file in the conf directory (use default as a template), then modify the contents of the template tree so that the site looks as you want it. The configuration file can be in any number of formats including INI and XML.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rootdir: /full/path/to/website directory&#xA;SiteTitle: The title of your website&#xA;memory_cache: where short-term volatile information is stored, such as the country of origin of the client&#xA;disc_cache: where long-term information is stored, such as copies of output to see if HTTP 304 can be returned&#xA;contact: your name and e-mail address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then upload the dynamic-site directory to your web-server. The databases are in CSV format. To speed up access you can convert to SQLite format using &lt;a href=&#34;http://search.cpan.org/~rwstauner/App-csv2sqlite/&#34;&gt;csv2sqlite&lt;/a&gt;, which you should run on each of the .csv files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;csv2sqlite -o sep_char=&#39;!&#39; -o allow_loose_quotes=1 people.csv people.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every time you upload a new site ensure that you remove the &#34;save_to&#34; directory and the disc cache, since they contain cached copies of pages that will be inconsistent with the new site.&lt;/p&gt; &#xA;&lt;p&gt;Finally, for the dynamic site, set-up the logging, if you want any. To do that modify the page.l4pconf file to taste.&lt;/p&gt; &#xA;&lt;p&gt;The options to ged2site are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flag&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-c&lt;/td&gt; &#xA;   &lt;td&gt;Give citations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-d&lt;/td&gt; &#xA;   &lt;td&gt;Download copies of objects and media and include them on the generated website rather than link to them, useful if the objects are on pay sites such as FMP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-f&lt;/td&gt; &#xA;   &lt;td&gt;treat warnings as fatal, implies -w&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-F&lt;/td&gt; &#xA;   &lt;td&gt;print a family tree (requires GraphViz)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-g&lt;/td&gt; &#xA;   &lt;td&gt;Generate Google verification file - see &lt;a href=&#34;http://www.google.com/webmasters/verification&#34;&gt;www.google.com/webmasters/verification&lt;/a&gt; Don&#39;t include the .html at the end of the code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-h&lt;/td&gt; &#xA;   &lt;td&gt;set the home person&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-l&lt;/td&gt; &#xA;   &lt;td&gt;include living people&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-L n&lt;/td&gt; &#xA;   &lt;td&gt;Limit to n records&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-m&lt;/td&gt; &#xA;   &lt;td&gt;Generate a Google map on each page showing events&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-J&lt;/td&gt; &#xA;   &lt;td&gt;Google Maps JavaScript API key (used to display the map)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-G&lt;/td&gt; &#xA;   &lt;td&gt;Google Maps geolocation API key (used to populate the map)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-w&lt;/td&gt; &#xA;   &lt;td&gt;print warning about inconsistent data - a sort of lint for Gedcom files, may not do as many as &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github.com/nigelhorne/gedcom&#34;&gt;gedcom&lt;/a&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-W&lt;/td&gt; &#xA;   &lt;td&gt;don&#39;t colorize warning output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-x f&lt;/td&gt; &#xA;   &lt;td&gt;Given a location of people.xml from a previous run, add to a blog of changes (TODO)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://github.com/nigelhorne/gedcom&#34;&gt;gedcom&lt;/a&gt; is installed, ged2site will also create a calendar of births and deaths, one page for each month in the current year.&lt;/p&gt; &#xA;&lt;p&gt;Some of the options can be stored in &lt;em&gt;ged2site.conf&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flag&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-h&lt;/td&gt; &#xA;   &lt;td&gt;home&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-g&lt;/td&gt; &#xA;   &lt;td&gt;google_verification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-G&lt;/td&gt; &#xA;   &lt;td&gt;google_maps_geolocation_key (also can be stored in the &lt;code&gt;GMAP_KEY&lt;/code&gt; environment variable)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-J&lt;/td&gt; &#xA;   &lt;td&gt;google_maps_javascript_key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can get free API keys from Google at &lt;a href=&#34;https://console.developers.google.com/apis/credentials&#34;&gt;https://console.developers.google.com/apis/credentials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ged2site also creates an XML file, people.xml, of parsed output which you can use in querying software, so it also works as a Gedcom to XML converter.&lt;/p&gt; &#xA;&lt;h1&gt;Debugging and Developing&lt;/h1&gt; &#xA;&lt;p&gt;Because the dynamic ged2site site uses VWF, it is possible to run the scripts from the command line simulating different environments and thus test the look and feel of your site before you deploy. Be aware that you will also see debugging messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd dynamic-site/bin &amp;amp;&amp;amp; ./tosqlite&#xA;cd ../cgi-bin&#xA;./page.fcgi page=people home=1 # Look at your home entry from the -h option&#xA;./page.fcgi page=surnames surname=horne # List people whose surname is Horne&#xA;./page.fcgi page=surnames surname=horne lang=fr # List people whose surname is Horne, in French&#xA;./page.fcgi --mobile page=surnames surname=horne # List people whose surname is Horne, as it would appear on a smart-phone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the environment of the system to help with debugging&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://localhost/cgi-bin/page.fcgi?page=meta-data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Pre-Requisites&lt;/h1&gt; &#xA;&lt;p&gt;This program uses many CPAN modules. Running the program for the first time with no arguments should install them, of course that will fail if you don&#39;t have the privilege, in which case you&#39;ll need to add them by hand. To ensure you&#39;ll be installing them in a directory you can use either use local::lib or perlbrew.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nigelhorne/lib&#34;&gt;Library&lt;/a&gt; - library of code common with &lt;a href=&#34;https://github.com/nigelhorne/gedcom&#34;&gt;gedcom&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Ancestry on Windows&lt;/h1&gt; &#xA;&lt;p&gt;I use FindMyPast on Linux, because export of images is better on FMP and because Linux. I recognise that many folks use Ancestry on Windows, so I have this rough guide which works for me, but understand that you&#39;ll still need to be an advanced Windows user, this is not for the Novice. If you still need help, e-mail me or put an issue on github.com/nigelhorne/ged2site.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Firstly, if you&#39;re running Windows 10, install &lt;a href=&#34;https://ubuntu.com/tutorials/ubuntu-on-windows#1-overview&#34;&gt;Ubuntu&lt;/a&gt; or install Perl directly, either ActiveState or Strawberry should work fine. I have also had success using Cygwin&#39;s Perl.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next follow the instructions at &lt;a href=&#34;https://metacpan.org/pod/local::lib#The-bootstrapping-technique&#34;&gt;local::lib&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Load in all the CPAN modules that ged2site uses. If you&#39;re not sure, run ged2site with no arguments and the program will install its core modules to get started.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Family Tree Maker. Sorry; there&#39;s no alternative so you&#39;ll just have to find a copy and buy it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sync your ACOM tree to FTM, ensuring you also sync all of the media.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a Gedcom using File-&amp;gt;Export, and choosing GEDCOM5.5 as the output format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run ged2site on that saved Gedcom file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;-F may not work because it depends on Graphviz being found, but could work under Cygwin. On the other hand, I&#39;ve been hit by a Cygwin bug when trying to call Graphviz from ged2site. This may be because ged2site pipes output to Graphviz, perhaps it would work if it used a temporary file as input.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;.htaccess&lt;/h1&gt; &#xA;&lt;p&gt;I strongly suggest adding this to your .htaccess file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# disallow access to special directories and feed back a 404 error&#xA;RedirectMatch 404 /\\.svn(/|$)&#xA;RedirectMatch 404 /\\.git(/|$)&#xA;&#xA;&amp;lt;IfModule mod_expires.c&amp;gt;&#xA;# http://httpd.apache.org/docs/2.0/mod/mod_expires.html&#xA;ExpiresActive On&#xA;&#xA;ExpiresDefault &#34;access plus 1 hour&#34;&#xA;&#xA;ExpiresByType image/x-icon &#34;access plus 1 month&#34;&#xA;ExpiresByType image/png &#34;access plus 1 month&#34;&#xA;ExpiresByType image/jpg &#34;access plus 1 month&#34;&#xA;ExpiresByType image/gif &#34;access plus 1 month&#34;&#xA;ExpiresByType image/jpeg &#34;access plus 1 month&#34;&#xA;&#xA;ExpiresByType text/css &#34;access plus 1 day&#34;&#xA;ExpiresByType text/javascript &#34;access plus 1 day&#34;&#xA;&amp;lt;/IfModule&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Environment Variables&lt;/h1&gt; &#xA;&lt;p&gt;For compatibility with other code, these environment variables are honoured:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BMAP_KEY: Bing (virtualearth.net) API Key&#xA;GEONAMES_USE: geonames.org registered username&#xA;GMAP_KEY: Google Places (maps.googleapis.com) API Key&#xA;LANG: some handling of en_GB and en_US translating between then, fr_FR is a work in progress&#xA;OPENADDR_HOME: directory of data from http://results.openaddresses.io/&#xA;REDIS_SERVER: ip:port pair of where to cache geo-coding data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Bugs&lt;/h1&gt; &#xA;&lt;p&gt;If you see this message in your log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Can&#39;t locate auto/NetAddr/IP/InetBase/AF_INET6.al&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this is because of a bug in the autoloader. The fix is to edit NetAddr/IP/InetBase.pm adding this toward the top, just after the package statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Socket;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ancestry images that you&#39;ve uploaded yourself should work fine. However, images attached from another tree to your tree are not downloaded. Either use FTM or download from the other tree to your desktop and upload to your tree.&lt;/p&gt; &#xA;&lt;p&gt;There will be numerous strange handling of Gedcoms since it&#39;s not that tightly observed by websites.&lt;/p&gt; &#xA;&lt;p&gt;If you see lumpy English text in the output, or just plain mistakes, please e-mail me or add a bug report to github.com/nigelhorne/ged2site.&lt;/p&gt; &#xA;&lt;p&gt;Profile pictures are not handled with output from Ancestry. Findmypast is handled correctly.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fullcalendar.io&#34;&gt;https://fullcalendar.io&lt;/a&gt; for the calendar view&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/weichie/animated-Timeline&#34;&gt;https://github.com/weichie/animated-Timeline&lt;/a&gt; for the family history view&lt;/p&gt; &#xA;&lt;p&gt;Google for the map page&lt;/p&gt; &#xA;&lt;p&gt;Ron Savage for the HTML::Timeline module which sparked a template for the timeline code&lt;/p&gt; &#xA;&lt;p&gt;Graphviz for the family tree and Tree::Family from CPAN for the inspiration and code to use as a template&lt;/p&gt; &#xA;&lt;p&gt;So many Perl CPAN modules that if I list them all I&#39;ll miss one, but special mention goes to the Gedcom module.&lt;/p&gt; &#xA;&lt;p&gt;Magnific Popup &lt;a href=&#34;http://dimsemenov.com/plugins/magnific-popup/&#34;&gt;http://dimsemenov.com/plugins/magnific-popup/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nigelhorne/gedcom&#34;&gt;gedcom&lt;/a&gt; - a general purpose utility for Gedcom files &lt;a href=&#34;https://github.com/nigelhorne/gedcmp&#34;&gt;gedcmp&lt;/a&gt; - compare two Gedcoms&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE AND COPYRIGHT&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2015-2023 Nigel Horne.&lt;/p&gt; &#xA;&lt;p&gt;This program is released under the following licence: GPL2 for personal use on a single computer. All other users (for example Commercial, Charity, Educational, Government) must apply in writing for a licence for use from Nigel Horne at &lt;code&gt;&amp;lt;njh at nigelhorne.com&amp;gt;&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HariSekhon/Spotify-tools</title>
    <updated>2023-04-17T01:41:57Z</updated>
    <id>tag:github.com,2023-04-17:/HariSekhon/Spotify-tools</id>
    <link href="https://github.com/HariSekhon/Spotify-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spotify Tools - Playlists Backups, Spotify CLI, URI translator, duplication detection / removal, API search queries, API automation etc.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spotify Tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/harisekhon/spotify-tools?logo=github&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/harisekhon/spotify-tools?logo=github&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/HariSekhon/Spotify-tools&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/HariSekhon/Spotify-Tools?logo=github&#34; alt=&#34;GitHub Last Commit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.codacy.com/gh/HariSekhon/Spotify-tools/dashboard&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/afe697b0ce3f4df79f16b4b3d2ded54b&#34; alt=&#34;Codacy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/harisekhon/spotify-tools&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/harisekhon/spotify-tools/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=HariSekhon_Spotify-tools&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=HariSekhon_Spotify-tools&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=HariSekhon_Spotify-tools&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=HariSekhon_Spotify-tools&amp;amp;metric=sqale_rating&#34; alt=&#34;Maintainability Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=HariSekhon_Spotify-tools&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=HariSekhon_Spotify-tools&amp;amp;metric=reliability_rating&#34; alt=&#34;Reliability Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=HariSekhon_Spotify-tools&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=HariSekhon_Spotify-tools&amp;amp;metric=security_rating&#34; alt=&#34;Security Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools#spotify-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OS-Linux-blue?logo=linux&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools#spotify-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OS-Mac-blue?logo=apple&#34; alt=&#34;Mac&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;[![DockerHub](https://img.shields.io/badge/docker-available-blue?logo=docker&amp;logoColor=white)](https://hub.docker.com/r/harisekhon/nagios-plugins/)&#xA;[![](https://images.microbadger.com/badges/image/harisekhon/spotify-tools.svg)](http://microbadger.com/#/images/harisekhon/spotify-tools)&#xA;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://harisekhon.github.io/CI-CD/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CI%20Builds-Overview%20Page-blue?logo=circleci&#34; alt=&#34;CI Builds Overview&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/raw/master/Jenkinsfile&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Jenkins-ready-blue?logo=jenkins&amp;amp;logoColor=white&#34; alt=&#34;Jenkins&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/raw/master/.concourse.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Concourse-ready-blue?logo=concourse&#34; alt=&#34;Concourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/raw/master/.gocd.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GoCD-ready-blue?logo=go&#34; alt=&#34;GoCD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/TeamCity-CI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TeamCity-ready-blue?logo=teamcity&#34; alt=&#34;TeamCity&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/HariSekhon/Spotify-tools&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/HariSekhon/Spotify-tools.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/hari-sekhon/Spotify-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/cb0dcf2e1eed7a2c3d6035b8c5ca1bf4a741c1153b89688fcf/master?label=BuildKite&amp;amp;logo=buildkite&#34; alt=&#34;BuildKite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/HariSekhon/Spotify-tools/branch/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/build/harisekhon/Spotify-tools/master?logo=appveyor&amp;amp;label=AppVeyor&#34; alt=&#34;AppVeyor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.drone.io/HariSekhon/Spotify-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/drone/build/HariSekhon/Spotify-tools/master?logo=drone&amp;amp;label=Drone&#34; alt=&#34;Drone&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://g.codefresh.io/pipelines/edit/new/builds?id=5ec401171350573576125f8d&amp;amp;pipeline=Spotify-tools&amp;amp;projects=GitHub&amp;amp;projectId=5e52ca8ea284e00f882ea992&amp;amp;rightbar=steps&amp;amp;advanced=0&amp;amp;context=github&amp;amp;filter=page:1;pageSize:10;timeFrameStart:week&#34;&gt;&lt;img src=&#34;https://g.codefresh.io/api/badges/pipeline/harisekhon/GitHub%2FSpotify-tools?branch=master&amp;amp;key=eyJhbGciOiJIUzI1NiJ9.NWU1MmM5OGNiM2FiOWUzM2Y3ZDZmYjM3.O69674cW7vYom3v5JOGKXDbYgCVIJU9EWhXUMHl3zwA&amp;amp;type=cf-1&#34; alt=&#34;Codefresh&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/HariSekhon/Spotify-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/cirrus/github/HariSekhon/Spotify-tools/master?logo=Cirrus%20CI&amp;amp;label=Cirrus%20CI&#34; alt=&#34;Cirrus CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://harisekhon.semaphoreci.com/projects/Spotify-tools&#34;&gt;&lt;img src=&#34;https://harisekhon.semaphoreci.com/badges/Spotify-tools.svg?sanitize=true&#34; alt=&#34;Semaphore&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.wercker.com/harisekhon/Spotify-tools/runs&#34;&gt;&lt;img src=&#34;https://app.wercker.com/status/c46a517909343e278c9ce354164394ae/s/master&#34; alt=&#34;Wercker&#34; title=&#34;wercker status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/raw/master/buddy.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buddy-ready-1A86FD?logo=buddy&#34; alt=&#34;Buddy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/raw/master/shippable.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Shippable-legacy-lightgrey?logo=jfrog&amp;amp;label=Shippable&#34; alt=&#34;Shippable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/raw/master/.travis.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TravisCI-ready-blue?logo=travis&amp;amp;label=Travis%20CI&#34; alt=&#34;Travis CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--[![Wercker](https://img.shields.io/wercker/ci/5ec40277728d7f43001aa790/master?label=Wercker&amp;logo=oracle)](https://app.wercker.com/harisekhon/Spotify-tools/runs)--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/harisekhon/GitHub/_build/latest?definitionId=3&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/harisekhon/GitHub/_apis/build/status/HariSekhon.spotify-tools?branchName=master&#34; alt=&#34;Azure DevOps&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/HariSekhon/spotify-tools/pipelines&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitlab/pipeline/harisekhon/spotify-tools?logo=gitlab&amp;amp;label=GitLab%20CI&#34; alt=&#34;GitLab Pipeline&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bitbucket.org/harisekhon/spotify-tools/addon/pipelines/home#!/&#34;&gt;&lt;img src=&#34;https://img.shields.io/bitbucket/pipelines/harisekhon/spotify-tools/master?logo=bitbucket&amp;amp;label=BitBucket%20CI&#34; alt=&#34;BitBucket Pipeline&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/raw/master/buildspec.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/AWS%20CodeBuild-ready-blue?logo=amazon%20aws&#34; alt=&#34;AWS CodeBuild&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/raw/master/cloudbuild.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GCP%20Cloud%20Build-ready-blue?logo=google%20cloud&amp;amp;logoColor=white&#34; alt=&#34;GCP Cloud Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/harisekhon/GitHub/_git/Spotify-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-Azure%20DevOps-0078D7?logo=azure%20devops&#34; alt=&#34;Repo on Azure DevOps&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-GitHub-2088FF?logo=github&#34; alt=&#34;Repo on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/HariSekhon/Spotify-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-GitLab-FCA121?logo=gitlab&#34; alt=&#34;Repo on GitLab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bitbucket.org/HariSekhon/Spotify-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-BitBucket-0052CC?logo=bitbucket&#34; alt=&#34;Repo on BitBucket&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/shellcheck.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/shellcheck.yaml/badge.svg?sanitize=true&#34; alt=&#34;ShellCheck&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/json.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/json.yaml/badge.svg?sanitize=true&#34; alt=&#34;JSON&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/yaml.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/yaml.yaml/badge.svg?sanitize=true&#34; alt=&#34;YAML&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/xml.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/xml.yaml/badge.svg?sanitize=true&#34; alt=&#34;XML&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/validate.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/validate.yaml/badge.svg?sanitize=true&#34; alt=&#34;Validation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/semgrep.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/semgrep.yaml/badge.svg?sanitize=true&#34; alt=&#34;Semgrep&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/semgrep-cloud.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/semgrep-cloud.yaml/badge.svg?sanitize=true&#34; alt=&#34;Semgrep Cloud&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/kics.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/kics.yaml/badge.svg?sanitize=true&#34; alt=&#34;Kics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22GitHub+Actions+Ubuntu%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/GitHub%20Actions%20Ubuntu/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/mac.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/mac.yaml/badge.svg?sanitize=true&#34; alt=&#34;Mac&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/mac_11.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/mac_11.yaml/badge.svg?sanitize=true&#34; alt=&#34;Mac 11&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/mac_12.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/actions/workflows/mac_12.yaml/badge.svg?sanitize=true&#34; alt=&#34;Mac 12&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Ubuntu%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Ubuntu/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Ubuntu+14.04%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Ubuntu%2014.04/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 14.04&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Ubuntu+16.04%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Ubuntu%2016.04/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 16.04&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Ubuntu+18.04%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Ubuntu%2018.04/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 18.04&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Ubuntu+20.04%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Ubuntu%2020.04/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 20.04&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Debian%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Debian/badge.svg?sanitize=true&#34; alt=&#34;Debian&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Debian+8%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Debian%208/badge.svg?sanitize=true&#34; alt=&#34;Debian 8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Debian+9%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Debian%209/badge.svg?sanitize=true&#34; alt=&#34;Debian 9&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Debian+10%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Debian%2010/badge.svg?sanitize=true&#34; alt=&#34;Debian 10&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22CentOS%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/CentOS/badge.svg?sanitize=true&#34; alt=&#34;CentOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22CentOS+7%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/CentOS%207/badge.svg?sanitize=true&#34; alt=&#34;CentOS 7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22CentOS+8%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/CentOS%208/badge.svg?sanitize=true&#34; alt=&#34;CentOS 8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Fedora%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Fedora/badge.svg?sanitize=true&#34; alt=&#34;Fedora&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Alpine%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Alpine/badge.svg?sanitize=true&#34; alt=&#34;Alpine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools/actions?query=workflow%3A%22Alpine+3%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/Spotify-tools/workflows/Alpine%203/badge.svg?sanitize=true&#34; alt=&#34;Alpine 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://git.io/spotify&#34;&gt;git.io/spotify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spotify tools to make it easy to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;query and control Spotify&lt;/li&gt; &#xA; &lt;li&gt;backup all your Spotify playlists&lt;/li&gt; &#xA; &lt;li&gt;keep human-readable &lt;code&gt;Artist - Track&lt;/code&gt; playlists (could migrate to another music system)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;My epic &lt;a href=&#34;https://github.com/HariSekhon/Spotify-Playlists&#34;&gt;Spotify Playlists&lt;/a&gt; collection (recently open sourced) uses this heavily.&lt;/p&gt; &#xA;&lt;p&gt;Hari Sekhon&lt;/p&gt; &#xA;&lt;p&gt;Cloud &amp;amp; Big Data Architect, United Kingdom&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/HariSekhon/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LinkedIn%20Profile-HariSekhon-blue?logo=linkedin&#34; alt=&#34;My LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open.spotify.com/user/harisekhon&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Spotify%20Profile-HariSekhon-brightgreen?logo=spotify&amp;amp;style=social&#34; alt=&#34;Spotify Profile&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h6&gt;(you&#39;re welcome to connect with me on LinkedIn)&lt;/h6&gt; &#xA;&lt;h3&gt;Inventory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bash-tools/spotify_*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.spotify.com/&#34;&gt;Spotify&lt;/a&gt; API scripts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;list all public playlists for any given user, even followed playlists&lt;/li&gt; &#xA;   &lt;li&gt;list all private playlists for the currently authorized user&lt;/li&gt; &#xA;   &lt;li&gt;backup all playlists or a selection of playlists by partial name or ID&lt;/li&gt; &#xA;   &lt;li&gt;download playlist contents as Spotify URIs / &lt;code&gt;Artists - Track&lt;/code&gt; / CSV format&lt;/li&gt; &#xA;   &lt;li&gt;convert Spotify track URIs to human readable &lt;code&gt;Artist - Track&lt;/code&gt; / CSV format&lt;/li&gt; &#xA;   &lt;li&gt;iterate any command against all playlists - command can be templated with &lt;code&gt;{playlist}&lt;/code&gt; name or &lt;code&gt;{playlist_id}&lt;/code&gt; which will be auto-populated on each iteration&lt;/li&gt; &#xA;   &lt;li&gt;convert a playlist name to an ID, or an ID to a playlist name&lt;/li&gt; &#xA;   &lt;li&gt;search for tracks / artists / albums and output in either human readable form or as Spotify URIs for fast loading into the Spotify app or automated chaining with other adjacent tools&lt;/li&gt; &#xA;   &lt;li&gt;list liked / top tracks / artists in either human readable form or as Spotify URIs&lt;/li&gt; &#xA;   &lt;li&gt;generate a Spotify API token (used by all other bash scripts)&lt;/li&gt; &#xA;   &lt;li&gt;query any Spotify API endpoint with authentication (used by all other bash scripts)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify-cmd.pl&lt;/code&gt; - Spotify desktop app control from the command line on Mac via AppleScript calls. Useful for automation that Mac HotKeys don&#39;t help with such as auto-nexting tracks every N seconds if you want to skip through sampling a playlist&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;If you want to recover an entire deleted playlist, you can do that quickly in the Spotify web interface -&amp;gt; Account -&amp;gt; &lt;a href=&#34;https://www.spotify.com/uk/account/recover-playlists/&#34;&gt;Recover Playlists&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;For deleted songs in the desktop app, you can immediately press Control + Shift + Z on Windows or Control + Z on Mac to undo it.&lt;/p&gt; &#xA;&lt;p&gt;This repo is for everything else - Backups, Conversions from HTTP URIs to readable &lt;code&gt;Artist - Track&lt;/code&gt; format, tracking individual songs removed from playlists over time (if Spotify loses the rights to them they silently disappear and you won&#39;t notice if not Git revision controlling them like my repo &lt;a href=&#34;https://github.com/harisekhon/spotify-playists&#34;&gt;Spotify Playlists&lt;/a&gt; etc.&lt;/p&gt; &#xA;&lt;h4&gt;Ready to run Docker image&lt;/h4&gt; &#xA;&lt;p&gt;These programs and their pre-compiled dependencies can be found ready to run on &lt;a href=&#34;https://hub.docker.com/r/harisekhon/spotify-tools/&#34;&gt;DockerHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;List all programs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run harisekhon/spotify-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run any given program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run harisekhon/spotify-tools &amp;lt;program&amp;gt; &amp;lt;args&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Automated Build from source&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/HariSekhon/Spotify-tools&#xA;cd spotify-tools&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds all dependencies after which the programs can be run.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively see the &lt;a href=&#34;https://github.com/HariSekhon/Spotify-tools#manual-setup&#34;&gt;Manual Setup&lt;/a&gt; section instead.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Backup Spotify Playlists&lt;/h3&gt; &#xA;&lt;p&gt;Downloads the list of public playlists to &lt;code&gt;playlists.txt&lt;/code&gt; (names) and &lt;code&gt;spotify/playlists.txt&lt;/code&gt; (IDs + names in TSV format)&lt;/p&gt; &#xA;&lt;p&gt;For each playlist, downloads the list of playlist tracks to a file of the same name in both human and Spotify usable formats&lt;/p&gt; &#xA;&lt;p&gt;As it progresses, it outputs the playlist name followed by the progress of the URI download then the human readable download&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;playlists/&lt;/code&gt; files contain the human readable &lt;code&gt;Artist - Track&lt;/code&gt; format&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;playlists/spotify/&lt;/code&gt; files contain the Spotify URI format (for restores or copying to new playlists)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bash-tools/spotify_backup.sh&#xA;================================================================================&#xA;                         Running Spotify Playlists Backup&#xA;================================================================================&#xA;&#xA;2020-07-05 01:23:41  Dumping list of Spotify playlists to spotify/playlists.txt&#xA;&#xA;2020-07-05 01:23:43  Stripping spotify playlist IDs from spotify/playlists.txt =&amp;gt; playlists.txt&#xA;&#xA;2020-07-05 01:23:44  Backing up Spotify playlists to /Users/hari/github/spotify-tools/playlists&#xA;&#xA;My Shazam Tracks =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;Upbeat &amp;amp; Sexual Pop =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;Best R&amp;amp;B =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;Best Pop =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;Best Rock =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;Best Motown / Funk / Boogie / Groove / Soul =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;Chill =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2019 06-07 Venice &amp;amp; Budapest =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2019 05 - Winchester =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2019 04 April - Bath =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2019 01 Jan - South Woodford =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2018 10 Oct - Dec =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2018 09 Sept - Dec =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2018 09 Sept =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2018 08 - Aug - Vienna =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2018 Gemma =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2018 03 March - July Mix =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2018 03 Driving Rock =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2018 02 Feb Mix - London =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2018 Jan - London - A New Beginning =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2017 12 December Mix - Back in London Baby =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2017 11 November Mix - Copenhagen =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2017 10 October Mix - Copenhagen =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2017 09 September Mix - Copenhagen =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2017 08 August Mix - London &amp;amp; Copenhagen =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2017 07 July Mix - Johannesburg =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;2017 06 June Mix - Johannesburg =&amp;gt; URIs OK =&amp;gt; Tracks OK&#xA;...&#xA;2020-07-05 01:41:42  Spotify playlists backup finished in 1078 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Convert Spotify URIs to Human readable Artist - Track&lt;/h3&gt; &#xA;&lt;p&gt;You can copy and paste the tracks from the Spotify desktop app or web player directly into text files, which puts them in Spotify URI format such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://open.spotify.com/track/61oGXsKgJOI0e3uS2wg1BV&#xA;http://open.spotify.com/track/1j6API7GnhE8MRRedK4bda&#xA;http://open.spotify.com/track/0RxFoUhB3mAI3qpgLSf7eM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spotify:track:61oGXsKgJOI0e3uS2wg1BV&#xA;spotify:track:1j6API7GnhE8MRRedK4bda&#xA;spotify:track:0RxFoUhB3mAI3qpgLSf7eM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then convert this to readable &lt;code&gt;Artist - Track&lt;/code&gt; form for saving independently of Spotify but running &lt;code&gt;spotify_uri_to_name.sh&lt;/code&gt; against the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bash-tools/spotify_uri_to_name.sh Pendulum.txt&#xA;Pendulum - Watercolour&#xA;Pendulum - Witchcraft&#xA;Pendulum - The Island - Pt. I&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pipe one or more Spotify URIs through standard input in either format that Spotify uses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo http://open.spotify.com/track/5TOYgNohZAFEPOtnchPhZS | ./bash-tools/spotify_uri_to_name.sh&#xA;Foo Fighters - Arlandria&#xA;&#xA;echo spotify:track:5TOYgNohZAFEPOtnchPhZS | ./bash-tools/spotify_uri_to_name.sh&#xA;Foo Fighters - Arlandria&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set all the tracks from your favourite playlist to &#34;Liked&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Give the playlist file full of Spotify URIs (dumped by the spotify_backup*.sh scripts above), you can mark all the songs from your favourite playlists as &lt;code&gt;Liked Songs&lt;/code&gt; which then appear in your &lt;code&gt;Liked Songs&lt;/code&gt; playlist too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spotify_set_tracks_uri_to_liked.sh playlists/spotify/My_Favourite_Playlist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;ve been using Spotify a long time, you&#39;ll remember that marked songs used to be called &lt;code&gt;Starred&lt;/code&gt;, but were replaced by &lt;code&gt;Liked Songs&lt;/code&gt;. Unfortunately Spotify made &lt;code&gt;Starred&lt;/code&gt; a regular playlist and didn&#39;t carry them over, but you can easily mark all previously &lt;code&gt;Starred&lt;/code&gt; songs as the newer &lt;code&gt;Liked Songs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spotify_set_tracks_uri_to_liked.sh playlists/spotify/Starred&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spotify Cmd --help&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./spotify-cmd.pl --help&#xA;&#xA;Command line interface to Spotify on Mac that leverages AppleScript&#xA;&#xA;Useful for automation that Mac HotKeys don&#39;t help with, such as auto skipping&#xA;to next track every N secs to sample a playlist while working&#xA;&#xA;usage: spotify-cmd.pl &amp;lt;command&amp;gt;&#xA;&#xA;commands:&#xA;&#xA;play            Play&#xA;pause / stop    Pause&#xA;playpause       Toggle Play/Pause&#xA;previous        Previous Track and print previous track information&#xA;next [secs]     Next Track and print next track information.&#xA;                Specifying optional secs will skip to next track&#xA;                every [secs] seconds. Handy for skipping through a playlist&#xA;                every 60 secs automatically and grabbing the good songs. Prints&#xA;                track information every time it skips to the next track&#xA;&#xA;status          Show current track details&#xA;&#xA;vol up          Turn volume up&#xA;vol down        Turn volume down&#xA;vol &amp;lt;1-100&amp;gt;     Set volume to number &amp;lt;1-100&amp;gt;&#xA;&#xA;exit / quit     Exit Spotify&#xA;&#xA;-q  --quiet      Quiet mode. Do not print track information or volume after&#xA;                 completing action&#xA;-t  --timeout    Timeout in secs (default: 10)&#xA;-v  --verbose    Verbose mode (-v, -vv, -vvv ...)&#xA;-h  --help       Print description and usage options&#xA;-V  --version    Print version and exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual Setup&lt;/h4&gt; &#xA;&lt;p&gt;Enter the directory and run git submodule init and git submodule update to fetch my library repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/HariSekhon/Spotify-tools&#xA;cd spotify-tools&#xA;git submodule init&#xA;git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you will also need to fetch the following CPAN modules listed in &lt;code&gt;setup/cpan-requirements.txt&lt;/code&gt; and &lt;code&gt;lib/setup/cpan-requirements.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Running the cpan command followed by the list of modules (as root) will fetch them for you, or you can use this script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash-tools/perl_cpanm_install.sh setup/cpan-requirements.txt lib/setup/cpan-requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributions&lt;/h3&gt; &#xA;&lt;p&gt;Patches, improvements and even general feedback are welcome in the form of GitHub pull requests and issue tickets.&lt;/p&gt; &#xA;&lt;h3&gt;Updating&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;make update&lt;/code&gt;. This will git pull and then git submodule update which is necessary to pick up corresponding library updates. ndencies.&lt;/p&gt; &#xA;&lt;p&gt;If you update often and want to just quickly git pull + submodule update but skip rebuilding all those dependencies each time then run &lt;code&gt;make update-no-recompile&lt;/code&gt; (will miss new library dependencies - do full &lt;code&gt;make update&lt;/code&gt; if you encounter issues).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://git.io/spotify&#34;&gt;git.io/spotify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related Repositories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools&#34;&gt;DevOps Bash Tools&lt;/a&gt; - 800+ DevOps Bash Scripts, Advanced &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.vimrc&lt;/code&gt;, &lt;code&gt;.screenrc&lt;/code&gt;, &lt;code&gt;.tmux.conf&lt;/code&gt;, &lt;code&gt;.gitconfig&lt;/code&gt;, CI configs &amp;amp; Utility Code Library - AWS, GCP, Kubernetes, Docker, Kafka, Hadoop, SQL, BigQuery, Hive, Impala, PostgreSQL, MySQL, LDAP, DockerHub, Jenkins, Spotify API &amp;amp; MP3 tools, Git tricks, GitHub API, GitLab API, BitBucket API, Code &amp;amp; build linting, package management for Linux / Mac / Python / Perl / Ruby / NodeJS / Golang, and lots more random goodies&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Python-tools&#34;&gt;DevOps Python Tools&lt;/a&gt; - 80+ DevOps CLI tools for AWS, GCP, Hadoop, HBase, Spark, Log Anonymizer, Ambari Blueprints, AWS CloudFormation, Linux, Docker, Spark Data Converters &amp;amp; Validators (Avro / Parquet / JSON / CSV / INI / XML / YAML), Elasticsearch, Solr, Travis CI, Pig, IPython&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/harisekhon/perl-tools&#34;&gt;DevOps Perl Tools&lt;/a&gt; - 25+ DevOps CLI tools for Hadoop, HDFS, Hive, Solr/SolrCloud CLI, Log Anonymizer, Nginx stats &amp;amp; HTTP(S) URL watchers for load balanced web farms, Dockerfiles &amp;amp; SQL ReCaser (MySQL, PostgreSQL, AWS Redshift, Snowflake, Apache Drill, Hive, Impala, Cassandra CQL, Microsoft SQL Server, Oracle, Couchbase N1QL, Dockerfiles, Pig Latin, Neo4j, InfluxDB), Ambari FreeIPA Kerberos, Datameer, Linux...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Nagios-Plugins&#34;&gt;The Advanced Nagios Plugins Collection&lt;/a&gt; - 450+ programs for Nagios monitoring your Hadoop &amp;amp; NoSQL clusters. Covers every Hadoop vendor&#39;s management API and every major NoSQL technology (HBase, Cassandra, MongoDB, Elasticsearch, Solr, Riak, Redis etc.) as well as message queues (Kafka, RabbitMQ), continuous integration (Jenkins, Travis CI) and traditional infrastructure (SSL, Whois, DNS, Linux)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/HAProxy-configs&#34;&gt;HAProxy Configs&lt;/a&gt; - 80+ HAProxy Configs for Hadoop, Big Data, NoSQL, Docker, Elasticsearch, SolrCloud, HBase, Cloudera, Hortonworks, MapR, MySQL, PostgreSQL, Apache Drill, Hive, Presto, Impala, ZooKeeper, OpenTSDB, InfluxDB, Prometheus, Kibana, Graphite, SSH, RabbitMQ, Redis, Riak, Rancher etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Dockerfiles&#34;&gt;Dockerfiles&lt;/a&gt; - 50+ DockerHub public images for Docker &amp;amp; Kubernetes - Hadoop, Kafka, ZooKeeper, HBase, Cassandra, Solr, SolrCloud, Presto, Apache Drill, Nifi, Spark, Mesos, Consul, Riak, OpenTSDB, Jython, Advanced Nagios Plugins &amp;amp; DevOps Tools repos on Alpine, CentOS, Debian, Fedora, Ubuntu, Superset, H2O, Serf, Alluxio / Tachyon, FakeS3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/SQL-scripts&#34;&gt;SQL Scripts&lt;/a&gt; - 100+ SQL Scripts - PostgreSQL, MySQL, AWS Athena, Google BigQuery&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Templates&#34;&gt;Templates&lt;/a&gt; - dozens of Code &amp;amp; Config templates - AWS, GCP, Docker, Jenkins, Terraform, Vagrant, Puppet, Python, Bash, Go, Perl, Java, Scala, Groovy, Maven, SBT, Gradle, Make, GitHub Actions Workflows, CircleCI, Jenkinsfile, Makefile, Dockerfile, docker-compose.yml, M4 etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Kubernetes-configs&#34;&gt;Kubernetes configs&lt;/a&gt; - Kubernetes YAML configs - Best Practices, Tips &amp;amp; Tricks are baked right into the templates for future deployments&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Terraform&#34;&gt;Terraform&lt;/a&gt; - Terraform templates for AWS / GCP / Azure / GitHub management&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>curl/trurl</title>
    <updated>2023-04-17T01:41:57Z</updated>
    <id>tag:github.com,2023-04-17:/curl/trurl</id>
    <link href="https://github.com/curl/trurl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;trurl is a command line tool for URL parsing and manipulation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;trurl&lt;/h1&gt; &#xA;&lt;p&gt;command line tool for URL parsing and manipulation&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/oDL7DVszr2w&#34;&gt;video presentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example command lines&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ trurl --url https://curl.se --set host=example.com&#xA;  https://example.com/&#xA;&#xA;  $ trurl --set host=example.com --set scheme=ftp&#xA;  ftp://example.com/&#xA;&#xA;  $ trurl --url https://curl.se/we/are.html --redirect here.html&#xA;  https://curl.se/we/here.html&#xA;&#xA;  $ trurl --url https://curl.se/we/../are.html --set port=8080&#xA;  https://curl.se:8080/are.html&#xA;&#xA;  $ trurl --url https://curl.se/we/are.html --get &#39;{path}&#39;&#xA;  /we/are.html&#xA;&#xA;  $ trurl --url https://curl.se/we/are.html --get &#39;{port}&#39;&#xA;  443&#xA;&#xA;  $ trurl https://example.com/hello.html --get &#39;{scheme} {port} {path}&#39;&#xA;  https 443 /hello.html&#xA;&#xA;  $ trurl --url https://curl.se/hello --append path=you&#xA;  https://curl.se/hello/you&#xA;&#xA;  $ trurl --url &#34;https://curl.se?name=hello&#34; --append query=search=string&#xA;  https://curl.se/?name=hello&amp;amp;search=string&#xA;&#xA;  $ trurl --url-file url-list.txt --get &#39;{host}&#39;&#xA;  [one host name per URL in the input file]&#xA;&#xA;  $ cat url-list.txt | trurl --url-file - --get &#39;{host}&#39;&#xA;  [one host name per URL in the input file]&#xA;&#xA;  $ trurl &#34;https://fake.host/hello#frag&#34; --set user=::moo:: --json&#xA;  [&#xA;    {&#xA;      &#34;url&#34;: &#34;https://%3a%3amoo%3a%3a@fake.host/hello#frag&#34;,&#xA;      &#34;scheme&#34;: &#34;https&#34;,&#xA;      &#34;user&#34;: &#34;::moo::&#34;,&#xA;      &#34;host&#34;: &#34;fake.host&#34;,&#xA;      &#34;port&#34;: &#34;443&#34;,&#xA;      &#34;path&#34;: &#34;/hello&#34;,&#xA;      &#34;fragment&#34;: &#34;frag&#34;&#xA;    }&#xA;  ]&#xA;&#xA;  $ trurl &#34;https://example.com?search=hello&amp;amp;utm_source=tracker&#34; --trim query=&#34;utm_*&#34;&#xA;  https://example.com/?search=hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;On Linux :&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s quite easy to compile the C source with GCC :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;cc  -W -Wall -pedantic -g   -c -o trurl.o trurl.c&#xA;cc   trurl.o  -lcurl -o trurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;On Windows:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and run &lt;a href=&#34;https://www.cygwin.com/install.html&#34;&gt;Cygwin installer.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow the instructions provided by the installer. When prompted to select packages, make sure to choose the following: curl, libcurl-devel, libcurl4, make and gcc-core.&lt;/li&gt; &#xA; &lt;li&gt;(optional) Add the Cygwin bin directory to your system PATH variable.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;make&lt;/code&gt;, just like on Linux.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Development files of libcurl (e.g. &lt;code&gt;libcurl4-openssl-dev&lt;/code&gt; or &lt;code&gt;libcurl4-gnutls-dev&lt;/code&gt;) are needed for compilation. Requires libcurl version 7.62.0 or newer (the first libcurl to ship the URL parsing API).&lt;/p&gt; &#xA;&lt;p&gt;trurl also uses &lt;code&gt;CURLUPART_ZONEID&lt;/code&gt; added in libcurl 7.81.0 and &lt;code&gt;curl_url_strerror()&lt;/code&gt; added in libcurl 7.80.0&lt;/p&gt; &#xA;&lt;p&gt;It would certainly be possible to make trurl work with older libcurl versions if someone wanted to.&lt;/p&gt; &#xA;&lt;h3&gt;Older libcurls&lt;/h3&gt; &#xA;&lt;p&gt;trurl builds with libcurl older than 7.81.0 but will then not work as good. For all the documented goodness, use a more modern libcurl.&lt;/p&gt;</summary>
  </entry>
</feed>