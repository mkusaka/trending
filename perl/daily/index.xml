<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-22T01:50:49Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>binary-com/perl-WebService-MyAffiliates</title>
    <updated>2022-07-22T01:50:49Z</updated>
    <id>tag:github.com,2022-07-22:/binary-com/perl-WebService-MyAffiliates</id>
    <link href="https://github.com/binary-com/perl-WebService-MyAffiliates" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interface to myaffiliates.com API&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-WebService-MyAffiliates&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-WebService-MyAffiliates.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-WebService-MyAffiliates&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-WebService-MyAffiliates/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/binary-com/perl-WebService-MyAffiliates&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/binary-com/perl-WebService-MyAffiliates.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;WebService::MyAffiliates - Interface to myaffiliates.com API&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use WebService::MyAffiliates;&#xA;&#xA;my $aff = WebService::MyAffiliates-&amp;gt;new(&#xA;    user =&amp;gt; &#39;user&#39;,&#xA;    pass =&amp;gt; &#39;pass&#39;,&#xA;    host =&amp;gt; &#39;admin.example.com&#39;&#xA;);&#xA;&#xA;my $token_info = $aff-&amp;gt;decode_token($token) or die $aff-&amp;gt;errstr;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;WebService::MyAffiliates is Perl interface to &lt;a href=&#34;http://www.myaffiliates.com/xmlapi&#34;&gt;http://www.myaffiliates.com/xmlapi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s incompleted. patches are welcome with pull-requests of &lt;a href=&#34;https://github.com/binary-com/perl-WebService-MyAffiliates&#34;&gt;https://github.com/binary-com/perl-WebService-MyAffiliates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;new&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;user&lt;/p&gt; &lt;p&gt;required. the Basic Auth username.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pass&lt;/p&gt; &lt;p&gt;required. the Basic Auth password.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;host&lt;/p&gt; &lt;p&gt;required. the Basic Auth url/host.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;get_users&lt;/h2&gt; &#xA;&lt;p&gt;Feed 1: Users Feed&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://myaffiliates.atlassian.net/wiki/display/PUB/Feed+1%3A+Users+Feed&#34;&gt;https://myaffiliates.atlassian.net/wiki/display/PUB/Feed+1%3A+Users+Feed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $user_info = $aff-&amp;gt;get_users(USER_ID =&amp;gt; $id);&#xA;my $user_info = $aff-&amp;gt;get_users(STATUS =&amp;gt; &#39;new&#39;);&#xA;my $user_info = $aff-&amp;gt;get_users(VARIABLE_NAME =&amp;gt; &#39;n&#39;, VARIABLE_VALUE =&amp;gt; &#39;v&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;get_user&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $user_info = $aff-&amp;gt;get_user($id); # { ID =&amp;gt; ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;call get_users(USER_ID =&amp;gt; $id) with the top evel USER key removed.&lt;/p&gt; &#xA;&lt;h2&gt;decode_token&lt;/h2&gt; &#xA;&lt;p&gt;Feed 4: Decode Token&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://myaffiliates.atlassian.net/wiki/display/PUB/Feed+4%3A+Decode+Token&#34;&gt;https://myaffiliates.atlassian.net/wiki/display/PUB/Feed+4%3A+Decode+Token&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $token_info = $aff-&amp;gt;decode_token($token); # $token_info is a HASH which contains TOKEN key&#xA;my $token_info = $aff-&amp;gt;decode_token($tokenA, $tokenB);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;encode_token&lt;/h2&gt; &#xA;&lt;p&gt;Feed 5: Encode Token&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://myaffiliates.atlassian.net/wiki/display/PUB/Feed+5%3A+Encode+Token&#34;&gt;https://myaffiliates.atlassian.net/wiki/display/PUB/Feed+5%3A+Encode+Token&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $token_info = $aff-&amp;gt;encode_token(&#xA;    USER_ID  =&amp;gt; 1,&#xA;    SETUP_ID =&amp;gt; 7&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;get_user_transactions&lt;/h2&gt; &#xA;&lt;p&gt;Feed 6: User Transactions Feed&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://myaffiliates.atlassian.net/wiki/display/PUB/Feed+6%3A+User+Transactions+Feed&#34;&gt;https://myaffiliates.atlassian.net/wiki/display/PUB/Feed+6%3A+User+Transactions+Feed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $transactions = $aff-&amp;gt;get_user_transactions(&#xA;    &#39;USER_ID&#39;   =&amp;gt; $id,&#xA;    &#39;FROM_DATE&#39; =&amp;gt; &#39;2011-12-31&#39;,&#xA;    &#39;TO_DATE&#39;   =&amp;gt; &#39;2012-01-31&#39;,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Binary.com &lt;a href=&#34;mailto:fayland@binary.com&#34;&gt;fayland@binary.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;COPYRIGHT&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2014- Binary.com&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>ReturnPath/rp-mta-log-transfer</title>
    <updated>2022-07-22T01:50:49Z</updated>
    <id>tag:github.com,2022-07-22:/ReturnPath/rp-mta-log-transfer</id>
    <link href="https://github.com/ReturnPath/rp-mta-log-transfer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RP MTA Log Transfer Tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Return Path MTA log transfer tools&lt;/h1&gt; &#xA;&lt;p&gt;This modules contains software intended to parse MTA logs and deliver them to Return Path for inclusion into Return Path Reputation Network&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;Modify these lines in rp-log-transfer.sh to match your configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SCRIPT=rp-log-transfer.sh&#xA;MTA_LOG_DIR=/var/log/mail&#xA;STAGE_DIR=/var/rp-log-transfer/logs&#xA;LOCK_FILE=/var/rp-log-transfer/lock&#xA;RP_UNAME=xxxxxx&#xA;RP_SERVER=sftp.senderscore.net&#xA;SSH_KEY=/home/senderscore/key&#xA;PARSER=/path/to/parsers/postfixParser.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run this the rp-log-transfer.sh periodically from cron:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*/5 * * * * abuse /path/to/rp-log-transfer.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As MTA logs are often customized at each installation, these scripts should be seen as a template, rather than code to be used in its current state. Please review and test the code prior to production deployement. You may need to modify it to suit the needs of your logging format.&lt;/p&gt; &#xA;&lt;h2&gt;Included Scripts&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;rp-log-transfer.sh - wrapper script to call parser and upload to sftp server&#xA;&#xA;parsers/bizangaParser.pl&#xA;parsers/eximParser.pl&#xA;parsers/ironportParser.pl&#xA;parsers/mailsystemsParser_main.pl&#xA;parsers/mailsystemsParser_reject.pl&#xA;parsers/mirapointParser.pl&#xA;parsers/postfixParser.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parsers for other MTAs can be made available upon request.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to Peter Blair of Tucows, Inc. and all other Return Path partners for feedback and code contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to use and modify this however you would like.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012 Return Path, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-Plack-App-CGIBin-Streaming</title>
    <updated>2022-07-22T01:50:49Z</updated>
    <id>tag:github.com,2022-07-22:/binary-com/perl-Plack-App-CGIBin-Streaming</id>
    <link href="https://github.com/binary-com/perl-Plack-App-CGIBin-Streaming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;run old-style CGI applications in a streaming plack server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Plack::App::CGIBin::Streaming - allow old style CGI applications to use the plack streaming protocol&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/binary-com/perl-Plack-App-CGIBin-Streaming&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/binary-com/perl-Plack-App-CGIBin-Streaming.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/binary-com/perl-Plack-App-CGIBin-Streaming&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-Plack-App-CGIBin-Streaming.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-Plack-App-CGIBin-Streaming&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-Plack-App-CGIBin-Streaming/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;p&gt;in your &lt;code&gt;app.psgi&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Plack::App::CGIBin::Streaming;&#xA;&#xA;Plack::App::CGIBin::Streaming-&amp;gt;new(root=&amp;gt;...)-&amp;gt;to_app;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://metacpan.org/pod/Plack&#34;&gt;Plack&lt;/a&gt; already comes &lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin&#34;&gt;Plack::App::CGIBin&lt;/a&gt;. &lt;code&gt;Plack::App::CGIBin::Streaming&lt;/code&gt; serves a very similar purpose.&lt;/p&gt; &#xA;&lt;p&gt;So, why do I need another module? The reason is that &lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin&#34;&gt;Plack::App::CGIBin&lt;/a&gt; first collects all the output from your CGI scripts before it prints the first byte to the client. This renders the following simple clock script useless:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use strict;&#xA;use warnings;&#xA;&#xA;$|=0;&#xA;&#xA;my $boundary=&#39;The Final Frontier&#39;;&#xA;print &amp;lt;&amp;lt;&#34;EOF&#34;;&#xA;Status: 200&#xA;Content-Type: multipart/x-mixed-replace;boundary=&#34;$boundary&#34;;&#xA;&#xA;EOF&#xA;&#xA;$boundary=&#34;--$boundary\n&#34;;&#xA;&#xA;my $mpheader=&amp;lt;&amp;lt;&#39;HEADER&#39;;&#xA;Content-type: text/html; charset=UTF-8;&#xA;&#xA;HEADER&#xA;&#xA;for(1..100) {&#xA;    print ($boundary, $mpheader,&#xA;           &#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;&#39;.localtime().&#34;&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;\n&#34;);&#xA;    $|=1; $|=0;&#xA;    sleep 1;&#xA;}&#xA;&#xA;print ($boundary);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although multipart HTTP messages are quite exotic, there are situations where you rather want to prevent this buffering. If your document is very large for example, each instance of your plack server allocates the RAM to buffer it. Also, you might perhaps send out the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your HTTP document as fast as possible to enable the browser load JS and CSS while the plack server is still busy with producing the actual document.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Plack::App::CGIBin::Streaming&lt;/code&gt; compiles the CGI scripts using &lt;a href=&#34;https://metacpan.org/pod/CGI::Compile&#34;&gt;CGI::Compile&lt;/a&gt; and provides a runtime environment similar to &lt;code&gt;Plack::App::CGIBin&lt;/code&gt;. Compiled scripts are cached. For production environments, it is possible to precompile and cache scripts at server start time, see the &lt;code&gt;preload&lt;/code&gt; option below.&lt;/p&gt; &#xA;&lt;p&gt;Every single request is represented as an object that inherits from &lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming::Request&#34;&gt;Plack::App::CGIBin::Streaming::Request&lt;/a&gt;. This class mainly provides means for handling response headers and body.&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;The plack app is built as usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$app=Plack::App::CGIBin::Streaming-&amp;gt;new(@options)-&amp;gt;to_app;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;@options&lt;/code&gt; is a list of key/value pairs configuring the app. The &lt;code&gt;Plack::App::CGIBin::Streaming&lt;/code&gt; class inherits from &lt;a href=&#34;https://metacpan.org/pod/Plack::App::File&#34;&gt;Plack::App::File&lt;/a&gt;. So, everything recognized by this class is accepted. In particular, the &lt;code&gt;root&lt;/code&gt; parameter is used to specify the directory where your CGI programs reside.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, these parameters are accepted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;request_class&lt;/p&gt; &lt;p&gt;specifies the class of the request object to construct for every request. This class should implement the interface described in &lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming::Request&#34;&gt;Plack::App::CGIBin::Streaming::Request&lt;/a&gt;. Best if your request class inherits from &lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming::Request&#34;&gt;Plack::App::CGIBin::Streaming::Request&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This parameter is optional. By default &lt;code&gt;Plack::App::CGIBin::Streaming::Request&lt;/code&gt; is used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;request_params&lt;/p&gt; &lt;p&gt;specifies a list of additional parameters to be passed to the request constructor.&lt;/p&gt; &lt;p&gt;By default the request constructor is passed 2 parameters. This list is appended to the parameter list like:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $R = $class-&amp;gt;new(&#xA;      env =&amp;gt; $env,&#xA;      responder =&amp;gt; $responder,&#xA;      @{$self-&amp;gt;request_params//[]},&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;preload&lt;/p&gt; &lt;p&gt;In a production environment, you probably want to use a (pre)forking server to run the application. In this case is is sensible to compile as much perl code as possible at server startup time by the parent process because then all the children share the RAM pages where the code resides (by copy-on-write) and you utilize your server resources much better.&lt;/p&gt; &lt;p&gt;One way to achieve that is to keep your CGI applications very slim and put all the actual work into modules. These modules are then &lt;code&gt;use&lt;/code&gt;d or &lt;code&gt;require&lt;/code&gt;d in your &lt;code&gt;app.psgi&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;As a simpler alternative you can specify a list of &lt;code&gt;glob&lt;/code&gt; patterns as &lt;code&gt;preload&lt;/code&gt; value. &lt;code&gt;Plack::App::CGIBin::Streaming&lt;/code&gt; will then load and compile all the scripts matching all the patterns when the app object is created.&lt;/p&gt; &lt;p&gt;This technique has benefits and drawbacks:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;pro: more concurrent worker children in less RAM&lt;/p&gt; &lt;p&gt;see above&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;con: no way to reload the application on the fly&lt;/p&gt; &lt;p&gt;when your scripts change you have to restart the server. Without preloading anything you could just kill all the worker children (or signal them to do so after the next request).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;pro/con: increased privileges while preloading&lt;/p&gt; &lt;p&gt;the HTTP standard port is 80 and, thus, requires root privileges to bind to. scripts are preloaded before the server opens the port. So, even if it later drops privilges, at preload time you still are root.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Runtime environment&lt;/h2&gt; &#xA;&lt;p&gt;Additional to the environment provided by &lt;a href=&#34;https://metacpan.org/pod/CGI::Compile&#34;&gt;CGI::Compile&lt;/a&gt;, this module provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;the global variable &lt;code&gt;$Plack::App::CGIBin::Streaming::R&lt;/code&gt;&lt;/p&gt; &lt;p&gt;For the request lifetime it contains the actual request object. This variable is &lt;code&gt;local&lt;/code&gt;ized. There is also a way to access this variable as class method.&lt;/p&gt; &lt;p&gt;If you use a &lt;a href=&#34;https://metacpan.org/pod/Coro&#34;&gt;Coro&lt;/a&gt; based plack server, make sure to replace the guts of this variable when switching threads, see &lt;code&gt;swap_sv()&lt;/code&gt; in &lt;a href=&#34;https://metacpan.org/pod/Coro::State&#34;&gt;Coro::State&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Plack::App::CGIBin::Streaming-&amp;gt;request&lt;/code&gt; or &lt;code&gt;Plack::App::CGIBin::Streaming::request&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This function/method returns the current request object or &lt;code&gt;undef&lt;/code&gt; if called outside the request loop.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;%ENV&lt;/code&gt; is populated&lt;/p&gt; &lt;p&gt;everything from the plack environment except keys starting with &lt;code&gt;plack&lt;/code&gt; or &lt;code&gt;psgi.&lt;/code&gt; is copied to &lt;code&gt;%ENV&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Both, &lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt; are configured to use the &lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming::IO&#34;&gt;Plack::App::CGIBin::Streaming::IO&lt;/a&gt; PerlIO layer. On output, the layer captures the data and sends it to the request object. Flushing via &lt;code&gt;$|&lt;/code&gt; is also supported. On input, the layer simply converts calls like &lt;code&gt;readline STDIN&lt;/code&gt; into a method call on the underlying object.&lt;/p&gt; &lt;p&gt;You can use PerlIO layers to turn the handles into UTF8 mode. However, refrain from using a simple &lt;code&gt;binmode&lt;/code&gt; to reverse the effects of a prior &lt;code&gt;binmode STDOUT, &#39;:utf8&#39;&lt;/code&gt;. This won&#39;t pop the &lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming::IO&#34;&gt;Plack::App::CGIBin::Streaming::IO&lt;/a&gt; layer but neither will it turn off UTF8 mode. This is considered a bug that I don&#39;t know how to fix. (See also below)&lt;/p&gt; &lt;p&gt;Reading from &lt;code&gt;STDIN&lt;/code&gt; using UTF8 mode is also supported.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pitfalls and workarounds&lt;/h2&gt; &#xA;&lt;h3&gt;SIGCHLD vs. SIGCLD&lt;/h3&gt; &#xA;&lt;p&gt;During the implementation I found a wierd bug. At least on Linux, perl supports &lt;code&gt;CHLD&lt;/code&gt; and &lt;code&gt;CLD&lt;/code&gt; as name of the signal that is sent when a child process exits. Also, when Perl calls a signal handler, it passes the signal name as the first parameter. Now the question arises, which name is passed when a child exits. As it happens the first assignment to &lt;code&gt;%SIG{CHLD}&lt;/code&gt; or &lt;code&gt;$SIG{CLD}&lt;/code&gt; determines that name for the rest of the lifetime of the process. Now, several plack server implementations, e.g. &lt;a href=&#34;https://metacpan.org/pod/Starman&#34;&gt;Starman&lt;/a&gt;, rely on that name to be &lt;code&gt;CHLD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a workaround, &lt;code&gt;Plack::App::CGIBin::Streaming&lt;/code&gt; contains this code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BEGIN {&#xA;    local $SIG{CHLD}=$SIG{CHLD};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your server dies when it receives a SIGCHLD, perhaps the module is loaded too late.&lt;/p&gt; &#xA;&lt;h3&gt;binmode&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes one needs to switch STDOUT into UTF8 mode and back. Especially the &lt;em&gt;back&lt;/em&gt; is problematic because the way it is done is often simply &lt;code&gt;binmode STDOUT&lt;/code&gt;. Currently, this won&#39;t revert the effect of a previous &lt;code&gt;binmode STDOUT, &#39;:utf8&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;binmode STDOUT, &#39;:bytes&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;EXAMPLE&lt;/h1&gt; &#xA;&lt;p&gt;This distribution contains a complete example in the &lt;code&gt;eg/&lt;/code&gt; directory. After building the module by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Build.PL&#xA;./Build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can try it out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(cd eg &amp;amp;&amp;amp; starman -l :5091 --workers=2 --preload-app app.psgi) &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you should be able to access&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:5091/clock.cgi?30&#34;&gt;http://localhost:5091/clock.cgi?30&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:5091/flush.cgi&#34;&gt;http://localhost:5091/flush.cgi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The clock example is basically the script displayed above. It works in Firefox. Other browsers don&#39;t support multipart HTTP messages.&lt;/p&gt; &#xA;&lt;p&gt;The flush example demonstrates filtering. It has been tested wich Chromium 35 on Linux. The script first prints a part of the page that contains the HTML comment &lt;code&gt;&amp;lt;!-- FlushHead --&amp;gt;&lt;/code&gt;. The filter recognizes this token and pushes the page out. You should see a red background and the string &lt;code&gt;loading -- please wait&lt;/code&gt;. After 2 seconds the page should turn green and the string should change to &lt;code&gt;loaded&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All of this very much depends on browser behavior. The intent is not to provide an example that works for all of them. Instead, the capabilities of this module are shown. You can also test these links with &lt;code&gt;curl&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;The example PSGI file also configures an &lt;code&gt;access_log&lt;/code&gt; and an &lt;code&gt;error_log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Torsten Förtsch &lt;a href=&#34;mailto:torsten.foertsch@gmx.net&#34;&gt;torsten.foertsch@gmx.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;COPYRIGHT&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2014 Binary.com&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the the Artistic License (2.0). A copy of the full license is provided by the &lt;code&gt;LICENSE&lt;/code&gt; file in this distribution and can be obtained at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.perlfoundation.org/artistic_license_2_0&#34;&gt;http://www.perlfoundation.org/artistic_license_2_0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin&#34;&gt;Plack::App::CGIBin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CGI::Compile&#34;&gt;CGI::Compile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming::Request&#34;&gt;Plack::App::CGIBin::Streaming::Request&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming::IO&#34;&gt;Plack::App::CGIBin::Streaming::IO&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>