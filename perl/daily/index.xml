<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-08T01:41:39Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OpenCageData/address-formatting</title>
    <updated>2024-02-08T01:41:39Z</updated>
    <id>tag:github.com,2024-02-08:/OpenCageData/address-formatting</id>
    <link href="https://github.com/OpenCageData/address-formatting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;templates to format geographic addresses&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;address formatting&lt;/h1&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;This project contains templates and test cases for address formats used in territories around the world. The templates can then be processed in any programming language (&lt;a href=&#34;https://raw.githubusercontent.com/OpenCageData/address-formatting/master/#processing-logic&#34;&gt;see below for list of processors&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Build Status&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenCageData/address-formatting/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/OpenCageData/address-formatting/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;An example:&lt;/h3&gt; &#xA;&lt;p&gt;Given a set of address parts like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; house_number:  17&#xA; road:          Rue du Médecin-Colonel Calbairac&#xA; neighbourhood: Lafourguette&#xA; suburb:        Toulouse Ouest&#xA; postcode:      31000&#xA; city:          Toulouse&#xA; county:        Toulouse&#xA; state:         Midi-Pyrénées&#xA; country:       France&#xA; country_code:  FR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;we want to write logic to compile an address in the format consumers expect&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;17 Rue du Médecin-Colonel Calbairac&#xA;31000 Toulouse&#xA;France&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Why would you want to do this?&lt;/h3&gt; &#xA;&lt;p&gt;The intended use case is database or geocoding systems (forward, reverse, autocomplete) where we know both the country of the address and the language of the user/reader. The address is displayed to a consumer (for example in an app) and not used to print on an envelope for actual postal delivery. We use it to format output from the &lt;a href=&#34;https://opencagedata.com/api&#34;&gt;OpenCage Geocoding API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Which addresses are we talking about?&lt;/h3&gt; &#xA;&lt;p&gt;We have to deal with&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;incomplete data&lt;/li&gt; &#xA; &lt;li&gt;anything with a name (peaks, bridges, bus stops)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unlike &lt;a href=&#34;http://www.bitboost.com/ref/international-address-formats.html&#34;&gt;physical post (office) mail&lt;/a&gt; we don&#39;t have to deal with&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;apartment/flat number, floor numbers&lt;/li&gt; &#xA; &lt;li&gt;PO boxes&lt;/li&gt; &#xA; &lt;li&gt;translating the language of the (destination) address. Whatever language is input is output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Processing logic&lt;/h3&gt; &#xA;&lt;p&gt;Our goal with this repository is a series of (programming) language independent templates. Those templates can then be processed by whatever software you like.&lt;/p&gt; &#xA;&lt;p&gt;There are open-source implementations in&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/woheller69/AndroidAddressFormatter&#34;&gt;Android library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dkuku/ex_address_formatting&#34;&gt;Elixir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timonmasberg/address-formatter&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/placemarkt/address-formatter-java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fragaria/address-formatter&#34;&gt;Javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metacpan.org/release/Geo-Address-Formatter&#34;&gt;Perl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/predicthq/address-formatter-php&#34;&gt;PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pudo/addressformatting/tree/master&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mirubiri/address_composer&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CanalTP/address-formatter-rs&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ben-willis/address-formatter&#34;&gt;Scala&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We would love more language implementations. The more people who use the templates, the more likely bugs will be reported. If you write a processor, please submit a pull request adding it to the list. Thanks.&lt;/p&gt; &#xA;&lt;h3&gt;International coverage&lt;/h3&gt; &#xA;&lt;p&gt;As of January 2024 coverage is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;We are aware of 248 territories&#xA;We have tests for 249 (100%) territories&#xA;We have rules for 249 (100%) territories&#xA;0 (0%) territories have neither rules nor tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This output is generated by &lt;code&gt;bin/coverage.pl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;We need more language specific abbreviations. Please see &lt;code&gt;conf/abbreviations&lt;/code&gt;. Pull requests gladly received.&lt;/p&gt; &#xA;&lt;p&gt;A detailed breakdown of test and configuration coverage can be found by running &lt;code&gt;bin/coverage.pl -d&lt;/code&gt;. A list of all known territories is in &lt;code&gt;conf/country_codes.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note: the list is simple all officially assigned &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements&#34;&gt;ISO 3166-1 alpha-2 codes&lt;/a&gt;, and is not a political statement on whether or not these territories are or are not or should or should not be political states.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;File format&lt;/h3&gt; &#xA;&lt;p&gt;The files are in &lt;a href=&#34;http://yaml.org/&#34;&gt;YAML&lt;/a&gt; format. The templates are written in &lt;a href=&#34;http://mustache.github.io/&#34;&gt;Mustache&lt;/a&gt;. Both formats are human readable, strict, solve escaping and support comments. YAML allows references (called &#34;ankers&#34;) to avoid copy&amp;amp;paste, Mustache allows sub-templates (called &#34;partials&#34;).&lt;/p&gt; &#xA;&lt;h3&gt;How to add your country/territory&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;edit the .yaml testcase for the country/territory in &lt;code&gt;testcases/countries&lt;/code&gt;. The file names correspond to the appropriate ISO 3166-1 alpha-2 code - see &lt;code&gt;conf/country_codes.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a good way to get sample data is: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;find an addressed location (house, business, etc) in your target territory in OpenStreetMap&lt;/li&gt; &#xA;   &lt;li&gt;get the coordinates (lat, long) of the location&lt;/li&gt; &#xA;   &lt;li&gt;put the coordinates into the &lt;a href=&#34;https://opencagedata.com/demo&#34;&gt;OpenCage Geocoding API demo page&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;look at the resulting JSON in the &lt;em&gt;Raw Response&lt;/em&gt; tab&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;edit &lt;code&gt;conf/countries/worldwide.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Possibly your country/territory uses an existing generic format as defined at the top of the file. If so, great, just map you country_code to the generic template. You may still want to add clean up code (see the entry for &lt;code&gt;DE&lt;/code&gt; as an example).&lt;/li&gt; &#xA; &lt;li&gt;If not you need to define a new generic rule set &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;possibly you will need to define new state/region mappings in &lt;code&gt;conf/state_codes.yaml&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;to test you will now need to process the .yaml test via a processer (see above) and ensure the input leads to the desired output.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If in doubt, please get in touch by submitting an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Formatting rules&lt;/h3&gt; &#xA;&lt;p&gt;Currently we support the following formatting rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;replace:&lt;/code&gt; regex that operates on the input values, useful for removing bureaucratic cruft like &#34;London Borough of &#34;. Note if you define the regex starting with format &lt;em&gt;X=&lt;/em&gt;, for example &lt;em&gt;city=&lt;/em&gt; it should operate only on values with that key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;postformat_replace:&lt;/code&gt; regex that operates on the final output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;add_component:&lt;/code&gt; with a value of the form &lt;code&gt;component=XXXX&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;change_country:&lt;/code&gt; change the country value of the input, useful for dependent territories. Can include a substitution like &lt;code&gt;$state&lt;/code&gt; so that that component value is then inserted into the new country value. See &lt;code&gt;testcases/countries/sh.yaml&lt;/code&gt; for an example.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use_country:&lt;/code&gt; use the formating configuration of another country, useful for dependent territories to avoid duplicating configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The future&lt;/h3&gt; &#xA;&lt;p&gt;More tests! For every rule about addresses there are exceptions and edge cases to consider. More test cases are always needed.&lt;/p&gt; &#xA;&lt;p&gt;Planned features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;basic error checking, for example ignore things which obviously can not be postcodes&lt;/li&gt; &#xA; &lt;li&gt;define rules for postcode format specifically&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We welcome your pull requests. Together we can address the world!&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/OpenCageData/address-formatting/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file for details&lt;/p&gt; &#xA;&lt;h3&gt;Additional resources&lt;/h3&gt; &#xA;&lt;p&gt;If you are working with addresses you may need &lt;a href=&#34;https://opencagedata.com/tools/address-lists&#34;&gt;lists of random addresses/postcodes/coordinates&lt;/a&gt; (either in general or for specific countries) for testing.&lt;/p&gt; &#xA;&lt;h3&gt;Further reading on the challenge of address&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s &lt;a href=&#34;https://blog.opencagedata.com/post/99059889253/good-looking-addresses-solving-the-berlin-berlin&#34;&gt;our blog post anouncing this project&lt;/a&gt; and the motivations behind it.&lt;/p&gt; &#xA;&lt;p&gt;You may enjoy Michael Tandy&#39;s &lt;a href=&#34;http://www.mjt.me.uk/posts/falsehoods-programmers-believe-about-addresses/&#34;&gt;Falsehoods Programmers Believe about Addresses&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If it&#39;s actual address data you&#39;re after, check out &lt;a href=&#34;https://www.openstreetmap.org&#34;&gt;OpenStreetMap&lt;/a&gt; and &lt;a href=&#34;http://openaddresses.io/&#34;&gt;OpenAddresses&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to turn longitude, latitude into well formatted addresses or placenames, well that&#39;s what a geocoder does. Check out ours: &lt;a href=&#34;https://opencagedata.com&#34;&gt;OpenCage Geocoder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If all this convinces you that address are evil, please check out &lt;a href=&#34;http://what3words.com&#34;&gt;what3words&lt;/a&gt; which allows you to dispense with them entirely.&lt;/p&gt; &#xA;&lt;h3&gt;Who is OpenCage GmbH?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencagedata.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OpenCageData/address-formatting/master/opencage_logo_300_150.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We run a worldwide &lt;a href=&#34;https://opencagedata.com/api&#34;&gt;geocoding API&lt;/a&gt; and &lt;a href=&#34;https://opencagedata.com/geosearch&#34;&gt;geosearch&lt;/a&gt; service based on open data. Learn more &lt;a href=&#34;https://opencagedata.com/about&#34;&gt;about us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also organize &lt;a href=&#34;https://thegeomob.com&#34;&gt;Geomob&lt;/a&gt;, a series of regular meetups for location based service creators, where we do our best to highlight geoinnovation. If you like geo stuff, you will probably enjoy &lt;a href=&#34;https://thegeomob.com/podcast/&#34;&gt;the Geomob podcast&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>crivor/dayage</title>
    <updated>2024-02-08T01:41:39Z</updated>
    <id>tag:github.com,2024-02-08:/crivor/dayage</id>
    <link href="https://github.com/crivor/dayage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;evaluates age from date to current time in days.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dayage&lt;/h1&gt; &#xA;&lt;p&gt;evaluates age from date to current time in days.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>charsbar/convert_h_xs</title>
    <updated>2024-02-08T01:41:39Z</updated>
    <id>tag:github.com,2024-02-08:/charsbar/convert_h_xs</id>
    <link href="https://github.com/charsbar/convert_h_xs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;process a C header file to write xs snippets&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Convert::H::XS&lt;/p&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;To install this module, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;COPYRIGHT AND LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2013 Kenichi Ishigaki&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt;</summary>
  </entry>
</feed>