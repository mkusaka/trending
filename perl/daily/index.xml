<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-01T01:40:45Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>curl/stats</title>
    <updated>2024-01-01T01:40:45Z</updated>
    <id>tag:github.com,2024-01-01:/curl/stats</id>
    <link href="https://github.com/curl/stats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scripts for generating project statistics and for plotting them as graphs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stats&lt;/h1&gt; &#xA;&lt;p&gt;This repository is collection of scripts for generating project statistics and data.&lt;/p&gt; &#xA;&lt;p&gt;Stats generated by these scripts have been, are and will be used in curl related blog posts and presentations and by providing the scripts in a public repository everyone can reproduce the results and can verify the correctness of them.&lt;/p&gt; &#xA;&lt;p&gt;And it allows everyone to help out to improve the script and to provide new ones that generate even more, better and more interesting project stats.&lt;/p&gt; &#xA;&lt;h2&gt;How to run the scripts&lt;/h2&gt; &#xA;&lt;h3&gt;Check out the main curl git repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/curl/curl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Check out this repository as a subdirectory&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd curl&#xA;git clone https://github.com/curl/stats.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the stats scripts&lt;/h3&gt; &#xA;&lt;p&gt;The scripts are (primarily) written in perl and are intended to be run from the curl source code root.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl stats/CI-jobs-over-time.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Output&lt;/h2&gt; &#xA;&lt;p&gt;The scripts are written to output CSV data, usually having data and/or curl release versions included in each line.&lt;/p&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;h2&gt;API-calls-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over git tags. Extracts the number of function calls as mentioned in the RELEASE-NOTES of the tag moment. Outputs version, date and a counter.&lt;/p&gt; &#xA;&lt;h2&gt;CI-jobs-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. It then counts how many CI jobs that seems to have been enabled at that time. Outputs version, date, total count, travis count, cirrus count, appveyor count, azure count and the github count.&lt;/p&gt; &#xA;&lt;h2&gt;CI-platforms&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. It then counts how many CI jobs that seems to have been enabled at that time. Outputs date, total count, Linux count, macOS count, Windows count and FreeBSD count.&lt;/p&gt; &#xA;&lt;h2&gt;authors&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts how many comits each author did and when, then lists all dates when a new author appeared in the project. Date, single-commiter count, total authors count and a single/total share.&lt;/p&gt; &#xA;&lt;h2&gt;authors-per-month&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts number of differenth authors every month, then for all years after 2009, outputs: year, first-commiters, unique authors, drive-by count and total uniues. The &lt;em&gt;drive-by&lt;/em&gt; count is an author with less than three commits done within that month.&lt;/p&gt; &#xA;&lt;h2&gt;authors-per-year&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts number of differenth authors every year, then outputs date (as &#34;$year-01-01&#34;), total count and first-timer count. The latter being the number of authors who did their first commit that year.&lt;/p&gt; &#xA;&lt;h2&gt;bugbounty-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all vulnerabilities in &lt;code&gt;vuln.pm&lt;/code&gt; (in the curl-www repo). Outputs cve, date, the accumulated amount and the individual payout amount. Amounts in USD. Note that this then does not include CVE reports that received payout but have since been retracted from the list of vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;bugfix-frequency&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all releases in &lt;code&gt;releases.csv&lt;/code&gt; (built in the curl-www repo). For each release, it outputs version release date, total number of bugfixes in that release and then the averaged bugs per day count for the last 5 releases. The first 5 lines obviously then have less releases for the average.&lt;/p&gt; &#xA;&lt;h2&gt;cmdline-options-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Extracs the counter from the &lt;code&gt;RELEASES-NOTES&lt;/code&gt; from each tag. This script also contains a bunch of manually added lines from the times before the &lt;code&gt;RELEASES-NOTES&lt;/code&gt; file contained the necessary information. Outputs version, date and a counter.&lt;/p&gt; &#xA;&lt;h2&gt;commits-per-month&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts number of commits done per month. Outputs date (&#34;$y-$m-01&#34;) and a counter.&lt;/p&gt; &#xA;&lt;h2&gt;commits-per-year&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts number of commits done per year. Outputs date (&#34;$y-01-01&#34;) and a counter.&lt;/p&gt; &#xA;&lt;h2&gt;contributors-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Extracs the counter from the &lt;code&gt;RELEASES-NOTES&lt;/code&gt; from each tag. The script contains a set of manually added numbers from the time before the number was added to &lt;code&gt;RELEASES-NOTES&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;coreteam-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts how many authors that have done 10 commits or more within the same calendar year, count them as &#34;core team&#34; members and outputs information about them.&lt;/p&gt; &#xA;&lt;h2&gt;cve-age&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;vuln.pm&lt;/code&gt; and &lt;code&gt;releases.csv&lt;/code&gt; (from curl-www). Outputs CVE, date, flaw period, project age at that point, days since previous CVE, total CVE count to that point.&lt;/p&gt; &#xA;&lt;h2&gt;cve-plot&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;vuln.pm&lt;/code&gt; and &lt;code&gt;releases.csv&lt;/code&gt; (from curl-www). Outputs CVE, total count, flaw period, project age at that point.&lt;/p&gt; &#xA;&lt;h2&gt;daniel-per-year&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Counts how many commits Daniel did and how many others did each year. Outputs date (&#34;$year-12-31&#34;) and a share for that year.&lt;/p&gt; &#xA;&lt;h2&gt;daniel-vs-rest&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log. Outputs date, total commit count, Daniel&#39;s share of all commits, the others&#39;s share of all commits.&lt;/p&gt; &#xA;&lt;h2&gt;days-per-release&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;releases.csv&lt;/code&gt; (from curl-www). Outputs version, date and number of days between this release and the previous.&lt;/p&gt; &#xA;&lt;h2&gt;docs-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log and all commits done to the &lt;code&gt;docs/&lt;/code&gt; folder. Outputs date and number of lines.&lt;/p&gt; &#xA;&lt;h2&gt;gh-monthly&lt;/h2&gt; &#xA;&lt;p&gt;Uses the generated github.csv file to generate graphs on github activity.&lt;/p&gt; &#xA;&lt;h2&gt;gh-age&lt;/h2&gt; &#xA;&lt;p&gt;Uses the generated github.csv file to generate graphs on github issue ages.&lt;/p&gt; &#xA;&lt;h2&gt;lines-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over the git log and all commits done to the &lt;code&gt;src/&lt;/code&gt;, &lt;code&gt;lib/&lt;/code&gt; and &lt;code&gt;include/&lt;/code&gt; folders. Outputs date and number of lines. The script contains a set of versions and LOC counts, manually counted from the time before the git repo.&lt;/p&gt; &#xA;&lt;h2&gt;mail&lt;/h2&gt; &#xA;&lt;p&gt;Downloads the server-side CSV and generates a mailing list activity graph.&lt;/p&gt; &#xA;&lt;h2&gt;protocols-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;protocol-history.md&lt;/code&gt;, which is a human maintained input source. Outputs date, protocol, total count. The protocol being the one that was added at that particular moment in time. The initial protocols were added &lt;em&gt;before&lt;/em&gt; the first curl release...&lt;/p&gt; &#xA;&lt;h2&gt;setopts-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Extracs the setopt counter from the &lt;code&gt;RELEASES-NOTES&lt;/code&gt; from each tag. The script contains a set of manually added numbers from the time before the number was added to &lt;code&gt;RELEASES-NOTES&lt;/code&gt;. Outputs version, date and counter.&lt;/p&gt; &#xA;&lt;h2&gt;files-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Counts the number of files in the repository at the time of each tag. Outputs version, date and counter.&lt;/p&gt; &#xA;&lt;h2&gt;tests-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all git tags. Counts the number of files matching &lt;code&gt;tests/data/test[num]&lt;/code&gt; at the time of each tag. Outputs version, date and counter.&lt;/p&gt; &#xA;&lt;h2&gt;tls-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over &lt;code&gt;tls-history.md&lt;/code&gt;, which is a human maintained input source. Outputs date, backend, total count. The &#34;backend&#34; being the TLS library that was added (or removed) at that particular moment in time. Removed backends are prefixed with a minus.&lt;/p&gt; &#xA;&lt;h2&gt;vulns-over-time&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all vulnerabilities in &lt;code&gt;vuln.pm&lt;/code&gt; (in the curl-www repo). Outputs cve, date, the total CVE count.&lt;/p&gt; &#xA;&lt;h2&gt;vulns-per-year&lt;/h2&gt; &#xA;&lt;p&gt;Iterates over all vulnerabilities in &lt;code&gt;vuln.pm&lt;/code&gt; (in the curl-www repo). Outputs date (&#34;$year-01-01;, CVEs that year and the total CVE count up and including that year.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The scripts are provided under &lt;a href=&#34;https://raw.githubusercontent.com/curl/stats/master/LICENSE&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>radford/PerlMagick</title>
    <updated>2024-01-01T01:40:45Z</updated>
    <id>tag:github.com,2024-01-01:/radford/PerlMagick</id>
    <link href="https://github.com/radford/PerlMagick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Release history of PerlMagick&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Introduction&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PerlMagick, is an objected-oriented Perl interface to ImageMagick.&#xA;Use the module to read, manipulate, or write an image or image sequence&#xA;from within a Perl script. This makes it suitable for Web CGI scripts. You&#xA;must have ImageMagick 6.5.8 or above installed on your system for this&#xA;module to work properly.&#xA;&#xA;See&#xA;&#xA;    http://www.imagemagick.org/script/perl-magick.php&#xA;&#xA;for additional information about PerlMagick.  If you have problems, go to&#xA;&#xA;    http://www.imagemagick.org/discourse-server/viewforum.php?f=7&#xA;&#xA;for help.  For instructions about installing ImageMagick, see&#xA;&#xA;    http://www.imagemagick.org/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Get the PerlMagick distribution and type the following: &#xA;&#xA;    gunzip ImageMagick-6.5.8-0.tar.gz&#xA;    tar xvf ImageMagick-6.5.8&#xA;&#xA;Follow the ImageMagick installation instructions in INSTALL-unix.txt&#xA;&#x9;then type&#xA;&#xA;  cd PerlMagick&#xA;&#xA;Next, edit Makefile.PL and change LIBS and INC to include the appropriate&#xA;path information to the required libMagick library. You will also need&#xA;library search paths (-L) to JPEG, PNG, TIFF, etc. libraries if they were&#xA;included with your installed version of ImageMagick. If an extension&#xA;library is built as a shared library but not installed in the system&#39;s&#xA;default library search path, you may need to add run-path information&#xA;(often -R or -rpath) corresponding to the equivalent library search&#xA;path option so that the library can be located at run-time.&#xA;&#xA;To create and install the dymamically-loaded version of PerlMagick&#xA;(the preferred way), execute&#xA;    &#xA;    perl Makefile.PL&#xA;    make&#xA;    make install&#xA;&#xA;To create and install a new &#39;perl&#39; executable (replacing your existing&#xA;PERL interpreter!) with PerlMagick statically linked (but other libraries&#xA;linked statically or dynamically according to system linker default),&#xA;execute&#xA;&#xA;    perl Makefile.PL&#xA;    make perl&#xA;    make -f Makefile.aperl inst_perl&#xA;&#xA;or to create and install a new PERL interpreter with a different name&#xA;than &#39;perl&#39; (e.g. &#39;PerlMagick&#39;) and with PerlMagick statically linked&#xA;&#xA;    perl Makefile.PL MAP_TARGET=PerlMagick&#xA;    make PerlMagick&#xA;    make -f Makefile.aperl inst_perl&#xA;&#xA;See the ExtUtils::MakeMaker(3) manual page for more information on&#xA;building PERL extensions (like PerlMagick).&#xA;&#xA;For Windows systems, type&#xA;&#xA;    perl Makefile.nt&#xA;    nmake install&#xA;&#xA;For Unix, you typically need to be root to install the software.&#xA;There are ways around this.  Consult the Perl manual pages for more&#xA;information. You are now ready to utilize the PerlMagick routines from&#xA;within your Perl scripts.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installation - Win32 Strawberry perl&lt;/p&gt; &#xA;&lt;p&gt;On Win32 Strawberry perl the prefered way of installing PerlMagick is the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and install ImageMagick Windows binaries from &lt;a href=&#34;http://www.imagemagick.org/script/binary-releases.php#windows&#34;&gt;http://www.imagemagick.org/script/binary-releases.php#windows&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You HAVE TO choose dynamic (DLL) ImageMagick binaries. Note: it is not possible to mix 32/64bit binaries of perl and ImageMagick&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;During installation select that you want to install ImageMagick&#39;s development files (libraries+headers)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You NEED TO have ImageMagick&#39;s directory in your PATH. Note: we are checking the presence of convert.exe or identify.exe tools&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You might need Visual C++ Redistributable Package installed on your system. See instructions on ImageMagick&#39;s Binary Release webpage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have all prerequisites 1)...5) you can simply install ImageMagick by running: cpan -i Image::Magick&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Testing PerlMagick&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Before PerlMagick is installed, you may want to execute&#xA;&#xA;    make test&#xA;&#xA;to verify that PERL can load the PerlMagick extension ok.  Chances are&#xA;some of the tests will fail if you do not have the proper delegates&#xA;installed for formats like JPEG, TIFF, etc.&#xA;&#xA;To see a number of PerlMagick demonstration scripts, type&#xA;&#xA;    cd demo&#xA;    make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example Perl Magick Script&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Here is an example script to get you started: &#xA;&#xA;    #!/usr/bin/perl&#xA;    use Image::Magick;&#xA;&#xA;    $q = Image::Magick-&amp;gt;new;&#xA;    $x = $q-&amp;gt;Read(&#34;model.gif&#34;, &#34;logo.gif&#34;, &#34;rose.gif&#34;);&#xA;    warn &#34;$x&#34; if $x;&#xA;&#xA;    $x = $q-&amp;gt;Crop(geom=&amp;gt;&#39;100x100+100+100&#39;);&#xA;    warn &#34;$x&#34; if $x;&#xA;&#xA;    $x = $q-&amp;gt;Write(&#34;x.gif&#34;);&#xA;    warn &#34;$x&#34; if $x;&#xA;&#xA;The script reads three images, crops them, and writes a single image&#xA;as a GIF animation sequence.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>manakai/perl-number-cjk</title>
    <updated>2024-01-01T01:40:45Z</updated>
    <id>tag:github.com,2024-01-01:/manakai/perl-number-cjk</id>
    <link href="https://github.com/manakai/perl-number-cjk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=encoding utf-8&lt;/p&gt; &#xA;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;Number::CJK::Parser - Parsing CJK numbers (漢数字)&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use Number::CJK::Parser; $n = parse_cjk_number q{五億二千万十二}; warn $n; # 520000012&lt;/p&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;The C&lt;a href=&#34;Number::CJK::Parser&#34;&gt;Number::CJK::Parser&lt;/a&gt; module exports a function, C&amp;lt;parse_cjk_number&amp;gt;, which converts a CJK number (漢数字) into a Perl number.&lt;/p&gt; &#xA;&lt;p&gt;The argument to the function must be a utf8-flagged string. If it is a valid CJK number, a Perl number which is equal to the CJK number is returned. Otherwise, C&#xA; &lt;undef&gt;&#xA;   is returned.&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 SPECIFICATION&lt;/p&gt; &#xA;&lt;p&gt;Numbers &lt;a href=&#34;https://manakai.github.io/spec-numbers/&#34;&gt;https://manakai.github.io/spec-numbers/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;This repository also contains L&lt;a href=&#34;CJK::Number::Serializer&#34;&gt;CJK::Number::Serializer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 HISTORY&lt;/p&gt; &#xA;&lt;p&gt;This repository was located at &lt;a href=&#34;https://github.com/wakaba/perl-number-cjk&#34;&gt;https://github.com/wakaba/perl-number-cjk&lt;/a&gt; until 18 April 2023, then transferred to the manakai project &lt;a href=&#34;https://github.com/manakai/perl-number-cjk&#34;&gt;https://github.com/manakai/perl-number-cjk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2015-2019 Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
</feed>