<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-31T01:38:40Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dtonhofer/most_connected_ip</title>
    <updated>2023-08-31T01:38:40Z</updated>
    <id>tag:github.com,2023-08-31:/dtonhofer/most_connected_ip</id>
    <link href="https://github.com/dtonhofer/most_connected_ip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Perl script to display the active TCP connections on a machine, sorted by &#34;most connected IP first&#34;, which is done by scanning the netstat output&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;most_connected_ip&lt;/h1&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maintained. Works on Fedora 28 on 2018-10-28.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is it&lt;/h2&gt; &#xA;&lt;p&gt;This is a Perl script to display the &lt;em&gt;currently active TCP connections&lt;/em&gt; and their TCP state on the local machine, grouped by endpoint (IP:port), with any remote IP address resolved to its reverse DNS name, if possible.&lt;/p&gt; &#xA;&lt;p&gt;This is done by scanning the &lt;code&gt;netstat(8)&lt;/code&gt; output, the script is thus meant for a Unix.&lt;/p&gt; &#xA;&lt;p&gt;For example, run it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl most_connected_ip.pl --loop=5 --dnsnamelen=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output will be produced every 5 seconds, with the column showing the result of reverse-lookup DNS 80 characters wide.&lt;/p&gt; &#xA;&lt;p&gt;The following can be passed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--debug         To activate debugging output.&#xA;--nodns         To disable reverse DNS lookup; just IP addresses will be printed.&#xA;--notiming      Do not insert time taken for DNS lookups in output.&#xA;                (note that timing is printed only on lookup; if there is a cache&#xA;                hit on the program cache, no timing information will be printed in any case)&#xA;--debugdns      Print time taken for DNS lookup to STDERR; useful when debugging DNS problems.&#xA;                (you may also want to wield this: &#39;tcpdump -i lo udp port 53&#39;)&#xA;--dnsnamelen=N  Size of column holding the DNS lookup result (default 50; at least 30).&#xA;--loop[=N]      The program will loop every N seconds, forever, instead of running once only.&#xA;                (N can be missing (default is 1) or else 1..3600)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Problems&lt;/h2&gt; &#xA;&lt;p&gt;Short-lived connections that a created and disappear before they can appear in the next &lt;code&gt;netstat&lt;/code&gt; listing are invisible. For that, only something based on &lt;code&gt;tcpdump(8)&lt;/code&gt; helps.&lt;/p&gt; &#xA;&lt;p&gt;The program may appear slow if &lt;code&gt;/etc/resolv.conf&lt;/code&gt; does not explicitly say &lt;code&gt;nameserver 127.0.0.1&lt;/code&gt;, causing DNS resolution to issue a IPv6 request which times out.&lt;/p&gt; &#xA;&lt;h2&gt;Similar programs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://linux.die.net/man/1/tcptrack&#34;&gt;tcptrack&lt;/a&gt; - That&#39;s basically it. No longer available at its old Christmas Island address, but you can just &lt;code&gt;yum install tcptrack&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.muenster.de/~alnep/linux/Nnetstat/&#34;&gt;nnetstat.pl&lt;/a&gt; - Perl/Gtk version of netstat.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; - Wireshark (ex Ethereal), which is the dog&#39;s bollocks&lt;/li&gt; &#xA; &lt;li&gt;For Microsoft Windows, there is &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/bb897437.aspx&#34;&gt;tcpview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raboof/nethogs#readme&#34;&gt;nethogs&lt;/a&gt; - NetHogs is a small &#39;net top&#39; tool, grouping bandwidth by process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample output&lt;/h2&gt; &#xA;&lt;p&gt;Below is a sample output that shows two &#34;inbound&#34; TCP connections to ports 777 and 443 (one line for each), three &#34;outbound&#34; TCP connections to some remote machines on ports 777 and 25 (the first two connections on one line as they go to the same address and port and the third connection on a separate line), as well as a bunch of random TCP connections going over the loopback interface.&lt;/p&gt; &#xA;&lt;p&gt;Also shown are the TCP connections&#39; states and the reverse-resolved name of the remote IP addresses.&lt;/p&gt; &#xA;&lt;p&gt;Note the &#34;10 duplicates&#34; indication shown in the &#34;looping connections&#34; header. Sometimes there are connections over the loopback interface for which &lt;code&gt;netstat&lt;/code&gt; prints two lines, and so the script ignores one of them. 10 lines have been ignored in this case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Distant inbound connections: 2&#xA;    85.93.216.17:777               &amp;lt;-- 78.141.139.10       :    1        ip-78-141-139-10.dyn.luxdsl.pt.lu     1 x ESTABLISHED&#xA;    80.90.47.155:443               &amp;lt;-- 78.141.139.10       :    1        ip-78-141-139-10.dyn.luxdsl.pt.lu     1 x ESTABLISHED&#xA;Distant outbound connections: 3&#xA;    80.90.63.61                    --&amp;gt; 80.90.63.48:25      :    2        smtp.m-plify.net                      2 x TIME_WAIT&#xA;    85.93.216.17                   --&amp;gt; 85.93.216.18:777    :    1        maya.m-plify.net                      1 x ESTABLISHED&#xA;Looping connections: 57 (10 duplicates)&#xA;    127.0.0.1                      --&amp;gt; 127.0.0.1:9355      :   20                                              1 x ESTABLISHED, 8 x TIME_WAIT, 11 x CLOSE_WAIT&#xA;    127.0.0.1                      --&amp;gt; 127.0.0.1:4713      :   10                                             10 x CLOSE_WAIT&#xA;    127.0.0.1                      --&amp;gt; 127.0.0.1:9353      :    9                                              4 x TIME_WAIT, 5 x CLOSE_WAIT&#xA;    127.0.0.1                      --&amp;gt; 127.0.0.1:3306      :    8                                              6 x ESTABLISHED, 1 x TIME_WAIT, 1 x CLOSE_WAIT&#xA;    127.0.0.1                      --&amp;gt; 127.0.0.1:5445      :    5                                              1 x ESTABLISHED, 4 x TIME_WAIT&#xA;    127.0.0.1                      --&amp;gt; 127.0.0.1:9354      :    2                                              2 x CLOSE_WAIT&#xA;    127.0.0.1                      --&amp;gt; 127.0.0.1:7998      :    1                                              1 x TIME_WAIT&#xA;    127.0.0.1                      --&amp;gt; 127.0.0.1:3351      :    1                                              1 x ESTABLISHED&#xA;    127.0.0.1                      --&amp;gt; 127.0.0.1:32000     :    1                                              1 x ESTABLISHED&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2012&lt;br&gt; M-PLIFY S.A.&lt;br&gt; 21, rue Glesener&lt;br&gt; L-1631 Luxembourg&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2013-02-12&lt;/td&gt; &#xA;   &lt;td&gt;Correctly handle &#34;netstat --wide&#34;, which may or may not work depending on the system. Correctly parse netstat output with IPv6 addresses.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2013-02-28&lt;/td&gt; &#xA;   &lt;td&gt;IPv4 addresses assigned to the local machine are obtained via IO::Interface::Simple. Complemented this with a readout of /proc/net/if_inet6 for the IPv6 addresses. Netstat output parsing went wrong on Ubuntu (the IPv6 loopback is apparently shown as 127.0.0.1); fixed. (Maybe one should not bother with netstat at all and use /proc directly)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2013-02-28&lt;/td&gt; &#xA;   &lt;td&gt;Printout made nicer; fields are aligned whether IPv6 addresses show up or not.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2013-03-01&lt;/td&gt; &#xA;   &lt;td&gt;127.0.0.1 was no longer recognized as of type LOOPBACK; fixed. Improved debug messages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2014-03-04&lt;/td&gt; &#xA;   &lt;td&gt; When running teamviewer client, connections that are localhost-&amp;gt;localhost show up that may have: No corresponding server socket; May only go &#34;one way&#34;, i.e. the second entry of the typical bidirectional TCP connection is missing. How is that possible? ...the script could not handle that. FIXED! Also: Net::IP 1.25 declares that an IP address on 127.0.0.1 is &#34;PRIVATE&#34;, not on the &#34;LOOPBACK&#34;. This is weird, and is now being forcefully &#34;fixed&#34;. Maybe this will go away im later versions! &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2018-10-27&lt;/td&gt; &#xA;   &lt;td&gt;Complete review; added options and made it possible to have the program loop instead of having to use `watch`&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;When the reverse DNS lookup fails, one should traceroute to find the last IP that reverse-resolves. &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Also list the process owning the connection; info about this can be obtained with `lsof(8)`&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
</feed>