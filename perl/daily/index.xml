<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-15T01:39:37Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fersure91/PhantasmagoricalServices</title>
    <updated>2022-10-15T01:39:37Z</updated>
    <id>tag:github.com,2022-10-15:/fersure91/PhantasmagoricalServices</id>
    <link href="https://github.com/fersure91/PhantasmagoricalServices" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fork of SurrealServices&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a fork of SurrealServices to make it more up-to-date and compatible with other IRCds.&lt;/p&gt; &#xA;&lt;p&gt;Work in progress.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shadow-Master/phant0m</title>
    <updated>2022-10-15T01:39:37Z</updated>
    <id>tag:github.com,2022-10-15:/Shadow-Master/phant0m</id>
    <link href="https://github.com/Shadow-Master/phant0m" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ASM GhostWriting automation tool&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;_ (`-.  (&#39;-. .-.   (&#39;-.         .-&#39;) _  .-&#39;) _             _   .-&#39;)    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;( (OO )( OO ) / ( OO ).-. ( OO ) )( OO) ) ( &#39;.( OO )_&lt;br&gt; &lt;em&gt;.&lt;code&gt; \,--. ,--. / . --. /,--./ ,--,&#39; / &#39;._ .----. ,--. ,--.) (__...--&#39;&#39;| | | | | \-. \ | \ | |\ |&#39;--...__) / .. \ | &lt;/code&gt;.&#39; | | / | || .| |.-&#39;-&#39; | || | | )&#39;--. .--&#39;. / \ .| | | |&lt;/em&gt;.&#39; || | | |&lt;em&gt;.&#39; || . |/ | | | | &#39; || |&#39;.&#39;| | | .&lt;/em&gt;__.&#39;| .-. | | .-. || |\ | | | &#39; \ / &#39;| | | | | | | | | | | | | || | \ | | | \ &lt;code&gt;&#39; / | | | | &lt;/code&gt;--&#39; &lt;code&gt;--&#39; &lt;/code&gt;--&#39; &lt;code&gt;--&#39; &lt;/code&gt;--&#39;&lt;code&gt;--&#39; &lt;/code&gt;--&#39; &lt;code&gt;--&#39; &lt;/code&gt;---&#39;&#39; &lt;code&gt;--&#39; &lt;/code&gt;--&#39;&lt;/p&gt; &#xA;&lt;p&gt;An ASM ghostwriting script PoC for linux. Brought to you by Shadow-Master @Shadow-Master #offtopicsec on freenode server Thanks to trillian_ on #offsec for some regex help Thanks to bwall, kamsky, lucidnight, PuN1sh3r and others on #offtopicsec for help as well&lt;/p&gt; &#xA;&lt;h2&gt;Explanation of the script&lt;/h2&gt; &#xA;&lt;p&gt;While reading a blog post about ASM ghostwriting, I decided to make my own automator. While most scripts basically do a static search and replace within the ASM code, and while I also plan on including similiar functionality, I chose to take a different route for my main obfuscation engine.&lt;/p&gt; &#xA;&lt;p&gt;What I&#39;ve noticed from my forays into Shellcode land was that people don&#39;t actually care about how things happen. They care about two things: 1) the size of the code, and 2) what the registers and stack look like after the code has run before the syscall is made. I do not include the null byte consideration, since if null bytes are in shellcode it will not run. Meaning that while sometimes we need null bytes in the actual code, we cannot use null bytes to get there or the code will fail.&lt;/p&gt; &#xA;&lt;p&gt;Well, I actually do not care about the size of the shellcode. Sorry. In fact, in my mind, the larger and more obfuscated the code is, the better. In a nutshell, the current release of the script is a parser. The goal is to have the exact state of the registers and the stack before the syscall saved in a frame file for later obfuscation. When the frame state is reached, the next major update of the script will have some sort of ASM generator to create null-byte clean ASM code to reach that state.&lt;/p&gt; &#xA;&lt;p&gt;As of now the script will handle without issues the following commands: ADD SUB INC DEC MOV XOR OR AND CDQ PUSH&lt;br&gt; POP XCHG LEA INT 0x80 (for &lt;em&gt;SOME&lt;/em&gt; syscalls...)&lt;/p&gt; &#xA;&lt;p&gt;Also, I now handle: JMP JZ JNZ JE JNE JS JNS TEST CMP with a few caviats. Dereferenced values will not produce flag changes. That is a direct result of how my deref sub handles its values. I may change that in the future, but for now, it will remain like this. Also I do not jump to absolute locations. JMP 0x40 will spectacularly crash my script. You must have included a label in the .s file for this to work. That&#39;s why this won&#39;t work in -i mode.&lt;/p&gt; &#xA;&lt;p&gt;Also: CALL is still iffy, because i would have to process things below that to use it well..&lt;/p&gt; &#xA;&lt;p&gt;I still do not handle: JLE JGE JG JL because I have yet to truly understand how to use the overflow flag, and how to integrate into my script.&lt;/p&gt; &#xA;&lt;p&gt;It will &lt;em&gt;NOT&lt;/em&gt; handle these: IMUL MUL SHR SHL ROTL ROTR I chose not to handle these because they are not used in most shellcode. If it turns out that people want them, I, or someone else, will add them in.&lt;/p&gt; &#xA;&lt;p&gt;This code will handle dereferencing as well &lt;em&gt;ONLY&lt;/em&gt; in the first operand. Examples: LEA EBX, ESP MOV [EBX +3], AX will be fine. As long as the stack value has already been pushed, that is. Unlike real stacks, my stack is an array, and can therefore not handle values that have not been pushed. My advice is to push 0xffffffff in the test code and not in the real code.&lt;/p&gt; &#xA;&lt;p&gt;However MOV EAX, [EBX +3] Will fail miserably...&lt;/p&gt; &#xA;&lt;p&gt;Within the ASM file, the standard asm comment delimiter ; is used. It can be there or not, my code doesn&#39;t care, but anything after a ; is ignored.&lt;/p&gt; &#xA;&lt;p&gt;To force a status output during the shellcode parsing, which can be useful, just a line saying ;status in the file where you want the output.&lt;/p&gt; &#xA;&lt;h2&gt;Usage modes&lt;/h2&gt; &#xA;&lt;p&gt;-c|--createframe This will parse an ASM file according to the guidelines above.&lt;/p&gt; &#xA;&lt;p&gt;-r|--readframe This will read in a framefile and show status output. Used for debugging the manual creation of framefiles, or just to look cool.&lt;/p&gt; &#xA;&lt;p&gt;-i|--interactive This will drop to an ASM shell where the commands you entered in will be parsed as you enter them. Do not make typos, since this will not check. Type ;status to force a status check, and int 0x80 to force a frame save. This will not handle loops or jmp&#39;s.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*DO NOT TYPE IN ANYTHING OTHER THAN WORDS! ARROWS KEYS AND SUCH WILL CRASH THE SCRIPT!*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-l|--linebyline &lt;em&gt;NOT IMPLEMENTED YET&lt;/em&gt; This will read in an ASM file and do a static line-by-line replacement from community supplied replacement modules. When I fully implement this, I will explain the rules for modules, and provide examples.&lt;/p&gt; &#xA;&lt;p&gt;-g|--generatecode &lt;em&gt;NOT IMPLEMENTED YET&lt;/em&gt; The main point of the script. When pointed to the first framefile, it will read in the state, and generate (hopefully) null-byte safe ASM code to reach an equivilant state. Since the code will be generated based on a random set of heuristics, the code will almost never be repeated. This will be the hardest thing to write, but also the most interesting. This is where the help from the community is truly needed.&lt;/p&gt; &#xA;&lt;p&gt;-v|--verbose Up to three of these flags can be added to the command line, increasing the verbosity level with each addition. The output goes from almost nothing to completely over-whelming.&lt;/p&gt; &#xA;&lt;p&gt;-h|--help Basically this.&lt;/p&gt; &#xA;&lt;h2&gt;Usage examples&lt;/h2&gt; &#xA;&lt;p&gt;I have provided several ASM files to play around with. On the assumption that those will be used for right now, here are some examples.&lt;/p&gt; &#xA;&lt;p&gt;./Gh0stWr1ter.pl -c clean_bind_shell.s -v -v -v Creates a framefile based on the ASM code in clean_bind_shell.s, and prints all output to screen.&lt;/p&gt; &#xA;&lt;p&gt;./Gh0stWr1ter.pl -r frames/0.frm -v Read in the framefile and print it to screen, being slightly verbose.&lt;/p&gt; &#xA;&lt;p&gt;./Gh0stWr1ter.pl -i Enter interactive mode to create framefiles.&lt;/p&gt;</summary>
  </entry>
</feed>