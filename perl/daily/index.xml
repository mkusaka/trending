<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-06T01:35:52Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hirose31/IPC-Lock-WithTTL</title>
    <updated>2023-10-06T01:35:52Z</updated>
    <id>tag:github.com,2023-10-06:/hirose31/IPC-Lock-WithTTL</id>
    <link href="https://github.com/hirose31/IPC-Lock-WithTTL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div&gt; &#xA; &lt;a href=&#34;https://travis-ci.org/hirose31/IPC-Lock-WithTTL&#34;&gt;&lt;img src=&#34;https://travis-ci.org/hirose31/IPC-Lock-WithTTL.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://coveralls.io/r/hirose31/IPC-Lock-WithTTL?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/hirose31/IPC-Lock-WithTTL/badge.png?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;IPC::Lock::WithTTL - run only one process up to given timeout&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use IPC::Lock::WithTTL;&#xA;&#xA;my $lock = IPC::Lock::WithTTL-&amp;gt;new(&#xA;    file          =&amp;gt; &#39;/tmp/lockme&#39;,&#xA;    ttl           =&amp;gt; 5,&#xA;    kill_old_proc =&amp;gt; 0,&#xA;   );&#xA;&#xA;my($r, $hb) = $lock-&amp;gt;acquire;&#xA;&#xA;if ($r) {&#xA;    infof(&#34;Got lock! yay!!&#34;);&#xA;} else {&#xA;    critf(&#34;Cannot get lock. Try after at %d&#34;, $hb-&amp;gt;{expiration});&#xA;    exit 1;&#xA;}&#xA;&#xA;$lock-&amp;gt;release;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;IPC::Lock::WithTTL provides inter process locking feature. This locking has timeout feature, so we can use following cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Once send an alert email, don&#39;t send same kind of alert email within 10 minutes.&#xA;* We want to prevent the situation that script for failover some system is invoked more than one processes at same time and invoked many times in short time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DETAIL&lt;/h1&gt; &#xA;&lt;h2&gt;SEQUENCE&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. flock a heartbeat file (specified by file param in new) with LOCK_EX&#xA;   return if failed to flock.&#xA;2. read a heartbeat file and examine PID and expiration (describe later)&#xA;   return if I should not go ahead.&#xA;3. update a heartbeat file with my PID and new expiration.&#xA;4. ACQUIRED LOCK&#xA;5. unlock a lock file.&#xA;6. process main logic.&#xA;7. RELEASE LOCK with calling $lock-&amp;gt;release method.&#xA;   In that method update a heartbeat file with PID=0 and new expiration.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DETAIL OF EXAMINATION OF PID AND EXPIRATION&lt;/h2&gt; &#xA;&lt;p&gt;Format of a heartbeat file (lock file) is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PID EXPIRATION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next action table by PID and expiration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PID       expired?  Next action      Description&#xA;=========================================================================&#xA;not mine  yes       acquired lock*1  Another process is running or&#xA;- - - - - - - - - - - - - - - - - -  exited abnormally (without leseasing&#xA;not mine  no        return           lock).&#xA;-------------------------------------------------------------------------&#xA;mine      yes       acquired lock    Previously myself acquired lock but&#xA;- - - - - - - - - - - - - - - - - -  does not release lock.&#xA;mine      no        acquired lock&#xA;-------------------------------------------------------------------------&#xA;0         yes       acquired lock    Previously someone acquired and&#xA;- - - - - - - - - - - - - - - - - -  released lock successfully.&#xA;0         no        return&#xA;-------------------------------------------------------------------------&#xA;&#xA;*1 try to kill another process if you enable kill_old_proc option in new().&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;new&lt;/strong&gt;($args:Hash)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  file =&amp;gt; Str (required)&#xA;    File path of heartbeat file. IPC::Lock::WithTTL also flock this file.&#xA;  &#xA;  ttl  =&amp;gt; Int (default is 0)&#xA;    TTL to exipire. expiration time set to now + TTL.&#xA;  &#xA;  kill_old_proc =&amp;gt; Boolean (default is 0)&#xA;    Try to kill old process which might exit abnormally.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;acquire&lt;/strong&gt;(ttl =&amp;gt; $TTL:Int)&lt;/p&gt; &lt;p&gt;Try to acquire lock. ttl option set TTL to expire (override ttl in new())&lt;/p&gt; &lt;p&gt;This method returns scalar or list by context.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Scalar context&#xA;  =========================================================================&#xA;    Acquired lock successfully&#xA;      1&#xA;    -----------------------------------------------------------------------&#xA;    Failed to acquire lock&#xA;      0&#xA;  &#xA;  List context&#xA;  =========================================================================&#xA;    Acquired lock successfully&#xA;      (1, { pid =&amp;gt; PID, expiration =&amp;gt; time_to_expire })&#xA;      PID is mine. expiration is setted by me.&#xA;    -----------------------------------------------------------------------&#xA;    Failed to acquire lock&#xA;      (0, { pid =&amp;gt; PID, expiration =&amp;gt; time_to_expire })&#xA;      PID is another process. expiration is setted by another process.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;release&lt;/strong&gt;()&lt;/p&gt; &lt;p&gt;Update a heartbeat file (PID=0 and new expiration) and release lock.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;HIROSE Masaaki &amp;lt;hirose31 _at_ gmail.com&amp;gt;&lt;/p&gt; &#xA;&lt;h1&gt;REPOSITORY&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirose31/IPC-Lock-WithTTL&#34;&gt;https://github.com/hirose31/IPC-Lock-WithTTL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/hirose31/IPC-Lock-WithTTL.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;patches and collaborators are welcome.&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/IPC::Lock&#34;&gt;IPC::Lock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt;</summary>
  </entry>
</feed>