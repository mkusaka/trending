<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-19T01:42:36Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tokuhirom/Module-Advisor</title>
    <updated>2023-04-19T01:42:36Z</updated>
    <id>tag:github.com,2023-04-19:/tokuhirom/Module-Advisor</id>
    <link href="https://github.com/tokuhirom/Module-Advisor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>DeeNewcum/deedot</title>
    <updated>2023-04-19T01:42:36Z</updated>
    <id>tag:github.com,2023-04-19:/DeeNewcum/deedot</id>
    <link href="https://github.com/DeeNewcum/deedot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a tool for managing your ~/dotfile/ symlinks&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;DeeDot&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$  git clone https://github.com/yourself/dotfiles.git&#xA;$  cd dotfiles&#xA;$  ./deedot&#xA;$  ls -l ~/.bashrc&#xA;~/.bashrc -&amp;gt; ~/dotfiles/.bashrc&#xA;&#xA;# Your dotfiles are safe.  DeeDot won&#39;t overwrite anything.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DeeDot is a tool for installing dotfile symlinks in your $HOME, allowing you to keep your versioned dotfiles under a single directory.&lt;/p&gt; &#xA;&lt;p&gt;Host your dotfiles in any version control system (eg. Git, Hg, SVN, even rsync), and voila, your dotfiles are available across multiple machines.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run DeeDot, fix the file conflicts that it notes. Rinse and repeat until it doesn&#39;t report any conflicts.&lt;/p&gt; &#xA;&lt;p&gt;DeeDot recognizes three different ways to incorporate ~/dotfiles/ settings into the working versions in $HOME:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Symlink&lt;/strong&gt; — If you don&#39;t want any local-machine overrides. For example, ~/.bashrc can just be a symlink to ~/dotfiles/.bashrc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; — Some file types have the ability to &#39;source&#39; another file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Text substitution&lt;/strong&gt; — DeeDot will read the text from *.subst files, and copy-n-paste it into the middle of the working version.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are explained below.&lt;/p&gt; &#xA;&lt;h2&gt;Symlinks&lt;/h2&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/.bashrc        -&amp;gt; ~/dotfiles/.bashrc&#xA;~/.lesskey       -&amp;gt; ~/dotfiles/.lesskey&#xA;~/.tmux.conf     -&amp;gt; ~/dotfiles/.tmux.conf&#xA;~/.vimrc         -&amp;gt; ~/dotfiles/.vimrc&#xA;~/bin/termdetect -&amp;gt; ~/dotfiles/bin/termdetect&#xA;~/bin/rmrf       -&amp;gt; ~/dotfiles/bin/rmrf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Machine-specific overrides — via source&lt;/h2&gt; &#xA;&lt;p&gt;One way to have local machine-specific settings that override the global repository settings is to use the &#39;source&#39; feature available in some file types. For example, ~/.bashrc can contain:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Pull in the global settings&#xA;[ -f ~/dotfiles/.bashrc ] &amp;amp;&amp;amp; source ~/dotfiles/.bashrc&#xA;&#xA;# Override the global settings for this specific machine&#xA;export TERM=xtermc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DeeDot &lt;a href=&#34;https://github.com/DeeNewcum/deedot/raw/f0e7bfcef3344eb4dc05f95f223aafc73cb9d11c/deedot#L129-136&#34;&gt;knows about each file type&lt;/a&gt;, and will suggest the appropriate &#39;source&#39; line.&lt;/p&gt; &#xA;&lt;h2&gt;Machine-specific overrides — via text substitution&lt;/h2&gt; &#xA;&lt;p&gt;For files that don&#39;t have &#39;source&#39; capability, text substitution is available as a fallback.&lt;/p&gt; &#xA;&lt;p&gt;For example, DeeDot will update the section of ~/.ssh/config every time it&#39;s run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;######## MODIFICATIONS HERE WILL BE OVERWRITTEN BY CONTENTS OF: ~/dotfiles/.ssh/config.subst ########&#xA;Host github.com&#xA;    User git&#xA;    IdentityFile ~/.ssh/github.priv&#xA;######## END SUBSTITUTION FROM: ~/dotfiles/.ssh/config.subst ########&#xA;&#xA;Host webstaging.work.com&#xA;    User my-username&#xA;&#xA;# ... a bunch of other private stuff that I don&#39;t want to make available on the public repository.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DeeDot can also do variable interpolation for environment variables, when in text-substitution mode. For example, in .gitconfig.subst:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[core]&#xA;    # global gitignore settings&#xA;    excludesfile = &amp;lt;&amp;lt;$HOME&amp;gt;&amp;gt;/.gitignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Minimal requirements&lt;/h2&gt; &#xA;&lt;p&gt;DeeDot requires only Perl, and doesn&#39;t need any extra modules. It is designed to run on as many Un*xes as possible. It has been used regularly on various versions of Solaris, AIX, and Linux.&lt;/p&gt; &#xA;&lt;h2&gt;Examples of DeeDot in use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DeeNewcum/dotfiles&#34;&gt;my personal config files are here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(if you use DeeDot and have a public repo, please contact me if I can list it here)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Similar projects&lt;/h2&gt; &#xA;&lt;p&gt;A literature review was done while writing this. The following projects are those that inspired this, or are recommended as alternatives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.inductiveload.com/posts/basic-use-of-gnu-stowxstow/&#34;&gt;GNU stow&lt;/a&gt; — though written for other purposes, it does symlink jujitsu, so it works well for this &lt;a href=&#34;https://github.com/aspiers/shell-env&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;https://github.com/chrra/dotfiles&#34;&gt;[2]&lt;/a&gt; &lt;a href=&#34;https://github.com/jmdeldin/dotfiles&#34;&gt;[3]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docwhat/homedir&#34;&gt;homedir&lt;/a&gt; by Christian Höltje &lt;a href=&#34;https://github.com/willnorris/homedir-packages&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;https://github.com/docwhat/homedir-examples&#34;&gt;[2]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pypi.python.org/pypi/dotfiles&#34;&gt;dotfiles&lt;/a&gt; by Jon Bernard&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jean-francois.richard.name/ghh/&#34;&gt;git-home-history&lt;/a&gt; by Jean-Francois Richard&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/technicalpickles/homesick&#34;&gt;homesick&lt;/a&gt; by Josh Nichols &lt;a href=&#34;https://github.com/technicalpickles/dotpickles&#34;&gt;[1]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://peterodding.com/code/python/sync-dotfiles/&#34;&gt;sync-dotfiles&lt;/a&gt; by Peter Odding&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.steve.org.uk/poppa_s_got_a_brand_new_bang_.html&#34;&gt;dotfile-manager&lt;/a&gt; &lt;a href=&#34;http://repository.steve.org.uk/cgi-bin/hgwebdir.cgi/dotfiles/file/adf1e61952a0&#34;&gt;[1]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bartman/dot-files&#34;&gt;dot-files&lt;/a&gt; by Bart Trojanowski&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://git-home.chezwam.org/&#34;&gt;git-home&lt;/a&gt; — dead?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EvanPurkhiser/dots&#34;&gt;dots&lt;/a&gt; by Evan Purkhiser&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>