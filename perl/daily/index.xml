<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-04T01:42:03Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BobErnst/Weather-Com</title>
    <updated>2023-02-04T01:42:03Z</updated>
    <id>tag:github.com,2023-02-04:/BobErnst/Weather-Com</id>
    <link href="https://github.com/BobErnst/Weather-Com" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Release history of Weather-Com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Weather-Com version 0.5&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction:&lt;/h2&gt; &#xA;&lt;p&gt;Weather-Com is meant to be a module suite enabling the perl programmer to access weather information as provided by weather.com&#39;s XOAP interface.&lt;/p&gt; &#xA;&lt;p&gt;This interface is a kind of HTTP-GET/XMLResponse API (not really a WebService). They also provide an SDK containing implementation guides, weather icons in several sizes, &#39;The Weather Channel&#39; logos, etc.&lt;/p&gt; &#xA;&lt;p&gt;By this XOAP API they provide lots of information - not only the current conditions like other weather services do, but also up to 10 days of forecast containing most information one could need, e.g. the time of sunrise and sunset, the longitude and latitude of the location, data precompiled either in the US system or in the metric system, etc.&lt;/p&gt; &#xA;&lt;p&gt;Up from version 0.4 this module contains localization support. That is, textual weather data provided by weather.com (wind directions, current conditions descriptions, uv index descriptions, moon phases, etc.) can be translated into your favourite language - if someone did the translation.&lt;/p&gt; &#xA;&lt;p&gt;For each language there has to be a language package (e.g. Weather::Com::L10N::de for German). If there are new languages available that are not already included in this release, you&#39;ll find them on my support webpage (&lt;a href=&#34;http://www.schnuecker.org/weather-com&#34;&gt;http://www.schnuecker.org/weather-com&lt;/a&gt;). If you don&#39;t find your prefered language, feel free to build your own language pack and send it to me. I&#39;ll then put it on my support page and it will be part of the next release.&lt;/p&gt; &#xA;&lt;p&gt;Up from version 0.5 there is &#39;dynamic language support&#39;. That is, you can provide a language tag (e.g. &#39;de_DE&#39;) to a method returning textual information and the returned text than is not in the default language you defined while creating your Weather::Com::Finder instance but in the language you requested with your method call.&lt;/p&gt; &#xA;&lt;p&gt;To use the weather.com&#39;s service you have to register first (&lt;a href=&#34;http://www.weather.com/services/xmloap.html&#34;&gt;http://www.weather.com/services/xmloap.html&lt;/a&gt;), but&#39;s for free. You&#39;ll be send an email containing your &#39;partner id&#39;, a license key and a link where to download the SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Components of this module:&lt;/h2&gt; &#xA;&lt;p&gt;This module consists of several parts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Weather::Com::Base - the low level API&lt;/li&gt; &#xA; &lt;li&gt;Weather::Com::Cached - implements the caching rules from weather.com&lt;/li&gt; &#xA; &lt;li&gt;Weather::Com::Simple - high level wrapper around the API providing the same interace as Weather::Underground&lt;/li&gt; &#xA; &lt;li&gt;Weather::Com::Finder - The entrance point to the main high level interface.&lt;/li&gt; &#xA; &lt;li&gt;weather.pl - a sample console program using Weather::Com::Simple&lt;/li&gt; &#xA; &lt;li&gt;weather_ext.pl - a sample console program using the new high level interface&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Usually you should always use one of the high level interfaces as parsing the hash structure returned by Weather::Com::Base and Weather::Com::Cached is not self-explanatory.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to use the low level interface directly, please use Weather::Com::Cached instead of Weather::Com::Base to be sure to have the right caching rules implemented. You should only use Weather::Com::Base directly, if you plan to implement other caching mechanisms, e.g. a database driven one instead of the file- and &#39;Storable-&#39; based one that is used in Weather::Com::Cached.&lt;/p&gt; &#xA;&lt;p&gt;If you want to implement another caching package for Weather::Com please contact the author of this module and tell him... There&#39;s no need to to the same work twice. Same applies for other packages to be build around the above ones.&lt;/p&gt;</summary>
  </entry>
</feed>