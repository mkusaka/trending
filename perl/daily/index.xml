<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-10T01:49:52Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>binary-com/perl-WebService-Async-SmartyStreets</title>
    <updated>2022-06-10T01:49:52Z</updated>
    <id>tag:github.com,2022-06-10:/binary-com/perl-WebService-Async-SmartyStreets</id>
    <link href="https://github.com/binary-com/perl-WebService-Async-SmartyStreets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Address lookup and verification API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;WebService::Async::SmartyStreets::Address - parses the response from SmartyStreets API&lt;/p&gt; &#xA;&lt;h1&gt;VERSION&lt;/h1&gt; &#xA;&lt;p&gt;version 0.001&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use WebService::Async::SmartyStreets::Address;&#xA;# Mocking a simple response from SmartyStreets API and parses it with WebService::Async::SmartyStreets::Address&#xA;my $response = WebService::Async::SmartyStreets::Address-&amp;gt;new(&#xA;        metadata =&amp;gt; {&#xA;        latitude =&amp;gt; 101.2131,&#xA;        longitude =&amp;gt; 180.1223,&#xA;        geocode_precision =&amp;gt; &#34;Premise&#34;,&#xA;    },&#xA;    analysis =&amp;gt; {&#xA;        verification_status =&amp;gt; &#34;Partial&#34;,&#xA;        address_precision =&amp;gt; &#34;Premise&#34;,&#xA;    });&#xA;# Accessing the attributes&#xA;print ($response-&amp;gt;status);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;This module parses the response by SmartyStreets API into an object to access them.&lt;/p&gt; &#xA;&lt;h2&gt;Construction&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;WebService::Async::SmartyStreets::Address-&amp;gt;new(&#xA;    input_id =&amp;gt; 12345,&#xA;    organization =&amp;gt; &#39;Beenary&#39;,&#xA;    metadata =&amp;gt; {&#xA;        latitude =&amp;gt; 101.2131,&#xA;        longitude =&amp;gt; 180.1223,&#xA;        geocode_precision =&amp;gt; &#34;Premise&#34;,&#xA;    },&#xA;    analysis =&amp;gt; {&#xA;        verification_status =&amp;gt; &#34;Partial&#34;,&#xA;        address_precision =&amp;gt; &#34;Premise&#34;,&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample SmartyStreets API response&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;[&#xA;  {&#xA;    &#34;address1&#34;: &#34;Hainichener Str. 64&#34;,&#xA;    &#34;address2&#34;: &#34;09599 Freiberg&#34;,&#xA;    &#34;components&#34;: {&#xA;      &#34;administrative_area&#34;: &#34;Sachsen&#34;,&#xA;      &#34;sub_administrative_area&#34;: &#34;Fr√ºher: Direktionsbezirk Chemnitz&#34;,&#xA;      &#34;country_iso_3&#34;: &#34;DEU&#34;,&#xA;      &#34;locality&#34;: &#34;Freiberg&#34;,&#xA;      &#34;postal_code&#34;: &#34;09599&#34;,&#xA;      &#34;postal_code_short&#34;: &#34;09599&#34;,&#xA;      &#34;premise&#34;: &#34;64&#34;,&#xA;      &#34;premise_number&#34;: &#34;64&#34;,&#xA;      &#34;thoroughfare&#34;: &#34;Hainichener Str.&#34;,&#xA;      &#34;thoroughfare_name&#34;: &#34;Hainichenerstr.&#34;,&#xA;      &#34;thoroughfare_trailing_type&#34;: &#34;Str.&#34;&#xA;    },&#xA;    &#34;metadata&#34;: {&#xA;      &#34;latitude&#34;: 50.92221,&#xA;      &#34;longitude&#34;: 13.32259,&#xA;      &#34;geocode_precision&#34;: &#34;Premise&#34;,&#xA;      &#34;max_geocode_precision&#34;: &#34;DeliveryPoint&#34;,&#xA;      &#34;address_format&#34;: &#34;thoroughfare premise|postal_code locality&#34;&#xA;    },&#xA;    &#34;analysis&#34;: {&#xA;      &#34;verification_status&#34;: &#34;Verified&#34;,&#xA;      &#34;address_precision&#34;: &#34;Premise&#34;,&#xA;      &#34;max_address_precision&#34;: &#34;DeliveryPoint&#34;&#xA;    }&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Attributes&lt;/h1&gt; &#xA;&lt;p&gt;All attributes that is parsed includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;input_id&lt;/li&gt; &#xA; &lt;li&gt;organization&lt;/li&gt; &#xA; &lt;li&gt;latitude&lt;/li&gt; &#xA; &lt;li&gt;longitude&lt;/li&gt; &#xA; &lt;li&gt;geocode_precision&lt;/li&gt; &#xA; &lt;li&gt;max_geocode_precision&lt;/li&gt; &#xA; &lt;li&gt;address_format&lt;/li&gt; &#xA; &lt;li&gt;verification_status&lt;/li&gt; &#xA; &lt;li&gt;address_precision&lt;/li&gt; &#xA; &lt;li&gt;max_address_precision&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about the attributes, click &lt;a href=&#34;https://smartystreets.com/docs/cloud/international-street-api&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Methods&lt;/h1&gt; &#xA;&lt;h2&gt;status_at_least&lt;/h2&gt; &#xA;&lt;p&gt;Checks if the returned response at least hits a certain level (in terms of score).&lt;/p&gt; &#xA;&lt;h2&gt;accuracy_at_least&lt;/h2&gt; &#xA;&lt;p&gt;Checks if the returned response at least hits a certain accuracy (in terms of score). Instantly returns 0 if the status is lower than &#39;partial&#39;.&lt;/p&gt; &#xA;&lt;h1&gt;Attributes&lt;/h1&gt; &#xA;&lt;h2&gt;input_id&lt;/h2&gt; &#xA;&lt;p&gt;Returns the input_id parsed.&lt;/p&gt; &#xA;&lt;h2&gt;organization&lt;/h2&gt; &#xA;&lt;p&gt;Returns the organization parsed.&lt;/p&gt; &#xA;&lt;h2&gt;latitude&lt;/h2&gt; &#xA;&lt;p&gt;Returns the latitude parsed.&lt;/p&gt; &#xA;&lt;h2&gt;longitude&lt;/h2&gt; &#xA;&lt;p&gt;Returns the latitude parsed.&lt;/p&gt; &#xA;&lt;h2&gt;geocode_precision&lt;/h2&gt; &#xA;&lt;p&gt;Returns the geocode_precision parsed.&lt;/p&gt; &#xA;&lt;h2&gt;max_geocode_precision&lt;/h2&gt; &#xA;&lt;p&gt;Returns the max_geocode_precision parsed.&lt;/p&gt; &#xA;&lt;h2&gt;address_format&lt;/h2&gt; &#xA;&lt;p&gt;Returns the value of address_format parsed.&lt;/p&gt; &#xA;&lt;h2&gt;status&lt;/h2&gt; &#xA;&lt;p&gt;Returns the value of verification_status parsed.&lt;/p&gt; &#xA;&lt;p&gt;The value returned should be either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;none&lt;/li&gt; &#xA; &lt;li&gt;ambiguous&lt;/li&gt; &#xA; &lt;li&gt;partial&lt;/li&gt; &#xA; &lt;li&gt;verified&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;address_precision&lt;/h2&gt; &#xA;&lt;p&gt;Returns the value of address_precision parsed.&lt;/p&gt; &#xA;&lt;h2&gt;max_address_precision&lt;/h2&gt; &#xA;&lt;p&gt;Returns the value of max_address_precision parsed.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;WebService::Async::SmartyStreets;&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $loop = IO::Async::Loop-&amp;gt;new;&#xA;$loop-&amp;gt;add(&#xA;    my $ss = WebService::Async::SmartyStreets-&amp;gt;new(&#xA;        # International token&#xA;        auth_id =&amp;gt; &#39;...&#39;,&#xA;        token =&amp;gt; &#39;...&#39;,&#xA;        api_choice =&amp;gt; &#39;...&#39;,&#xA;    )&#xA;);&#xA;async sub {&#xA;    my $addr = await $ss-&amp;gt;verify(&#xA;        # insert address here&#xA;    );&#xA;}-&amp;gt;get;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;This class calls the SmartyStreets API and parse the response to &lt;code&gt;WebService::Async::SmartyStreets::Address&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;verify&lt;/h2&gt; &#xA;&lt;p&gt;Makes connection to SmartyStreets API and parses the response into &lt;code&gt;WebService::Async::SmartyStreets::Address&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Takes the following named parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;args - address parameters in hash (See &lt;code&gt;WebService::Async::SmartyStreets/verify_international&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;args consists of the following parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;country - country &lt;em&gt;[COMPULSORY]&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;address1 - address line 1&lt;/li&gt; &#xA; &lt;li&gt;address2 - address line 2&lt;/li&gt; &#xA; &lt;li&gt;organization - name of organization (usually building names)&lt;/li&gt; &#xA; &lt;li&gt;locality - city&lt;/li&gt; &#xA; &lt;li&gt;administrative_area - state&lt;/li&gt; &#xA; &lt;li&gt;postal_code - post code&lt;/li&gt; &#xA; &lt;li&gt;geocode - true or false&lt;/li&gt; &#xA; &lt;li&gt;api_choice - &lt;em&gt;[OPTIONAL]&lt;/em&gt; will overide the api_choice in config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;get_decoded_data&lt;/h2&gt; &#xA;&lt;p&gt;Parses the response give by SmartyStreets&lt;/p&gt; &#xA;&lt;p&gt;More information of the resposne can be seen in &lt;a href=&#34;https://smartystreets.com/docs/cloud/international-street-api&#34;&gt;SmartyStreets Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns an arrayref of hashrefs which the keys corresponds to &lt;code&gt;WebService::Async::SmartyStreets::Address&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;configure&lt;/h2&gt; &#xA;&lt;p&gt;configures the class with auth_id and token.&lt;/p&gt; &#xA;&lt;h2&gt;auth_id&lt;/h2&gt; &#xA;&lt;p&gt;Returns auth_id.&lt;/p&gt; &#xA;&lt;h2&gt;token&lt;/h2&gt; &#xA;&lt;p&gt;Returns token.&lt;/p&gt; &#xA;&lt;h2&gt;api_choice&lt;/h2&gt; &#xA;&lt;p&gt;Returns api_choice.&lt;/p&gt; &#xA;&lt;h2&gt;ua&lt;/h2&gt; &#xA;&lt;p&gt;Accessor for the &lt;code&gt;Net::Async::HTTP&lt;/code&gt; instance which will be used for SmartyStreets API requests.&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Binary.com&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-Format-Util</title>
    <updated>2022-06-10T01:49:52Z</updated>
    <id>tag:github.com,2022-06-10:/binary-com/perl-Format-Util</id>
    <link href="https://github.com/binary-com/perl-Format-Util" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Format::Util&lt;/strong&gt; - Miscellaneous routines to do with manipulating on Numbers and Strings&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-Format-Util&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-Format-Util.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-Format-Util&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-Format-Util/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/binary-com/perl-Format-Util&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/binary-com/perl-Format-Util.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SYNOPSIS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Format::Util::Strings qw( defang defang_lite set_selected_item )&#xA;use Format::Util::Numbers qw( commas to_monetary_number_format roundnear )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;METHODS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;defang($string)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Removes potentially dangerous characters from input strings.&lt;/p&gt; &lt;p&gt;You should probably be using Untaint.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;defang_lite($string)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Removes potentially dangerous characters from input strings.&lt;/p&gt; &lt;p&gt;You should probably be using Untaint.&lt;/p&gt; &lt;p&gt;defang_lite is a lighter version that is not so restrictive as defang&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;set_selected_item($selecteditem,$optionlist)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Sets the selected item in an &lt;option&gt; list.&lt;/option&gt;&lt;/p&gt; &lt;p&gt;Params :&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;$selecteditem : the value of the item (usually taken from %input)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;$optionlist : The option list, as either an HTML string or a hash ref.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Returns : If hash ref given, 1 if selected item is set, false otherwise&lt;/p&gt; &lt;p&gt;If HTML given, the altered HTML&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;commas($number, $decimal_point)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Produce a more human readbale number with a provided number of decimal points&lt;/p&gt; &lt;p&gt;commas(12345.679, 1) =&amp;gt; 12,345.7&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;to_monetary_number_format($number,$remove_decimal_for_ints)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Produce a nice human readable number which looks like a currency&lt;/p&gt; &lt;p&gt;to_monetary_number_format(123456789) =&amp;gt; 123,456,789.00&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;roundnear($target, $input)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Round a number near the precision of the supplied one.&lt;/p&gt; &lt;p&gt;roundnear( 0.01, 12345.678) =&amp;gt; 12345.68&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;AUTHOR&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;binary.com, C&amp;lt;&amp;lt; &#xA; &lt;rakesh at binary.com&gt;&#xA;   &amp;gt;&amp;gt;&#xA; &lt;/rakesh&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SUPPORT&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find documentation for this module with the perldoc command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perldoc Math::Util::CalculatedValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also look for information at:&lt;/p&gt; &#xA;&lt;p&gt;RT: CPAN&#39;s request tracker (report bugs here)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rt.cpan.org/NoAuth/Bugs.html?Dist=Format-Util&#34;&gt;http://rt.cpan.org/NoAuth/Bugs.html?Dist=Format-Util&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AnnoCPAN: Annotated CPAN documentation&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://annocpan.org/dist/Format-Util&#34;&gt;http://annocpan.org/dist/Format-Util&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CPAN Ratings&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cpanratings.perl.org/d/Format-Util&#34;&gt;http://cpanratings.perl.org/d/Format-Util&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Search CPAN&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://search.cpan.org/dist/Format-Util/&#34;&gt;http://search.cpan.org/dist/Format-Util/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manakai/sarze</title>
    <updated>2022-06-10T01:49:52Z</updated>
    <id>tag:github.com,2022-06-10:/manakai/sarze</id>
    <link href="https://github.com/manakai/sarze" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;Sarze - An HTTP server&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;XXX&lt;/p&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;B&#xA; &lt;sarze&gt;&#xA;   is an HTTP server in Perl for L&#xA;  &lt;anyevent&gt;&#xA;   -aware applications providing L&#xA;   &lt;promise&gt;&#xA;    -based API.&#xA;   &lt;/promise&gt;&#xA;  &lt;/anyevent&gt;&#xA; &lt;/sarze&gt;&lt;/p&gt; &#xA;&lt;p&gt;The C&#xA; &lt;sarze&gt;&#xA;   module has the server class.&#xA; &lt;/sarze&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 METHODS&lt;/p&gt; &#xA;&lt;p&gt;There are following methods:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $p = Sarze-&amp;gt;run (...)&lt;/p&gt; &#xA;&lt;p&gt;Run the server and return a promise that is resolved when the server is stopped.&lt;/p&gt; &#xA;&lt;p&gt;XXX&lt;/p&gt; &#xA;&lt;p&gt;=item $p = Sarze-&amp;gt;start (...)&lt;/p&gt; &#xA;&lt;p&gt;Run the server and return a promise that is resolved with the server object when the server is ready to accept connections.&lt;/p&gt; &#xA;&lt;p&gt;XXX&lt;/p&gt; &#xA;&lt;p&gt;$p = $server-&amp;gt;stop&lt;/p&gt; &#xA;&lt;p&gt;Schedule the server to stop and return a promise that is resolved when the server is stopped.&lt;/p&gt; &#xA;&lt;p&gt;XXX&lt;/p&gt; &#xA;&lt;p&gt;$p = $server-&amp;gt;completed&lt;/p&gt; &#xA;&lt;p&gt;XXX Promise must be resolved with an object that is XXX&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 OPTIONS&lt;/p&gt; &#xA;&lt;p&gt;Following options can be specified to C&#xA; &lt;start&gt;&#xA;   and C&#xA;  &lt;run&gt;&#xA;    methods:&#xA;  &lt;/run&gt;&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item hostports =&amp;gt; [[$host, $port], ...] (required)&lt;/p&gt; &#xA;&lt;p&gt;An array reference of zero or more host/port pair array references. A host/port pair must be either a pair of IP address and port (for TCP socket) or a pair of string C&#xA; &lt;unix /&gt; and path to the file (for UNIX domain socket).&lt;/p&gt; &#xA;&lt;p&gt;=item psgi_file_name&lt;/p&gt; &#xA;&lt;p&gt;XXX&lt;/p&gt; &#xA;&lt;p&gt;If the PSGI script file C&amp;lt;psgi_file_name&amp;gt; is not found, or does not return a code reference, the promise returned by the C&#xA; &lt;start&gt;&#xA;   or C&#xA;  &lt;run&gt;&#xA;    method is to be rejected with an error.&#xA;  &lt;/run&gt;&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;If this option is specified, the C&#xA; &lt;eval&gt;&#xA;   option must not be specified.&#xA; &lt;/eval&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item eval&lt;/p&gt; &#xA;&lt;p&gt;XXX&lt;/p&gt; &#xA;&lt;p&gt;If the code throws, or if the code does not define the C&amp;lt;&amp;amp;main::psgi_app&amp;gt;, the promise returned by the C&#xA; &lt;start&gt;&#xA;   or C&#xA;  &lt;run&gt;&#xA;    method is to be rejected with an error.&#xA;  &lt;/run&gt;&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;If this option is specified, the C&amp;lt;psgi_file_name&amp;gt; option must not be specified.&lt;/p&gt; &#xA;&lt;p&gt;=item [DEPRECATED] worker_background_class =&amp;gt; $class&lt;/p&gt; &#xA;&lt;p&gt;Specify the Perl class package name of the worker background class. If omitted, no worker background class is used. See L&amp;lt;/WORKER BACKGROUND CLASS&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use of this option is B&#xA; &lt;deprecated&gt;&#xA;  .&#xA; &lt;/deprecated&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item worker_state_class =&amp;gt; $class,&lt;/p&gt; &#xA;&lt;p&gt;Specify the Perl class package name of the worker state class. If omitted, no worker state class is used. See L&amp;lt;/WORKER STATE CLASS&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;=item worker_state_params =&amp;gt; $value&lt;/p&gt; &#xA;&lt;p&gt;Specify a C&amp;lt;worker_state_class&amp;gt; dependent value, typically a hash reference representing parameters. If omitted, defaulted to C&#xA; &lt;undef&gt;&#xA;  . A copy of this value is accessible from the worker state class&#39;s C&#xA;  &lt;start&gt;&#xA;    method. See L&amp;lt;/WORKER STATE CLASS&amp;gt;. As a clone of the value is transferred to forked worker processes, it must not contain any blessed object.&#xA;  &lt;/start&gt;&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item max_worker_count =&amp;gt; $non_negative_integer (Default: 3)&lt;/p&gt; &#xA;&lt;p&gt;Specify the number of the concurrent HTTP worker processes.&lt;/p&gt; &#xA;&lt;p&gt;=item max_counts =&amp;gt; {custom =&amp;gt; $non_negative_integer} (Default: 0)&lt;/p&gt; &#xA;&lt;p&gt;Specify the number of the concurrent custom worker processes.&lt;/p&gt; &#xA;&lt;p&gt;=item connections_per_worker&lt;/p&gt; &#xA;&lt;p&gt;XXX&lt;/p&gt; &#xA;&lt;p&gt;=item seconds_per_worker =&amp;gt; $seconds (default: 60*10)&lt;/p&gt; &#xA;&lt;p&gt;After the seconds specified by this option has elapsed, a worker is switched to the shutdowning mode, where no incoming request is accepted anymore and any running handlers are expected to be stopped as far as possible.&lt;/p&gt; &#xA;&lt;p&gt;=item shutdown_timeout =&amp;gt; $seconds (default: 60*1)&lt;/p&gt; &#xA;&lt;p&gt;After the seconds specified by this option has elapsed from it was switched to the shutdowning mode, a worker is uncleanly terminated even when there is a running handler.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 SERVER APPLICATION&lt;/p&gt; &#xA;&lt;p&gt;Sarze is a preforking HTTP server. It creates worker processes which handle coming HTTP connections.&lt;/p&gt; &#xA;&lt;p&gt;Sarze first loads the server code, as specified by C&#xA; &lt;eval&gt;&#xA;   or C&amp;lt;psgi_file_name&amp;gt; option, and then forks that as workers. This means that any variable value initialized at loading is shared among the workers executed by a server. For example,&#xA; &lt;/eval&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bad example!&lt;/h2&gt; &#xA;&lt;p&gt;eval =&amp;gt; q{ my $number = rand; ## This line is executed only once. return sub { return [200, [], [$number]]; }; },&lt;/p&gt; &#xA;&lt;p&gt;... always returns the same number.&lt;/p&gt; &#xA;&lt;p&gt;=head1 WORKERS&lt;/p&gt; &#xA;&lt;p&gt;A server instance consist of multiple worker processes. There are two types of workers:&lt;/p&gt; &#xA;&lt;p&gt;HTTP worker - An HTTP worker is expected to handle incoming HTTP connections. It can also handle any other application-specific jobs coming from application-dependent sources.&lt;/p&gt; &#xA;&lt;p&gt;Custom worker - A custom worker is expected to handle any application-specific jobs coming from application-dependent sources. The worker state class of an application that enables custom workers must implement the C&#xA; &lt;custom&gt;&#xA;   method.&#xA; &lt;/custom&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 WORKER STATE CLASS&lt;/p&gt; &#xA;&lt;p&gt;When a worker process is created, the B&#xA; &lt;worker state class&gt;&#xA;  , as specified by the C&amp;lt;worker_state_class&amp;gt;, is instantiated.&#xA; &lt;/worker&gt;&lt;/p&gt; &#xA;&lt;p&gt;The class, if any, must be loaded as part of the server. That is, the code specified by the C&#xA; &lt;eval&gt;&#xA;   or C&amp;lt;psgi_file_name&amp;gt; option must define the class either directly or by C&#xA;  &lt;require&gt;&#xA;   ing or C&#xA;   &lt;use&gt;&#xA;    ing other module.&#xA;   &lt;/use&gt;&#xA;  &lt;/require&gt;&#xA; &lt;/eval&gt;&lt;/p&gt; &#xA;&lt;p&gt;The class must have the B&amp;lt;C&#xA; &lt;start&gt;&#xA;  &amp;gt; method. It is invoked when a worker process is created, before accepting connections. The method is invoked with arguments, given as following key/value pairs:&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item params =&amp;gt; $value&lt;/p&gt; &#xA;&lt;p&gt;The value specified by the C&amp;lt;worker_state_params&amp;gt; option.&lt;/p&gt; &#xA;&lt;p&gt;=item signal =&amp;gt; $signal&lt;/p&gt; &#xA;&lt;p&gt;An L&#xA; &lt;abortsignal&gt;&#xA;   object. The signal is aborted when the worker process is shutting down.&#xA; &lt;/abortsignal&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item state =&amp;gt; $worker_state&lt;/p&gt; &#xA;&lt;p&gt;The worker process state object of the worker process. See L&amp;lt;/WORKER PROCESS STATE OBJECT&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;The C&#xA; &lt;start&gt;&#xA;   method must return an array reference of two items: a worker state class dependent value and a promise (e.g. L&#xA;  &lt;promise&gt;&#xA;   ). The method can instead return a promise, which is to be resolved with an array reference.&#xA;  &lt;/promise&gt;&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;As no connection is handled before the C&#xA; &lt;start&gt;&#xA;   method is returned (and the returned promise is resolved), the method can be used to run an application-dependent per-worker initialization steps.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the C&#xA; &lt;start&gt;&#xA;   method throws or the returned promise is rejected, the worker process is terminated immediately.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first (index 0) item of the array reference returned by the C&#xA; &lt;start&gt;&#xA;   method is set to the C&#xA;  &lt;data&gt; method&#39;s value of the worker process state object, such that it is accessible from PSGI application invocations.&lt;/data&gt;&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;The C&#xA; &lt;signal&gt;&#xA;   is signaled just before the worker is shutting down, after the completion of handling of all requests. This can be used to run an application-dependent per-worker cleanup steps.&#xA; &lt;/signal&gt;&lt;/p&gt; &#xA;&lt;p&gt;The second (index 1) item of the array reference returned by the C&#xA; &lt;start&gt;&#xA;   method must be resolved when the application is ready to shutdown the worker process. The worker process delays the termination until the promise is resolved. Note that the promise can be resolved even before the C&#xA;  &lt;signal&gt;&#xA;   &#39;s invocation in case there is no additional cleanup steps.&#xA;  &lt;/signal&gt;&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;The C&#xA; &lt;start&gt;&#xA;   method is invoked before accepting any HTTP connections or invoking the C&#xA;  &lt;custom&gt;&#xA;    method.&#xA;  &lt;/custom&gt;&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;The C&#xA; &lt;custom&gt;&#xA;   method is expect to run an application-dependent custom worker steps. It is invoked only once when a custom worker process is ready. It is invoked with an argument: The worker process state object of the worker process (See L&amp;lt;/WORKER PROCESS STATE OBJECT&amp;gt;). The method may or may not return a promise. If it returns a promise, it may resolve the promise at any time. It should not throw. If it returns a promise, it should not be rejected. Note that when the method returns (or the promise is resolved) is irrelevant to the lifecycle of the custom worker process.&#xA; &lt;/custom&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item WORKER PROCESS STATE OBJECT&lt;/p&gt; &#xA;&lt;p&gt;A worker process has a single B&#xA; &lt;worker process state object&gt;&#xA;  . The C&#xA;  &lt;start&gt;&#xA;    method of a worker state class is invoked with C&#xA;   &lt;state&gt;&#xA;     option. A PSGI application is invoked with C&amp;lt;manakai.server.state&amp;gt; in the PSGI environment (see manakai PSGI extensions specification &#xA;    &lt;a href=&#34;https://wiki.suikawiki.org/n/manakai%20PSGI%20extensions&#34;&gt;https://wiki.suikawiki.org/n/manakai%20PSGI%20extensions&lt;/a&gt; for details). The application can access to per worker process states and can control the worker process through this object. It has following methods:&#xA;   &lt;/state&gt;&#xA;  &lt;/start&gt;&#xA; &lt;/worker&gt;&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $value = $state-&amp;gt;data&lt;/p&gt; &#xA;&lt;p&gt;An application-specific value in the array reference returned by the C&#xA; &lt;start&gt;&#xA;   method of the worker state class, defaulted to C&#xA;  &lt;undef&gt;&#xA;   . Though the value cannot be changed, by using a hash reference as the value, it can hold application specific states which can be get or set by the PSGI application.&#xA;  &lt;/undef&gt;&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $state-&amp;gt;abort ($reason?)&lt;/p&gt; &#xA;&lt;p&gt;Ask the worker process to terminate. The worker process then stops as soon as possible. If a non-C&#xA; &lt;undef&gt;&#xA;   argument is specified, it is the &#34;reason&#34; exception object of abortion.&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;This method should only be used in an exceptional situation, e.g. when the worker state class has detected a non-recoverable error.&lt;/p&gt; &#xA;&lt;p&gt;=item $state-&amp;gt;features-&amp;gt;{http}&lt;/p&gt; &#xA;&lt;p&gt;Returns whether it is an HTTP worker or not. Note that this flag is not initialized when the C&#xA; &lt;start&gt;&#xA;   method is invoked.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $state-&amp;gt;features-&amp;gt;{custom}&lt;/p&gt; &#xA;&lt;p&gt;Returns whether it is a custom worker or not. Note that this flag is not initialized when the C&#xA; &lt;start&gt;&#xA;   method is invoked.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 WORKER BACKGROUND CLASS&lt;/p&gt; &#xA;&lt;p&gt;B&#xA; &lt;deprecated&gt;&#xA;  . When a worker state class is specified, the worker background class cannot be used.&#xA; &lt;/deprecated&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a worker process is created, the B&#xA; &lt;worker background class&gt;&#xA;  , as specified by the C&amp;lt;worker_background_class&amp;gt; option, is instantiated.&#xA; &lt;/worker&gt;&lt;/p&gt; &#xA;&lt;p&gt;The class, if any, must be loaded as part of the server. That is, the code specified by the C&#xA; &lt;eval&gt;&#xA;   or C&amp;lt;psgi_file_name&amp;gt; option must define the class.&#xA; &lt;/eval&gt;&lt;/p&gt; &#xA;&lt;p&gt;The class must have the B&amp;lt;C&#xA; &lt;start&gt;&#xA;  &amp;gt; method. It is invoked when a worker process is created. It must return an object, which is referred to as B&#xA;  &lt;worker background object&gt;&#xA;   . It may instead return a promise (e.g. L&#xA;   &lt;promise&gt;&#xA;    ) object, which must be resolved with an object.&#xA;   &lt;/promise&gt;&#xA;  &lt;/worker&gt;&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;The C&#xA; &lt;start&gt;&#xA;   method can be used to run any per-worker initialization steps. The worker will not accept any connection until the method returns an object (directly or indirectly through a promise). The method can also used to dispatch &#34;background&#34; steps running concurrently with HTTP connection processing.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;A worker background object must have a C&#xA; &lt;stop&gt;&#xA;   method, which is invoked when the worker process is expected to be terminated. If there is any &#34;background&#34; steps, it should be terminated as soon as possible. This method might be invoked even when there are ongoing HTTP connections.&#xA; &lt;/stop&gt;&lt;/p&gt; &#xA;&lt;p&gt;A worker background object must have a C&#xA; &lt;completed&gt;&#xA;   method, which must return a promise object. The promise must not be resolved until the worker background object is ready to be discarded. After the promise is resolved and all HTTP connections have been closed, the worker process exits. This can also be used by the worker background object to ask the worker to not accept incoming connections anymore.&#xA; &lt;/completed&gt;&lt;/p&gt; &#xA;&lt;p&gt;A worker background object may have a C&#xA; &lt;destory&gt;&#xA;   method, which is invoked after all HTTP connections have been closed and the &#34;background&#34; steps have stopped and just before the termination of the worker process. This method can be used to run the shutdown steps for the worker process. It can return a promise object, which will delay the termination of the worker process until the resolution.&#xA; &lt;/destory&gt;&lt;/p&gt; &#xA;&lt;p&gt;A worker background object may have any other application specific methods.&lt;/p&gt; &#xA;&lt;p&gt;The worker background object of the worker process can be obtained from a PSGI application by invoking the C&#xA; &lt;background&gt;&#xA;   method of the C&amp;lt;manakai.server.state&amp;gt; object (see manakai PSGI extensions specification &#xA;  &lt;a href=&#34;https://wiki.suikawiki.org/n/manakai%20PSGI%20extensions&#34;&gt;https://wiki.suikawiki.org/n/manakai%20PSGI%20extensions&lt;/a&gt; for details) of the PSGI environment. If there is no worker background object, the C&#xA;  &lt;background&gt;&#xA;    method returns C&#xA;   &lt;undef&gt;&#xA;    .&#xA;   &lt;/undef&gt;&#xA;  &lt;/background&gt;&#xA; &lt;/background&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 SIGNALS&lt;/p&gt; &#xA;&lt;p&gt;While the Sarze server is running, it receives signals.&lt;/p&gt; &#xA;&lt;p&gt;When it receives one of C&#xA; &lt;sigint&gt;&#xA;  , C&#xA;  &lt;sigterm&gt;&#xA;   , or C&#xA;   &lt;sigquit&gt;&#xA;    , it stops (as if the C&#xA;    &lt;stop&gt;&#xA;      method were invoked).&#xA;    &lt;/stop&gt;&#xA;   &lt;/sigquit&gt;&#xA;  &lt;/sigterm&gt;&#xA; &lt;/sigint&gt;&lt;/p&gt; &#xA;&lt;p&gt;It might not immediately terminate the server when it is still in the process of generating and sending a response. Once it receives a signal, it uninstalls the signal handler. By sending the second signal, which is processed by Perl&#39;s default handler, the entire application exits and Sarze&#39;s graceful termination process is aborted.&lt;/p&gt; &#xA;&lt;p&gt;=head1 DEPENDENCY&lt;/p&gt; &#xA;&lt;p&gt;The C&#xA; &lt;sarze&gt;&#xA;   module requires Perl 5.12 or later.&#xA; &lt;/sarze&gt;&lt;/p&gt; &#xA;&lt;p&gt;It requires modules L&lt;a href=&#34;AnyEvnet::Socket&#34;&gt;AnyEvnet::Socket&lt;/a&gt; and L&lt;a href=&#34;AnyEvent::Fork&#34;&gt;AnyEvent::Fork&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also requires following Perl modules (submodules of this Git repository): &lt;a href=&#34;https://github.com/wakaba/perl-promise&#34;&gt;https://github.com/wakaba/perl-promise&lt;/a&gt; (which has L&#xA; &lt;promise&gt;&#xA;  , L&#xA;  &lt;abortcontroller&gt;&#xA;   , and L&#xA;   &lt;abortsignal&gt;&#xA;    ), &#xA;    &lt;a href=&#34;https://github.com/manakai/perl-streams&#34;&gt;https://github.com/manakai/perl-streams&lt;/a&gt;, &#xA;    &lt;a href=&#34;https://github.com/manakai/perl-web-datetime&#34;&gt;https://github.com/manakai/perl-web-datetime&lt;/a&gt;, &#xA;    &lt;a href=&#34;https://github.com/manakai/perl-web-encodings&#34;&gt;https://github.com/manakai/perl-web-encodings&lt;/a&gt;, &#xA;    &lt;a href=&#34;https://github.com/manakai/perl-web-resource&#34;&gt;https://github.com/manakai/perl-web-resource&lt;/a&gt;, and &#xA;    &lt;a href=&#34;https://github.com/manakai/perl-web-url&#34;&gt;https://github.com/manakai/perl-web-url&lt;/a&gt;.&#xA;   &lt;/abortsignal&gt;&#xA;  &lt;/abortcontroller&gt;&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 HISTORY&lt;/p&gt; &#xA;&lt;p&gt;This module is available as a Git repository at &lt;a href=&#34;https://github.com/manakai/sarze&#34;&gt;https://github.com/manakai/sarze&lt;/a&gt;. It was transferred to the manakai project from &lt;a href=&#34;https://github.com/wakaba/sarze&#34;&gt;https://github.com/wakaba/sarze&lt;/a&gt; on 26 April 2022.&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2016-2022 Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
</feed>