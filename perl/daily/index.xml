<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-15T01:49:16Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>binary-com/perl-MooX-Role-Validatable</title>
    <updated>2022-08-15T01:49:16Z</updated>
    <id>tag:github.com,2022-08-15:/binary-com/perl-MooX-Role-Validatable</id>
    <link href="https://github.com/binary-com/perl-MooX-Role-Validatable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-MooX-Role-Validatable&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-MooX-Role-Validatable.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-MooX-Role-Validatable&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-MooX-Role-Validatable/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;MooseX::Role::Validatable - Role to add validation to a class&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;package MyClass;&#xA;&#xA;use Moose;&#xA;with &#39;MooseX::Role::Validatable&#39;;&#xA;&#xA;has &#39;attr1&#39; =&amp;gt; (is =&amp;gt; &#39;ro&#39;, lazy_build =&amp;gt; 1);&#xA;&#xA;sub _build_attr1 {&#xA;    my $self = shift;&#xA;&#xA;    # Note initialization errors&#xA;    $self-&amp;gt;add_errors( {&#xA;        message =&amp;gt; &#39;Error: blabla&#39;,&#xA;        message_to_client =&amp;gt; &#39;Something is wrong!&#39;&#xA;    } ) if &#39;blabla&#39;;&#xA;}&#xA;&#xA;sub _validate_some_other_errors { # _validate_*&#xA;    my $self = shift;&#xA;&#xA;    my @errors;&#xA;    push @errors, {&#xA;        message =&amp;gt; &#39;...&#39;,&#xA;        message_to_client =&amp;gt; &#39;...&#39;,&#xA;    };&#xA;&#xA;    return @errors;&#xA;}&#xA;&#xA;## use&#xA;my $ex = MyClass-&amp;gt;new();&#xA;&#xA;if (not $ex-&amp;gt;initialized_correctly) {&#xA;    my @errors = $ex-&amp;gt;all_init_errors();&#xA;    ...;    # We didn&#39;t even start with good data.&#xA;}&#xA;&#xA;if (not $ex-&amp;gt;confirm_validity) { # does not pass those _validate_*&#xA;    my @errors = $ex-&amp;gt;all_errors();&#xA;    ...;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;MooseX::Role::Validatable is a Moo/Moose role which provides a standard way to add validation to a class.&lt;/p&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;initialized_correctly&lt;/h2&gt; &#xA;&lt;p&gt;no error when init the object (no add_errors is called)&lt;/p&gt; &#xA;&lt;h2&gt;add_errors&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$self-&amp;gt;add_errors(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;add errors on those lazy attributes or sub BUILD&lt;/p&gt; &#xA;&lt;h2&gt;confirm_validity&lt;/h2&gt; &#xA;&lt;p&gt;run all those &lt;strong&gt;_validate_*&lt;/strong&gt; messages and returns true if no error found.&lt;/p&gt; &#xA;&lt;h2&gt;all_errors&lt;/h2&gt; &#xA;&lt;p&gt;An array of the errors currently noted. combined with &lt;strong&gt;all_init_errors&lt;/strong&gt; and &lt;strong&gt;all_validation_errors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;all errors including below methods are instance of error_class, default to &lt;a href=&#34;https://metacpan.org/pod/MooseX::Role::Validatable::Error&#34;&gt;MooseX::Role::Validatable::Error&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;all_init_errors&lt;/h2&gt; &#xA;&lt;p&gt;all errors on init&lt;/p&gt; &#xA;&lt;h2&gt;all_validation_errors&lt;/h2&gt; &#xA;&lt;p&gt;all errors on validation&lt;/p&gt; &#xA;&lt;h2&gt;all_errors_by_severity&lt;/h2&gt; &#xA;&lt;p&gt;order by severity&lt;/p&gt; &#xA;&lt;h2&gt;primary_validation_error&lt;/h2&gt; &#xA;&lt;p&gt;the first error of &lt;strong&gt;all_errors_by_severity&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;validation_methods&lt;/h2&gt; &#xA;&lt;p&gt;A list of all validation methods available on this object. This can be auto-generated from all methods which begin with &#34;_validate_&#34; which is especially helpful in devleoping new validations.&lt;/p&gt; &#xA;&lt;p&gt;You may wish to set this list directly on the object, if you create and validate a lot of static objects.&lt;/p&gt; &#xA;&lt;h2&gt;error_class&lt;/h2&gt; &#xA;&lt;p&gt;default to &lt;a href=&#34;https://metacpan.org/pod/MooseX::Role::Validatable::Error&#34;&gt;MooseX::Role::Validatable::Error&lt;/a&gt;, override by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;has &#39;+error_class&#39; =&amp;gt; (is =&amp;gt; &#39;ro&#39;, default =&amp;gt; sub { &#39;My::Validatable::Error&#39; });&#xA;&#xA;# or&#xA;-&amp;gt;new(error_class =&amp;gt; &#39;My::Validatable::Error&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Binary.com &lt;a href=&#34;mailto:fayland@binary.com&#34;&gt;fayland@binary.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;COPYRIGHT&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2014- Binary.com&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>DFHack/df-structures</title>
    <updated>2022-08-15T01:49:16Z</updated>
    <id>tag:github.com,2022-08-15:/DFHack/df-structures</id>
    <link href="https://github.com/DFHack/df-structures" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dwarf Fortress data structure descriptions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DF-structures&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DFHack/df-structures/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/DFHack/df-structures/workflows/Build/badge.svg?event=push&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DF-structures is the core information on which &lt;a href=&#34;https://github.com/DFHack/dfhack&#34;&gt;DFHack&lt;/a&gt; depends.&lt;/p&gt; &#xA;&lt;p&gt;For information on how to understand this format, see &lt;a href=&#34;https://raw.githubusercontent.com/DFHack/df-structures/master/SYNTAX.rst&#34;&gt;./SYNTAX.rst&lt;/a&gt;. For how to update for a new version of DF, see &lt;a href=&#34;https://raw.githubusercontent.com/DFHack/df-structures/master/how-to-update.rst&#34;&gt;./how-to-update.rst&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Originally dfhack used a file called &lt;code&gt;Memory.xml&lt;/code&gt; to describe data structures of the game. It explicitly listed addresses of known global variables, and offsets within structures to fields, not unlike the ini files used by Dwarf Therapist.&lt;/p&gt; &#xA;&lt;p&gt;However, as the number of known fields and objects grow, maintaining the explicit offset lists quickly becomes difficult, error prone, and inefficient.&lt;/p&gt; &#xA;&lt;p&gt;This format instead represents data structure layout purely via listing all fields in the correct order, exactly like a structure definition does in the C++ language itself. There is still a file with numeric data, but it only contains absolute addresses of global objects.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-WebService-Async-Segment</title>
    <updated>2022-08-15T01:49:16Z</updated>
    <id>tag:github.com,2022-08-15:/binary-com/perl-WebService-Async-Segment</id>
    <link href="https://github.com/binary-com/perl-WebService-Async-Segment" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unofficial support for segment.com API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;perl-WebService-Async-Segment&lt;/h1&gt; &#xA;&lt;p&gt;Unofficial support for segment.com API. It provides a &lt;a href=&#34;https://metacpan.org/pod/Future&#34;&gt;Future&lt;/a&gt;-based async wrapper for Segment HTTP API. Supports standard fields both in &lt;code&gt;snake_case&lt;/code&gt; and &lt;code&gt;camelCase&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Using&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;use WebService::Async::Segment;&#xA;use IO::Async::Loop;&#xA;&#xA;my $segment = WebService::Async::Segment-&amp;gt;new(&#xA;    write_key=&amp;gt;&#39;SOURCE_WRITE_KEY&#39;&#xA;);&#xA;&#xA;my $loop = IO::Async::Loop-&amp;gt;new;&#xA;$loop-&amp;gt;add($segment);&#xA;&#xA;my $customer = $segment-&amp;gt;new_customer(&#xA;    user_id =&amp;gt; &#39;some_id&#39;,&#xA;    traits =&amp;gt; {&#xA;        email =&amp;gt; &#39;xxx@example.com&#39;,&#xA;    }&#xA;);&#xA;&#xA;### API calls api call (non-blocking)&#xA;$customer-&amp;gt;identify();&#xA;$customer-&amp;gt;track( event =&amp;gt; &#39;buy&#39;, properties =&amp;gt; {...} );&#xA;&#xA;### API calls api call (blocking)&#xA;$customer-&amp;gt;identify()-&amp;gt;get;&#xA;$customer-&amp;gt;track( event =&amp;gt; &#39;buy&#39;, properties =&amp;gt; {...} )-&amp;gt;get;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Segment HTTP API accepts fields in camelCase only (e.g. &lt;code&gt;userId&lt;/code&gt; and &lt;code&gt;sentAt&lt;/code&gt;); the wrapper accepts these fields both in camelCase and snake_case (e.g. &lt;code&gt;user_id&lt;/code&gt; and &lt;code&gt;sent_at&lt;/code&gt;). Automatic conversion from snake_case to camelCase is performed on standard API fields only; custom fields are kept untouched. For exmaple:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$segment-&amp;gt;new_customer(&#xA;    user_id =&amp;gt; &#39;some_id&#39;,                     #standard field, will be converted to userId&#xA;    traits =&amp;gt; {&#xA;        first_name =&amp;gt; &#39;Matt&#39;,                 #standard field, will be converted to firstName&#xA;        my_company_attr =&amp;gt; &#39;custom field&#39;     #non-standard filed, will be sent without change&#xA;    }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please note that all api call subroutines (&lt;code&gt;WebService::Async::Segment::method_call&lt;/code&gt;, &lt;code&gt;WebService::Async::Segment::Customer::identify&lt;/code&gt; and &lt;code&gt;WebService::Async::Segment::Customer::track&lt;/code&gt;) are asynchronous, returning a &lt;a href=&#34;https://metacpan.org/pod/Future&#34;&gt;Future&lt;/a&gt; object instead of waiting for the tasks to be finished.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>