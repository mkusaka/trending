<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-19T01:36:39Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Flameeyes/nagios-plugins-flameeyes</title>
    <updated>2022-10-19T01:36:39Z</updated>
    <id>tag:github.com,2022-10-19:/Flameeyes/nagios-plugins-flameeyes</id>
    <link href="https://github.com/Flameeyes/nagios-plugins-flameeyes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flameeyes&#39;s custom Nagios/Icinga plugins&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flameeyes&#39;s custom Nagios/Icinga plugins&lt;/h1&gt; &#xA;&lt;p&gt;This repository has been created because I feel the need for more structure to push my personal Nagios plugins than just publishing them to a website, and because I feel that there is no reason why I should keep said plugins all by myself.&lt;/p&gt; &#xA;&lt;p&gt;Please feel free to fork and send pull request for any enhacement or fix you come up with.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Each plugin will provide its own license header to make it clear under which license it&#39;s released under. Most of them you&#39;ll see having a MIT license, which basically is an all-permissive license. If different licenses are used, it&#39;s usually because the plugin is derived from another one that was published under a different license.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;All Perl-based plugins will require Monitoring::Plugin at the very least, as that implements the basic Nagios API in a flexible way.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;check_smart.pl&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;smartmontools (smartctl), is needed to access SMART data;&lt;/li&gt; &#xA;   &lt;li&gt;sudo, optional for running from non-root user.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;check_openrc.pl&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;openrc itself.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;check_portage_age.pl&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Date::Parse;&lt;/li&gt; &#xA;   &lt;li&gt;Time::Duration.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;check_smb_share.pl&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Filesys::SmbClient.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ssmccoy/Async-ResourcePool</title>
    <updated>2022-10-19T01:36:39Z</updated>
    <id>tag:github.com,2022-10-19:/ssmccoy/Async-ResourcePool</id>
    <link href="https://github.com/ssmccoy/Async-ResourcePool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A resource pool designed for Asynchronous/IO driven applications.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>DSIMB/ICARUS</title>
    <updated>2022-10-19T01:36:39Z</updated>
    <id>tag:github.com,2022-10-19:/DSIMB/ICARUS</id>
    <link href="https://github.com/DSIMB/ICARUS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible protein structural alignment based on Protein Units&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/25644865/195085417-51ecbae0-2722-49d2-8603-2d0a1cbe1f9f.png&#34; width=&#34;300&#34;&gt; &#xA;  &lt;img alt=&#34;&#34; src=&#34;https://user-images.githubusercontent.com/25644865/195085445-b3af5175-8c61-4710-847c-df8907cb7617.png&#34; width=&#34;300&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Icarus: Flexible protein structural alignment based on Protein Units&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zenodo.org/badge/latestdoi/549521192&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/549521192.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Icarus is a method which uses the Protein Peeling algorithm (Gelly et al. (2006a), Gelly et al. (2006b), Gelly et al. (2011), Postic et al. (2017), Cretin et al. (2022)) to identify compact regions i.e Protein Units (PUs). PUs define rigid regions to be aligned to the target and delimit hinge positions in the structure.&lt;br&gt; Protein Peeling allows a hierarchical segmentation of a protein into compact &#34;independent&#34; domains (i.e that maximise intra-domain contact while minimizing inter-domain contact).&lt;br&gt; A protein can be divided into different exploration levels, each level containing more and more PUs as the level rises. The user can choose between different exploration levels:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Exploration level&lt;/th&gt; &#xA;   &lt;th&gt;Max number of Protein Units to consider (up to)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;2 and/or 3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;4 and/or 5 (default)&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If user asks for an exploration of 4, the program will explore &lt;strong&gt;up to&lt;/strong&gt; 7 PUs,&lt;br&gt; meaning that if the best alignment is found at level 3, it will give this best alignment anyways. You can set --verbose mode to have detailed output with all intermediate alignments.&lt;/p&gt; &#xA;&lt;p&gt;When given a pair of proteins to align, the program will generate several outputs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One PDB representing the best &lt;em&gt;query&lt;/em&gt; protein structure transformed after alignment.&lt;/li&gt; &#xA; &lt;li&gt;One PDB representing the best &lt;em&gt;query&lt;/em&gt; protein structure transformed after alignment aligned against the original target protein.&lt;/li&gt; &#xA; &lt;li&gt;The textual output (scores and textual alignment) is saved into &#34;summary.txt&#34; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Verbose output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All intermediate alignments are kept, for each exploration level up to the one chosen by the user.&lt;/li&gt; &#xA; &lt;li&gt;For each exploration level, the best alignments are kept in a &lt;code&gt;results_PDB&lt;/code&gt; directory, containing both the PDB files of the query alone and the query aligned against the target.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker (recommended) - Linux, MacOS (Intel) and Windows&lt;/h2&gt; &#xA;&lt;p&gt;Icarus is available as a Docker image (143.42 MB compressed, 391MB MB on disk).&lt;br&gt; You can either pull the latest image from Dockerhub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull dsimb/icarus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Set internal /dev/shm size as your RAM size, it is used to write tmp files for faster processing.&#xA;# The space used depends on several parameters, but a good value generally is &amp;gt;=1 GB.&#xA;# If an error occures about lack of space on device, increase this value.&#xA;# For convenience the following command lines (Linux or Mac) retrieve the max value of RAM available&#xA;# For windows users, please set shm variable manually: shm!&amp;lt;int&amp;gt;&#xA;shm=$(free -g | awk &#39;/^Mem:/{print $2}&#39;)gb # linux&#xA;shm=$(system_profiler SPHardwareDataType | grep &#34;Memory:&#34; | awk &#39;{print $2}&#39;)gb # MacOS&#xA;mkdir icarus_output&#xA;docker run -it --shm-size $shm -v $(pwd)/icarus_output:/icarus/icarus_output -v ./data:/data dsimb/icarus -p1 /data/RIPC/d1adl__.pdb -p2 /data/RIPC/d1mup__.pdb&#xA;&#xA;# Show help&#xA;docker run dsimb/icarus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker - MacOS (Apple Silicon M1)&lt;/h3&gt; &#xA;&lt;p&gt;Docker Desktop &amp;gt;= 3.3.1 is required. For the ARM64 architecture of Apple Silicon M1(+) CPU, there is an additional option to add to all docker command: &lt;code&gt;--platform linux/arm64&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Build the image and tag it icarus&#xA;docker build --platform linux/arm64 -t icarus .&#xA;&#xA;# Run the image&#xA;docker run --platform linux/arm64 -it --shm-size $shm -v $(pwd)/icarus_output:/icarus/icarus_output -v ./data:/data dsimb/icarus -p1 /data/RIPC/d1adl__.pdb -p2 /data/RIPC/d1mup__.pdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;First, you need to run the installer in order to deploy the workspace. This will essentially compile and install SWORD and its dependencies,&lt;br&gt; TMalign, and create a few directories to work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conda&lt;/h3&gt; &#xA;&lt;p&gt;If you are familiar with conda, you should create an environment using the &lt;code&gt;environment.yml&lt;/code&gt; file in the git repository which contains all dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create the environment&#xA;conda env create -f environment.yml&#xA;or&#xA;mamba env create -f environment.yml&#xA;# Activate the environment&#xA;conda activate icarus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./icarus.py --help&#xA;usage: icarus.py [-h] -p1 PROTEIN1 -p2 PROTEIN2 [-s MIN_SIZE] [-l EXPLORATION_LEVEL] [-f] [-v]&#xA;&#xA;Icarus is a flexible structural alignment program.&#xA;It takes as input 2 pdb files and returns the optimal&#xA;alignment based on different protein exploration levels.&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  -p1 PROTEIN1, --protein1 PROTEIN1&#xA;                        Path to the first protein to align&#xA;  -p2 PROTEIN2, --protein2 PROTEIN2&#xA;                        Path to the second protein to align&#xA;  -s MIN_SIZE, --min-size MIN_SIZE&#xA;                        Minimum size of Protein Units (PUs).&#xA;                        Must be 15 &amp;lt;= min &amp;lt;= 99, default 15&#xA;  -l EXPLORATION_LEVEL, --exploration-level EXPLORATION_LEVEL&#xA;                        The exploration level determines up to how many PUs to&#xA;                        consider to build the graph of solutions.&#xA;                        A high exploration level will consider more PUs,&#xA;                        therefore explore more possibilities and&#xA;                        potentially find better results, but it will&#xA;                        also increase exponentially the complexity of&#xA;                        calculations and runtime.&#xA;                        A low exploration level can potentially miss good results.&#xA;                        A good trade-off is to set level 2 (default) or 3.&#xA;                        Attention !! Levels 4 and 5 may require a high amount&#xA;                        of memory and will run longer.&#xA;                        Available levels and corresponding number of PUs (up to):&#xA;                          1 -&amp;gt; [2, 3],&#xA;                          2 -&amp;gt; [4, 5],&#xA;                          3 -&amp;gt; 6,&#xA;                          4 -&amp;gt; 7,&#xA;                          5 -&amp;gt; 8&#xA;  -f, --force           Bypass asking user confirmation for exploration level &amp;gt;= 4&#xA;  -v, --verbose         Set verbose mode: print longer output and generate&#xA;                                          intermediate results and alignments&#xA;&#xA;Explanations of ICARUS output:&#xA;&#xA;Non-verbose output&#xA;------------------&#xA;work/results/query_and_target:&#xA; ├── solution1_query-on-target-level_X_N_PUs.pdb&#xA; └── summary.txt (terminal textual output)&#xA;&#xA;Verbose output&#xA;--------------&#xA;See the README for detailed information on verbose output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Toy example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./icarus.py -p1 data/RIPC/d1adl__.ent -p2 data/RIPC/d1mup__.ent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Clean input PDB files ... done&#xA;&#xA;Peel d1adl__.ent:&#xA;    131 aa&#xA;    Seq: CDAFVGTWKLVSSENFDDYMKEVGVGFATRKVAGMAKPNMIISVNGDLVTIRSESTFKNTEISFKLGVEFDEITADDRKVKSIITLDGGALVQVQKWDGKSTTIKRKRDGDKLVVECVMKGVTSTRVYERA&#xA;Peel d1mup__.ent:&#xA;    157 aa&#xA;    Seq: EEASSTGRNFNVEKINGEWHTIILASDKREKIEDNGNFRLFLEQIHVLENSLVLKFHTVRDEECSELSMVADKTEKAGEYSVTYDGFNTFTIPKTDYDNFLMAHLINEKDGETFQLMGLYGREPDLSSDIKERFAQLCEEHGILRENIIDLSNANRC&#xA;&#xA;&#xA;&#xA;&#xA;d1adl__ level 1 vs d1mup__, 3 PUs&#xA;--------------------------------------------------------&#xA;Build graph      [##############################] [100%]&#xA;Merge alignments [##############################] [100%]&#xA;Compute scores   [##############################] [100%]&#xA;&#xA;d1adl__ level 2 vs d1mup__, 4 PUs&#xA;--------------------------------------------------------&#xA;Build graph      [##############################] [100%]&#xA;Merge alignments [##############################] [100%]&#xA;Compute scores   [##############################] [100%]&#xA;&#xA;d1adl__ level 2 vs d1mup__, 5 PUs&#xA;--------------------------------------------------------&#xA;Build graph      [##############################] [100%]&#xA;Merge alignments [##############################] [100%]&#xA;Compute scores   [##############################] [100%]&#xA;&#xA;d1mup__ level 1 vs d1adl__, 3 PUs&#xA;--------------------------------------------------------&#xA;Build graph      [##############################] [100%]&#xA;Merge alignments [##############################] [100%]&#xA;Compute scores   [##############################] [100%]&#xA;&#xA;d1mup__ level 2 vs d1adl__, 4 PUs&#xA;--------------------------------------------------------&#xA;Build graph      [##############################] [100%]&#xA;Merge alignments [##############################] [100%]&#xA;Compute scores   [##############################] [100%]&#xA;&#xA;d1mup__ level 2 vs d1adl__, 5 PUs&#xA;--------------------------------------------------------&#xA;Build graph      [##############################] [100%]&#xA;Merge alignments [##############################] [100%]&#xA;Compute scores   [##############################] [100%]&#xA;&#xA;INFO: Overwriting existing results at /home/republique/cretin/PROJECTS/icarus/icarus_output/results/d1adl___and_d1mup__&#xA;&#xA;&#xA;&#xA;&#xA;**************************************************************************************************************&#xA;*************************************************** RESULTS **************************************************&#xA;**************************************************************************************************************&#xA;&#xA;&#xA;There is only 1 optimal solution for this alignment:&#xA;&#xA;&#xA;                                                 SOLUTION 3&#xA;                                                 **********&#xA;&#xA; *  Score: 0.721&#xA;    Query: d1adl__&#xA;     ├── PU order:     PU1 |     PU2 |     PU3 |     PU4 |     PU5 |&#xA;     └── Regions :    1-22 |   23-37 |   38-64 |  65-105 | 106-131 |&#xA;    Target: d1mup__&#xA;     └── Sequence length : 157&#xA;&#xA;                                                ALIGNED PU(S)&#xA;                                                -------------&#xA;&#xA;PU 1     :CDAFVGTWKLVSSEN--F-DD---YMKE&#xA;          :||||||||||||||    |&#xA;TARGET   :VEKINGEWHTIILASDKREKIEDNGNFR&#xA;ali. pos. 12                         39&#xA;ori. pos. 1                          22&#xA;&#xA;PU 2     :VGVGFATRKVAGMAK&#xA;          .|||||||||||||.&#xA;TARGET   :PDLSSDIKERFAQLC&#xA;ali. pos. 126           140&#xA;ori. pos. 23            37&#xA;&#xA;PU 3     :PNMIISVNGDLVTIRSES----TFKNTEISF&#xA;            ||||||||||||||.      .||||||:&#xA;TARGET   :FLEQIHVLENSLVLKFHTVRDEECSELSMVA&#xA;ali. pos. 41                            71&#xA;ori. pos. 38                            64&#xA;&#xA;PU 4     :K--LGVEFDEITADDRKVKSII-TLDG-GALVQVQKWD----GKSTTIK&#xA;               |||||:.  ::|||||| .|.  .|||||||:.    .||||||&#xA;TARGET   :KTEKAGEYSVTY--DGFNTFTIPKTDYDNFLMAHLINEKDGETFQLMGL&#xA;ali. pos. 73                                              121&#xA;ori. pos. 65                                              105&#xA;&#xA;PU 5     :RKRDGDKLVVECVMKGVT--STRV--YERA&#xA;                       .|.|.  |::|  :.||&#xA;TARGET   :-----------EEHGILRENIIDLSNANRC&#xA;ali. pos. 141                          170&#xA;ori. pos. 106                          131&#xA;&#xA;                                                BEST ALIGNMENT&#xA;                                                --------------&#xA;&#xA;PUs      :                      PU1                            PU3                                      PU4&#xA;ori. pos.:           ┌1                       22┐ ┌38                         64┐ ┌65&#xA;connect  :           +--------------------------+ +-----------------------------+ +---------------------------&#xA;QUERY    :           CDAFVGTWKLVSSEN--F-DD---YMKE-PNMIISVNGDLVTIRSES----TFKNTEISF-K--LGVEFDEITADDRKVKSII-TLDG-&#xA;match    :           :||||||||||||||    |           ||||||||||||||.      .||||||:      |||||:.  ::|||||| .|.&#xA;TARGET   :EEASSTGRNFNVEKINGEWHTIILASDKREKIEDNGNFRLFLEQIHVLENSLVLKFHTVRDEECSELSMVADKTEKAGEYSVTY--DGFNTFTIPKTDYD&#xA;dist     :           211011000000000  6 07   968  550000110010000146    531000002 7   60100123  22111001 3048&#xA;ali. pos.:         10        20        30        40        50        60        70        80        90&#xA;&#xA;PUs      :                              PU2                   PU5&#xA;ori. pos.:                 105┐    ┌23         37┐┌106                      131┐&#xA;connect  :--------------------+    +-------------++----------------------------+&#xA;QUERY    :GALVQVQKWD----GKSTTIK----VGVGFATRKVAGMAKRKRDGDKLVVECVMKGVT--STRV--YERA&#xA;match    :.|||||||:.    .||||||    .|||||||||||||.             .|.|.  |::|  :.||&#xA;TARGET   :NFLMAHLINEKDGETFQLMGLYGREPDLSSDIKERFAQLC-----------EEHGILRENIIDLSNANRC&#xA;dist     :3100000023    3100010    311000000000003           9731413  0221  2310&#xA;ali. pos.:         110       120       130       140       150       160       170&#xA;&#xA;Aligned distance (match &amp;lt;=&amp;gt; dist): &#39;|&#39; &amp;lt;= 1 Å&#xA;                                   &#39;:&#39; &amp;lt;= 2 Å&#xA;                                   &#39;.&#39; &amp;lt;= 3 Å&#xA;&#xA;Best solution(s):&#xA;--&amp;gt; /home/republique/cretin/PROJECTS/icarus/icarus_output/results/d1adl___and_d1mup__/solution_1_d1adl__-level_2_5_PUs-on-d1mup__.pdb&#xA;&#xA;Total runtime: 26.3 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ICARUS output directories/files explained:&lt;/h2&gt; &#xA;&lt;h3&gt;Non-verbose output&lt;/h3&gt; &#xA;&lt;p&gt;Contains the best transformed query PDB structure as a PDB file&lt;br&gt; and the textual output (best score(s) and corresponding textual alignment(s))&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;work/results/query_and_target:&#xA; ├── solution1_query-on-target-level_X_N_PUs.pdb&#xA; └── summary.txt (terminal textual output)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verbose output&lt;/h3&gt; &#xA;&lt;p&gt;Contains results for protein1 vs. protein2 and vice versa, and summary.txt is the terminal textual output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;work/results/d1adl___and_d1mup__:&#xA; ├── d1adl___on_d1mup__/&#xA; ├── d1mup___on_d1adl__/&#xA; └── summary.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Contains all intermediate alignments with TM-align outputs, the ICARUS final result PDB and the simple protein1 vs. protein2 TM-align output for information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;work/results/d1adl___and_d1mup__/d1adl__-on-d1mup__:&#xA; ├── intermediate/&#xA; ├── result_PDBs/&#xA; └── tmalign_d1adl___vs_d1mup__.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Contains the best intermediate alignments that were done by ICARUS during runtime while graph exploration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;work/results/d1adl___and_d1mup__/d1adl__-on-d1mup__/intermediate:&#xA; ├── alignements_level_1_3_PUs/&#xA; ├── alignements_level_2_4_PUs/&#xA; └── alignements_level_2_5_PUs/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each directory contains the TM-sup and TM-sup_all_atm output PDB files of the best TM-aligns done between best alignment PUs and the target to which previously aligned portions of PUs were removed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;work/results/d1ggga__and_d1wdna_/d1adl__-on-d1mup__/intermediate/alignements_level_1_3_PUs:&#xA; ├── ali_d1adl__-d1adl__.ent_1_106_131-on-d1mup__/&#xA; ├── ali_d1adl__-d1adl__.ent_1_1_64-on--4SF3zUEzYS/&#xA; └── ali_d1adl__-d1adl__.ent_1_65_105-on--cRHbY4G4OX/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Contains all the solutions found by ICARUS at each exploration level and for each number of PUs of these levels. Are given: 1 - query-exploration_level_and_number_of_PUs-on-target.pdb 2 - query-exploration_level_and_number_of_PUs.pdb&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;work/results/d1ggga__and_d1wdna_/d1adl__-on-d1mup__/intermediate/result_PDBs:&#xA; ├── d1adl__-level_1_3_PUs-on-d1mup__.pdb&#xA; ├── d1adl__-level_1_3_PUs.pdb&#xA; ├── d1adl__-level_2_4_PUs-on-d1mup__.pdb&#xA; ├── d1adl__-level_2_4_PUs.pdb&#xA; ├── d1adl__-level_2_5_PUs-on-d1mup__.pdb&#xA; ├── d1adl__-level_2_5_PUs.pdb&#xA; └── d1adl___on_d1mup___tmalign.pdb&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>