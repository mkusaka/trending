<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-16T01:39:37Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pawjy/perl-test-x1</title>
    <updated>2023-05-16T01:39:37Z</updated>
    <id>tag:github.com,2023-05-16:/pawjy/perl-test-x1</id>
    <link href="https://github.com/pawjy/perl-test-x1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Test::X1 Perl test module&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;Test::X1 - A lightweight test manager&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use Test::X1; use Test::More;&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; ok 1; ok 2; $c-&amp;gt;done; };&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; my $timer; $timer = AnyEvent-&amp;gt;timer( after =&amp;gt; 2, cb =&amp;gt; sub { test { ok 2; is 3, 0; undef $timer; $c-&amp;gt;done; undef $c; } $c; }, ); ok 1; } n =&amp;gt; 3, name =&amp;gt; [&#39;anyevent&#39;, &#39;callback&#39;];&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; ok 1; $c-&amp;gt;done; } n =&amp;gt; 1;&lt;/p&gt; &#xA;&lt;p&gt;run_tests;&lt;/p&gt; &#xA;&lt;p&gt;ok 1 - [1] - [1] ok 2 - [1] - [2] ok 3 - [2] anyevent.callback - [1] ok 4 - [3] - [1] ok 5 - [2] anyevent.callback - [2] not ok 6 - [2] anyevent.callback - [3]&lt;/p&gt; &#xA;&lt;h1&gt;Failed test &#39;[2] anyevent.callback - [3]&#39;&lt;/h1&gt; &#xA;&lt;h1&gt;at lib/Test/X1.pod line 24.&lt;/h1&gt; &#xA;&lt;h1&gt;got: &#39;3&#39;&lt;/h1&gt; &#xA;&lt;h1&gt;expected: &#39;0&#39;&lt;/h1&gt; &#xA;&lt;h1&gt;[2] anyevent.callback: 1 test failed&lt;/h1&gt; &#xA;&lt;p&gt;1..6&lt;/p&gt; &#xA;&lt;h1&gt;Looks like you failed 1 test of 6.&lt;/h1&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;The C&lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt; module defines a simple, lightweight, and L&#xA; &lt;anyevent&gt;&#xA;  -compatible test management framework for L&#xA;  &lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt;-based tests. It supports automatic naming of tests, partial execution, concurrent execution, and other useful features.&#xA; &lt;/anyevent&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 USAGE&lt;/p&gt; &#xA;&lt;p&gt;By C&#xA; &lt;use&gt;&#xA;  ing the C&#xA;  &lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt; module, functions for defining and running tests are exported to the caller package. Note that it only exports test management functions. You have to import or define your favorite test assertion sets such as L&#xA;  &lt;a href=&#34;Test::More&#34;&gt;Test::More&lt;/a&gt; or L&#xA;  &lt;a href=&#34;Test::Differences&#34;&gt;Test::Differences&lt;/a&gt; by yourself. The C&#xA;  &lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt; test framework only assumes that you are writing a L&#xA;  &lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt;-based test script. As long as test assertion functions are build upon L&#xA;  &lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt;&#39;s framework, you can choose any test module.&#xA; &lt;/use&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that some test modules are incompatible with L&#xA; &lt;anyevent&gt;&#xA;  -based asynchronous invocation of callbacks. For example, C&#xA;  &lt;subtest&gt;&#xA;   s of L&#xA;   &lt;a href=&#34;Test::More&#34;&gt;Test::More&lt;/a&gt; does not work well.&#xA;  &lt;/subtest&gt;&#xA; &lt;/anyevent&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head2 Tests&lt;/p&gt; &#xA;&lt;p&gt;A C&lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt;-based test script consists of one or more tests. A I&#xA; &lt;test&gt;&#xA;   is a group of I&#xA;  &lt;subtests&gt;&#xA;   , which are L&#xA;   &lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt;-based assertion functions such as I&#xA;   &lt;is&gt;&#xA;     and I&#xA;    &lt;ok&gt;&#xA;     . A test can be defined by enclosing subtests and related codes by the C&amp;lt;test{}&amp;gt; function:&#xA;    &lt;/ok&gt;&#xA;   &lt;/is&gt;&#xA;  &lt;/subtests&gt;&#xA; &lt;/test&gt;&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  is 2 * 4, 8;&#xA;  is 40 - 30, 10;&#xA;  &#xA;  $c-&amp;gt;done;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;};&lt;/p&gt; &#xA;&lt;p&gt;This usage of the C&amp;lt;test{}&amp;gt; function is sometimes referred to as I&#xA; &lt;test definition&gt;&#xA;  . The code block in the test definition is invoked with an argument, the context object for the test, I&amp;lt;$c&amp;gt;. The C&amp;lt;&amp;lt; $c-&amp;gt;done &amp;gt;&amp;gt; method has to be called when all subtests in the test are done. (See L&amp;lt;/&#34;Context objects&#34;&amp;gt; for more information on I&amp;lt;$c&amp;gt;.)&#xA; &lt;/test&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can specify the number of subtests in a test by specifying the C&#xA; &lt;n&gt;&#xA;   option to the test definition. If the C&#xA;  &lt;n&gt;&#xA;    option is specified, it is verified that the expected number of subtests are done before the C&amp;lt;&amp;lt; $c-&amp;gt;done &amp;gt;&amp;gt; metohd is invoked. It is considered as good practice to specify the number of subtests, especially when there are loops in the test, such that it can be confirmed that all expected subtests are really executed. Since the number of subtests can be frequently changed in some cases, or it could even be unknown a priori, the C&#xA;   &lt;n&gt;&#xA;     option is not required.&#xA;   &lt;/n&gt;&#xA;  &lt;/n&gt;&#xA; &lt;/n&gt;&lt;/p&gt; &#xA;&lt;p&gt;The test can be named by specifying the C&#xA; &lt;name&gt;&#xA;   option to the test definition. The name of the test is C&amp;lt;[n]&amp;gt;, where I&#xA;  &lt;n&gt;&#xA;    is the sequential number of the test, followed by space and C&#xA;   &lt;name&gt;&#xA;     value if any, e.g. C&amp;lt;[1] hoge&amp;gt; or C&amp;lt;[2]&amp;gt;.&#xA;   &lt;/name&gt;&#xA;  &lt;/n&gt;&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;p&gt;The name of the test is used to construct the name of the subtests in the test.&lt;/p&gt; &#xA;&lt;p&gt;The C&amp;lt;TEST_METHOD&amp;gt; environment variable can be used to specify the regular expression used to filter the tests to run by their names. If the environment variable is not set, all tests are executed. Otherwise, only the tests whose name matches the pattern are executed.&lt;/p&gt; &#xA;&lt;p&gt;The C&amp;lt;TEST_METHOD_EXCLUDED&amp;gt; environment variable can be used to specify the regular expression used to filter the tests to I&#xA; &lt;not&gt;&#xA;   run by their names. If the environment variable is not set, no test is excluded.&#xA; &lt;/not&gt;&lt;/p&gt; &#xA;&lt;p&gt;See also L for how names are handled and used by the module.&lt;/p&gt; &#xA;&lt;p&gt;For example, consider the following test script:&lt;/p&gt; &#xA;&lt;h1&gt;t/foo.t&lt;/h1&gt; &#xA;&lt;p&gt;use Test::X1; use Test::More;&lt;/p&gt; &#xA;&lt;p&gt;my $x = 10;&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; is $x, 10; $c-&amp;gt;done; } name =&amp;gt; &#39;abc2&#39;;&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; is $x * 2, 20; $c-&amp;gt;done; };&lt;/p&gt; &#xA;&lt;p&gt;run_tests;&lt;/p&gt; &#xA;&lt;p&gt;The first test is named as C&amp;lt;[1] abc2&amp;gt;, while the second test is named as C&amp;lt;[2]&amp;gt;. If the script is executed with no C&amp;lt;TEST_METHOD&amp;gt;, both of them are executed. If the script is executed with C&amp;lt;TEST_METHOD=abc&amp;gt;, only the first test is executed. If the script is executed with C&amp;lt;TEST_METHOD=2&amp;gt;, both of them are executed.&lt;/p&gt; &#xA;&lt;p&gt;The C&amp;lt;run_tests&amp;gt; function runs the tests defined by C&amp;lt;test{}&amp;gt; functions. It must be invoked exactly once in the test script, after all tests are defined. You can run any preparation code before the invocation, or cleanup code after the invocation. The C&amp;lt;run_tests&amp;gt; function does not return until all tests are done.&lt;/p&gt; &#xA;&lt;p&gt;=head2 Context objects&lt;/p&gt; &#xA;&lt;p&gt;The code block in the test definition is invoked with an argument, i.e. the context object, in the C&amp;lt;@_&amp;gt; array. The context object provides several utility methods for the test and is created specifically for the test. In other word, different context objects are created for different test definitions. In this document, the context object is sometimes referred to as C&amp;lt;$c&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;The most significant method of the test context object is the C&#xA; &lt;done&gt;&#xA;   method. The C&amp;lt;&amp;lt; $c-&amp;gt;done &amp;gt;&amp;gt; method must be invoked when and only when all the subtests in the test has been done, successfully or not. Once the method has been invoked, no subtest can be performed in the test. If the method is not invoked in the test, an error would be reported.&#xA; &lt;/done&gt;&lt;/p&gt; &#xA;&lt;p&gt;The most basic usage would be invoking the C&amp;lt;&amp;lt; $c-&amp;gt;done &amp;gt;&amp;gt; method just before the end of the test code:&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ... tests ...&#xA;  &#xA;  $c-&amp;gt;done;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;};&lt;/p&gt; &#xA;&lt;p&gt;If there are callbacks, the C&amp;lt;&amp;lt; $c-&amp;gt;done &amp;gt;&amp;gt; method should be invoked at the end of the last callback (the one invoked finally):&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; my $timer = AE::timer 10, 0, sub { test { ...; $c-&amp;gt;done; undef $c; } $c; }; };&lt;/p&gt; &#xA;&lt;p&gt;The inner C&amp;lt;test{}&amp;gt; statement is a test block; See L&amp;lt;/&#34;Test blocks&#34;&amp;gt; for details. Also note that C&amp;lt;undef $c&amp;gt; is executed after C&amp;lt;&amp;lt; $c-&amp;gt;done &amp;gt;&amp;gt; is invoked. Though this is not required for this particular case, it might be a good practice to C&#xA; &lt;undef&gt;&#xA;   the context object reference when it is C&#xA;  &lt;done&gt;&#xA;   &#39;ed within a callback function as it would delete a possible loop reference when the context object has the reference to some object and the object then contains the reference to the callback function which contains the reference to the context object.&#xA;  &lt;/done&gt;&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;More complex example:&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  my $cv = AE::cv;&#xA;  &#xA;  # This callback will be executed after all of&#xA;  # following callbacks are invoked.&#xA;  $cv-&amp;gt;begin (sub { test { $c-&amp;gt;done } $c });&#xA;  &#xA;  $cv-&amp;gt;begin;&#xA;  my $timer1 = AE::timer 10, 0, sub { $cv-&amp;gt;end };&#xA;  &#xA;  $cv-&amp;gt;begin;&#xA;  my $timer2 = AE::timer 4, 0, sub { $cv-&amp;gt;end };&#xA;  &#xA;  ...&#xA;  &#xA;  $cv-&amp;gt;end;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;};&lt;/p&gt; &#xA;&lt;p&gt;Application test framework built on top of the module might define additional methods to context objects. See L&amp;lt;/&#34;Subclassing&#34;&amp;gt; on the guideline for extending the context object interface.&lt;/p&gt; &#xA;&lt;p&gt;=head2 Test blocks&lt;/p&gt; &#xA;&lt;p&gt;Another usage of the C&amp;lt;test{}&amp;gt; function is defining a B&#xA; &lt;test block&gt;&#xA;  . They are different from the test definitions in that they are used within some test definition and takes the test context object I&amp;lt;$c&amp;gt; as the first argument.&#xA; &lt;/test&gt;&lt;/p&gt; &#xA;&lt;p&gt;Test blocks are typically used within callback functions in a test; in fact there has to be a test block within an asynchronously invoked callback function:&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; AE::io *STDIN, 0, sub { test { is scalar &#xA; &lt;stdin&gt;&#xA;  , &#34;hoge&#34;; $c-&amp;gt;done; } $c; }; };&#xA; &lt;/stdin&gt;&lt;/p&gt; &#xA;&lt;p&gt;A test block gives the test context as encapsulated by I&amp;lt;$c&amp;gt; to the subtests within the block. You have to enclose subtests within callback functions by yourself, unfortunately, otherwise the test manager losts the association of subtests and their &#34;parent&#34; test, due to the asynchronousness of the invocation of the callback.&lt;/p&gt; &#xA;&lt;p&gt;Test block can be named by the C&#xA; &lt;name&gt;&#xA;   option:&#xA; &lt;/name&gt;&lt;/p&gt; &#xA;&lt;p&gt;test { test { ok 1, &#39;Test X&#39;; } $c, name =&amp;gt; &#39;hoge&#39;; };&lt;/p&gt; &#xA;&lt;h1&gt;ok 1 - [1] - [1] hoge Test X&lt;/h1&gt; &#xA;&lt;p&gt;The C&amp;lt;TEST_BLOCK_SKIP&amp;gt; environment variable can be used to specify the regular expression to skip the test blocks with names matching to the pattern. For example, C&amp;lt;TEST_BLOCK_SKIP=og.$&amp;gt; would prevent the C&#xA; &lt;ok&gt;&#xA;   statement in the example above from executed. See also L.&#xA; &lt;/ok&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head2 Naming&lt;/p&gt; &#xA;&lt;p&gt;Tests, test blocks, and subtests can be named. Instead of a scalar value, representing the literal string, an array reference containing string components can be specified.&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; test { is $hoge, $fuga, &#39;Subtest 1&#39;; } $c, name =&amp;gt; &#39;Test block 1&#39;; $c-&amp;gt;done; } name =&amp;gt; &#39;Test 1&#39;;&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; test { is $hoge, $fuga, [&#39;Subtest&#39;, 2]; } $c, name =&amp;gt; [&#39;Test block&#39;, 2]; $c-&amp;gt;done; } name =&amp;gt; [&#39;Test&#39;, 2];&lt;/p&gt; &#xA;&lt;p&gt;Naming by array reference would be particularly useful when defining multiple tests by iteration:&lt;/p&gt; &#xA;&lt;p&gt;for my $value (1, 2, 30, 120) { test { my $c = shift; like $c, qr{^\d+$}; $c-&amp;gt;done; } name =&amp;gt; [&#39;Test&#39;, $value]; }&lt;/p&gt; &#xA;&lt;p&gt;If the name is represented as an array reference, its items are joined by C&amp;lt;.&amp;gt; (period) before actually used to output results, or filter tests by environment variables, i.e. C&amp;lt;TEST_METHOD&amp;gt;, C&amp;lt;TEST_METHOD_EXCLUDED&amp;gt;, and C&amp;lt;TEST_BLOCK_SKIP&amp;gt;. Any empty string is replaced by C&amp;lt;(empty)&amp;gt; and any C&#xA; &lt;undef&gt;&#xA;   value is replaced by C&amp;lt;(undef)&amp;gt;.&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head2 Waiting for a condvar&lt;/p&gt; &#xA;&lt;p&gt;An L&#xA; &lt;anyevent&gt;&#xA;   condvar can be specified as the C&#xA;  &lt;wait&gt;&#xA;    parameter to a test definition (I&#xA;   &lt;not&gt;&#xA;     test block!) to wait for the condvar to receive a value. The received value can be accessed from the C&amp;lt;&amp;lt; $c-&amp;gt;received_data &amp;gt;&amp;gt; method of the context object.&#xA;   &lt;/not&gt;&#xA;  &lt;/wait&gt;&#xA; &lt;/anyevent&gt;&lt;/p&gt; &#xA;&lt;p&gt;my $cv = AE::cv; test { my $c = shift; is $c-&amp;gt;received_data, 123; $c-&amp;gt;done; } wait =&amp;gt; $cv;&lt;/p&gt; &#xA;&lt;p&gt;Instead of a codevar object, a code reference which, when invoked, returns a condvar object or the C&#xA; &lt;undef&gt;&#xA;   value can be specified as the C&#xA;  &lt;wait&gt;&#xA;    value. This practice is rather recommended as it would prevend the condvar object from being instantiated when the target tests are filtered by C&amp;lt;TEST_METHOD&amp;gt; environment variable. For example,&#xA;  &lt;/wait&gt;&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; is $c-&amp;gt;received_data, 123; $c-&amp;gt;done; } wait =&amp;gt; sub { start_server_and_return_cv () };&lt;/p&gt; &#xA;&lt;p&gt;... does not start the server for the test when the test is excluded from the execution.&lt;/p&gt; &#xA;&lt;p&gt;The default C&#xA; &lt;wait&gt;&#xA;   value, used when no C&#xA;  &lt;wait&gt;&#xA;    parameter is explicitly specified to test definitions, can be provided by subclassing (see L&amp;lt;/&#34;Subclassing&#34;&amp;gt; for details) and defining C&amp;lt;&amp;lt; $tm-&amp;gt;default_test_wait_cv &amp;gt;&amp;gt; method returning a condvar (or C&#xA;   &lt;undef&gt;&#xA;    ) in the test manager subclass. In this case, by explicitly setting C&#xA;    &lt;undef&gt;&#xA;      value for the C&#xA;     &lt;wait&gt;&#xA;       parameter of test definitions, this default can be cleared. (See C&amp;lt;t/cv-wait-default.t&amp;gt; test script for examples.)&#xA;     &lt;/wait&gt;&#xA;    &lt;/undef&gt;&#xA;   &lt;/undef&gt;&#xA;  &lt;/wait&gt;&#xA; &lt;/wait&gt;&lt;/p&gt; &#xA;&lt;p&gt;The C&#xA; &lt;wait&gt;&#xA;   value can also be a hash reference (or a code reference which returns a hash reference). The C&#xA;  &lt;cv&gt;&#xA;    key of the hash reference can have the condvar object as the value. The C&amp;lt;destroy_as_cv&amp;gt; key can contain the code reference, which will be invoked after relevant tests have been run. The code should be useful to stop the server started by the C&#xA;   &lt;cv&gt;&#xA;     condvar&#39;s preparation, for example. The code must return a condvar object, whose callback will be invoked after the destroy process has been done. The same C&amp;lt;destroy_as_cv&amp;gt; code is invoked only once. If the code is specified as part of the C&#xA;    &lt;wait&gt;&#xA;      value of multiple tests, it is only invoked after all of them has been executed. Example:&#xA;    &lt;/wait&gt;&#xA;   &lt;/cv&gt;&#xA;  &lt;/cv&gt;&#xA; &lt;/wait&gt;&lt;/p&gt; &#xA;&lt;p&gt;test { ... } wait =&amp;gt; {cv =&amp;gt; sub { return $server-&amp;gt;start_as_cv; }, destroy_as_cv =&amp;gt; sub { return $server-&amp;gt;stop_as_cv; }};&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the C&#xA; &lt;timeout&gt;&#xA;   value can also be specified in the C&#xA;  &lt;wait&gt;&#xA;    hash reference. Its default value is 60. After the seconds of the timeout elapse, if the C&#xA;   &lt;wait&gt;&#xA;     condvar&#39;s callback is not invoked, the associated test fails. The timeout value is also applied to the C&amp;lt;context_begin&amp;gt; and C&amp;lt;context_end&amp;gt; methods of the C&amp;lt;&amp;lt; $c-&amp;gt;received_data &amp;gt;&amp;gt; object; These methods have to invoke the callback before the timeout. Please note that they should not block the entire script, otherwise the timeout will not work.&#xA;   &lt;/wait&gt;&#xA;  &lt;/wait&gt;&#xA; &lt;/timeout&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head2 Concurrent execution of tests&lt;/p&gt; &#xA;&lt;p&gt;Thanks to L&#xA; &lt;anyevent&gt;&#xA;   framework, tests (as defined by outermost C&amp;lt;test{}&amp;gt; functions) can be concurrenrly executed when they are written in non-blocking way using L&#xA;  &lt;anyevent&gt;&#xA;   .&#xA;  &lt;/anyevent&gt;&#xA; &lt;/anyevent&gt;&lt;/p&gt; &#xA;&lt;p&gt;Consider the following test script fragment:&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; ok &#39;Subtest #1.1&#39;; AnyEvent::Example-&amp;gt;something(cb =&amp;gt; sub { test { is $_[0], &#39;hoge&#39;, &#39;Subtest #1.2&#39;; $c-&amp;gt;done; } $c; }); };&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; ok &#39;Subtest #2.1&#39;; AnyEvent::Example-&amp;gt;something(cb =&amp;gt; sub { test { is $_[0], &#39;hoge&#39;, &#39;Subtest #2.2&#39;; $c-&amp;gt;done; undef $c; } $c; }); };&lt;/p&gt; &#xA;&lt;p&gt;run_tests;&lt;/p&gt; &#xA;&lt;p&gt;In this case, execution order of Subtests #1.2 and #2.2 is unclear at all, depending on how long C&amp;lt;&amp;lt; AnyEvent::Example-&amp;gt;something &amp;gt;&amp;gt; defers the execution of the callbacks. (Please also note that, although in the current implementation Subtest #2.1 is always executed after Subtest #1.1, as that test is defined by C&amp;lt;test{}&amp;gt; after the other test, this is not guaranteed and you should not reply on this exact order. Future version of the module could introduce shuffling execution mode, for instance.)&lt;/p&gt; &#xA;&lt;p&gt;Anyway, we can describe this situation that multiple tests are concurrently executed. By default, at most five tests are concurrently executed by C&lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt;. Setting a number to the C&amp;lt;TEST_MAX_CONCUR&amp;gt; environment variable can override this default, if desired. C&amp;lt;TEST_MAX_CONCUR=1&amp;gt; disables this concurrency, which will be useful for debugging purposes in particular.&lt;/p&gt; &#xA;&lt;p&gt;=head2 More test option&lt;/p&gt; &#xA;&lt;p&gt;The C&#xA; &lt;timeout&gt;&#xA;   option of the test definition (not a test block) specifies the timeout in seconds. The test must end within the seconds after the test is started (not inlcuding any C&#xA;  &lt;wait&gt;&#xA;   , C&amp;lt;context_before&amp;gt;, and C&amp;lt;context_after&amp;gt; processing). The default value is 60. Note that the timeout might be applied as intended if the test blocks the script, by, e.g., blocking I/O access, C&#xA;   &lt;system&gt;&#xA;    , or C&#xA;    &lt;sleep&gt;&#xA;     .&#xA;    &lt;/sleep&gt;&#xA;   &lt;/system&gt;&#xA;  &lt;/wait&gt;&#xA; &lt;/timeout&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head2 Subclassing&lt;/p&gt; &#xA;&lt;p&gt;Test scripts often need application-specific factory functions and/or utility functions to create expected precondition or to manage states of tested environment. For example, a test for Web application would need to start a Web server before any test and stop the server after tests. A test for database operation would want to insert a number of records into the database at some points in the test code. Although they can be implemented orthogonally from the C&lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt;&#39;s framework, subclassing of the L&lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt; class should be a good candidate if you want to control the lifetime of such temporary objects by relating them with lexical scopes of tests.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to extend C&lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt; for your application C&#xA; &lt;my&gt;&#xA;  , the subclass module, C&amp;lt;My/Test/X1.pm&amp;gt;, would look like:&#xA; &lt;/my&gt;&lt;/p&gt; &#xA;&lt;p&gt;package My::Test::X1; use Test::X1 (); Test::X1::define_functions(&lt;strong&gt;PACKAGE&lt;/strong&gt;);&lt;/p&gt; &#xA;&lt;p&gt;package My::Test::X1::Manager;&lt;/p&gt; &#xA;&lt;p&gt;sub my_create_database { ... } sub my_drop_database { ... }&lt;/p&gt; &#xA;&lt;p&gt;sub stop_test_manager { shift-&amp;gt;my_drop_database }&lt;/p&gt; &#xA;&lt;p&gt;package My::Test::X1::Context;&lt;/p&gt; &#xA;&lt;p&gt;sub my_insert_data { ... }&lt;/p&gt; &#xA;&lt;p&gt;1;&lt;/p&gt; &#xA;&lt;p&gt;The C&lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt; module is C&#xA; &lt;use&gt;&#xA;  d without importing any function, then the C&#xA;  &lt;a href=&#34;Test::X1::define_functions&#34;&gt;Test::X1::define_functions&lt;/a&gt; function is invoked with the package, i.e. C&#xA;  &lt;a href=&#34;My::Test::X1&#34;&gt;My::Test::X1&lt;/a&gt;. Additional methods are defined in subclasses of test manager and context objects. Then, in your test script, instead of directly C&#xA;  &lt;use&gt;&#xA;   ing C&#xA;   &lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt; module, load your module:&#xA;  &lt;/use&gt;&#xA; &lt;/use&gt;&lt;/p&gt; &#xA;&lt;p&gt;use My::Test::X1; my $tm = get_test_manager; $tm-&amp;gt;my_create_database;&lt;/p&gt; &#xA;&lt;p&gt;test { my $c = shift; $c-&amp;gt;my_insert_data; ... };&lt;/p&gt; &#xA;&lt;p&gt;run_tests;&lt;/p&gt; &#xA;&lt;p&gt;It is considered as good practice to prepend a short prefix taken from the subclass name (C&amp;lt;my_&amp;gt; in this example) to the method names defined by subclasses such that future additions to base classes will not conflict with them.&lt;/p&gt; &#xA;&lt;p&gt;Both test manager and context objects are blessed hash references. Subclasses can use hashes to save their data associated with objects. Such hash keys should be prefixed by subclass names as well.&lt;/p&gt; &#xA;&lt;p&gt;=head1 EXPORTED FUNCTIONS&lt;/p&gt; &#xA;&lt;p&gt;By C&#xA; &lt;use&gt;&#xA;  ing the C&#xA;  &lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt; module, your test script imports following functions:&#xA; &lt;/use&gt;&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $tm = get_test_manager&lt;/p&gt; &#xA;&lt;p&gt;Obtain the instance of the test manager for the test script. The test manager object is singleton; the function always returns the same object.&lt;/p&gt; &#xA;&lt;p&gt;=item test { CODE } NAME =&amp;gt; VALUE, ...; (Test definition)&lt;/p&gt; &#xA;&lt;p&gt;Define a test. It must be invoked outside of any other C&amp;lt;test{}&amp;gt; function call. It must be invoked before C&amp;lt;run_tests&amp;gt; function call.&lt;/p&gt; &#xA;&lt;p&gt;The code block is expected to run one or more subtests. The number of subtests is expected to be equal to the C&#xA; &lt;n&gt;&#xA;   parameter value, if specified. The code is expected to not throw any exception.&#xA; &lt;/n&gt;&lt;/p&gt; &#xA;&lt;p&gt;The code block, when invoked, receives the text context object I&amp;lt;$c&amp;gt; for the test as the argument. The C&amp;lt;&amp;lt; $c-&amp;gt;done &amp;gt;&amp;gt; method is expected to be invoked after all subtests are run.&lt;/p&gt; &#xA;&lt;p&gt;See also L for usage.&lt;/p&gt; &#xA;&lt;p&gt;After the code block, zero or more name/value pairs can be specified. Following name/value pairs are supported:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item n =&amp;gt; non-negative integer&lt;/p&gt; &#xA;&lt;p&gt;Specify the expected number of substests in the test. If the parameter is not specified, number of subtests are not known a priori.&lt;/p&gt; &#xA;&lt;p&gt;=item name =&amp;gt; string or array reference of strings&lt;/p&gt; &#xA;&lt;p&gt;Name the test. See L for details.&lt;/p&gt; &#xA;&lt;p&gt;=item wait =&amp;gt; anyevent-condvar&lt;/p&gt; &#xA;&lt;p&gt;Specify a L&lt;a href=&#34;AnyEvent::CondVar&#34;&gt;AnyEvent::CondVar&lt;/a&gt; object to wait before the execution of the test. See also L&amp;lt;/&#34;Waiting for a condvar&#34;&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=item test { CODE } $c, NAME =&amp;gt; VALUE, ...; (Test block)&lt;/p&gt; &#xA;&lt;p&gt;Define a subpart of test (or a block of subtests). It must be invoked within the code part of a test definition.&lt;/p&gt; &#xA;&lt;p&gt;See also L&amp;lt;/&#34;Test blocks&#34;&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;The context object for the current test must be specified as the argument next to the code block. Additionally, zero or more name/value pairs can be specified.&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item name =&amp;gt; string or array reference of strings&lt;/p&gt; &#xA;&lt;p&gt;Name the test block. See L for details.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=item run_tests&lt;/p&gt; &#xA;&lt;p&gt;Run the defined tests. The function returns after all the tests has been executed and done. This function must be invoked exactly once in the test script. After the function call, the C&amp;lt;test{}&amp;gt; function (for defining a test) must not be invoked.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 TEST MANAGER OBJECT&lt;/p&gt; &#xA;&lt;p&gt;The test manager object is the object created for the test script, holding references to tests in the test script and monitoring their results. The test manager object is singleton; there is at most one test manager object at one time.&lt;/p&gt; &#xA;&lt;p&gt;The C&lt;a href=&#34;Text::X1&#34;&gt;Text::X1&lt;/a&gt; class (and its subclasses) exports C&amp;lt;get_test_manager&amp;gt; function, which takes no argument, returning the current test manager object.&lt;/p&gt; &#xA;&lt;p&gt;If you are writing simple test scripts, you don&#39;t have to directly access test manager usually. The exported functions explained in the previous section are in fact invoking appropriate methods of the test manager object.&lt;/p&gt; &#xA;&lt;p&gt;Following methods can be invoked or defined when you are subclassing the test manager object:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $cv = $tm-&amp;gt;default_test_wait_cv&lt;/p&gt; &#xA;&lt;p&gt;This method can be overridden by subclasses, if desired. This method is expected to return an L&#xA; &lt;anyevent&gt;&#xA;   condvar or C&#xA;  &lt;undef&gt;&#xA;   . The value returned by this method is used as the C&#xA;   &lt;wait&gt;&#xA;     parameter value of test definitions, when it is not explicitly specified.&#xA;   &lt;/wait&gt;&#xA;  &lt;/undef&gt;&#xA; &lt;/anyevent&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $hashref = $tm-&amp;gt;context_args&lt;/p&gt; &#xA;&lt;p&gt;This method can be overridden by subclasses, if desired. This method is invoked when test context objects are created. It is expected to return a hash reference containing name/value pairs passed as arguments to the C&#xA; &lt;new&gt;&#xA;   method of the test context class. By default it returns an empty hash reference.&#xA; &lt;/new&gt;&lt;/p&gt; &#xA;&lt;p&gt;Name/value pairs specified here can be accessed from the test context object&#39;s blessed hash reference. See L&amp;lt;/&#34;Subclassing&#34;&amp;gt; for their usage.&lt;/p&gt; &#xA;&lt;p&gt;=item $tm-&amp;gt;stop_test_manager&lt;/p&gt; &#xA;&lt;p&gt;This method can be overridden by subclasses, if desired. This method is invoked before the test manager object is destructed. It is expected to be used to close anything opened by the test manager, if necessary. This method can be invoked more than once for an test manager object. The C&lt;a href=&#34;Test::X1&#34;&gt;Test::X1&lt;/a&gt; module does it&#39;s best effort to invoke the method for the test manager object before Perl goes into the global destruction phase.&lt;/p&gt; &#xA;&lt;p&gt;=item $tm-&amp;gt;diag($color, $message)&lt;/p&gt; &#xA;&lt;p&gt;=item $tm-&amp;gt;note($color, $message)&lt;/p&gt; &#xA;&lt;p&gt;Print a diagnostic message or a note, through C&lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt;&#39;s C&#xA; &lt;diag&gt;&#xA;   or C&#xA;  &lt;note&gt;&#xA;    method. For their usage, see L&#xA;   &lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt; and L&#xA;   &lt;a href=&#34;Test::More&#34;&gt;Test::More&lt;/a&gt; documentations.&#xA;  &lt;/note&gt;&#xA; &lt;/diag&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first argument must be a color specification for L&lt;a href=&#34;Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt;, e.g. C&amp;lt;&#34;red&#34;&amp;gt; or C&amp;lt;&#34;&#34;&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;The second argument must be a diagnostic or note text, possibly utf8-flagged.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 CONTEXT OBJECT&lt;/p&gt; &#xA;&lt;p&gt;The context object is created for each test. It provides several information on the test, which can be used within test for debugging purpose. The context object is passed to the test as the first argument.&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $name = $c-&amp;gt;test_name&lt;/p&gt; &#xA;&lt;p&gt;The compound name of the test, in a single character string. However the name is specified (or not), the method returns the single string as used in TAP test name part. See L.&lt;/p&gt; &#xA;&lt;p&gt;=item $data = $c-&amp;gt;received_data&lt;/p&gt; &#xA;&lt;p&gt;Return the data received from the L&#xA; &lt;anyevent&gt;&#xA;   condvar specified to the C&#xA;  &lt;wait&gt;&#xA;    parameter of the test definition for the current test. See also L&amp;lt;/&#34;Waiting for a condvar&#34;&amp;gt;.&#xA;  &lt;/wait&gt;&#xA; &lt;/anyevent&gt;&lt;/p&gt; &#xA;&lt;p&gt;The data can be any value, including the C&#xA; &lt;undef&gt;&#xA;   value. If the data is an object which has C&amp;lt;context_begin&amp;gt; and C&amp;lt;context_end&amp;gt; methods, they are invoked just after and just before the data is associated with a context object. (Please note that the data can be associated with multiple context objects when the condvar is specified for multiple tests.) Both methods will receive a code reference as an argument. The methods are expected to invoke the code once the object is ready for start or termination of the test. Typical use case of these methods is preparation and termination of a server process used within the test.&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example of class for such an object:&lt;/p&gt; &#xA;&lt;p&gt;package My::Data;&lt;/p&gt; &#xA;&lt;p&gt;sub context_begin { my ($self, $code) = @_; $self-&amp;gt;{rc}++; $code-&amp;gt;(); }&lt;/p&gt; &#xA;&lt;p&gt;sub context_end { my ($self, $code) = @_; $self-&amp;gt;{rc}--; $self-&amp;gt;stop_server unless $self-&amp;gt;{rc}; $code-&amp;gt;(); }&lt;/p&gt; &#xA;&lt;p&gt;=item $c-&amp;gt;diag($color, $message)&lt;/p&gt; &#xA;&lt;p&gt;Print a diagnostic message, through C&lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt;&#39;s C&#xA; &lt;diag&gt;&#xA;   method. For their usage, see L&#xA;  &lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt; and L&#xA;  &lt;a href=&#34;Test::More&#34;&gt;Test::More&lt;/a&gt; documentations.&#xA; &lt;/diag&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first argument must be a color specification for L&lt;a href=&#34;Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt;, e.g. C&amp;lt;&#34;red&#34;&amp;gt; or C&amp;lt;&#34;&#34;&amp;gt;. (Please note that this argument is ignored in this version.)&lt;/p&gt; &#xA;&lt;p&gt;The second argument must be a diagnostic text, possibly utf8-flagged.&lt;/p&gt; &#xA;&lt;p&gt;=item $c-&amp;gt;done&lt;/p&gt; &#xA;&lt;p&gt;Notify that the substests in the test is done. This method must be invoked exactly once for a test. See also L&amp;lt;/&#34;Context objects&#34;&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 LIMITATIONS&lt;/p&gt; &#xA;&lt;p&gt;Subtests as implemented by L&lt;a href=&#34;Test::More&#34;&gt;Test::More&lt;/a&gt; / L&lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt; cannot be used in the context of this module as they are globally stateful such that concurrent execution of multiple different test introduced by this module is incompatibile with them. Please note that this module&#39;s concept of subtests is different from those subtests.&lt;/p&gt; &#xA;&lt;p&gt;=head1 EXAMPLES&lt;/p&gt; &#xA;&lt;p&gt;See C&amp;lt;t/*.t&amp;gt; for more examples.&lt;/p&gt; &#xA;&lt;p&gt;=head1 DEPENDENCY&lt;/p&gt; &#xA;&lt;p&gt;This module requires Perl 5.10 or later. In addition to core modules, this module depends on L&lt;a href=&#34;Exporter::Lite&#34;&gt;Exporter::Lite&lt;/a&gt; and L&#xA; &lt;anyevent&gt;&#xA;  .&#xA; &lt;/anyevent&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 HISTORY&lt;/p&gt; &#xA;&lt;p&gt;This module is inspired by following modules: C&lt;a href=&#34;Test::Builder&#34;&gt;Test::Builder&lt;/a&gt;, C&lt;a href=&#34;Test::Class&#34;&gt;Test::Class&lt;/a&gt;, C&lt;a href=&#34;Test::More&#34;&gt;Test::More&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository was located at &lt;a href=&#34;https://github.com/wakaba/perl-test-x1&#34;&gt;https://github.com/wakaba/perl-test-x1&lt;/a&gt; until 19 April 2023, then transferred to &lt;a href=&#34;https://github.com/pawjy/perl-test-x1&#34;&gt;https://github.com/pawjy/perl-test-x1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2013 Hatena &lt;a href=&#34;https://www.hatena.ne.jp/&#34;&gt;https://www.hatena.ne.jp/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2017 Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pawjy/perl-promised-file</title>
    <updated>2023-05-16T01:39:37Z</updated>
    <id>tag:github.com,2023-05-16:/pawjy/perl-promised-file</id>
    <link href="https://github.com/pawjy/perl-promised-file" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;Promised::File - File system operations&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use Promised::File; $file = Promised::File-&amp;gt;new_from_path (&#39;path/to/file.txt&#39;); $file-&amp;gt;read_byte_string-&amp;gt;then (sub { warn $&lt;em&gt;[0] }); $file-&amp;gt;read_char_string-&amp;gt;then (sub { warn $&lt;/em&gt;[0] }); $p = $file-&amp;gt;write_byte_string ($bytes); $p = $file-&amp;gt;write_char_string ($chars);&lt;/p&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;The C&lt;a href=&#34;Promised::File&#34;&gt;Promised::File&lt;/a&gt; class provides file system operations returning L&#xA; &lt;promise&gt;&#xA;   objects.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 METHOD&lt;/p&gt; &#xA;&lt;p&gt;Following methods are available:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $file = Promised::File-&amp;gt;new_from_path ($string)&lt;/p&gt; &#xA;&lt;p&gt;Create a C&lt;a href=&#34;Promised::File&#34;&gt;Promised::File&lt;/a&gt; object with the specified path.&lt;/p&gt; &#xA;&lt;p&gt;The path must be a Unix style character string of the relative or absolute path to the file. A relative path is resolved against the current working directory. (However, it does not support resolving of C&amp;lt;~&amp;gt; syntax (home directory). It is recommended that an absolute path be specified as the argument.)&lt;/p&gt; &#xA;&lt;p&gt;Paths in non-unix platforms such as Windows are not supported. Paths in character encoding other than UTF-8 (or binary data) are not supported.&lt;/p&gt; &#xA;&lt;p&gt;=item $file = Promised::File-&amp;gt;new_temp_directory (no_cleanup =&amp;gt; BOOLEAN)&lt;/p&gt; &#xA;&lt;p&gt;Cerate a C&lt;a href=&#34;Promised::File&#34;&gt;Promised::File&lt;/a&gt; object representing a new temporary directory created by L&lt;a href=&#34;File::Temp&#34;&gt;File::Temp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, the directory is removed after any reference to the file object is discarded. If a named parameter whose name is C&amp;lt;no_cleanup&amp;gt; is set to a boolean true value, the directory is not removed.&lt;/p&gt; &#xA;&lt;p&gt;=item $string = $file-&amp;gt;path_string&lt;/p&gt; &#xA;&lt;p&gt;Return a string that represents the path to the file. It might or might not be equal to the path given upon the creation of the file object. It might or might not be absolute.&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;stat-&amp;gt;then (sub { $stat = shift })&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved with the C&#xA;  &lt;stat&gt;&#xA;    L&#xA;   &lt;a href=&#34;File::stat&#34;&gt;File::stat&lt;/a&gt; object for the file. See C&amp;lt;perldoc -f stat&amp;gt; and L&#xA;   &lt;a href=&#34;File::stat&#34;&gt;File::stat&lt;/a&gt; for details. Note that the object is cached such that the promise returned by the method is always resolved with the same object. If the file is not found, the promise is rejected.&#xA;  &lt;/stat&gt;&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;lstat-&amp;gt;then (sub { $stat = shift })&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved with the C&#xA;  &lt;lstat&gt;&#xA;    L&#xA;   &lt;a href=&#34;File::stat&#34;&gt;File::stat&lt;/a&gt; object for the file. See C&amp;lt;perldoc -f lstat&amp;gt; and L&#xA;   &lt;a href=&#34;File::stat&#34;&gt;File::stat&lt;/a&gt; for details. Note that the object is cached such that the promise returned by the method is always resolved with the same object. If the file is not found, the promise is rejected.&#xA;  &lt;/lstat&gt;&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;is_file-&amp;gt;then (sub { $boolean = shift })&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;is_directory-&amp;gt;then (sub { $boolean = shift })&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;is_symlink-&amp;gt;then (sub { $boolean = shift })&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;is_executable-&amp;gt;then (sub { $boolean = shift })&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved with whether it is a file (C&amp;lt;-f&amp;gt;), a directory (C&amp;lt;-d&amp;gt;), a symlink (C&amp;lt;-l&amp;gt;), or an executable file (C&amp;lt;-x&amp;gt;), respectively. If the file is not found, the promise is resolved with false.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $stream = $file-&amp;gt;read_bytes&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;readablestream&gt;&#xA;   that is a readable byte stream of the content of the file. If the specified file is not found, the stream is in error.&#xA; &lt;/readablestream&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;read_byte_string-&amp;gt;then (sub { $bytes = shift })&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved with the content of the file as a byte string. If the specified file is not found, the promise is rejected.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;read_char_string-&amp;gt;then (sub { $chars = shift })&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved with the content of the file interpreted as a UTF-8 encoded byte sequence, represented as a Perl utf8 string. If the specified file is not found, the promise is rejected.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $stream = $file-&amp;gt;write_bytes&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;writablestream&gt;&#xA;   that is a writable stream written into the specified file. Any existing file is overwritten. The stream is in error if failed.&#xA; &lt;/writablestream&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any data written to the stream (i.e. the argument to the writer&#39;s C&#xA; &lt;write&gt;&#xA;   method) must be an L&#xA;  &lt;arraybufferview&gt;&#xA;    (such as L&#xA;   &lt;dataview&gt;&#xA;     and L&#xA;    &lt;a href=&#34;TypedArray::Uint8Array&#34;&gt;TypedArray::Uint8Array&lt;/a&gt;).&#xA;   &lt;/dataview&gt;&#xA;  &lt;/arraybufferview&gt;&#xA; &lt;/write&gt;&lt;/p&gt; &#xA;&lt;p&gt;Aborting the stream (i.e. the C&#xA; &lt;abort&gt;&#xA;   method) closes the file, without completing the outstanding writes, and in fact the pending creation of the file, depending on when the stream is aborted. Therefore, the stream should not be aborted unless the application (and the user) no longer have any interest to the file&#39;s content at all.&#xA; &lt;/abort&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $promise = $file-&amp;gt;write_byte_string ($bytes)&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved after the specified byte string is written to the specified file. Any existing file is overwritten. The promise is rejected if failed.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $promise = $file-&amp;gt;write_char_string ($chars)&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved after the specified character string is written to the specified file in UTF-8 character encoding. Any existing file is overwritten. The promise is rejected if failed.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $promise = $file-&amp;gt;mkpath&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved after the directory specified by the path of the C&amp;lt;$file&amp;gt; object is created (if not yet). It is rejected if there is a conflicting file.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $promise = $file-&amp;gt;remove_tree&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved after the file or directory specified by the path of the C&amp;lt;$file&amp;gt; object is removed, if any, as well as any descendant. It is rejected if the removal failed.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;get_child_names-&amp;gt;then (sub { $names = $_[0] })&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved with an array reference of the file names in the directory specified by the path of the C&amp;lt;$file&amp;gt; object. The array items are the names of the files and directories directly beglonging to the directory, without directory paths, as byte strings. Special directories C&amp;lt;.&amp;gt; and C&amp;lt;..&amp;gt; are I&#xA;  &lt;not&gt;&#xA;    included in the array. It is rejected if there is no such directory or it is not a directory.&#xA;  &lt;/not&gt;&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $file-&amp;gt;lock_new_file (signal =&amp;gt; $signal, timeout =&amp;gt; $seconds)-&amp;gt;then (...)&lt;/p&gt; &#xA;&lt;p&gt;Exclusively lock the file, using flock (i.e. advisory locking). If the file is not found, a new file is created before locking.&lt;/p&gt; &#xA;&lt;p&gt;The method returns a promise, which is resolved when a lock is acquired (or rejected with an error when failed).&lt;/p&gt; &#xA;&lt;p&gt;The following options can be specified as named arguments:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item signal =&amp;gt; $signal (required)&lt;/p&gt; &#xA;&lt;p&gt;An L&#xA; &lt;abortsignal&gt;&#xA;   object. If it is aborted before the lock is acquired, the locking is canceled and the returned promised is rejected with an C&#xA;  &lt;aborterror&gt;&#xA;   . If it is aborted after the lock is acquired, the lock is released.&#xA;  &lt;/aborterror&gt;&#xA; &lt;/abortsignal&gt;&lt;/p&gt; &#xA;&lt;p&gt;This option is required. The lock must be released.&lt;/p&gt; &#xA;&lt;p&gt;=item timeout =&amp;gt; $seconds&lt;/p&gt; &#xA;&lt;p&gt;The duration the method&#39;s attempt to acquire a lock is continued, in seconds. If not specified, no timeout is enforced. If timeouted, the returned promise is rejected.&lt;/p&gt; &#xA;&lt;p&gt;=item interval =&amp;gt; $seconds&lt;/p&gt; &#xA;&lt;p&gt;The duration between the method&#39;s repeated attempts to acquire a lock, in seconds.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 DEPENDENCY&lt;/p&gt; &#xA;&lt;p&gt;The module requires Perl 5.12 or later.&lt;/p&gt; &#xA;&lt;p&gt;The module requires L&#xA; &lt;promise&gt; &#xA;  &lt;a href=&#34;https://github.com/wakaba/perl-promise&#34;&gt;https://github.com/wakaba/perl-promise&lt;/a&gt; and L&#xA;  &lt;anyevent&gt;&#xA;   .&#xA;  &lt;/anyevent&gt;&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;Methods C&amp;lt;read_bytes&amp;gt; and C&amp;lt;write_bytes&amp;gt; requires the L&#xA; &lt;readablestream&gt;&#xA;   and L&#xA;  &lt;writablestream&gt;&#xA;    modules from the perl-streams package &#xA;   &lt;a href=&#34;https://github.com/manakai/perl-streams&#34;&gt;https://github.com/manakai/perl-streams&lt;/a&gt;. Methods C&amp;lt;get_child_names&amp;gt; and C&amp;lt;lock_new_file&amp;gt; require L&#xA;   &lt;a href=&#34;Streams::IOError&#34;&gt;Streams::IOError&lt;/a&gt; from the perl-streams package.&#xA;  &lt;/writablestream&gt;&#xA; &lt;/readablestream&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the L&lt;a href=&#34;Web::Encoding&#34;&gt;Web::Encoding&lt;/a&gt; module (from the perl-web-encodings package &lt;a href=&#34;https://github.com/manakai/perl-web-encodings&#34;&gt;https://github.com/manakai/perl-web-encodings&lt;/a&gt;) is available, that module is used to encode or decode UTF-8 texts in a way compatible with the Web. Otherwise, the Perl&#39;s L&#xA; &lt;encode&gt;&#xA;   module is used instead.&#xA; &lt;/encode&gt;&lt;/p&gt; &#xA;&lt;p&gt;Method C&amp;lt;lock_new_file&amp;gt; requires L&lt;a href=&#34;AnyEvent::FileLock&#34;&gt;AnyEvent::FileLock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 HISTORY&lt;/p&gt; &#xA;&lt;p&gt;This repository was located at &lt;a href=&#34;https://github.com/wakaba/perl-promised-file&#34;&gt;https://github.com/wakaba/perl-promised-file&lt;/a&gt; until 18 April 2023, then transferred to &lt;a href=&#34;https://github.com/pawjy/perl-promised-file&#34;&gt;https://github.com/pawjy/perl-promised-file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2015-2020 Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
</feed>