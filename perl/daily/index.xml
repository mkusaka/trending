<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-24T01:50:03Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nupfel/Web-API</title>
    <updated>2022-07-24T01:50:03Z</updated>
    <id>tag:github.com,2022-07-24:/nupfel/Web-API</id>
    <link href="https://github.com/nupfel/Web-API" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Simple base module to implement almost every RESTful API with just a few lines of configuration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=pod&lt;/p&gt; &#xA;&lt;p&gt;=encoding UTF-8&lt;/p&gt; &#xA;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;Web::API - A Simple base module to implement almost every RESTful API with just a few lines of configuration&lt;/p&gt; &#xA;&lt;p&gt;=head1 VERSION&lt;/p&gt; &#xA;&lt;p&gt;version 2.7&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;B&lt;a href=&#34;NOTE:&#34;&gt;NOTE:&lt;/a&gt; as of version 2.1 C&amp;lt;strict_ssl&amp;gt; is enabled by default for obvious security reasons, this may break your current library implementation, sorry.&lt;/p&gt; &#xA;&lt;p&gt;Implement the RESTful API of your choice in 10 minutes, roughly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package Net::CloudProvider;&#xA;&#xA;use Mouse;&#xA;&#xA;with &#39;Web::API&#39;;&#xA;&#xA;our $VERSION = &#34;0.1&#34;;&#xA;&#xA;has &#39;commands&#39; =&amp;gt; (&#xA;    is      =&amp;gt; &#39;rw&#39;,&#xA;    default =&amp;gt; sub {&#xA;        {&#xA;            list_nodes =&amp;gt; { method =&amp;gt; &#39;GET&#39; },&#xA;            node_info  =&amp;gt; { method =&amp;gt; &#39;GET&#39;, require_id =&amp;gt; 1 },&#xA;            create_node =&amp;gt; {&#xA;                method             =&amp;gt; &#39;POST&#39;,&#xA;                default_attributes =&amp;gt; {&#xA;                    allowed_hot_migrate            =&amp;gt; 1,&#xA;                    required_virtual_machine_build =&amp;gt; 1,&#xA;                    cpu_shares                     =&amp;gt; 5,&#xA;                    required_ip_address_assignment =&amp;gt; 1,&#xA;                    primary_network_id             =&amp;gt; 1,&#xA;                    required_automatic_backup      =&amp;gt; 0,&#xA;                    swap_disk_size                 =&amp;gt; 1,&#xA;                },&#xA;                mandatory =&amp;gt; [&#xA;                    &#39;label&#39;,&#xA;                    &#39;hostname&#39;,&#xA;                    &#39;template_id&#39;,&#xA;                    &#39;cpus&#39;,&#xA;                    &#39;memory&#39;,&#xA;                    &#39;primary_disk_size&#39;,&#xA;                    &#39;required_virtual_machine_build&#39;,&#xA;                    &#39;cpu_shares&#39;,&#xA;                    &#39;primary_network_id&#39;,&#xA;                    &#39;required_ip_address_assignment&#39;,&#xA;                    &#39;required_automatic_backup&#39;,&#xA;                    &#39;swap_disk_size&#39;,&#xA;                ]&#xA;            },&#xA;            update_node =&amp;gt; { method =&amp;gt; &#39;PUT&#39;,    require_id =&amp;gt; 1 },&#xA;            delete_node =&amp;gt; { method =&amp;gt; &#39;DELETE&#39;, require_id =&amp;gt; 1 },&#xA;            start_node  =&amp;gt; {&#xA;                method       =&amp;gt; &#39;POST&#39;,&#xA;                require_id   =&amp;gt; 1,&#xA;                post_id_path =&amp;gt; &#39;startup&#39;,&#xA;            },&#xA;            stop_node =&amp;gt; {&#xA;                method       =&amp;gt; &#39;POST&#39;,&#xA;                require_id   =&amp;gt; 1,&#xA;                post_id_path =&amp;gt; &#39;shutdown&#39;,&#xA;            },&#xA;            suspend_node =&amp;gt; {&#xA;                method       =&amp;gt; &#39;POST&#39;,&#xA;                require_id   =&amp;gt; 1,&#xA;                post_id_path =&amp;gt; &#39;suspend&#39;,&#xA;            },&#xA;        };&#xA;    },&#xA;);&#xA;&#xA;sub commands {&#xA;    my ($self) = @_;&#xA;    return $self-&amp;gt;commands;&#xA;}&#xA;&#xA;sub BUILD {&#xA;    my ($self) = @_;&#xA;&#xA;    $self-&amp;gt;user_agent(__PACKAGE__ . &#39; &#39; . $VERSION);&#xA;    $self-&amp;gt;live_url(&#39;https://ams01.cloudprovider.net/virtual_machines&#39;);&#xA;    $self-&amp;gt;content_type(&#39;application/json&#39;);&#xA;    $self-&amp;gt;extension(&#39;json&#39;);&#xA;    $self-&amp;gt;wrapper(&#39;virtual_machine&#39;);&#xA;    $self-&amp;gt;mapping({&#xA;            os        =&amp;gt; &#39;template_id&#39;,&#xA;            debian    =&amp;gt; 1,&#xA;            id        =&amp;gt; &#39;label&#39;,&#xA;            disk_size =&amp;gt; &#39;primary_disk_size&#39;,&#xA;    });&#xA;&#xA;    return $self;&#xA;}&#xA;&#xA;1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;later use as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Net::CloudProvider;&#xA;&#xA;my $nc = Net::CloudProvider-&amp;gt;new(user =&amp;gt; &#39;foobar&#39;, api_key =&amp;gt; &#39;secret&#39;);&#xA;my $response = $nc-&amp;gt;create_node({&#xA;    id                             =&amp;gt; &#39;funnybox&#39;,&#xA;    hostname                       =&amp;gt; &#39;node.funnybox.com&#39;,&#xA;    os                             =&amp;gt; &#39;debian&#39;,&#xA;    cpus                           =&amp;gt; 2,&#xA;    memory                         =&amp;gt; 256,&#xA;    disk_size                      =&amp;gt; 5,&#xA;    allowed_hot_migrate            =&amp;gt; 1,&#xA;    required_virtual_machine_build =&amp;gt; 1,&#xA;    cpu_shares                     =&amp;gt; 5,&#xA;    required_ip_address_assignment =&amp;gt; 1,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head1 ATTRIBUTES&lt;/p&gt; &#xA;&lt;p&gt;=head2 commands&lt;/p&gt; &#xA;&lt;p&gt;most important configuration part of the module which has to be provided by the module you are writing.&lt;/p&gt; &#xA;&lt;p&gt;the following keys are valid/possible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;method&#xA;path&#xA;mandatory&#xA;default_attributes&#xA;headers&#xA;extension&#xA;content_type&#xA;incoming_content_type&#xA;outgoing_content_type&#xA;wrapper&#xA;query_keys&#xA;require_id (deprecated, use path)&#xA;pre_id_path (deprecated, use path)&#xA;post_id_path (deprecated, use path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the request path for commands is being build as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$base_url/$path.$extension&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;an example for C&#xA; &lt;path&gt;&#xA;  :&#xA; &lt;/path&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path =&amp;gt; &#39;users/:user_id/labels&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will add C&amp;lt;user_id&amp;gt; to the list of mandatory keys for this command automatically.&lt;/p&gt; &#xA;&lt;p&gt;=head2 live_url (required)&lt;/p&gt; &#xA;&lt;p&gt;get/set base URL to API, can include paths&lt;/p&gt; &#xA;&lt;p&gt;=head2 test_url (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set base URL for test system if applicable&lt;/p&gt; &#xA;&lt;p&gt;=head2 test (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set boolean to run against base URL from test system or live system&lt;/p&gt; &#xA;&lt;p&gt;=head2 api_key (required in most cases)&lt;/p&gt; &#xA;&lt;p&gt;get/set API key (also used as basic auth password)&lt;/p&gt; &#xA;&lt;p&gt;=head2 user (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set API username/account name&lt;/p&gt; &#xA;&lt;p&gt;=head2 api_key_field (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set name of the hash key that has to hold the C&amp;lt;api_key&amp;gt; e.g. in POST content payloads&lt;/p&gt; &#xA;&lt;p&gt;=head2 api_version (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set API version to be used&lt;/p&gt; &#xA;&lt;p&gt;default: 1&lt;/p&gt; &#xA;&lt;p&gt;=head2 mapping (optional)&lt;/p&gt; &#xA;&lt;p&gt;supply mapping table, hashref of format { &#34;key&#34; =&amp;gt; &#34;value&#34;, ... }&lt;/p&gt; &#xA;&lt;p&gt;=head2 wrapper (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set name of the key that is used to wrap all options of a command in. unfortunately some APIs increase the depth of a hash by wrapping everything into a single key (who knows why...), which means this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$wa-&amp;gt;command(%options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;turns C&amp;lt;%options&amp;gt; into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{ wrapper =&amp;gt; \%options }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;before encoding and sending it off.&lt;/p&gt; &#xA;&lt;p&gt;=head2 header (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set custom headers sent with every request&lt;/p&gt; &#xA;&lt;p&gt;=head2 auth_type&lt;/p&gt; &#xA;&lt;p&gt;get/set authentication type. currently supported are only &#39;basic&#39;, &#39;header&#39;, &#39;hash_key&#39;, &#39;get_params&#39;, &#39;oauth_header&#39;, &#39;oauth_params&#39; or &#39;none&#39;&lt;/p&gt; &#xA;&lt;p&gt;default: none&lt;/p&gt; &#xA;&lt;p&gt;=head2 auth_header (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set the name of the header used for Authorization credentials&lt;/p&gt; &#xA;&lt;p&gt;default: Authorization&lt;/p&gt; &#xA;&lt;p&gt;=head2 auth_header_token_format&lt;/p&gt; &#xA;&lt;p&gt;get/set format of the auth_header token.&lt;/p&gt; &#xA;&lt;p&gt;default: &#39;Token token=%s&#39;&lt;/p&gt; &#xA;&lt;p&gt;=head2 default_method (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set default HTTP method&lt;/p&gt; &#xA;&lt;p&gt;default: GET&lt;/p&gt; &#xA;&lt;p&gt;=head2 extension (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set file extension, e.g. &#39;json&#39;&lt;/p&gt; &#xA;&lt;p&gt;=head2 user_agent (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set User Agent String&lt;/p&gt; &#xA;&lt;p&gt;default: &#34;Web::API $VERSION&#34;&lt;/p&gt; &#xA;&lt;p&gt;=head2 timeout (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set L&lt;a href=&#34;LWP::UserAgent&#34;&gt;LWP::UserAgent&lt;/a&gt; timeout&lt;/p&gt; &#xA;&lt;p&gt;=head2 strict_ssl (optional)&lt;/p&gt; &#xA;&lt;p&gt;enable/disable strict SSL certificate hostname checking as a convenience alternatively you can supply your own LWP::Useragent compatible agent for the C&#xA; &lt;agent&gt;&#xA;   attribute.&#xA; &lt;/agent&gt;&lt;/p&gt; &#xA;&lt;p&gt;default: true&lt;/p&gt; &#xA;&lt;p&gt;=head2 agent (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set L&lt;a href=&#34;LWP::UserAgent&#34;&gt;LWP::UserAgent&lt;/a&gt; object&lt;/p&gt; &#xA;&lt;p&gt;=head2 retry_http_codes (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set array of HTTP response codes that trigger a retry of the request&lt;/p&gt; &#xA;&lt;p&gt;=head2 retry_errors (optional)&lt;/p&gt; &#xA;&lt;p&gt;define an array reference of regexes that should trigger a retry of the request if matched against an error found via one of the C&amp;lt;error_keys&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;=head2 retry_times (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set number of times a request will be retried at most&lt;/p&gt; &#xA;&lt;p&gt;default: 3&lt;/p&gt; &#xA;&lt;p&gt;=head2 retry_delay (optional)&lt;/p&gt; &#xA;&lt;p&gt;get/set delay to wait between retries. accepts float for millisecond support.&lt;/p&gt; &#xA;&lt;p&gt;default: 1.0&lt;/p&gt; &#xA;&lt;p&gt;=head2 content_type (optional)&lt;/p&gt; &#xA;&lt;p&gt;global content type, which is used for in and out going request/response headers and to encode and decode the payload if no other more specific content types are set, e.g. C&amp;lt;incoming_content_type&amp;gt;, C&amp;lt;outgoing_content_type&amp;gt; or content types set individually per command attribute.&lt;/p&gt; &#xA;&lt;p&gt;default: &#39;text/plain&#39;&lt;/p&gt; &#xA;&lt;p&gt;=head2 incoming_content_type (optional)&lt;/p&gt; &#xA;&lt;p&gt;default: undef&lt;/p&gt; &#xA;&lt;p&gt;=head2 outgoing_content_type (optional)&lt;/p&gt; &#xA;&lt;p&gt;default: undef&lt;/p&gt; &#xA;&lt;p&gt;=head2 debug (optional)&lt;/p&gt; &#xA;&lt;p&gt;enable/disabled debug logging&lt;/p&gt; &#xA;&lt;p&gt;default: false&lt;/p&gt; &#xA;&lt;p&gt;=head2 cookies (optional)&lt;/p&gt; &#xA;&lt;p&gt;this is used to store and retrieve cookies before and after requests were made to keep authenticated sessions alive for the time this object exists in memory you can add your own cookies to be send with every request. See L&lt;a href=&#34;HTTP::Cookies&#34;&gt;HTTP::Cookies&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;default: HTTP::Cookies-&amp;gt;new()&lt;/p&gt; &#xA;&lt;p&gt;=head2 consumer_secret (required for all oauth_* auth_types)&lt;/p&gt; &#xA;&lt;p&gt;default: undef&lt;/p&gt; &#xA;&lt;p&gt;=head2 access_token (required for all oauth_* auth_types)&lt;/p&gt; &#xA;&lt;p&gt;default: undef&lt;/p&gt; &#xA;&lt;p&gt;=head2 access_secret (required for all oauth_* auth_types)&lt;/p&gt; &#xA;&lt;p&gt;default: undef&lt;/p&gt; &#xA;&lt;p&gt;=head2 signature_method (required for all oauth_* auth_types)&lt;/p&gt; &#xA;&lt;p&gt;default: undef&lt;/p&gt; &#xA;&lt;p&gt;=head2 encoder (custom options encoding subroutine)&lt;/p&gt; &#xA;&lt;p&gt;Receives C&amp;lt;%options&amp;gt; and C&#xA; &lt;content-type&gt;&#xA;   as the only 2 arguments and has to return a single scalar.&#xA; &lt;/content-type&gt;&lt;/p&gt; &#xA;&lt;p&gt;default: undef&lt;/p&gt; &#xA;&lt;p&gt;=head2 decoder (custom response content decoding subroutine)&lt;/p&gt; &#xA;&lt;p&gt;Receives C&#xA; &lt;content&gt;&#xA;   and C&#xA;  &lt;content-type&gt;&#xA;    as the only 2 scalar arguments and has to return a single hash reference.&#xA;  &lt;/content-type&gt;&#xA; &lt;/content&gt;&lt;/p&gt; &#xA;&lt;p&gt;default: undef&lt;/p&gt; &#xA;&lt;p&gt;=head2 oauth_post_body (required for all oauth_* auth_types)&lt;/p&gt; &#xA;&lt;p&gt;enable/disable adding of command options as extra parameters to the OAuth request generation and therefor be included in the OAuth signature calculation.&lt;/p&gt; &#xA;&lt;p&gt;default: true&lt;/p&gt; &#xA;&lt;p&gt;=head2 error_keys&lt;/p&gt; &#xA;&lt;p&gt;get/set list of array keys that will be search for in the decoded response data structure. the same format as for mandatory keys is supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;some.deeply.nested.error.message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will search for an error message at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$decoded_response-&amp;gt;{some}-&amp;gt;{deeply}-&amp;gt;{nested}-&amp;gt;{error}-&amp;gt;{messsage}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and if the key exists and its value is defined it will be provided as C&amp;lt;$response-&amp;gt;{error}&amp;gt; and matched against all regexes from the &lt;code&gt;retry_errors&lt;/code&gt; array ref if provided to trigger a retry on particular errors.&lt;/p&gt; &#xA;&lt;p&gt;=head1 INTERNAL SUBROUTINES/METHODS&lt;/p&gt; &#xA;&lt;p&gt;=head2 nonce&lt;/p&gt; &#xA;&lt;p&gt;generates new OAuth nonce for every request&lt;/p&gt; &#xA;&lt;p&gt;=head2 log&lt;/p&gt; &#xA;&lt;p&gt;=head2 decode&lt;/p&gt; &#xA;&lt;p&gt;=head2 encode&lt;/p&gt; &#xA;&lt;p&gt;=head2 talk&lt;/p&gt; &#xA;&lt;p&gt;=head2 map_options&lt;/p&gt; &#xA;&lt;p&gt;=head2 check_mandatory&lt;/p&gt; &#xA;&lt;p&gt;=head2 key_exists&lt;/p&gt; &#xA;&lt;p&gt;=head2 wrap&lt;/p&gt; &#xA;&lt;p&gt;=head2 request&lt;/p&gt; &#xA;&lt;p&gt;retry request with delay if C&amp;lt;retry_http_codes&amp;gt; is set, otherwise just try once.&lt;/p&gt; &#xA;&lt;p&gt;=head2 needs_retry&lt;/p&gt; &#xA;&lt;p&gt;returns true if the HTTP code or error found match either C&amp;lt;retry_http_codes&amp;gt; or C&amp;lt;retry_errors&amp;gt; respectively. returns false otherwise.&lt;/p&gt; &#xA;&lt;p&gt;if C&amp;lt;retry_errors&amp;gt; are defined it will try to decode the response content and store the decoded structure internally so we don&#39;t have to decode again at the end.&lt;/p&gt; &#xA;&lt;p&gt;needs the last response object and the &#39;Accept&#39; content type header from the request for decoding.&lt;/p&gt; &#xA;&lt;p&gt;=head2 find_error&lt;/p&gt; &#xA;&lt;p&gt;go through C&amp;lt;error_keys&amp;gt; and find a potential error message in the decoded/parsed response and return it.&lt;/p&gt; &#xA;&lt;p&gt;=head2 format_response&lt;/p&gt; &#xA;&lt;p&gt;=head2 build_uri&lt;/p&gt; &#xA;&lt;p&gt;=head2 build_content_type&lt;/p&gt; &#xA;&lt;p&gt;configure in/out content types&lt;/p&gt; &#xA;&lt;p&gt;order of precedence:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;per command C&amp;lt;incoming_content_type&amp;gt; / C&amp;lt;outgoing_content_type&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;per command general C&amp;lt;content_type&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;content type based on file path extension (only for incoming)&lt;/li&gt; &#xA; &lt;li&gt;global C&amp;lt;incoming_content_type&amp;gt; / C&amp;lt;outgoing_content_type&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;global general C&amp;lt;content_type&amp;gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;=head2 DESTROY&lt;/p&gt; &#xA;&lt;p&gt;catch DESTROY call and tear down / clean up if necessary at this point there is nothing to do though. This prevents AUTOLOAD from logging an unknown command error message&lt;/p&gt; &#xA;&lt;p&gt;=head2 AUTOLOAD magic&lt;/p&gt; &#xA;&lt;p&gt;install a method for each new command and call it in an C&amp;lt;eval {}&amp;gt; to catch exceptions and set an error in a unified way.&lt;/p&gt; &#xA;&lt;p&gt;=head1 BUGS&lt;/p&gt; &#xA;&lt;p&gt;Please report any bugs or feature requests on GitHub&#39;s issue tracker L&lt;a href=&#34;https://github.com/nupfel/Web-API/issues&#34;&gt;https://github.com/nupfel/Web-API/issues&lt;/a&gt;. Pull requests welcome.&lt;/p&gt; &#xA;&lt;p&gt;=head1 SUPPORT&lt;/p&gt; &#xA;&lt;p&gt;You can find documentation for this module with the L&amp;lt;perldoc(1)&amp;gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perldoc Web::API&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also look for information at:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item * GitHub repository&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;https://github.com/nupfel/Web-API&#34;&gt;https://github.com/nupfel/Web-API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item * MetaCPAN&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;https://metacpan.org/module/Web::API&#34;&gt;https://metacpan.org/module/Web::API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item * AnnoCPAN: Annotated CPAN documentation&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;http://annocpan.org/dist/Web::API&#34;&gt;http://annocpan.org/dist/Web::API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item * CPAN Ratings&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;http://cpanratings.perl.org/d/Web::API&#34;&gt;http://cpanratings.perl.org/d/Web::API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;HTTP::Cookies&#34;&gt;HTTP::Cookies&lt;/a&gt;, L&lt;a href=&#34;LWP::UserAgent&#34;&gt;LWP::UserAgent&lt;/a&gt;, L&lt;a href=&#34;Net::OAuth&#34;&gt;Net::OAuth&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Tobias Kirschstein &lt;a href=&#34;mailto:lev@cpan.org&#34;&gt;lev@cpan.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 COPYRIGHT AND LICENSE&lt;/p&gt; &#xA;&lt;p&gt;This software is Copyright (c) 2013 by Tobias Kirschstein.&lt;/p&gt; &#xA;&lt;p&gt;This is free software, licensed under:&lt;/p&gt; &#xA;&lt;p&gt;The (three-clause) BSD License&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kazeburo/query-digester</title>
    <updated>2022-07-24T01:50:03Z</updated>
    <id>tag:github.com,2022-07-24:/kazeburo/query-digester</id>
    <link href="https://github.com/kazeburo/query-digester" rel="alternate"></link>
    <summary type="html">&lt;p&gt;pt-query-digest wrapper to make ops simple&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;query-digester&lt;/h1&gt; &#xA;&lt;p&gt;pt-query-digest wrapper to make ops simple.&lt;/p&gt; &#xA;&lt;p&gt;query-digester changes slow_query_log_file and enable slow_query_log. wait several seconds and restores them. After finish logging slow query log, query-digester call pt-query-digest and save result to /tmp.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;sudo is recommended. slowlog will be stores like &lt;code&gt;-rw-r----- 1 mysql mysql 178 Oct 20 00:06 slow_query_20210920000610.log&lt;/code&gt;. root privileges will be required to read it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% sudo perl ./query-digester -duration 10        &#xA;exec mysql to change long_query_time and slow_query_log_file&#xA;save slowlog to /tmp/slow_query_20200811172244.log&#xA;wait 10 seconds&#xA;finished capturing slowlog.&#xA;start query-digest&#xA;finished pt-query-digest.&#xA;digest saved to /tmp/slow_query_20200811172244.digest&#xA;&#xA;% head /tmp/slow_query_20200811172244.digest&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>GuidoBartoli/sherloq</title>
    <updated>2022-07-24T01:50:03Z</updated>
    <id>tag:github.com,2022-07-24:/GuidoBartoli/sherloq</id>
    <link href="https://github.com/GuidoBartoli/sherloq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source digital image forensic toolset&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/logo/sherloq.png&#34; width=&#34;600px&#34; alt=&#34;Sherloq&#34;&gt; &lt;br&gt;&lt;b&gt;An open source image forensic toolset&lt;/b&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;Forensic Image Analysis is the application of image science and domain expertise to interpret the content of an image and/or the image itself in legal matters. Major subdisciplines of Forensic Image Analysis with law enforcement applications include: Photogrammetry, Photographic Comparison, Content Analysis, and Image Authentication.&lt;/em&gt;&#34; (Scientific Working Group on Imaging Technologies)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sherloq&lt;/strong&gt; is a personal research project about implementing a fully integrated environment for digital image forensics. It is not meant as an automatic tool that decide if an image is forged or not (that tool probably will never exist...), but as a companion in experimenting with various algorithms found in the latest research papers and workshops.&lt;/p&gt; &#xA;&lt;p&gt;While many commercial solutions have high retail prices and often reserved to law enforcement and government agencies only,&amp;nbsp;this toolset aims to be a both an extensible framework and a starting point for anyone interested in making experiments in this particular application of digital signal processing.&lt;/p&gt; &#xA;&lt;p&gt;I strongly believe that &lt;em&gt;security-by-obscurity&lt;/em&gt;&amp;nbsp;is the wrong&amp;nbsp;way to offer any kind of forensic service&amp;nbsp;(i.e. &#34;Using this proprietary software I guarantee you that this photo &lt;em&gt;is&lt;/em&gt; pristine... and you have to trust me!&#34;). Following the open-source philosophy, everyone should be able to try various techniques on their own,&amp;nbsp;gain knowledge and share it to the community... even better if they contribute with code improvements! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#historry&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#updates&#34;&gt;Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#bibliography&#34;&gt;Bibliography&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;History&lt;/h1&gt; &#xA;&lt;p&gt;The first version was written in 2015 using C++11 to build a command line utility with many options, but soon it turned to be too cumbersome and not much interactive. That version could be compiled with CMake after installing OpenCV, Boost and AlgLib libraries. This first proof of concept offered about 80% of planned features (see below for the full list).&lt;/p&gt; &#xA;&lt;p&gt;While also including novel algorithms, the 2017 version mainly added a Qt-based multi-window GUI to provide a better user experience. Multiple analyses could be shown on screen and a fast zoom/scroll viewer was implemented for easier image navigation. That project could be compiled with Qt Creator with Qt 5 and OpenCV 3 and covered about 70% of planned features.&lt;/p&gt; &#xA;&lt;p&gt;Fast forward to 2020 when I decided to port everything in Python (PySide2 + Matplotlib + OpenCV) for easier development and deployment. While this iteration is just begun and I have yet to port all the previous code on the new platform, I think this will be the final &#34;form&#34; of the project (as long as someone does not volunteer up to develop a nice web application!).&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m happy to share my code and get in contact with anyone interested to improve or test it, but please keep in mind that this repository is &lt;em&gt;not&lt;/em&gt; intended for distributing a final product, my aim is just to publicly track development of an &lt;em&gt;unpretentious educational tool&lt;/em&gt;, so expect bugs, unpolished code and missing features! ;)&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;This list contains the functions that the toolkit will (hopefully) provide once beta stage is reached (&lt;strong&gt;NOTE:&lt;/strong&gt; functions displayed in &lt;em&gt;italics&lt;/em&gt; inside the program are not yet implemented!).&lt;/p&gt; &#xA;&lt;h2&gt;Interface&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modern Qt-based GUI with multiple tool window management&lt;/li&gt; &#xA; &lt;li&gt;Support for many formats (JPEG, PNG, TIFF, BMP, WebP, PGM, PFM, GIF)&lt;/li&gt; &#xA; &lt;li&gt;Highly responsive image viewer with real-time pan and zoom&lt;/li&gt; &#xA; &lt;li&gt;Many state-of-the-art algorithms to try out interactively&lt;/li&gt; &#xA; &lt;li&gt;Export both visual and textual results of the analysis&lt;/li&gt; &#xA; &lt;li&gt;Extensive online help with explanations and tutorials&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Original Image&lt;/strong&gt;: display the unaltered reference image for visual inspection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File Digest&lt;/strong&gt;: retrieve physical file information, crypto and perceptual hashes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hex Editor&lt;/strong&gt;:&amp;nbsp;open an external hexadecimal editor to show and edit raw bytes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Similar Search&lt;/strong&gt;:&amp;nbsp;browse online search services to find visually similar images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Metadata&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Header Structure&lt;/strong&gt;:&amp;nbsp;dump the file header structure and display an interactive view&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EXIF Full Dump&lt;/strong&gt;:&amp;nbsp;scan through file metadata and gather all available information&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Thumbnail Analysis&lt;/strong&gt;:&amp;nbsp;extract optional embedded thumbnail and compare with original&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Geolocation Data&lt;/strong&gt;:&amp;nbsp;retrieve optional geolocation data and show it on a world map&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inspection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhancing Magnifier&lt;/strong&gt;:&amp;nbsp;magnifying glass with enhancements for better identifying forgeries&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Channel Histogram&lt;/strong&gt;: display single color channels or RGB composite interactive histogram&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Adjustments&lt;/strong&gt;:&amp;nbsp;apply standard image adjustments (brightness, hue, saturation, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reference Comparison&lt;/strong&gt;:&amp;nbsp;open a synchronized double view for comparison with another picture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Detail&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Luminance Gradient&lt;/strong&gt;: analyze horizontal/vertical brightness variations across the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Echo Edge Filter&lt;/strong&gt;: use derivative filters to reveal artificial out-of-focus regions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wavelet Threshold&lt;/strong&gt;: reconstruct image with different wavelet coefficient thresholds&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Frequency Split&lt;/strong&gt;: split image luminance into high and low frequency components&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Colors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RGB/HSV Plots&lt;/strong&gt;:&amp;nbsp;display interactive 2D and 3D plots of RGB and HSV pixel values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Space Conversion&lt;/strong&gt;:&amp;nbsp;convert RGB channels into HSV/YCbCr/Lab/Luv/CMYK/Gray spaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PCA Projection&lt;/strong&gt;:&amp;nbsp;use color PCA to project pixel onto most salient components&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pixel Statistics&lt;/strong&gt;:&amp;nbsp;compute minimum/maximum/average RGB values for every pixel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Noise&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Noise Separation&lt;/strong&gt;: estimate and extract different kind of image noise components&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Min/Max Deviation&lt;/strong&gt;: highlight pixels deviating from block-based min/max statistics&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bit Planes Values&lt;/strong&gt;: show individual bit planes to find inconsistent noise patterns&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PRNU Identification&lt;/strong&gt;: exploit sensor pattern noise introduced by different cameras&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JPEG&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quality Estimation&lt;/strong&gt;:&amp;nbsp;extract quantization&amp;nbsp;tables and estimate last saved JPEG quality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Level Analysis&lt;/strong&gt;: show pixel-level difference against fixed compression levels&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple Compression&lt;/strong&gt;: use a machine learning model to detect multiple compression&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JPEG Ghost Maps&lt;/strong&gt;:&amp;nbsp;highlight traces of different compression levels in difference images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tampering&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contrast Enhancement&lt;/strong&gt;: analyze color distribution to detect contrast enhancements&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy-Move Forgery&lt;/strong&gt;: use invariant feature descriptors for cloned area detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composite Splicing&lt;/strong&gt;: exploit DCT statistics for automatic splicing zone detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image Resampling&lt;/strong&gt;: estimate 2D pixel interpolation for detecting resampling traces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Various&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Median Filtering&lt;/strong&gt;: detect processing traces left by nonlinear median filtering&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Illuminant Map&lt;/strong&gt;: estimate scene local light direction on estimated 3D surfaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dead/Hot Pixels&lt;/strong&gt;: detect and fix dead/hot pixels caused by sensor imperfections&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stereogram Decoder&lt;/strong&gt;: decode 3D images concealed in crossed-eye autostereograms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;Here are some screenshots from the previous C++ Qt GUI (to be updated with the new version):&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/File.jpg&#34; alt=&#34;File Analysis&#34;&gt; &lt;br&gt;&lt;b&gt;File Analysis&lt;/b&gt;: Metadata, Digest and EXIF &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/Color.jpg&#34; alt=&#34;Color Analysis&#34;&gt; &lt;br&gt;&lt;b&gt;Color Analysis&lt;/b&gt;: Space Conversion, PCA Projection, Histograms and Statistics &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/Visual.jpg&#34; alt=&#34;Visual Inspection&#34;&gt; &lt;br&gt;&lt;b&gt;Visual Inspection&lt;/b&gt;: Magnifier Loupe, Image Adjustments and Evidence Comparison &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/JPEG.jpg&#34; alt=&#34;JPEG Analysis&#34;&gt; &lt;br&gt;&lt;b&gt;JPEG Analysis&lt;/b&gt;: Quantization Tables, Compression Ghosts and Error Level Analysis &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/LumaNoise.jpg&#34; alt=&#34;Luminance/Noise&#34;&gt; &lt;br&gt;&lt;b&gt;Luminance and Noise&lt;/b&gt;: Light Gradient, Echo Edge, Min/Max Deviation and SNR Consistency &lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;For more information about Python Virtual Environments, you can read &lt;a href=&#34;https://realpython.com/python-virtual-environments-a-primer/&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;[1/2] Virtual environment&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt install python3-distutils python3-dev python3-testresources subversion&#xA;$ wget https://bootstrap.pypa.io/get-pip.py&#xA;$ sudo python3 get-pip.py&#xA;$ sudo pip install virtualenv virtualenvwrapper&#xA;$ echo -e &#34;\n# Python Virtual Environments&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#34;export WORKON_HOME=$HOME/.virtualenvs&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#34;export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#34;source /usr/local/bin/virtualenvwrapper.sh&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ source ~/.bashrc&#xA;$ mkvirtualenv sq -p python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Terminal and enter &lt;code&gt;python3 --version&lt;/code&gt; to install the interpreter and other command line tools&lt;/li&gt; &#xA; &lt;li&gt;Once installed, proceed similarly to Linux installation:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;   $ wget https://bootstrap.pypa.io/get-pip.py&#xA;   $ sudo python3 get-pip.py&#xA;   $ sudo pip install virtualenv virtualenvwrapper&#xA;   $ echo -e &#34;\n# Python Virtual Environments&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ echo &#34;export WORKON_HOME=$HOME/.virtualenvs&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ echo &#34;export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ echo &#34;source /usr/local/bin/virtualenvwrapper.sh&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create a new Python 3 virtual environment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkvirtualenv sq -p python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Install &lt;code&gt;libmagic&lt;/code&gt; via &lt;code&gt;brew&lt;/code&gt; (thanks to @thmsl):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;   $ /bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;   $ brew install libmagic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download latest &lt;em&gt;Python&lt;/em&gt; setup package from &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;official site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install ensuring that &#34;Add Python to PATH&#34; and &#34;PIP installation&#34; are enabled&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;em&gt;Command Prompt&lt;/em&gt; and enter the following commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; pip install virtualenv virtualenvwrapper-win&#xA;&amp;gt; mkvirtualenv sq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conda&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install &lt;a href=&#34;https://www.anaconda.com/products/individual&#34;&gt;Anaconda&lt;/a&gt; (one can also install miniconda, no GUI but is smaller)&lt;/li&gt; &#xA; &lt;li&gt;Install Xinerama library: &lt;code&gt;sudo apt-get install libxcb-xinerama0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open a console to create a Python environment (on Windows one must start a Conda Console or &lt;code&gt;sth&lt;/code&gt; from the Start menu): &lt;code&gt;conda create --copy -n sherloq python&lt;/code&gt; [enter &lt;em&gt;Yes&lt;/em&gt; when it prompts]&lt;/li&gt; &#xA; &lt;li&gt;After install ends, type in the same console &lt;code&gt;conda activate sherloq&lt;/code&gt; to activate the environment&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;[2/2] Launch program&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository content into a local folder&lt;/li&gt; &#xA; &lt;li&gt;Change current directory to the &lt;code&gt;gui&lt;/code&gt; folder inside &lt;code&gt;sherloq&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; to install required packages (use &lt;code&gt;pip install -r requirements_win.txt&lt;/code&gt; on Windows)&lt;/li&gt; &#xA; &lt;li&gt;Launch the GUI with &lt;code&gt;python sherloq.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Updates&lt;/h1&gt; &#xA;&lt;p&gt;When a new version is released, update the local working copy using Git, SVN or manually downloading from this repository and (if necessary) update the packages in the virtual environment following &lt;a href=&#34;https://www.activestate.com/resources/quick-reads/how-to-update-all-python-packages/&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Bibliography&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;A Picture&#39;s Worth: Digital Image Analysis and Forensics&#34; (Neal Krawetz) [&lt;a href=&#34;http://blackhat.com/presentations/bh-dc-08/Krawetz/Whitepaper/bh-dc-08-krawetz-WP.pdf&#34;&gt;paper&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&#34;Noiseprint: a CNN-based camera model fingerprint&#34; (Davide Cozzolino, Luisa Verdoliva) [&lt;a href=&#34;http://www.grip.unina.it/research/83-multimedia_forensics/107-noiseprint.html&#34;&gt;website&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&#34;Exposing Digital Forgeries by Detecting Traces of Re-sampling&#34; (Alin C. Popescu and Hany Farid) [&lt;a href=&#34;https://farid.berkeley.edu/downloads/publications/sp05.pdf&#34;&gt;paper&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&#34;Two Improved Forensic Methods of Detecting Contrast Enhancement in Digital Images&#34; (Xufeng Lin, Xingjie Wei and Chang-Tsun Li) [&lt;a href=&#34;https://d1wqtxts1xzle7.cloudfront.net/45863267/Two_Improved_Forensic_Methods_of_Detecti20160522-6998-1xf1cu.pdf?1463954131=&amp;amp;response-content-disposition=inline%3B+filename%3DTwo_improved_forensic_methods_of_detecti.pdf&amp;amp;Expires=1598306603&amp;amp;Signature=dYuKum8UF2NJS~2Jz2pFObtzdjKfYIcYD4GksLVNN0izhm2k10TVPV~UHKS0DbMLXKaurZPq7uvG~qQwQwwF4JKbY0zoCqZI-p9KZsEMYhlRJrYM8nNQL0V7sHMTLd3aYjNLWup~-i1RzJcJdRqzjU9doGxRJvHdsX6tbwIxNRq3JiYyldaXei4xJSJAbX7EoUOut2uh~jsPnsAbDOIrYpwUhebut-XsN2c5MXargD2UhKxZ3Ifwo4hJvz8Bl2sPys~E8P6vDlqOeEHoeByZms6JQON97EGsCTT5GYF98rQLDbqj0NroYE2zDMGcu9IUp8VV1Fotqci1G6eELTXx6w__&amp;amp;Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA&#34;&gt;paper&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>