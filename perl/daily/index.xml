<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-16T01:42:46Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hirose31/AWS-CLIWrapper</title>
    <updated>2023-04-16T01:42:46Z</updated>
    <id>tag:github.com,2023-04-16:/hirose31/AWS-CLIWrapper</id>
    <link href="https://github.com/hirose31/AWS-CLIWrapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;package AWS::CLIWrapper;&lt;/p&gt; &#xA;&lt;p&gt;use 5.008001; use strict; use warnings;&lt;/p&gt; &#xA;&lt;p&gt;our $VERSION = &#39;1.25&#39;;&lt;/p&gt; &#xA;&lt;p&gt;use version; use JSON 2; use IPC::Cmd; use String::ShellQuote; use Carp;&lt;/p&gt; &#xA;&lt;p&gt;our $Error = { Message =&amp;gt; &#39;&#39;, Code =&amp;gt; &#39;&#39; };&lt;/p&gt; &#xA;&lt;p&gt;our $true = do { bless (my $dummy = 1), &#34;AWS::CLIWrapper::Boolean&#34; }; our $false = do { bless (my $dummy = 0), &#34;AWS::CLIWrapper::Boolean&#34; };&lt;/p&gt; &#xA;&lt;p&gt;my $AWSCLI_VERSION = undef;&lt;/p&gt; &#xA;&lt;p&gt;sub new { my($class, %param) = @_;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @opt = ();&#xA;for my $k (qw(region profile endpoint_url)) {&#xA;    if (my $v = delete $param{$k}) {&#xA;        push @opt, param2opt($k, $v);&#xA;    }&#xA;}&#xA;&#xA;my $self = bless {&#xA;    opt  =&amp;gt; \@opt,&#xA;    json =&amp;gt; JSON-&amp;gt;new,&#xA;    awscli_path =&amp;gt; $param{awscli_path} || &#39;aws&#39;,&#xA;    croak_on_error =&amp;gt; !!$param{croak_on_error},&#xA;    timeout =&amp;gt; (defined $ENV{AWS_CLIWRAPPER_TIMEOUT}) ? $ENV{AWS_CLIWRAPPER_TIMEOUT} : 30,&#xA;}, $class;&#xA;&#xA;return $self;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;}&lt;/p&gt; &#xA;&lt;p&gt;sub awscli_path { my ($self) = @_; return $self-&amp;gt;{awscli_path}; }&lt;/p&gt; &#xA;&lt;p&gt;sub awscli_version { my ($self) = @_; unless (defined $AWSCLI_VERSION) { $AWSCLI_VERSION = do { my $awscli_path = $self-&amp;gt;awscli_path; my $vs = qx($awscli_path --version 2&amp;gt;&amp;amp;1) || &#39;&#39;; my $v; if ($vs =~ m{/([0-9.]+)\s}) { $v = $1; } else { $v = 0; } version-&amp;gt;parse($v); }; } return $AWSCLI_VERSION; }&lt;/p&gt; &#xA;&lt;p&gt;sub param2opt { my($k, $v) = @_;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @v;&#xA;&#xA;$k =~ s/_/-/g;&#xA;$k = &#39;--&#39;.$k;&#xA;&#xA;my $type = ref $v;&#xA;if (! $type) {&#xA;    if ($k eq &#39;--output-file&#39;) {&#xA;        # aws s3api get-object takes a single arg for output file path&#xA;        return $v;&#xA;    } else {&#xA;        push @v, $v;&#xA;    }&#xA;} elsif ($type eq &#39;ARRAY&#39;) {&#xA;    push @v, map { ref($_) ? encode_json(_compat_kv($_)) : $_ } @$v;&#xA;} elsif ($type eq &#39;HASH&#39;) {&#xA;    push @v, encode_json(_compat_kv($v));&#xA;} elsif ($type eq &#39;AWS::CLIWrapper::Boolean&#39;) {&#xA;    if ($$v == 1) {&#xA;        return ($k);&#xA;    } else {&#xA;        return ();&#xA;    }&#xA;} else {&#xA;    push @v, $v;&#xA;}&#xA;&#xA;return ($k, @v);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;}&lt;/p&gt; &#xA;&lt;h1&gt;&amp;gt;= 0.14.0 : Key, Values, Value, Name&lt;/h1&gt; &#xA;&lt;h1&gt;&amp;lt; 0.14.0 : key, values, value, name&lt;/h1&gt; &#xA;&lt;p&gt;sub _compat_kv_uc { my $v = shift; my $type = ref $v;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if ($type &amp;amp;&amp;amp; $type eq &#39;HASH&#39;) {&#xA;    for my $hk (keys %$v) {&#xA;        if ($hk =~ /^(?:key|name|values|value)$/) {&#xA;            $v-&amp;gt;{ucfirst($hk)} = delete $v-&amp;gt;{$hk};&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;return $v;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;}&lt;/p&gt; &#xA;&lt;h1&gt;sub _compat_kv_lc {&lt;/h1&gt; &#xA;&lt;h1&gt;my $v = shift;&lt;/h1&gt; &#xA;&lt;h1&gt;my $type = ref $v;&lt;/h1&gt; &#xA;&lt;h1&gt;if ($type &amp;amp;&amp;amp; $type eq &#39;HASH&#39;) {&lt;/h1&gt; &#xA;&lt;h1&gt;for my $hk (keys %$v) {&lt;/h1&gt; &#xA;&lt;h1&gt;if ($hk =~ /^(?:Key|Name|Values|Values)$/) {&lt;/h1&gt; &#xA;&lt;h1&gt;$v-&amp;gt;{lc($hk)} = delete $v-&amp;gt;{$hk};&lt;/h1&gt; &#xA;&lt;h1&gt;}&lt;/h1&gt; &#xA;&lt;h1&gt;}&lt;/h1&gt; &#xA;&lt;h1&gt;}&lt;/h1&gt; &#xA;&lt;h1&gt;return $v;&lt;/h1&gt; &#xA;&lt;h1&gt;}&lt;/h1&gt; &#xA;&lt;h1&gt;Drop support &amp;lt; 0.14.0 for preventing execute aws command in loading this module&lt;/h1&gt; &#xA;&lt;p&gt;*_compat_kv = *_compat_kv_uc;&lt;/p&gt; &#xA;&lt;p&gt;sub json { $_[0]-&amp;gt;{json} }&lt;/p&gt; &#xA;&lt;p&gt;sub &lt;em&gt;execute { my $self = shift; my $service = shift; my $operation = shift; my @cmd = ($self-&amp;gt;awscli_path, @{$self-&amp;gt;{opt}}, $service, $operation); if ($service eq &#39;ec2&#39; &amp;amp;&amp;amp; $operation eq &#39;wait&#39;) { push(@cmd, shift @&lt;/em&gt;); } if (ref($&lt;em&gt;[0]) eq &#39;ARRAY&#39;) { # for s3 sync FROM TO push @cmd, @{ shift @&lt;/em&gt; }; } my($param, %opt) = @_;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if ($service eq &#39;ec2&#39; &amp;amp;&amp;amp; $operation eq &#39;run-instances&#39;) {&#xA;    # compat: ec2 run-instances&#xA;    # &amp;gt;= 0.14.0 : --count N or --count MIN:MAX&#xA;    # &amp;lt;  0.14.0 : --min-count N and --max-count N&#xA;    if ($self-&amp;gt;awscli_version &amp;gt;= 0.14.0) {&#xA;        my($min,$max) = (1,1);&#xA;        for my $hk (keys %$param) {&#xA;            if ($hk eq &#39;min_count&#39;) {&#xA;                $min = delete $param-&amp;gt;{min_count};&#xA;            } elsif ($hk eq &#39;max_count&#39;) {&#xA;                $max = delete $param-&amp;gt;{max_count};&#xA;            }&#xA;        }&#xA;        $param-&amp;gt;{count} = &#34;${min}:${max}&#34; unless $param-&amp;gt;{count}&#xA;    } else {&#xA;        my($min,$max);&#xA;        for my $hk (keys %$param) {&#xA;            if ($hk eq &#39;count&#39;) {&#xA;                ($min,$max) = split /:/, delete($param-&amp;gt;{count});&#xA;                $max ||= $min;&#xA;                last;&#xA;            }&#xA;        }&#xA;        $param-&amp;gt;{min_count} = $min unless $param-&amp;gt;{min_count};&#xA;        $param-&amp;gt;{max_count} = $max unless $param-&amp;gt;{max_count};&#xA;    }&#xA;} elsif ($service eq &#39;s3&#39; &amp;amp;&amp;amp; $self-&amp;gt;awscli_version &amp;gt;= 0.15.0) {&#xA;    if ($operation !~ /^(?:cp|ls|mb|mv|rb|rm|sync|website)$/) {&#xA;        return $self-&amp;gt;s3api($operation, @_);&#xA;    }&#xA;} elsif ($service eq &#39;s3api&#39; &amp;amp;&amp;amp; $self-&amp;gt;awscli_version &amp;lt; 0.15.0) {&#xA;    return $self-&amp;gt;s3($operation, @_);&#xA;}&#xA;&#xA;while (my($k, $v) = each %$param) {&#xA;    my @o = param2opt($k, $v);&#xA;    if ($service eq &#39;s3&#39; &amp;amp;&amp;amp; $k =~ /^(?:include|exclude)$/) {&#xA;        my $optk = shift @o;&#xA;        @o = map { $optk =&amp;gt; $_ } @o;&#xA;    }&#xA;    push @cmd, @o;&#xA;}&#xA;@cmd = map { shell_quote($_) } @cmd;&#xA;warn &#34;cmd: &#34;.join(&#39; &#39;, @cmd) if $ENV{AWSCLI_DEBUG};&#xA;&#xA;my $ret;&#xA;if (exists $opt{&#39;nofork&#39;} &amp;amp;&amp;amp; $opt{&#39;nofork&#39;}) {&#xA;    # better for perl debugger&#xA;    my($ok, $err, $buf, $stdout_buf, $stderr_buf) = IPC::Cmd::run(&#xA;        command =&amp;gt; join(&#39; &#39;, @cmd),&#xA;        timeout =&amp;gt; $opt{timeout} || $self-&amp;gt;{timeout},&#xA;    );&#xA;    $ret-&amp;gt;{stdout} = join &#34;&#34;, @$stdout_buf;&#xA;    $ret-&amp;gt;{err_msg} = (defined $err ? &#34;$err\n&#34; : &#34;&#34;) . join &#34;&#34;, @$stderr_buf;&#xA;    if ($ok) {&#xA;        $ret-&amp;gt;{exit_code} = 0;&#xA;        $ret-&amp;gt;{timeout} = 0;&#xA;    } else {&#xA;        $ret-&amp;gt;{exit_code} = 2;&#xA;        $ret-&amp;gt;{timeout} = 1 if defined $err &amp;amp;&amp;amp; $err =~ /^IPC::Cmd::TimeOut:/;&#xA;    }&#xA;    print &#34;&#34;;&#xA;} else {&#xA;    $ret = IPC::Cmd::run_forked(join(&#39; &#39;, @cmd), {&#xA;        timeout =&amp;gt; $opt{timeout} || $self-&amp;gt;{timeout},&#xA;    });&#xA;}&#xA;&#xA;if ($ret-&amp;gt;{exit_code} == 0 &amp;amp;&amp;amp; $ret-&amp;gt;{timeout} == 0) {&#xA;    my $json = $ret-&amp;gt;{stdout};&#xA;    warn sprintf(&#34;%s.%s[%s]: %s\n&#34;,&#xA;                 $service, $operation, &#39;OK&#39;, $json,&#xA;                ) if $ENV{AWSCLI_DEBUG};&#xA;    local $@;&#xA;    my($ret) = eval {&#xA;        # aws s3 returns null HTTP body, so failed to parse as JSON&#xA;&#xA;        # Temporary disable __DIE__ handler to prevent the&#xA;        # exception from decode() from catching by outer&#xA;        # __DIE__ handler.&#xA;        local $SIG{__DIE__} = sub {};&#xA;&#xA;        $self-&amp;gt;json-&amp;gt;decode($json);&#xA;    };&#xA;    if ($@) {&#xA;        if ($ENV{AWSCLI_DEBUG}) {&#xA;            warn $@;&#xA;            warn qq|stdout: &#34;$ret-&amp;gt;{stdout}&#34;|;&#xA;            warn qq|err_msg: &#34;$ret-&amp;gt;{err_msg}&#34;|;&#xA;        }&#xA;        return $json || &#39;success&#39;;&#xA;    }&#xA;    return $ret;&#xA;} else {&#xA;    my $stdout_str = $ret-&amp;gt;{stdout};&#xA;    if ($stdout_str &amp;amp;&amp;amp; $stdout_str =~ /^{/) {&#xA;        my $json = $stdout_str;&#xA;        warn sprintf(&#34;%s.%s[%s]: %s\n&#34;,&#xA;                     $service, $operation, &#39;NG&#39;, $json,&#xA;                    ) if $ENV{AWSCLI_DEBUG};&#xA;        my($ret) = $self-&amp;gt;json-&amp;gt;decode_prefix($json);&#xA;        if (exists $ret-&amp;gt;{Errors} &amp;amp;&amp;amp; ref($ret-&amp;gt;{Errors}) eq &#39;ARRAY&#39;) {&#xA;            $Error = $ret-&amp;gt;{Errors}[0];&#xA;        } elsif (exists $ret-&amp;gt;{Response}{Errors}{Error}) {&#xA;            # old structure (maybe botocore &amp;lt; 0.7.0)&#xA;            $Error = $ret-&amp;gt;{Response}{Errors}{Error};&#xA;        } else {&#xA;            $Error = { Message =&amp;gt; &#39;Unknown&#39;, Code =&amp;gt; &#39;Unknown&#39; };&#xA;        }&#xA;    } else {&#xA;        my $msg = $ret-&amp;gt;{err_msg};&#xA;        warn sprintf(&#34;%s.%s[%s]: %s\n&#34;,&#xA;                     $service, $operation, &#39;NG&#39;, $msg,&#xA;                    ) if $ENV{AWSCLI_DEBUG};&#xA;        $Error = { Message =&amp;gt; $msg, Code =&amp;gt; &#39;Unknown&#39; };&#xA;    }&#xA;&#xA;    croak $Error-&amp;gt;{Message} if $self-&amp;gt;{croak_on_error};&#xA;&#xA;    return;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;}&lt;/p&gt; &#xA;&lt;h1&gt;aws help | col -b | perl -ne &#39;if (/^AVAILABLE/.../^[A-Z]/) { s/^\s+o\s+// or next; chomp; next if $_ eq &#39;help&#39;; my $sn = $&lt;em&gt;; $sn =~ s/-/&lt;/em&gt;/g; printf &#34;sub %-18s { shift-&amp;gt;&lt;em&gt;execute(&#39;&#34;&#39;&#34;&#39;%s&#39;&#34;&#39;&#34;&#39;, @&lt;/em&gt;) }\n&#34;, $sn, $_ }&#39;&lt;/h1&gt; &#xA;&lt;h1&gt;aws help | col -b | perl -ne &#39;if (/^AVAILABLE/.../^[A-Z]/) { s/^\s+o\s+// or next; chomp; next if $_ eq &#39;help&#39;; my $sn = $&lt;em&gt;; $sn =~ s/-/&lt;/em&gt;/g; printf &#34;=item B&amp;lt;%s&amp;gt;($operation:Str, $param:HashRef, %%opt:Hash)\n\n&#34;, $sn}&#39;&lt;/h1&gt; &#xA;&lt;h1&gt;=item B&#xA; &lt;s3&gt;&#xA;  ($operation:Str, $path:ArrayRef, $param:HashRef, %opt:Hash)&#xA; &lt;/s3&gt;&lt;/h1&gt; &#xA;&lt;p&gt;sub accessanalyzer { shift-&amp;gt;&lt;em&gt;execute(&#39;accessanalyzer&#39;, @&lt;/em&gt;) } sub account { shift-&amp;gt;&lt;em&gt;execute(&#39;account&#39;, @&lt;/em&gt;) } sub acm { shift-&amp;gt;&lt;em&gt;execute(&#39;acm&#39;, @&lt;/em&gt;) } sub acm_pca { shift-&amp;gt;&lt;em&gt;execute(&#39;acm-pca&#39;, @&lt;/em&gt;) } sub alexaforbusiness { shift-&amp;gt;&lt;em&gt;execute(&#39;alexaforbusiness&#39;, @&lt;/em&gt;) } sub amp { shift-&amp;gt;&lt;em&gt;execute(&#39;amp&#39;, @&lt;/em&gt;) } sub amplify { shift-&amp;gt;&lt;em&gt;execute(&#39;amplify&#39;, @&lt;/em&gt;) } sub amplifybackend { shift-&amp;gt;&lt;em&gt;execute(&#39;amplifybackend&#39;, @&lt;/em&gt;) } sub amplifyuibuilder { shift-&amp;gt;&lt;em&gt;execute(&#39;amplifyuibuilder&#39;, @&lt;/em&gt;) } sub apigateway { shift-&amp;gt;&lt;em&gt;execute(&#39;apigateway&#39;, @&lt;/em&gt;) } sub apigatewaymanagementapi { shift-&amp;gt;&lt;em&gt;execute(&#39;apigatewaymanagementapi&#39;, @&lt;/em&gt;) } sub apigatewayv2 { shift-&amp;gt;&lt;em&gt;execute(&#39;apigatewayv2&#39;, @&lt;/em&gt;) } sub appconfig { shift-&amp;gt;&lt;em&gt;execute(&#39;appconfig&#39;, @&lt;/em&gt;) } sub appconfigdata { shift-&amp;gt;&lt;em&gt;execute(&#39;appconfigdata&#39;, @&lt;/em&gt;) } sub appflow { shift-&amp;gt;&lt;em&gt;execute(&#39;appflow&#39;, @&lt;/em&gt;) } sub appintegrations { shift-&amp;gt;&lt;em&gt;execute(&#39;appintegrations&#39;, @&lt;/em&gt;) } sub application_autoscaling { shift-&amp;gt;&lt;em&gt;execute(&#39;application-autoscaling&#39;, @&lt;/em&gt;) } sub application_insights { shift-&amp;gt;&lt;em&gt;execute(&#39;application-insights&#39;, @&lt;/em&gt;) } sub applicationcostprofiler { shift-&amp;gt;&lt;em&gt;execute(&#39;applicationcostprofiler&#39;, @&lt;/em&gt;) } sub appmesh { shift-&amp;gt;&lt;em&gt;execute(&#39;appmesh&#39;, @&lt;/em&gt;) } sub apprunner { shift-&amp;gt;&lt;em&gt;execute(&#39;apprunner&#39;, @&lt;/em&gt;) } sub appstream { shift-&amp;gt;&lt;em&gt;execute(&#39;appstream&#39;, @&lt;/em&gt;) } sub appsync { shift-&amp;gt;&lt;em&gt;execute(&#39;appsync&#39;, @&lt;/em&gt;) } sub arc_zonal_shift { shift-&amp;gt;&lt;em&gt;execute(&#39;arc-zonal-shift&#39;, @&lt;/em&gt;) } sub athena { shift-&amp;gt;&lt;em&gt;execute(&#39;athena&#39;, @&lt;/em&gt;) } sub auditmanager { shift-&amp;gt;&lt;em&gt;execute(&#39;auditmanager&#39;, @&lt;/em&gt;) } sub autoscaling { shift-&amp;gt;&lt;em&gt;execute(&#39;autoscaling&#39;, @&lt;/em&gt;) } sub autoscaling_plans { shift-&amp;gt;&lt;em&gt;execute(&#39;autoscaling-plans&#39;, @&lt;/em&gt;) } sub backup { shift-&amp;gt;&lt;em&gt;execute(&#39;backup&#39;, @&lt;/em&gt;) } sub backup_gateway { shift-&amp;gt;&lt;em&gt;execute(&#39;backup-gateway&#39;, @&lt;/em&gt;) } sub backupstorage { shift-&amp;gt;&lt;em&gt;execute(&#39;backupstorage&#39;, @&lt;/em&gt;) } sub batch { shift-&amp;gt;&lt;em&gt;execute(&#39;batch&#39;, @&lt;/em&gt;) } sub billingconductor { shift-&amp;gt;&lt;em&gt;execute(&#39;billingconductor&#39;, @&lt;/em&gt;) } sub braket { shift-&amp;gt;&lt;em&gt;execute(&#39;braket&#39;, @&lt;/em&gt;) } sub budgets { shift-&amp;gt;&lt;em&gt;execute(&#39;budgets&#39;, @&lt;/em&gt;) } sub ce { shift-&amp;gt;&lt;em&gt;execute(&#39;ce&#39;, @&lt;/em&gt;) } sub chime { shift-&amp;gt;&lt;em&gt;execute(&#39;chime&#39;, @&lt;/em&gt;) } sub chime_sdk_identity { shift-&amp;gt;&lt;em&gt;execute(&#39;chime-sdk-identity&#39;, @&lt;/em&gt;) } sub chime_sdk_media_pipelines { shift-&amp;gt;&lt;em&gt;execute(&#39;chime-sdk-media-pipelines&#39;, @&lt;/em&gt;) } sub chime_sdk_meetings { shift-&amp;gt;&lt;em&gt;execute(&#39;chime-sdk-meetings&#39;, @&lt;/em&gt;) } sub chime_sdk_messaging { shift-&amp;gt;&lt;em&gt;execute(&#39;chime-sdk-messaging&#39;, @&lt;/em&gt;) } sub chime_sdk_voice { shift-&amp;gt;&lt;em&gt;execute(&#39;chime-sdk-voice&#39;, @&lt;/em&gt;) } sub cleanrooms { shift-&amp;gt;&lt;em&gt;execute(&#39;cleanrooms&#39;, @&lt;/em&gt;) } sub cloud9 { shift-&amp;gt;&lt;em&gt;execute(&#39;cloud9&#39;, @&lt;/em&gt;) } sub cloudcontrol { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudcontrol&#39;, @&lt;/em&gt;) } sub clouddirectory { shift-&amp;gt;&lt;em&gt;execute(&#39;clouddirectory&#39;, @&lt;/em&gt;) } sub cloudformation { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudformation&#39;, @&lt;/em&gt;) } sub cloudfront { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudfront&#39;, @&lt;/em&gt;) } sub cloudhsm { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudhsm&#39;, @&lt;/em&gt;) } sub cloudhsmv2 { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudhsmv2&#39;, @&lt;/em&gt;) } sub cloudsearch { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudsearch&#39;, @&lt;/em&gt;) } sub cloudsearchdomain { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudsearchdomain&#39;, @&lt;/em&gt;) } sub cloudtrail { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudtrail&#39;, @&lt;/em&gt;) } sub cloudtrail_data { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudtrail-data&#39;, @&lt;/em&gt;) } sub cloudwatch { shift-&amp;gt;&lt;em&gt;execute(&#39;cloudwatch&#39;, @&lt;/em&gt;) } sub codeartifact { shift-&amp;gt;&lt;em&gt;execute(&#39;codeartifact&#39;, @&lt;/em&gt;) } sub codebuild { shift-&amp;gt;&lt;em&gt;execute(&#39;codebuild&#39;, @&lt;/em&gt;) } sub codecatalyst { shift-&amp;gt;&lt;em&gt;execute(&#39;codecatalyst&#39;, @&lt;/em&gt;) } sub codecommit { shift-&amp;gt;&lt;em&gt;execute(&#39;codecommit&#39;, @&lt;/em&gt;) } sub codeguru_reviewer { shift-&amp;gt;&lt;em&gt;execute(&#39;codeguru-reviewer&#39;, @&lt;/em&gt;) } sub codeguruprofiler { shift-&amp;gt;&lt;em&gt;execute(&#39;codeguruprofiler&#39;, @&lt;/em&gt;) } sub codepipeline { shift-&amp;gt;&lt;em&gt;execute(&#39;codepipeline&#39;, @&lt;/em&gt;) } sub codestar { shift-&amp;gt;&lt;em&gt;execute(&#39;codestar&#39;, @&lt;/em&gt;) } sub codestar_connections { shift-&amp;gt;&lt;em&gt;execute(&#39;codestar-connections&#39;, @&lt;/em&gt;) } sub codestar_notifications { shift-&amp;gt;&lt;em&gt;execute(&#39;codestar-notifications&#39;, @&lt;/em&gt;) } sub cognito_identity { shift-&amp;gt;&lt;em&gt;execute(&#39;cognito-identity&#39;, @&lt;/em&gt;) } sub cognito_idp { shift-&amp;gt;&lt;em&gt;execute(&#39;cognito-idp&#39;, @&lt;/em&gt;) } sub cognito_sync { shift-&amp;gt;&lt;em&gt;execute(&#39;cognito-sync&#39;, @&lt;/em&gt;) } sub comprehend { shift-&amp;gt;&lt;em&gt;execute(&#39;comprehend&#39;, @&lt;/em&gt;) } sub comprehendmedical { shift-&amp;gt;&lt;em&gt;execute(&#39;comprehendmedical&#39;, @&lt;/em&gt;) } sub compute_optimizer { shift-&amp;gt;&lt;em&gt;execute(&#39;compute-optimizer&#39;, @&lt;/em&gt;) } sub configservice { shift-&amp;gt;&lt;em&gt;execute(&#39;configservice&#39;, @&lt;/em&gt;) } sub configure { shift-&amp;gt;&lt;em&gt;execute(&#39;configure&#39;, @&lt;/em&gt;) } sub connect { shift-&amp;gt;&lt;em&gt;execute(&#39;connect&#39;, @&lt;/em&gt;) } sub connect_contact_lens { shift-&amp;gt;&lt;em&gt;execute(&#39;connect-contact-lens&#39;, @&lt;/em&gt;) } sub connectcampaigns { shift-&amp;gt;&lt;em&gt;execute(&#39;connectcampaigns&#39;, @&lt;/em&gt;) } sub connectcases { shift-&amp;gt;&lt;em&gt;execute(&#39;connectcases&#39;, @&lt;/em&gt;) } sub connectparticipant { shift-&amp;gt;&lt;em&gt;execute(&#39;connectparticipant&#39;, @&lt;/em&gt;) } sub controltower { shift-&amp;gt;&lt;em&gt;execute(&#39;controltower&#39;, @&lt;/em&gt;) } sub cur { shift-&amp;gt;&lt;em&gt;execute(&#39;cur&#39;, @&lt;/em&gt;) } sub customer_profiles { shift-&amp;gt;&lt;em&gt;execute(&#39;customer-profiles&#39;, @&lt;/em&gt;) } sub databrew { shift-&amp;gt;&lt;em&gt;execute(&#39;databrew&#39;, @&lt;/em&gt;) } sub dataexchange { shift-&amp;gt;&lt;em&gt;execute(&#39;dataexchange&#39;, @&lt;/em&gt;) } sub datapipeline { shift-&amp;gt;&lt;em&gt;execute(&#39;datapipeline&#39;, @&lt;/em&gt;) } sub datasync { shift-&amp;gt;&lt;em&gt;execute(&#39;datasync&#39;, @&lt;/em&gt;) } sub dax { shift-&amp;gt;&lt;em&gt;execute(&#39;dax&#39;, @&lt;/em&gt;) } sub deploy { shift-&amp;gt;&lt;em&gt;execute(&#39;deploy&#39;, @&lt;/em&gt;) } sub detective { shift-&amp;gt;&lt;em&gt;execute(&#39;detective&#39;, @&lt;/em&gt;) } sub devicefarm { shift-&amp;gt;&lt;em&gt;execute(&#39;devicefarm&#39;, @&lt;/em&gt;) } sub devops_guru { shift-&amp;gt;&lt;em&gt;execute(&#39;devops-guru&#39;, @&lt;/em&gt;) } sub directconnect { shift-&amp;gt;&lt;em&gt;execute(&#39;directconnect&#39;, @&lt;/em&gt;) } sub discovery { shift-&amp;gt;&lt;em&gt;execute(&#39;discovery&#39;, @&lt;/em&gt;) } sub dlm { shift-&amp;gt;&lt;em&gt;execute(&#39;dlm&#39;, @&lt;/em&gt;) } sub dms { shift-&amp;gt;&lt;em&gt;execute(&#39;dms&#39;, @&lt;/em&gt;) } sub docdb { shift-&amp;gt;&lt;em&gt;execute(&#39;docdb&#39;, @&lt;/em&gt;) } sub docdb_elastic { shift-&amp;gt;&lt;em&gt;execute(&#39;docdb-elastic&#39;, @&lt;/em&gt;) } sub drs { shift-&amp;gt;&lt;em&gt;execute(&#39;drs&#39;, @&lt;/em&gt;) } sub ds { shift-&amp;gt;&lt;em&gt;execute(&#39;ds&#39;, @&lt;/em&gt;) } sub dynamodb { shift-&amp;gt;&lt;em&gt;execute(&#39;dynamodb&#39;, @&lt;/em&gt;) } sub dynamodbstreams { shift-&amp;gt;&lt;em&gt;execute(&#39;dynamodbstreams&#39;, @&lt;/em&gt;) } sub ebs { shift-&amp;gt;&lt;em&gt;execute(&#39;ebs&#39;, @&lt;/em&gt;) } sub ec2 { shift-&amp;gt;&lt;em&gt;execute(&#39;ec2&#39;, @&lt;/em&gt;) } sub ec2_instance_connect { shift-&amp;gt;&lt;em&gt;execute(&#39;ec2-instance-connect&#39;, @&lt;/em&gt;) } sub ecr { shift-&amp;gt;&lt;em&gt;execute(&#39;ecr&#39;, @&lt;/em&gt;) } sub ecr_public { shift-&amp;gt;&lt;em&gt;execute(&#39;ecr-public&#39;, @&lt;/em&gt;) } sub ecs { shift-&amp;gt;&lt;em&gt;execute(&#39;ecs&#39;, @&lt;/em&gt;) } sub efs { shift-&amp;gt;&lt;em&gt;execute(&#39;efs&#39;, @&lt;/em&gt;) } sub eks { shift-&amp;gt;&lt;em&gt;execute(&#39;eks&#39;, @&lt;/em&gt;) } sub elastic_inference { shift-&amp;gt;&lt;em&gt;execute(&#39;elastic-inference&#39;, @&lt;/em&gt;) } sub elasticache { shift-&amp;gt;&lt;em&gt;execute(&#39;elasticache&#39;, @&lt;/em&gt;) } sub elasticbeanstalk { shift-&amp;gt;&lt;em&gt;execute(&#39;elasticbeanstalk&#39;, @&lt;/em&gt;) } sub elastictranscoder { shift-&amp;gt;&lt;em&gt;execute(&#39;elastictranscoder&#39;, @&lt;/em&gt;) } sub elb { shift-&amp;gt;&lt;em&gt;execute(&#39;elb&#39;, @&lt;/em&gt;) } sub elbv2 { shift-&amp;gt;&lt;em&gt;execute(&#39;elbv2&#39;, @&lt;/em&gt;) } sub emr { shift-&amp;gt;&lt;em&gt;execute(&#39;emr&#39;, @&lt;/em&gt;) } sub emr_containers { shift-&amp;gt;&lt;em&gt;execute(&#39;emr-containers&#39;, @&lt;/em&gt;) } sub emr_serverless { shift-&amp;gt;&lt;em&gt;execute(&#39;emr-serverless&#39;, @&lt;/em&gt;) } sub es { shift-&amp;gt;&lt;em&gt;execute(&#39;es&#39;, @&lt;/em&gt;) } sub events { shift-&amp;gt;&lt;em&gt;execute(&#39;events&#39;, @&lt;/em&gt;) } sub evidently { shift-&amp;gt;&lt;em&gt;execute(&#39;evidently&#39;, @&lt;/em&gt;) } sub finspace { shift-&amp;gt;&lt;em&gt;execute(&#39;finspace&#39;, @&lt;/em&gt;) } sub finspace_data { shift-&amp;gt;&lt;em&gt;execute(&#39;finspace-data&#39;, @&lt;/em&gt;) } sub firehose { shift-&amp;gt;&lt;em&gt;execute(&#39;firehose&#39;, @&lt;/em&gt;) } sub fis { shift-&amp;gt;&lt;em&gt;execute(&#39;fis&#39;, @&lt;/em&gt;) } sub fms { shift-&amp;gt;&lt;em&gt;execute(&#39;fms&#39;, @&lt;/em&gt;) } sub forecast { shift-&amp;gt;&lt;em&gt;execute(&#39;forecast&#39;, @&lt;/em&gt;) } sub forecastquery { shift-&amp;gt;&lt;em&gt;execute(&#39;forecastquery&#39;, @&lt;/em&gt;) } sub frauddetector { shift-&amp;gt;&lt;em&gt;execute(&#39;frauddetector&#39;, @&lt;/em&gt;) } sub fsx { shift-&amp;gt;&lt;em&gt;execute(&#39;fsx&#39;, @&lt;/em&gt;) } sub gamelift { shift-&amp;gt;&lt;em&gt;execute(&#39;gamelift&#39;, @&lt;/em&gt;) } sub gamesparks { shift-&amp;gt;&lt;em&gt;execute(&#39;gamesparks&#39;, @&lt;/em&gt;) } sub glacier { shift-&amp;gt;&lt;em&gt;execute(&#39;glacier&#39;, @&lt;/em&gt;) } sub globalaccelerator { shift-&amp;gt;&lt;em&gt;execute(&#39;globalaccelerator&#39;, @&lt;/em&gt;) } sub glue { shift-&amp;gt;&lt;em&gt;execute(&#39;glue&#39;, @&lt;/em&gt;) } sub grafana { shift-&amp;gt;&lt;em&gt;execute(&#39;grafana&#39;, @&lt;/em&gt;) } sub greengrass { shift-&amp;gt;&lt;em&gt;execute(&#39;greengrass&#39;, @&lt;/em&gt;) } sub greengrassv2 { shift-&amp;gt;&lt;em&gt;execute(&#39;greengrassv2&#39;, @&lt;/em&gt;) } sub groundstation { shift-&amp;gt;&lt;em&gt;execute(&#39;groundstation&#39;, @&lt;/em&gt;) } sub guardduty { shift-&amp;gt;&lt;em&gt;execute(&#39;guardduty&#39;, @&lt;/em&gt;) } sub health { shift-&amp;gt;&lt;em&gt;execute(&#39;health&#39;, @&lt;/em&gt;) } sub healthlake { shift-&amp;gt;&lt;em&gt;execute(&#39;healthlake&#39;, @&lt;/em&gt;) } sub history { shift-&amp;gt;&lt;em&gt;execute(&#39;history&#39;, @&lt;/em&gt;) } sub honeycode { shift-&amp;gt;&lt;em&gt;execute(&#39;honeycode&#39;, @&lt;/em&gt;) } sub iam { shift-&amp;gt;&lt;em&gt;execute(&#39;iam&#39;, @&lt;/em&gt;) } sub identitystore { shift-&amp;gt;&lt;em&gt;execute(&#39;identitystore&#39;, @&lt;/em&gt;) } sub imagebuilder { shift-&amp;gt;&lt;em&gt;execute(&#39;imagebuilder&#39;, @&lt;/em&gt;) } sub importexport { shift-&amp;gt;&lt;em&gt;execute(&#39;importexport&#39;, @&lt;/em&gt;) } sub inspector { shift-&amp;gt;&lt;em&gt;execute(&#39;inspector&#39;, @&lt;/em&gt;) } sub inspector2 { shift-&amp;gt;&lt;em&gt;execute(&#39;inspector2&#39;, @&lt;/em&gt;) } sub internetmonitor { shift-&amp;gt;&lt;em&gt;execute(&#39;internetmonitor&#39;, @&lt;/em&gt;) } sub iot { shift-&amp;gt;&lt;em&gt;execute(&#39;iot&#39;, @&lt;/em&gt;) } sub iot_data { shift-&amp;gt;&lt;em&gt;execute(&#39;iot-data&#39;, @&lt;/em&gt;) } sub iot_jobs_data { shift-&amp;gt;&lt;em&gt;execute(&#39;iot-jobs-data&#39;, @&lt;/em&gt;) } sub iot_roborunner { shift-&amp;gt;&lt;em&gt;execute(&#39;iot-roborunner&#39;, @&lt;/em&gt;) } sub iot1click_devices { shift-&amp;gt;&lt;em&gt;execute(&#39;iot1click-devices&#39;, @&lt;/em&gt;) } sub iot1click_projects { shift-&amp;gt;&lt;em&gt;execute(&#39;iot1click-projects&#39;, @&lt;/em&gt;) } sub iotanalytics { shift-&amp;gt;&lt;em&gt;execute(&#39;iotanalytics&#39;, @&lt;/em&gt;) } sub iotdeviceadvisor { shift-&amp;gt;&lt;em&gt;execute(&#39;iotdeviceadvisor&#39;, @&lt;/em&gt;) } sub iotevents { shift-&amp;gt;&lt;em&gt;execute(&#39;iotevents&#39;, @&lt;/em&gt;) } sub iotevents_data { shift-&amp;gt;&lt;em&gt;execute(&#39;iotevents-data&#39;, @&lt;/em&gt;) } sub iotfleethub { shift-&amp;gt;&lt;em&gt;execute(&#39;iotfleethub&#39;, @&lt;/em&gt;) } sub iotfleetwise { shift-&amp;gt;&lt;em&gt;execute(&#39;iotfleetwise&#39;, @&lt;/em&gt;) } sub iotsecuretunneling { shift-&amp;gt;&lt;em&gt;execute(&#39;iotsecuretunneling&#39;, @&lt;/em&gt;) } sub iotsitewise { shift-&amp;gt;&lt;em&gt;execute(&#39;iotsitewise&#39;, @&lt;/em&gt;) } sub iotthingsgraph { shift-&amp;gt;&lt;em&gt;execute(&#39;iotthingsgraph&#39;, @&lt;/em&gt;) } sub iottwinmaker { shift-&amp;gt;&lt;em&gt;execute(&#39;iottwinmaker&#39;, @&lt;/em&gt;) } sub iotwireless { shift-&amp;gt;&lt;em&gt;execute(&#39;iotwireless&#39;, @&lt;/em&gt;) } sub ivs { shift-&amp;gt;&lt;em&gt;execute(&#39;ivs&#39;, @&lt;/em&gt;) } sub ivschat { shift-&amp;gt;&lt;em&gt;execute(&#39;ivschat&#39;, @&lt;/em&gt;) } sub kafka { shift-&amp;gt;&lt;em&gt;execute(&#39;kafka&#39;, @&lt;/em&gt;) } sub kafkaconnect { shift-&amp;gt;&lt;em&gt;execute(&#39;kafkaconnect&#39;, @&lt;/em&gt;) } sub kendra { shift-&amp;gt;&lt;em&gt;execute(&#39;kendra&#39;, @&lt;/em&gt;) } sub kendra_ranking { shift-&amp;gt;&lt;em&gt;execute(&#39;kendra-ranking&#39;, @&lt;/em&gt;) } sub keyspaces { shift-&amp;gt;&lt;em&gt;execute(&#39;keyspaces&#39;, @&lt;/em&gt;) } sub kinesis { shift-&amp;gt;&lt;em&gt;execute(&#39;kinesis&#39;, @&lt;/em&gt;) } sub kinesis_video_archived_media { shift-&amp;gt;&lt;em&gt;execute(&#39;kinesis-video-archived-media&#39;, @&lt;/em&gt;) } sub kinesis_video_media { shift-&amp;gt;&lt;em&gt;execute(&#39;kinesis-video-media&#39;, @&lt;/em&gt;) } sub kinesis_video_signaling { shift-&amp;gt;&lt;em&gt;execute(&#39;kinesis-video-signaling&#39;, @&lt;/em&gt;) } sub kinesis_video_webrtc_storage { shift-&amp;gt;&lt;em&gt;execute(&#39;kinesis-video-webrtc-storage&#39;, @&lt;/em&gt;) } sub kinesisanalytics { shift-&amp;gt;&lt;em&gt;execute(&#39;kinesisanalytics&#39;, @&lt;/em&gt;) } sub kinesisanalyticsv2 { shift-&amp;gt;&lt;em&gt;execute(&#39;kinesisanalyticsv2&#39;, @&lt;/em&gt;) } sub kinesisvideo { shift-&amp;gt;&lt;em&gt;execute(&#39;kinesisvideo&#39;, @&lt;/em&gt;) } sub kms { shift-&amp;gt;&lt;em&gt;execute(&#39;kms&#39;, @&lt;/em&gt;) } sub lakeformation { shift-&amp;gt;&lt;em&gt;execute(&#39;lakeformation&#39;, @&lt;/em&gt;) } sub lambda { shift-&amp;gt;&lt;em&gt;execute(&#39;lambda&#39;, @&lt;/em&gt;) } sub lex_models { shift-&amp;gt;&lt;em&gt;execute(&#39;lex-models&#39;, @&lt;/em&gt;) } sub lex_runtime { shift-&amp;gt;&lt;em&gt;execute(&#39;lex-runtime&#39;, @&lt;/em&gt;) } sub lexv2_models { shift-&amp;gt;&lt;em&gt;execute(&#39;lexv2-models&#39;, @&lt;/em&gt;) } sub lexv2_runtime { shift-&amp;gt;&lt;em&gt;execute(&#39;lexv2-runtime&#39;, @&lt;/em&gt;) } sub license_manager { shift-&amp;gt;&lt;em&gt;execute(&#39;license-manager&#39;, @&lt;/em&gt;) } sub license_manager_linux_subscriptions { shift-&amp;gt;&lt;em&gt;execute(&#39;license-manager-linux-subscriptions&#39;, @&lt;/em&gt;) } sub license_manager_user_subscriptions { shift-&amp;gt;&lt;em&gt;execute(&#39;license-manager-user-subscriptions&#39;, @&lt;/em&gt;) } sub lightsail { shift-&amp;gt;&lt;em&gt;execute(&#39;lightsail&#39;, @&lt;/em&gt;) } sub location { shift-&amp;gt;&lt;em&gt;execute(&#39;location&#39;, @&lt;/em&gt;) } sub logs { shift-&amp;gt;&lt;em&gt;execute(&#39;logs&#39;, @&lt;/em&gt;) } sub lookoutequipment { shift-&amp;gt;&lt;em&gt;execute(&#39;lookoutequipment&#39;, @&lt;/em&gt;) } sub lookoutmetrics { shift-&amp;gt;&lt;em&gt;execute(&#39;lookoutmetrics&#39;, @&lt;/em&gt;) } sub lookoutvision { shift-&amp;gt;&lt;em&gt;execute(&#39;lookoutvision&#39;, @&lt;/em&gt;) } sub m2 { shift-&amp;gt;&lt;em&gt;execute(&#39;m2&#39;, @&lt;/em&gt;) } sub machinelearning { shift-&amp;gt;&lt;em&gt;execute(&#39;machinelearning&#39;, @&lt;/em&gt;) } sub macie { shift-&amp;gt;&lt;em&gt;execute(&#39;macie&#39;, @&lt;/em&gt;) } sub macie2 { shift-&amp;gt;&lt;em&gt;execute(&#39;macie2&#39;, @&lt;/em&gt;) } sub managedblockchain { shift-&amp;gt;&lt;em&gt;execute(&#39;managedblockchain&#39;, @&lt;/em&gt;) } sub marketplace_catalog { shift-&amp;gt;&lt;em&gt;execute(&#39;marketplace-catalog&#39;, @&lt;/em&gt;) } sub marketplace_entitlement { shift-&amp;gt;&lt;em&gt;execute(&#39;marketplace-entitlement&#39;, @&lt;/em&gt;) } sub marketplacecommerceanalytics { shift-&amp;gt;&lt;em&gt;execute(&#39;marketplacecommerceanalytics&#39;, @&lt;/em&gt;) } sub mediaconnect { shift-&amp;gt;&lt;em&gt;execute(&#39;mediaconnect&#39;, @&lt;/em&gt;) } sub mediaconvert { shift-&amp;gt;&lt;em&gt;execute(&#39;mediaconvert&#39;, @&lt;/em&gt;) } sub medialive { shift-&amp;gt;&lt;em&gt;execute(&#39;medialive&#39;, @&lt;/em&gt;) } sub mediapackage { shift-&amp;gt;&lt;em&gt;execute(&#39;mediapackage&#39;, @&lt;/em&gt;) } sub mediapackage_vod { shift-&amp;gt;&lt;em&gt;execute(&#39;mediapackage-vod&#39;, @&lt;/em&gt;) } sub mediastore { shift-&amp;gt;&lt;em&gt;execute(&#39;mediastore&#39;, @&lt;/em&gt;) } sub mediastore_data { shift-&amp;gt;&lt;em&gt;execute(&#39;mediastore-data&#39;, @&lt;/em&gt;) } sub mediatailor { shift-&amp;gt;&lt;em&gt;execute(&#39;mediatailor&#39;, @&lt;/em&gt;) } sub memorydb { shift-&amp;gt;&lt;em&gt;execute(&#39;memorydb&#39;, @&lt;/em&gt;) } sub meteringmarketplace { shift-&amp;gt;&lt;em&gt;execute(&#39;meteringmarketplace&#39;, @&lt;/em&gt;) } sub mgh { shift-&amp;gt;&lt;em&gt;execute(&#39;mgh&#39;, @&lt;/em&gt;) } sub mgn { shift-&amp;gt;&lt;em&gt;execute(&#39;mgn&#39;, @&lt;/em&gt;) } sub migration_hub_refactor_spaces { shift-&amp;gt;&lt;em&gt;execute(&#39;migration-hub-refactor-spaces&#39;, @&lt;/em&gt;) } sub migrationhub_config { shift-&amp;gt;&lt;em&gt;execute(&#39;migrationhub-config&#39;, @&lt;/em&gt;) } sub migrationhuborchestrator { shift-&amp;gt;&lt;em&gt;execute(&#39;migrationhuborchestrator&#39;, @&lt;/em&gt;) } sub migrationhubstrategy { shift-&amp;gt;&lt;em&gt;execute(&#39;migrationhubstrategy&#39;, @&lt;/em&gt;) } sub mobile { shift-&amp;gt;&lt;em&gt;execute(&#39;mobile&#39;, @&lt;/em&gt;) } sub mq { shift-&amp;gt;&lt;em&gt;execute(&#39;mq&#39;, @&lt;/em&gt;) } sub mturk { shift-&amp;gt;&lt;em&gt;execute(&#39;mturk&#39;, @&lt;/em&gt;) } sub mwaa { shift-&amp;gt;&lt;em&gt;execute(&#39;mwaa&#39;, @&lt;/em&gt;) } sub neptune { shift-&amp;gt;&lt;em&gt;execute(&#39;neptune&#39;, @&lt;/em&gt;) } sub network_firewall { shift-&amp;gt;&lt;em&gt;execute(&#39;network-firewall&#39;, @&lt;/em&gt;) } sub networkmanager { shift-&amp;gt;&lt;em&gt;execute(&#39;networkmanager&#39;, @&lt;/em&gt;) } sub nimble { shift-&amp;gt;&lt;em&gt;execute(&#39;nimble&#39;, @&lt;/em&gt;) } sub oam { shift-&amp;gt;&lt;em&gt;execute(&#39;oam&#39;, @&lt;/em&gt;) } sub omics { shift-&amp;gt;&lt;em&gt;execute(&#39;omics&#39;, @&lt;/em&gt;) } sub opensearch { shift-&amp;gt;&lt;em&gt;execute(&#39;opensearch&#39;, @&lt;/em&gt;) } sub opensearchserverless { shift-&amp;gt;&lt;em&gt;execute(&#39;opensearchserverless&#39;, @&lt;/em&gt;) } sub opsworks { shift-&amp;gt;&lt;em&gt;execute(&#39;opsworks&#39;, @&lt;/em&gt;) } sub opsworks_cm { shift-&amp;gt;&lt;em&gt;execute(&#39;opsworks-cm&#39;, @&lt;/em&gt;) } sub organizations { shift-&amp;gt;&lt;em&gt;execute(&#39;organizations&#39;, @&lt;/em&gt;) } sub outposts { shift-&amp;gt;&lt;em&gt;execute(&#39;outposts&#39;, @&lt;/em&gt;) } sub panorama { shift-&amp;gt;&lt;em&gt;execute(&#39;panorama&#39;, @&lt;/em&gt;) } sub personalize { shift-&amp;gt;&lt;em&gt;execute(&#39;personalize&#39;, @&lt;/em&gt;) } sub personalize_events { shift-&amp;gt;&lt;em&gt;execute(&#39;personalize-events&#39;, @&lt;/em&gt;) } sub personalize_runtime { shift-&amp;gt;&lt;em&gt;execute(&#39;personalize-runtime&#39;, @&lt;/em&gt;) } sub pi { shift-&amp;gt;&lt;em&gt;execute(&#39;pi&#39;, @&lt;/em&gt;) } sub pinpoint { shift-&amp;gt;&lt;em&gt;execute(&#39;pinpoint&#39;, @&lt;/em&gt;) } sub pinpoint_email { shift-&amp;gt;&lt;em&gt;execute(&#39;pinpoint-email&#39;, @&lt;/em&gt;) } sub pinpoint_sms_voice { shift-&amp;gt;&lt;em&gt;execute(&#39;pinpoint-sms-voice&#39;, @&lt;/em&gt;) } sub pinpoint_sms_voice_v2 { shift-&amp;gt;&lt;em&gt;execute(&#39;pinpoint-sms-voice-v2&#39;, @&lt;/em&gt;) } sub pipes { shift-&amp;gt;&lt;em&gt;execute(&#39;pipes&#39;, @&lt;/em&gt;) } sub polly { shift-&amp;gt;&lt;em&gt;execute(&#39;polly&#39;, @&lt;/em&gt;) } sub pricing { shift-&amp;gt;&lt;em&gt;execute(&#39;pricing&#39;, @&lt;/em&gt;) } sub privatenetworks { shift-&amp;gt;&lt;em&gt;execute(&#39;privatenetworks&#39;, @&lt;/em&gt;) } sub proton { shift-&amp;gt;&lt;em&gt;execute(&#39;proton&#39;, @&lt;/em&gt;) } sub qldb { shift-&amp;gt;&lt;em&gt;execute(&#39;qldb&#39;, @&lt;/em&gt;) } sub qldb_session { shift-&amp;gt;&lt;em&gt;execute(&#39;qldb-session&#39;, @&lt;/em&gt;) } sub quicksight { shift-&amp;gt;&lt;em&gt;execute(&#39;quicksight&#39;, @&lt;/em&gt;) } sub ram { shift-&amp;gt;&lt;em&gt;execute(&#39;ram&#39;, @&lt;/em&gt;) } sub rbin { shift-&amp;gt;&lt;em&gt;execute(&#39;rbin&#39;, @&lt;/em&gt;) } sub rds { shift-&amp;gt;&lt;em&gt;execute(&#39;rds&#39;, @&lt;/em&gt;) } sub rds_data { shift-&amp;gt;&lt;em&gt;execute(&#39;rds-data&#39;, @&lt;/em&gt;) } sub redshift { shift-&amp;gt;&lt;em&gt;execute(&#39;redshift&#39;, @&lt;/em&gt;) } sub redshift_data { shift-&amp;gt;&lt;em&gt;execute(&#39;redshift-data&#39;, @&lt;/em&gt;) } sub redshift_serverless { shift-&amp;gt;&lt;em&gt;execute(&#39;redshift-serverless&#39;, @&lt;/em&gt;) } sub rekognition { shift-&amp;gt;&lt;em&gt;execute(&#39;rekognition&#39;, @&lt;/em&gt;) } sub resiliencehub { shift-&amp;gt;&lt;em&gt;execute(&#39;resiliencehub&#39;, @&lt;/em&gt;) } sub resource_explorer_2 { shift-&amp;gt;&lt;em&gt;execute(&#39;resource-explorer-2&#39;, @&lt;/em&gt;) } sub resource_groups { shift-&amp;gt;&lt;em&gt;execute(&#39;resource-groups&#39;, @&lt;/em&gt;) } sub resourcegroupstaggingapi { shift-&amp;gt;&lt;em&gt;execute(&#39;resourcegroupstaggingapi&#39;, @&lt;/em&gt;) } sub robomaker { shift-&amp;gt;&lt;em&gt;execute(&#39;robomaker&#39;, @&lt;/em&gt;) } sub rolesanywhere { shift-&amp;gt;&lt;em&gt;execute(&#39;rolesanywhere&#39;, @&lt;/em&gt;) } sub route53 { shift-&amp;gt;&lt;em&gt;execute(&#39;route53&#39;, @&lt;/em&gt;) } sub route53_recovery_cluster { shift-&amp;gt;&lt;em&gt;execute(&#39;route53-recovery-cluster&#39;, @&lt;/em&gt;) } sub route53_recovery_control_config { shift-&amp;gt;&lt;em&gt;execute(&#39;route53-recovery-control-config&#39;, @&lt;/em&gt;) } sub route53_recovery_readiness { shift-&amp;gt;&lt;em&gt;execute(&#39;route53-recovery-readiness&#39;, @&lt;/em&gt;) } sub route53domains { shift-&amp;gt;&lt;em&gt;execute(&#39;route53domains&#39;, @&lt;/em&gt;) } sub route53resolver { shift-&amp;gt;&lt;em&gt;execute(&#39;route53resolver&#39;, @&lt;/em&gt;) } sub rum { shift-&amp;gt;&lt;em&gt;execute(&#39;rum&#39;, @&lt;/em&gt;) } sub s3 { shift-&amp;gt;&lt;em&gt;execute(&#39;s3&#39;, @&lt;/em&gt;) } sub s3api { shift-&amp;gt;&lt;em&gt;execute(&#39;s3api&#39;, @&lt;/em&gt;) } sub s3control { shift-&amp;gt;&lt;em&gt;execute(&#39;s3control&#39;, @&lt;/em&gt;) } sub s3outposts { shift-&amp;gt;&lt;em&gt;execute(&#39;s3outposts&#39;, @&lt;/em&gt;) } sub sagemaker { shift-&amp;gt;&lt;em&gt;execute(&#39;sagemaker&#39;, @&lt;/em&gt;) } sub sagemaker_a2i_runtime { shift-&amp;gt;&lt;em&gt;execute(&#39;sagemaker-a2i-runtime&#39;, @&lt;/em&gt;) } sub sagemaker_edge { shift-&amp;gt;&lt;em&gt;execute(&#39;sagemaker-edge&#39;, @&lt;/em&gt;) } sub sagemaker_featurestore_runtime { shift-&amp;gt;&lt;em&gt;execute(&#39;sagemaker-featurestore-runtime&#39;, @&lt;/em&gt;) } sub sagemaker_geospatial { shift-&amp;gt;&lt;em&gt;execute(&#39;sagemaker-geospatial&#39;, @&lt;/em&gt;) } sub sagemaker_metrics { shift-&amp;gt;&lt;em&gt;execute(&#39;sagemaker-metrics&#39;, @&lt;/em&gt;) } sub sagemaker_runtime { shift-&amp;gt;&lt;em&gt;execute(&#39;sagemaker-runtime&#39;, @&lt;/em&gt;) } sub savingsplans { shift-&amp;gt;&lt;em&gt;execute(&#39;savingsplans&#39;, @&lt;/em&gt;) } sub scheduler { shift-&amp;gt;&lt;em&gt;execute(&#39;scheduler&#39;, @&lt;/em&gt;) } sub schemas { shift-&amp;gt;&lt;em&gt;execute(&#39;schemas&#39;, @&lt;/em&gt;) } sub sdb { shift-&amp;gt;&lt;em&gt;execute(&#39;sdb&#39;, @&lt;/em&gt;) } sub secretsmanager { shift-&amp;gt;&lt;em&gt;execute(&#39;secretsmanager&#39;, @&lt;/em&gt;) } sub securityhub { shift-&amp;gt;&lt;em&gt;execute(&#39;securityhub&#39;, @&lt;/em&gt;) } sub securitylake { shift-&amp;gt;&lt;em&gt;execute(&#39;securitylake&#39;, @&lt;/em&gt;) } sub serverlessrepo { shift-&amp;gt;&lt;em&gt;execute(&#39;serverlessrepo&#39;, @&lt;/em&gt;) } sub service_quotas { shift-&amp;gt;&lt;em&gt;execute(&#39;service-quotas&#39;, @&lt;/em&gt;) } sub servicecatalog { shift-&amp;gt;&lt;em&gt;execute(&#39;servicecatalog&#39;, @&lt;/em&gt;) } sub servicecatalog_appregistry { shift-&amp;gt;&lt;em&gt;execute(&#39;servicecatalog-appregistry&#39;, @&lt;/em&gt;) } sub servicediscovery { shift-&amp;gt;&lt;em&gt;execute(&#39;servicediscovery&#39;, @&lt;/em&gt;) } sub ses { shift-&amp;gt;&lt;em&gt;execute(&#39;ses&#39;, @&lt;/em&gt;) } sub sesv2 { shift-&amp;gt;&lt;em&gt;execute(&#39;sesv2&#39;, @&lt;/em&gt;) } sub shield { shift-&amp;gt;&lt;em&gt;execute(&#39;shield&#39;, @&lt;/em&gt;) } sub signer { shift-&amp;gt;&lt;em&gt;execute(&#39;signer&#39;, @&lt;/em&gt;) } sub simspaceweaver { shift-&amp;gt;&lt;em&gt;execute(&#39;simspaceweaver&#39;, @&lt;/em&gt;) } sub sms { shift-&amp;gt;&lt;em&gt;execute(&#39;sms&#39;, @&lt;/em&gt;) } sub snow_device_management { shift-&amp;gt;&lt;em&gt;execute(&#39;snow-device-management&#39;, @&lt;/em&gt;) } sub snowball { shift-&amp;gt;&lt;em&gt;execute(&#39;snowball&#39;, @&lt;/em&gt;) } sub sns { shift-&amp;gt;&lt;em&gt;execute(&#39;sns&#39;, @&lt;/em&gt;) } sub sqs { shift-&amp;gt;&lt;em&gt;execute(&#39;sqs&#39;, @&lt;/em&gt;) } sub ssm { shift-&amp;gt;&lt;em&gt;execute(&#39;ssm&#39;, @&lt;/em&gt;) } sub ssm_contacts { shift-&amp;gt;&lt;em&gt;execute(&#39;ssm-contacts&#39;, @&lt;/em&gt;) } sub ssm_incidents { shift-&amp;gt;&lt;em&gt;execute(&#39;ssm-incidents&#39;, @&lt;/em&gt;) } sub ssm_sap { shift-&amp;gt;&lt;em&gt;execute(&#39;ssm-sap&#39;, @&lt;/em&gt;) } sub sso { shift-&amp;gt;&lt;em&gt;execute(&#39;sso&#39;, @&lt;/em&gt;) } sub sso_admin { shift-&amp;gt;&lt;em&gt;execute(&#39;sso-admin&#39;, @&lt;/em&gt;) } sub sso_oidc { shift-&amp;gt;&lt;em&gt;execute(&#39;sso-oidc&#39;, @&lt;/em&gt;) } sub stepfunctions { shift-&amp;gt;&lt;em&gt;execute(&#39;stepfunctions&#39;, @&lt;/em&gt;) } sub storagegateway { shift-&amp;gt;&lt;em&gt;execute(&#39;storagegateway&#39;, @&lt;/em&gt;) } sub sts { shift-&amp;gt;&lt;em&gt;execute(&#39;sts&#39;, @&lt;/em&gt;) } sub support { shift-&amp;gt;&lt;em&gt;execute(&#39;support&#39;, @&lt;/em&gt;) } sub support_app { shift-&amp;gt;&lt;em&gt;execute(&#39;support-app&#39;, @&lt;/em&gt;) } sub swf { shift-&amp;gt;&lt;em&gt;execute(&#39;swf&#39;, @&lt;/em&gt;) } sub synthetics { shift-&amp;gt;&lt;em&gt;execute(&#39;synthetics&#39;, @&lt;/em&gt;) } sub textract { shift-&amp;gt;&lt;em&gt;execute(&#39;textract&#39;, @&lt;/em&gt;) } sub timestream_query { shift-&amp;gt;&lt;em&gt;execute(&#39;timestream-query&#39;, @&lt;/em&gt;) } sub timestream_write { shift-&amp;gt;&lt;em&gt;execute(&#39;timestream-write&#39;, @&lt;/em&gt;) } sub tnb { shift-&amp;gt;&lt;em&gt;execute(&#39;tnb&#39;, @&lt;/em&gt;) } sub transcribe { shift-&amp;gt;&lt;em&gt;execute(&#39;transcribe&#39;, @&lt;/em&gt;) } sub transfer { shift-&amp;gt;&lt;em&gt;execute(&#39;transfer&#39;, @&lt;/em&gt;) } sub translate { shift-&amp;gt;&lt;em&gt;execute(&#39;translate&#39;, @&lt;/em&gt;) } sub voice_id { shift-&amp;gt;&lt;em&gt;execute(&#39;voice-id&#39;, @&lt;/em&gt;) } sub waf { shift-&amp;gt;&lt;em&gt;execute(&#39;waf&#39;, @&lt;/em&gt;) } sub waf_regional { shift-&amp;gt;&lt;em&gt;execute(&#39;waf-regional&#39;, @&lt;/em&gt;) } sub wafv2 { shift-&amp;gt;&lt;em&gt;execute(&#39;wafv2&#39;, @&lt;/em&gt;) } sub wellarchitected { shift-&amp;gt;&lt;em&gt;execute(&#39;wellarchitected&#39;, @&lt;/em&gt;) } sub wisdom { shift-&amp;gt;&lt;em&gt;execute(&#39;wisdom&#39;, @&lt;/em&gt;) } sub workdocs { shift-&amp;gt;&lt;em&gt;execute(&#39;workdocs&#39;, @&lt;/em&gt;) } sub worklink { shift-&amp;gt;&lt;em&gt;execute(&#39;worklink&#39;, @&lt;/em&gt;) } sub workmail { shift-&amp;gt;&lt;em&gt;execute(&#39;workmail&#39;, @&lt;/em&gt;) } sub workmailmessageflow { shift-&amp;gt;&lt;em&gt;execute(&#39;workmailmessageflow&#39;, @&lt;/em&gt;) } sub workspaces { shift-&amp;gt;&lt;em&gt;execute(&#39;workspaces&#39;, @&lt;/em&gt;) } sub workspaces_web { shift-&amp;gt;&lt;em&gt;execute(&#39;workspaces-web&#39;, @&lt;/em&gt;) } sub xray { shift-&amp;gt;&lt;em&gt;execute(&#39;xray&#39;, @&lt;/em&gt;) }&lt;/p&gt; &#xA;&lt;p&gt;1;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;=encoding utf-8&lt;/p&gt; &#xA;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;AWS::CLIWrapper - Wrapper module for aws-cli&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use AWS::CLIWrapper;&#xA;&#xA;my $aws = AWS::CLIWrapper-&amp;gt;new(&#xA;    region =&amp;gt; &#39;us-west-1&#39;,&#xA;);&#xA;&#xA;my $res = $aws-&amp;gt;ec2(&#xA;    &#39;describe-instances&#39; =&amp;gt; {&#xA;        instance_ids =&amp;gt; [&#39;i-XXXXX&#39;, &#39;i-YYYYY&#39;],&#xA;    },&#xA;    timeout =&amp;gt; 18, # optional. default is 30 seconds&#xA;);&#xA;&#xA;if ($res) {&#xA;    for my $rs ( @{ $res-&amp;gt;{Reservations} }) {&#xA;        for my $is (@{ $rs-&amp;gt;{Instances} }) {&#xA;            print $is-&amp;gt;{InstanceId},&#34;\n&#34;;&#xA;        }&#xA;    }&#xA;} else {&#xA;    warn $AWS::CLIWrapper::Error-&amp;gt;{Code};&#xA;    warn $AWS::CLIWrapper::Error-&amp;gt;{Message};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;AWS::CLIWrapper is wrapper module for aws-cli (recommend: awscli &amp;gt;= 1.0.0, requires: &amp;gt;= 0.40.0).&lt;/p&gt; &#xA;&lt;p&gt;AWS::CLIWrapper is a just wrapper module, so you can do everything what you can do with aws-cli.&lt;/p&gt; &#xA;&lt;p&gt;See note below about making sure AWS credentials are accessible (especially under crond)&lt;/p&gt; &#xA;&lt;p&gt;=head1 METHODS&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;new&gt;&#xA;  ($param:HashRef)&#xA; &lt;/new&gt;&lt;/p&gt; &#xA;&lt;p&gt;Constructor of AWS::CLIWrapper. Acceptable AWS CLI params are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;region       region_name:Str&#xA;profile      profile_name:Str&#xA;endpoint_url endpoint_url:Str&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, the these params can be used to control the wrapper behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nofork          Truthy to avoid forking when executing `aws`&#xA;timeout         `aws` execution timeout&#xA;croak_on_error  Truthy to croak() with the error message when `aws`&#xA;                exits with non-zero code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See below for more detailed explanation.&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;accessanalyzer&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/accessanalyzer&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;account&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/account&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;acm&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/acm&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;acm_pca&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;alexaforbusiness&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/alexaforbusiness&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;amp&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/amp&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;amplify&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/amplify&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;amplifybackend&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/amplifybackend&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;amplifyuibuilder&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/amplifyuibuilder&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;apigateway&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/apigateway&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;apigatewaymanagementapi&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/apigatewaymanagementapi&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;apigatewayv2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/apigatewayv2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;appconfig&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/appconfig&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;appconfigdata&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/appconfigdata&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;appflow&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/appflow&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;appintegrations&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/appintegrations&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;application_autoscaling&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;application_insights&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;applicationcostprofiler&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/applicationcostprofiler&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;appmesh&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/appmesh&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;apprunner&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/apprunner&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;appstream&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/appstream&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;appsync&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/appsync&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;arc_zonal_shift&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;athena&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/athena&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;auditmanager&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/auditmanager&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;autoscaling&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/autoscaling&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;autoscaling_plans&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;backup&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/backup&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;backup_gateway&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;backupstorage&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/backupstorage&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;batch&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/batch&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;billingconductor&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/billingconductor&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;braket&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/braket&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;budgets&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/budgets&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ce&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ce&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;chime&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/chime&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;chime_sdk_identity&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;chime_sdk_media_pipelines&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;chime_sdk_meetings&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;chime_sdk_messaging&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;chime_sdk_voice&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cleanrooms&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cleanrooms&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloud9&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloud9&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloudcontrol&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloudcontrol&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;clouddirectory&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/clouddirectory&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloudformation&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloudformation&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloudfront&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloudfront&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloudhsm&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloudhsm&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloudhsmv2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloudhsmv2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloudsearch&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloudsearch&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloudsearchdomain&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloudsearchdomain&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloudtrail&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloudtrail&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;cloudtrail_data&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cloudwatch&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cloudwatch&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;codeartifact&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/codeartifact&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;codebuild&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/codebuild&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;codecatalyst&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/codecatalyst&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;codecommit&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/codecommit&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;codeguru_reviewer&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;codeguruprofiler&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/codeguruprofiler&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;codepipeline&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/codepipeline&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;codestar&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/codestar&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;codestar_connections&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;codestar_notifications&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;cognito_identity&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;cognito_idp&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;cognito_sync&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;comprehend&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/comprehend&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;comprehendmedical&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/comprehendmedical&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;compute_optimizer&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;configservice&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/configservice&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;configure&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/configure&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;connect&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/connect&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;connect_contact_lens&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;connectcampaigns&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/connectcampaigns&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;connectcases&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/connectcases&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;connectparticipant&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/connectparticipant&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;controltower&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/controltower&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;cur&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/cur&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;customer_profiles&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;databrew&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/databrew&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;dataexchange&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/dataexchange&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;datapipeline&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/datapipeline&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;datasync&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/datasync&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;dax&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/dax&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;deploy&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/deploy&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;detective&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/detective&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;devicefarm&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/devicefarm&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;devops_guru&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;directconnect&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/directconnect&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;discovery&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/discovery&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;dlm&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/dlm&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;dms&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/dms&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;docdb&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/docdb&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;docdb_elastic&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;drs&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/drs&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ds&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ds&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;dynamodb&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/dynamodb&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;dynamodbstreams&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/dynamodbstreams&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ebs&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ebs&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ec2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ec2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;ec2_instance_connect&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ecr&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ecr&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;ecr_public&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ecs&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ecs&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;efs&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/efs&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;eks&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/eks&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;elastic_inference&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;elasticache&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/elasticache&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;elasticbeanstalk&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/elasticbeanstalk&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;elastictranscoder&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/elastictranscoder&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;elb&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/elb&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;elbv2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/elbv2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;emr&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/emr&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;emr_containers&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;emr_serverless&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;es&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/es&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;events&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/events&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;evidently&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/evidently&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;finspace&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/finspace&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;finspace_data&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;firehose&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/firehose&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;fis&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/fis&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;fms&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/fms&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;forecast&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/forecast&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;forecastquery&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/forecastquery&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;frauddetector&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/frauddetector&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;fsx&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/fsx&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;gamelift&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/gamelift&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;gamesparks&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/gamesparks&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;glacier&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/glacier&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;globalaccelerator&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/globalaccelerator&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;glue&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/glue&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;grafana&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/grafana&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;greengrass&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/greengrass&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;greengrassv2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/greengrassv2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;groundstation&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/groundstation&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;guardduty&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/guardduty&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;health&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/health&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;healthlake&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/healthlake&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;history&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/history&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;honeycode&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/honeycode&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iam&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iam&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;identitystore&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/identitystore&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;imagebuilder&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/imagebuilder&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;importexport&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/importexport&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;inspector&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/inspector&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;inspector2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/inspector2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;internetmonitor&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/internetmonitor&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iot&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iot&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;iot_data&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;iot_jobs_data&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;iot_roborunner&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;iot1click_devices&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;iot1click_projects&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iotanalytics&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iotanalytics&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iotdeviceadvisor&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iotdeviceadvisor&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iotevents&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iotevents&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;iotevents_data&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iotfleethub&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iotfleethub&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iotfleetwise&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iotfleetwise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iotsecuretunneling&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iotsecuretunneling&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iotsitewise&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iotsitewise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iotthingsgraph&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iotthingsgraph&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iottwinmaker&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iottwinmaker&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;iotwireless&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/iotwireless&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ivs&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ivs&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ivschat&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ivschat&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;kafka&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/kafka&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;kafkaconnect&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/kafkaconnect&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;kendra&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/kendra&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;kendra_ranking&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;keyspaces&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/keyspaces&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;kinesis&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/kinesis&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;kinesis_video_archived_media&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;kinesis_video_media&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;kinesis_video_signaling&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;kinesis_video_webrtc_storage&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;kinesisanalytics&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/kinesisanalytics&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;kinesisanalyticsv2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/kinesisanalyticsv2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;kinesisvideo&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/kinesisvideo&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;kms&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/kms&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;lakeformation&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/lakeformation&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;lambda&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/lambda&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;lex_models&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;lex_runtime&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;lexv2_models&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;lexv2_runtime&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;license_manager&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;license_manager_linux_subscriptions&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;license_manager_user_subscriptions&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;lightsail&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/lightsail&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;location&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/location&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;logs&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/logs&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;lookoutequipment&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/lookoutequipment&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;lookoutmetrics&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/lookoutmetrics&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;lookoutvision&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/lookoutvision&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;m2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/m2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;machinelearning&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/machinelearning&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;macie&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/macie&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;macie2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/macie2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;managedblockchain&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/managedblockchain&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;marketplace_catalog&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;marketplace_entitlement&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;marketplacecommerceanalytics&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/marketplacecommerceanalytics&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mediaconnect&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mediaconnect&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mediaconvert&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mediaconvert&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;medialive&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/medialive&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mediapackage&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mediapackage&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;mediapackage_vod&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mediastore&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mediastore&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;mediastore_data&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mediatailor&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mediatailor&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;memorydb&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/memorydb&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;meteringmarketplace&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/meteringmarketplace&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mgh&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mgh&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mgn&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mgn&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;migration_hub_refactor_spaces&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;migrationhub_config&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;migrationhuborchestrator&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/migrationhuborchestrator&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;migrationhubstrategy&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/migrationhubstrategy&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mobile&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mobile&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mq&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mq&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mturk&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mturk&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;mwaa&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/mwaa&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;neptune&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/neptune&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;network_firewall&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;networkmanager&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/networkmanager&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;nimble&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/nimble&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;oam&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/oam&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;omics&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/omics&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;opensearch&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/opensearch&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;opensearchserverless&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/opensearchserverless&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;opsworks&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/opsworks&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;opsworks_cm&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;organizations&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/organizations&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;outposts&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/outposts&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;panorama&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/panorama&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;personalize&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/personalize&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;personalize_events&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;personalize_runtime&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;pi&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/pi&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;pinpoint&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/pinpoint&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;pinpoint_email&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;pinpoint_sms_voice&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;pinpoint_sms_voice_v2&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;pipes&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/pipes&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;polly&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/polly&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;pricing&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/pricing&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;privatenetworks&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/privatenetworks&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;proton&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/proton&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;qldb&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/qldb&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;qldb_session&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;quicksight&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/quicksight&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ram&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ram&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;rbin&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/rbin&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;rds&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/rds&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;rds_data&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;redshift&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/redshift&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;redshift_data&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;redshift_serverless&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;rekognition&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/rekognition&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;resiliencehub&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/resiliencehub&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;resource_explorer_2&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;resource_groups&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;resourcegroupstaggingapi&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/resourcegroupstaggingapi&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;robomaker&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/robomaker&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;rolesanywhere&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/rolesanywhere&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;route53&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/route53&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;route53_recovery_cluster&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;route53_recovery_control_config&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;route53_recovery_readiness&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;route53domains&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/route53domains&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;route53resolver&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/route53resolver&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;rum&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/rum&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;s3&gt;&#xA;  ($operation:Str, $path:ArrayRef, $param:HashRef, %opt:Hash)&#xA; &lt;/s3&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;s3api&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/s3api&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;s3control&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/s3control&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;s3outposts&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/s3outposts&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;sagemaker&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/sagemaker&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;sagemaker_a2i_runtime&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;sagemaker_edge&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;sagemaker_featurestore_runtime&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;sagemaker_geospatial&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;sagemaker_metrics&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;sagemaker_runtime&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;savingsplans&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/savingsplans&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;scheduler&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/scheduler&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;schemas&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/schemas&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;sdb&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/sdb&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;secretsmanager&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/secretsmanager&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;securityhub&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/securityhub&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;securitylake&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/securitylake&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;serverlessrepo&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/serverlessrepo&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;service_quotas&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;servicecatalog&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/servicecatalog&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;servicecatalog_appregistry&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;servicediscovery&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/servicediscovery&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ses&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ses&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;sesv2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/sesv2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;shield&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/shield&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;signer&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/signer&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;simspaceweaver&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/simspaceweaver&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;sms&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/sms&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;snow_device_management&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;snowball&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/snowball&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;sns&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/sns&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;sqs&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/sqs&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;ssm&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/ssm&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;ssm_contacts&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;ssm_incidents&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;ssm_sap&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;sso&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/sso&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;sso_admin&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;sso_oidc&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;stepfunctions&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/stepfunctions&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;storagegateway&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/storagegateway&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;sts&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/sts&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;support&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/support&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;support_app&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;swf&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/swf&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;synthetics&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/synthetics&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;textract&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/textract&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;timestream_query&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;timestream_write&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;tnb&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/tnb&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;transcribe&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/transcribe&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;transfer&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/transfer&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;translate&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/translate&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;voice_id&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;waf&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/waf&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;waf_regional&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;wafv2&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/wafv2&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;wellarchitected&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/wellarchitected&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;wisdom&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/wisdom&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;workdocs&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/workdocs&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;worklink&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/worklink&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;workmail&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/workmail&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;workmailmessageflow&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/workmailmessageflow&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;workspaces&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/workspaces&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item B&amp;lt;workspaces_web&amp;gt;($operation:Str, $param:HashRef, %opt:Hash)&lt;/p&gt; &#xA;&lt;p&gt;=item B&#xA; &lt;xray&gt;&#xA;  ($operation:Str, $param:HashRef, %opt:Hash)&#xA; &lt;/xray&gt;&lt;/p&gt; &#xA;&lt;p&gt;AWS::CLIWrapper provides methods same as services of aws-cli. Please refer to &lt;code&gt;aws help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First arg &#34;operation&#34; is same as operation of aws-cli. Please refer to &lt;code&gt;aws SERVICE help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Second arg &#34;param&#34; is same as command line option of aws-cli. Please refer to &lt;code&gt;aws SERVICE OPERATION help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Key of param is string that trimmed leading &#34;--&#34; and replaced &#34;-&#34; to &#34;_&#34; for command line option (--instance-ids -&amp;gt; instance_ids). Value of param is SCALAR or ARRAYREF or HASHREF.&lt;/p&gt; &#xA;&lt;p&gt;You can specify C&amp;lt;(boolean)&amp;gt; parameter by C&amp;lt;$AWS::CLIWrapper::true&amp;gt; or C&amp;lt;$AWS::CLIWrapper::false&amp;gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $res = $aws-&amp;gt;ec2(&#39;assign-private-ip-addresses&#39;, {&#xA;    network_interface_id =&amp;gt; $eni_id,&#xA;    private_ip_addresses =&amp;gt; [ $private_ip_1, $private_ip_2 ],&#xA;    allow_reassignment   =&amp;gt; $AWS::CLIWrapper::true,&#xA;   })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Special case: several OPERATIONs take a single arg. For example &#34;aws s3api get-object ... output_file&#34;. In this case, You can specify below using C&amp;lt;output_file&amp;gt; key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $res = $aws-&amp;gt;s3api(&#39;get-object&#39;, {&#xA;    bucket      =&amp;gt; &#39;my-bucket&#39;,&#xA;    key         =&amp;gt; &#39;blahblahblah&#39;,&#xA;    output_file =&amp;gt; &#39;/path/to/output/file&#39;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Special case: s3 OPERATION takes one or two arguments in addition to options. For example &#34;aws s3 cp LocalPath s3://S3Path&#34;. Pass an extra ARRAYREF to the s3 method in this case:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $res = $aws-&amp;gt;s3(&#39;cp&#39;, [&#39;LocalPath&#39;, &#39;s3://S3Path&#39;], {&#xA;    exclude     =&amp;gt; &#39;*.bak&#39;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Special case: s3 OPERATION can take --include and --exclude option multiple times. For example &#34;aws s3 sync --exclude &#39;foo&#39; --exclude &#39;bar&#39; LocalPath s3://S3Path&#34;, Pass ARRAYREF as value of C&#xA; &lt;include&gt;&#xA;   or C&#xA;  &lt;exclude&gt;&#xA;    in this case:&#xA;  &lt;/exclude&gt;&#xA; &lt;/include&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $res = $aws-&amp;gt;s3(&#39;sync&#39;, [&#39;LocalPath&#39;, &#39;s3://S3Path&#39;], {&#xA;    exclude     =&amp;gt; [&#39;foo&#39;, &#39;bar&#39;],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Third arg &#34;opt&#34; is optional. Available key/values are below:&lt;/p&gt; &#xA;&lt;p&gt;timeout =&amp;gt; Int Maximum time the &#34;aws&#34; command is allowed to run before aborting. default is 30 seconds, unless overridden with AWS_CLIWRAPPER_TIMEOUT environment variable.&lt;/p&gt; &#xA;&lt;p&gt;nofork =&amp;gt; Int (&amp;gt;0) Call IPC::Cmd::run vs. IPC::Cmd::run_forked (mostly useful if/when in perl debugger). Note: &#39;timeout&#39;, if used with &#39;nofork&#39;, will merely cause an alarm and return. ie. &#39;run&#39; will NOT kill the awscli command like &#39;run_forked&#39; will.&lt;/p&gt; &#xA;&lt;p&gt;croak_on_error =&amp;gt; Int (&amp;gt;0) When set to a truthy value, this will make AWS::CLIWrapper to croak() with error message when &lt;code&gt;aws&lt;/code&gt; command exits with non-zero status. Default behavior is to set $AWS::CLIWrapper::Error and return.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 ENVIRONMENT&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item HOME: used by default by /usr/bin/aws utility to find it&#39;s credentials (if none are specified)&lt;/p&gt; &#xA;&lt;p&gt;Special note: cron on Linux will often have a different HOME &#34;/&#34; instead of &#34;/root&#34; - set $ENV{&#39;HOME&#39;} to use the default credentials or specify $ENV{&#39;AWS_CONFIG_FILE&#39;} directly.&lt;/p&gt; &#xA;&lt;p&gt;=item AWS_CLIWRAPPER_TIMEOUT&lt;/p&gt; &#xA;&lt;p&gt;If this variable is set, this value will be used instead of default timeout (30 seconds) for every invocation of &lt;code&gt;aws-cli&lt;/code&gt; that does not have a timeout value provided in the options argument of the called function.&lt;/p&gt; &#xA;&lt;p&gt;=item AWS_CONFIG_FILE&lt;/p&gt; &#xA;&lt;p&gt;=item AWS_ACCESS_KEY_ID&lt;/p&gt; &#xA;&lt;p&gt;=item AWS_SECRET_ACCESS_KEY&lt;/p&gt; &#xA;&lt;p&gt;=item AWS_DEFAULT_REGION&lt;/p&gt; &#xA;&lt;p&gt;See documents of aws-cli.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;HIROSE Masaaki E&#xA; &lt;lt&gt;&#xA;  hirose31 &#xA;  &lt;em&gt;at&lt;/em&gt; gmail.comE&#xA;  &lt;gt&gt;&lt;/gt&gt;&#xA; &lt;/lt&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 REPOSITORY&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;https://github.com/hirose31/AWS-CLIWrapper&#34;&gt;https://github.com/hirose31/AWS-CLIWrapper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;git clone git://github.com/hirose31/AWS-CLIWrapper.git&lt;/p&gt; &#xA;&lt;p&gt;patches and collaborators are welcome.&lt;/p&gt; &#xA;&lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;http://aws.amazon.com/cli/&#34;&gt;http://aws.amazon.com/cli/&lt;/a&gt;, L&lt;a href=&#34;https://github.com/aws/aws-cli&#34;&gt;https://github.com/aws/aws-cli&lt;/a&gt;, L&lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Welcome.html&#34;&gt;http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Welcome.html&lt;/a&gt;, L&lt;a href=&#34;https://github.com/boto/botocore&#34;&gt;https://github.com/boto/botocore&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt; &#xA;&lt;h1&gt;for Emacsen&lt;/h1&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;mode: cperl&lt;/h1&gt; &#xA;&lt;h1&gt;cperl-indent-level: 4&lt;/h1&gt; &#xA;&lt;h1&gt;indent-tabs-mode: nil&lt;/h1&gt; &#xA;&lt;h1&gt;coding: utf-8&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt; &#xA;&lt;h1&gt;vi: set ts=4 sw=4 sts=0 et ft=perl fenc=utf-8 ff=unix :&lt;/h1&gt;</summary>
  </entry>
</feed>