<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-25T01:38:03Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cvillalonga/CC-22-23</title>
    <updated>2022-10-25T01:38:03Z</updated>
    <id>tag:github.com,2022-10-25:/cvillalonga/CC-22-23</id>
    <link href="https://github.com/cvillalonga/CC-22-23" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cloud Computing: Fundamentos e Infraestructuras, Máster Universitario en Ingeniería Informática, ETSIIT, Universidad de Granada&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clases de Cloud Computing&lt;/h1&gt; &#xA;&lt;p&gt;&amp;lt;-- Añadir badge de Travis --&amp;gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cloud Computing I COMO&lt;/h2&gt; &#xA;&lt;p&gt;Para navegar por la asignatura, &lt;a href=&#34;https://raw.githubusercontent.com/cvillalonga/CC-22-23/master/sesiones/01-semana.md&#34;&gt;comienza por la sesión de la primera semana y sus enlaces&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Enlaces al resto del material&lt;/h2&gt; &#xA;&lt;p&gt;Repositorio para el material específico de cada clase, planificación y ejercicios. Si es la primera vez que vienes por aquí, ve directamente &lt;a href=&#34;https://raw.githubusercontent.com/cvillalonga/CC-22-23/master/sesiones/01-semana.md&#34;&gt;a la primera sesión&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comienza con &lt;a href=&#34;https://raw.githubusercontent.com/cvillalonga/CC-22-23/master/sesiones/README.md&#34;&gt;la programación y objetivos de las diferentes sesiones de la asignatura&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Puedes consultar &lt;a href=&#34;http://jj.github.io/CC&#34;&gt;los apuntes de la materia&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Se entregan los &lt;a href=&#34;https://raw.githubusercontent.com/cvillalonga/CC-22-23/master/proyectos/README.md&#34;&gt;hitos del proyecto actualizando los ficheros de hitos y haciendo un pull request&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Comprueba la &lt;a href=&#34;https://raw.githubusercontent.com/cvillalonga/CC-22-23/master/Metodolog%C3%ADa_y_criterios_de_evaluaci%C3%B3n.md&#34;&gt;metodología y criterios de evaluación&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tu fichero de objetivos estará en el &lt;a href=&#34;https://raw.githubusercontent.com/cvillalonga/CC-22-23/master/objetivos/README.md&#34;&gt;directorio correspondiente&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>brunopostle/ifcmerge</title>
    <updated>2022-10-25T01:38:03Z</updated>
    <id>tag:github.com,2022-10-25:/brunopostle/ifcmerge</id>
    <link href="https://github.com/brunopostle/ifcmerge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A three-way-merge tool for IFC files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IFC Merge&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Collaborative BIM&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;ifcmerge&lt;/em&gt; is a three-way-merge tool for IFC files, intended to support a modern &lt;em&gt;fork, branch, pull-request and merge&lt;/em&gt; workflow using revision control systems such as git or mercurial. This enables multiple people to work on separate copies of the same IFC data, periodically merging their work.&lt;/p&gt; &#xA;&lt;p&gt;This tool requires that a &lt;em&gt;Native IFC&lt;/em&gt; application, such as &lt;em&gt;BlenderBIM&lt;/em&gt;, is used for all authoring and editing.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;Native IFC&lt;/em&gt; application behaves in the following ways when editing a pre-existing IFC (STEP/SPF) file:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;IFC entities &lt;em&gt;must&lt;/em&gt; be written in the same format as received, with the same numeric IDs as before.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Attribute changes to entities &lt;em&gt;must&lt;/em&gt; be written in-place.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Numeric IDs of deleted entities &lt;em&gt;must not&lt;/em&gt; be reused for new entities.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you use a traditional BIM application that saves in a proprietary format, and that exports IFC files, you probably do not have a &lt;em&gt;Native IFC&lt;/em&gt; application :(&lt;/p&gt; &#xA;&lt;p&gt;This whitepaper shows why you might want to use &lt;em&gt;Native IFC&lt;/em&gt; for your work: &lt;a href=&#34;https://github.com/brunopostle/ifcmerge/raw/main/docs/whitepaper.rst&#34;&gt;https://github.com/brunopostle/ifcmerge/blob/main/docs/whitepaper.rst&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Given a base IFC file and two different forked versions of it, combine the changes from the two forks into a merged result like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ifcmerge base.ifc local_fork.ifc remote_fork.ifc result_merged.ifc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using ifcmerge with git&lt;/h2&gt; &#xA;&lt;p&gt;Configure git to add &lt;em&gt;ifcmerge&lt;/em&gt; to the list of available merge tools (set the path to suit your installation location):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --global mergetool.ifcmerge.cmd &#39;/path/to/ifcmerge $BASE $LOCAL $REMOTE $MERGED&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming you already have a git repository containing &lt;code&gt;test_model.ifc&lt;/code&gt;. Create a new branch, edit and commit some changes to the IFC file in this branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git branch my_branch&#xA;git switch my_branch&#xA;  [some editing of the IFC file]&#xA;git commit test_model.ifc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The procedure is similar with a remote pull request: create a temporary local branch and use &lt;code&gt;git pull&lt;/code&gt; to update it with the remote changes rather than making those changes yourself)&lt;/p&gt; &#xA;&lt;p&gt;Switch back to the original &lt;em&gt;main&lt;/em&gt; branch where the IFC file remains unmodified, edit and commit some different changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git switch main&#xA;  [some editing of the IFC file]&#xA;git commit test_model.ifc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point the two branches have diverged, instruct git to merge them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git merge my_branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will not complete, resulting in an unresolved conflict, because the default git merge will &lt;em&gt;always&lt;/em&gt; find conflicts between two versions of the same IFC file. Complete the merge by resolving the conflict using &lt;em&gt;ifcmerge&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git mergetool --tool=ifcmerge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Commit the merge if it is successful (i.e. with no error messages):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git commit -i test_model.ifc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, if &lt;em&gt;ifcmerge&lt;/em&gt; refuses because it can&#39;t safely merge the branches, such as when an entity has been modified in one branch and deleted in the other, you can always abandon the merge:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git merge --abort&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your repository only contains IFC files, you can set &lt;code&gt;git mergetool&lt;/code&gt; to default to using &lt;em&gt;ifcmerge&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config merge.tool ifcmerge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2022, Bruno Postle &lt;a href=&#34;mailto:bruno@postle.net&#34;&gt;bruno@postle.net&lt;/a&gt; License: GPLv3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>metacpan/metacpan-api</title>
    <updated>2022-10-25T01:38:03Z</updated>
    <id>tag:github.com,2022-10-25:/metacpan/metacpan-api</id>
    <link href="https://github.com/metacpan/metacpan-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A free, open API for everything you want to know about CPAN&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/metacpan/metacpan-api&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/metacpan/metacpan-api.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;A Web Service for the CPAN&lt;/h1&gt; &#xA;&lt;p&gt;MetaCPAN aims to provide a free, open web service which provides metadata for CPAN modules.&lt;/p&gt; &#xA;&lt;h2&gt;REST API&lt;/h2&gt; &#xA;&lt;p&gt;MetaCPAN is based on Elasticsearch, so it provides a RESTful interface as well as the option to create complex queries. &lt;a href=&#34;https://github.com/metacpan/metacpan-api/raw/master/docs/API-docs.md&#34;&gt;The &lt;code&gt;docs/&lt;/code&gt; directory&lt;/a&gt; provides a good starting point for REST access to MetaCPAN.&lt;/p&gt; &#xA;&lt;h2&gt;Expanding Your Author Info&lt;/h2&gt; &#xA;&lt;p&gt;MetaCPAN allows authors to add custom metadata about themselves to the index. &lt;a href=&#34;https://metacpan.org/account/profile&#34;&gt;Log in to MetaCPAN&lt;/a&gt; to add more information about yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Your Own MetaCPAN:&lt;/h2&gt; &#xA;&lt;p&gt;If you want to run MetaCPAN locally, we encourage you to start with &lt;a href=&#34;https://github.com/metacpan/metacpan-docker&#34;&gt;metacpan-docker&lt;/a&gt;. However, you may still find some info here:&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting Elasticsearch&lt;/h2&gt; &#xA;&lt;p&gt;You can restart Elasticsearch (ES) manually if you need to troubleshoot.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo service elasticsearch restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are unable to access [[http://localhost:9200]] (give it a few seconds) you should kill the Elasticsearch process and run it in foreground to see the debug output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo service elasticsearch stop&#xA;cd /opt/elasticsearch&#xA;sudo bin/elasticsearch -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get a &#34;Can&#39;t start up: not enough memory&#34; error when trying to start Elasticsearch, you likely need to update your JRE. On Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# fixes &#34;not enough memory&#34; errors&#xA;sudo apt-get install openjdk-6-jre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: If you intend to try indexing a full MiniCPAN, you may find that Elasticsearch wants to use more open filehandles than your system allows by default. &lt;a href=&#34;https://gist.github.com/3230962&#34;&gt;This script&lt;/a&gt; can be used to start ES with the appropriate ulimit adjustment).&lt;/p&gt; &#xA;&lt;h2&gt;Run the test suite&lt;/h2&gt; &#xA;&lt;p&gt;The test suite accesses Elasticsearch on port 9900. The developer VM should have a dedicated test instance running in the background already, but if you want to run it manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /opt/elasticsearch&#xA;sudo bin/elasticsearch -f -Des.http.port=9900 -Des.cluster.name=testing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /home/metacpan/metacpan-api&#xA;./bin/prove t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suite has to pass all tests.&lt;/p&gt; &#xA;&lt;h2&gt;Create the ElasticSearch Index&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./bin/run bin/metacpan mapping --delete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--delete&lt;/code&gt; will drop all indices first to clear the index from test data.&lt;/p&gt; &#xA;&lt;h2&gt;Begin Indexing Your Modules&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./bin/run bin/metacpan release /path/to/cpan/authors/id/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should note that you can index either your CPAN mirror or a minicpan mirror. You can even index just parts of a mirror:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./bin/run bin/metacpan release /path/to/cpan/authors/id/{A,B}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tag the Latest Releases&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./bin/run bin/metacpan latest --cpan /path/to/cpan/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Index Author Data&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./bin/run bin/metacpan author --cpan /path/to/cpan/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that minicpan doesn&#39;t provide the 00whois.xml file which is used to generate the index; you will have to download it manually (it is in the authors/ directory) in order to index authors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -O /path/to/cpan/authors/00whois.xml cpan.cpantesters.org/authors/00whois.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also doesn&#39;t include author.json files, so that data will also be missing unless you get it from somewhere else.&lt;/p&gt; &#xA;&lt;h2&gt;Set Up Proxy in Front of ElasticSearch&lt;/h2&gt; &#xA;&lt;p&gt;Start API server on port 5000&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./bin/run plackup -p 5000 -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start a single-threaded test server. If you need extra performance, use &lt;code&gt;Starman&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;For a full list of options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./bin/run bin/metacpan release --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing:&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to get involved, find us at #metacpan on irc.perl.org or open an issue on GitHub and let us know what you&#39;d like to start working on.&lt;/p&gt; &#xA;&lt;h2&gt;IRC&lt;/h2&gt; &#xA;&lt;p&gt;You can find us at #metacpan on irc.perl.org Access it via &lt;a href=&#34;https://chat.mibbit.com/?channel=%23metacpan&amp;amp;server=irc.perl.org&#34;&gt;web interface&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>