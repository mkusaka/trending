<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-21T01:36:05Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>avenj/irc-server-tree</title>
    <updated>2023-12-21T01:36:05Z</updated>
    <id>tag:github.com,2023-12-21:/avenj/irc-server-tree</id>
    <link href="https://github.com/avenj/irc-server-tree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IRC::Server::Tree&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;IRC::Server::Tree - Manipulate an IRC &#34;spanning tree&#34;&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Basic path-tracing usage:&#xA;my $tree = IRC::Server::Tree-&amp;gt;new;&#xA;&#xA;$tree-&amp;gt;add_node_to_top($_) for qw/ peerA peerB /;&#xA;&#xA;$tree-&amp;gt;add_node_to_name(&#39;peerA&#39;, &#39;leafA&#39;);&#xA;$tree-&amp;gt;add_node_to_name(&#39;peerA&#39;, &#39;leafB&#39;);&#xA;&#xA;$tree-&amp;gt;add_node_to_name(&#39;peerB&#39;, &#39;hubA&#39;);&#xA;$tree-&amp;gt;add_node_to_name(&#39;hubA&#39;, &#39;peerB&#39;);&#xA;&#xA;## ARRAY of hop names between root and peerB:&#xA;my $hop_names = $tree-&amp;gt;trace( &#39;peerB&#39; );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://metacpan.org/pod/IRC::Server::Tree::Network&#34;&gt;IRC::Server::Tree::Network&lt;/a&gt; for a simpler and more specialized interface to the tree.&lt;/p&gt; &#xA;&lt;p&gt;See the DESCRIPTION for a complete method list.&lt;/p&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;An IRC network is defined as a &#39;spanning tree&#39; per RFC1459; this module is an array-type object representing such a tree, with convenient path resolution methods for determining route &#34;hops&#34; and extending or shrinking the tree.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://metacpan.org/pod/IRC::Server::Tree::Network&#34;&gt;IRC::Server::Tree::Network&lt;/a&gt; for higher-level (and simpler) methods pertaining to manipulation of an IRC network specifically; a Network instance also provides an optional memory-for-speed tradeoff via memoization of traced paths.&lt;/p&gt; &#xA;&lt;p&gt;An IRC network tree is essentially unordered; any node can have any number of child nodes, with the only rules being that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The tree remains a tree (it is acyclic; there is only one route between any two nodes, and no node has more than one parent)&lt;/li&gt; &#xA; &lt;li&gt;No two nodes can share the same name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, this module doesn&#39;t enforce the listed rules for performance reasons, but things will break if you add non-uniquely-named nodes. Be warned. In fact, this module doesn&#39;t sanity check very much of anything; an &lt;a href=&#34;https://metacpan.org/pod/IRC::Server::Tree::Network&#34;&gt;IRC::Server::Tree::Network&lt;/a&gt; does much more to validate the tree and passed arguments.&lt;/p&gt; &#xA;&lt;p&gt;A new Tree can be created from an existing Tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $new_tree = IRC::Server::Tree-&amp;gt;new( $old_tree );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In principle, the general structure of the tree is your average deep array-of-arrays:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$self =&amp;gt; [&#xA;  hubA =&amp;gt; [&#xA;    leafA =&amp;gt; [],&#xA;    leafB =&amp;gt; [],&#xA;  ],&#xA;&#xA;  hubB =&amp;gt; [&#xA;    leafC =&amp;gt; [],&#xA;    leafD =&amp;gt; [],&#xA;  ],&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The methods provided below can be used to manipulate the tree and determine hops in a path to an arbitrary node using either breadth-first or depth-first search.&lt;/p&gt; &#xA;&lt;p&gt;Currently routes are not memoized; that&#39;s left to a higher layer or subclass.&lt;/p&gt; &#xA;&lt;h2&gt;new&lt;/h2&gt; &#xA;&lt;p&gt;Create a new network tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $tree = IRC::Server::Tree-&amp;gt;new;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new network tree from an old one or part of one (see &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#child_node_for&#34;&gt;&#34;child_node_for&#34;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#del_node_by_name&#34;&gt;&#34;del_node_by_name&#34;&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $tree = IRC::Server::Tree-&amp;gt;new( $old_tree );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note that this will clone the old Tree object.)&lt;/p&gt; &#xA;&lt;p&gt;Optionally create a tree from an ARRAY, if you really know what you&#39;re doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $tree = IRC::Server::Tree-&amp;gt;new(&#xA;  [&#xA;    hubA =&amp;gt; [&#xA;      hubB =&amp;gt; [&#xA;        hubBleaf1 =&amp;gt; [],&#xA;      ],&#xA;      leaf1 =&amp;gt; [],&#xA;      leaf2 =&amp;gt; [],&#xA;    ],&#xA;  ],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;add_node_to_parent_ref&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Add empty node to parent ref:&#xA;$tree-&amp;gt;add_node_to_parent_ref( $parent_ref, $new_name );&#xA;## Add existing node to parent ref:&#xA;$tree-&amp;gt;add_node_to_parent_ref( $parent_ref, $new_name, $new_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adds an empty or preexisting node to a specified parent reference.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#add_node_to_top&#34;&gt;&#34;add_node_to_top&#34;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#add_node_to_name&#34;&gt;&#34;add_node_to_name&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;add_node_to_top&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$tree-&amp;gt;add_node_to_top( $new_name );&#xA;$tree-&amp;gt;add_node_to_top( $new_name, $new_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#add_node_to_parent_ref&#34;&gt;&#34;add_node_to_parent_ref&#34;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#add_node_to_name&#34;&gt;&#34;add_node_to_name&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;add_node_to_name&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$tree-&amp;gt;add_node_to_name( $parent_name, $name );&#xA;$tree-&amp;gt;add_node_to_name( $parent_name, $name, $new_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adds an empty or specified node to the specified parent name.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$tree-&amp;gt;add_node_to_top( &#39;MyHub1&#39; );&#xA;$tree-&amp;gt;add_node_to_name( &#39;MyHub1&#39;, &#39;MyLeafA&#39; );&#xA;&#xA;## Existing nodes under our new node&#xA;my $new_node = [ &#39;MyLeafB&#39; =&amp;gt; [] ];&#xA;$tree-&amp;gt;add_node_to_name( &#39;MyHub1&#39;, &#39;MyHub2&#39;, $new_node );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;as_hash&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $hash_ref = $tree-&amp;gt;as_hash;&#xA;my $hash_ref = $tree-&amp;gt;as_hash( $parent_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get a (possibly deep) HASH describing the state of the tree underneath the specified parent reference, or the entire tree if none is specified.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $hash_ref = $tree-&amp;gt;as_hash( $self-&amp;gt;child_node_for(&#39;MyHub1&#39;) );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#child_node_for&#34;&gt;&#34;child_node_for&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;as_list&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my @tree = $tree-&amp;gt;as_list;&#xA;my @tree = $tree-&amp;gt;as_list( $parent_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns the tree in list format.&lt;/p&gt; &#xA;&lt;p&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#as_hash&#34;&gt;&#34;as_hash&#34;&lt;/a&gt; is likely to be more useful.)&lt;/p&gt; &#xA;&lt;h2&gt;child_node_for&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $child_node = $tree-&amp;gt;child_node_for( $parent_name );&#xA;my $child_node = $tree-&amp;gt;child_node_for( $parent_name, $start_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finds and returns the named child node from the tree.&lt;/p&gt; &#xA;&lt;p&gt;Starts at the root of the tree or the specified parent reference.&lt;/p&gt; &#xA;&lt;h2&gt;del_node_by_name&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$tree-&amp;gt;del_node_by_name( $parent_name );&#xA;$tree-&amp;gt;del_node_by_name( $parent_name, $start_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finds and deletes the named child from the tree.&lt;/p&gt; &#xA;&lt;p&gt;Returns the deleted node.&lt;/p&gt; &#xA;&lt;h2&gt;names_beneath&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $names = $tree-&amp;gt;names_beneath( $parent_name );&#xA;my $names = $tree-&amp;gt;names_beneath( $parent_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Return an ARRAY of all names in the tree beneath the specified parent node.&lt;/p&gt; &#xA;&lt;p&gt;Takes either the name of a node in the tree or a reference to a node.&lt;/p&gt; &#xA;&lt;h2&gt;path_by_indexes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $names = $tree-&amp;gt;path_by_indexes( $index_route );&#xA;my $names = $tree-&amp;gt;path_by_indexes( $index_route, $parent_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given an array of index hops as retrieved by &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#trace_indexes&#34;&gt;&#34;trace_indexes&#34;&lt;/a&gt;, retrieve the name for each hop.&lt;/p&gt; &#xA;&lt;p&gt;This is mostly used internally by &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#trace&#34;&gt;&#34;trace&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;print_map&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$tree-&amp;gt;print_map;&#xA;$tree-&amp;gt;print_map( $start_ref );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prints a visualization of the network map to STDOUT.&lt;/p&gt; &#xA;&lt;h2&gt;trace&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $names = $tree-&amp;gt;trace( $parent_name );&#xA;my $names = $tree-&amp;gt;trace( $parent_name, $start_ref );&#xA;my $names = $tree-&amp;gt;trace( $parent_name, $start_ref, &#39;dfs&#39; );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns an ARRAY of the names of every hop in the path to the specified parent name.&lt;/p&gt; &#xA;&lt;p&gt;Starts tracing from the root of the tree unless a parent node reference is also specified.&lt;/p&gt; &#xA;&lt;p&gt;The last hop returned is the target&#39;s name.&lt;/p&gt; &#xA;&lt;p&gt;Specifying a true value as a third argument is the same as calling &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#trace_dfs&#34;&gt;&#34;trace_dfs&#34;&lt;/a&gt;. Defaults to breadth-first as described in &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#trace_indexes&#34;&gt;&#34;trace_indexes&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;trace_dfs&lt;/h2&gt; &#xA;&lt;p&gt;A convenience method for using depth-first tracing. This is likely to be less efficient than the default breadth-first approach for most network layouts.&lt;/p&gt; &#xA;&lt;p&gt;This is the same as specifying a true third argument to &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#trace&#34;&gt;&#34;trace&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;trace_indexes&lt;/h2&gt; &#xA;&lt;p&gt;Primarily intended for internal use. This is the BFS/DFS search that other methods use to find a node. There is nothing very useful you can do with this externally except count hops; it is documented here to show how path resolution works.&lt;/p&gt; &#xA;&lt;p&gt;Returns an ARRAY consisting of the index of every hop taken to get to the node reference belonging to the specified node name starting from the root of the tree or the specified parent node reference.&lt;/p&gt; &#xA;&lt;p&gt;Given a network:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hubA&#xA;  leafA&#xA;  leafB&#xA;  hubB&#xA;    leafC&#xA;    leafD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;trace_indexes(**&#39;leafD&#39;**)&lt;/code&gt; would return:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[ 1, 5, 1 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are the indexes into the node references (arrays) owned by each hop, including the last hop. Retrieving their names requires subtracting one from each index; &lt;a href=&#34;https://raw.githubusercontent.com/avenj/irc-server-tree/master/#trace&#34;&gt;&#34;trace&#34;&lt;/a&gt; handles this.&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Jon Portnoy &amp;lt;&lt;a href=&#34;mailto:avenj@cobaltirc.org&#34;&gt;avenj@cobaltirc.org&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aosm/apache_mod_perl1</title>
    <updated>2023-12-21T01:36:05Z</updated>
    <id>tag:github.com,2023-12-21:/aosm/apache_mod_perl1</id>
    <link href="https://github.com/aosm/apache_mod_perl1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>