<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-05T01:40:03Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>revmischa/test-bot</title>
    <updated>2022-10-05T01:40:03Z</updated>
    <id>tag:github.com,2022-10-05:/revmischa/test-bot</id>
    <link href="https://github.com/revmischa/test-bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Continuous integration bot for perl&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a bot that can be configured to watch for new commits to a repo, run unit tests for each commit, and notify developers of failed tests. It also can notify you of new commits in an IRC channel.&lt;/p&gt; &#xA;&lt;p&gt;Currently it supports GitHub and Kiln repos and. You must create a post_receive hook and point it at your bot.&lt;/p&gt; &#xA;&lt;p&gt;At present it only supports notifications via IRC. Plans are to include email and web page outputs as well.&lt;/p&gt; &#xA;&lt;p&gt;Unit tests are run via TAP::Harness.&lt;/p&gt; &#xA;&lt;p&gt;To create your own bot, create a script with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl&#xA;use strict;&#xA;use warnings;&#xA;use FindBin;&#xA;use lib &#34;$FindBin::Bin/lib&#34;;&#xA;use Test::Bot::GitHub;&#xA;&#xA;my $bot = Test::Bot::GitHub-&amp;gt;new_with_options(&#xA;    source_dir =&amp;gt; &#34;$ENV{HOME}/myproject&#34;,&#xA;    tests_dir =&amp;gt; &#34;t&#34;,&#xA;    notification_modules =&amp;gt; [ &#39;IRC&#39; ],&#xA;    port =&amp;gt; 4000,&#xA;    force =&amp;gt; 1,  # overwrite local modifications?&#xA;);&#xA;$bot-&amp;gt;configure_notifications(&#xA;    irc_host =&amp;gt; &#39;irc.int80.biz&#39;,&#xA;    irc_channel =&amp;gt; &#39;#int80&#39;,&#xA;);&#xA;&#xA;$bot-&amp;gt;run;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you specify force =&amp;gt; 1, a &lt;code&gt;git clean -df&lt;/code&gt; and &lt;code&gt;git checkout -f $commit&lt;/code&gt; will be performed when running tests for a commit. This will delete untracked (and not ignored) files and changes, so be careful.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in using this program and would like to help develop it further, please let me know via GitHub, email or IRC.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manakai/perl-json-ps</title>
    <updated>2022-10-05T01:40:03Z</updated>
    <id>tag:github.com,2022-10-05:/manakai/perl-json-ps</id>
    <link href="https://github.com/manakai/perl-json-ps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Perl implementation of JSON&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;JSON::PS - A JSON parser and serializer&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use JSON::PS; $json = perl2json_bytes $perl; $perl = json_bytes2perl $json;&lt;/p&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;The C&lt;a href=&#34;JSON::PS&#34;&gt;JSON::PS&lt;/a&gt; module provides JSON parser and serializer functions.&lt;/p&gt; &#xA;&lt;p&gt;=head1 FUNCTIONS&lt;/p&gt; &#xA;&lt;p&gt;Following functions are exported by default, or can be exported by enumerating them as argument to the C&#xA; &lt;use&gt;&#xA;   statement:&#xA; &lt;/use&gt;&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $perl = json_bytes2perl $json&lt;/p&gt; &#xA;&lt;p&gt;Decode the argument as a UTF-8 encoded JSON byte sequence and return the Perl data structure corresponding to it. Return C&#xA; &lt;undef&gt;&#xA;   if failed.&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $perl = json_chars2perl $json&lt;/p&gt; &#xA;&lt;p&gt;Decode the argument as a JSON character sequence and return the Perl data structure corresponding to it. Return C&#xA; &lt;undef&gt;&#xA;   if failed.&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $json = perl2json_bytes $perl&lt;/p&gt; &#xA;&lt;p&gt;Encode the argument as a UTF-8 encoded JSON byte sequence and return the result.&lt;/p&gt; &#xA;&lt;p&gt;=item $json = perl2json_chars $perl&lt;/p&gt; &#xA;&lt;p&gt;Encode the argument as a JSON character sequence and return the result.&lt;/p&gt; &#xA;&lt;p&gt;=item $json = perl2json_bytes_for_record $perl&lt;/p&gt; &#xA;&lt;p&gt;Encode the argument as a UTF-8 encoded pretty-printed JSON byte sequence and return the result.&lt;/p&gt; &#xA;&lt;p&gt;=item $json = perl2json_chars_for_record $perl&lt;/p&gt; &#xA;&lt;p&gt;Encode the argument as a pretty-printed JSON character sequence and return the result.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 ERROR HANDLING&lt;/p&gt; &#xA;&lt;p&gt;By default, JSON parse errors are C&#xA; &lt;warn&gt;&#xA;  ed. This behavior can be replaced by setting an error handler to the global variable C&amp;lt;$JSON::PS::OnError&amp;gt;.&#xA; &lt;/warn&gt;&lt;/p&gt; &#xA;&lt;p&gt;The error handler is invoked with a hash reference as the argument. See &lt;a href=&#34;https://github.com/manakai/data-errors/raw/master/doc/onerror.txt&#34;&gt;https://github.com/manakai/data-errors/blob/master/doc/onerror.txt&lt;/a&gt; for details of values available from the hash reference.&lt;/p&gt; &#xA;&lt;p&gt;=head1 SPECIFICATION&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item JSON&lt;/p&gt; &#xA;&lt;p&gt;ECMA-404 The JSON Data Interchange Format &lt;a href=&#34;https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&#34;&gt;https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 MAPPING BETWEEN JSON AND PERL&lt;/p&gt; &#xA;&lt;p&gt;This module adopts simplest possible mapping from JSON to Perl and vice versa. It is not a goal of the module to provide a complete mapping between every possible JSON and Perl values.&lt;/p&gt; &#xA;&lt;p&gt;=head2 JSON to Perl&lt;/p&gt; &#xA;&lt;p&gt;JSON C&#xA; &lt;null&gt;&#xA;   is mapped to Perl C&#xA;  &lt;undef&gt;&#xA;   .&#xA;  &lt;/undef&gt;&#xA; &lt;/null&gt;&lt;/p&gt; &#xA;&lt;p&gt;JSON C&#xA; &lt;true&gt;&#xA;   is mapped to Perl C&amp;lt;1&amp;gt;.&#xA; &lt;/true&gt;&lt;/p&gt; &#xA;&lt;p&gt;JSON C&#xA; &lt;false&gt;&#xA;   is mapped to Perl C&amp;lt;0&amp;gt;.&#xA; &lt;/false&gt;&lt;/p&gt; &#xA;&lt;p&gt;JSON numbers are mapped to Perl scalar values with same numeric value. Numbers can overflow or underflow.&lt;/p&gt; &#xA;&lt;p&gt;JSON strings are mapped to Perl scalar values with same string value. If the input JSON data is a Perl character string, the output can contain characters greater than U+10FFFF.&lt;/p&gt; &#xA;&lt;p&gt;JSON arrays are mapped to Perl array references. JSON array items are used as Perl array items.&lt;/p&gt; &#xA;&lt;p&gt;JSON objects are mapped to Perl hash references. JSON names and values are used as hash keys and values. Order of them are not preserved in Perl. If there are multiple values with same name, the later value is used as the value in the hash.&lt;/p&gt; &#xA;&lt;p&gt;This module has no restriction on length of string and number of items in array or object.&lt;/p&gt; &#xA;&lt;p&gt;=head2 Perl to JSON&lt;/p&gt; &#xA;&lt;p&gt;If an object with C&amp;lt;TO_JSON&amp;gt; method is given, the method is invoked and the result is used. It is expected to return a non-object scalar value and not to throw any exception.&lt;/p&gt; &#xA;&lt;p&gt;Perl hash references are mapped to JSON objects. Hash keys and values are used as JSON names and values. Order of JSON names are not considered as significant upon serialization.&lt;/p&gt; &#xA;&lt;p&gt;Perl array references are mapped to JSON arrays. Perl array items are used as JSON array items.&lt;/p&gt; &#xA;&lt;p&gt;A Perl scalar reference referencing a Perl scalar value C&amp;lt;1&amp;gt; (a string or a number) is mapped to JSON C&#xA; &lt;true&gt;&#xA;  .&#xA; &lt;/true&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Perl scalar reference referencing a Perl scalar value C&amp;lt;0&amp;gt; (a string or a number) is mapped to JSON C&#xA; &lt;false&gt;&#xA;  .&#xA; &lt;/false&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the L&lt;a href=&#34;Types::Serialiser&#34;&gt;Types::Serialiser&lt;/a&gt; module is loaded, any Perl reference value C&lt;a href=&#34;Types::Serialiser::is_true&#34;&gt;Types::Serialiser::is_true&lt;/a&gt; would return true is mapped to JSON C&#xA; &lt;true&gt;&#xA;  .&#xA; &lt;/true&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the L&lt;a href=&#34;Types::Serialiser&#34;&gt;Types::Serialiser&lt;/a&gt; module is loaded, any Perl reference value C&lt;a href=&#34;Types::Serialiser::is_false&#34;&gt;Types::Serialiser::is_false&lt;/a&gt; would return true is mapped to JSON C&#xA; &lt;false&gt;&#xA;  .&#xA; &lt;/false&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any other Perl scalar value is mapped to JSON number or string. If the value has numeric value and is not C&#xA; &lt;inf&gt;&#xA;  , C&amp;lt;-inf&amp;gt;, or C&#xA;  &lt;nan&gt;&#xA;   , it is mapped to equivalent JSON number. Otherwise, it is mapped to equivalent JSON string. If there is a character greater than U+10FFFF, the JSON string also contains the character (which is non-conforming). If the output is a byte string, however, the character is converted to U+FFFD when it is converted to bytes.&#xA;  &lt;/nan&gt;&#xA; &lt;/inf&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, the following code generates a JSON array with a string and a number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;print perl2json_bytes [ &#34;&#34; . 12345 , 0 + &#34;10.1&#34; ]; # [&#34;12345&#34;,10.1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It prefers code point escapes to one-character escapes, which is different from ECMAScript&#39;s C&amp;lt;JSON.stringify&amp;gt;. It escapes more characters than ECMAScript: C&amp;lt;&#34;&amp;gt;, C&amp;lt;&amp;gt; C&amp;lt;+&amp;gt;, C&amp;lt;&amp;lt; &amp;lt; &amp;gt;&amp;gt;, C0 and C1 control characters, C&#xA; &lt;delete&gt;&#xA;  , U+2028, U+2029, noncharacter code points, and surrogate code points.&#xA; &lt;/delete&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 COMPARISON WITH SIMILAR MODULES&lt;/p&gt; &#xA;&lt;p&gt;If performance is important for your application, use L&lt;a href=&#34;JSON::XS&#34;&gt;JSON::XS&lt;/a&gt;. If you don&#39;t like XS, use L&lt;a href=&#34;JSON::Tiny&#34;&gt;JSON::Tiny&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have to support some non-standard extension to JSON syntax, write your own parser or serializer.&lt;/p&gt; &#xA;&lt;p&gt;API of this module is same as L&lt;a href=&#34;JSON::Functions::XS&#34;&gt;JSON::Functions::XS&lt;/a&gt; &lt;a href=&#34;https://github.com/wakaba/perl-json-functions-xs&#34;&gt;https://github.com/wakaba/perl-json-functions-xs&lt;/a&gt;, a function-based API wrapper for L&lt;a href=&#34;JSON::XS&#34;&gt;JSON::XS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 DEPENDENCY&lt;/p&gt; &#xA;&lt;p&gt;The module requires Perl 5.14 or later. It also requires L&lt;b&gt; and L&#xA;  &lt;carp&gt;&#xA;    (both are Perl core modules).&#xA;  &lt;/carp&gt;&lt;/b&gt;&lt;/p&gt;&#xA;&lt;b&gt; &lt;p&gt;In addition, it requires perl-web-encodings &lt;a href=&#34;https://github.com/manakai/perl-web-encodings&#34;&gt;https://github.com/manakai/perl-web-encodings&lt;/a&gt; modules. For backward compatibility, if they are not available, it fallbacks to L&#xA;  &lt;encode&gt;&#xA;    (a Perl core module); however this is not recommended, as it is not always compatible with the Encoding Standard.&#xA;  &lt;/encode&gt;&lt;/p&gt; &lt;p&gt;Tests require some more modules, but they are not required by the module itself.&lt;/p&gt; &lt;p&gt;=head1 INSTALL&lt;/p&gt; &lt;p&gt;Just copy the C&amp;lt;lib/JSON/PS.pm&amp;gt; file into an appropriate directory, or add &lt;a href=&#34;https://github.com/manakai/perl-json-ps&#34;&gt;https://github.com/manakai/perl-json-ps&lt;/a&gt; as a Git submodule of the Git repository of your application.&lt;/p&gt; &lt;p&gt;=head1 DEVELOPMENT&lt;/p&gt; &lt;p&gt;Latest version of the module is available in the Git repository &lt;a href=&#34;https://github.com/manakai/perl-json-ps&#34;&gt;https://github.com/manakai/perl-json-ps&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You should add the Git repository as a submodule of the Git repository of your application, or copy the Perl module file &lt;a href=&#34;https://raw.githubusercontent.com/manakai/perl-json-ps/master/lib/JSON/PS.pm&#34;&gt;https://raw.githubusercontent.com/manakai/perl-json-ps/master/lib/JSON/PS.pm&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;=head1 HISTORY&lt;/p&gt; &lt;p&gt;This module was inspired by L&lt;a href=&#34;JSON::Functions::XS&#34;&gt;JSON::Functions::XS&lt;/a&gt; &lt;a href=&#34;https://github.com/wakaba/perl-json-functions-xs&#34;&gt;https://github.com/wakaba/perl-json-functions-xs&lt;/a&gt; and other earlier JSON implementations.&lt;/p&gt; &lt;p&gt;This repository was located at &lt;a href=&#34;https://github.com/wakaba/perl-json-ps&#34;&gt;https://github.com/wakaba/perl-json-ps&lt;/a&gt; until it has been transferred to the manakai project on October 6, 2021.&lt;/p&gt; &lt;p&gt;=head1 AUTHOR&lt;/p&gt; &lt;p&gt;Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;=head1 LICENSE&lt;/p&gt; &lt;p&gt;Copyright 2014-2021 Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &lt;p&gt;=cut&lt;/p&gt; &lt;/b&gt;</summary>
  </entry>
  <entry>
    <title>cww/capsulary-tools</title>
    <updated>2022-10-05T01:40:03Z</updated>
    <id>tag:github.com,2022-10-05:/cww/capsulary-tools</id>
    <link href="https://github.com/cww/capsulary-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EVE Online tools; they go along with the capsulary-site repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Just a few tools for Eve Online that I&#39;ve written. Nothing too special here.&lt;/p&gt; &#xA;&lt;h1&gt;Database Dumps&lt;/h1&gt; &#xA;&lt;p&gt;CCP provides static data dumps in MSSQL format. Since that can be difficult, inconvenient, and/or depressing to use, some other people have provided MySQL data dumps. I won&#39;t get on my high horse about MySQL in a README file, but suffice to say I appreciate their efforts. I&#39;ve made one such MySQL dump available at the following URL.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.colinwetherbee.com/eve/static/evedump.sql.bz2&#34;&gt;evedump.sql.bz2; 46 MB&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This data dump comes from db.descention.net and can be used with MySQL 5.1 and up. My favorite way to import it is the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# echo &#39;create database evedump;&#39; | mysql&#xA;# bzip2 -cd evedump.sql.bz2 | mysql evedump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;For the Perl scripts, you&#39;ll probably want Redis.pm 1.951 or better. Debian squeeze ships with version 1.2 or so, and that will break badly (and probably mess up your Redis database while it&#39;s at it).&lt;/p&gt;</summary>
  </entry>
</feed>