<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-08T01:51:57Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TritonDataCenter/jsstyle</title>
    <updated>2022-07-08T01:51:57Z</updated>
    <id>tag:github.com,2022-07-08:/TritonDataCenter/jsstyle</id>
    <link href="https://github.com/TritonDataCenter/jsstyle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cstyle-based JavaScript style checker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jsstyle&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;jsstyle&lt;/code&gt; is a style checker for JavaScript coding style. This tool is derived from the cstyle tool used to check for the style used in the Solaris kernel, sometimes known as &#34;Bill Joy Normal Form&#34;. This tool is a &lt;em&gt;little bit&lt;/em&gt; configurable. However it strives to enforces a single coding style based on that cstyle. See &#34;Configuration Options&#34; below.&lt;/p&gt; &#xA;&lt;p&gt;The original cstyle tool can be found here: &lt;a href=&#34;https://github.com/illumos/illumos-gate/raw/master/usr/src/tools/scripts/cstyle.pl&#34;&gt;https://github.com/illumos/illumos-gate/blob/master/usr/src/tools/scripts/cstyle.pl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The document describing C Style is available here: &lt;a href=&#34;http://www.cis.upenn.edu/~lee/06cse480/data/cstyle.ms.pdf&#34;&gt;http://www.cis.upenn.edu/~lee/06cse480/data/cstyle.ms.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples of conditions checked by this tool include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Strings must be quoted with single quotes.&lt;/li&gt; &#xA; &lt;li&gt;Blocks must be indented with tabs, not spaces.&lt;/li&gt; &#xA; &lt;li&gt;Continuation lines must be indented with 4 spaces.&lt;/li&gt; &#xA; &lt;li&gt;Keywords (for, if, function, etc.) must be followed with a space.&lt;/li&gt; &#xA; &lt;li&gt;One line cannot contain multiple keywords.&lt;/li&gt; &#xA; &lt;li&gt;Relational operators must be surrounded with spaces.&lt;/li&gt; &#xA; &lt;li&gt;There must be no spaces between tabs, nor tabs between spaces.&lt;/li&gt; &#xA; &lt;li&gt;Lines must not end with whitespace.&lt;/li&gt; &#xA; &lt;li&gt;Multi-line block comments must start and end with a blank line.&lt;/li&gt; &#xA; &lt;li&gt;Return expressions must be parenthesized.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;No new features planned. The biggest known issue is that jsstyle doesn&#39;t grok regexes, so you usually need to wrap these in JSSTYLED comments (see below).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;jsstyle [OPTIONS] file1.js [file2.js ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration Options&lt;/h2&gt; &#xA;&lt;p&gt;Configuration options may be specified in a file (one option per line) with the &#34;-f PATH&#34; switch, or on the command line with the &#34;-o OPTION1,OPTION2&#34; switch.&lt;/p&gt; &#xA;&lt;p&gt;As stated about, &lt;code&gt;jsstyle&lt;/code&gt; is opinionated and intends to stay that way. That said, this author was arm twisted under duress to allow the following configurability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;doxygen                 Allow doxygen-style block comments `/** /*!`.&#xA;splint                  Allow splint-style lint comments `/*@ ... @*/`.&#xA;                        This is legacy. Does anyone use this?&#xA;indent=&amp;lt;NUM|tab&amp;gt;        An integer number of spaces for indentation, or&#xA;                        &#39;tab&#39; for tab indentation (the default).&#xA;strict-indent           Boolean option, set to 1 to force indents of spaces&#xA;                        to be a multiple of indent parameter.&#xA;line-length             An integer number to specify the maximum length&#xA;                        of a line (default: 80)&#xA;literal-string-quote    &#39;single&#39; (the default) or &#39;double&#39;. Specifies&#xA;                        the preferred quote character for literal strings.&#xA;unparenthesized-return  Boolean option, set to 0 to disable the&#xA;                        &#34;unparenthesized return expression&#34; check.&#xA;blank-after-start-comment&#xA;                        Boolean option, set to 0 to disable the&#xA;                        &#34;missing blank after start comment&#34; check. `// `&#xA;blank-after-open-comment&#xA;                        Boolean option, set to 0 to disable the&#xA;                        &#34;missing blank after open comment&#34; check. `/* */`&#xA;no-blank-for-anon-function&#xA;                        Boolean option, set to 1 to allow anonymous&#xA;                        functions without blank before paren. `function() { ... }`&#xA;continuation-at-front   Boolean option, set to 1 to force continations&#xA;                        to be at the beginning rather than end of line.&#xA;leading-right-paren-ok  Boolean option, set to 1 to allow ) to start a&#xA;                        line.&#xA;&#xA;whitespace-after-left-paren-ok&#xA;                        Boolean option, allow whitespace after a (&#xA;                        character.&#xA;&#xA;leading-comma-ok        Boolean option to allow lines to begin with commas&#xA;                        (preceded by whitespace).&#xA;&#xA;uncuddled-else-ok       Boolean option to allow for an else block to begin&#xA;                        on a new line.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&#34;JSSTYLED&#34;-comments&lt;/h2&gt; &#xA;&lt;p&gt;When you want &lt;code&gt;jsstyle&lt;/code&gt; to ignore a line, you can use this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/* JSSTYLED */&#xA;ignore = this + line;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/* BEGIN JSSTYLED */&#xA;var here&#xA;  , be&#xA;  , some = funky&#xA;  , style&#xA;/* END JSSTYLED */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;CDDL&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kyolee310/ip_space_manager</title>
    <updated>2022-07-08T01:51:57Z</updated>
    <id>tag:github.com,2022-07-08:/kyolee310/ip_space_manager</id>
    <link href="https://github.com/kyolee310/ip_space_manager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automated IP Reservation Manager A.K.A Metaleuca Resource Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ip_space_manager&lt;/h1&gt; &#xA;&lt;p&gt;Automated IP Reservation Manager A.K.A Metaleuca Resource Manager&lt;/p&gt; &#xA;&lt;h2&gt;Open Source Licence&lt;/h2&gt; &#xA;&lt;p&gt;Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wakaba/perl-json-functions-xs</title>
    <updated>2022-07-08T01:51:57Z</updated>
    <id>tag:github.com,2022-07-08:/wakaba/perl-json-functions-xs</id>
    <link href="https://github.com/wakaba/perl-json-functions-xs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JSON::Functions::XS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;JSON::Functions::XS - Easy-to-use functional JSON-Perl convertions&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use JSON::Functions::XS qw(json_bytes2perl perl2json_bytes);&lt;/p&gt; &#xA;&lt;p&gt;print perl2json_bytes $obj; print json_bytes2perl $json;&lt;/p&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;The C&lt;a href=&#34;JSON::Functions::XS&#34;&gt;JSON::Functions::XS&lt;/a&gt; module provides various useful functions to decode or encode JSON data. These functions are wrappers; actual conversion is enforced by the L&lt;a href=&#34;JSON::XS&#34;&gt;JSON::XS&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;Strictly speaking, C&lt;a href=&#34;JSON::Functions::XS&#34;&gt;JSON::Functions::XS&lt;/a&gt; is not just a wrapper for L&lt;a href=&#34;JSON::XS&#34;&gt;JSON::XS&lt;/a&gt;, but it adds some modifications to improve interoperability, namely:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item - Support for scalar literal values&lt;/p&gt; &#xA;&lt;p&gt;According to ECMA-404 JSON specification, a number, string, boolean, or null value can be recognized as valid input.&lt;/p&gt; &#xA;&lt;p&gt;=item - Silent error recovery from fatal errors&lt;/p&gt; &#xA;&lt;p&gt;In many use cases of JSON parsing, the application don&#39;t have to know what is exatly wrong with the JSON input but rather the entire operation should not die just because the input is invalid. In such an application, ill-formed input is as bad as wrongly-constructed well-formed JSON data, such that it has to check the result data structure anyway to be error tolerant. Therefore this module does not raise when the input is invalid. If you&#39;d like to distinguish parse errors from application-dependent structural errors, this module would not be a choice for you.&lt;/p&gt; &#xA;&lt;p&gt;=item - Avoiding HTML XSS&lt;/p&gt; &#xA;&lt;p&gt;To prevent from HTML XSS attacks when the JSON output is poorly-labelled, or for legacy-browser users, this module replaces C&amp;lt;&amp;lt; &amp;lt; &amp;gt;&amp;gt; characters in JSON output into its escaped form.&lt;/p&gt; &#xA;&lt;p&gt;=item - Avoiding UTF-7 XSS&lt;/p&gt; &#xA;&lt;p&gt;To avoid UTF-7 XSS attacks for legacy-browser users, this module replaces C&amp;lt;+&amp;gt; characters in JSON output into its escaped form.&lt;/p&gt; &#xA;&lt;p&gt;=item - JavaScript/JSONP compatbility&lt;/p&gt; &#xA;&lt;p&gt;To improve JavaScript/JSONP compatibility, this module replaces U+2028 and U+2029 characters in JSON output, which are not allowed in JavaScript string literals, into their escaped forms.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 FUNCTIONS&lt;/p&gt; &#xA;&lt;p&gt;Functions are exposed by default. Instead, you can specify one or more functions to use after the module name:&lt;/p&gt; &#xA;&lt;p&gt;use JSON::Functions::XS qw(json_bytes2perl json_chars2perl);&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $perl_obj = json_bytes2perl $json_byte_string&lt;/p&gt; &#xA;&lt;p&gt;Converts a JSON data represented as a byte string encoded in C&#xA; &lt;utf8&gt;&#xA;   into Perl data structure.&#xA; &lt;/utf8&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $perl_obj = json_chars2perl $json_char_string&lt;/p&gt; &#xA;&lt;p&gt;Converts a JSON data represented as a character string into Perl data structure.&lt;/p&gt; &#xA;&lt;p&gt;=item $perl_obj = file2perl $path_class_file&lt;/p&gt; &#xA;&lt;p&gt;Converts a JSON contained in a file encoded in C&#xA; &lt;utf8&gt;&#xA;   specified by the L&#xA;  &lt;a href=&#34;Path::Class::File&#34;&gt;Path::Class::File&lt;/a&gt; object into Perl data structure.&#xA; &lt;/utf8&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $json_byte_string = perl2json_bytes $perl_obj&lt;/p&gt; &#xA;&lt;p&gt;Converts a Perl data into JSON represented as a byte string encoded in C&#xA; &lt;utf8&gt;&#xA;  .&#xA; &lt;/utf8&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $json_byte_string = perl2json_bytes_for_record $perl_obj&lt;/p&gt; &#xA;&lt;p&gt;Converts a Perl data into JSON represented as a byte string encoded in C&#xA; &lt;utf8&gt;&#xA;  , pretty-printed.&#xA; &lt;/utf8&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $json_char_string = perl2json_chars $perl_obj&lt;/p&gt; &#xA;&lt;p&gt;Converts a Perl data into JSON represented as a character string.&lt;/p&gt; &#xA;&lt;p&gt;=item $json_char_string = perl2json_chars_for_record $perl_obj&lt;/p&gt; &#xA;&lt;p&gt;Converts a Perl data into JSON represented as a character string, pretty-printed.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 DEPENDENCY&lt;/p&gt; &#xA;&lt;p&gt;The module requires Perl 5.14 or later and modules L&lt;a href=&#34;JSON::XS&#34;&gt;JSON::XS&lt;/a&gt; and L&#xA; &lt;encode&gt;&#xA;  .&#xA; &lt;/encode&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;ECMA-404 The JSON Data Interchange Format &lt;a href=&#34;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&#34;&gt;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;JSON::PS&#34;&gt;JSON::PS&lt;/a&gt; &lt;a href=&#34;https://github.com/wakaba/perl-json-ps&#34;&gt;https://github.com/wakaba/perl-json-ps&lt;/a&gt; - A pure Perl JSON/Perl convertion functions, whose API is fully compatible with this module.&lt;/p&gt; &#xA;&lt;p&gt;=head1 DEVELOPMENT&lt;/p&gt; &#xA;&lt;p&gt;Latest version of the module is available from the GitHub repository:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item GitHub&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wakaba/perl-json-functions-xs&#34;&gt;https://github.com/wakaba/perl-json-functions-xs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=item Travis CI&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/wakaba/perl-json-functions-xs&#34;&gt;https://travis-ci.org/wakaba/perl-json-functions-xs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2009-2011 Hatena &lt;a href=&#34;https://www.hatena.ne.jp/&#34;&gt;https://www.hatena.ne.jp/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2016 Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
</feed>