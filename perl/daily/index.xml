<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-04T01:40:39Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sd-pub/sd-2023-homeworks</title>
    <updated>2023-04-04T01:40:39Z</updated>
    <id>tag:github.com,2023-04-04:/sd-pub/sd-2023-homeworks</id>
    <link href="https://github.com/sd-pub/sd-2023-homeworks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README check&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This is the checker used to automatically grade the Virtual Memory Allocator.&lt;/p&gt; &#xA;&lt;p&gt;The name of the checker is &lt;code&gt;check&lt;/code&gt;. It is written in &lt;code&gt;Python 3.6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What does it do?&lt;/h2&gt; &#xA;&lt;p&gt;It will do the multiples steps.&lt;/p&gt; &#xA;&lt;p&gt;All steps marked with &lt;code&gt;[STOP]&lt;/code&gt; are required. If one failed the checker will stop. All steps marked with &lt;code&gt;[OPTIONAL]&lt;/code&gt; are optional and can be disabled from config.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;deps&lt;/code&gt;: Check if all dependencies are installed on local system in order to build/run/grade the homerwork.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;build&lt;/code&gt;: Build homework. 2.1. [STOP] &lt;code&gt;Makefile&lt;/code&gt;: Check if &lt;code&gt;Makefile&lt;/code&gt; exists. 2.2. [STOP] &lt;code&gt;make&lt;/code&gt;: Run &lt;code&gt;make build&lt;/code&gt; in order to build all binaries. 2.3. [OPT]&lt;code&gt;warnings&lt;/code&gt;: If warnings are detected, a penalty to final grade is applied.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;run&lt;/code&gt;: Run all tests for specified tasks (all or one). 3.1 [STOP] &lt;code&gt;run&lt;/code&gt;: Run task for current test. Continue iff the program exited successfully. 3.2 [STOP] &lt;code&gt;check&lt;/code&gt;: Check if the solution is correction. Continue iff the program found solution for task/at least one subtask. 3.3 [OPT ] &lt;code&gt;valgrind&lt;/code&gt;: Check for memory leaks and errors. If valgrind found problems, the test grade is 0.&lt;/p&gt; &lt;p&gt;&lt;code&gt;Note&lt;/code&gt;: This stage is using an explained &lt;code&gt;legend&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;UPS&lt;/code&gt;: Ups, program crashed e.g null pointer dereference, negative or to big array/matrix indices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;TLE&lt;/code&gt;: Time Limit Exceed e.g. infinit loop or too slow&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MLE&lt;/code&gt;: Memory Limit Exceed e.g. too much allocated memory (in total or for some segments)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MEM_UPS&lt;/code&gt;: Memory leaks or errors e.g. invalid memory access, unfreed dynamic-allocated arrays&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WA&lt;/code&gt;: Wrong Answer (wrong or partial output) e.g. output is missing or has other value&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;OK&lt;/code&gt;: Everything is OK.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;style&lt;/code&gt;: Run coding style checker to automatically report most common mistakes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;README&lt;/code&gt;: Basic check for reminding students to put a readme file before final submission. &lt;code&gt;Note&lt;/code&gt;: If the &lt;code&gt;README&lt;/code&gt; is missing, a penalty to final grade is applied.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt;: Remove all generated files by running the &lt;code&gt;make clean&lt;/code&gt; command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;grade&lt;/code&gt;: Print final grade (which is always non-negative).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;install.sh&lt;/code&gt; script can be used to install all dependencies for &lt;code&gt;check&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: Please inspect the script to see which are the requirements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo ./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run entire homework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Coding style checker&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;code&gt;cs/README.md&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>