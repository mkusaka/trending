<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-29T01:38:49Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Logitech/slimserver-tools</title>
    <updated>2023-10-29T01:38:49Z</updated>
    <id>tag:github.com,2023-10-29:/Logitech/slimserver-tools</id>
    <link href="https://github.com/Logitech/slimserver-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for Slimserver&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Squeezebox Server Tools&lt;/p&gt; &#xA;&lt;p&gt;This directory contains several scripts to work along with the slimserver software.&lt;/p&gt; &#xA;&lt;p&gt;-skinjob.pl Use this tool to convert skins made for SLIMP3 Server (versions before 5.0). The syntax is as follows: skinjob.pl &#xA; &lt;skinname&gt;&#xA;   where skinname is an optional argument for the skin you wish to change.&#xA;  &lt;br&gt; If no argument, it will start with the current directory. If you run this from the root directory of the skin, it will convert that skin without any arguments needed. This script replaces slimp3.css with slimserver.css, all references within the html file to slimserver.css, and converts any perl module calls to the new SlimServer modules.&#xA;  &lt;br&gt; Old html files are copied and saved to a directory named &#34;old&#34;.&#xA; &lt;/skinname&gt;&lt;/p&gt; &#xA;&lt;p&gt;-slimp3.pl Command line interface access to the SlimServer. Usage: slimp3.pl --httpaddr &amp;lt;host|ip&amp;gt; --httpport &#xA; &lt;port&gt;&#xA;   --command &#xA;  &lt;command&gt; [--p1 &#xA;  &lt;arg&gt;&#xA;   ] [--p2 &#xA;   &lt;arg&gt;&#xA;    ] [--p3 &#xA;    &lt;arg&gt;&#xA;     ] [--p4 &#xA;     &lt;arg&gt;&#xA;      ] [--player &#xA;      &lt;playerid&gt;&#xA;       ]&#xA;      &lt;/playerid&gt;&#xA;     &lt;/arg&gt;&#xA;    &lt;/arg&gt;&#xA;   &lt;/arg&gt;&#xA;  &lt;/arg&gt;&#xA; &lt;/port&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--httpaddr  =&amp;gt; The hostname or ip address of the SLIMP3 web server&#xA;--httpport  =&amp;gt; The port on which the SLIMP3 web server is listening&#xA;--command   =&amp;gt; Pick from the 1st column of the list below&#xA;--p1        =&amp;gt; Pick from the 2st column of the list below&#xA;--p2        =&amp;gt; Pick from the 3rd column of the list below&#xA;--p3        =&amp;gt; Pick from the 4th column of the list below&#xA;--p4        =&amp;gt; Pick from the 5th column of the list below&#xA;--player    =&amp;gt; Currently the &#34;ip:port&#34; of your player&#xA;&#xA;COMMAND&#x9;&#x9;P1&#x9;P2&#x9;&#x9;P3&#x9;P4&#xA; play&#xA; pause&#x9;&#x9;(0|1|)&#xA; stop&#xA; sleep&#x9;&#x9;(0..n)&#xA; playlist&#x9;play    &amp;lt;song&amp;gt;&#xA; playlist&#x9;load    &amp;lt;playlist&amp;gt;&#xA; playlist&#x9;append  &amp;lt;playlist&amp;gt;&#xA; playlist&#x9;clear&#xA; playlist&#x9;move    &amp;lt;fromoffset&amp;gt;&#x9;&amp;lt;tooffset&amp;gt;&#xA; playlist&#x9;delete  &amp;lt;songoffset&amp;gt;&#xA; playlist&#x9;jump    &amp;lt;index&amp;gt;&#xA; mixer&#x9;&#x9;volume  (0 .. 100)|(-100 .. +100)&#xA; mixer&#x9;&#x9;balance (-100 .. 100)|(-200 .. +200)&#xA; mixer&#x9;&#x9;base    (0 .. 100)|(-100 .. +100)&#xA; mixer&#x9;&#x9;treble  (0 .. 100)|(-100 .. +100)&#xA; status&#xA; display&#x9;&amp;lt;line1&amp;gt; &amp;lt;line2&amp;gt;&#x9;&#x9;(duration)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-update_strings.pl Reads the strings.txt file and checks all items for the presence of an entry defined in $language. If such an entry is not present, it displays entries that are defined in @display and asks the input for $language. An additional sort is done on all translation strings (e.g. DE, FR, EN --&amp;gt; DE, EN, FR) Result is stored in out.txt&lt;/p&gt; &#xA;&lt;p&gt;-whack.pl Use this tool to convert old plugins (made for SLIMP3 Server versions below 5.0) to SlimServer plugins. The syntax for the command is as follows: whack.pl myplugin.pm... This will rewrite myplugin.pm (and any other specified files), leaving a copy of the script in myplugin.pm.old, to use the new module layout.&lt;/p&gt; &#xA;&lt;p&gt;-strings a few tools to extract/merge strings for localization by SLT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PerlDancer/dancer-plugin-deferred</title>
    <updated>2023-10-29T01:38:49Z</updated>
    <id>tag:github.com,2023-10-29:/PerlDancer/dancer-plugin-deferred</id>
    <link href="https://github.com/PerlDancer/dancer-plugin-deferred" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deferred messages for Dancer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=pod&lt;/p&gt; &#xA;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;Dancer::Plugin::Deferred - Defer messages or data across redirections&lt;/p&gt; &#xA;&lt;p&gt;=head1 VERSION&lt;/p&gt; &#xA;&lt;p&gt;version 0.003&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use Dancer::Plugin::Deferred;&lt;/p&gt; &#xA;&lt;p&gt;get &#39;/defer&#39; =&amp;gt; sub { deferred error =&amp;gt; &#34;Klaatu barada nikto&#34;; redirect &#39;/later&#39;; }&lt;/p&gt; &#xA;&lt;p&gt;get &#39;/later&#39; =&amp;gt; sub { template &#39;later&#39;; }&lt;/p&gt; &#xA;&lt;h1&gt;in template &#39;later.tt&#39;&lt;/h1&gt; &#xA;&lt;p&gt;&amp;lt;% IF deferred.error %&amp;gt;&lt;/p&gt; &#xA;&lt;div class=&#34;error&#34;&gt;&#xA; &amp;lt;% deferred.error %&amp;gt;&#xA;&lt;/div&gt; &amp;lt;% END %&amp;gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;This L&#xA; &lt;dancer&gt;&#xA;   plugin provides a method for deferring a one-time message across a redirect. It is similar to &#34;flash&#34; messages, but without the race conditions that can result from multiple tabs in a browser or from AJAX requests. It is similar in design to L&#xA;  &lt;a href=&#34;Catalyst::Plugin::StatusMessage&#34;&gt;Catalyst::Plugin::StatusMessage&lt;/a&gt;, but adapted for Dancer.&#xA; &lt;/dancer&gt;&lt;/p&gt; &#xA;&lt;p&gt;It works by creating a unique message ID within the session that holds deferred data. The message ID is automatically added as a query parameter to redirection requests. It&#39;s sort of like a session within a session, but tied to a request rather than global to the browser. (It will even chain across multiple redirects.)&lt;/p&gt; &#xA;&lt;p&gt;When a template is rendered, a pre-template hook retrieves the data and deletes it from the session. Alternatively, the data can be retrieved manually (which will also automatically delete the data.)&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, the message ID parameters can be retrieved and used to construct a hyperlink for a message to be retrieved later. In this case, the message is preserved past the template hook. (The template should be sure not to render the message if not desired.)&lt;/p&gt; &#xA;&lt;p&gt;=for Pod::Coverage method_names_here&lt;/p&gt; &#xA;&lt;p&gt;=head1 USAGE&lt;/p&gt; &#xA;&lt;p&gt;=head2 deferred&lt;/p&gt; &#xA;&lt;p&gt;deferred $key =&amp;gt; $value; $value = deferred $key; # also deletes $key&lt;/p&gt; &#xA;&lt;p&gt;This function works just like C&lt;var&gt; or C&#xA;  &lt;session&gt;&#xA;   , except that it lasts only for the current request and across any redirects. Data is deleted if accessed. If a key is set to an undefined value, the key is deleted from the deferred data hash.&#xA;  &lt;/session&gt;&lt;/var&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head2 all_deferred&lt;/p&gt; &#xA;&lt;p&gt;template &#39;index&#39;, { deferred =&amp;gt; all_deferred };&lt;/p&gt; &#xA;&lt;p&gt;This function returns all the deferred data as a hash reference and deletes the stored data. This is called automatically in the C&amp;lt;before_template_render&amp;gt; hook, but is available if someone wants to have manual control.&lt;/p&gt; &#xA;&lt;p&gt;=head2 deferred_param&lt;/p&gt; &#xA;&lt;p&gt;template &#39;index&#39; =&amp;gt; { link =&amp;gt; uri_for( &#39;/other&#39;, { deferred_param } ) };&lt;/p&gt; &#xA;&lt;p&gt;This function returns the parameter key and value used to propagate the message to another request. Using this function toggles the C&amp;lt;var_keep_key&amp;gt; variable to true to ensure the message remains to be retrieved by the link.&lt;/p&gt; &#xA;&lt;p&gt;=head1 CONFIGURATION&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item *&lt;/p&gt; &#xA;&lt;p&gt;C&amp;lt;var_key: dpdid&amp;gt; -- this is the key in the C&lt;var&gt; hash containing the message ID&lt;/var&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item *&lt;/p&gt; &#xA;&lt;p&gt;C&amp;lt;var_keep_key: dpd_keep&amp;gt; -- if this key in C&lt;var&gt; is true, retrieving values will not be destructive&lt;/var&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item *&lt;/p&gt; &#xA;&lt;p&gt;C&amp;lt;params_key: dpdid&amp;gt; -- this is the key in the C&#xA; &lt;params&gt;&#xA;   hash containing the message ID&#xA; &lt;/params&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item *&lt;/p&gt; &#xA;&lt;p&gt;C&amp;lt;session_key_prefix&amp;gt;: dpd_&amp;gt; -- the message ID is appended to this prefix and used to store deferred data in the session&lt;/p&gt; &#xA;&lt;p&gt;=item *&lt;/p&gt; &#xA;&lt;p&gt;C&amp;lt;template_key: deferred&amp;gt; -- this is the key to deferred data passed to the template&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item *&lt;/p&gt; &#xA;&lt;p&gt;L&#xA; &lt;dancer&gt;&lt;/dancer&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item *&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;Dancer::Plugin::FlashMessage&#34;&gt;Dancer::Plugin::FlashMessage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item *&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;Dancer::Plugin::FlashNote&#34;&gt;Dancer::Plugin::FlashNote&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item *&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;Catalyst::Plugin::StatusMessage&#34;&gt;Catalyst::Plugin::StatusMessage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 ACKNOWLEDGMENTS&lt;/p&gt; &#xA;&lt;p&gt;Thank you to mst for explaining why L&lt;a href=&#34;Catalyst::Plugin::StatusMessages&#34;&gt;Catalyst::Plugin::StatusMessages&lt;/a&gt; does what it does and putting up with my dumb ideas along the way.&lt;/p&gt; &#xA;&lt;p&gt;=for :stopwords cpan testmatrix url annocpan anno bugtracker rt cpants kwalitee diff irc mailto metadata placeholders metacpan&lt;/p&gt; &#xA;&lt;p&gt;=head1 SUPPORT&lt;/p&gt; &#xA;&lt;p&gt;=head2 Bugs / Feature Requests&lt;/p&gt; &#xA;&lt;p&gt;Please report any bugs or feature requests through the issue tracker at L&lt;a href=&#34;https://github.com/dagolden/dancer-plugin-deferred/issues&#34;&gt;https://github.com/dagolden/dancer-plugin-deferred/issues&lt;/a&gt;. You will be notified automatically of any progress on your issue.&lt;/p&gt; &#xA;&lt;p&gt;=head2 Source Code&lt;/p&gt; &#xA;&lt;p&gt;This is open source software. The code repository is available for public review and contribution under the terms of the license.&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;https://github.com/dagolden/dancer-plugin-deferred&#34;&gt;https://github.com/dagolden/dancer-plugin-deferred&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;git clone git://github.com/dagolden/dancer-plugin-deferred.git&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;David Golden &lt;a href=&#34;mailto:dagolden@cpan.org&#34;&gt;dagolden@cpan.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 COPYRIGHT AND LICENSE&lt;/p&gt; &#xA;&lt;p&gt;This software is Copyright (c) 2012 by David Golden.&lt;/p&gt; &#xA;&lt;p&gt;This is free software, licensed under:&lt;/p&gt; &#xA;&lt;p&gt;The Apache License, Version 2.0, January 2004&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>seveas/Term-Multiplexed</title>
    <updated>2023-10-29T01:38:49Z</updated>
    <id>tag:github.com,2023-10-29:/seveas/Term-Multiplexed</id>
    <link href="https://github.com/seveas/Term-Multiplexed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Term::Multiplexed - Detect terminal multiplexers (screen, tmux)&lt;/p&gt; &#xA;&lt;p&gt;SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use Term::Multiplexed qw(multiplexed attached multiplexer); if(multiplexed) { say &#34;Using &#34; . multiplexer . &#34; as terminal multiplexer&#34;; say &#34;Currently &#34; . (attached ? : &#34;not &#34;) . &#34;attached.&#34;; }&lt;/p&gt; &#xA;&lt;p&gt;DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;When running scripts inside screen/tmux, it&#39;s often useful to detect this and to detect whether the multiplexer of choice is currently attached or not. This module does exactly that and nothing more.&lt;/p&gt; &#xA;&lt;p&gt;EXPORTS&lt;/p&gt; &#xA;&lt;p&gt;multiplexed&lt;/p&gt; &#xA;&lt;p&gt;Returns whether we are running inside a terminal multiplexer or not. Currently only screen and tmux are detected.&lt;/p&gt; &#xA;&lt;p&gt;attached&lt;/p&gt; &#xA;&lt;p&gt;Returns true when the multiplexer is attached. Returns undef when called outside a multiplexed environment.&lt;/p&gt; &#xA;&lt;p&gt;detached&lt;/p&gt; &#xA;&lt;p&gt;Returns false when the multiplexer is attached. Returns undef when called outside a multiplexed environment.&lt;/p&gt; &#xA;&lt;p&gt;multiplexer&lt;/p&gt; &#xA;&lt;p&gt;The name of the current multiplexer. Currently only &#34;screen&#34; and &#34;tmux&#34; are possible return values.&lt;/p&gt; &#xA;&lt;p&gt;muxsocket&lt;/p&gt; &#xA;&lt;p&gt;The full filesystem path to the socket used by the multiplexer.&lt;/p&gt; &#xA;&lt;p&gt;SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;Manpages: screen(1) tmux(1)&lt;/p&gt; &#xA;&lt;p&gt;AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Dennis Kaarsemaker E&#xA; &lt;lt&gt;&#xA;  &lt;a href=&#34;mailto:dennis@kaarsemaker.netE&#34;&gt;dennis@kaarsemaker.netE&lt;/a&gt;&#xA;  &lt;gt&gt;&lt;/gt&gt;&#xA; &lt;/lt&gt;&lt;/p&gt; &#xA;&lt;p&gt;COPYRIGHT AND LICENSE&lt;/p&gt; &#xA;&lt;p&gt;This software is placed in the public domain, no rights reserved&lt;/p&gt;</summary>
  </entry>
</feed>