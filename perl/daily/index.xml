<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:40:46Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hisaichi5518/p5-kukuru</title>
    <updated>2023-02-19T01:40:46Z</updated>
    <id>tag:github.com,2023-02-19:/hisaichi5518/p5-kukuru</id>
    <link href="https://github.com/hisaichi5518/p5-kukuru" rel="alternate"></link>
    <summary type="html">&lt;p&gt;yet anothor Web Application Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Kukuru - yet anothor Web Application Framework&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;hisaichi5518 &amp;lt;hisaichi5518 @ gmail.com&amp;gt;&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jfcoz/postgresqltuner</title>
    <updated>2023-02-19T01:40:46Z</updated>
    <id>tag:github.com,2023-02-19:/jfcoz/postgresqltuner</id>
    <link href="https://github.com/jfcoz/postgresqltuner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple script to analyse your PostgreSQL database configuration, and give tuning advice&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;postgresqltuner.pl&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/jfcoz/postgresqltuner&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jfcoz/postgresqltuner.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/CoCoZ/donate&#34;&gt;&lt;img src=&#34;https://liberapay.com/assets/widgets/donate.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;postgresqltuner.pl&lt;/code&gt; analyses your PostgreSQL instance and produces a report, giving hints. It is inspired by &lt;a href=&#34;https://github.com/major/MySQLTuner-perl&#34;&gt;mysqltuner.pl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Here is a sample output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;postgresqltuner.pl version 1.0.1&#xA;Checking if OS commands are available on /var/run/postgresql...&#xA;[OK]      I can run OS commands&#xA;Connecting to /var/run/postgresql:5432 database template1 with user postgres...&#xA;[OK]      The user acount used for reporting has superuser rights on this PostgreSQL instance&#xA;=====  OS information  =====&#xA;[INFO]    OS: linux Version: 4.9.0 Arch: x86_64-linux-gnu-thread-multi&#xA;[INFO]    OS total memory: 94.36 GB&#xA;[OK]      vm.overcommit_memory is good: no memory overcommitment&#xA;[INFO]    Running (probably) directly on a physical machine&#xA;[INFO]    Currently used I/O scheduler(s): mq-deadline&#xA;=====  General instance informations  =====&#xA;-----  Version  -----&#xA;[OK]      You are using the latest major version (11.5 (Debian 11.5-1+deb10u1)) of PostreSQL&#xA;-----  Uptime  -----&#xA;[INFO]    Service uptime:  01h 41m 13s&#xA;[WARN]    Uptime less than 1 day.  My report may be inaccurate&#xA;-----  Databases  -----&#xA;[INFO]    Database count (except templates): 3&#xA;[INFO]    Database list (except templates): postgres wikistats adrenalib&#xA;-----  Extensions  -----&#xA;[INFO]    Number of activated extensions: 1&#xA;[INFO]    Activated extensions: plpgsql&#xA;[WARN]    Extension pg_stat_statements is disabled in database template1&#xA;-----  Users  -----&#xA;[OK]      No user account will expire in less than 7 days&#xA;[OK]      No user with password=username&#xA;[OK]      Password encryption enabled&#xA;-----  Connection information  -----&#xA;[INFO]    max_connections: 20&#xA;[INFO]    Current used connections: 8 (40.00%)&#xA;[INFO]    2 connections are reserved for super user (10.00%)&#xA;[INFO]    Average connection age:  01h 08m 18s&#xA;-----  Memory usage  -----&#xA;[INFO]    Configured work_mem: 128.00 MB&#xA;[INFO]    Using an average ratio of work_mem buffers by connection of 150% (use --wmp to change it)&#xA;[INFO]    Total work_mem (per connection): 192.00 MB&#xA;[INFO]    shared_buffers: 40.00 GB&#xA;[INFO]    Track activity reserved size: 0.00 B&#xA;[INFO]    maintenance_work_mem=2.00 GB&#xA;[INFO]    Max memory usage:&#xA;&#x9;&#x9;  shared_buffers (40.00 GB)&#xA;&#x9;&#x9;+ max_connections * work_mem * average_work_mem_buffers_per_connection (20 * 128.00 MB * 150 / 100 = 3.75 GB)&#xA;&#x9;&#x9;+ autovacuum_max_workers * maintenance_work_mem (2 * 2.00 GB = 4.00 GB)&#xA;&#x9;&#x9;+ track activity size (0.00 B)&#xA;&#x9;&#x9;= 47.75 GB&#xA;[INFO]    effective_cache_size: 85.00 GB&#xA;[INFO]    Cumulated size of all databases: 2.17 TB&#xA;[INFO]    PostgreSQL maximum amount of memory used: 50.60% of system RAM&#xA;[WARN]    PostgreSQL will not use more than 60% of the amount of RAM.  On a dedicated host you may increase PostgreSQL shared_buffers, as it may improve performances.&#xA;[INFO]    max memory+effective_cache_size (less shared_buffers) is 98.29% of the amount of RAM&#xA;[WARN]    The sum of max_memory and effective_cache_size is too high, the planner may create bad plans because the system buffercache will probably be smaller than expected, especially if the machine is NOT dedicated to PostgreSQL&#xA;-----  Huge Pages  -----&#xA;[OK]      huge_pages enabled in PostgreSQL&#xA;[INFO]    Hugepagesize is 2048 kB&#xA;[INFO]    HugePages_Total 21000 pages&#xA;[INFO]    HugePages_Free 18004 pages&#xA;[INFO]    Suggested number of Huge Pages: 21001 (Consumption peak: 43009080 / Huge Page size: 2048)&#xA;-----  Logs  -----&#xA;[OK]      log_hostname is off: no reverse DNS lookup latency&#xA;[WARN]    Log of long queries deactivated.  It will be more difficult to optimize query performance&#xA;[OK]      log_statement=none&#xA;-----  Two-phase commit  -----&#xA;[OK]      Currently no two-phase commit transactions&#xA;-----  Autovacuum  -----&#xA;[OK]      autovacuum is activated.&#xA;[INFO]    autovacuum_max_workers: 2&#xA;-----  Checkpoint  -----&#xA;[OK]      checkpoint_completion_target(0.9) OK&#xA;-----  Disk access  -----&#xA;[BAD]     fsync is off.  You may lose data after a crash, DANGER!&#xA;[OK]      synchronize_seqscans is on&#xA;-----  WAL  -----&#xA;-----  Planner  -----&#xA;[OK]      I/O cost settings are set at their default values&#xA;[BAD]     Some plan features are disabled: enable_partitionwise_aggregate,enable_partitionwise_join&#xA;=====  Database information for database template1  =====&#xA;-----  Database size  -----&#xA;[INFO]    Database template1 total size: 8.02 MB&#xA;[INFO]    Database template1 indexes size: 4.91 MB (61.21%)&#xA;[INFO]    Database template1 indexes size: 3.11 MB (38.79%)&#xA;-----  Tablespace location  -----&#xA;[OK]      No tablespace in PGDATA&#xA;-----  Shared buffer hit rate  -----&#xA;[INFO]    shared_buffer_heap_hit_rate: 99.98%&#xA;[INFO]    shared_buffer_toast_hit_rate: 97.31%&#xA;[INFO]    shared_buffer_tidx_hit_rate: 98.97%&#xA;[INFO]    shared_buffer_idx_hit_rate: 99.95%&#xA;[OK]      This is very good (if this PostgreSQL instance was recently used as it usually is, and was not stopped since)&#xA;-----  Indexes  -----&#xA;[OK]      No invalid index&#xA;[OK]      No unused indexes&#xA;-----  Procedures  -----&#xA;[OK]      No procedures with default costs&#xA;&#xA;=====  Configuration advice  =====&#xA;-----  checkpoint  -----&#xA;[URGENT] set fsync to on!&#xA;-----  extension  -----&#xA;[LOW] Enable pg_stat_statements in database template1 to collect statistics on all queries (not only those longer than log_min_duration_statement)&#xA;-----  hugepages  -----&#xA;[LOW] Change Huge Pages size from 2MB to 1GB&#xA;[MEDIUM] set vm.nr_hugepages=21001 in /etc/sysctl.conf and run sysctl -p to reload it.  This will allocate Huge Pages (it may require a system reboot).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;To use it&lt;/h2&gt; &#xA;&lt;h3&gt;Install it&lt;/h3&gt; &#xA;&lt;p&gt;It needs Perl with various modules, mainly &lt;code&gt;DBD::Pg&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Debian or a derivative:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install libdbd-pg-perl libdbi-perl perl-modules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Fedora or a derivative:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install perl-DBD-Pg perl-DBI perl-Term-ANSIColor perl-Memoize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Arch or a derivative:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S perl-dbi perl-dbd-pg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On MacOS with Homebrew:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install perl&#xA;cpan DBD-pg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the script. Invoke one of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -O postgresqltuner.pl postgresqltuner.pl&#xA;wget -O postgresqltuner.pl https://postgresqltuner.pl&#xA;curl -Lo postgresqltuner.pl postgresqltuner.pl&#xA;curl -Lo postgresqltuner.pl https://postgresqltuner.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set permissions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod +x postgresqltuner.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then invoke on the command line, as the &#34;postgres&#34; user, either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By connecting to the PostgreSQL server via TCP:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;postgresqltuner.pl --host=dbhost --database=testdb --user=username --password=qwerty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;... or via an Unix socket:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;postgres$ postgresqltuner.pl --host=/var/run/postgresql  # PostgreSQL socket directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If available, postgresqltuner.pl will use standard PostgreSQL variables like &lt;code&gt;PGHOST&lt;/code&gt;, &lt;code&gt;PGPORT&lt;/code&gt;, &lt;code&gt;PGDATABASE&lt;/code&gt;, &lt;code&gt;PGUSERNAME&lt;/code&gt;, and password from the &lt;code&gt;~/.pgpass&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;From package&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Fedora:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install postgresqltuner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On RHEL/CentOS it is available in EPEL.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;With Docker&lt;/h3&gt; &#xA;&lt;p&gt;Invoke on the command-line either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;via the plain network:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm jfcoz/postgresqltuner --host=dbhost --user=username --password=pass --database=testdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;... or via ssh:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm -v $HOME/.ssh:/root/.ssh jfcoz/postgresqltuner --host=dbhost --user=username --password=pass --database=testdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;... or via a docker link:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm --link your-postgresql-container:dbhost jfcoz/postgresqltuner --host=dbhost --user=username --password=pass --database=testdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSH&lt;/h3&gt; &#xA;&lt;p&gt;When using postgresqltuner.pl to inspect a remote PostgreSQL instance, it will use ssh to collect OS informations. You should configure ssh to connect to the remote host with private key authentication.&lt;/p&gt; &#xA;&lt;p&gt;You can provide adequate options to ssh:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;... as commend-line options:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;--sshopt=Port=2200 --sshopt=IdentityFile=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;or in the configuration file &#34;~/.ssh/config&#34;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Host my-database-host&#xA;&#x9;IdentityFile=...&#xA;&#x9;Port=2200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PostgreSQL passwords&lt;/h3&gt; &#xA;&lt;p&gt;For better security use a &lt;code&gt;~/.pgpass&lt;/code&gt; file containing passwords, so no password will be saved in your shell history nor visible in a process complete name. &lt;a href=&#34;https://www.postgresql.org/docs/current/static/libpq-pgpass.html&#34;&gt;.pgpass documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;host:port:database:username:password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Average number of work_mem buffer per connection:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A complex query can use many work_mem buffers. You can configure the average number of work_mem buffers per connection (in percent):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--wmp 300&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default in 150%&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SSD storage:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the PostgreSQL instance runs in an hypervisor or with SSD storage, I cannot detect it accurately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--ssd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Allow to specify that storage is on SSD. Especially useful if PostgreSQL runs in a VM using an underlying (on the physical machine) SSD.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No color&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The report will not be colorized. Useful to save it in a file by using shell redirection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--nocolor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Skip ssh&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When running against an RDS, it is not possible to have a ssh connection to the instance. The option &lt;code&gt;skip-ssh&lt;/code&gt; option skips the ssh connection and related checks. However, without ssh the script won&#39;t be able to search for total_memory. In this case it is possible to manually inform it by using the &lt;code&gt;memory&lt;/code&gt; parameter. This way we can still have the memory ratio warnings. The memory value should be in &lt;strong&gt;bytes&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--skip-ssh --memory=8219082752&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Special FreeBSD settings&lt;/h2&gt; &#xA;&lt;p&gt;FreeBSD has support for virtual memory over-commit, using vm.overcommit configuration setting.&lt;/p&gt; &#xA;&lt;p&gt;This setting is configured via /etc/sysctl.conf.&lt;/p&gt; &#xA;&lt;p&gt;Change &#39;vm.overcommit: 0 &#39; to &#39;vm.overcommit: 1&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Also, install &lt;a href=&#34;https://kukunotes.wordpress.com/2014/11/17/freebsd-view-memory-usage/&#34;&gt;freecolor&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>