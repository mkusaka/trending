<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:38:40Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lockefox/EVE_appreview</title>
    <updated>2022-08-28T01:38:40Z</updated>
    <id>tag:github.com,2022-08-28:/lockefox/EVE_appreview</id>
    <link href="https://github.com/lockefox/EVE_appreview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API cruncher for applicants trying to join an EVE Online corp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EVE_appreview&lt;/h1&gt; &#xA;&lt;p&gt;API cruncher for applicants trying to join an EVE Online corp&lt;/p&gt; &#xA;&lt;p&gt;APIcrunch.pl -id=### -vcode=hashcode Takes EVE Online API key and crunches data, printing out a report for the applicant. Core application in suite. Downloads local copies of relevant personal APIs for data crunching.&lt;/p&gt; &#xA;&lt;p&gt;CORPstanding.pl Controls/downloads corp standing list for flagging connections&lt;/p&gt; &#xA;&lt;p&gt;Wallet_crunch.pl Follow the money. Checks donations (and private contracts, TBD). Also flags against standing list for critical issues&lt;/p&gt; &#xA;&lt;p&gt;Standing_crunch.pl Processes standing/mail info. Flags messages according to corp standing flags.&lt;/p&gt; &#xA;&lt;p&gt;Skill_crunch.pl Builds report of relevant skills. Custom certificate program. Also breaks down PVP/Industry/Other SP counts&lt;/p&gt; &#xA;&lt;p&gt;Ship_crunch.pl Crunches data against doctrine ships. Builds report for &#34;can fly&#34; &#34;can fly well&#34;&lt;/p&gt; &#xA;&lt;h1&gt;Control Files&lt;/h1&gt; &#xA;&lt;p&gt;cert.xml XML file of custom certifications. Completely customizable for various types of corp certs.&lt;br&gt; Default includes both industry and combat certs.&lt;/p&gt; &#xA;&lt;p&gt;standing.xml Standing data from crunched corpAPI data. Includes tags to be human readable.&lt;/p&gt; &#xA;&lt;p&gt;*.sql SQL files from EVE Online to do conversions to/from human readable outputs.&lt;/p&gt; &#xA;&lt;h1&gt;Sample Files&lt;/h1&gt; &#xA;&lt;p&gt;cert-sample.xml Includes comments for formatting. Basic sample rubric&lt;/p&gt; &#xA;&lt;p&gt;Lockefox.txt Sample output report&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mskcc/vcf2maf</title>
    <updated>2022-08-28T01:38:40Z</updated>
    <id>tag:github.com,2022-08-28:/mskcc/vcf2maf</id>
    <link href="https://github.com/mskcc/vcf2maf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convert a VCF into a MAF, where each variant is annotated to only one of all possible gene isoforms&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vcf&lt;img src=&#34;https://i.giphy.com/R6X7GehJWQYms.gif&#34; width=&#34;28&#34;&gt;maf&lt;/h1&gt; &#xA;&lt;p&gt;To convert a &lt;a href=&#34;http://samtools.github.io/hts-specs/&#34;&gt;VCF&lt;/a&gt; into a &lt;a href=&#34;https://docs.gdc.cancer.gov/Data/File_Formats/MAF_Format&#34;&gt;MAF&lt;/a&gt;, each variant must be mapped to only one of all possible gene transcripts/isoforms that it might affect. But even within a single isoform, a &lt;code&gt;Missense_Mutation&lt;/code&gt; close enough to a &lt;code&gt;Splice_Site&lt;/code&gt;, can be labeled as either in MAF format, but not as both. &lt;strong&gt;This selection of a single effect per variant, is often subjective. And that&#39;s what this project attempts to standardize.&lt;/strong&gt; The &lt;code&gt;vcf2maf&lt;/code&gt; and &lt;code&gt;maf2maf&lt;/code&gt; scripts leave most of that responsibility to &lt;a href=&#34;http://useast.ensembl.org/info/docs/tools/vep/index.html&#34;&gt;Ensembl&#39;s VEP&lt;/a&gt;, but allows you to override their &#34;canonical&#34; isoforms, or use a custom ExAC VCF for annotation. Though the most useful feature is the &lt;strong&gt;extensive support in parsing a wide range of crappy MAF-like or VCF-like formats&lt;/strong&gt; we&#39;ve seen out in the wild.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/mskcc/vcf2maf&#34;&gt;&lt;img src=&#34;https://travis-ci.com/mskcc/vcf2maf.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Find the &lt;a href=&#34;https://github.com/mskcc/vcf2maf/releases&#34;&gt;latest stable release&lt;/a&gt;, download it, and view the detailed usage manuals for &lt;code&gt;vcf2maf&lt;/code&gt; and &lt;code&gt;maf2maf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export VCF2MAF_URL=`curl -sL https://api.github.com/repos/mskcc/vcf2maf/releases | grep -m1 tarball_url | cut -d\&#34; -f4`&#xA;curl -L -o mskcc-vcf2maf.tar.gz $VCF2MAF_URL; tar -zxf mskcc-vcf2maf.tar.gz; cd mskcc-vcf2maf-*&#xA;perl vcf2maf.pl --man&#xA;perl maf2maf.pl --man&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have &lt;a href=&#34;http://useast.ensembl.org/info/docs/tools/vep/index.html&#34;&gt;VEP&lt;/a&gt; installed, then &lt;a href=&#34;https://gist.github.com/ckandoth/61c65ba96b011f286220fa4832ad2bc0&#34;&gt;follow this gist&lt;/a&gt;. Of the many annotators out there, VEP is preferred for its large team of active coders, and its CLIA-compliant &lt;a href=&#34;http://www.hgvs.org/mutnomen/recs.html&#34;&gt;HGVS formats&lt;/a&gt;. After installing VEP, test out &lt;code&gt;vcf2maf&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl vcf2maf.pl --input-vcf tests/test.vcf --output-maf tests/test.vep.maf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fill columns 16 and 17 of the output MAF with tumor/normal sample IDs, and to parse out genotypes and allele counts from matched genotype columns in the VCF, use options &lt;code&gt;--tumor-id&lt;/code&gt; and &lt;code&gt;--normal-id&lt;/code&gt;. Skip option &lt;code&gt;--normal-id&lt;/code&gt; if you didn&#39;t have a matched normal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl vcf2maf.pl --input-vcf tests/test.vcf --output-maf tests/test.vep.maf --tumor-id WD1309 --normal-id NB1308&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;VCFs from variant callers like &lt;a href=&#34;http://varscan.sourceforge.net/somatic-calling.html#somatic-output&#34;&gt;VarScan&lt;/a&gt; use hardcoded sample IDs TUMOR/NORMAL to name genotype columns. To have &lt;code&gt;vcf2maf&lt;/code&gt; correctly locate the columns to parse genotypes, while still printing proper sample IDs in the output MAF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl vcf2maf.pl --input-vcf tests/test_varscan.vcf --output-maf tests/test_varscan.vep.maf --tumor-id WD1309 --normal-id NB1308 --vcf-tumor-id TUMOR --vcf-normal-id NORMAL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If VEP is installed under &lt;code&gt;/opt/vep&lt;/code&gt; and the VEP cache is under &lt;code&gt;/srv/vep&lt;/code&gt;, there are options available to tell &lt;code&gt;vcf2maf&lt;/code&gt; where to find them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl vcf2maf.pl --input-vcf tests/test.vcf --output-maf tests/test.vep.maf --vep-path /opt/vep --vep-data /srv/vep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to skip running VEP and need a minimalist MAF-like file listing data from the input VCF only, then use the &lt;code&gt;--inhibit-vep&lt;/code&gt; option. If your input VCF contains VEP annotation, then &lt;code&gt;vcf2maf&lt;/code&gt; will try to extract it. But be warned that the accuracy of your resulting MAF depends on how VEP was operated upstream. In standard operation, &lt;code&gt;vcf2maf&lt;/code&gt; runs VEP with very specific parameters to make sure everyone produces comparable MAFs. So, it is strongly recommended to avoid &lt;code&gt;--inhibit-vep&lt;/code&gt; unless you know what you&#39;re doing.&lt;/p&gt; &#xA;&lt;h2&gt;maf2maf&lt;/h2&gt; &#xA;&lt;p&gt;If you have a MAF or a MAF-like file that you want to reannotate, then use &lt;code&gt;maf2maf&lt;/code&gt;, which simply runs &lt;code&gt;maf2vcf&lt;/code&gt; followed by &lt;code&gt;vcf2maf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl maf2maf.pl --input-maf tests/test.maf --output-maf tests/test.vep.maf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After tests on variant lists from many sources, &lt;code&gt;maf2vcf&lt;/code&gt; and &lt;code&gt;maf2maf&lt;/code&gt; are quite good at dealing with formatting errors or &#34;MAF-like&#34; files. It even supports VCF-style alleles, as long as &lt;code&gt;Start_Position == POS&lt;/code&gt;. But it&#39;s OK if the input format is imperfect. Any variants with a reference allele mismatch are kept aside in a separate file for debugging. The bare minimum columns that &lt;code&gt;maf2maf&lt;/code&gt; expects as input are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Chromosome&#x9;Start_Position&#x9;Reference_Allele&#x9;Tumor_Seq_Allele2&#x9;Tumor_Sample_Barcode&#xA;1&#x9;3599659&#x9;C&#x9;T&#x9;TCGA-A1-A0SF-01&#xA;1&#x9;6676836&#x9;A&#x9;AGC&#x9;TCGA-A1-A0SF-01&#xA;1&#x9;7886690&#x9;G&#x9;A&#x9;TCGA-A1-A0SI-01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;data/minimalist_test_maf.tsv&lt;/code&gt; for a sampler. Addition of &lt;code&gt;Tumor_Seq_Allele1&lt;/code&gt; will be used to determine zygosity. Otherwise, it will try to determine zygosity from variant allele fractions, assuming that arguments &lt;code&gt;--tum-vad-col&lt;/code&gt; and &lt;code&gt;--tum-depth-col&lt;/code&gt; are set correctly to the names of columns containing those read counts. Specifying the &lt;code&gt;Matched_Norm_Sample_Barcode&lt;/code&gt; with its respective columns containing read-counts, is also strongly recommended. Columns containing normal allele read counts can be specified using argument &lt;code&gt;--nrm-vad-col&lt;/code&gt; and &lt;code&gt;--nrm-depth-col&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Apache-2.0 | Apache License, Version 2.0 | https://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Cyriac Kandoth. mskcc/vcf2maf: vcf2maf v1.6.19. (2020). doi:10.5281/zenodo.593251&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>