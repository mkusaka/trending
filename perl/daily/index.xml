<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-27T01:42:34Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pawjy/perl-json-functions-xs</title>
    <updated>2023-04-27T01:42:34Z</updated>
    <id>tag:github.com,2023-04-27:/pawjy/perl-json-functions-xs</id>
    <link href="https://github.com/pawjy/perl-json-functions-xs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JSON::Functions::XS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;JSON::Functions::XS - Easy-to-use functional JSON-Perl convertions&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use JSON::Functions::XS qw(json_bytes2perl perl2json_bytes);&lt;/p&gt; &#xA;&lt;p&gt;print perl2json_bytes $obj; print json_bytes2perl $json;&lt;/p&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;The C&lt;a href=&#34;JSON::Functions::XS&#34;&gt;JSON::Functions::XS&lt;/a&gt; module provides various useful functions to decode or encode JSON data. These functions are wrappers; actual conversion is enforced by the L&lt;a href=&#34;JSON::XS&#34;&gt;JSON::XS&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;Strictly speaking, C&lt;a href=&#34;JSON::Functions::XS&#34;&gt;JSON::Functions::XS&lt;/a&gt; is not just a wrapper for L&lt;a href=&#34;JSON::XS&#34;&gt;JSON::XS&lt;/a&gt;, but it adds some modifications to improve interoperability, namely:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item - Support for scalar literal values&lt;/p&gt; &#xA;&lt;p&gt;According to ECMA-404 JSON specification, a number, string, boolean, or null value can be recognized as valid input.&lt;/p&gt; &#xA;&lt;p&gt;=item - Silent error recovery from fatal errors&lt;/p&gt; &#xA;&lt;p&gt;In many use cases of JSON parsing, the application don&#39;t have to know what is exatly wrong with the JSON input but rather the entire operation should not die just because the input is invalid. In such an application, ill-formed input is as bad as wrongly-constructed well-formed JSON data, such that it has to check the result data structure anyway to be error tolerant. Therefore this module does not raise when the input is invalid. If you&#39;d like to distinguish parse errors from application-dependent structural errors, this module would not be a choice for you.&lt;/p&gt; &#xA;&lt;p&gt;=item - Avoiding HTML XSS&lt;/p&gt; &#xA;&lt;p&gt;To prevent from HTML XSS attacks when the JSON output is poorly-labelled, or for legacy-browser users, this module replaces C&amp;lt;&amp;lt; &amp;lt; &amp;gt;&amp;gt; characters in JSON output into its escaped form.&lt;/p&gt; &#xA;&lt;p&gt;=item - Avoiding UTF-7 XSS&lt;/p&gt; &#xA;&lt;p&gt;To avoid UTF-7 XSS attacks for legacy-browser users, this module replaces C&amp;lt;+&amp;gt; characters in JSON output into its escaped form.&lt;/p&gt; &#xA;&lt;p&gt;=item - JavaScript/JSONP compatbility&lt;/p&gt; &#xA;&lt;p&gt;To improve JavaScript/JSONP compatibility, this module replaces U+2028 and U+2029 characters in JSON output, which are not allowed in JavaScript string literals, into their escaped forms.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 FUNCTIONS&lt;/p&gt; &#xA;&lt;p&gt;Functions are exposed by default. Instead, you can specify one or more functions to use after the module name:&lt;/p&gt; &#xA;&lt;p&gt;use JSON::Functions::XS qw(json_bytes2perl json_chars2perl);&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $perl_obj = json_bytes2perl $json_byte_string&lt;/p&gt; &#xA;&lt;p&gt;Converts a JSON data represented as a byte string encoded in C&#xA; &lt;utf8&gt;&#xA;   into Perl data structure.&#xA; &lt;/utf8&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $perl_obj = json_chars2perl $json_char_string&lt;/p&gt; &#xA;&lt;p&gt;Converts a JSON data represented as a character string into Perl data structure.&lt;/p&gt; &#xA;&lt;p&gt;=item $perl_obj = file2perl $path_class_file&lt;/p&gt; &#xA;&lt;p&gt;Converts a JSON contained in a file encoded in C&#xA; &lt;utf8&gt;&#xA;   specified by the L&#xA;  &lt;a href=&#34;Path::Class::File&#34;&gt;Path::Class::File&lt;/a&gt; object into Perl data structure.&#xA; &lt;/utf8&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $json_byte_string = perl2json_bytes $perl_obj&lt;/p&gt; &#xA;&lt;p&gt;Converts a Perl data into JSON represented as a byte string encoded in C&#xA; &lt;utf8&gt;&#xA;  .&#xA; &lt;/utf8&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $json_byte_string = perl2json_bytes_for_record $perl_obj&lt;/p&gt; &#xA;&lt;p&gt;Converts a Perl data into JSON represented as a byte string encoded in C&#xA; &lt;utf8&gt;&#xA;  , pretty-printed.&#xA; &lt;/utf8&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $json_char_string = perl2json_chars $perl_obj&lt;/p&gt; &#xA;&lt;p&gt;Converts a Perl data into JSON represented as a character string.&lt;/p&gt; &#xA;&lt;p&gt;=item $json_char_string = perl2json_chars_for_record $perl_obj&lt;/p&gt; &#xA;&lt;p&gt;Converts a Perl data into JSON represented as a character string, pretty-printed.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=head1 DEPENDENCY&lt;/p&gt; &#xA;&lt;p&gt;The module requires Perl 5.14 or later and modules L&lt;a href=&#34;JSON::XS&#34;&gt;JSON::XS&lt;/a&gt; and L&#xA; &lt;encode&gt;&#xA;  .&#xA; &lt;/encode&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;ECMA-404 The JSON Data Interchange Format &lt;a href=&#34;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&#34;&gt;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;JSON::PS&#34;&gt;JSON::PS&lt;/a&gt; &lt;a href=&#34;https://github.com/wakaba/perl-json-ps&#34;&gt;https://github.com/wakaba/perl-json-ps&lt;/a&gt; - A pure Perl JSON/Perl convertion functions, whose API is fully compatible with this module.&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 HISTORY&lt;/p&gt; &#xA;&lt;p&gt;This repository was located at &lt;a href=&#34;https://github.com/wakaba/perl-json-functions-xs&#34;&gt;https://github.com/wakaba/perl-json-functions-xs&lt;/a&gt; until 18 April 2023, then transferred to &lt;a href=&#34;https://github.com/pawjy/perl-json-functions-xs&#34;&gt;https://github.com/pawjy/perl-json-functions-xs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2009-2011 Hatena &lt;a href=&#34;https://www.hatena.ne.jp/&#34;&gt;https://www.hatena.ne.jp/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2016 Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
</feed>