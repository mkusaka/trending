<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-17T01:36:48Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>raster/CheerLCD</title>
    <updated>2022-12-17T01:36:48Z</updated>
    <id>tag:github.com,2022-12-17:/raster/CheerLCD</id>
    <link href="https://github.com/raster/CheerLCD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of CheerLights using an Adafruit USB+Serial Backpack.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;For background on CheerLights see: &lt;a href=&#34;http://www.cheerlights.com/&#34;&gt;http://www.cheerlights.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The USB+Serial Backpack will need to be connected to a computer with Internet access via USB.&lt;/p&gt; &#xA;&lt;p&gt;The cheerlights.pl Perl script will loop forever (well, until you kill it, or it dies) and request the file at &lt;a href=&#34;http://api.thingspeak.com/channels/1417/field/1/last.txt&#34;&gt;http://api.thingspeak.com/channels/1417/field/1/last.txt&lt;/a&gt; which will tell it the current color. The Perl script then prints the message (in the appropriate color) to the Adafruit USB+Serial Backpack.&lt;/p&gt; &#xA;&lt;p&gt;On the Perl side you will need the Device::SerialPort and LWP::Simple modules.&lt;/p&gt; &#xA;&lt;p&gt;The script cheerlights_test.pl will cycle through all the colors.&lt;/p&gt; &#xA;&lt;p&gt;The script clear.pl will clear the text from the display.&lt;/p&gt; &#xA;&lt;p&gt;This code is released under the GPL.&lt;/p&gt; &#xA;&lt;p&gt;Pete Prodoehl &lt;a href=&#34;mailto:pete@rasterweb.net&#34;&gt;pete@rasterweb.net&lt;/a&gt; &lt;a href=&#34;http://rasterweb.net/raster/&#34;&gt;http://rasterweb.net/raster/&lt;/a&gt; Twitter: @raster&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yosshin4004/xdev68k</title>
    <updated>2022-12-17T01:36:48Z</updated>
    <id>tag:github.com,2022-12-17:/yosshin4004/xdev68k</id>
    <link href="https://github.com/yosshin4004/xdev68k" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross development environment for the SHARP X68K.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xdev68k&lt;/h1&gt; &#xA;&lt;h1&gt;解説&lt;/h1&gt; &#xA;&lt;p&gt;xdev68k は、SHARP X68K シリーズ対応のクロス開発環境です。 最新の gcc を用いて X68K 対応の実行ファイルが作成可能です。 ホスト環境は、msys2+mingw cygwin 等々の windows exe ファイルが扱える Unix 互換環境が利用可能です。&lt;/p&gt; &#xA;&lt;p&gt;xdev68k は、 旧プロジェクトである x68k_gcc_has_converter（ &lt;a href=&#34;https://github.com/yosshin4004/x68k_gcc_has_converter&#34;&gt;https://github.com/yosshin4004/x68k_gcc_has_converter&lt;/a&gt; ）から発展したものです。 旧プロジェクトは終了し、本プロジェクトに統合されました。&lt;/p&gt; &#xA;&lt;h1&gt;環境構築手順&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Unix 互換環境のインストールと環境構築（作業時間 : 10 分程度）&lt;br&gt; msys2+mingw、cygwin、linux、WSL 等々の Unix 互換環境を用意します。 ここでは、推奨環境である msys2+mingw を利用する場合のインストール手順のみを示します。&lt;/p&gt; &lt;p&gt;msys2 のインストーラは &lt;a href=&#34;https://www.msys2.org/&#34;&gt;https://www.msys2.org/&lt;/a&gt; から入手可能です。 インストールが終わったら、msys の今ロース上で以下を実行し、gcc や perl 等、環境構築に必要なツールをインストールします。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S base-devel&#xA;pacman -S mingw-w64-i686-toolchain&#xA;pacman -S mingw-w64-x86_64-toolchain&#xA;pacman -S autoconf-wrapper&#xA;pacman -S msys/autoconf&#xA;pacman -S msys/automake-wrapper&#xA;pacman -S unzip&#xA;pacman -S cmake&#xA;pacman -S libiconv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;以降 msys の bash コンソール起動は、スタートメニューの MSYS2 MinGW 64bit のアイコンから行います。 ここから起動しないと、ネイティブのコンパイラ環境にパスが通った状態にならず、クロスコンパイラ構築に失敗します。&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/11882108/154822283-4b208ca4-8a69-4b34-a160-5b7845cbaa2a.png&#34; alt=&#34;screen_shot_gfx&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;xdev68k を取得（作業時間 : 1 分程度）&lt;br&gt; 本リポジトリを clone します。 以降、ディレクトリ xdev68k に clone された前提で説明を進めます。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;クロスコンパイラ作成（作業時間 : 環境によっては数時間）&lt;br&gt; 十分なディスク容量（10GB 程度）があることを確認した上で、 ホスト環境の bash コンソール上でディレクトリ xdev68k に移動し、以下のコマンドを実行します。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build_m68k-toolchain.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;xdev68k/m68k-toolchain 以下に、Motorola 680x0 シリーズ対応のクロスコンパイラである m68k-elf-gcc が構築されます。 以下のメッセージがコンソールに出力されれば完了です。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The building process is completed successfully.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ユーティリティのインストール（作業時間 : 5 分程度）&lt;br&gt; ここの操作では、以下のファイルが自動でダウンロードまたはインストールされます。 対象ファイルの詳細については、以下の URL でご確認頂けます。&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;C Compiler PRO-68K ver2.1（XC）システムディスク 1 &amp;amp; 2&lt;br&gt; &lt;a href=&#34;http://retropc.net/x68000/software/sharp/xc21/&#34;&gt;http://retropc.net/x68000/software/sharp/xc21/&lt;/a&gt; （ファイル名 XC2101.LZH, XC2102.LZH）&lt;/li&gt; &#xA;   &lt;li&gt;無償公開された XC システムディスク 2 の修正パッチ&lt;br&gt; &lt;a href=&#34;http://retropc.net/x68000/software/sharp/xc21/xc2102a/&#34;&gt;http://retropc.net/x68000/software/sharp/xc21/xc2102a/&lt;/a&gt; （ファイル名 XC2102A.LZH）&lt;/li&gt; &#xA;   &lt;li&gt;HAS060.X&lt;br&gt; &lt;a href=&#34;http://retropc.net/x68000/software/develop/as/has060/&#34;&gt;http://retropc.net/x68000/software/develop/as/has060/&lt;/a&gt; （ファイル名 HAS06089.LZH）&lt;/li&gt; &#xA;   &lt;li&gt;HLK v3.01&lt;br&gt; &lt;a href=&#34;http://retropc.net/x68000/software/develop/lk/hlk/&#34;&gt;http://retropc.net/x68000/software/develop/lk/hlk/&lt;/a&gt; （ファイル名 HLK301B.LZH）&lt;/li&gt; &#xA;   &lt;li&gt;X68K コマンドラインエミュレータ run68 Version 0.09&lt;br&gt; &lt;a href=&#34;https://sourceforge.net/projects/run68/&#34;&gt;https://sourceforge.net/projects/run68/&lt;/a&gt; （ファイル名 run68bin-009a-20090920.zip）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;ホスト環境の bash コンソール上で、先ほどと同じディレクトリ（xdev68k）から以下のコマンドを実行します。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./install_xdev68k-utils.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;クロスコンパイル環境で必要になるユーティリティの実行ファイル、ヘッダおよびライブラリがインストールされます。 以下のメッセージがコンソールに出力されれば完了です。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;The installation process is completed successfully.&#xA;Please set the current directory path to environment variable XDEV68K_DIR.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;環境変数設定（作業時間 : 1 分程度）&lt;br&gt; 環境変数 XDEV68K_DIR に、ディレクトリ xdev68k のフルパスを設定します。 msys2 の場合、C:/msys64/home/ユーザー名/.bashrc に次のように記述しておくと良いでしょう。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export XDEV68K_DIR=ディレクトリxdev68kのフルパス&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;ファイル構成&lt;/h1&gt; &#xA;&lt;p&gt;正しく環境構築が完了した状態のディレクトリ構造は以下のようになります。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xdev68k/&#xA;│&#xA;├ archive/&#xA;│&#x9;│&#x9;利用させて頂いたソフトウェアのアーカイブファイル&#xA;│&#x9;├ readme.txt&#xA;│&#x9;│&#x9;&#x9;原作者、入手元の情報、利用規約をまとめたテキスト&#xA;│&#x9;├ libgcc_src.tar.gz&#xA;│&#x9;│&#x9;&#x9;libgcc のソースコード&#xA;│&#x9;├ *.zip *.lzh&#xA;│&#x9;│&#x9;&#x9;原本のアーカイブファイル&#xA;│&#x9;└ download/&#xA;│&#x9;&#x9;&#x9;ダウンロードしたソフトウェアのアーカイブファイル&#xA;├ build_gcc/&#xA;│&#x9;&#x9;クロスコンパイラのソースコードとビルドにより生成された中間ファイル群&#xA;│&#x9;&#x9;このディレクトリ以下には 18 万近いファイルが存在する。削除しても問題ない。&#xA;├ example/&#xA;│&#x9;&#x9;クロス開発サンプルコード&#xA;├ include/&#xA;│&#x9;│&#x9;ヘッダファイル&#xA;│&#x9;├ xc/&#xA;│&#x9;│&#x9;&#x9;SHARP C Compiler PRO-68K ver2.1 のヘッダファイル&#xA;│&#x9;└ xdev68k/&#xA;│&#x9;&#x9;&#x9;xdev68k 環境で追加されたヘッダファイル等&#xA;├ m68k-toolchain/&#xA;│&#x9;&#x9;クロスコンパイラのビルド結果&#xA;├ run68/&#xA;│&#x9;│&#x9;X68K コマンドラインエミュレータ run68 Version 0.09&#xA;│&#x9;├ run68.exe&#xA;│&#x9;│&#x9;&#x9;run68 実行ファイル&#xA;│&#x9;└ run68.ini&#xA;│&#x9;&#x9;&#x9;run68 設定ファイル&#xA;├ lib/&#xA;│&#x9;│&#x9;ライブラリファイル&#xA;│&#x9;├ xc/&#xA;│&#x9;│&#x9;&#x9;SHARP C Compiler PRO-68K ver2.1 のライブラリファイル&#xA;│&#x9;└ m68k_elf/&#xA;│&#x9;&#x9;│&#xA;│&#x9;&#x9;├ license/&#xA;│&#x9;&#x9;│&#x9;&#x9;libgcc のライセンス情報&#xA;│&#x9;&#x9;└ m68000/ m68020/ m68040/ m68060/ &#xA;│&#x9;&#x9;&#x9;&#x9;各種 CPU 構成ごとの libgcc.a&#xA;├ util/&#xA;│&#x9;│&#xA;│&#x9;└ x68k_gas2has.pl&#xA;│&#x9;&#x9;&#x9;GAS to HAS コンバータ&#xA;├ x68k_bin/&#xA;│&#x9;│&#x9;X68K のコマンドラインユーティリティ&#xA;│&#x9;├ AR.X&#xA;│&#x9;│&#x9;&#x9;X68k Archiver v1.00&#xA;│&#x9;├ HAS060.X&#xA;│&#x9;│&#x9;&#x9;High-speed Assembler 68060 対応版 version 3.09+89&#xA;│&#x9;└ hlk301.x&#xA;│&#x9;&#x9;&#x9;HLK v3.01&#xA;├ build_m68k-toolchain.sh&#xA;│&#x9;&#x9;クロスコンパイラのビルドスクリプト&#xA;├ build_x68k-libgcc.sh&#xA;│&#x9;&#x9;libgcc のビルドスクリプト&#xA;└ install_xdev68k-utils.sh&#xA;&#x9;&#x9;環境構築スクリプト&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Hello World サンプルの実行&lt;/h1&gt; &#xA;&lt;p&gt;環境構築が完了したら、 テストを兼ねて基本サンプルをビルド＆実行してみましょう。 ホスト環境の bash コンソール上でディレクトリ xdev68k に移動し、以下を実行します。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd example/hello&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;カレントディレクトリに MAIN.X というファイルが生成されます。これが X68K の実行ファイルです。 MAIN.X を、X68K 実機またはエミュレータ環境にコピーして実行します（makefile で自動化されていないので手動で行います）。 X68K のコンソールに以下のように出力されれば成功です。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;コンパイル～実行ファイル生成までの詳細&lt;/h1&gt; &#xA;&lt;p&gt;先ほどの Hello World サンプルのソースファイル main.c を例に、 コンパイルから実行ファイル生成までの流れを解説します。 ビルド作業は、ホスト環境の bash コンソール上で行います。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;コンパイル&lt;br&gt; main.c をクロスコンパイラ m68k-elf-gcc でコンパイルします。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# main.c をコンパイルする。&#xA;# -I${XDEV68K_DIR}/include/xc : include パスの指定&#xA;# -Os : サイズ優先最適化&#xA;# -fcall-used-d2 -fcall-used-a2 : X68K と ABI を一致させるため d2 a2 を破壊可能レジスタに指定&#xA;# -Wno-builtin-declaration-mismatch : 警告の抑制&#xA;${XDEV68K_DIR}/m68k-toolchain/bin/m68k-elf-gcc main.c -I${XDEV68K_DIR}/include/xc -S -Os -m68000 -fcall-used-d2 -fcall-used-a2 -Wno-builtin-declaration-mismatch -o main.m68k-gas.s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;カレントディレクトリにソースファイル main.m68k-gas.s が生成されます。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;アセンブラソースを変換&lt;br&gt; main.m68k-gas.s は、GAS 形式と呼ばれる書式で記述されています。 x68k_gas2has.pl を用いて、X68K で利用可能な HAS 形式に変換します。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# HAS.X がアセンブル可能な書式に変換する。&#xA;# -cpu オプション : 対象とする CPU の種類&#xA;# -inc オプション : ソース冒頭で include するファイル&#xA;perl ${XDEV68K_DIR}/util/x68k_gas2has.pl -i main.m68k-gas.s -o main.s -cpu 68000 -inc doscall.mac,iocscall.mac&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;カレントディレクトリに、HAS 形式のソースファイル main.s が生成されます。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;アセンブル&lt;br&gt; main.s を X68K 対応アセンブラ HAS060.X でアセンブルします。 アセンブラの実行は、X68K コマンドラインエミュレータ run68 で行います。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# main.s をアセンブルする。&#xA;# -u : 未定義シンボルを外部参照にする &#xA;# -e : 外部参照オフセットをロングワードにする &#xA;# -w0 : 警告の抑制&#xA;# -I${XDEV68K_DIR}/include/xc : include パスの指定&#xA;HAS=&#34;${XDEV68K_DIR}/run68/run68.exe ${XDEV68K_DIR}/x68k_bin/HAS060.X&#34;&#xA;${HAS} -e -u -w0 -I${XDEV68K_DIR}/include/xc -o main.o main.s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;カレントディレクトリにオブジェクトファイル main.o が生成されます。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;リンク&lt;br&gt; main.o を X68K 対応リンカ hlk301.x でリンクします。 リンカの実行は、X68K コマンドラインエミュレータ run68 で行います。 本リポジトリに含まれている libgcc.a をリンクする必要があります。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# main.o をリンクする。&#xA;# HLK に長いパス文字を与えることは難しいので、&#xA;# 回避策としてリンク対象ファイルを lk_tmp 以下にコピーし、&#xA;# 短い相対パスを用いてリンクを実行させる。&#xA;rm -rf lk_tmp&#xA;mkdir -p lk_tmp&#xA;cp main.o lk_tmp/&#xA;cp ${XDEV68K_DIR}/lib/xc/CLIB.L lk_tmp/&#xA;cp ${XDEV68K_DIR}/lib/xc/FLOATFNC.L lk_tmp/&#xA;cp ${XDEV68K_DIR}/lib/m68k_elf/m68000/libgcc.a lk_tmp/&#xA;ls lk_tmp/ &amp;gt; lk_list.txt&#xA;HLK=&#34;${XDEV68K_DIR}/run68/run68.exe ${XDEV68K_DIR}/x68k_bin/hlk301.x&#34;&#xA;${HLK} -Llk_tmp/ -o MAIN.X -i lk_list.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;カレントディレクトリに実行ファイル MAIN.X が生成されます。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;GAS 形式 → HAS 形式変換例&lt;/h1&gt; &#xA;&lt;p&gt;ディレクトリ xdev68k/util 以下に置かれている x68k_gas2has.pl は、 アセンブラソースの GAS 形式 → HAS 形式変換を行うコンバータです。 x68k_gas2has.pl が生成するソースコードは以下に示すように、 左側が HAS 形式、右側が元になった GAS 形式となります。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* NO_APP&#xA;RUNS_HUMAN_VERSION      equ     3&#xA;        .cpu 68000&#xA;* X68 GCC Develop&#xA;                                                        *#NO_APP&#xA;        .file   &#34;adler32.c&#34;                             *       .file   &#34;adler32.c&#34;&#xA;        .text                                           *       .text&#xA;        .globl ___umodsi3                               *       .globl  __umodsi3&#xA;        .globl ___modsi3                                *       .globl  __modsi3&#xA;        .globl ___mulsi3                                *       .globl  __mulsi3&#xA;        .align  2                                       *       .align  2&#xA;                                                        *       .type   adler32_combine_, @function&#xA;_adler32_combine_:                                      *adler32_combine_:&#xA;        movem.l d3/d4/d5/d6/d7/a3,-(sp)                 *       movem.l #7952,-(%sp)&#xA;        move.l 28(sp),d3                                *       move.l 28(%sp),%d3&#xA;        move.l 32(sp),d6                                *       move.l 32(%sp),%d6&#xA;        move.l 36(sp),d0                                *       move.l 36(%sp),%d0&#xA;        jbmi _?L6                                       *       jmi .L6&#xA;        lea ___umodsi3,a3                               *       lea __umodsi3,%a3&#xA;        move.l #65521,-(sp)                             *       move.l #65521,-(%sp)&#xA;        move.l d0,-(sp)                                 *       move.l %d0,-(%sp)&#xA;        jbsr (a3)                                       *       jsr (%a3)&#xA;        addq.l #8,sp                                    *       addq.l #8,%sp&#xA;        move.l d0,d5                                    *       move.l %d0,%d5&#xA;        move.l d3,d7                                    *       move.l %d3,%d7&#xA;        and.l #65535,d7                                 *       and.l #65535,%d7&#xA;        move.l d7,-(sp)                                 *       move.l %d7,-(%sp)&#xA;        move.l d0,-(sp)                                 *       move.l %d0,-(%sp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GAS 形式では、MIT syntax と呼ばれる記法（右）が利用されることがあります。 HAS.X 形式（左）では Motorola syntax に変換されます。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                    * .type __mulsi3,function&#xA; .globl ___mulsi3                   * .globl __mulsi3&#xA;___mulsi3:                          *__mulsi3:&#xA; move.w 4(sp),d0                    * movew %sp@(4), %d0&#xA; mulu.w 10(sp),d0                   * muluw %sp@(10), %d0&#xA; move.w 6(sp),d1                    * movew %sp@(6), %d1&#xA; mulu.w 8(sp),d1                    * muluw %sp@(8), %d1&#xA;                                    *&#xA; add.w d1,d0                        * addw %d1, %d0&#xA;                                    *&#xA;                                    *&#xA;                                    *&#xA; swap d0                            * swap %d0&#xA; clr.w d0                           * clrw %d0&#xA; move.w 6(sp),d1                    * movew %sp@(6), %d1&#xA; mulu.w 10(sp),d1                   * muluw %sp@(10), %d1&#xA; add.l d1,d0                        * addl %d1, %d0&#xA;                                    *&#xA; rts                                * rts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;libgcc.a の種類と用途&lt;/h1&gt; &#xA;&lt;p&gt;ディレクトリ xdev68k/lib/m68k_elf 以下には、 gcc のランタイムライブラリである libgcc.a が置かれています。 m68k-elf-gcc で生成したコードには、これを必ずリンクする必要があります。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; 必ず xdev68k/lib/m68k_elf 以下の libgcc.a を利用してください。 xdev68k/m68k-toolchain 以下にも同名ファイルである libgcc.a が存在しますが、これらは X68K のオブジェクトファイルとはリンクできません。 従来の X68K 移植版 gcc に含まれた libgcc.a もリンク可能ですが、互換性が無いため動作保証はありません。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;libgcc.a は複数種類あり、アプリケーションのビルド設定に合致するものを選択して利用します。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;xdev68k/lib/m68k_elf/m68000/libgcc.a&lt;br&gt; MC68000 の命令セットで構成されています。 全世代の X680x0 で動作可能な実行ファイルを作成する場合にリンクします。 FPU 非搭載 X68030 環境も、こちらをリンクしてください。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;xdev68k/lib/m68k_elf/m68020/libgcc.a&lt;br&gt; MC68020 の命令セット + FPU の MC68881 命令セットで構成されています。 FPU 搭載 X68030 で動作可能な実行ファイルを作成する場合にリンクします。 FPU 非搭載 X68030 では動作しないのでご注意ください。 また、MC68040 以降の内蔵 FPU には存在しない浮動小数演算命令（FMOVECR 等々）を含む可能性があるため、 MC68040 / MC68060 等の環境では動作保証がないことにご注意ください。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;xdev68k/lib/m68k_elf/m68040/libgcc.a&lt;br&gt; MC68040 の命令セットで構成されています。 68040 アクセラレータを搭載した X680x0 で動作可能な実行ファイルを作成する場合にリンクします。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;xdev68k/lib/m68k_elf/m68060/libgcc.a&lt;br&gt; MC68060 の命令セットで構成されています。 68060 アクセラレータを搭載した X680x0 で動作可能な実行ファイルを作成する場合にリンクします。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;libgcc.a のリビルド手順&lt;/h1&gt; &#xA;&lt;p&gt;libgcc.a はビルド済みの状態で本リポジトリの xdev68k/lib 以下に含まれており、 ユーザーの手でビルドする必要はありませんが、 もし何らかの事情でリビルドする必要がある場合は、ホスト環境の bash コンソール上でディレクトリ xdev68k に移動し、 以下を実行します。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build_x68k-libgcc.sh -m68000 -m68020 -m68040 -m68060  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ビルドに成功すると、コンソールに以下のように出力されます。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;The building process is completed successfully.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ディレクトリ build_libgcc/ 以下は中間ファイルです。 ビルド完了後は削除していただいても問題ありません。&lt;/p&gt; &#xA;&lt;h1&gt;従来のコンパイラとの互換性問題&lt;/h1&gt; &#xA;&lt;p&gt;従来の X68K 対応コンパイラと最新の m68k-elf-gcc の間には互換性問題があります。&lt;/p&gt; &#xA;&lt;h2&gt;1. ABI が一致しない&lt;/h2&gt; &#xA;&lt;p&gt;ABI とは Application Binary Interface の略で、 データ型のメモリ上での配置や関数コール時の引数や戻り値の受け渡しルールを定義したものです。 従来の X68K 対応コンパイラと最新の m68k-elf-gcc の間では ABI が一致しません。 そのため、古いコンパイラで作成されたバイナリを再コンパイルせずリンクする場合に問題になります。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;破壊レジスタの違い（回避可能）&lt;/p&gt; &lt;pre&gt;&lt;code&gt; 従来の X68K 対応コンパイラ : d0-d2/a0-a2/fp0-fp1  &#xA; m68k-elf-gcc               : d0-d2/a0-a2/fp0-fp1  &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;この問題は、m68k-elf-gcc 側にコンパイルオプション -fcall-used-d2 -fcall-used-a2 を指定することで解消されます。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;戻り値を格納するレジスタの違い（回避可能）&lt;br&gt; X68K の ABI は、MC680x0 の慣例に従い、関数の戻り値は d0 レジスタに格納するルールになっていました。 一方、最新の gcc では、configure によっては戻り値を a0 レジスタにも格納します。 これは、malloc() のようにポインタを返すことが明らかな関数の場合、 アドレスレジスタに戻り値を返せばオーバーヘッドを回避できる、という考え方に基づくものです。 しかし実際には、安全性と互換性のため a0 d0 双方に同一の値を返すという運用になっており、 逆にオーバーヘッド発生源になっています。 そして、結果を a0 レジスタから読むコードが生成されることにより、過去のソフトウェア資産が再利用できなくなっています。&lt;/p&gt; &lt;p&gt;この問題を避けるには、 関数の戻り値を d0 レジスタのみに格納する configure でビルドされた gcc を利用する必要があります。 「環境構築手順」で示したとおり、 build_m68k-toolchain.sh を利用していれば問題ありませんが、 バイナリ配布されているビルド済み gcc （例えば Linux のディストリビューターが提供している m68k-linux-gnu-gcc のようなもの） を利用する場合は注意が必要です。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;long long 型のエンディアンの違い（回避不能）&lt;br&gt; 64 bit 整数型である long long 型のバイナリ表現が、 従来の X68K 対応コンパイラと m68k-elf-gcc とで異なります。&lt;/p&gt; &lt;pre&gt;&lt;code&gt; 従来の X68K 対応コンパイラ : 下位 32bit、上位 32bit の順に格納（つまりビッグエンディアン配置でない）  &#xA; m68k-elf-gcc               : 上位 32bit、下位 32bit の順に格納（厳密にビッグエンディアン配置）  &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;現状ではこの問題の回避策はありません。 （幸い、過去のソフトウェア資産上に long long 型が出現することは少なく、問題に発展することは稀。 少なくとも、SHARP C Compiler PRO-68K のヘッダには出現しない。）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;long double 型のビット幅の違い（回避不能）&lt;br&gt; 拡張倍精度浮動小数型である long double 型のバイナリ表現が、 従来の X68K 対応コンパイラと m68k-elf-gcc とで異なります。&lt;/p&gt; &lt;pre&gt;&lt;code&gt; 従来の X68K 対応コンパイラ : long double ＝ 8 bytes 型（double 型互換）  &#xA; m68k-elf-gcc               : long double ＝ 12 bytes 型  &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;現状ではこの問題の回避策はありません。 （幸い、過去のソフトウェア資産上に long double 型が出現することは少なく、問題に発展することは稀。 少なくとも、SHARP C Compiler PRO-68K のヘッダには出現しない。）&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. NaN Inf 互換性問題&lt;/h2&gt; &#xA;&lt;p&gt;最新の m68k-elf-gcc では、浮動小数の取り扱いは IEEE754 の仕様に準拠しています。 一方 X68K の古いソフトウェア資産では、NaN や Inf 等を扱うコードが IEEE754 の仕様をフルスペックで実装されていない場合があります。 これが原因で、最新の m68k-elf-gcc が出力したコードが古いソフトウェア資産上で正しく動作しない場合があります。&lt;/p&gt; &#xA;&lt;p&gt;この問題の再現例を示します。 まず、 従来の X68K 対応コンパイラ（古い X68K 移植版 gcc）で NaN Inf を発生させ、 これらを SHARP C Compiler PRO-68K（XC）の CLIB.L に含まれる printf 関数で出力した結果を示します。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Inf (1.0f/0.0f を計算させて生成)&#xA;&#x9;バイナリ表現      : 0x7FFFFFFF&#xA;&#x9;printf による出力 : #NAN.000000&#xA;NaN (0.0f/0.0f を計算させて生成)&#xA;&#x9;バイナリ表現      : 0x7FFFFFFF&#xA;&#x9;printf による出力 : #NAN.000000 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;次に、 最新の m68k-elf-gcc 上で NaN Inf を発生させ、 これらを先ほどと同様に SHARP C Compiler PRO-68K（XC）の CLIB.L に含まれる printf 関数で出力した結果を示します。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Inf (1.0f/0.0f を計算させて生成)&#xA;&#x9;バイナリ表現      : 0x7F800000（IEEE754 の Inf としては正しい）&#xA;&#x9;printf による出力 : 340282366920940000000000000000000000000.000000（正しくない）&#xA;NaN (0.0f/0.0f を計算させて生成)&#xA;&#x9;バイナリ表現      : 0xFFFFFFFF（IEEE754 の NaN としては正しい）&#xA;&#x9;printf による出力 : -680564693277060000000000000000000000000.000000（正しくない）&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;後者では NaN Inf が正しく表示されていません。&lt;/p&gt; &#xA;&lt;h2&gt;3. LIBC シンボル衝突問題&lt;/h2&gt; &#xA;&lt;p&gt;X68K には ANSI-C 対応の基本ライブラリである LIBC（作者:Project LIBC Group）が存在しました。&lt;/p&gt; &#xA;&lt;p&gt;LIBC には、 その当時の X68K 対応 gcc 付属の ligbcc に含まれていなかった一部の数学関数（___cmpdf2）が収録されていました。 これが、最新の m68k-elf-gcc 対応 libgcc では libgcc 側に収録されているため、 リンク時にシンボルが衝突します。&lt;/p&gt; &#xA;&lt;h1&gt;推奨される利用スタイル&lt;/h1&gt; &#xA;&lt;p&gt;以上をまとめると、m68k-elf-gcc の推奨される利用スタイルは以下のようになります。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;build_m68k-toolchain.sh で自力ビルドした m68k-elf-gcc を利用する。&lt;/li&gt; &#xA; &lt;li&gt;m68k-elf-gcc 側に -fcall-used-d2 -fcall-used-a2 を指定する。&lt;/li&gt; &#xA; &lt;li&gt;本リポジトリに含まれている libgcc.a を利用する。&lt;/li&gt; &#xA; &lt;li&gt;過去の資産を再コンパイルせず利用する場合は、long long 型、long double 型 を含まないものに限る。&lt;/li&gt; &#xA; &lt;li&gt;NaN や Inf を古いコードに入力する場合、正しく処理されない可能性を考慮する。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;その他の制限事項&lt;/h1&gt; &#xA;&lt;p&gt;現状多くの制限があります。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;c++ には未対応&lt;br&gt; c++ 対応のランタイムライブラリが未整備のため、実行ファイルが生成できません。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GAS 形式アセンブラコードは gcc が出力する書式のみに対応&lt;br&gt; x68k_gas2has.pl が認識できるのは、GAS 形式アセンブラコードの記述方法のうち、gcc が出力する可能性のある書式のみです。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;inline asm 内に記述可能なアセンブラコードの制限&lt;br&gt; x68k_gas2has.pl はマクロ制御命令（HAS の macro local endm exitm rept irp irpc など）の全ての仕様に対応していません。 特殊記号（HAS の &#39;&amp;amp;&#39; &#39;!&#39; , &#39;&amp;lt;&#39;～&#39;&amp;gt;&#39; , &#39;%&#39; など）が出現するとパースエラーになります。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ホスト環境として WSL が利用できない&lt;br&gt; xdev68k のホスト環境として、現状では WSL は利用できません。 これは run68 が正常動作しないためです。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;絶賛テスト中&lt;/h1&gt; &#xA;&lt;p&gt;現在、様々な条件での動作テストを行っています。 修正が頻繁に行われています。 当面の間、修正に伴い予告なく互換ブレイクが発生することも予想されますがご了承ください。&lt;/p&gt; &#xA;&lt;p&gt;環境構築時のエラーや、 アセンブラソース変換中のエラーなど、 何かしらの問題に遭遇した場合は、 エラーを起こした該当行の情報等を添えてご報告いただけますと助かります。 （全ての問題を対処している時間的余裕は無いかもしれませんが。）&lt;/p&gt; &#xA;&lt;h1&gt;謝辞&lt;/h1&gt; &#xA;&lt;p&gt;xdev68k のクロス開発環境は、 無償公開されたシャープのソフトウェア、 Free Software Foundation の gcc をはじめとするツールチェイン、 および X68K ユーザーの方々が作成されたソフトウェア資産を利用しています。 それらのソフトウェアを作成公開して下さっている企業、組織、および有志の方々に感謝いたします。&lt;/p&gt; &#xA;&lt;p&gt;また、xdev68k で利用させていただいた X68K 関連ソフトウェア資産の多くは、 X68000 LIBRARY &lt;a href=&#34;http://www.retropc.net/x68000/&#34;&gt;http://www.retropc.net/x68000/&lt;/a&gt; からダウンロードさせて頂いています。 HAS060 の作者でもあり、アーカイブを保守されている X68000 LIBRARY の管理者 M.Kamada さんに感謝いたします。&lt;/p&gt; &#xA;&lt;p&gt;install_xdev68k-utils.sh の *.lhz アーカイブ展開処理で、 LHa for UNIX with Autoconf &lt;a href=&#34;https://github.com/jca02266/lha/&#34;&gt;https://github.com/jca02266/lha/&lt;/a&gt; を利用させて頂いています。 LHa for UNIX 原作者の Tsugio Okamoto 氏、 LHa for UNIX with Autoconf 作成者 Koji Arai 氏に感謝いたします。&lt;/p&gt; &#xA;&lt;h1&gt;ライセンス&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;x68k_gas2has.pl / build_m68k-toolchain.sh / build_x68k-libgcc.sh / install_xdev68k-utils.sh&lt;br&gt; Apache License Version 2.0 が適用されます。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;libgcc.a&lt;br&gt; GNU GENERAL PUBLIC LICENSE Version 3 と、GCC RUNTIME LIBRARY EXCEPTION Version 3.1 が適用されます。 （libgcc.a をバイナリ単体で配布するときは GPL 適用になるため、ソースコードまたはその入手手段を開示する必要がある。 libgcc.a をアプリケーションにリンクして利用する場合は、アプリケーションに GPL は伝搬しないし、ソース開示などの義務は生じない。）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;install_xdev68k-utils.sh によりダウンロードまたはインストールされたファイル群&lt;br&gt; それぞれにライセンスと配布規定が存在します。 詳細は xdev68k/license/readme.txt を参照してください。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tobyink/p5-rdf-rdfa-generator</title>
    <updated>2022-12-17T01:36:48Z</updated>
    <id>tag:github.com,2022-12-17:/tobyink/p5-rdf-rdfa-generator</id>
    <link href="https://github.com/tobyink/p5-rdf-rdfa-generator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>