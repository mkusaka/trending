<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-24T01:52:49Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ko-ichi-h/khcoder</title>
    <updated>2022-06-24T01:52:49Z</updated>
    <id>tag:github.com,2022-06-24:/ko-ichi-h/khcoder</id>
    <link href="https://github.com/ko-ichi-h/khcoder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KH Coder: for Quantitative Content Analysis or Text Mining&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KH Coder: for Quantitative Content Analysis or Text Mining&lt;/h1&gt; &#xA;&lt;h2&gt;Web&lt;/h2&gt; &#xA;&lt;p&gt;Japanese: &lt;a href=&#34;http://khcoder.net&#34;&gt;http://khcoder.net&lt;/a&gt; &lt;br&gt; English: &lt;a href=&#34;http://khcoder.net/en&#34;&gt;http://khcoder.net/en&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;KH Coder is a free software for &lt;strong&gt;quantitative content analysis&lt;/strong&gt; or &lt;strong&gt;text mining&lt;/strong&gt;. It is also utilized for computational linguistics. You can analyze Catalan, Chinese (simplified), Dutch, English, French, German, Italian, Japanese, Korean, Portuguese, Russian, Slovenian and Spanish text with KH Coder.&lt;/p&gt; &#xA;&lt;p&gt;Screenshots: &lt;a href=&#34;https://goo.gl/photos/ixn1sTM3jm8o11bP8&#34;&gt;https://goo.gl/photos/ixn1sTM3jm8o11bP8&lt;/a&gt; &lt;br&gt; Official book (in Japanese): &lt;a href=&#34;https://amzn.to/3LdRHMJ&#34;&gt;https://amzn.to/3LdRHMJ&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://amzn.to/2wHFxKg&#34;&gt;http://amzn.to/2wHFxKg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;Changelog:&#xA;https://translate.google.com/translate?hl=en&amp;sl=ja&amp;tl=en&amp;u=http%3A%2F%2Fkhcoder.net%2Fversions.html&amp;sandbox=1&#xA;--&gt; &#xA;&lt;h2&gt;How to run source code of KH Coder on Windows&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &amp;amp; install Perl: &lt;a href=&#34;http://strawberryperl.com/&#34;&gt;http://strawberryperl.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Fork and) clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Download released *.exe file (Winzip self-extractor) of KH Coder 3&lt;/li&gt; &#xA; &lt;li&gt;Unzip the downloaded file into the clone directory&lt;/li&gt; &#xA; &lt;li&gt;Open command prompt window and go to the clone directory, type &#34;perl kh_coder.pl&#34;, and hit &#34;Enter&#34; key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When you get errors like &#34;Can&#39;t locate &lt;strong&gt;Jcode&lt;/strong&gt;.pm in @INC&#34;, you need to install Perl module called &#34;&lt;strong&gt;Jcode&lt;/strong&gt;&#34;. To install it, type &#34;cpanm &lt;strong&gt;Jcode&lt;/strong&gt;&#34; and hit &#34;Enter&#34; key on your command prompt window.&lt;/p&gt; &#xA;&lt;p&gt;Above procedure is for people who want to develop or modify KH Coder. If you want to just try or use KH Coder, you don&#39;t need Perl. Please just download and unzip released *.exe file, then double click extracted &#34;kh_coder.exe&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;On Linux or other Un*x like system&lt;/h2&gt; &#xA;&lt;p&gt;You need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MySQL&lt;/li&gt; &#xA; &lt;li&gt;Perl (and some Perl modules)&lt;/li&gt; &#xA; &lt;li&gt;R (and some R packages)&lt;/li&gt; &#xA; &lt;li&gt;Morphological Analysis and POS Tagging software &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ChaSen or MeCab for analyzing Japanese text&lt;/li&gt; &#xA;   &lt;li&gt;FreeLing or Stanford POS Tagger for analyzing English text&lt;/li&gt; &#xA;   &lt;li&gt;FreeLing for analyzing Catalan, French, German, Italian, Portuguese, Russian or Spanish text&lt;/li&gt; &#xA;   &lt;li&gt;MeCab and HanDic for analyzing Korean text&lt;/li&gt; &#xA;   &lt;li&gt;Stanford Word Segmenter and Stanford POS Tagger for analyzing Chinese text&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ko-ichi-h/khcoder/issues/91&#34;&gt;issue #91&lt;/a&gt;, &lt;a href=&#34;https://github.com/ko-ichi-h/khcoder/raw/master/doc_contrib/Vagrantfile&#34;&gt;doc_contrib/Vagrantfile&lt;/a&gt; and &lt;a href=&#34;https://github.com/ko-ichi-h/khcoder/raw/master/doc_contrib/FedoraInstallation.md&#34;&gt;doc_contrib/FedoraInstallation.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GNU GPL version 2 or later&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/translations-websockets-api</title>
    <updated>2022-06-24T01:52:49Z</updated>
    <id>tag:github.com,2022-06-24:/binary-com/translations-websockets-api</id>
    <link href="https://github.com/binary-com/translations-websockets-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language files for Binary.com Websockets API service&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;translations-websockets-api&lt;/h1&gt; &#xA;&lt;p&gt;Language files for Binary.com Websockets API service&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>os-autoinst/os-autoinst</title>
    <updated>2022-06-24T01:52:49Z</updated>
    <id>tag:github.com,2022-06-24:/os-autoinst/os-autoinst</id>
    <link href="https://github.com/os-autoinst/os-autoinst" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OS-level test automation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;os-autoinst &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/os-autoinst/os-autoinst/actions&#34;&gt;&lt;img src=&#34;https://github.com/os-autoinst/os-autoinst/workflows/ci/badge.svg?branch=master&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://codecov.io/gh/os-autoinst/os-autoinst&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/os-autoinst/os-autoinst/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_getting_started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_how_to_run_test_cases&#34;&gt;How to run test cases&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_develop_test_modules&#34;&gt;Develop test modules&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_verifying_a_runtime_environment&#34;&gt;Verifying a runtime environment&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_how_to_contribute&#34;&gt;How to contribute&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_rules_for_commits&#34;&gt;Rules for commits&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_deprecation_approach&#34;&gt;Deprecation approach&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_build_instructions&#34;&gt;Build instructions&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_installing_dependencies&#34;&gt;Installing dependencies&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_conducting_the_build&#34;&gt;Conducting the build&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_standalone_tool_for_image_search&#34;&gt;Standalone tool for image search&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/#_further_notes&#34;&gt;Further notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The OS-autoinst project aims at providing a means to run fully automated tests. Especially to run tests of basic and low-level operating system components such as bootloader, kernel, installer and upgrade, which can not easily and safely be tested with other automated testing frameworks. However, it can just as well be used to test firefox and openoffice operation on top of a newly installed OS.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;os-autoinst can be executed alone, but is currently designed to be executed together with openQA, the web user interface that allows to run more than one os-autoinst instance at the same time.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;More information on os-autoinst and openQA can be found on &lt;a href=&#34;http://os-autoinst.github.io/openQA/&#34; class=&#34;bare&#34;&gt;http://os-autoinst.github.io/openQA/&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_getting_started&#34;&gt;Getting started&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Under openSUSE the &lt;code&gt;os-autoinst&lt;/code&gt; package can be installed from the official repository or from our &lt;a href=&#34;https://build.opensuse.org/project/show/devel:openQA&#34;&gt;devel repository&lt;/a&gt;. For further details, have a look at the &lt;a href=&#34;http://open.qa/docs/#_development_version_repository&#34;&gt;openQA documentation&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;For building os-autoinst manually checkout the build instructions below.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The main executable &lt;code&gt;isotovideo&lt;/code&gt; can read test parameters from the command line or read test parameters from a file named &lt;code&gt;vars.json&lt;/code&gt;. This file stores the values of the different variables that will configure the behavior of the test execution.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;A container is provided and can be pulled and the main execution can be called in one step, for example using the &lt;code&gt;podman&lt;/code&gt; container engine for tests defined in the current directory on x86_64 if your environment supports KVM virtualization acceleration:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;podman run --rm -it -v .:/tests registry.opensuse.org/devel/openqa/containers/isotovideo:qemu-kvm casedir=/tests&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Use the image variant ending with &lt;code&gt;qemu-x86&lt;/code&gt; on x86_64 if no KVM support is available.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Take a look on &lt;a href=&#34;https://registry.opensuse.org/cgi-bin/cooverview?srch_term=project%3Ddevel%3AopenQA&#34; class=&#34;bare&#34;&gt;https://registry.opensuse.org/cgi-bin/cooverview?srch_term=project%3Ddevel%3AopenQA&lt;/a&gt; for all available container images.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Additional test variables can be supplied on the command line. There are some variables used by os-autoinst itself and other that are used by the tests. A minimal command line can look like this:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;isotovideo distri=opensuse casedir=/full/path/for/tests iso=/full/path/for/iso&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;As alternative or completementary a corresponding &lt;code&gt;vars.json&lt;/code&gt; with additional parameters could be:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{&#xA;   &#34;DISTRI&#34; :      &#34;opensuse&#34;,&#xA;   &#34;CASEDIR&#34; :     &#34;/full/path/for/tests&#34;,&#xA;   &#34;NAME&#34; :        &#34;test-name&#34;,&#xA;   &#34;ISO&#34; :         &#34;/full/path/for/iso&#34;,&#xA;   &#34;VNC&#34; :         &#34;91&#34;,&#xA;   &#34;BACKEND&#34; :     &#34;qemu&#34;,&#xA;   &#34;DESKTOP&#34; :     &#34;kde&#34;&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Be advised that the file &lt;code&gt;vars.json&lt;/code&gt; is also modified by &lt;code&gt;os-autoinst&lt;/code&gt; so make sure to backup handcrafted versions of this file.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;For more concrete instructions read on in the &#34;How to run test cases&#34; section below. Find sections about &#34;How to contribute&#34; or &#34;Build instructions&#34; further below.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_how_to_run_test_cases&#34;&gt;How to run test cases&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This following instructions shows how to run test cases. First one needs to clone the test distribution. Checkout &lt;a href=&#34;https://github.com/os-autoinst/os-autoinst-distri-example&#34;&gt;os-autoinst-distri-example&lt;/a&gt; for an example of a minimal test distribution.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Example for openSUSE’s tests:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;mkdir distri &amp;amp;&amp;amp; cd distri&#xA;git clone git@github.com:os-autoinst/os-autoinst-distri-opensuse.git opensuse&#xA;cd opensuse/products/opensuse&#xA;git clone git@github.com:os-autoinst/os-autoinst-needles-opensuse.git needles&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Example for openQA’s self-tests (&#34;openQA-in-openQA&#34; test):&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;mkdir distri &amp;amp;&amp;amp; cd distri&#xA;git clone git@github.com:os-autoinst/os-autoinst-distri-openQA.git openqa&#xA;cd openqa&#xA;git clone git@github.com:os-autoinst/os-autoinst-needles-openQA.git needles&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Then create a working directory for the test execution, e.g.:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;mkdir /tmp/os-autoinst-run &amp;amp;&amp;amp; cd /tmp/os-autoinst-run&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Create a minimal &lt;code&gt;vars.json&lt;/code&gt; config file within that directory, e.g.:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    vars.json&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&#xA;   &#34;ARCH&#34; : &#34;x86_64&#34;,&#xA;   &#34;BACKEND&#34; : &#34;qemu&#34;,&#xA;   &#34;CASEDIR&#34; : &#34;/path/to/os-autoinst-distri-opensuse&#34;,&#xA;   &#34;DESKTOP&#34; : &#34;gnome&#34;,&#xA;   &#34;DISTRI&#34; : &#34;opensuse&#34;,&#xA;   &#34;ISO&#34; : &#34;/path/to/openSUSE-Tumbleweed-DVD-x86_64-Snapshot20160715-Media.iso&#34;,&#xA;   &#34;PRODUCTDIR&#34; : &#34;/path/to/os-autoinst-distri-opensuse/products/opensuse&#34;,&#xA;   &#34;VNC&#34; : 90,&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You will need to correct the file paths to point to real locations. Some of the variables you can use are listed &lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/doc/backend_vars.asciidoc&#34;&gt;here&lt;/a&gt;. Test case specific variables are listed in the distri directories e.g. &lt;a href=&#34;https://github.com/os-autoinst/os-autoinst-distri-opensuse/raw/master/variables.md&#34;&gt;os-autoinst-distri-opensuse/variables&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Then you can run the &lt;code&gt;isotovideo&lt;/code&gt; script within the created working directory. When doing a manual build, that script can be found at the top-level of the os-autoinst Git checkout.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;All of these examples were using the QEMU backend which is usually the easiest backend to handle and therefore recommended. If you need to develop and test other backends, have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/doc/backends.md&#34;&gt;backend-specific documentation&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;When using the QEMU backend it is possible to access the system under test via VNC:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;vncviewer localhost:91 -ViewOnly -Shared&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Run &lt;code&gt;isotovideo&lt;/code&gt; with the environment variable &lt;code&gt;RUN_VNCVIEWER&lt;/code&gt; set to autostart a VNC viewer on the right port.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Run &lt;code&gt;isotovideo&lt;/code&gt; with the environment variable &lt;code&gt;RUN_DEBUGVIEWER&lt;/code&gt; to start the internal debug screenshot viewer updated with an always recent screenshot of the test run.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_develop_test_modules&#34;&gt;Develop test modules&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Individual test modules are written with one test module per file using the test API in Perl code. Experimental support for test modules in the Python programming language is provided.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Find more details about how to write tests on &lt;a href=&#34;http://open.qa/docs/#_how_to_write_tests&#34; class=&#34;bare&#34;&gt;http://open.qa/docs/#_how_to_write_tests&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_verifying_a_runtime_environment&#34;&gt;Verifying a runtime environment&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;To check if your hardware is able to successfully execute os-autoinst based tests one can execute openQA tests, all the development tests or simply call something like&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;podman run --pull=always --rm -it --entrypoint &#39;&#39; registry.opensuse.org/devel/openqa/containers/os-autoinst_dev:latest /bin/sh -c &#39;git -C /opt clone --depth 1 https://github.com/os-autoinst/os-autoinst &amp;amp;&amp;amp; make -C /opt/os-autoinst/ test-perl-testsuite TESTS=t/99-full-stack.t&#39;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;which only requires the container runtime environment &#34;podman&#34; and will run a container based os-autoinst full-stack test, here without KVM hardware accelerated virtualization support.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_how_to_contribute&#34;&gt;How to contribute&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;If you want to contribute to this project, please clone and send pull requests via &lt;a href=&#34;https://github.com/os-autoinst/os-autoinst&#34; class=&#34;bare&#34;&gt;https://github.com/os-autoinst/os-autoinst&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;More information on the contribution can be found on &lt;a href=&#34;http://os-autoinst.github.io/openQA/contact/&#34; class=&#34;bare&#34;&gt;http://os-autoinst.github.io/openQA/contact/&lt;/a&gt;, too.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Issues are tracked on &lt;a href=&#34;https://progress.opensuse.org/projects/openqav3/&#34; class=&#34;bare&#34;&gt;https://progress.opensuse.org/projects/openqav3/&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;For an overview of the architecture, see &lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/doc/architecture.md&#34;&gt;doc/architecture.md&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_rules_for_commits&#34;&gt;Rules for commits&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Every commit is checked by our CI system as soon as you create a pull request but you &lt;strong&gt;should&lt;/strong&gt; run the os-autoinst tests locally. Checkout the build instructions for further details.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;For git commit messages use the rules stated on &lt;a href=&#34;http://chris.beams.io/posts/git-commit/&#34;&gt;How to Write a Git Commit Message&lt;/a&gt; as a reference&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Every pull request is reviewed in a peer review to give feedback on possible implications and how we can help each other to improve&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If this is too much hassle for you feel free to provide incomplete pull requests for consideration or create an issue with a code change proposal.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_deprecation_approach&#34;&gt;Deprecation approach&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In case you want to deprecate functionality consider the use of the function &lt;code&gt;backend::baseclass::handle_deprecate_backend&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_build_instructions&#34;&gt;Build instructions&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_installing_dependencies&#34;&gt;Installing dependencies&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;On openSUSE one can install the package &lt;code&gt;os-autoinst-devel&lt;/code&gt; which provides all the dependencies to build and run os-autoinst for the corresponding version of the sources. To build a current version of &lt;code&gt;os-autoinst&lt;/code&gt; it is recommended to install &lt;code&gt;os-autoinst-devel&lt;/code&gt; from &lt;a href=&#34;https://build.opensuse.org/project/show/devel:openQA&#34;&gt;devel:openQA&lt;/a&gt; as the distribution-provided packages might be too old or miss dependencies. This is particularly true for openSUSE Leap. Also see &lt;a href=&#34;https://open.qa/docs/#_development_version_repository&#34;&gt;the openQA docs&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The required dependencies are also declared in &lt;code&gt;dependencies.yaml&lt;/code&gt;. (The names listed within that file are specific to openSUSE but can be easily transferred to other distributions.)&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_conducting_the_build&#34;&gt;Conducting the build&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Simply call&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;in the top folder which automatically creates a build directory and builds the complete project.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Call&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make help&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;to list all available targets.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The above commands use a convenience Makefile calling &lt;code&gt;cmake&lt;/code&gt;. For packaging, when using an IDE or to conduct the steps manually it is suggested to use CMake directly and do the following: Create a build directory outside of the source directory. The following commands need to be invoked within that directory.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Configure build:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;cmake $path_to_os_autoinst_checkout&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can specify any of the standard CMake variables, e.g. &lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt; and &lt;code&gt;-DCMAKE_INSTALL_PREFIX=/custom/install/prefix&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following examples assume that GNU Make is used. It is possible to generate for a different build tool by adding e.g. &lt;code&gt;-G Ninja&lt;/code&gt; to the CMake arguments.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Build executables and libraries:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make symlinks&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This target also creates symlinks of the built executables and libraries within the source directory so &lt;code&gt;isotovideo&lt;/code&gt; can find them.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Run all tests:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make check&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;By default CTest is invoked in verbose mode because prove already provides condensed output. Add &lt;code&gt;-DVERBOSE_CTEST=OFF&lt;/code&gt; to the CMake arguments to avoid that.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Run all Perl tests (&lt;code&gt;*.t&lt;/code&gt; files found within the &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;xt&lt;/code&gt; directories):&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make test-perl-testsuite&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Run individual tests by specifying them explicitly:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make test-perl-testsuite TESTS=&#34;t/15-logging.t t/28-signalblocker.t&#34;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Notice that the user needs to include the test directory for each test (either t for normal or xt for developer-centric tests) when specifying individual tests.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Add additional arguments to the &lt;code&gt;prove&lt;/code&gt; invocation, e.g. enable verbose output:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make test-perl-testsuite PROVE_ARGS=-v&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Gather coverage data while running tests:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make test-perl-testsuite WITH_COVER_OPTIONS=1&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Generate a coverage report from the gathered coverage data:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make coverage&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If no coverage data has been gathered so far the &lt;code&gt;coverage&lt;/code&gt; target will invoke the testsuite automatically.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Reset gathered coverage data:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make coverage-reset&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Install files for packaging:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;make install DESTDIR=…&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Further notes:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;When using the &lt;code&gt;test-perl-testsuite&lt;/code&gt; target, &lt;code&gt;ctest&lt;/code&gt; is not used (and therefore &lt;code&gt;ctest&lt;/code&gt; specific tweaks have no effect).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;One can always run Perl tests manually via &lt;code&gt;prove&lt;/code&gt; after the build has been conducted with &lt;code&gt;make symlinks&lt;/code&gt;. Note that some tests need to be invoked within the &lt;code&gt;t&lt;/code&gt; directory. An invocation like &lt;code&gt;prove -vI.. -I../external/os-autoinst-common/lib 28-signalblocker.t&lt;/code&gt; is supposed to work.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It is also possible to run &lt;code&gt;ctest&lt;/code&gt; within the build directory directly instead of using the mentioned targets.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;All mentioned variables to influence the test execution (&lt;code&gt;TESTS&lt;/code&gt;, &lt;code&gt;WITH_COVER_OPTIONS&lt;/code&gt;, …) can be combined and can also be used with the &lt;code&gt;coverage&lt;/code&gt; target.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_standalone_tool_for_image_search&#34;&gt;Standalone tool for image search&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The script &lt;code&gt;imgsearch&lt;/code&gt; in the repository’s top-level allows to use the fuzzy image comparison independently of the normal test execution. Invoke the script with no parameters to show its usage. There is also an &lt;a href=&#34;https://github.com/os-autoinst/os-autoinst/raw/master/t/imgsearch/expected-output.json&#34;&gt;example file&lt;/a&gt; showing what output you can expect. There is one key for each file to be searched. The best matching image to be found will show up as &lt;code&gt;match&lt;/code&gt; and the other images under &lt;code&gt;candidates&lt;/code&gt;. If no image matches well enough, &lt;code&gt;match&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;To use the script the previously shown build instructions need to be executed (including the invocation of the &lt;code&gt;symlinks&lt;/code&gt; target).&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_further_notes&#34;&gt;Further notes&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;When using the QEMU backend, also ensure your user running os-autoinst has access to &lt;code&gt;/dev/kvm&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;modprobe kvm-intel || modprobe kvm-amd&#xA;chgrp kvm /dev/kvm ; chmod g+rw /dev/kvm # maybe redundant&#xA;# optionally use a new user; just to keep things separate&#xA;useradd -m USERNAME -G kvm&#xA;passwd USERNAME # and/or add ~USERNAME/.ssh/authorized_keys&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>