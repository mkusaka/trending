<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T01:50:52Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kong/lua-kong-nginx-module</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/Kong/lua-kong-nginx-module</id>
    <link href="https://github.com/Kong/lua-kong-nginx-module" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nginx C module to allow deeper control of Nginx behaviors by Kong Lua code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Name&lt;/h1&gt; &#xA;&lt;p&gt;lua-kong-nginx-module - Nginx C module that exposes a Lua API to dynamically control Nginx&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#name&#34;&gt;Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#directives&#34;&gt;Directives&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#lua_kong_load_var_index&#34;&gt;lua_kong_load_var_index&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#methods&#34;&gt;Methods&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsrequest_client_certificate&#34;&gt;resty.kong.tls.request_client_certificate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsdisable_session_reuse&#34;&gt;resty.kong.tls.disable_session_reuse&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsget_full_client_certificate_chain&#34;&gt;resty.kong.tls.get_full_client_certificate_chain&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_cert_and_key&#34;&gt;resty.kong.tls.set_upstream_cert_and_key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_ssl_trusted_store&#34;&gt;resty.kong.tls.set_upstream_ssl_trusted_store&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_ssl_verify&#34;&gt;resty.kong.tls.set_upstream_ssl_verify&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_ssl_verify_depth&#34;&gt;resty.kong.tls.set_upstream_ssl_verify_depth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykonggrpcset_authority&#34;&gt;resty.kong.grpc.set_authority&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsdisable_proxy_ssl&#34;&gt;resty.kong.tls.disable_proxy_ssl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongvarpatch_metatable&#34;&gt;resty.kong.var.patch_metatable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;Kong often needs to be able to change Nginx behavior at runtime. Traditionally this has been done using various core patches. This module attempts to unify those approaches and ensure the least amount of modifications made directly to Nginx to support future maintainability.&lt;/p&gt; &#xA;&lt;p&gt;Patches from &lt;a href=&#34;https://github.com/Kong/kong-build-tools/tree/master/openresty-patches/patches&#34;&gt;openresty-patches&lt;/a&gt; are &lt;strong&gt;required&lt;/strong&gt; for this module to compile successfully. You may use the &lt;a href=&#34;https://github.com/Kong/kong-build-tools/tree/master/openresty-build-tools&#34;&gt;openresty-build-tools&lt;/a&gt; script to automatically build an OpenResty binary with required patches as well as this module included.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;This module can be installed just like any ordinary Nginx C module, using the &lt;code&gt;--add-module&lt;/code&gt; configuration option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./configure --prefix=/usr/local/kong-nginx \&#xA;            --add-module=/path/to/lua-kong-nginx-module \&#xA;            ...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Directives&lt;/h1&gt; &#xA;&lt;h2&gt;lua_kong_load_var_index&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_kong_load_var_index $variable | default;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ensure &lt;em&gt;variable&lt;/em&gt; is indexed. Note that variables defined by &lt;code&gt;set&lt;/code&gt; directive are always indexed by default and does not need to be defined here again.&lt;/p&gt; &#xA;&lt;p&gt;Common variables defined by other modules that are already indexed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$proxy_host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$proxy_internal_body_length&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$proxy_internal_chunked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$remote_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$remote_user&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_referer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_user_agent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$host&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Specially, use &lt;code&gt;lua_kong_load_var_index default&lt;/code&gt; to index &lt;em&gt;commonly used variables&lt;/em&gt; as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$args&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$is_args&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$bytes_sent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$content_type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_authorization&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_connection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_kong_debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_proxy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_proxy_connection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_te&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_upgrade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_for&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_path&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_prefix&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_proto&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$https&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$realip_remote_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$realip_remote_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$remote_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_length&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_method&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_time&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_uri&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$scheme&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$server_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$server_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_cipher&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_client_raw_cert&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_client_verify&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_protocol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_server_name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_http_connection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_http_trailer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_http_upgrade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_status&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongvarpatch_metatable&#34;&gt;resty.kong.var.patch_metatable&lt;/a&gt; on how to enable indexed variable access.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Methods&lt;/h1&gt; &#xA;&lt;h2&gt;resty.kong.tls.request_client_certificate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;succ, err = resty.kong.tls.request_client_certificate()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;ssl_certificate_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Requests client to present its client-side certificate to initiate mutual TLS authentication between server and client.&lt;/p&gt; &#xA;&lt;p&gt;This function only &lt;em&gt;requests&lt;/em&gt;, but does not &lt;em&gt;require&lt;/em&gt; the client to start the mTLS process. Even if the client did not present a client certificate the TLS handshake will still complete (obviously not being mTLS in that case). Whether the client honored the request can be determined using &lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsget_full_client_certificate_chain&#34;&gt;get_full_client_certificate_chain&lt;/a&gt; in later phases.&lt;/p&gt; &#xA;&lt;p&gt;This function returns &lt;code&gt;true&lt;/code&gt; when the call is successful. Otherwise it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.disable_session_reuse&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;succ, err = resty.kong.tls.disable_session_reuse()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;ssl_certificate_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prevents the TLS session for the current connection from being reused by disabling session ticket and session ID for the current TLS connection.&lt;/p&gt; &#xA;&lt;p&gt;This function returns &lt;code&gt;true&lt;/code&gt; when the call is successful. Otherwise it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.get_full_client_certificate_chain&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;pem_chain, err = resty.kong.tls.get_full_client_certificate_chain()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the PEM encoded downstream client certificate chain with the client certificate at the top and intermediate certificates (if any) at the bottom.&lt;/p&gt; &#xA;&lt;p&gt;If client did not present any certificate or if session was reused, then this function will return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is functionally similar to &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_client_raw_cert&#34;&gt;$ssl_client_raw_cert&lt;/a&gt; provided by &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html&#34;&gt;ngx_http_ssl_module&lt;/a&gt;, with the notable exception that this function also returns any certificate chain client sent during handshake.&lt;/p&gt; &#xA;&lt;p&gt;If the TLS session was reused, (signaled by &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_session_reused&#34;&gt;$ssl_session_reused&lt;/a&gt; returns &#34;r&#34;), then no client certificate information will be available as a full handshake never occurred. In this case caller should use &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_session_id&#34;&gt;$ssl_session_id&lt;/a&gt; to associate this session with one of the previous handshakes to identify the connecting client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_cert_and_key&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_cert_and_key(chain, key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overrides and enables sending client certificate while connecting to the upstream in the current request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chain&lt;/code&gt; is the client certificate and intermediate chain (if any) returned by functions such as &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md#parse_pem_cert&#34;&gt;ngx.ssl.parse_pem_cert&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;key&lt;/code&gt; is the private key corresponding to the client certificate returned by functions such as &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md#parse_pem_priv_key&#34;&gt;ngx.ssl.parse_pem_priv_key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt; and future handshakes with upstream servers will always use the provided client certificate. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_ssl_trusted_store&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_ssl_trusted_store(store)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set upstream ssl verification trusted store of current request. Global setting set by &lt;code&gt;proxy_ssl_trusted_certificate&lt;/code&gt; will be overwritten for the current request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;store&lt;/code&gt; is a table object that can be created by &lt;a href=&#34;https://github.com/fffonion/lua-resty-openssl#storenew&#34;&gt;resty.openssl.x509.store.new&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt; and future handshakes with upstream servers will be verified with given store. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local x509 = require(&#34;resty.openssl.x509&#34;)&#xA;local crt, err = x509.new([[-----BEGIN CERTIFICATE-----&#xA;...&#xA;-----END CERTIFICATE-----]])&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to parse cert: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;local store = require(&#34;resty.openssl.x509.store&#34;)&#xA;local st, err = store.new()&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to create store: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;local ok, err = st:add(crt)&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to add cert to store: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;-- st:add can be called multiple times, also accept a crl&#xA;-- st:add(another_crt)&#xA;-- st:add(crl)&#xA;-- OR&#xA;-- st:use_default() to load default CA bundle&#xA;local tls = require(&#34;resty.kong.tls&#34;)&#xA;local ok, err = tls.set_upstream_ssl_trusted_store(st.ctx)&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to set upstream trusted store: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;local ok, err = tls.set_upstream_ssl_verify(true)&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to set upstream ssl verify: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_ssl_verify&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_ssl_verify(verify)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set upstream ssl verification enablement of current request to the given boolean argument &lt;code&gt;verify&lt;/code&gt;. Global setting set by &lt;code&gt;proxy_ssl_verify&lt;/code&gt; will be overwritten.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_ssl_verify_depth&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_ssl_verify_depth(depth)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set upstream ssl verification depth of current request to the given non-negative integer argument &lt;code&gt;depth&lt;/code&gt;. Global setting set by &lt;code&gt;proxy_ssl_verify_depth&lt;/code&gt; will be overwritten.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.grpc.set_authority&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.grpc.set_authority(new_authority)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overrides the &lt;code&gt;:authority&lt;/code&gt; pseudo header sent to gRPC upstream by &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_grpc_module.html&#34;&gt;ngx_http_grpc_module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function is a capability not possible in Nginx through means of config directive alone. Reason being Nginx auto-generates the &lt;code&gt;:authority&lt;/code&gt; pseudo header without giving us a way to override it at config time. Closest being &lt;code&gt;grpc_set_header Host &#34;foo.example.com&#34;&lt;/code&gt;, but this will cause the gRPC module to use the &lt;code&gt;Host&lt;/code&gt; header and not generate the &lt;code&gt;:authority&lt;/code&gt; pseudo header, causing problems for certain gRPC server.&lt;/p&gt; &#xA;&lt;p&gt;When called, this function accepts a new value to override the &lt;code&gt;:authority&lt;/code&gt; pseudo header that will be generated by the ngx_http_grpc_module for the current request.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;new_authority&lt;/code&gt; parameter &lt;strong&gt;can not&lt;/strong&gt; be an empty string.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;If called in the &lt;code&gt;balancer_by_lua&lt;/code&gt; context, the request needs to be recreated (see &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/balancer.md#recreate_request&#34;&gt;balancer.recreate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.disable_proxy_ssl&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.disable_proxy_ssl()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;preread_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;stream&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Disables the TLS handshake to upstream for &lt;a href=&#34;https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html&#34;&gt;ngx_stream_proxy_module&lt;/a&gt;. Effectively this overrides &lt;a href=&#34;https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_ssl&#34;&gt;proxy_ssl&lt;/a&gt; directive to &lt;code&gt;off&lt;/code&gt; setting for the current stream session.&lt;/p&gt; &#xA;&lt;p&gt;This function has no side effects if the &lt;code&gt;proxy_ssl off;&lt;/code&gt; setting has already been specified inside &lt;code&gt;nginx.conf&lt;/code&gt; or if this function has been previously called from the current session.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.var.patch_metatable&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;resty.kong.var.patch_metatable()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Indexed variable access is a faster way of accessing Nginx variables for OpenResty. This method patches the metatable of &lt;code&gt;ngx.var&lt;/code&gt; to enable index access to variables that supports it. It should be called once in the &lt;code&gt;init&lt;/code&gt; phase which will be effective for all subsequent &lt;code&gt;ngx.var&lt;/code&gt; uses.&lt;/p&gt; &#xA;&lt;p&gt;For variables that does not have indexed access, the slower hash based lookup will be used instead (this is the OpenResty default behavior).&lt;/p&gt; &#xA;&lt;p&gt;To ensure a variable can be accessed using index, you can use the &lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#lua_kong_load_var_index&#34;&gt;lua_kong_load_var_index&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2020 Kong Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SpiderLabs/owasp-modsecurity-crs</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/SpiderLabs/owasp-modsecurity-crs</id>
    <link href="https://github.com/SpiderLabs/owasp-modsecurity-crs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OWASP ModSecurity Core Rule Set (CRS) Project (Official Repository)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/travis/spiderlabs/owasp-modsecurity-crs/v3.3/dev?label=v3.3%2Fdev&#34; alt=&#34;Travis build v3.3/dev&#34;&gt; &lt;img src=&#34;https://img.shields.io/travis/spiderlabs/owasp-modsecurity-crs/v3.2/dev?label=v3.2%2Fdev&#34; alt=&#34;Travis build v3.2/dev&#34;&gt; &lt;img src=&#34;https://img.shields.io/travis/spiderlabs/owasp-modsecurity-crs/v3.1/dev?label=v3.1%2Fdev&#34; alt=&#34;Travis build v3.1/dev&#34;&gt; &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Project_Inventory#tab=Flagship_Projects&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/owasp-flagship%20project-38a047.svg?sanitize=true&#34; alt=&#34;OWASP Flagship&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/1390&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/1390/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CRS migrated to a new &lt;span&gt;🏠&lt;/span&gt; !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The OWASP ModSecurity Core Rule Set (CRS) has moved to &lt;a href=&#34;https://github.com/coreruleset/coreruleset&#34;&gt;https://github.com/coreruleset/coreruleset&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A note on this change:&lt;/p&gt; &#xA;&lt;p&gt;This project started at Trustwave SpiderLabs over ten years ago, it was created with the idea of making a free ruleset that anyone can use to get started with ModSecurity. Over time it has grown into a community maintained project that no longer needs our direct support- which is the best you can hope for with such a project: Apart from growing a community dedicated fully to maintaining the CRS project, it also freed us up to focus fully on maintaining ModSecurity the engine.&lt;/p&gt; &#xA;&lt;p&gt;Given that Trustwave SpiderLabs hasn&#39;t been the maintainer of the project for a few years now it made sense for it to have its own home on GitHub. As such, in coordination with the CRS team it has moved to the following location: &lt;a href=&#34;https://github.com/coreruleset/coreruleset&#34;&gt;https://github.com/coreruleset/coreruleset&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is now archived to retain its history and make sure that no links are broken but it will &lt;strong&gt;NOT&lt;/strong&gt; be maintained at this location so if you&#39;re working directly with GitHub make sure to update your scripts and environments accordingly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;- Trustwave SpiderLabs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;OWASP ModSecurity Core Rule Set (CRS)&lt;/h1&gt; &#xA;&lt;p&gt;The OWASP ModSecurity Core Rule Set (CRS) is a set of generic attack detection rules for use with ModSecurity or compatible web application firewalls. The CRS aims to protect web applications from a wide range of attacks, including the OWASP Top Ten, with a minimum of false alerts.&lt;/p&gt; &#xA;&lt;h2&gt;CRS Resources&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://coreruleset.org/&#34;&gt;OWASP ModSecurity Core Rule Set page&lt;/a&gt; to get introduced to the CRS and view resources on installation, configuration, and working with the CRS.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to the CRS&lt;/h2&gt; &#xA;&lt;p&gt;We strive to make the OWASP ModSecurity CRS accessible to a wide audience of beginner and experienced users. We are interested in hearing any bug reports, false positive alert reports, evasions, usability issues, and suggestions for new detections.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SpiderLabs/owasp-modsecurity-crs/issues&#34;&gt;Create an issue on GitHub&lt;/a&gt; to report a false positive or false negative (evasion). Please include your installed version and the relevant portions of your ModSecurity audit log.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/a/owasp.org/forum/#!forum/modsecurity-core-rule-set-project&#34;&gt;Sign up for our Google Group&lt;/a&gt; to ask general usage questions and participate in discussions on the CRS. Also &lt;a href=&#34;https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/index&#34;&gt;here&lt;/a&gt; you can find the archives for the previous mailing list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://owaspslack.com&#34;&gt;Join the #coreruleset channel on OWASP Slack&lt;/a&gt; to chat about the CRS.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2006-2019 Trustwave and contributors. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;The OWASP ModSecurity Core Rule Set is distributed under Apache Software License (ASL) version 2. Please see the enclosed LICENSE file for full details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inaes-tic/pkg-firefox</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/inaes-tic/pkg-firefox</id>
    <link href="https://github.com/inaes-tic/pkg-firefox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;identidad visual de firefox&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>o0HalfLife0o/list</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/o0HalfLife0o/list</id>
    <link href="https://github.com/o0HalfLife0o/list" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ABP/ublock订阅规则&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ad-pc.txt：[推荐桌面端]合并自乘风视频广告过滤规则、Easylist、EasylistChina、EasyPrivacy、CJX&#39;sAnnoyance，以及补充的一些规则；&lt;/li&gt; &#xA; &lt;li&gt;ad-mo.txt：合并自Easylist、EasylistChina、EasyPrivacy、CJX&#39;sAnnoyance；&lt;/li&gt; &#xA; &lt;li&gt;ad.txt：[推荐移动端]合并自乘风视频广告过滤规则、EasylistChina、EasylistLite、CJX&#39;sAnnoyance，以及补充的一些规则；&lt;/li&gt; &#xA; &lt;li&gt;ad2.txt：合并自乘风视频广告过滤规则、EasylistChina、EasylistLite、CJX&#39;sAnnoyance；&lt;/li&gt; &#xA; &lt;li&gt;ad3.txt：合并自乘风视频广告过滤规则、EasylistChina、EasylistLite、CJX&#39;sAnnoyance、EasyPrivacy；&lt;/li&gt; &#xA; &lt;li&gt;ad-edentw.txt：合并自Adblock Warning Removal List、ABP filters、anti-adblock-killer-filters。&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-Memoize-HashKey-Ignore</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/binary-com/perl-Memoize-HashKey-Ignore</id>
    <link href="https://github.com/binary-com/perl-Memoize-HashKey-Ignore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Utility which helps you to ignore certain keys to be in Memoize&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Memoize-HashKey-Ignore&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Memoize-HashKey-Ignore helps you to ignore certain keys to store in Memoize.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes you don&#39;t want to store certain keys. You know what the values looks likes, but you can&#39;t easily write memoize function which culls them itself.&lt;/p&gt; &#xA;&lt;p&gt;Memoize::HashKey::Ignore allows you to supply a code reference which describes, which keys should not be stored in Memoization Cache.&lt;/p&gt; &#xA;&lt;p&gt;This module will allow you to memoize the entire function with splitting it into cached and uncached pieces.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-Memoize-HashKey-Ignore&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-Memoize-HashKey-Ignore.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-Memoize-HashKey-Ignore&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-Memoize-HashKey-Ignore/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/binary-com/perl-Memoize-HashKey-Ignore&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/binary-com/perl-Memoize-HashKey-Ignore.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SYNOPSIS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Memoize;&#xA;&#xA;tie my %scalar_cache = &#39;Memoize::HashKey::Ignore&#39;, IGNORE =&amp;gt; sub { my $key = shift, return ($key eq &#39;BROKENKEY&#39;) ? 1 : 0; };&#xA;tie my %list_cache   = &#39;Memoize::HashKey::Ignore&#39;, IGNORE =&amp;gt; sub { my $key = shift, return ($key eq &#39;BROKENKEY&#39;) ? 1 : 0; };&#xA;&#xA;memoize(&#39;function&#39;, SCALAR_CACHE =&amp;gt; [ HASH =&amp;gt; \%scalar_cache ], LIST_CACHE =&amp;gt; [ HASH =&amp;gt; \%list_cache ]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;To install this module, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SUPPORT AND DOCUMENTATION&lt;/p&gt; &#xA;&lt;p&gt;After installing, you can find documentation for this module with the perldoc command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perldoc Memoize::HashKey::Ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also look for information at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RT, CPAN&#39;s request tracker (report bugs here)&#xA;    http://rt.cpan.org/NoAuth/Bugs.html?Dist=Memoize-HashKey-Ignore&#xA;&#xA;AnnoCPAN, Annotated CPAN documentation&#xA;    http://annocpan.org/dist/Memoize-HashKey-Ignore&#xA;&#xA;CPAN Ratings&#xA;    http://cpanratings.perl.org/d/Memoize-HashKey-Ignore&#xA;&#xA;Search CPAN&#xA;    http://search.cpan.org/dist/Memoize-HashKey-Ignore/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LICENSE AND COPYRIGHT&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2014 binary.com&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the the Artistic License (2.0). You may obtain a copy of the full license at:&lt;/p&gt; &#xA;&lt;p&gt;L&lt;a href=&#34;http://www.perlfoundation.org/artistic_license_2_0&#34;&gt;http://www.perlfoundation.org/artistic_license_2_0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any use, modification, and distribution of the Standard or Modified Versions is governed by this Artistic License. By using, modifying or distributing the Package, you accept this license. Do not use, modify, or distribute the Package, if you do not accept this license.&lt;/p&gt; &#xA;&lt;p&gt;If your Modified Version has been derived from a Modified Version made by someone other than you, you are nevertheless required to ensure that your Modified Version complies with the requirements of this license.&lt;/p&gt; &#xA;&lt;p&gt;This license does not grant you the right to use any trademark, service mark, tradename, or logo of the Copyright Holder.&lt;/p&gt; &#xA;&lt;p&gt;This license includes the non-exclusive, worldwide, free-of-charge patent license to make, have made, use, offer to sell, sell, import and otherwise transfer the Package with respect to any patent claims licensable by the Copyright Holder that are necessarily infringed by the Package. If you institute patent litigation (including a cross-claim or counterclaim) against any party alleging that the Package constitutes direct or contributory patent infringement, then this Artistic License to you shall terminate on the date that such litigation is filed.&lt;/p&gt; &#xA;&lt;p&gt;Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS &#34;AS IS&#39; AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-experian-idauth</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/binary-com/perl-experian-idauth</id>
    <link href="https://github.com/binary-com/perl-experian-idauth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Perl module for Experian&#39;s ID authenticate service&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Experian-IDAuth&lt;/p&gt; &#xA;&lt;p&gt;This module provides an interface to Experian&#39;s Identity Authenticate service. &lt;a href=&#34;http://www.experian.co.uk/identity-and-fraud/products/authenticate.html&#34;&gt;http://www.experian.co.uk/identity-and-fraud/products/authenticate.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-experian-idauth&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-experian-idauth.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-experian-idauth&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-experian-idauth/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/binary-com/perl-experian-idauth&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/binary-com/perl-experian-idauth.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;To install this module, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SUPPORT AND DOCUMENTATION&lt;/p&gt; &#xA;&lt;p&gt;After installing, you can find documentation for this module with the perldoc command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perldoc Experian::IDAuth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also look for information at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RT, CPAN&#39;s request tracker (report bugs here)&#xA;    http://rt.cpan.org/NoAuth/Bugs.html?Dist=Experian-IDAuth&#xA;&#xA;AnnoCPAN, Annotated CPAN documentation&#xA;    http://annocpan.org/dist/Experian-IDAuth&#xA;&#xA;CPAN Ratings&#xA;    http://cpanratings.perl.org/d/Experian-IDAuth&#xA;&#xA;Search CPAN&#xA;    http://search.cpan.org/dist/Experian-IDAuth/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LICENSE AND COPYRIGHT&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2014,2015 binary.com&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the the Artistic License (2.0). You may obtain a copy of the full license at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.perlfoundation.org/artistic_license_2_0&#34;&gt;http://www.perlfoundation.org/artistic_license_2_0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any use, modification, and distribution of the Standard or Modified Versions is governed by this Artistic License. By using, modifying or distributing the Package, you accept this license. Do not use, modify, or distribute the Package, if you do not accept this license.&lt;/p&gt; &#xA;&lt;p&gt;If your Modified Version has been derived from a Modified Version made by someone other than you, you are nevertheless required to ensure that your Modified Version complies with the requirements of this license.&lt;/p&gt; &#xA;&lt;p&gt;This license does not grant you the right to use any trademark, service mark, tradename, or logo of the Copyright Holder.&lt;/p&gt; &#xA;&lt;p&gt;This license includes the non-exclusive, worldwide, free-of-charge patent license to make, have made, use, offer to sell, sell, import and otherwise transfer the Package with respect to any patent claims licensable by the Copyright Holder that are necessarily infringed by the Package. If you institute patent litigation (including a cross-claim or counterclaim) against any party alleging that the Package constitutes direct or contributory patent infringement, then this Artistic License to you shall terminate on the date that such litigation is filed.&lt;/p&gt; &#xA;&lt;p&gt;Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS &#34;AS IS&#39; AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inverse-inc/packetfence</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/inverse-inc/packetfence</id>
    <link href="https://github.com/inverse-inc/packetfence" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PacketFence is a fully supported, trusted, Free and Open Source network access control (NAC) solution. Boasting an impressive feature set including a captive-portal for registration and remediation, centralized wired and wireless management, powerful BYOD management options, 802.1X support, layer-2 isolation of problematic devices; PacketFence c…&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PacketFence&lt;/h1&gt; &#xA;&lt;h2&gt;What is PacketFence?&lt;/h2&gt; &#xA;&lt;p&gt;PacketFence is a fully supported, trusted, Free and Open Source network access control (NAC) system. Boasting an impressive feature set including a captive-portal for registration and remediation, centralized wired and wireless management, 802.1X support, layer-2 isolation of problematic devices, integration with IDS solutions and vulnerability scanners; PacketFence can be used to effectively secure networks - from small to very large heterogeneous networks.&lt;/p&gt; &#xA;&lt;p&gt;You want to know who is on your network? You want to give different access to your network based on who is connecting? PacketFence is for you!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Follow the instructions provided in the &lt;a href=&#34;https://packetfence.org/support/index.html#/documentation&#34;&gt;Administration Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More Information&lt;/h2&gt; &#xA;&lt;p&gt;Noteworthy changes since the last release see the &lt;a href=&#34;https://github.com/inverse-inc/packetfence/raw/devel/NEWS.asciidoc&#34;&gt;NEWS file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Upgrading? See the &lt;a href=&#34;https://github.com/inverse-inc/packetfence/raw/devel/docs/PacketFence_Upgrade_Guide.asciidoc&#34;&gt;Upgrade Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more details and developer visible changes see the &lt;a href=&#34;https://github.com/inverse-inc/packetfence&#34;&gt;project&#39;s page on Github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://packetfence.org/support/index.html#/community&#34;&gt;community&lt;/a&gt; or request &lt;a href=&#34;https://packetfence.org/support/index.html#/commercial&#34;&gt;commercial support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;PacketFence is a collaborative effort in order to create the best Open Source NAC solution. There are multiple ways you can contribute to the project.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a network vendor&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Provide Inverse with switches, access points, wireless controllers, etc. so we can support even more equipment.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a security software vendor&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Provide Inverse with licenses of your software so we can integrate your IDS, Netflow analyzer, IPS, Web filter, etc. directly into PacketFence and its captive portal technology.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a PacketFence user&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation reviews, enhancements and translations&lt;/li&gt; &#xA; &lt;li&gt;Share your ideas and participate to the discussion in &lt;a href=&#34;https://packetfence.org/support/index.html#/community&#34; title=&#34;Community Mailing Lists&#34;&gt;mailing lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Provide Inverse with switches, access points, wireless controllers, etc. so we can support even more equipment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a developer&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation reviews, enhancements and translations&lt;/li&gt; &#xA; &lt;li&gt;Share your ideas and participate to the discussion in &lt;a href=&#34;https://packetfence.org/support/index.html#/community&#34; title=&#34;Community Mailing Lists&#34;&gt;mailing lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patches for bugs or enhancements&lt;/li&gt; &#xA; &lt;li&gt;Write tests&lt;/li&gt; &#xA; &lt;li&gt;Handle tasks in our Roadmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;em&gt;You are a security researcher&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Push PacketFence into new areas by leveraging the extensibility built into PacketFence. A lot of the low-level plumbing is done for you so you can focus on demoing your ideas.&lt;/p&gt; &#xA;&lt;p&gt;Get in touch with us on the developer &lt;a href=&#34;https://packetfence.org/support/index.html#/community&#34; title=&#34;Community Mailing Lists&#34;&gt;mailing list&lt;/a&gt; with your ideas!&lt;/p&gt; &#xA;&lt;h2&gt;Source&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to fork our &lt;a href=&#34;https://github.com/inverse-inc/packetfence&#34;&gt;github repository&lt;/a&gt; if you are willing to contribute.&lt;/p&gt; &#xA;&lt;p&gt;Most of the development happens in branches. Once ready for integration into &lt;a href=&#34;https://github.com/inverse-inc/packetfence/tree/devel&#34;&gt;devel&lt;/a&gt;, a pull request is opened and a code review takes place. See the list of &lt;a href=&#34;https://github.com/inverse-inc/packetfence/branches&#34;&gt;all branches in the works&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;PacketFence is available in various languages. The following list describes the official translations alongside their maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English - Inverse inc.&lt;/li&gt; &#xA; &lt;li&gt;Brazilian Portuguese - Diego de Souza Lopes&lt;/li&gt; &#xA; &lt;li&gt;French - Inverse inc.&lt;/li&gt; &#xA; &lt;li&gt;Norwegian&lt;/li&gt; &#xA; &lt;li&gt;Polish - Maciej Uhlig&lt;/li&gt; &#xA; &lt;li&gt;Spanish (Spain) - Dominique Couot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you would like to translate the software in an other language, please consult the &lt;a href=&#34;https://packetfence.org/support/faq/article/how-to-translate-packetfence-in-another-language.html&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the GNU General Public License v2.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://inverse.ca/&#34;&gt;Inverse inc.&lt;/a&gt; leads the development of the solution. Over the years, numerous people and organizations have contributed to the project and we would like to thank them all !&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-Email-Folder-Search</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/binary-com/perl-Email-Folder-Search</id>
    <link href="https://github.com/binary-com/perl-Email-Folder-Search" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-Email-Folder-Search&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-Email-Folder-Search.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-Email-Folder-Search&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-Email-Folder-Search/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Email::Folder::Search&lt;/p&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;Search email from mailbox file. This module is mainly to test that the emails are received or not.&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Email::Folder::Search;&#xA;my $folder = Email::Folder::Search-&amp;gt;new(&#39;/var/spool/mbox&#39;);&#xA;my %msg = $folder-&amp;gt;get_email_by_address_subject(email =&amp;gt; &#39;hello@test.com&#39;, subject =&amp;gt; qr/this is a subject/);&#xA;$folder-&amp;gt;clear();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Methods&lt;/h1&gt; &#xA;&lt;h2&gt;new($folder, %options)&lt;/h2&gt; &#xA;&lt;p&gt;takes the name of a folder, and a hash of options&lt;/p&gt; &#xA;&lt;p&gt;options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;timeout&lt;/p&gt; &lt;p&gt;The seconds that get_email_by_address_subject will wait if the email cannot be found.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;search(email =&amp;gt; $email, subject =&amp;gt; qr/the subject/);&lt;/h2&gt; &#xA;&lt;p&gt;get emails with receiver address and subject(regexp). Return an array of messages which are hashref.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $msgs = search(email =&amp;gt; &#39;hello@test.com&#39;, subject =&amp;gt; qr/this is a subject/);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;clear&lt;/h2&gt; &#xA;&lt;p&gt;clear the content of mailbox&lt;/p&gt; &#xA;&lt;h2&gt;init&lt;/h2&gt; &#xA;&lt;p&gt;init Email folder for test&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Email::Folder&#34;&gt;Email::Folder&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-FIX-Parser</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/binary-com/perl-FIX-Parser</id>
    <link href="https://github.com/binary-com/perl-FIX-Parser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A module to parse FIX market data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;perl-FIX-Parser&lt;/h1&gt; &#xA;&lt;p&gt;A module to parse FIX market data. Currently supports FIX 4.4.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To install this module, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use FIX::Parser::FIX44;&#xA;&#xA;my $parser = FIX::Parser::FIX44-&amp;gt;new;&#xA;&#xA;my @msgs = $parser-&amp;gt;add($fix_msg);&#xA;&#xA;for(@msgs) {&#xA;&#x9;print &#34;Symbol: &#34;.$_-&amp;gt;{symbol}.&#34;\n&#34;;&#xA;        &#xA;&#x9;print &#34;Bid: &#34;.$_-&amp;gt;{bid}.&#34;\n&#34;;&#xA;&#x9;print &#34;Ask: &#34;.$_-&amp;gt;{ask}.&#34;\n&#34;;&#xA;&#x9;print &#34;Datetime: &#34;.$_-&amp;gt;{datetime}.&#34;\n&#34;;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-HTML-FormBuilder</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/binary-com/perl-HTML-FormBuilder</id>
    <link href="https://github.com/binary-com/perl-HTML-FormBuilder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HTML::FormBuilder&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-HTML-FormBuilder&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-HTML-FormBuilder.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-HTML-FormBuilder&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-HTML-FormBuilder/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An object-oriented module for building and displaying HTML form.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $form = HTML::FormBuilder-&amp;gt;new(&#xA;    data =&amp;gt; {&#xA;        name    =&amp;gt; &#39;form_name&#39;,&#xA;        id      =&amp;gt; &#39;form_id&#39;,&#xA;        class   =&amp;gt; &#39;form_class&#39;,&#xA;        method  =&amp;gt; &#39;post&#39;,&#xA;    },&#xA;    classes =&amp;gt; { row =&amp;gt; &#39;rowdev&#39; });&#xA;&#xA;my $fieldset = $form-&amp;gt;add_fieldset({&#xA;    id      =&amp;gt; &#39;fieldset1&#39;,&#xA;    legend  =&amp;gt; &#39;fieldset1&#39;,&#xA;});&#xA;&#xA;my $input1 = {&#xA;    label =&amp;gt; {&#xA;        text    =&amp;gt; &#39;input1&#39;,&#xA;        for     =&amp;gt; &#39;input1&#39;,&#xA;    },&#xA;    input =&amp;gt; {&#xA;        name    =&amp;gt; &#39;name&#39;,&#xA;        type    =&amp;gt; &#39;text&#39;,&#xA;        value   =&amp;gt; &#39;Join&#39;&#xA;    }};&#xA;&#xA;$fieldset-&amp;gt;add_field($input1);&#xA;$form-&amp;gt;set_field_value(&#39;name&#39;, &#39;Omid&#39;);&#xA;print $form-&amp;gt;build;&#xA;&#xA;&#xA;my $form2 = HTML::FormBuilder::Validation-&amp;gt;new(&#xA;    data =&amp;gt; {&#xA;        name    =&amp;gt; &#39;form2_name&#39;,&#xA;        id      =&amp;gt; &#39;form2_id&#39;,&#xA;        class   =&amp;gt; &#39;form2_class&#39;,&#xA;        method  =&amp;gt; &#39;post&#39;&#xA;    },&#xA;    classes =&amp;gt; {row =&amp;gt; &#39;rowdev&#39;});&#xA;&#xA;my $fieldset2 = $form2-&amp;gt;add_fieldset({&#xA;    id      =&amp;gt; &#39;fieldset2&#39;,&#xA;    legend  =&amp;gt; &#39;fieldset2&#39;,&#xA;});&#xA;&#xA;my $select_fruit = {&#xA;    id      =&amp;gt; &#39;fruit&#39;,&#xA;    name    =&amp;gt; &#39;fruit&#39;,&#xA;    options =&amp;gt; [&#xA;        {&#xA;            value =&amp;gt; &#39;apple&#39;,&#xA;            text  =&amp;gt; &#39;apple&#39;,&#xA;        },&#xA;        {&#xA;            value =&amp;gt; &#39;orange&#39;,&#xA;            text  =&amp;gt; &#39;orange&#39;&#xA;        }&#xA;    ]};&#xA;&#xA;my $input2 = {&#xA;    label =&amp;gt; {&#xA;        text    =&amp;gt; &#39;Select fruit&#39;,&#xA;        for     =&amp;gt; &#39;fruit&#39;,&#xA;    },&#xA;    input =&amp;gt; [$select_fruit],&#xA;    error =&amp;gt; {&#xA;        text    =&amp;gt; &#39;&#39;,&#xA;        id      =&amp;gt; &#39;errorfruit&#39;,&#xA;        class   =&amp;gt; &#39;errorfield&#39;,&#xA;    },&#xA;    validation =&amp;gt; [{&#xA;        type    =&amp;gt; &#39;regexp&#39;,&#xA;        id      =&amp;gt; &#39;fruit&#39;,&#xA;        regexp  =&amp;gt; &#39;^[a-zA-Z0-9- ]+$&#39;,&#xA;        err_msg =&amp;gt; &#39;Please select fruit&#39;,&#xA;    }],&#xA;};&#xA;&#xA;$fieldset2-&amp;gt;add_field($input2);&#xA;$form-&amp;gt;validate;&#xA;$form-&amp;gt;build;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;INSTALLATION&lt;/h4&gt; &#xA;&lt;p&gt;To install this module, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SUPPORT AND DOCUMENTATION&lt;/h4&gt; &#xA;&lt;p&gt;After installing, you can find documentation for this module with the perldoc command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perldoc HTML::FormBuilder&#xA;perldoc HTML::FormBuilder::Validation&#xA;perldoc HTML::FormBuilder::FieldSet&#xA;perldoc HTML::FormBuilder::Field&#xA;perldoc HTML::FormBuilder::Select&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also look for information at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RT, CPAN&#39;s request tracker (report bugs here)&#xA;    http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTML-FormBuilder&#xA;&#xA;AnnoCPAN, Annotated CPAN documentation&#xA;    http://annocpan.org/dist/HTML-FormBuilder&#xA;&#xA;CPAN Ratings&#xA;    http://cpanratings.perl.org/d/HTML-FormBuilder&#xA;&#xA;Search CPAN&#xA;    http://search.cpan.org/dist/HTML-FormBuilder/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;####COPYRIGHT&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2015 binary.com&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-Data-Validate-Sanctions</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/binary-com/perl-Data-Validate-Sanctions</id>
    <link href="https://github.com/binary-com/perl-Data-Validate-Sanctions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Validate a name against sanctions lists&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-Data-Validate-Sanctions&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-Data-Validate-Sanctions.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-Data-Validate-Sanctions&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-Data-Validate-Sanctions/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Data::Validate::Sanctions - Validate a name against sanctions lists&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;# as exported function&#xA;use Data::Validate::Sanctions qw/is_sanctioned get_sanction_file set_sanction_file/;&#xA;set_sanction_file(&#39;/var/storage/sanction.csv&#39;);&#xA;&#xA;print &#39;BAD&#39; if is_sanctioned($first_name, $last_name);&#xA;&#xA;# as OO&#xA;use Data::Validate::Sanctions;&#xA;&#xA;#You can also set sanction_file in the new method.&#xA;my $validator = Data::Validate::Sanctions-&amp;gt;new(sanction_file =&amp;gt; &#39;/var/storage/sanction.csv&#39;);&#xA;print &#39;BAD&#39; if $validator-&amp;gt;is_sanctioned(&#34;$last_name $first_name&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;Data::Validate::Sanctions is a simple validitor to validate a name against sanctions lists.&lt;/p&gt; &#xA;&lt;p&gt;The list is from the following sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.treasury.gov/ofac/downloads/sdn_xml.zip&#34;&gt;https://www.treasury.gov/ofac/downloads/sdn_xml.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.treasury.gov/ofac/downloads/consolidated/consolidated.xml&#34;&gt;https://www.treasury.gov/ofac/downloads/consolidated/consolidated.xml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ofsistorage.blob.core.windows.net/publishlive/ConList.csv&#34;&gt;https://ofsistorage.blob.core.windows.net/publishlive/ConList.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webgate.ec.europa.eu/fsd/fsf/public/files/xmlFullSanctionsList_1_1/content?token=$eu_token&#34;&gt;https://webgate.ec.europa.eu/fsd/fsf/public/files/xmlFullSanctionsList_1_1/content?token=$eu_token&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;run &lt;a href=&#34;https://metacpan.org/pod/update_sanctions_csv&#34;&gt;update_sanctions_csv&lt;/a&gt; to update the bundled csv.&lt;/p&gt; &#xA;&lt;p&gt;The path of list can be set by function &lt;a href=&#34;https://raw.githubusercontent.com/binary-com/perl-Data-Validate-Sanctions/master/#set_sanction_file&#34;&gt;&#34;set_sanction_file&#34;&lt;/a&gt; or by method &lt;a href=&#34;https://raw.githubusercontent.com/binary-com/perl-Data-Validate-Sanctions/master/#new&#34;&gt;&#34;new&#34;&lt;/a&gt;. If not set, then environment variable $ENV{SANCTION_FILE} will be checked, at last the default file in this package will be used.&lt;/p&gt; &#xA;&lt;h1&gt;Sanctions check - How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;Note that a positive result means &lt;code&gt;marked as prohibited&lt;/code&gt; and negative result means &lt;code&gt;innocent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Client information can be passed in two ways: a.) a hash-ref containing any of these fields: &lt;code&gt;first_name&lt;/code&gt; (required), &lt;code&gt;last_name&lt;/code&gt; (required), &lt;code&gt;date_of_birth&lt;/code&gt;, &lt;code&gt;place_of_birth&lt;/code&gt;, &lt;code&gt;residence&lt;/code&gt;, &lt;code&gt;citizen&lt;/code&gt;, &lt;code&gt;nationality&lt;/code&gt;, &lt;code&gt;postal_code&lt;/code&gt;, &lt;code&gt;national_id&lt;/code&gt;, &lt;code&gt;passport_no&lt;/code&gt;. Example: &lt;code&gt;get_sanctioned_info({first_name =&amp;gt; &#39;Alex&#39;, last_name =&amp;gt; &#39;Xela&#39;, date_of_birth =&amp;gt; &#39;..&#39;, residence =&amp;gt; &#39;fr&#39;, citizen =&amp;gt; &#39;Iran&#39;);&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;b.) three scalar arguments (to keep compliant with the old API): Example: &lt;code&gt;get_sanctioned_info($client-&amp;gt;first_name, $client-&amp;gt;last_name, $client-&amp;gt;date_of_birth);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; are treated together as the &lt;code&gt;full_name&lt;/code&gt;. The &lt;code&gt;full_name&lt;/code&gt; is then cleaned by removing non-alphabets (if any) Example: &lt;code&gt;Ahmad Sheikh&lt;/code&gt; becomes &lt;code&gt;AHMAD SHEIKH&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The above procedure is applied when a sanctioned individual&#39;s name is used Example: &lt;code&gt;ABDUL-QADER Ahmad Sheik&lt;/code&gt; becomes &lt;code&gt;ABDUL QADER AHMAD SHEIKH&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Name matching takes place, based on the following four scenarios: a.) &lt;strong&gt;Exact name&lt;/strong&gt;: If the client is &lt;code&gt;Ahmad Sheikh&lt;/code&gt; and the sanctioned individual is &lt;code&gt;Ahmad Sheikh&lt;/code&gt;, it is a &lt;strong&gt;positive match&lt;/strong&gt;. Even if the names were reversed, the match would stil be positive, as it looks for &lt;strong&gt;exact&lt;/strong&gt; wording and regardless of order. b.) &lt;strong&gt;Partial exact match (I)&lt;/strong&gt;: If the client is &lt;code&gt;Ahmad Sheikh&lt;/code&gt; and the sanctioned individual is &lt;code&gt;Abdul Qader Ahmad Sheikh&lt;/code&gt;, then it is also a positive match. This is because the client&#39;s name &lt;code&gt;Ahmad Sheikh&lt;/code&gt; is a substring of &lt;code&gt;Abdul Qader Ahmad Sheikh&lt;/code&gt;. c.) &lt;strong&gt;Partial exact match (II)&lt;/strong&gt;: If the client is &lt;code&gt;Abdul Qader Ahmad Sheikh&lt;/code&gt; and the sanctioned individual is &lt;code&gt;Ahmad Sheikh&lt;/code&gt;, then it is also a positive match. This is because, as mentioned above, it is a substring &lt;strong&gt;and&lt;/strong&gt; also because we take the shortest name into consideration first and compare with the longer name.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: As long as there are &lt;strong&gt;two&lt;/strong&gt; or more matches, the result will always be a positive match due to name similarity. If the shortest name has only one token and there is a match, then it is also a positive result.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;If a &lt;code&gt;date_of_birth&lt;/code&gt; value is passed, it is compared to the list of &lt;strong&gt;date_of_birth&lt;/strong&gt; in the sanction lists (if a value is found), based on epoch value and the sanctioned individual&#39;s name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scenarios to consider when &lt;strong&gt;date_of_birth&lt;/strong&gt; is taken into consideration: a.) &lt;code&gt;name matches and no date_of_birth value found in sanctions list&lt;/code&gt;: This returns a positive result b.) &lt;code&gt;name matches and date_of_birth matches&lt;/code&gt;: This returns a positive result c.) &lt;code&gt;name matches but date_of_birth does not match from all given values&lt;/code&gt;: This returns a negative result d.) &lt;code&gt;name matches but no date_of_birth value is passed&lt;/code&gt;: This returns a positive result&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;is_sanctioned&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;is_sanctioned({first_name =&amp;gt; &#39;...&#39;, last_name =&amp;gt; &#39;...&#39;, date_of_birth =&amp;gt; &#39;...&#39;});&#xA;is_sanctioned($last_name, $first_name);&#xA;is_sanctioned($first_name, $last_name);&#xA;is_sanctioned(&#34;$last_name $first_name&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;when one string is passed, please be sure last_name is before first_name.&lt;/p&gt; &#xA;&lt;p&gt;or you can pass first_name, last_name (last_name, first_name), we&#39;ll check both &#34;$last_name $first_name&#34; and &#34;$first_name $last_name&#34;.&lt;/p&gt; &#xA;&lt;p&gt;return list name for yes, 0 for no.&lt;/p&gt; &#xA;&lt;p&gt;it will remove all non-alpha chars and compare with the list we have.&lt;/p&gt; &#xA;&lt;h2&gt;new&lt;/h2&gt; &#xA;&lt;p&gt;Create the object, and set sanction_file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my $validator = Data::Validate::Sanctions-&amp;gt;new(sanction_file =&amp;gt; &#39;/var/storage/sanction.csv&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;get_sanction_file&lt;/h2&gt; &#xA;&lt;p&gt;get sanction_file which is used by &lt;a href=&#34;https://raw.githubusercontent.com/binary-com/perl-Data-Validate-Sanctions/master/#is_sanctioned&#34;&gt;&#34;is_sanctioned&#34;&lt;/a&gt; (procedure-oriented)&lt;/p&gt; &#xA;&lt;h2&gt;set_sanction_file&lt;/h2&gt; &#xA;&lt;p&gt;set sanction_file which is used by &lt;a href=&#34;https://raw.githubusercontent.com/binary-com/perl-Data-Validate-Sanctions/master/#is_sanctioned&#34;&gt;&#34;is_sanctioned&#34;&lt;/a&gt; (procedure-oriented)&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Binary.com &lt;a href=&#34;mailto:fayland@binary.com&#34;&gt;fayland@binary.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;COPYRIGHT&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2014- Binary.com&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>darold/pgbadger</title>
    <updated>2022-06-02T01:50:52Z</updated>
    <id>tag:github.com,2022-06-02:/darold/pgbadger</id>
    <link href="https://github.com/darold/pgbadger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast PostgreSQL Log Analyzer&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;TABLE OF CONTENTS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#NAME&#34;&gt;NAME&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#SYNOPSIS&#34;&gt;SYNOPSIS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#DESCRIPTION&#34;&gt;DESCRIPTION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#FEATURE&#34;&gt;FEATURE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#REQUIREMENT&#34;&gt;REQUIREMENT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#INSTALLATION&#34;&gt;INSTALLATION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#POSTGRESQL-CONFIGURATION&#34;&gt;POSTGRESQL-CONFIGURATION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#LOG-STATEMENTS&#34;&gt;LOG-STATEMENTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#PARALLEL-PROCESSING&#34;&gt;PARALLEL-PROCESSING&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#INCREMENTAL-REPORTS&#34;&gt;INCREMENTAL-REPORTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#BINARY-FORMAT&#34;&gt;BINARY-FORMAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#JSON-FORMAT&#34;&gt;JSON-FORMAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#AUTHORS&#34;&gt;AUTHORS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NAME&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger - a fast PostgreSQL log analysis report&lt;/p&gt; &#xA;&lt;h3&gt;SYNOPSIS&lt;/h3&gt; &#xA;&lt;p&gt;Usage: pgbadger [options] logfile [...]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PostgreSQL log analyzer with fully detailed reports and graphs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;logfile can be a single log file, a list of files, or a shell command&#xA;returning a list of files. If you want to pass log content from stdin&#xA;use - as filename. Note that input from stdin will not work with csvlog.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-a | --average minutes : number of minutes to build the average graphs of&#xA;                         queries and connections. Default 5 minutes.&#xA;-A | --histo-average min: number of minutes to build the histogram graphs&#xA;                         of queries. Default 60 minutes.&#xA;-b | --begin datetime  : start date/time for the data to be parsed in log&#xA;                         (either a timestamp or a time)&#xA;-c | --dbclient host   : only report on entries for the given client host.&#xA;-C | --nocomment       : remove comments like /* ... */ from queries.&#xA;-d | --dbname database : only report on entries for the given database.&#xA;-D | --dns-resolv      : client ip addresses are replaced by their DNS name.&#xA;                         Be warned that this can really slow down pgBadger.&#xA;-e | --end datetime    : end date/time for the data to be parsed in log&#xA;                         (either a timestamp or a time)&#xA;-E | --explode         : explode the main report by generating one report&#xA;                         per database. Global information not related to a&#xA;                         database are added to the postgres database report.&#xA;-f | --format logtype  : possible values: syslog, syslog2, stderr, jsonlog,&#xA;                         cvs, pgbouncer, logplex, rds and redshift. Use this&#xA;                         option when pgBadger is not able to detect the log&#xA;                         format.&#xA;-G | --nograph         : disable graphs on HTML output. Enabled by default.&#xA;-h | --help            : show this message and exit.&#xA;-H | --html-outdir path: path to directory where HTML report must be written&#xA;                         in incremental mode, binary files stay on directory&#xA;                         defined with -O, --outdir option.&#xA;-i | --ident name      : programname used as syslog ident. Default: postgres&#xA;-I | --incremental     : use incremental mode, reports will be generated by&#xA;                         days in a separate directory, --outdir must be set.&#xA;-j | --jobs number     : number of jobs to run at same time. Run as single&#xA;                         by default or when working with csvlog.&#xA;-J | --Jobs number     : number of log file to parse in parallel. Process one&#xA;                         file at a time by default or when csvlog is used.&#xA;-l | --last-parsed file: allow incremental log parsing by registering the&#xA;                         last datetime and line parsed. Useful if you want&#xA;                         to watch errors since last run or if you want one&#xA;                         report per day with a log rotated each week.&#xA;-L | --logfile-list file:file containing a list of log file to parse.&#xA;-m | --maxlength size  : maximum length of a query, it will be restricted to&#xA;                         the given size. Default truncate size is 100000.&#xA;-M | --no-multiline    : do not collect multiline statement to avoid garbage&#xA;                         especially on errors that generate a huge report.&#xA;-n | --nohighlight     : disable SQL code highlighting.&#xA;-N | --appname name    : only report on entries for given application name&#xA;-o | --outfile filename: define the filename for the output. Default depends&#xA;                         on the output format: out.html, out.txt, out.bin,&#xA;                         out.json or out.tsung. This option can be used&#xA;                         multiple time to output several format. To use json&#xA;                         output the Perl module JSON::XS must be installed,&#xA;                         To dump output to stdout use - as filename.&#xA;-O | --outdir path     : directory where out file must be saved.&#xA;-p | --prefix string   : the value of your custom log_line_prefix as&#xA;                         defined in your postgresql.conf. Only use it if you&#xA;                         aren&#39;t using one of the standard prefixes specified&#xA;                         in the pgBadger documentation, such as if your&#xA;                         prefix includes additional variables like client ip&#xA;                         or application name. See examples below.&#xA;-P | --no-prettify     : disable SQL queries prettify formatter.&#xA;-q | --quiet           : don&#39;t print anything to stdout, not even a progress&#xA;                         bar.&#xA;-Q | --query-numbering : add numbering of queries to the output when using&#xA;                         options --dump-all-queries or --normalized-only.&#xA;-r | --remote-host ip  : set the host where to execute the cat command on&#xA;                         remote logfile to parse locally the file.&#xA;-R | --retention N     : number of weeks to keep in incremental mode. Default&#xA;                         to 0, disabled. Used to set the number of weeks to&#xA;                         keep in output directory. Older weeks and days&#xA;                         directory are automatically removed.&#xA;-s | --sample number   : number of query samples to store. Default: 3.&#xA;-S | --select-only     : only report SELECT queries.&#xA;-t | --top number      : number of queries to store/display. Default: 20.&#xA;-T | --title string    : change title of the HTML page report.&#xA;-u | --dbuser username : only report on entries for the given user.&#xA;-U | --exclude-user username : exclude entries for the specified user from&#xA;                         report. Can be used multiple time.&#xA;-v | --verbose         : enable verbose or debug mode. Disabled by default.&#xA;-V | --version         : show pgBadger version and exit.&#xA;-w | --watch-mode      : only report errors just like logwatch could do.&#xA;-W | --wide-char       : encode html output of queries into UTF8 to avoid&#xA;                         Perl message &#34;Wide character in print&#34;.&#xA;-x | --extension       : output format. Values: text, html, bin, json or&#xA;                         tsung. Default: html&#xA;-X | --extra-files     : in incremental mode allow pgBadger to write CSS and&#xA;                         JS files in the output directory as separate files.&#xA;-z | --zcat exec_path  : set the full path to the zcat program. Use it if&#xA;                         zcat or bzcat or unzip is not in your path.&#xA;-Z | --timezone +/-XX  : Set the number of hours from GMT of the timezone.&#xA;                         Use this to adjust date/time in JavaScript graphs.&#xA;--pie-limit num        : pie data lower than num% will show a sum instead.&#xA;--exclude-query regex  : any query matching the given regex will be excluded&#xA;                         from the report. For example: &#34;^(VACUUM|COMMIT)&#34;&#xA;                         You can use this option multiple times.&#xA;--exclude-file filename: path of the file which contains all the regex to&#xA;                         use to exclude queries from the report. One regex&#xA;                         per line.&#xA;--include-query regex  : any query that does not match the given regex will&#xA;                         be excluded from the report. You can use this&#xA;                         option multiple times. For example: &#34;(tbl1|tbl2)&#34;.&#xA;--include-file filename: path of the file which contains all the regex of&#xA;                         the queries to include from the report. One regex&#xA;                         per line.&#xA;--disable-error        : do not generate error report.&#xA;--disable-hourly       : do not generate hourly report.&#xA;--disable-type         : do not generate report of queries by type, database&#xA;                         or user.&#xA;--disable-query        : do not generate query reports (slowest, most&#xA;                         frequent, queries by users, by database, ...).&#xA;--disable-session      : do not generate session report.&#xA;--disable-connection   : do not generate connection report.&#xA;--disable-lock         : do not generate lock report.&#xA;--disable-temporary    : do not generate temporary report.&#xA;--disable-checkpoint   : do not generate checkpoint/restartpoint report.&#xA;--disable-autovacuum   : do not generate autovacuum report.&#xA;--charset              : used to set the HTML charset to be used.&#xA;                         Default: utf-8.&#xA;--csv-separator        : used to set the CSV field separator, default: ,&#xA;--exclude-time  regex  : any timestamp matching the given regex will be&#xA;                         excluded from the report. Example: &#34;2013-04-12 .*&#34;&#xA;                         You can use this option multiple times.&#xA;--include-time  regex  : only timestamps matching the given regex will be&#xA;                         included in the report. Example: &#34;2013-04-12 .*&#34;&#xA;                         You can use this option multiple times.&#xA;--exclude-db name      : exclude entries for the specified database from&#xA;                         report. Example: &#34;pg_dump&#34;. Can be used multiple&#xA;                         time.&#xA;--exclude-appname name : exclude entries for the specified application name&#xA;                         from report.  Example: &#34;pg_dump&#34;.  Can be used&#xA;                         multiple time.&#xA;--exclude-line regex   : pgBadger will start to exclude any log entry that&#xA;                         will match the given regex. Can be used multiple&#xA;                         time.&#xA;--exclude-client name  : exclude log entries for the specified client ip.&#xA;                         Can be used multiple time.&#xA;--anonymize            : obscure all literals in queries, useful to hide&#xA;                         confidential data.&#xA;--noreport             : prevent pgBadger to create reports in incremental&#xA;                         mode.&#xA;--log-duration         : force pgBadger to associate log entries generated&#xA;                         by both log_duration = on and log_statement = &#39;all&#39;&#xA;--enable-checksum      : used to add a md5 sum under each query report.&#xA;--journalctl command   : command to use to replace PostgreSQL logfile by&#xA;                         a call to journalctl. Basically it might be:&#xA;                            journalctl -u postgresql-9.5&#xA;--pid-dir path         : set the path where the pid file must be stored.&#xA;                         Default /tmp&#xA;--pid-file file        : set the name of the pid file to manage concurrent&#xA;                         execution of pgBadger. Default: pgbadger.pid&#xA;--rebuild              : used to rebuild all html reports in incremental&#xA;                         output directories where there&#39;s binary data files.&#xA;--pgbouncer-only       : only show PgBouncer related menu in the header.&#xA;--start-monday         : in incremental mode, calendar&#39;s weeks start on&#xA;                         a sunday. Use this option to start on a monday.&#xA;--iso-week-number      : in incremental mode, calendar&#39;s weeks start on a&#xA;                         monday and respect the ISO 8601 week number, range&#xA;                         01 to 53, where week 1 is the first week that has&#xA;                         at least 4 days in the new year.&#xA;--normalized-only      : only dump all normalized query to out.txt&#xA;--log-timezone +/-XX   : Set the number of hours from GMT of the timezone&#xA;                         that must be used to adjust date/time read from&#xA;                         log file before beeing parsed. Using this option&#xA;                         make more difficult log search with a date/time.&#xA;--prettify-json        : use it if you want json output to be prettified.&#xA;--month-report YYYY-MM : create a cumulative HTML report over the specified&#xA;                         month. Requires incremental output directories and&#xA;                         the presence of all necessary binary data files&#xA;--day-report YYYY-MM-DD: create an HTML report over the specified day.&#xA;                         Requires incremental output directories and the&#xA;                         presence of all necessary binary data files&#xA;--noexplain            : do not process lines generated by auto_explain.&#xA;--command CMD          : command to execute to retrieve log entries on&#xA;                         stdin. pgBadger will open a pipe to the command&#xA;                         and parse log entries generated by the command.&#xA;--no-week              : inform pgbadger to not build weekly reports in&#xA;                         incremental mode. Useful if it takes too much time.&#xA;--explain-url URL      : use it to override the url of the graphical explain&#xA;                         tool. Default: http://explain.depesz.com/?is_public=0&amp;amp;is_anon=0&amp;amp;plan=&#xA;--tempdir DIR          : set directory where temporary files will be written&#xA;                         Default: File::Spec-&amp;gt;tmpdir() || &#39;/tmp&#39;&#xA;--no-process-info      : disable changing process title to help identify&#xA;                         pgbadger process, some system do not support it.&#xA;--dump-all-queries     : dump all queries found in the log file replacing&#xA;                         bind parameters are included in the queries at&#xA;                         their respective placeholders position.&#xA;--keep-comments        : do not remove comments from normalized queries. It&#xA;                         can be useful if you want to distinguish between&#xA;                         same normalized queries.&#xA;--no-progressbar       : disable progressbar.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pgBadger is able to parse a remote log file using a passwordless ssh connection. Use the -r or --remote-host to set the host ip address or hostname. There&#39;s also some additional options to fully control the ssh connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--ssh-program ssh        path to the ssh program to use. Default: ssh.&#xA;--ssh-port port          ssh port to use for the connection. Default: 22.&#xA;--ssh-user username      connection login name. Default to running user.&#xA;--ssh-identity file      path to the identity file to use.&#xA;--ssh-timeout second     timeout to ssh connection failure. Default 10 secs.&#xA;--ssh-option  options    list of -o options to use for the ssh connection.&#xA;                         Options always used:&#xA;                             -o ConnectTimeout=$ssh_timeout&#xA;                             -o PreferredAuthentications=hostbased,publickey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log file to parse can also be specified using an URI, supported protocol are http[s] and [s]ftp. The curl command will be used to download the file and the file will be parsed during download. The ssh protocol is also supported and will use the ssh command like with the remote host use. See examples bellow.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger /var/log/postgresql.log&#xA;pgbadger /var/log/postgres.log.2.gz /var/log/postgres.log.1.gz /var/log/postgres.log&#xA;pgbadger /var/log/postgresql/postgresql-2012-05-*&#xA;pgbadger --exclude-query=&#34;^(COPY|COMMIT)&#34; /var/log/postgresql.log&#xA;pgbadger -b &#34;2012-06-25 10:56:11&#34; -e &#34;2012-06-25 10:59:11&#34; /var/log/postgresql.log&#xA;cat /var/log/postgres.log | pgbadger -&#xA;# Log prefix with stderr log output&#xA;pgbadger --prefix &#39;%t [%p]: user=%u,db=%d,client=%h&#39; /pglog/postgresql-2012-08-21*&#xA;pgbadger --prefix &#39;%m %u@%d %p %r %a : &#39; /pglog/postgresql.log&#xA;# Log line prefix with syslog log output&#xA;pgbadger --prefix &#39;user=%u,db=%d,client=%h,appname=%a&#39; /pglog/postgresql-2012-08-21*&#xA;# Use my 8 CPUs to parse my 10GB file faster, much faster&#xA;pgbadger -j 8 /pglog/postgresql-10.1-main.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use URI notation for remote log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger http://172.12.110.1//var/log/postgresql/postgresql-10.1-main.log&#xA;pgbadger ftp://username@172.12.110.14/postgresql-10.1-main.log&#xA;pgbadger ssh://username@172.12.110.14:2222//var/log/postgresql/postgresql-10.1-main.log*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use together a local PostgreSQL log and a remote pgbouncer log file to parse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger /var/log/postgresql/postgresql-10.1-main.log ssh://username@172.12.110.14/pgbouncer.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate Tsung sessions XML file with select queries only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -S -o sessions.tsung --prefix &#39;%t [%p]: user=%u,db=%d &#39; /pglog/postgresql-10.1.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reporting errors every week by cron job:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;30 23 * * 1 /usr/bin/pgbadger -q -w /var/log/postgresql.log -o /var/reports/pg_errors.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate report every week using incremental behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 4 * * 1 /usr/bin/pgbadger -q `find /var/log/ -mtime -7 -name &#34;postgresql.log*&#34;` -o /var/reports/pg_errors-`date +\%F`.html -l /var/reports/pgbadger_incremental_file.dat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This supposes that your log file and HTML report are also rotated every week.&lt;/p&gt; &#xA;&lt;p&gt;Or better, use the auto-generated incremental reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 4 * * * /usr/bin/pgbadger -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will generate a report per day and per week.&lt;/p&gt; &#xA;&lt;p&gt;In incremental mode, you can also specify the number of week to keep in the reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/bin/pgbadger --retention 2 -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a pg_dump at 23:00 and 13:00 each day during half an hour, you can use pgBadger as follow to exclude these period from the report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --exclude-time &#34;2013-09-.* (23|13):.*&#34; postgresql.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will help avoid having COPY statements, as generated by pg_dump, on top of the list of slowest queries. You can also use --exclude-appname &#34;pg_dump&#34; to solve this problem in a simpler way.&lt;/p&gt; &#xA;&lt;p&gt;You can also parse journalctl output just as if it was a log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --journalctl &#39;journalctl -u postgresql-9.5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or worst, call it from a remote host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -r 192.168.1.159 --journalctl &#39;journalctl -u postgresql-9.5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you don&#39;t need to specify any log file at command line, but if you have other PostgreSQL log file to parse, you can add them as usual.&lt;/p&gt; &#xA;&lt;p&gt;To rebuild all incremental html reports after, proceed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm /path/to/reports/*.js&#xA;rm /path/to/reports/*.css&#xA;pgbadger -X -I -O /path/to/reports/ --rebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will also update all resource files (JS and CSS). Use -E or --explode if the reports were built using this option.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger also support Heroku PostgreSQL logs using logplex format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;heroku logs -p postgres | pgbadger -f logplex -o heroku.html -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will stream Heroku PostgreSQL log to pgbadger through stdin.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger can auto detect RDS and cloudwatch PostgreSQL logs using rds format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -f rds -o rds_out.html rds.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CloudSQL Postgresql logs it&#39;s fairly normal PostgreSQL log but encapsulated in JSON format. It is auto detected too by pgBagder but in case you need to force the log format, use `jsonlog`&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -f jsonlog -o cloudsql_out.html cloudsql.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the same than with the jsonlog extension, the json format is different but pgBadger can parse both format.&lt;/p&gt; &#xA;&lt;p&gt;To create a cumulative report over a month use command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --month-report 2919-05 /path/to/incremental/reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will add a link to the month name into the calendar view in incremental reports to look at report for month 2019 May. Use -E or --explode if the reports were built using this option.&lt;/p&gt; &#xA;&lt;h3&gt;DESCRIPTION&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger is a PostgreSQL log analyzer built for speed providing fully detailed reports based on your PostgreSQL log files. It&#39;s a small standalone Perl script that outperforms any other PostgreSQL log analyzer.&lt;/p&gt; &#xA;&lt;p&gt;It is written in pure Perl and uses a JavaScript library (flotr2) to draw graphs so that you don&#39;t need to install any additional Perl modules or other packages. Furthermore, this library gives us more features such as zooming. pgBadger also uses the Bootstrap JavaScript library and the FontAwesome webfont for better design. Everything is embedded.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger is able to autodetect your log file format (syslog, stderr, csvlog or jsonlog) if the file is long enough. It is designed to parse huge log files as well as compressed files. Supported compressed format are gzip, bzip2, lz4, xz, zip and zstd. For the xz format you must have an xz version upper than 5.05 that supports the --robot option. In order pgbadger determine uncompressed file size with lz4, file must be compressed with --content-size option. For the complete list of features see below.&lt;/p&gt; &#xA;&lt;p&gt;All charts are zoomable and can be saved as PNG images.&lt;/p&gt; &#xA;&lt;p&gt;You can also limit pgBadger to only report errors or remove any part of the report using command line options.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger supports any custom format set into the log_line_prefix directive of your postgresql.conf file as long as it at least specify the %t and %p patterns.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger allows parallel processing of a single log file or multiple files through the use of the -j option specifying the number of CPUs.&lt;/p&gt; &#xA;&lt;p&gt;If you want to save system performance you can also use log_duration instead of log_min_duration_statement to have reports on duration and number of queries only.&lt;/p&gt; &#xA;&lt;h3&gt;FEATURE&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger reports everything about your SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Overall statistics.&#xA;    The most frequent waiting queries.&#xA;    Queries that waited the most.&#xA;    Queries generating the most temporary files.&#xA;    Queries generating the largest temporary files.&#xA;    The slowest queries.&#xA;    Queries that took up the most time.&#xA;    The most frequent queries.&#xA;    The most frequent errors.&#xA;    Histogram of query times.&#xA;    Histogram of sessions times.&#xA;    Users involved in top queries.&#xA;    Applications involved in top queries.&#xA;    Queries generating the most cancellation.&#xA;    Queries most cancelled.&#xA;    The most time consuming prepare/bind queries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following reports are also available with hourly charts divided into periods of five minutes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    SQL queries statistics.&#xA;    Temporary file statistics.&#xA;    Checkpoints statistics.&#xA;    Autovacuum and autoanalyze statistics.&#xA;    Cancelled queries.&#xA;    Error events (panic, fatal, error and warning).&#xA;    Error class distribution.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also some pie charts about distribution of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Locks statistics.&#xA;    Queries by type (select/insert/update/delete).&#xA;    Distribution of queries type per database/application&#xA;    Sessions per database/user/client/application.&#xA;    Connections per database/user/client/application.&#xA;    Autovacuum and autoanalyze per table.&#xA;    Queries per user and total duration per user.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All charts are zoomable and can be saved as PNG images. SQL queries reported are highlighted and beautified automatically.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger is also able to parse PgBouncer log files and to create the following reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Request Throughput&#xA;    Bytes I/O Throughput&#xA;    Queries Average duration&#xA;    Simultaneous sessions&#xA;    Histogram of sessions times&#xA;    Sessions per database&#xA;    Sessions per user&#xA;    Sessions per host&#xA;    Established connections&#xA;    Connections per database&#xA;    Connections per user&#xA;    Connections per host&#xA;    Most used reserved pools&#xA;    Most Frequent Errors/Events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also have incremental reports with one report per day and a cumulative report per week. Two multiprocess modes are available to speed up log parsing, one using one core per log file, and the second using multiple cores to parse a single file. These modes can be combined.&lt;/p&gt; &#xA;&lt;p&gt;Histogram granularity can be adjusted using the -A command line option. By default they will report the mean of each top queries/errors occurring per hour, but you can specify the granularity down to the minute.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger can also be used in a central place to parse remote log files using a passwordless SSH connection. This mode can be used with compressed files and in the multiprocess per file mode (-J) but can not be used with the CSV log format.&lt;/p&gt; &#xA;&lt;h3&gt;REQUIREMENT&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger comes as a single Perl script - you do not need anything other than a modern Perl distribution. Charts are rendered using a JavaScript library so you don&#39;t need anything other than a web browser. Your browser will do all the work.&lt;/p&gt; &#xA;&lt;p&gt;If you planned to parse PostgreSQL CSV log files you might need some Perl Modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Text::CSV_XS - to parse PostgreSQL CSV log files.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module is optional, if you don&#39;t have PostgreSQL log in the CSV format you don&#39;t need to install it.&lt;/p&gt; &#xA;&lt;p&gt;If you want to export statistics as JSON file you need an additional Perl module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    JSON::XS - JSON serialising/deserialising, done correctly and fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module is optional, if you don&#39;t select the json output format you don&#39;t need to install it. You can install it on a Debian like system using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    sudo apt-get install libjson-xs-perl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and in RPM like system using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    sudo yum install perl-JSON-XS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compressed log file format is autodetected from the file extension. If pgBadger find a gz extension it will use the zcat utility, with a bz2 extension it will use bzcat, with lz4 it will use lz4cat, with zst it will use zstdcat and if the file extension is zip or xz then the unzip or xz utilities will be used.&lt;/p&gt; &#xA;&lt;p&gt;If those utilities are not found in the PATH environment variable then use the --zcat command line option to change this path. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    --zcat=&#34;/usr/local/bin/gunzip -c&#34; or --zcat=&#34;/usr/local/bin/bzip2 -dc&#34;&#xA;    --zcat=&#34;C:\tools\unzip -p&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default pgBadger will use the zcat, bzcat, lz4cat, zstdcat and unzip utilities following the file extension. If you use the default autodetection compress format you can mixed gz, bz2, lz4, xz, zip or zstd files. Specifying a custom value to --zcat option will remove this feature of mixed compressed format.&lt;/p&gt; &#xA;&lt;p&gt;Note that multiprocessing can not be used with compressed files or CSV files as well as under Windows platform.&lt;/p&gt; &#xA;&lt;h3&gt;INSTALLATION&lt;/h3&gt; &#xA;&lt;p&gt;Download the tarball from GitHub and unpack the archive as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    tar xzf pgbadger-11.x.tar.gz&#xA;    cd pgbadger-11.x/&#xA;    perl Makefile.PL&#xA;    make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will copy the Perl script pgbadger to /usr/local/bin/pgbadger by default and the man page into /usr/local/share/man/man1/pgbadger.1. Those are the default installation directories for &#39;site&#39; install.&lt;/p&gt; &#xA;&lt;p&gt;If you want to install all under /usr/ location, use INSTALLDIRS=&#39;perl&#39; as an argument of Makefile.PL. The script will be installed into /usr/bin/pgbadger and the manpage into /usr/share/man/man1/pgbadger.1.&lt;/p&gt; &#xA;&lt;p&gt;For example, to install everything just like Debian does, proceed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    perl Makefile.PL INSTALLDIRS=vendor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default INSTALLDIRS is set to site.&lt;/p&gt; &#xA;&lt;h3&gt;POSTGRESQL CONFIGURATION&lt;/h3&gt; &#xA;&lt;p&gt;You must enable and set some configuration directives in your postgresql.conf before starting.&lt;/p&gt; &#xA;&lt;p&gt;You must first enable SQL query logging to have something to parse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_min_duration_statement = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here every statement will be logged, on a busy server you may want to increase this value to only log queries with a longer duration. Note that if you have log_statement set to &#39;all&#39; nothing will be logged through the log_min_duration_statement directive. See the next chapter for more information.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger supports any custom format set into the log_line_prefix directive of your postgresql.conf file as long as it at least specify a time escape sequence (%t, %m or %n) and the process related escape sequence (%p or %c).&lt;/p&gt; &#xA;&lt;p&gt;For example, with &#39;stderr&#39; log format, log_line_prefix must be at least:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;%t [%p]: &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log line prefix could add user, database name, application name and client ip address as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;%t [%p]: user=%u,db=%d,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for syslog log file format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;user=%u,db=%d,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log line prefix for stderr output could also be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;%t [%p]: db=%d,user=%u,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for syslog output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;db=%d,user=%u,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to enable other parameters in postgresql.conf to get more information from your log files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_checkpoints = on&#xA;    log_connections = on&#xA;    log_disconnections = on&#xA;    log_lock_waits = on&#xA;    log_temp_files = 0&#xA;    log_autovacuum_min_duration = 0&#xA;    log_error_verbosity = default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do not enable log_statement as its log format will not be parsed by pgBadger.&lt;/p&gt; &#xA;&lt;p&gt;Of course your log messages should be in English with or without locale support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    lc_messages=&#39;en_US.UTF-8&#39;&#xA;    lc_messages=&#39;C&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pgBadger parser do not support other locale like &#39;fr_FR.UTF-8&#39; for example.&lt;/p&gt; &#xA;&lt;h3&gt;LOG STATEMENTS&lt;/h3&gt; &#xA;&lt;p&gt;Considerations about log_min_duration_statement, log_duration and log_statement configuration directives.&lt;/p&gt; &#xA;&lt;p&gt;If you want the query statistics to include the actual query strings, you must set log_min_duration_statement to 0 or more milliseconds.&lt;/p&gt; &#xA;&lt;p&gt;If you just want to report duration and number of queries and don&#39;t want all details about queries, set log_min_duration_statement to -1 to disable it and enable log_duration in your postgresql.conf file. If you want to add the most common request report you can either choose to set log_min_duration_statement to a higher value or choose to enable log_statement.&lt;/p&gt; &#xA;&lt;p&gt;Enabling log_min_duration_statement will add reports about slowest queries and queries that took up the most time. Take care that if you have log_statement set to &#39;all&#39; nothing will be logged with log_min_duration_statement.&lt;/p&gt; &#xA;&lt;p&gt;Warning: Do not enable both log_min_duration_statement, log_duration and log_statement all together, this will result in wrong counter values. Note that this will also increase drastically the size of your log. log_min_duration_statement should always be preferred.&lt;/p&gt; &#xA;&lt;h3&gt;PARALLEL PROCESSING&lt;/h3&gt; &#xA;&lt;p&gt;To enable parallel processing you just have to use the -j N option where N is the number of cores you want to use.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger will then proceed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    for each log file&#xA;        chunk size = int(file size / N)&#xA;        look at start/end offsets of these chunks&#xA;        fork N processes and seek to the start offset of each chunk&#xA;            each process will terminate when the parser reach the end offset&#xA;            of its chunk&#xA;            each process write stats into a binary temporary file&#xA;        wait for all children processes to terminate&#xA;    All binary temporary files generated will then be read and loaded into&#xA;    memory to build the html output.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With that method, at start/end of chunks pgBadger may truncate or omit a maximum of N queries per log file which is an insignificant gap if you have millions of queries in your log file. The chance that the query that you were looking for is lost is near 0, this is why I think this gap is livable. Most of the time the query is counted twice but truncated.&lt;/p&gt; &#xA;&lt;p&gt;When you have many small log files and many CPUs it is speedier to dedicate one core to one log file at a time. To enable this behavior you have to use option -J N instead. With 200 log files of 10MB each the use of the -J option starts being really interesting with 8 Cores. Using this method you will be sure not to lose any queries in the reports.&lt;/p&gt; &#xA;&lt;p&gt;Here is a benchmark done on a server with 8 CPUs and a single file of 9.5GB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     Option |  1 CPU  | 2 CPU | 4 CPU | 8 CPU&#xA;    --------+---------+-------+-------+------&#xA;       -j   | 1h41m18 | 50m25 | 25m39 | 15m58&#xA;       -J   | 1h41m18 | 54m28 | 41m16 | 34m45&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With 200 log files of 10MB each, so 2GB in total, the results are slightly different:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     Option | 1 CPU | 2 CPU | 4 CPU | 8 CPU&#xA;    --------+-------+-------+-------+------&#xA;       -j   | 20m15 |  9m56 |  5m20 | 4m20&#xA;       -J   | 20m15 |  9m49 |  5m00 | 2m40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So it is recommended to use -j unless you have hundreds of small log files and can use at least 8 CPUs.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT: when you are using parallel parsing pgBadger will generate a lot of temporary files in the /tmp directory and will remove them at the end, so do not remove those files unless pgBadger is not running. They are all named with the following template tmp_pgbadgerXXXX.bin so they can be easily identified.&lt;/p&gt; &#xA;&lt;h3&gt;INCREMENTAL REPORTS&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger includes an automatic incremental report mode using option -I or --incremental. When running in this mode, pgBadger will generate one report per day and a cumulative report per week. Output is first done in binary format into the mandatory output directory (see option -O or --outdir), then in HTML format for daily and weekly reports with a main index file.&lt;/p&gt; &#xA;&lt;p&gt;The main index file will show a dropdown menu per week with a link to each week report and links to daily reports of each week.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you run pgBadger as follows based on a daily rotated file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 4 * * * /usr/bin/pgbadger -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you will have all daily and weekly reports for the full running period.&lt;/p&gt; &#xA;&lt;p&gt;In this mode pgBadger will create an automatic incremental file in the output directory, so you don&#39;t have to use the -l option unless you want to change the path of that file. This means that you can run pgBadger in this mode each day on a log file rotated each week, and it will not count the log entries twice.&lt;/p&gt; &#xA;&lt;p&gt;To save disk space you may want to use the -X or --extra-files command line option to force pgBadger to write JavaScript and CSS to separate files in the output directory. The resources will then be loaded using script and link tags.&lt;/p&gt; &#xA;&lt;h4&gt;Rebuilding reports&lt;/h4&gt; &#xA;&lt;p&gt;Incremental reports can be rebuilt after a pgbadger report fix or a new feature to update all HTML reports. To rebuild all reports where a binary file is still present proceed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm /path/to/reports/*.js&#xA;rm /path/to/reports/*.css&#xA;pgbadger -X -I -O /path/to/reports/ --rebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will also update all resource files (JS and CSS). Use -E or --explode if the reports were built using this option.&lt;/p&gt; &#xA;&lt;h4&gt;Monthly reports&lt;/h4&gt; &#xA;&lt;p&gt;By default pgBadger in incremental mode only computes daily and weekly reports. If you want monthly cumulative reports you will have to use a separate command to specify the report to build. For example to build a report for August 2019:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -X --month-report 2919-08 /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will add a link to the month name into the calendar view of incremental reports to look at monthly report. The report for a current month can be run every day it is entirely rebuilt each time. The monthly report is not built by default because it could take lot of time following the amount of data.&lt;/p&gt; &#xA;&lt;p&gt;If reports were built with the per database option ( -E | --explode ) it must be used too when calling pgbadger to build monthly report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -E -X --month-report 2919-08 /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the same when using the rebuild option ( -R | --rebuild ).&lt;/p&gt; &#xA;&lt;h3&gt;BINARY FORMAT&lt;/h3&gt; &#xA;&lt;p&gt;Using the binary format it is possible to create custom incremental and cumulative reports. For example, if you want to refresh a pgBadger report each hour from a daily PostgreSQL log file, you can proceed by running each hour the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --last-parsed .pgbadger_last_state_file -o sunday/hourX.bin /var/log/pgsql/postgresql-Sun.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to generate the incremental data files in binary format. And to generate the fresh HTML report from that binary file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger sunday/*.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or as another example, if you generate one log file per hour and you want reports to be rebuilt each time the log file is rotated, proceed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    pgbadger -o day1/hour01.bin /var/log/pgsql/pglog/postgresql-2012-03-23_10.log&#xA;    pgbadger -o day1/hour02.bin /var/log/pgsql/pglog/postgresql-2012-03-23_11.log&#xA;    pgbadger -o day1/hour03.bin /var/log/pgsql/pglog/postgresql-2012-03-23_12.log&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to refresh the HTML report, for example each time after a new binary file is generated, just do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    pgbadger -o day1_report.html day1/*.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust the commands to suit your particular needs.&lt;/p&gt; &#xA;&lt;h3&gt;JSON FORMAT&lt;/h3&gt; &#xA;&lt;p&gt;JSON format is good for sharing data with other languages, which makes it easy to integrate pgBadger result into other monitoring tools like Cacti or Graphite.&lt;/p&gt; &#xA;&lt;h3&gt;AUTHORS&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger is an original work from Gilles Darold.&lt;/p&gt; &#xA;&lt;p&gt;The pgBadger logo is an original creation of Damien Cazeils.&lt;/p&gt; &#xA;&lt;p&gt;The pgBadger v4.x design comes from the &#34;Art is code&#34; company.&lt;/p&gt; &#xA;&lt;p&gt;This web site is a work of Gilles Darold.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger is maintained by Gilles Darold and every one who wants to contribute.&lt;/p&gt; &#xA;&lt;p&gt;Many people have contributed to pgBadger, they are all quoted in the Changelog file.&lt;/p&gt; &#xA;&lt;h3&gt;LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger is free software distributed under the PostgreSQL Licence.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2022, Gilles Darold&lt;/p&gt; &#xA;&lt;p&gt;A modified version of the SQL::Beautify Perl Module is embedded in pgBadger with copyright (C) 2009 by Jonas Kramer and is published under the terms of the Artistic License 2.0.&lt;/p&gt;</summary>
  </entry>
</feed>