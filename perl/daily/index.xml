<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-15T01:39:50Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>binary-com/perl-Log-Any-Adapter-DERIV</title>
    <updated>2023-05-15T01:39:50Z</updated>
    <id>tag:github.com,2023-05-15:/binary-com/perl-Log-Any-Adapter-DERIV</id>
    <link href="https://github.com/binary-com/perl-Log-Any-Adapter-DERIV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standardised logging adapter for company&#39;s Perl code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Log::Any::Adapter::DERIV - standardised logging to STDERR and JSON file&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.circleci.com/pipelines/github/binary-com/perl-Log-Any-Adapter-DERIV&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/binary-com/perl-Log-Any-Adapter-DERIV.svg?style=shield&amp;amp;circle-token=bed2af8f8e388746eafbbf905cf6990f84dbd69e&#34; alt=&#34;Test status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Log::Any;&#xA;&#xA;# print text log to STDERR, json format when inside docker container,&#xA;# colored text format when STDERR is a tty, non-colored text format when&#xA;# STDERR is redirected.&#xA;use Log::Any::Adapter (&#39;DERIV&#39;);&#xA;&#xA;#specify STDERR directly&#xA;use Log::Any::Adapter (&#39;DERIV&#39;, stderr =&amp;gt; 1)&#xA;&#xA;#specify STDERR&#39;s format&#xA;use Log::Any::Adapter (&#39;DERIV&#39;, stderr =&amp;gt; &#39;json&#39;)&#xA;&#xA;#specify the json log name&#xA;use Log::Any::Adapter (&#39;DERIV&#39;, json_log_file =&amp;gt; &#39;/var/log/program.json.log&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;Applies some opinionated log handling rules for &lt;a href=&#34;https://metacpan.org/pod/Log%3A%3AAny&#34;&gt;Log::Any&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is extremely invasive&lt;/strong&gt;. It does the following, affecting global state in various ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;applies UTF-8 encoding to STDERR&lt;/li&gt; &#xA; &lt;li&gt;writes to a &lt;code&gt;.json.log&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;overrides the default &lt;a href=&#34;https://metacpan.org/pod/Log%3A%3AAny%3A%3AProxy&#34;&gt;Log::Any::Proxy&lt;/a&gt; formatter to provide data as JSON&lt;/li&gt; &#xA; &lt;li&gt;when stringifying, may replace some problematic objects with simplified versions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example of the string-replacement approach would be the event loop in asynchronous code: it&#39;s likely to have many components attached to it, and dumping that would effectively end up dumping the entire tree of useful objects in the process. This is a planned future extension, not currently implemented.&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;This is provided as a CPAN module as an example for dealing with multiple outputs and formatting. The existing &lt;a href=&#34;https://metacpan.org/pod/Log%3A%3AAny%3A%3AAdapter&#34;&gt;Log::Any::Adapter&lt;/a&gt; modules tend to cover one thing, and it&#39;s not immediately obvious how to extend formatting, or send data to multiple logging mechanisms at once.&lt;/p&gt; &#xA;&lt;p&gt;Although the module may not be directly useful, it is hoped that other teams may find parts of the code useful for their own logging requirements.&lt;/p&gt; &#xA;&lt;p&gt;There is a public repository on Github, anyone is welcome to fork that and implement their own version or make feature/bug fix suggestions if they seem generally useful:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/binary-com/perl-Log-Any-Adapter-DERIV&#34;&gt;https://github.com/binary-com/perl-Log-Any-Adapter-DERIV&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;PARAMETERS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;json_log_file&lt;/p&gt; &lt;p&gt;Specify a file name to which you want the json formatted logs printed into. If not given, then it prints the logs to STDERR.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;STDERR&lt;/p&gt; &lt;p&gt;If it is true, then print logs to STDERR&lt;/p&gt; &lt;p&gt;If the value is json or text, then print logs with that format&lt;/p&gt; &lt;p&gt;If the value is just a true value other than `json` or `text`, then if it is running in a container, then it prints the logs in `json` format. Else if STDERR is a tty, then it prints `colored text` format. Else it prints non-color text format.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If no parameters provided, then default `stderr =&amp;gt; 1`;&lt;/p&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;h2&gt;apply_filehandle_utf8&lt;/h2&gt; &#xA;&lt;p&gt;Applies UTF-8 to filehandle if it is not utf-flavoured already&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$object-&amp;gt;apply_filehandle_utf8($fh);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$fh&lt;/code&gt; file handle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;format_line&lt;/h2&gt; &#xA;&lt;p&gt;Formatting the log entry with timestamp, from which the message populated, severity and message.&lt;/p&gt; &#xA;&lt;p&gt;If color/colour param passed it adds appropriate color code for timestamp, log level, from which this log message populated and actual message. For non-color mode, it just returns the formatted message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$object-&amp;gt;format_line($data, {color =&amp;gt; $color});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$data&lt;/code&gt; hashref - The data with stack info like package method from which the message populated, timestamp, severity and message&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$opts&lt;/code&gt; hashref - the options color&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns only formatted string if non-color mode. Otherwise returns formatted string with embedded ANSI color code using &lt;a href=&#34;https://metacpan.org/pod/Term%3A%3AANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;log_entry&lt;/h2&gt; &#xA;&lt;p&gt;Add format and add color code using &lt;code&gt;format_line&lt;/code&gt; and writes the log entry&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$object-&amp;gt;log_entry($data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;*&lt;code&gt;$data&lt;/code&gt; hashref - The log data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;_process_data&lt;/h2&gt; &#xA;&lt;p&gt;Process the data before printing out. Reduce the continues &lt;a href=&#34;https://metacpan.org/pod/Future&#34;&gt;Future&lt;/a&gt; stack messages and filter the messages based on log level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$object-&amp;gt;_process_data($data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$data&lt;/code&gt; hashref - The log data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns a hashref - the processed data&lt;/p&gt; &#xA;&lt;h2&gt;_filter_stack&lt;/h2&gt; &#xA;&lt;p&gt;Filter the stack message based on log level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$object-&amp;gt;_filter_stack($data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$data&lt;/code&gt; hashref - Log stack data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns hashref - the filtered data&lt;/p&gt; &#xA;&lt;h2&gt;_collapse_future_stack&lt;/h2&gt; &#xA;&lt;p&gt;Go through the caller stack and if continuous &lt;a href=&#34;https://metacpan.org/pod/Future&#34;&gt;Future&lt;/a&gt; messages then keep only one at the first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$object-&amp;gt;_collapse_future_stack($data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$data&lt;/code&gt; hashref - Log stack data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns a hashref - the reduced log data&lt;/p&gt; &#xA;&lt;h2&gt;_fh_is_tty&lt;/h2&gt; &#xA;&lt;p&gt;Check the filehandle opened to tty&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$fh&lt;/code&gt; file handle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns boolean&lt;/p&gt; &#xA;&lt;h2&gt;_in_container&lt;/h2&gt; &#xA;&lt;p&gt;Returns true if we think we are currently running in a container.&lt;/p&gt; &#xA;&lt;p&gt;At the moment this only looks for a &lt;code&gt;.dockerenv&lt;/code&gt; file in the root directory; future versions may expand this to provide a more accurate check covering other container systems such as `runc`.&lt;/p&gt; &#xA;&lt;p&gt;Returns boolean&lt;/p&gt; &#xA;&lt;h2&gt;_linux_flock_data&lt;/h2&gt; &#xA;&lt;p&gt;Based on the type of lock requested, it packs into linux binary flock structure and return the string of that structure.&lt;/p&gt; &#xA;&lt;p&gt;Linux struct flock: &#34;s s l l i&#34; short l_type short - Possible values: F_RDLCK(0) - read lock, F_WRLCK(1) - write lock, F_UNLCK(2) - unlock short l_whence - starting offset off_t l_start - relative offset off_t l_len - number of consecutive bytes to lock pid_t l_pid - process ID&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$type&lt;/code&gt; integer lock type - F_WRLCK or F_UNLCK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns a string of the linux flock structure&lt;/p&gt; &#xA;&lt;h2&gt;_flock&lt;/h2&gt; &#xA;&lt;p&gt;call fcntl to lock or unlock a file handle&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$fh&lt;/code&gt; file handle&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$type&lt;/code&gt; lock type, either F_WRLCK or F_UNLCK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns boolean or undef&lt;/p&gt; &#xA;&lt;h2&gt;_lock&lt;/h2&gt; &#xA;&lt;p&gt;Lock a file handler with fcntl.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$fh&lt;/code&gt; File handle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns boolean&lt;/p&gt; &#xA;&lt;h2&gt;_unlock&lt;/h2&gt; &#xA;&lt;p&gt;Unlock a file handler locked by fcntl&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$fh&lt;/code&gt; File handle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns boolean&lt;/p&gt; &#xA;&lt;h2&gt;level&lt;/h2&gt; &#xA;&lt;p&gt;Return the current log level name.&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;Deriv Group Services Ltd. &lt;code&gt;DERIV@cpan.org&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;Copyright Deriv Group Services Ltd 2020-2021. Licensed under the same terms as Perl itself.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gmarler/dzil</title>
    <updated>2023-05-15T01:39:50Z</updated>
    <id>tag:github.com,2023-05-15:/gmarler/dzil</id>
    <link href="https://github.com/gmarler/dzil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My Dist::Zilla profile(s)&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>