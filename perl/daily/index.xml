<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-09T01:44:23Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>akotlar/bystro</title>
    <updated>2023-05-09T01:44:23Z</updated>
    <id>tag:github.com,2023-05-09:/akotlar/bystro</id>
    <link href="https://github.com/akotlar/bystro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bystro genetic analysis (annotation, filtering, statistics)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bystro &lt;a href=&#34;https://zenodo.org/badge/latestdoi/98203430&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/98203430.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codacy.com/app/akotlar/bystro?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=akotlar/bystro&amp;amp;utm_campaign=badger&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/0859a24d422a4d80a2ad6721e294aa35&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Bystro Publication&lt;/h2&gt; &#xA;&lt;p&gt;For datasets and scripts used, please visit &lt;a href=&#34;https://github.com/akotlar/bystro-paper&#34;&gt;github.com/bystro-paper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If using Bystro, please cite &lt;a href=&#34;https://doi.org/10.1186/s13059-018-1387-3&#34;&gt;Kotlar et al, Genome Biology, 2018&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Web Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Start here: &lt;a href=&#34;https://raw.githubusercontent.com/akotlar/bystro/b10/TUTORIAL.md&#34;&gt;TUTORIAL.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For most users, we recommend &lt;a href=&#34;https://bystro.io&#34;&gt;https://bystro.io&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;The web app gives full access to all of Bystro&#39;s capabilities, provides a convenient search/filtering interface, supports large data sets (tested up to 890GB uncompressed/129GB compressed), and has excellent performance.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Bystro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Check out the master branch for the upcoming release&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The easiest way is to run from Docker: &lt;code&gt;docker pull akotlar/bystro:latest &amp;amp;&amp;amp; docker run bystro:latest bystro-annotate.pl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please read: &lt;a href=&#34;https://raw.githubusercontent.com/akotlar/bystro/b10/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt; for instructions on how to download and use Bystro hg19/hg38/etc databases.&lt;/p&gt; &#xA;&lt;p&gt;Bystro relies on pluggable (via Bystro&#39;s YAML config) pre-processors to normalize variant inputs (&lt;strong&gt;dealing with VCF issues such as padding&lt;/strong&gt;), calculate whether a site is a transition or transversion, calculate sample maf, identify hets/homozygotes/missing samples, calculate heterozygosity, homozygosity, missingness, and more.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;VCF format: &lt;a href=&#34;https://github.com/akotlar/bystro-vcf&#34;&gt;Bystro-Vcf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SNP format: &lt;a href=&#34;https://github.com/akotlar/bystro-snp&#34;&gt;Bystro-SNP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create your own to support other formats!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Annotation (Output) Field Descriptions&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/akotlar/bystro/b10/FIELDS.md&#34;&gt;FIELDS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The Bystro configuration file&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The config file describes the state of both the database and the annotation. It&#39;s required for annotating or building&lt;/li&gt; &#xA; &lt;li&gt;It has several keys: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;tracks&lt;/code&gt;: The highest level organization for database values. Tracks have a &lt;code&gt;name&lt;/code&gt; property, which must be unique, and a &lt;code&gt;type&lt;/code&gt;, which must be one of:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;em&gt;sparse&lt;/em&gt;: Any bed file, or any file that can be mapped to chrom, chromStart, and chromEnd columns. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;This is used for dbSNP, and Clinvar records, but many files can be fit this format.&lt;/li&gt; &#xA;       &lt;li&gt;Mapping fields can be managed by the &lt;code&gt;fieldMap&lt;/code&gt; key&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;score&lt;/em&gt;: Accepts any wigFix file. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Used for phastCons, phyloP&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;cadd&lt;/em&gt;: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Accepts any CADD file, or Bystro&#39;s custom &#34;bed-like&#34; CADD file, which has 2 header lines, and chrom, chromStart, chromEnd columns, followed by standard CADD fields&lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;CADD format: &lt;a href=&#34;http://cadd.gs.washington.edu&#34;&gt;http://cadd.gs.washington.edu&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;em&gt;gene&lt;/em&gt;: A UCSC gene track field (ex: knownGene, refGene, sgdGene). &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;The &lt;code&gt;local_files&lt;/code&gt; for this are created using an &lt;code&gt;sql_statement&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Ex: &lt;code&gt;SELECT * FROM hg38.refGene LEFT JOIN hg38.kgXref ON hg38.kgXref.refseq = hg38.refGene.name&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;chromosomes&lt;/code&gt;: The allowable chromosomes.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Each row of every track must be identified by these chromosomes (during building)&lt;/li&gt; &#xA;     &lt;li&gt;Each row of any input file submitted for annotation must also be &#34;&#34; &#34;&#34; (during annotation)&lt;/li&gt; &#xA;     &lt;li&gt;However, Bystro is flexible about the &lt;strong&gt;chr&lt;/strong&gt; prefix&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Ex:&lt;/strong&gt; For the following config&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;chromosomes:&#xA;- chr1&#xA;- chr2&#xA;- chr3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Only chr1, chr2, and chr3 will be accepted. However, Bystro tries to make your life easy&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;We currently follow UCSC conventions for &lt;code&gt;chromosomes&lt;/code&gt;, meaning they should be prepended by &lt;strong&gt;chr&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Bystro will automatically append &lt;strong&gt;chr&lt;/strong&gt; to chromosomes read from an input file during annotation.&lt;/li&gt; &#xA;     &lt;li&gt;Bystro allows the transformation of any field during building, configurable in the YAML config file for that assembly, making it easy to prepend &lt;strong&gt;chr&lt;/strong&gt; to the source file chromosome field&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;p&gt;Ex: Clinvar doesn&#39;t have a &lt;strong&gt;chr&lt;/strong&gt; prefix, so during building we specify:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tracks:&#xA;  - name: clinvar&#xA;    build_field_transformations:&#xA;      chrom: chr .&#xA;    fieldMap:&#xA;      Chromosome: chrom&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here &lt;code&gt;fieldMap&lt;/code&gt; allows us to rename header fields, and &lt;code&gt;build_field_transformations&lt;/code&gt; allows us to define a prepend operation (&lt;code&gt;chr .&lt;/code&gt; can be interpreted as the perl command &lt;code&gt; &#34;chr&#34; . $chrom&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;So: input files do &lt;strong&gt;not&lt;/strong&gt; need to have their chromosomes prepended by &lt;strong&gt;chr&lt;/strong&gt;. Bystro will normalize the name.&lt;/p&gt; &lt;p&gt;In this example chromosomes &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;chr1&lt;/code&gt; will be built/annotated, but &lt;code&gt;1_rand&lt;/code&gt; will not.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Directories and Files&lt;/h3&gt; &#xA;&lt;p&gt;These describe where the Bystro database and any source files are located.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;files_dir&lt;/code&gt; : The parent folder within which each track&#39;s &lt;code&gt;local_files&lt;/code&gt; are located&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Bystro automatically checks for &lt;code&gt;local_files&lt;/code&gt; at &lt;code&gt;parent/trackName/file&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Ex:&lt;/strong&gt; For the config file containing&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;files_dir: /path/to/files/&#xA;track:&#xA;  - name: refSeq&#xA;    local_files:&#xA;      - hg19.refGene.chr1.gz&#xA;      # and more files&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Bystro will expect files in &lt;code&gt;/path/to/files/refSeq/hg19.refGene.chr1.gz&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;database_dir&lt;/code&gt; : Each database is held within &lt;code&gt;database_dir&lt;/code&gt;, in a folder of the name &lt;code&gt;assembly&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Ex:&lt;/strong&gt; For the config file containing&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;assembly: hg19&#xA;database_dir: /path/to/databases/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Bystro will look for the database &lt;code&gt;/path/to/databases/hg19&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>