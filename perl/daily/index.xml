<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-27T01:28:46Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shlomif/metaconfig</title>
    <updated>2024-04-27T01:28:46Z</updated>
    <id>tag:github.com,2024-04-27:/shlomif/metaconfig</id>
    <link href="https://github.com/shlomif/metaconfig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;metaconfig for perl&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;Jarkko&#39;s How to build Configure tweaked by Nick and Merijn.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Configure script and config_h.SH file in the Perl distribution are generated by a program called metaconfig. Metaconfig was originally written by Larry Wall, and was subsequently enhanced and maintained by Raphael Manfredi.&lt;/p&gt; &#xA;&lt;p&gt;You have presumably obtained the metaconfig from the repository e.g.&lt;/p&gt; &#xA;&lt;p&gt;$ git clone git://perl5.git.perl.org/metaconfig.git metaconfig&lt;/p&gt; &#xA;&lt;p&gt;or some other way to obtain this file, like a complete compressed archive from the previous pumpkin.&lt;/p&gt; &#xA;&lt;p&gt;Normally this directory and perl directory are next to each other so ../perl will get you to perl and ../perl/../metaconfig will get you back here.&lt;/p&gt; &#xA;&lt;p&gt;Contents of this directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;README:&#x9;This file.&#xA;U:&#x9;&#x9;Metaconfig units used for building Perl&#39;s Configure&#xA;U.check:&#x9;Sample directory used for testing new metaconfig units.&#xA;&#x9;&#x9;see U.check/README for more information.&#xA;dist-3.5-20:&#xA;&#x9;dist-3.5-20 is almost meta-4.0, still maintained by Raphael&#xA;&#x9;Manfredi, but with a lot of fixes over 3.0, some changes&#xA;&#x9;from the perl modifications merged and a much better&#xA;&#x9;metalint. This directory comes from a tar distribution.&#xA;dist-svn:&#xA;&#x9;a git clone of &#34;dist&#34;. Optionally present. See (a) below.&#xA;dist:&#xA;&#x9;a symlink to the lib you actually use. For Merijn that is&#xA;&#x9;metaconfig/dist -&amp;gt; ../lib/dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(a) You need to have dist installed so that you have metalint and metaconfig in your $PATH. The dist version used for perl is dist-3.5-20 in this directory, which is a slightly modified version of the original, which you can get at the SVN repository &lt;a href=&#34;https://dist.svn.sourceforge.net/svnroot/dist/trunk&#34;&gt;https://dist.svn.sourceforge.net/svnroot/dist/trunk&lt;/a&gt;. If you&#39;d like to keep up to date with changes in dist, you can either use svn or git to create your own clone. For git, that would be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git svn clone \&#xA;  svn://svn.code.sf.net/p/dist/code/trunk/dist \&#xA;  dist-svn&#xA;&#xA;Unsurprisingly &#39;dist&#39; uses (its) Configure to generate itself:&#xA;&#xA;$ cd dist-3.5-20&#x9;# or dist-svn&#xA;$ chmod -R +w .     # We have derived files in git :-(&#xA;$ ./Configure&#xA;$ make&#xA;$ make install&#xA;&#xA;After make install, remove lib/U/d_debugging.U in your target lib, as perl&#xA;uses its own way to set/define debugging (see INSTALL)&#xA;&#xA;the dist-3.5-20 installation as used by Merijn is available on his CPAN as&#xA;perl-meta-3.5-20.tgz&#xA;&#xA;dist&#39;s &#39;Configure&#39; is similar to perl&#39;s but perhaps not quite as polished.&#xA;&#xA;There are some perl specific &#34;dist units&#34; in the &#39;U&#39; directory.&#xA;The U directory also contains some patches to &#39;dist&#39; which have already&#xA;been applied to dist-3.5-20 directory.&#xA;We have not yet arranged for metaconfig to use perl&#39;s versions of the&#xA;&#39;units&#39; by default so you need some housekeeping in the perl directory...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(aa) -- optional --&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If you plan to make changes to metaconfig or metalint locally (and you&#xA;probably want to, as both are written for perl4), consider installing&#xA;mconfig and mlint from the cmon subdirectory into your $PATH too. These&#xA;are the non-autoloading versions and can easily be changed. Here is what&#xA;I added at the beginning of mconfig:&#xA;&#xA;--8&amp;lt;---&#xA;BEGIN { $ENV{LC_ALL} = &#34;C&#34;; }&#xA;chdir &#34;/pro/3gl/CPAN/perl&#34;;&#xA;{   my @Cc = qw( Configure config_h.SH );&#xA;system &#34;chown merijn @Cc&#34;;&#xA;chmod 0775, @Cc;&#xA;#-d &#34;merijn&#34; or mkdir &#34;merijn&#34;;&#xA;#system &#34;cp -f Configure config_h.SH Porting/Glossary Porting/config.sh merijn/&#34;;&#xA;system &#34;ls&#34;, &#34;-l&#34;, @Cc;&#xA;}&#xA;--&amp;gt;8---&#xA;&#xA;I also added the first two lines of that patch to mlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(b) You need to be in a/the Perl directory, i.e. either something from //depot/perl/... or one of its branches (e.g. Nick I-S is usually in //depot/perlio/...) and you need: 1) have a symlink to ../metaconfig/U called U 2) have a symlink to ../metaconfig/.package called .package 3) have a symlink to MANIFEST called MANIFEST.new 4) chmod +w Configure config_h.SH Porting/Glossary Porting/config*&lt;/p&gt; &#xA;&lt;p&gt;(c) Write the new unit as U/perl/d_bar.U (&#39;perl&#39; can also be &#39;modified&#39;, &#39;compline&#39; or any other existing folder, except for &#39;all&#39;). Choose the best appropriate subdir of U. See U/README for a description of the various subdirectories.)&lt;/p&gt; &#xA;&lt;p&gt;(d) Run metalint (or mlint) to see nits: as opposed to lint, the gripings of metalint are usually serious :-) and need fixing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Exceptions are lots of&#xA;  Your private U/modified/voidflags.U overrides the public one.&#xA;due to the perl special units&#xA;&#xA;an alias to something like&#xA;$ metalint      |&amp;amp; grep -v -e &#39;^    Your private U/&#39;&#xA;will make the process silence up on that (of course you can add an&#xA;option to mlint to disable that warning (which is already disabled&#xA;by the undocumented and forgotten -s option, but that also suppresses&#xA;other warnings)&#xA;&#xA;and&#xA;&#xA;&#34;End.U&#34;: stale ?MAKE: dependency &#39;$W&#39;.&#xA;&#xA;which is apparently normal ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-- the next steps are in the perl folder&lt;/p&gt; &#xA;&lt;p&gt;(e) chmod +w Configure config_h.SH&lt;/p&gt; &#xA;&lt;p&gt;(f) metaconfig -m to regenerate Configure (or mconfig -m)&lt;/p&gt; &#xA;&lt;p&gt;(g) metaconfig does not deal with depends in config_h.SH, so some reorganization is needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Porting/config_h.SH&#xA;&#xA;will fix the ordering&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(h) The messy not-yet-automated part is that the knowledge of the new symbol needs to be propagated to non-Configure lands like Win32, WinCE, Netware, VMS, VOS, EPOC, ... see previous Configure changes to see which are these heathen lands. Files to take care of are {win32,wince,NetWare}/config_[hH]&lt;em&gt;, (Win32, WinCE, NetWare), configure.com (VMS), VOS/config&lt;/em&gt; (since 5.9 VOS uses Configure, though), epoc/config.sh (EPOC). Depending on the kind of patch djgpp/config* might also need adjusting (for example when adding/changing the list of extensions)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;For Win32 the process is semi-automated - if you have a Win32&#xA;machine to run dmake on ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(i) Edit U/mkglossary (right near the top) to point to where you keep dist&#39;s standard metaconfig units as well as your perl-specific ones.&lt;/p&gt; &#xA;&lt;p&gt;(j) Run U/mksample to freshen the Porting/config* and Porting/Glossary. Adjust the various compile-time options (e.g. 64bit, threads) as you see fit. You can skip this phase, it&#39;s not essential, just good housekeeping.&lt;/p&gt; &#xA;&lt;p&gt;(k) Run the perl build chain&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make veryclean&#xA;sh ./Configure -des -Dusedevel&#xA;&#xA;The dependency for uconfig.h isn&#39;t carved in stone, so you might&#xA;need to regenerate it&#xA;&#xA;perl regen/uconfig_h.pl&#xA;&#xA;Then make and make test or make test_harness (with TEST_JOBS=5)&#xA;&#xA;make all test_harness&#xA;&#xA;Before you start committing, make sure that the other developers&#xA;are happy and run&#xA;&#xA;make test_porting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-- the next steps are in the metaconfig folder again&lt;/p&gt; &#xA;&lt;p&gt;(l) git add U/perl/foo/bar.U when you are ready ...&lt;/p&gt; &#xA;&lt;p&gt;(m) git commit -m &#34;Your commit description&#34;&lt;/p&gt; &#xA;&lt;p&gt;(n) When all patches are applied, tested and committed, and you are happy, git push&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Merijn prefers to do steps (l) through (n) in git-gui&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>