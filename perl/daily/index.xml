<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:35:35Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sillypog/silent-mutator</title>
    <updated>2022-09-25T01:35:35Z</updated>
    <id>tag:github.com,2022-09-25:/sillypog/silent-mutator</id>
    <link href="https://github.com/sillypog/silent-mutator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Perl script to detect potential silent mutation sites in DNA sequences.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#Silent Mutator This perl script is designed to look for sites in a DNA sequence which can be altered to either remove or introduce a restriction site without altering the translated sequence.&lt;/p&gt; &#xA;&lt;p&gt;The program can either be run as a single command or interactively. To run the program from the command line enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$silent_mutator.pl [OPTIONS]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the program interactively enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$silent_mutator.pl -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then follow the on screen instructions.&lt;/p&gt; &#xA;&lt;p&gt;Running the program without any options will prompt you to enter a sequence. This will then be analysed for silent mutations using the user&#39;s list of enzymes.&lt;/p&gt; &#xA;&lt;p&gt;##Options&lt;/p&gt; &#xA;&lt;p&gt;-b --biglist : Use all of the enzymes in the big list. Better than pDRAW32! -u --userlist : DEFAULT. Use only the enzymes in the user&#39;s list. -o --oneenzyme: Use only the specified enzyme, eg -o EcoRI.&lt;/p&gt; &#xA;&lt;p&gt;-v --view : View the enzymes in the user list. -a --add : Add an enzyme to the user list FOR THIS RUN ONLY. Add multiple enzymes by separating them with a space, eg -a FokI AhaII BcgI&lt;/p&gt; &#xA;&lt;p&gt;-j --justcut : No mutations, just a list of enzymes cutting at least once.&lt;/p&gt; &#xA;&lt;p&gt;-s --sequence : Enter the sequence IN FRAME, eg -s atgtgtagg.&lt;/p&gt; &#xA;&lt;p&gt;-h --help : Print out this usage statement. Again.&lt;/p&gt; &#xA;&lt;p&gt;##Output&lt;/p&gt; &#xA;&lt;p&gt;All of the output can be redirected to a file of your choice with &#39;&amp;gt;&#39;, eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$silent_mutator.pl -s atgttgtgatagatga &amp;gt; newfile.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output takes the form:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sequence broken into codons&lt;/li&gt; &#xA; &lt;li&gt;Translated codons&lt;/li&gt; &#xA; &lt;li&gt;Enzymes which cut and the recognition site&lt;/li&gt; &#xA; &lt;li&gt;One (or zero) examples of a removable site&lt;/li&gt; &#xA; &lt;li&gt;Potential silent mutations&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Regarding item 3, this list only includes the first site found for each enzyme. Multiple sites per enzyme are not listed. The sequence is shown with a break highlighting the bases recognised by each enzyme. It is important to note that some enzmyes do not cut at the site they recognise.&lt;/p&gt; &#xA;&lt;p&gt;Items 4 and 5 use the same &#39;break&#39; notation as item 3 to help identify the cut site.&lt;/p&gt; &#xA;&lt;p&gt;##License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;A copy of the license is include in license.txt.&lt;/p&gt; &#xA;&lt;p&gt;This license was chosen to encourage forks of the project to merge any updates or improvements.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jikuya/Geronimo</title>
    <updated>2022-09-25T01:35:35Z</updated>
    <id>tag:github.com,2022-09-25:/jikuya/Geronimo</id>
    <link href="https://github.com/jikuya/Geronimo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;##########################################################&lt;/p&gt; &#xA;&lt;h1&gt;Mac 環境構築&lt;/h1&gt; &#xA;&lt;p&gt;##########################################################&lt;/p&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;perlbrewインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ curl -LO &lt;a href=&#34;http://xrl.us/perlbrew&#34;&gt;http://xrl.us/perlbrew&lt;/a&gt; $ perl perlbrew install $ rm perlbrew $ ~/perl5/perlbrew/bin/perlbrew init $ echo &#39;source ~/perl5/perlbrew/etc/bashrc&#39; &amp;gt;&amp;gt; ~/.bashrc $ source ~/.bashrc $ which perlbrew $ perlbrew install-patchperl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;perl-5.16.1インストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ perlbrew available $ perlbrew install perl-5.16.1 $ perlbrew switch perl-5.16.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cpanmインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ perlbrew install-cpanm $ cpanm App::pmuninstall $ cpanm App::cpanoutdated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cartonインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ cpanm Carton $ cpanm Module::Install&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MySQLインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ ※&lt;a href=&#34;http://dev.mysql.com/downloads/mysql/%E3%80%80%E3%81%8B%E3%82%89MySQL%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%80%82&#34;&gt;http://dev.mysql.com/downloads/mysql/　からMySQLをダウンロード。&lt;/a&gt; 　メアドを登録しないといけない。 ※ダウンロードして展開し、以下をすべてインストール #インストーラー 「mysql-5.5.XX-osx10.6-x86_64.pkg」 「MySQLStartupItem.pkg」 #環境設定ファイル 「MySQL.prefPane」&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // Pathを環境変数に設定 // ---------------------------------------------- $ echo &#39;export PATH=&#34;/usr/local/mysql/bin/:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc $ echo &#39;export DYLD_LIBRARY_PATH=&#34;/usr/local/mysql/lib&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc $ source ~/.bashrc&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // パスワード設定 // ---------------------------------------------- ※ システム環境設定からMySQLを起動 $ mysqladmin -u root password &#39;root&#39; $ mysql -u root -p #パスワードを入力してMySQLにログイン $ mysql&amp;gt; exit&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // utf8対応 // ---------------------------------------------- $ cp /etc/my.cnf /etc/my.cnf.org $ sudo cp /usr/local/mysql/support-files/my-medium.cnf /etc/my.cnf $ sudo vi /etc/my.cnf&lt;/p&gt; &#xA;&lt;p&gt;[client] default-character-set = utf8&lt;/p&gt; &#xA;&lt;p&gt;[mysqld] default-character-set = utf8&lt;/p&gt; &#xA;&lt;p&gt;[mysqldump] default-character-set = utf8&lt;/p&gt; &#xA;&lt;p&gt;[mysql] default-character-set = utf8&lt;/p&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Geronimoインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ mkdir -p ~/perl5/app $ cd ~/perl5/app $ git clone &lt;a href=&#34;https://github.com/jikuya/Geronimo.git&#34;&gt;https://github.com/jikuya/Geronimo.git&lt;/a&gt; $ cd Geronimo $ carton install ※入らないモジュールがある場合は、ExtUtils-MakeMakerのバージョンを下げてみる ※例）carton install &lt;a href=&#34;http://search.cpan.org/CPAN/authors/id/M/MS/MSCHWERN/ExtUtils-MakeMaker-6.62.tar.gz&#34;&gt;http://search.cpan.org/CPAN/authors/id/M/MS/MSCHWERN/ExtUtils-MakeMaker-6.62.tar.gz&lt;/a&gt; ※入らないモジュールがある場合は、そのモジュールを一端、cpanmでインストールする ※例）cpanm モジュール名&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Geronimoアプリ起動 +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ carton exec -- plackup app.psgi&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;##########################################################&lt;/p&gt; &#xA;&lt;h1&gt;さくらVPS 環境構築&lt;/h1&gt; &#xA;&lt;p&gt;##########################################################&lt;/p&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;perlbrewインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ curl -LO &lt;a href=&#34;http://xrl.us/perlbrew&#34;&gt;http://xrl.us/perlbrew&lt;/a&gt; $ perl perlbrew install $ rm perlbrew $ ~/perl5/perlbrew/bin/perlbrew init $ echo &#39;source ~/perl5/perlbrew/etc/bashrc&#39; &amp;gt;&amp;gt; ~/.bashrc $ source ~/.bashrc $ which perlbrew $ perlbrew install-patchperl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;perl-5.16.1インストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ perlbrew available $ perlbrew install perl-5.16.1 $ perlbrew switch perl-5.16.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cpanmインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ perlbrew install-cpanm $ cpanm App::pmuninstall $ cpanm App::cpanoutdated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cartonインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ cpanm Carton $ cpanm Module::Install&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MySQLインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ // ---------------------------------------------- // cmakeインストール // ---------------------------------------------- $ cd ~ $ wget &lt;a href=&#34;http://www.cmake.org/files/v2.8/cmake-2.8.4.tar.gz&#34;&gt;http://www.cmake.org/files/v2.8/cmake-2.8.4.tar.gz&lt;/a&gt; $ tar xvzf cmake-2.8.4.tar.gz $ rm cmake-2.8.4.tar.gz $ cd cmake-2.8.4 $ ./configure $ gmake $ sudo gmake install&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // MySQL専用ユーザ作成 // ---------------------------------------------- $ sudo su -&lt;/p&gt; &#xA;&lt;h1&gt;useradd -s /sbin/nologin mysql&lt;/h1&gt; &#xA;&lt;h1&gt;exit&lt;/h1&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // MySQLインストール // ---------------------------------------------- $ sudo yum install -y ncurses-devel $ wget &lt;a href=&#34;http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.27.tar.gz/from/http://ftp.iij.ad.jp/pub/db/mysql/&#34;&gt;http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.27.tar.gz/from/http://ftp.iij.ad.jp/pub/db/mysql/&lt;/a&gt; $ tar xvzf mysql-5.5.27.tar.gz $ rm mysql-5.5.27.tar.gz $ cd mysql-5.5.27 $ cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci $ make $ sudo make install&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // DBの初期化 // ---------------------------------------------- $ sudo su -&lt;/p&gt; &#xA;&lt;h1&gt;cd /usr/local/mysql&lt;/h1&gt; &#xA;&lt;h1&gt;chown -R mysql .&lt;/h1&gt; &#xA;&lt;h1&gt;chgrp -R mysql .&lt;/h1&gt; &#xA;&lt;h1&gt;scripts/mysql_install_db --user=mysql&lt;/h1&gt; &#xA;&lt;h1&gt;chown -R root .&lt;/h1&gt; &#xA;&lt;h1&gt;chown -R mysql data&lt;/h1&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // my.cnf の設定。utf8 の設定を追加。 // ----------------------------------------------&lt;/p&gt; &#xA;&lt;h1&gt;mv /etc/my.cnf /etc/my.cnf.org&lt;/h1&gt; &#xA;&lt;h1&gt;cp /usr/local/mysql/share/mysql/my-medium.cnf /etc/my.cnf&lt;/h1&gt; &#xA;&lt;h1&gt;vi /etc/my.cnf&lt;/h1&gt; &#xA;&lt;p&gt;[client] default-character-set=utf8&lt;/p&gt; &#xA;&lt;p&gt;[mysqld] skip-character-set-client-handshake character-set-server=utf8&lt;/p&gt; &#xA;&lt;p&gt;[mysqldump] default-character-set=utf8&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // 自動起動設定ファイルを設置 // ----------------------------------------------&lt;/p&gt; &#xA;&lt;h1&gt;cp /usr/local/mysql/support-files/mysql.server /etc/rc.d/init.d/mysqld&lt;/h1&gt; &#xA;&lt;h1&gt;vi /etc/rc.d/init.d/mysqld&lt;/h1&gt; &#xA;&lt;p&gt;basedir=/usr/local/mysql datadir=/usr/local/mysql/data&lt;/p&gt; &#xA;&lt;p&gt;mysqld_pid_file_path=$datadir/&lt;code&gt;/bin/hostname&lt;/code&gt;.pid&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // 自動起動設定後、MySQL起動 // ----------------------------------------------&lt;/p&gt; &#xA;&lt;h1&gt;chkconfig --add mysqld&lt;/h1&gt; &#xA;&lt;h1&gt;chkconfig mysqld on&lt;/h1&gt; &#xA;&lt;h1&gt;chkconfig --list | grep mysqld&lt;/h1&gt; &#xA;&lt;p&gt;mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off&lt;/p&gt; &#xA;&lt;h1&gt;service mysqld start&lt;/h1&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // root でログインして root 以外のユーザ削除、root のパスワード設定をしておく // ---------------------------------------------- $ /usr/local/mysql/bin/mysql -u root mysql&amp;gt; use mysql; mysql&amp;gt; delete from user where !(host=&#34;localhost&#34; and user=&#34;root&#34;); # root 以外のユーザを削除 mysql&amp;gt; update user set password=password(&#39;hogehoge&#39;); # パスワード（hogehoge）を設定 mysql&amp;gt; FLUSH PRIVILEGES; mysql&amp;gt; exit&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // 設定したパスワードで入れるか確認 // ---------------------------------------------- $ /usr/local/mysql/bin/mysql -u root -p&lt;/p&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sqlite3インストール（開発時はsqliteをDBにする） +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ sudo yum -y install sqlite&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Geronimoインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ sudo yum -y install openssl-devel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;$ mkdir -p ~/perl5/app $ cd ~/perl5/app $ git clone &lt;a href=&#34;https://github.com/jikuya/Geronimo.git&#34;&gt;https://github.com/jikuya/Geronimo.git&lt;/a&gt; $ cd Geronimo $ carton install&lt;/p&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Geronimoアプリ起動 +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ carton exec -- plackup app.psgi&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git push設定 +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ git add . $ git commit . $ git commit --amend --author=&#39;jikuya &lt;a href=&#34;mailto:jikuya@gmail.com&#34;&gt;jikuya@gmail.com&lt;/a&gt;&#39; $ vi ~/.ssh/config Host github.com User git Port 22 IdentityFile ~/.ssh/id_rsa $ ssh-keygen $ cat ~/.ssh/id_rsa.pub ※中身をGithubに登録する $ git push origin master&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nginxインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // Nginxの最新版をダウンロードしてインストール // ---------------------------------------------- $ cd ~ $ sudo yum -y install pcre-devel openssl-devel $ wget &lt;a href=&#34;http://nginx.org/download/nginx-1.3.4.tar.gz&#34;&gt;http://nginx.org/download/nginx-1.3.4.tar.gz&lt;/a&gt; $ rm nginx-1.3.4.tar.gz $ cd nginx-1.3.4/ $ sudo ./configure &amp;amp;&amp;amp; sudo make &amp;amp;&amp;amp; sudo make install&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // 起動ファイルを設置後、起動 // ---------------------------------------------- $ sudo vi /etc/init.d/nginx #!/bin/sh&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;nginx - this script starts and stops the nginx daemon&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;chkconfig: - 85 15&lt;/h1&gt; &#xA;&lt;h1&gt;description: Nginx is an HTTP(S) server, HTTP(S) reverse \&lt;/h1&gt; &#xA;&lt;h1&gt;proxy and IMAP/POP3 proxy server&lt;/h1&gt; &#xA;&lt;h1&gt;processname: nginx&lt;/h1&gt; &#xA;&lt;h1&gt;config: /usr/local/nginx/conf/nginx.conf&lt;/h1&gt; &#xA;&lt;h1&gt;pidfile: /usr/local/nginx/logs/nginx.pid&lt;/h1&gt; &#xA;&lt;h2&gt;Source function library.&lt;/h2&gt; &#xA;&lt;p&gt;. /etc/rc.d/init.d/functions&lt;/p&gt; &#xA;&lt;p&gt;nginx=&#34;/usr/local/nginx/sbin/nginx&#34; prog=$(basename $nginx)&lt;/p&gt; &#xA;&lt;p&gt;NGINX_CONF_FILE=&#34;/usr/local/nginx/conf/nginx.conf&#34;&lt;/p&gt; &#xA;&lt;p&gt;start() { [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 echo -n $&#34;Starting $prog: &#34; daemon $nginx -c $NGINX_CONF_FILE retval=$? echo return $retval }&lt;/p&gt; &#xA;&lt;p&gt;stop() { echo -n $&#34;Stopping $prog: &#34; killproc $prog -QUIT retval=$? echo return $retval }&lt;/p&gt; &#xA;&lt;p&gt;restart() { configtest || return $? stop sleep 1 start }&lt;/p&gt; &#xA;&lt;p&gt;reload() { configtest || return $? echo -n $&#34;Reloading $prog: &#34; killproc $nginx -HUP RETVAL=$? echo }&lt;/p&gt; &#xA;&lt;p&gt;force_reload() { restart }&lt;/p&gt; &#xA;&lt;p&gt;configtest() { $nginx -t -c $NGINX_CONF_FILE }&lt;/p&gt; &#xA;&lt;p&gt;rh_status() { status $prog }&lt;/p&gt; &#xA;&lt;p&gt;rh_status_q() { rh_status &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 }&lt;/p&gt; &#xA;&lt;p&gt;case &#34;$1&#34; in start) rh_status_q &amp;amp;&amp;amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $&#34;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&#34; exit 2 esac $ sudo chmod 755 /etc/init.d/nginx $ sudo /etc/rc.d/init.d/nginx start $ sudo /etc/rc.d/init.d/nginx stop $ sudo /etc/rc.d/init.d/nginx start $ sudo /etc/rc.d/init.d/nginx restart&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // 自動起動設定 // ---------------------------------------------- $ sudo chkconfig --add nginx $ sudo chkconfig nginx on $ sudo chkconfig --list nginx $ sudo /etc/rc.d/init.d/nginx restart&lt;/p&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;supervisordインストール +++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // setuptools + pip + supervisord のインストール // ---------------------------------------------- $ cd ~ $ sudo yum install -y python-setuptools $ sudo easy_install pip $ sudo pip install &lt;a href=&#34;http://pypi.python.org/packages/source/s/supervisor/supervisor-3.0a12.tar.gz&#34;&gt;http://pypi.python.org/packages/source/s/supervisor/supervisor-3.0a12.tar.gz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // ログ保存用ディレクトリ作成 // ---------------------------------------------- $ sudo mkdir /var/log/supervisord/&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // 個別設定を格納するディレクトリを作成 // ---------------------------------------------- $ sudo mkdir /etc/supervisord.d/&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // configファイルを設定 // ---------------------------------------------- $ sudo su - root -c &#34;echo_supervisord_conf &amp;gt; /etc/supervisord.conf&#34; $ sudo cp /etc/supervisord.conf /etc/supervisord.conf.org $ sudo vi /etc/supervisord.conf --- /etc/supervisord.conf.orig 2012-07-01 22:11:13.646400571 +0900 +++ /etc/supervisord.conf 2012-07-02 00:14:14.761082685 +0900 @@ -13,15 +13,15 @@ ;password=123 ; (default is no password (open server))&lt;/p&gt; &#xA;&lt;p&gt;[supervisord] -logfile=/tmp/supervisord.log ; (main log file;default $CWD/supervisord.log) +logfile=/var/log/supervisord/supervisord.log ; (main log file;default $CWD/supervisord.log) logfile_maxbytes=50MB ; (max main logfile bytes b4 rotation;default 50MB) logfile_backups=10 ; (num of main logfile rotation backups;default 10) loglevel=info ; (log level;default info; others: debug,warn,trace) -pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid) +pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid) nodaemon=false ; (start in foreground if true;default false) minfds=1024 ; (min. avail startup file descriptors;default 1024) minprocs=200 ; (min. avail process descriptors;default 200) -;umask=022 ; (process file creation umask;default 022) +umask=002 ; (process file creation umask;default 022) ;user=chrism ; (default is current user, required if root) ;identifier=supervisor ; (supervisord identifier, default is &#39;supervisor&#39;) ;directory=/tmp ; (default is not to cd during start) @@ -127,5 +127,5 @@ ; interpreted as relative to this file. Included files &lt;em&gt;cannot&lt;/em&gt; ; include files themselves.&lt;/p&gt; &#xA;&lt;p&gt;-;[include] -;files = relative/directory/&lt;em&gt;.ini +[include] +files = /etc/supervisord.d/&lt;/em&gt;.ini&lt;/p&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // 起動ファイルを設定後、起動 // ---------------------------------------------- $ sudo vi /etc/init/supervisord.conf description &#34;supervisord&#34;&lt;/p&gt; &#xA;&lt;p&gt;start on runlevel [2345] stop on runlevel [!2345]&lt;/p&gt; &#xA;&lt;p&gt;respawn exec /usr/bin/supervisord -n $ sudo initctl start supervisord $ tail -f /var/log/supervisord/supervisord.log&lt;/p&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;アプリケーションをsupervisordで起動 +++++++++++++++++++++++++++++++++++++++++++++++++++++++ // ---------------------------------------------- // cartonで使うパスを確認 // ---------------------------------------------- $ carton exec -I./lib/ -- perl -e &#34;print join(q/:/,@INC)&#34; ./lib/:local/lib/perl5/x86_64-linux:local/lib/perl5:.:/home/geronimo/perl5/perlbrew/perls/perl-5.16.1/lib/5.16.1:/home/geronimo/perl5/perlbrew/perls/perl-5.16.1/lib/5.16.1/x86_64-linux $ carton exec -I./lib/ -- echo $PATH /home/geronimo/perl5/perlbrew/bin:/home/geronimo/perl5/perlbrew/perls/perl-5.16.1/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/geronimo/bin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;// ---------------------------------------------- // アプリケーション管理用設定ファイルを設置 // ---------------------------------------------- $ sudo vi /etc/supervisord.d/geronimo.ini [program:geronimo] user=geronimo umask=002 environment=PERL5LIB=&#34;/home/geronimo/perl5/app/Geronimo/lib:/home/geronimo/perl5/app/Geronimo/local/lib/perl5/x86_64-linux:/home/geronimo/perl5/app/Geronimo/local/lib/perl5:/home/geronimo/perl5/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/x86_64-linux/:/home/geronimo/perl5/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/&#34;,PATH=&#34;/home/geronimo/perl5/app/Geronimo/local/bin/:/home/geronimo/perl5/perlbrew/bin:/home/geronimo/perl5/perlbrew/perls/perl-5.16.1/bin/&#34; command=/home/geronimo/perl5/perlbrew/perls/perl-5.16.1/bin/carton exec -- /home/geronimo/perl5/app/Geronimo/local/bin/start_server --port=8080 --path=/tmp/geronimo.sock --interval=10 --pid-file=/tmp/geronimo.pid -- /home/geronimo/perl5/app/Geronimo/local/bin/plackup -s Starman -E development --workers=3 --backlog=1024 --max-requests=10000 --preload-app /home/geronimo/perl5/app/Geronimo/app.psgi directory=/home/geronimo/perl5/app/Geronimo redirect_stderr=true stdout_logfile=/var/log/supervisord/Geronimo.log stdout_logfile_maxbytes = 5MB stderr_logfile=/var/log/supervisord/Geronimo.err stderr_logfile_maxbytes = 5MB stdout_logfile_backups = 5 autorestart = true startsecs = 5&lt;/p&gt; &#xA;&lt;p&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vhostを設定 +++++++++++++++++++++++++++++++++++++++++++++++++++++++ $ sudo vi /usr/local/nginx/conf/nginx.conf 19d18 &amp;lt; include /usr/local/nginx/conf/extra/*.conf;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;$ sudo mkdir /usr/local/nginx/conf/extra $ sudo vi /usr/local/nginx/conf/extra/vhost.conf proxy_cache_path /var/cache/nginx/static_file_cache levels=1:2 keys_zone=cache_static_file:128m inactive=7d max_size=512m; proxy_temp_path /var/cache/nginx/temp;&lt;/p&gt; &#xA;&lt;p&gt;upstream backend { server 127.0.0.1:8080; }&lt;/p&gt; &#xA;&lt;p&gt;server { listen 80; server_name askque.com; access_log /var/log/nginx/geronimo/access.log; location / { proxy_redirect off;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    set $do_not_cache 0;&#xA;    if ($request_method != GET) {&#xA;        set $do_not_cache 1;&#xA;    }&#xA;    if ($uri !~* &#34;.(jpg|png|gif|jpeg|css|js|swf|pdf|html|htm)$&#34;) {&#xA;        set $do_not_cache 1;&#xA;    }&#xA;    proxy_no_cache $do_not_cache;&#xA;    proxy_cache_bypass $do_not_cache;&#xA;    proxy_cache cache_static_file;&#xA;    proxy_cache_key $scheme$host$uri$is_args$args;&#xA;    proxy_cache_valid 200 2h;&#xA;    proxy_cache_valid any 1m;&#xA;&#xA;    proxy_set_header Host $host;&#xA;    proxy_set_header X-Real-IP $remote_addr;&#xA;    proxy_set_header X-Forwarded-Host $host;&#xA;    proxy_set_header X-Forwarded-Server $host;&#xA;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;    proxy_pass http://59.106.177.81:8080;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;}&lt;/p&gt; &#xA;&lt;p&gt;$ sudo mkdir -p /var/cache/nginx/static_file_cache&lt;/p&gt; &#xA;&lt;p&gt;$ sudo mkdir -p /var/log/nginx/geronimo/ $ sudo /etc/rc.d/init.d/nginx restart&lt;/p&gt;</summary>
  </entry>
</feed>