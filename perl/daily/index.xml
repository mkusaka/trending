<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-17T01:41:43Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pawjy/perl-promised-docker-webdriver</title>
    <updated>2023-05-17T01:41:43Z</updated>
    <id>tag:github.com,2023-05-17:/pawjy/perl-promised-docker-webdriver</id>
    <link href="https://github.com/pawjy/perl-promised-docker-webdriver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=head1 NAME&lt;/p&gt; &#xA;&lt;p&gt;Promised::Docker::WebDriver - Headless browsers with WebDriver in Docker&lt;/p&gt; &#xA;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use Promised::Docker::WebDriver; $server = Promised::Docker::WebDriver-&amp;gt;chrome; $server-&amp;gt;start-&amp;gt;then (sub { $url = $server-&amp;gt;get_url_prefix; $host = $server-&amp;gt;get_docker_host_hostname; ... POST qq&amp;lt;$url/session/url&amp;gt;, {url =&amp;gt; qq&lt;a href=&#34;http://$host:8080/&#34;&gt;http://$host:8080/&lt;/a&gt;}; ... })-&amp;gt;then (sub { return $server-&amp;gt;stop; });&lt;/p&gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;The C&lt;a href=&#34;Promised::Docker::WebDriver&#34;&gt;Promised::Docker::WebDriver&lt;/a&gt; module provides a L&#xA; &lt;promise&gt;&#xA;  -aware wrapper API for docker images containing headless Web browsers exposing WebDriver Web APIs.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 METHODS&lt;/p&gt; &#xA;&lt;p&gt;Following methods are available:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item $server = Promised::Docker::WebDriver-&amp;gt;chrome&lt;/p&gt; &#xA;&lt;p&gt;Create a new instance for the docker image &#34;wakaba/docker-chromedriver:stable&#34;, which contains ChromeDriver with Chrome stable channel browser. (See &lt;a href=&#34;https://github.com/wakaba/docker-chromedriver&#34;&gt;https://github.com/wakaba/docker-chromedriver&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;=item $server = Promised::Docker::WebDriver-&amp;gt;chromium&lt;/p&gt; &#xA;&lt;p&gt;Create a new instance for the docker image &#34;wakaba/docker-chromedriver:chromium&#34;, which contains ChromeDriver with Chromium browser. (See &lt;a href=&#34;https://github.com/wakaba/docker-chromedriver&#34;&gt;https://github.com/wakaba/docker-chromedriver&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;=item $server = Promised::Docker::WebDriver-&amp;gt;firefox&lt;/p&gt; &#xA;&lt;p&gt;Create a new instance for the docker image &#34;wakaba/docker-firefoxdriver:stable&#34;, which contains FirefoxDriver with Firefox stable release browser. (See &lt;a href=&#34;https://github.com/wakaba/docker-firefoxdriver&#34;&gt;https://github.com/wakaba/docker-firefoxdriver&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;=item $promise = $server-&amp;gt;start (NAME =&amp;gt; VALUE, ...)&lt;/p&gt; &#xA;&lt;p&gt;Start a Docker container and return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved after the WebDriver API server is ready to accept HTTP requests. The promise is rejected if the server failed to start.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;Following options can be specified as zero or more name/value pairs:&lt;/p&gt; &#xA;&lt;p&gt;=over 4&lt;/p&gt; &#xA;&lt;p&gt;=item host =&amp;gt; $host&lt;/p&gt; &#xA;&lt;p&gt;A L&lt;a href=&#34;Web::Host&#34;&gt;Web::Host&lt;/a&gt; object (in the &lt;a href=&#34;https://github.com/manakai/perl-web-url&#34;&gt;https://github.com/manakai/perl-web-url&lt;/a&gt; repository) that represents the IP address the WebDriver server should listen. If omitted, defaulted to an IPv4 address C&amp;lt;127.0.0.1&amp;gt;.&lt;/p&gt; &#xA;&lt;p&gt;=item port =&amp;gt; $port&lt;/p&gt; &#xA;&lt;p&gt;An integer that represents the TCP port the WebDriver server should listen. If omitted, defaulted to an unused port.&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;=item $promise = $server-&amp;gt;stop&lt;/p&gt; &#xA;&lt;p&gt;Stop the Docker container and return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved after the Docker container is stopped.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;This method must be invoked after the L&#xA; &lt;start&gt;&#xA;   method is resolved.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $promise = $server-&amp;gt;completed&lt;/p&gt; &#xA;&lt;p&gt;Return a L&#xA; &lt;promise&gt;&#xA;  , which is resolved after the Docker container is stopped.&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;This method must be invoked after the L&#xA; &lt;start&gt;&#xA;   method is resolved.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $time = $server-&amp;gt;start_timeout&lt;/p&gt; &#xA;&lt;p&gt;=item $server-&amp;gt;start_timeout ($time)&lt;/p&gt; &#xA;&lt;p&gt;Get or set the timeout for the C&#xA; &lt;start&gt;&#xA;  , i.e. the maximum time interval between the completion of the C&amp;lt;docker run -d&amp;gt; command and when the server becomes ready to accept requests.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;This method must be invoked before the C&#xA; &lt;start&gt;&#xA;   method is invoked.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $boolean = $server-&amp;gt;use_rtp&lt;/p&gt; &#xA;&lt;p&gt;=item $server-&amp;gt;use_rtp ($boolean)&lt;/p&gt; &#xA;&lt;p&gt;Get or set whether the audio output should be exposed by RTP or not. This option is only applicable to a Docker image which supports this feature.&lt;/p&gt; &#xA;&lt;p&gt;This method must be invoked before the C&#xA; &lt;start&gt;&#xA;   method is invoked.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $string? = $server-&amp;gt;hls_path&lt;/p&gt; &#xA;&lt;p&gt;=item $server-&amp;gt;hls_path ($string?)&lt;/p&gt; &#xA;&lt;p&gt;Get or set the C&amp;lt;WD_HLS_PATH&amp;gt; environment variable within the docker container. This option is only applicable to a Docker image which supports this feature.&lt;/p&gt; &#xA;&lt;p&gt;This method must be invoked before the C&#xA; &lt;start&gt;&#xA;   method is invoked.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $string? = $server-&amp;gt;video_path&lt;/p&gt; &#xA;&lt;p&gt;=item $server-&amp;gt;video_path ($string?)&lt;/p&gt; &#xA;&lt;p&gt;Get or set the C&amp;lt;WD_VIDEO_PATH&amp;gt; environment variable within the docker container. This option is only applicable to a Docker image which supports this feature.&lt;/p&gt; &#xA;&lt;p&gt;This method must be invoked before the C&#xA; &lt;start&gt;&#xA;   method is invoked.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $arrayref = $server-&amp;gt;docker_args&lt;/p&gt; &#xA;&lt;p&gt;=item $server-&amp;gt;docker_args ($arrayref)&lt;/p&gt; &#xA;&lt;p&gt;Get or set the additional arguments to the C&#xA; &lt;docker run&gt;&#xA;   command.&#xA; &lt;/docker&gt;&lt;/p&gt; &#xA;&lt;p&gt;This method must be invoked before the C&#xA; &lt;start&gt;&#xA;   method is invoked.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $int = $server-&amp;gt;get_port&lt;/p&gt; &#xA;&lt;p&gt;Return the port number the WebDriver server is listening. This method must be invoked after the C&#xA; &lt;start&gt;&#xA;   promise is resolved.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $string = $server-&amp;gt;get_hostname&lt;/p&gt; &#xA;&lt;p&gt;Return the host name the WebDriver server is listening, as a string. This method must be invoked after the C&#xA; &lt;start&gt;&#xA;   promise is resolved.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $string = $server-&amp;gt;get_host&lt;/p&gt; &#xA;&lt;p&gt;Return a string that is equivalent to C&amp;lt;&amp;lt; $server-&amp;gt;get_hostname . &#39;:&#39; . $server-&amp;gt;get_port &amp;gt;&amp;gt;. This method must be invoked after the C&#xA; &lt;start&gt;&#xA;   promise is resolved.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $url = $server-&amp;gt;get_url_prefix&lt;/p&gt; &#xA;&lt;p&gt;Return the URL prefix for the server. For example, the complete URL for the C end point is the value returned by this method followed by C. This method must be invoked after the C&#xA; &lt;start&gt;&#xA;   promise is resolved.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $string = $server-&amp;gt;get_docker_host_hostname_for_container&lt;/p&gt; &#xA;&lt;p&gt;Return the host name of the Docker host (the host where the Perl application is running) used within the Docker container. This host name can be used to construct the URL specified in the WebDriver API to let the browser access the server running on the host. This method must be invoked after the C&#xA; &lt;start&gt;&#xA;   promise is resolved.&#xA; &lt;/start&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $string = $server-&amp;gt;get_rtp_hostname&lt;/p&gt; &#xA;&lt;p&gt;Return the host name of the RTP stream. If not available, C&#xA; &lt;undef&gt;&#xA;   is returned instead.&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;=item $int = $server-&amp;gt;get_rtp_port&lt;/p&gt; &#xA;&lt;p&gt;Return the port number of the RTP stream. If not available, C&#xA; &lt;undef&gt;&#xA;   is returned instead.&#xA; &lt;/undef&gt;&lt;/p&gt; &#xA;&lt;p&gt;=back&lt;/p&gt; &#xA;&lt;p&gt;During the server is running, signal handlers for C&#xA; &lt;sigint&gt;&#xA;  , C&#xA;  &lt;sigterm&gt;&#xA;   , and C&#xA;   &lt;sigquit&gt;&#xA;     are installed such that these signal will terminate the server (and the current script). If the script wants to handle signal in other ways, the handling should be specified using the L&#xA;    &lt;a href=&#34;Promised::Command::Signals&#34;&gt;Promised::Command::Signals&lt;/a&gt; API from &#xA;    &lt;a href=&#34;https://github.com/wakaba/perl-promised-command&#34;&gt;https://github.com/wakaba/perl-promised-command&lt;/a&gt; to avoid confliction.&#xA;   &lt;/sigquit&gt;&#xA;  &lt;/sigterm&gt;&#xA; &lt;/sigint&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head1 DEPENDENCY&lt;/p&gt; &#xA;&lt;p&gt;The module requires Perl 5.10 or later.&lt;/p&gt; &#xA;&lt;p&gt;The module requires L&#xA; &lt;promise&gt; &#xA;  &lt;a href=&#34;https://github.com/wakaba/perl-promise&#34;&gt;https://github.com/wakaba/perl-promise&lt;/a&gt;, L&#xA;  &lt;a href=&#34;Promised::Command&#34;&gt;Promised::Command&lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/wakaba/perl-promised-command&#34;&gt;https://github.com/wakaba/perl-promised-command&lt;/a&gt;, and L&#xA;  &lt;anyevent&gt;&#xA;   .&#xA;  &lt;/anyevent&gt;&#xA; &lt;/promise&gt;&lt;/p&gt; &#xA;&lt;p&gt;Obviously, Docker is also required.&lt;/p&gt; &#xA;&lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;Docker &lt;a href=&#34;https://www.docker.com/&#34;&gt;https://www.docker.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The WebDriver Wire Protocol &lt;a href=&#34;https://web.archive.org/web/20160205035909/https://code.google.com/p/selenium/wiki/JsonWireProtocol&#34;&gt;https://web.archive.org/web/20160205035909/https://code.google.com/p/selenium/wiki/JsonWireProtocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;WebDriver &lt;a href=&#34;https://w3c.github.io/webdriver/webdriver-spec.html&#34;&gt;https://w3c.github.io/webdriver/webdriver-spec.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 AUTHOR&lt;/p&gt; &#xA;&lt;p&gt;Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 HISTORY&lt;/p&gt; &#xA;&lt;p&gt;This repository was located at &lt;a href=&#34;https://github.com/wakaba/perl-promised-docker-webdriver&#34;&gt;https://github.com/wakaba/perl-promised-docker-webdriver&lt;/a&gt; until 19 April 2023, then transferred to &lt;a href=&#34;https://github.com/pawjy/perl-promised-docker-webdriver&#34;&gt;https://github.com/pawjy/perl-promised-docker-webdriver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=head1 LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2015-2023 Wakaba &lt;a href=&#34;mailto:wakaba@suikawiki.org&#34;&gt;wakaba@suikawiki.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt; &#xA;&lt;p&gt;=cut&lt;/p&gt;</summary>
  </entry>
</feed>