<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T01:41:59Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grasevski/rsvp-text-analysis</title>
    <updated>2023-01-15T01:41:59Z</updated>
    <id>tag:github.com,2023-01-15:/grasevski/rsvp-text-analysis</id>
    <link href="https://github.com/grasevski/rsvp-text-analysis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Text mining scripts for the RSVP database&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rsvp-text-analysis&lt;/h1&gt; &#xA;&lt;p&gt;Text mining scripts for the RSVP database&lt;/p&gt; &#xA;&lt;h2&gt;Synopsis&lt;/h2&gt; &#xA;&lt;p&gt;This repository consists of a main script &lt;code&gt;extractMatches.sh&lt;/code&gt;, as well as some auxilliary files and helper perl scripts. The purpose of &lt;code&gt;extractMatches.sh&lt;/code&gt; is to output a feature table given a list of user ids and corresponding free text fields.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: The user ids need not be unique.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This is the basic procedure followed by &lt;code&gt;extractMatches.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find all keywords in the free text and (in order) record the line number (=&amp;gt; userid) and keyword matched.&lt;/li&gt; &#xA; &lt;li&gt;Search the text before each keyword for matches from the negative.txt file and record any negations.&lt;/li&gt; &#xA; &lt;li&gt;Read through the matches and negations and output a table, assigning for each genre a &#39;2&#39; for a successful match, &#39;0&#39; for a negation and &#39;1&#39; if no keywords from that genre were mentioned by the user.&lt;/li&gt; &#xA; &lt;li&gt;Sort the table by userid and merge records of the same user, using a &#39;2&#39; if one matched successfully, else &#39;0&#39; if one was negated, else &#39;1&#39;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;These utilities were written under unix, and thus have the following dependencies:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;unix shell (eg bash)&lt;/li&gt; &#xA; &lt;li&gt;text utilities - grep, sed, tr, tee, cut, sort, uniq, tail&lt;/li&gt; &#xA; &lt;li&gt;perl, including the following CPAN modules: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Text::CSV&lt;/li&gt; &#xA;   &lt;li&gt;DBI (plus sqlite3 driver)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;sqlite3&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Recommended windows dependency installation:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;install MinGW/cygwin&lt;/li&gt; &#xA; &lt;li&gt;install aforementioned dependencies in MinGW/cygwin&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Most unix distributions include these dependencies, and any missing ones can be installed through the package manager.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA; &lt;li&gt;Download and extract this repository&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;These scripts rely on the following main data files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rsvp-text-analysis/negative.txt&lt;/code&gt; - list of negating phrases, used for determining negation. Each line of this file should be a negating phrase with no leading or trailing whitespace. This file is provided, however it can be updated as seen fit. and the following files must be provided for each feature type:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rsvp-text-analysis/myfeaturetype/myfeaturetype.txt&lt;/code&gt; - (keyword,genre) csv file. This file consists of an association list of keywords and genres. Each line of this file should be a keyword followed by a comma followed by a genre, with no leading or trailing whitespace. Genres are automatically included as keywords in the script.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rsvp-text-analysis/myfeaturetype/user_myfeaturetype.csv&lt;/code&gt; - (userid, freetext) csv file exported from the RSVP Oracle database. There should only be 2 columns - one for userid and one for free text. The first line should be a header, and each subsequent line should be a (userid,freetext) pair. This file can be obtained by exporting &lt;code&gt;RSVP_0612.UP_FREETEXT&lt;/code&gt;, selecting only the &#34;userid&#34; and &#34;music&#34; columns for example.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;File Formats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;negative.txt&lt;/code&gt; should consist of a list of phrases. There should be no leading or trailing whitespace. Eg:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;not&#xA;except&#xA;dont like&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;myfeaturetype.txt&lt;/code&gt; should consist of a list of &#34;keyword,genre&#34; pairs. There should be no leading or trailing whitespace. Eg:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;alice in chains,rock&#xA;bach,classical&#xA;nirvana,rock&#xA;frank sinatra,jazz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;user_myfeaturetype.csv&lt;/code&gt; should be a comma-separated-value file exported from oracle. It should have exactly 2 columns - userid and freetext. The user ids need not be unique, as all features for a given userid are eventually merged. This means that one can concatenate multiple tables if they wish to use multiple text fields. For example one could concatenate a (userid,idealpartner) table with a (userid,sport) table, and so on, to cover multiple free text fields. Below is an example csv file:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;USERID&#34;,&#34;XYZ&#34;&#xA;234123,&#34;i like all music usher, jay-z, ne-yo, 50-cent snoop dogg,&#xA;puff daddy,&#xA;shaggy&#xA;&#xA;etc&#xA;&#34;&#xA;53453,&#34;im a sensitive guy&#34;&#xA;234123,&#34;large and in charge!&#34;&#xA;11111,&#34;&#xA;&#xA;&#34;&#xA;123456,&#34;&#34;&#xA;666777,&#34;&#xA;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;myfeaturetype_table.csv&lt;/code&gt; is an outputted feature table, with &#39;t&#39; representing like and &#39;f&#39; representing dont like for each feature. Eg:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;id, blues, classical, country, data, folk, jazz, misc, newage, reggae, rock, soundtrack&#xA;2044740,f,t,f,f,t,f,t,f,f,t,f&#xA;2044741,t,t,f,f,t,f,t,t,f,t,t&#xA;2044742,t,t,f,f,t,t,t,f,f,t,t&#xA;2044743,f,f,f,f,t,t,t,f,t,t,t&#xA;2044745,f,t,t,f,t,t,t,f,f,t,t&#xA;2044746,f,f,f,f,f,f,t,f,f,t,t&#xA;2044747,f,f,f,f,t,f,t,f,t,t,t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;myfeaturetype_table_neg.csv&lt;/code&gt; is an outputted feature table, with &#39;2&#39; representing like, &#39;0&#39; representing dislike and &#39;1&#39; representing neutral (i.e. not mentioned). Eg:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;id, blues, classical, country, data, folk, jazz, misc, newage, reggae, rock, soundtrack&#xA;2044740,1,2,1,1,2,1,2,1,1,2,1&#xA;2044741,2,2,1,1,2,1,2,2,1,2,2&#xA;2044742,2,2,1,1,2,2,2,1,1,2,2&#xA;2044743,1,1,1,1,2,2,2,1,2,2,2&#xA;2044745,1,2,2,1,2,2,2,1,1,2,2&#xA;2044746,1,1,1,1,1,1,2,1,1,2,2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have downloaded and extracted the repo, cd to it:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /path/to/rsvp-text-analysis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Then make a new directory for your feature type (eg movie, music, sport etc):&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir myfeaturetype&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Then change to that directory:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd myfeaturetype&#x9;# VERY IMPORTANT!!!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;NOTE: The script MUST be run from the myfeaturetype subdirectory! Otherwise the references to the helper perl scripts and various auxilliary files will be wrong!&lt;/p&gt; &#xA;&lt;p&gt;Next, copy your 2-column (userid,freetext) CSV file which you have exported from Oracle:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp /my/user/table/freetext/entries.csv user_myfeaturetype.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Then copy your &#34;keyword,genre&#34; association list:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp /my/keyword/associations.txt myfeaturetype.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;extractText.sh&lt;/code&gt;, and wait for the output tables to be produced:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;../extractText.sh myfeaturetype&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Finally, copy your output tables to wherever and use them:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp myfeaturetype_table.csv myfeaturetype_table_neg.csv /somewhere/else/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;The following sources may be useful when creating keyword association files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The IMDB data set (&lt;a href=&#34;http://www.imdb.com/interfaces&#34;&gt;http://www.imdb.com/interfaces&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;imdbpy (&lt;a href=&#34;http://imdbpy.sourceforge.net/&#34;&gt;http://imdbpy.sourceforge.net/&lt;/a&gt;) - Python api for IMDB. This for example could be used in conjunction with the IMDB data set to populate a local SQLite database. This could then in turn be queried to return a list of (movie,genre) pairs for example.&lt;/li&gt; &#xA; &lt;li&gt;The freedb music cd data set (&lt;a href=&#34;http://www.freedb.org/&#34;&gt;http://www.freedb.org/&lt;/a&gt;) - This could be used to populate an (artist,genre) keyword association file.&lt;/li&gt; &#xA; &lt;li&gt;The MovieLens 10M Data Set (&lt;a href=&#34;http://www.grouplens.org/node/73&#34;&gt;http://www.grouplens.org/node/73&lt;/a&gt;) - A convenient existing movie dataset created by the GroupLens Research Group.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>CNA/proprietary_vendor_samsung</title>
    <updated>2023-01-15T01:41:59Z</updated>
    <id>tag:github.com,2023-01-15:/CNA/proprietary_vendor_samsung</id>
    <link href="https://github.com/CNA/proprietary_vendor_samsung" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>yappo/PSGIRPC</title>
    <updated>2023-01-15T01:41:59Z</updated>
    <id>tag:github.com,2023-01-15:/yappo/PSGIRPC</id>
    <link href="https://github.com/yappo/PSGIRPC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is Perl module PSGIRPC.&lt;/p&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;PSGIRPC installation is straightforward. If your CPAN shell is set up, you should just be able to do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cpan PSGIRPC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download it, unpack it, then build it as per the usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% perl Makefile.PL&#xA;% make &amp;amp;&amp;amp; make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DOCUMENTATION&lt;/p&gt; &#xA;&lt;p&gt;PSGIRPC documentation is available as in POD. So you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% perldoc PSGIRPC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to read the documentation online with your favorite pager.&lt;/p&gt; &#xA;&lt;p&gt;Kazuhiro Osawa&lt;/p&gt;</summary>
  </entry>
</feed>