<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-13T01:50:14Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NixOS/hydra</title>
    <updated>2022-08-13T01:50:14Z</updated>
    <id>tag:github.com,2022-08-13:/NixOS/hydra</id>
    <link href="https://github.com/NixOS/hydra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hydra, the Nix-based continuous build system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hydra&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NixOS/hydra/actions&#34;&gt;&lt;img src=&#34;https://github.com/NixOS/hydra/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hydra is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;Continuous Integration&lt;/a&gt; service for &lt;a href=&#34;https://nixos.org/nix&#34;&gt;Nix&lt;/a&gt; based projects.&lt;/p&gt; &#xA;&lt;h2&gt;Installation And Setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The instructions provided below are intended to enable new users to get a simple, local installation up and running. They are by no means sufficient for running a production server, let alone a public instance.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling The Service&lt;/h3&gt; &#xA;&lt;p&gt;Running Hydra is currently only supported on NixOS. The &lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/release-20.03/nixos/modules/services/continuous-integration/hydra/default.nix&#34;&gt;hydra module&lt;/a&gt; allows for an easy setup. The following configuration can be used for a simple setup that performs all builds on &lt;em&gt;localhost&lt;/em&gt; (Please refer to the &lt;a href=&#34;https://nixos.org/nixos/options.html#services.hydra&#34;&gt;Options page&lt;/a&gt; for all available options):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  services.hydra = {&#xA;    enable = true;&#xA;    hydraURL = &#34;http://localhost:3000&#34;;&#xA;    notificationSender = &#34;hydra@localhost&#34;;&#xA;    buildMachinesFiles = [];&#xA;    useSubstitutes = true;&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating An Admin User&lt;/h3&gt; &#xA;&lt;p&gt;Once the Hydra service has been configured as above and activate you should already be able to access the UI interface at the specified URL. However some actions require an admin user which has to be created first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ su - hydra&#xA;$ hydra-create-user &amp;lt;USER&amp;gt; --full-name &#39;&amp;lt;NAME&amp;gt;&#39; \&#xA;    --email-address &#39;&amp;lt;EMAIL&amp;gt;&#39; --password-prompt --role admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afterwards you should be able to log by clicking on &#34;&lt;em&gt;Sign In&lt;/em&gt;&#34; on the top right of the web interface using the credentials specified by &lt;code&gt;hydra-create-user&lt;/code&gt;. Once you are logged in you can click &#34;&lt;em&gt;Admin -&amp;gt; Create Project&lt;/em&gt;&#34; to configure your first project.&lt;/p&gt; &#xA;&lt;h3&gt;Creating A Simple Project And Jobset&lt;/h3&gt; &#xA;&lt;p&gt;In order to evaluate and build anything you need to create &lt;em&gt;projects&lt;/em&gt; that contain &lt;em&gt;jobsets&lt;/em&gt;. Hydra supports imperative and declarative projects and many different configurations. The steps below will guide you through the required steps to creating a minimal imperative project configuration.&lt;/p&gt; &#xA;&lt;h4&gt;Creating A Project&lt;/h4&gt; &#xA;&lt;p&gt;Log in as administrator, click &#34;&lt;em&gt;Admin&lt;/em&gt;&#34; and select &#34;&lt;em&gt;Create project&lt;/em&gt;&#34;. Fill the form as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Identifier&lt;/strong&gt;: &lt;code&gt;hello&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Display name&lt;/strong&gt;: &lt;code&gt;hello&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Description&lt;/strong&gt;: &lt;code&gt;hello project&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Click &#34;&lt;em&gt;Create project&lt;/em&gt;&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;Creating A Jobset&lt;/h4&gt; &#xA;&lt;p&gt;After creating a project you are forwarded to the project page. Click &#34;&lt;em&gt;Actions&lt;/em&gt;&#34; and choose &#34;&lt;em&gt;Create jobset&lt;/em&gt;&#34;. Fill the form with the following values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Identifier&lt;/strong&gt;: &lt;code&gt;hello&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix expression&lt;/strong&gt;: &lt;code&gt;examples/hello.nix&lt;/code&gt; in &lt;code&gt;hydra&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Check interval&lt;/strong&gt;: 60&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scheduling shares&lt;/strong&gt;: 1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have to add two inputs for this jobset. One for &lt;em&gt;nixpkgs&lt;/em&gt; and one for &lt;em&gt;hydra&lt;/em&gt; (which we are referencing in the Nix expression above):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Input name&lt;/strong&gt;: &lt;code&gt;nixpkgs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;Git checkout&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt;: &lt;code&gt;https://github.com/nixos/nixpkgs-channels nixos-20.03&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Input name&lt;/strong&gt;: &lt;code&gt;hydra&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;Git checkout&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt;: &lt;code&gt;https://github.com/nixos/hydra&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure &lt;strong&gt;State&lt;/strong&gt; at the top of the page is set to &#34;&lt;em&gt;Enabled&lt;/em&gt;&#34; and click on &#34;&lt;em&gt;Create jobset&lt;/em&gt;&#34;. This concludes the creation of a jobset that evaluates &lt;a href=&#34;https://raw.githubusercontent.com/NixOS/hydra/master/examples/hello.nix&#34;&gt;./examples/hello.nix&lt;/a&gt; once a minute. Clicking &#34;&lt;em&gt;Evaluations&lt;/em&gt;&#34; should list the first evaluation of the newly created jobset after a brief delay.&lt;/p&gt; &#xA;&lt;h2&gt;Building And Developing&lt;/h2&gt; &#xA;&lt;h3&gt;Building Hydra&lt;/h3&gt; &#xA;&lt;p&gt;You can build Hydra via &lt;code&gt;nix-build&lt;/code&gt; using the provided &lt;a href=&#34;https://raw.githubusercontent.com/NixOS/hydra/master/default.nix&#34;&gt;default.nix&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development Environment&lt;/h3&gt; &#xA;&lt;p&gt;You can use the provided shell.nix to get a working development environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-shell&#xA;$ ./bootstrap&#xA;$ configurePhase # NOTE: not ./configure&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Executing Hydra During Development&lt;/h3&gt; &#xA;&lt;p&gt;When working on new features or bug fixes you need to be able to run Hydra from your working copy. This can be done using &lt;a href=&#34;https://github.com/ddollar/foreman&#34;&gt;foreman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-shell&#xA;$ # hack hack&#xA;$ make&#xA;$ foreman start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/NixOS/hydra/master/Procfile&#34;&gt;Procfile&lt;/a&gt; if you want to see how the processes are being started. In order to avoid conflicts with services that might be running on your host, hydra and postgress are started on custom ports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hydra-server: 63333 with the username &#34;alice&#34; and the password &#34;foobar&#34;&lt;/li&gt; &#xA; &lt;li&gt;postgresql: 64444&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that this is only ever meant as an ad-hoc way of executing Hydra during development. Please make use of the NixOS module for actually running Hydra in production.&lt;/p&gt; &#xA;&lt;h3&gt;Checking your patches&lt;/h3&gt; &#xA;&lt;p&gt;After making your changes, verify the test suite passes and perlcritic is still happy.&lt;/p&gt; &#xA;&lt;p&gt;Start by following the steps in &lt;a href=&#34;https://raw.githubusercontent.com/NixOS/hydra/master/#development-environment&#34;&gt;Development Environment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, you can run the tests and the perlcritic linter together with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix-shell&#xA;$ make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run a single test with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-shell&#xA;$ yath test ./t/foo/bar.t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can run just perlcritic with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-shell&#xA;$ make perlcritic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON API&lt;/h3&gt; &#xA;&lt;p&gt;You can also interface with Hydra through a JSON API. The API is defined in &lt;a href=&#34;https://raw.githubusercontent.com/NixOS/hydra/master/hydra-api.yaml&#34;&gt;hydra-api.yaml&lt;/a&gt; and you can test and explore via the &lt;a href=&#34;https://editor.swagger.io/?url=https://raw.githubusercontent.com/NixOS/hydra/master/hydra-api.yaml&#34;&gt;swagger editor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.org/hydra/manual/&#34;&gt;Hydra User&#39;s Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.wiki/wiki/Hydra&#34;&gt;Hydra on the NixOS Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nlewo/hydra-cli&#34;&gt;hydra-cli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RXV0Y5Bn-QQ&#34;&gt;Peter Simons - Hydra: Setting up your own build farm (NixOS)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Hydra is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/NixOS/hydra/master/COPYING&#34;&gt;GPL-3.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Icons provided free by &lt;a href=&#34;http://emojione.com&#34;&gt;EmojiOne&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-com/perl-IPC-LeaderBoard</title>
    <updated>2022-08-13T01:50:14Z</updated>
    <id>tag:github.com,2022-08-13:/binary-com/perl-IPC-LeaderBoard</id>
    <link href="https://github.com/binary-com/perl-IPC-LeaderBoard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/binary-com/perl-IPC-LeaderBoard&#34;&gt;&lt;img src=&#34;https://travis-ci.org/binary-com/perl-IPC-LeaderBoard.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binary-com/perl-IPC-LeaderBoard&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binary-com/perl-IPC-LeaderBoard/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;IPC::LeaderBoard - fast per-symbol online get/update information&lt;/p&gt; &#xA;&lt;h1&gt;VERSION&lt;/h1&gt; &#xA;&lt;p&gt;0.02&lt;/p&gt; &#xA;&lt;h1&gt;STATUS&lt;/h1&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use IPC::LeaderBoard;&#xA;&#xA;# in master-process&#xA;my $master = IPC::LeaderBoard::create(&#xA;    n_slots           =&amp;gt; 2,                          # number of symbols&#xA;    slot_shared_size  =&amp;gt; 4,                          # number integers per slot, concurrent access&#xA;    slot_private_size =&amp;gt; 2,                          # number integers per slot, non-concurrent access&#xA;    mmaped_file       =&amp;gt; &#34;/var/run/data/my.scores&#34;,  # mmaped file&#xA;);&#xA;# ... initialize data here&#xA;&#xA;# in slave processes&#xA;my $slave  = IPC::LeaderBoard::attach(&#xA;  # exactly the same parameters as for master&#xA;);&#xA;&#xA;my $leader_board = $slave; # or $master, does not matter&#xA;&#xA;# get shared and private arrays of integers for the 0-th slot&#xA;my ($shared, $private) = $leader_board-&amp;gt;read_slot(0);&#xA;&#xA;# update shared integers with values 1,2,3,4 and 0-th private integer&#xA;# with value 6&#xA;my $success = $leader_board-&amp;gt;update(0, [1, 2, 3, 4], 0 =&amp;gt; 6, 1 =&amp;gt; 8)&#xA;&#xA;# $shared = [1, 2, 3, 4], $private = [6, 8]&#xA;($shared, $private) = $leader_board-&amp;gt;read_slot(0);&#xA;&#xA;# update just private integer with index 1 with value 2&#xA;$leader_board-&amp;gt;update(0, 1 =&amp;gt; 2);&#xA;&#xA;# update just shared values of 0-th slot&#xA;my $success = $leader_board-&amp;gt;update(0, [1, 2, 3, 4]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;LeaderBoard uses shared memory IPC to fast set/get integers on arbitrary row, (slot) defined by it&#39;s index.&lt;/p&gt; &#xA;&lt;p&gt;There are the following assumptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;only one master is present&lt;/p&gt; &lt;p&gt;&lt;code&gt;create&lt;/code&gt; method dies, if it founds that some other master ownes shared memory (file lock is used for that).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;master is launched before slaves&lt;/p&gt; &lt;p&gt;&lt;code&gt;attach&lt;/code&gt; dies, if slave finds, that master-owner isn&#39;t present, or, if it presents, the masters provider/symbol information isn&#39;t actual. In the last case master should be restarted first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;there is no hot-deploy mechanism&lt;/p&gt; &lt;p&gt;Just restart master/slaves&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;read slot before update it&lt;/p&gt; &lt;p&gt;The vesion/generation pattern is used do detect, whether update has been successfull or not. Update failure means, some other &lt;code&gt;LeaderBoard&lt;/code&gt; instance updated the slot; you should re-read it and try uptate it again (if the update will be still actual after data refresh)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;no semantical difference between slave and master&lt;/p&gt; &lt;p&gt;Master was introduced to lock leadear board to prevent other masters connect to it and re-initialize (corrupt) data. After attach slave validates, that LeaderBoard is valid (i.e. number of slots, as well as the sizes of private and shared areas match to the declared).&lt;/p&gt; &lt;p&gt;Hence, master can be presented only by one instance, while slaves can be presented by multiple instances.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;slot data organization and consistency&lt;/p&gt; &lt;p&gt;A leaderboard is an array of slots of the same size:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  +------------------------------------------------------------------------+&#xA;  | slot 1                                                                 |&#xA;  +------------------------------------------------------------------------+&#xA;  | slot 2                                                                 |&#xA;  +------------------------------------------------------------------------+&#xA;  | ...                                                                    |&#xA;  +------------------------------------------------------------------------+&#xA;  | slot N                                                                 |&#xA;  +------------------------------------------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A slot is addressed by its index.&lt;/p&gt; &lt;p&gt;Each slot contains a spin-lock, a shared part, a generation field and a private part like&lt;/p&gt; &lt;p&gt;It is supposed, that only leader (independent for each slot) will update the shared part, while other competitors will update only own private parts, i.e.:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  |      |        shared part       |        |                         private part                         |&#xA;  | spin |                          | gene-  | process1           | process2           | process3           |&#xA;  | lock | shr1 | shr2 | ... | shrN | ration | p1 | p2 | ... | pN | p1 | p2 | ... | pN | p1 | p2 | ... | pN |&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;All values (shrX and pX) in the leaderboard are integer numbers. Only the current leader updates the shared part, and does that in safe manner (i.e. protected by spin-lock and generation). Each process can update its own private part of a slot.&lt;/p&gt; &lt;p&gt;Read or write for integer values (shr1, p1, ..) read/write &lt;strong&gt;atomicity&lt;/strong&gt; is guaranteed by &lt;a href=&#34;https://metacpan.org/pod/IPC::ScoreBoard&#34;&gt;IPC::ScoreBoard&lt;/a&gt;, which in the final, uses special CPU-instructions for that.&lt;/p&gt; &lt;p&gt;The SpinLock pattern guarantees the safety of shared part update, i.e. in the case of two or more concurrent write request, they will be done in sequential manner.&lt;/p&gt; &lt;p&gt;The Generation pattern guarantees that you update the most recent values in the shared part of the slot, i.e. if some process updated shared part of the slot, between slot read and update operations of the current process, than, the update request of the current process would fail. You have re-read the slot, and try to update it again, but after re-read the update might be not required.&lt;/p&gt; &lt;p&gt;Both SpinLock and Generation patterns guarantee, that you&#39;ll never can made inconsistent &lt;code&gt;update&lt;/code&gt;, or updating non-actual data.&lt;/p&gt; &lt;p&gt;In the same time, you might end up with the inconsistent &lt;code&gt;read_slot&lt;/code&gt; of the shared data: the individual values (integer) are consistent (atomic), but you they might belong to the different generations. There is an assumption in the &lt;code&gt;LeaderBoard&lt;/code&gt; design, that it is &lt;strong&gt;fine&lt;/strong&gt;: would you try to update the shared data, the &lt;code&gt;update&lt;/code&gt; will fail, hence, no any harm will occur. If you need to handle that, just check return value &lt;code&gt;update&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;There are no any guarantees for slot private data; but it isn&#39;t needed. The shared data should store information about leader, hence when a new leader arrives, it updates the information; or the current leader update it&#39;s information on the LeaderBoard in the appropriate slot. No data loss might occur.&lt;/p&gt; &lt;p&gt;When competitor (i.e. some process) updates private data, nobody else can update it (i.e. you shouldn&#39;t write progam such a way, that one process-competitor updates data of the other process-competitor), hence, private data cannot be corrupted if used properly.&lt;/p&gt; &lt;p&gt;The private data might be inconsistent on read (e.g. competitor1 reads private data of competitor2, while it is half-updated by competitor2); but that shoudl be &lt;strong&gt;insignificant for the sake of speed&lt;/strong&gt;. If it is significant, use shared memory for that, re-design your approach (e.g use additional slots) or use some other module.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The update process should be rather simple: &lt;code&gt;killall $slave_1, $slave_2, ... $master&lt;/code&gt; and then start all together. &lt;code&gt;create&lt;/code&gt; / &lt;code&gt;attach&lt;/code&gt; should be wrappend into &lt;code&gt;eval&lt;/code&gt; (or &lt;code&gt;Try::Tiny&lt;/code&gt; &amp;amp; friends), to repeat seveal attempts with some delay.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; method might fail, (i.e. it does not returns true), when it detects, that somebody else already has changed an row. It is assumed that no any harm in it. If needed the row can be refreshed (re-read), and the next update might be successfull.&lt;/p&gt; &#xA;&lt;p&gt;It is assumed, that if &lt;code&gt;read&lt;/code&gt; returs outdated data and the &lt;code&gt;update&lt;/code&gt; decision has been taken, than update will silently fail (return false), without any loud exceptions; so, the next read-update cycle might be successful, but probably, the updated values are already correct, so, no immediate update would occur.&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;binary.com, &lt;code&gt;&amp;lt;perl at binary.com&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BUGS&lt;/h1&gt; &#xA;&lt;p&gt;Please report any bugs or feature requests to &lt;a href=&#34;https://github.com/binary-com/perl-IPC-LeaderBoard/issues&#34;&gt;https://github.com/binary-com/perl-IPC-LeaderBoard/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE AND COPYRIGHT&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (C) 2016 binary.com&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the the Artistic License (2.0). You may obtain a copy of the full license at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.perlfoundation.org/artistic_license_2_0&#34;&gt;http://www.perlfoundation.org/artistic_license_2_0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any use, modification, and distribution of the Standard or Modified Versions is governed by this Artistic License. By using, modifying or distributing the Package, you accept this license. Do not use, modify, or distribute the Package, if you do not accept this license.&lt;/p&gt; &#xA;&lt;p&gt;If your Modified Version has been derived from a Modified Version made by someone other than you, you are nevertheless required to ensure that your Modified Version complies with the requirements of this license.&lt;/p&gt; &#xA;&lt;p&gt;This license does not grant you the right to use any trademark, service mark, tradename, or logo of the Copyright Holder.&lt;/p&gt; &#xA;&lt;p&gt;This license includes the non-exclusive, worldwide, free-of-charge patent license to make, have made, use, offer to sell, sell, import and otherwise transfer the Package with respect to any patent claims licensable by the Copyright Holder that are necessarily infringed by the Package. If you institute patent litigation (including a cross-claim or counterclaim) against any party alleging that the Package constitutes direct or contributory patent infringement, then this Artistic License to you shall terminate on the date that such litigation is filed.&lt;/p&gt; &#xA;&lt;p&gt;Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS &#34;AS IS&#39; AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tapper/Task-Tapper-Server-Automation</title>
    <updated>2022-08-13T01:50:14Z</updated>
    <id>tag:github.com,2022-08-13:/tapper/Task-Tapper-Server-Automation</id>
    <link href="https://github.com/tapper/Task-Tapper-Server-Automation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tapper - dependencies for automation layer&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>