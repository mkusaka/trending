<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-11T01:57:23Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PARALLELIO/genf90</title>
    <updated>2022-06-11T01:57:23Z</updated>
    <id>tag:github.com,2022-06-11:/PARALLELIO/genf90</id>
    <link href="https://github.com/PARALLELIO/genf90" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for templating Fortran90 code over types&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>dangerous/deploy-script</title>
    <updated>2022-06-11T01:57:23Z</updated>
    <id>tag:github.com,2022-06-11:/dangerous/deploy-script</id>
    <link href="https://github.com/dangerous/deploy-script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy config file based deployment with git and rsync&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Example config file&lt;/h2&gt; &#xA;&lt;pre&gt;module = example&#xA;path = /usr/local/www&#xA;&#xA;owner = deploy&#xA;group = apache&#xA;&#xA;includes = tmp/cache/index.htmlmod&#xA;excludes = sql /tests tmp/cache/*&#xA;&#xA;ssh_user = deploy&#xA;&#xA;[staging]&#xA;hosts = bulldog dalmatian&#xA;&#xA;[live]&#xA;hosts = poodle labrador&lt;/pre&gt; &#xA;&lt;h2&gt;Explanation&lt;/h2&gt; &#xA;&lt;p&gt;The config file should be stored in /configs. The reason I used a subdirectory is to prevent the shell from autocompleting the name of the config file ... as I would prefer people would be explicit about which module they are deploying.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;module - the name of the module.&lt;/li&gt; &#xA; &lt;li&gt;path - the path on the server where the module resides.&lt;/li&gt; &#xA; &lt;li&gt;owner (optional) - chown the module to owner before deploying&lt;/li&gt; &#xA; &lt;li&gt;group (optional) - chgrp the module to group before deploying&lt;/li&gt; &#xA; &lt;li&gt;includes (optional) - rsync --include&lt;/li&gt; &#xA; &lt;li&gt;excludes (optional) - rsync --exclude&lt;/li&gt; &#xA; &lt;li&gt;ssh_user - the user used to connect to the host&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[environment] sections&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hosts - a space delimited list of hosts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;deploy (-t TAG | -b BRANCH) -n example&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(--tag|-t) TAG - Checkout tag TAG&lt;/li&gt; &#xA; &lt;li&gt;(--branch|-b) BRANCH - Checkout branch BRANCH&lt;/li&gt; &#xA; &lt;li&gt;(--environment|-e) ENVIRONMENT - Use environment ENVIRONMENT (e.g. live, staging)&lt;/li&gt; &#xA; &lt;li&gt;(--dry-run|-d|-n) - Dry-run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a repo to the config file so if the module has not been cloned, the script can do it&lt;/li&gt; &#xA; &lt;li&gt;Add a way to have per-environment path&lt;/li&gt; &#xA; &lt;li&gt;Add a way to have per-host users&lt;/li&gt; &#xA; &lt;li&gt;Whether to --delete should be an option&lt;/li&gt; &#xA; &lt;li&gt;Should be able to pass alternative options to rsync&lt;/li&gt; &#xA; &lt;li&gt;have a defaults ini file&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>goblin/hercules_controller</title>
    <updated>2022-06-11T01:57:23Z</updated>
    <id>tag:github.com,2022-06-11:/goblin/hercules_controller</id>
    <link href="https://github.com/goblin/hercules_controller" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple script that controlls MPlayer with a Hercules DJ Control MP3 - a USB MIDI controller&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is hercules_controller, a simple script to control mplayer with a hercules dj control mp3.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s quite hacky and likely not very stable or tested, but feel free to use and/or modify it to your needs - it&#39;s meant to be quite simple, as it&#39;s only really a small perl script.&lt;/p&gt; &#xA;&lt;p&gt;The controls might look funny, but that&#39;s kinda what I currently like :-)&lt;/p&gt; &#xA;&lt;p&gt;Requires a CPAN module MIDI::ALSA, as well as hdj_mod kernel module (driver for the controller).&lt;/p&gt; &#xA;&lt;p&gt;USAGE&lt;/p&gt; &#xA;&lt;p&gt;To use it, first create a named pipe like such:&lt;/p&gt; &#xA;&lt;p&gt;$ mkfifo ~/.mplayer/pipe&lt;/p&gt; &#xA;&lt;p&gt;then put this in ~/.mplayer/config:&lt;/p&gt; &#xA;&lt;p&gt;input=file=/home/goblin/.mplayer/pipe&lt;/p&gt; &#xA;&lt;p&gt;Then run the script like this:&lt;/p&gt; &#xA;&lt;p&gt;$ ./mplayer_ctrl.pl ~/.mplayer/pipe 32&lt;/p&gt; &#xA;&lt;p&gt;where 32 is the ALSA-MIDI number of your hercules controller. Optionally you can skip the last argument and manually connect the script to your hercules using something like qjackctl&#39;s Connections/ALSA tab.&lt;/p&gt; &#xA;&lt;p&gt;DONATIONS If you really like it, you can donate some bitcoins to: 18BuNrN9aJ1zKBF9XSNAnicRDMdHNHKhkk&lt;/p&gt;</summary>
  </entry>
</feed>