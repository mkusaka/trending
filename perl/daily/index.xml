<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-31T01:37:34Z</updated>
  <subtitle>Daily Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>koknat/callGraph</title>
    <updated>2022-08-31T01:37:34Z</updated>
    <id>tag:github.com,2022-08-31:/koknat/callGraph</id>
    <link href="https://github.com/koknat/callGraph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multi-language tool which parses source code for function definitions and calls&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Generate static call graphs for multiple languages&lt;/h2&gt; &#xA;&lt;p&gt;A call graph shows how functions call each other within a program.&lt;br&gt; Each oval represents a function, and each arrow indicates a function call.&lt;br&gt; In the diagram below, the main program is represented by node MAIN. It calls 6 functions, one of which calls 9 other functions.&lt;br&gt; &lt;br&gt; &#39;callGraph&#39; parses source code for function definitions and calls, generates a call graph image, and displays it on screen.&lt;br&gt; Supported languages are: awk, bash, basic, dart, fortran, go, lua, javascript, julia, kotlin, matlab, perl, pascal, php, python, R, raku, ruby, rust, scala, swift, and tcl.&lt;br&gt; &lt;br&gt; c/c++/java are not supported, since their complex and varied syntax requires heavy machinery.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koknat/callGraph/main/callGraph.png&#34; alt=&#34;&amp;quot;Sample output&amp;quot;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;&#x9;callGraph  &amp;lt;files&amp;gt;  &amp;lt;options&amp;gt;&#xA;&#xA;&#x9;If your script calls helper modules, and you want the call graph to display the modules&#39; functions,&#xA;&#x9;&#x9;list the modules explicitly on the command line:&#xA;&#x9;callGraph script.pl path/moduleA.pm path/moduleB.pm&#xA;&#x9;&#xA;Options:&#xA;&#x9;-language &amp;lt;lang&amp;gt;           By default, filename extensions are parsed for .pl .pm .tcl .py, etc.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   If those are not found, the first line of the script (#! shebang) is inspected.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   If neither of those give clues, use this option to specify &#39;pl&#39;, &#39;tcl&#39;, &#39;py&#39;, etc&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   This option is required if a directory is scanned&#xA;&#xA;&#x9;-start &amp;lt;function&amp;gt;          Specify function(s) as starting point instead of the main code.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   These are displayed in green.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   This is useful when parsing a large script, as the generated graph can be huge.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   In addition, the calls leading to this function are charted.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   Functions which are not reachable from one of the starting points&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; are not charted.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   -start __MAIN__  can be very useful when multiple source files&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; are specified on the command line&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  The filename can be included as well:&#xA;                            &#x9;&#x9;&#x9;&#x9;&#x9;-start &amp;lt;file&amp;gt;:&amp;lt;function&amp;gt;&#xA;&#xA;&#x9;-ignore &amp;lt;regex&amp;gt;            Specify function(s) to ignore.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   This is useful when pruning the output of a large graph.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   In particular, use it to remove logging or other helper functions which are&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; called by many functions, and only clutter up the graph.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   To ignore multiple functions, use this regex format:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   -ignore &#39;(abc|xyz)&#39;&#xA;&#xA;&#x9;-output &amp;lt;filename&amp;gt;         Specify an output filename&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   By default, the .png file is named according to the first filename.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   If a filename ending in .dot is given,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; only the intermediate .dot file is created.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   If a filename ending in .svg is given, svg format is used&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   If a filename ending in .pdf is given, pdf format is used&#xA;&#xA;&#x9;-noShow                    By default, the .png file is displayed.  This option prevents that behavior.&#xA;&#xA;&#x9;-fullPath                  By default, the script strips off the path name of the input file(s).&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   This option prevents that behavior.&#xA;&#xA;&#x9;-writeSubsetCode &amp;lt;file&amp;gt;    Create an output source code file which includes only the functions&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; included in the graph.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   This can be useful when trying to comprehend a large legacy code.&#xA;&#xA;&#x9;-ymlOut &amp;lt;file&amp;gt;             Create an output YAML file which describes the following for each function:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   * which functions call it&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   * which functions it calls&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   This can be useful to create your own automation or custom formatting&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &#xA;&#x9;-ymlIn &amp;lt;file&amp;gt;              Use your intermediate file instead of parsing source files&#xA;&#xA;&#x9;-verbose                   Provides 2 additional functionalities:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   1) Displays the external scripts referenced within each function&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   2) For Perl/TCL, attempts to list the global variables&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;used in each function call in the graph.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Global variables are arguably not the best design paradigm,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;but they are found extensively in real-world legacy scripts.&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Perl:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &#39;my&#39; variables will affect this determination (use strict).&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Does not distinguish between $var, @var and %var.&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  TCL:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Variables declared as &#39;global&#39; but not used, are marked with a &#39;*&#39;&#xA;&#xA;&#xA;Usage examples:&#xA;&#x9;callGraph  example.pl example_helper_lib.pm&#xA;&#x9;callGraph  example.py&#xA;&#x9;callGraph  &amp;lt;directory&amp;gt; -language &#39;go&#39;&#xA;&#xA;Algorithm:&#xA;&#x9;callGraph uses a simple line-by-line algorithm, using regexes to find function definitions and calls.&#xA;&#x9;Function definitions can be detected easily, since they start with identifiers such as:&#xA;&#x9;&#x9;&#39;sub&#39;, &#39;def&#39;, &#39;proc&#39;, &#39;function&#39;, &#39;func&#39;, &#39;fun&#39;, or &#39;fn&#39;&#xA;&#x9;Function definitions end with &#39;}&#39; or &#39;end&#39; at the same nesting level as the definition.&#xA;&#x9;Function calls are a bit more tricky, since built-in function calls look exactly like user function calls.&#xA;&#x9;&#x9;To solve this, the algorithm first assumes that anything matching &#39;word(...)&#39; is a function call,&#xA;&#x9;&#x9;and then discards any calls which do not have corresponding definitions.&#xA;&#x9;For example, Perl:&#xA;&#x9;&#x9;sub funcA {&#xA;&#x9;&#x9;&#x9;...&#xA;&#x9;&#x9;&#x9;if ($x) {&#xA;&#x9;&#x9;&#x9;&#x9;print($y);&#xA;&#x9;&#x9;&#x9;&#x9;funcB($y);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;...&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;sub funcB {&#xA;&#x9;&#x9;&#x9;...&#xA;&#x9;&#x9;}&#xA;&#x9;Since this is not a true parser, the formatting must be consistent so that nesting can be determined.&#xA;&#x9;If your Perl script does not follow this rule, consider running it through &#39;perltidy&#39; first.&#xA;&#x9;Also, don&#39;t expect miracles such as parsing dynamic function calls.&#xA;&#x9;Caveats aside, it seems to work well on garden-variety scripts spanning tens of thousands of lines,&#xA;&#x9;&#x9;and has helped me unravel large pieces of legacy code to implement urgent bug fixes.&#xA;    &#xA;Acknowledgements:&#xA;    This code borrows core functionality from https://github.com/cobber/perl_call_graph&#xA;&#xA;Requirements:&#xA;    GraphViz and the Perl GraphViz library must be installed:&#xA;        sudo apt install graphviz&#xA;        sudo apt install make&#xA;        sudo cpan install GraphViz&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>rsnapshot/rsnapshot</title>
    <updated>2022-08-31T01:37:34Z</updated>
    <id>tag:github.com,2022-08-31:/rsnapshot/rsnapshot</id>
    <link href="https://github.com/rsnapshot/rsnapshot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a tool for backing up your data using rsync (if you want to get help, use https://lists.sourceforge.net/lists/listinfo/rsnapshot-discuss)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RSNAPSHOT &lt;a href=&#34;https://travis-ci.org/rsnapshot/rsnapshot&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/rsnapshot/rsnapshot.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;rsnapshot comes with ABSOLUTELY NO WARRANTY. This is free software, and you are welcome to redistribute it under certain conditions. See the GNU General Public Licence for details.&lt;/p&gt; &#xA;&lt;p&gt;rsnapshot is a filesystem snapshot utility based on rsync. rsnapshot makes it easy to make periodic snapshots of local machines, and remote machines over ssh. The code makes extensive use of hard links whenever possible, to greatly reduce the disk space required.&lt;/p&gt; &#xA;&lt;p&gt;It is written entirely in perl with no module dependencies, and has been tested with versions 5.004 through 5.24.3. It should work on any reasonably modern UNIX compatible OS. It has been tested successfully on the following operating systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian: 3.0 (woody), 9.9 (stretch)&lt;/li&gt; &#xA; &lt;li&gt;Redhat: 7.x, 8.0&lt;/li&gt; &#xA; &lt;li&gt;RedHat Enterprise Linux: 3.0 ES, 5, 6, 7&lt;/li&gt; &#xA; &lt;li&gt;Fedora Core: 1, 3&lt;/li&gt; &#xA; &lt;li&gt;Fedora: 17, 18&lt;/li&gt; &#xA; &lt;li&gt;CentOS: 3, 4, 5, 6, 7&lt;/li&gt; &#xA; &lt;li&gt;WhiteBox Enterprise Linux 3.0&lt;/li&gt; &#xA; &lt;li&gt;Slackware 9.0&lt;/li&gt; &#xA; &lt;li&gt;SuSE: 9.0&lt;/li&gt; &#xA; &lt;li&gt;Gentoo Linux&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD 4.9-STABLE&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD 3.x&lt;/li&gt; &#xA; &lt;li&gt;Solaris 8 (SPARC and x86)&lt;/li&gt; &#xA; &lt;li&gt;Mac OS X&lt;/li&gt; &#xA; &lt;li&gt;IRIX 6.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If this is your first experience with rsnapshot, you may want to read the man page which will give you a detailed walk-through on how to get rsnapshot up and running and also serve as a reference of all available commands.&lt;/p&gt; &#xA;&lt;p&gt;If you are upgrading from version 1.1.6 or earlier, make sure you read the file &lt;a href=&#34;https://raw.githubusercontent.com/rsnapshot/rsnapshot/master/docs/Upgrading_from_1.1&#34;&gt;Upgrading from 1.1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For installation or upgrade instructions please read the &lt;a href=&#34;https://raw.githubusercontent.com/rsnapshot/rsnapshot/master/INSTALL.md&#34;&gt;INSTALL&lt;/a&gt; doc.&lt;/p&gt; &#xA;&lt;p&gt;If you want to work on improving rsnapshot please read the &lt;a href=&#34;https://raw.githubusercontent.com/rsnapshot/rsnapshot/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; doc.&lt;/p&gt; &#xA;&lt;p&gt;If you want to ask a question or have a general discussion use the &lt;a href=&#34;https://lists.sourceforge.net/lists/listinfo/rsnapshot-discuss&#34;&gt;Mailing List&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;COMPATIBILITY NOTICES (Please read)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Note that systems which use GNU cp version 5.9 or later will have problems with rsnapshot versions up to and including 1.2.3, if &lt;code&gt;cmd_cp&lt;/code&gt; is enabled (and points at the later gnu cp). This is no longer a problem since rsnapshot 1.2.9, as it strips off trailing slashes when running cp.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have rsync version 2.5.7 or later, you may want to enable the link_dest parameter in the rsnapshot.conf file.&lt;/p&gt; &lt;p&gt;If you are running Linux but do not have the problem above, you should enable the &lt;code&gt;cmd_cp&lt;/code&gt; parameter in rsnapshot.conf (especially if you do not have link_dest enabled).&lt;/p&gt; &lt;p&gt;Be advised that currently &lt;code&gt;link_dest&lt;/code&gt; doesn&#39;t do well with unavailable hosts. Specifically, if a remote host is unavailable using &lt;code&gt;link_dest&lt;/code&gt;, there will be no latest backup of that machine, and a full re-sync will be required when it becomes available. Using the other methods, the last good snapshot will be preserved, preventing the need for a re-sync. We hope to streamline this in the future.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;CONFIGURATION&lt;/h2&gt; &#xA;&lt;p&gt;Once you have installed rsnapshot, you will need to configure it. The default configuration file is /etc/rsnapshot.conf, although the exact path may be different depending on how the program was installed. If this file does not exist, copy &lt;code&gt;/etc/rsnapshot.conf.default&lt;/code&gt; over to &lt;code&gt;/etc/rsnapshot.conf&lt;/code&gt; and edit it to suit your tastes. See the man page for the full list of configuration options.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;/etc/rsnapshot.conf&lt;/code&gt; contains your chosen settings, do a quick sanity check to make sure everything is ready to go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rsnapshot configtest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this works, you can see essentially what will happen when you run it for real by executing the following command (where interval is &lt;code&gt;alpha&lt;/code&gt;, &lt;code&gt;beta&lt;/code&gt;, &lt;code&gt;etc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rsnapshot -t [interval]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you are happy with everything, the final step is to setup a cron job to automate your backups. Here is a quick example which makes backups every four hours, and beta backups for a week:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 */4 * * *     /usr/local/bin/rsnapshot alpha&#xA;50 23 * * *     /usr/local/bin/rsnapshot beta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the previous example, there will be six &lt;code&gt;alpha&lt;/code&gt; snapshots taken each day (at 0,4,8,12,16, and 20 hours). There will also be beta snapshots taken every night at 11:50PM. The number of snapshots that are saved depends on the &#34;interval&#34; settings in /etc/rsnapshot.conf.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;interval&#x9;alpha&#x9;&#x9;6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that every time &lt;code&gt;rsnapshot alpha&lt;/code&gt; is run, it will make a new snapshot, rotate the old ones, and retain the most recent six (&lt;code&gt;alpha.0&lt;/code&gt; - &lt;code&gt;alpha.5&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you prefer instead to have three levels of backups (which we&#39;ll call &lt;code&gt;beta&lt;/code&gt;, &lt;code&gt;gamma&lt;/code&gt; and &lt;code&gt;delta&lt;/code&gt;), you might set up cron like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;00 00 * * *     /usr/local/bin/rsnapshot beta&#xA;00 23 * * 6     /usr/local/bin/rsnapshot gamma&#xA;00 22 1 * *     /usr/local/bin/rsnapshot delta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This specifies a &lt;code&gt;beta&lt;/code&gt; rsnapshot at midnight, a &lt;code&gt;gamma&lt;/code&gt; snapshot on Saturdays at 11:00pm and a &lt;code&gt;delta&lt;/code&gt; rsnapshot at 10pm on the first day of each month.&lt;/p&gt; &#xA;&lt;p&gt;Note that the backups are done from the highest interval first (in this case &lt;code&gt;delta&lt;/code&gt;) and go down to the lowest interval. If you are not having cron invoke the &lt;code&gt;alpha&lt;/code&gt; snapshot interval, then you must also ensure that &lt;code&gt;alpha&lt;/code&gt; is not listed as one of your intervals in rsnapshot.conf (for example, comment out alpha, so that &lt;code&gt;beta&lt;/code&gt; becomes the lowest interval).&lt;/p&gt; &#xA;&lt;p&gt;Remember that it is only the lowest interval which actually does the rsync to back up the relevant source directories, the higher intervals just rotate snapshots around. Unless you have enabled &lt;code&gt;sync_first&lt;/code&gt; in your configuration-file, in which case only the &lt;code&gt;sync&lt;/code&gt; pseudo-interval does the actual rsync, and all real intervals just rotate snapshots.&lt;/p&gt; &#xA;&lt;p&gt;For the full documentation, type &lt;code&gt;man rsnapshot&lt;/code&gt; once it is installed. The &lt;a href=&#34;https://raw.githubusercontent.com/rsnapshot/rsnapshot/master/docs/HOWTOs/rsnapshot-HOWTO.en.html&#34;&gt;HOWTO&lt;/a&gt; also has a detailed overview of how to install and configure rsnapshot, and things like how to set it up so users can restore their own files.&lt;/p&gt; &#xA;&lt;p&gt;If you plan on using the &lt;code&gt;backup_script&lt;/code&gt; parameter in your backup scheme, take a look at the &lt;code&gt;utils/&lt;/code&gt;-directory in the source distribution for several example scripts. The &lt;code&gt;utils/rsnapreport.pl&lt;/code&gt; script is well worth a look.&lt;/p&gt; &#xA;&lt;h2&gt;AUTHORS&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/rsnapshot/rsnapshot/master/AUTHORS&#34;&gt;AUTHORS&lt;/a&gt; file for the complete list of contributors.&lt;/p&gt;</summary>
  </entry>
</feed>