<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-12T02:17:09Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>brendangregg/FlameGraph</title>
    <updated>2022-06-12T02:17:09Z</updated>
    <id>tag:github.com,2022-06-12:/brendangregg/FlameGraph</id>
    <link href="https://github.com/brendangregg/FlameGraph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stack trace visualizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flame Graphs visualize profiled code&lt;/h1&gt; &#xA;&lt;p&gt;Main Website: &lt;a href=&#34;http://www.brendangregg.com/flamegraphs.html&#34;&gt;http://www.brendangregg.com/flamegraphs.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example (click to zoom):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg&#34;&gt;&lt;img src=&#34;http://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click a box to zoom the Flame Graph to this stack frame only. To search and highlight all stack frames matching a regular expression, click the &lt;em&gt;search&lt;/em&gt; button in the upper right corner or press Ctrl-F. By default, search is case sensitive, but this can be toggled by pressing Ctrl-I or by clicking the &lt;em&gt;ic&lt;/em&gt; button in the upper right corner.&lt;/p&gt; &#xA;&lt;p&gt;Other sites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Flame Graph article in ACMQ and CACM: &lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2927301&#34;&gt;http://queue.acm.org/detail.cfm?id=2927301&lt;/a&gt; &lt;a href=&#34;http://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/abstract&#34;&gt;http://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/abstract&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU profiling using Linux perf_events, DTrace, SystemTap, or ktap: &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html&#34;&gt;http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU profiling using XCode Instruments: &lt;a href=&#34;http://schani.wordpress.com/2012/11/16/flame-graphs-for-instruments/&#34;&gt;http://schani.wordpress.com/2012/11/16/flame-graphs-for-instruments/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU profiling using Xperf.exe: &lt;a href=&#34;http://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/&#34;&gt;http://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Memory profiling: &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html&#34;&gt;http://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other examples, updates, and news: &lt;a href=&#34;http://www.brendangregg.com/flamegraphs.html#Updates&#34;&gt;http://www.brendangregg.com/flamegraphs.html#Updates&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Flame graphs can be created in three steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Capture stacks&lt;/li&gt; &#xA; &lt;li&gt;Fold stacks&lt;/li&gt; &#xA; &lt;li&gt;flamegraph.pl&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;1. Capture stacks&lt;/h1&gt; &#xA;&lt;p&gt;Stack samples can be captured using Linux perf_events, FreeBSD pmcstat (hwpmc), DTrace, SystemTap, and many other profilers. See the stackcollapse-* converters.&lt;/p&gt; &#xA;&lt;h3&gt;Linux perf_events&lt;/h3&gt; &#xA;&lt;p&gt;Using Linux perf_events (aka &#34;perf&#34;) to capture 60 seconds of 99 Hertz stack samples, both user- and kernel-level stacks, all processes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# perf record -F 99 -a -g -- sleep 60&#xA;# perf script &amp;gt; out.perf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now only capturing PID 181:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# perf record -F 99 -p 181 -g -- sleep 60&#xA;# perf script &amp;gt; out.perf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DTrace&lt;/h3&gt; &#xA;&lt;p&gt;Using DTrace to capture 60 seconds of kernel stacks at 997 Hertz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# dtrace -x stackframes=100 -n &#39;profile-997 /arg0/ { @[stack()] = count(); } tick-60s { exit(0); }&#39; -o out.kern_stacks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using DTrace to capture 60 seconds of user-level stacks for PID 12345 at 97 Hertz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# dtrace -x ustackframes=100 -n &#39;profile-97 /pid == 12345 &amp;amp;&amp;amp; arg1/ { @[ustack()] = count(); } tick-60s { exit(0); }&#39; -o out.user_stacks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;60 seconds of user-level stacks, including time spent in-kernel, for PID 12345 at 97 Hertz:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# dtrace -x ustackframes=100 -n &#39;profile-97 /pid == 12345/ { @[ustack()] = count(); } tick-60s { exit(0); }&#39; -o out.user_stacks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Switch &lt;code&gt;ustack()&lt;/code&gt; for &lt;code&gt;jstack()&lt;/code&gt; if the application has a ustack helper to include translated frames (eg, node.js frames; see: &lt;a href=&#34;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time/&#34;&gt;http://dtrace.org/blogs/dap/2012/01/05/where-does-your-node-program-spend-its-time/&lt;/a&gt;). The rate for user-level stack collection is deliberately slower than kernel, which is especially important when using &lt;code&gt;jstack()&lt;/code&gt; as it performs additional work to translate frames.&lt;/p&gt; &#xA;&lt;h1&gt;2. Fold stacks&lt;/h1&gt; &#xA;&lt;p&gt;Use the stackcollapse programs to fold stack samples into single lines. The programs provided are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse.pl&lt;/code&gt;: for DTrace stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-perf.pl&lt;/code&gt;: for Linux perf_events &#34;perf script&#34; output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-pmc.pl&lt;/code&gt;: for FreeBSD pmcstat -G stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-stap.pl&lt;/code&gt;: for SystemTap stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-instruments.pl&lt;/code&gt;: for XCode Instruments&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-vtune.pl&lt;/code&gt;: for Intel VTune profiles&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-ljp.awk&lt;/code&gt;: for Lightweight Java Profiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-jstack.pl&lt;/code&gt;: for Java jstack(1) output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-gdb.pl&lt;/code&gt;: for gdb(1) stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-go.pl&lt;/code&gt;: for Golang pprof stacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-vsprof.pl&lt;/code&gt;: for Microsoft Visual Studio profiles&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stackcollapse-wcp.pl&lt;/code&gt;: for wallClockProfiler output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;For perf_events:&#xA;$ ./stackcollapse-perf.pl out.perf &amp;gt; out.folded&#xA;&#xA;For DTrace:&#xA;$ ./stackcollapse.pl out.kern_stacks &amp;gt; out.kern_folded&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;unix`_sys_sysenter_post_swapgs 1401&#xA;unix`_sys_sysenter_post_swapgs;genunix`close 5&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf 85&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;c2audit`audit_closef 26&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;c2audit`audit_setf 5&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`audit_getstate 6&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`audit_unfalloc 2&#xA;unix`_sys_sysenter_post_swapgs;genunix`close;genunix`closeandsetf;genunix`closef 48&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;3. flamegraph.pl&lt;/h1&gt; &#xA;&lt;p&gt;Use flamegraph.pl to render a SVG.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./flamegraph.pl out.kern_folded &amp;gt; kernel.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An advantage of having the folded input file (and why this is separate to flamegraph.pl) is that you can use grep for functions of interest. Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ grep cpuid out.kern_folded | ./flamegraph.pl &amp;gt; cpuid.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Provided Examples&lt;/h1&gt; &#xA;&lt;h3&gt;Linux perf_events&lt;/h3&gt; &#xA;&lt;p&gt;An example output from Linux &#34;perf script&#34; is included, gzip&#39;d, as example-perf-stacks.txt.gz. The resulting flame graph is example-perf.svg:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/example-perf.svg&#34;&gt;&lt;img src=&#34;http://www.brendangregg.com/FlameGraphs/example-perf.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can create this using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gunzip -c example-perf-stacks.txt.gz | ./stackcollapse-perf.pl --all | ./flamegraph.pl --color=java --hash &amp;gt; example-perf.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This shows my typical workflow: I&#39;ll gzip profiles on the target, then copy them to my laptop for analysis. Since I have hundreds of profiles, I leave them gzip&#39;d!&lt;/p&gt; &#xA;&lt;p&gt;Since this profile included Java, I used the flamegraph.pl --color=java palette. I&#39;ve also used stackcollapse-perf.pl --all, which includes all annotations that help flamegraph.pl use separate colors for kernel and user level code. The resulting flame graph uses: green == Java, yellow == C++, red == user-mode native, orange == kernel.&lt;/p&gt; &#xA;&lt;p&gt;This profile was from an analysis of vert.x performance. The benchmark client, wrk, is also visible in the flame graph.&lt;/p&gt; &#xA;&lt;h3&gt;DTrace&lt;/h3&gt; &#xA;&lt;p&gt;An example output from DTrace is also included, example-dtrace-stacks.txt, and the resulting flame graph, example-dtrace.svg:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/example-dtrace.svg&#34;&gt;&lt;img src=&#34;http://www.brendangregg.com/FlameGraphs/example-dtrace.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can generate this using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./stackcollapse.pl example-stacks.txt | ./flamegraph.pl &amp;gt; example.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This was from a particular performance investigation: the Flame Graph identified that CPU time was spent in the lofs module, and quantified that time.&lt;/p&gt; &#xA;&lt;h1&gt;Options&lt;/h1&gt; &#xA;&lt;p&gt;See the USAGE message (--help) for options:&lt;/p&gt; &#xA;&lt;p&gt;USAGE: ./flamegraph.pl [options] infile &amp;gt; outfile.svg&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--title TEXT     # change title text&#xA;--subtitle TEXT  # second level title (optional)&#xA;--width NUM      # width of image (default 1200)&#xA;--height NUM     # height of each frame (default 16)&#xA;--minwidth NUM   # omit smaller functions (default 0.1 pixels)&#xA;--fonttype FONT  # font type (default &#34;Verdana&#34;)&#xA;--fontsize NUM   # font size (default 12)&#xA;--countname TEXT # count type label (default &#34;samples&#34;)&#xA;--nametype TEXT  # name type label (default &#34;Function:&#34;)&#xA;--colors PALETTE # set color palette. choices are: hot (default), mem,&#xA;                 # io, wakeup, chain, java, js, perl, red, green, blue,&#xA;                 # aqua, yellow, purple, orange&#xA;--bgcolors COLOR # set background colors. gradient choices are yellow&#xA;                 # (default), blue, green, grey; flat colors use &#34;#rrggbb&#34;&#xA;--hash           # colors are keyed by function name hash&#xA;--cp             # use consistent palette (palette.map)&#xA;--reverse        # generate stack-reversed flame graph&#xA;--inverted       # icicle graph&#xA;--flamechart     # produce a flame chart (sort by time, do not merge stacks)&#xA;--negate         # switch differential hues (blue&amp;lt;-&amp;gt;red)&#xA;--notes TEXT     # add notes comment in SVG (for debugging)&#xA;--help           # this message&#xA;&#xA;eg,&#xA;./flamegraph.pl --title=&#34;Flame Graph: malloc()&#34; trace.txt &amp;gt; graph.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As suggested in the example, flame graphs can process traces of any event, such as malloc()s, provided stack traces are gathered.&lt;/p&gt; &#xA;&lt;h1&gt;Consistent Palette&lt;/h1&gt; &#xA;&lt;p&gt;If you use the &lt;code&gt;--cp&lt;/code&gt; option, it will use the $colors selection and randomly generate the palette like normal. Any future flamegraphs created using the &lt;code&gt;--cp&lt;/code&gt; option will use the same palette map. Any new symbols from future flamegraphs will have their colors randomly generated using the $colors selection.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t like the palette, just delete the palette.map file.&lt;/p&gt; &#xA;&lt;p&gt;This allows your to change your colorscheme between flamegraphs to make the differences REALLY stand out.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Say we have 2 captures, one with a problem, and one when it was working (whatever &#34;it&#34; is):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat working.folded | ./flamegraph.pl --cp &amp;gt; working.svg&#xA;# this generates a palette.map, as per the normal random generated look.&#xA;&#xA;cat broken.folded | ./flamegraph.pl --cp --colors mem &amp;gt; broken.svg&#xA;# this svg will use the same palette.map for the same events, but a very&#xA;# different colorscheme for any new events.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at the demo directory for an example:&lt;/p&gt; &#xA;&lt;p&gt;palette-example-working.svg&lt;br&gt; palette-example-broken.svg&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>holbertonschool/Betty</title>
    <updated>2022-06-12T02:17:09Z</updated>
    <id>tag:github.com,2022-06-12:/holbertonschool/Betty</id>
    <link href="https://github.com/holbertonschool/Betty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Holberton-style C code checker written in Perl&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Betty&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/holbertonschool/Betty&#34;&gt;&lt;img src=&#34;https://travis-ci.org/holbertonschool/Betty.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Run the script &lt;code&gt;install.sh&lt;/code&gt; with &lt;strong&gt;sudo privileges&lt;/strong&gt; to install &lt;code&gt;betty-style&lt;/code&gt; and &lt;code&gt;betty-doc&lt;/code&gt; on your computer, along with the following manuals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;betty(1)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;betty-style(1)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;betty-doc(1)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Please visit the &lt;a href=&#34;https://github.com/holbertonschool/Betty/wiki&#34;&gt;Betty Wiki&lt;/a&gt; for the full specifications of Betty coding and documentation styles.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also find some references and some tools for common text editors such as Emacs and Atom.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to check if your code/doc fits the Betty Style (mostly inspired from the Linux Kernel style):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellSession&#34;&gt;betty-style file1 [file2 [file3 [...]]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellSession&#34;&gt;betty-doc file1 [file2 [file3 [...]]]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>htrgouvea/nipe</title>
    <updated>2022-06-12T02:17:09Z</updated>
    <id>tag:github.com,2022-06-12:/htrgouvea/nipe</id>
    <link href="https://github.com/htrgouvea/nipe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An engine to make Tor network your default gateway&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://heitorgouvea.me/images/projects/nipe/logo.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;An engine to make Tor Network your default gateway.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/htrgouvea/nipe/master/LICENSE.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/htrgouvea/nipe/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/version-0.9.5-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;p&gt;The Tor project allows users to surf the Internet, chat and send instant messages anonymously through its own mechanism. It is used by a wide variety of people, companies and organizations, both for lawful activities and for other illicit purposes. Tor has been largely used by intelligence agencies, hacking groups, criminal activities and even ordinary users who care about their privacy in the digital world.&lt;/p&gt; &#xA;&lt;p&gt;Nipe is an engine, developed in Perl, that aims on making the Tor network your default network gateway. Nipe can route the traffic from your machine to the Internet through Tor network, so you can surf the Internet having a more formidable stance on privacy and anonymity in cyberspace.&lt;/p&gt; &#xA;&lt;p&gt;Currently, only IPv4 is supported by Nipe, but we are working on a solution that adds IPv6 support. Also, only traffic other than DNS requests destined for local and/or loopback addresses is not trafficked through Tor. All non-local UDP/ICMP traffic is also blocked by the Tor project.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Download and install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  # Download&#xA;  $ git clone https://github.com/htrgouvea/nipe &amp;amp;&amp;amp; cd nipe&#xA;    &#xA;  # Install libs and dependencies&#xA;  $ sudo cpan install Try::Tiny Config::Simple JSON&#xA;&#xA;  # Nipe must be run as root&#xA;  $ perl nipe.pl install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Commands:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  COMMAND          FUNCTION&#xA;  install          Install dependencies&#xA;  start            Start routing&#xA;  stop             Stop routing&#xA;  restart          Restart the Nipe circuit&#xA;  status           See status&#xA;&#xA;  Examples:&#xA;&#xA;  perl nipe.pl install&#xA;  perl nipe.pl start&#xA;  perl nipe.pl stop&#xA;  perl nipe.pl restart&#xA;  perl nipe.pl status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://heitorgouvea.me/images/projects/nipe/demo.gif&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Your contributions and suggestions are heartily ♥ welcome. &lt;a href=&#34;https://raw.githubusercontent.com/htrgouvea/nipe/master/.github/CONTRIBUTING.md&#34;&gt;See here the contribution guidelines.&lt;/a&gt; Please, report bugs via &lt;a href=&#34;https://github.com/htrgouvea/nipe/issues&#34;&gt;issues page&lt;/a&gt; and for security issues, see here the &lt;a href=&#34;https://raw.githubusercontent.com/htrgouvea/nipe/master/SECURITY.md&#34;&gt;security policy.&lt;/a&gt; (✿ ◕‿◕) This project follows the best practices defined by this &lt;a href=&#34;https://heitorgouvea.me/projects/perl-style-guide&#34;&gt;style guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are interested in providing financial support to this project, please visit: &lt;a href=&#34;https://heitorgouvea.me/donate&#34;&gt;heitorgouvea.me/donate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This work is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/htrgouvea/nipe/master/LICENSE.md&#34;&gt;MIT License.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>