<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:20:10Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sullo/nikto</title>
    <updated>2022-06-02T02:20:10Z</updated>
    <id>tag:github.com,2022-06-02:/sullo/nikto</id>
    <link href="https://github.com/sullo/nikto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nikto web server scanner&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nikto&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sullo&#34;&gt;&lt;img src=&#34;https://cirt.net/images/patreon.png&#34; alt=&#34;alt text&#34; title=&#34;Become a patron of Nikto!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nikto web server scanner - &lt;a href=&#34;https://cirt.net/Nikto2&#34;&gt;https://cirt.net/Nikto2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Full documentation - &lt;a href=&#34;https://github.com/sullo/nikto/wiki&#34;&gt;https://github.com/sullo/nikto/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run normally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/sullo/nikto&#xA;# Main script is in program/&#xA;cd nikto/program&#xA;# Run using the shebang interpreter&#xA;./nikto.pl -h http://www.example.com&#xA;# Run using perl (if you forget to chmod)&#xA;perl nikto.pl -h http://www.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run as a Docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sullo/nikto.git&#xA;cd nikto&#xA;docker build -t sullo/nikto .&#xA;# Call it without arguments to display the full help&#xA;docker run --rm sullo/nikto&#xA;# Basic usage&#xA;docker run --rm sullo/nikto -h http://www.example.com&#xA;# To save the report in a specific format, mount /tmp as a volume:&#xA;docker run --rm -v $(pwd):/tmp sullo/nikto -h http://www.example.com -o /tmp/out.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basic usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   Options:&#xA;       -ask+               Whether to ask about submitting updates&#xA;                               yes   Ask about each (default)&#xA;                               no    Don&#39;t ask, don&#39;t send&#xA;                               auto  Don&#39;t ask, just send&#xA;       -Cgidirs+           Scan these CGI dirs: &#34;none&#34;, &#34;all&#34;, or values like &#34;/cgi/ /cgi-a/&#34;&#xA;       -config+            Use this config file&#xA;       -Display+           Turn on/off display outputs:&#xA;                               1     Show redirects&#xA;                               2     Show cookies received&#xA;                               3     Show all 200/OK responses&#xA;                               4     Show URLs which require authentication&#xA;                               D     Debug output&#xA;                               E     Display all HTTP errors&#xA;                               P     Print progress to STDOUT&#xA;                               S     Scrub output of IPs and hostnames&#xA;                               V     Verbose output&#xA;       -dbcheck           Check database and other key files for syntax errors&#xA;       -evasion+          Encoding technique:&#xA;                               1     Random URI encoding (non-UTF8)&#xA;                               2     Directory self-reference (/./)&#xA;                               3     Premature URL ending&#xA;                               4     Prepend long random string&#xA;                               5     Fake parameter&#xA;                               6     TAB as request spacer&#xA;                               7     Change the case of the URL&#xA;                               8     Use Windows directory separator (\)&#xA;                               A     Use a carriage return (0x0d) as a request spacer&#xA;                               B     Use binary value 0x0b as a request spacer&#xA;        -Format+           Save file (-o) format:&#xA;                               csv   Comma-separated-value&#xA;                               htm   HTML Format&#xA;                               msf+  Log to Metasploit&#xA;                               nbe   Nessus NBE format&#xA;                               txt   Plain text&#xA;                               xml   XML Format&#xA;                               (if not specified the format will be taken from the file extension passed to -output)&#xA;       -Help              Extended help information&#xA;       -host+             Target host&#xA;       -IgnoreCode        Ignore Codes--treat as negative responses&#xA;       -id+               Host authentication to use, format is id:pass or id:pass:realm&#xA;       -key+              Client certificate key file&#xA;       -list-plugins      List all available plugins, perform no testing&#xA;       -maxtime+          Maximum testing time per host&#xA;       -mutate+           Guess additional file names:&#xA;                               1     Test all files with all root directories&#xA;                               2     Guess for password file names&#xA;                               3     Enumerate user names via Apache (/~user type requests)&#xA;                               4     Enumerate user names via cgiwrap (/cgi-bin/cgiwrap/~user type requests)&#xA;                               5     Attempt to brute force sub-domain names, assume that the host name is the parent domain&#xA;                               6     Attempt to guess directory names from the supplied dictionary file&#xA;       -mutate-options    Provide information for mutates&#xA;       -nointeractive     Disables interactive features&#xA;       -nolookup          Disables DNS lookups&#xA;       -nossl             Disables the use of SSL&#xA;       -no404             Disables nikto attempting to guess a 404 page&#xA;       -output+           Write output to this file (&#39;.&#39; for auto-name)&#xA;       -Pause+            Pause between tests (seconds, integer or float)&#xA;       -Plugins+          List of plugins to run (default: ALL)&#xA;       -port+             Port to use (default 80)&#xA;       -RSAcert+          Client certificate file&#xA;       -root+             Prepend root value to all requests, format is /directory&#xA;       -Save              Save positive responses to this directory (&#39;.&#39; for auto-name)&#xA;       -ssl               Force ssl mode on port&#xA;       -Tuning+           Scan tuning:&#xA;                               1     Interesting File / Seen in logs&#xA;                               2     Misconfiguration / Default File&#xA;                               3     Information Disclosure&#xA;                               4     Injection (XSS/Script/HTML)&#xA;                               5     Remote File Retrieval - Inside Web Root&#xA;                               6     Denial of Service&#xA;                               7     Remote File Retrieval - Server Wide&#xA;                               8     Command Execution / Remote Shell&#xA;                               9     SQL Injection&#xA;                               0     File Upload&#xA;                               a     Authentication Bypass&#xA;                               b     Software Identification&#xA;                               c     Remote Source Inclusion&#xA;                               x     Reverse Tuning Options (i.e., include all except specified)&#xA;       -timeout+          Timeout for requests (default 10 seconds)&#xA;       -Userdbs           Load only user databases, not the standard databases&#xA;                               all   Disable standard dbs and load only user dbs&#xA;                               tests Disable only db_tests and load udb_tests&#xA;       -until             Run until the specified time or duration&#xA;       -update            Update databases and plugins from CIRT.net&#xA;       -useproxy          Use the proxy defined in nikto.conf&#xA;       -Version           Print plugin and database versions&#xA;       -vhost+            Virtual host (for Host header)&#xA;              + requires a value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (C) 2001 Chris Sullo&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; version 2 of the License only.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program; if not, write to Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>htrgouvea/nipe</title>
    <updated>2022-06-02T02:20:10Z</updated>
    <id>tag:github.com,2022-06-02:/htrgouvea/nipe</id>
    <link href="https://github.com/htrgouvea/nipe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An engine to make Tor network your default gateway&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://heitorgouvea.me/images/projects/nipe/logo.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;An engine to make Tor Network your default gateway.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/htrgouvea/nipe/master/LICENSE.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/htrgouvea/nipe/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/version-0.9.5-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;p&gt;The Tor project allows users to surf the Internet, chat and send instant messages anonymously through its own mechanism. It is used by a wide variety of people, companies and organizations, both for lawful activities and for other illicit purposes. Tor has been largely used by intelligence agencies, hacking groups, criminal activities and even ordinary users who care about their privacy in the digital world.&lt;/p&gt; &#xA;&lt;p&gt;Nipe is an engine, developed in Perl, that aims on making the Tor network your default network gateway. Nipe can route the traffic from your machine to the Internet through Tor network, so you can surf the Internet having a more formidable stance on privacy and anonymity in cyberspace.&lt;/p&gt; &#xA;&lt;p&gt;Currently, only IPv4 is supported by Nipe, but we are working on a solution that adds IPv6 support. Also, only traffic other than DNS requests destined for local and/or loopback addresses is not trafficked through Tor. All non-local UDP/ICMP traffic is also blocked by the Tor project.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Download and install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  # Download&#xA;  $ git clone https://github.com/htrgouvea/nipe &amp;amp;&amp;amp; cd nipe&#xA;    &#xA;  # Install libs and dependencies&#xA;  $ sudo cpan install Try::Tiny Config::Simple JSON&#xA;&#xA;  # Nipe must be run as root&#xA;  $ perl nipe.pl install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Commands:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  COMMAND          FUNCTION&#xA;  install          Install dependencies&#xA;  start            Start routing&#xA;  stop             Stop routing&#xA;  restart          Restart the Nipe circuit&#xA;  status           See status&#xA;&#xA;  Examples:&#xA;&#xA;  perl nipe.pl install&#xA;  perl nipe.pl start&#xA;  perl nipe.pl stop&#xA;  perl nipe.pl restart&#xA;  perl nipe.pl status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://heitorgouvea.me/images/projects/nipe/demo.gif&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Your contributions and suggestions are heartily ♥ welcome. &lt;a href=&#34;https://raw.githubusercontent.com/htrgouvea/nipe/master/.github/CONTRIBUTING.md&#34;&gt;See here the contribution guidelines.&lt;/a&gt; Please, report bugs via &lt;a href=&#34;https://github.com/htrgouvea/nipe/issues&#34;&gt;issues page&lt;/a&gt; and for security issues, see here the &lt;a href=&#34;https://raw.githubusercontent.com/htrgouvea/nipe/master/SECURITY.md&#34;&gt;security policy.&lt;/a&gt; (✿ ◕‿◕) This project follows the best practices defined by this &lt;a href=&#34;https://heitorgouvea.me/projects/perl-style-guide&#34;&gt;style guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are interested in providing financial support to this project, please visit: &lt;a href=&#34;https://heitorgouvea.me/donate&#34;&gt;heitorgouvea.me/donate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This work is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/htrgouvea/nipe/master/LICENSE.md&#34;&gt;MIT License.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Kong/lua-kong-nginx-module</title>
    <updated>2022-06-02T02:20:10Z</updated>
    <id>tag:github.com,2022-06-02:/Kong/lua-kong-nginx-module</id>
    <link href="https://github.com/Kong/lua-kong-nginx-module" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nginx C module to allow deeper control of Nginx behaviors by Kong Lua code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Name&lt;/h1&gt; &#xA;&lt;p&gt;lua-kong-nginx-module - Nginx C module that exposes a Lua API to dynamically control Nginx&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#name&#34;&gt;Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#directives&#34;&gt;Directives&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#lua_kong_load_var_index&#34;&gt;lua_kong_load_var_index&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#methods&#34;&gt;Methods&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsrequest_client_certificate&#34;&gt;resty.kong.tls.request_client_certificate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsdisable_session_reuse&#34;&gt;resty.kong.tls.disable_session_reuse&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsget_full_client_certificate_chain&#34;&gt;resty.kong.tls.get_full_client_certificate_chain&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_cert_and_key&#34;&gt;resty.kong.tls.set_upstream_cert_and_key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_ssl_trusted_store&#34;&gt;resty.kong.tls.set_upstream_ssl_trusted_store&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_ssl_verify&#34;&gt;resty.kong.tls.set_upstream_ssl_verify&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_ssl_verify_depth&#34;&gt;resty.kong.tls.set_upstream_ssl_verify_depth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykonggrpcset_authority&#34;&gt;resty.kong.grpc.set_authority&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsdisable_proxy_ssl&#34;&gt;resty.kong.tls.disable_proxy_ssl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongvarpatch_metatable&#34;&gt;resty.kong.var.patch_metatable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;Kong often needs to be able to change Nginx behavior at runtime. Traditionally this has been done using various core patches. This module attempts to unify those approaches and ensure the least amount of modifications made directly to Nginx to support future maintainability.&lt;/p&gt; &#xA;&lt;p&gt;Patches from &lt;a href=&#34;https://github.com/Kong/kong-build-tools/tree/master/openresty-patches/patches&#34;&gt;openresty-patches&lt;/a&gt; are &lt;strong&gt;required&lt;/strong&gt; for this module to compile successfully. You may use the &lt;a href=&#34;https://github.com/Kong/kong-build-tools/tree/master/openresty-build-tools&#34;&gt;openresty-build-tools&lt;/a&gt; script to automatically build an OpenResty binary with required patches as well as this module included.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;This module can be installed just like any ordinary Nginx C module, using the &lt;code&gt;--add-module&lt;/code&gt; configuration option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./configure --prefix=/usr/local/kong-nginx \&#xA;            --add-module=/path/to/lua-kong-nginx-module \&#xA;            ...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Directives&lt;/h1&gt; &#xA;&lt;h2&gt;lua_kong_load_var_index&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_kong_load_var_index $variable | default;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ensure &lt;em&gt;variable&lt;/em&gt; is indexed. Note that variables defined by &lt;code&gt;set&lt;/code&gt; directive are always indexed by default and does not need to be defined here again.&lt;/p&gt; &#xA;&lt;p&gt;Common variables defined by other modules that are already indexed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$proxy_host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$proxy_internal_body_length&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$proxy_internal_chunked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$remote_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$remote_user&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_referer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_user_agent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$host&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Specially, use &lt;code&gt;lua_kong_load_var_index default&lt;/code&gt; to index &lt;em&gt;commonly used variables&lt;/em&gt; as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$args&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$is_args&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$bytes_sent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$content_type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_authorization&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_connection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_kong_debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_proxy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_proxy_connection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_te&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_upgrade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_for&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_path&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_prefix&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_proto&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$https&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$realip_remote_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$realip_remote_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$remote_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_length&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_method&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_time&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_uri&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$scheme&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$server_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$server_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_cipher&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_client_raw_cert&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_client_verify&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_protocol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_server_name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_http_connection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_http_trailer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_http_upgrade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_status&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongvarpatch_metatable&#34;&gt;resty.kong.var.patch_metatable&lt;/a&gt; on how to enable indexed variable access.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Methods&lt;/h1&gt; &#xA;&lt;h2&gt;resty.kong.tls.request_client_certificate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;succ, err = resty.kong.tls.request_client_certificate()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;ssl_certificate_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Requests client to present its client-side certificate to initiate mutual TLS authentication between server and client.&lt;/p&gt; &#xA;&lt;p&gt;This function only &lt;em&gt;requests&lt;/em&gt;, but does not &lt;em&gt;require&lt;/em&gt; the client to start the mTLS process. Even if the client did not present a client certificate the TLS handshake will still complete (obviously not being mTLS in that case). Whether the client honored the request can be determined using &lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsget_full_client_certificate_chain&#34;&gt;get_full_client_certificate_chain&lt;/a&gt; in later phases.&lt;/p&gt; &#xA;&lt;p&gt;This function returns &lt;code&gt;true&lt;/code&gt; when the call is successful. Otherwise it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.disable_session_reuse&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;succ, err = resty.kong.tls.disable_session_reuse()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;ssl_certificate_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prevents the TLS session for the current connection from being reused by disabling session ticket and session ID for the current TLS connection.&lt;/p&gt; &#xA;&lt;p&gt;This function returns &lt;code&gt;true&lt;/code&gt; when the call is successful. Otherwise it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.get_full_client_certificate_chain&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;pem_chain, err = resty.kong.tls.get_full_client_certificate_chain()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the PEM encoded downstream client certificate chain with the client certificate at the top and intermediate certificates (if any) at the bottom.&lt;/p&gt; &#xA;&lt;p&gt;If client did not present any certificate or if session was reused, then this function will return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is functionally similar to &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_client_raw_cert&#34;&gt;$ssl_client_raw_cert&lt;/a&gt; provided by &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html&#34;&gt;ngx_http_ssl_module&lt;/a&gt;, with the notable exception that this function also returns any certificate chain client sent during handshake.&lt;/p&gt; &#xA;&lt;p&gt;If the TLS session was reused, (signaled by &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_session_reused&#34;&gt;$ssl_session_reused&lt;/a&gt; returns &#34;r&#34;), then no client certificate information will be available as a full handshake never occurred. In this case caller should use &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_session_id&#34;&gt;$ssl_session_id&lt;/a&gt; to associate this session with one of the previous handshakes to identify the connecting client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_cert_and_key&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_cert_and_key(chain, key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overrides and enables sending client certificate while connecting to the upstream in the current request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chain&lt;/code&gt; is the client certificate and intermediate chain (if any) returned by functions such as &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md#parse_pem_cert&#34;&gt;ngx.ssl.parse_pem_cert&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;key&lt;/code&gt; is the private key corresponding to the client certificate returned by functions such as &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md#parse_pem_priv_key&#34;&gt;ngx.ssl.parse_pem_priv_key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt; and future handshakes with upstream servers will always use the provided client certificate. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_ssl_trusted_store&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_ssl_trusted_store(store)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set upstream ssl verification trusted store of current request. Global setting set by &lt;code&gt;proxy_ssl_trusted_certificate&lt;/code&gt; will be overwritten for the current request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;store&lt;/code&gt; is a table object that can be created by &lt;a href=&#34;https://github.com/fffonion/lua-resty-openssl#storenew&#34;&gt;resty.openssl.x509.store.new&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt; and future handshakes with upstream servers will be verified with given store. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local x509 = require(&#34;resty.openssl.x509&#34;)&#xA;local crt, err = x509.new([[-----BEGIN CERTIFICATE-----&#xA;...&#xA;-----END CERTIFICATE-----]])&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to parse cert: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;local store = require(&#34;resty.openssl.x509.store&#34;)&#xA;local st, err = store.new()&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to create store: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;local ok, err = st:add(crt)&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to add cert to store: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;-- st:add can be called multiple times, also accept a crl&#xA;-- st:add(another_crt)&#xA;-- st:add(crl)&#xA;-- OR&#xA;-- st:use_default() to load default CA bundle&#xA;local tls = require(&#34;resty.kong.tls&#34;)&#xA;local ok, err = tls.set_upstream_ssl_trusted_store(st.ctx)&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to set upstream trusted store: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;local ok, err = tls.set_upstream_ssl_verify(true)&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to set upstream ssl verify: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_ssl_verify&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_ssl_verify(verify)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set upstream ssl verification enablement of current request to the given boolean argument &lt;code&gt;verify&lt;/code&gt;. Global setting set by &lt;code&gt;proxy_ssl_verify&lt;/code&gt; will be overwritten.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_ssl_verify_depth&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_ssl_verify_depth(depth)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set upstream ssl verification depth of current request to the given non-negative integer argument &lt;code&gt;depth&lt;/code&gt;. Global setting set by &lt;code&gt;proxy_ssl_verify_depth&lt;/code&gt; will be overwritten.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.grpc.set_authority&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.grpc.set_authority(new_authority)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overrides the &lt;code&gt;:authority&lt;/code&gt; pseudo header sent to gRPC upstream by &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_grpc_module.html&#34;&gt;ngx_http_grpc_module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function is a capability not possible in Nginx through means of config directive alone. Reason being Nginx auto-generates the &lt;code&gt;:authority&lt;/code&gt; pseudo header without giving us a way to override it at config time. Closest being &lt;code&gt;grpc_set_header Host &#34;foo.example.com&#34;&lt;/code&gt;, but this will cause the gRPC module to use the &lt;code&gt;Host&lt;/code&gt; header and not generate the &lt;code&gt;:authority&lt;/code&gt; pseudo header, causing problems for certain gRPC server.&lt;/p&gt; &#xA;&lt;p&gt;When called, this function accepts a new value to override the &lt;code&gt;:authority&lt;/code&gt; pseudo header that will be generated by the ngx_http_grpc_module for the current request.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;new_authority&lt;/code&gt; parameter &lt;strong&gt;can not&lt;/strong&gt; be an empty string.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;If called in the &lt;code&gt;balancer_by_lua&lt;/code&gt; context, the request needs to be recreated (see &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/balancer.md#recreate_request&#34;&gt;balancer.recreate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.disable_proxy_ssl&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.disable_proxy_ssl()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;preread_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;stream&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Disables the TLS handshake to upstream for &lt;a href=&#34;https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html&#34;&gt;ngx_stream_proxy_module&lt;/a&gt;. Effectively this overrides &lt;a href=&#34;https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_ssl&#34;&gt;proxy_ssl&lt;/a&gt; directive to &lt;code&gt;off&lt;/code&gt; setting for the current stream session.&lt;/p&gt; &#xA;&lt;p&gt;This function has no side effects if the &lt;code&gt;proxy_ssl off;&lt;/code&gt; setting has already been specified inside &lt;code&gt;nginx.conf&lt;/code&gt; or if this function has been previously called from the current session.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.var.patch_metatable&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;resty.kong.var.patch_metatable()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Indexed variable access is a faster way of accessing Nginx variables for OpenResty. This method patches the metatable of &lt;code&gt;ngx.var&lt;/code&gt; to enable index access to variables that supports it. It should be called once in the &lt;code&gt;init&lt;/code&gt; phase which will be effective for all subsequent &lt;code&gt;ngx.var&lt;/code&gt; uses.&lt;/p&gt; &#xA;&lt;p&gt;For variables that does not have indexed access, the slower hash based lookup will be used instead (this is the OpenResty default behavior).&lt;/p&gt; &#xA;&lt;p&gt;To ensure a variable can be accessed using index, you can use the &lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#lua_kong_load_var_index&#34;&gt;lua_kong_load_var_index&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2020 Kong Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>moznion/Acme--AjiFry</title>
    <updated>2022-06-02T02:20:10Z</updated>
    <id>tag:github.com,2022-06-02:/moznion/Acme--AjiFry</id>
    <link href="https://github.com/moznion/Acme--AjiFry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Acme::AjiFry is the AjiFry Language (アジフライ語) Translater.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Acme::AjiFry - AjiFry Language (アジフライ語) Translator&lt;/p&gt; &#xA;&lt;h1&gt;VERSION&lt;/h1&gt; &#xA;&lt;p&gt;This document describes Acme::AjiFry version 0.09&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;use Acme::AjiFry;&#xA;&#xA;my $ajifry = Acme::AjiFry-&amp;gt;new();&#xA;&#xA;print $ajifry-&amp;gt;to_AjiFry(&#39;おさしみ&#39;).&#34;\n&#34;; # outputs =&amp;gt; &#34;食えアジフライお刺身食え食えお刺身ドボドボ岡星ドボドボ&#34;&#xA;print $ajifry-&amp;gt;to_Japanese(&#39;食えアジフライお刺身食え食えお刺身ドボドボ岡星ドボドボ&#39;).&#34;\n&#34;; # outputs =&amp;gt; &#34;おさしみ&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;Acme::AjiFry is the AjiFry-Language translator. This module can translate Japanese into AjiFry-Language, and vice versa. If you would like to know about AjiFry-Language, please refer to the following web site (Japanese Web Site). &lt;a href=&#34;http://ja.uncyclopedia.info/wiki/%E3%82%A2%E3%82%B8%E3%83%95%E3%83%A9%E3%82%A4%E8%AA%9E&#34;&gt;http://ja.uncyclopedia.info/wiki/%E3%82%A2%E3%82%B8%E3%83%95%E3%83%A9%E3%82%A4%E8%AA%9E&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;METHODS&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;new&lt;/p&gt; &lt;p&gt;new is the constructor of this module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;to_Japanese&lt;/p&gt; &lt;p&gt;This function needs a AjiFry-Language string as parameter. It returns Japanese which was translated from AjiFry-Language.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;to_AjiFry&lt;/p&gt; &lt;p&gt;This function needs a string as parameter. It returns AjiFry-Language which was translated from Japanese.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;DEPENDENCIES&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Encode (version 2.39 or later)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;BUGS AND LIMITATIONS&lt;/h1&gt; &#xA;&lt;p&gt;No bugs have been reported.&lt;/p&gt; &#xA;&lt;p&gt;Please report any bugs or feature requests to &lt;code&gt;bug-acme-ajifry@rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&#34;http://rt.cpan.org&#34;&gt;http://rt.cpan.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;p&gt;moznion &lt;code&gt;&amp;lt;moznion[at]gmail.com&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LICENCE AND COPYRIGHT&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2012, moznion &lt;code&gt;&amp;lt;moznion[at]gmail.com&amp;gt;&lt;/code&gt;. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;This module is free software; you can redistribute it and/or modify it under the same terms as Perl itself. See &lt;a href=&#34;http://search.cpan.org/perldoc?perlartistic&#34;&gt;perlartistic&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mpeters/cgi--application--mailpage</title>
    <updated>2022-06-02T02:20:10Z</updated>
    <id>tag:github.com,2022-06-02:/mpeters/cgi--application--mailpage</id>
    <link href="https://github.com/mpeters/cgi--application--mailpage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Perl - simple mail page application written in CGI::Application&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>elastic/elasticsearch-perl</title>
    <updated>2022-06-02T02:20:10Z</updated>
    <id>tag:github.com,2022-06-02:/elastic/elasticsearch-perl</id>
    <link href="https://github.com/elastic/elasticsearch-perl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Perl low-level client for Elasticsearch.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elasticsearch Perl client&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch-perl/actions&#34;&gt;&lt;img src=&#34;https://github.com/elastic/elasticsearch-perl/workflows/Perl%20module%20test/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Search::Elasticsearch is the official Perl API for Elasticsearch. The full documentation is available on &lt;a href=&#34;https://metacpan.org/module/Search::Elasticsearch&#34;&gt;https://metacpan.org/module/Search::Elasticsearch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full support for all Elasticsearch APIs&lt;/li&gt; &#xA; &lt;li&gt;HTTP backend (blocking and asynchronous with &lt;a href=&#34;https://metacpan.org/module/Search::Elasticsearch::Async&#34;&gt;Search::Elasticsearch::Async&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Robust networking support which handles load balancing, failure detection and failover&lt;/li&gt; &#xA; &lt;li&gt;Good defaults&lt;/li&gt; &#xA; &lt;li&gt;Helper utilities for more complex operations, such as bulk indexing, scrolled searches and reindexing.&lt;/li&gt; &#xA; &lt;li&gt;Logging support via &lt;code&gt;Log::Any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compatibility with the &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/index.html&#34;&gt;official clients&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easy extensibility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cpanm Search::Elasticsearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Language clients are forward compatible; meaning that clients support communicating with greater or equal minor versions of Elasticsearch. Elasticsearch language clients are only backwards compatible with default distributions and without guarantees made.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/elasticsearch-perl/master/LICENSE&#34;&gt;Apache 2 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qt/qtrepotools</title>
    <updated>2022-06-02T02:20:10Z</updated>
    <id>tag:github.com,2022-06-02:/qt/qtrepotools</id>
    <link href="https://github.com/qt/qtrepotools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Qt Repository Tools - git commands and hooks, etc.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>