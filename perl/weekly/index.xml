<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:45:51Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>digint/btrbk</title>
    <updated>2023-01-01T01:45:51Z</updated>
    <id>tag:github.com,2023-01-01:/digint/btrbk</id>
    <link href="https://github.com/digint/btrbk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tool for creating snapshots and remote backups of btrfs subvolumes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Btrbk is a backup tool for btrfs subvolumes, taking advantage of btrfs specific capabilities to create atomic snapshots and transfer them incrementally to your backup locations.&lt;/p&gt; &#xA;&lt;p&gt;The source and target locations are specified in a config file, which allows to easily configure simple scenarios like &#34;laptop with locally attached backup disks&#34;, as well as more complex ones, e.g. &#34;server receiving backups from several hosts via ssh, with different retention policies&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Key Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Atomic snapshots&lt;/li&gt; &#xA; &lt;li&gt;Incremental backups&lt;/li&gt; &#xA; &lt;li&gt;Flexible retention policy&lt;/li&gt; &#xA; &lt;li&gt;Backups to multiple destinations&lt;/li&gt; &#xA; &lt;li&gt;Transfer via ssh&lt;/li&gt; &#xA; &lt;li&gt;Robust recovery from interrupted backups (for removable and mobile devices)&lt;/li&gt; &#xA; &lt;li&gt;Archive to offline storage&lt;/li&gt; &#xA; &lt;li&gt;Encrypted backups to non-btrfs storage&lt;/li&gt; &#xA; &lt;li&gt;Wildcard subvolumes (useful for docker and lxc containers)&lt;/li&gt; &#xA; &lt;li&gt;Transaction log&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive list and statistics output&lt;/li&gt; &#xA; &lt;li&gt;Resolve and trace btrfs parent-child and received-from relationships&lt;/li&gt; &#xA; &lt;li&gt;List file changes between backups&lt;/li&gt; &#xA; &lt;li&gt;Calculate accurate disk space usage based on block regions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Btrbk is designed to run as a cron job for triggering periodic snapshots and backups, as well as from the command line (e.g. for instantly creating additional snapshots).&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Btrbk is a single perl script, and does not require any special installation procedures or libraries. Download the latest &lt;a href=&#34;https://digint.ch/download/btrbk/releases/&#34;&gt;btrbk source tarball&lt;/a&gt;, or try latest master:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/digint/btrbk/master/btrbk&#xA;chmod +x btrbk&#xA;sudo ./btrbk ls /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, read the &lt;a href=&#34;https://raw.githubusercontent.com/digint/btrbk/master/doc/install.md&#34;&gt;installation documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/pub/linux/kernel/people/kdave/btrfs-progs/&#34;&gt;btrfs-progs&lt;/a&gt;: Btrfs filesystem utilities &amp;gt;= v4.12&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.perl.org&#34;&gt;Perl interpreter&lt;/a&gt;: Probably already installed on your system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssh.com&#34;&gt;OpenSSH&lt;/a&gt;: If you want to transfer backups from/to remote locations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.maier-komor.de/mbuffer.html&#34;&gt;mbuffer&lt;/a&gt;: If you want rate limiting and progress bars&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Synopsis&lt;/h1&gt; &#xA;&lt;p&gt;Please consult the &lt;a href=&#34;https://digint.ch/btrbk/doc/btrbk.1.html&#34;&gt;btrbk(1)&lt;/a&gt; man-page provided with this package for a full description of the command line options.&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Before running &lt;code&gt;btrbk&lt;/code&gt;, you will need to create a configuration file. You might want to take a look at &lt;code&gt;btrbk.conf.example&lt;/code&gt; provided with this package. For a detailed description, please consult the &lt;a href=&#34;https://digint.ch/btrbk/doc/btrbk.conf.5.html&#34;&gt;btrbk.conf(5)&lt;/a&gt; man-page.&lt;/p&gt; &#xA;&lt;p&gt;After a configuration change, it is highly recommended to check it by running btrbk with the &lt;code&gt;-n,--dry-run&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# btrbk -c /path/to/myconfig -v -n run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will read all btrfs information on the source/target filesystems and show what actions would be performed (without writing anything to the disks).&lt;/p&gt; &#xA;&lt;p&gt;The examples below assume that the btrfs subvolume containing &lt;code&gt;home&lt;/code&gt; and &lt;code&gt;rootfs&lt;/code&gt; is mounted at &lt;code&gt;/mnt/btr_pool&lt;/code&gt;. This is usually the btrfs root subvolume, which always has &lt;code&gt;subvolid=5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Mounting &lt;code&gt;subvolid=5&lt;/code&gt; is &lt;em&gt;recommended&lt;/em&gt; (mandatory for btrbk &amp;lt; v0.32.0) if you want to backup your root filesystem &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;/etc/fstab:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/dev/sda1  /mnt/btr_pool  btrfs  subvolid=5,noatime  0 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that some default btrfs installations (e.g. Ubuntu) use subvolume names &lt;code&gt;@&lt;/code&gt; for rootfs (mounted at &lt;code&gt;/&lt;/code&gt;) and &lt;code&gt;@home&lt;/code&gt; for &lt;code&gt;/home&lt;/code&gt;, as a naming convention. If this is the case on your file system, replace the &lt;code&gt;subvolume&lt;/code&gt; declarations in the examples accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Example: Local Regular Snapshots (time-machine)&lt;/h2&gt; &#xA;&lt;p&gt;The simplest use case is to only create snapshots of your data. This will obviously not protect it against hardware failure, but can be useful for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;protection against inadvertent changes or deletions&lt;/li&gt; &#xA; &lt;li&gt;keeping past states of copies from rsync or similar tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s assume you need regular snapshots of your home directory, which is located in the subvolume &lt;code&gt;home&lt;/code&gt; of the volume &lt;code&gt;/mnt/btr_pool&lt;/code&gt;. The snapshots are to be stored in &lt;code&gt;btrbk_snapshots&lt;/code&gt; (on the same volume).&lt;/p&gt; &#xA;&lt;p&gt;/etc/btrbk/btrbk.conf:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;timestamp_format        long&#xA;snapshot_preserve_min   18h&#xA;snapshot_preserve       48h&#xA;&#xA;volume /mnt/btr_pool&#xA;  snapshot_dir btrbk_snapshots&#xA;  subvolume home&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the &lt;code&gt;target&lt;/code&gt; option is not provided, and btrbk will only manage snapshots located on the same volume in &lt;code&gt;snapshot_dir&lt;/code&gt;. Btrbk does not create subdirs by default, the snapshot directory must first be created manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# mkdir /mnt/btr_pool/btrbk_snapshots&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;volume&#34; section is merely used as a specifier for a base directory, and can be skipped if you prefer to configure everything using absolute paths. The above configuration can also be written as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snapshot_dir /mnt/btr_pool/btrbk_snapshots&#xA;subvolume    /mnt/btr_pool/home&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to mount the btrfs root filesystem to &lt;code&gt;/mnt/btr_pool&lt;/code&gt;, you might as well configure it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snapshot_dir /btrbk_snapshots&#xA;subvolume    /home&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start a dry run (-n, --dry-run):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# btrbk run -n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the first snapshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# btrbk run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Print schedule (-S, --print-schedule):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# btrbk run -n -S&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it works as expected, configure a cron job to run btrbk hourly:&lt;/p&gt; &#xA;&lt;p&gt;/etc/cron.hourly/btrbk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;exec /usr/bin/btrbk -q run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Snapshots will now be created every hour. All snapshots are preserved for at least 18 hours (&lt;code&gt;snapshot_preserve_min&lt;/code&gt;), whether they are created by the cron job or manually by calling &lt;code&gt;sudo btrbk run&lt;/code&gt; on the command line. Additionally, 48 hourly snapshots are preserved (&lt;code&gt;snapshot_preserve&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Example: Backups to USB Disk&lt;/h2&gt; &#xA;&lt;p&gt;In this example, we assume you have a laptop with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a disk having a btrfs root subvolume (subvolid=5) mounted on &lt;code&gt;/mnt/btr_pool&lt;/code&gt;, containing a subvolume &lt;code&gt;rootfs&lt;/code&gt; for the root filesystem (i.e. mounted on &lt;code&gt;/&lt;/code&gt;) and a subvolume &lt;code&gt;home&lt;/code&gt; for the user data,&lt;/li&gt; &#xA; &lt;li&gt;a directory or subvolume &lt;code&gt;/mnt/btr_pool/btrbk_snapshots&lt;/code&gt; which will hold the btrbk snapshots,&lt;/li&gt; &#xA; &lt;li&gt;a backup disk having a btrfs volume mounted as &lt;code&gt;/mnt/btr_backup&lt;/code&gt;, containing a subvolume or directory &lt;code&gt;mylaptop&lt;/code&gt; for the incremental backups.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Retention policy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;keep all snapshots for 2 days, no matter how frequently you (or your cron job) run btrbk&lt;/li&gt; &#xA; &lt;li&gt;keep daily snapshots for 14 days (very handy if you are on the road and the backup disk is not attached)&lt;/li&gt; &#xA; &lt;li&gt;keep monthly backups forever&lt;/li&gt; &#xA; &lt;li&gt;keep weekly backups for 10 weeks&lt;/li&gt; &#xA; &lt;li&gt;keep daily backups for 20 days&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;/etc/btrbk/btrbk-mylaptop.conf:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snapshot_preserve_min   2d&#xA;snapshot_preserve      14d&#xA;&#xA;# Create snapshots only if the backup disk is attached&#xA;#snapshot_create ondemand&#xA;&#xA;target_preserve_min    no&#xA;target_preserve        20d 10w *m&#xA;&#xA;snapshot_dir           btrbk_snapshots&#xA;&#xA;volume /mnt/btr_pool&#xA;  target /mnt/btr_backup/mylaptop&#xA;  subvolume rootfs&#xA;  subvolume home&#xA;  [...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;/etc/cron.daily/btrbk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;exec /usr/bin/btrbk -q -c /etc/btrbk/btrbk-mylaptop.conf run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This will create snapshots on a daily basis: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;/mnt/btr_pool/btrbk_snapshots/rootfs.YYYYMMDD&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/mnt/btr_pool/btrbk_snapshots/home.YYYYMMDD&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;And create incremental backups in: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;/mnt/btr_backup/mylaptop/rootfs.YYYYMMDD&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/mnt/btr_backup/mylaptop/home.YYYYMMDD&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you prefer triggering the backups manually, change the cron command to run the &lt;code&gt;snapshot&lt;/code&gt; action instead of &lt;code&gt;run&lt;/code&gt;. Start the backups manually by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# btrbk resume&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a quick additional snapshot of your home, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# btrbk snapshot home&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example: Host-initiated Backup on Fileserver&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s say you have a fileserver at &#34;myserver.example.org&#34; where you want to create backups of your laptop disk. The config could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh_identity /etc/btrbk/ssh/id_rsa&#xA;&#xA;volume /mnt/btr_pool&#xA;  subvolume rootfs&#xA;    target /mnt/btr_backup/mylaptop&#xA;    target ssh://myserver.example.org/mnt/btr_backup/mylaptop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the backups on your local usb-disk mounted at &lt;code&gt;/mnt/btr_backup/mylaptop&lt;/code&gt;, incremental backups would also be pushed to &lt;code&gt;myserver.example.org&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example: Fileserver-initiated Backups from Several Hosts&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re a sysadmin and want to trigger backups directly from your fileserver, the config would be something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh_identity /etc/btrbk/ssh/id_rsa&#xA;&#xA;volume ssh://alpha.example.org/mnt/btr_pool&#xA;  target /mnt/btr_backup/alpha&#xA;  subvolume rootfs&#xA;  subvolume home&#xA;&#xA;volume ssh://beta.example.org/mnt/btr_pool&#xA;  target /mnt/btr_backup/beta&#xA;  subvolume rootfs&#xA;  subvolume dbdata&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will pull backups from alpha/beta.example.org and locally create:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/mnt/btr_backup/alpha/rootfs.YYYYMMDD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/mnt/btr_backup/alpha/home.YYYYMMDD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/mnt/btr_backup/beta/rootfs.YYYYMMDD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/mnt/btr_backup/beta/dbdata.YYYYMMDD&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example: Multiple Btrbk Instances&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s say we have a host (at 192.168.0.42) running btrbk with the setup of the time-machine example above, and we need a backup server to only fetch the snapshots.&lt;/p&gt; &#xA;&lt;p&gt;/etc/btrbk/btrbk.conf (on backup server):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target_preserve_min        no&#xA;target_preserve            0d 10w *m&#xA;&#xA;volume ssh://192.168.0.42/mnt/btr_pool&#xA;  target /mnt/btr_backup/my-laptop&#xA;  subvolume home&#xA;    snapshot_dir           btrbk_snapshots&#xA;    snapshot_preserve_min  all&#xA;    snapshot_create        no&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the server runs btrbk with this config, 10 weeklies and all monthlies are received from 192.168.0.42. The source filesystem is never altered because of &lt;code&gt;snapshot_preserve_min all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example: Virtual Machine Setup&lt;/h2&gt; &#xA;&lt;p&gt;Common virtual machine setups have multiple volume sections with same host, but distinct port numbers for each machine.&lt;/p&gt; &#xA;&lt;p&gt;/etc/btrbk/btrbk.conf:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# This propagates to all subvolume sections:&#xA;target /mnt/btr_backup/&#xA;&#xA;volume ssh://localhost:2201/mnt/btr_pool&#xA;  group vm vm01&#xA;  subvolume home&#xA;    snapshot_name vm01-home&#xA;  subvolume data&#xA;    snapshot_name vm01-data&#xA;&#xA;volume ssh://localhost:2202/mnt/btr_pool&#xA;  group vm vm02&#xA;  subvolume home&#xA;    snapshot_name vm02-home&#xA;&#xA;volume ssh://localhost:2203/mnt/btr_pool&#xA;  [...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create &lt;code&gt;/mnt/btr_backup/vm[NN]-home&lt;/code&gt;, &lt;code&gt;vm[NN]-data&lt;/code&gt;, ...&lt;/p&gt; &#xA;&lt;p&gt;Note that btrbk holds a single reference to every btrfs filesystem tree, regarding UUID&#39;s as &#34;globally unique&#34;. If the configured subvolumes point to the same filesystem on different machines (ports), you will see log lines like this when running &lt;code&gt;btrbk -v&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Assuming same filesystem: &#34;ssh://localhost:2201/dev/sda1&#34;, &#34;ssh://localhost:2202/dev/sda1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example: Backup from non-btrfs Source&lt;/h2&gt; &#xA;&lt;p&gt;If you want to make backups from a filesystem other than btrfs (e.g. ext4 or reiserfs), you need to create a &lt;em&gt;synchronization subvolume&lt;/em&gt; on the backup disk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# btrfs subvolume create /mnt/btr_backup/myhost_sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure btrbk to use &lt;code&gt;myhost_sync&lt;/code&gt; as source subvolume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;volume /mnt/btr_backup&#xA;  subvolume myhost_sync&#xA;    snapshot_name           myhost&#xA;&#xA;    snapshot_preserve_min   latest&#xA;    snapshot_preserve       14d 20w *m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The btrbk package provides the &#34;btrbk-mail&#34; script, which automates the synchronization using rsync, and can be run as cron job or systemd timer unit. For configuration details, see the config section in &#34;/contrib/cron/btrbk-mail&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can run any synchronization software prior to running btrbk. Something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;rsync -az --delete \&#xA;      --inplace --numeric-ids --acls --xattrs \&#xA;      -e &#39;ssh -i /etc/btrbk/ssh/id_rsa&#39; \&#xA;      myhost.example.org:/data/ \&#xA;      /mnt/btr_backup/myhost_sync/&#xA;&#xA;exec /usr/bin/btrbk -q run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will produce snapshots &lt;code&gt;/mnt/btr_backup/myhost.20150101&lt;/code&gt;, with retention as defined with the snapshot_preserve option.&lt;/p&gt; &#xA;&lt;h2&gt;Example: Encrypted Backup to non-btrfs Target&lt;/h2&gt; &#xA;&lt;p&gt;If your backup server does not support btrfs, you can send your subvolumes to a raw file.&lt;/p&gt; &#xA;&lt;p&gt;This is an &lt;em&gt;experimental&lt;/em&gt; feature: btrbk supports &#34;raw&#34; targets, meaning that similar to the &#34;send-receive&#34; target the btrfs subvolume is being sent using &lt;code&gt;btrfs send&lt;/code&gt; (mirroring filesystem level data), but instead of instantly being received (&lt;code&gt;btrfs receive&lt;/code&gt;) by the target filesystem, it is being redirected to a file, optionally compressed and piped through GnuPG.&lt;/p&gt; &#xA;&lt;p&gt;/etc/btrbk/btrbk.conf:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;raw_target_compress   xz&#xA;raw_target_encrypt    gpg&#xA;gpg_keyring           /etc/btrbk/gpg/pubring.gpg&#xA;gpg_recipient         btrbk@example.org&#xA;&#xA;volume /mnt/btr_pool&#xA;  subvolume home&#xA;    target raw ssh://cloud.example.com/backup&#xA;      ssh_user  btrbk&#xA;      # incremental  no&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a GnuPG encrypted, compressed files on the target host. For each backup, two files are created:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/backup/home.YYYYMMDD.btrfs.xz.gpg&lt;/code&gt;: main data file containing the btrfs send-stream,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/backup/home.YYYYMMDD.btrfs.xz.gpg.info&lt;/code&gt;: sidecar file containing metadata used by btrbk.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I you are using raw &lt;em&gt;incremental&lt;/em&gt; backups, please make sure you understand the implications (see &lt;a href=&#34;https://digint.ch/btrbk/doc/btrbk.conf.5.html&#34;&gt;btrbk.conf(5)&lt;/a&gt;, TARGET TYPES).&lt;/p&gt; &#xA;&lt;h1&gt;Setting up SSH&lt;/h1&gt; &#xA;&lt;p&gt;Since btrbk needs root access, it is &lt;em&gt;very advisable&lt;/em&gt; to take all the security precautions you can. In most cases backups are generated periodically without user interaction, so it is not possible to protect your ssh key with a password. The steps below will give you hints on how to secure your ssh server for a backup scenario. Note that the btrbk package is not required on the remote side, but you will need the &lt;code&gt;btrfs&lt;/code&gt; executable from the &lt;a href=&#34;https://www.kernel.org/pub/linux/kernel/people/kdave/btrfs-progs/&#34;&gt;btrfs-progs&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h3&gt;Create SSH Key Pair&lt;/h3&gt; &#xA;&lt;p&gt;On the client side, create a ssh key dedicated to btrbk, without password protection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# ssh-keygen -t rsa -b 4096 -f /etc/btrbk/ssh/id_rsa -C btrbk@example.org -N &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The content of the public key (/etc/btrbk/ssh/id_rsa.pub) is used for authentication in &#34;authorized_keys&#34; on the server side (see &lt;a href=&#34;https://man.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man8/sshd.8&#34;&gt;sshd(8)&lt;/a&gt; for details).&lt;/p&gt; &#xA;&lt;h3&gt;Allow Root Login&lt;/h3&gt; &#xA;&lt;p&gt;The most straight forward setup is to allow root login on the remote host. If this is not an option for you, refer to the more complex &#34;Dedicated Btrbk User Login&#34; section below.&lt;/p&gt; &#xA;&lt;p&gt;/etc/ssh/sshd_config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PermitRootLogin prohibit-password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add your btrbk public key to &#34;/root/.ssh/authorized_keys&#34; on the server, and you are good to go.&lt;/p&gt; &#xA;&lt;h3&gt;Restrict Access&lt;/h3&gt; &#xA;&lt;p&gt;Restrict ssh access to a static IP address within your network. On the remote host, either add a &#34;Match&#34; block in:&lt;/p&gt; &#xA;&lt;p&gt;/etc/ssh/sshd_config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Match Address 192.168.0.42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or restrict in authorized_keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from=&#34;192.168.0.42&#34; &amp;lt;pubkey&amp;gt;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consult the &lt;a href=&#34;https://man.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/sshd_config&#34;&gt;sshd_config(5)&lt;/a&gt; man-page for a detailed explanation and more options.&lt;/p&gt; &#xA;&lt;h2&gt;Dedicated Btrbk User Login (optional)&lt;/h2&gt; &#xA;&lt;p&gt;If allowing root login is not an option for you, there are several ways to restrict SSH access to a regular user.&lt;/p&gt; &#xA;&lt;h3&gt;Option 1: Use sudo&lt;/h3&gt; &#xA;&lt;p&gt;On the client side, configure btrbk use the sudo backend. This changes the ssh calls to btrfs commands to &lt;code&gt;sudo btrfs &amp;lt;subcommand&amp;gt; &amp;lt;options&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;/etc/btrbk/btrbk.conf:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;backend_remote btrfs-progs-sudo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the remote host, grant root permissions for the &#34;btrfs&#34; command groups (subcommands) in &#34;/etc/sudoers&#34;. If you are using &lt;a href=&#34;https://digint.ch/btrbk/doc/ssh_filter_btrbk.1.html&#34;&gt;ssh_filter_btrbk(1)&lt;/a&gt;, also add the &lt;code&gt;ssh_filter_btrbk.sh --sudo&lt;/code&gt; option in &#34;authorized_keys&#34; (see below).&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: Use btrfs-progs-btrbk&lt;/h3&gt; &#xA;&lt;p&gt;Instead of using the all-inclusive &lt;code&gt;btrfs&lt;/code&gt; command, &#34;btrfs-progs-btrbk&#34; allows you to restrict privileges to its subcommands using linux capabilities(7) or setuid.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &#34;btrfs-progs-btrbk&#34; package is not available on all linux distributions, you might need to build and install it on your own (refer to &lt;a href=&#34;https://github.com/digint/btrfs-progs-btrbk&#34;&gt;btrfs-progs-btrbk&lt;/a&gt; on GitHub for more details).&lt;/p&gt; &#xA;&lt;p&gt;/etc/btrbk/btrbk.conf:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;backend_remote btrfs-progs-btrbk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that only the required binaries with elevated privileges can be called by the btrbk user. For example, on a server acting as &#34;btrbk source&#34;, allow only the following binaries for the &#34;btrbk&#34; group:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# getcap /usr/bin/btrfs-*&#xA;/usr/bin/btrfs-send cap_dac_read_search,cap_fowner,cap_sys_admin=ep&#xA;/usr/bin/btrfs-subvolume-delete cap_dac_override,cap_sys_admin=ep&#xA;/usr/bin/btrfs-subvolume-list cap_dac_read_search,cap_fowner,cap_sys_admin=ep&#xA;/usr/bin/btrfs-subvolume-show cap_dac_read_search,cap_fowner,cap_sys_admin=ep&#xA;/usr/bin/btrfs-subvolume-snapshot cap_dac_override,cap_dac_read_search,cap_fowner,cap_sys_admin=ep&#xA;&#xA;# ls -l /usr/bin/btrfs-*&#xA;-rwx--x--- 1 root btrbk  /usr/bin/btrfs-send&#xA;-rwx--x--- 1 root btrbk  /usr/bin/btrfs-subvolume-delete&#xA;-rwx--x--- 1 root btrbk  /usr/bin/btrfs-subvolume-list&#xA;-rwx--x--- 1 root btrbk  /usr/bin/btrfs-subvolume-show&#xA;-rwx--x--- 1 root btrbk  /usr/bin/btrfs-subvolume-snapshot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Restrict Commands with &#34;ssh_filter_btrbk.sh&#34; (optional)&lt;/h2&gt; &#xA;&lt;p&gt;Btrbk comes with a shell script &#34;ssh_filter_btrbk.sh&#34;, which restricts ssh access to sane calls to the &#34;btrfs&#34; command needed for snapshot creation and send/receive operations (see &lt;a href=&#34;https://digint.ch/btrbk/doc/ssh_filter_btrbk.1.html&#34;&gt;ssh_filter_btrbk(1)&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Copy &#34;ssh_filter_btrbk.sh&#34; to &#34;/backup/scripts/&#34;, and configure sshd to run it whenever the key is used for authentication. Example &#34;/root/.ssh/authorized_keys&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# example backup source (also allowing deletion of old snapshots)&#xA;command=&#34;/backup/scripts/ssh_filter_btrbk.sh -l --source --delete&#34;,restrict &amp;lt;pubkey&amp;gt;...&#xA;&#xA;# example backup target (also allowing deletion of old snapshots)&#xA;command=&#34;/backup/scripts/ssh_filter_btrbk.sh -l --target --delete&#34;,restrict &amp;lt;pubkey&amp;gt;...&#xA;&#xA;# example fetch-only backup source (snapshot_preserve_min=all, snapshot_create=no),&#xA;# restricted to subvolumes within /home or /data&#xA;command=&#34;/backup/scripts/ssh_filter_btrbk.sh -l --send -p /home -p /data&#34;,restrict &amp;lt;pubkey&amp;gt;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Restoring Backups&lt;/h1&gt; &#xA;&lt;p&gt;Btrbk does not provide any mechanism to restore your backups, this has to be done manually. In the instructions below, we assume that you have a btrfs volume mounted at &lt;code&gt;/mnt/btr_pool&lt;/code&gt;, and the subvolume you want to restore is at &lt;code&gt;/mnt/btr_pool/data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t use &lt;code&gt;btrfs property set&lt;/code&gt; to make a subvolume read-write after restoring. This is a low-level command, and leaves &#34;Received UUID&#34; in a false state which causes btrbk to fail on subsequent incremental backups. Instead, use &lt;code&gt;btrfs subvolume snapshot&lt;/code&gt; (without &lt;code&gt;-r&lt;/code&gt; flag) as described below.&lt;/p&gt; &#xA;&lt;h3&gt;Step 0: Identify Subvolume&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# list snapshots managed by btrbk&#xA;btrbk list snapshots&#xA;&#xA;# alternative: list all subvolumes&#xA;btrbk ls /&#xA;btrbk ls -L /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the list, identify the snapshot you want to restore. Let&#39;s say it&#39;s &lt;code&gt;/mnt/btr_pool/_btrbk_snap/data.20150101&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Step 1: Restore Backup&lt;/h3&gt; &#xA;&lt;p&gt;(skip this step if you restore from a snapshot)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# locally mounted backup disk&#xA;btrfs send /mnt/btr_backup/data.20150101 | btrfs receive /mnt/btr_pool/&#xA;&#xA;# from / to remote host&#xA;ssh root@remote btrfs send /mnt/btr_backup/data.20150101 | btrfs receive /mnt/btr_pool/&#xA;btrfs send /mnt/btr_backup/data.20150101 | ssh root@remote btrfs receive /mnt/btr_pool/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt;: Try to send-receive backups incrementally if possible. In case you still have common snapshot / backup pairs (i.e. both &#34;snapshot_subvol&#34; and &#34;target_subvol&#34; are listed above), use &lt;code&gt;btrfs send -p &amp;lt;parent&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From this point on, &lt;code&gt;data.20150101&lt;/code&gt; on both disks can be used as parents for subsequent send-receive operations, and a &lt;em&gt;received_uuid&lt;/em&gt; relationship is established (see below).&lt;/p&gt; &#xA;&lt;h3&gt;Step 2: Create read-write Subvolume&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# if still present, move broken subvolume away&#xA;mv /mnt/btr_pool/data /mnt/btr_pool/data.BROKEN&#xA;&#xA;# create read-write subvolume&#xA;btrfs subvolume snapshot /mnt/btr_pool/data.20150101 /mnt/btr_pool/data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your &lt;code&gt;data&lt;/code&gt; subvolume is restored, you can carry on with incremental backups to &lt;code&gt;/mnt/btr_backup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Step 3: Cleanup&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# if everything went fine, delete the broken subvolume&#xA;btrfs subvolume delete /mnt/btr_pool/data.BROKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to keep &lt;code&gt;data.20150101&lt;/code&gt; subvolumes on both disks at least until you created a new backup using btrbk, in order to keep the incremental chain alive.&lt;/p&gt; &#xA;&lt;h2&gt;Btrfs Relationship (technical note)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;btrbk origin -t /mnt/btr_backup/data.20150101&#xA;btrbk ls -L /mnt/btr_pool /mnt/btr_backup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;received_uuid&lt;/strong&gt; relationship: &lt;em&gt;correlated&lt;/em&gt;, &lt;em&gt;identical&lt;/em&gt; read-only subvolumes, cross-filesystem.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a.received_uuid = b.received_uuid&#xA;a.received_uuid = b.uuid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Required for subvolumes used as parent (or clone-src) of send-receive operations.&lt;/li&gt; &#xA;   &lt;li&gt;Present on subvolumes created by &lt;code&gt;btrfs send | btrfs receive&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/mnt/btr_pool/data.20150101 === /mnt/btr_backup/data.20150101&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;parent_uuid&lt;/strong&gt; relationship: &#34;is-snapshot-of&#34;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;a.parent_uuid = b.uuid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Present on subvolumes created by &lt;code&gt;btrfs subvolume snapshot&lt;/code&gt; or &lt;code&gt;btrfs send -p | btrfs receive&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Used by btrbk to determine best parent.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/mnt/btr_pool/data.20150101 &amp;lt;-- /mnt/btr_pool/data&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;Make sure to also read the &lt;a href=&#34;https://raw.githubusercontent.com/digint/btrbk/master/doc/FAQ.md&#34;&gt;btrbk FAQ page&lt;/a&gt;. Help improve it by asking!&lt;/p&gt; &#xA;&lt;h1&gt;Donate&lt;/h1&gt; &#xA;&lt;p&gt;So btrbk saved your day?&lt;/p&gt; &#xA;&lt;p&gt;I will definitively continue to develop btrbk for free. If you want to support my hard work with a donation, you are welcome to do so!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=WFQSSCD9GNM4S&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;Source Code Repository&lt;/h2&gt; &#xA;&lt;p&gt;The source code for btrbk is managed using Git.&lt;/p&gt; &#xA;&lt;p&gt;Official repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://dev.tty0.ch/btrbk.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mirror on GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/digint/btrbk.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Your contributions are welcome!&lt;/p&gt; &#xA;&lt;p&gt;If you would like to contribute or have found bugs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visit the &lt;a href=&#34;https://github.com/digint/btrbk&#34;&gt;btrbk project page on GitHub&lt;/a&gt; and use the &lt;a href=&#34;https://github.com/digint/btrbk/issues&#34;&gt;issues tracker&lt;/a&gt; there.&lt;/li&gt; &#xA; &lt;li&gt;Talk to us on &lt;a href=&#34;https://libera.chat&#34;&gt;Libera.Chat&lt;/a&gt; in &lt;code&gt;#btrbk&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Contact the author via email (the email address can be found in the sources).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any feedback is appreciated!&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;btrbk is free software, available under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;GNU General Public License, Version 3 or later&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>winterheart/broadcom-bt-firmware</title>
    <updated>2023-01-01T01:45:51Z</updated>
    <id>tag:github.com,2023-01-01:/winterheart/broadcom-bt-firmware</id>
    <link href="https://github.com/winterheart/broadcom-bt-firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for various Broadcom Bluetooth firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Broadcom Bluetooth firmware for Linux kernel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/broadcom-bt-firmware/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/broadcom-bt-firmware.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This package intentended to provide firmware of Broadcom WIDCOMM® Bluetooth devices (including BCM20702, BCM20703, BCM43142 chipsets and other) for Linux kernel. Since February 2017, Broadcom ships their drivers directly to Windows Update service. They can be &lt;a href=&#34;http://www.catalog.update.microsoft.com/Search.aspx?q=Broadcom+bluetooth&#34;&gt;downloaded here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security considerations&lt;/h2&gt; &#xA;&lt;p&gt;Recently several vulnerabilities have been discovered in the Bluetooth stack such as &lt;a href=&#34;https://www.kb.cert.org/vuls/id/304725/&#34;&gt;CVE-2018-5383&lt;/a&gt;, &lt;a href=&#34;https://www.kb.cert.org/vuls/id/918987/&#34;&gt;CVE-2019-9506&lt;/a&gt; (KNOB), &lt;a href=&#34;https://www.kb.cert.org/vuls/id/647177/&#34;&gt;CVE-2020-10135&lt;/a&gt; (BIAS) and more. Since Broadcom has stopped active support for its consumer devices, your system may be subject to security risks. You will have to use these devices &lt;strong&gt;at your own risk&lt;/strong&gt;. As a repository maintainer, I cannot provide security fixes.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Check your Linux distribution &lt;a href=&#34;https://repology.org/project/broadcom-bt-firmware/versions&#34;&gt;repositories&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://github.com/winterheart/broadcom-bt-firmware/releases&#34;&gt;autogenerated DEB and RPM packages&lt;/a&gt; for RedHat and Debian based distributions.&lt;/p&gt; &#xA;&lt;h2&gt;Detection and manual installation&lt;/h2&gt; &#xA;&lt;p&gt;When you inserting Broadcom Bluetooth device you prefered Linux distribution may not load it properly.&lt;/p&gt; &#xA;&lt;p&gt;You may list all Bluetooth devices like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dmesg | grep -i bluetooth # Shows all Bluetooth driver info&#xA;dmesg | grep -i bluetooth | grep -i firmware # Shows Bluetooth firmware issues&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output may look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Bluetooth: hci1: BCM: chip id 63&#xA;Bluetooth: hci1: BCM20702A&#xA;Bluetooth: hci1: BCM20702A1 (001.002.014) build 0000&#xA;bluetooth hci1: Direct firmware load for brcm/BCM20702A1-0b05-17cb.hcd failed with error -2&#xA;Bluetooth: hci1: BCM: Patch brcm/BCM20702A1-0b05-17cb.hcd not found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, you need &lt;code&gt;brcm/BCM20702A1-0b05-17cb.hcd&lt;/code&gt; firmware.&lt;/p&gt; &#xA;&lt;p&gt;Place required &lt;code&gt;.hcd&lt;/code&gt; file to &lt;code&gt;/lib/firmware/brcm&lt;/code&gt; and reboot your computer. After reboot you will see that firmware successfully loaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Bluetooth: hci1: BCM: chip id 63&#xA;Bluetooth: hci1: BCM20702A&#xA;Bluetooth: hci1: BCM20702A1 (001.002.014) build 0000&#xA;Bluetooth: hci1: BCM20702A1 (001.002.014) build 1467&#xA;Bluetooth: hci1: Broadcom Bluetooth Device&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations, now your bluetooth device successfully loaded. Now go to Bluez for futher configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Incorrect names for devices&lt;/h2&gt; &#xA;&lt;p&gt;There may be incorrect naming between presented firmware name and name requested from Linux kernel. For example, system may request &lt;code&gt;BCM4354A2-13d3-3485.hcd&lt;/code&gt; but actually this is &lt;code&gt;BCM4356A2-13d3-3485.hcd&lt;/code&gt;. This is happens because incorrect naming in Linux kernel. Just rename file to name that need to kernel. Here quick naming convertion:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Original name&lt;/th&gt; &#xA;   &lt;th&gt;Requested by Linux&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BCM4356A2&lt;/td&gt; &#xA;   &lt;td&gt;BCM4354A2&lt;/td&gt; &#xA;   &lt;td&gt;Fixed in Linux kernel 5.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Notes about combined WiFi+Bluetooth devices&lt;/h2&gt; &#xA;&lt;p&gt;Some Bluetooth controller (for example, BCM4354 and BCM4356) are integrated to WiFi chipset (this can be BCM43XX 802.11ac Wireless Network Adapter or just simple generic Broadcom PCIE Wireless). These devices requires two kinds of firmware - first for WiFi, and second for Bluetooth. Without WiFi firmware Bluetooth will not initialize and &lt;a href=&#34;https://github.com/winterheart/broadcom-bt-firmware/issues/3#issuecomment-318512097&#34;&gt;will not work properly&lt;/a&gt;. Firmware for WiFi already included to kernel, but you may need to do additional work to &lt;a href=&#34;https://wireless.wiki.kernel.org/en/users/drivers/brcm80211#broadcom_brcmfmac_driver&#34;&gt;place correct NVRAM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here example how it can looks (note about &lt;code&gt;brcm/brcmfmac4356-pcie.txt&lt;/code&gt; loading - this is your customized NVRAM):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;usbcore: registered new interface driver brcmfmac&#xA;brcmfmac 0000:02:00.0: firmware: direct-loading firmware brcm/brcmfmac4356-pcie.bin&#xA;brcmfmac 0000:02:00.0: firmware: direct-loading firmware brcm/brcmfmac4356-pcie.txt&#xA;Bluetooth: hci0: BCM: chip id 101&#xA;Bluetooth: hci0: N360-11&#xA;Bluetooth: hci0: BCM4354A2 (001.003.015) build 0000&#xA;bluetooth hci0: firmware: direct-loading firmware brcm/BCM4354A2-13d3-3485.hcd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Firmware files are licensed under &lt;a href=&#34;https://raw.githubusercontent.com/winterheart/broadcom-bt-firmware/master/LICENSE.broadcom_bcm20702&#34;&gt;Broadcom WIDCOMM Bluetooth Software License Agreement&lt;/a&gt;. Other parts of project are licensed under standard &lt;a href=&#34;https://raw.githubusercontent.com/winterheart/broadcom-bt-firmware/master/LICENSE.MIT.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported devices&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/winterheart/broadcom-bt-firmware/master/DEVICES.md&#34;&gt;DEVICES file&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jeppeter/astylepl</title>
    <updated>2023-01-01T01:45:51Z</updated>
    <id>tag:github.com,2023-01-01:/jeppeter/astylepl</id>
    <link href="https://github.com/jeppeter/astylepl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>