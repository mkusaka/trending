<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:48:52Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>so-fancy/diff-so-fancy</title>
    <updated>2022-08-28T01:48:52Z</updated>
    <id>tag:github.com,2022-08-28:/so-fancy/diff-so-fancy</id>
    <link href="https://github.com/so-fancy/diff-so-fancy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Good-lookin&#39; diffs. Actually‚Ä¶ nah‚Ä¶ The best-lookin&#39; diffs. üéâ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;diff-so-fancy &lt;a href=&#34;https://circleci.com/gh/so-fancy/diff-so-fancy&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/so-fancy/diff-so-fancy.svg?style=shield&#34; alt=&#34;Circle CI build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/so-fancy/diff-so-fancy&#34;&gt;&lt;img src=&#34;https://travis-ci.org/so-fancy/diff-so-fancy.svg?branch=master&#34; alt=&#34;TravisCI build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/stevemao/diff-so-fancy/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/so-fancy/diff-so-fancy?branch=master&amp;amp;svg=true&#34; alt=&#34;AppVeyor build&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;diff-so-fancy&lt;/code&gt; strives to make your diffs &lt;strong&gt;human&lt;/strong&gt; readable instead of machine readable. This helps improve code quality and helps you spot defects faster.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;Vanilla &lt;code&gt;git diff&lt;/code&gt; vs &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;diff-so-fancy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3429760/32387617-44c873da-c082-11e7-829c-6160b853adcb.png&#34; alt=&#34;diff-highlight vs diff-so-fancy&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Installation is as simple as cloning this repo and then putting the &lt;code&gt;diff-so-fancy&lt;/code&gt; script in to your &lt;code&gt;$PATH&lt;/code&gt;. The &lt;code&gt;lib/&lt;/code&gt; directory will need to be kept relative to the core script.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;diff-so-fancy&lt;/code&gt; is also available from the &lt;a href=&#34;https://www.npmjs.com/package/diff-so-fancy&#34;&gt;NPM registry&lt;/a&gt;, &lt;a href=&#34;https://formulae.brew.sh/formula/diff-so-fancy&#34;&gt;brew&lt;/a&gt;, and as a package on &lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/applications/version-management/git-and-tools/diff-so-fancy/default.nix&#34;&gt;Nix&lt;/a&gt;, in the &lt;a href=&#34;https://archlinux.org/packages/community/any/diff-so-fancy/&#34;&gt;Arch community repo&lt;/a&gt;, and &lt;a href=&#34;https://github.com/aos/dsf-debian&#34;&gt;ppa:aos for Debian/Ubuntu Linux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Issues relating to packaging (&#39;installation does not work&#39;, &#39;version is out of date&#39;, etc.) should be directed to those packages&#39; own repositories/issue trackers where applicable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Windows users may need to install &lt;a href=&#34;https://sourceforge.net/projects/mingw/files/&#34;&gt;MinGW&lt;/a&gt; or the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;Windows subsystem for Linux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;With git&lt;/h3&gt; &#xA;&lt;p&gt;Configure git to use &lt;code&gt;diff-so-fancy&lt;/code&gt; for all diff output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.pager &#34;diff-so-fancy | less --tabs=4 -RFX&#34;&#xA;git config --global interactive.diffFilter &#34;diff-so-fancy --patch&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Improved colors for the highlighted bits&lt;/h3&gt; &#xA;&lt;p&gt;The default Git colors are not optimal. The colors used for the screenshot above were:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global color.ui true&#xA;&#xA;git config --global color.diff-highlight.oldNormal    &#34;red bold&#34;&#xA;git config --global color.diff-highlight.oldHighlight &#34;red bold 52&#34;&#xA;git config --global color.diff-highlight.newNormal    &#34;green bold&#34;&#xA;git config --global color.diff-highlight.newHighlight &#34;green bold 22&#34;&#xA;&#xA;git config --global color.diff.meta       &#34;11&#34;&#xA;git config --global color.diff.frag       &#34;magenta bold&#34;&#xA;git config --global color.diff.func       &#34;146 bold&#34;&#xA;git config --global color.diff.commit     &#34;yellow bold&#34;&#xA;git config --global color.diff.old        &#34;red bold&#34;&#xA;git config --global color.diff.new        &#34;green bold&#34;&#xA;git config --global color.diff.whitespace &#34;red reverse&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With diff&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-u&lt;/code&gt; with &lt;code&gt;diff&lt;/code&gt; for unified output, and pipe the output to &lt;code&gt;diff-so-fancy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;diff -u file_a file_b | diff-so-fancy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;h3&gt;markEmptyLines&lt;/h3&gt; &#xA;&lt;p&gt;Should the first block of an empty line be colored. (Default: true)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --bool --global diff-so-fancy.markEmptyLines false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;changeHunkIndicators&lt;/h3&gt; &#xA;&lt;p&gt;Simplify git header chunks to a more human readable format. (Default: true)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --bool --global diff-so-fancy.changeHunkIndicators false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;stripLeadingSymbols&lt;/h3&gt; &#xA;&lt;p&gt;Should the pesky &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; at line-start be removed. (Default: true)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --bool --global diff-so-fancy.stripLeadingSymbols false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;useUnicodeRuler&lt;/h3&gt; &#xA;&lt;p&gt;By default, the separator for the file header uses Unicode line-drawing characters. If this is causing output errors on your terminal, set this to &lt;code&gt;false&lt;/code&gt; to use ASCII characters instead. (Default: true)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --bool --global diff-so-fancy.useUnicodeRuler false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rulerWidth&lt;/h3&gt; &#xA;&lt;p&gt;By default, the separator for the file header spans the full width of the terminal. Use this setting to set the width of the file header manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global diff-so-fancy.rulerWidth 47    # git log&#39;s commit header width&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The diff-so-fancy team&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Person&lt;/th&gt; &#xA;   &lt;th&gt;Role&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@scottchiefbaker&lt;/td&gt; &#xA;   &lt;td&gt;Project lead&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@OJFord&lt;/td&gt; &#xA;   &lt;td&gt;Bug triage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@GenieTim&lt;/td&gt; &#xA;   &lt;td&gt;Travis OSX fixes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@AOS&lt;/td&gt; &#xA;   &lt;td&gt;Debian packager&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@Stevemao/@Paul Irish&lt;/td&gt; &#xA;   &lt;td&gt;NPM release team&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are quite welcome, and should target the &lt;a href=&#34;https://github.com/so-fancy/diff-so-fancy/tree/next&#34;&gt;&lt;code&gt;next&lt;/code&gt; branch&lt;/a&gt;. We are also looking for any feedback or ideas on how to make &lt;code&gt;diff-so-fancy&lt;/code&gt; even &lt;em&gt;fancier&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/so-fancy/diff-so-fancy/master/pro-tips.md&#34;&gt;Pro-tips on advanced usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/so-fancy/diff-so-fancy/master/reporting-bugs.md&#34;&gt;Reporting Bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/so-fancy/diff-so-fancy/master/hacking-and-testing.md&#34;&gt;Hacking and Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/so-fancy/diff-so-fancy/master/history.md&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dandavison/delta&#34;&gt;https://github.com/dandavison/delta&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tseemann/snippy</title>
    <updated>2022-08-28T01:48:52Z</updated>
    <id>tag:github.com,2022-08-28:/tseemann/snippy</id>
    <link href="https://github.com/tseemann/snippy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚úÇÔ∏è ‚ö° Rapid haploid variant calling and core genome alignment&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/tseemann/snippy&#34;&gt;&lt;img src=&#34;https://travis-ci.org/tseemann/snippy.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v2-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v2&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Language-Perl_5-steelblue.svg?sanitize=true&#34; alt=&#34;Don&#39;t judge me&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Snippy&lt;/h1&gt; &#xA;&lt;p&gt;Rapid haploid variant calling and core genome alignment&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/torstenseemann&#34;&gt;Torsten Seemann&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Synopsis&lt;/h2&gt; &#xA;&lt;p&gt;Snippy finds SNPs between a haploid reference genome and your NGS sequence reads. It will find both substitutions (snps) and insertions/deletions (indels). It will use as many CPUs as you can give it on a single computer (tested to 64 cores). It is designed with speed in mind, and produces a consistent set of output files in a single folder. It can then take a set of Snippy results using the same reference and generate a core SNP alignment (and ultimately a phylogenomic tree).&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;% snippy --cpus 16 --outdir mysnps --ref Listeria.gbk --R1 FDA_R1.fastq.gz --R2 FDA_R2.fastq.gz&#xA;&amp;lt;cut&amp;gt;&#xA;Walltime used: 3 min, 42 sec&#xA;Results folder: mysnps&#xA;Done.&#xA;&#xA;% ls mysnps&#xA;snps.vcf snps.bed snps.gff snps.csv snps.tab snps.html &#xA;snps.bam snps.txt reference/ ...&#xA;&#xA;% head -5 mysnps/snps.tab&#xA;CHROM  POS     TYPE    REF   ALT    EVIDENCE        FTYPE STRAND NT_POS AA_POS LOCUS_TAG GENE PRODUCT EFFECT&#xA;chr      5958  snp     A     G      G:44 A:0        CDS   +      41/600 13/200 ECO_0001  dnaA replication protein DnaA missense_variant c.548A&amp;gt;C p.Lys183Thr&#xA;chr     35524  snp     G     T      T:73 G:1 C:1    tRNA  -   &#xA;chr     45722  ins     ATT   ATTT   ATTT:43 ATT:1   CDS   -                    ECO_0045  gyrA DNA gyrase&#xA;chr    100541  del     CAAA  CAA    CAA:38 CAAA:1   CDS   +                    ECO_0179      hypothetical protein&#xA;plas      619  complex GATC  AATA   GATC:28 AATA:0  &#xA;plas     3221  mnp     GA    CT     CT:39 CT:0      CDS   +                    ECO_p012  rep  hypothetical protein&#xA;&#xA;% snippy-core --prefix core mysnps1 mysnps2 mysnps3 mysnps4 &#xA;Loaded 4 SNP tables.&#xA;Found 2814 core SNPs from 96615 SNPs.&#xA;&#xA;% ls core.*&#xA;core.aln core.tab core.tab core.txt core.vcf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Conda&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://bioconda.github.io/user/install.html&#34;&gt;Bioconda&lt;/a&gt; then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge -c bioconda -c defaults snippy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Homebrew&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; (MacOS) or &lt;a href=&#34;http://linuxbrew.sh/&#34;&gt;LinuxBrew&lt;/a&gt; (Linux) then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install brewsci/bio/snippy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source&lt;/h2&gt; &#xA;&lt;p&gt;This will install the latest version direct from Github. You&#39;ll need to add Snippy&#39;s &lt;code&gt;bin&lt;/code&gt; directory to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd $HOME&#xA;git clone https://github.com/tseemann/snippy.git&#xA;$HOME/snippy/bin/snippy --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Check installation&lt;/h1&gt; &#xA;&lt;p&gt;Ensure you have the desired version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snippy --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check that all dependencies are installed and working:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snippy --check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Calling SNPs&lt;/h1&gt; &#xA;&lt;h2&gt;Input Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a reference genome in FASTA or GENBANK format (can be in multiple contigs)&lt;/li&gt; &#xA; &lt;li&gt;sequence read file(s) in FASTQ or FASTA format (can be .gz compressed) format&lt;/li&gt; &#xA; &lt;li&gt;a folder to put the results in&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Output Files&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Extension&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.tab&lt;/td&gt; &#xA;   &lt;td&gt;A simple &lt;a href=&#34;http://en.wikipedia.org/wiki/Tab-separated_values&#34;&gt;tab-separated&lt;/a&gt; summary of all the variants&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.csv&lt;/td&gt; &#xA;   &lt;td&gt;A &lt;a href=&#34;http://en.wikipedia.org/wiki/Comma-separated_values&#34;&gt;comma-separated&lt;/a&gt; version of the .tab file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.html&lt;/td&gt; &#xA;   &lt;td&gt;A &lt;a href=&#34;http://en.wikipedia.org/wiki/HTML&#34;&gt;HTML&lt;/a&gt; version of the .tab file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.vcf&lt;/td&gt; &#xA;   &lt;td&gt;The final annotated variants in &lt;a href=&#34;http://en.wikipedia.org/wiki/Variant_Call_Format&#34;&gt;VCF&lt;/a&gt; format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.bed&lt;/td&gt; &#xA;   &lt;td&gt;The variants in &lt;a href=&#34;http://genome.ucsc.edu/FAQ/FAQformat.html#format1&#34;&gt;BED&lt;/a&gt; format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.gff&lt;/td&gt; &#xA;   &lt;td&gt;The variants in &lt;a href=&#34;http://www.sequenceontology.org/gff3.shtml&#34;&gt;GFF3&lt;/a&gt; format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.bam&lt;/td&gt; &#xA;   &lt;td&gt;The alignments in &lt;a href=&#34;http://en.wikipedia.org/wiki/SAMtools&#34;&gt;BAM&lt;/a&gt; format. Includes unmapped, multimapping reads. Excludes duplicates.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.bam.bai&lt;/td&gt; &#xA;   &lt;td&gt;Index for the .bam file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.log&lt;/td&gt; &#xA;   &lt;td&gt;A log file with the commands run and their outputs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.aligned.fa&lt;/td&gt; &#xA;   &lt;td&gt;A version of the reference but with &lt;code&gt;-&lt;/code&gt; at position with &lt;code&gt;depth=0&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; for &lt;code&gt;0 &amp;lt; depth &amp;lt; --mincov&lt;/code&gt; (&lt;strong&gt;does not have variants&lt;/strong&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.consensus.fa&lt;/td&gt; &#xA;   &lt;td&gt;A version of the reference genome with &lt;em&gt;all&lt;/em&gt; variants instantiated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.consensus.subs.fa&lt;/td&gt; &#xA;   &lt;td&gt;A version of the reference genome with &lt;em&gt;only substitution&lt;/em&gt; variants instantiated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.raw.vcf&lt;/td&gt; &#xA;   &lt;td&gt;The unfiltered variant calls from Freebayes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.filt.vcf&lt;/td&gt; &#xA;   &lt;td&gt;The filtered variant calls from Freebayes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.vcf.gz&lt;/td&gt; &#xA;   &lt;td&gt;Compressed .vcf file via &lt;a href=&#34;http://blastedbio.blogspot.com.au/2011/11/bgzf-blocked-bigger-better-gzip.html&#34;&gt;BGZIP&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.vcf.gz.csi&lt;/td&gt; &#xA;   &lt;td&gt;Index for the .vcf.gz via &lt;code&gt;bcftools index&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;span&gt;‚ùå&lt;/span&gt; Snippy 4.x does &lt;strong&gt;NOT&lt;/strong&gt; produce the following files that Snippy 3.x did&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Extension&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.vcf.gz.tbi&lt;/td&gt; &#xA;   &lt;td&gt;Index for the .vcf.gz via &lt;a href=&#34;http://bioinformatics.oxfordjournals.org/content/27/5/718.full&#34;&gt;TABIX&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.depth.gz&lt;/td&gt; &#xA;   &lt;td&gt;Output of &lt;code&gt;samtools depth -aa&lt;/code&gt; for the &lt;code&gt;.bam&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.depth.gz.tbi&lt;/td&gt; &#xA;   &lt;td&gt;Index for the &lt;code&gt;.depth.gz&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Columns in the TAB/CSV/HTML formats&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CHROM&lt;/td&gt; &#xA;   &lt;td&gt;The sequence the variant was found in eg. the name after the &lt;code&gt;&amp;gt;&lt;/code&gt; in the FASTA reference&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POS&lt;/td&gt; &#xA;   &lt;td&gt;Position in the sequence, counting from 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TYPE&lt;/td&gt; &#xA;   &lt;td&gt;The variant type: snp msp ins del complex&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REF&lt;/td&gt; &#xA;   &lt;td&gt;The nucleotide(s) in the reference&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ALT&lt;/td&gt; &#xA;   &lt;td&gt;The alternate nucleotide(s) supported by the reads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EVIDENCE&lt;/td&gt; &#xA;   &lt;td&gt;Frequency counts for REF and ALT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you supply a Genbank file as the &lt;code&gt;--reference&lt;/code&gt; rather than a FASTA file, Snippy will fill in these extra columns by using the genome annotation to tell you which feature was affected by the variant:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FTYPE&lt;/td&gt; &#xA;   &lt;td&gt;Class of feature affected: CDS tRNA rRNA ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;STRAND&lt;/td&gt; &#xA;   &lt;td&gt;Strand the feature was on: + - .&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NT_POS&lt;/td&gt; &#xA;   &lt;td&gt;Nucleotide position of the variant withinthe feature / Length in nt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AA_POS&lt;/td&gt; &#xA;   &lt;td&gt;Residue position / Length in aa (only if FTYPE is CDS)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LOCUS_TAG&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;/locus_tag&lt;/code&gt; of the feature (if it existed)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GENE&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;/gene&lt;/code&gt; tag of the feature (if it existed)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PRODUCT&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;/product&lt;/code&gt; tag of the feature (if it existed)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EFFECT&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;snpEff&lt;/code&gt; annotated consequence of this variant (ANN tag in .vcf)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Variant Types&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;snp&lt;/td&gt; &#xA;   &lt;td&gt;Single Nucleotide Polymorphism&lt;/td&gt; &#xA;   &lt;td&gt;A =&amp;gt; T&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mnp&lt;/td&gt; &#xA;   &lt;td&gt;Multiple Nuclotide Polymorphism&lt;/td&gt; &#xA;   &lt;td&gt;GC =&amp;gt; AT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ins&lt;/td&gt; &#xA;   &lt;td&gt;Insertion&lt;/td&gt; &#xA;   &lt;td&gt;ATT =&amp;gt; AGTT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;del&lt;/td&gt; &#xA;   &lt;td&gt;Deletion&lt;/td&gt; &#xA;   &lt;td&gt;ACGG =&amp;gt; ACG&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;complex&lt;/td&gt; &#xA;   &lt;td&gt;Combination of snp/mnp&lt;/td&gt; &#xA;   &lt;td&gt;ATTC =&amp;gt; GTTA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;The variant caller&lt;/h2&gt; &#xA;&lt;p&gt;The variant calling is done by &lt;a href=&#34;https://github.com/ekg/freebayes&#34;&gt;Freebayes&lt;/a&gt;. The key parameters under user control are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--mincov&lt;/code&gt; - the minimum number of reads covering a site to be considered (default=10)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--minfrac&lt;/code&gt; - the minimum proportion of those reads which must differ from the reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--minqual&lt;/code&gt; - the minimum VCF variant call &#34;quality&#34; (default=100)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Looking at variants in detail with &lt;code&gt;snippy-vcf_report&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you run Snippy with the &lt;code&gt;--report&lt;/code&gt; option it will automatically run &lt;code&gt;snippy-vcf_report&lt;/code&gt; and generate a &lt;code&gt;snps.report.txt&lt;/code&gt; which has a section like this for each SNP in &lt;code&gt;snps.vcf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&amp;gt;LBB_contig000001:10332 snp A=&amp;gt;T DP=7 Q=66.3052 [7]&#xA;&#xA;         10301     10311     10321     10331     10341     10351     10361&#xA;tcttctccgagaagggaatataatttaaaaaaattcttaaataattcccttccctcccgttataaaaattcttcgcttat&#xA;........................................T.......................................&#xA;,,,,,,  ,,,,,,,,,,,,,,,,,,,,,t,,,,,,,,,,t,,t,,,,,,,,,,,,,,,,g,,,,,,,g,,,,,,,,,t,&#xA;,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, .......T..................A............A.......&#xA;.........................A........A.....T...........    .........C..............&#xA;.....A.....................C..C........CT.................TA.............&#xA;,a,,,,,a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,t,t,,,g,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,&#xA;,,,,,ga,,,,,,,c,,,,,,,t,,,,,,,,,,g,,,,,,t,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,&#xA;                            ............T.C..............G...............G......&#xA;                                                    ,,,,,,,g,,,,,,,,g,,,,,,,,,,,&#xA;                                                           g,,,,,,,,,,,,,,,,,,,,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to generate this report &lt;em&gt;after&lt;/em&gt; you have run Snippy, you can run it directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd snippydir&#xA;snippy-vcf_report --cpus 8 --auto &amp;gt; snps.report.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a HTML version for viewing in a web browser, use the &lt;code&gt;--html&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd snippydir&#xA;snippy-vcf_report --html --cpus 16 --auto &amp;gt; snps.report.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It works by running &lt;code&gt;samtools tview&lt;/code&gt; for each variant, which can be very slow if you have 1000s of variants. Using &lt;code&gt;--cpus&lt;/code&gt; as high as possible is recommended.&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--rgid&lt;/code&gt; will set the Read Group (&lt;code&gt;RG&lt;/code&gt;) ID (&lt;code&gt;ID&lt;/code&gt;) and Sample (&lt;code&gt;SM&lt;/code&gt;) in the BAM and VCF file. If not supplied, it will will use the &lt;code&gt;--outdir&lt;/code&gt; folder name for both &lt;code&gt;ID&lt;/code&gt; and &lt;code&gt;SM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--mapqual&lt;/code&gt; is the minimum mapping quality to accept in variant calling. BWA MEM using &lt;code&gt;60&lt;/code&gt; to mean a read is &#34;uniquely mapped&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--basequal&lt;/code&gt; is minimum quality a nucleotide needs to be used in variant calling. We use &lt;code&gt;13&lt;/code&gt; which corresponds to error probability of ~5%. It is a traditional SAMtools value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--maxsoft&lt;/code&gt; is how many bases of an alignment to allow to be soft-clipped before discarding the alignment. This is to encourage global over local alignment, and is passed to the &lt;code&gt;samclip&lt;/code&gt; tool.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--mincov&lt;/code&gt; and &lt;code&gt;--minfrac&lt;/code&gt; are used to apply hard thresholds to the variant calling beyond the existing statistical measure.. The optimal values depend on your sequencing depth and contamination rate. Values of 10 and 0.9 are commonly used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--targets&lt;/code&gt; takes a BED file and only calls variants in those regions. Not normally needed unless you are only interested in variants in specific locii (eg. AMR genes) but are still performing WGS rather than amplicon sequencing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--contigs&lt;/code&gt; allows you to call SNPs from contigs rather than reads. It shreds the contigs into synthetic reads, as to put the calls on even footing with other read samples in a multi-sample analysis.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Core SNP phylogeny&lt;/h1&gt; &#xA;&lt;p&gt;If you call SNPs for multiple isolates from the same reference, you can produce an alignment of &#34;core SNPs&#34; which can be used to build a high-resolution phylogeny (ignoring possible recombination). A &#34;core site&#34; is a genomic position that is present in &lt;em&gt;all&lt;/em&gt; the samples. A core site can have the same nucleotide in every sample (&#34;monomorphic&#34;) or some samples can be different (&#34;polymorphic&#34; or &#34;variant&#34;). If we ignore the complications of &#34;ins&#34;, &#34;del&#34; variant types, and just use variant sites, these are the &#34;core SNP genome&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Input Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a set of Snippy folders which used the same &lt;code&gt;--ref&lt;/code&gt; sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;snippy-multi&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To simplify running a set of isolate sequences (reads or contigs) against the same reference, you can use the &lt;code&gt;snippy-multi&lt;/code&gt; script. This script requires a &lt;em&gt;tab separated&lt;/em&gt; input file as follows, and can handle paired-end reads, single-end reads, and assembled contigs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# input.tab = ID R1 [R2]&#xA;Isolate1&#x9;/path/to/R1.fq.gz&#x9;/path/to/R2.fq.gz&#xA;Isolate1b&#x9;/path/to/R1.fastq.gz&#x9;/path/to/R2.fastq.gz&#xA;Isolate1c&#x9;/path/to/R1.fa&#x9;&#x9;/path/to/R2.fa&#xA;# single end reads supported too&#xA;Isolate2&#x9;/path/to/SE.fq.gz&#xA;Isolate2b&#x9;/path/to/iontorrent.fastq&#xA;# or already assembled contigs if you don&#39;t have reads&#xA;Isolate3&#x9;/path/to/contigs.fa&#xA;Isolate3b&#x9;/path/to/reference.fna.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then one would run this to generate the output script. The first parameter should be the &lt;code&gt;input.tab&lt;/code&gt; file. The remaining parameters should be any remaining shared &lt;code&gt;snippy&lt;/code&gt; parameters. The &lt;code&gt;ID&lt;/code&gt; will be used for each isolate&#39;s &lt;code&gt;--outdir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% snippy-multi input.tab --ref Reference.gbk --cpus 16 &amp;gt; runme.sh&#xA;&#xA;% less runme.sh   # check the script makes sense&#xA;&#xA;% sh ./runme.sh   # leave it running over lunch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will also run &lt;code&gt;snippy-core&lt;/code&gt; at the end to generate the core genome SNP alignment files &lt;code&gt;core.*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Output Files&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Extension&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.aln&lt;/td&gt; &#xA;   &lt;td&gt;A core SNP alignment in the &lt;code&gt;--aformat&lt;/code&gt; format (default FASTA)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.full.aln&lt;/td&gt; &#xA;   &lt;td&gt;A whole genome SNP alignment (includes invariant sites)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.tab&lt;/td&gt; &#xA;   &lt;td&gt;Tab-separated columnar list of &lt;strong&gt;core&lt;/strong&gt; SNP sites with alleles but NO annotations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.vcf&lt;/td&gt; &#xA;   &lt;td&gt;Multi-sample VCF file with genotype &lt;code&gt;GT&lt;/code&gt; tags for all discovered alleles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.txt&lt;/td&gt; &#xA;   &lt;td&gt;Tab-separated columnar list of alignment/core-size statistics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.ref.fa&lt;/td&gt; &#xA;   &lt;td&gt;FASTA version/copy of the &lt;code&gt;--ref&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.self_mask.bed&lt;/td&gt; &#xA;   &lt;td&gt;BED file generated if &lt;code&gt;--mask auto&lt;/code&gt; is used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Why is &lt;code&gt;core.full.aln&lt;/code&gt; an alphabet soup?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;core.full.aln&lt;/code&gt; file is a FASTA formatted mutliple sequence alignment file. It has one sequence for the reference, and one for each sample participating in the core genome calculation. Each sequence has the same length as the reference sequence.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Character&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ATGC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Same as the reference&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;atgc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Different from the reference&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Zero coverage in this sample &lt;strong&gt;or&lt;/strong&gt; a deletion relative to the reference&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Low coverage in this sample (based on &lt;code&gt;--mincov&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Masked region of reference (from &lt;code&gt;--mask&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Heterozygous or poor quality genotype (has &lt;code&gt;GT=0/1&lt;/code&gt; or &lt;code&gt;QUAL &amp;lt; --minqual&lt;/code&gt; in &lt;code&gt;snps.raw.vcf&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can remove all the &#34;weird&#34; characters and replace them with &lt;code&gt;N&lt;/code&gt; using the included &lt;code&gt;snippy-clean_full_aln&lt;/code&gt;. This is useful when you need to pass it to a tree-building or recombination-removal tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% snippy-clean_full_aln core.full.aln &amp;gt; clean.full.aln&#xA;% run_gubbins.py -p gubbins clean.full.aln&#xA;% snp-sites -c gubbins.filtered_polymorphic_sites.fasta &amp;gt; clean.core.aln&#xA;% FastTree -gtr -nt clean.core.aln &amp;gt; clean.core.tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to mask certain regions of the genome, you can provide a BED file with the &lt;code&gt;--mask&lt;/code&gt; parameter. Any SNPs in those regions will be excluded. This is common for genomes like &lt;em&gt;M.tuberculosis&lt;/em&gt; where pesky repetitive PE/PPE/PGRS genes cause false positives, or masking phage regions. A &lt;code&gt;--mask&lt;/code&gt; bed file for &lt;em&gt;M.tb&lt;/em&gt; is provided with Snippy in the &lt;code&gt;etc/Mtb_NC_000962.3_mask.bed&lt;/code&gt; folder. It is derived from the XLSX file from &lt;a href=&#34;https://gph.niid.go.jp/tgs-tb/&#34;&gt;https://gph.niid.go.jp/tgs-tb/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you use the &lt;code&gt;snippy --cleanup&lt;/code&gt; option the reference files will be deleted. This means &lt;code&gt;snippy-core&lt;/code&gt; can not &#34;auto-find&#34; the reference. In this case you simply use &lt;code&gt;snippy-core --reference REF&lt;/code&gt; to provide the reference in FASTA format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Advanced usage&lt;/h1&gt; &#xA;&lt;h2&gt;Increasing speed when too many reads&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you will have far more sequencing depth that you need to call SNPs. A common problem is a whole MiSeq flowcell for a single bacterial isolate, where 25 million reads results in genome depth as high as 2000x. This makes Snippy far slower than it needs to be, as most SNPs will be recovered with 50-100x depth. If you know you have 10 times as much data as you need, Snippy can randomly sub-sample your FASTQ data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# have 1000x depth, only need 100x so sample at 10%&#xA;snippy --subsample 0.1  ...&#xA;&amp;lt;snip&amp;gt;&#xA;Sub-sampling reads at rate 0.1&#xA;&amp;lt;snip&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Only calling SNPs in particular regions&lt;/h2&gt; &#xA;&lt;p&gt;If you are looking for specific SNPs, say AMR releated ones in particular genes in your reference genome, you can save much time by only calling variants there. Just put the regions of interest into a BED file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snippy --targets sites.bed ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Finding SNPs between contigs&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes one of your samples is only available as contigs, without corresponding FASTQ reads. You can still use these contigs with Snippy to find variants against a reference. It does this by shredding the contigs into 250 bp single-end reads at &lt;code&gt;2 &amp;amp;times; --mincov&lt;/code&gt; uniform coverage.&lt;/p&gt; &#xA;&lt;p&gt;To use this feature, instead of providing &lt;code&gt;--R1&lt;/code&gt; and &lt;code&gt;--R2&lt;/code&gt; you use the &lt;code&gt;--ctgs&lt;/code&gt; option with the contigs file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ls&#xA;ref.gbk mutant.fasta&#xA;&#xA;% snippy --outdir mut1 --ref ref.gbk --ctgs mut1.fasta&#xA;Shredding mut1.fasta into pseudo-reads.&#xA;Identified 257 variants.&#xA;&#xA;% snippy --outdir mut2 --ref ref.gbk --ctgs mut2.fasta&#xA;Shredding mut2.fasta into pseudo-reads.&#xA;Identified 413 variants.&#xA;&#xA;% snippy-core mut1 mut2 &#xA;Found 129 core SNPs from 541 variant sites.&#xA;&#xA;% ls&#xA;core.aln core.full.aln ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This output folder is completely compatible with &lt;code&gt;snippy-core&lt;/code&gt; so you can mix FASTQ and contig based &lt;code&gt;snippy&lt;/code&gt; output folders to produce alignments.&lt;/p&gt; &#xA;&lt;h2&gt;Correcting assembly errors&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;de novo&lt;/em&gt; assembly process attempts to reconstruct the reads into the original DNA sequences they were derived from. These reconstructed sequences are called &lt;em&gt;contigs&lt;/em&gt; or &lt;em&gt;scaffolds&lt;/em&gt;. For various reasons, small errors can be introduced into the assembled contigs which are not supported by the original reads used in the assembly process.&lt;/p&gt; &#xA;&lt;p&gt;A common strategy is to align the reads back to the contigs to check for discrepancies. These errors appear as variants (SNPs and indels). If we can &lt;em&gt;reverse&lt;/em&gt; these variants than we can &#34;correct&#34; the contigs to match the evidence provided by the original reads. Obviously this strategy can go wrong if one is not careful about &lt;em&gt;how&lt;/em&gt; the read alignment is performed and which variants are accepted.&lt;/p&gt; &#xA;&lt;p&gt;Snippy is able to help with this contig correction process. In fact, it produces a &lt;code&gt;snps.consensus.fa&lt;/code&gt; FASTA file which is the &lt;code&gt;ref.fa&lt;/code&gt; input file provided but with the discovered variants in &lt;code&gt;snps.vcf&lt;/code&gt; applied!&lt;/p&gt; &#xA;&lt;p&gt;However, Snippy is not perfect and sometimes finds questionable variants. Typically you would make a copy of &lt;code&gt;snps.vcf&lt;/code&gt; (let&#39;s call it &lt;code&gt;corrections.vcf&lt;/code&gt;) and remove those lines corresponding to variants we don&#39;t trust. For example, when correcting Roche 454 and PacBio SMRT contigs, we primarily expect to find homopolymer errors and hence expect to see &lt;code&gt;ins&lt;/code&gt; more than &lt;code&gt;snp&lt;/code&gt; type variants.&lt;/p&gt; &#xA;&lt;p&gt;In this case you need to run the correcting process manually using these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd snippy-outdir&#xA;% cp snps.vcf corrections.vcf&#xA;% $EDITOR corrections.vcf&#xA;% bgzip -c corrections.vcf &amp;gt; corrections.vcf.gz&#xA;% tabix -p vcf corrections.vcf.gz&#xA;% vcf-consensus corrections.vcf.gz &amp;lt; ref.fa &amp;gt; corrected.fa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may wish to &lt;em&gt;iterate&lt;/em&gt; this process by using &lt;code&gt;corrected.fa&lt;/code&gt; as a new &lt;code&gt;--ref&lt;/code&gt; for a repeated run of Snippy. Sometimes correcting one error allows BWA to align things it couldn&#39;t before, and new errors are uncovered.&lt;/p&gt; &#xA;&lt;p&gt;Snippy may not be the best way to correct assemblies - you should consider dedicated tools such as &lt;a href=&#34;http://www.broadinstitute.org/software/pilon/&#34;&gt;PILON&lt;/a&gt; or &lt;a href=&#34;http://icorn.sourceforge.net/&#34;&gt;iCorn2&lt;/a&gt;, or adjust the Quiver parameters (for Pacbio data).&lt;/p&gt; &#xA;&lt;h2&gt;Unmapped Reads&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you are interested in the reads which did &lt;em&gt;not&lt;/em&gt; align to the reference genome. These reads represent DNA that was novel to &lt;em&gt;your&lt;/em&gt; sample which is potentially interesting. A standard strategy is to &lt;em&gt;de novo&lt;/em&gt; assemble the unmapped reads to discover these novel DNA elements, which often comprise mobile genetic elements such as plasmids.&lt;/p&gt; &#xA;&lt;p&gt;By default, Snippy does &lt;strong&gt;not&lt;/strong&gt; keep the unmapped reads, not even in the BAM file. If you wish to keep them, use the &lt;code&gt;--unmapped&lt;/code&gt; option and the unaligned reads will be saved to a compressed FASTQ file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% snippy --outdir out --unmapped ....&#xA;&#xA;% ls out/&#xA;snps.unmapped.fastq.gz ....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Information&lt;/h1&gt; &#xA;&lt;h2&gt;Etymology&lt;/h2&gt; &#xA;&lt;p&gt;The name Snippy is a combination of &lt;a href=&#34;http://en.wikipedia.org/wiki/Single-nucleotide_polymorphism&#34;&gt;SNP&lt;/a&gt; (pronounced &#34;snip&#34;) , &lt;a href=&#34;http://www.thefreedictionary.com/snappy&#34;&gt;snappy&lt;/a&gt; (meaning &#34;quick&#34;) and &lt;a href=&#34;http://en.wikipedia.org/wiki/Skippy_the_Bush_Kangaroo&#34;&gt;Skippy the Bush Kangaroo&lt;/a&gt; (to represent its Australian origin)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Snippy is free software, released under the &lt;a href=&#34;https://raw.githubusercontent.com/tseemann/snippy/master/LICENSE&#34;&gt;GPL (version 2)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Please submit suggestions and bug reports to the &lt;a href=&#34;https://github.com/tseemann/snippy/issues&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;perl &amp;gt;= 5.18&lt;/li&gt; &#xA; &lt;li&gt;bioperl &amp;gt;= 1.7&lt;/li&gt; &#xA; &lt;li&gt;bwa mem &amp;gt;= 0.7.12&lt;/li&gt; &#xA; &lt;li&gt;minimap2 &amp;gt;= 2.0&lt;/li&gt; &#xA; &lt;li&gt;samtools &amp;gt;= 1.7&lt;/li&gt; &#xA; &lt;li&gt;bcftools &amp;gt;= 1.7&lt;/li&gt; &#xA; &lt;li&gt;bedtools &amp;gt;= 2.0&lt;/li&gt; &#xA; &lt;li&gt;GNU parallel &amp;gt;= 2013xxxx&lt;/li&gt; &#xA; &lt;li&gt;freebayes &amp;gt;= 1.1 (freebayes, freebayes-parallel, fasta_generate_regions.py)&lt;/li&gt; &#xA; &lt;li&gt;vcflib &amp;gt;= 1.0 (vcfstreamsort, vcfuniq, vcffirstheader)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://genome.sph.umich.edu/wiki/Vt&#34;&gt;vt&lt;/a&gt; &amp;gt;= 0.5&lt;/li&gt; &#xA; &lt;li&gt;snpEff &amp;gt;= 4.3&lt;/li&gt; &#xA; &lt;li&gt;samclip &amp;gt;= 0.2&lt;/li&gt; &#xA; &lt;li&gt;seqtk &amp;gt;= 1.2&lt;/li&gt; &#xA; &lt;li&gt;snp-sites &amp;gt;= 2.0&lt;/li&gt; &#xA; &lt;li&gt;any2fasta &amp;gt;= 0.4&lt;/li&gt; &#xA; &lt;li&gt;wgsim &amp;gt;= 1.8 (for testing only - &lt;code&gt;wgsim&lt;/code&gt; command)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bundled binaries&lt;/h2&gt; &#xA;&lt;p&gt;For Linux (compiled on Ubuntu 16.04 LTS) and macOS (compiled on High Sierra Brew) some of the binaries, JARs and scripts are included.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kong/lua-kong-nginx-module</title>
    <updated>2022-08-28T01:48:52Z</updated>
    <id>tag:github.com,2022-08-28:/Kong/lua-kong-nginx-module</id>
    <link href="https://github.com/Kong/lua-kong-nginx-module" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nginx C module to allow deeper control of Nginx behaviors by Kong Lua code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Name&lt;/h1&gt; &#xA;&lt;p&gt;lua-kong-nginx-module - Nginx C module that exposes a Lua API to dynamically control Nginx&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#name&#34;&gt;Name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#directives&#34;&gt;Directives&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#lua_kong_load_var_index&#34;&gt;lua_kong_load_var_index&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#methods&#34;&gt;Methods&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsrequest_client_certificate&#34;&gt;resty.kong.tls.request_client_certificate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsdisable_session_reuse&#34;&gt;resty.kong.tls.disable_session_reuse&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsget_full_client_certificate_chain&#34;&gt;resty.kong.tls.get_full_client_certificate_chain&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_cert_and_key&#34;&gt;resty.kong.tls.set_upstream_cert_and_key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_ssl_trusted_store&#34;&gt;resty.kong.tls.set_upstream_ssl_trusted_store&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_ssl_verify&#34;&gt;resty.kong.tls.set_upstream_ssl_verify&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsset_upstream_ssl_verify_depth&#34;&gt;resty.kong.tls.set_upstream_ssl_verify_depth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykonggrpcset_authority&#34;&gt;resty.kong.grpc.set_authority&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsdisable_proxy_ssl&#34;&gt;resty.kong.tls.disable_proxy_ssl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongvarpatch_metatable&#34;&gt;resty.kong.var.patch_metatable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;Kong often needs to be able to change Nginx behavior at runtime. Traditionally this has been done using various core patches. This module attempts to unify those approaches and ensure the least amount of modifications made directly to Nginx to support future maintainability.&lt;/p&gt; &#xA;&lt;p&gt;Patches from &lt;a href=&#34;https://github.com/Kong/kong-build-tools/tree/master/openresty-patches/patches&#34;&gt;openresty-patches&lt;/a&gt; are &lt;strong&gt;required&lt;/strong&gt; for this module to compile successfully. You may use the &lt;a href=&#34;https://github.com/Kong/kong-build-tools/tree/master/openresty-build-tools&#34;&gt;openresty-build-tools&lt;/a&gt; script to automatically build an OpenResty binary with required patches as well as this module included.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;This module can be installed just like any ordinary Nginx C module, using the &lt;code&gt;--add-module&lt;/code&gt; configuration option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./configure --prefix=/usr/local/kong-nginx \&#xA;            --add-module=/path/to/lua-kong-nginx-module \&#xA;            ...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Directives&lt;/h1&gt; &#xA;&lt;h2&gt;lua_kong_load_var_index&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;lua_kong_load_var_index $variable | default;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ensure &lt;em&gt;variable&lt;/em&gt; is indexed. Note that variables defined by &lt;code&gt;set&lt;/code&gt; directive are always indexed by default and does not need to be defined here again.&lt;/p&gt; &#xA;&lt;p&gt;Common variables defined by other modules that are already indexed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$proxy_host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$proxy_internal_body_length&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$proxy_internal_chunked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$remote_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$remote_user&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_referer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_user_agent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$host&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Specially, use &lt;code&gt;lua_kong_load_var_index default&lt;/code&gt; to index &lt;em&gt;commonly used variables&lt;/em&gt; as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$args&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$is_args&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$bytes_sent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$content_type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_authorization&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_connection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_kong_debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_proxy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_proxy_connection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_te&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_upgrade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_for&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_host&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_path&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_prefix&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http_x_forwarded_proto&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$https&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$http2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$realip_remote_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$realip_remote_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$remote_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_length&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_method&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_time&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$request_uri&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$scheme&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$server_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$server_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_cipher&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_client_raw_cert&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_client_verify&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_protocol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ssl_server_name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_http_connection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_http_trailer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_http_upgrade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$upstream_status&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongvarpatch_metatable&#34;&gt;resty.kong.var.patch_metatable&lt;/a&gt; on how to enable indexed variable access.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Methods&lt;/h1&gt; &#xA;&lt;h2&gt;resty.kong.tls.request_client_certificate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;succ, err = resty.kong.tls.request_client_certificate()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;ssl_certificate_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Requests client to present its client-side certificate to initiate mutual TLS authentication between server and client.&lt;/p&gt; &#xA;&lt;p&gt;This function only &lt;em&gt;requests&lt;/em&gt;, but does not &lt;em&gt;require&lt;/em&gt; the client to start the mTLS process. Even if the client did not present a client certificate the TLS handshake will still complete (obviously not being mTLS in that case). Whether the client honored the request can be determined using &lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#restykongtlsget_full_client_certificate_chain&#34;&gt;get_full_client_certificate_chain&lt;/a&gt; in later phases.&lt;/p&gt; &#xA;&lt;p&gt;This function returns &lt;code&gt;true&lt;/code&gt; when the call is successful. Otherwise it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.disable_session_reuse&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;succ, err = resty.kong.tls.disable_session_reuse()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;ssl_certificate_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prevents the TLS session for the current connection from being reused by disabling session ticket and session ID for the current TLS connection.&lt;/p&gt; &#xA;&lt;p&gt;This function returns &lt;code&gt;true&lt;/code&gt; when the call is successful. Otherwise it returns &lt;code&gt;nil&lt;/code&gt; and a string describing the error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.get_full_client_certificate_chain&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;pem_chain, err = resty.kong.tls.get_full_client_certificate_chain()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, content_by_lua*, log_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns the PEM encoded downstream client certificate chain with the client certificate at the top and intermediate certificates (if any) at the bottom.&lt;/p&gt; &#xA;&lt;p&gt;If client did not present any certificate or if session was reused, then this function will return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is functionally similar to &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_client_raw_cert&#34;&gt;$ssl_client_raw_cert&lt;/a&gt; provided by &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html&#34;&gt;ngx_http_ssl_module&lt;/a&gt;, with the notable exception that this function also returns any certificate chain client sent during handshake.&lt;/p&gt; &#xA;&lt;p&gt;If the TLS session was reused, (signaled by &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_session_reused&#34;&gt;$ssl_session_reused&lt;/a&gt; returns &#34;r&#34;), then no client certificate information will be available as a full handshake never occurred. In this case caller should use &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_session_id&#34;&gt;$ssl_session_id&lt;/a&gt; to associate this session with one of the previous handshakes to identify the connecting client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_cert_and_key&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_cert_and_key(chain, key)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overrides and enables sending client certificate while connecting to the upstream in the current request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chain&lt;/code&gt; is the client certificate and intermediate chain (if any) returned by functions such as &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md#parse_pem_cert&#34;&gt;ngx.ssl.parse_pem_cert&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;key&lt;/code&gt; is the private key corresponding to the client certificate returned by functions such as &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/ssl.md#parse_pem_priv_key&#34;&gt;ngx.ssl.parse_pem_priv_key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt; and future handshakes with upstream servers will always use the provided client certificate. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_ssl_trusted_store&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_ssl_trusted_store(store)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set upstream ssl verification trusted store of current request. Global setting set by &lt;code&gt;proxy_ssl_trusted_certificate&lt;/code&gt; will be overwritten for the current request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;store&lt;/code&gt; is a table object that can be created by &lt;a href=&#34;https://github.com/fffonion/lua-resty-openssl#storenew&#34;&gt;resty.openssl.x509.store.new&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt; and future handshakes with upstream servers will be verified with given store. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local x509 = require(&#34;resty.openssl.x509&#34;)&#xA;local crt, err = x509.new([[-----BEGIN CERTIFICATE-----&#xA;...&#xA;-----END CERTIFICATE-----]])&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to parse cert: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;local store = require(&#34;resty.openssl.x509.store&#34;)&#xA;local st, err = store.new()&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to create store: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;local ok, err = st:add(crt)&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to add cert to store: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;-- st:add can be called multiple times, also accept a crl&#xA;-- st:add(another_crt)&#xA;-- st:add(crl)&#xA;-- OR&#xA;-- st:use_default() to load default CA bundle&#xA;local tls = require(&#34;resty.kong.tls&#34;)&#xA;local ok, err = tls.set_upstream_ssl_trusted_store(st.ctx)&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to set upstream trusted store: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;local ok, err = tls.set_upstream_ssl_verify(true)&#xA;if err then&#xA;    ngx.log(ngx.ERR, &#34;failed to set upstream ssl verify: &#34;, err)&#xA;    ngx.exit(500)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_ssl_verify&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_ssl_verify(verify)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set upstream ssl verification enablement of current request to the given boolean argument &lt;code&gt;verify&lt;/code&gt;. Global setting set by &lt;code&gt;proxy_ssl_verify&lt;/code&gt; will be overwritten.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.set_upstream_ssl_verify_depth&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.set_upstream_ssl_verify_depth(depth)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set upstream ssl verification depth of current request to the given non-negative integer argument &lt;code&gt;depth&lt;/code&gt;. Global setting set by &lt;code&gt;proxy_ssl_verify_depth&lt;/code&gt; will be overwritten.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.grpc.set_authority&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.grpc.set_authority(new_authority)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;rewrite_by_lua*, access_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overrides the &lt;code&gt;:authority&lt;/code&gt; pseudo header sent to gRPC upstream by &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_grpc_module.html&#34;&gt;ngx_http_grpc_module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function is a capability not possible in Nginx through means of config directive alone. Reason being Nginx auto-generates the &lt;code&gt;:authority&lt;/code&gt; pseudo header without giving us a way to override it at config time. Closest being &lt;code&gt;grpc_set_header Host &#34;foo.example.com&#34;&lt;/code&gt;, but this will cause the gRPC module to use the &lt;code&gt;Host&lt;/code&gt; header and not generate the &lt;code&gt;:authority&lt;/code&gt; pseudo header, causing problems for certain gRPC server.&lt;/p&gt; &#xA;&lt;p&gt;When called, this function accepts a new value to override the &lt;code&gt;:authority&lt;/code&gt; pseudo header that will be generated by the ngx_http_grpc_module for the current request.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;new_authority&lt;/code&gt; parameter &lt;strong&gt;can not&lt;/strong&gt; be an empty string.&lt;/p&gt; &#xA;&lt;p&gt;On success, this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise &lt;code&gt;nil&lt;/code&gt; and a string describing the error will be returned.&lt;/p&gt; &#xA;&lt;p&gt;This function can be called multiple times in the same request. Later calls override previous ones.&lt;/p&gt; &#xA;&lt;p&gt;If called in the &lt;code&gt;balancer_by_lua&lt;/code&gt; context, the request needs to be recreated (see &lt;a href=&#34;https://github.com/openresty/lua-resty-core/raw/master/lib/ngx/balancer.md#recreate_request&#34;&gt;balancer.recreate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.tls.disable_proxy_ssl&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;ok, err = resty.kong.tls.disable_proxy_ssl()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;preread_by_lua*, balancer_by_lua*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;stream&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Disables the TLS handshake to upstream for &lt;a href=&#34;https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html&#34;&gt;ngx_stream_proxy_module&lt;/a&gt;. Effectively this overrides &lt;a href=&#34;https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_ssl&#34;&gt;proxy_ssl&lt;/a&gt; directive to &lt;code&gt;off&lt;/code&gt; setting for the current stream session.&lt;/p&gt; &#xA;&lt;p&gt;This function has no side effects if the &lt;code&gt;proxy_ssl off;&lt;/code&gt; setting has already been specified inside &lt;code&gt;nginx.conf&lt;/code&gt; or if this function has been previously called from the current session.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;resty.kong.var.patch_metatable&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt; &lt;em&gt;resty.kong.var.patch_metatable()&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;context:&lt;/strong&gt; &lt;em&gt;init_by_lua&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;subsystems:&lt;/strong&gt; &lt;em&gt;http&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Indexed variable access is a faster way of accessing Nginx variables for OpenResty. This method patches the metatable of &lt;code&gt;ngx.var&lt;/code&gt; to enable index access to variables that supports it. It should be called once in the &lt;code&gt;init&lt;/code&gt; phase which will be effective for all subsequent &lt;code&gt;ngx.var&lt;/code&gt; uses.&lt;/p&gt; &#xA;&lt;p&gt;For variables that does not have indexed access, the slower hash based lookup will be used instead (this is the OpenResty default behavior).&lt;/p&gt; &#xA;&lt;p&gt;To ensure a variable can be accessed using index, you can use the &lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#lua_kong_load_var_index&#34;&gt;lua_kong_load_var_index&lt;/a&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2020 Kong Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/lua-kong-nginx-module/master/#table-of-contents&#34;&gt;Back to TOC&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>