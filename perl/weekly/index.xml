<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T02:00:56Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>brk3/o2sms</title>
    <updated>2023-10-01T02:00:56Z</updated>
    <id>tag:github.com,2023-10-01:/brk3/o2sms</id>
    <link href="https://github.com/brk3/o2sms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unmodified Git mirror from SVN of macker&#39;s o2sms&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>LennMars/MedNLP_Baseline</title>
    <updated>2023-10-01T02:00:56Z</updated>
    <id>tag:github.com,2023-10-01:/LennMars/MedNLP_Baseline</id>
    <link href="https://github.com/LennMars/MedNLP_Baseline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>PerlDancer/dancer2-plugin-deferred</title>
    <updated>2023-10-01T02:00:56Z</updated>
    <id>tag:github.com,2023-10-01:/PerlDancer/dancer2-plugin-deferred</id>
    <link href="https://github.com/PerlDancer/dancer2-plugin-deferred" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Defer messages or data across redirections&lt;/p&gt;&lt;hr&gt;&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt; &#xA;&lt;p&gt;use Dancer2::Plugin::Deferred;&lt;/p&gt; &#xA;&lt;p&gt;get &#39;/defer&#39; =&amp;gt; sub { deferred error =&amp;gt; &#34;Klaatu barada nikto&#34;; redirect &#39;/later&#39;; }&lt;/p&gt; &#xA;&lt;p&gt;get &#39;/later&#39; =&amp;gt; sub { template &#39;later&#39;; }&lt;/p&gt; &#xA;&lt;h1&gt;in template &#39;later.tt&#39;&lt;/h1&gt; &#xA;&lt;p&gt;&amp;lt;% IF deferred.error %&amp;gt;&lt;/p&gt; &#xA;&lt;div class=&#34;error&#34;&gt;&#xA; &amp;lt;% deferred.error %&amp;gt;&#xA;&lt;/div&gt; &amp;lt;% END %&amp;gt; &#xA;&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt; &#xA;&lt;p&gt;This L&#xA; &lt;dancer2&gt;&#xA;   plugin provides a method for deferring a one-time message across a redirect. It is similar to &#34;flash&#34; messages, but without the race conditions that can result from multiple tabs in a browser or from AJAX requests. It is similar in design to L&#xA;  &lt;a href=&#34;Catalyst::Plugin::StatusMessage&#34;&gt;Catalyst::Plugin::StatusMessage&lt;/a&gt;, but adapted for Dancer2.&#xA; &lt;/dancer2&gt;&lt;/p&gt; &#xA;&lt;p&gt;It works by creating a unique message ID within the session that holds deferred data. The message ID is automatically added as a query parameter to redirection requests. It&#39;s sort of like a session within a session, but tied to a request rather than global to the browser. (It will even chain across multiple redirects.)&lt;/p&gt; &#xA;&lt;p&gt;When a template is rendered, a pre-template hook retrieves the data and deletes it from the session. Alternatively, the data can be retrieved manually (which will also automatically delete the data.)&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, the message ID parameters can be retrieved and used to construct a hyperlink for a message to be retrieved later. In this case, the message is preserved past the template hook. (The template should be sure not to render the message if not desired.)&lt;/p&gt; &#xA;&lt;p&gt;=head1 USAGE&lt;/p&gt; &#xA;&lt;p&gt;=head2 deferred&lt;/p&gt; &#xA;&lt;p&gt;deferred $key =&amp;gt; $value; $value = deferred $key; # also deletes $key&lt;/p&gt; &#xA;&lt;p&gt;This function works just like C&lt;var&gt; or C&#xA;  &lt;session&gt;&#xA;   , except that it lasts only for the current request and across any redirects. Data is deleted if accessed. If a key is set to an undefined value, the key is deleted from the deferred data hash.&#xA;  &lt;/session&gt;&lt;/var&gt;&lt;/p&gt; &#xA;&lt;p&gt;=head2 all_deferred&lt;/p&gt; &#xA;&lt;p&gt;template &#39;index&#39;, { deferred =&amp;gt; all_deferred };&lt;/p&gt; &#xA;&lt;p&gt;This function returns all the deferred data as a hash reference and deletes the stored data. This is called automatically in the C&amp;lt;before_template_render&amp;gt; hook, but is available if someone wants to have manual control.&lt;/p&gt; &#xA;&lt;p&gt;=head2 deferred_param&lt;/p&gt; &#xA;&lt;p&gt;template &#39;index&#39; =&amp;gt; { link =&amp;gt; uri_for( &#39;/other&#39;, { deferred_param } ) };&lt;/p&gt; &#xA;&lt;p&gt;This function returns the parameter key and value used to propagate the message to another request. Using this function toggles the C&amp;lt;var_keep_key&amp;gt; variable to true to ensure the message remains to be retrieved by the link.&lt;/p&gt; &#xA;&lt;p&gt;=head1 CONFIGURATION&lt;/p&gt; &#xA;&lt;p&gt;=head1 SEE ALSO&lt;/p&gt; &#xA;&lt;p&gt;=head1 ACKNOWLEDGMENTS&lt;/p&gt; &#xA;&lt;p&gt;Thank you to mst for explaining why L&lt;a href=&#34;Catalyst::Plugin::StatusMessages&#34;&gt;Catalyst::Plugin::StatusMessages&lt;/a&gt; does what it does and putting up with my dumb ideas along the way.&lt;/p&gt;</summary>
  </entry>
</feed>