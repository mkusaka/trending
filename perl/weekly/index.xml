<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T02:19:46Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GuidoBartoli/sherloq</title>
    <updated>2022-08-14T02:19:46Z</updated>
    <id>tag:github.com,2022-08-14:/GuidoBartoli/sherloq</id>
    <link href="https://github.com/GuidoBartoli/sherloq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source digital image forensic toolset&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/logo/sherloq.png&#34; width=&#34;600px&#34; alt=&#34;Sherloq&#34;&gt; &lt;br&gt;&lt;b&gt;An open source image forensic toolset&lt;/b&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;Forensic Image Analysis is the application of image science and domain expertise to interpret the content of an image and/or the image itself in legal matters. Major subdisciplines of Forensic Image Analysis with law enforcement applications include: Photogrammetry, Photographic Comparison, Content Analysis, and Image Authentication.&lt;/em&gt;&#34; (Scientific Working Group on Imaging Technologies)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sherloq&lt;/strong&gt; is a personal research project about implementing a fully integrated environment for digital image forensics. It is not meant as an automatic tool that decide if an image is forged or not (that tool probably will never exist...), but as a companion in experimenting with various algorithms found in the latest research papers and workshops.&lt;/p&gt; &#xA;&lt;p&gt;While many commercial solutions have high retail prices and often reserved to law enforcement and government agencies only,&amp;nbsp;this toolset aims to be a both an extensible framework and a starting point for anyone interested in making experiments in this particular application of digital signal processing.&lt;/p&gt; &#xA;&lt;p&gt;I strongly believe that &lt;em&gt;security-by-obscurity&lt;/em&gt;&amp;nbsp;is the wrong&amp;nbsp;way to offer any kind of forensic service&amp;nbsp;(i.e. &#34;Using this proprietary software I guarantee you that this photo &lt;em&gt;is&lt;/em&gt; pristine... and you have to trust me!&#34;). Following the open-source philosophy, everyone should be able to try various techniques on their own,&amp;nbsp;gain knowledge and share it to the community... even better if they contribute with code improvements! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#historry&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#updates&#34;&gt;Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuidoBartoli/sherloq#bibliography&#34;&gt;Bibliography&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;History&lt;/h1&gt; &#xA;&lt;p&gt;The first version was written in 2015 using C++11 to build a command line utility with many options, but soon it turned to be too cumbersome and not much interactive. That version could be compiled with CMake after installing OpenCV, Boost and AlgLib libraries. This first proof of concept offered about 80% of planned features (see below for the full list).&lt;/p&gt; &#xA;&lt;p&gt;While also including novel algorithms, the 2017 version mainly added a Qt-based multi-window GUI to provide a better user experience. Multiple analyses could be shown on screen and a fast zoom/scroll viewer was implemented for easier image navigation. That project could be compiled with Qt Creator with Qt 5 and OpenCV 3 and covered about 70% of planned features.&lt;/p&gt; &#xA;&lt;p&gt;Fast forward to 2020 when I decided to port everything in Python (PySide2 + Matplotlib + OpenCV) for easier development and deployment. While this iteration is just begun and I have yet to port all the previous code on the new platform, I think this will be the final &#34;form&#34; of the project (as long as someone does not volunteer up to develop a nice web application!).&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m happy to share my code and get in contact with anyone interested to improve or test it, but please keep in mind that this repository is &lt;em&gt;not&lt;/em&gt; intended for distributing a final product, my aim is just to publicly track development of an &lt;em&gt;unpretentious educational tool&lt;/em&gt;, so expect bugs, unpolished code and missing features! ;)&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;This list contains the functions that the toolkit will (hopefully) provide once beta stage is reached (&lt;strong&gt;NOTE:&lt;/strong&gt; functions displayed in &lt;em&gt;italics&lt;/em&gt; inside the program are not yet implemented!).&lt;/p&gt; &#xA;&lt;h2&gt;Interface&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modern Qt-based GUI with multiple tool window management&lt;/li&gt; &#xA; &lt;li&gt;Support for many formats (JPEG, PNG, TIFF, BMP, WebP, PGM, PFM, GIF)&lt;/li&gt; &#xA; &lt;li&gt;Highly responsive image viewer with real-time pan and zoom&lt;/li&gt; &#xA; &lt;li&gt;Many state-of-the-art algorithms to try out interactively&lt;/li&gt; &#xA; &lt;li&gt;Export both visual and textual results of the analysis&lt;/li&gt; &#xA; &lt;li&gt;Extensive online help with explanations and tutorials&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Original Image&lt;/strong&gt;: display the unaltered reference image for visual inspection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File Digest&lt;/strong&gt;: retrieve physical file information, crypto and perceptual hashes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hex Editor&lt;/strong&gt;:&amp;nbsp;open an external hexadecimal editor to show and edit raw bytes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Similar Search&lt;/strong&gt;:&amp;nbsp;browse online search services to find visually similar images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Metadata&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Header Structure&lt;/strong&gt;:&amp;nbsp;dump the file header structure and display an interactive view&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EXIF Full Dump&lt;/strong&gt;:&amp;nbsp;scan through file metadata and gather all available information&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Thumbnail Analysis&lt;/strong&gt;:&amp;nbsp;extract optional embedded thumbnail and compare with original&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Geolocation Data&lt;/strong&gt;:&amp;nbsp;retrieve optional geolocation data and show it on a world map&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inspection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhancing Magnifier&lt;/strong&gt;:&amp;nbsp;magnifying glass with enhancements for better identifying forgeries&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Channel Histogram&lt;/strong&gt;: display single color channels or RGB composite interactive histogram&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Adjustments&lt;/strong&gt;:&amp;nbsp;apply standard image adjustments (brightness, hue, saturation, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reference Comparison&lt;/strong&gt;:&amp;nbsp;open a synchronized double view for comparison with another picture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Detail&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Luminance Gradient&lt;/strong&gt;: analyze horizontal/vertical brightness variations across the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Echo Edge Filter&lt;/strong&gt;: use derivative filters to reveal artificial out-of-focus regions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wavelet Threshold&lt;/strong&gt;: reconstruct image with different wavelet coefficient thresholds&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Frequency Split&lt;/strong&gt;: split image luminance into high and low frequency components&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Colors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RGB/HSV Plots&lt;/strong&gt;:&amp;nbsp;display interactive 2D and 3D plots of RGB and HSV pixel values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Space Conversion&lt;/strong&gt;:&amp;nbsp;convert RGB channels into HSV/YCbCr/Lab/Luv/CMYK/Gray spaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PCA Projection&lt;/strong&gt;:&amp;nbsp;use color PCA to project pixel onto most salient components&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pixel Statistics&lt;/strong&gt;:&amp;nbsp;compute minimum/maximum/average RGB values for every pixel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Noise&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Noise Separation&lt;/strong&gt;: estimate and extract different kind of image noise components&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Min/Max Deviation&lt;/strong&gt;: highlight pixels deviating from block-based min/max statistics&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bit Planes Values&lt;/strong&gt;: show individual bit planes to find inconsistent noise patterns&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PRNU Identification&lt;/strong&gt;: exploit sensor pattern noise introduced by different cameras&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JPEG&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quality Estimation&lt;/strong&gt;:&amp;nbsp;extract quantization&amp;nbsp;tables and estimate last saved JPEG quality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Level Analysis&lt;/strong&gt;: show pixel-level difference against fixed compression levels&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple Compression&lt;/strong&gt;: use a machine learning model to detect multiple compression&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JPEG Ghost Maps&lt;/strong&gt;:&amp;nbsp;highlight traces of different compression levels in difference images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tampering&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contrast Enhancement&lt;/strong&gt;: analyze color distribution to detect contrast enhancements&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy-Move Forgery&lt;/strong&gt;: use invariant feature descriptors for cloned area detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composite Splicing&lt;/strong&gt;: exploit DCT statistics for automatic splicing zone detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image Resampling&lt;/strong&gt;: estimate 2D pixel interpolation for detecting resampling traces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Various&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Median Filtering&lt;/strong&gt;: detect processing traces left by nonlinear median filtering&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Illuminant Map&lt;/strong&gt;: estimate scene local light direction on estimated 3D surfaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dead/Hot Pixels&lt;/strong&gt;: detect and fix dead/hot pixels caused by sensor imperfections&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stereogram Decoder&lt;/strong&gt;: decode 3D images concealed in crossed-eye autostereograms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;Here are some screenshots from the previous C++ Qt GUI (to be updated with the new version):&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/File.jpg&#34; alt=&#34;File Analysis&#34;&gt; &lt;br&gt;&lt;b&gt;File Analysis&lt;/b&gt;: Metadata, Digest and EXIF &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/Color.jpg&#34; alt=&#34;Color Analysis&#34;&gt; &lt;br&gt;&lt;b&gt;Color Analysis&lt;/b&gt;: Space Conversion, PCA Projection, Histograms and Statistics &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/Visual.jpg&#34; alt=&#34;Visual Inspection&#34;&gt; &lt;br&gt;&lt;b&gt;Visual Inspection&lt;/b&gt;: Magnifier Loupe, Image Adjustments and Evidence Comparison &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/JPEG.jpg&#34; alt=&#34;JPEG Analysis&#34;&gt; &lt;br&gt;&lt;b&gt;JPEG Analysis&lt;/b&gt;: Quantization Tables, Compression Ghosts and Error Level Analysis &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GuidoBartoli/sherloq/master/screenshots/LumaNoise.jpg&#34; alt=&#34;Luminance/Noise&#34;&gt; &lt;br&gt;&lt;b&gt;Luminance and Noise&lt;/b&gt;: Light Gradient, Echo Edge, Min/Max Deviation and SNR Consistency &lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;For more information about Python Virtual Environments, you can read &lt;a href=&#34;https://realpython.com/python-virtual-environments-a-primer/&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;[1/2] Virtual environment&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt install python3-distutils python3-dev python3-testresources subversion&#xA;$ wget https://bootstrap.pypa.io/get-pip.py&#xA;$ sudo python3 get-pip.py&#xA;$ sudo pip install virtualenv virtualenvwrapper&#xA;$ echo -e &#34;\n# Python Virtual Environments&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#34;export WORKON_HOME=$HOME/.virtualenvs&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#34;export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &#34;source /usr/local/bin/virtualenvwrapper.sh&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ source ~/.bashrc&#xA;$ mkvirtualenv sq -p python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Terminal and enter &lt;code&gt;python3 --version&lt;/code&gt; to install the interpreter and other command line tools&lt;/li&gt; &#xA; &lt;li&gt;Once installed, proceed similarly to Linux installation:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;   $ wget https://bootstrap.pypa.io/get-pip.py&#xA;   $ sudo python3 get-pip.py&#xA;   $ sudo pip install virtualenv virtualenvwrapper&#xA;   $ echo -e &#34;\n# Python Virtual Environments&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ echo &#34;export WORKON_HOME=$HOME/.virtualenvs&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ echo &#34;export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ echo &#34;source /usr/local/bin/virtualenvwrapper.sh&#34; &amp;gt;&amp;gt; ~/.bash_profile&#xA;   $ source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create a new Python 3 virtual environment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkvirtualenv sq -p python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Install &lt;code&gt;libmagic&lt;/code&gt; via &lt;code&gt;brew&lt;/code&gt; (thanks to @thmsl):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;   $ /bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;   $ brew install libmagic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download latest &lt;em&gt;Python&lt;/em&gt; setup package from &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;official site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install ensuring that &#34;Add Python to PATH&#34; and &#34;PIP installation&#34; are enabled&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;em&gt;Command Prompt&lt;/em&gt; and enter the following commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; pip install virtualenv virtualenvwrapper-win&#xA;&amp;gt; mkvirtualenv sq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conda&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install &lt;a href=&#34;https://www.anaconda.com/products/individual&#34;&gt;Anaconda&lt;/a&gt; (one can also install miniconda, no GUI but is smaller)&lt;/li&gt; &#xA; &lt;li&gt;Install Xinerama library: &lt;code&gt;sudo apt-get install libxcb-xinerama0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open a console to create a Python environment (on Windows one must start a Conda Console or &lt;code&gt;sth&lt;/code&gt; from the Start menu): &lt;code&gt;conda create --copy -n sherloq python&lt;/code&gt; [enter &lt;em&gt;Yes&lt;/em&gt; when it prompts]&lt;/li&gt; &#xA; &lt;li&gt;After install ends, type in the same console &lt;code&gt;conda activate sherloq&lt;/code&gt; to activate the environment&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;[2/2] Launch program&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository content into a local folder&lt;/li&gt; &#xA; &lt;li&gt;Change current directory to the &lt;code&gt;gui&lt;/code&gt; folder inside &lt;code&gt;sherloq&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; to install required packages (use &lt;code&gt;pip install -r requirements_win.txt&lt;/code&gt; on Windows)&lt;/li&gt; &#xA; &lt;li&gt;Launch the GUI with &lt;code&gt;python sherloq.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Updates&lt;/h1&gt; &#xA;&lt;p&gt;When a new version is released, update the local working copy using Git, SVN or manually downloading from this repository and (if necessary) update the packages in the virtual environment following &lt;a href=&#34;https://www.activestate.com/resources/quick-reads/how-to-update-all-python-packages/&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Bibliography&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;A Picture&#39;s Worth: Digital Image Analysis and Forensics&#34; (Neal Krawetz) [&lt;a href=&#34;http://blackhat.com/presentations/bh-dc-08/Krawetz/Whitepaper/bh-dc-08-krawetz-WP.pdf&#34;&gt;paper&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&#34;Noiseprint: a CNN-based camera model fingerprint&#34; (Davide Cozzolino, Luisa Verdoliva) [&lt;a href=&#34;http://www.grip.unina.it/research/83-multimedia_forensics/107-noiseprint.html&#34;&gt;website&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&#34;Exposing Digital Forgeries by Detecting Traces of Re-sampling&#34; (Alin C. Popescu and Hany Farid) [&lt;a href=&#34;https://farid.berkeley.edu/downloads/publications/sp05.pdf&#34;&gt;paper&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&#34;Two Improved Forensic Methods of Detecting Contrast Enhancement in Digital Images&#34; (Xufeng Lin, Xingjie Wei and Chang-Tsun Li) [&lt;a href=&#34;https://d1wqtxts1xzle7.cloudfront.net/45863267/Two_Improved_Forensic_Methods_of_Detecti20160522-6998-1xf1cu.pdf?1463954131=&amp;amp;response-content-disposition=inline%3B+filename%3DTwo_improved_forensic_methods_of_detecti.pdf&amp;amp;Expires=1598306603&amp;amp;Signature=dYuKum8UF2NJS~2Jz2pFObtzdjKfYIcYD4GksLVNN0izhm2k10TVPV~UHKS0DbMLXKaurZPq7uvG~qQwQwwF4JKbY0zoCqZI-p9KZsEMYhlRJrYM8nNQL0V7sHMTLd3aYjNLWup~-i1RzJcJdRqzjU9doGxRJvHdsX6tbwIxNRq3JiYyldaXei4xJSJAbX7EoUOut2uh~jsPnsAbDOIrYpwUhebut-XsN2c5MXargD2UhKxZ3Ifwo4hJvz8Bl2sPys~E8P6vDlqOeEHoeByZms6JQON97EGsCTT5GYF98rQLDbqj0NroYE2zDMGcu9IUp8VV1Fotqci1G6eELTXx6w__&amp;amp;Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA&#34;&gt;paper&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Oreomeow/checkinpanel</title>
    <updated>2022-08-14T02:19:46Z</updated>
    <id>tag:github.com,2022-08-14:/Oreomeow/checkinpanel</id>
    <link href="https://github.com/Oreomeow/checkinpanel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个主要运行在 𝐞𝐥𝐞𝐜𝐕𝟐𝐏 或 𝐪𝐢𝐧𝐠𝐥𝐨𝐧𝐠 等定时面板，同时支持系统运行环境的签到项目（环境：𝑷𝒚𝒕𝒉𝒐𝒏 3.8+ / 𝑵𝒐𝒅𝒆.𝒋𝒔 10+ / 𝑩𝒂𝒔𝒉 4+ / 𝑶𝒑𝒆𝒏𝑱𝑫𝑲8 / 𝑷𝒆𝒓𝒍5）&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;定时面板上的签到盒&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Oreomeow/checkinpanel/stargazers&#34;&gt;&lt;img alt=&#34;GitHub Repo stars&#34; src=&#34;https://img.shields.io/github/stars/Oreomeow/checkinpanel?color=yellow&amp;amp;logo=riseup&amp;amp;logoColor=yellow&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Oreomeow/checkinpanel/network/members&#34;&gt;&lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/Oreomeow/checkinpanel?color=orange&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Oreomeow/checkinpanel/issues&#34;&gt;&lt;img alt=&#34;GitHub issues&#34; src=&#34;https://img.shields.io/github/issues/Oreomeow/checkinpanel?color=red&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/joinchat/muGNhnaZglQ0N2Q1&#34;&gt;&lt;img alt=&#34;Telegram&#34; src=&#34;https://img.shields.io/badge/chat-telegram-blue.svg?logo=telegram&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Oreomeow/checkinpanel/search?l=python&#34;&gt;&lt;img alt=&#34;GitHub code size in bytes&#34; src=&#34;https://img.shields.io/github/languages/code-size/Oreomeow/checkinpanel?color=blueviolet&amp;amp;logo=visual%20studio%20code&amp;amp;logoColor=informational&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img alt=&#34;Code style: black&#34; src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?logo=python&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/Oreomeow/checkinpanel/?branch=master&#34;&gt;&lt;img alt=&#34;Scrutinizer code quality (GitHub/Bitbucket)&#34; src=&#34;https://img.shields.io/scrutinizer/quality/g/Oreomeow/checkinpanel?logo=Scrutinizer&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Oreomeow/checkinpanel/commits&#34;&gt;&lt;img alt=&#34;GitHub last commit&#34; src=&#34;https://img.shields.io/github/last-commit/Oreomeow/checkinpanel?color=success&amp;amp;logo=github&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;一个主要运行在 &lt;a href=&#34;https://github.com/elecV2/elecV2P.git&#34;&gt;𝐞𝐥𝐞𝐜𝐕𝟐𝐏&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/whyour/qinglong.git&#34;&gt;𝐪𝐢𝐧𝐠𝐥𝐨𝐧𝐠&lt;/a&gt; 等定时面板，同时支持系统运行环境的签到项目&lt;/p&gt; &#xA; &lt;p&gt;环境：𝑷𝒚𝒕𝒉𝒐𝒏 3.8+ / 𝑵𝒐𝒅𝒆.𝒋𝒔 10+ / 𝑩𝒂𝒔𝒉 4+ / 𝑶𝒑𝒆𝒏𝑱𝑫𝑲8 / 𝑷𝒆𝒓𝒍5&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;p&gt;不回答任何关于依赖安装失败的问题，包括且不限于 pip 无法找到 tomli 依赖等，请仔细阅读项目 README&lt;/p&gt; &#xA;&lt;h2&gt;特别声明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;本仓库发布的脚本及其中涉及的任何解锁和解密分析脚本，仅用于测试和学习研究，禁止用于商业用途，不能保证其合法性、准确性、完整性和有效性，请根据情况自行判断。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;本项目内所有资源文件，禁止任何公众号、自媒体进行任何形式的转载、发布。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;本人对任何脚本问题概不负责，包括但不限于由任何脚本错误导致的任何损失或损害。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;间接使用脚本的任何用户，包括但不限于建立 VPS 或在某些行为违反国家/地区法律或相关法规的情况下进行传播，本人对于由此引起的任何隐私泄漏或其他后果概不负责。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;请勿将本仓库的任何内容用于商业或非法目的，否则后果自负。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如果任何单位或个人认为该项目的脚本可能涉嫌侵犯其权利，则应及时通知并提供身份证明、所有权证明，我们将在收到认证文件后删除相关脚本。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;任何以任何方式查看此项目的人或直接或间接使用该项目的任何脚本的使用者都应仔细阅读此声明。本人保留随时更改或补充此免责声明的权利。一旦使用并复制了任何相关脚本或 checkinpanel 项目的规则，则视为您已接受此免责声明。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;您必须在下载后的 24 小时内从计算机或手机中完全删除以上内容&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;您使用或者复制了本仓库且本人制作的任何脚本，则视为 &lt;code&gt;已接受&lt;/code&gt; 此声明，请仔细阅读&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;𝐞𝐥𝐞𝐜𝐕𝟐𝐏 使用方法&lt;/h2&gt; &#xA;&lt;h3&gt;1. 添加任务&lt;/h3&gt; &#xA;&lt;p&gt;TASK -&amp;gt; 添加订阅任务 -&amp;gt; 修改名称、更新方式、任务 -&amp;gt; 获取内容 -&amp;gt; 全部添加&lt;/p&gt; &#xA;&lt;p&gt;名称：签到项目&lt;/p&gt; &#xA;&lt;p&gt;同名任务更新方式： &lt;code&gt;替换&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;任务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://raw.githubusercontent.com/Oreomeow/checkinpanel/master/dailycheckin.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. 抓包配置&lt;/h3&gt; &#xA;&lt;p&gt;下载 &lt;a href=&#34;https://raw.githubusercontent.com/Oreomeow/checkinpanel/master/check.sample.toml&#34;&gt;check.sample.toml&lt;/a&gt;，根据注释说明进行抓包并配置&lt;/p&gt; &#xA;&lt;h3&gt;3. 上传配置&lt;/h3&gt; &#xA;&lt;p&gt;将 &lt;code&gt;check.sample.toml&lt;/code&gt; 重命名为 &lt;code&gt;check.toml&lt;/code&gt; 后放入 &lt;code&gt;script/Lists&lt;/code&gt; 文件夹&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;OVERVIEW -&amp;gt; EFSS 文件管理界面 -&amp;gt; 是否开启 EFSS 功能：开启 -&amp;gt; 目录：&lt;code&gt;./script/Lists&lt;/code&gt; -&amp;gt; 选择文件：&lt;code&gt;check.toml&lt;/code&gt; -&amp;gt; 开始上传&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;elecV2P 3.4.6 已支持在线编辑，右键文件即可&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. 配置通知&lt;/h3&gt; &#xA;&lt;h4&gt;4.1 JSMANAGE -&amp;gt; store/cookie 常量储存管理填写通知环境变量&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;变量 / key&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;支持语言&lt;/th&gt; &#xA;   &lt;th&gt;参考 / value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HITOKOTO&lt;/td&gt; &#xA;   &lt;td&gt;一言&lt;/td&gt; &#xA;   &lt;td&gt;PY&lt;/td&gt; &#xA;   &lt;td&gt;true 为开启，false 为关闭，默认关闭&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BARK_PUSH&lt;/td&gt; &#xA;   &lt;td&gt;bark 设备码&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;BARK 推送使用，填写 URL 即可，例如： &lt;code&gt;https://api.day.app/DxHcxxxxxRxxxxxxcm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BARK_ARCHIVE&lt;/td&gt; &#xA;   &lt;td&gt;* bark 存档&lt;/td&gt; &#xA;   &lt;td&gt;PY&lt;/td&gt; &#xA;   &lt;td&gt;是否存档&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BARK_GROUP&lt;/td&gt; &#xA;   &lt;td&gt;* bark 消息分组&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;消息分组&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BARK_SOUND&lt;/td&gt; &#xA;   &lt;td&gt;* bark 声音&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;例如： &lt;code&gt;choo&lt;/code&gt; ，具体值 bark-推送铃声-查看所有铃声&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CONSOLE&lt;/td&gt; &#xA;   &lt;td&gt;控制台输出&lt;/td&gt; &#xA;   &lt;td&gt;PY&lt;/td&gt; &#xA;   &lt;td&gt;true 为开启，false 为关闭，默认关闭&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DD_BOT_SECRET&lt;/td&gt; &#xA;   &lt;td&gt;钉钉机器人&lt;/td&gt; &#xA;   &lt;td&gt;JS PY SH&lt;/td&gt; &#xA;   &lt;td&gt;钉钉推送&lt;a href=&#34;https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq&#34;&gt;官方文档&lt;/a&gt;密钥，机器人安全设置页面，加签一栏下面显示的 &lt;code&gt;SEC&lt;/code&gt; 开头的字符串，注：填写了 &lt;code&gt;DD_BOT_TOKEN&lt;/code&gt; 和 &lt;code&gt;DD_BOT_SECRET&lt;/code&gt; ，钉钉机器人安全设置只需勾选 &lt;code&gt;加签&lt;/code&gt; 即可，其他选项不要勾选&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DD_BOT_TOKEN&lt;/td&gt; &#xA;   &lt;td&gt;钉钉机器人&lt;/td&gt; &#xA;   &lt;td&gt;JS PY SH&lt;/td&gt; &#xA;   &lt;td&gt;钉钉推送&lt;a href=&#34;https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq&#34;&gt;官方文档&lt;/a&gt;，只需 &lt;code&gt;https://oapi.dingtalk.com/robot/send?access_token=XXX&lt;/code&gt; 等于符号后面的 &lt;code&gt;XXX&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FSKEY&lt;/td&gt; &#xA;   &lt;td&gt;飞书&lt;/td&gt; &#xA;   &lt;td&gt;PY&lt;/td&gt; &#xA;   &lt;td&gt;飞书&lt;a href=&#34;https://open.feishu.cn/document/ukTMukTMukTM/ucTM5YjL3ETO24yNxkjN&#34;&gt;官方文档&lt;/a&gt;，只需 &lt;code&gt;https://open.feishu.cn/open-apis/bot/v2/hook/xxxxxx&lt;/code&gt; 的 &lt;code&gt;xxxxxx&lt;/code&gt; 部分&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOBOT_URL&lt;/td&gt; &#xA;   &lt;td&gt;go-cqhttp&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;例如：推送到个人QQ： &lt;code&gt;http://127.0.0.1/send_private_msg&lt;/code&gt; 群： &lt;code&gt;http://127.0.0.1/send_group_msg&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOBOT_QQ&lt;/td&gt; &#xA;   &lt;td&gt;go-cqhttp 的推送群或者用户&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GOBOT_URL&lt;/code&gt; 设置 &lt;code&gt;/send_private_msg&lt;/code&gt; 时填入 &lt;code&gt;user_id=个人QQ&lt;/code&gt; ； &lt;code&gt;/send_group_msg&lt;/code&gt; 时填入 &lt;code&gt;group_id=QQ群&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOBOT_TOKEN&lt;/td&gt; &#xA;   &lt;td&gt;* go-cqhttp 的 access_token&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;go-cqhttp 文件设置的访问密钥&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IGOT_PUSH_TOKEN&lt;/td&gt; &#xA;   &lt;td&gt;iGot 聚合推送&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wahao.github.io/Bark-MP-helper&#34;&gt;参考文档&lt;/a&gt;，支持多方式推送&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUSH_KEY&lt;/td&gt; &#xA;   &lt;td&gt;server 酱&lt;/td&gt; &#xA;   &lt;td&gt;JS PY SH&lt;/td&gt; &#xA;   &lt;td&gt;server 酱推送&lt;a href=&#34;https://sc.ftqq.com/3.version&#34;&gt;官方文档&lt;/a&gt;，JS 和 PY 推送兼容新旧版本&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUSH_TURBO_KEY&lt;/td&gt; &#xA;   &lt;td&gt;server 酱 Turbo 版&lt;/td&gt; &#xA;   &lt;td&gt;SH&lt;/td&gt; &#xA;   &lt;td&gt;server 酱 TURBO 推送&lt;a href=&#34;https://sct.ftqq.com/sendkey&#34;&gt;官方文档&lt;/a&gt;，仅支持 SH&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUSH_PLUS_TOKEN&lt;/td&gt; &#xA;   &lt;td&gt;pushplus 用户令牌&lt;/td&gt; &#xA;   &lt;td&gt;JS PY SH&lt;/td&gt; &#xA;   &lt;td&gt;可直接加到请求地址后，如： &lt;code&gt;http://www.pushplus.plus/send/{token}&lt;/code&gt; &lt;a href=&#34;https://www.pushplus.plus/doc/&#34;&gt;官方文档&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUSH_PLUS_USER&lt;/td&gt; &#xA;   &lt;td&gt;* pushplus 群组编码&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;一对多推送下面 -&amp;gt; 您的群组（如无则新建） -&amp;gt; 群组编码 1. 需订阅者扫描二维码 2. 如果您是创建群组所属人，也需点击“查看二维码”扫描绑定，否则不能接受群组消息推送&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QMSG_KEY&lt;/td&gt; &#xA;   &lt;td&gt;qmsg 酱&lt;/td&gt; &#xA;   &lt;td&gt;JS PY SH&lt;/td&gt; &#xA;   &lt;td&gt;qmsg 酱推送&lt;a href=&#34;https://qmsg.zendee.cn/index.html&#34;&gt;官方文档&lt;/a&gt;，填写 &lt;code&gt;KEY&lt;/code&gt; 代码即可&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QMSG_TYPE&lt;/td&gt; &#xA;   &lt;td&gt;* qmsg 酱推送类型&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;qmsg 酱推送&lt;a href=&#34;https://qmsg.zendee.cn/index.html&#34;&gt;官方文档&lt;/a&gt;，如果需要推送到群填写 &lt;code&gt;group&lt;/code&gt; ，其他的都推送到 QQ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QYWX_AM&lt;/td&gt; &#xA;   &lt;td&gt;企业微信应用&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://note.youdao.com/s/HMiudGkb&#34;&gt;参考文档&lt;/a&gt;，依次填入 corpid, corpsecret, touser(注：多个成员ID使用 | 隔开), agentid, media_id(选填，不填默认文本消息类型)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QYWX_KEY&lt;/td&gt; &#xA;   &lt;td&gt;企业微信机器人&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://work.weixin.qq.com/api/doc/90000/90136/91770&#34;&gt;官方文档&lt;/a&gt;，只需 &lt;code&gt;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa&lt;/code&gt; key= 后面部分&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SRE_TOKEN&lt;/td&gt; &#xA;   &lt;td&gt;push.jwks123.com&lt;/td&gt; &#xA;   &lt;td&gt;SH&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://push.jwks123.com&#34;&gt;官网&lt;/a&gt;关注公众号后再次点击获取令牌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TG_BOT_TOKEN&lt;/td&gt; &#xA;   &lt;td&gt;tg 机器人&lt;/td&gt; &#xA;   &lt;td&gt;JS PY SH&lt;/td&gt; &#xA;   &lt;td&gt;申请 &lt;a href=&#34;https://t.me/BotFather&#34;&gt;@BotFather&lt;/a&gt; 的 Token，如 &lt;code&gt;10xxx4:AAFcqxxxxgER5uw&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TG_USER_ID&lt;/td&gt; &#xA;   &lt;td&gt;tg 机器人&lt;/td&gt; &#xA;   &lt;td&gt;JS PY SH&lt;/td&gt; &#xA;   &lt;td&gt;给 &lt;a href=&#34;https://t.me/getidsbot&#34;&gt;@getidsbot&lt;/a&gt; 发送 /start 获取到的纯数字 ID，如 &lt;code&gt;1434078534&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TG_API_HOST&lt;/td&gt; &#xA;   &lt;td&gt;* tg 代理 api&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;Telegram api 自建的反向代理地址 例子：反向代理地址 &lt;code&gt;http://aaa.bbb.ccc&lt;/code&gt; 则填写 aaa.bbb.ccc &lt;a href=&#34;https://shimo.im/docs/JD38CJDQtYy3yTd8/read&#34;&gt;简略搭建教程&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TG_PROXY_AUTH&lt;/td&gt; &#xA;   &lt;td&gt;* tg 代理认证参数&lt;/td&gt; &#xA;   &lt;td&gt;JS&lt;/td&gt; &#xA;   &lt;td&gt;username:password，如 &lt;code&gt;Oreo:123456&lt;/code&gt; ，&lt;code&gt;TG_PROXY_HOST&lt;/code&gt; 中填了可不填&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TG_PROXY_HOST&lt;/td&gt; &#xA;   &lt;td&gt;* tg 机器人代理 IP 地址&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;代理类型为 http，比如您代理是 &lt;code&gt;http://127.0.0.1:1080&lt;/code&gt; ，则填写 &lt;code&gt;127.0.0.1&lt;/code&gt; ，有密码例子: &lt;code&gt;username:password@127.0.0.1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TG_PROXY_PORT&lt;/td&gt; &#xA;   &lt;td&gt;* tg 机器人代理端口&lt;/td&gt; &#xA;   &lt;td&gt;JS PY&lt;/td&gt; &#xA;   &lt;td&gt;代理端口号，代理类型为 http，比如您代理是 &lt;code&gt;http://127.0.0.1:1080&lt;/code&gt; ，则填写 &lt;code&gt;1080&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;* 表示选填&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;4.2 另一种通知配置方式（当和 4.1 中值重复时，以 4.1 值为准）&lt;/h4&gt; &#xA;&lt;p&gt;下载项目中的&lt;a href=&#34;https://github.com/Oreomeow/checkinpanel/raw/master/notify.sample.toml&#34;&gt;推送配置文件&lt;/a&gt;到&lt;strong&gt;配置文件夹&lt;/strong&gt;，按照上述说明修改配置文件中的值并改名为 &lt;code&gt;notify.toml&lt;/code&gt; ，你可以&lt;strong&gt;自由地删除&lt;/strong&gt;该文件中某些不需要的值（注意语法）。&lt;/p&gt; &#xA;&lt;p&gt;使用了配置文件后，你可以将配置文件放在持久化位置，不受脚本更新、重置容器的影响。&lt;/p&gt; &#xA;&lt;p&gt;如果想自定义配置文件的位置和文件名，请设置通知环境变量 &lt;code&gt;NOTIFY_CONFIG_PATH&lt;/code&gt; ， 例如 &lt;code&gt;/usr/local/app/script/notify.toml&lt;/code&gt; 。建议保持 &lt;code&gt;toml&lt;/code&gt; 的后缀，防止编辑器的误解。&lt;/p&gt; &#xA;&lt;p&gt;关于 toml 的语法参考：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;toml-lang/toml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/50412485&#34;&gt;中文知乎介绍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://toml.io/cn/v1.0.0&#34;&gt;TOML 教程中文版&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;4.3 通知说明&lt;/h4&gt; &#xA;&lt;p&gt;本通知调用了项目中的 &lt;a href=&#34;https://raw.githubusercontent.com/Oreomeow/checkinpanel/master/notify_mtr.py&#34;&gt;𝒏𝒐𝒕𝒊𝒇𝒚_𝒎𝒕𝒓.𝒑𝒚&lt;/a&gt; 。如果你想在&lt;strong&gt;你自己的项目中&lt;/strong&gt;使用这个通知脚本，将它拷贝并调用对应的通知函数即可。&lt;/p&gt; &#xA;&lt;p&gt;在非容器环境中，通知环境变量使用 系统的环境变量 或者 &lt;strong&gt;你通过 &lt;code&gt;NOTIFY_CONFIG_PATH&lt;/code&gt; 环境变量指定的配置文件&lt;/strong&gt; 进行配置。&lt;/p&gt; &#xA;&lt;p&gt;特别的，如果你想要创建一个基于 python 的 elecV2P 或者 qinglong 项目，并有意愿使用 &lt;code&gt;toml&lt;/code&gt; 文件，那么强烈建议你拷贝&lt;a href=&#34;https://raw.githubusercontent.com/Oreomeow/checkinpanel/master/notify_mtr.py&#34;&gt;此文件&lt;/a&gt;，如此可以大幅度降低用户脚本的配置难度和升级难度。&lt;/p&gt; &#xA;&lt;p&gt;如果只希望使用 &lt;code&gt;json&lt;/code&gt; 模块和单纯获取环境变量方法，那么可以拷贝 &lt;a href=&#34;https://raw.githubusercontent.com/Oreomeow/checkinpanel/master/notify_mtr_env.py&#34;&gt;𝒏𝒐𝒕𝒊𝒇𝒚_𝒎𝒕𝒓_𝒆𝒏𝒗.𝒑𝒚&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;5. 检查依赖&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;运行 &lt;code&gt;签到依赖&lt;/code&gt; 任务后的日志&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/oSs9xK&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/11/23/oSs9xK.png&#34; alt=&#34;oSs9xK.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如果任务列表安装不成功，参考 &lt;a href=&#34;https://github.com/Oreomeow/checkinpanel/issues/12&#34;&gt;#12&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;𝐪𝐢𝐧𝐠𝐥𝐨𝐧𝐠 使用方法&lt;/h2&gt; &#xA;&lt;h3&gt;1. ssh 进入容器&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker exec -it qinglong bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;修改 &lt;code&gt;qinglong&lt;/code&gt; 为你的青龙容器名称&lt;/p&gt; &#xA;&lt;h3&gt;2. 拉取仓库&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;解决 Shell 脚本无法拉取问题&lt;/strong&gt;：将以下代码在 &lt;code&gt;config.sh&lt;/code&gt; 相应位置替换&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## ql repo命令拉取脚本时需要拉取的文件后缀，直接写文件后缀名即可&#xA;RepoFileExtensions=&#34;js pl py sh ts&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可添加定时任务，名称、时间自定&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ql repo https://github.com/Oreomeow/checkinpanel.git &#34;api_|ck_|ins_&#34; &#34;^checkin&#34; &#34;^notify|^utils|cpm&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. 安装依赖&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;运行 &lt;code&gt;签到依赖&lt;/code&gt; 任务&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Oreomeow/checkinpanel/issues/43&#34;&gt;截图&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;依赖持久化配置&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;签到依赖&lt;/code&gt; 任务保持定时运行即可&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. 拷贝文件&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp /ql/repo/Oreomeow_checkinpanel_master/check.sample.toml /ql/config/check.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;通知配置文件（可选）&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp /ql/repo/Oreomeow_checkinpanel_master/notify.sample.toml /ql/config/notify.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. 配置通知&lt;/h3&gt; &#xA;&lt;p&gt;参见上文中的&lt;a href=&#34;#https://github.com/Oreomeow/checkinpanel/blob/master/README.md#4%E9%85%8D%E7%BD%AE%E9%80%9A%E7%9F%A5&#34;&gt;配置通知&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;特别的：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;如果你已经配置了 &lt;code&gt;config.sh&lt;/code&gt;， 那么你可以不需要做任何改变。&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果使用环境变量，请在 qinglong 面板中配置。&lt;/li&gt; &#xA; &lt;li&gt;如果使用配置文件，请修改 &lt;code&gt;/ql/config/notify.toml&lt;/code&gt; 文件。&lt;/li&gt; &#xA; &lt;li&gt;当然你也可以在 qinglong 面板中配置 &lt;code&gt;NOTIFY_CONFIG_PATH&lt;/code&gt; 环境变量为配置文件指定其他位置。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;6. 抓包配置&lt;/h3&gt; &#xA;&lt;p&gt;不出意外的话可以在青龙面板的配置文件下找到 &lt;code&gt;check.toml&lt;/code&gt; 文件&lt;/p&gt; &#xA;&lt;p&gt;根据&lt;a href=&#34;https://github.com/Oreomeow/checkinpanel/raw/master/check.sample.toml&#34;&gt;注释说明&lt;/a&gt;进行抓包并配置&lt;/p&gt; &#xA;&lt;h2&gt;补充说明&lt;/h2&gt; &#xA;&lt;h3&gt;1. &lt;strong&gt;添加了葫芦侠的签到配置&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;参数说明： &lt;code&gt;HLX.username&lt;/code&gt; ：用户名 &lt;code&gt;HLX.password&lt;/code&gt; ：密码的 MD5 32 位小写加密&lt;a href=&#34;https://md5jiami.bmcx.com/&#34;&gt;生成&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. &lt;strong&gt;添加了网易云游戏的签到配置&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cg.163.com/#/mobile&#34;&gt;官网&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;参数说明： &lt;code&gt;GAME163.authorization&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;登录后抓取签到请求（一般请求的请求头也有这个字段）&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/4tfx5F&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/09/22/4tfx5F.png&#34; alt=&#34;4tfx5F.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. &lt;strong&gt;Shell 脚本配置&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;目前 Shell 脚本只有一个 SSPanel 签到，如需使用请参考 &lt;code&gt;env.sample&lt;/code&gt; 配置 &lt;code&gt;.env&lt;/code&gt; 后放入 &lt;code&gt;script/Lists&lt;/code&gt; 或 &lt;code&gt;/ql/config&lt;/code&gt; 文件夹&lt;/li&gt; &#xA; &lt;li&gt;支持自定义配置文件路径 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;环境变量 / store KEY 名称：&lt;code&gt;ENV_PATH&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;参考值 / VALUE：&lt;code&gt;/usr/local/app/script/.env&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. &lt;strong&gt;添加了欢太商城的签到配置&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hwkxk/HeytapTask/wiki/%E6%AC%A2%E5%A4%AA%E5%95%86%E5%9F%8EHttpCanary%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B&#34;&gt;欢太商城 HttpCanary 抓包教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;部分域名屏蔽境外 IP 访问，所以本项目不适于在 非中国 IP 代理网络下 / Github Actions / 境外 VPS 上运行！&lt;/li&gt; &#xA; &lt;li&gt;从未在欢太商城做过任务，请先手动进入任务中心完成一下任务再使用，否则可能无法获取到任务列表数据导致出错！@YYplus&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5. &lt;strong&gt;添加了时光相册的签到配置&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/4tWaFg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/09/22/4tWaFg.png&#34; alt=&#34;4tWaFg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;6. &lt;strong&gt;EUserv 在未开启登录验证时有效&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://apitruecaptcha.org/api&#34;&gt;True Captcha&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如图注册账号后获取 &lt;code&gt;userid&lt;/code&gt; 和 &lt;code&gt;apikey&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/5e9nF1&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/11/5e9nF1.png&#34; alt=&#34;5e9nF1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;其他说明&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;请自行修改执行时间。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;elecV2P 运行 &lt;code&gt;手动更新&lt;/code&gt; 任务可强制同步本仓库。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;大部分脚本移植于 &lt;a href=&#34;https://github.com/Sitoi/dailycheckin&#34;&gt;Sitoi&lt;/a&gt;，Sitoi 于 2021 年 9 月 3 日 &lt;a href=&#34;https://files.pythonhosted.org/packages/ee/8d/b49624a4d11c51f4e3dfb98f622d0c1ffe5d6315ad39452859ea8703206f/dailycheckin-0.1.7.tar.gz&#34;&gt;dailycheckin-0.1.7&lt;/a&gt; 版本适配了青龙，&lt;a href=&#34;https://sitoi.gitee.io/dailycheckin/qinglong/&#34;&gt;使用教程&lt;/a&gt;与本仓库教程不相同，切勿使用本仓库 &lt;a href=&#34;https://github.com/Oreomeow/checkinpanel&#34;&gt;checkinpanel&lt;/a&gt; 的同时去问大佬。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021 年 9 月 13 日起不再更新 &lt;code&gt;.json&lt;/code&gt; 后缀的配置文件。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021 年 9 月 23 日起重新初始化项目，原本文件移到&lt;a href=&#34;https://github.com/Oreomeow/ck_bak&#34;&gt;这里&lt;/a&gt;，上述仓库不再进行更新，期望稳定的用户可以切换到上述仓库。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021 年 11 月 17 日起由 &lt;code&gt;JSON5&lt;/code&gt; 配置转为更为友好的 &lt;code&gt;TOML&lt;/code&gt; 配置。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;计划说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 𝑷𝒚𝒕𝒉𝒐𝒏 | &lt;strong&gt;api&lt;/strong&gt; | LeetCode 每日一题 | 每日一句 | 天气预报 | 每日新闻 | &lt;del&gt;爱企查e卡监控&lt;/del&gt; | Hax 监控 | RSS 订阅&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 𝑷𝒚𝒕𝒉𝒐𝒏 | &lt;strong&gt;多账号&lt;/strong&gt; | AcFun | 百度搜索资源平台 | Bilibili | 天翼云盘 | CSDN | 多看阅读 | 恩山论坛 | Fa米家 | 网易云游戏 | 葫芦侠 | &lt;del&gt;爱奇艺&lt;/del&gt; | 全民K歌 | MEIZU 社区 | &lt;del&gt;芒果 TV&lt;/del&gt; | 小米运动 | 网易云音乐 | 一加手机社区官方论坛 | 哔咔漫画 | 吾爱破解 | 什么值得买 | 百度贴吧 | V2EX | &lt;del&gt;腾讯视频&lt;/del&gt; | 微博 | &lt;del&gt;联通沃邮箱&lt;/del&gt; | 哔咔网单 | 王者营地 | 有道云笔记 | 智友邦 | 机场签到 | 欢太商城 | NGA | 掘金 | GLaDOS | HiFiNi | 时光相册 | &lt;del&gt;联通营业厅&lt;/del&gt; | 无忧行 | FreeNom | EUserv | Site | SF 轻小说 | 在线工具 | CCAVA | &lt;del&gt;企鹅电竞&lt;/del&gt; | &lt;del&gt;联想乐云&lt;/del&gt; | WPS | HOSTLOC | &lt;del&gt;Epic&lt;/del&gt; | &lt;del&gt;Hax 续期提醒&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 𝑺𝒉𝒆𝒍𝒍 | &lt;strong&gt;多账号&lt;/strong&gt; | SSPanel 签到 | 国内加速&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 𝑱𝒂𝒗𝒂𝑺𝒄𝒓𝒊𝒑𝒕 | &lt;strong&gt;多账号&lt;/strong&gt; | 什么值得买任务版 | 爱企查 | 网易蜗牛读书 | 联想商城&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 𝑱𝒂𝒗𝒂 | Bilibili 助手&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 𝑷𝒆𝒓𝒍 | JSON5toTOML 工具&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;项目完成情况&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 多账号补全&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 配置文件由严格的 &lt;code&gt;.json&lt;/code&gt; 向支持注释的 &lt;code&gt;.json5&lt;/code&gt; 过渡，再向更友好的 &lt;code&gt;.toml&lt;/code&gt; 过渡&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 更多环境适配&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 配置文件支持自定义路径&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 通知多线程&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 通知输出优化&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 通知方式增加，如飞书&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Shell 消息推送、环境检查单列&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 项目重新初始化，更新日志规范化&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 依赖安装重构&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cron 随机&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 任务多合一执行&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CK 检测判断是否跳出&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;测试情况&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;状态&lt;/th&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;国内加速 | Hax 监控 | LeetCode 每日一题 | 每日一句 | 天气预报 | 每日新闻 | RSS 订阅 | 机场签到 | 爱企查 | 百度搜索资源平台 | Bilibili | Bilibili 助手 | CCAVA | 天翼云盘 | CSDN | 网易蜗牛读书 | 多看阅读 | 恩山论坛 | EUserv | 时光相册 | Fa米家 | FreeNom | GLaDOS | 网易云游戏 | HiFiNi | 葫芦侠 | HOSTLOC | JSON5toTOML 工具 | 掘金 | 全民K歌 | 联想商城 | MEIZU 社区 | 小米运动 | 网易云音乐 | NGA | 一加手机社区官方论坛 | 吾爱破解 | SF 轻小说 | Site | 什么值得买 | 什么值得买任务版 | SSPanel 签到 | 百度贴吧 | 在线工具 | V2EX | 微博 | WPS | 王者营地 | 有道云笔记&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;   &lt;td&gt;无忧行 | 哔咔漫画 | 哔咔网单 | 智友邦&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Wenmoux/&#34;&gt;@𝐰𝐞𝐧𝐦𝐨𝐮𝐱&lt;/a&gt; --------------- 𝗰𝗵𝗲𝗰𝗸𝗯𝗼𝘅&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Sitoi&#34;&gt;@𝐒𝐢𝐭𝐨𝐢&lt;/a&gt; -------------------- 𝗱𝗮𝗶𝗹𝘆𝗰𝗵𝗲𝗰𝗸𝗶𝗻&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuxian158&#34;&gt;@𝐲𝐮𝐱𝐢𝐚𝐧𝟏𝟓𝟖&lt;/a&gt; ----------- 𝗾𝗹-𝗰𝗵𝗲𝗰𝗸𝗯𝗼𝘅&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/isecret&#34;&gt;@𝐢𝐬𝐞𝐜𝐫𝐞𝐭&lt;/a&gt; --------------- 𝗦𝗦𝗣𝗮𝗻𝗲𝗹 𝗦𝗵𝗲𝗹𝗹&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hwkxk&#34;&gt;@𝐡𝐰𝐤𝐱𝐤&lt;/a&gt; ----------------------- 𝗛𝗲𝘆𝗧𝗮𝗽&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/luminoleon&#34;&gt;@𝐥𝐮𝐦𝐢𝐧𝐨𝐥𝐞𝐨𝐧&lt;/a&gt; ---- 𝗲𝗽𝗶𝗰𝗴𝗮𝗺𝗲𝘀-𝗰𝗹𝗮𝗶𝗺𝗲𝗿&lt;/p&gt; &#xA;&lt;p&gt;@𝑶𝒕𝒉𝒆𝒓𝒔 -------------- 𝔰𝔠𝔯𝔦𝔭𝔱 𝔠𝔬𝔪𝔪𝔢𝔫𝔱𝔰&lt;/p&gt; &#xA;&lt;h2&gt;历史 Star 数&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/Oreomeow/checkinpanel&#34;&gt;&lt;img src=&#34;https://starchart.cc/Oreomeow/checkinpanel.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jlord/git-it-electron</title>
    <updated>2022-08-14T02:19:46Z</updated>
    <id>tag:github.com,2022-08-14:/jlord/git-it-electron</id>
    <link href="https://github.com/jlord/git-it-electron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💻 🎓 Git-it is a (Mac, Win, Linux) Desktop App for Learning Git and GitHub&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Git-it (Desktop App)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/jlord/git-it-electron&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jlord/git-it-electron.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://standardjs.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;js-standard-style&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1305617/14594613/23873f64-04ed-11e6-9d3b-72f424dd0842.png&#34; alt=&#34;screen shot 2016-04-17 at 10 37 55 pm&#34;&gt; Git-it is a desktop (Mac, Windows and Linux) app that teaches you how to use Git and GitHub on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Command-line_interface&#34;&gt;command line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🚩The app includes translations in these languages: Spanish (ES), Spanish (CO), French, Portugese (BR), Ukrainian, Traditional Chinese, Japanese, and Korean. 🚩&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Previously it ran &lt;em&gt;in&lt;/em&gt; terminal (the command line application) with a guide online but now the guide &lt;em&gt;is&lt;/em&gt; the app and it runs on your desktop on its own &lt;span&gt;✨&lt;/span&gt; &lt;strong&gt;This will be the only maintained version going forward&lt;/strong&gt; &lt;span&gt;➡&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Hello future Forkers, Branchers and Pull Requesters!&lt;/h2&gt; &#xA;&lt;p&gt;This application contains challenges for learning Git and GitHub—by using &lt;em&gt;real&lt;/em&gt; Git and GitHub, not emulators. You&#39;ll be learning the awesome (and not so scary) command line and GitHub which means when you finish all of the challenges you&#39;ll have &lt;em&gt;real&lt;/em&gt; repositories on your GitHub account and green squares on your &lt;a href=&#34;https://github.com/blog/1360-introducing-contributions&#34;&gt;contribution chart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jlord/git-it/master/ghcc.png&#34; alt=&#34;contributions&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What to Install&lt;/h2&gt; &#xA;&lt;p&gt;You will need this app, Git-it as well as a text editor. You&#39;ll also of course need Git and the first challenge in Git-it helps you get that set up. But if you want to get a head start, go for it! You&#39;ll continue to use Git and your text editor throughout your bright social coding future.&lt;/p&gt; &#xA;&lt;p&gt;As a part of the challenges you&#39;ll also create a (free) account on GitHub. If you&#39;ve already got one, high-five!&lt;/p&gt; &#xA;&lt;h4&gt;Git&lt;/h4&gt; &#xA;&lt;p&gt;We recommend installing &lt;a href=&#34;http://desktop.github.com&#34;&gt;GitHub Desktop&lt;/a&gt; (free) because it installs Git in the most consistent way across supported operating systems (Windows and Mac). We won&#39;t use the app itself in the challenges (but it is really useful once you get going in Git!), just the Git that it install for you.&lt;/p&gt; &#xA;&lt;p&gt;Note—If you&#39;re using Windows, you should use the &lt;strong&gt;Git Shell&lt;/strong&gt; app as your terminal—it is installed with GitHub Desktop. In Mac and Linux you can use the app &lt;strong&gt;Terminal&lt;/strong&gt;, which is already on your computer.&lt;/p&gt; &#xA;&lt;h4&gt;Text Editor&lt;/h4&gt; &#xA;&lt;p&gt;I&#39;m quite partial (I&#39;m on the team!) but &lt;a href=&#34;http://atom.io&#34;&gt;Atom&lt;/a&gt; is a great text editor (also free) and it is built on &lt;a href=&#34;http://electron.atom.io&#34;&gt;Electron.js&lt;/a&gt;, just like Git-it. Visit the website and download the version for your operating system. &lt;a href=&#34;https://www.sublimetext.com&#34;&gt;Sublime&lt;/a&gt;, &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Microsoft VS Code&lt;/a&gt; and &lt;a href=&#34;http://brackets.io&#34;&gt;Adobe Brackets&lt;/a&gt; are other options.&lt;/p&gt; &#xA;&lt;h4&gt;Git-it&lt;/h4&gt; &#xA;&lt;p&gt;You can view the &lt;a href=&#34;http://github.com/jlord/git-it-electron/releases&#34;&gt;releases&lt;/a&gt; section of this repository to find the download for your operating system. Click to download your version. Once it has downloaded to your default Downloads directory, unzip the folder and run the Git-it executable. The executables for Mac, Windows and Linux:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1305617/14696588/2b10abf8-0731-11e6-945e-f3d57114bce9.png&#34; alt=&#34;executables&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mac&lt;/strong&gt; Right (control) click the Git-it icon, select Open and then Open again. You can drag the icon into your Applications directory if you want, but it&#39;s not required. If needed, more &lt;a href=&#34;https://github.com/jlord/git-it-electron/issues/121#issue-149747488&#34;&gt;detailed installation instructions&lt;/a&gt; can be found in this issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt; Double-click the executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt; Double-click the executable. If the app isn&#39;t running, &lt;a href=&#34;https://github.com/jlord/git-it-electron/issues/182&#34;&gt;see this issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started!&lt;/h2&gt; &#xA;&lt;p&gt;Open Git-it and click the button to begin the first challenge. Have your terminal and text editor open, too. Follow along with the instructions in each challenge and use the terminal or editor as instructed.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;ve completed the steps in a challenge click &#39;Verify&#39;. Depending on the challenge you may need to also select the folder you did your work in for Git-it to verify.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Questions?&lt;/strong&gt; &lt;a href=&#34;http://github.com/jlord/git-it-electron/issues/new&#34;&gt;Open an issue&lt;/a&gt; on this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to contribute or build locally?&lt;/strong&gt; See the &lt;a href=&#34;https://raw.githubusercontent.com/jlord/git-it-electron/master/CONTRIBUTING.md&#34;&gt;contributing documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Tips For Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code snippets&lt;/strong&gt; often times look like &lt;code&gt;$ some code-stuff --here&lt;/code&gt;. The dollar sign identifies the line as one a user would enter into the command line, but you don&#39;t actually include it when you type it into terminal. In this case, you&#39;d actually just type &lt;code&gt;some code-stuff --here&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt; are indicated by &lt;code&gt;&amp;lt;VARIABLENAME&amp;gt;&lt;/code&gt; in code snippets. When you actually use the line of code, replace &lt;code&gt;&amp;lt;VARIABLENAME&amp;gt;&lt;/code&gt;, with your variable. For instance to make a new folder in terminal the format is, &lt;code&gt;mkdir &amp;lt;FOLDERNAME&amp;gt;&lt;/code&gt;, so if you wanted to make a folder named &#39;octocat&#39;, you&#39;d type: &lt;code&gt;mkdir octocat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Command line, terminal and bash&lt;/strong&gt; all basically mean the same thing: the MS-DOS, Doogie Howser looking screen full of words and numbers. It&#39;s awesomely powerful and allows you to control your computer with text commands.&lt;/p&gt; &#xA;&lt;p&gt;You can do a lot of things from your terminal like delete, rename, copy or create files and folders; run scripts and send things back and forth between servers (like the ones storing things on GitHub.com) and your computer (also a server!).&lt;/p&gt;</summary>
  </entry>
</feed>