<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-14T02:03:41Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FlashKorten/txt2cwp</title>
    <updated>2024-01-14T02:03:41Z</updated>
    <id>tag:github.com,2024-01-14:/FlashKorten/txt2cwp</id>
    <link href="https://github.com/FlashKorten/txt2cwp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;utility to create LaTeX-Crosswordpuzzles without ANY hassle&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;txt2cwp&lt;/h1&gt; &#xA;&lt;p&gt;Create a simple textfile containing only a filled out crossword form. Filled blocks in the puzzle are set by the character &#39;&lt;code&gt;_&lt;/code&gt;&#39; (underscore). You don&#39;t have to set up the dimension of the puzzle - just put the same number of letters into each line.&lt;/p&gt; &#xA;&lt;p&gt;If you look at the example in &#39;cwp.txt&#39; you will find its content to be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;counter&#xA;hex_rsa&#xA;amt_and&#xA;r_esc__&#xA;_friend&#xA;vim__or&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is very easy to fill such a puzzle if you start with something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;counter&#xA;..x....&#xA;..t....&#xA;..e....&#xA;..r....&#xA;..m....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and fill in the missing letters in replace (overwrite) mode in your editor.&lt;/p&gt; &#xA;&lt;p&gt;Then you can parse the source file through txt2cwp:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;txt2cwp cwp.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This generates cwp.tex, a frameset for your puzzle in which only the clues are missing. You have to insert the clues into the tex file at the appropriate positions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;\Clue{1}{counter}{}%&#xA;\Clue{7}{hex}{}%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will become something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;\Clue{1}{counter}{Something increasing each time around}%&#xA;\Clue{7}{hex}{Regular polygon with the most vertices to tile a plane with}%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the solution to each clue is given as second parameter to \Clue, this should be very easy, in fact, dare I say, comfortable!&lt;/p&gt; &#xA;&lt;p&gt;After all the clues are added compile the tex file using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pdflatex cwp.tex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and you are done...&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LuRsT/Bar</title>
    <updated>2024-01-14T02:03:41Z</updated>
    <id>tag:github.com,2024-01-14:/LuRsT/Bar</id>
    <link href="https://github.com/LuRsT/Bar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bar, a command to display a bar&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bar&lt;/h1&gt; &#xA;&lt;p&gt;Do you like &lt;a href=&#34;https://github.com/holman/spark&#34;&gt;spark&lt;/a&gt;? Do you know Regex? Then you&#39;ll like this...&lt;/p&gt; &#xA;&lt;p&gt;example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bar --command &#34;acpi&#34; --regex &#34;([0-9]{1,3})\%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display something like this (in green):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[100%] ▇&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you want it to appear in your tmux, just put the flag --tmux in it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bar --command &#34;acpi&#34; --regex &#34;([0-9]{1,3})\%&#34; --tmux&#xA;#[fg=green][100%] ▇#[default]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I will appear the same as the above if you&#39;re in tmux :)&lt;/p&gt; &#xA;&lt;p&gt;I provide some examples (*.sh) like the one above for you to try and create your own ( and please pull request the new ones so we can all enjoy them ).&lt;/p&gt;</summary>
  </entry>
</feed>