<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:55:58Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>daviddelikat/WingTryIt</title>
    <updated>2023-11-26T01:55:58Z</updated>
    <id>tag:github.com,2023-11-26:/daviddelikat/WingTryIt</id>
    <link href="https://github.com/daviddelikat/WingTryIt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;playing with Wing see: https://github.com/plainblack/Wing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;this project was created using Wing&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/plainblack/Wing&#34;&gt;https://github.com/plainblack/Wing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NOTE that I did not use the documented method for installing Wing ( see README in the Wing repository ) I trimmed it significantly and used my own local perl and mysql because I was having too many conflicts with the system applications. I will likely create a fork of Wing with the scripts that I used or at least some description of it.&lt;/p&gt; &#xA;&lt;p&gt;The following commands were used to create this project; much of the text is copied directly from the Wing README and filled in with my working parameters.&lt;/p&gt; &#xA;&lt;p&gt;source /data/Wing/bin/dataapps.sh&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;cd /data/Wing/bin export WING_HOME=/data/Wing perl wing_init_app.pl --app=TryIt&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a database on your MySQL server to host the project, and edit the Wing config to match:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;mysql -uroot -p -e &#34;create database tryit;grant all privileges on tryit.* to tryit@localhost identified by &#39;tryit&#39;;flush privileges;&#34;&lt;/p&gt; &#xA;&lt;p&gt;vi /data/TryIt/etc/wing.conf&lt;/p&gt; &#xA;&lt;h1&gt;edit the &#34;db&#34; section and add the username and password.&lt;/h1&gt; &#xA;&lt;p&gt;vi /data/TryIt/etc/log4perl.conf # edit path for log ( not required if app will run as root user )&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Initialize the database:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;cd /data/TryIt/bin export WING_HOME=/data/Wing export WING_APP=/data/TryIt/ export WING_CONFIG=/data/TryIt/etc/wing.conf perl $WING_HOME/bin/wing_db.pl --install --ok&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Start up the rest server and/or web server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;cd /data/TryIt/bin ./start_rest.sh &amp;amp; ./start_web.sh &amp;amp;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you can connect to the rest server and see if it&#39;s alive:&lt;/p&gt; &lt;p&gt;curl &lt;a href=&#34;http://localhost:5000/api/status&#34;&gt;http://localhost:5000/api/status&lt;/a&gt;&lt;/p&gt; &lt;p&gt;curl &lt;a href=&#34;http://localhost:5001/account&#34;&gt;http://localhost:5001/account&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NOTE: By default there is one user named &#39;Admin&#39; with a password of &#39;123qwe&#39;.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;We also provide you with an nginx config file to give you a baseline for serving your apps. You can start it like this:&lt;/p&gt; &lt;p&gt;sudo nginx -c /data/TryIt/etc/nginx.conf&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>sipwise/ngcp-panel</title>
    <updated>2023-11-26T01:55:58Z</updated>
    <id>tag:github.com,2023-11-26:/sipwise/ngcp-panel</id>
    <link href="https://github.com/sipwise/ngcp-panel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The provisioning interface for the NGCP system&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://crowdin.com/project/ngcp-panel&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/ngcp-panel/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NGCP-Panel&lt;/h1&gt; &#xA;&lt;p&gt;A completely overhauled provisioning interface for the NGCP system.&lt;/p&gt; &#xA;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;Build.PL - NGCP-Panel build system including test fixtures&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ perl ./Build&#xA;$ ./Build test --webdriver=&#39;phantomjs --webdriver=4444&#39;&#xA;$ ./Build test --webdriver=&#39;java -jar selenium-server-standalone.jar&#39;&#xA;$ ./Build test --webdriver=&#39;chromedriver --url-base=wd/hub --port=4444&#39;&#xA;$ ./Build test --webdriver=selenium-rc # from CPAN distro Alien-SeleniumRC&#xA;$ ./Build test --webdriver=external --wd-server=127.0.0.1:5555&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./Build test_tap --webdriver=external # outputs tap to tap/ folder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./Build testcover --webdriver=&#39;phantomjs --webdriver=4444&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;OPTIONS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;--webdriver&lt;/code&gt; &lt;em&gt;COMMAND&lt;/em&gt; : (required) &lt;em&gt;COMMAND&lt;/em&gt; to launch a webdriver external if the webdriver is launched externally&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--wd-server&lt;/code&gt; &lt;em&gt;HOST&lt;/em&gt;:&lt;em&gt;PORT&lt;/em&gt; : &lt;em&gt;HOST&lt;/em&gt;:&lt;em&gt;PORT&lt;/em&gt; of the webdriver to which the tests should connect. Default is set by &lt;code&gt;Test::WebDriver&lt;/code&gt; to &lt;strong&gt;localhost:4444&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--server&lt;/code&gt; &lt;em&gt;URI&lt;/em&gt; : &lt;em&gt;URI&lt;/em&gt; for the &lt;code&gt;HTTP::Server::PSGI&lt;/code&gt; socket server run for testing, default &lt;strong&gt;&lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--schema-base-dir&lt;/code&gt; &lt;em&gt;DIR&lt;/em&gt; : If the &lt;code&gt;NGCP::Schema&lt;/code&gt; is not installed to a known path to perl, this option can specify the base &lt;em&gt;DIR&lt;/em&gt; of its development location. It will then be included via &lt;code&gt;blib&lt;/code&gt;, so we have access to its lib and share.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--mysqld-port&lt;/code&gt; &lt;em&gt;PORT&lt;/em&gt; : If this option and &lt;code&gt;--mysqld-dir&lt;/code&gt; are supplied, a &lt;code&gt;mysqld&lt;/code&gt; will be started at the specified &lt;em&gt;PORT&lt;/em&gt; and be used for the tests. &lt;code&gt;mysqld&lt;/code&gt; will be stopped and the temporary data deleted when this script finishes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--mysql-dump&lt;/code&gt; : If this option and &lt;code&gt;--mysqld-port&lt;/code&gt; are supplied, a &lt;code&gt;mysqld&lt;/code&gt; will be started and be used for the tests. It will import all dumps supplied with this option. This option can be set multiple times. In this case all specified files will be dumped into the database.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--help&lt;/code&gt; : Print a brief help message and exits.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--man&lt;/code&gt; : Prints the manual page and exits.&lt;/p&gt; &#xA;&lt;h1&gt;I18N&lt;/h1&gt; &#xA;&lt;p&gt;Update strings from database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ script/ngcp_panel_dump_db_strings.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regenerate messages.pot (use -v for verbose output):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xgettext.pl --output=lib/NGCP/Panel/I18N/messages.pot --directory=lib/ --directory=share/templates/ --directory=share/layout -P perl=tt,pm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case your language does not exist already:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ msginit --input=lib/NGCP/Panel/I18N/messages.pot --output=lib/NGCP/Panel/I18N/$LANG.po --locale=$LANG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update or create $LANG.po files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ msgmerge --update $LANG.po messages.pot&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>kazuho/picotemplate</title>
    <updated>2023-11-26T01:55:58Z</updated>
    <id>tag:github.com,2023-11-26:/kazuho/picotemplate</id>
    <link href="https://github.com/kazuho/picotemplate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a tiny template engine for embedded HTML&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PICOTEMPLATE - a tiny template engine for embedded HTML&lt;/h1&gt; &#xA;&lt;p&gt;Picotemplate is a tiny template engine (preprocessor) designed to embed HTML (or other types of document) within the source code of any programming language.&lt;/p&gt; &#xA;&lt;p&gt;There are often cases where you would like to generate HTML within a program. In such cases, the easiest way would be to use a DSL (domain-specific language) to embed the HTML in the source code and preprocess it. Picotemplate is a preprocesser designed for such an use-case.&lt;/p&gt; &#xA;&lt;p&gt;As of now, Perl, C++, JavaScript, and JSX are the supported languages.&lt;/p&gt; &#xA;&lt;h2&gt;THE LOGIC&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lines starting with &#34;?&#34; are considered as embedded document&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;!--?= ?--&gt; within embedded document are considered as expressions (that return strings) &lt;/li&gt; &#xA; &lt;li&gt;the output is accumulated to variable named &#34;_&#34; (or $output in case of perl)&lt;/li&gt; &#xA; &lt;li&gt;filenames starting with an underscore (_) will be preprocessed, and the name of the output file will be the same omitting the leading underscore (e.g. _foo.cc will be preproccessed and converted to foo.cc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;EXAMPLE&lt;/h2&gt; &#xA;&lt;p&gt;The following code (in _foo.cc) will be preprocessed and converted to a function (in foo.cc) that returns an function building an HTML snippet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string unordered_list(const std::vector&amp;lt;std::string&amp;gt;&amp;amp; strs)&#xA;{&#xA;    std::string _; // output is accumulated to _&#xA;?&amp;lt;ul&amp;gt;&#xA;    for (std::vector&amp;lt;std::string&amp;gt;::const_iterator i = strs.begin();&#xA;         i != strs.end();&#xA;         ++i) {&#xA;?&amp;lt;li&amp;gt;&amp;lt;?= escapeHTML(*i) ?&amp;gt;&amp;lt;/li&amp;gt;&#xA;    }&#xA;?&amp;lt;/ul&amp;gt;&#xA;    return _;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To preprocess a source file, simply run the command with the name of the source file to preprocess. The following exmaple preprocesses &lt;em&gt;foo.cc&lt;/em&gt; (template files should start with an underscore) and produces &lt;em&gt;foo.cc&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ picotemplate.pl _foo.cc&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>