<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:57:57Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sensepost/go</title>
    <updated>2023-02-19T01:57:57Z</updated>
    <id>tag:github.com,2023-02-19:/sensepost/go</id>
    <link href="https://github.com/sensepost/go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seriously primitive portscanner using Squid proxy.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#1. Name Go #2. Author Roelof Temmingh #3. License, version &amp;amp; release date License : GPLv2&lt;br&gt; Version : v0.1&lt;br&gt; Release Date : 2000/12&lt;/p&gt; &#xA;&lt;p&gt;#4. Description Seriously primitive portscanner using Squid proxy. Can be used to scan ports &amp;gt; 1024 using a &#34;victim&#34; Squid proxy that is not well configured. For this to work the proxy needs you to allow to use it. Used to scan machines that are located behind a firewall, but that is accessible from the proxy #5. Usage&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;. perl go.pl 160.124.19.103:3128:160.124.19.98:1430:1435 #6. Requirements Perl Poorly configured Squid proxy&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>hepcat72/SNPSTI</title>
    <updated>2023-02-19T01:57:57Z</updated>
    <id>tag:github.com,2023-02-19:/hepcat72/SNPSTI</id>
    <link href="https://github.com/hepcat72/SNPSTI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SNP Phylogeny Mapping tool&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This suite of scripts is designed to take a phylogenetic tree and a table of SNPs and assign SNP solutions to each branch of the tree, the SNP combinations which resolve the genomes at the leaves of the subtree from the rest of the tree.&lt;/p&gt; &#xA;&lt;p&gt;Required modules:&lt;/p&gt; &#xA;&lt;p&gt;tree.pm (available through github at hepcat72/tree.git)&lt;/p&gt; &#xA;&lt;p&gt;The main script is SNPSTI.pl. It outputs coded solutions to the nodes of the tree. Those solutions can be converted to a human-readable format using SNPSTI2humanreadable.pl. You can generate an input SNP table by running find_snps.pl. If you run SNPSTI.pl in verbose mode, capturing greedy solutions, you can generate a summary of the greedily constructed sets (i.e. imperfect solutions) using SNPSTI-greedysummaries.pl.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>darold/pgbadger</title>
    <updated>2023-02-19T01:57:57Z</updated>
    <id>tag:github.com,2023-02-19:/darold/pgbadger</id>
    <link href="https://github.com/darold/pgbadger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast PostgreSQL Log Analyzer&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;TABLE OF CONTENTS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#NAME&#34;&gt;NAME&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#SYNOPSIS&#34;&gt;SYNOPSIS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#DESCRIPTION&#34;&gt;DESCRIPTION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#FEATURE&#34;&gt;FEATURE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#REQUIREMENT&#34;&gt;REQUIREMENT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#INSTALLATION&#34;&gt;INSTALLATION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#POSTGRESQL-CONFIGURATION&#34;&gt;POSTGRESQL-CONFIGURATION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#LOG-STATEMENTS&#34;&gt;LOG-STATEMENTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#PARALLEL-PROCESSING&#34;&gt;PARALLEL-PROCESSING&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#INCREMENTAL-REPORTS&#34;&gt;INCREMENTAL-REPORTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#BINARY-FORMAT&#34;&gt;BINARY-FORMAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#JSON-FORMAT&#34;&gt;JSON-FORMAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#AUTHORS&#34;&gt;AUTHORS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darold/pgbadger/master/#LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NAME&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger - a fast PostgreSQL log analysis report&lt;/p&gt; &#xA;&lt;h3&gt;SYNOPSIS&lt;/h3&gt; &#xA;&lt;p&gt;Usage: pgbadger [options] logfile [...]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PostgreSQL log analyzer with fully detailed reports and graphs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;logfile can be a single log file, a list of files, or a shell command&#xA;returning a list of files. If you want to pass log content from stdin&#xA;use - as filename. Note that input from stdin will not work with csvlog.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-a | --average minutes : number of minutes to build the average graphs of&#xA;                         queries and connections. Default 5 minutes.&#xA;-A | --histo-average min: number of minutes to build the histogram graphs&#xA;                         of queries. Default 60 minutes.&#xA;-b | --begin datetime  : start date/time for the data to be parsed in log&#xA;                         (either a timestamp or a time)&#xA;-c | --dbclient host   : only report on entries for the given client host.&#xA;-C | --nocomment       : remove comments like /* ... */ from queries.&#xA;-d | --dbname database : only report on entries for the given database.&#xA;-D | --dns-resolv      : client ip addresses are replaced by their DNS name.&#xA;                         Be warned that this can really slow down pgBadger.&#xA;-e | --end datetime    : end date/time for the data to be parsed in log&#xA;                         (either a timestamp or a time)&#xA;-E | --explode         : explode the main report by generating one report&#xA;                         per database. Global information not related to a&#xA;                         database is added to the postgres database report.&#xA;-f | --format logtype  : possible values: syslog, syslog2, stderr, jsonlog,&#xA;                         csv, pgbouncer, logplex, rds and redshift. Use this&#xA;                         option when pgBadger is not able to detect the log&#xA;                         format.&#xA;-G | --nograph         : disable graphs on HTML output. Enabled by default.&#xA;-h | --help            : show this message and exit.&#xA;-H | --html-outdir path: path to directory where HTML report must be written&#xA;                         in incremental mode, binary files stay on directory&#xA;                         defined with -O, --outdir option.&#xA;-i | --ident name      : programname used as syslog ident. Default: postgres&#xA;-I | --incremental     : use incremental mode, reports will be generated by&#xA;                         days in a separate directory, --outdir must be set.&#xA;-j | --jobs number     : number of jobs to run at same time for a single log&#xA;                         file. Run as single by default or when working with&#xA;                         csvlog format.&#xA;-J | --Jobs number     : number of log files to parse in parallel. Process&#xA;                         one file at a time by default.&#xA;-l | --last-parsed file: allow incremental log parsing by registering the&#xA;                         last datetime and line parsed. Useful if you want&#xA;                         to watch errors since last run or if you want one&#xA;                         report per day with a log rotated each week.&#xA;-L | --logfile-list file:file containing a list of log files to parse.&#xA;-m | --maxlength size  : maximum length of a query, it will be restricted to&#xA;                         the given size. Default truncate size is 100000.&#xA;-M | --no-multiline    : do not collect multiline statements to avoid garbage&#xA;                         especially on errors that generate a huge report.&#xA;-N | --appname name    : only report on entries for given application name&#xA;-o | --outfile filename: define the filename for the output. Default depends&#xA;                         on the output format: out.html, out.txt, out.bin,&#xA;                         or out.json. This option can be used multiple times&#xA;                         to output several formats. To use json output, the&#xA;                         Perl module JSON::XS must be installed, to dump&#xA;                         output to stdout, use - as filename.&#xA;-O | --outdir path     : directory where out files must be saved.&#xA;-p | --prefix string   : the value of your custom log_line_prefix as&#xA;                         defined in your postgresql.conf. Only use it if you&#xA;                         aren&#39;t using one of the standard prefixes specified&#xA;                         in the pgBadger documentation, such as if your&#xA;                         prefix includes additional variables like client ip&#xA;                         or application name. See examples below.&#xA;-P | --no-prettify     : disable SQL queries prettify formatter.&#xA;-q | --quiet           : don&#39;t print anything to stdout, not even a progress&#xA;                         bar.&#xA;-Q | --query-numbering : add numbering of queries to the output when using&#xA;                         options --dump-all-queries or --normalized-only.&#xA;-r | --remote-host ip  : set the host where to execute the cat command on&#xA;                         remote log file to parse the file locally.&#xA;-R | --retention N     : number of weeks to keep in incremental mode. Defaults&#xA;                         to 0, disabled. Used to set the number of weeks to&#xA;                         keep in output directory. Older weeks and days&#xA;                         directories are automatically removed.&#xA;-s | --sample number   : number of query samples to store. Default: 3.&#xA;-S | --select-only     : only report SELECT queries.&#xA;-t | --top number      : number of queries to store/display. Default: 20.&#xA;-T | --title string    : change title of the HTML page report.&#xA;-u | --dbuser username : only report on entries for the given user.&#xA;-U | --exclude-user username : exclude entries for the specified user from&#xA;                         report. Can be used multiple time.&#xA;-v | --verbose         : enable verbose or debug mode. Disabled by default.&#xA;-V | --version         : show pgBadger version and exit.&#xA;-w | --watch-mode      : only report errors just like logwatch could do.&#xA;-W | --wide-char       : encode html output of queries into UTF8 to avoid&#xA;                         Perl message &#34;Wide character in print&#34;.&#xA;-x | --extension       : output format. Values: text, html, bin or json.&#xA;                         Default: html&#xA;-X | --extra-files     : in incremental mode allow pgBadger to write CSS and&#xA;                         JS files in the output directory as separate files.&#xA;-z | --zcat exec_path  : set the full path to the zcat program. Use it if&#xA;                         zcat, bzcat or unzip is not in your path.&#xA;-Z | --timezone +/-XX  : Set the number of hours from GMT of the timezone.&#xA;                         Use this to adjust date/time in JavaScript graphs.&#xA;                         The value can be an integer, ex.: 2, or a float,&#xA;                         ex.: 2.5.&#xA;--pie-limit num        : pie data lower than num% will show a sum instead.&#xA;--exclude-query regex  : any query matching the given regex will be excluded&#xA;                         from the report. For example: &#34;^(VACUUM|COMMIT)&#34;&#xA;                         You can use this option multiple times.&#xA;--exclude-file filename: path of the file that contains each regex to use&#xA;                         to exclude queries from the report. One regex per&#xA;                         line.&#xA;--include-query regex  : any query that does not match the given regex will&#xA;                         be excluded from the report. You can use this&#xA;                         option multiple times. For example: &#34;(tbl1|tbl2)&#34;.&#xA;--include-file filename: path of the file that contains each regex to the&#xA;                         queries to include from the report. One regex per&#xA;                         line.&#xA;--disable-error        : do not generate error report.&#xA;--disable-hourly       : do not generate hourly report.&#xA;--disable-type         : do not generate report of queries by type, database&#xA;                         or user.&#xA;--disable-query        : do not generate query reports (slowest, most&#xA;                         frequent, queries by users, by database, ...).&#xA;--disable-session      : do not generate session report.&#xA;--disable-connection   : do not generate connection report.&#xA;--disable-lock         : do not generate lock report.&#xA;--disable-temporary    : do not generate temporary report.&#xA;--disable-checkpoint   : do not generate checkpoint/restartpoint report.&#xA;--disable-autovacuum   : do not generate autovacuum report.&#xA;--charset              : used to set the HTML charset to be used.&#xA;                         Default: utf-8.&#xA;--csv-separator        : used to set the CSV field separator, default: ,&#xA;--exclude-time  regex  : any timestamp matching the given regex will be&#xA;                         excluded from the report. Example: &#34;2013-04-12 .*&#34;&#xA;                         You can use this option multiple times.&#xA;--include-time  regex  : only timestamps matching the given regex will be&#xA;                         included in the report. Example: &#34;2013-04-12 .*&#34;&#xA;                         You can use this option multiple times.&#xA;--exclude-db name      : exclude entries for the specified database from&#xA;                         report. Example: &#34;pg_dump&#34;. Can be used multiple&#xA;                         times.&#xA;--exclude-appname name : exclude entries for the specified application name&#xA;                         from report.  Example: &#34;pg_dump&#34;.  Can be used&#xA;                         multiple times.&#xA;--exclude-line regex   : exclude any log entry that will match the given&#xA;                         regex. Can be used multiple times.&#xA;--exclude-client name  : exclude log entries for the specified client ip.&#xA;                         Can be used multiple times.&#xA;--anonymize            : obscure all literals in queries, useful to hide&#xA;                         confidential data.&#xA;--noreport             : no reports will be created in incremental mode.&#xA;--log-duration         : force pgBadger to associate log entries generated&#xA;                         by both log_duration = on and log_statement = &#39;all&#39;&#xA;--enable-checksum      : used to add an md5 sum under each query report.&#xA;--journalctl command   : command to use to replace PostgreSQL logfile by&#xA;                         a call to journalctl. Basically it might be:&#xA;                            journalctl -u postgresql-9.5&#xA;--pid-dir path         : set the path where the pid file must be stored.&#xA;                         Default /tmp&#xA;--pid-file file        : set the name of the pid file to manage concurrent&#xA;                         execution of pgBadger. Default: pgbadger.pid&#xA;--rebuild              : used to rebuild all html reports in incremental&#xA;                         output directories where there&#39;s binary data files.&#xA;--pgbouncer-only       : only show PgBouncer-related menus in the header.&#xA;--start-monday         : in incremental mode, calendar weeks start on&#xA;                         Sunday. Use this option to start on a Monday.&#xA;--iso-week-number      : in incremental mode, calendar weeks start on&#xA;                         Monday and respect the ISO 8601 week number, range&#xA;                         01 to 53, where week 1 is the first week that has&#xA;                         at least 4 days in the new year.&#xA;--normalized-only      : only dump all normalized queries to out.txt&#xA;--log-timezone +/-XX   : Set the number of hours from GMT of the timezone&#xA;                         that must be used to adjust date/time read from&#xA;                         log file before beeing parsed. Using this option&#xA;                         makes log search with a date/time more difficult.&#xA;                         The value can be an integer, ex.: 2, or a float,&#xA;                         ex.: 2.5.&#xA;--prettify-json        : use it if you want json output to be prettified.&#xA;--month-report YYYY-MM : create a cumulative HTML report over the specified&#xA;                         month. Requires incremental output directories and&#xA;                         the presence of all necessary binary data files&#xA;--day-report YYYY-MM-DD: create an HTML report over the specified day.&#xA;                         Requires incremental output directories and the&#xA;                         presence of all necessary binary data files&#xA;--noexplain            : do not process lines generated by auto_explain.&#xA;--command CMD          : command to execute to retrieve log entries on&#xA;                         stdin. pgBadger will open a pipe to the command&#xA;                         and parse log entries generated by the command.&#xA;--no-week              : inform pgbadger to not build weekly reports in&#xA;                         incremental mode. Useful if it takes too much time.&#xA;--explain-url URL      : use it to override the url of the graphical explain&#xA;                         tool. Default: http://explain.depesz.com/&#xA;--tempdir DIR          : set directory where temporary files will be written&#xA;                         Default: File::Spec-&amp;gt;tmpdir() || &#39;/tmp&#39;&#xA;--no-process-info      : disable changing process title to help identify&#xA;                         pgbadger process, some system do not support it.&#xA;--dump-all-queries     : dump all queries found in the log file replacing&#xA;                         bind parameters included in the queries at their&#xA;                         respective placeholders positions.&#xA;--keep-comments        : do not remove comments from normalized queries. It&#xA;                         can be useful if you want to distinguish between&#xA;                         same normalized queries.&#xA;--no-progressbar       : disable progressbar.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pgBadger is able to parse a remote log file using a passwordless ssh connection. Use -r or --remote-host to set the host IP address or hostname. There are also some additional options to fully control the ssh connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--ssh-program ssh        path to the ssh program to use. Default: ssh.&#xA;--ssh-port port          ssh port to use for the connection. Default: 22.&#xA;--ssh-user username      connection login name. Defaults to running user.&#xA;--ssh-identity file      path to the identity file to use.&#xA;--ssh-timeout second     timeout to ssh connection failure. Default: 10 sec.&#xA;--ssh-option  options    list of -o options to use for the ssh connection.&#xA;                         Options always used:&#xA;                             -o ConnectTimeout=$ssh_timeout&#xA;                             -o PreferredAuthentications=hostbased,publickey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log file to parse can also be specified using an URI, supported protocols are http[s] and [s]ftp. The curl command will be used to download the file, and the file will be parsed during download. The ssh protocol is also supported and will use the ssh command like with the remote host use. See examples bellow.&lt;/p&gt; &#xA;&lt;p&gt;Return codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0: on success&#xA;1: die on error&#xA;2: if it has been interrupted using ctr+c for example&#xA;3: the pid file already exists or can not be created&#xA;4: no log file was given at command line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger /var/log/postgresql.log&#xA;pgbadger /var/log/postgres.log.2.gz /var/log/postgres.log.1.gz /var/log/postgres.log&#xA;pgbadger /var/log/postgresql/postgresql-2012-05-*&#xA;pgbadger --exclude-query=&#34;^(COPY|COMMIT)&#34; /var/log/postgresql.log&#xA;pgbadger -b &#34;2012-06-25 10:56:11&#34; -e &#34;2012-06-25 10:59:11&#34; /var/log/postgresql.log&#xA;cat /var/log/postgres.log | pgbadger -&#xA;# Log line prefix with stderr log output&#xA;pgbadger --prefix &#39;%t [%p]: user=%u,db=%d,client=%h&#39; /pglog/postgresql-2012-08-21*&#xA;pgbadger --prefix &#39;%m %u@%d %p %r %a : &#39; /pglog/postgresql.log&#xA;# Log line prefix with syslog log output&#xA;pgbadger --prefix &#39;user=%u,db=%d,client=%h,appname=%a&#39; /pglog/postgresql-2012-08-21*&#xA;# Use my 8 CPUs to parse my 10GB file faster, much faster&#xA;pgbadger -j 8 /pglog/postgresql-10.1-main.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use URI notation for remote log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger http://172.12.110.1//var/log/postgresql/postgresql-10.1-main.log&#xA;pgbadger ftp://username@172.12.110.14/postgresql-10.1-main.log&#xA;pgbadger ssh://username@172.12.110.14:2222//var/log/postgresql/postgresql-10.1-main.log*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use together a local PostgreSQL log and a remote pgbouncer log file to parse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger /var/log/postgresql/postgresql-10.1-main.log ssh://username@172.12.110.14/pgbouncer.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reporting errors every week by cron job:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;30 23 * * 1 /usr/bin/pgbadger -q -w /var/log/postgresql.log -o /var/reports/pg_errors.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate report every week using incremental behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 4 * * 1 /usr/bin/pgbadger -q `find /var/log/ -mtime -7 -name &#34;postgresql.log*&#34;` -o /var/reports/pg_errors-`date +\%F`.html -l /var/reports/pgbadger_incremental_file.dat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This supposes that your log file and HTML report are also rotated every week.&lt;/p&gt; &#xA;&lt;p&gt;Or better, use the auto-generated incremental reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 4 * * * /usr/bin/pgbadger -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will generate a report per day and per week.&lt;/p&gt; &#xA;&lt;p&gt;In incremental mode, you can also specify the number of weeks to keep in the reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/bin/pgbadger --retention 2 -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a pg_dump at 23:00 and 13:00 each day during half an hour, you can use pgBadger as follow to exclude these periods from the report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --exclude-time &#34;2013-09-.* (23|13):.*&#34; postgresql.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will help avoid having COPY statements, as generated by pg_dump, on top of the list of slowest queries. You can also use --exclude-appname &#34;pg_dump&#34; to solve this problem in a simpler way.&lt;/p&gt; &#xA;&lt;p&gt;You can also parse journalctl output just as if it was a log file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --journalctl &#39;journalctl -u postgresql-9.5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or worst, call it from a remote host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -r 192.168.1.159 --journalctl &#39;journalctl -u postgresql-9.5&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you don&#39;t need to specify any log file at command line, but if you have other PostgreSQL log files to parse, you can add them as usual.&lt;/p&gt; &#xA;&lt;p&gt;To rebuild all incremental html reports after, proceed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm /path/to/reports/*.js&#xA;rm /path/to/reports/*.css&#xA;pgbadger -X -I -O /path/to/reports/ --rebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will also update all resource files (JS and CSS). Use -E or --explode if the reports were built using this option.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger also supports Heroku PostgreSQL logs using logplex format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;heroku logs -p postgres | pgbadger -f logplex -o heroku.html -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will stream Heroku PostgreSQL log to pgbadger through stdin.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger can auto detect RDS and cloudwatch PostgreSQL logs using rds format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -f rds -o rds_out.html rds.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each CloudSQL Postgresql log is a fairly normal PostgreSQL log, but encapsulated in JSON format. It is autodetected by pgBadger but in case you need to force the log format use `jsonlog`:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -f jsonlog -o cloudsql_out.html cloudsql.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the same as with the jsonlog extension, the json format is different but pgBadger can parse both formats.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger also supports logs produced by CloudNativePG Postgres operator for Kubernetes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -f jsonlog -o cnpg_out.html cnpg.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a cumulative report over a month use command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --month-report 2919-05 /path/to/incremental/reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will add a link to the month name into the calendar view in incremental reports to look at report for month 2019 May. Use -E or --explode if the reports were built using this option.&lt;/p&gt; &#xA;&lt;h3&gt;DESCRIPTION&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger is a PostgreSQL log analyzer built for speed providing fully detailed reports based on your PostgreSQL log files. It&#39;s a small standalone Perl script that outperforms any other PostgreSQL log analyzer.&lt;/p&gt; &#xA;&lt;p&gt;It is written in pure Perl and uses a JavaScript library (flotr2) to draw graphs so that you don&#39;t need to install any additional Perl modules or other packages. Furthermore, this library gives us more features such as zooming. pgBadger also uses the Bootstrap JavaScript library and the FontAwesome webfont for better design. Everything is embedded.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger is able to autodetect your log file format (syslog, stderr, csvlog or jsonlog) if the file is long enough. It is designed to parse huge log files as well as compressed files. Supported compressed formats are gzip, bzip2, lz4, xz, zip and zstd. For the xz format you must have an xz version higher than 5.05 that supports the --robot option. lz4 files must be compressed with the --content-size option for pgbadger to determine the uncompressed file size. For the complete list of features, see below.&lt;/p&gt; &#xA;&lt;p&gt;All charts are zoomable and can be saved as PNG images.&lt;/p&gt; &#xA;&lt;p&gt;You can also limit pgBadger to only report errors or remove any part of the report using command-line options.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger supports any custom format set in the log_line_prefix directive of your postgresql.conf file as long as it at least specifies the %t and %p patterns.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger allows parallel processing of a single log file or multiple files through the use of the -j option specifying the number of CPUs.&lt;/p&gt; &#xA;&lt;p&gt;If you want to save system performance you can also use log_duration instead of log_min_duration_statement to have reports on duration and number of queries only.&lt;/p&gt; &#xA;&lt;h3&gt;FEATURE&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger reports everything about your SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Overall statistics.&#xA;    The most frequent waiting queries.&#xA;    Queries that waited the most.&#xA;    Queries generating the most temporary files.&#xA;    Queries generating the largest temporary files.&#xA;    The slowest queries.&#xA;    Queries that took up the most time.&#xA;    The most frequent queries.&#xA;    The most frequent errors.&#xA;    Histogram of query times.&#xA;    Histogram of sessions times.&#xA;    Users involved in top queries.&#xA;    Applications involved in top queries.&#xA;    Queries generating the most cancellation.&#xA;    Queries most cancelled.&#xA;    The most time consuming prepare/bind queries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following reports are also available with hourly charts divided into periods of five minutes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    SQL queries statistics.&#xA;    Temporary file statistics.&#xA;    Checkpoints statistics.&#xA;    Autovacuum and autoanalyze statistics.&#xA;    Cancelled queries.&#xA;    Error events (panic, fatal, error and warning).&#xA;    Error class distribution.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also some pie charts about distribution of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Locks statistics.&#xA;    Queries by type (select/insert/update/delete).&#xA;    Distribution of queries type per database/application&#xA;    Sessions per database/user/client/application.&#xA;    Connections per database/user/client/application.&#xA;    Autovacuum and autoanalyze per table.&#xA;    Queries per user and total duration per user.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All charts are zoomable and can be saved as PNG images. SQL queries reported are highlighted and beautified automatically.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger is also able to parse PgBouncer log files and to create the following reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Request Throughput&#xA;    Bytes I/O Throughput&#xA;    Queries Average duration&#xA;    Simultaneous sessions&#xA;    Histogram of sessions times&#xA;    Sessions per database&#xA;    Sessions per user&#xA;    Sessions per host&#xA;    Established connections&#xA;    Connections per database&#xA;    Connections per user&#xA;    Connections per host&#xA;    Most used reserved pools&#xA;    Most Frequent Errors/Events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also have incremental reports with one report per day and a cumulative report per week. Two multiprocess modes are available to speed up log parsing, one using one core per log file, and the second using multiple cores to parse a single file. These modes can be combined.&lt;/p&gt; &#xA;&lt;p&gt;Histogram granularity can be adjusted using the -A command-line option. By default, they will report the mean of each top queries/errors occurring per hour, but you can specify the granularity down to the minute.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger can also be used in a central place to parse remote log files using a passwordless SSH connection. This mode can be used with compressed files and in the multiprocess per file mode (-J), but cannot be used with the CSV log format.&lt;/p&gt; &#xA;&lt;p&gt;Examples of reports can be found here: &lt;a href=&#34;https://pgbadger.darold.net/#reports&#34;&gt;https://pgbadger.darold.net/#reports&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;REQUIREMENT&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger comes as a single Perl script - you do not need anything other than a modern Perl distribution. Charts are rendered using a JavaScript library, so you don&#39;t need anything other than a web browser. Your browser will do all the work.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to parse PostgreSQL CSV log files, you might need some Perl Modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Text::CSV_XS - to parse PostgreSQL CSV log files.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module is optional, if you don&#39;t have PostgreSQL log in the CSV format, you don&#39;t need to install it.&lt;/p&gt; &#xA;&lt;p&gt;If you want to export statistics as JSON file, you need an additional Perl module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    JSON::XS - JSON serialising/deserialising, done correctly and fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module is optional, if you don&#39;t select the json output format, you don&#39;t need to install it. You can install it on a Debian-like system using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    sudo apt-get install libjson-xs-perl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and on RPM-like system using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    sudo yum install perl-JSON-XS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compressed log file format is autodetected from the file extension. If pgBadger finds a gz extension, it will use the zcat utility; with a bz2 extension, it will use bzcat; with lz4, it will use lz4cat; with zst, it will use zstdcat; if the file extension is zip or xz, then the unzip or xz utility will be used.&lt;/p&gt; &#xA;&lt;p&gt;If those utilities are not found in the PATH environment variable, then use the --zcat command-line option to change this path. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    --zcat=&#34;/usr/local/bin/gunzip -c&#34; or --zcat=&#34;/usr/local/bin/bzip2 -dc&#34;&#xA;    --zcat=&#34;C:\tools\unzip -p&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, pgBadger will use the zcat, bzcat, lz4cat, zstdcat and unzip utilities following the file extension. If you use the default autodetection of compression format, you can mix gz, bz2, lz4, xz, zip or zstd files. Specifying a custom value of --zcat option will remove the possibility of mixed compression format.&lt;/p&gt; &#xA;&lt;p&gt;Note that multiprocessing cannot be used with compressed files or CSV files as well as under Windows platform.&lt;/p&gt; &#xA;&lt;h3&gt;INSTALLATION&lt;/h3&gt; &#xA;&lt;p&gt;Download the tarball from GitHub and unpack the archive as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    tar xzf pgbadger-11.x.tar.gz&#xA;    cd pgbadger-11.x/&#xA;    perl Makefile.PL&#xA;    make &amp;amp;&amp;amp; sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will copy the Perl script pgbadger to /usr/local/bin/pgbadger by default and the man page into /usr/local/share/man/man1/pgbadger.1. Those are the default installation directories for &#39;site&#39; install.&lt;/p&gt; &#xA;&lt;p&gt;If you want to install all under /usr/ location, use INSTALLDIRS=&#39;perl&#39; as an argument of Makefile.PL. The script will be installed into /usr/bin/pgbadger and the manpage into /usr/share/man/man1/pgbadger.1.&lt;/p&gt; &#xA;&lt;p&gt;For example, to install everything just like Debian does, proceed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    perl Makefile.PL INSTALLDIRS=vendor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, INSTALLDIRS is set to site.&lt;/p&gt; &#xA;&lt;h3&gt;POSTGRESQL CONFIGURATION&lt;/h3&gt; &#xA;&lt;p&gt;You must enable and set some configuration directives in your postgresql.conf before starting.&lt;/p&gt; &#xA;&lt;p&gt;You must first enable SQL query logging to have something to parse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_min_duration_statement = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here every statement will be logged, on a busy server you may want to increase this value to only log queries with a longer duration. Note that if you have log_statement set to &#39;all&#39;, nothing will be logged through the log_min_duration_statement directive. See the next chapter for more information.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger supports any custom format set in the log_line_prefix directive of your postgresql.conf file as long as it at least specifies a time escape sequence (%t, %m or %n) and a process-related escape sequence (%p or %c).&lt;/p&gt; &#xA;&lt;p&gt;For example, with &#39;stderr&#39; log format, log_line_prefix must be at least:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;%t [%p]: &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log line prefix could add user, database name, application name and client ip address as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;%t [%p]: user=%u,db=%d,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for syslog log file format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;user=%u,db=%d,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log line prefix for stderr output could also be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;%t [%p]: db=%d,user=%u,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for syslog output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_line_prefix = &#39;db=%d,user=%u,app=%a,client=%h &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to enable other parameters in postgresql.conf to get more information from your log files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    log_checkpoints = on&#xA;    log_connections = on&#xA;    log_disconnections = on&#xA;    log_lock_waits = on&#xA;    log_temp_files = 0&#xA;    log_autovacuum_min_duration = 0&#xA;    log_error_verbosity = default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do not enable log_statement as its log format will not be parsed by pgBadger.&lt;/p&gt; &#xA;&lt;p&gt;Of course your log messages should be in English with or without locale support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    lc_messages=&#39;en_US.UTF-8&#39;&#xA;    lc_messages=&#39;C&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;pgBadger parser does not support other locales, like &#39;fr_FR.UTF-8&#39; for example.&lt;/p&gt; &#xA;&lt;h3&gt;LOG STATEMENTS&lt;/h3&gt; &#xA;&lt;p&gt;Considerations about log_min_duration_statement, log_duration and log_statement configuration directives.&lt;/p&gt; &#xA;&lt;p&gt;If you want the query statistics to include the actual query strings, you must set log_min_duration_statement to 0 or more milliseconds.&lt;/p&gt; &#xA;&lt;p&gt;If you just want to report duration and number of queries and don&#39;t want all details about queries, set log_min_duration_statement to -1 to disable it and enable log_duration in your postgresql.conf file. If you want to add the most common query report, you can either choose to set log_min_duration_statement to a higher value or to enable log_statement.&lt;/p&gt; &#xA;&lt;p&gt;Enabling log_min_duration_statement will add reports about slowest queries and queries that took up the most time. Take care that if you have log_statement set to &#39;all&#39;, nothing will be logged with log_min_duration_statement.&lt;/p&gt; &#xA;&lt;p&gt;Warning: Do not enable both log_min_duration_statement, log_duration and log_statement all together, this will result in wrong counter values. Note that this will also increase drastically the size of your log. log_min_duration_statement should always be preferred.&lt;/p&gt; &#xA;&lt;h3&gt;PARALLEL PROCESSING&lt;/h3&gt; &#xA;&lt;p&gt;To enable parallel processing you just have to use the -j N option where N is the number of cores you want to use.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger will then proceed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    for each log file&#xA;        chunk size = int(file size / N)&#xA;        look at start/end offsets of these chunks&#xA;        fork N processes and seek to the start offset of each chunk&#xA;            each process will terminate when the parser reach the end offset&#xA;            of its chunk&#xA;            each process write stats into a binary temporary file&#xA;        wait for all children processes to terminate&#xA;    All binary temporary files generated will then be read and loaded into&#xA;    memory to build the html output.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With that method, at start/end of chunks pgBadger may truncate or omit a maximum of N queries per log file, which is an insignificant gap if you have millions of queries in your log file. The chance that the query that you were looking for is lost is near 0, this is why I think this gap is livable. Most of the time the query is counted twice but truncated.&lt;/p&gt; &#xA;&lt;p&gt;When you have many small log files and many CPUs, it is speedier to dedicate one core to one log file at a time. To enable this behavior, you have to use option -J N instead. With 200 log files of 10MB each, the use of the -J option starts being really interesting with 8 cores. Using this method you will be sure not to lose any queries in the reports.&lt;/p&gt; &#xA;&lt;p&gt;Here is a benchmark done on a server with 8 CPUs and a single file of 9.5GB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     Option |  1 CPU  | 2 CPU | 4 CPU | 8 CPU&#xA;    --------+---------+-------+-------+------&#xA;       -j   | 1h41m18 | 50m25 | 25m39 | 15m58&#xA;       -J   | 1h41m18 | 54m28 | 41m16 | 34m45&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With 200 log files of 10MB each, so 2GB in total, the results are slightly different:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     Option | 1 CPU | 2 CPU | 4 CPU | 8 CPU&#xA;    --------+-------+-------+-------+------&#xA;       -j   | 20m15 |  9m56 |  5m20 | 4m20&#xA;       -J   | 20m15 |  9m49 |  5m00 | 2m40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So it is recommended to use -j unless you have hundreds of small log files and can use at least 8 CPUs.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT: when you are using parallel parsing, pgBadger will generate a lot of temporary files in the /tmp directory and will remove them at the end, so do not remove those files unless pgBadger is not running. They are all named with the following template tmp_pgbadgerXXXX.bin so they can be easily identified.&lt;/p&gt; &#xA;&lt;h3&gt;INCREMENTAL REPORTS&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger includes an automatic incremental report mode using option -I or --incremental. When running in this mode, pgBadger will generate one report per day and a cumulative report per week. Output is first done in binary format into the mandatory output directory (see option -O or --outdir), then in HTML format for daily and weekly reports with a main index file.&lt;/p&gt; &#xA;&lt;p&gt;The main index file will show a dropdown menu per week with a link to each week report and links to daily reports of each week.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you run pgBadger as follows based on a daily rotated file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 4 * * * /usr/bin/pgbadger -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you will have all daily and weekly reports for the full running period.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, pgBadger will create an automatic incremental file in the output directory, so you don&#39;t have to use the -l option unless you want to change the path of that file. This means that you can run pgBadger in this mode each day on a log file rotated each week, and it will not count the log entries twice.&lt;/p&gt; &#xA;&lt;p&gt;To save disk space, you may want to use the -X or --extra-files command-line option to force pgBadger to write JavaScript and CSS to separate files in the output directory. The resources will then be loaded using script and link tags.&lt;/p&gt; &#xA;&lt;h4&gt;Rebuilding reports&lt;/h4&gt; &#xA;&lt;p&gt;Incremental reports can be rebuilt after a pgbadger report fix or a new feature to update all HTML reports. To rebuild all reports where a binary file is still present, proceed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm /path/to/reports/*.js&#xA;rm /path/to/reports/*.css&#xA;pgbadger -X -I -O /path/to/reports/ --rebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will also update all resource files (JS and CSS). Use -E or --explode if the reports were built using this option.&lt;/p&gt; &#xA;&lt;h4&gt;Monthly reports&lt;/h4&gt; &#xA;&lt;p&gt;By default, pgBadger in incremental mode only computes daily and weekly reports. If you want monthly cumulative reports, you will have to use a separate command to specify the report to build. For example, to build a report for August 2019:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -X --month-report 2019-08 /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will add a link to the month name into the calendar view of incremental reports to look at monthly report. The report for a current month can be run every day, it is entirely rebuilt each time. The monthly report is not built by default because it could take a lot of time following the amount of data.&lt;/p&gt; &#xA;&lt;p&gt;If reports were built with the per-database option ( -E | --explode ), it must be used too when calling pgbadger to build monthly report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger -E -X --month-report 2019-08 /var/www/pg_reports/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the same when using the rebuild option ( -R | --rebuild ).&lt;/p&gt; &#xA;&lt;h3&gt;BINARY FORMAT&lt;/h3&gt; &#xA;&lt;p&gt;Using the binary format it is possible to create custom incremental and cumulative reports. For example, if you want to refresh a pgBadger report each hour from a daily PostgreSQL log file, you can proceed by running the following commands each hour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger --last-parsed .pgbadger_last_state_file -o sunday/hourX.bin /var/log/pgsql/postgresql-Sun.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to generate the incremental data files in binary format. And to generate the fresh HTML report from that binary file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgbadger sunday/*.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or as another example, if you generate one log file per hour and you want reports to be rebuilt each time the log file is rotated, proceed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    pgbadger -o day1/hour01.bin /var/log/pgsql/pglog/postgresql-2012-03-23_10.log&#xA;    pgbadger -o day1/hour02.bin /var/log/pgsql/pglog/postgresql-2012-03-23_11.log&#xA;    pgbadger -o day1/hour03.bin /var/log/pgsql/pglog/postgresql-2012-03-23_12.log&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to refresh the HTML report, for example, each time after a new binary file is generated, just do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    pgbadger -o day1_report.html day1/*.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust the commands to suit your particular needs.&lt;/p&gt; &#xA;&lt;h3&gt;JSON FORMAT&lt;/h3&gt; &#xA;&lt;p&gt;JSON format is good for sharing data with other languages, which makes it easy to integrate pgBadger result into other monitoring tools, like Cacti or Graphite.&lt;/p&gt; &#xA;&lt;h3&gt;AUTHORS&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger is an original work from Gilles Darold.&lt;/p&gt; &#xA;&lt;p&gt;The pgBadger logo is an original creation of Damien Cazeils.&lt;/p&gt; &#xA;&lt;p&gt;The pgBadger v4.x design comes from the &#34;Art is code&#34; company.&lt;/p&gt; &#xA;&lt;p&gt;This web site is a work of Gilles Darold.&lt;/p&gt; &#xA;&lt;p&gt;pgBadger is maintained by Gilles Darold and everyone who wants to contribute.&lt;/p&gt; &#xA;&lt;p&gt;Many people have contributed to pgBadger, they are all quoted in the Changelog file.&lt;/p&gt; &#xA;&lt;h3&gt;LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;pgBadger is free software distributed under the PostgreSQL Licence.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2022, Gilles Darold&lt;/p&gt; &#xA;&lt;p&gt;A modified version of the SQL::Beautify Perl Module is embedded in pgBadger with copyright (C) 2009 by Jonas Kramer and is published under the terms of the Artistic License 2.0.&lt;/p&gt;</summary>
  </entry>
</feed>