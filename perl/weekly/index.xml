<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T02:01:44Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>madsen/webservice-google-voice-sendsms</title>
    <updated>2023-08-27T02:01:44Z</updated>
    <id>tag:github.com,2023-08-27:/madsen/webservice-google-voice-sendsms</id>
    <link href="https://github.com/madsen/webservice-google-voice-sendsms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Perl module that allows you to send SMS messages using your Google Voice account.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebService-Google-Voice-SendSMS&lt;/h1&gt; &#xA;&lt;p&gt;WebService-Google-Voice-SendSMS is a Perl module that allows you to send SMS messages using your &lt;a href=&#34;https://www.google.com/voice&#34;&gt;Google Voice&lt;/a&gt; account. It&#39;s based on the &lt;a href=&#34;http://code.google.com/p/phpgooglevoice/&#34;&gt;phpgooglevoice&lt;/a&gt; class by &lt;a href=&#34;http://www.lostleon.com/&#34;&gt;LostLeon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a Git repository where development of WebService-Google-Voice-SendSMS takes place. For more information, visit &lt;a href=&#34;http://search.cpan.org/dist/WebService-Google-Voice-SendSMS/&#34;&gt;WebService-Google-Voice-SendSMS on CPAN&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Copyright and License&lt;/h1&gt; &#xA;&lt;p&gt;This software is copyright (c) 2013 by Christopher J. Madsen.&lt;/p&gt; &#xA;&lt;p&gt;This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jonreid/XcodeCoverage</title>
    <updated>2023-08-27T02:01:44Z</updated>
    <id>tag:github.com,2023-08-27:/jonreid/XcodeCoverage</id>
    <link href="https://github.com/jonreid/XcodeCoverage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code coverage for Xcode projects (Objective-C only)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;http://qualitycoding.org/jrwp/wp-content/uploads/2016/01/XcodeCoverage@2x.png&#34; alt=&#34;XcodeCoverage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/XcodeCoverage&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/XcodeCoverage/badge.png&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;XcodeCoverage provides a simple way to generate reports of the Objective-C code coverage of your Xcode project. Generated reports include HTML and Cobertura XML.&lt;/p&gt; &#xA;&lt;p&gt;Coverage data excludes Apple&#39;s SDKs, and the exclusion rules can be customized.&lt;/p&gt; &#xA;&lt;p&gt;Sadly, Swift coverage is not supported.&lt;/p&gt; &#xA;&lt;h1&gt;Installation: Standard&lt;/h1&gt; &#xA;&lt;p&gt;Use the standard installation if you want to customize XcodeCoverage to exclude certain files and directories, such as third-party libraries. Otherwise, the CocoaPods installation described below may be more convenient.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository.&lt;/li&gt; &#xA; &lt;li&gt;Place the XcodeCoverage folder in the same folder as your Xcode project.&lt;/li&gt; &#xA; &lt;li&gt;In your main target&#39;s Build Phases, add a Run Script build phase to execute &lt;code&gt;XcodeCoverage/exportenv.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A few people have been tripped up by the last step: Make sure you add the script to your main target (your app or library), not your test target.&lt;/p&gt; &#xA;&lt;h1&gt;Installation: CocoaPods&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPod&lt;/a&gt; has been added for convenient use in simple projects. There are a couple of things you should be aware of if you are using the CocoaPod instead of the standard method:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There will be no actual files added to your project. Files are only added through &lt;code&gt;preserve_paths&lt;/code&gt;, so they will be available in your &lt;code&gt;Pods/XcodeCoverage&lt;/code&gt; path, but you will not see them in Xcode, and they will not be compiled by Xcode.&lt;/li&gt; &#xA; &lt;li&gt;You will not be able to modify the scripts without those modifications being potentially overwritten by CocoaPods.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If those caveats are deal-breakers, please use the standard installation method above.&lt;/p&gt; &#xA;&lt;p&gt;The steps to install via CocoaPods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;XcodeCoverage&#39;, &#39;~&amp;gt;1.0&#39;&lt;/code&gt; (or whatever &lt;a href=&#34;http://guides.cocoapods.org/using/the-podfile.html#specifying-pod-versions&#34;&gt;version specification&lt;/a&gt; you desire) to your Podfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;. This will download the necessary files.&lt;/li&gt; &#xA; &lt;li&gt;In your main target, add a Run Script build phase to execute &lt;code&gt;Pods/XcodeCoverage/exportenv.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Again, make sure you add the script to your main target (your app or library), not your test target.&lt;/p&gt; &#xA;&lt;h1&gt;Xcode Project Setup&lt;/h1&gt; &#xA;&lt;p&gt;XcodeCoverage comes with an xcconfig file with the build settings required to instrument your code for coverage analysis.&lt;/p&gt; &#xA;&lt;p&gt;If you already use an xcconfig, include it in the configuration you want to instrument:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standard installation: &lt;code&gt;#include &#34;XcodeCoverage/XcodeCoverage.xcconfig&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods installation: &lt;code&gt;#include &#34;Pods/XcodeCoverage/XcodeCoverage.xcconfig&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t already use an xcconfig, drag XcodeCoverage.xcconfig into your project. Where it prompts &#34;Add to targets,&#34; deselect all targets. (Otherwise, it will be included in the bundle.) Then click on your project in Xcode&#39;s Navigator pane, and select the Info tab. For the configuration you want to instrument, select XcodeCoverage.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d rather specify the build settings by hand, enable these two settings at the project level:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instrument Program Flow&lt;/li&gt; &#xA; &lt;li&gt;Generate Legacy Test Coverage Files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure not to instrument your AppStore release.&lt;/p&gt; &#xA;&lt;h1&gt;Execution&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run your unit tests.&lt;/li&gt; &#xA; &lt;li&gt;In Terminal, execute &lt;code&gt;getcov&lt;/code&gt; in your project&#39;s XcodeCoverage folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;getcov&lt;/code&gt; has the following command-line options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--show&lt;/code&gt; or &lt;code&gt;-s&lt;/code&gt;: Show HTML report.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--xml&lt;/code&gt; or &lt;code&gt;-x&lt;/code&gt;: Generate Cobertura XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-o output_dir&lt;/code&gt;: Specify output directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-i info_file&lt;/code&gt;: Specify name of generated lcov info file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: Enable verbose output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;: Show usage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you make changes to your test code without changing the production code and want a clean slate, use the &lt;code&gt;cleancov&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;If you make changes to your production code, you should clear out all build artifacts before measuring code coverage again. &#34;Clean Build Folder&#34; by holding down the Option key in Xcode&#39;s &#34;Product&#34; menu, or by using the ⌥⇧⌘K key combination.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt; XcodeCoverage can prompt to run code coverage after running unit tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit Xcode scheme -&amp;gt; Test -&amp;gt; Post-actions&lt;/li&gt; &#xA; &lt;li&gt;Set &#34;Shell&#34; to: &lt;code&gt;/bin/bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set &#34;Provide build settings from&#34; to your main target&lt;/li&gt; &#xA; &lt;li&gt;Set script to &lt;code&gt;source XcodeCoverage/run_code_coverage_post.sh&lt;/code&gt; for standard installation. For CocoaPods installation, use &lt;code&gt;source Pods/XcodeCoverage/run_code_coverage_post.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Excluding Files From Coverage&lt;/h1&gt; &#xA;&lt;p&gt;If there are files or folders which you want to have the coverage generator ignore (for instance, third-party libraries not installed via CocoaPods or machine-generated files), add an &lt;code&gt;.xcodecoverageignore&lt;/code&gt; file to your &lt;code&gt;SRCROOT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each line should be a different file or group of files which should be excluded for code coverage purposes. You can use &lt;code&gt;SRCROOT&lt;/code&gt; relative paths as well as the &lt;code&gt;*&lt;/code&gt; character to indicate everything below a certain directory should be excluded.&lt;/p&gt; &#xA;&lt;p&gt;Example contents of an &lt;code&gt;.xcodecoverageignore&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;${SRCROOT}/TestedProject/Machine Files/*&#xA;${SRCROOT}/TestedProject/Third-Party/SingleFile.m&#xA;${SRCROOT}/TestedProject/Categories/UIImage+IgnoreMe.{h,m}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you were using a version of XcodeCoverage prior to 1.3, you will need to move the list of files and folders you wish to ignore to the &lt;code&gt;.xcodecoverageignore&lt;/code&gt; file. The current setup will prevent your customized list from being overwritten when there is an update to this project.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;lcov&lt;/code&gt; -&amp;gt; Cobertura script is from &lt;a href=&#34;https://github.com/eriwen/lcov-to-cobertura-xml/&#34;&gt;https://github.com/eriwen/lcov-to-cobertura-xml/&lt;/a&gt; and is bound by &lt;a href=&#34;https://github.com/eriwen/lcov-to-cobertura-xml/raw/master/LICENSE.txt&#34;&gt;the license of that project&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SeanOBoyle/DoxygenFilterSystemVerilog</title>
    <updated>2023-08-27T02:01:44Z</updated>
    <id>tag:github.com,2023-08-27:/SeanOBoyle/DoxygenFilterSystemVerilog</id>
    <link href="https://github.com/SeanOBoyle/DoxygenFilterSystemVerilog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>