<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:57:35Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>linux-test-project/lcov</title>
    <updated>2023-03-05T01:57:35Z</updated>
    <id>tag:github.com,2023-03-05:/linux-test-project/lcov</id>
    <link href="https://github.com/linux-test-project/lcov" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LCOV&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;README file for the LTP GCOV extension (LCOV) -&lt;/li&gt; &#xA; &lt;li&gt;Last changes: 2022-10-04&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;LCOV is an extension of GCOV, a GNU tool which provides information about what parts of a program are actually executed (i.e. &#34;covered&#34;) while running a particular test case. The extension consists of a set of Perl scripts which build on the textual GCOV output to implement the following enhanced functionality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* HTML based output: coverage rates are additionally indicated using bar&#xA;  graphs and specific colors.&#xA;&#xA;* Support for large projects: overview pages allow quick browsing of&#xA;  coverage data by providing either a hierarchical directory structure&#xA;  view or a three-level detail view: directory, file and source code view.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LCOV was initially designed to support Linux kernel coverage measurements, but works as well for coverage measurements on standard user space applications.&lt;/p&gt; &#xA;&lt;p&gt;LCOV has recently been enhanced to support differential coverage, as well as date- and owner-binning. See &lt;a href=&#34;https://arxiv.org/abs/2008.07947&#34;&gt;https://arxiv.org/abs/2008.07947&lt;/a&gt; or &lt;a href=&#34;https://ieeexplore.ieee.org/document/9438597&#34;&gt;https://ieeexplore.ieee.org/document/9438597&lt;/a&gt; for a detailed explanation of the concepts and several possible use models. A video presentation of the basic ideas can be found at &lt;a href=&#34;http://doi.org/10.5281/zenodo.4653252&#34;&gt;http://doi.org/10.5281/zenodo.4653252&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition, several other features and capabilities have been added. See section 5, below, for a brief description - and also see the man pages and the test cases.&lt;/p&gt; &#xA;&lt;h2&gt;Further README contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Included files&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installing LCOV&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dependencies&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An example of how to access kernel coverage data&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An example of how to access coverage data for a user space program&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;New features (compared to lcov 1.16).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Questions and Comments&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Important files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;README - This README file CHANGES - List of changes between releases bin/lcov - Tool for capturing LCOV coverage data bin/genhtml - Tool for creating HTML output from LCOV data bin/gendesc - Tool for creating description files as used by genhtml bin/geninfo - Internal tool (creates LCOV data files) bin/genpng - Internal tool (creates png overviews of source files) bin/install.sh - Internal tool (takes care of un-/installing) man - Directory containing man pages for included tools example - Directory containing an example to demonstrate LCOV lcovrc - LCOV configuration file Makefile - Makefile providing &#39;install&#39; and &#39;uninstall&#39; targets&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Installing LCOV&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The LCOV package is available as either RPM or tarball from:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/linux-test-project/lcov/releases&#34;&gt;https://github.com/linux-test-project/lcov/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To install the tarball, unpack it to a directory and run:&lt;/p&gt; &#xA;&lt;p&gt;make install&lt;/p&gt; &#xA;&lt;p&gt;Use Git for the most recent (but possibly unstable) version:&lt;/p&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://github.com/linux-test-project/lcov.git&#34;&gt;https://github.com/linux-test-project/lcov.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Change to the resulting lcov directory and type:&lt;/p&gt; &#xA;&lt;p&gt;make install&lt;/p&gt; &#xA;&lt;p&gt;The default install location is /usr/local. Note that you may need to have superuser permissions to write into system directories.&lt;/p&gt; &#xA;&lt;p&gt;To install in a different location - for example, your home directory, run:&lt;/p&gt; &#xA;&lt;p&gt;make PREFIX=$HOME/my_lcov install&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The lcov module is implemented primarily in Perl - and requires both a moderately up-to-date Perl installation and multiple Perl packages.&lt;/p&gt; &#xA;&lt;p&gt;These perl packages include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Capture::Tiny&lt;/li&gt; &#xA; &lt;li&gt;DateTime&lt;/li&gt; &#xA; &lt;li&gt;DateTime::Format::W3CDTF&lt;/li&gt; &#xA; &lt;li&gt;Devel::Cover&lt;/li&gt; &#xA; &lt;li&gt;Digest::MD5&lt;/li&gt; &#xA; &lt;li&gt;File::Spec&lt;/li&gt; &#xA; &lt;li&gt;at least one flavor of JSON module. In order of performance/preference: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JSON::XS&lt;/li&gt; &#xA;   &lt;li&gt;Cpanel::JSON::XS&lt;/li&gt; &#xA;   &lt;li&gt;JSON::PP&lt;/li&gt; &#xA;   &lt;li&gt;JSON&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Memory::Process&lt;/li&gt; &#xA; &lt;li&gt;Time::HiRes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your system is missing any of these, then you may be able to install them via:&lt;/p&gt; &#xA;&lt;p&gt;$ perl -MCPAN -e &#39;install &#34;packageName&#34;&#39;&lt;/p&gt; &#xA;&lt;p&gt;You will very likely need superuser access to be able to install Perl modules.&lt;/p&gt; &#xA;&lt;p&gt;Some of the applications provided with the lcov module are written in Python - and may require additional Python packages. In particular, &#39;xlsxwriter&#39; is required in order to generate any of the spreadsheet reports.&lt;/p&gt; &#xA;&lt;p&gt;To measure Python code coverage, users will need Python packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Coverage.py&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, contributors will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;perltidy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your platform may support other mechanisms to install and/or update required packages.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;An example of how to access Linux kernel coverage data&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Requirements: Follow the Linux kernel coverage setup instructions at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.kernel.org/dev-tools/gcov.html&#34;&gt;https://docs.kernel.org/dev-tools/gcov.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As root, do the following:&lt;/p&gt; &#xA;&lt;p&gt;a) Resetting counters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; lcov --zerocounters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;b) Capturing the current coverage state to a file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; lcov --capture --output-file kernel.info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;c) Getting HTML output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; genhtml kernel.info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Point the web browser of your choice to the resulting index.html file.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;An example of how to access coverage data for a user space program&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Requirements: compile the program in question using GCC with the options -fprofile-arcs and -ftest-coverage. During linking, make sure to specify -lgcov or -coverage.&lt;/p&gt; &#xA;&lt;p&gt;Assuming the compile directory is called &#34;appdir&#34;, do the following:&lt;/p&gt; &#xA;&lt;p&gt;a) Resetting counters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; lcov --directory appdir --zerocounters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;b) Capturing the current coverage state to a file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; lcov --directory appdir --capture --output-file app.info&#xA;&#xA; Note that this step only works after the application has&#xA; been started and stopped at least once. Otherwise lcov will&#xA; abort with an error mentioning that there are no data/.gcda files.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;c) Getting HTML output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; genhtml app.info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;d) Generating a differential coverage report&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; See the examples in .../tests/gendiffcov.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Point the web browser of your choice to the resulting index.html file.&lt;/p&gt; &#xA;&lt;p&gt;Please note that independently of where the application is installed or from which directory it is run, the --directory statement needs to point to the directory in which the application was compiled.&lt;/p&gt; &#xA;&lt;p&gt;For further information on the gcc profiling mechanism, please also consult the gcov man page.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;New features (compared to lcov 1.16):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;New features and capabilities fall into 7 major categories:&lt;/p&gt; &#xA;&lt;p&gt;a) Categorization&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; This refers primarily to differentical coverage categorization as&#xA; well as date- and owner-binning.  See https://arxiv.org/abs/2008.07947&#xA; or https://ieeexplore.ieee.org/document/9438597 for a detailed&#xA; description of the concepts.&#xA;&#xA; Differential categorization and binning are orthogonal in the sense&#xA; that you can generate differential report without binning as well&#xA; as &#39;vanilla&#39; coverage reports with binning.  See the above papers&#xA; and the genhtml man page for details.&#xA;&#xA; Related options:&#xA;    --baseline-file, --diff-file, --annotate-script, --date-bins,&#xA;    --new-file-as-baseline, --elide-path-mismtach&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;b) Error handling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; A generic - but very simple - error handler has been added to the&#xA; lcov tool suite.  The error handler is used to report exceptions,&#xA; and provides a mechanism for the user to ignore the particular&#xA; message if desired.&#xA; See the genhtml/lcov/geninfo man pages for details.&#xA;&#xA; Note that some errors are unrecoverable - and cannot be suppressed or&#xA; ignored.&#xA;&#xA; Related options:  --ignore-error, --keep-going&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;c) Navigation and display:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Navigation aids such as hyperlinks to the first uncovered region,&#xA; to the next uncovered region, etc. have been implemented.  Similarly,&#xA; new tables, new columns, and new links between tables enable the&#xA; user to identify the author of particular code (covered or not&#xA; covered), as well as the time period when the code was written.&#xA;&#xA; Collectively, these features help the user to quickly identify the&#xA; cause of code coverage issues, and to then decide what to do.&#xA;&#xA; An option to generate a &#39;hierarchical&#39; coverage report (which follows&#xA; the source code directory structure) or &#39;flat&#39; (all files in top level&#xA; of two-level report) as well as various other small features (tooltip&#xA; popups, user-specified HTML header, footer, and table labels, etc.) are&#xA; also available.&#xA;&#xA; See the genhtml man page for some details, as well as the&#xA; &#39;gendiffcov/simple&#39; testcases for some examples.&#xA;&#xA;  Related options:&#xA;      --baseline-title, --baseline-date, --current-date, --flat, --hierarchical,&#xA;      --show-owners, --show-noncode, --show-navigation, --show-proportion,&#xA;      --suppress-aliases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;d) Data manipulation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Filters are used to suppress or remove certain coverage artifacts -&#xA; for example, branches generated by the compiler (e.g., for exception&#xA; handling).  These artifacts can overwhelm the user code and obscure&#xA; coverage features that are interesting to the user.&#xA;&#xA; Other options are used to focus on or to exclude certain sections&#xA; of code, as well as to do regexp replacement of file names.&#xA; (Path munging is useful primarily when the build structure does&#xA; not exactly match the layout in your revision control system; this&#xA; is common in large projects with reusable components.)&#xA;&#xA; See the lcov/geninfo/genhtml man pages for a detailed description of&#xA; the available filters and manipulation features.&#xA;&#xA; Related options:&#xA;    --include, --exclude, --erase-functions, --omit-lines,&#xA;    --substitute, --filter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;e) Callbacks/customization&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; The user can supply callbacks which are used to:&#xA;&#xA;    i) interface with the revision control system&#xA;       Sample scripts:&#xA;         - Perforce:  see &#39;p4diff&#39; and &#39;p4annotate&#39;&#xA;         - Git: see &#39;gitdiff&#39; and &#39;gitblame&#39;&#xA;    ii) verify that source code versions are compatible, and&#xA;        Sample scripts: see &#39;get_signature&#39;, &#39;getp4version&#39;&#xA;    iii) enforce a desired code coverage criteria&#xA;         Sample script: criteria&#xA;&#xA; See the genhtml/lcov/geninfo man pages for details.&#xA;&#xA; Note that the various sample scripts are found in the source code &#39;bin&#39;&#xA; directory, but are installed in the $LCOV_HOME/share/lcov/support-scripts&#xA; directory of the release.&#xA;&#xA; Related options:&#xA;   --annotate-script, --criteria-script, --version-script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;f) Performance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; lcov/genhtml/geninfo have been refactored to parallelize computation&#xA; across multiple cores, if requested.&#xA; In general, this provides speedup that is nearly linear in the number&#xA; of cores.&#xA; There is also an option to throttle parallelism to not exceed peak&#xA; memory consumption contraints, as well as options to enable simple&#xA; profile data collection - so you can see where time in going and&#xA; thus to hint at potential optimizations.  The &#39;spreadsheet.py&#39;&#xA; script can be used to view generated profile data..&#xA;&#xA; See the genhtml/lcov/geninfo man pages for details&#xA;&#xA; Related options: --parallel, --memory, --profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;g) Language support&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Added &#39;py2lcov&#39; script, which translates python Coverage.py XML data&#xA; to lcov format.&#xA;&#xA; See the Coverage.py documentation at https://coveerage.readthedocs.io,&#xA; as well as &#34;.../py2lcov --help&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In general, the new features and options are implemented uniformly in lcov, genhtml, and geninfo. Most of the features can be enabled/disabled using either command line options or by setting defaults in your &#39;lcovrc&#39; file. See the lcovrc man page for details.&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Questions and comments&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;See the included man pages for more information on how to use the LCOV tools.&lt;/p&gt; &#xA;&lt;p&gt;In case of further questions, feel free to open a new issue using the issue tracker on the LCOV code repository site at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/linux-test-project/lcov&#34;&gt;https://github.com/linux-test-project/lcov&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jjn1056/CatalystX-Example-Checklist</title>
    <updated>2023-03-05T01:57:35Z</updated>
    <id>tag:github.com,2023-03-05:/jjn1056/CatalystX-Example-Checklist</id>
    <link href="https://github.com/jjn1056/CatalystX-Example-Checklist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Social Checklist Example application using Perl, Catalyst, DBIx::Class and related Modern Perl Tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;CatalystX::Example::Checklist - Social Checklists&lt;/p&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;This is a sample application designed to demo &lt;a href=&#34;http://search.cpan.org/perldoc?Catalyst&#34;&gt;Catalyst&lt;/a&gt;, &lt;a href=&#34;http://search.cpan.org/perldoc?DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt; and related software. It is designed for learning.&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;The following modules or resources may be of interest.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://search.cpan.org/perldoc?DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt;, &lt;a href=&#34;http://search.cpan.org/perldoc?Catalyst::Runtime&#34;&gt;Catalyst::Runtime&lt;/a&gt;, &lt;a href=&#34;http://search.cpan.org/perldoc?Test::Most&#34;&gt;Test::Most&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AUTHOR&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;John Napiorkowski C&amp;lt;&amp;lt; &amp;lt;jjnapiork@cpan.org&amp;gt; &amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;COPYRIGHT &amp;amp; LICENSE&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2013, John Napiorkowski C&amp;lt;&amp;lt; &amp;lt;jjnapiork@cpan.org&amp;gt; &amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kamipo/dbix-class-timestamp-auto</title>
    <updated>2023-03-05T01:57:35Z</updated>
    <id>tag:github.com,2023-03-05:/kamipo/dbix-class-timestamp-auto</id>
    <link href="https://github.com/kamipo/dbix-class-timestamp-auto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is Perl module DBIx::Class::TimeStamp::Auto.&lt;/p&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;DBIx::Class::TimeStamp::Auto installation is straightforward. If your CPAN shell is set up, you should just be able to do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cpan DBIx::Class::TimeStamp::Auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download it, unpack it, then build it as per the usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% perl Makefile.PL&#xA;% make &amp;amp;&amp;amp; make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DOCUMENTATION&lt;/p&gt; &#xA;&lt;p&gt;DBIx::Class::TimeStamp::Auto documentation is available as in POD. So you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% perldoc DBIx::Class::TimeStamp::Auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to read the documentation online with your favorite pager.&lt;/p&gt; &#xA;&lt;p&gt;Ryuta Kamizono&lt;/p&gt;</summary>
  </entry>
</feed>