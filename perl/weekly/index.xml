<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Perl Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-25T02:02:49Z</updated>
  <subtitle>Weekly Trending of Perl in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>percona/percona-toolkit</title>
    <updated>2023-06-25T02:02:49Z</updated>
    <id>tag:github.com,2023-06-25:/percona/percona-toolkit</id>
    <link href="https://github.com/percona/percona-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Percona Toolkit: a collection of advanced open source command-line tools.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Percona Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cla-assistant.percona.com/percona/percona-toolkit&#34;&gt;&lt;img src=&#34;https://cla-assistant.percona.com/readme/badge/percona/percona-toolkit&#34; alt=&#34;CLA assistant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Percona Toolkit&lt;/em&gt; is a collection of advanced command-line tools used by &lt;a href=&#34;http://www.percona.com/&#34;&gt;Percona&lt;/a&gt; support staff to perform a variety of MySQL and system tasks that are too difficult or complex to perform manually.&lt;/p&gt; &#xA;&lt;p&gt;These tools are ideal alternatives to private or &#34;one-off&#34; scripts because they are professionally developed, formally tested, and fully documented. They are also fully self-contained, so installation is quick and easy and no libraries are installed.&lt;/p&gt; &#xA;&lt;p&gt;Percona Toolkit is developed and supported by Percona Inc. For more information and other free, open-source software developed by Percona, visit &lt;a href=&#34;http://www.percona.com/software/&#34;&gt;http://www.percona.com/software/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;To install all tools, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl Makefile.PL&#xA;make&#xA;make test&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You probably need to be root to &lt;code&gt;make install&lt;/code&gt;. On most systems, the tools are installed in /usr/local/bin. See the INSTALL file for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;man percona-toolkit&lt;/code&gt; to see a list of installed tools, then &lt;code&gt;man tool&lt;/code&gt; to read the embedded documentation for a specific tool. You can also read the documentation online at &lt;a href=&#34;http://www.percona.com/software/percona-toolkit/&#34;&gt;http://www.percona.com/software/percona-toolkit/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>os-autoinst/openQA</title>
    <updated>2023-06-25T02:02:49Z</updated>
    <id>tag:github.com,2023-06-25:/os-autoinst/openQA</id>
    <link href="https://github.com/os-autoinst/openQA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;openQA web-frontend, scheduler and tools.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openQA&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://codecov.io/gh/os-autoinst/openQA&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/os-autoinst/openQA/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://circleci.com/gh/os-autoinst/openQA/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/os-autoinst/openQA/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://openqa.opensuse.org/tests/latest?arch=x86_64&amp;amp;distri=openqa&amp;amp;flavor=dev&amp;amp;machine=64bit-2G&amp;amp;test=openqa_install%2Bpublish&amp;amp;version=Tumbleweed&#34;&gt;&lt;img src=&#34;https://openqa.opensuse.org/tests/latest/badge?arch=x86_64&amp;amp;distri=openqa&amp;amp;flavor=dev&amp;amp;machine=64bit-2G&amp;amp;test=openqa_install%2Bpublish&amp;amp;version=Tumbleweed&#34; alt=&#34;badge?arch=x86 64&amp;amp;distri=openqa&amp;amp;flavor=dev&amp;amp;machine=64bit 2G&amp;amp;test=openqa install%2Bpublish&amp;amp;version=Tumbleweed&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;openQA is a testing framework that allows you to test GUI applications on one hand and bootloader and kernel on the other. In both cases, it is difficult to script tests and verify the output. Output can be a popup window or it can be an error in early boot even before init is executed.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Therefore openQA runs virtual machines and closely monitors their state and runs tests on them.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The testing framework can be divided in two parts. The one that is hosted in this repository contains the web frontend and management logic (test scheduling, management, high-level API, …​)&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The other part that you need to run openQA is the OS-autoinst test engine that is hosted in a separate &lt;a href=&#34;https://github.com/os-autoinst/os-autoinst&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_getting_started&#34;&gt;Getting started&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The project’s information is organized into four basic documents. As a first step, read the &lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/openQA/master/docs/GettingStarted.asciidoc&#34;&gt;Starter Guide&lt;/a&gt; and then, if needed, proceed to the &lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/openQA/master/docs/Installing.asciidoc&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;For users of the openQA web interface or the REST API consult &lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/openQA/master/docs/UsersGuide.asciidoc&#34;&gt;Users Guide&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;If you are interested in writing tests using openQA read the &lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/openQA/master/docs/WritingTests.asciidoc&#34;&gt;Tests Developer Guide&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_contributing&#34;&gt;Contributing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div id=&#34;getting_involved&#34; class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;If you are interested in contributing to openQA itself, check the &lt;a href=&#34;https://raw.githubusercontent.com/os-autoinst/openQA/master/docs/Contributing.asciidoc&#34;&gt;Developer Guide&lt;/a&gt;, write your code and send a pull request ;-)&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_issue_trackers_and_support&#34;&gt;Issue trackers and support&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Our main issue tracker is at &lt;a href=&#34;https://progress.opensuse.org/projects/openqav3&#34;&gt;openQAv3 project&lt;/a&gt; in openSUSE’s project management tool. This Redmine instance is used to coordinate the main development effort organizing the existing issues (bugs and desired features) into &#39;target versions&#39;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Find contact details and meet developers over &lt;a href=&#34;http://open.qa/contact/&#34;&gt;our contact page&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_releases&#34;&gt;Releases&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;openQA is developed on a continuous base where every commit in the git master branch is considered stable and a valid and installable version. The old tags on github are therefore misleading.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>hs-hq/Betty</title>
    <updated>2023-06-25T02:02:49Z</updated>
    <id>tag:github.com,2023-06-25:/hs-hq/Betty</id>
    <link href="https://github.com/hs-hq/Betty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Holberton-style C code checker written in Perl&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Betty&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/holbertonschool/Betty&#34;&gt;&lt;img src=&#34;https://travis-ci.org/holbertonschool/Betty.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Run the script &lt;code&gt;install.sh&lt;/code&gt; with &lt;strong&gt;sudo privileges&lt;/strong&gt; to install &lt;code&gt;betty-style&lt;/code&gt; and &lt;code&gt;betty-doc&lt;/code&gt; on your computer, along with the following manuals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;betty(1)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;betty-style(1)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;betty-doc(1)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Please visit the &lt;a href=&#34;https://github.com/holbertonschool/Betty/wiki&#34;&gt;Betty Wiki&lt;/a&gt; for the full specifications of Betty coding and documentation styles.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also find some references and some tools for common text editors such as Emacs and Atom.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to check if your code/doc fits the Betty Style (mostly inspired from the Linux Kernel style):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellSession&#34;&gt;betty-style file1 [file2 [file3 [...]]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellSession&#34;&gt;betty-doc file1 [file2 [file3 [...]]]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>